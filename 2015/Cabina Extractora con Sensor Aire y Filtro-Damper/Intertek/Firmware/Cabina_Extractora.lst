CCS PCH C Compiler, Version 4.104, 5967               25-jun-15 08:53

               Filename: E:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2015\Cabina Extractora con Sensor Aire y Filtro\Firmware\Cabina_Extractora.lst

               ROM used: 26912 bytes (82%)
                         Largest free fragment is 5852
               RAM used: 263 (13%) at main() level
                         314 (15%) worst case
               Stack:    12 worst case (6 in main + 6 for interrupts)

*
0000:  GOTO   2652
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   042E
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   0312
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV3,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=24000000) 
*
00B6:  MOVLW  01
00B8:  MOVWF  FEA
00BA:  MOVLW  32
00BC:  MOVWF  FE9
00BE:  MOVF   FEF,W
00C0:  BZ    00DE
00C2:  MOVLW  07
00C4:  MOVWF  01
00C6:  CLRF   00
00C8:  DECFSZ 00,F
00CA:  BRA    00C8
00CC:  DECFSZ 01,F
00CE:  BRA    00C6
00D0:  MOVLW  C7
00D2:  MOVWF  00
00D4:  DECFSZ 00,F
00D6:  BRA    00D4
00D8:  NOP   
00DA:  DECFSZ FEF,F
00DC:  BRA    00C2
00DE:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
0104:  MOVLW  F0
0106:  MOVWF  F95
....................       lcd.rw = 1; 
0108:  BSF    F83.0
....................       delay_cycles(1); 
010A:  NOP   
....................       lcd.enable = 1; 
010C:  BSF    F83.2
....................       delay_cycles(1); 
010E:  NOP   
....................       high = lcd.data; 
0110:  SWAPF  F83,W
0112:  ANDLW  0F
0114:  MOVLB  1
0116:  MOVWF  x38
....................       lcd.enable = 0; 
0118:  BCF    F83.2
....................       delay_cycles(1); 
011A:  NOP   
....................       lcd.enable = 1; 
011C:  BSF    F83.2
....................       delay_us(1); 
011E:  BRA    0120
0120:  BRA    0122
0122:  BRA    0124
....................       low = lcd.data; 
0124:  SWAPF  F83,W
0126:  ANDLW  0F
0128:  MOVWF  x37
....................       lcd.enable = 0; 
012A:  BCF    F83.2
....................       set_tris_d(LCD_WRITE); 
012C:  MOVLW  00
012E:  MOVWF  F95
....................       return( (high<<4) | low); 
0130:  SWAPF  x38,W
0132:  MOVWF  00
0134:  MOVLW  F0
0136:  ANDWF  00,F
0138:  MOVF   00,W
013A:  IORWF  x37,W
013C:  MOVWF  01
.................... } 
013E:  MOVLB  0
0140:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00E0:  MOVLB  1
00E2:  SWAPF  x38,W
00E4:  ANDLW  F0
00E6:  MOVWF  00
00E8:  MOVLW  0F
00EA:  ANDWF  F83,W
00EC:  IORWF  00,W
00EE:  MOVWF  F83
....................       delay_cycles(1); 
00F0:  NOP   
....................       lcd.enable = 1; 
00F2:  BSF    F83.2
....................       delay_us(2); 
00F4:  MOVLW  03
00F6:  MOVWF  00
00F8:  DECFSZ 00,F
00FA:  BRA    00F8
00FC:  BRA    00FE
....................       lcd.enable = 0; 
00FE:  BCF    F83.2
.................... } 
0100:  MOVLB  0
0102:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
0142:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0144:  RCALL  0104
0146:  MOVFF  01,137
014A:  MOVLB  1
014C:  BTFSS  01.7
014E:  BRA    0154
0150:  MOVLB  0
0152:  BRA    0144
....................       lcd.rs = address; 
0154:  BTFSS  x35.0
0156:  BCF    F83.1
0158:  BTFSC  x35.0
015A:  BSF    F83.1
....................       delay_cycles(1); 
015C:  NOP   
....................       lcd.rw = 0; 
015E:  BCF    F83.0
....................       delay_cycles(1); 
0160:  NOP   
....................       lcd.enable = 0; 
0162:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0164:  SWAPF  x36,W
0166:  MOVWF  x37
0168:  MOVLW  0F
016A:  ANDWF  x37,F
016C:  MOVFF  137,138
0170:  MOVLB  0
0172:  RCALL  00E0
....................       lcd_send_nibble(n & 0xf); 
0174:  MOVLB  1
0176:  MOVF   x36,W
0178:  ANDLW  0F
017A:  MOVWF  x37
017C:  MOVWF  x38
017E:  MOVLB  0
0180:  RCALL  00E0
.................... } 
0182:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0184:  MOVLW  00
0186:  MOVWF  F95
....................     lcd.rs = 0; 
0188:  BCF    F83.1
....................     lcd.rw = 0; 
018A:  BCF    F83.0
....................     lcd.enable = 0; 
018C:  BCF    F83.2
....................     delay_ms(15); 
018E:  MOVLW  0F
0190:  MOVLB  1
0192:  MOVWF  x32
0194:  MOVLB  0
0196:  RCALL  00B6
....................     for(i=1;i<=3;++i) { 
0198:  MOVLW  01
019A:  MOVLB  1
019C:  MOVWF  x2F
019E:  MOVF   x2F,W
01A0:  SUBLW  03
01A2:  BNC   01BC
....................        lcd_send_nibble(3); 
01A4:  MOVLW  03
01A6:  MOVWF  x38
01A8:  MOVLB  0
01AA:  RCALL  00E0
....................        delay_ms(5); 
01AC:  MOVLW  05
01AE:  MOVLB  1
01B0:  MOVWF  x32
01B2:  MOVLB  0
01B4:  RCALL  00B6
....................     } 
01B6:  MOVLB  1
01B8:  INCF   x2F,F
01BA:  BRA    019E
....................     lcd_send_nibble(2); 
01BC:  MOVLW  02
01BE:  MOVWF  x38
01C0:  MOVLB  0
01C2:  RCALL  00E0
....................     for(i=0;i<=3;++i) 
01C4:  MOVLB  1
01C6:  CLRF   x2F
01C8:  MOVF   x2F,W
01CA:  SUBLW  03
01CC:  BNC   01F2
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
01CE:  CLRF   03
01D0:  MOVF   x2F,W
01D2:  MOVFF  FF2,130
01D6:  BCF    FF2.7
01D8:  MOVLB  0
01DA:  RCALL  00A2
01DC:  MOVLB  1
01DE:  BTFSC  x30.7
01E0:  BSF    FF2.7
01E2:  MOVWF  x30
01E4:  CLRF   x35
01E6:  MOVWF  x36
01E8:  MOVLB  0
01EA:  RCALL  0142
01EC:  MOVLB  1
01EE:  INCF   x2F,F
01F0:  BRA    01C8
.................... } 
01F2:  MOVLB  0
01F4:  GOTO   0334 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
020C:  MOVLW  01
020E:  MOVLB  1
0210:  SUBWF  x33,W
0212:  ADDLW  FC
0214:  BC    0240
0216:  ADDLW  04
0218:  MOVLB  0
021A:  GOTO   0252
....................      case 1 : address=0x80;break; 
021E:  MOVLW  80
0220:  MOVLB  1
0222:  MOVWF  x34
0224:  BRA    0240
....................      case 2 : address=0xc0;break; 
0226:  MOVLW  C0
0228:  MOVLB  1
022A:  MOVWF  x34
022C:  BRA    0240
....................      case 3 : address=0x94;break; 
022E:  MOVLW  94
0230:  MOVLB  1
0232:  MOVWF  x34
0234:  BRA    0240
....................      case 4 : address=0xd4;break; 
0236:  MOVLW  D4
0238:  MOVLB  1
023A:  MOVWF  x34
023C:  BRA    0240
023E:  MOVLB  1
....................    } 
....................    address+=x-1; 
0240:  MOVLW  01
0242:  SUBWF  x32,W
0244:  ADDWF  x34,F
....................    lcd_send_byte(0,address); 
0246:  CLRF   x35
0248:  MOVFF  134,136
024C:  MOVLB  0
024E:  RCALL  0142
.................... } 
0250:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0286:  MOVLB  1
0288:  MOVF   x31,W
028A:  SUBLW  F1
028C:  BNZ   0292
....................     c=238; 
028E:  MOVLW  EE
0290:  MOVWF  x31
....................    switch (c) { 
0292:  MOVF   x31,W
0294:  XORLW  0C
0296:  MOVLB  0
0298:  BZ    02A4
029A:  XORLW  06
029C:  BZ    02C0
029E:  XORLW  02
02A0:  BZ    02D2
02A2:  BRA    02E0
....................      case '\f'   : lcd_send_byte(0,1); 
02A4:  MOVLB  1
02A6:  CLRF   x35
02A8:  MOVLW  01
02AA:  MOVWF  x36
02AC:  MOVLB  0
02AE:  RCALL  0142
....................                    lcdline=1; 
02B0:  MOVLW  01
02B2:  MOVWF  17
....................                    delay_ms(2); 
02B4:  MOVLW  02
02B6:  MOVLB  1
02B8:  MOVWF  x32
02BA:  MOVLB  0
02BC:  RCALL  00B6
....................                                            break; 
02BE:  BRA    02F0
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02C0:  INCF   17,F
02C2:  MOVLW  01
02C4:  MOVLB  1
02C6:  MOVWF  x32
02C8:  MOVFF  17,133
02CC:  MOVLB  0
02CE:  RCALL  020C
02D0:  BRA    02F0
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02D2:  MOVLB  1
02D4:  CLRF   x35
02D6:  MOVLW  10
02D8:  MOVWF  x36
02DA:  MOVLB  0
02DC:  RCALL  0142
02DE:  BRA    02F0
....................      default     : lcd_send_byte(1,c);     break; 
02E0:  MOVLW  01
02E2:  MOVLB  1
02E4:  MOVWF  x35
02E6:  MOVFF  131,136
02EA:  MOVLB  0
02EC:  RCALL  0142
02EE:  BRA    02F0
....................    } 
.................... } 
02F0:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
199C:  MOVFF  108,10C
19A0:  MOVFF  107,10B
19A4:  MOVFF  106,10A
19A8:  MOVFF  105,109
....................  
....................    if (y != 1.0) 
19AC:  MOVFF  10C,11D
19B0:  MOVFF  10B,11C
19B4:  MOVFF  10A,11B
19B8:  MOVFF  109,11A
19BC:  MOVLB  1
19BE:  CLRF   x21
19C0:  CLRF   x20
19C2:  CLRF   x1F
19C4:  MOVLW  7F
19C6:  MOVWF  x1E
19C8:  MOVLB  0
19CA:  RCALL  182C
19CC:  BTFSC  FD8.2
19CE:  BRA    1E50
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
19D0:  MOVLW  01
19D2:  MOVLB  1
19D4:  MOVWF  x1B
19D6:  MOVLW  09
19D8:  MOVWF  FE9
19DA:  MOVFF  11B,FEA
19DE:  MOVLW  7E
19E0:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
19E2:  BSF    FD8.1
19E4:  MOVFF  10C,121
19E8:  MOVFF  10B,120
19EC:  MOVFF  10A,11F
19F0:  MOVFF  109,11E
19F4:  CLRF   x25
19F6:  CLRF   x24
19F8:  CLRF   x23
19FA:  MOVLW  7F
19FC:  MOVWF  x22
19FE:  MOVLB  0
1A00:  CALL   0DEA
1A04:  MOVFF  00,11A
1A08:  MOVFF  01,11B
1A0C:  MOVFF  02,11C
1A10:  MOVFF  03,11D
1A14:  BCF    FD8.1
1A16:  MOVFF  10C,121
1A1A:  MOVFF  10B,120
1A1E:  MOVFF  10A,11F
1A22:  MOVFF  109,11E
1A26:  MOVLB  1
1A28:  CLRF   x25
1A2A:  CLRF   x24
1A2C:  CLRF   x23
1A2E:  MOVLW  7F
1A30:  MOVWF  x22
1A32:  MOVLB  0
1A34:  CALL   0DEA
1A38:  MOVFF  11D,121
1A3C:  MOVFF  11C,120
1A40:  MOVFF  11B,11F
1A44:  MOVFF  11A,11E
1A48:  MOVFF  03,125
1A4C:  MOVFF  02,124
1A50:  MOVFF  01,123
1A54:  MOVFF  00,122
1A58:  CALL   0C8C
1A5C:  MOVFF  03,10C
1A60:  MOVFF  02,10B
1A64:  MOVFF  01,10A
1A68:  MOVFF  00,109
....................  
....................       y2=y*y; 
1A6C:  MOVFF  10C,11D
1A70:  MOVFF  10B,11C
1A74:  MOVFF  10A,11B
1A78:  MOVFF  109,11A
1A7C:  MOVFF  10C,121
1A80:  MOVFF  10B,120
1A84:  MOVFF  10A,11F
1A88:  MOVFF  109,11E
1A8C:  RCALL  1490
1A8E:  MOVFF  03,118
1A92:  MOVFF  02,117
1A96:  MOVFF  01,116
1A9A:  MOVFF  00,115
....................  
....................       res = pl[0]*y2 + pl[1]; 
1A9E:  MOVLW  BC
1AA0:  MOVLB  1
1AA2:  MOVWF  x1D
1AA4:  MOVLW  24
1AA6:  MOVWF  x1C
1AA8:  MOVLW  67
1AAA:  MOVWF  x1B
1AAC:  MOVLW  7D
1AAE:  MOVWF  x1A
1AB0:  MOVFF  118,121
1AB4:  MOVFF  117,120
1AB8:  MOVFF  116,11F
1ABC:  MOVFF  115,11E
1AC0:  MOVLB  0
1AC2:  RCALL  1490
1AC4:  MOVFF  00,11A
1AC8:  MOVFF  01,11B
1ACC:  MOVFF  02,11C
1AD0:  MOVFF  03,11D
1AD4:  BCF    FD8.1
1AD6:  MOVFF  03,121
1ADA:  MOVFF  02,120
1ADE:  MOVFF  01,11F
1AE2:  MOVFF  00,11E
1AE6:  MOVLW  E3
1AE8:  MOVLB  1
1AEA:  MOVWF  x25
1AEC:  MOVLW  E4
1AEE:  MOVWF  x24
1AF0:  MOVLW  90
1AF2:  MOVWF  x23
1AF4:  MOVLW  82
1AF6:  MOVWF  x22
1AF8:  MOVLB  0
1AFA:  CALL   0DEA
1AFE:  MOVFF  03,110
1B02:  MOVFF  02,10F
1B06:  MOVFF  01,10E
1B0A:  MOVFF  00,10D
....................       res = res*y2 + pl[2]; 
1B0E:  MOVFF  110,11D
1B12:  MOVFF  10F,11C
1B16:  MOVFF  10E,11B
1B1A:  MOVFF  10D,11A
1B1E:  MOVFF  118,121
1B22:  MOVFF  117,120
1B26:  MOVFF  116,11F
1B2A:  MOVFF  115,11E
1B2E:  RCALL  1490
1B30:  MOVFF  00,11A
1B34:  MOVFF  01,11B
1B38:  MOVFF  02,11C
1B3C:  MOVFF  03,11D
1B40:  BCF    FD8.1
1B42:  MOVFF  03,121
1B46:  MOVFF  02,120
1B4A:  MOVFF  01,11F
1B4E:  MOVFF  00,11E
1B52:  MOVLW  1C
1B54:  MOVLB  1
1B56:  MOVWF  x25
1B58:  MOVLW  87
1B5A:  MOVWF  x24
1B5C:  MOVLW  57
1B5E:  MOVWF  x23
1B60:  MOVLW  83
1B62:  MOVWF  x22
1B64:  MOVLB  0
1B66:  CALL   0DEA
1B6A:  MOVFF  03,110
1B6E:  MOVFF  02,10F
1B72:  MOVFF  01,10E
1B76:  MOVFF  00,10D
....................       res = res*y2 + pl[3]; 
1B7A:  MOVFF  110,11D
1B7E:  MOVFF  10F,11C
1B82:  MOVFF  10E,11B
1B86:  MOVFF  10D,11A
1B8A:  MOVFF  118,121
1B8E:  MOVFF  117,120
1B92:  MOVFF  116,11F
1B96:  MOVFF  115,11E
1B9A:  RCALL  1490
1B9C:  MOVFF  00,11A
1BA0:  MOVFF  01,11B
1BA4:  MOVFF  02,11C
1BA8:  MOVFF  03,11D
1BAC:  BCF    FD8.1
1BAE:  MOVFF  03,121
1BB2:  MOVFF  02,120
1BB6:  MOVFF  01,11F
1BBA:  MOVFF  00,11E
1BBE:  MOVLW  AB
1BC0:  MOVLB  1
1BC2:  MOVWF  x25
1BC4:  MOVLW  E1
1BC6:  MOVWF  x24
1BC8:  MOVLW  9E
1BCA:  MOVWF  x23
1BCC:  MOVLW  83
1BCE:  MOVWF  x22
1BD0:  MOVLB  0
1BD2:  CALL   0DEA
1BD6:  MOVFF  03,110
1BDA:  MOVFF  02,10F
1BDE:  MOVFF  01,10E
1BE2:  MOVFF  00,10D
....................  
....................       r = ql[0]*y2 + ql[1]; 
1BE6:  MOVLB  1
1BE8:  CLRF   x1D
1BEA:  CLRF   x1C
1BEC:  CLRF   x1B
1BEE:  MOVLW  7F
1BF0:  MOVWF  x1A
1BF2:  MOVFF  118,121
1BF6:  MOVFF  117,120
1BFA:  MOVFF  116,11F
1BFE:  MOVFF  115,11E
1C02:  MOVLB  0
1C04:  RCALL  1490
1C06:  MOVFF  00,11A
1C0A:  MOVFF  01,11B
1C0E:  MOVFF  02,11C
1C12:  MOVFF  03,11D
1C16:  BCF    FD8.1
1C18:  MOVFF  03,121
1C1C:  MOVFF  02,120
1C20:  MOVFF  01,11F
1C24:  MOVFF  00,11E
1C28:  MOVLW  B4
1C2A:  MOVLB  1
1C2C:  MOVWF  x25
1C2E:  MOVLW  2A
1C30:  MOVWF  x24
1C32:  MOVLW  82
1C34:  MOVWF  x23
1C36:  MOVWF  x22
1C38:  MOVLB  0
1C3A:  CALL   0DEA
1C3E:  MOVFF  03,114
1C42:  MOVFF  02,113
1C46:  MOVFF  01,112
1C4A:  MOVFF  00,111
....................       r = r*y2 + ql[2]; 
1C4E:  MOVFF  114,11D
1C52:  MOVFF  113,11C
1C56:  MOVFF  112,11B
1C5A:  MOVFF  111,11A
1C5E:  MOVFF  118,121
1C62:  MOVFF  117,120
1C66:  MOVFF  116,11F
1C6A:  MOVFF  115,11E
1C6E:  RCALL  1490
1C70:  MOVFF  00,11A
1C74:  MOVFF  01,11B
1C78:  MOVFF  02,11C
1C7C:  MOVFF  03,11D
1C80:  BCF    FD8.1
1C82:  MOVFF  03,121
1C86:  MOVFF  02,120
1C8A:  MOVFF  01,11F
1C8E:  MOVFF  00,11E
1C92:  MOVLW  80
1C94:  MOVLB  1
1C96:  MOVWF  x25
1C98:  MOVLW  3E
1C9A:  MOVWF  x24
1C9C:  MOVLW  06
1C9E:  MOVWF  x23
1CA0:  MOVLW  83
1CA2:  MOVWF  x22
1CA4:  MOVLB  0
1CA6:  CALL   0DEA
1CAA:  MOVFF  03,114
1CAE:  MOVFF  02,113
1CB2:  MOVFF  01,112
1CB6:  MOVFF  00,111
....................       r = r*y2 + ql[3]; 
1CBA:  MOVFF  114,11D
1CBE:  MOVFF  113,11C
1CC2:  MOVFF  112,11B
1CC6:  MOVFF  111,11A
1CCA:  MOVFF  118,121
1CCE:  MOVFF  117,120
1CD2:  MOVFF  116,11F
1CD6:  MOVFF  115,11E
1CDA:  CALL   1490
1CDE:  MOVFF  00,11A
1CE2:  MOVFF  01,11B
1CE6:  MOVFF  02,11C
1CEA:  MOVFF  03,11D
1CEE:  BCF    FD8.1
1CF0:  MOVFF  03,121
1CF4:  MOVFF  02,120
1CF8:  MOVFF  01,11F
1CFC:  MOVFF  00,11E
1D00:  MOVLW  AB
1D02:  MOVLB  1
1D04:  MOVWF  x25
1D06:  MOVLW  E1
1D08:  MOVWF  x24
1D0A:  MOVLW  9E
1D0C:  MOVWF  x23
1D0E:  MOVLW  82
1D10:  MOVWF  x22
1D12:  MOVLB  0
1D14:  CALL   0DEA
1D18:  MOVFF  03,114
1D1C:  MOVFF  02,113
1D20:  MOVFF  01,112
1D24:  MOVFF  00,111
....................  
....................       res = y*res/r; 
1D28:  MOVFF  10C,11D
1D2C:  MOVFF  10B,11C
1D30:  MOVFF  10A,11B
1D34:  MOVFF  109,11A
1D38:  MOVFF  110,121
1D3C:  MOVFF  10F,120
1D40:  MOVFF  10E,11F
1D44:  MOVFF  10D,11E
1D48:  CALL   1490
1D4C:  MOVFF  00,11A
1D50:  MOVFF  01,11B
1D54:  MOVFF  02,11C
1D58:  MOVFF  03,11D
1D5C:  MOVFF  03,121
1D60:  MOVFF  02,120
1D64:  MOVFF  01,11F
1D68:  MOVFF  00,11E
1D6C:  MOVFF  114,125
1D70:  MOVFF  113,124
1D74:  MOVFF  112,123
1D78:  MOVFF  111,122
1D7C:  CALL   0C8C
1D80:  MOVFF  03,110
1D84:  MOVFF  02,10F
1D88:  MOVFF  01,10E
1D8C:  MOVFF  00,10D
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1D90:  MOVLW  01
1D92:  MOVLB  1
1D94:  MOVWF  x1B
1D96:  MOVLW  05
1D98:  MOVWF  FE9
1D9A:  MOVFF  11B,FEA
1D9E:  MOVLW  7E
1DA0:  SUBWF  FEF,W
1DA2:  MOVWF  x19
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1DA4:  BTFSC  x19.7
1DA6:  BRA    1DAA
1DA8:  BRA    1DD2
....................          r = -(float32)-n; 
1DAA:  MOVLW  00
1DAC:  BSF    FD8.0
1DAE:  SUBFWB x19,W
1DB0:  CLRF   x1B
1DB2:  MOVWF  x1A
1DB4:  BTFSC  x1A.7
1DB6:  DECF   x1B,F
1DB8:  MOVLB  0
1DBA:  RCALL  194C
1DBC:  MOVFF  00,111
1DC0:  MOVF   01,W
1DC2:  XORLW  80
1DC4:  MOVLB  1
1DC6:  MOVWF  x12
1DC8:  MOVFF  02,113
1DCC:  MOVFF  03,114
....................       else 
1DD0:  BRA    1DF2
....................          r = (float32)n; 
1DD2:  CLRF   x1B
1DD4:  MOVFF  119,11A
1DD8:  BTFSC  x1A.7
1DDA:  DECF   x1B,F
1DDC:  MOVLB  0
1DDE:  RCALL  194C
1DE0:  MOVFF  03,114
1DE4:  MOVFF  02,113
1DE8:  MOVFF  01,112
1DEC:  MOVFF  00,111
1DF0:  MOVLB  1
....................  
....................       res += r*LN2; 
1DF2:  MOVFF  114,11D
1DF6:  MOVFF  113,11C
1DFA:  MOVFF  112,11B
1DFE:  MOVFF  111,11A
1E02:  MOVLW  18
1E04:  MOVWF  x21
1E06:  MOVLW  72
1E08:  MOVWF  x20
1E0A:  MOVLW  31
1E0C:  MOVWF  x1F
1E0E:  MOVLW  7E
1E10:  MOVWF  x1E
1E12:  MOVLB  0
1E14:  CALL   1490
1E18:  BCF    FD8.1
1E1A:  MOVFF  110,121
1E1E:  MOVFF  10F,120
1E22:  MOVFF  10E,11F
1E26:  MOVFF  10D,11E
1E2A:  MOVFF  03,125
1E2E:  MOVFF  02,124
1E32:  MOVFF  01,123
1E36:  MOVFF  00,122
1E3A:  CALL   0DEA
1E3E:  MOVFF  03,110
1E42:  MOVFF  02,10F
1E46:  MOVFF  01,10E
1E4A:  MOVFF  00,10D
....................    } 
....................  
....................    else 
1E4E:  BRA    1E5C
....................       res = 0.0; 
1E50:  MOVLB  1
1E52:  CLRF   x10
1E54:  CLRF   x0F
1E56:  CLRF   x0E
1E58:  CLRF   x0D
1E5A:  MOVLB  0
....................  
....................    return(res); 
1E5C:  MOVFF  10D,00
1E60:  MOVFF  10E,01
1E64:  MOVFF  10F,02
1E68:  MOVFF  110,03
.................... } 
1E6C:  GOTO   2048 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B5,1) 
.................... #define   Damper_off        output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Motor_on          output_bit(PIN_C0,1) 
.................... #define   Motor_off         output_bit(PIN_C0,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
18E2:  MOVLB  1
18E4:  RLCF   x04,W
18E6:  MOVWF  00
18E8:  RLCF   00,F
18EA:  MOVLW  FC
18EC:  ANDWF  00,F
18EE:  MOVFF  00,01
18F2:  MOVF   FC2,W
18F4:  ANDLW  C3
18F6:  IORWF  00,W
18F8:  MOVWF  FC2
18FA:  CLRF   16
18FC:  BTFSC  FF2.7
18FE:  BSF    16.7
1900:  BCF    FF2.7
1902:  MOVLW  0A
1904:  MOVWF  x32
1906:  MOVLB  0
1908:  CALL   00B6
190C:  BTFSC  16.7
190E:  BSF    FF2.7
1910:  BSF    FC2.1
1912:  BTFSC  FC2.1
1914:  BRA    1912
1916:  MOVFF  FC4,10A
191A:  MOVFF  FC3,109
191E:  MOVLB  0
1920:  CALL   0C56
1924:  MOVFF  03,108
1928:  MOVFF  02,107
192C:  MOVFF  01,106
1930:  MOVFF  00,105
1934:  MOVFF  105,00
1938:  MOVFF  106,01
193C:  MOVFF  107,02
1940:  MOVFF  108,03
.................... } 
1944:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
01F8:  MOVLB  1
01FA:  MOVF   x2F,F
01FC:  BNZ   0204
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
01FE:  BCF    F8B.1
0200:  BCF    F94.1
....................    } 
....................    else 
0202:  BRA    0208
....................    { 
....................       Pantalla_on; 
0204:  BSF    F8B.1
0206:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0208:  MOVLB  0
020A:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1E70:  MOVLB  1
1E72:  CLRF   x04
1E74:  MOVLB  0
1E76:  RCALL  18E2
1E78:  MOVFF  00,100
1E7C:  MOVFF  01,101
1E80:  MOVFF  02,102
1E84:  MOVFF  03,103
1E88:  MOVFF  03,11D
1E8C:  MOVFF  02,11C
1E90:  MOVFF  01,11B
1E94:  MOVFF  00,11A
1E98:  MOVLB  1
1E9A:  CLRF   x21
1E9C:  CLRF   x20
1E9E:  MOVLW  20
1EA0:  MOVWF  x1F
1EA2:  MOVLW  81
1EA4:  MOVWF  x1E
1EA6:  MOVLB  0
1EA8:  CALL   1490
1EAC:  MOVFF  00,100
1EB0:  MOVFF  01,101
1EB4:  MOVFF  02,102
1EB8:  MOVFF  03,103
1EBC:  MOVFF  03,121
1EC0:  MOVFF  02,120
1EC4:  MOVFF  01,11F
1EC8:  MOVFF  00,11E
1ECC:  MOVLB  1
1ECE:  CLRF   x25
1ED0:  MOVLW  C0
1ED2:  MOVWF  x24
1ED4:  MOVLW  7F
1ED6:  MOVWF  x23
1ED8:  MOVLW  88
1EDA:  MOVWF  x22
1EDC:  MOVLB  0
1EDE:  CALL   0C8C
1EE2:  MOVFF  03,76
1EE6:  MOVFF  02,75
1EEA:  MOVFF  01,74
1EEE:  MOVFF  00,73
....................     Voltaje1=sensores(1)*5/1023; 
1EF2:  MOVLW  01
1EF4:  MOVLB  1
1EF6:  MOVWF  x04
1EF8:  MOVLB  0
1EFA:  RCALL  18E2
1EFC:  MOVFF  00,100
1F00:  MOVFF  01,101
1F04:  MOVFF  02,102
1F08:  MOVFF  03,103
1F0C:  MOVFF  03,11D
1F10:  MOVFF  02,11C
1F14:  MOVFF  01,11B
1F18:  MOVFF  00,11A
1F1C:  MOVLB  1
1F1E:  CLRF   x21
1F20:  CLRF   x20
1F22:  MOVLW  20
1F24:  MOVWF  x1F
1F26:  MOVLW  81
1F28:  MOVWF  x1E
1F2A:  MOVLB  0
1F2C:  CALL   1490
1F30:  MOVFF  00,100
1F34:  MOVFF  01,101
1F38:  MOVFF  02,102
1F3C:  MOVFF  03,103
1F40:  MOVFF  03,121
1F44:  MOVFF  02,120
1F48:  MOVFF  01,11F
1F4C:  MOVFF  00,11E
1F50:  MOVLB  1
1F52:  CLRF   x25
1F54:  MOVLW  C0
1F56:  MOVWF  x24
1F58:  MOVLW  7F
1F5A:  MOVWF  x23
1F5C:  MOVLW  88
1F5E:  MOVWF  x22
1F60:  MOVLB  0
1F62:  CALL   0C8C
1F66:  MOVFF  03,7A
1F6A:  MOVFF  02,79
1F6E:  MOVFF  01,78
1F72:  MOVFF  00,77
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1F76:  MOVLB  1
1F78:  CLRF   x21
1F7A:  CLRF   x20
1F7C:  MOVLW  20
1F7E:  MOVWF  x1F
1F80:  MOVLW  81
1F82:  MOVWF  x1E
1F84:  MOVFF  7A,125
1F88:  MOVFF  79,124
1F8C:  MOVFF  78,123
1F90:  MOVFF  77,122
1F94:  MOVLB  0
1F96:  CALL   0C8C
1F9A:  MOVFF  00,100
1F9E:  MOVFF  01,101
1FA2:  MOVFF  02,102
1FA6:  MOVFF  03,103
1FAA:  BSF    FD8.1
1FAC:  MOVFF  03,121
1FB0:  MOVFF  02,120
1FB4:  MOVFF  01,11F
1FB8:  MOVFF  00,11E
1FBC:  MOVLB  1
1FBE:  CLRF   x25
1FC0:  CLRF   x24
1FC2:  CLRF   x23
1FC4:  MOVLW  7F
1FC6:  MOVWF  x22
1FC8:  MOVLB  0
1FCA:  CALL   0DEA
1FCE:  MOVFF  6E,121
1FD2:  MOVFF  6D,120
1FD6:  MOVFF  6C,11F
1FDA:  MOVFF  6B,11E
1FDE:  MOVFF  03,125
1FE2:  MOVFF  02,124
1FE6:  MOVFF  01,123
1FEA:  MOVFF  00,122
1FEE:  CALL   0C8C
1FF2:  MOVFF  03,72
1FF6:  MOVFF  02,71
1FFA:  MOVFF  01,70
1FFE:  MOVFF  00,6F
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
2002:  MOVFF  72,121
2006:  MOVFF  71,120
200A:  MOVFF  70,11F
200E:  MOVFF  6F,11E
2012:  MOVFF  5E,125
2016:  MOVFF  5D,124
201A:  MOVFF  5C,123
201E:  MOVFF  5B,122
2022:  CALL   0C8C
2026:  MOVFF  00,100
202A:  MOVFF  01,101
202E:  MOVFF  02,102
2032:  MOVFF  03,103
2036:  MOVFF  03,108
203A:  MOVFF  02,107
203E:  MOVFF  01,106
2042:  MOVFF  00,105
2046:  BRA    199C
2048:  MOVFF  00,100
204C:  MOVFF  01,101
2050:  MOVFF  02,102
2054:  MOVFF  03,103
2058:  MOVFF  03,121
205C:  MOVFF  02,120
2060:  MOVFF  01,11F
2064:  MOVFF  00,11E
2068:  MOVFF  5A,125
206C:  MOVFF  59,124
2070:  MOVFF  58,123
2074:  MOVFF  57,122
2078:  CALL   0C8C
207C:  MOVFF  00,100
2080:  MOVFF  01,101
2084:  MOVFF  02,102
2088:  MOVFF  03,103
208C:  MOVLB  1
208E:  CLRF   x21
2090:  CLRF   x20
2092:  CLRF   x1F
2094:  MOVLW  7F
2096:  MOVWF  x1E
2098:  MOVFF  62,125
209C:  MOVFF  61,124
20A0:  MOVFF  60,123
20A4:  MOVFF  5F,122
20A8:  MOVLB  0
20AA:  CALL   0C8C
20AE:  MOVFF  FEA,105
20B2:  MOVFF  FE9,104
20B6:  BCF    FD8.1
20B8:  MOVFF  103,121
20BC:  MOVFF  102,120
20C0:  MOVFF  101,11F
20C4:  MOVFF  100,11E
20C8:  MOVFF  03,125
20CC:  MOVFF  02,124
20D0:  MOVFF  01,123
20D4:  MOVFF  00,122
20D8:  CALL   0DEA
20DC:  MOVFF  105,FEA
20E0:  MOVFF  104,FE9
20E4:  MOVLB  1
20E6:  CLRF   x21
20E8:  CLRF   x20
20EA:  CLRF   x1F
20EC:  MOVLW  7F
20EE:  MOVWF  x1E
20F0:  MOVFF  03,125
20F4:  MOVFF  02,124
20F8:  MOVFF  01,123
20FC:  MOVFF  00,122
2100:  MOVLB  0
2102:  CALL   0C8C
2106:  MOVFF  03,66
210A:  MOVFF  02,65
210E:  MOVFF  01,64
2112:  MOVFF  00,63
....................     TC=TK-273.15; 
2116:  BSF    FD8.1
2118:  MOVFF  66,121
211C:  MOVFF  65,120
2120:  MOVFF  64,11F
2124:  MOVFF  63,11E
2128:  MOVLW  33
212A:  MOVLB  1
212C:  MOVWF  x25
212E:  MOVLW  93
2130:  MOVWF  x24
2132:  MOVLW  08
2134:  MOVWF  x23
2136:  MOVLW  87
2138:  MOVWF  x22
213A:  MOVLB  0
213C:  CALL   0DEA
2140:  MOVFF  03,6A
2144:  MOVFF  02,69
2148:  MOVFF  01,68
214C:  MOVFF  00,67
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
2150:  MOVF   2C,W
2152:  SUBLW  0A
2154:  BNZ   21B6
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
2156:  MOVLB  1
2158:  CLRF   x04
215A:  MOVLB  0
215C:  CALL   18E2
2160:  MOVFF  00,100
2164:  MOVFF  01,101
2168:  MOVFF  02,102
216C:  MOVFF  03,103
2170:  MOVFF  FEA,105
2174:  MOVFF  FE9,104
2178:  BCF    FD8.1
217A:  MOVFF  03,121
217E:  MOVFF  02,120
2182:  MOVFF  01,11F
2186:  MOVFF  00,11E
218A:  MOVFF  BE,125
218E:  MOVFF  BD,124
2192:  MOVFF  BC,123
2196:  MOVFF  BB,122
219A:  CALL   0DEA
219E:  MOVFF  105,FEA
21A2:  MOVFF  104,FE9
21A6:  MOVFF  03,9A
21AA:  MOVFF  02,99
21AE:  MOVFF  01,98
21B2:  MOVFF  00,97
....................     } 
....................     if(negativo==20) 
21B6:  MOVF   2C,W
21B8:  SUBLW  14
21BA:  BNZ   221C
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
21BC:  MOVLB  1
21BE:  CLRF   x04
21C0:  MOVLB  0
21C2:  CALL   18E2
21C6:  MOVFF  00,100
21CA:  MOVFF  01,101
21CE:  MOVFF  02,102
21D2:  MOVFF  03,103
21D6:  MOVFF  FEA,105
21DA:  MOVFF  FE9,104
21DE:  BSF    FD8.1
21E0:  MOVFF  03,121
21E4:  MOVFF  02,120
21E8:  MOVFF  01,11F
21EC:  MOVFF  00,11E
21F0:  MOVFF  BE,125
21F4:  MOVFF  BD,124
21F8:  MOVFF  BC,123
21FC:  MOVFF  BB,122
2200:  CALL   0DEA
2204:  MOVFF  105,FEA
2208:  MOVFF  104,FE9
220C:  MOVFF  03,9A
2210:  MOVFF  02,99
2214:  MOVFF  01,98
2218:  MOVFF  00,97
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
221C:  MOVFF  9A,11D
2220:  MOVFF  99,11C
2224:  MOVFF  98,11B
2228:  MOVFF  97,11A
222C:  MOVFF  9A,121
2230:  MOVFF  99,120
2234:  MOVFF  98,11F
2238:  MOVFF  97,11E
223C:  CALL   1490
2240:  MOVFF  03,9E
2244:  MOVFF  02,9D
2248:  MOVFF  01,9C
224C:  MOVFF  00,9B
....................     x_cubo=x_uno*x_cuadrado; 
2250:  MOVFF  9A,11D
2254:  MOVFF  99,11C
2258:  MOVFF  98,11B
225C:  MOVFF  97,11A
2260:  MOVFF  9E,121
2264:  MOVFF  9D,120
2268:  MOVFF  9C,11F
226C:  MOVFF  9B,11E
2270:  CALL   1490
2274:  MOVFF  03,A2
2278:  MOVFF  02,A1
227C:  MOVFF  01,A0
2280:  MOVFF  00,9F
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
2284:  MOVFF  A2,11D
2288:  MOVFF  A1,11C
228C:  MOVFF  A0,11B
2290:  MOVFF  9F,11A
2294:  MOVFF  7E,121
2298:  MOVFF  7D,120
229C:  MOVFF  7C,11F
22A0:  MOVFF  7B,11E
22A4:  CALL   1490
22A8:  MOVFF  00,100
22AC:  MOVFF  01,101
22B0:  MOVFF  02,102
22B4:  MOVFF  03,103
22B8:  MOVFF  9E,11D
22BC:  MOVFF  9D,11C
22C0:  MOVFF  9C,11B
22C4:  MOVFF  9B,11A
22C8:  MOVFF  82,121
22CC:  MOVFF  81,120
22D0:  MOVFF  80,11F
22D4:  MOVFF  7F,11E
22D8:  CALL   1490
22DC:  BCF    FD8.1
22DE:  MOVFF  103,121
22E2:  MOVFF  102,120
22E6:  MOVFF  101,11F
22EA:  MOVFF  100,11E
22EE:  MOVFF  03,125
22F2:  MOVFF  02,124
22F6:  MOVFF  01,123
22FA:  MOVFF  00,122
22FE:  CALL   0DEA
2302:  MOVFF  00,100
2306:  MOVFF  01,101
230A:  MOVFF  02,102
230E:  MOVFF  03,103
2312:  MOVFF  9A,11D
2316:  MOVFF  99,11C
231A:  MOVFF  98,11B
231E:  MOVFF  97,11A
2322:  MOVFF  86,121
2326:  MOVFF  85,120
232A:  MOVFF  84,11F
232E:  MOVFF  83,11E
2332:  CALL   1490
2336:  BCF    FD8.1
2338:  MOVFF  103,121
233C:  MOVFF  102,120
2340:  MOVFF  101,11F
2344:  MOVFF  100,11E
2348:  MOVFF  03,125
234C:  MOVFF  02,124
2350:  MOVFF  01,123
2354:  MOVFF  00,122
2358:  CALL   0DEA
235C:  MOVFF  00,100
2360:  MOVFF  01,101
2364:  MOVFF  02,102
2368:  MOVFF  03,103
236C:  BCF    FD8.1
236E:  MOVFF  03,121
2372:  MOVFF  02,120
2376:  MOVFF  01,11F
237A:  MOVFF  00,11E
237E:  MOVFF  8A,125
2382:  MOVFF  89,124
2386:  MOVFF  88,123
238A:  MOVFF  87,122
238E:  CALL   0DEA
2392:  MOVFF  03,B2
2396:  MOVFF  02,B1
239A:  MOVFF  01,B0
239E:  MOVFF  00,AF
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
23A2:  BSF    FD8.1
23A4:  MOVFF  B2,121
23A8:  MOVFF  B1,120
23AC:  MOVFF  B0,11F
23B0:  MOVFF  AF,11E
23B4:  MOVLW  0A
23B6:  MOVLB  1
23B8:  MOVWF  x25
23BA:  MOVLW  D7
23BC:  MOVWF  x24
23BE:  MOVLW  23
23C0:  MOVWF  x23
23C2:  MOVLW  7B
23C4:  MOVWF  x22
23C6:  MOVLB  0
23C8:  CALL   0DEA
23CC:  MOVFF  03,B2
23D0:  MOVFF  02,B1
23D4:  MOVFF  01,B0
23D8:  MOVFF  00,AF
....................     if(Velocidad<0.0) 
23DC:  MOVFF  B2,11D
23E0:  MOVFF  B1,11C
23E4:  MOVFF  B0,11B
23E8:  MOVFF  AF,11A
23EC:  MOVLB  1
23EE:  CLRF   x21
23F0:  CLRF   x20
23F2:  CLRF   x1F
23F4:  CLRF   x1E
23F6:  MOVLB  0
23F8:  CALL   182C
23FC:  BNC   2406
....................      {Velocidad=0.0;} 
23FE:  CLRF   xB2
2400:  CLRF   xB1
2402:  CLRF   xB0
2404:  CLRF   xAF
....................       
....................      if(l>=media) 
2406:  MOVF   xFF,W
2408:  SUBWF  28,W
240A:  BNC   240E
....................        {l=0;} 
240C:  CLRF   28
....................       
....................      promedio[l]=Velocidad;l++; 
240E:  MOVF   28,W
2410:  MULLW  04
2412:  MOVF   FF3,W
2414:  CLRF   03
2416:  ADDLW  CF
2418:  MOVWF  FE9
241A:  MOVLW  00
241C:  ADDWFC 03,W
241E:  MOVWF  FEA
2420:  MOVFF  AF,FEF
2424:  MOVFF  B0,FEC
2428:  MOVFF  B1,FEC
242C:  MOVFF  B2,FEC
2430:  INCF   28,F
....................      Flujo2=0; 
2432:  CLRF   x92
2434:  CLRF   x91
2436:  CLRF   x90
2438:  CLRF   x8F
....................         for(h=0;h<=(media-1);h++) 
243A:  CLRF   29
243C:  MOVLW  01
243E:  SUBWF  xFF,W
2440:  SUBWF  29,W
2442:  BZ    2446
2444:  BC    24B2
....................         { 
....................            Flujo2+=promedio[h]; 
2446:  MOVF   29,W
2448:  MULLW  04
244A:  MOVF   FF3,W
244C:  CLRF   03
244E:  ADDLW  CF
2450:  MOVWF  FE9
2452:  MOVLW  00
2454:  ADDWFC 03,W
2456:  MOVWF  FEA
2458:  MOVFF  FEF,00
245C:  MOVFF  FEC,01
2460:  MOVFF  FEC,02
2464:  MOVFF  FEC,03
2468:  MOVFF  FEA,101
246C:  MOVFF  FE9,100
2470:  BCF    FD8.1
2472:  MOVFF  92,121
2476:  MOVFF  91,120
247A:  MOVFF  90,11F
247E:  MOVFF  8F,11E
2482:  MOVFF  03,125
2486:  MOVFF  02,124
248A:  MOVFF  01,123
248E:  MOVFF  00,122
2492:  CALL   0DEA
2496:  MOVFF  101,FEA
249A:  MOVFF  100,FE9
249E:  MOVFF  03,92
24A2:  MOVFF  02,91
24A6:  MOVFF  01,90
24AA:  MOVFF  00,8F
....................         }  
24AE:  INCF   29,F
24B0:  BRA    243C
....................            Flujo2=(Flujo2/media)*Ajuste1;  
24B2:  MOVLB  1
24B4:  CLRF   x0A
24B6:  MOVFF  FF,109
24BA:  MOVLB  0
24BC:  CALL   0C56
24C0:  MOVFF  92,121
24C4:  MOVFF  91,120
24C8:  MOVFF  90,11F
24CC:  MOVFF  8F,11E
24D0:  MOVFF  03,125
24D4:  MOVFF  02,124
24D8:  MOVFF  01,123
24DC:  MOVFF  00,122
24E0:  CALL   0C8C
24E4:  MOVFF  00,100
24E8:  MOVFF  01,101
24EC:  MOVFF  02,102
24F0:  MOVFF  03,103
24F4:  MOVFF  03,11D
24F8:  MOVFF  02,11C
24FC:  MOVFF  01,11B
2500:  MOVFF  00,11A
2504:  MOVFF  C2,121
2508:  MOVFF  C1,120
250C:  MOVFF  C0,11F
2510:  MOVFF  BF,11E
2514:  CALL   1490
2518:  MOVFF  03,92
251C:  MOVFF  02,91
2520:  MOVFF  01,90
2524:  MOVFF  00,8F
....................            return Flujo2; 
2528:  MOVFF  8F,00
252C:  MOVFF  90,01
2530:  MOVFF  91,02
2534:  MOVFF  92,03
.................... } 
2538:  GOTO   6850 (RETURN)
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
253C:  MOVF   2D,W
253E:  SUBLW  14
2540:  BTFSS  FD8.2
2542:  BRA    2636
2544:  BTFSS  34.1
2546:  BRA    2636
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
2548:  BSF    FD8.1
254A:  MOVFF  45,121
254E:  MOVFF  44,120
2552:  MOVFF  43,11F
2556:  MOVFF  42,11E
255A:  MOVFF  8E,125
255E:  MOVFF  8D,124
2562:  MOVFF  8C,123
2566:  MOVFF  8B,122
256A:  CALL   0DEA
256E:  MOVFF  03,CE
2572:  MOVFF  02,CD
2576:  MOVFF  01,CC
257A:  MOVFF  00,CB
....................       if(error<0.2&&error>-0.2) 
257E:  MOVFF  CE,11D
2582:  MOVFF  CD,11C
2586:  MOVFF  CC,11B
258A:  MOVFF  CB,11A
258E:  MOVLW  CD
2590:  MOVLB  1
2592:  MOVWF  x21
2594:  MOVLW  CC
2596:  MOVWF  x20
2598:  MOVLW  4C
259A:  MOVWF  x1F
259C:  MOVLW  7C
259E:  MOVWF  x1E
25A0:  MOVLB  0
25A2:  CALL   182C
25A6:  BNC   25D2
25A8:  MOVLW  CD
25AA:  MOVLB  1
25AC:  MOVWF  x1D
25AE:  MOVLW  CC
25B0:  MOVWF  x1C
25B2:  MOVWF  x1B
25B4:  MOVLW  7C
25B6:  MOVWF  x1A
25B8:  MOVFF  CE,121
25BC:  MOVFF  CD,120
25C0:  MOVFF  CC,11F
25C4:  MOVFF  CB,11E
25C8:  MOVLB  0
25CA:  CALL   182C
25CE:  BNC   25D2
....................       {} 
....................       else 
25D0:  BRA    261E
....................       { 
....................          if(error>0.0) 
25D2:  MOVLB  1
25D4:  CLRF   x1D
25D6:  CLRF   x1C
25D8:  CLRF   x1B
25DA:  CLRF   x1A
25DC:  MOVFF  CE,121
25E0:  MOVFF  CD,120
25E4:  MOVFF  CC,11F
25E8:  MOVFF  CB,11E
25EC:  MOVLB  0
25EE:  CALL   182C
25F2:  BNC   25F8
....................          {tmp+=1;} 
25F4:  MOVLW  01
25F6:  ADDWF  2A,F
....................                 
....................          if(error<-0.0) 
25F8:  MOVFF  CE,11D
25FC:  MOVFF  CD,11C
2600:  MOVFF  CC,11B
2604:  MOVFF  CB,11A
2608:  MOVLB  1
260A:  CLRF   x21
260C:  CLRF   x20
260E:  CLRF   x1F
2610:  CLRF   x1E
2612:  MOVLB  0
2614:  CALL   182C
2618:  BNC   261E
....................          {tmp-=1;}   
261A:  MOVLW  01
261C:  SUBWF  2A,F
....................       } 
....................        
....................       if(tmp>251) 
261E:  MOVF   2A,W
2620:  SUBLW  FB
2622:  BC    2628
....................       {tmp=251;} 
2624:  MOVLW  FB
2626:  MOVWF  2A
....................       if(tmp<4)          
2628:  MOVF   2A,W
262A:  SUBLW  03
262C:  BNC   2632
....................       {tmp=4;}       
262E:  MOVLW  04
2630:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
2632:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Manual==20) 
2636:  MOVF   2E,W
2638:  SUBLW  14
263A:  BNZ   2644
....................    { 
....................       tmp=251; 
263C:  MOVLW  FB
263E:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
2640:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Semi==20) 
2644:  MOVF   2F,W
2646:  SUBLW  14
2648:  BNZ   264E
....................    { 
....................       set_pwm1_duty (ValorSemi); 
264A:  MOVFF  30,FBE
....................    } 
.................... } 
264E:  GOTO   6868 (RETURN)
....................  
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
*
0312:  BTFSC  35.4
0314:  BRA    03D0
....................       { 
....................       delay_ms(500); 
0316:  MOVLW  02
0318:  MOVLB  1
031A:  MOVWF  x2F
031C:  MOVLW  FA
031E:  MOVWF  x32
0320:  MOVLB  0
0322:  RCALL  00B6
0324:  MOVLB  1
0326:  DECFSZ x2F,F
0328:  BRA    031C
....................          if(input(PIN_B0)) 
032A:  BSF    F93.0
032C:  BTFSS  F81.0
032E:  BRA    03CE
....................          { 
....................             lcd_init(); 
0330:  MOVLB  0
0332:  BRA    0184
....................             intensidadpantalla(contraste); 
0334:  MOVFF  21,12F
0338:  RCALL  01F8
....................             lcd_gotoxy(1,1); 
033A:  MOVLW  01
033C:  MOVLB  1
033E:  MOVWF  x32
0340:  MOVWF  x33
0342:  MOVLB  0
0344:  RCALL  020C
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
0346:  MOVLW  D6
0348:  MOVWF  FF6
034A:  MOVLW  03
034C:  MOVWF  FF7
034E:  RCALL  02F2
....................             lcd_gotoxy(1,2); 
0350:  MOVLW  01
0352:  MOVLB  1
0354:  MOVWF  x32
0356:  MOVLW  02
0358:  MOVWF  x33
035A:  MOVLB  0
035C:  RCALL  020C
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
035E:  MOVLW  EC
0360:  MOVWF  FF6
0362:  MOVLW  03
0364:  MOVWF  FF7
0366:  RCALL  02F2
....................             lcd_gotoxy(1,3); 
0368:  MOVLW  01
036A:  MOVLB  1
036C:  MOVWF  x32
036E:  MOVLW  03
0370:  MOVWF  x33
0372:  MOVLB  0
0374:  RCALL  020C
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
0376:  MOVLW  02
0378:  MOVWF  FF6
037A:  MOVLW  04
037C:  MOVWF  FF7
037E:  RCALL  02F2
....................             lcd_gotoxy(1,4); 
0380:  MOVLW  01
0382:  MOVLB  1
0384:  MOVWF  x32
0386:  MOVLW  04
0388:  MOVWF  x33
038A:  MOVLB  0
038C:  RCALL  020C
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
038E:  MOVLW  18
0390:  MOVWF  FF6
0392:  MOVLW  04
0394:  MOVWF  FF7
0396:  RCALL  02F2
....................             delay_ms(2000); 
0398:  MOVLW  08
039A:  MOVLB  1
039C:  MOVWF  x2F
039E:  MOVLW  FA
03A0:  MOVWF  x32
03A2:  MOVLB  0
03A4:  RCALL  00B6
03A6:  MOVLB  1
03A8:  DECFSZ x2F,F
03AA:  BRA    039E
....................             printf(lcd_putc,"\f"); 
03AC:  MOVLW  0C
03AE:  MOVWF  x31
03B0:  MOVLB  0
03B2:  RCALL  0286
....................             inicio=1; 
03B4:  BSF    35.4
....................             Menu=0; 
03B6:  CLRF   18
....................             ModoSleep=0; 
03B8:  BCF    35.3
....................             delay_ms(500); 
03BA:  MOVLW  02
03BC:  MOVLB  1
03BE:  MOVWF  x2F
03C0:  MOVLW  FA
03C2:  MOVWF  x32
03C4:  MOVLB  0
03C6:  RCALL  00B6
03C8:  MOVLB  1
03CA:  DECFSZ x2F,F
03CC:  BRA    03C0
03CE:  MOVLB  0
....................          } 
....................       } 
.................... } 
....................  
03D0:  BCF    FF2.1
03D2:  GOTO   0060
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(25561); 
....................    set_timer1(38286);  // 5 ms 
*
042E:  MOVLW  95
0430:  MOVWF  FCF
0432:  MOVLW  8E
0434:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    //set_timer1(6064);  // 5  ms 
....................    tiempos++; 
0436:  INCF   4F,F
0438:  BTFSC  FD8.2
043A:  INCF   50,F
....................    tiempos2++; 
043C:  INCF   53,F
043E:  BTFSC  FD8.2
0440:  INCF   54,F
....................     
....................    if(tiempos2==20) 
0442:  MOVF   53,W
0444:  SUBLW  14
0446:  BNZ   0452
0448:  MOVF   54,F
044A:  BNZ   0452
....................    {tiempos2=0;Lectura2=1;} 
044C:  CLRF   54
044E:  CLRF   53
0450:  BSF    35.6
....................     
....................    if(flag_latencia==1) 
0452:  BTFSS  35.0
0454:  BRA    045C
....................       { 
....................          t_latencia++;          
0456:  INCF   51,F
0458:  BTFSC  FD8.2
045A:  INCF   52,F
....................       } 
....................     
....................    if(t_latencia>=3000) 
045C:  MOVF   52,W
045E:  SUBLW  0A
0460:  BC    046E
0462:  XORLW  FF
0464:  BNZ   046C
0466:  MOVF   51,W
0468:  SUBLW  B7
046A:  BC    046E
....................    {Latencia=1;} 
046C:  BSF    35.1
....................     
....................    if(flag_iniciodamper==1) 
046E:  BTFSS  35.7
0470:  BRA    048E
....................    { 
....................       t_iniciodamper++; 
0472:  INCF   55,F
0474:  BTFSC  FD8.2
0476:  INCF   56,F
....................       if(t_iniciodamper>=12000) 
0478:  MOVF   56,W
047A:  SUBLW  2D
047C:  BC    048E
047E:  XORLW  FF
0480:  BNZ   0488
0482:  MOVF   55,W
0484:  SUBLW  DF
0486:  BC    048E
....................       { 
....................          estadomv=1;Motor_on; 
0488:  BSF    34.1
048A:  BSF    F8B.0
048C:  BCF    F94.0
....................       } 
....................    } 
....................     
....................    if(t_iniciodamper>=18000) 
048E:  MOVF   56,W
0490:  SUBLW  45
0492:  BC    04A2
0494:  XORLW  FF
0496:  BNZ   049E
0498:  MOVF   55,W
049A:  SUBLW  4F
049C:  BC    04A2
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
049E:  BSF    4E.0
04A0:  BCF    35.7
....................    } 
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
04A2:  MOVF   4F,W
04A4:  SUBLW  C8
04A6:  BNZ   04D0
04A8:  MOVF   50,F
04AA:  BNZ   04D0
....................    {tiempos=0;  
04AC:  CLRF   50
04AE:  CLRF   4F
....................         Lectura=1; 
04B0:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
04B2:  BTFSS  34.1
04B4:  BRA    04D0
04B6:  BTFSS  35.2
04B8:  BRA    04D0
....................          { 
....................             segundos++; 
04BA:  INCF   31,F
....................           
....................          if(segundos==60) 
04BC:  MOVF   31,W
04BE:  SUBLW  3C
04C0:  BNZ   04C6
....................          { 
....................             segundos=0;minutos++; 
04C2:  CLRF   31
04C4:  INCF   32,F
....................          } 
....................           
....................          if(minutos==60) 
04C6:  MOVF   32,W
04C8:  SUBLW  3C
04CA:  BNZ   04D0
....................          { 
....................             minutos=0;horas++; 
04CC:  CLRF   32
04CE:  INCF   33,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
04D0:  BCF    F9E.0
04D2:  GOTO   0060
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
11DC:  MOVLB  1
11DE:  DECFSZ x01,W
11E0:  BRA    1252
....................    {if(estadoalarma==0) 
11E2:  BTFSC  34.2
11E4:  BRA    121A
11E6:  CLRF   16
11E8:  BTFSC  FF2.7
11EA:  BSF    16.7
11EC:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA          OFF");} 
11EE:  MOVLW  02
11F0:  MOVWF  x32
11F2:  MOVFF  102,133
11F6:  MOVLB  0
11F8:  CALL   020C
11FC:  BTFSC  16.7
11FE:  BSF    FF2.7
1200:  MOVLW  D6
1202:  MOVWF  FF6
1204:  MOVLW  04
1206:  MOVWF  FF7
1208:  CLRF   16
120A:  BTFSC  FF2.7
120C:  BSF    16.7
120E:  BCF    FF2.7
1210:  CALL   02F2
1214:  BTFSC  16.7
1216:  BSF    FF2.7
1218:  MOVLB  1
....................    if(estadoalarma==1) 
121A:  BTFSS  34.2
121C:  BRA    1252
121E:  CLRF   16
1220:  BTFSC  FF2.7
1222:  BSF    16.7
1224:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA           ON");} 
1226:  MOVLW  02
1228:  MOVWF  x32
122A:  MOVFF  102,133
122E:  MOVLB  0
1230:  CALL   020C
1234:  BTFSC  16.7
1236:  BSF    FF2.7
1238:  MOVLW  EA
123A:  MOVWF  FF6
123C:  MOVLW  04
123E:  MOVWF  FF7
1240:  CLRF   16
1242:  BTFSC  FF2.7
1244:  BSF    16.7
1246:  BCF    FF2.7
1248:  CALL   02F2
124C:  BTFSC  16.7
124E:  BSF    FF2.7
1250:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
1252:  MOVF   x01,W
1254:  SUBLW  02
1256:  BNZ   128C
1258:  CLRF   16
125A:  BTFSC  FF2.7
125C:  BSF    16.7
125E:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"FILTRO             ");} 
1260:  MOVLW  02
1262:  MOVWF  x32
1264:  MOVFF  102,133
1268:  MOVLB  0
126A:  CALL   020C
126E:  BTFSC  16.7
1270:  BSF    FF2.7
1272:  MOVLW  FE
1274:  MOVWF  FF6
1276:  MOVLW  04
1278:  MOVWF  FF7
127A:  CLRF   16
127C:  BTFSC  FF2.7
127E:  BSF    16.7
1280:  BCF    FF2.7
1282:  CALL   02F2
1286:  BTFSC  16.7
1288:  BSF    FF2.7
128A:  MOVLB  1
....................     
....................    if(x==3) 
128C:  MOVF   x01,W
128E:  SUBLW  03
1290:  BNZ   12C6
1292:  CLRF   16
1294:  BTFSC  FF2.7
1296:  BSF    16.7
1298:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"SETPOINT           ");} 
129A:  MOVLW  02
129C:  MOVWF  x32
129E:  MOVFF  102,133
12A2:  MOVLB  0
12A4:  CALL   020C
12A8:  BTFSC  16.7
12AA:  BSF    FF2.7
12AC:  MOVLW  12
12AE:  MOVWF  FF6
12B0:  MOVLW  05
12B2:  MOVWF  FF7
12B4:  CLRF   16
12B6:  BTFSC  FF2.7
12B8:  BSF    16.7
12BA:  BCF    FF2.7
12BC:  CALL   02F2
12C0:  BTFSC  16.7
12C2:  BSF    FF2.7
12C4:  MOVLB  1
....................     
....................    if(x==4) 
12C6:  MOVF   x01,W
12C8:  SUBLW  04
12CA:  BNZ   1300
12CC:  CLRF   16
12CE:  BTFSC  FF2.7
12D0:  BSF    16.7
12D2:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"CAMBIO CONTRASENA  ");} 
12D4:  MOVLW  02
12D6:  MOVWF  x32
12D8:  MOVFF  102,133
12DC:  MOVLB  0
12DE:  CALL   020C
12E2:  BTFSC  16.7
12E4:  BSF    FF2.7
12E6:  MOVLW  26
12E8:  MOVWF  FF6
12EA:  MOVLW  05
12EC:  MOVWF  FF7
12EE:  CLRF   16
12F0:  BTFSC  FF2.7
12F2:  BSF    16.7
12F4:  BCF    FF2.7
12F6:  CALL   02F2
12FA:  BTFSC  16.7
12FC:  BSF    FF2.7
12FE:  MOVLB  1
....................     
....................    if(x==5) 
1300:  MOVF   x01,W
1302:  SUBLW  05
1304:  BNZ   133A
1306:  CLRF   16
1308:  BTFSC  FF2.7
130A:  BSF    16.7
130C:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MEDIA MOVIL        ");} 
130E:  MOVLW  02
1310:  MOVWF  x32
1312:  MOVFF  102,133
1316:  MOVLB  0
1318:  CALL   020C
131C:  BTFSC  16.7
131E:  BSF    FF2.7
1320:  MOVLW  3A
1322:  MOVWF  FF6
1324:  MOVLW  05
1326:  MOVWF  FF7
1328:  CLRF   16
132A:  BTFSC  FF2.7
132C:  BSF    16.7
132E:  BCF    FF2.7
1330:  CALL   02F2
1334:  BTFSC  16.7
1336:  BSF    FF2.7
1338:  MOVLB  1
....................     
....................    if(x==6) 
133A:  MOVF   x01,W
133C:  SUBLW  06
133E:  BNZ   1374
1340:  CLRF   16
1342:  BTFSC  FF2.7
1344:  BSF    16.7
1346:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"PUNTO ZERO         ");} 
1348:  MOVLW  02
134A:  MOVWF  x32
134C:  MOVFF  102,133
1350:  MOVLB  0
1352:  CALL   020C
1356:  BTFSC  16.7
1358:  BSF    FF2.7
135A:  MOVLW  4E
135C:  MOVWF  FF6
135E:  MOVLW  05
1360:  MOVWF  FF7
1362:  CLRF   16
1364:  BTFSC  FF2.7
1366:  BSF    16.7
1368:  BCF    FF2.7
136A:  CALL   02F2
136E:  BTFSC  16.7
1370:  BSF    FF2.7
1372:  MOVLB  1
....................     
....................    if(x==7) 
1374:  MOVF   x01,W
1376:  SUBLW  07
1378:  BNZ   13AE
137A:  CLRF   16
137C:  BTFSC  FF2.7
137E:  BSF    16.7
1380:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MANTENIMIENTO      ");} 
1382:  MOVLW  02
1384:  MOVWF  x32
1386:  MOVFF  102,133
138A:  MOVLB  0
138C:  CALL   020C
1390:  BTFSC  16.7
1392:  BSF    FF2.7
1394:  MOVLW  62
1396:  MOVWF  FF6
1398:  MOVLW  05
139A:  MOVWF  FF7
139C:  CLRF   16
139E:  BTFSC  FF2.7
13A0:  BSF    16.7
13A2:  BCF    FF2.7
13A4:  CALL   02F2
13A8:  BTFSC  16.7
13AA:  BSF    FF2.7
13AC:  MOVLB  1
....................     
....................    if(x==8) 
13AE:  MOVF   x01,W
13B0:  SUBLW  08
13B2:  BNZ   13E8
13B4:  CLRF   16
13B6:  BTFSC  FF2.7
13B8:  BSF    16.7
13BA:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MODO               ");} 
13BC:  MOVLW  02
13BE:  MOVWF  x32
13C0:  MOVFF  102,133
13C4:  MOVLB  0
13C6:  CALL   020C
13CA:  BTFSC  16.7
13CC:  BSF    FF2.7
13CE:  MOVLW  76
13D0:  MOVWF  FF6
13D2:  MOVLW  05
13D4:  MOVWF  FF7
13D6:  CLRF   16
13D8:  BTFSC  FF2.7
13DA:  BSF    16.7
13DC:  BCF    FF2.7
13DE:  CALL   02F2
13E2:  BTFSC  16.7
13E4:  BSF    FF2.7
13E6:  MOVLB  1
.................... } 
13E8:  MOVLB  0
13EA:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1946:  MOVFF  FF,FBE
.................... } 
194A:  RETLW  00
....................  
.................... void main () 
.................... { 
*
2652:  CLRF   FF8
2654:  BCF    FD0.7
2656:  BSF    07.7
2658:  CLRF   FEA
265A:  CLRF   FE9
265C:  MOVLW  64
265E:  MOVWF  18
2660:  MOVLW  09
2662:  MOVWF  19
2664:  MOVLW  02
2666:  MOVWF  1A
2668:  MOVLW  0B
266A:  MOVWF  1B
266C:  MOVLW  02
266E:  MOVWF  1C
2670:  MOVLW  03
2672:  MOVWF  1D
2674:  MOVLW  02
2676:  MOVWF  1E
2678:  MOVWF  1F
267A:  MOVLW  04
267C:  MOVWF  20
267E:  MOVLW  0A
2680:  MOVWF  21
2682:  CLRF   22
2684:  CLRF   23
2686:  CLRF   24
2688:  CLRF   25
268A:  CLRF   26
268C:  CLRF   27
268E:  CLRF   28
2690:  CLRF   29
2692:  MOVWF  2A
2694:  CLRF   2B
2696:  MOVWF  2C
2698:  MOVWF  2D
269A:  MOVWF  2E
269C:  MOVWF  2F
269E:  CLRF   30
26A0:  CLRF   31
26A2:  CLRF   32
26A4:  CLRF   33
26A6:  BCF    34.0
26A8:  BCF    34.1
26AA:  BCF    34.2
26AC:  BCF    34.3
26AE:  BCF    34.4
26B0:  BCF    34.5
26B2:  BCF    34.6
26B4:  BCF    34.7
26B6:  BCF    35.0
26B8:  BCF    35.1
26BA:  BCF    35.2
26BC:  CLRF   36
26BE:  CLRF   45
26C0:  CLRF   44
26C2:  CLRF   43
26C4:  CLRF   42
26C6:  CLRF   49
26C8:  CLRF   48
26CA:  CLRF   47
26CC:  CLRF   46
26CE:  CLRF   4D
26D0:  CLRF   4C
26D2:  MOVLW  4B
26D4:  MOVWF  4B
26D6:  MOVLW  86
26D8:  MOVWF  4A
26DA:  BCF    35.4
26DC:  BCF    35.5
26DE:  BCF    35.6
26E0:  BCF    35.7
26E2:  BCF    4E.0
26E4:  BCF    4E.1
26E6:  BCF    4E.2
26E8:  BCF    4E.3
26EA:  CLRF   50
26EC:  CLRF   4F
26EE:  CLRF   52
26F0:  CLRF   51
26F2:  CLRF   54
26F4:  CLRF   53
26F6:  CLRF   56
26F8:  CLRF   55
26FA:  CLRF   5A
26FC:  MOVLW  E0
26FE:  MOVWF  59
2700:  MOVLW  5D
2702:  MOVWF  58
2704:  MOVLW  8A
2706:  MOVWF  57
2708:  CLRF   5E
270A:  MOVLW  C0
270C:  MOVWF  5D
270E:  MOVLW  28
2710:  MOVWF  5C
2712:  MOVLW  89
2714:  MOVWF  5B
2716:  MOVLW  33
2718:  MOVWF  x62
271A:  MOVLW  13
271C:  MOVWF  x61
271E:  MOVLW  15
2720:  MOVWF  x60
2722:  MOVLW  87
2724:  MOVWF  5F
2726:  CLRF   x66
2728:  CLRF   x65
272A:  CLRF   x64
272C:  CLRF   x63
272E:  CLRF   x6A
2730:  CLRF   x69
2732:  CLRF   x68
2734:  CLRF   x67
2736:  CLRF   x6E
2738:  CLRF   x6D
273A:  MOVLW  7A
273C:  MOVWF  x6C
273E:  MOVLW  88
2740:  MOVWF  x6B
2742:  CLRF   x72
2744:  CLRF   x71
2746:  CLRF   x70
2748:  CLRF   x6F
274A:  CLRF   x76
274C:  CLRF   x75
274E:  CLRF   x74
2750:  CLRF   x73
2752:  CLRF   x7A
2754:  CLRF   x79
2756:  CLRF   x78
2758:  CLRF   x77
275A:  MOVLW  19
275C:  MOVWF  x7E
275E:  MOVLW  53
2760:  MOVWF  x7D
2762:  MOVLW  18
2764:  MOVWF  x7C
2766:  MOVLW  68
2768:  MOVWF  x7B
276A:  MOVLW  E9
276C:  MOVWF  x82
276E:  MOVLW  BD
2770:  MOVWF  x81
2772:  MOVLW  C6
2774:  MOVWF  x80
2776:  MOVLW  71
2778:  MOVWF  x7F
277A:  MOVLW  BE
277C:  MOVWF  x86
277E:  MOVLW  96
2780:  MOVWF  x85
2782:  MOVLW  24
2784:  MOVWF  x84
2786:  MOVLW  7A
2788:  MOVWF  x83
278A:  MOVLW  F3
278C:  MOVWF  x8A
278E:  MOVLW  5A
2790:  MOVWF  x89
2792:  MOVLW  AB
2794:  MOVWF  x88
2796:  MOVLW  81
2798:  MOVWF  x87
279A:  CLRF   x8E
279C:  CLRF   x8D
279E:  CLRF   x8C
27A0:  CLRF   x8B
27A2:  CLRF   x92
27A4:  CLRF   x91
27A6:  CLRF   x90
27A8:  CLRF   x8F
27AA:  CLRF   x96
27AC:  CLRF   x95
27AE:  CLRF   x94
27B0:  CLRF   x93
27B2:  CLRF   x9A
27B4:  CLRF   x99
27B6:  CLRF   x98
27B8:  CLRF   x97
27BA:  CLRF   x9E
27BC:  CLRF   x9D
27BE:  CLRF   x9C
27C0:  CLRF   x9B
27C2:  CLRF   xA2
27C4:  CLRF   xA1
27C6:  CLRF   xA0
27C8:  CLRF   x9F
27CA:  MOVLW  8B
27CC:  MOVWF  xA6
27CE:  MOVLW  FD
27D0:  MOVWF  xA5
27D2:  MOVLW  65
27D4:  MOVWF  xA4
27D6:  MOVLW  7C
27D8:  MOVWF  xA3
27DA:  CLRF   xAA
27DC:  CLRF   xA9
27DE:  CLRF   xA8
27E0:  CLRF   xA7
27E2:  CLRF   xAE
27E4:  CLRF   xAD
27E6:  CLRF   xAC
27E8:  CLRF   xAB
27EA:  CLRF   xB2
27EC:  CLRF   xB1
27EE:  CLRF   xB0
27F0:  CLRF   xAF
27F2:  CLRF   xB6
27F4:  CLRF   xB5
27F6:  CLRF   xB4
27F8:  CLRF   xB3
27FA:  CLRF   xBA
27FC:  CLRF   xB9
27FE:  CLRF   xB8
2800:  CLRF   xB7
2802:  CLRF   xBE
2804:  CLRF   xBD
2806:  CLRF   xBC
2808:  CLRF   xBB
280A:  CLRF   xC2
280C:  CLRF   xC1
280E:  CLRF   xC0
2810:  MOVLW  7F
2812:  MOVWF  xBF
2814:  CLRF   xC6
2816:  CLRF   xC5
2818:  MOVLW  24
281A:  MOVWF  xC4
281C:  MOVLW  88
281E:  MOVWF  xC3
2820:  CLRF   xCA
2822:  CLRF   xC9
2824:  CLRF   xC8
2826:  CLRF   xC7
2828:  CLRF   xCE
282A:  CLRF   xCD
282C:  CLRF   xCC
282E:  CLRF   xCB
2830:  MOVF   FC1,W
2832:  ANDLW  C0
2834:  IORLW  0F
2836:  MOVWF  FC1
2838:  MOVLW  07
283A:  MOVWF  FB4
283C:  MOVLW  3E
283E:  MOVWF  37
2840:  MOVLW  20
2842:  MOVWF  38
2844:  MOVLW  5E
2846:  MOVWF  39
2848:  CLRF   3A
284A:  CLRF   3B
284C:  CLRF   3C
284E:  CLRF   3D
2850:  CLRF   3E
2852:  CLRF   3F
2854:  CLRF   40
2856:  CLRF   41
2858:  CLRF   xCF
285A:  CLRF   xD0
285C:  CLRF   xD1
285E:  CLRF   xD2
2860:  CLRF   xD3
2862:  CLRF   xD4
2864:  CLRF   xD5
2866:  CLRF   xD6
2868:  CLRF   xD7
286A:  CLRF   xD8
286C:  CLRF   xD9
286E:  CLRF   xDA
2870:  CLRF   xDB
2872:  CLRF   xDC
2874:  CLRF   xDD
2876:  CLRF   xDE
2878:  CLRF   xDF
287A:  CLRF   xE0
287C:  CLRF   xE1
287E:  CLRF   xE2
2880:  CLRF   xE3
2882:  CLRF   xE4
2884:  CLRF   xE5
2886:  CLRF   xE6
2888:  CLRF   xE7
288A:  CLRF   xE8
288C:  CLRF   xE9
288E:  CLRF   xEA
2890:  CLRF   xEB
2892:  CLRF   xEC
2894:  CLRF   xED
2896:  CLRF   xEE
2898:  CLRF   xEF
289A:  CLRF   xF0
289C:  CLRF   xF1
289E:  CLRF   xF2
28A0:  CLRF   xF3
28A2:  CLRF   xF4
28A4:  CLRF   xF5
28A6:  CLRF   xF6
28A8:  CLRF   xF7
28AA:  CLRF   xF8
28AC:  CLRF   xF9
28AE:  CLRF   xFA
28B0:  CLRF   xFB
28B2:  CLRF   xFC
28B4:  CLRF   xFD
28B6:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
28B8:  MOVF   FC1,W
28BA:  ANDLW  C0
28BC:  IORLW  0B
28BE:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
28C0:  BCF    FC0.0
28C2:  BSF    FC0.1
28C4:  BCF    FC0.2
28C6:  BSF    FC0.7
28C8:  BSF    FC2.0
....................    output_d(0);  
28CA:  CLRF   F95
28CC:  CLRF   F8C
....................    ModoSleep=1; 
28CE:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
28D0:  MOVLW  85
28D2:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
28D4:  BSF    F9D.0
....................    enable_interrupts(INT_EXT_L2H); 
28D6:  BSF    FF2.4
28D8:  BSF    FF1.6
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
28DA:  MOVLW  00
28DC:  IORLW  05
28DE:  MOVWF  FCA
28E0:  MOVLW  FF
28E2:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
28E4:  BCF    F94.2
28E6:  BCF    F8B.2
28E8:  BCF    F96.6
28EA:  MOVLW  0C
28EC:  MOVWF  FBD
28EE:  CLRF   FB7
28F0:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
28F2:  MOVLW  C0
28F4:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
28F6:  CLRF   FBE
....................     
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
28F8:  MOVFF  FF2,100
28FC:  BCF    FF2.7
28FE:  CLRF   FA9
2900:  BCF    FA6.6
2902:  BCF    FA6.7
2904:  BSF    FA6.0
2906:  MOVF   FA8,W
2908:  MOVLB  1
290A:  BTFSC  x00.7
290C:  BSF    FF2.7
290E:  MOVWF  3E
2910:  CLRF   16
2912:  BTFSC  FF2.7
2914:  BSF    16.7
2916:  BCF    FF2.7
2918:  MOVLW  14
291A:  MOVWF  x32
291C:  MOVLB  0
291E:  CALL   00B6
2922:  BTFSC  16.7
2924:  BSF    FF2.7
2926:  MOVFF  FF2,100
292A:  BCF    FF2.7
292C:  MOVLW  01
292E:  MOVWF  FA9
2930:  BCF    FA6.6
2932:  BCF    FA6.7
2934:  BSF    FA6.0
2936:  MOVF   FA8,W
2938:  MOVLB  1
293A:  BTFSC  x00.7
293C:  BSF    FF2.7
293E:  MOVWF  3F
2940:  CLRF   16
2942:  BTFSC  FF2.7
2944:  BSF    16.7
2946:  BCF    FF2.7
2948:  MOVLW  14
294A:  MOVWF  x32
294C:  MOVLB  0
294E:  CALL   00B6
2952:  BTFSC  16.7
2954:  BSF    FF2.7
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
2956:  MOVFF  FF2,100
295A:  BCF    FF2.7
295C:  MOVLW  02
295E:  MOVWF  FA9
2960:  BCF    FA6.6
2962:  BCF    FA6.7
2964:  BSF    FA6.0
2966:  MOVF   FA8,W
2968:  MOVLB  1
296A:  BTFSC  x00.7
296C:  BSF    FF2.7
296E:  MOVWF  40
2970:  CLRF   16
2972:  BTFSC  FF2.7
2974:  BSF    16.7
2976:  BCF    FF2.7
2978:  MOVLW  14
297A:  MOVWF  x32
297C:  MOVLB  0
297E:  CALL   00B6
2982:  BTFSC  16.7
2984:  BSF    FF2.7
2986:  MOVFF  FF2,100
298A:  BCF    FF2.7
298C:  MOVLW  03
298E:  MOVWF  FA9
2990:  BCF    FA6.6
2992:  BCF    FA6.7
2994:  BSF    FA6.0
2996:  MOVF   FA8,W
2998:  MOVLB  1
299A:  BTFSC  x00.7
299C:  BSF    FF2.7
299E:  MOVWF  41
29A0:  CLRF   16
29A2:  BTFSC  FF2.7
29A4:  BSF    16.7
29A6:  BCF    FF2.7
29A8:  MOVLW  14
29AA:  MOVWF  x32
29AC:  MOVLB  0
29AE:  CALL   00B6
29B2:  BTFSC  16.7
29B4:  BSF    FF2.7
....................    estadoalarma=read_eeprom(5); 
29B6:  MOVFF  FF2,100
29BA:  BCF    FF2.7
29BC:  MOVLW  05
29BE:  MOVWF  FA9
29C0:  BCF    FA6.6
29C2:  BCF    FA6.7
29C4:  BSF    FA6.0
29C6:  MOVF   FA8,W
29C8:  MOVLB  1
29CA:  BTFSC  x00.7
29CC:  BSF    FF2.7
29CE:  MOVWF  01
29D0:  BCF    34.2
29D2:  BTFSC  01.0
29D4:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
29D6:  MOVFF  FF2,100
29DA:  BCF    FF2.7
29DC:  MOVLW  0A
29DE:  MOVWF  FA9
29E0:  BCF    FA6.6
29E2:  BCF    FA6.7
29E4:  BSF    FA6.0
29E6:  MOVF   FA8,W
29E8:  BTFSC  x00.7
29EA:  BSF    FF2.7
29EC:  MOVWF  2E
29EE:  MOVFF  FF2,100
29F2:  BCF    FF2.7
29F4:  MOVLW  0B
29F6:  MOVWF  FA9
29F8:  BCF    FA6.6
29FA:  BCF    FA6.7
29FC:  BSF    FA6.0
29FE:  MOVF   FA8,W
2A00:  BTFSC  x00.7
2A02:  BSF    FF2.7
2A04:  MOVWF  2D
2A06:  MOVFF  FF2,100
2A0A:  BCF    FF2.7
2A0C:  MOVLW  0C
2A0E:  MOVWF  FA9
2A10:  BCF    FA6.6
2A12:  BCF    FA6.7
2A14:  BSF    FA6.0
2A16:  MOVF   FA8,W
2A18:  BTFSC  x00.7
2A1A:  BSF    FF2.7
2A1C:  MOVWF  2F
2A1E:  MOVFF  FF2,100
2A22:  BCF    FF2.7
2A24:  MOVLW  0D
2A26:  MOVWF  FA9
2A28:  BCF    FA6.6
2A2A:  BCF    FA6.7
2A2C:  BSF    FA6.0
2A2E:  MOVF   FA8,W
2A30:  BTFSC  x00.7
2A32:  BSF    FF2.7
2A34:  MOVWF  30
2A36:  MOVFF  30,2A
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
2A3A:  MOVFF  FF2,100
2A3E:  BCF    FF2.7
2A40:  MOVLW  19
2A42:  MOVWF  FA9
2A44:  BCF    FA6.6
2A46:  BCF    FA6.7
2A48:  BSF    FA6.0
2A4A:  MOVF   FA8,W
2A4C:  BTFSC  x00.7
2A4E:  BSF    FF2.7
2A50:  MOVWF  22
....................    Temporal=read_eeprom(26); 
2A52:  MOVFF  FF2,100
2A56:  BCF    FF2.7
2A58:  MOVLW  1A
2A5A:  MOVWF  FA9
2A5C:  BCF    FA6.6
2A5E:  BCF    FA6.7
2A60:  BSF    FA6.0
2A62:  MOVF   FA8,W
2A64:  BTFSC  x00.7
2A66:  BSF    FF2.7
2A68:  CLRF   x0A
2A6A:  MOVWF  x09
2A6C:  MOVLB  0
2A6E:  CALL   0C56
2A72:  MOVFF  03,AA
2A76:  MOVFF  02,A9
2A7A:  MOVFF  01,A8
2A7E:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
2A82:  MOVFF  AA,121
2A86:  MOVFF  A9,120
2A8A:  MOVFF  A8,11F
2A8E:  MOVFF  A7,11E
2A92:  MOVLB  1
2A94:  CLRF   x25
2A96:  CLRF   x24
2A98:  MOVLW  48
2A9A:  MOVWF  x23
2A9C:  MOVLW  85
2A9E:  MOVWF  x22
2AA0:  MOVLB  0
2AA2:  CALL   0C8C
2AA6:  MOVFF  03,AA
2AAA:  MOVFF  02,A9
2AAE:  MOVFF  01,A8
2AB2:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
2AB6:  MOVLB  1
2AB8:  CLRF   x0A
2ABA:  MOVFF  22,109
2ABE:  MOVLB  0
2AC0:  CALL   0C56
2AC4:  BCF    FD8.1
2AC6:  MOVFF  03,121
2ACA:  MOVFF  02,120
2ACE:  MOVFF  01,11F
2AD2:  MOVFF  00,11E
2AD6:  MOVFF  AA,125
2ADA:  MOVFF  A9,124
2ADE:  MOVFF  A8,123
2AE2:  MOVFF  A7,122
2AE6:  CALL   0DEA
2AEA:  MOVFF  03,C2
2AEE:  MOVFF  02,C1
2AF2:  MOVFF  01,C0
2AF6:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
2AFA:  MOVFF  FF2,100
2AFE:  BCF    FF2.7
2B00:  MOVLW  28
2B02:  MOVWF  FA9
2B04:  BCF    FA6.6
2B06:  BCF    FA6.7
2B08:  BSF    FA6.0
2B0A:  MOVF   FA8,W
2B0C:  MOVLB  1
2B0E:  BTFSC  x00.7
2B10:  BSF    FF2.7
2B12:  MOVWF  22
....................    Temporal=read_eeprom(41); 
2B14:  MOVFF  FF2,100
2B18:  BCF    FF2.7
2B1A:  MOVLW  29
2B1C:  MOVWF  FA9
2B1E:  BCF    FA6.6
2B20:  BCF    FA6.7
2B22:  BSF    FA6.0
2B24:  MOVF   FA8,W
2B26:  BTFSC  x00.7
2B28:  BSF    FF2.7
2B2A:  CLRF   x0A
2B2C:  MOVWF  x09
2B2E:  MOVLB  0
2B30:  CALL   0C56
2B34:  MOVFF  03,AA
2B38:  MOVFF  02,A9
2B3C:  MOVFF  01,A8
2B40:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
2B44:  MOVFF  AA,121
2B48:  MOVFF  A9,120
2B4C:  MOVFF  A8,11F
2B50:  MOVFF  A7,11E
2B54:  MOVLB  1
2B56:  CLRF   x25
2B58:  CLRF   x24
2B5A:  MOVLW  48
2B5C:  MOVWF  x23
2B5E:  MOVLW  85
2B60:  MOVWF  x22
2B62:  MOVLB  0
2B64:  CALL   0C8C
2B68:  MOVFF  03,AA
2B6C:  MOVFF  02,A9
2B70:  MOVFF  01,A8
2B74:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
2B78:  MOVLB  1
2B7A:  CLRF   x0A
2B7C:  MOVFF  22,109
2B80:  MOVLB  0
2B82:  CALL   0C56
2B86:  BCF    FD8.1
2B88:  MOVFF  03,121
2B8C:  MOVFF  02,120
2B90:  MOVFF  01,11F
2B94:  MOVFF  00,11E
2B98:  MOVFF  AA,125
2B9C:  MOVFF  A9,124
2BA0:  MOVFF  A8,123
2BA4:  MOVFF  A7,122
2BA8:  CALL   0DEA
2BAC:  MOVFF  03,45
2BB0:  MOVFF  02,44
2BB4:  MOVFF  01,43
2BB8:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
2BBC:  MOVFF  FF2,100
2BC0:  BCF    FF2.7
2BC2:  MOVLW  3C
2BC4:  MOVWF  FA9
2BC6:  BCF    FA6.6
2BC8:  BCF    FA6.7
2BCA:  BSF    FA6.0
2BCC:  MOVF   FA8,W
2BCE:  MOVLB  1
2BD0:  BTFSC  x00.7
2BD2:  BSF    FF2.7
2BD4:  MOVWF  25
....................    Temporal1=read_eeprom(61); 
2BD6:  MOVFF  FF2,100
2BDA:  BCF    FF2.7
2BDC:  MOVLW  3D
2BDE:  MOVWF  FA9
2BE0:  BCF    FA6.6
2BE2:  BCF    FA6.7
2BE4:  BSF    FA6.0
2BE6:  MOVF   FA8,W
2BE8:  BTFSC  x00.7
2BEA:  BSF    FF2.7
2BEC:  CLRF   x0A
2BEE:  MOVWF  x09
2BF0:  MOVLB  0
2BF2:  CALL   0C56
2BF6:  MOVFF  03,B6
2BFA:  MOVFF  02,B5
2BFE:  MOVFF  01,B4
2C02:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
2C06:  MOVFF  B6,121
2C0A:  MOVFF  B5,120
2C0E:  MOVFF  B4,11F
2C12:  MOVFF  B3,11E
2C16:  MOVLB  1
2C18:  CLRF   x25
2C1A:  CLRF   x24
2C1C:  MOVLW  48
2C1E:  MOVWF  x23
2C20:  MOVLW  85
2C22:  MOVWF  x22
2C24:  MOVLB  0
2C26:  CALL   0C8C
2C2A:  MOVFF  03,B6
2C2E:  MOVFF  02,B5
2C32:  MOVFF  01,B4
2C36:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
2C3A:  MOVLB  1
2C3C:  CLRF   x0A
2C3E:  MOVFF  25,109
2C42:  MOVLB  0
2C44:  CALL   0C56
2C48:  BCF    FD8.1
2C4A:  MOVFF  03,121
2C4E:  MOVFF  02,120
2C52:  MOVFF  01,11F
2C56:  MOVFF  00,11E
2C5A:  MOVFF  B6,125
2C5E:  MOVFF  B5,124
2C62:  MOVFF  B4,123
2C66:  MOVFF  B3,122
2C6A:  CALL   0DEA
2C6E:  MOVFF  03,BE
2C72:  MOVFF  02,BD
2C76:  MOVFF  01,BC
2C7A:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
2C7E:  MOVFF  FF2,100
2C82:  BCF    FF2.7
2C84:  MOVLW  32
2C86:  MOVWF  FA9
2C88:  BCF    FA6.6
2C8A:  BCF    FA6.7
2C8C:  BSF    FA6.0
2C8E:  MOVF   FA8,W
2C90:  MOVLB  1
2C92:  BTFSC  x00.7
2C94:  BSF    FF2.7
2C96:  MOVWF  2C
....................  
....................    MediaMovil=read_eeprom(42); 
2C98:  MOVFF  FF2,100
2C9C:  BCF    FF2.7
2C9E:  MOVLW  2A
2CA0:  MOVWF  FA9
2CA2:  BCF    FA6.6
2CA4:  BCF    FA6.7
2CA6:  BSF    FA6.0
2CA8:  MOVF   FA8,W
2CAA:  BTFSC  x00.7
2CAC:  BSF    FF2.7
2CAE:  MOVWF  2B
....................    if(MediaMovil>12) 
2CB0:  MOVF   2B,W
2CB2:  SUBLW  0C
2CB4:  BC    2CBA
....................    {MediaMovil=12;} 
2CB6:  MOVLW  0C
2CB8:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
2CBA:  MOVF   2B,F
2CBC:  BNZ   2CC2
....................    {MediaMovil=1;} 
2CBE:  MOVLW  01
2CC0:  MOVWF  2B
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
2CC2:  MOVFF  FF2,100
2CC6:  BCF    FF2.7
2CC8:  MOVLW  46
2CCA:  MOVWF  FA9
2CCC:  BCF    FA6.6
2CCE:  BCF    FA6.7
2CD0:  BSF    FA6.0
2CD2:  MOVF   FA8,W
2CD4:  BTFSC  x00.7
2CD6:  BSF    FF2.7
2CD8:  MOVWF  31
2CDA:  MOVFF  FF2,100
2CDE:  BCF    FF2.7
2CE0:  MOVLW  47
2CE2:  MOVWF  FA9
2CE4:  BCF    FA6.6
2CE6:  BCF    FA6.7
2CE8:  BSF    FA6.0
2CEA:  MOVF   FA8,W
2CEC:  BTFSC  x00.7
2CEE:  BSF    FF2.7
2CF0:  MOVWF  32
2CF2:  MOVFF  FF2,100
2CF6:  BCF    FF2.7
2CF8:  MOVLW  48
2CFA:  MOVWF  FA9
2CFC:  BCF    FA6.6
2CFE:  BCF    FA6.7
2D00:  BSF    FA6.0
2D02:  MOVF   FA8,W
2D04:  BTFSC  x00.7
2D06:  BSF    FF2.7
2D08:  MOVWF  33
2D0A:  MOVFF  FF2,100
2D0E:  BCF    FF2.7
2D10:  MOVLW  49
2D12:  MOVWF  FA9
2D14:  BCF    FA6.6
2D16:  BCF    FA6.7
2D18:  BSF    FA6.0
2D1A:  MOVF   FA8,W
2D1C:  BTFSC  x00.7
2D1E:  BSF    FF2.7
2D20:  MOVWF  01
2D22:  BCF    35.2
2D24:  BTFSC  01.0
2D26:  BSF    35.2
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2D28:  MOVF   18,F
2D2A:  BTFSS  FD8.2
2D2C:  BRA    3388
....................    flag_latencia=1;set_pwm1_duty(0); 
2D2E:  BSF    35.0
2D30:  CLRF   FBE
....................       if(Latencia==1) 
2D32:  BTFSS  35.1
2D34:  BRA    2D50
2D36:  CLRF   16
2D38:  BTFSC  FF2.7
2D3A:  BSF    16.7
2D3C:  BCF    FF2.7
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2D3E:  MOVLW  0C
2D40:  MOVWF  x31
2D42:  MOVLB  0
2D44:  CALL   0286
2D48:  BTFSC  16.7
2D4A:  BSF    FF2.7
2D4C:  RESET
2D4E:  MOVLB  1
2D50:  CLRF   16
2D52:  BTFSC  FF2.7
2D54:  BSF    16.7
2D56:  BCF    FF2.7
....................          } 
....................    lcd_gotoxy(1,1); 
2D58:  MOVLW  01
2D5A:  MOVWF  x32
2D5C:  MOVWF  x33
2D5E:  MOVLB  0
2D60:  CALL   020C
2D64:  BTFSC  16.7
2D66:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
2D68:  MOVLW  8A
2D6A:  MOVWF  FF6
2D6C:  MOVLW  05
2D6E:  MOVWF  FF7
2D70:  CLRF   16
2D72:  BTFSC  FF2.7
2D74:  BSF    16.7
2D76:  BCF    FF2.7
2D78:  CALL   02F2
2D7C:  BTFSC  16.7
2D7E:  BSF    FF2.7
2D80:  CLRF   16
2D82:  BTFSC  FF2.7
2D84:  BSF    16.7
2D86:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
2D88:  MOVLW  01
2D8A:  MOVLB  1
2D8C:  MOVWF  x32
2D8E:  MOVLW  02
2D90:  MOVWF  x33
2D92:  MOVLB  0
2D94:  CALL   020C
2D98:  BTFSC  16.7
2D9A:  BSF    FF2.7
....................    printf(lcd_putc,"    Contraseña      "); 
2D9C:  MOVLW  A0
2D9E:  MOVWF  FF6
2DA0:  MOVLW  05
2DA2:  MOVWF  FF7
2DA4:  CLRF   16
2DA6:  BTFSC  FF2.7
2DA8:  BSF    16.7
2DAA:  BCF    FF2.7
2DAC:  CALL   02F2
2DB0:  BTFSC  16.7
2DB2:  BSF    FF2.7
2DB4:  CLRF   16
2DB6:  BTFSC  FF2.7
2DB8:  BSF    16.7
2DBA:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
2DBC:  MOVLW  01
2DBE:  MOVLB  1
2DC0:  MOVWF  x32
2DC2:  MOVLW  03
2DC4:  MOVWF  x33
2DC6:  MOVLB  0
2DC8:  CALL   020C
2DCC:  BTFSC  16.7
2DCE:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2DD0:  MOVLW  B6
2DD2:  MOVWF  FF6
2DD4:  MOVLW  05
2DD6:  MOVWF  FF7
2DD8:  MOVLW  0A
2DDA:  MOVLB  1
2DDC:  MOVWF  x08
2DDE:  MOVLB  0
2DE0:  CALL   1062
2DE4:  MOVFF  3A,100
2DE8:  MOVLW  1F
2DEA:  MOVLB  1
2DEC:  MOVWF  x01
2DEE:  MOVLB  0
2DF0:  CALL   10C4
2DF4:  MOVFF  3B,100
2DF8:  MOVLW  1F
2DFA:  MOVLB  1
2DFC:  MOVWF  x01
2DFE:  MOVLB  0
2E00:  CALL   10C4
2E04:  MOVFF  3C,100
2E08:  MOVLW  1F
2E0A:  MOVLB  1
2E0C:  MOVWF  x01
2E0E:  MOVLB  0
2E10:  CALL   10C4
2E14:  MOVFF  3D,100
2E18:  MOVLW  1F
2E1A:  MOVLB  1
2E1C:  MOVWF  x01
2E1E:  MOVLB  0
2E20:  CALL   10C4
2E24:  CLRF   16
2E26:  BTFSC  FF2.7
2E28:  BSF    16.7
2E2A:  BCF    FF2.7
2E2C:  MOVLW  20
2E2E:  MOVLB  1
2E30:  MOVWF  x31
2E32:  MOVLB  0
2E34:  CALL   0286
2E38:  BTFSC  16.7
2E3A:  BSF    FF2.7
2E3C:  CLRF   16
2E3E:  BTFSC  FF2.7
2E40:  BSF    16.7
2E42:  BCF    FF2.7
2E44:  MOVLW  20
2E46:  MOVLB  1
2E48:  MOVWF  x31
2E4A:  MOVLB  0
2E4C:  CALL   0286
2E50:  BTFSC  16.7
2E52:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2E54:  BSF    F93.3
2E56:  BTFSS  F81.3
2E58:  BRA    2E90
....................       {  if(Flanco == 0)  
2E5A:  BTFSC  34.4
2E5C:  BRA    2E8E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2E5E:  MOVLW  0B
2E60:  SUBWF  1B,W
2E62:  CLRF   03
2E64:  ADDLW  3A
2E66:  MOVWF  FE9
2E68:  MOVLW  00
2E6A:  ADDWFC 03,W
2E6C:  MOVWF  FEA
2E6E:  INCF   FEF,F
2E70:  BSF    34.4
2E72:  CLRF   16
2E74:  BTFSC  FF2.7
2E76:  BSF    16.7
2E78:  BCF    FF2.7
2E7A:  MOVLW  1E
2E7C:  MOVLB  1
2E7E:  MOVWF  x32
2E80:  MOVLB  0
2E82:  CALL   00B6
2E86:  BTFSC  16.7
2E88:  BSF    FF2.7
2E8A:  CLRF   52
2E8C:  CLRF   51
....................          else 
2E8E:  BRA    2E92
....................             {Flanco = 0;} 
2E90:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2E92:  BSF    F93.2
2E94:  BTFSS  F81.2
2E96:  BRA    2ECE
....................       {  if(Flanco2 == 0)  
2E98:  BTFSC  34.6
2E9A:  BRA    2ECC
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2E9C:  MOVLW  0B
2E9E:  SUBWF  1B,W
2EA0:  CLRF   03
2EA2:  ADDLW  3A
2EA4:  MOVWF  FE9
2EA6:  MOVLW  00
2EA8:  ADDWFC 03,W
2EAA:  MOVWF  FEA
2EAC:  DECF   FEF,F
2EAE:  BSF    34.6
2EB0:  CLRF   16
2EB2:  BTFSC  FF2.7
2EB4:  BSF    16.7
2EB6:  BCF    FF2.7
2EB8:  MOVLW  1E
2EBA:  MOVLB  1
2EBC:  MOVWF  x32
2EBE:  MOVLB  0
2EC0:  CALL   00B6
2EC4:  BTFSC  16.7
2EC6:  BSF    FF2.7
2EC8:  CLRF   52
2ECA:  CLRF   51
....................          else 
2ECC:  BRA    2ED0
....................             {Flanco2 = 0;} 
2ECE:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2ED0:  BSF    F93.0
2ED2:  BTFSS  F81.0
2ED4:  BRA    2F14
....................       {  if(Flanco1 == 0)  
2ED6:  BTFSC  34.5
2ED8:  BRA    2F12
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2EDA:  BSF    34.5
2EDC:  INCF   1B,F
2EDE:  CLRF   16
2EE0:  BTFSC  FF2.7
2EE2:  BSF    16.7
2EE4:  BCF    FF2.7
2EE6:  MOVLW  1E
2EE8:  MOVLB  1
2EEA:  MOVWF  x32
2EEC:  MOVLB  0
2EEE:  CALL   00B6
2EF2:  BTFSC  16.7
2EF4:  BSF    FF2.7
2EF6:  CLRF   16
2EF8:  BTFSC  FF2.7
2EFA:  BSF    16.7
2EFC:  BCF    FF2.7
2EFE:  MOVLW  0C
2F00:  MOVLB  1
2F02:  MOVWF  x31
2F04:  MOVLB  0
2F06:  CALL   0286
2F0A:  BTFSC  16.7
2F0C:  BSF    FF2.7
2F0E:  CLRF   52
2F10:  CLRF   51
....................          else 
2F12:  BRA    2F16
....................             {Flanco1 = 0;}    
2F14:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2F16:  BSF    F93.1
2F18:  BTFSS  F81.1
2F1A:  BRA    2F5A
....................       {  if(Flanco3 == 0)  
2F1C:  BTFSC  34.7
2F1E:  BRA    2F58
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2F20:  BSF    34.7
2F22:  DECF   1B,F
2F24:  CLRF   16
2F26:  BTFSC  FF2.7
2F28:  BSF    16.7
2F2A:  BCF    FF2.7
2F2C:  MOVLW  1E
2F2E:  MOVLB  1
2F30:  MOVWF  x32
2F32:  MOVLB  0
2F34:  CALL   00B6
2F38:  BTFSC  16.7
2F3A:  BSF    FF2.7
2F3C:  CLRF   16
2F3E:  BTFSC  FF2.7
2F40:  BSF    16.7
2F42:  BCF    FF2.7
2F44:  MOVLW  0C
2F46:  MOVLB  1
2F48:  MOVWF  x31
2F4A:  MOVLB  0
2F4C:  CALL   0286
2F50:  BTFSC  16.7
2F52:  BSF    FF2.7
2F54:  CLRF   52
2F56:  CLRF   51
....................          else 
2F58:  BRA    2F5C
....................             {Flanco3 = 0;}     
2F5A:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2F5C:  MOVLW  0B
2F5E:  SUBWF  1B,W
2F60:  CLRF   03
2F62:  ADDLW  3A
2F64:  MOVWF  FE9
2F66:  MOVLW  00
2F68:  ADDWFC 03,W
2F6A:  MOVWF  FEA
2F6C:  BTFSC  FEF.7
2F6E:  BRA    2F72
2F70:  BRA    2F86
....................        {clave[unidad-11]=9;} 
2F72:  MOVLW  0B
2F74:  SUBWF  1B,W
2F76:  CLRF   03
2F78:  ADDLW  3A
2F7A:  MOVWF  FE9
2F7C:  MOVLW  00
2F7E:  ADDWFC 03,W
2F80:  MOVWF  FEA
2F82:  MOVLW  09
2F84:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2F86:  MOVLW  0B
2F88:  SUBWF  1B,W
2F8A:  CLRF   03
2F8C:  ADDLW  3A
2F8E:  MOVWF  FE9
2F90:  MOVLW  00
2F92:  ADDWFC 03,W
2F94:  MOVWF  FEA
2F96:  BTFSC  FEF.7
2F98:  BRA    2FB2
2F9A:  MOVF   FEF,W
2F9C:  SUBLW  09
2F9E:  BC    2FB2
....................        {clave[unidad-11]=0;} 
2FA0:  MOVLW  0B
2FA2:  SUBWF  1B,W
2FA4:  CLRF   03
2FA6:  ADDLW  3A
2FA8:  MOVWF  FE9
2FAA:  MOVLW  00
2FAC:  ADDWFC 03,W
2FAE:  MOVWF  FEA
2FB0:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2FB2:  MOVF   1B,W
2FB4:  SUBLW  0A
2FB6:  BNC   2FBC
....................        {unidad=11;} 
2FB8:  MOVLW  0B
2FBA:  MOVWF  1B
2FBC:  CLRF   16
2FBE:  BTFSC  FF2.7
2FC0:  BSF    16.7
2FC2:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2FC4:  MOVFF  1B,132
2FC8:  MOVLW  04
2FCA:  MOVLB  1
2FCC:  MOVWF  x33
2FCE:  MOVLB  0
2FD0:  CALL   020C
2FD4:  BTFSC  16.7
2FD6:  BSF    FF2.7
2FD8:  CLRF   16
2FDA:  BTFSC  FF2.7
2FDC:  BSF    16.7
2FDE:  BCF    FF2.7
....................        lcd_putc(t[2]); 
2FE0:  MOVFF  39,131
2FE4:  CALL   0286
2FE8:  BTFSC  16.7
2FEA:  BSF    FF2.7
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2FEC:  MOVF   1B,W
2FEE:  SUBLW  0E
2FF0:  BTFSC  FD8.0
2FF2:  BRA    3344
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2FF4:  MOVF   3A,W
2FF6:  SUBLW  03
2FF8:  BTFSS  FD8.2
2FFA:  BRA    3114
2FFC:  MOVF   3B,W
2FFE:  SUBLW  08
3000:  BTFSS  FD8.2
3002:  BRA    3114
3004:  MOVF   3C,W
3006:  SUBLW  09
3008:  BTFSS  FD8.2
300A:  BRA    3114
300C:  MOVF   3D,W
300E:  SUBLW  02
3010:  BTFSS  FD8.2
3012:  BRA    3114
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
3014:  CLRF   FA9
3016:  CLRF   FA8
3018:  BCF    FA6.6
301A:  BCF    FA6.7
301C:  BSF    FA6.2
301E:  MOVF   FF2,W
3020:  MOVWF  00
3022:  BCF    FF2.7
3024:  MOVLB  F
3026:  MOVLW  55
3028:  MOVWF  FA7
302A:  MOVLW  AA
302C:  MOVWF  FA7
302E:  BSF    FA6.1
3030:  BTFSC  FA6.1
3032:  BRA    3030
3034:  BCF    FA6.2
3036:  MOVF   00,W
3038:  IORWF  FF2,F
303A:  CLRF   16
303C:  BTFSC  FF2.7
303E:  BSF    16.7
3040:  BCF    FF2.7
3042:  MOVLW  14
3044:  MOVLB  1
3046:  MOVWF  x32
3048:  MOVLB  0
304A:  CALL   00B6
304E:  BTFSC  16.7
3050:  BSF    FF2.7
3052:  MOVLW  01
3054:  MOVWF  FA9
3056:  CLRF   FA8
3058:  BCF    FA6.6
305A:  BCF    FA6.7
305C:  BSF    FA6.2
305E:  MOVF   FF2,W
3060:  MOVWF  00
3062:  BCF    FF2.7
3064:  MOVLB  F
3066:  MOVLW  55
3068:  MOVWF  FA7
306A:  MOVLW  AA
306C:  MOVWF  FA7
306E:  BSF    FA6.1
3070:  BTFSC  FA6.1
3072:  BRA    3070
3074:  BCF    FA6.2
3076:  MOVF   00,W
3078:  IORWF  FF2,F
307A:  CLRF   16
307C:  BTFSC  FF2.7
307E:  BSF    16.7
3080:  BCF    FF2.7
3082:  MOVLW  14
3084:  MOVLB  1
3086:  MOVWF  x32
3088:  MOVLB  0
308A:  CALL   00B6
308E:  BTFSC  16.7
3090:  BSF    FF2.7
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
3092:  MOVLW  02
3094:  MOVWF  FA9
3096:  CLRF   FA8
3098:  BCF    FA6.6
309A:  BCF    FA6.7
309C:  BSF    FA6.2
309E:  MOVF   FF2,W
30A0:  MOVWF  00
30A2:  BCF    FF2.7
30A4:  MOVLB  F
30A6:  MOVLW  55
30A8:  MOVWF  FA7
30AA:  MOVLW  AA
30AC:  MOVWF  FA7
30AE:  BSF    FA6.1
30B0:  BTFSC  FA6.1
30B2:  BRA    30B0
30B4:  BCF    FA6.2
30B6:  MOVF   00,W
30B8:  IORWF  FF2,F
30BA:  CLRF   16
30BC:  BTFSC  FF2.7
30BE:  BSF    16.7
30C0:  BCF    FF2.7
30C2:  MOVLW  14
30C4:  MOVLB  1
30C6:  MOVWF  x32
30C8:  MOVLB  0
30CA:  CALL   00B6
30CE:  BTFSC  16.7
30D0:  BSF    FF2.7
30D2:  MOVLW  03
30D4:  MOVWF  FA9
30D6:  CLRF   FA8
30D8:  BCF    FA6.6
30DA:  BCF    FA6.7
30DC:  BSF    FA6.2
30DE:  MOVF   FF2,W
30E0:  MOVWF  00
30E2:  BCF    FF2.7
30E4:  MOVLB  F
30E6:  MOVLW  55
30E8:  MOVWF  FA7
30EA:  MOVLW  AA
30EC:  MOVWF  FA7
30EE:  BSF    FA6.1
30F0:  BTFSC  FA6.1
30F2:  BRA    30F0
30F4:  BCF    FA6.2
30F6:  MOVF   00,W
30F8:  IORWF  FF2,F
30FA:  CLRF   16
30FC:  BTFSC  FF2.7
30FE:  BSF    16.7
3100:  BCF    FF2.7
3102:  MOVLW  14
3104:  MOVLB  1
3106:  MOVWF  x32
3108:  MOVLB  0
310A:  CALL   00B6
310E:  BTFSC  16.7
3110:  BSF    FF2.7
....................              reset_cpu();} 
3112:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
3114:  MOVF   3E,W
3116:  SUBWF  3A,W
3118:  BTFSS  FD8.2
311A:  BRA    3252
311C:  MOVF   3F,W
311E:  SUBWF  3B,W
3120:  BTFSS  FD8.2
3122:  BRA    3252
3124:  MOVF   40,W
3126:  SUBWF  3C,W
3128:  BTFSS  FD8.2
312A:  BRA    3252
312C:  MOVF   41,W
312E:  SUBWF  3D,W
3130:  BTFSS  FD8.2
3132:  BRA    3252
3134:  CLRF   16
3136:  BTFSC  FF2.7
3138:  BSF    16.7
313A:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
313C:  MOVLW  01
313E:  MOVLB  1
3140:  MOVWF  x32
3142:  MOVWF  x33
3144:  MOVLB  0
3146:  CALL   020C
314A:  BTFSC  16.7
314C:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
314E:  MOVLW  CC
3150:  MOVWF  FF6
3152:  MOVLW  05
3154:  MOVWF  FF7
3156:  CLRF   16
3158:  BTFSC  FF2.7
315A:  BSF    16.7
315C:  BCF    FF2.7
315E:  CALL   02F2
3162:  BTFSC  16.7
3164:  BSF    FF2.7
3166:  CLRF   16
3168:  BTFSC  FF2.7
316A:  BSF    16.7
316C:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
316E:  MOVLW  01
3170:  MOVLB  1
3172:  MOVWF  x32
3174:  MOVLW  02
3176:  MOVWF  x33
3178:  MOVLB  0
317A:  CALL   020C
317E:  BTFSC  16.7
3180:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
3182:  MOVLW  E0
3184:  MOVWF  FF6
3186:  MOVLW  05
3188:  MOVWF  FF7
318A:  CLRF   16
318C:  BTFSC  FF2.7
318E:  BSF    16.7
3190:  BCF    FF2.7
3192:  CALL   02F2
3196:  BTFSC  16.7
3198:  BSF    FF2.7
319A:  CLRF   16
319C:  BTFSC  FF2.7
319E:  BSF    16.7
31A0:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
31A2:  MOVLW  01
31A4:  MOVLB  1
31A6:  MOVWF  x32
31A8:  MOVLW  03
31AA:  MOVWF  x33
31AC:  MOVLB  0
31AE:  CALL   020C
31B2:  BTFSC  16.7
31B4:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta     "); 
31B6:  MOVLW  F4
31B8:  MOVWF  FF6
31BA:  MOVLW  05
31BC:  MOVWF  FF7
31BE:  CLRF   16
31C0:  BTFSC  FF2.7
31C2:  BSF    16.7
31C4:  BCF    FF2.7
31C6:  CALL   02F2
31CA:  BTFSC  16.7
31CC:  BSF    FF2.7
31CE:  CLRF   16
31D0:  BTFSC  FF2.7
31D2:  BSF    16.7
31D4:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
31D6:  MOVLW  01
31D8:  MOVLB  1
31DA:  MOVWF  x32
31DC:  MOVLW  04
31DE:  MOVWF  x33
31E0:  MOVLB  0
31E2:  CALL   020C
31E6:  BTFSC  16.7
31E8:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
31EA:  MOVLW  08
31EC:  MOVWF  FF6
31EE:  MOVLW  06
31F0:  MOVWF  FF7
31F2:  CLRF   16
31F4:  BTFSC  FF2.7
31F6:  BSF    16.7
31F8:  BCF    FF2.7
31FA:  CALL   02F2
31FE:  BTFSC  16.7
3200:  BSF    FF2.7
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
3202:  MOVLW  02
3204:  MOVLB  1
3206:  MOVWF  x00
3208:  CLRF   16
320A:  BTFSC  FF2.7
320C:  BSF    16.7
320E:  BCF    FF2.7
3210:  MOVLW  FA
3212:  MOVWF  x32
3214:  MOVLB  0
3216:  CALL   00B6
321A:  BTFSC  16.7
321C:  BSF    FF2.7
321E:  MOVLB  1
3220:  DECFSZ x00,F
3222:  BRA    3208
3224:  MOVLW  14
3226:  MOVWF  18
3228:  MOVLW  0B
322A:  MOVWF  1B
322C:  CLRF   16
322E:  BTFSC  FF2.7
3230:  BSF    16.7
3232:  BCF    FF2.7
3234:  MOVLW  0C
3236:  MOVWF  x31
3238:  MOVLB  0
323A:  CALL   0286
323E:  BTFSC  16.7
3240:  BSF    FF2.7
3242:  BSF    F8A.5
3244:  BCF    F93.5
3246:  BCF    35.0
3248:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
324A:  CLRF   52
324C:  CLRF   51
324E:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
3250:  BRA    3344
3252:  CLRF   16
3254:  BTFSC  FF2.7
3256:  BSF    16.7
3258:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
325A:  MOVLW  01
325C:  MOVLB  1
325E:  MOVWF  x32
3260:  MOVWF  x33
3262:  MOVLB  0
3264:  CALL   020C
3268:  BTFSC  16.7
326A:  BSF    FF2.7
326C:  CLRF   16
326E:  BTFSC  FF2.7
3270:  BSF    16.7
3272:  BCF    FF2.7
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
3274:  MOVLW  01
3276:  MOVLB  1
3278:  MOVWF  x32
327A:  MOVLW  02
327C:  MOVWF  x33
327E:  MOVLB  0
3280:  CALL   020C
3284:  BTFSC  16.7
3286:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
3288:  MOVLW  1C
328A:  MOVWF  FF6
328C:  MOVLW  06
328E:  MOVWF  FF7
3290:  CLRF   16
3292:  BTFSC  FF2.7
3294:  BSF    16.7
3296:  BCF    FF2.7
3298:  CALL   02F2
329C:  BTFSC  16.7
329E:  BSF    FF2.7
32A0:  CLRF   16
32A2:  BTFSC  FF2.7
32A4:  BSF    16.7
32A6:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
32A8:  MOVLW  01
32AA:  MOVLB  1
32AC:  MOVWF  x32
32AE:  MOVLW  03
32B0:  MOVWF  x33
32B2:  MOVLB  0
32B4:  CALL   020C
32B8:  BTFSC  16.7
32BA:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta    "); 
32BC:  MOVLW  30
32BE:  MOVWF  FF6
32C0:  MOVLW  06
32C2:  MOVWF  FF7
32C4:  CLRF   16
32C6:  BTFSC  FF2.7
32C8:  BSF    16.7
32CA:  BCF    FF2.7
32CC:  CALL   02F2
32D0:  BTFSC  16.7
32D2:  BSF    FF2.7
32D4:  CLRF   16
32D6:  BTFSC  FF2.7
32D8:  BSF    16.7
32DA:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
32DC:  MOVLW  01
32DE:  MOVLB  1
32E0:  MOVWF  x32
32E2:  MOVLW  04
32E4:  MOVWF  x33
32E6:  MOVLB  0
32E8:  CALL   020C
32EC:  BTFSC  16.7
32EE:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
32F0:  MOVLW  44
32F2:  MOVWF  FF6
32F4:  MOVLW  06
32F6:  MOVWF  FF7
32F8:  CLRF   16
32FA:  BTFSC  FF2.7
32FC:  BSF    16.7
32FE:  BCF    FF2.7
3300:  CALL   02F2
3304:  BTFSC  16.7
3306:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3308:  MOVLW  02
330A:  MOVLB  1
330C:  MOVWF  x00
330E:  CLRF   16
3310:  BTFSC  FF2.7
3312:  BSF    16.7
3314:  BCF    FF2.7
3316:  MOVLW  FA
3318:  MOVWF  x32
331A:  MOVLB  0
331C:  CALL   00B6
3320:  BTFSC  16.7
3322:  BSF    FF2.7
3324:  MOVLB  1
3326:  DECFSZ x00,F
3328:  BRA    330E
332A:  MOVLW  0B
332C:  MOVWF  1B
332E:  CLRF   16
3330:  BTFSC  FF2.7
3332:  BSF    16.7
3334:  BCF    FF2.7
3336:  MOVLW  0C
3338:  MOVWF  x31
333A:  MOVLB  0
333C:  CALL   0286
3340:  BTFSC  16.7
3342:  BSF    FF2.7
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
3344:  MOVF   1B,W
3346:  SUBLW  0B
3348:  BC    3384
334A:  MOVF   1B,W
334C:  SUBLW  0D
334E:  BNC   3384
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3350:  MOVLW  01
3352:  SUBWF  1B,W
3354:  MOVLB  1
3356:  MOVWF  x00
3358:  CLRF   16
335A:  BTFSC  FF2.7
335C:  BSF    16.7
335E:  BCF    FF2.7
3360:  MOVWF  x32
3362:  MOVLW  04
3364:  MOVWF  x33
3366:  MOVLB  0
3368:  CALL   020C
336C:  BTFSC  16.7
336E:  BSF    FF2.7
3370:  CLRF   16
3372:  BTFSC  FF2.7
3374:  BSF    16.7
3376:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3378:  MOVFF  38,131
337C:  CALL   0286
3380:  BTFSC  16.7
3382:  BSF    FF2.7
....................           } 
....................  
....................    } 
3384:  MOVLB  1
3386:  BRA    2D28
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
3388:  DECFSZ 18,W
338A:  BRA    36CE
....................       if(paso<0) 
338C:  BTFSC  36.7
338E:  BRA    3392
3390:  BRA    3394
....................         {paso=0;} 
3392:  CLRF   36
3394:  CLRF   16
3396:  BTFSC  FF2.7
3398:  BSF    16.7
339A:  BCF    FF2.7
....................     
....................    lcd_gotoxy(1,1); 
339C:  MOVLW  01
339E:  MOVWF  x32
33A0:  MOVWF  x33
33A2:  MOVLB  0
33A4:  CALL   020C
33A8:  BTFSC  16.7
33AA:  BSF    FF2.7
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
33AC:  MOVLW  58
33AE:  MOVWF  FF6
33B0:  MOVLW  06
33B2:  MOVWF  FF7
33B4:  CLRF   16
33B6:  BTFSC  FF2.7
33B8:  BSF    16.7
33BA:  BCF    FF2.7
33BC:  CALL   02F2
33C0:  BTFSC  16.7
33C2:  BSF    FF2.7
....................     
....................    if(UP)//Si oprime hacia arriba 
33C4:  BSF    F93.3
33C6:  BTFSS  F81.3
33C8:  BRA    33F4
....................       {  if(Flanco == 0)  
33CA:  BTFSC  34.4
33CC:  BRA    33F2
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
33CE:  DECF   1E,F
33D0:  DECF   1C,F
33D2:  MOVLW  01
33D4:  ADDWF  1C,W
33D6:  MOVWF  1D
33D8:  BSF    34.4
33DA:  CLRF   16
33DC:  BTFSC  FF2.7
33DE:  BSF    16.7
33E0:  BCF    FF2.7
33E2:  MOVLW  1E
33E4:  MOVLB  1
33E6:  MOVWF  x32
33E8:  MOVLB  0
33EA:  CALL   00B6
33EE:  BTFSC  16.7
33F0:  BSF    FF2.7
....................          else 
33F2:  BRA    33F6
....................             {Flanco = 0;} 
33F4:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
33F6:  BSF    F93.2
33F8:  BTFSS  F81.2
33FA:  BRA    3426
....................       {  if(Flanco2 == 0)  
33FC:  BTFSC  34.6
33FE:  BRA    3424
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
3400:  INCF   1E,F
3402:  INCF   1C,F
3404:  MOVLW  01
3406:  SUBWF  1C,W
3408:  MOVWF  1D
340A:  BSF    34.6
340C:  CLRF   16
340E:  BTFSC  FF2.7
3410:  BSF    16.7
3412:  BCF    FF2.7
3414:  MOVLW  1E
3416:  MOVLB  1
3418:  MOVWF  x32
341A:  MOVLB  0
341C:  CALL   00B6
3420:  BTFSC  16.7
3422:  BSF    FF2.7
....................          else 
3424:  BRA    3428
....................             {Flanco2 = 0;} 
3426:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
3428:  MOVF   1E,W
342A:  SUBWF  20,W
342C:  BC    343E
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
342E:  INCF   36,F
3430:  MOVFF  1E,20
3434:  MOVLW  02
3436:  SUBWF  20,W
3438:  MOVWF  1F
343A:  MOVLW  04
343C:  MOVWF  1C
....................          
....................         if(Flecha2<nMenuL) 
343E:  MOVF   1F,W
3440:  SUBWF  1E,W
3442:  BC    3454
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
3444:  DECF   36,F
3446:  MOVFF  1E,1F
344A:  MOVLW  02
344C:  ADDWF  1F,W
344E:  MOVWF  20
3450:  MOVLW  02
3452:  MOVWF  1C
....................          
....................         if(Flecha2>n_opcionH) 
3454:  MOVF   1E,W
3456:  SUBWF  19,W
3458:  BC    346C
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
345A:  MOVFF  1A,1E
345E:  MOVLW  02
3460:  MOVWF  1C
3462:  CLRF   36
3464:  MOVFF  1E,1F
3468:  ADDWF  1F,W
346A:  MOVWF  20
....................          
....................         if(Flecha2<n_opcionL) 
346C:  MOVF   1A,W
346E:  SUBWF  1E,W
3470:  BC    3488
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
3472:  MOVFF  19,1E
3476:  MOVLW  04
3478:  MOVWF  1C
347A:  SUBWF  19,W
347C:  MOVWF  36
347E:  MOVFF  1E,20
3482:  MOVLW  02
3484:  SUBWF  20,W
3486:  MOVWF  1F
....................          
....................         mensajes(1+paso,2); 
3488:  MOVLW  01
348A:  ADDWF  36,W
348C:  MOVLB  1
348E:  MOVWF  x00
3490:  MOVWF  x01
3492:  MOVLW  02
3494:  MOVWF  x02
3496:  MOVLB  0
3498:  CALL   11DC
....................         mensajes(2+paso,3); 
349C:  MOVLW  02
349E:  ADDWF  36,W
34A0:  MOVLB  1
34A2:  MOVWF  x00
34A4:  MOVWF  x01
34A6:  MOVLW  03
34A8:  MOVWF  x02
34AA:  MOVLB  0
34AC:  CALL   11DC
....................         mensajes(3+paso,4); 
34B0:  MOVLW  03
34B2:  ADDWF  36,W
34B4:  MOVLB  1
34B6:  MOVWF  x00
34B8:  MOVWF  x01
34BA:  MOVLW  04
34BC:  MOVWF  x02
34BE:  MOVLB  0
34C0:  CALL   11DC
34C4:  CLRF   16
34C6:  BTFSC  FF2.7
34C8:  BSF    16.7
34CA:  BCF    FF2.7
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
34CC:  MOVLW  01
34CE:  MOVLB  1
34D0:  MOVWF  x32
34D2:  MOVFF  1C,133
34D6:  MOVLB  0
34D8:  CALL   020C
34DC:  BTFSC  16.7
34DE:  BSF    FF2.7
34E0:  CLRF   16
34E2:  BTFSC  FF2.7
34E4:  BSF    16.7
34E6:  BCF    FF2.7
....................         lcd_putc(t[0]); 
34E8:  MOVFF  37,131
34EC:  CALL   0286
34F0:  BTFSC  16.7
34F2:  BSF    FF2.7
....................  
....................         if(Flecha==2) 
34F4:  MOVF   1C,W
34F6:  SUBLW  02
34F8:  BNZ   355A
34FA:  CLRF   16
34FC:  BTFSC  FF2.7
34FE:  BSF    16.7
3500:  BCF    FF2.7
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3502:  MOVLW  01
3504:  MOVLB  1
3506:  MOVWF  x32
3508:  MOVLW  04
350A:  MOVWF  x33
350C:  MOVLB  0
350E:  CALL   020C
3512:  BTFSC  16.7
3514:  BSF    FF2.7
3516:  CLRF   16
3518:  BTFSC  FF2.7
351A:  BSF    16.7
351C:  BCF    FF2.7
....................             lcd_putc(t[1]); 
351E:  MOVFF  38,131
3522:  CALL   0286
3526:  BTFSC  16.7
3528:  BSF    FF2.7
352A:  CLRF   16
352C:  BTFSC  FF2.7
352E:  BSF    16.7
3530:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
3532:  MOVLW  01
3534:  MOVLB  1
3536:  MOVWF  x32
3538:  MOVLW  03
353A:  MOVWF  x33
353C:  MOVLB  0
353E:  CALL   020C
3542:  BTFSC  16.7
3544:  BSF    FF2.7
3546:  CLRF   16
3548:  BTFSC  FF2.7
354A:  BSF    16.7
354C:  BCF    FF2.7
....................             lcd_putc(t[1]); 
354E:  MOVFF  38,131
3552:  CALL   0286
3556:  BTFSC  16.7
3558:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==4) 
355A:  MOVF   1C,W
355C:  SUBLW  04
355E:  BNZ   35C0
3560:  CLRF   16
3562:  BTFSC  FF2.7
3564:  BSF    16.7
3566:  BCF    FF2.7
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3568:  MOVLW  01
356A:  MOVLB  1
356C:  MOVWF  x32
356E:  MOVLW  02
3570:  MOVWF  x33
3572:  MOVLB  0
3574:  CALL   020C
3578:  BTFSC  16.7
357A:  BSF    FF2.7
357C:  CLRF   16
357E:  BTFSC  FF2.7
3580:  BSF    16.7
3582:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3584:  MOVFF  38,131
3588:  CALL   0286
358C:  BTFSC  16.7
358E:  BSF    FF2.7
3590:  CLRF   16
3592:  BTFSC  FF2.7
3594:  BSF    16.7
3596:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
3598:  MOVLW  01
359A:  MOVLB  1
359C:  MOVWF  x32
359E:  MOVLW  03
35A0:  MOVWF  x33
35A2:  MOVLB  0
35A4:  CALL   020C
35A8:  BTFSC  16.7
35AA:  BSF    FF2.7
35AC:  CLRF   16
35AE:  BTFSC  FF2.7
35B0:  BSF    16.7
35B2:  BCF    FF2.7
....................             lcd_putc(t[1]); 
35B4:  MOVFF  38,131
35B8:  CALL   0286
35BC:  BTFSC  16.7
35BE:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==3) 
35C0:  MOVF   1C,W
35C2:  SUBLW  03
35C4:  BNZ   3626
35C6:  CLRF   16
35C8:  BTFSC  FF2.7
35CA:  BSF    16.7
35CC:  BCF    FF2.7
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
35CE:  MOVLW  01
35D0:  MOVLB  1
35D2:  MOVWF  x32
35D4:  MOVLW  04
35D6:  MOVWF  x33
35D8:  MOVLB  0
35DA:  CALL   020C
35DE:  BTFSC  16.7
35E0:  BSF    FF2.7
35E2:  CLRF   16
35E4:  BTFSC  FF2.7
35E6:  BSF    16.7
35E8:  BCF    FF2.7
....................             lcd_putc(t[1]); 
35EA:  MOVFF  38,131
35EE:  CALL   0286
35F2:  BTFSC  16.7
35F4:  BSF    FF2.7
35F6:  CLRF   16
35F8:  BTFSC  FF2.7
35FA:  BSF    16.7
35FC:  BCF    FF2.7
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
35FE:  MOVLW  01
3600:  MOVLB  1
3602:  MOVWF  x32
3604:  MOVLW  02
3606:  MOVWF  x33
3608:  MOVLB  0
360A:  CALL   020C
360E:  BTFSC  16.7
3610:  BSF    FF2.7
3612:  CLRF   16
3614:  BTFSC  FF2.7
3616:  BSF    16.7
3618:  BCF    FF2.7
....................             lcd_putc(t[1]); 
361A:  MOVFF  38,131
361E:  CALL   0286
3622:  BTFSC  16.7
3624:  BSF    FF2.7
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
3626:  BSF    F93.0
3628:  BTFSS  F81.0
362A:  BRA    3680
....................       {  if(Flanco1 == 0)  
362C:  BTFSC  34.5
362E:  BRA    367E
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
3630:  MOVFF  1E,18
3634:  MOVLW  03
3636:  MOVWF  1C
3638:  MOVLW  02
363A:  MOVLB  1
363C:  MOVWF  x00
363E:  CLRF   16
3640:  BTFSC  FF2.7
3642:  BSF    16.7
3644:  BCF    FF2.7
3646:  MOVLW  FA
3648:  MOVWF  x32
364A:  MOVLB  0
364C:  CALL   00B6
3650:  BTFSC  16.7
3652:  BSF    FF2.7
3654:  MOVLB  1
3656:  DECFSZ x00,F
3658:  BRA    363E
365A:  CLRF   16
365C:  BTFSC  FF2.7
365E:  BSF    16.7
3660:  BCF    FF2.7
3662:  MOVLW  0C
3664:  MOVWF  x31
3666:  MOVLB  0
3668:  CALL   0286
366C:  BTFSC  16.7
366E:  BSF    FF2.7
....................             if(Menu==6) 
3670:  MOVF   18,W
3672:  SUBLW  06
3674:  BNZ   367E
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
3676:  CLRF   3A
3678:  CLRF   3B
367A:  CLRF   3C
367C:  CLRF   3D
....................          else 
367E:  BRA    3682
....................             {Flanco1 = 0;}   
3680:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
3682:  BSF    F93.1
3684:  BTFSS  F81.1
3686:  BRA    36CA
....................       {  if(Flanco3 == 0)  
3688:  BTFSC  34.7
368A:  BRA    36C8
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
368C:  MOVLW  02
368E:  MOVLB  1
3690:  MOVWF  x00
3692:  CLRF   16
3694:  BTFSC  FF2.7
3696:  BSF    16.7
3698:  BCF    FF2.7
369A:  MOVLW  FA
369C:  MOVWF  x32
369E:  MOVLB  0
36A0:  CALL   00B6
36A4:  BTFSC  16.7
36A6:  BSF    FF2.7
36A8:  MOVLB  1
36AA:  DECFSZ x00,F
36AC:  BRA    3692
36AE:  MOVLW  14
36B0:  MOVWF  18
36B2:  CLRF   16
36B4:  BTFSC  FF2.7
36B6:  BSF    16.7
36B8:  BCF    FF2.7
36BA:  MOVLW  0C
36BC:  MOVWF  x31
36BE:  MOVLB  0
36C0:  CALL   0286
36C4:  BTFSC  16.7
36C6:  BSF    FF2.7
....................          else 
36C8:  BRA    36CC
....................             {Flanco3 = 0;}                
36CA:  BCF    34.7
36CC:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
36CE:  MOVF   18,W
36D0:  SUBLW  02
36D2:  BTFSS  FD8.2
36D4:  BRA    38FA
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
36D6:  BTG    34.2
36D8:  BSF    34.5
36DA:  MOVLW  01
36DC:  MOVWF  18
36DE:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
36E0:  BTFSS  34.2
36E2:  BRA    37B4
....................             {estadoalarma=1; 
36E4:  BSF    34.2
36E6:  CLRF   16
36E8:  BTFSC  FF2.7
36EA:  BSF    16.7
36EC:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
36EE:  MOVLW  01
36F0:  MOVWF  x32
36F2:  MOVWF  x33
36F4:  MOVLB  0
36F6:  CALL   020C
36FA:  BTFSC  16.7
36FC:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
36FE:  MOVLW  6E
3700:  MOVWF  FF6
3702:  MOVLW  06
3704:  MOVWF  FF7
3706:  CLRF   16
3708:  BTFSC  FF2.7
370A:  BSF    16.7
370C:  BCF    FF2.7
370E:  CALL   02F2
3712:  BTFSC  16.7
3714:  BSF    FF2.7
3716:  CLRF   16
3718:  BTFSC  FF2.7
371A:  BSF    16.7
371C:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
371E:  MOVLW  01
3720:  MOVLB  1
3722:  MOVWF  x32
3724:  MOVLW  02
3726:  MOVWF  x33
3728:  MOVLB  0
372A:  CALL   020C
372E:  BTFSC  16.7
3730:  BSF    FF2.7
....................                printf(lcd_putc,"        Activo      "); 
3732:  MOVLW  84
3734:  MOVWF  FF6
3736:  MOVLW  06
3738:  MOVWF  FF7
373A:  CLRF   16
373C:  BTFSC  FF2.7
373E:  BSF    16.7
3740:  BCF    FF2.7
3742:  CALL   02F2
3746:  BTFSC  16.7
3748:  BSF    FF2.7
374A:  CLRF   16
374C:  BTFSC  FF2.7
374E:  BSF    16.7
3750:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
3752:  MOVLW  01
3754:  MOVLB  1
3756:  MOVWF  x32
3758:  MOVLW  03
375A:  MOVWF  x33
375C:  MOVLB  0
375E:  CALL   020C
3762:  BTFSC  16.7
3764:  BSF    FF2.7
....................                printf(lcd_putc,"        Alarma      "); 
3766:  MOVLW  9A
3768:  MOVWF  FF6
376A:  MOVLW  06
376C:  MOVWF  FF7
376E:  CLRF   16
3770:  BTFSC  FF2.7
3772:  BSF    16.7
3774:  BCF    FF2.7
3776:  CALL   02F2
377A:  BTFSC  16.7
377C:  BSF    FF2.7
377E:  CLRF   16
3780:  BTFSC  FF2.7
3782:  BSF    16.7
3784:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
3786:  MOVLW  01
3788:  MOVLB  1
378A:  MOVWF  x32
378C:  MOVLW  04
378E:  MOVWF  x33
3790:  MOVLB  0
3792:  CALL   020C
3796:  BTFSC  16.7
3798:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
379A:  MOVLW  B0
379C:  MOVWF  FF6
379E:  MOVLW  06
37A0:  MOVWF  FF7
37A2:  CLRF   16
37A4:  BTFSC  FF2.7
37A6:  BSF    16.7
37A8:  BCF    FF2.7
37AA:  CALL   02F2
37AE:  BTFSC  16.7
37B0:  BSF    FF2.7
37B2:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
37B4:  BTFSC  34.2
37B6:  BRA    3888
....................             {estadoalarma=0; 
37B8:  BCF    34.2
37BA:  CLRF   16
37BC:  BTFSC  FF2.7
37BE:  BSF    16.7
37C0:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
37C2:  MOVLW  01
37C4:  MOVWF  x32
37C6:  MOVWF  x33
37C8:  MOVLB  0
37CA:  CALL   020C
37CE:  BTFSC  16.7
37D0:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
37D2:  MOVLW  C6
37D4:  MOVWF  FF6
37D6:  MOVLW  06
37D8:  MOVWF  FF7
37DA:  CLRF   16
37DC:  BTFSC  FF2.7
37DE:  BSF    16.7
37E0:  BCF    FF2.7
37E2:  CALL   02F2
37E6:  BTFSC  16.7
37E8:  BSF    FF2.7
37EA:  CLRF   16
37EC:  BTFSC  FF2.7
37EE:  BSF    16.7
37F0:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
37F2:  MOVLW  01
37F4:  MOVLB  1
37F6:  MOVWF  x32
37F8:  MOVLW  02
37FA:  MOVWF  x33
37FC:  MOVLB  0
37FE:  CALL   020C
3802:  BTFSC  16.7
3804:  BSF    FF2.7
....................                printf(lcd_putc,"      Desactivo     "); 
3806:  MOVLW  DC
3808:  MOVWF  FF6
380A:  MOVLW  06
380C:  MOVWF  FF7
380E:  CLRF   16
3810:  BTFSC  FF2.7
3812:  BSF    16.7
3814:  BCF    FF2.7
3816:  CALL   02F2
381A:  BTFSC  16.7
381C:  BSF    FF2.7
381E:  CLRF   16
3820:  BTFSC  FF2.7
3822:  BSF    16.7
3824:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
3826:  MOVLW  01
3828:  MOVLB  1
382A:  MOVWF  x32
382C:  MOVLW  03
382E:  MOVWF  x33
3830:  MOVLB  0
3832:  CALL   020C
3836:  BTFSC  16.7
3838:  BSF    FF2.7
....................                printf(lcd_putc,"       Alarma       "); 
383A:  MOVLW  F2
383C:  MOVWF  FF6
383E:  MOVLW  06
3840:  MOVWF  FF7
3842:  CLRF   16
3844:  BTFSC  FF2.7
3846:  BSF    16.7
3848:  BCF    FF2.7
384A:  CALL   02F2
384E:  BTFSC  16.7
3850:  BSF    FF2.7
3852:  CLRF   16
3854:  BTFSC  FF2.7
3856:  BSF    16.7
3858:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
385A:  MOVLW  01
385C:  MOVLB  1
385E:  MOVWF  x32
3860:  MOVLW  04
3862:  MOVWF  x33
3864:  MOVLB  0
3866:  CALL   020C
386A:  BTFSC  16.7
386C:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
386E:  MOVLW  08
3870:  MOVWF  FF6
3872:  MOVLW  07
3874:  MOVWF  FF7
3876:  CLRF   16
3878:  BTFSC  FF2.7
387A:  BSF    16.7
387C:  BCF    FF2.7
387E:  CALL   02F2
3882:  BTFSC  16.7
3884:  BSF    FF2.7
3886:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3888:  MOVLW  00
388A:  BTFSC  34.2
388C:  MOVLW  01
388E:  MOVWF  x00
3890:  MOVLW  05
3892:  MOVWF  FA9
3894:  MOVFF  100,FA8
3898:  BCF    FA6.6
389A:  BCF    FA6.7
389C:  BSF    FA6.2
389E:  MOVF   FF2,W
38A0:  MOVWF  00
38A2:  BCF    FF2.7
38A4:  MOVLB  F
38A6:  MOVLW  55
38A8:  MOVWF  FA7
38AA:  MOVLW  AA
38AC:  MOVWF  FA7
38AE:  BSF    FA6.1
38B0:  BTFSC  FA6.1
38B2:  BRA    38B0
38B4:  BCF    FA6.2
38B6:  MOVF   00,W
38B8:  IORWF  FF2,F
38BA:  MOVLW  02
38BC:  MOVLB  1
38BE:  MOVWF  x00
38C0:  CLRF   16
38C2:  BTFSC  FF2.7
38C4:  BSF    16.7
38C6:  BCF    FF2.7
38C8:  MOVLW  FA
38CA:  MOVWF  x32
38CC:  MOVLB  0
38CE:  CALL   00B6
38D2:  BTFSC  16.7
38D4:  BSF    FF2.7
38D6:  MOVLB  1
38D8:  DECFSZ x00,F
38DA:  BRA    38C0
38DC:  MOVLW  02
38DE:  MOVWF  1C
38E0:  MOVWF  1E
38E2:  CLRF   16
38E4:  BTFSC  FF2.7
38E6:  BSF    16.7
38E8:  BCF    FF2.7
38EA:  MOVLW  0C
38EC:  MOVWF  x31
38EE:  MOVLB  0
38F0:  CALL   0286
38F4:  BTFSC  16.7
38F6:  BSF    FF2.7
38F8:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
38FA:  MOVF   18,W
38FC:  SUBLW  03
38FE:  BTFSS  FD8.2
3900:  BRA    3CBE
3902:  CLRF   16
3904:  BTFSC  FF2.7
3906:  BSF    16.7
3908:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
390A:  MOVLW  01
390C:  MOVWF  x32
390E:  MOVWF  x33
3910:  MOVLB  0
3912:  CALL   020C
3916:  BTFSC  16.7
3918:  BSF    FF2.7
....................    printf(lcd_putc,"  Duracion Actual   ");                           
391A:  MOVLW  1E
391C:  MOVWF  FF6
391E:  MOVLW  07
3920:  MOVWF  FF7
3922:  CLRF   16
3924:  BTFSC  FF2.7
3926:  BSF    16.7
3928:  BCF    FF2.7
392A:  CALL   02F2
392E:  BTFSC  16.7
3930:  BSF    FF2.7
3932:  CLRF   16
3934:  BTFSC  FF2.7
3936:  BSF    16.7
3938:  BCF    FF2.7
....................    lcd_gotoxy(1,2);                                                   
393A:  MOVLW  01
393C:  MOVLB  1
393E:  MOVWF  x32
3940:  MOVLW  02
3942:  MOVWF  x33
3944:  MOVLB  0
3946:  CALL   020C
394A:  BTFSC  16.7
394C:  BSF    FF2.7
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
394E:  MOVLW  34
3950:  MOVWF  FF6
3952:  MOVLW  07
3954:  MOVWF  FF7
3956:  MOVLW  09
3958:  MOVLB  1
395A:  MOVWF  x08
395C:  MOVLB  0
395E:  CALL   1062
3962:  MOVFF  33,FF
3966:  MOVLW  01
3968:  MOVLB  1
396A:  MOVWF  x00
396C:  MOVLB  0
396E:  CALL   13EC
3972:  CLRF   16
3974:  BTFSC  FF2.7
3976:  BSF    16.7
3978:  BCF    FF2.7
397A:  MOVLW  3A
397C:  MOVLB  1
397E:  MOVWF  x31
3980:  MOVLB  0
3982:  CALL   0286
3986:  BTFSC  16.7
3988:  BSF    FF2.7
398A:  MOVFF  32,FF
398E:  MOVLW  01
3990:  MOVLB  1
3992:  MOVWF  x00
3994:  MOVLB  0
3996:  CALL   13EC
399A:  CLRF   16
399C:  BTFSC  FF2.7
399E:  BSF    16.7
39A0:  BCF    FF2.7
39A2:  MOVLW  3A
39A4:  MOVLB  1
39A6:  MOVWF  x31
39A8:  MOVLB  0
39AA:  CALL   0286
39AE:  BTFSC  16.7
39B0:  BSF    FF2.7
39B2:  MOVFF  31,FF
39B6:  MOVLW  01
39B8:  MOVLB  1
39BA:  MOVWF  x00
39BC:  MOVLB  0
39BE:  CALL   13EC
39C2:  CLRF   16
39C4:  BTFSC  FF2.7
39C6:  BSF    16.7
39C8:  BCF    FF2.7
39CA:  MOVLW  20
39CC:  MOVLB  1
39CE:  MOVWF  x31
39D0:  MOVLB  0
39D2:  CALL   0286
39D6:  BTFSC  16.7
39D8:  BSF    FF2.7
....................     
....................    if(flag_filtro==1) 
39DA:  BTFSS  35.2
39DC:  BRA    3A14
39DE:  CLRF   16
39E0:  BTFSC  FF2.7
39E2:  BSF    16.7
39E4:  BCF    FF2.7
....................    { 
....................       lcd_gotoxy(1,3);                                                  
39E6:  MOVLW  01
39E8:  MOVLB  1
39EA:  MOVWF  x32
39EC:  MOVLW  03
39EE:  MOVWF  x33
39F0:  MOVLB  0
39F2:  CALL   020C
39F6:  BTFSC  16.7
39F8:  BSF    FF2.7
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
39FA:  MOVLW  4E
39FC:  MOVWF  FF6
39FE:  MOVLW  07
3A00:  MOVWF  FF7
3A02:  CLRF   16
3A04:  BTFSC  FF2.7
3A06:  BSF    16.7
3A08:  BCF    FF2.7
3A0A:  CALL   02F2
3A0E:  BTFSC  16.7
3A10:  BSF    FF2.7
....................    } 
....................    else 
3A12:  BRA    3A48
3A14:  CLRF   16
3A16:  BTFSC  FF2.7
3A18:  BSF    16.7
3A1A:  BCF    FF2.7
....................    { 
....................       lcd_gotoxy(1,3);                                                  
3A1C:  MOVLW  01
3A1E:  MOVLB  1
3A20:  MOVWF  x32
3A22:  MOVLW  03
3A24:  MOVWF  x33
3A26:  MOVLB  0
3A28:  CALL   020C
3A2C:  BTFSC  16.7
3A2E:  BSF    FF2.7
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
3A30:  MOVLW  64
3A32:  MOVWF  FF6
3A34:  MOVLW  07
3A36:  MOVWF  FF7
3A38:  CLRF   16
3A3A:  BTFSC  FF2.7
3A3C:  BSF    16.7
3A3E:  BCF    FF2.7
3A40:  CALL   02F2
3A44:  BTFSC  16.7
3A46:  BSF    FF2.7
3A48:  CLRF   16
3A4A:  BTFSC  FF2.7
3A4C:  BSF    16.7
3A4E:  BCF    FF2.7
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
3A50:  MOVLW  01
3A52:  MOVLB  1
3A54:  MOVWF  x32
3A56:  MOVLW  04
3A58:  MOVWF  x33
3A5A:  MOVLB  0
3A5C:  CALL   020C
3A60:  BTFSC  16.7
3A62:  BSF    FF2.7
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
3A64:  MOVLW  7A
3A66:  MOVWF  FF6
3A68:  MOVLW  07
3A6A:  MOVWF  FF7
3A6C:  CLRF   16
3A6E:  BTFSC  FF2.7
3A70:  BSF    16.7
3A72:  BCF    FF2.7
3A74:  CALL   02F2
3A78:  BTFSC  16.7
3A7A:  BSF    FF2.7
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
3A7C:  BSF    F93.3
3A7E:  BTFSS  F81.3
3A80:  BRA    3BF0
3A82:  CLRF   16
3A84:  BTFSC  FF2.7
3A86:  BSF    16.7
3A88:  BCF    FF2.7
....................       {  delay_ms(200); 
3A8A:  MOVLW  C8
3A8C:  MOVLB  1
3A8E:  MOVWF  x32
3A90:  MOVLB  0
3A92:  CALL   00B6
3A96:  BTFSC  16.7
3A98:  BSF    FF2.7
3A9A:  CLRF   16
3A9C:  BTFSC  FF2.7
3A9E:  BSF    16.7
3AA0:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
3AA2:  MOVLW  0C
3AA4:  MOVLB  1
3AA6:  MOVWF  x31
3AA8:  MOVLB  0
3AAA:  CALL   0286
3AAE:  BTFSC  16.7
3AB0:  BSF    FF2.7
3AB2:  CLRF   16
3AB4:  BTFSC  FF2.7
3AB6:  BSF    16.7
3AB8:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
3ABA:  MOVLW  01
3ABC:  MOVLB  1
3ABE:  MOVWF  x32
3AC0:  MOVLW  02
3AC2:  MOVWF  x33
3AC4:  MOVLB  0
3AC6:  CALL   020C
3ACA:  BTFSC  16.7
3ACC:  BSF    FF2.7
....................          printf(lcd_putc," Reset de tiempo "); 
3ACE:  MOVLW  90
3AD0:  MOVWF  FF6
3AD2:  MOVLW  07
3AD4:  MOVWF  FF7
3AD6:  CLRF   16
3AD8:  BTFSC  FF2.7
3ADA:  BSF    16.7
3ADC:  BCF    FF2.7
3ADE:  CALL   02F2
3AE2:  BTFSC  16.7
3AE4:  BSF    FF2.7
3AE6:  CLRF   16
3AE8:  BTFSC  FF2.7
3AEA:  BSF    16.7
3AEC:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
3AEE:  MOVLW  01
3AF0:  MOVLB  1
3AF2:  MOVWF  x32
3AF4:  MOVLW  03
3AF6:  MOVWF  x33
3AF8:  MOVLB  0
3AFA:  CALL   020C
3AFE:  BTFSC  16.7
3B00:  BSF    FF2.7
....................          printf(lcd_putc,"     Exitoso     "); 
3B02:  MOVLW  A2
3B04:  MOVWF  FF6
3B06:  MOVLW  07
3B08:  MOVWF  FF7
3B0A:  CLRF   16
3B0C:  BTFSC  FF2.7
3B0E:  BSF    16.7
3B10:  BCF    FF2.7
3B12:  CALL   02F2
3B16:  BTFSC  16.7
3B18:  BSF    FF2.7
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
3B1A:  MOVLW  46
3B1C:  MOVWF  FA9
3B1E:  CLRF   FA8
3B20:  BCF    FA6.6
3B22:  BCF    FA6.7
3B24:  BSF    FA6.2
3B26:  MOVF   FF2,W
3B28:  MOVWF  00
3B2A:  BCF    FF2.7
3B2C:  MOVLB  F
3B2E:  MOVLW  55
3B30:  MOVWF  FA7
3B32:  MOVLW  AA
3B34:  MOVWF  FA7
3B36:  BSF    FA6.1
3B38:  BTFSC  FA6.1
3B3A:  BRA    3B38
3B3C:  BCF    FA6.2
3B3E:  MOVF   00,W
3B40:  IORWF  FF2,F
3B42:  MOVLW  47
3B44:  MOVWF  FA9
3B46:  CLRF   FA8
3B48:  BCF    FA6.6
3B4A:  BCF    FA6.7
3B4C:  BSF    FA6.2
3B4E:  MOVF   FF2,W
3B50:  MOVWF  00
3B52:  BCF    FF2.7
3B54:  MOVLW  55
3B56:  MOVWF  FA7
3B58:  MOVLW  AA
3B5A:  MOVWF  FA7
3B5C:  BSF    FA6.1
3B5E:  BTFSC  FA6.1
3B60:  BRA    3B5E
3B62:  BCF    FA6.2
3B64:  MOVF   00,W
3B66:  IORWF  FF2,F
3B68:  MOVLW  48
3B6A:  MOVWF  FA9
3B6C:  CLRF   FA8
3B6E:  BCF    FA6.6
3B70:  BCF    FA6.7
3B72:  BSF    FA6.2
3B74:  MOVF   FF2,W
3B76:  MOVWF  00
3B78:  BCF    FF2.7
3B7A:  MOVLW  55
3B7C:  MOVWF  FA7
3B7E:  MOVLW  AA
3B80:  MOVWF  FA7
3B82:  BSF    FA6.1
3B84:  BTFSC  FA6.1
3B86:  BRA    3B84
3B88:  BCF    FA6.2
3B8A:  MOVF   00,W
3B8C:  IORWF  FF2,F
....................          delay_ms(700); 
3B8E:  MOVLW  04
3B90:  MOVLB  1
3B92:  MOVWF  x00
3B94:  CLRF   16
3B96:  BTFSC  FF2.7
3B98:  BSF    16.7
3B9A:  BCF    FF2.7
3B9C:  MOVLW  AF
3B9E:  MOVWF  x32
3BA0:  MOVLB  0
3BA2:  CALL   00B6
3BA6:  BTFSC  16.7
3BA8:  BSF    FF2.7
3BAA:  MOVLB  1
3BAC:  DECFSZ x00,F
3BAE:  BRA    3B94
....................          segundos=0;minutos=0;horas=0; 
3BB0:  CLRF   31
3BB2:  CLRF   32
3BB4:  CLRF   33
3BB6:  CLRF   16
3BB8:  BTFSC  FF2.7
3BBA:  BSF    16.7
3BBC:  BCF    FF2.7
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3BBE:  MOVLW  1E
3BC0:  MOVWF  x32
3BC2:  MOVLB  0
3BC4:  CALL   00B6
3BC8:  BTFSC  16.7
3BCA:  BSF    FF2.7
3BCC:  MOVLW  01
3BCE:  MOVWF  18
3BD0:  CLRF   36
3BD2:  MOVLW  02
3BD4:  MOVWF  1C
3BD6:  MOVWF  1E
3BD8:  CLRF   16
3BDA:  BTFSC  FF2.7
3BDC:  BSF    16.7
3BDE:  BCF    FF2.7
3BE0:  MOVLW  0C
3BE2:  MOVLB  1
3BE4:  MOVWF  x31
3BE6:  MOVLB  0
3BE8:  CALL   0286
3BEC:  BTFSC  16.7
3BEE:  BSF    FF2.7
....................       } 
....................        
....................       if(RIGHT) 
3BF0:  BSF    F93.0
3BF2:  BTFSS  F81.0
3BF4:  BRA    3C70
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
3BF6:  BTG    35.2
3BF8:  MOVLW  00
3BFA:  BTFSC  35.2
3BFC:  MOVLW  01
3BFE:  MOVLB  1
3C00:  MOVWF  x00
3C02:  MOVLW  49
3C04:  MOVWF  FA9
3C06:  MOVFF  100,FA8
3C0A:  BCF    FA6.6
3C0C:  BCF    FA6.7
3C0E:  BSF    FA6.2
3C10:  MOVF   FF2,W
3C12:  MOVWF  00
3C14:  BCF    FF2.7
3C16:  MOVLB  F
3C18:  MOVLW  55
3C1A:  MOVWF  FA7
3C1C:  MOVLW  AA
3C1E:  MOVWF  FA7
3C20:  BSF    FA6.1
3C22:  BTFSC  FA6.1
3C24:  BRA    3C22
3C26:  BCF    FA6.2
3C28:  MOVF   00,W
3C2A:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3C2C:  MOVLW  02
3C2E:  MOVLB  1
3C30:  MOVWF  x00
3C32:  CLRF   16
3C34:  BTFSC  FF2.7
3C36:  BSF    16.7
3C38:  BCF    FF2.7
3C3A:  MOVLW  FA
3C3C:  MOVWF  x32
3C3E:  MOVLB  0
3C40:  CALL   00B6
3C44:  BTFSC  16.7
3C46:  BSF    FF2.7
3C48:  MOVLB  1
3C4A:  DECFSZ x00,F
3C4C:  BRA    3C32
3C4E:  MOVLW  01
3C50:  MOVWF  18
3C52:  CLRF   36
3C54:  MOVLW  02
3C56:  MOVWF  1C
3C58:  MOVWF  1E
3C5A:  CLRF   16
3C5C:  BTFSC  FF2.7
3C5E:  BSF    16.7
3C60:  BCF    FF2.7
3C62:  MOVLW  0C
3C64:  MOVWF  x31
3C66:  MOVLB  0
3C68:  CALL   0286
3C6C:  BTFSC  16.7
3C6E:  BSF    FF2.7
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
3C70:  BSF    F93.1
3C72:  BTFSS  F81.1
3C74:  BRA    3CBA
....................       {  if(Flanco3 == 0)  
3C76:  BTFSC  34.7
3C78:  BRA    3CB8
....................             {Flanco3 = 1;delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
3C7A:  BSF    34.7
3C7C:  CLRF   16
3C7E:  BTFSC  FF2.7
3C80:  BSF    16.7
3C82:  BCF    FF2.7
3C84:  MOVLW  1E
3C86:  MOVLB  1
3C88:  MOVWF  x32
3C8A:  MOVLB  0
3C8C:  CALL   00B6
3C90:  BTFSC  16.7
3C92:  BSF    FF2.7
3C94:  MOVLW  01
3C96:  MOVWF  18
3C98:  CLRF   36
3C9A:  MOVLW  02
3C9C:  MOVWF  1C
3C9E:  MOVWF  1E
3CA0:  CLRF   16
3CA2:  BTFSC  FF2.7
3CA4:  BSF    16.7
3CA6:  BCF    FF2.7
3CA8:  MOVLW  0C
3CAA:  MOVLB  1
3CAC:  MOVWF  x31
3CAE:  MOVLB  0
3CB0:  CALL   0286
3CB4:  BTFSC  16.7
3CB6:  BSF    FF2.7
....................          else 
3CB8:  BRA    3CBC
....................             {Flanco3 = 0;}       
3CBA:  BCF    34.7
3CBC:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
3CBE:  MOVF   18,W
3CC0:  SUBLW  04
3CC2:  BTFSS  FD8.2
3CC4:  BRA    405A
3CC6:  CLRF   16
3CC8:  BTFSC  FF2.7
3CCA:  BSF    16.7
3CCC:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
3CCE:  MOVLW  01
3CD0:  MOVWF  x32
3CD2:  MOVLW  02
3CD4:  MOVWF  x33
3CD6:  MOVLB  0
3CD8:  CALL   020C
3CDC:  BTFSC  16.7
3CDE:  BSF    FF2.7
....................    printf(lcd_putc,"      Setpoint      "); 
3CE0:  MOVLW  B4
3CE2:  MOVWF  FF6
3CE4:  MOVLW  07
3CE6:  MOVWF  FF7
3CE8:  CLRF   16
3CEA:  BTFSC  FF2.7
3CEC:  BSF    16.7
3CEE:  BCF    FF2.7
3CF0:  CALL   02F2
3CF4:  BTFSC  16.7
3CF6:  BSF    FF2.7
3CF8:  CLRF   16
3CFA:  BTFSC  FF2.7
3CFC:  BSF    16.7
3CFE:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
3D00:  MOVLW  01
3D02:  MOVLB  1
3D04:  MOVWF  x32
3D06:  MOVLW  03
3D08:  MOVWF  x33
3D0A:  MOVLB  0
3D0C:  CALL   020C
3D10:  BTFSC  16.7
3D12:  BSF    FF2.7
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
3D14:  MOVLW  CA
3D16:  MOVWF  FF6
3D18:  MOVLW  07
3D1A:  MOVWF  FF7
3D1C:  MOVLW  07
3D1E:  MOVLB  1
3D20:  MOVWF  x08
3D22:  MOVLB  0
3D24:  CALL   1062
3D28:  MOVLW  89
3D2A:  MOVWF  FE9
3D2C:  MOVFF  45,10B
3D30:  MOVFF  44,10A
3D34:  MOVFF  43,109
3D38:  MOVFF  42,108
3D3C:  MOVLW  02
3D3E:  MOVLB  1
3D40:  MOVWF  x0C
3D42:  MOVLB  0
3D44:  CALL   164A
3D48:  CLRF   16
3D4A:  BTFSC  FF2.7
3D4C:  BSF    16.7
3D4E:  BCF    FF2.7
3D50:  MOVLW  20
3D52:  MOVLB  1
3D54:  MOVWF  x31
3D56:  MOVLB  0
3D58:  CALL   0286
3D5C:  BTFSC  16.7
3D5E:  BSF    FF2.7
3D60:  CLRF   16
3D62:  BTFSC  FF2.7
3D64:  BSF    16.7
3D66:  BCF    FF2.7
3D68:  MOVLW  20
3D6A:  MOVLB  1
3D6C:  MOVWF  x31
3D6E:  MOVLB  0
3D70:  CALL   0286
3D74:  BTFSC  16.7
3D76:  BSF    FF2.7
3D78:  CLRF   16
3D7A:  BTFSC  FF2.7
3D7C:  BSF    16.7
3D7E:  BCF    FF2.7
3D80:  MOVLW  20
3D82:  MOVLB  1
3D84:  MOVWF  x31
3D86:  MOVLB  0
3D88:  CALL   0286
3D8C:  BTFSC  16.7
3D8E:  BSF    FF2.7
....................     
....................    if(setpoint>2.0) 
3D90:  MOVLB  1
3D92:  CLRF   x1D
3D94:  CLRF   x1C
3D96:  CLRF   x1B
3D98:  MOVLW  80
3D9A:  MOVWF  x1A
3D9C:  MOVFF  45,121
3DA0:  MOVFF  44,120
3DA4:  MOVFF  43,11F
3DA8:  MOVFF  42,11E
3DAC:  MOVLB  0
3DAE:  CALL   182C
3DB2:  BNC   3DBE
....................    {setpoint=2.0;} 
3DB4:  CLRF   45
3DB6:  CLRF   44
3DB8:  CLRF   43
3DBA:  MOVLW  80
3DBC:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
3DBE:  MOVFF  45,11D
3DC2:  MOVFF  44,11C
3DC6:  MOVFF  43,11B
3DCA:  MOVFF  42,11A
3DCE:  MOVLB  1
3DD0:  CLRF   x21
3DD2:  CLRF   x20
3DD4:  CLRF   x1F
3DD6:  MOVLW  7E
3DD8:  MOVWF  x1E
3DDA:  MOVLB  0
3DDC:  CALL   182C
3DE0:  BNC   3DEC
....................    {setpoint=0.5;} 
3DE2:  CLRF   45
3DE4:  CLRF   44
3DE6:  CLRF   43
3DE8:  MOVLW  7E
3DEA:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
3DEC:  BSF    F93.3
3DEE:  BTFSS  F81.3
3DF0:  BRA    3E4C
....................       {  if(Flanco == 0)  
3DF2:  BTFSC  34.4
3DF4:  BRA    3E4A
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
3DF6:  BCF    FD8.1
3DF8:  MOVFF  45,121
3DFC:  MOVFF  44,120
3E00:  MOVFF  43,11F
3E04:  MOVFF  42,11E
3E08:  MOVLW  CD
3E0A:  MOVLB  1
3E0C:  MOVWF  x25
3E0E:  MOVLW  CC
3E10:  MOVWF  x24
3E12:  MOVLW  4C
3E14:  MOVWF  x23
3E16:  MOVLW  7B
3E18:  MOVWF  x22
3E1A:  MOVLB  0
3E1C:  CALL   0DEA
3E20:  MOVFF  03,45
3E24:  MOVFF  02,44
3E28:  MOVFF  01,43
3E2C:  MOVFF  00,42
3E30:  BSF    34.4
3E32:  CLRF   16
3E34:  BTFSC  FF2.7
3E36:  BSF    16.7
3E38:  BCF    FF2.7
3E3A:  MOVLW  1E
3E3C:  MOVLB  1
3E3E:  MOVWF  x32
3E40:  MOVLB  0
3E42:  CALL   00B6
3E46:  BTFSC  16.7
3E48:  BSF    FF2.7
....................          else 
3E4A:  BRA    3E4E
....................             {Flanco = 0;} 
3E4C:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3E4E:  BSF    F93.2
3E50:  BTFSS  F81.2
3E52:  BRA    3EAE
....................       {  if(Flanco2 == 0)  
3E54:  BTFSC  34.6
3E56:  BRA    3EAC
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
3E58:  BSF    FD8.1
3E5A:  MOVFF  45,121
3E5E:  MOVFF  44,120
3E62:  MOVFF  43,11F
3E66:  MOVFF  42,11E
3E6A:  MOVLW  CD
3E6C:  MOVLB  1
3E6E:  MOVWF  x25
3E70:  MOVLW  CC
3E72:  MOVWF  x24
3E74:  MOVLW  4C
3E76:  MOVWF  x23
3E78:  MOVLW  7B
3E7A:  MOVWF  x22
3E7C:  MOVLB  0
3E7E:  CALL   0DEA
3E82:  MOVFF  03,45
3E86:  MOVFF  02,44
3E8A:  MOVFF  01,43
3E8E:  MOVFF  00,42
3E92:  BSF    34.6
3E94:  CLRF   16
3E96:  BTFSC  FF2.7
3E98:  BSF    16.7
3E9A:  BCF    FF2.7
3E9C:  MOVLW  1E
3E9E:  MOVLB  1
3EA0:  MOVWF  x32
3EA2:  MOVLB  0
3EA4:  CALL   00B6
3EA8:  BTFSC  16.7
3EAA:  BSF    FF2.7
....................          else 
3EAC:  BRA    3EB0
....................             {Flanco2 = 0;} 
3EAE:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3EB0:  BSF    F93.0
3EB2:  BTFSS  F81.0
3EB4:  BRA    4008
....................       {  if(Flanco1 == 0)  
3EB6:  BTFSC  34.5
3EB8:  BRA    4006
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3EBA:  MOVLW  01
3EBC:  MOVWF  18
3EBE:  CLRF   36
3EC0:  MOVLW  02
3EC2:  MOVWF  1C
3EC4:  MOVWF  1E
3EC6:  MOVLW  0B
3EC8:  MOVWF  1B
3ECA:  CLRF   16
3ECC:  BTFSC  FF2.7
3ECE:  BSF    16.7
3ED0:  BCF    FF2.7
3ED2:  MOVLW  1E
3ED4:  MOVLB  1
3ED6:  MOVWF  x32
3ED8:  MOVLB  0
3EDA:  CALL   00B6
3EDE:  BTFSC  16.7
3EE0:  BSF    FF2.7
3EE2:  CLRF   16
3EE4:  BTFSC  FF2.7
3EE6:  BSF    16.7
3EE8:  BCF    FF2.7
3EEA:  MOVLW  0C
3EEC:  MOVLB  1
3EEE:  MOVWF  x31
3EF0:  MOVLB  0
3EF2:  CALL   0286
3EF6:  BTFSC  16.7
3EF8:  BSF    FF2.7
....................             Temporal=setpoint; 
3EFA:  MOVFF  45,AA
3EFE:  MOVFF  44,A9
3F02:  MOVFF  43,A8
3F06:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
3F0A:  MOVFF  45,102
3F0E:  MOVFF  44,101
3F12:  MOVFF  43,100
3F16:  MOVFF  42,FF
3F1A:  CALL   18A6
3F1E:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
3F22:  MOVLB  1
3F24:  CLRF   x0A
3F26:  MOVFF  22,109
3F2A:  MOVLB  0
3F2C:  CALL   0C56
3F30:  BSF    FD8.1
3F32:  MOVFF  AA,121
3F36:  MOVFF  A9,120
3F3A:  MOVFF  A8,11F
3F3E:  MOVFF  A7,11E
3F42:  MOVFF  03,125
3F46:  MOVFF  02,124
3F4A:  MOVFF  01,123
3F4E:  MOVFF  00,122
3F52:  CALL   0DEA
3F56:  MOVFF  03,AA
3F5A:  MOVFF  02,A9
3F5E:  MOVFF  01,A8
3F62:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
3F66:  MOVFF  AA,11D
3F6A:  MOVFF  A9,11C
3F6E:  MOVFF  A8,11B
3F72:  MOVFF  A7,11A
3F76:  MOVLB  1
3F78:  CLRF   x21
3F7A:  CLRF   x20
3F7C:  MOVLW  48
3F7E:  MOVWF  x1F
3F80:  MOVLW  85
3F82:  MOVWF  x1E
3F84:  MOVLB  0
3F86:  CALL   1490
3F8A:  MOVFF  03,AE
3F8E:  MOVFF  02,AD
3F92:  MOVFF  01,AC
3F96:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
3F9A:  MOVFF  AE,102
3F9E:  MOVFF  AD,101
3FA2:  MOVFF  AC,100
3FA6:  MOVFF  AB,FF
3FAA:  CALL   18A6
3FAE:  MOVFF  01,24
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
3FB2:  MOVLW  28
3FB4:  MOVWF  FA9
3FB6:  MOVFF  22,FA8
3FBA:  BCF    FA6.6
3FBC:  BCF    FA6.7
3FBE:  BSF    FA6.2
3FC0:  MOVF   FF2,W
3FC2:  MOVWF  00
3FC4:  BCF    FF2.7
3FC6:  MOVLB  F
3FC8:  MOVLW  55
3FCA:  MOVWF  FA7
3FCC:  MOVLW  AA
3FCE:  MOVWF  FA7
3FD0:  BSF    FA6.1
3FD2:  BTFSC  FA6.1
3FD4:  BRA    3FD2
3FD6:  BCF    FA6.2
3FD8:  MOVF   00,W
3FDA:  IORWF  FF2,F
3FDC:  MOVLW  29
3FDE:  MOVWF  FA9
3FE0:  MOVFF  24,FA8
3FE4:  BCF    FA6.6
3FE6:  BCF    FA6.7
3FE8:  BSF    FA6.2
3FEA:  MOVF   FF2,W
3FEC:  MOVWF  00
3FEE:  BCF    FF2.7
3FF0:  MOVLW  55
3FF2:  MOVWF  FA7
3FF4:  MOVLW  AA
3FF6:  MOVWF  FA7
3FF8:  BSF    FA6.1
3FFA:  BTFSC  FA6.1
3FFC:  BRA    3FFA
3FFE:  BCF    FA6.2
4000:  MOVF   00,W
4002:  IORWF  FF2,F
4004:  MOVLB  0
....................             }} 
....................          else 
4006:  BRA    400A
....................             {Flanco1 = 0;}    
4008:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
400A:  BSF    F93.1
400C:  BTFSS  F81.1
400E:  BRA    4056
....................       {  if(Flanco3 == 0)  
4010:  BTFSC  34.7
4012:  BRA    4054
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
4014:  MOVLW  01
4016:  MOVWF  18
4018:  CLRF   36
401A:  MOVLW  02
401C:  MOVWF  1C
401E:  MOVWF  1E
4020:  MOVLW  0B
4022:  MOVWF  1B
4024:  CLRF   16
4026:  BTFSC  FF2.7
4028:  BSF    16.7
402A:  BCF    FF2.7
402C:  MOVLW  1E
402E:  MOVLB  1
4030:  MOVWF  x32
4032:  MOVLB  0
4034:  CALL   00B6
4038:  BTFSC  16.7
403A:  BSF    FF2.7
403C:  CLRF   16
403E:  BTFSC  FF2.7
4040:  BSF    16.7
4042:  BCF    FF2.7
4044:  MOVLW  0C
4046:  MOVLB  1
4048:  MOVWF  x31
404A:  MOVLB  0
404C:  CALL   0286
4050:  BTFSC  16.7
4052:  BSF    FF2.7
....................          else 
4054:  BRA    4058
....................             {Flanco3 = 0;}     
4056:  BCF    34.7
4058:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
405A:  MOVF   18,W
405C:  SUBLW  05
405E:  BTFSS  FD8.2
4060:  BRA    4586
4062:  CLRF   16
4064:  BTFSC  FF2.7
4066:  BSF    16.7
4068:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
406A:  MOVLW  01
406C:  MOVWF  x32
406E:  MOVWF  x33
4070:  MOVLB  0
4072:  CALL   020C
4076:  BTFSC  16.7
4078:  BSF    FF2.7
....................    printf(lcd_putc,"      Ingrese       "); 
407A:  MOVLW  DA
407C:  MOVWF  FF6
407E:  MOVLW  07
4080:  MOVWF  FF7
4082:  CLRF   16
4084:  BTFSC  FF2.7
4086:  BSF    16.7
4088:  BCF    FF2.7
408A:  CALL   02F2
408E:  BTFSC  16.7
4090:  BSF    FF2.7
4092:  CLRF   16
4094:  BTFSC  FF2.7
4096:  BSF    16.7
4098:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
409A:  MOVLW  01
409C:  MOVLB  1
409E:  MOVWF  x32
40A0:  MOVLW  02
40A2:  MOVWF  x33
40A4:  MOVLB  0
40A6:  CALL   020C
40AA:  BTFSC  16.7
40AC:  BSF    FF2.7
....................    printf(lcd_putc," Contraseña Actual  "); 
40AE:  MOVLW  F0
40B0:  MOVWF  FF6
40B2:  MOVLW  07
40B4:  MOVWF  FF7
40B6:  CLRF   16
40B8:  BTFSC  FF2.7
40BA:  BSF    16.7
40BC:  BCF    FF2.7
40BE:  CALL   02F2
40C2:  BTFSC  16.7
40C4:  BSF    FF2.7
40C6:  CLRF   16
40C8:  BTFSC  FF2.7
40CA:  BSF    16.7
40CC:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
40CE:  MOVLW  01
40D0:  MOVLB  1
40D2:  MOVWF  x32
40D4:  MOVLW  03
40D6:  MOVWF  x33
40D8:  MOVLB  0
40DA:  CALL   020C
40DE:  BTFSC  16.7
40E0:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
40E2:  MOVLW  06
40E4:  MOVWF  FF6
40E6:  MOVLW  08
40E8:  MOVWF  FF7
40EA:  MOVLW  0A
40EC:  MOVLB  1
40EE:  MOVWF  x08
40F0:  MOVLB  0
40F2:  CALL   1062
40F6:  MOVFF  3A,100
40FA:  MOVLW  1F
40FC:  MOVLB  1
40FE:  MOVWF  x01
4100:  MOVLB  0
4102:  CALL   10C4
4106:  MOVFF  3B,100
410A:  MOVLW  1F
410C:  MOVLB  1
410E:  MOVWF  x01
4110:  MOVLB  0
4112:  CALL   10C4
4116:  MOVFF  3C,100
411A:  MOVLW  1F
411C:  MOVLB  1
411E:  MOVWF  x01
4120:  MOVLB  0
4122:  CALL   10C4
4126:  MOVFF  3D,100
412A:  MOVLW  1F
412C:  MOVLB  1
412E:  MOVWF  x01
4130:  MOVLB  0
4132:  CALL   10C4
4136:  CLRF   16
4138:  BTFSC  FF2.7
413A:  BSF    16.7
413C:  BCF    FF2.7
413E:  MOVLW  20
4140:  MOVLB  1
4142:  MOVWF  x31
4144:  MOVLB  0
4146:  CALL   0286
414A:  BTFSC  16.7
414C:  BSF    FF2.7
414E:  CLRF   16
4150:  BTFSC  FF2.7
4152:  BSF    16.7
4154:  BCF    FF2.7
4156:  MOVLW  20
4158:  MOVLB  1
415A:  MOVWF  x31
415C:  MOVLB  0
415E:  CALL   0286
4162:  BTFSC  16.7
4164:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
4166:  BSF    F93.3
4168:  BTFSS  F81.3
416A:  BRA    419E
....................       {  if(Flanco == 0)  
416C:  BTFSC  34.4
416E:  BRA    419C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
4170:  MOVLW  0B
4172:  SUBWF  1B,W
4174:  CLRF   03
4176:  ADDLW  3A
4178:  MOVWF  FE9
417A:  MOVLW  00
417C:  ADDWFC 03,W
417E:  MOVWF  FEA
4180:  INCF   FEF,F
4182:  BSF    34.4
4184:  CLRF   16
4186:  BTFSC  FF2.7
4188:  BSF    16.7
418A:  BCF    FF2.7
418C:  MOVLW  1E
418E:  MOVLB  1
4190:  MOVWF  x32
4192:  MOVLB  0
4194:  CALL   00B6
4198:  BTFSC  16.7
419A:  BSF    FF2.7
....................          else 
419C:  BRA    41A0
....................             {Flanco = 0;} 
419E:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
41A0:  BSF    F93.2
41A2:  BTFSS  F81.2
41A4:  BRA    41D8
....................       {  if(Flanco2 == 0)  
41A6:  BTFSC  34.6
41A8:  BRA    41D6
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
41AA:  MOVLW  0B
41AC:  SUBWF  1B,W
41AE:  CLRF   03
41B0:  ADDLW  3A
41B2:  MOVWF  FE9
41B4:  MOVLW  00
41B6:  ADDWFC 03,W
41B8:  MOVWF  FEA
41BA:  DECF   FEF,F
41BC:  BSF    34.6
41BE:  CLRF   16
41C0:  BTFSC  FF2.7
41C2:  BSF    16.7
41C4:  BCF    FF2.7
41C6:  MOVLW  1E
41C8:  MOVLB  1
41CA:  MOVWF  x32
41CC:  MOVLB  0
41CE:  CALL   00B6
41D2:  BTFSC  16.7
41D4:  BSF    FF2.7
....................          else 
41D6:  BRA    41DA
....................             {Flanco2 = 0;} 
41D8:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
41DA:  BSF    F93.0
41DC:  BTFSS  F81.0
41DE:  BRA    421A
....................       {  if(Flanco1 == 0)  
41E0:  BTFSC  34.5
41E2:  BRA    4218
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
41E4:  BSF    34.5
41E6:  INCF   1B,F
41E8:  CLRF   16
41EA:  BTFSC  FF2.7
41EC:  BSF    16.7
41EE:  BCF    FF2.7
41F0:  MOVLW  1E
41F2:  MOVLB  1
41F4:  MOVWF  x32
41F6:  MOVLB  0
41F8:  CALL   00B6
41FC:  BTFSC  16.7
41FE:  BSF    FF2.7
4200:  CLRF   16
4202:  BTFSC  FF2.7
4204:  BSF    16.7
4206:  BCF    FF2.7
4208:  MOVLW  0C
420A:  MOVLB  1
420C:  MOVWF  x31
420E:  MOVLB  0
4210:  CALL   0286
4214:  BTFSC  16.7
4216:  BSF    FF2.7
....................          else 
4218:  BRA    421C
....................             {Flanco1 = 0;}    
421A:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
421C:  BSF    F93.1
421E:  BTFSS  F81.1
4220:  BRA    425C
....................       {  if(Flanco3 == 0)  
4222:  BTFSC  34.7
4224:  BRA    425A
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
4226:  BSF    34.7
4228:  DECF   1B,F
422A:  CLRF   16
422C:  BTFSC  FF2.7
422E:  BSF    16.7
4230:  BCF    FF2.7
4232:  MOVLW  1E
4234:  MOVLB  1
4236:  MOVWF  x32
4238:  MOVLB  0
423A:  CALL   00B6
423E:  BTFSC  16.7
4240:  BSF    FF2.7
4242:  CLRF   16
4244:  BTFSC  FF2.7
4246:  BSF    16.7
4248:  BCF    FF2.7
424A:  MOVLW  0C
424C:  MOVLB  1
424E:  MOVWF  x31
4250:  MOVLB  0
4252:  CALL   0286
4256:  BTFSC  16.7
4258:  BSF    FF2.7
....................          else 
425A:  BRA    425E
....................             {Flanco3 = 0;}     
425C:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
425E:  MOVLW  0B
4260:  SUBWF  1B,W
4262:  CLRF   03
4264:  ADDLW  3A
4266:  MOVWF  FE9
4268:  MOVLW  00
426A:  ADDWFC 03,W
426C:  MOVWF  FEA
426E:  BTFSC  FEF.7
4270:  BRA    4274
4272:  BRA    4288
....................        {clave[unidad-11]=9;} 
4274:  MOVLW  0B
4276:  SUBWF  1B,W
4278:  CLRF   03
427A:  ADDLW  3A
427C:  MOVWF  FE9
427E:  MOVLW  00
4280:  ADDWFC 03,W
4282:  MOVWF  FEA
4284:  MOVLW  09
4286:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
4288:  MOVLW  0B
428A:  SUBWF  1B,W
428C:  CLRF   03
428E:  ADDLW  3A
4290:  MOVWF  FE9
4292:  MOVLW  00
4294:  ADDWFC 03,W
4296:  MOVWF  FEA
4298:  BTFSC  FEF.7
429A:  BRA    42B4
429C:  MOVF   FEF,W
429E:  SUBLW  09
42A0:  BC    42B4
....................        {clave[unidad-11]=0;} 
42A2:  MOVLW  0B
42A4:  SUBWF  1B,W
42A6:  CLRF   03
42A8:  ADDLW  3A
42AA:  MOVWF  FE9
42AC:  MOVLW  00
42AE:  ADDWFC 03,W
42B0:  MOVWF  FEA
42B2:  CLRF   FEF
....................        if(unidad<11) 
42B4:  MOVF   1B,W
42B6:  SUBLW  0A
42B8:  BNC   42CA
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
42BA:  MOVLW  01
42BC:  MOVWF  18
42BE:  CLRF   36
42C0:  MOVLW  02
42C2:  MOVWF  1C
42C4:  MOVWF  1E
42C6:  MOVLW  0B
42C8:  MOVWF  1B
42CA:  CLRF   16
42CC:  BTFSC  FF2.7
42CE:  BSF    16.7
42D0:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
42D2:  MOVFF  1B,132
42D6:  MOVLW  04
42D8:  MOVLB  1
42DA:  MOVWF  x33
42DC:  MOVLB  0
42DE:  CALL   020C
42E2:  BTFSC  16.7
42E4:  BSF    FF2.7
42E6:  CLRF   16
42E8:  BTFSC  FF2.7
42EA:  BSF    16.7
42EC:  BCF    FF2.7
....................        lcd_putc(t[2]); 
42EE:  MOVFF  39,131
42F2:  CALL   0286
42F6:  BTFSC  16.7
42F8:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
42FA:  MOVF   1B,W
42FC:  SUBLW  0E
42FE:  BTFSC  FD8.0
4300:  BRA    4544
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
4302:  MOVF   3E,W
4304:  SUBWF  3A,W
4306:  BTFSS  FD8.2
4308:  BRA    443A
430A:  MOVF   3F,W
430C:  SUBWF  3B,W
430E:  BTFSS  FD8.2
4310:  BRA    443A
4312:  MOVF   40,W
4314:  SUBWF  3C,W
4316:  BTFSS  FD8.2
4318:  BRA    443A
431A:  MOVF   41,W
431C:  SUBWF  3D,W
431E:  BTFSS  FD8.2
4320:  BRA    443A
4322:  CLRF   16
4324:  BTFSC  FF2.7
4326:  BSF    16.7
4328:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
432A:  MOVLW  01
432C:  MOVLB  1
432E:  MOVWF  x32
4330:  MOVWF  x33
4332:  MOVLB  0
4334:  CALL   020C
4338:  BTFSC  16.7
433A:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
433C:  MOVLW  1C
433E:  MOVWF  FF6
4340:  MOVLW  08
4342:  MOVWF  FF7
4344:  CLRF   16
4346:  BTFSC  FF2.7
4348:  BSF    16.7
434A:  BCF    FF2.7
434C:  CALL   02F2
4350:  BTFSC  16.7
4352:  BSF    FF2.7
4354:  CLRF   16
4356:  BTFSC  FF2.7
4358:  BSF    16.7
435A:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
435C:  MOVLW  01
435E:  MOVLB  1
4360:  MOVWF  x32
4362:  MOVLW  02
4364:  MOVWF  x33
4366:  MOVLB  0
4368:  CALL   020C
436C:  BTFSC  16.7
436E:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
4370:  MOVLW  32
4372:  MOVWF  FF6
4374:  MOVLW  08
4376:  MOVWF  FF7
4378:  CLRF   16
437A:  BTFSC  FF2.7
437C:  BSF    16.7
437E:  BCF    FF2.7
4380:  CALL   02F2
4384:  BTFSC  16.7
4386:  BSF    FF2.7
4388:  CLRF   16
438A:  BTFSC  FF2.7
438C:  BSF    16.7
438E:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
4390:  MOVLW  01
4392:  MOVLB  1
4394:  MOVWF  x32
4396:  MOVLW  03
4398:  MOVWF  x33
439A:  MOVLB  0
439C:  CALL   020C
43A0:  BTFSC  16.7
43A2:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta      "); 
43A4:  MOVLW  48
43A6:  MOVWF  FF6
43A8:  MOVLW  08
43AA:  MOVWF  FF7
43AC:  CLRF   16
43AE:  BTFSC  FF2.7
43B0:  BSF    16.7
43B2:  BCF    FF2.7
43B4:  CALL   02F2
43B8:  BTFSC  16.7
43BA:  BSF    FF2.7
43BC:  CLRF   16
43BE:  BTFSC  FF2.7
43C0:  BSF    16.7
43C2:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
43C4:  MOVLW  01
43C6:  MOVLB  1
43C8:  MOVWF  x32
43CA:  MOVLW  04
43CC:  MOVWF  x33
43CE:  MOVLB  0
43D0:  CALL   020C
43D4:  BTFSC  16.7
43D6:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
43D8:  MOVLW  5E
43DA:  MOVWF  FF6
43DC:  MOVLW  08
43DE:  MOVWF  FF7
43E0:  CLRF   16
43E2:  BTFSC  FF2.7
43E4:  BSF    16.7
43E6:  BCF    FF2.7
43E8:  CALL   02F2
43EC:  BTFSC  16.7
43EE:  BSF    FF2.7
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
43F0:  MOVLW  02
43F2:  MOVLB  1
43F4:  MOVWF  x00
43F6:  CLRF   16
43F8:  BTFSC  FF2.7
43FA:  BSF    16.7
43FC:  BCF    FF2.7
43FE:  MOVLW  FA
4400:  MOVWF  x32
4402:  MOVLB  0
4404:  CALL   00B6
4408:  BTFSC  16.7
440A:  BSF    FF2.7
440C:  MOVLB  1
440E:  DECFSZ x00,F
4410:  BRA    43F6
4412:  MOVLW  33
4414:  MOVWF  18
4416:  MOVLW  0B
4418:  MOVWF  1B
441A:  CLRF   16
441C:  BTFSC  FF2.7
441E:  BSF    16.7
4420:  BCF    FF2.7
4422:  MOVLW  0C
4424:  MOVWF  x31
4426:  MOVLB  0
4428:  CALL   0286
442C:  BTFSC  16.7
442E:  BSF    FF2.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
4430:  CLRF   3A
4432:  CLRF   3B
4434:  CLRF   3C
4436:  CLRF   3D
....................          else 
4438:  BRA    4544
443A:  CLRF   16
443C:  BTFSC  FF2.7
443E:  BSF    16.7
4440:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
4442:  MOVLW  01
4444:  MOVLB  1
4446:  MOVWF  x32
4448:  MOVWF  x33
444A:  MOVLB  0
444C:  CALL   020C
4450:  BTFSC  16.7
4452:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
4454:  MOVLW  74
4456:  MOVWF  FF6
4458:  MOVLW  08
445A:  MOVWF  FF7
445C:  CLRF   16
445E:  BTFSC  FF2.7
4460:  BSF    16.7
4462:  BCF    FF2.7
4464:  CALL   02F2
4468:  BTFSC  16.7
446A:  BSF    FF2.7
446C:  CLRF   16
446E:  BTFSC  FF2.7
4470:  BSF    16.7
4472:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
4474:  MOVLW  01
4476:  MOVLB  1
4478:  MOVWF  x32
447A:  MOVLW  02
447C:  MOVWF  x33
447E:  MOVLB  0
4480:  CALL   020C
4484:  BTFSC  16.7
4486:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
4488:  MOVLW  8A
448A:  MOVWF  FF6
448C:  MOVLW  08
448E:  MOVWF  FF7
4490:  CLRF   16
4492:  BTFSC  FF2.7
4494:  BSF    16.7
4496:  BCF    FF2.7
4498:  CALL   02F2
449C:  BTFSC  16.7
449E:  BSF    FF2.7
44A0:  CLRF   16
44A2:  BTFSC  FF2.7
44A4:  BSF    16.7
44A6:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
44A8:  MOVLW  01
44AA:  MOVLB  1
44AC:  MOVWF  x32
44AE:  MOVLW  03
44B0:  MOVWF  x33
44B2:  MOVLB  0
44B4:  CALL   020C
44B8:  BTFSC  16.7
44BA:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta     "); 
44BC:  MOVLW  A0
44BE:  MOVWF  FF6
44C0:  MOVLW  08
44C2:  MOVWF  FF7
44C4:  CLRF   16
44C6:  BTFSC  FF2.7
44C8:  BSF    16.7
44CA:  BCF    FF2.7
44CC:  CALL   02F2
44D0:  BTFSC  16.7
44D2:  BSF    FF2.7
44D4:  CLRF   16
44D6:  BTFSC  FF2.7
44D8:  BSF    16.7
44DA:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
44DC:  MOVLW  01
44DE:  MOVLB  1
44E0:  MOVWF  x32
44E2:  MOVLW  04
44E4:  MOVWF  x33
44E6:  MOVLB  0
44E8:  CALL   020C
44EC:  BTFSC  16.7
44EE:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
44F0:  MOVLW  B6
44F2:  MOVWF  FF6
44F4:  MOVLW  08
44F6:  MOVWF  FF7
44F8:  CLRF   16
44FA:  BTFSC  FF2.7
44FC:  BSF    16.7
44FE:  BCF    FF2.7
4500:  CALL   02F2
4504:  BTFSC  16.7
4506:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
4508:  MOVLW  02
450A:  MOVLB  1
450C:  MOVWF  x00
450E:  CLRF   16
4510:  BTFSC  FF2.7
4512:  BSF    16.7
4514:  BCF    FF2.7
4516:  MOVLW  FA
4518:  MOVWF  x32
451A:  MOVLB  0
451C:  CALL   00B6
4520:  BTFSC  16.7
4522:  BSF    FF2.7
4524:  MOVLB  1
4526:  DECFSZ x00,F
4528:  BRA    450E
452A:  MOVLW  0B
452C:  MOVWF  1B
452E:  CLRF   16
4530:  BTFSC  FF2.7
4532:  BSF    16.7
4534:  BCF    FF2.7
4536:  MOVLW  0C
4538:  MOVWF  x31
453A:  MOVLB  0
453C:  CALL   0286
4540:  BTFSC  16.7
4542:  BSF    FF2.7
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
4544:  MOVF   1B,W
4546:  SUBLW  0B
4548:  BC    4584
454A:  MOVF   1B,W
454C:  SUBLW  0D
454E:  BNC   4584
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
4550:  MOVLW  01
4552:  SUBWF  1B,W
4554:  MOVLB  1
4556:  MOVWF  x00
4558:  CLRF   16
455A:  BTFSC  FF2.7
455C:  BSF    16.7
455E:  BCF    FF2.7
4560:  MOVWF  x32
4562:  MOVLW  04
4564:  MOVWF  x33
4566:  MOVLB  0
4568:  CALL   020C
456C:  BTFSC  16.7
456E:  BSF    FF2.7
4570:  CLRF   16
4572:  BTFSC  FF2.7
4574:  BSF    16.7
4576:  BCF    FF2.7
....................             lcd_putc(t[1]); 
4578:  MOVFF  38,131
457C:  CALL   0286
4580:  BTFSC  16.7
4582:  BSF    FF2.7
4584:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
4586:  MOVF   18,W
4588:  SUBLW  33
458A:  BTFSS  FD8.2
458C:  BRA    4A6C
458E:  CLRF   16
4590:  BTFSC  FF2.7
4592:  BSF    16.7
4594:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
4596:  MOVLW  01
4598:  MOVWF  x32
459A:  MOVWF  x33
459C:  MOVLB  0
459E:  CALL   020C
45A2:  BTFSC  16.7
45A4:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
45A6:  MOVLW  CC
45A8:  MOVWF  FF6
45AA:  MOVLW  08
45AC:  MOVWF  FF7
45AE:  CLRF   16
45B0:  BTFSC  FF2.7
45B2:  BSF    16.7
45B4:  BCF    FF2.7
45B6:  CALL   02F2
45BA:  BTFSC  16.7
45BC:  BSF    FF2.7
45BE:  CLRF   16
45C0:  BTFSC  FF2.7
45C2:  BSF    16.7
45C4:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
45C6:  MOVLW  01
45C8:  MOVLB  1
45CA:  MOVWF  x32
45CC:  MOVLW  02
45CE:  MOVWF  x33
45D0:  MOVLB  0
45D2:  CALL   020C
45D6:  BTFSC  16.7
45D8:  BSF    FF2.7
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
45DA:  MOVLW  E2
45DC:  MOVWF  FF6
45DE:  MOVLW  08
45E0:  MOVWF  FF7
45E2:  CLRF   16
45E4:  BTFSC  FF2.7
45E6:  BSF    16.7
45E8:  BCF    FF2.7
45EA:  CALL   02F2
45EE:  BTFSC  16.7
45F0:  BSF    FF2.7
45F2:  CLRF   16
45F4:  BTFSC  FF2.7
45F6:  BSF    16.7
45F8:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
45FA:  MOVLW  01
45FC:  MOVLB  1
45FE:  MOVWF  x32
4600:  MOVLW  03
4602:  MOVWF  x33
4604:  MOVLB  0
4606:  CALL   020C
460A:  BTFSC  16.7
460C:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
460E:  MOVLW  F8
4610:  MOVWF  FF6
4612:  MOVLW  08
4614:  MOVWF  FF7
4616:  MOVLW  0A
4618:  MOVLB  1
461A:  MOVWF  x08
461C:  MOVLB  0
461E:  CALL   1062
4622:  MOVFF  3A,100
4626:  MOVLW  1F
4628:  MOVLB  1
462A:  MOVWF  x01
462C:  MOVLB  0
462E:  CALL   10C4
4632:  MOVFF  3B,100
4636:  MOVLW  1F
4638:  MOVLB  1
463A:  MOVWF  x01
463C:  MOVLB  0
463E:  CALL   10C4
4642:  MOVFF  3C,100
4646:  MOVLW  1F
4648:  MOVLB  1
464A:  MOVWF  x01
464C:  MOVLB  0
464E:  CALL   10C4
4652:  MOVFF  3D,100
4656:  MOVLW  1F
4658:  MOVLB  1
465A:  MOVWF  x01
465C:  MOVLB  0
465E:  CALL   10C4
4662:  CLRF   16
4664:  BTFSC  FF2.7
4666:  BSF    16.7
4668:  BCF    FF2.7
466A:  MOVLW  20
466C:  MOVLB  1
466E:  MOVWF  x31
4670:  MOVLB  0
4672:  CALL   0286
4676:  BTFSC  16.7
4678:  BSF    FF2.7
467A:  CLRF   16
467C:  BTFSC  FF2.7
467E:  BSF    16.7
4680:  BCF    FF2.7
4682:  MOVLW  20
4684:  MOVLB  1
4686:  MOVWF  x31
4688:  MOVLB  0
468A:  CALL   0286
468E:  BTFSC  16.7
4690:  BSF    FF2.7
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
4692:  BSF    F93.3
4694:  BTFSS  F81.3
4696:  BRA    46CA
....................       {  if(Flanco == 0)  
4698:  BTFSC  34.4
469A:  BRA    46C8
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
469C:  MOVLW  0B
469E:  SUBWF  1B,W
46A0:  CLRF   03
46A2:  ADDLW  3A
46A4:  MOVWF  FE9
46A6:  MOVLW  00
46A8:  ADDWFC 03,W
46AA:  MOVWF  FEA
46AC:  INCF   FEF,F
46AE:  BSF    34.4
46B0:  CLRF   16
46B2:  BTFSC  FF2.7
46B4:  BSF    16.7
46B6:  BCF    FF2.7
46B8:  MOVLW  1E
46BA:  MOVLB  1
46BC:  MOVWF  x32
46BE:  MOVLB  0
46C0:  CALL   00B6
46C4:  BTFSC  16.7
46C6:  BSF    FF2.7
....................          else 
46C8:  BRA    46CC
....................             {Flanco = 0;} 
46CA:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
46CC:  BSF    F93.2
46CE:  BTFSS  F81.2
46D0:  BRA    4704
....................       {  if(Flanco2 == 0)  
46D2:  BTFSC  34.6
46D4:  BRA    4702
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
46D6:  MOVLW  0B
46D8:  SUBWF  1B,W
46DA:  CLRF   03
46DC:  ADDLW  3A
46DE:  MOVWF  FE9
46E0:  MOVLW  00
46E2:  ADDWFC 03,W
46E4:  MOVWF  FEA
46E6:  DECF   FEF,F
46E8:  BSF    34.6
46EA:  CLRF   16
46EC:  BTFSC  FF2.7
46EE:  BSF    16.7
46F0:  BCF    FF2.7
46F2:  MOVLW  1E
46F4:  MOVLB  1
46F6:  MOVWF  x32
46F8:  MOVLB  0
46FA:  CALL   00B6
46FE:  BTFSC  16.7
4700:  BSF    FF2.7
....................          else 
4702:  BRA    4706
....................             {Flanco2 = 0;} 
4704:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
4706:  BSF    F93.0
4708:  BTFSS  F81.0
470A:  BRA    4746
....................       {  if(Flanco1 == 0)  
470C:  BTFSC  34.5
470E:  BRA    4744
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
4710:  BSF    34.5
4712:  INCF   1B,F
4714:  CLRF   16
4716:  BTFSC  FF2.7
4718:  BSF    16.7
471A:  BCF    FF2.7
471C:  MOVLW  1E
471E:  MOVLB  1
4720:  MOVWF  x32
4722:  MOVLB  0
4724:  CALL   00B6
4728:  BTFSC  16.7
472A:  BSF    FF2.7
472C:  CLRF   16
472E:  BTFSC  FF2.7
4730:  BSF    16.7
4732:  BCF    FF2.7
4734:  MOVLW  0C
4736:  MOVLB  1
4738:  MOVWF  x31
473A:  MOVLB  0
473C:  CALL   0286
4740:  BTFSC  16.7
4742:  BSF    FF2.7
....................          else 
4744:  BRA    4748
....................             {Flanco1 = 0;}    
4746:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4748:  BSF    F93.1
474A:  BTFSS  F81.1
474C:  BRA    4788
....................       {  if(Flanco3 == 0)  
474E:  BTFSC  34.7
4750:  BRA    4786
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
4752:  BSF    34.7
4754:  DECF   1B,F
4756:  CLRF   16
4758:  BTFSC  FF2.7
475A:  BSF    16.7
475C:  BCF    FF2.7
475E:  MOVLW  1E
4760:  MOVLB  1
4762:  MOVWF  x32
4764:  MOVLB  0
4766:  CALL   00B6
476A:  BTFSC  16.7
476C:  BSF    FF2.7
476E:  CLRF   16
4770:  BTFSC  FF2.7
4772:  BSF    16.7
4774:  BCF    FF2.7
4776:  MOVLW  0C
4778:  MOVLB  1
477A:  MOVWF  x31
477C:  MOVLB  0
477E:  CALL   0286
4782:  BTFSC  16.7
4784:  BSF    FF2.7
....................          else 
4786:  BRA    478A
....................             {Flanco3 = 0;}     
4788:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
478A:  MOVLW  0B
478C:  SUBWF  1B,W
478E:  CLRF   03
4790:  ADDLW  3A
4792:  MOVWF  FE9
4794:  MOVLW  00
4796:  ADDWFC 03,W
4798:  MOVWF  FEA
479A:  BTFSC  FEF.7
479C:  BRA    47A0
479E:  BRA    47B4
....................        {clave[unidad-11]=9;} 
47A0:  MOVLW  0B
47A2:  SUBWF  1B,W
47A4:  CLRF   03
47A6:  ADDLW  3A
47A8:  MOVWF  FE9
47AA:  MOVLW  00
47AC:  ADDWFC 03,W
47AE:  MOVWF  FEA
47B0:  MOVLW  09
47B2:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
47B4:  MOVLW  0B
47B6:  SUBWF  1B,W
47B8:  CLRF   03
47BA:  ADDLW  3A
47BC:  MOVWF  FE9
47BE:  MOVLW  00
47C0:  ADDWFC 03,W
47C2:  MOVWF  FEA
47C4:  BTFSC  FEF.7
47C6:  BRA    47E0
47C8:  MOVF   FEF,W
47CA:  SUBLW  09
47CC:  BC    47E0
....................        {clave[unidad-11]=0;} 
47CE:  MOVLW  0B
47D0:  SUBWF  1B,W
47D2:  CLRF   03
47D4:  ADDLW  3A
47D6:  MOVWF  FE9
47D8:  MOVLW  00
47DA:  ADDWFC 03,W
47DC:  MOVWF  FEA
47DE:  CLRF   FEF
....................        if(unidad<11) 
47E0:  MOVF   1B,W
47E2:  SUBLW  0A
47E4:  BNC   47EE
....................        {Menu=5;unidad=11;} 
47E6:  MOVLW  05
47E8:  MOVWF  18
47EA:  MOVLW  0B
47EC:  MOVWF  1B
47EE:  CLRF   16
47F0:  BTFSC  FF2.7
47F2:  BSF    16.7
47F4:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
47F6:  MOVFF  1B,132
47FA:  MOVLW  04
47FC:  MOVLB  1
47FE:  MOVWF  x33
4800:  MOVLB  0
4802:  CALL   020C
4806:  BTFSC  16.7
4808:  BSF    FF2.7
480A:  CLRF   16
480C:  BTFSC  FF2.7
480E:  BSF    16.7
4810:  BCF    FF2.7
....................        lcd_putc(t[2]); 
4812:  MOVFF  39,131
4816:  CALL   0286
481A:  BTFSC  16.7
481C:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
481E:  MOVF   1B,W
4820:  SUBLW  0E
4822:  BTFSC  FD8.0
4824:  BRA    4A2A
4826:  CLRF   16
4828:  BTFSC  FF2.7
482A:  BSF    16.7
482C:  BCF    FF2.7
....................        { 
....................             lcd_gotoxy(1,1); 
482E:  MOVLW  01
4830:  MOVLB  1
4832:  MOVWF  x32
4834:  MOVWF  x33
4836:  MOVLB  0
4838:  CALL   020C
483C:  BTFSC  16.7
483E:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
4840:  MOVLW  0E
4842:  MOVWF  FF6
4844:  MOVLW  09
4846:  MOVWF  FF7
4848:  CLRF   16
484A:  BTFSC  FF2.7
484C:  BSF    16.7
484E:  BCF    FF2.7
4850:  CALL   02F2
4854:  BTFSC  16.7
4856:  BSF    FF2.7
4858:  CLRF   16
485A:  BTFSC  FF2.7
485C:  BSF    16.7
485E:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
4860:  MOVLW  01
4862:  MOVLB  1
4864:  MOVWF  x32
4866:  MOVLW  02
4868:  MOVWF  x33
486A:  MOVLB  0
486C:  CALL   020C
4870:  BTFSC  16.7
4872:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
4874:  MOVLW  24
4876:  MOVWF  FF6
4878:  MOVLW  09
487A:  MOVWF  FF7
487C:  CLRF   16
487E:  BTFSC  FF2.7
4880:  BSF    16.7
4882:  BCF    FF2.7
4884:  CALL   02F2
4888:  BTFSC  16.7
488A:  BSF    FF2.7
488C:  CLRF   16
488E:  BTFSC  FF2.7
4890:  BSF    16.7
4892:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
4894:  MOVLW  01
4896:  MOVLB  1
4898:  MOVWF  x32
489A:  MOVLW  03
489C:  MOVWF  x33
489E:  MOVLB  0
48A0:  CALL   020C
48A4:  BTFSC  16.7
48A6:  BSF    FF2.7
....................             printf(lcd_putc,"     Almacenada     "); 
48A8:  MOVLW  3A
48AA:  MOVWF  FF6
48AC:  MOVLW  09
48AE:  MOVWF  FF7
48B0:  CLRF   16
48B2:  BTFSC  FF2.7
48B4:  BSF    16.7
48B6:  BCF    FF2.7
48B8:  CALL   02F2
48BC:  BTFSC  16.7
48BE:  BSF    FF2.7
48C0:  CLRF   16
48C2:  BTFSC  FF2.7
48C4:  BSF    16.7
48C6:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
48C8:  MOVLW  01
48CA:  MOVLB  1
48CC:  MOVWF  x32
48CE:  MOVLW  04
48D0:  MOVWF  x33
48D2:  MOVLB  0
48D4:  CALL   020C
48D8:  BTFSC  16.7
48DA:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
48DC:  MOVLW  50
48DE:  MOVWF  FF6
48E0:  MOVLW  09
48E2:  MOVWF  FF7
48E4:  CLRF   16
48E6:  BTFSC  FF2.7
48E8:  BSF    16.7
48EA:  BCF    FF2.7
48EC:  CALL   02F2
48F0:  BTFSC  16.7
48F2:  BSF    FF2.7
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
48F4:  CLRF   FA9
48F6:  MOVFF  3A,FA8
48FA:  BCF    FA6.6
48FC:  BCF    FA6.7
48FE:  BSF    FA6.2
4900:  MOVF   FF2,W
4902:  MOVWF  00
4904:  BCF    FF2.7
4906:  MOVLB  F
4908:  MOVLW  55
490A:  MOVWF  FA7
490C:  MOVLW  AA
490E:  MOVWF  FA7
4910:  BSF    FA6.1
4912:  BTFSC  FA6.1
4914:  BRA    4912
4916:  BCF    FA6.2
4918:  MOVF   00,W
491A:  IORWF  FF2,F
491C:  CLRF   16
491E:  BTFSC  FF2.7
4920:  BSF    16.7
4922:  BCF    FF2.7
4924:  MOVLW  14
4926:  MOVLB  1
4928:  MOVWF  x32
492A:  MOVLB  0
492C:  CALL   00B6
4930:  BTFSC  16.7
4932:  BSF    FF2.7
4934:  MOVLW  01
4936:  MOVWF  FA9
4938:  MOVFF  3B,FA8
493C:  BCF    FA6.6
493E:  BCF    FA6.7
4940:  BSF    FA6.2
4942:  MOVF   FF2,W
4944:  MOVWF  00
4946:  BCF    FF2.7
4948:  MOVLB  F
494A:  MOVLW  55
494C:  MOVWF  FA7
494E:  MOVLW  AA
4950:  MOVWF  FA7
4952:  BSF    FA6.1
4954:  BTFSC  FA6.1
4956:  BRA    4954
4958:  BCF    FA6.2
495A:  MOVF   00,W
495C:  IORWF  FF2,F
495E:  CLRF   16
4960:  BTFSC  FF2.7
4962:  BSF    16.7
4964:  BCF    FF2.7
4966:  MOVLW  14
4968:  MOVLB  1
496A:  MOVWF  x32
496C:  MOVLB  0
496E:  CALL   00B6
4972:  BTFSC  16.7
4974:  BSF    FF2.7
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
4976:  MOVLW  02
4978:  MOVWF  FA9
497A:  MOVFF  3C,FA8
497E:  BCF    FA6.6
4980:  BCF    FA6.7
4982:  BSF    FA6.2
4984:  MOVF   FF2,W
4986:  MOVWF  00
4988:  BCF    FF2.7
498A:  MOVLB  F
498C:  MOVLW  55
498E:  MOVWF  FA7
4990:  MOVLW  AA
4992:  MOVWF  FA7
4994:  BSF    FA6.1
4996:  BTFSC  FA6.1
4998:  BRA    4996
499A:  BCF    FA6.2
499C:  MOVF   00,W
499E:  IORWF  FF2,F
49A0:  CLRF   16
49A2:  BTFSC  FF2.7
49A4:  BSF    16.7
49A6:  BCF    FF2.7
49A8:  MOVLW  14
49AA:  MOVLB  1
49AC:  MOVWF  x32
49AE:  MOVLB  0
49B0:  CALL   00B6
49B4:  BTFSC  16.7
49B6:  BSF    FF2.7
49B8:  MOVLW  03
49BA:  MOVWF  FA9
49BC:  MOVFF  3D,FA8
49C0:  BCF    FA6.6
49C2:  BCF    FA6.7
49C4:  BSF    FA6.2
49C6:  MOVF   FF2,W
49C8:  MOVWF  00
49CA:  BCF    FF2.7
49CC:  MOVLB  F
49CE:  MOVLW  55
49D0:  MOVWF  FA7
49D2:  MOVLW  AA
49D4:  MOVWF  FA7
49D6:  BSF    FA6.1
49D8:  BTFSC  FA6.1
49DA:  BRA    49D8
49DC:  BCF    FA6.2
49DE:  MOVF   00,W
49E0:  IORWF  FF2,F
49E2:  CLRF   16
49E4:  BTFSC  FF2.7
49E6:  BSF    16.7
49E8:  BCF    FF2.7
49EA:  MOVLW  14
49EC:  MOVLB  1
49EE:  MOVWF  x32
49F0:  MOVLB  0
49F2:  CALL   00B6
49F6:  BTFSC  16.7
49F8:  BSF    FF2.7
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
49FA:  MOVLW  02
49FC:  MOVLB  1
49FE:  MOVWF  x00
4A00:  CLRF   16
4A02:  BTFSC  FF2.7
4A04:  BSF    16.7
4A06:  BCF    FF2.7
4A08:  MOVLW  FA
4A0A:  MOVWF  x32
4A0C:  MOVLB  0
4A0E:  CALL   00B6
4A12:  BTFSC  16.7
4A14:  BSF    FF2.7
4A16:  MOVLB  1
4A18:  DECFSZ x00,F
4A1A:  BRA    4A00
4A1C:  MOVLW  01
4A1E:  MOVWF  18
4A20:  CLRF   36
4A22:  MOVLW  02
4A24:  MOVWF  1C
4A26:  MOVWF  1E
4A28:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
4A2A:  MOVF   1B,W
4A2C:  SUBLW  0B
4A2E:  BC    4A6A
4A30:  MOVF   1B,W
4A32:  SUBLW  0D
4A34:  BNC   4A6A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
4A36:  MOVLW  01
4A38:  SUBWF  1B,W
4A3A:  MOVLB  1
4A3C:  MOVWF  x00
4A3E:  CLRF   16
4A40:  BTFSC  FF2.7
4A42:  BSF    16.7
4A44:  BCF    FF2.7
4A46:  MOVWF  x32
4A48:  MOVLW  04
4A4A:  MOVWF  x33
4A4C:  MOVLB  0
4A4E:  CALL   020C
4A52:  BTFSC  16.7
4A54:  BSF    FF2.7
4A56:  CLRF   16
4A58:  BTFSC  FF2.7
4A5A:  BSF    16.7
4A5C:  BCF    FF2.7
....................             lcd_putc(t[1]); 
4A5E:  MOVFF  38,131
4A62:  CALL   0286
4A66:  BTFSC  16.7
4A68:  BSF    FF2.7
4A6A:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
4A6C:  MOVF   18,W
4A6E:  SUBLW  06
4A70:  BTFSS  FD8.2
4A72:  BRA    4C62
4A74:  CLRF   16
4A76:  BTFSC  FF2.7
4A78:  BSF    16.7
4A7A:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,2); 
4A7C:  MOVLW  01
4A7E:  MOVWF  x32
4A80:  MOVLW  02
4A82:  MOVWF  x33
4A84:  MOVLB  0
4A86:  CALL   020C
4A8A:  BTFSC  16.7
4A8C:  BSF    FF2.7
....................    printf(lcd_putc,"     Media Movil    "); 
4A8E:  MOVLW  66
4A90:  MOVWF  FF6
4A92:  MOVLW  09
4A94:  MOVWF  FF7
4A96:  CLRF   16
4A98:  BTFSC  FF2.7
4A9A:  BSF    16.7
4A9C:  BCF    FF2.7
4A9E:  CALL   02F2
4AA2:  BTFSC  16.7
4AA4:  BSF    FF2.7
4AA6:  CLRF   16
4AA8:  BTFSC  FF2.7
4AAA:  BSF    16.7
4AAC:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4AAE:  MOVLW  01
4AB0:  MOVLB  1
4AB2:  MOVWF  x32
4AB4:  MOVLW  03
4AB6:  MOVWF  x33
4AB8:  MOVLB  0
4ABA:  CALL   020C
4ABE:  BTFSC  16.7
4AC0:  BSF    FF2.7
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
4AC2:  MOVLW  7C
4AC4:  MOVWF  FF6
4AC6:  MOVLW  09
4AC8:  MOVWF  FF7
4ACA:  MOVLW  07
4ACC:  MOVLB  1
4ACE:  MOVWF  x08
4AD0:  MOVLB  0
4AD2:  CALL   1062
4AD6:  MOVFF  2B,100
4ADA:  MOVLW  01
4ADC:  MOVLB  1
4ADE:  MOVWF  x01
4AE0:  MOVLB  0
4AE2:  CALL   10C4
4AE6:  CLRF   16
4AE8:  BTFSC  FF2.7
4AEA:  BSF    16.7
4AEC:  BCF    FF2.7
4AEE:  MOVLW  20
4AF0:  MOVLB  1
4AF2:  MOVWF  x31
4AF4:  MOVLB  0
4AF6:  CALL   0286
4AFA:  BTFSC  16.7
4AFC:  BSF    FF2.7
4AFE:  CLRF   16
4B00:  BTFSC  FF2.7
4B02:  BSF    16.7
4B04:  BCF    FF2.7
4B06:  MOVLW  20
4B08:  MOVLB  1
4B0A:  MOVWF  x31
4B0C:  MOVLB  0
4B0E:  CALL   0286
4B12:  BTFSC  16.7
4B14:  BSF    FF2.7
4B16:  CLRF   16
4B18:  BTFSC  FF2.7
4B1A:  BSF    16.7
4B1C:  BCF    FF2.7
4B1E:  MOVLW  20
4B20:  MOVLB  1
4B22:  MOVWF  x31
4B24:  MOVLB  0
4B26:  CALL   0286
4B2A:  BTFSC  16.7
4B2C:  BSF    FF2.7
....................     
....................    if(MediaMovil>12) 
4B2E:  MOVF   2B,W
4B30:  SUBLW  0C
4B32:  BC    4B38
....................    {MediaMovil=12;} 
4B34:  MOVLW  0C
4B36:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
4B38:  MOVF   2B,F
4B3A:  BNZ   4B40
....................    {MediaMovil=1;} 
4B3C:  MOVLW  01
4B3E:  MOVWF  2B
....................     
....................       if(UP)//Si oprime hacia arriba 
4B40:  BSF    F93.3
4B42:  BTFSS  F81.3
4B44:  BRA    4B6A
....................       {  if(Flanco == 0)  
4B46:  BTFSC  34.4
4B48:  BRA    4B68
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
4B4A:  MOVLW  01
4B4C:  ADDWF  2B,F
4B4E:  BSF    34.4
4B50:  CLRF   16
4B52:  BTFSC  FF2.7
4B54:  BSF    16.7
4B56:  BCF    FF2.7
4B58:  MOVLW  1E
4B5A:  MOVLB  1
4B5C:  MOVWF  x32
4B5E:  MOVLB  0
4B60:  CALL   00B6
4B64:  BTFSC  16.7
4B66:  BSF    FF2.7
....................          else 
4B68:  BRA    4B6C
....................             {Flanco = 0;} 
4B6A:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4B6C:  BSF    F93.2
4B6E:  BTFSS  F81.2
4B70:  BRA    4B96
....................       {  if(Flanco2 == 0)  
4B72:  BTFSC  34.6
4B74:  BRA    4B94
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
4B76:  MOVLW  01
4B78:  SUBWF  2B,F
4B7A:  BSF    34.6
4B7C:  CLRF   16
4B7E:  BTFSC  FF2.7
4B80:  BSF    16.7
4B82:  BCF    FF2.7
4B84:  MOVLW  1E
4B86:  MOVLB  1
4B88:  MOVWF  x32
4B8A:  MOVLB  0
4B8C:  CALL   00B6
4B90:  BTFSC  16.7
4B92:  BSF    FF2.7
....................          else 
4B94:  BRA    4B98
....................             {Flanco2 = 0;} 
4B96:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
4B98:  BSF    F93.0
4B9A:  BTFSS  F81.0
4B9C:  BRA    4C10
....................       {  if(Flanco1 == 0)  
4B9E:  BTFSC  34.5
4BA0:  BRA    4C0E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4BA2:  MOVLW  01
4BA4:  MOVWF  18
4BA6:  CLRF   36
4BA8:  MOVLW  02
4BAA:  MOVWF  1C
4BAC:  MOVWF  1E
4BAE:  MOVLW  0B
4BB0:  MOVWF  1B
4BB2:  CLRF   16
4BB4:  BTFSC  FF2.7
4BB6:  BSF    16.7
4BB8:  BCF    FF2.7
4BBA:  MOVLW  1E
4BBC:  MOVLB  1
4BBE:  MOVWF  x32
4BC0:  MOVLB  0
4BC2:  CALL   00B6
4BC6:  BTFSC  16.7
4BC8:  BSF    FF2.7
4BCA:  CLRF   16
4BCC:  BTFSC  FF2.7
4BCE:  BSF    16.7
4BD0:  BCF    FF2.7
4BD2:  MOVLW  0C
4BD4:  MOVLB  1
4BD6:  MOVWF  x31
4BD8:  MOVLB  0
4BDA:  CALL   0286
4BDE:  BTFSC  16.7
4BE0:  BSF    FF2.7
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
4BE2:  MOVLW  2A
4BE4:  MOVWF  FA9
4BE6:  MOVFF  2B,FA8
4BEA:  BCF    FA6.6
4BEC:  BCF    FA6.7
4BEE:  BSF    FA6.2
4BF0:  MOVF   FF2,W
4BF2:  MOVWF  00
4BF4:  BCF    FF2.7
4BF6:  MOVLB  F
4BF8:  MOVLW  55
4BFA:  MOVWF  FA7
4BFC:  MOVLW  AA
4BFE:  MOVWF  FA7
4C00:  BSF    FA6.1
4C02:  BTFSC  FA6.1
4C04:  BRA    4C02
4C06:  BCF    FA6.2
4C08:  MOVF   00,W
4C0A:  IORWF  FF2,F
4C0C:  MOVLB  0
....................             }} 
....................          else 
4C0E:  BRA    4C12
....................             {Flanco1 = 0;}    
4C10:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4C12:  BSF    F93.1
4C14:  BTFSS  F81.1
4C16:  BRA    4C5E
....................       {  if(Flanco3 == 0)  
4C18:  BTFSC  34.7
4C1A:  BRA    4C5C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
4C1C:  MOVLW  01
4C1E:  MOVWF  18
4C20:  CLRF   36
4C22:  MOVLW  02
4C24:  MOVWF  1C
4C26:  MOVWF  1E
4C28:  MOVLW  0B
4C2A:  MOVWF  1B
4C2C:  CLRF   16
4C2E:  BTFSC  FF2.7
4C30:  BSF    16.7
4C32:  BCF    FF2.7
4C34:  MOVLW  1E
4C36:  MOVLB  1
4C38:  MOVWF  x32
4C3A:  MOVLB  0
4C3C:  CALL   00B6
4C40:  BTFSC  16.7
4C42:  BSF    FF2.7
4C44:  CLRF   16
4C46:  BTFSC  FF2.7
4C48:  BSF    16.7
4C4A:  BCF    FF2.7
4C4C:  MOVLW  0C
4C4E:  MOVLB  1
4C50:  MOVWF  x31
4C52:  MOVLB  0
4C54:  CALL   0286
4C58:  BTFSC  16.7
4C5A:  BSF    FF2.7
....................          else 
4C5C:  BRA    4C60
....................             {Flanco3 = 0;}   
4C5E:  BCF    34.7
4C60:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
4C62:  MOVF   18,W
4C64:  SUBLW  07
4C66:  BTFSS  FD8.2
4C68:  BRA    50D8
4C6A:  CLRF   16
4C6C:  BTFSC  FF2.7
4C6E:  BSF    16.7
4C70:  BCF    FF2.7
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
4C72:  MOVLW  01
4C74:  MOVWF  x32
4C76:  MOVWF  x33
4C78:  MOVLB  0
4C7A:  CALL   020C
4C7E:  BTFSC  16.7
4C80:  BSF    FF2.7
....................    printf(lcd_putc,"  Zero Point Config "); 
4C82:  MOVLW  8C
4C84:  MOVWF  FF6
4C86:  MOVLW  09
4C88:  MOVWF  FF7
4C8A:  CLRF   16
4C8C:  BTFSC  FF2.7
4C8E:  BSF    16.7
4C90:  BCF    FF2.7
4C92:  CALL   02F2
4C96:  BTFSC  16.7
4C98:  BSF    FF2.7
4C9A:  CLRF   16
4C9C:  BTFSC  FF2.7
4C9E:  BSF    16.7
4CA0:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
4CA2:  MOVLW  01
4CA4:  MOVLB  1
4CA6:  MOVWF  x32
4CA8:  MOVLW  02
4CAA:  MOVWF  x33
4CAC:  MOVLB  0
4CAE:  CALL   020C
4CB2:  BTFSC  16.7
4CB4:  BSF    FF2.7
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
4CB6:  MOVLW  A2
4CB8:  MOVWF  FF6
4CBA:  MOVLW  09
4CBC:  MOVWF  FF7
4CBE:  MOVLW  08
4CC0:  MOVLB  1
4CC2:  MOVWF  x08
4CC4:  MOVLB  0
4CC6:  CALL   1062
4CCA:  MOVLW  01
4CCC:  MOVWF  FE9
4CCE:  MOVFF  8E,10B
4CD2:  MOVFF  8D,10A
4CD6:  MOVFF  8C,109
4CDA:  MOVFF  8B,108
4CDE:  MOVLB  1
4CE0:  MOVWF  x0C
4CE2:  MOVLB  0
4CE4:  CALL   164A
4CE8:  MOVLW  AF
4CEA:  MOVWF  FF6
4CEC:  MOVLW  09
4CEE:  MOVWF  FF7
4CF0:  MOVLW  08
4CF2:  MOVLB  1
4CF4:  MOVWF  x08
4CF6:  MOVLB  0
4CF8:  CALL   1062
4CFC:  CLRF   16
4CFE:  BTFSC  FF2.7
4D00:  BSF    16.7
4D02:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4D04:  MOVLW  01
4D06:  MOVLB  1
4D08:  MOVWF  x32
4D0A:  MOVLW  03
4D0C:  MOVWF  x33
4D0E:  MOVLB  0
4D10:  CALL   020C
4D14:  BTFSC  16.7
4D16:  BSF    FF2.7
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
4D18:  MOVLB  1
4D1A:  CLRF   x04
4D1C:  MOVLB  0
4D1E:  CALL   18E2
4D22:  MOVFF  00,100
4D26:  MOVFF  01,101
4D2A:  MOVFF  02,102
4D2E:  MOVFF  03,103
4D32:  CLRF   16
4D34:  BTFSC  FF2.7
4D36:  BSF    16.7
4D38:  BCF    FF2.7
4D3A:  MOVLW  5A
4D3C:  MOVLB  1
4D3E:  MOVWF  x31
4D40:  MOVLB  0
4D42:  CALL   0286
4D46:  BTFSC  16.7
4D48:  BSF    FF2.7
4D4A:  CLRF   16
4D4C:  BTFSC  FF2.7
4D4E:  BSF    16.7
4D50:  BCF    FF2.7
4D52:  MOVLW  46
4D54:  MOVLB  1
4D56:  MOVWF  x31
4D58:  MOVLB  0
4D5A:  CALL   0286
4D5E:  BTFSC  16.7
4D60:  BSF    FF2.7
4D62:  CLRF   16
4D64:  BTFSC  FF2.7
4D66:  BSF    16.7
4D68:  BCF    FF2.7
4D6A:  MOVLW  3D
4D6C:  MOVLB  1
4D6E:  MOVWF  x31
4D70:  MOVLB  0
4D72:  CALL   0286
4D76:  BTFSC  16.7
4D78:  BSF    FF2.7
4D7A:  MOVLW  01
4D7C:  MOVWF  FE9
4D7E:  MOVFF  4D,10B
4D82:  MOVFF  4C,10A
4D86:  MOVFF  4B,109
4D8A:  MOVFF  4A,108
4D8E:  MOVLB  1
4D90:  CLRF   x0C
4D92:  MOVLB  0
4D94:  CALL   164A
4D98:  MOVLW  C0
4D9A:  MOVWF  FF6
4D9C:  MOVLW  09
4D9E:  MOVWF  FF7
4DA0:  MOVLW  05
4DA2:  MOVLB  1
4DA4:  MOVWF  x08
4DA6:  MOVLB  0
4DA8:  CALL   1062
4DAC:  MOVLW  01
4DAE:  MOVWF  FE9
4DB0:  MOVFF  103,10B
4DB4:  MOVFF  102,10A
4DB8:  MOVFF  101,109
4DBC:  MOVFF  100,108
4DC0:  MOVLB  1
4DC2:  CLRF   x0C
4DC4:  MOVLB  0
4DC6:  CALL   164A
4DCA:  CLRF   16
4DCC:  BTFSC  FF2.7
4DCE:  BSF    16.7
4DD0:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
4DD2:  MOVLW  01
4DD4:  MOVLB  1
4DD6:  MOVWF  x32
4DD8:  MOVLW  04
4DDA:  MOVWF  x33
4DDC:  MOVLB  0
4DDE:  CALL   020C
4DE2:  BTFSC  16.7
4DE4:  BSF    FF2.7
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
4DE6:  MOVLW  CC
4DE8:  MOVWF  FF6
4DEA:  MOVLW  09
4DEC:  MOVWF  FF7
4DEE:  MOVLW  0C
4DF0:  MOVLB  1
4DF2:  MOVWF  x08
4DF4:  MOVLB  0
4DF6:  CALL   1062
4DFA:  MOVLW  01
4DFC:  MOVWF  FE9
4DFE:  MOVFF  BE,10B
4E02:  MOVFF  BD,10A
4E06:  MOVFF  BC,109
4E0A:  MOVFF  BB,108
4E0E:  MOVLB  1
4E10:  CLRF   x0C
4E12:  MOVLB  0
4E14:  CALL   164A
....................      
....................       if(RIGHT)// Si oprime derecha 
4E18:  BSF    F93.0
4E1A:  BTFSS  F81.0
4E1C:  BRA    5086
....................       {  if(Flanco1 == 0)  
4E1E:  BTFSC  34.5
4E20:  BRA    5084
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4E22:  MOVLW  01
4E24:  MOVWF  18
4E26:  CLRF   36
4E28:  MOVLW  02
4E2A:  MOVWF  1C
4E2C:  MOVWF  1E
4E2E:  MOVLW  0B
4E30:  MOVWF  1B
4E32:  CLRF   16
4E34:  BTFSC  FF2.7
4E36:  BSF    16.7
4E38:  BCF    FF2.7
4E3A:  MOVLW  1E
4E3C:  MOVLB  1
4E3E:  MOVWF  x32
4E40:  MOVLB  0
4E42:  CALL   00B6
4E46:  BTFSC  16.7
4E48:  BSF    FF2.7
4E4A:  CLRF   16
4E4C:  BTFSC  FF2.7
4E4E:  BSF    16.7
4E50:  BCF    FF2.7
4E52:  MOVLW  0C
4E54:  MOVLB  1
4E56:  MOVWF  x31
4E58:  MOVLB  0
4E5A:  CALL   0286
4E5E:  BTFSC  16.7
4E60:  BSF    FF2.7
....................             Diferencia=zero_fabrica-sensores(0); 
4E62:  MOVLB  1
4E64:  CLRF   x04
4E66:  MOVLB  0
4E68:  CALL   18E2
4E6C:  MOVFF  FEA,101
4E70:  MOVFF  FE9,100
4E74:  BSF    FD8.1
4E76:  MOVFF  4D,121
4E7A:  MOVFF  4C,120
4E7E:  MOVFF  4B,11F
4E82:  MOVFF  4A,11E
4E86:  MOVFF  03,125
4E8A:  MOVFF  02,124
4E8E:  MOVFF  01,123
4E92:  MOVFF  00,122
4E96:  CALL   0DEA
4E9A:  MOVFF  101,FEA
4E9E:  MOVFF  100,FE9
4EA2:  MOVFF  03,BE
4EA6:  MOVFF  02,BD
4EAA:  MOVFF  01,BC
4EAE:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
4EB2:  MOVLB  1
4EB4:  CLRF   x1D
4EB6:  CLRF   x1C
4EB8:  CLRF   x1B
4EBA:  CLRF   x1A
4EBC:  MOVFF  BE,121
4EC0:  MOVFF  BD,120
4EC4:  MOVFF  BC,11F
4EC8:  MOVFF  BB,11E
4ECC:  MOVLB  0
4ECE:  CALL   182C
4ED2:  BC    4ED6
4ED4:  BNZ   4F04
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
4ED6:  MOVLW  0A
4ED8:  MOVWF  2C
4EDA:  MOVLW  32
4EDC:  MOVWF  FA9
4EDE:  MOVFF  2C,FA8
4EE2:  BCF    FA6.6
4EE4:  BCF    FA6.7
4EE6:  BSF    FA6.2
4EE8:  MOVF   FF2,W
4EEA:  MOVWF  00
4EEC:  BCF    FF2.7
4EEE:  MOVLB  F
4EF0:  MOVLW  55
4EF2:  MOVWF  FA7
4EF4:  MOVLW  AA
4EF6:  MOVWF  FA7
4EF8:  BSF    FA6.1
4EFA:  BTFSC  FA6.1
4EFC:  BRA    4EFA
4EFE:  BCF    FA6.2
4F00:  MOVF   00,W
4F02:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
4F04:  MOVFF  BE,11D
4F08:  MOVFF  BD,11C
4F0C:  MOVFF  BC,11B
4F10:  MOVFF  BB,11A
4F14:  MOVLB  1
4F16:  CLRF   x21
4F18:  CLRF   x20
4F1A:  CLRF   x1F
4F1C:  CLRF   x1E
4F1E:  MOVLB  0
4F20:  CALL   182C
4F24:  BNC   4F56
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
4F26:  MOVLW  14
4F28:  MOVWF  2C
4F2A:  MOVLW  32
4F2C:  MOVWF  FA9
4F2E:  MOVFF  2C,FA8
4F32:  BCF    FA6.6
4F34:  BCF    FA6.7
4F36:  BSF    FA6.2
4F38:  MOVF   FF2,W
4F3A:  MOVWF  00
4F3C:  BCF    FF2.7
4F3E:  MOVLB  F
4F40:  MOVLW  55
4F42:  MOVWF  FA7
4F44:  MOVLW  AA
4F46:  MOVWF  FA7
4F48:  BSF    FA6.1
4F4A:  BTFSC  FA6.1
4F4C:  BRA    4F4A
4F4E:  BCF    FA6.2
4F50:  MOVF   00,W
4F52:  IORWF  FF2,F
4F54:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
4F56:  MOVFF  BB,00
4F5A:  MOVFF  BC,01
4F5E:  MOVFF  BD,02
4F62:  MOVFF  BE,03
4F66:  BCF    01.7
4F68:  MOVFF  BE,BE
4F6C:  MOVFF  BD,BD
4F70:  MOVFF  01,BC
4F74:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
4F78:  MOVFF  BE,B6
4F7C:  MOVFF  BD,B5
4F80:  MOVFF  BC,B4
4F84:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
4F88:  MOVFF  B6,102
4F8C:  MOVFF  B5,101
4F90:  MOVFF  B4,100
4F94:  MOVFF  B3,FF
4F98:  CALL   18A6
4F9C:  MOVFF  01,25
....................             Temporal1=Temporal1-Entero1; 
4FA0:  MOVLB  1
4FA2:  CLRF   x0A
4FA4:  MOVFF  25,109
4FA8:  MOVLB  0
4FAA:  CALL   0C56
4FAE:  BSF    FD8.1
4FB0:  MOVFF  B6,121
4FB4:  MOVFF  B5,120
4FB8:  MOVFF  B4,11F
4FBC:  MOVFF  B3,11E
4FC0:  MOVFF  03,125
4FC4:  MOVFF  02,124
4FC8:  MOVFF  01,123
4FCC:  MOVFF  00,122
4FD0:  CALL   0DEA
4FD4:  MOVFF  03,B6
4FD8:  MOVFF  02,B5
4FDC:  MOVFF  01,B4
4FE0:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
4FE4:  MOVFF  B6,11D
4FE8:  MOVFF  B5,11C
4FEC:  MOVFF  B4,11B
4FF0:  MOVFF  B3,11A
4FF4:  MOVLB  1
4FF6:  CLRF   x21
4FF8:  CLRF   x20
4FFA:  MOVLW  48
4FFC:  MOVWF  x1F
4FFE:  MOVLW  85
5000:  MOVWF  x1E
5002:  MOVLB  0
5004:  CALL   1490
5008:  MOVFF  03,BA
500C:  MOVFF  02,B9
5010:  MOVFF  01,B8
5014:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
5018:  MOVFF  BA,102
501C:  MOVFF  B9,101
5020:  MOVFF  B8,100
5024:  MOVFF  B7,FF
5028:  CALL   18A6
502C:  MOVFF  01,26
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
5030:  MOVLW  3C
5032:  MOVWF  FA9
5034:  MOVFF  25,FA8
5038:  BCF    FA6.6
503A:  BCF    FA6.7
503C:  BSF    FA6.2
503E:  MOVF   FF2,W
5040:  MOVWF  00
5042:  BCF    FF2.7
5044:  MOVLB  F
5046:  MOVLW  55
5048:  MOVWF  FA7
504A:  MOVLW  AA
504C:  MOVWF  FA7
504E:  BSF    FA6.1
5050:  BTFSC  FA6.1
5052:  BRA    5050
5054:  BCF    FA6.2
5056:  MOVF   00,W
5058:  IORWF  FF2,F
505A:  MOVLW  3D
505C:  MOVWF  FA9
505E:  MOVFF  26,FA8
5062:  BCF    FA6.6
5064:  BCF    FA6.7
5066:  BSF    FA6.2
5068:  MOVF   FF2,W
506A:  MOVWF  00
506C:  BCF    FF2.7
506E:  MOVLW  55
5070:  MOVWF  FA7
5072:  MOVLW  AA
5074:  MOVWF  FA7
5076:  BSF    FA6.1
5078:  BTFSC  FA6.1
507A:  BRA    5078
507C:  BCF    FA6.2
507E:  MOVF   00,W
5080:  IORWF  FF2,F
5082:  MOVLB  0
....................             }} 
....................          else 
5084:  BRA    5088
....................             {Flanco1 = 0;}    
5086:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5088:  BSF    F93.1
508A:  BTFSS  F81.1
508C:  BRA    50D4
....................       {  if(Flanco3 == 0)  
508E:  BTFSC  34.7
5090:  BRA    50D2
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
5092:  MOVLW  01
5094:  MOVWF  18
5096:  CLRF   36
5098:  MOVLW  02
509A:  MOVWF  1C
509C:  MOVWF  1E
509E:  MOVLW  0B
50A0:  MOVWF  1B
50A2:  CLRF   16
50A4:  BTFSC  FF2.7
50A6:  BSF    16.7
50A8:  BCF    FF2.7
50AA:  MOVLW  1E
50AC:  MOVLB  1
50AE:  MOVWF  x32
50B0:  MOVLB  0
50B2:  CALL   00B6
50B6:  BTFSC  16.7
50B8:  BSF    FF2.7
50BA:  CLRF   16
50BC:  BTFSC  FF2.7
50BE:  BSF    16.7
50C0:  BCF    FF2.7
50C2:  MOVLW  0C
50C4:  MOVLB  1
50C6:  MOVWF  x31
50C8:  MOVLB  0
50CA:  CALL   0286
50CE:  BTFSC  16.7
50D0:  BSF    FF2.7
....................          else 
50D2:  BRA    50D6
....................             {Flanco3 = 0;}   
50D4:  BCF    34.7
50D6:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
50D8:  MOVF   18,W
50DA:  SUBLW  08
50DC:  BTFSS  FD8.2
50DE:  BRA    56EC
50E0:  CLRF   16
50E2:  BTFSC  FF2.7
50E4:  BSF    16.7
50E6:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
50E8:  MOVLW  01
50EA:  MOVWF  x32
50EC:  MOVWF  x33
50EE:  MOVLB  0
50F0:  CALL   020C
50F4:  BTFSC  16.7
50F6:  BSF    FF2.7
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
50F8:  MOVLB  1
50FA:  CLRF   x04
50FC:  MOVLB  0
50FE:  CALL   18E2
5102:  MOVFF  00,100
5106:  MOVFF  01,101
510A:  MOVFF  02,102
510E:  MOVFF  03,103
5112:  MOVLW  DE
5114:  MOVWF  FF6
5116:  MOVLW  09
5118:  MOVWF  FF7
511A:  MOVLW  0A
511C:  MOVLB  1
511E:  MOVWF  x08
5120:  MOVLB  0
5122:  CALL   1062
5126:  MOVLW  01
5128:  MOVWF  FE9
512A:  MOVFF  103,10B
512E:  MOVFF  102,10A
5132:  MOVFF  101,109
5136:  MOVFF  100,108
513A:  MOVLB  1
513C:  CLRF   x0C
513E:  MOVLB  0
5140:  CALL   164A
5144:  CLRF   16
5146:  BTFSC  FF2.7
5148:  BSF    16.7
514A:  BCF    FF2.7
514C:  MOVLW  20
514E:  MOVLB  1
5150:  MOVWF  x31
5152:  MOVLB  0
5154:  CALL   0286
5158:  BTFSC  16.7
515A:  BSF    FF2.7
515C:  CLRF   16
515E:  BTFSC  FF2.7
5160:  BSF    16.7
5162:  BCF    FF2.7
5164:  MOVLW  20
5166:  MOVLB  1
5168:  MOVWF  x31
516A:  MOVLB  0
516C:  CALL   0286
5170:  BTFSC  16.7
5172:  BSF    FF2.7
5174:  CLRF   16
5176:  BTFSC  FF2.7
5178:  BSF    16.7
517A:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
517C:  MOVLW  01
517E:  MOVLB  1
5180:  MOVWF  x32
5182:  MOVLW  02
5184:  MOVWF  x33
5186:  MOVLB  0
5188:  CALL   020C
518C:  BTFSC  16.7
518E:  BSF    FF2.7
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
5190:  MOVLB  1
5192:  CLRF   x0A
5194:  MOVFF  2A,109
5198:  MOVLB  0
519A:  CALL   0C56
519E:  MOVFF  00,100
51A2:  MOVFF  01,101
51A6:  MOVFF  02,102
51AA:  MOVFF  03,103
51AE:  MOVFF  03,121
51B2:  MOVFF  02,120
51B6:  MOVFF  01,11F
51BA:  MOVFF  00,11E
51BE:  MOVLB  1
51C0:  CLRF   x25
51C2:  CLRF   x24
51C4:  MOVLW  7F
51C6:  MOVWF  x23
51C8:  MOVLW  86
51CA:  MOVWF  x22
51CC:  MOVLB  0
51CE:  CALL   0C8C
51D2:  MOVLB  1
51D4:  CLRF   x1D
51D6:  CLRF   x1C
51D8:  MOVLW  48
51DA:  MOVWF  x1B
51DC:  MOVLW  85
51DE:  MOVWF  x1A
51E0:  MOVFF  03,121
51E4:  MOVFF  02,120
51E8:  MOVFF  01,11F
51EC:  MOVFF  00,11E
51F0:  MOVLB  0
51F2:  CALL   1490
51F6:  MOVFF  00,100
51FA:  MOVFF  01,101
51FE:  MOVFF  02,102
5202:  MOVFF  03,103
5206:  MOVLW  01
5208:  MOVLB  1
520A:  MOVWF  x04
520C:  MOVLB  0
520E:  CALL   18E2
5212:  MOVFF  00,104
5216:  MOVFF  01,105
521A:  MOVFF  02,106
521E:  MOVFF  03,107
5222:  MOVLW  F0
5224:  MOVWF  FF6
5226:  MOVLW  09
5228:  MOVWF  FF7
522A:  MOVLW  05
522C:  MOVLB  1
522E:  MOVWF  x08
5230:  MOVLB  0
5232:  CALL   1062
5236:  MOVLW  01
5238:  MOVWF  FE9
523A:  MOVFF  103,10B
523E:  MOVFF  102,10A
5242:  MOVFF  101,109
5246:  MOVFF  100,108
524A:  MOVLB  1
524C:  CLRF   x0C
524E:  MOVLB  0
5250:  CALL   164A
5254:  CLRF   16
5256:  BTFSC  FF2.7
5258:  BSF    16.7
525A:  BCF    FF2.7
525C:  MOVLW  25
525E:  MOVLB  1
5260:  MOVWF  x31
5262:  MOVLB  0
5264:  CALL   0286
5268:  BTFSC  16.7
526A:  BSF    FF2.7
526C:  MOVLW  FC
526E:  MOVWF  FF6
5270:  MOVLW  09
5272:  MOVWF  FF7
5274:  MOVLW  04
5276:  MOVLB  1
5278:  MOVWF  x08
527A:  MOVLB  0
527C:  CALL   1062
5280:  MOVLW  01
5282:  MOVWF  FE9
5284:  MOVFF  107,10B
5288:  MOVFF  106,10A
528C:  MOVFF  105,109
5290:  MOVFF  104,108
5294:  MOVLB  1
5296:  CLRF   x0C
5298:  MOVLB  0
529A:  CALL   164A
529E:  CLRF   16
52A0:  BTFSC  FF2.7
52A2:  BSF    16.7
52A4:  BCF    FF2.7
52A6:  MOVLW  20
52A8:  MOVLB  1
52AA:  MOVWF  x31
52AC:  MOVLB  0
52AE:  CALL   0286
52B2:  BTFSC  16.7
52B4:  BSF    FF2.7
52B6:  CLRF   16
52B8:  BTFSC  FF2.7
52BA:  BSF    16.7
52BC:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
52BE:  MOVLW  01
52C0:  MOVLB  1
52C2:  MOVWF  x32
52C4:  MOVLW  03
52C6:  MOVWF  x33
52C8:  MOVLB  0
52CA:  CALL   020C
52CE:  BTFSC  16.7
52D0:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
52D2:  MOVLW  02
52D4:  MOVLB  1
52D6:  MOVWF  x04
52D8:  MOVLB  0
52DA:  CALL   18E2
52DE:  MOVFF  00,100
52E2:  MOVFF  01,101
52E6:  MOVFF  02,102
52EA:  MOVFF  03,103
52EE:  MOVFF  03,121
52F2:  MOVFF  02,120
52F6:  MOVFF  01,11F
52FA:  MOVFF  00,11E
52FE:  MOVLB  1
5300:  CLRF   x25
5302:  MOVLW  C0
5304:  MOVWF  x24
5306:  MOVLW  7F
5308:  MOVWF  x23
530A:  MOVLW  88
530C:  MOVWF  x22
530E:  MOVLB  0
5310:  CALL   0C8C
5314:  MOVLB  1
5316:  CLRF   x1D
5318:  CLRF   x1C
531A:  MOVLW  48
531C:  MOVWF  x1B
531E:  MOVLW  85
5320:  MOVWF  x1A
5322:  MOVFF  03,121
5326:  MOVFF  02,120
532A:  MOVFF  01,11F
532E:  MOVFF  00,11E
5332:  MOVLB  0
5334:  CALL   1490
5338:  MOVFF  00,100
533C:  MOVFF  01,101
5340:  MOVFF  02,102
5344:  MOVFF  03,103
5348:  MOVLW  08
534A:  MOVWF  FF6
534C:  MOVLW  0A
534E:  MOVWF  FF7
5350:  MOVLW  04
5352:  MOVLB  1
5354:  MOVWF  x08
5356:  MOVLB  0
5358:  CALL   1062
535C:  MOVLW  01
535E:  MOVWF  FE9
5360:  MOVFF  8E,10B
5364:  MOVFF  8D,10A
5368:  MOVFF  8C,109
536C:  MOVFF  8B,108
5370:  MOVLB  1
5372:  MOVWF  x0C
5374:  MOVLB  0
5376:  CALL   164A
537A:  MOVLW  11
537C:  MOVWF  FF6
537E:  MOVLW  0A
5380:  MOVWF  FF7
5382:  MOVLW  0A
5384:  MOVLB  1
5386:  MOVWF  x08
5388:  MOVLB  0
538A:  CALL   1062
538E:  MOVLW  01
5390:  MOVWF  FE9
5392:  MOVFF  103,10B
5396:  MOVFF  102,10A
539A:  MOVFF  101,109
539E:  MOVFF  100,108
53A2:  MOVLB  1
53A4:  CLRF   x0C
53A6:  MOVLB  0
53A8:  CALL   164A
53AC:  CLRF   16
53AE:  BTFSC  FF2.7
53B0:  BSF    16.7
53B2:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
53B4:  MOVLW  01
53B6:  MOVLB  1
53B8:  MOVWF  x32
53BA:  MOVLW  04
53BC:  MOVWF  x33
53BE:  MOVLB  0
53C0:  CALL   020C
53C4:  BTFSC  16.7
53C6:  BSF    FF2.7
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
53C8:  MOVLW  22
53CA:  MOVWF  FF6
53CC:  MOVLW  0A
53CE:  MOVWF  FF7
53D0:  MOVLW  09
53D2:  MOVLB  1
53D4:  MOVWF  x08
53D6:  MOVLB  0
53D8:  CALL   1062
53DC:  MOVLW  89
53DE:  MOVWF  FE9
53E0:  MOVFF  C2,10B
53E4:  MOVFF  C1,10A
53E8:  MOVFF  C0,109
53EC:  MOVFF  BF,108
53F0:  MOVLW  02
53F2:  MOVLB  1
53F4:  MOVWF  x0C
53F6:  MOVLB  0
53F8:  CALL   164A
53FC:  CLRF   16
53FE:  BTFSC  FF2.7
5400:  BSF    16.7
5402:  BCF    FF2.7
5404:  MOVLW  20
5406:  MOVLB  1
5408:  MOVWF  x31
540A:  MOVLB  0
540C:  CALL   0286
5410:  BTFSC  16.7
5412:  BSF    FF2.7
....................        
....................       if(UP)//Si oprime hacia arriba 
5414:  BSF    F93.3
5416:  BTFSS  F81.3
5418:  BRA    549E
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
541A:  BCF    FD8.1
541C:  MOVFF  C2,121
5420:  MOVFF  C1,120
5424:  MOVFF  C0,11F
5428:  MOVFF  BF,11E
542C:  MOVLW  0A
542E:  MOVLB  1
5430:  MOVWF  x25
5432:  MOVLW  D7
5434:  MOVWF  x24
5436:  MOVLW  23
5438:  MOVWF  x23
543A:  MOVLW  78
543C:  MOVWF  x22
543E:  MOVLB  0
5440:  CALL   0DEA
5444:  MOVFF  03,C2
5448:  MOVFF  02,C1
544C:  MOVFF  01,C0
5450:  MOVFF  00,BF
5454:  CLRF   16
5456:  BTFSC  FF2.7
5458:  BSF    16.7
545A:  BCF    FF2.7
545C:  MOVLW  32
545E:  MOVLB  1
5460:  MOVWF  x32
5462:  MOVLB  0
5464:  CALL   00B6
5468:  BTFSC  16.7
546A:  BSF    FF2.7
....................          if(Ajuste1>30.0) 
546C:  MOVLB  1
546E:  CLRF   x1D
5470:  CLRF   x1C
5472:  MOVLW  70
5474:  MOVWF  x1B
5476:  MOVLW  83
5478:  MOVWF  x1A
547A:  MOVFF  C2,121
547E:  MOVFF  C1,120
5482:  MOVFF  C0,11F
5486:  MOVFF  BF,11E
548A:  MOVLB  0
548C:  CALL   182C
5490:  BNC   549E
....................          {Ajuste1=30.0;} 
5492:  CLRF   xC2
5494:  CLRF   xC1
5496:  MOVLW  70
5498:  MOVWF  xC0
549A:  MOVLW  83
549C:  MOVWF  xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
549E:  BSF    F93.2
54A0:  BTFSS  F81.2
54A2:  BRA    5520
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
54A4:  BSF    FD8.1
54A6:  MOVFF  C2,121
54AA:  MOVFF  C1,120
54AE:  MOVFF  C0,11F
54B2:  MOVFF  BF,11E
54B6:  MOVLW  0A
54B8:  MOVLB  1
54BA:  MOVWF  x25
54BC:  MOVLW  D7
54BE:  MOVWF  x24
54C0:  MOVLW  23
54C2:  MOVWF  x23
54C4:  MOVLW  78
54C6:  MOVWF  x22
54C8:  MOVLB  0
54CA:  CALL   0DEA
54CE:  MOVFF  03,C2
54D2:  MOVFF  02,C1
54D6:  MOVFF  01,C0
54DA:  MOVFF  00,BF
54DE:  CLRF   16
54E0:  BTFSC  FF2.7
54E2:  BSF    16.7
54E4:  BCF    FF2.7
54E6:  MOVLW  32
54E8:  MOVLB  1
54EA:  MOVWF  x32
54EC:  MOVLB  0
54EE:  CALL   00B6
54F2:  BTFSC  16.7
54F4:  BSF    FF2.7
....................          if(Ajuste1<0.0) 
54F6:  MOVFF  C2,11D
54FA:  MOVFF  C1,11C
54FE:  MOVFF  C0,11B
5502:  MOVFF  BF,11A
5506:  MOVLB  1
5508:  CLRF   x21
550A:  CLRF   x20
550C:  CLRF   x1F
550E:  CLRF   x1E
5510:  MOVLB  0
5512:  CALL   182C
5516:  BNC   5520
....................          {Ajuste1=0.0;} 
5518:  CLRF   xC2
551A:  CLRF   xC1
551C:  CLRF   xC0
551E:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
5520:  BSF    F93.0
5522:  BTFSS  F81.0
5524:  BRA    569A
....................       {  if(Flanco1 == 0)  
5526:  BTFSC  34.5
5528:  BRA    5698
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
552A:  MOVLW  01
552C:  MOVWF  18
552E:  CLRF   36
5530:  MOVLW  02
5532:  MOVWF  1C
5534:  MOVWF  1E
5536:  MOVLW  0B
5538:  MOVWF  1B
553A:  CLRF   16
553C:  BTFSC  FF2.7
553E:  BSF    16.7
5540:  BCF    FF2.7
5542:  MOVLW  1E
5544:  MOVLB  1
5546:  MOVWF  x32
5548:  MOVLB  0
554A:  CALL   00B6
554E:  BTFSC  16.7
5550:  BSF    FF2.7
5552:  CLRF   16
5554:  BTFSC  FF2.7
5556:  BSF    16.7
5558:  BCF    FF2.7
555A:  MOVLW  0C
555C:  MOVLB  1
555E:  MOVWF  x31
5560:  MOVLB  0
5562:  CALL   0286
5566:  BTFSC  16.7
5568:  BSF    FF2.7
....................             Temporal=Ajuste1; 
556A:  MOVFF  C2,AA
556E:  MOVFF  C1,A9
5572:  MOVFF  C0,A8
5576:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
557A:  MOVFF  C2,102
557E:  MOVFF  C1,101
5582:  MOVFF  C0,100
5586:  MOVFF  BF,FF
558A:  CALL   18A6
558E:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
5592:  MOVLB  1
5594:  CLRF   x0A
5596:  MOVFF  22,109
559A:  MOVLB  0
559C:  CALL   0C56
55A0:  BSF    FD8.1
55A2:  MOVFF  AA,121
55A6:  MOVFF  A9,120
55AA:  MOVFF  A8,11F
55AE:  MOVFF  A7,11E
55B2:  MOVFF  03,125
55B6:  MOVFF  02,124
55BA:  MOVFF  01,123
55BE:  MOVFF  00,122
55C2:  CALL   0DEA
55C6:  MOVFF  03,AA
55CA:  MOVFF  02,A9
55CE:  MOVFF  01,A8
55D2:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
55D6:  MOVFF  AA,11D
55DA:  MOVFF  A9,11C
55DE:  MOVFF  A8,11B
55E2:  MOVFF  A7,11A
55E6:  MOVLB  1
55E8:  CLRF   x21
55EA:  CLRF   x20
55EC:  MOVLW  48
55EE:  MOVWF  x1F
55F0:  MOVLW  85
55F2:  MOVWF  x1E
55F4:  MOVLB  0
55F6:  CALL   1490
55FA:  MOVFF  03,AE
55FE:  MOVFF  02,AD
5602:  MOVFF  01,AC
5606:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
560A:  MOVFF  AE,102
560E:  MOVFF  AD,101
5612:  MOVFF  AC,100
5616:  MOVFF  AB,FF
561A:  CALL   18A6
561E:  MOVFF  01,23
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
5622:  MOVLW  19
5624:  MOVWF  FA9
5626:  MOVFF  22,FA8
562A:  BCF    FA6.6
562C:  BCF    FA6.7
562E:  BSF    FA6.2
5630:  MOVF   FF2,W
5632:  MOVWF  00
5634:  BCF    FF2.7
5636:  MOVLB  F
5638:  MOVLW  55
563A:  MOVWF  FA7
563C:  MOVLW  AA
563E:  MOVWF  FA7
5640:  BSF    FA6.1
5642:  BTFSC  FA6.1
5644:  BRA    5642
5646:  BCF    FA6.2
5648:  MOVF   00,W
564A:  IORWF  FF2,F
564C:  MOVLW  1A
564E:  MOVWF  FA9
5650:  MOVFF  23,FA8
5654:  BCF    FA6.6
5656:  BCF    FA6.7
5658:  BSF    FA6.2
565A:  MOVF   FF2,W
565C:  MOVWF  00
565E:  BCF    FF2.7
5660:  MOVLW  55
5662:  MOVWF  FA7
5664:  MOVLW  AA
5666:  MOVWF  FA7
5668:  BSF    FA6.1
566A:  BTFSC  FA6.1
566C:  BRA    566A
566E:  BCF    FA6.2
5670:  MOVF   00,W
5672:  IORWF  FF2,F
....................             delay_ms(1000); 
5674:  MOVLW  04
5676:  MOVLB  1
5678:  MOVWF  x00
567A:  CLRF   16
567C:  BTFSC  FF2.7
567E:  BSF    16.7
5680:  BCF    FF2.7
5682:  MOVLW  FA
5684:  MOVWF  x32
5686:  MOVLB  0
5688:  CALL   00B6
568C:  BTFSC  16.7
568E:  BSF    FF2.7
5690:  MOVLB  1
5692:  DECFSZ x00,F
5694:  BRA    567A
5696:  MOVLB  0
....................             }} 
....................          else 
5698:  BRA    569C
....................             {Flanco1 = 0;}    
569A:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
569C:  BSF    F93.1
569E:  BTFSS  F81.1
56A0:  BRA    56E8
....................       {  if(Flanco3 == 0)  
56A2:  BTFSC  34.7
56A4:  BRA    56E6
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
56A6:  MOVLW  01
56A8:  MOVWF  18
56AA:  CLRF   36
56AC:  MOVLW  02
56AE:  MOVWF  1C
56B0:  MOVWF  1E
56B2:  MOVLW  0B
56B4:  MOVWF  1B
56B6:  CLRF   16
56B8:  BTFSC  FF2.7
56BA:  BSF    16.7
56BC:  BCF    FF2.7
56BE:  MOVLW  1E
56C0:  MOVLB  1
56C2:  MOVWF  x32
56C4:  MOVLB  0
56C6:  CALL   00B6
56CA:  BTFSC  16.7
56CC:  BSF    FF2.7
56CE:  CLRF   16
56D0:  BTFSC  FF2.7
56D2:  BSF    16.7
56D4:  BCF    FF2.7
56D6:  MOVLW  0C
56D8:  MOVLB  1
56DA:  MOVWF  x31
56DC:  MOVLB  0
56DE:  CALL   0286
56E2:  BTFSC  16.7
56E4:  BSF    FF2.7
....................          else 
56E6:  BRA    56EA
....................             {Flanco3 = 0;}   
56E8:  BCF    34.7
56EA:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
56EC:  MOVF   18,W
56EE:  SUBLW  09
56F0:  BTFSS  FD8.2
56F2:  GOTO   5ED2
56F6:  CLRF   16
56F8:  BTFSC  FF2.7
56FA:  BSF    16.7
56FC:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
56FE:  MOVLW  01
5700:  MOVWF  x32
5702:  MOVWF  x33
5704:  MOVLB  0
5706:  CALL   020C
570A:  BTFSC  16.7
570C:  BSF    FF2.7
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
570E:  MOVLB  1
5710:  CLRF   x0A
5712:  MOVFF  2A,109
5716:  MOVLB  0
5718:  CALL   0C56
571C:  MOVFF  00,100
5720:  MOVFF  01,101
5724:  MOVFF  02,102
5728:  MOVFF  03,103
572C:  MOVFF  03,121
5730:  MOVFF  02,120
5734:  MOVFF  01,11F
5738:  MOVFF  00,11E
573C:  MOVLB  1
573E:  CLRF   x25
5740:  CLRF   x24
5742:  MOVLW  7F
5744:  MOVWF  x23
5746:  MOVLW  86
5748:  MOVWF  x22
574A:  MOVLB  0
574C:  CALL   0C8C
5750:  MOVLB  1
5752:  CLRF   x1D
5754:  CLRF   x1C
5756:  MOVLW  48
5758:  MOVWF  x1B
575A:  MOVLW  85
575C:  MOVWF  x1A
575E:  MOVFF  03,121
5762:  MOVFF  02,120
5766:  MOVFF  01,11F
576A:  MOVFF  00,11E
576E:  MOVLB  0
5770:  CALL   1490
5774:  MOVFF  00,100
5778:  MOVFF  01,101
577C:  MOVFF  02,102
5780:  MOVFF  03,103
5784:  MOVLW  32
5786:  MOVWF  FF6
5788:  MOVLW  0A
578A:  MOVWF  FF7
578C:  MOVLW  0D
578E:  MOVLB  1
5790:  MOVWF  x08
5792:  MOVLB  0
5794:  CALL   1062
5798:  MOVLW  01
579A:  MOVWF  FE9
579C:  MOVFF  103,10B
57A0:  MOVFF  102,10A
57A4:  MOVFF  101,109
57A8:  MOVFF  100,108
57AC:  MOVLB  1
57AE:  CLRF   x0C
57B0:  MOVLB  0
57B2:  CALL   164A
57B6:  CLRF   16
57B8:  BTFSC  FF2.7
57BA:  BSF    16.7
57BC:  BCF    FF2.7
57BE:  MOVLW  25
57C0:  MOVLB  1
57C2:  MOVWF  x31
57C4:  MOVLB  0
57C6:  CALL   0286
57CA:  BTFSC  16.7
57CC:  BSF    FF2.7
57CE:  CLRF   16
57D0:  BTFSC  FF2.7
57D2:  BSF    16.7
57D4:  BCF    FF2.7
57D6:  MOVLW  20
57D8:  MOVLB  1
57DA:  MOVWF  x31
57DC:  MOVLB  0
57DE:  CALL   0286
57E2:  BTFSC  16.7
57E4:  BSF    FF2.7
57E6:  CLRF   16
57E8:  BTFSC  FF2.7
57EA:  BSF    16.7
57EC:  BCF    FF2.7
....................  
....................    lcd_gotoxy(1,4); 
57EE:  MOVLW  01
57F0:  MOVLB  1
57F2:  MOVWF  x32
57F4:  MOVLW  04
57F6:  MOVWF  x33
57F8:  MOVLB  0
57FA:  CALL   020C
57FE:  BTFSC  16.7
5800:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
5802:  MOVLW  02
5804:  MOVLB  1
5806:  MOVWF  x04
5808:  MOVLB  0
580A:  CALL   18E2
580E:  MOVFF  00,100
5812:  MOVFF  01,101
5816:  MOVFF  02,102
581A:  MOVFF  03,103
581E:  MOVFF  03,121
5822:  MOVFF  02,120
5826:  MOVFF  01,11F
582A:  MOVFF  00,11E
582E:  MOVLB  1
5830:  CLRF   x25
5832:  MOVLW  C0
5834:  MOVWF  x24
5836:  MOVLW  7F
5838:  MOVWF  x23
583A:  MOVLW  88
583C:  MOVWF  x22
583E:  MOVLB  0
5840:  CALL   0C8C
5844:  MOVLB  1
5846:  CLRF   x1D
5848:  CLRF   x1C
584A:  MOVLW  48
584C:  MOVWF  x1B
584E:  MOVLW  85
5850:  MOVWF  x1A
5852:  MOVFF  03,121
5856:  MOVFF  02,120
585A:  MOVFF  01,11F
585E:  MOVFF  00,11E
5862:  MOVLB  0
5864:  CALL   1490
5868:  MOVFF  00,100
586C:  MOVFF  01,101
5870:  MOVFF  02,102
5874:  MOVFF  03,103
5878:  MOVLW  48
587A:  MOVWF  FF6
587C:  MOVLW  0A
587E:  MOVWF  FF7
5880:  MOVLW  04
5882:  MOVLB  1
5884:  MOVWF  x08
5886:  MOVLB  0
5888:  CALL   1062
588C:  MOVLW  01
588E:  MOVWF  FE9
5890:  MOVFF  8E,10B
5894:  MOVFF  8D,10A
5898:  MOVFF  8C,109
589C:  MOVFF  8B,108
58A0:  MOVLB  1
58A2:  MOVWF  x0C
58A4:  MOVLB  0
58A6:  CALL   164A
58AA:  MOVLW  51
58AC:  MOVWF  FF6
58AE:  MOVLW  0A
58B0:  MOVWF  FF7
58B2:  MOVLW  0A
58B4:  MOVLB  1
58B6:  MOVWF  x08
58B8:  MOVLB  0
58BA:  CALL   1062
58BE:  MOVLW  01
58C0:  MOVWF  FE9
58C2:  MOVFF  103,10B
58C6:  MOVFF  102,10A
58CA:  MOVFF  101,109
58CE:  MOVFF  100,108
58D2:  MOVLB  1
58D4:  CLRF   x0C
58D6:  MOVLB  0
58D8:  CALL   164A
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
58DC:  BTFSC  4E.1
58DE:  BRA    5AE6
58E0:  BTFSC  4E.2
58E2:  BRA    5AE6
58E4:  BTFSC  4E.3
58E6:  BRA    5AE6
....................       { 
....................          if(UP)//Si oprime hacia arriba 
58E8:  BSF    F93.3
58EA:  BTFSS  F81.3
58EC:  BRA    5978
....................          { 
....................             delay_ms(500); 
58EE:  MOVLW  02
58F0:  MOVLB  1
58F2:  MOVWF  x00
58F4:  CLRF   16
58F6:  BTFSC  FF2.7
58F8:  BSF    16.7
58FA:  BCF    FF2.7
58FC:  MOVLW  FA
58FE:  MOVWF  x32
5900:  MOVLB  0
5902:  CALL   00B6
5906:  BTFSC  16.7
5908:  BSF    FF2.7
590A:  MOVLB  1
590C:  DECFSZ x00,F
590E:  BRA    58F4
....................             if(UP) 
5910:  BSF    F93.3
5912:  BTFSS  F81.3
5914:  BRA    5976
5916:  CLRF   16
5918:  BTFSC  FF2.7
591A:  BSF    16.7
591C:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
591E:  MOVLW  01
5920:  MOVWF  x32
5922:  MOVLW  02
5924:  MOVWF  x33
5926:  MOVLB  0
5928:  CALL   020C
592C:  BTFSC  16.7
592E:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Manual  "); 
5930:  MOVLW  62
5932:  MOVWF  FF6
5934:  MOVLW  0A
5936:  MOVWF  FF7
5938:  CLRF   16
593A:  BTFSC  FF2.7
593C:  BSF    16.7
593E:  BCF    FF2.7
5940:  CALL   02F2
5944:  BTFSC  16.7
5946:  BSF    FF2.7
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
5948:  BSF    4E.1
594A:  BCF    4E.2
594C:  BCF    4E.3
594E:  MOVLW  0A
5950:  MOVWF  2D
5952:  MOVWF  2F
....................                delay_ms(1000); 
5954:  MOVLW  04
5956:  MOVLB  1
5958:  MOVWF  x00
595A:  CLRF   16
595C:  BTFSC  FF2.7
595E:  BSF    16.7
5960:  BCF    FF2.7
5962:  MOVLW  FA
5964:  MOVWF  x32
5966:  MOVLB  0
5968:  CALL   00B6
596C:  BTFSC  16.7
596E:  BSF    FF2.7
5970:  MOVLB  1
5972:  DECFSZ x00,F
5974:  BRA    595A
5976:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5978:  BSF    F93.2
597A:  BTFSS  F81.2
597C:  BRA    5A08
....................          { 
....................             delay_ms(500); 
597E:  MOVLW  02
5980:  MOVLB  1
5982:  MOVWF  x00
5984:  CLRF   16
5986:  BTFSC  FF2.7
5988:  BSF    16.7
598A:  BCF    FF2.7
598C:  MOVLW  FA
598E:  MOVWF  x32
5990:  MOVLB  0
5992:  CALL   00B6
5996:  BTFSC  16.7
5998:  BSF    FF2.7
599A:  MOVLB  1
599C:  DECFSZ x00,F
599E:  BRA    5984
....................             if(DOWN) 
59A0:  BSF    F93.2
59A2:  BTFSS  F81.2
59A4:  BRA    5A06
59A6:  CLRF   16
59A8:  BTFSC  FF2.7
59AA:  BSF    16.7
59AC:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
59AE:  MOVLW  01
59B0:  MOVWF  x32
59B2:  MOVLW  02
59B4:  MOVWF  x33
59B6:  MOVLB  0
59B8:  CALL   020C
59BC:  BTFSC  16.7
59BE:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Auto   "); 
59C0:  MOVLW  74
59C2:  MOVWF  FF6
59C4:  MOVLW  0A
59C6:  MOVWF  FF7
59C8:  CLRF   16
59CA:  BTFSC  FF2.7
59CC:  BSF    16.7
59CE:  BCF    FF2.7
59D0:  CALL   02F2
59D4:  BTFSC  16.7
59D6:  BSF    FF2.7
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
59D8:  BSF    4E.2
59DA:  BCF    4E.1
59DC:  BCF    4E.3
59DE:  MOVLW  0A
59E0:  MOVWF  2E
59E2:  MOVWF  2F
....................                delay_ms(1000); 
59E4:  MOVLW  04
59E6:  MOVLB  1
59E8:  MOVWF  x00
59EA:  CLRF   16
59EC:  BTFSC  FF2.7
59EE:  BSF    16.7
59F0:  BCF    FF2.7
59F2:  MOVLW  FA
59F4:  MOVWF  x32
59F6:  MOVLB  0
59F8:  CALL   00B6
59FC:  BTFSC  16.7
59FE:  BSF    FF2.7
5A00:  MOVLB  1
5A02:  DECFSZ x00,F
5A04:  BRA    59EA
5A06:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
5A08:  BSF    F93.0
5A0A:  BTFSS  F81.0
5A0C:  BRA    5A98
....................          { 
....................             delay_ms(500); 
5A0E:  MOVLW  02
5A10:  MOVLB  1
5A12:  MOVWF  x00
5A14:  CLRF   16
5A16:  BTFSC  FF2.7
5A18:  BSF    16.7
5A1A:  BCF    FF2.7
5A1C:  MOVLW  FA
5A1E:  MOVWF  x32
5A20:  MOVLB  0
5A22:  CALL   00B6
5A26:  BTFSC  16.7
5A28:  BSF    FF2.7
5A2A:  MOVLB  1
5A2C:  DECFSZ x00,F
5A2E:  BRA    5A14
....................             if(RIGHT) 
5A30:  BSF    F93.0
5A32:  BTFSS  F81.0
5A34:  BRA    5A96
5A36:  CLRF   16
5A38:  BTFSC  FF2.7
5A3A:  BSF    16.7
5A3C:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5A3E:  MOVLW  01
5A40:  MOVWF  x32
5A42:  MOVLW  02
5A44:  MOVWF  x33
5A46:  MOVLB  0
5A48:  CALL   020C
5A4C:  BTFSC  16.7
5A4E:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Semi   "); 
5A50:  MOVLW  84
5A52:  MOVWF  FF6
5A54:  MOVLW  0A
5A56:  MOVWF  FF7
5A58:  CLRF   16
5A5A:  BTFSC  FF2.7
5A5C:  BSF    16.7
5A5E:  BCF    FF2.7
5A60:  CALL   02F2
5A64:  BTFSC  16.7
5A66:  BSF    FF2.7
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
5A68:  BSF    4E.3
5A6A:  BCF    4E.1
5A6C:  BCF    4E.2
5A6E:  MOVLW  0A
5A70:  MOVWF  2D
5A72:  MOVWF  2E
....................                delay_ms(1000); 
5A74:  MOVLW  04
5A76:  MOVLB  1
5A78:  MOVWF  x00
5A7A:  CLRF   16
5A7C:  BTFSC  FF2.7
5A7E:  BSF    16.7
5A80:  BCF    FF2.7
5A82:  MOVLW  FA
5A84:  MOVWF  x32
5A86:  MOVLB  0
5A88:  CALL   00B6
5A8C:  BTFSC  16.7
5A8E:  BSF    FF2.7
5A90:  MOVLB  1
5A92:  DECFSZ x00,F
5A94:  BRA    5A7A
5A96:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
5A98:  BSF    F93.1
5A9A:  BTFSS  F81.1
5A9C:  BRA    5AE6
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
5A9E:  MOVLW  01
5AA0:  MOVWF  18
5AA2:  CLRF   36
5AA4:  MOVLW  02
5AA6:  MOVWF  1C
5AA8:  MOVWF  1E
5AAA:  MOVLW  0B
5AAC:  MOVWF  1B
5AAE:  MOVLW  02
5AB0:  MOVLB  1
5AB2:  MOVWF  x00
5AB4:  CLRF   16
5AB6:  BTFSC  FF2.7
5AB8:  BSF    16.7
5ABA:  BCF    FF2.7
5ABC:  MOVLW  FA
5ABE:  MOVWF  x32
5AC0:  MOVLB  0
5AC2:  CALL   00B6
5AC6:  BTFSC  16.7
5AC8:  BSF    FF2.7
5ACA:  MOVLB  1
5ACC:  DECFSZ x00,F
5ACE:  BRA    5AB4
5AD0:  CLRF   16
5AD2:  BTFSC  FF2.7
5AD4:  BSF    16.7
5AD6:  BCF    FF2.7
5AD8:  MOVLW  0C
5ADA:  MOVWF  x31
5ADC:  MOVLB  0
5ADE:  CALL   0286
5AE2:  BTFSC  16.7
5AE4:  BSF    FF2.7
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
5AE6:  BTFSC  4E.1
5AE8:  BRA    5AF2
5AEA:  MOVF   2E,W
5AEC:  SUBLW  14
5AEE:  BTFSS  FD8.2
5AF0:  BRA    5C5E
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
5AF2:  BCF    4E.2
5AF4:  BCF    4E.3
5AF6:  MOVLW  0A
5AF8:  MOVWF  2D
5AFA:  MOVWF  2F
5AFC:  CLRF   16
5AFE:  BTFSC  FF2.7
5B00:  BSF    16.7
5B02:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5B04:  MOVLW  01
5B06:  MOVLB  1
5B08:  MOVWF  x32
5B0A:  MOVLW  02
5B0C:  MOVWF  x33
5B0E:  MOVLB  0
5B10:  CALL   020C
5B14:  BTFSC  16.7
5B16:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Manual  "); 
5B18:  MOVLW  94
5B1A:  MOVWF  FF6
5B1C:  MOVLW  0A
5B1E:  MOVWF  FF7
5B20:  CLRF   16
5B22:  BTFSC  FF2.7
5B24:  BSF    16.7
5B26:  BCF    FF2.7
5B28:  CALL   02F2
5B2C:  BTFSC  16.7
5B2E:  BSF    FF2.7
5B30:  CLRF   16
5B32:  BTFSC  FF2.7
5B34:  BSF    16.7
5B36:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5B38:  MOVLW  01
5B3A:  MOVLB  1
5B3C:  MOVWF  x32
5B3E:  MOVLW  03
5B40:  MOVWF  x33
5B42:  MOVLB  0
5B44:  CALL   020C
5B48:  BTFSC  16.7
5B4A:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
5B4C:  MOVLW  A6
5B4E:  MOVWF  FF6
5B50:  MOVLW  0A
5B52:  MOVWF  FF7
5B54:  CLRF   16
5B56:  BTFSC  FF2.7
5B58:  BSF    16.7
5B5A:  BCF    FF2.7
5B5C:  CALL   02F2
5B60:  BTFSC  16.7
5B62:  BSF    FF2.7
....................          if(LEFT) 
5B64:  BSF    F93.1
5B66:  BTFSS  F81.1
5B68:  BRA    5C5E
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(251);tmp=251;  
5B6A:  BCF    4E.1
5B6C:  MOVLW  14
5B6E:  MOVWF  2E
5B70:  MOVLW  0A
5B72:  MOVWF  2D
5B74:  MOVWF  2F
5B76:  MOVLW  02
5B78:  MOVLB  1
5B7A:  MOVWF  x00
5B7C:  CLRF   16
5B7E:  BTFSC  FF2.7
5B80:  BSF    16.7
5B82:  BCF    FF2.7
5B84:  MOVLW  FA
5B86:  MOVWF  x32
5B88:  MOVLB  0
5B8A:  CALL   00B6
5B8E:  BTFSC  16.7
5B90:  BSF    FF2.7
5B92:  MOVLB  1
5B94:  DECFSZ x00,F
5B96:  BRA    5B7C
5B98:  CLRF   16
5B9A:  BTFSC  FF2.7
5B9C:  BSF    16.7
5B9E:  BCF    FF2.7
5BA0:  MOVLW  0C
5BA2:  MOVWF  x31
5BA4:  MOVLB  0
5BA6:  CALL   0286
5BAA:  BTFSC  16.7
5BAC:  BSF    FF2.7
5BAE:  MOVLW  FB
5BB0:  MOVWF  xFF
5BB2:  CALL   1946
5BB6:  MOVLW  FB
5BB8:  MOVWF  2A
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
5BBA:  MOVLW  0A
5BBC:  MOVWF  FA9
5BBE:  MOVFF  2E,FA8
5BC2:  BCF    FA6.6
5BC4:  BCF    FA6.7
5BC6:  BSF    FA6.2
5BC8:  MOVF   FF2,W
5BCA:  MOVWF  00
5BCC:  BCF    FF2.7
5BCE:  MOVLB  F
5BD0:  MOVLW  55
5BD2:  MOVWF  FA7
5BD4:  MOVLW  AA
5BD6:  MOVWF  FA7
5BD8:  BSF    FA6.1
5BDA:  BTFSC  FA6.1
5BDC:  BRA    5BDA
5BDE:  BCF    FA6.2
5BE0:  MOVF   00,W
5BE2:  IORWF  FF2,F
5BE4:  MOVLW  0C
5BE6:  MOVWF  FA9
5BE8:  MOVFF  2F,FA8
5BEC:  BCF    FA6.6
5BEE:  BCF    FA6.7
5BF0:  BSF    FA6.2
5BF2:  MOVF   FF2,W
5BF4:  MOVWF  00
5BF6:  BCF    FF2.7
5BF8:  MOVLW  55
5BFA:  MOVWF  FA7
5BFC:  MOVLW  AA
5BFE:  MOVWF  FA7
5C00:  BSF    FA6.1
5C02:  BTFSC  FA6.1
5C04:  BRA    5C02
5C06:  BCF    FA6.2
5C08:  MOVF   00,W
5C0A:  IORWF  FF2,F
5C0C:  MOVLW  0B
5C0E:  MOVWF  FA9
5C10:  MOVFF  2D,FA8
5C14:  BCF    FA6.6
5C16:  BCF    FA6.7
5C18:  BSF    FA6.2
5C1A:  MOVF   FF2,W
5C1C:  MOVWF  00
5C1E:  BCF    FF2.7
5C20:  MOVLW  55
5C22:  MOVWF  FA7
5C24:  MOVLW  AA
5C26:  MOVWF  FA7
5C28:  BSF    FA6.1
5C2A:  BTFSC  FA6.1
5C2C:  BRA    5C2A
5C2E:  BCF    FA6.2
5C30:  MOVF   00,W
5C32:  IORWF  FF2,F
5C34:  MOVLW  0D
5C36:  MOVWF  FA9
5C38:  MOVFF  2A,FA8
5C3C:  BCF    FA6.6
5C3E:  BCF    FA6.7
5C40:  BSF    FA6.2
5C42:  MOVF   FF2,W
5C44:  MOVWF  00
5C46:  BCF    FF2.7
5C48:  MOVLW  55
5C4A:  MOVWF  FA7
5C4C:  MOVLW  AA
5C4E:  MOVWF  FA7
5C50:  BSF    FA6.1
5C52:  BTFSC  FA6.1
5C54:  BRA    5C52
5C56:  BCF    FA6.2
5C58:  MOVF   00,W
5C5A:  IORWF  FF2,F
5C5C:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
5C5E:  BTFSC  4E.2
5C60:  BRA    5C6A
5C62:  MOVF   2D,W
5C64:  SUBLW  14
5C66:  BTFSS  FD8.2
5C68:  BRA    5D7A
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
5C6A:  BCF    4E.1
5C6C:  BCF    4E.3
5C6E:  MOVLW  0A
5C70:  MOVWF  2F
5C72:  MOVWF  2E
5C74:  CLRF   16
5C76:  BTFSC  FF2.7
5C78:  BSF    16.7
5C7A:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5C7C:  MOVLW  01
5C7E:  MOVLB  1
5C80:  MOVWF  x32
5C82:  MOVLW  02
5C84:  MOVWF  x33
5C86:  MOVLB  0
5C88:  CALL   020C
5C8C:  BTFSC  16.7
5C8E:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Auto   "); 
5C90:  MOVLW  BC
5C92:  MOVWF  FF6
5C94:  MOVLW  0A
5C96:  MOVWF  FF7
5C98:  CLRF   16
5C9A:  BTFSC  FF2.7
5C9C:  BSF    16.7
5C9E:  BCF    FF2.7
5CA0:  CALL   02F2
5CA4:  BTFSC  16.7
5CA6:  BSF    FF2.7
5CA8:  CLRF   16
5CAA:  BTFSC  FF2.7
5CAC:  BSF    16.7
5CAE:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5CB0:  MOVLW  01
5CB2:  MOVLB  1
5CB4:  MOVWF  x32
5CB6:  MOVLW  03
5CB8:  MOVWF  x33
5CBA:  MOVLB  0
5CBC:  CALL   020C
5CC0:  BTFSC  16.7
5CC2:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
5CC4:  MOVLW  CC
5CC6:  MOVWF  FF6
5CC8:  MOVLW  0A
5CCA:  MOVWF  FF7
5CCC:  CLRF   16
5CCE:  BTFSC  FF2.7
5CD0:  BSF    16.7
5CD2:  BCF    FF2.7
5CD4:  CALL   02F2
5CD8:  BTFSC  16.7
5CDA:  BSF    FF2.7
....................          if(LEFT) 
5CDC:  BSF    F93.1
5CDE:  BTFSS  F81.1
5CE0:  BRA    5D7A
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5CE2:  BCF    4E.2
5CE4:  MOVLW  14
5CE6:  MOVWF  2D
5CE8:  MOVLW  0A
5CEA:  MOVWF  2F
5CEC:  MOVWF  2E
5CEE:  MOVLW  02
5CF0:  MOVLB  1
5CF2:  MOVWF  x00
5CF4:  CLRF   16
5CF6:  BTFSC  FF2.7
5CF8:  BSF    16.7
5CFA:  BCF    FF2.7
5CFC:  MOVLW  FA
5CFE:  MOVWF  x32
5D00:  MOVLB  0
5D02:  CALL   00B6
5D06:  BTFSC  16.7
5D08:  BSF    FF2.7
5D0A:  MOVLB  1
5D0C:  DECFSZ x00,F
5D0E:  BRA    5CF4
5D10:  CLRF   16
5D12:  BTFSC  FF2.7
5D14:  BSF    16.7
5D16:  BCF    FF2.7
5D18:  MOVLW  0C
5D1A:  MOVWF  x31
5D1C:  MOVLB  0
5D1E:  CALL   0286
5D22:  BTFSC  16.7
5D24:  BSF    FF2.7
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
5D26:  MOVLW  0B
5D28:  MOVWF  FA9
5D2A:  MOVFF  2D,FA8
5D2E:  BCF    FA6.6
5D30:  BCF    FA6.7
5D32:  BSF    FA6.2
5D34:  MOVF   FF2,W
5D36:  MOVWF  00
5D38:  BCF    FF2.7
5D3A:  MOVLB  F
5D3C:  MOVLW  55
5D3E:  MOVWF  FA7
5D40:  MOVLW  AA
5D42:  MOVWF  FA7
5D44:  BSF    FA6.1
5D46:  BTFSC  FA6.1
5D48:  BRA    5D46
5D4A:  BCF    FA6.2
5D4C:  MOVF   00,W
5D4E:  IORWF  FF2,F
5D50:  MOVLW  0C
5D52:  MOVWF  FA9
5D54:  MOVFF  2F,FA8
5D58:  BCF    FA6.6
5D5A:  BCF    FA6.7
5D5C:  BSF    FA6.2
5D5E:  MOVF   FF2,W
5D60:  MOVWF  00
5D62:  BCF    FF2.7
5D64:  MOVLW  55
5D66:  MOVWF  FA7
5D68:  MOVLW  AA
5D6A:  MOVWF  FA7
5D6C:  BSF    FA6.1
5D6E:  BTFSC  FA6.1
5D70:  BRA    5D6E
5D72:  BCF    FA6.2
5D74:  MOVF   00,W
5D76:  IORWF  FF2,F
5D78:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
5D7A:  BTFSC  4E.3
5D7C:  BRA    5D86
5D7E:  MOVF   2F,W
5D80:  SUBLW  14
5D82:  BTFSS  FD8.2
5D84:  BRA    5ED0
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
5D86:  BCF    4E.1
5D88:  BCF    4E.2
5D8A:  MOVLW  0A
5D8C:  MOVWF  2D
5D8E:  MOVWF  2E
5D90:  CLRF   16
5D92:  BTFSC  FF2.7
5D94:  BSF    16.7
5D96:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5D98:  MOVLW  01
5D9A:  MOVLB  1
5D9C:  MOVWF  x32
5D9E:  MOVLW  02
5DA0:  MOVWF  x33
5DA2:  MOVLB  0
5DA4:  CALL   020C
5DA8:  BTFSC  16.7
5DAA:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Semi   "); 
5DAC:  MOVLW  E2
5DAE:  MOVWF  FF6
5DB0:  MOVLW  0A
5DB2:  MOVWF  FF7
5DB4:  CLRF   16
5DB6:  BTFSC  FF2.7
5DB8:  BSF    16.7
5DBA:  BCF    FF2.7
5DBC:  CALL   02F2
5DC0:  BTFSC  16.7
5DC2:  BSF    FF2.7
....................          if(UP) 
5DC4:  BSF    F93.3
5DC6:  BTFSS  F81.3
5DC8:  BRA    5DCC
....................          { 
....................             tmp++; 
5DCA:  INCF   2A,F
....................              
....................          } 
....................           
....................          if(DOWN) 
5DCC:  BSF    F93.2
5DCE:  BTFSS  F81.2
5DD0:  BRA    5DD4
....................          { 
....................             tmp--; 
5DD2:  DECF   2A,F
....................          } 
....................          ValorSemi=tmp; 
5DD4:  MOVFF  2A,30
....................          ajustar_damper(tmp); 
5DD8:  MOVFF  2A,FF
5DDC:  CALL   1946
....................          if(LEFT) 
5DE0:  BSF    F93.1
5DE2:  BTFSS  F81.1
5DE4:  BRA    5ED0
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5DE6:  MOVLW  0D
5DE8:  MOVWF  FA9
5DEA:  MOVFF  2A,FA8
5DEE:  BCF    FA6.6
5DF0:  BCF    FA6.7
5DF2:  BSF    FA6.2
5DF4:  MOVF   FF2,W
5DF6:  MOVWF  00
5DF8:  BCF    FF2.7
5DFA:  MOVLB  F
5DFC:  MOVLW  55
5DFE:  MOVWF  FA7
5E00:  MOVLW  AA
5E02:  MOVWF  FA7
5E04:  BSF    FA6.1
5E06:  BTFSC  FA6.1
5E08:  BRA    5E06
5E0A:  BCF    FA6.2
5E0C:  MOVF   00,W
5E0E:  IORWF  FF2,F
5E10:  BCF    4E.3
5E12:  MOVLW  14
5E14:  MOVWF  2F
5E16:  MOVLW  0A
5E18:  MOVWF  2D
5E1A:  MOVWF  2E
5E1C:  MOVLW  02
5E1E:  MOVLB  1
5E20:  MOVWF  x00
5E22:  CLRF   16
5E24:  BTFSC  FF2.7
5E26:  BSF    16.7
5E28:  BCF    FF2.7
5E2A:  MOVLW  FA
5E2C:  MOVWF  x32
5E2E:  MOVLB  0
5E30:  CALL   00B6
5E34:  BTFSC  16.7
5E36:  BSF    FF2.7
5E38:  MOVLB  1
5E3A:  DECFSZ x00,F
5E3C:  BRA    5E22
5E3E:  CLRF   16
5E40:  BTFSC  FF2.7
5E42:  BSF    16.7
5E44:  BCF    FF2.7
5E46:  MOVLW  0C
5E48:  MOVWF  x31
5E4A:  MOVLB  0
5E4C:  CALL   0286
5E50:  BTFSC  16.7
5E52:  BSF    FF2.7
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
5E54:  MOVLW  0C
5E56:  MOVWF  FA9
5E58:  MOVFF  2F,FA8
5E5C:  BCF    FA6.6
5E5E:  BCF    FA6.7
5E60:  BSF    FA6.2
5E62:  MOVF   FF2,W
5E64:  MOVWF  00
5E66:  BCF    FF2.7
5E68:  MOVLB  F
5E6A:  MOVLW  55
5E6C:  MOVWF  FA7
5E6E:  MOVLW  AA
5E70:  MOVWF  FA7
5E72:  BSF    FA6.1
5E74:  BTFSC  FA6.1
5E76:  BRA    5E74
5E78:  BCF    FA6.2
5E7A:  MOVF   00,W
5E7C:  IORWF  FF2,F
5E7E:  MOVLW  0B
5E80:  MOVWF  FA9
5E82:  MOVFF  2D,FA8
5E86:  BCF    FA6.6
5E88:  BCF    FA6.7
5E8A:  BSF    FA6.2
5E8C:  MOVF   FF2,W
5E8E:  MOVWF  00
5E90:  BCF    FF2.7
5E92:  MOVLW  55
5E94:  MOVWF  FA7
5E96:  MOVLW  AA
5E98:  MOVWF  FA7
5E9A:  BSF    FA6.1
5E9C:  BTFSC  FA6.1
5E9E:  BRA    5E9C
5EA0:  BCF    FA6.2
5EA2:  MOVF   00,W
5EA4:  IORWF  FF2,F
5EA6:  MOVLW  0A
5EA8:  MOVWF  FA9
5EAA:  MOVFF  2E,FA8
5EAE:  BCF    FA6.6
5EB0:  BCF    FA6.7
5EB2:  BSF    FA6.2
5EB4:  MOVF   FF2,W
5EB6:  MOVWF  00
5EB8:  BCF    FF2.7
5EBA:  MOVLW  55
5EBC:  MOVWF  FA7
5EBE:  MOVLW  AA
5EC0:  MOVWF  FA7
5EC2:  BSF    FA6.1
5EC4:  BTFSC  FA6.1
5EC6:  BRA    5EC4
5EC8:  BCF    FA6.2
5ECA:  MOVF   00,W
5ECC:  IORWF  FF2,F
5ECE:  MOVLB  0
5ED0:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
5ED2:  MOVF   18,W
5ED4:  SUBLW  14
5ED6:  BTFSS  FD8.2
5ED8:  BRA    63CE
....................    { 
....................       if(Lectura2==1) 
5EDA:  BTFSS  35.6
5EDC:  BRA    6050
5EDE:  CLRF   16
5EE0:  BTFSC  FF2.7
5EE2:  BSF    16.7
5EE4:  BCF    FF2.7
....................       { 
....................       lcd_gotoxy(1,1);                      
5EE6:  MOVLW  01
5EE8:  MOVWF  x32
5EEA:  MOVWF  x33
5EEC:  MOVLB  0
5EEE:  CALL   020C
5EF2:  BTFSC  16.7
5EF4:  BSF    FF2.7
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
5EF6:  MOVLW  F2
5EF8:  MOVWF  FF6
5EFA:  MOVLW  0A
5EFC:  MOVWF  FF7
5EFE:  CLRF   16
5F00:  BTFSC  FF2.7
5F02:  BSF    16.7
5F04:  BCF    FF2.7
5F06:  CALL   02F2
5F0A:  BTFSC  16.7
5F0C:  BSF    FF2.7
5F0E:  CLRF   16
5F10:  BTFSC  FF2.7
5F12:  BSF    16.7
5F14:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
5F16:  MOVLW  01
5F18:  MOVLB  1
5F1A:  MOVWF  x32
5F1C:  MOVLW  02
5F1E:  MOVWF  x33
5F20:  MOVLB  0
5F22:  CALL   020C
5F26:  BTFSC  16.7
5F28:  BSF    FF2.7
....................       printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
5F2A:  MOVLB  1
5F2C:  CLRF   x0A
5F2E:  MOVFF  2A,109
5F32:  MOVLB  0
5F34:  CALL   0C56
5F38:  MOVFF  00,100
5F3C:  MOVFF  01,101
5F40:  MOVFF  02,102
5F44:  MOVFF  03,103
5F48:  MOVFF  03,121
5F4C:  MOVFF  02,120
5F50:  MOVFF  01,11F
5F54:  MOVFF  00,11E
5F58:  MOVLB  1
5F5A:  CLRF   x25
5F5C:  CLRF   x24
5F5E:  MOVLW  7F
5F60:  MOVWF  x23
5F62:  MOVLW  86
5F64:  MOVWF  x22
5F66:  MOVLB  0
5F68:  CALL   0C8C
5F6C:  MOVLB  1
5F6E:  CLRF   x1D
5F70:  CLRF   x1C
5F72:  MOVLW  48
5F74:  MOVWF  x1B
5F76:  MOVLW  85
5F78:  MOVWF  x1A
5F7A:  MOVFF  03,121
5F7E:  MOVFF  02,120
5F82:  MOVFF  01,11F
5F86:  MOVFF  00,11E
5F8A:  MOVLB  0
5F8C:  CALL   1490
5F90:  MOVFF  00,100
5F94:  MOVFF  01,101
5F98:  MOVFF  02,102
5F9C:  MOVFF  03,103
5FA0:  MOVLW  FC
5FA2:  MOVWF  FF6
5FA4:  MOVLW  0A
5FA6:  MOVWF  FF7
5FA8:  MOVLW  05
5FAA:  MOVLB  1
5FAC:  MOVWF  x08
5FAE:  MOVLB  0
5FB0:  CALL   1062
5FB4:  MOVLW  01
5FB6:  MOVWF  FE9
5FB8:  MOVFF  103,10B
5FBC:  MOVFF  102,10A
5FC0:  MOVFF  101,109
5FC4:  MOVFF  100,108
5FC8:  MOVLB  1
5FCA:  CLRF   x0C
5FCC:  MOVLB  0
5FCE:  CALL   164A
5FD2:  CLRF   16
5FD4:  BTFSC  FF2.7
5FD6:  BSF    16.7
5FD8:  BCF    FF2.7
5FDA:  MOVLW  25
5FDC:  MOVLB  1
5FDE:  MOVWF  x31
5FE0:  MOVLB  0
5FE2:  CALL   0286
5FE6:  BTFSC  16.7
5FE8:  BSF    FF2.7
5FEA:  CLRF   16
5FEC:  BTFSC  FF2.7
5FEE:  BSF    16.7
5FF0:  BCF    FF2.7
....................       lcd_gotoxy(1,3); 
5FF2:  MOVLW  01
5FF4:  MOVLB  1
5FF6:  MOVWF  x32
5FF8:  MOVLW  03
5FFA:  MOVWF  x33
5FFC:  MOVLB  0
5FFE:  CALL   020C
6002:  BTFSC  16.7
6004:  BSF    FF2.7
....................       printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
6006:  MOVLW  0A
6008:  MOVWF  FF6
600A:  MOVLW  0B
600C:  MOVWF  FF7
600E:  MOVLW  08
6010:  MOVLB  1
6012:  MOVWF  x08
6014:  MOVLB  0
6016:  CALL   1062
601A:  MOVLW  01
601C:  MOVWF  FE9
601E:  MOVFF  8E,10B
6022:  MOVFF  8D,10A
6026:  MOVFF  8C,109
602A:  MOVFF  8B,108
602E:  MOVLB  1
6030:  MOVWF  x0C
6032:  MOVLB  0
6034:  CALL   164A
6038:  MOVLW  17
603A:  MOVWF  FF6
603C:  MOVLW  0B
603E:  MOVWF  FF7
6040:  MOVLW  07
6042:  MOVLB  1
6044:  MOVWF  x08
6046:  MOVLB  0
6048:  CALL   1062
....................       Lectura2=0; 
604C:  BCF    35.6
604E:  MOVLB  1
....................       } 
....................        
....................       if(horas==60) 
6050:  MOVF   33,W
6052:  SUBLW  3C
6054:  BNZ   608C
6056:  CLRF   16
6058:  BTFSC  FF2.7
605A:  BSF    16.7
605C:  BCF    FF2.7
....................       { 
....................          lcd_gotoxy(10,1);                      
605E:  MOVLW  0A
6060:  MOVWF  x32
6062:  MOVLW  01
6064:  MOVWF  x33
6066:  MOVLB  0
6068:  CALL   020C
606C:  BTFSC  16.7
606E:  BSF    FF2.7
....................          printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
6070:  MOVLW  20
6072:  MOVWF  FF6
6074:  MOVLW  0B
6076:  MOVWF  FF7
6078:  CLRF   16
607A:  BTFSC  FF2.7
607C:  BSF    16.7
607E:  BCF    FF2.7
6080:  CALL   02F2
6084:  BTFSC  16.7
6086:  BSF    FF2.7
....................       } 
....................       else 
6088:  BRA    60BE
608A:  MOVLB  1
608C:  CLRF   16
608E:  BTFSC  FF2.7
6090:  BSF    16.7
6092:  BCF    FF2.7
....................       { 
....................          lcd_gotoxy(10,1);                      
6094:  MOVLW  0A
6096:  MOVWF  x32
6098:  MOVLW  01
609A:  MOVWF  x33
609C:  MOVLB  0
609E:  CALL   020C
60A2:  BTFSC  16.7
60A4:  BSF    FF2.7
....................          printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
60A6:  MOVLW  2C
60A8:  MOVWF  FF6
60AA:  MOVLW  0B
60AC:  MOVWF  FF7
60AE:  CLRF   16
60B0:  BTFSC  FF2.7
60B2:  BSF    16.7
60B4:  BCF    FF2.7
60B6:  CALL   02F2
60BA:  BTFSC  16.7
60BC:  BSF    FF2.7
....................       } 
....................        
....................       if(iniciodamper==0) 
60BE:  BTFSC  4E.0
60C0:  BRA    60FA
....................       { 
....................          flag_iniciodamper=1; 
60C2:  BSF    35.7
60C4:  CLRF   16
60C6:  BTFSC  FF2.7
60C8:  BSF    16.7
60CA:  BCF    FF2.7
....................          lcd_gotoxy(11,2); 
60CC:  MOVLW  0B
60CE:  MOVLB  1
60D0:  MOVWF  x32
60D2:  MOVLW  02
60D4:  MOVWF  x33
60D6:  MOVLB  0
60D8:  CALL   020C
60DC:  BTFSC  16.7
60DE:  BSF    FF2.7
....................          printf(lcd_putc,"Flujo=Ajus"); 
60E0:  MOVLW  38
60E2:  MOVWF  FF6
60E4:  MOVLW  0B
60E6:  MOVWF  FF7
60E8:  CLRF   16
60EA:  BTFSC  FF2.7
60EC:  BSF    16.7
60EE:  BCF    FF2.7
60F0:  CALL   02F2
60F4:  BTFSC  16.7
60F6:  BSF    FF2.7
....................       } 
....................       else 
60F8:  BRA    61E4
....................       { 
....................          flag_iniciodamper=0; 
60FA:  BCF    35.7
....................          if(Flujo<0.5) 
60FC:  MOVFF  8E,11D
6100:  MOVFF  8D,11C
6104:  MOVFF  8C,11B
6108:  MOVFF  8B,11A
610C:  MOVLB  1
610E:  CLRF   x21
6110:  CLRF   x20
6112:  CLRF   x1F
6114:  MOVLW  7E
6116:  MOVWF  x1E
6118:  MOVLB  0
611A:  CALL   182C
611E:  BNC   6156
6120:  CLRF   16
6122:  BTFSC  FF2.7
6124:  BSF    16.7
6126:  BCF    FF2.7
....................          { 
....................             lcd_gotoxy(11,2); 
6128:  MOVLW  0B
612A:  MOVLB  1
612C:  MOVWF  x32
612E:  MOVLW  02
6130:  MOVWF  x33
6132:  MOVLB  0
6134:  CALL   020C
6138:  BTFSC  16.7
613A:  BSF    FF2.7
....................             printf(lcd_putc,"Flujo=Bajo");       
613C:  MOVLW  44
613E:  MOVWF  FF6
6140:  MOVLW  0B
6142:  MOVWF  FF7
6144:  CLRF   16
6146:  BTFSC  FF2.7
6148:  BSF    16.7
614A:  BCF    FF2.7
614C:  CALL   02F2
6150:  BTFSC  16.7
6152:  BSF    FF2.7
....................          } 
....................          else 
6154:  BRA    61E4
....................          { 
....................             if(Flujo>2.0) 
6156:  MOVLB  1
6158:  CLRF   x1D
615A:  CLRF   x1C
615C:  CLRF   x1B
615E:  MOVLW  80
6160:  MOVWF  x1A
6162:  MOVFF  8E,121
6166:  MOVFF  8D,120
616A:  MOVFF  8C,11F
616E:  MOVFF  8B,11E
6172:  MOVLB  0
6174:  CALL   182C
6178:  BNC   61B0
617A:  CLRF   16
617C:  BTFSC  FF2.7
617E:  BSF    16.7
6180:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
6182:  MOVLW  0B
6184:  MOVLB  1
6186:  MOVWF  x32
6188:  MOVLW  02
618A:  MOVWF  x33
618C:  MOVLB  0
618E:  CALL   020C
6192:  BTFSC  16.7
6194:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=Alto");                
6196:  MOVLW  50
6198:  MOVWF  FF6
619A:  MOVLW  0B
619C:  MOVWF  FF7
619E:  CLRF   16
61A0:  BTFSC  FF2.7
61A2:  BSF    16.7
61A4:  BCF    FF2.7
61A6:  CALL   02F2
61AA:  BTFSC  16.7
61AC:  BSF    FF2.7
....................             } 
....................             else 
61AE:  BRA    61E4
61B0:  CLRF   16
61B2:  BTFSC  FF2.7
61B4:  BSF    16.7
61B6:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
61B8:  MOVLW  0B
61BA:  MOVLB  1
61BC:  MOVWF  x32
61BE:  MOVLW  02
61C0:  MOVWF  x33
61C2:  MOVLB  0
61C4:  CALL   020C
61C8:  BTFSC  16.7
61CA:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=OK  ");       
61CC:  MOVLW  5C
61CE:  MOVWF  FF6
61D0:  MOVLW  0B
61D2:  MOVWF  FF7
61D4:  CLRF   16
61D6:  BTFSC  FF2.7
61D8:  BSF    16.7
61DA:  BCF    FF2.7
61DC:  CALL   02F2
61E0:  BTFSC  16.7
61E2:  BSF    FF2.7
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
61E4:  BTFSS  34.0
61E6:  BRA    6222
....................       { 
....................          Luz_Blanca_on; 
61E8:  BSF    F8A.4
61EA:  BCF    F93.4
61EC:  CLRF   16
61EE:  BTFSC  FF2.7
61F0:  BSF    16.7
61F2:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
61F4:  MOVLW  01
61F6:  MOVLB  1
61F8:  MOVWF  x32
61FA:  MOVLW  04
61FC:  MOVWF  x33
61FE:  MOVLB  0
6200:  CALL   020C
6204:  BTFSC  16.7
6206:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:ON "); 
6208:  MOVLW  68
620A:  MOVWF  FF6
620C:  MOVLW  0B
620E:  MOVWF  FF7
6210:  CLRF   16
6212:  BTFSC  FF2.7
6214:  BSF    16.7
6216:  BCF    FF2.7
6218:  CALL   02F2
621C:  BTFSC  16.7
621E:  BSF    FF2.7
....................       } 
....................       else 
6220:  BRA    625A
....................       { 
....................          Luz_Blanca_off; 
6222:  BCF    F8A.4
6224:  BCF    F93.4
6226:  CLRF   16
6228:  BTFSC  FF2.7
622A:  BSF    16.7
622C:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
622E:  MOVLW  01
6230:  MOVLB  1
6232:  MOVWF  x32
6234:  MOVLW  04
6236:  MOVWF  x33
6238:  MOVLB  0
623A:  CALL   020C
623E:  BTFSC  16.7
6240:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:OFF "); 
6242:  MOVLW  70
6244:  MOVWF  FF6
6246:  MOVLW  0B
6248:  MOVWF  FF7
624A:  CLRF   16
624C:  BTFSC  FF2.7
624E:  BSF    16.7
6250:  BCF    FF2.7
6252:  CALL   02F2
6256:  BTFSC  16.7
6258:  BSF    FF2.7
....................       } 
....................        
....................       if(estadomv==1) 
625A:  BTFSS  34.1
625C:  BRA    629C
....................       { 
....................          if(iniciodamper==1) 
625E:  BTFSS  4E.0
6260:  BRA    6266
....................          { 
....................             Motor_on; 
6262:  BSF    F8B.0
6264:  BCF    F94.0
6266:  CLRF   16
6268:  BTFSC  FF2.7
626A:  BSF    16.7
626C:  BCF    FF2.7
....................          }          
....................          lcd_gotoxy(10,4); 
626E:  MOVLW  0A
6270:  MOVLB  1
6272:  MOVWF  x32
6274:  MOVLW  04
6276:  MOVWF  x33
6278:  MOVLB  0
627A:  CALL   020C
627E:  BTFSC  16.7
6280:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:ON "); 
6282:  MOVLW  7A
6284:  MOVWF  FF6
6286:  MOVLW  0B
6288:  MOVWF  FF7
628A:  CLRF   16
628C:  BTFSC  FF2.7
628E:  BSF    16.7
6290:  BCF    FF2.7
6292:  CALL   02F2
6296:  BTFSC  16.7
6298:  BSF    FF2.7
....................       } 
....................       else 
629A:  BRA    62D8
....................       { 
....................          if(iniciodamper==1) 
629C:  BTFSS  4E.0
629E:  BRA    62A4
....................          { 
....................             Motor_off;      
62A0:  BCF    F8B.0
62A2:  BCF    F94.0
62A4:  CLRF   16
62A6:  BTFSC  FF2.7
62A8:  BSF    16.7
62AA:  BCF    FF2.7
....................          } 
....................          lcd_gotoxy(10,4); 
62AC:  MOVLW  0A
62AE:  MOVLB  1
62B0:  MOVWF  x32
62B2:  MOVLW  04
62B4:  MOVWF  x33
62B6:  MOVLB  0
62B8:  CALL   020C
62BC:  BTFSC  16.7
62BE:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:OFF ");  
62C0:  MOVLW  84
62C2:  MOVWF  FF6
62C4:  MOVLW  0B
62C6:  MOVWF  FF7
62C8:  CLRF   16
62CA:  BTFSC  FF2.7
62CC:  BSF    16.7
62CE:  BCF    FF2.7
62D0:  CALL   02F2
62D4:  BTFSC  16.7
62D6:  BSF    FF2.7
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
62D8:  BSF    F93.2
62DA:  BTFSS  F81.2
62DC:  BRA    6300
....................       {  if(Flanco == 0)  
62DE:  BTFSC  34.4
62E0:  BRA    62FE
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
62E2:  BSF    34.4
62E4:  CLRF   16
62E6:  BTFSC  FF2.7
62E8:  BSF    16.7
62EA:  BCF    FF2.7
62EC:  MOVLW  C8
62EE:  MOVLB  1
62F0:  MOVWF  x32
62F2:  MOVLB  0
62F4:  CALL   00B6
62F8:  BTFSC  16.7
62FA:  BSF    FF2.7
62FC:  BTG    34.0
....................          else 
62FE:  BRA    6302
....................             {Flanco = 0;} 
6300:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
6302:  BSF    F93.1
6304:  BTFSS  F81.1
6306:  BRA    632A
....................       {  if(Flanco2 == 0)  
6308:  BTFSC  34.6
630A:  BRA    6328
....................             {Flanco2 = 1;delay_ms(200);estadomv=!estadomv;}} 
630C:  BSF    34.6
630E:  CLRF   16
6310:  BTFSC  FF2.7
6312:  BSF    16.7
6314:  BCF    FF2.7
6316:  MOVLW  C8
6318:  MOVLB  1
631A:  MOVWF  x32
631C:  MOVLB  0
631E:  CALL   00B6
6322:  BTFSC  16.7
6324:  BSF    FF2.7
6326:  BTG    34.1
....................          else 
6328:  BRA    632C
....................             {Flanco2 = 0;} 
632A:  BCF    34.6
....................     
....................       if(UP)// Si oprime Arriba 
632C:  BSF    F93.3
632E:  BTFSS  F81.3
6330:  BRA    6380
....................       {  if(Flanco1 == 0)  
6332:  BTFSC  34.5
6334:  BRA    637E
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
6336:  MOVLW  02
6338:  MOVLB  1
633A:  MOVWF  x00
633C:  CLRF   16
633E:  BTFSC  FF2.7
6340:  BSF    16.7
6342:  BCF    FF2.7
6344:  MOVLW  FA
6346:  MOVWF  x32
6348:  MOVLB  0
634A:  CALL   00B6
634E:  BTFSC  16.7
6350:  BSF    FF2.7
6352:  MOVLB  1
6354:  DECFSZ x00,F
6356:  BRA    633C
6358:  CLRF   16
635A:  BTFSC  FF2.7
635C:  BSF    16.7
635E:  BCF    FF2.7
6360:  MOVLW  0C
6362:  MOVWF  x31
6364:  MOVLB  0
6366:  CALL   0286
636A:  BTFSC  16.7
636C:  BSF    FF2.7
636E:  MOVLW  01
6370:  MOVWF  18
6372:  CLRF   36
6374:  MOVLW  02
6376:  MOVWF  1C
6378:  MOVWF  1E
637A:  MOVLW  0B
637C:  MOVWF  1B
....................          else 
637E:  BRA    6382
....................             {Flanco1 = 0;}    
6380:  BCF    34.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
6382:  BSF    F93.0
6384:  BTFSS  F81.0
6386:  BRA    63CA
....................       {  if(Flanco3 == 0)  
6388:  BTFSC  34.7
638A:  BRA    63C8
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
638C:  MOVLW  02
638E:  MOVLB  1
6390:  MOVWF  x00
6392:  CLRF   16
6394:  BTFSC  FF2.7
6396:  BSF    16.7
6398:  BCF    FF2.7
639A:  MOVLW  FA
639C:  MOVWF  x32
639E:  MOVLB  0
63A0:  CALL   00B6
63A4:  BTFSC  16.7
63A6:  BSF    FF2.7
63A8:  MOVLB  1
63AA:  DECFSZ x00,F
63AC:  BRA    6392
63AE:  CLRF   16
63B0:  BTFSC  FF2.7
63B2:  BSF    16.7
63B4:  BCF    FF2.7
63B6:  MOVLW  0C
63B8:  MOVWF  x31
63BA:  MOVLB  0
63BC:  CALL   0286
63C0:  BTFSC  16.7
63C2:  BSF    FF2.7
63C4:  MOVLW  28
63C6:  MOVWF  18
....................          else 
63C8:  BRA    63CC
....................             {Flanco3 = 0;}     
63CA:  BCF    34.7
63CC:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
63CE:  MOVF   18,W
63D0:  SUBLW  1E
63D2:  BTFSS  FD8.2
63D4:  BRA    66B2
63D6:  CLRF   16
63D8:  BTFSC  FF2.7
63DA:  BSF    16.7
63DC:  BCF    FF2.7
....................       lcd_gotoxy(1,1); 
63DE:  MOVLW  01
63E0:  MOVWF  x32
63E2:  MOVWF  x33
63E4:  MOVLB  0
63E6:  CALL   020C
63EA:  BTFSC  16.7
63EC:  BSF    FF2.7
....................       printf(lcd_putc,"     Apagando     "); 
63EE:  MOVLW  90
63F0:  MOVWF  FF6
63F2:  MOVLW  0B
63F4:  MOVWF  FF7
63F6:  CLRF   16
63F8:  BTFSC  FF2.7
63FA:  BSF    16.7
63FC:  BCF    FF2.7
63FE:  CALL   02F2
6402:  BTFSC  16.7
6404:  BSF    FF2.7
6406:  CLRF   16
6408:  BTFSC  FF2.7
640A:  BSF    16.7
640C:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
640E:  MOVLW  01
6410:  MOVLB  1
6412:  MOVWF  x32
6414:  MOVLW  02
6416:  MOVWF  x33
6418:  MOVLB  0
641A:  CALL   020C
641E:  BTFSC  16.7
6420:  BSF    FF2.7
....................       printf(lcd_putc,"      Cabina      "); 
6422:  MOVLW  A4
6424:  MOVWF  FF6
6426:  MOVLW  0B
6428:  MOVWF  FF7
642A:  CLRF   16
642C:  BTFSC  FF2.7
642E:  BSF    16.7
6430:  BCF    FF2.7
6432:  CALL   02F2
6436:  BTFSC  16.7
6438:  BSF    FF2.7
643A:  CLRF   16
643C:  BTFSC  FF2.7
643E:  BSF    16.7
6440:  BCF    FF2.7
....................        
....................       lcd_gotoxy(1,3); 
6442:  MOVLW  01
6444:  MOVLB  1
6446:  MOVWF  x32
6448:  MOVLW  03
644A:  MOVWF  x33
644C:  MOVLB  0
644E:  CALL   020C
6452:  BTFSC  16.7
6454:  BSF    FF2.7
....................       printf(lcd_putc," Espere"); 
6456:  MOVLW  B8
6458:  MOVWF  FF6
645A:  MOVLW  0B
645C:  MOVWF  FF7
645E:  CLRF   16
6460:  BTFSC  FF2.7
6462:  BSF    16.7
6464:  BCF    FF2.7
6466:  CALL   02F2
646A:  BTFSC  16.7
646C:  BSF    FF2.7
....................        
....................       if(Lectura==1) 
646E:  BTFSS  35.5
6470:  BRA    66AE
....................       {ajustar_damper(0); 
6472:  CLRF   xFF
6474:  CALL   1946
....................        
....................          if(n<8) 
6478:  MOVF   27,W
647A:  SUBLW  07
647C:  BNC   64BA
....................          { 
....................             lcd_gotoxy(9+n,3); 
647E:  MOVLW  09
6480:  ADDWF  27,W
6482:  MOVLB  1
6484:  MOVWF  x00
6486:  CLRF   16
6488:  BTFSC  FF2.7
648A:  BSF    16.7
648C:  BCF    FF2.7
648E:  MOVWF  x32
6490:  MOVLW  03
6492:  MOVWF  x33
6494:  MOVLB  0
6496:  CALL   020C
649A:  BTFSC  16.7
649C:  BSF    FF2.7
649E:  CLRF   16
64A0:  BTFSC  FF2.7
64A2:  BSF    16.7
64A4:  BCF    FF2.7
....................             printf(lcd_putc,"."); 
64A6:  MOVLW  2E
64A8:  MOVLB  1
64AA:  MOVWF  x31
64AC:  MOVLB  0
64AE:  CALL   0286
64B2:  BTFSC  16.7
64B4:  BSF    FF2.7
....................             n++; 
64B6:  INCF   27,F
....................          } 
....................          else 
64B8:  BRA    64F0
....................          { 
....................             n=0;lcd_gotoxy(1,3); 
64BA:  CLRF   27
64BC:  CLRF   16
64BE:  BTFSC  FF2.7
64C0:  BSF    16.7
64C2:  BCF    FF2.7
64C4:  MOVLW  01
64C6:  MOVLB  1
64C8:  MOVWF  x32
64CA:  MOVLW  03
64CC:  MOVWF  x33
64CE:  MOVLB  0
64D0:  CALL   020C
64D4:  BTFSC  16.7
64D6:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
64D8:  MOVLW  C0
64DA:  MOVWF  FF6
64DC:  MOVLW  0B
64DE:  MOVWF  FF7
64E0:  CLRF   16
64E2:  BTFSC  FF2.7
64E4:  BSF    16.7
64E6:  BCF    FF2.7
64E8:  CALL   02F2
64EC:  BTFSC  16.7
64EE:  BSF    FF2.7
....................          } 
....................        
....................       if(sensores(2)<512) 
64F0:  MOVLW  02
64F2:  MOVLB  1
64F4:  MOVWF  x04
64F6:  MOVLB  0
64F8:  CALL   18E2
64FC:  MOVFF  00,100
6500:  MOVFF  01,101
6504:  MOVFF  02,102
6508:  MOVFF  03,103
650C:  MOVFF  03,11D
6510:  MOVFF  02,11C
6514:  MOVFF  01,11B
6518:  MOVFF  00,11A
651C:  MOVLB  1
651E:  CLRF   x21
6520:  CLRF   x20
6522:  CLRF   x1F
6524:  MOVLW  88
6526:  MOVWF  x1E
6528:  MOVLB  0
652A:  CALL   182C
652E:  BNC   6534
....................       { 
....................          Motor_off; 
6530:  BCF    F8B.0
6532:  BCF    F94.0
....................       } 
....................        
....................       if(sensores(2)<6) 
6534:  MOVLW  02
6536:  MOVLB  1
6538:  MOVWF  x04
653A:  MOVLB  0
653C:  CALL   18E2
6540:  MOVFF  00,100
6544:  MOVFF  01,101
6548:  MOVFF  02,102
654C:  MOVFF  03,103
6550:  MOVFF  03,11D
6554:  MOVFF  02,11C
6558:  MOVFF  01,11B
655C:  MOVFF  00,11A
6560:  MOVLB  1
6562:  CLRF   x21
6564:  CLRF   x20
6566:  MOVLW  40
6568:  MOVWF  x1F
656A:  MOVLW  81
656C:  MOVWF  x1E
656E:  MOVLB  0
6570:  CALL   182C
6574:  BTFSS  FD8.0
6576:  BRA    66AC
....................       { 
....................          write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
6578:  MOVLW  46
657A:  MOVWF  FA9
657C:  MOVFF  31,FA8
6580:  BCF    FA6.6
6582:  BCF    FA6.7
6584:  BSF    FA6.2
6586:  MOVF   FF2,W
6588:  MOVWF  00
658A:  BCF    FF2.7
658C:  MOVLB  F
658E:  MOVLW  55
6590:  MOVWF  FA7
6592:  MOVLW  AA
6594:  MOVWF  FA7
6596:  BSF    FA6.1
6598:  BTFSC  FA6.1
659A:  BRA    6598
659C:  BCF    FA6.2
659E:  MOVF   00,W
65A0:  IORWF  FF2,F
65A2:  MOVLW  47
65A4:  MOVWF  FA9
65A6:  MOVFF  32,FA8
65AA:  BCF    FA6.6
65AC:  BCF    FA6.7
65AE:  BSF    FA6.2
65B0:  MOVF   FF2,W
65B2:  MOVWF  00
65B4:  BCF    FF2.7
65B6:  MOVLW  55
65B8:  MOVWF  FA7
65BA:  MOVLW  AA
65BC:  MOVWF  FA7
65BE:  BSF    FA6.1
65C0:  BTFSC  FA6.1
65C2:  BRA    65C0
65C4:  BCF    FA6.2
65C6:  MOVF   00,W
65C8:  IORWF  FF2,F
65CA:  MOVLW  48
65CC:  MOVWF  FA9
65CE:  MOVFF  33,FA8
65D2:  BCF    FA6.6
65D4:  BCF    FA6.7
65D6:  BSF    FA6.2
65D8:  MOVF   FF2,W
65DA:  MOVWF  00
65DC:  BCF    FF2.7
65DE:  MOVLW  55
65E0:  MOVWF  FA7
65E2:  MOVLW  AA
65E4:  MOVWF  FA7
65E6:  BSF    FA6.1
65E8:  BTFSC  FA6.1
65EA:  BRA    65E8
65EC:  BCF    FA6.2
65EE:  MOVF   00,W
65F0:  IORWF  FF2,F
65F2:  CLRF   16
65F4:  BTFSC  FF2.7
65F6:  BSF    16.7
65F8:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
65FA:  MOVLW  0C
65FC:  MOVLB  1
65FE:  MOVWF  x31
6600:  MOVLB  0
6602:  CALL   0286
6606:  BTFSC  16.7
6608:  BSF    FF2.7
660A:  CLRF   16
660C:  BTFSC  FF2.7
660E:  BSF    16.7
6610:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
6612:  MOVLW  01
6614:  MOVLB  1
6616:  MOVWF  x32
6618:  MOVLW  02
661A:  MOVWF  x33
661C:  MOVLB  0
661E:  CALL   020C
6622:  BTFSC  16.7
6624:  BSF    FF2.7
....................          printf(lcd_putc,"     Proceso      "); 
6626:  MOVLW  D6
6628:  MOVWF  FF6
662A:  MOVLW  0B
662C:  MOVWF  FF7
662E:  CLRF   16
6630:  BTFSC  FF2.7
6632:  BSF    16.7
6634:  BCF    FF2.7
6636:  CALL   02F2
663A:  BTFSC  16.7
663C:  BSF    FF2.7
663E:  CLRF   16
6640:  BTFSC  FF2.7
6642:  BSF    16.7
6644:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
6646:  MOVLW  01
6648:  MOVLB  1
664A:  MOVWF  x32
664C:  MOVLW  03
664E:  MOVWF  x33
6650:  MOVLB  0
6652:  CALL   020C
6656:  BTFSC  16.7
6658:  BSF    FF2.7
....................          printf(lcd_putc,"    Finalizado    "); 
665A:  MOVLW  EA
665C:  MOVWF  FF6
665E:  MOVLW  0B
6660:  MOVWF  FF7
6662:  CLRF   16
6664:  BTFSC  FF2.7
6666:  BSF    16.7
6668:  BCF    FF2.7
666A:  CALL   02F2
666E:  BTFSC  16.7
6670:  BSF    FF2.7
....................          delay_ms(2000); 
6672:  MOVLW  08
6674:  MOVLB  1
6676:  MOVWF  x00
6678:  CLRF   16
667A:  BTFSC  FF2.7
667C:  BSF    16.7
667E:  BCF    FF2.7
6680:  MOVLW  FA
6682:  MOVWF  x32
6684:  MOVLB  0
6686:  CALL   00B6
668A:  BTFSC  16.7
668C:  BSF    FF2.7
668E:  MOVLB  1
6690:  DECFSZ x00,F
6692:  BRA    6678
6694:  CLRF   16
6696:  BTFSC  FF2.7
6698:  BSF    16.7
669A:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
669C:  MOVLW  0C
669E:  MOVWF  x31
66A0:  MOVLB  0
66A2:  CALL   0286
66A6:  BTFSC  16.7
66A8:  BSF    FF2.7
....................          reset_cpu(); 
66AA:  RESET
....................       } 
....................       Lectura=0; 
66AC:  BCF    35.5
....................       }   
....................    } 
66AE:  MOVLB  1
66B0:  BRA    63CE
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
66B2:  MOVF   18,W
66B4:  SUBLW  28
66B6:  BTFSS  FD8.2
66B8:  BRA    681C
66BA:  CLRF   16
66BC:  BTFSC  FF2.7
66BE:  BSF    16.7
66C0:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
66C2:  MOVLW  01
66C4:  MOVWF  x32
66C6:  MOVWF  x33
66C8:  MOVLB  0
66CA:  CALL   020C
66CE:  BTFSC  16.7
66D0:  BSF    FF2.7
....................    printf(lcd_putc,"   Desea apagar     "); 
66D2:  MOVLW  FE
66D4:  MOVWF  FF6
66D6:  MOVLW  0B
66D8:  MOVWF  FF7
66DA:  CLRF   16
66DC:  BTFSC  FF2.7
66DE:  BSF    16.7
66E0:  BCF    FF2.7
66E2:  CALL   02F2
66E6:  BTFSC  16.7
66E8:  BSF    FF2.7
66EA:  CLRF   16
66EC:  BTFSC  FF2.7
66EE:  BSF    16.7
66F0:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
66F2:  MOVLW  01
66F4:  MOVLB  1
66F6:  MOVWF  x32
66F8:  MOVLW  02
66FA:  MOVWF  x33
66FC:  MOVLB  0
66FE:  CALL   020C
6702:  BTFSC  16.7
6704:  BSF    FF2.7
....................    printf(lcd_putc,"     la cabina      "); 
6706:  MOVLW  14
6708:  MOVWF  FF6
670A:  MOVLW  0C
670C:  MOVWF  FF7
670E:  CLRF   16
6710:  BTFSC  FF2.7
6712:  BSF    16.7
6714:  BCF    FF2.7
6716:  CALL   02F2
671A:  BTFSC  16.7
671C:  BSF    FF2.7
671E:  CLRF   16
6720:  BTFSC  FF2.7
6722:  BSF    16.7
6724:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
6726:  MOVLW  01
6728:  MOVLB  1
672A:  MOVWF  x32
672C:  MOVLW  03
672E:  MOVWF  x33
6730:  MOVLB  0
6732:  CALL   020C
6736:  BTFSC  16.7
6738:  BSF    FF2.7
....................    printf(lcd_putc,"   > Aceptar        "); 
673A:  MOVLW  2A
673C:  MOVWF  FF6
673E:  MOVLW  0C
6740:  MOVWF  FF7
6742:  CLRF   16
6744:  BTFSC  FF2.7
6746:  BSF    16.7
6748:  BCF    FF2.7
674A:  CALL   02F2
674E:  BTFSC  16.7
6750:  BSF    FF2.7
6752:  CLRF   16
6754:  BTFSC  FF2.7
6756:  BSF    16.7
6758:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
675A:  MOVLW  01
675C:  MOVLB  1
675E:  MOVWF  x32
6760:  MOVLW  04
6762:  MOVWF  x33
6764:  MOVLB  0
6766:  CALL   020C
676A:  BTFSC  16.7
676C:  BSF    FF2.7
....................    printf(lcd_putc,"   < Cancelar       "); 
676E:  MOVLW  40
6770:  MOVWF  FF6
6772:  MOVLW  0C
6774:  MOVWF  FF7
6776:  CLRF   16
6778:  BTFSC  FF2.7
677A:  BSF    16.7
677C:  BCF    FF2.7
677E:  CALL   02F2
6782:  BTFSC  16.7
6784:  BSF    FF2.7
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
6786:  BSF    F93.0
6788:  BTFSS  F81.0
678A:  BRA    67C8
....................       {  if(Flanco1 == 0)  
678C:  BTFSC  34.5
678E:  BRA    67C6
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
6790:  BSF    34.5
6792:  MOVLW  1E
6794:  MOVWF  18
6796:  CLRF   16
6798:  BTFSC  FF2.7
679A:  BSF    16.7
679C:  BCF    FF2.7
679E:  MOVFF  21,12F
67A2:  CALL   01F8
67A6:  BTFSC  16.7
67A8:  BSF    FF2.7
67AA:  BCF    F8A.6
67AC:  BCF    F93.6
67AE:  CLRF   16
67B0:  BTFSC  FF2.7
67B2:  BSF    16.7
67B4:  BCF    FF2.7
67B6:  MOVLW  0C
67B8:  MOVLB  1
67BA:  MOVWF  x31
67BC:  MOVLB  0
67BE:  CALL   0286
67C2:  BTFSC  16.7
67C4:  BSF    FF2.7
....................             }} 
....................          else 
67C6:  BRA    67CA
....................             {Flanco1 = 0;}    
67C8:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
67CA:  BSF    F93.1
67CC:  BTFSS  F81.1
67CE:  BRA    6818
....................       {  if(Flanco3 == 0)  
67D0:  BTFSC  34.7
67D2:  BRA    6816
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
67D4:  BSF    34.7
67D6:  MOVLW  14
67D8:  MOVWF  18
67DA:  CLRF   36
67DC:  MOVLW  02
67DE:  MOVWF  1C
67E0:  MOVWF  1E
67E2:  MOVLW  0B
67E4:  MOVWF  1B
67E6:  CLRF   16
67E8:  BTFSC  FF2.7
67EA:  BSF    16.7
67EC:  BCF    FF2.7
67EE:  MOVLW  1E
67F0:  MOVLB  1
67F2:  MOVWF  x32
67F4:  MOVLB  0
67F6:  CALL   00B6
67FA:  BTFSC  16.7
67FC:  BSF    FF2.7
67FE:  CLRF   16
6800:  BTFSC  FF2.7
6802:  BSF    16.7
6804:  BCF    FF2.7
6806:  MOVLW  0C
6808:  MOVLB  1
680A:  MOVWF  x31
680C:  MOVLB  0
680E:  CALL   0286
6812:  BTFSC  16.7
6814:  BSF    FF2.7
....................          else 
6816:  BRA    681A
....................             {Flanco3 = 0;}     
6818:  BCF    34.7
681A:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(ModoSleep==1) 
681C:  BTFSS  35.3
681E:  BRA    6838
6820:  CLRF   16
6822:  BTFSC  FF2.7
6824:  BSF    16.7
6826:  BCF    FF2.7
....................       {intensidadpantalla(0);sleep();} 
6828:  CLRF   x2F
682A:  MOVLB  0
682C:  CALL   01F8
6830:  BTFSC  16.7
6832:  BSF    FF2.7
6834:  SLEEP 
6836:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
6838:  MOVF   18,F
683A:  BNZ   6842
683C:  MOVF   18,W
683E:  SUBLW  1E
6840:  BZ    691E
....................    { 
....................       if(Lectura==1) 
6842:  BTFSS  35.5
6844:  BRA    691E
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
6846:  MOVFF  2B,FF
684A:  MOVLB  0
684C:  GOTO   1E70
6850:  MOVFF  03,8E
6854:  MOVFF  02,8D
6858:  MOVFF  01,8C
685C:  MOVFF  00,8B
....................         if(iniciodamper==1) 
6860:  BTFSS  4E.0
6862:  BRA    68FA
....................         { 
....................             controlar_flujo(); 
6864:  GOTO   253C
....................           
....................             if(Flujo<0.5 && iniciodamper==1) 
6868:  MOVFF  8E,11D
686C:  MOVFF  8D,11C
6870:  MOVFF  8C,11B
6874:  MOVFF  8B,11A
6878:  MOVLB  1
687A:  CLRF   x21
687C:  CLRF   x20
687E:  CLRF   x1F
6880:  MOVLW  7E
6882:  MOVWF  x1E
6884:  MOVLB  0
6886:  CALL   182C
688A:  BNC   68D8
688C:  BTFSS  4E.0
688E:  BRA    68D8
....................             { 
....................                flag_latencia=1; 
6890:  BSF    35.0
....................                 
....................                if(Latencia==1) 
6892:  BTFSS  35.1
6894:  BRA    68D6
....................                { 
....................                   if(estadoalarma==1) 
6896:  BTFSS  34.2
6898:  BRA    68A0
....................                   { 
....................                      Alarma_on; 
689A:  BSF    F8A.6
689C:  BCF    F93.6
....................                   } 
....................                   else 
689E:  BRA    68A4
....................                   { 
....................                      Alarma_off; 
68A0:  BCF    F8A.6
68A2:  BCF    F93.6
....................                   } 
....................                   estadopantalla=!estadopantalla; 
68A4:  BTG    34.3
....................                   if(estadopantalla==1) 
68A6:  BTFSS  34.3
68A8:  BRA    68C0
68AA:  CLRF   16
68AC:  BTFSC  FF2.7
68AE:  BSF    16.7
68B0:  BCF    FF2.7
....................                   {intensidadpantalla(contraste);} 
68B2:  MOVFF  21,12F
68B6:  CALL   01F8
68BA:  BTFSC  16.7
68BC:  BSF    FF2.7
....................                   else 
68BE:  BRA    68D6
68C0:  CLRF   16
68C2:  BTFSC  FF2.7
68C4:  BSF    16.7
68C6:  BCF    FF2.7
....................                   {intensidadpantalla(0);} 
68C8:  MOVLB  1
68CA:  CLRF   x2F
68CC:  MOVLB  0
68CE:  CALL   01F8
68D2:  BTFSC  16.7
68D4:  BSF    FF2.7
....................                } 
....................             } 
....................             else 
68D6:  BRA    68F8
68D8:  CLRF   16
68DA:  BTFSC  FF2.7
68DC:  BSF    16.7
68DE:  BCF    FF2.7
....................             { 
....................                intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
68E0:  MOVFF  21,12F
68E4:  CALL   01F8
68E8:  BTFSC  16.7
68EA:  BSF    FF2.7
68EC:  BCF    F8A.6
68EE:  BCF    F93.6
68F0:  BCF    35.1
68F2:  CLRF   52
68F4:  CLRF   51
68F6:  BCF    35.0
....................             } 
....................         } 
....................         else 
68F8:  BRA    691A
68FA:  CLRF   16
68FC:  BTFSC  FF2.7
68FE:  BSF    16.7
6900:  BCF    FF2.7
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
6902:  MOVFF  21,12F
6906:  CALL   01F8
690A:  BTFSC  16.7
690C:  BSF    FF2.7
690E:  BCF    F8A.6
6910:  BCF    F93.6
6912:  BCF    35.1
6914:  CLRF   52
6916:  CLRF   51
6918:  BCF    35.0
....................         } 
....................          Lectura=0; 
691A:  BCF    35.5
691C:  MOVLB  1
....................       }      
....................  
....................    }      
....................    } 
691E:  GOTO   2D28
.................... } 
6922:  SLEEP 

Configuration Fuses:
   Word  1: CE30   IESO FCMEN HSPLL PLL1 CPUDIV3 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
