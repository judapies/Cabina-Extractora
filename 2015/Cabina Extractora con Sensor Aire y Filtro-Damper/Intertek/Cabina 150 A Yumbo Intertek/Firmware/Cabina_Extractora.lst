CCS PCH C Compiler, Version 4.104, 5967               19-jun-15 17:18

               Filename: E:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2015\Cabina Extractora con Sensor Aire y Filtro\Cabina 150 A Yumbo Intertek\Firmware\Cabina_Extractora.lst

               ROM used: 26856 bytes (82%)
                         Largest free fragment is 5908
               RAM used: 263 (13%) at main() level
                         314 (15%) worst case
               Stack:    12 worst case (6 in main + 6 for interrupts)

*
0000:  GOTO   2618
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   042E
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   0312
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV3,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=24000000) 
*
00B6:  MOVLW  01
00B8:  MOVWF  FEA
00BA:  MOVLW  32
00BC:  MOVWF  FE9
00BE:  MOVF   FEF,W
00C0:  BZ    00DE
00C2:  MOVLW  07
00C4:  MOVWF  01
00C6:  CLRF   00
00C8:  DECFSZ 00,F
00CA:  BRA    00C8
00CC:  DECFSZ 01,F
00CE:  BRA    00C6
00D0:  MOVLW  C7
00D2:  MOVWF  00
00D4:  DECFSZ 00,F
00D6:  BRA    00D4
00D8:  NOP   
00DA:  DECFSZ FEF,F
00DC:  BRA    00C2
00DE:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
0104:  MOVLW  F0
0106:  MOVWF  F95
....................       lcd.rw = 1; 
0108:  BSF    F83.0
....................       delay_cycles(1); 
010A:  NOP   
....................       lcd.enable = 1; 
010C:  BSF    F83.2
....................       delay_cycles(1); 
010E:  NOP   
....................       high = lcd.data; 
0110:  SWAPF  F83,W
0112:  ANDLW  0F
0114:  MOVLB  1
0116:  MOVWF  x38
....................       lcd.enable = 0; 
0118:  BCF    F83.2
....................       delay_cycles(1); 
011A:  NOP   
....................       lcd.enable = 1; 
011C:  BSF    F83.2
....................       delay_us(1); 
011E:  BRA    0120
0120:  BRA    0122
0122:  BRA    0124
....................       low = lcd.data; 
0124:  SWAPF  F83,W
0126:  ANDLW  0F
0128:  MOVWF  x37
....................       lcd.enable = 0; 
012A:  BCF    F83.2
....................       set_tris_d(LCD_WRITE); 
012C:  MOVLW  00
012E:  MOVWF  F95
....................       return( (high<<4) | low); 
0130:  SWAPF  x38,W
0132:  MOVWF  00
0134:  MOVLW  F0
0136:  ANDWF  00,F
0138:  MOVF   00,W
013A:  IORWF  x37,W
013C:  MOVWF  01
.................... } 
013E:  MOVLB  0
0140:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00E0:  MOVLB  1
00E2:  SWAPF  x38,W
00E4:  ANDLW  F0
00E6:  MOVWF  00
00E8:  MOVLW  0F
00EA:  ANDWF  F83,W
00EC:  IORWF  00,W
00EE:  MOVWF  F83
....................       delay_cycles(1); 
00F0:  NOP   
....................       lcd.enable = 1; 
00F2:  BSF    F83.2
....................       delay_us(2); 
00F4:  MOVLW  03
00F6:  MOVWF  00
00F8:  DECFSZ 00,F
00FA:  BRA    00F8
00FC:  BRA    00FE
....................       lcd.enable = 0; 
00FE:  BCF    F83.2
.................... } 
0100:  MOVLB  0
0102:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
0142:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0144:  RCALL  0104
0146:  MOVFF  01,137
014A:  MOVLB  1
014C:  BTFSS  01.7
014E:  BRA    0154
0150:  MOVLB  0
0152:  BRA    0144
....................       lcd.rs = address; 
0154:  BTFSS  x35.0
0156:  BCF    F83.1
0158:  BTFSC  x35.0
015A:  BSF    F83.1
....................       delay_cycles(1); 
015C:  NOP   
....................       lcd.rw = 0; 
015E:  BCF    F83.0
....................       delay_cycles(1); 
0160:  NOP   
....................       lcd.enable = 0; 
0162:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0164:  SWAPF  x36,W
0166:  MOVWF  x37
0168:  MOVLW  0F
016A:  ANDWF  x37,F
016C:  MOVFF  137,138
0170:  MOVLB  0
0172:  RCALL  00E0
....................       lcd_send_nibble(n & 0xf); 
0174:  MOVLB  1
0176:  MOVF   x36,W
0178:  ANDLW  0F
017A:  MOVWF  x37
017C:  MOVWF  x38
017E:  MOVLB  0
0180:  RCALL  00E0
.................... } 
0182:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0184:  MOVLW  00
0186:  MOVWF  F95
....................     lcd.rs = 0; 
0188:  BCF    F83.1
....................     lcd.rw = 0; 
018A:  BCF    F83.0
....................     lcd.enable = 0; 
018C:  BCF    F83.2
....................     delay_ms(15); 
018E:  MOVLW  0F
0190:  MOVLB  1
0192:  MOVWF  x32
0194:  MOVLB  0
0196:  RCALL  00B6
....................     for(i=1;i<=3;++i) { 
0198:  MOVLW  01
019A:  MOVLB  1
019C:  MOVWF  x2F
019E:  MOVF   x2F,W
01A0:  SUBLW  03
01A2:  BNC   01BC
....................        lcd_send_nibble(3); 
01A4:  MOVLW  03
01A6:  MOVWF  x38
01A8:  MOVLB  0
01AA:  RCALL  00E0
....................        delay_ms(5); 
01AC:  MOVLW  05
01AE:  MOVLB  1
01B0:  MOVWF  x32
01B2:  MOVLB  0
01B4:  RCALL  00B6
....................     } 
01B6:  MOVLB  1
01B8:  INCF   x2F,F
01BA:  BRA    019E
....................     lcd_send_nibble(2); 
01BC:  MOVLW  02
01BE:  MOVWF  x38
01C0:  MOVLB  0
01C2:  RCALL  00E0
....................     for(i=0;i<=3;++i) 
01C4:  MOVLB  1
01C6:  CLRF   x2F
01C8:  MOVF   x2F,W
01CA:  SUBLW  03
01CC:  BNC   01F2
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
01CE:  CLRF   03
01D0:  MOVF   x2F,W
01D2:  MOVFF  FF2,130
01D6:  BCF    FF2.7
01D8:  MOVLB  0
01DA:  RCALL  00A2
01DC:  MOVLB  1
01DE:  BTFSC  x30.7
01E0:  BSF    FF2.7
01E2:  MOVWF  x30
01E4:  CLRF   x35
01E6:  MOVWF  x36
01E8:  MOVLB  0
01EA:  RCALL  0142
01EC:  MOVLB  1
01EE:  INCF   x2F,F
01F0:  BRA    01C8
.................... } 
01F2:  MOVLB  0
01F4:  GOTO   0334 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
020C:  MOVLW  01
020E:  MOVLB  1
0210:  SUBWF  x33,W
0212:  ADDLW  FC
0214:  BC    0240
0216:  ADDLW  04
0218:  MOVLB  0
021A:  GOTO   0252
....................      case 1 : address=0x80;break; 
021E:  MOVLW  80
0220:  MOVLB  1
0222:  MOVWF  x34
0224:  BRA    0240
....................      case 2 : address=0xc0;break; 
0226:  MOVLW  C0
0228:  MOVLB  1
022A:  MOVWF  x34
022C:  BRA    0240
....................      case 3 : address=0x94;break; 
022E:  MOVLW  94
0230:  MOVLB  1
0232:  MOVWF  x34
0234:  BRA    0240
....................      case 4 : address=0xd4;break; 
0236:  MOVLW  D4
0238:  MOVLB  1
023A:  MOVWF  x34
023C:  BRA    0240
023E:  MOVLB  1
....................    } 
....................    address+=x-1; 
0240:  MOVLW  01
0242:  SUBWF  x32,W
0244:  ADDWF  x34,F
....................    lcd_send_byte(0,address); 
0246:  CLRF   x35
0248:  MOVFF  134,136
024C:  MOVLB  0
024E:  RCALL  0142
.................... } 
0250:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0286:  MOVLB  1
0288:  MOVF   x31,W
028A:  SUBLW  F1
028C:  BNZ   0292
....................     c=238; 
028E:  MOVLW  EE
0290:  MOVWF  x31
....................    switch (c) { 
0292:  MOVF   x31,W
0294:  XORLW  0C
0296:  MOVLB  0
0298:  BZ    02A4
029A:  XORLW  06
029C:  BZ    02C0
029E:  XORLW  02
02A0:  BZ    02D2
02A2:  BRA    02E0
....................      case '\f'   : lcd_send_byte(0,1); 
02A4:  MOVLB  1
02A6:  CLRF   x35
02A8:  MOVLW  01
02AA:  MOVWF  x36
02AC:  MOVLB  0
02AE:  RCALL  0142
....................                    lcdline=1; 
02B0:  MOVLW  01
02B2:  MOVWF  17
....................                    delay_ms(2); 
02B4:  MOVLW  02
02B6:  MOVLB  1
02B8:  MOVWF  x32
02BA:  MOVLB  0
02BC:  RCALL  00B6
....................                                            break; 
02BE:  BRA    02F0
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02C0:  INCF   17,F
02C2:  MOVLW  01
02C4:  MOVLB  1
02C6:  MOVWF  x32
02C8:  MOVFF  17,133
02CC:  MOVLB  0
02CE:  RCALL  020C
02D0:  BRA    02F0
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02D2:  MOVLB  1
02D4:  CLRF   x35
02D6:  MOVLW  10
02D8:  MOVWF  x36
02DA:  MOVLB  0
02DC:  RCALL  0142
02DE:  BRA    02F0
....................      default     : lcd_send_byte(1,c);     break; 
02E0:  MOVLW  01
02E2:  MOVLB  1
02E4:  MOVWF  x35
02E6:  MOVFF  131,136
02EA:  MOVLB  0
02EC:  RCALL  0142
02EE:  BRA    02F0
....................    } 
.................... } 
02F0:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
199C:  MOVFF  108,10C
19A0:  MOVFF  107,10B
19A4:  MOVFF  106,10A
19A8:  MOVFF  105,109
....................  
....................    if (y != 1.0) 
19AC:  MOVFF  10C,11D
19B0:  MOVFF  10B,11C
19B4:  MOVFF  10A,11B
19B8:  MOVFF  109,11A
19BC:  MOVLB  1
19BE:  CLRF   x21
19C0:  CLRF   x20
19C2:  CLRF   x1F
19C4:  MOVLW  7F
19C6:  MOVWF  x1E
19C8:  MOVLB  0
19CA:  RCALL  182C
19CC:  BTFSC  FD8.2
19CE:  BRA    1E50
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
19D0:  MOVLW  01
19D2:  MOVLB  1
19D4:  MOVWF  x1B
19D6:  MOVLW  09
19D8:  MOVWF  FE9
19DA:  MOVFF  11B,FEA
19DE:  MOVLW  7E
19E0:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
19E2:  BSF    FD8.1
19E4:  MOVFF  10C,121
19E8:  MOVFF  10B,120
19EC:  MOVFF  10A,11F
19F0:  MOVFF  109,11E
19F4:  CLRF   x25
19F6:  CLRF   x24
19F8:  CLRF   x23
19FA:  MOVLW  7F
19FC:  MOVWF  x22
19FE:  MOVLB  0
1A00:  CALL   0DEA
1A04:  MOVFF  00,11A
1A08:  MOVFF  01,11B
1A0C:  MOVFF  02,11C
1A10:  MOVFF  03,11D
1A14:  BCF    FD8.1
1A16:  MOVFF  10C,121
1A1A:  MOVFF  10B,120
1A1E:  MOVFF  10A,11F
1A22:  MOVFF  109,11E
1A26:  MOVLB  1
1A28:  CLRF   x25
1A2A:  CLRF   x24
1A2C:  CLRF   x23
1A2E:  MOVLW  7F
1A30:  MOVWF  x22
1A32:  MOVLB  0
1A34:  CALL   0DEA
1A38:  MOVFF  11D,121
1A3C:  MOVFF  11C,120
1A40:  MOVFF  11B,11F
1A44:  MOVFF  11A,11E
1A48:  MOVFF  03,125
1A4C:  MOVFF  02,124
1A50:  MOVFF  01,123
1A54:  MOVFF  00,122
1A58:  CALL   0C8C
1A5C:  MOVFF  03,10C
1A60:  MOVFF  02,10B
1A64:  MOVFF  01,10A
1A68:  MOVFF  00,109
....................  
....................       y2=y*y; 
1A6C:  MOVFF  10C,11D
1A70:  MOVFF  10B,11C
1A74:  MOVFF  10A,11B
1A78:  MOVFF  109,11A
1A7C:  MOVFF  10C,121
1A80:  MOVFF  10B,120
1A84:  MOVFF  10A,11F
1A88:  MOVFF  109,11E
1A8C:  RCALL  1490
1A8E:  MOVFF  03,118
1A92:  MOVFF  02,117
1A96:  MOVFF  01,116
1A9A:  MOVFF  00,115
....................  
....................       res = pl[0]*y2 + pl[1]; 
1A9E:  MOVLW  BC
1AA0:  MOVLB  1
1AA2:  MOVWF  x1D
1AA4:  MOVLW  24
1AA6:  MOVWF  x1C
1AA8:  MOVLW  67
1AAA:  MOVWF  x1B
1AAC:  MOVLW  7D
1AAE:  MOVWF  x1A
1AB0:  MOVFF  118,121
1AB4:  MOVFF  117,120
1AB8:  MOVFF  116,11F
1ABC:  MOVFF  115,11E
1AC0:  MOVLB  0
1AC2:  RCALL  1490
1AC4:  MOVFF  00,11A
1AC8:  MOVFF  01,11B
1ACC:  MOVFF  02,11C
1AD0:  MOVFF  03,11D
1AD4:  BCF    FD8.1
1AD6:  MOVFF  03,121
1ADA:  MOVFF  02,120
1ADE:  MOVFF  01,11F
1AE2:  MOVFF  00,11E
1AE6:  MOVLW  E3
1AE8:  MOVLB  1
1AEA:  MOVWF  x25
1AEC:  MOVLW  E4
1AEE:  MOVWF  x24
1AF0:  MOVLW  90
1AF2:  MOVWF  x23
1AF4:  MOVLW  82
1AF6:  MOVWF  x22
1AF8:  MOVLB  0
1AFA:  CALL   0DEA
1AFE:  MOVFF  03,110
1B02:  MOVFF  02,10F
1B06:  MOVFF  01,10E
1B0A:  MOVFF  00,10D
....................       res = res*y2 + pl[2]; 
1B0E:  MOVFF  110,11D
1B12:  MOVFF  10F,11C
1B16:  MOVFF  10E,11B
1B1A:  MOVFF  10D,11A
1B1E:  MOVFF  118,121
1B22:  MOVFF  117,120
1B26:  MOVFF  116,11F
1B2A:  MOVFF  115,11E
1B2E:  RCALL  1490
1B30:  MOVFF  00,11A
1B34:  MOVFF  01,11B
1B38:  MOVFF  02,11C
1B3C:  MOVFF  03,11D
1B40:  BCF    FD8.1
1B42:  MOVFF  03,121
1B46:  MOVFF  02,120
1B4A:  MOVFF  01,11F
1B4E:  MOVFF  00,11E
1B52:  MOVLW  1C
1B54:  MOVLB  1
1B56:  MOVWF  x25
1B58:  MOVLW  87
1B5A:  MOVWF  x24
1B5C:  MOVLW  57
1B5E:  MOVWF  x23
1B60:  MOVLW  83
1B62:  MOVWF  x22
1B64:  MOVLB  0
1B66:  CALL   0DEA
1B6A:  MOVFF  03,110
1B6E:  MOVFF  02,10F
1B72:  MOVFF  01,10E
1B76:  MOVFF  00,10D
....................       res = res*y2 + pl[3]; 
1B7A:  MOVFF  110,11D
1B7E:  MOVFF  10F,11C
1B82:  MOVFF  10E,11B
1B86:  MOVFF  10D,11A
1B8A:  MOVFF  118,121
1B8E:  MOVFF  117,120
1B92:  MOVFF  116,11F
1B96:  MOVFF  115,11E
1B9A:  RCALL  1490
1B9C:  MOVFF  00,11A
1BA0:  MOVFF  01,11B
1BA4:  MOVFF  02,11C
1BA8:  MOVFF  03,11D
1BAC:  BCF    FD8.1
1BAE:  MOVFF  03,121
1BB2:  MOVFF  02,120
1BB6:  MOVFF  01,11F
1BBA:  MOVFF  00,11E
1BBE:  MOVLW  AB
1BC0:  MOVLB  1
1BC2:  MOVWF  x25
1BC4:  MOVLW  E1
1BC6:  MOVWF  x24
1BC8:  MOVLW  9E
1BCA:  MOVWF  x23
1BCC:  MOVLW  83
1BCE:  MOVWF  x22
1BD0:  MOVLB  0
1BD2:  CALL   0DEA
1BD6:  MOVFF  03,110
1BDA:  MOVFF  02,10F
1BDE:  MOVFF  01,10E
1BE2:  MOVFF  00,10D
....................  
....................       r = ql[0]*y2 + ql[1]; 
1BE6:  MOVLB  1
1BE8:  CLRF   x1D
1BEA:  CLRF   x1C
1BEC:  CLRF   x1B
1BEE:  MOVLW  7F
1BF0:  MOVWF  x1A
1BF2:  MOVFF  118,121
1BF6:  MOVFF  117,120
1BFA:  MOVFF  116,11F
1BFE:  MOVFF  115,11E
1C02:  MOVLB  0
1C04:  RCALL  1490
1C06:  MOVFF  00,11A
1C0A:  MOVFF  01,11B
1C0E:  MOVFF  02,11C
1C12:  MOVFF  03,11D
1C16:  BCF    FD8.1
1C18:  MOVFF  03,121
1C1C:  MOVFF  02,120
1C20:  MOVFF  01,11F
1C24:  MOVFF  00,11E
1C28:  MOVLW  B4
1C2A:  MOVLB  1
1C2C:  MOVWF  x25
1C2E:  MOVLW  2A
1C30:  MOVWF  x24
1C32:  MOVLW  82
1C34:  MOVWF  x23
1C36:  MOVWF  x22
1C38:  MOVLB  0
1C3A:  CALL   0DEA
1C3E:  MOVFF  03,114
1C42:  MOVFF  02,113
1C46:  MOVFF  01,112
1C4A:  MOVFF  00,111
....................       r = r*y2 + ql[2]; 
1C4E:  MOVFF  114,11D
1C52:  MOVFF  113,11C
1C56:  MOVFF  112,11B
1C5A:  MOVFF  111,11A
1C5E:  MOVFF  118,121
1C62:  MOVFF  117,120
1C66:  MOVFF  116,11F
1C6A:  MOVFF  115,11E
1C6E:  RCALL  1490
1C70:  MOVFF  00,11A
1C74:  MOVFF  01,11B
1C78:  MOVFF  02,11C
1C7C:  MOVFF  03,11D
1C80:  BCF    FD8.1
1C82:  MOVFF  03,121
1C86:  MOVFF  02,120
1C8A:  MOVFF  01,11F
1C8E:  MOVFF  00,11E
1C92:  MOVLW  80
1C94:  MOVLB  1
1C96:  MOVWF  x25
1C98:  MOVLW  3E
1C9A:  MOVWF  x24
1C9C:  MOVLW  06
1C9E:  MOVWF  x23
1CA0:  MOVLW  83
1CA2:  MOVWF  x22
1CA4:  MOVLB  0
1CA6:  CALL   0DEA
1CAA:  MOVFF  03,114
1CAE:  MOVFF  02,113
1CB2:  MOVFF  01,112
1CB6:  MOVFF  00,111
....................       r = r*y2 + ql[3]; 
1CBA:  MOVFF  114,11D
1CBE:  MOVFF  113,11C
1CC2:  MOVFF  112,11B
1CC6:  MOVFF  111,11A
1CCA:  MOVFF  118,121
1CCE:  MOVFF  117,120
1CD2:  MOVFF  116,11F
1CD6:  MOVFF  115,11E
1CDA:  CALL   1490
1CDE:  MOVFF  00,11A
1CE2:  MOVFF  01,11B
1CE6:  MOVFF  02,11C
1CEA:  MOVFF  03,11D
1CEE:  BCF    FD8.1
1CF0:  MOVFF  03,121
1CF4:  MOVFF  02,120
1CF8:  MOVFF  01,11F
1CFC:  MOVFF  00,11E
1D00:  MOVLW  AB
1D02:  MOVLB  1
1D04:  MOVWF  x25
1D06:  MOVLW  E1
1D08:  MOVWF  x24
1D0A:  MOVLW  9E
1D0C:  MOVWF  x23
1D0E:  MOVLW  82
1D10:  MOVWF  x22
1D12:  MOVLB  0
1D14:  CALL   0DEA
1D18:  MOVFF  03,114
1D1C:  MOVFF  02,113
1D20:  MOVFF  01,112
1D24:  MOVFF  00,111
....................  
....................       res = y*res/r; 
1D28:  MOVFF  10C,11D
1D2C:  MOVFF  10B,11C
1D30:  MOVFF  10A,11B
1D34:  MOVFF  109,11A
1D38:  MOVFF  110,121
1D3C:  MOVFF  10F,120
1D40:  MOVFF  10E,11F
1D44:  MOVFF  10D,11E
1D48:  CALL   1490
1D4C:  MOVFF  00,11A
1D50:  MOVFF  01,11B
1D54:  MOVFF  02,11C
1D58:  MOVFF  03,11D
1D5C:  MOVFF  03,121
1D60:  MOVFF  02,120
1D64:  MOVFF  01,11F
1D68:  MOVFF  00,11E
1D6C:  MOVFF  114,125
1D70:  MOVFF  113,124
1D74:  MOVFF  112,123
1D78:  MOVFF  111,122
1D7C:  CALL   0C8C
1D80:  MOVFF  03,110
1D84:  MOVFF  02,10F
1D88:  MOVFF  01,10E
1D8C:  MOVFF  00,10D
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1D90:  MOVLW  01
1D92:  MOVLB  1
1D94:  MOVWF  x1B
1D96:  MOVLW  05
1D98:  MOVWF  FE9
1D9A:  MOVFF  11B,FEA
1D9E:  MOVLW  7E
1DA0:  SUBWF  FEF,W
1DA2:  MOVWF  x19
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1DA4:  BTFSC  x19.7
1DA6:  BRA    1DAA
1DA8:  BRA    1DD2
....................          r = -(float32)-n; 
1DAA:  MOVLW  00
1DAC:  BSF    FD8.0
1DAE:  SUBFWB x19,W
1DB0:  CLRF   x1B
1DB2:  MOVWF  x1A
1DB4:  BTFSC  x1A.7
1DB6:  DECF   x1B,F
1DB8:  MOVLB  0
1DBA:  RCALL  194C
1DBC:  MOVFF  00,111
1DC0:  MOVF   01,W
1DC2:  XORLW  80
1DC4:  MOVLB  1
1DC6:  MOVWF  x12
1DC8:  MOVFF  02,113
1DCC:  MOVFF  03,114
....................       else 
1DD0:  BRA    1DF2
....................          r = (float32)n; 
1DD2:  CLRF   x1B
1DD4:  MOVFF  119,11A
1DD8:  BTFSC  x1A.7
1DDA:  DECF   x1B,F
1DDC:  MOVLB  0
1DDE:  RCALL  194C
1DE0:  MOVFF  03,114
1DE4:  MOVFF  02,113
1DE8:  MOVFF  01,112
1DEC:  MOVFF  00,111
1DF0:  MOVLB  1
....................  
....................       res += r*LN2; 
1DF2:  MOVFF  114,11D
1DF6:  MOVFF  113,11C
1DFA:  MOVFF  112,11B
1DFE:  MOVFF  111,11A
1E02:  MOVLW  18
1E04:  MOVWF  x21
1E06:  MOVLW  72
1E08:  MOVWF  x20
1E0A:  MOVLW  31
1E0C:  MOVWF  x1F
1E0E:  MOVLW  7E
1E10:  MOVWF  x1E
1E12:  MOVLB  0
1E14:  CALL   1490
1E18:  BCF    FD8.1
1E1A:  MOVFF  110,121
1E1E:  MOVFF  10F,120
1E22:  MOVFF  10E,11F
1E26:  MOVFF  10D,11E
1E2A:  MOVFF  03,125
1E2E:  MOVFF  02,124
1E32:  MOVFF  01,123
1E36:  MOVFF  00,122
1E3A:  CALL   0DEA
1E3E:  MOVFF  03,110
1E42:  MOVFF  02,10F
1E46:  MOVFF  01,10E
1E4A:  MOVFF  00,10D
....................    } 
....................  
....................    else 
1E4E:  BRA    1E5C
....................       res = 0.0; 
1E50:  MOVLB  1
1E52:  CLRF   x10
1E54:  CLRF   x0F
1E56:  CLRF   x0E
1E58:  CLRF   x0D
1E5A:  MOVLB  0
....................  
....................    return(res); 
1E5C:  MOVFF  10D,00
1E60:  MOVFF  10E,01
1E64:  MOVFF  10F,02
1E68:  MOVFF  110,03
.................... } 
1E6C:  GOTO   2048 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B5,1) 
.................... #define   Damper_off        output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Motor_on          output_bit(PIN_C0,1) 
.................... #define   Motor_off         output_bit(PIN_C0,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0, zero_fabrica=389.0;//zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... //float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float a=-0.0000097266351, b=0.0117506221156, c=-4.6730513437889, d=612.3137852612388; // Prueba Faiver 19 Jun 2015 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
18E2:  MOVLB  1
18E4:  RLCF   x04,W
18E6:  MOVWF  00
18E8:  RLCF   00,F
18EA:  MOVLW  FC
18EC:  ANDWF  00,F
18EE:  MOVFF  00,01
18F2:  MOVF   FC2,W
18F4:  ANDLW  C3
18F6:  IORWF  00,W
18F8:  MOVWF  FC2
18FA:  CLRF   16
18FC:  BTFSC  FF2.7
18FE:  BSF    16.7
1900:  BCF    FF2.7
1902:  MOVLW  0A
1904:  MOVWF  x32
1906:  MOVLB  0
1908:  CALL   00B6
190C:  BTFSC  16.7
190E:  BSF    FF2.7
1910:  BSF    FC2.1
1912:  BTFSC  FC2.1
1914:  BRA    1912
1916:  MOVFF  FC4,10A
191A:  MOVFF  FC3,109
191E:  MOVLB  0
1920:  CALL   0C56
1924:  MOVFF  03,108
1928:  MOVFF  02,107
192C:  MOVFF  01,106
1930:  MOVFF  00,105
1934:  MOVFF  105,00
1938:  MOVFF  106,01
193C:  MOVFF  107,02
1940:  MOVFF  108,03
.................... } 
1944:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
01F8:  MOVLB  1
01FA:  MOVF   x2F,F
01FC:  BNZ   0204
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
01FE:  BCF    F8B.1
0200:  BCF    F94.1
....................    } 
....................    else 
0202:  BRA    0208
....................    { 
....................       Pantalla_on; 
0204:  BSF    F8B.1
0206:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0208:  MOVLB  0
020A:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1E70:  MOVLB  1
1E72:  CLRF   x04
1E74:  MOVLB  0
1E76:  RCALL  18E2
1E78:  MOVFF  00,100
1E7C:  MOVFF  01,101
1E80:  MOVFF  02,102
1E84:  MOVFF  03,103
1E88:  MOVFF  03,11D
1E8C:  MOVFF  02,11C
1E90:  MOVFF  01,11B
1E94:  MOVFF  00,11A
1E98:  MOVLB  1
1E9A:  CLRF   x21
1E9C:  CLRF   x20
1E9E:  MOVLW  20
1EA0:  MOVWF  x1F
1EA2:  MOVLW  81
1EA4:  MOVWF  x1E
1EA6:  MOVLB  0
1EA8:  CALL   1490
1EAC:  MOVFF  00,100
1EB0:  MOVFF  01,101
1EB4:  MOVFF  02,102
1EB8:  MOVFF  03,103
1EBC:  MOVFF  03,121
1EC0:  MOVFF  02,120
1EC4:  MOVFF  01,11F
1EC8:  MOVFF  00,11E
1ECC:  MOVLB  1
1ECE:  CLRF   x25
1ED0:  MOVLW  C0
1ED2:  MOVWF  x24
1ED4:  MOVLW  7F
1ED6:  MOVWF  x23
1ED8:  MOVLW  88
1EDA:  MOVWF  x22
1EDC:  MOVLB  0
1EDE:  CALL   0C8C
1EE2:  MOVFF  03,76
1EE6:  MOVFF  02,75
1EEA:  MOVFF  01,74
1EEE:  MOVFF  00,73
....................     Voltaje1=sensores(1)*5/1023; 
1EF2:  MOVLW  01
1EF4:  MOVLB  1
1EF6:  MOVWF  x04
1EF8:  MOVLB  0
1EFA:  RCALL  18E2
1EFC:  MOVFF  00,100
1F00:  MOVFF  01,101
1F04:  MOVFF  02,102
1F08:  MOVFF  03,103
1F0C:  MOVFF  03,11D
1F10:  MOVFF  02,11C
1F14:  MOVFF  01,11B
1F18:  MOVFF  00,11A
1F1C:  MOVLB  1
1F1E:  CLRF   x21
1F20:  CLRF   x20
1F22:  MOVLW  20
1F24:  MOVWF  x1F
1F26:  MOVLW  81
1F28:  MOVWF  x1E
1F2A:  MOVLB  0
1F2C:  CALL   1490
1F30:  MOVFF  00,100
1F34:  MOVFF  01,101
1F38:  MOVFF  02,102
1F3C:  MOVFF  03,103
1F40:  MOVFF  03,121
1F44:  MOVFF  02,120
1F48:  MOVFF  01,11F
1F4C:  MOVFF  00,11E
1F50:  MOVLB  1
1F52:  CLRF   x25
1F54:  MOVLW  C0
1F56:  MOVWF  x24
1F58:  MOVLW  7F
1F5A:  MOVWF  x23
1F5C:  MOVLW  88
1F5E:  MOVWF  x22
1F60:  MOVLB  0
1F62:  CALL   0C8C
1F66:  MOVFF  03,7A
1F6A:  MOVFF  02,79
1F6E:  MOVFF  01,78
1F72:  MOVFF  00,77
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1F76:  MOVLB  1
1F78:  CLRF   x21
1F7A:  CLRF   x20
1F7C:  MOVLW  20
1F7E:  MOVWF  x1F
1F80:  MOVLW  81
1F82:  MOVWF  x1E
1F84:  MOVFF  7A,125
1F88:  MOVFF  79,124
1F8C:  MOVFF  78,123
1F90:  MOVFF  77,122
1F94:  MOVLB  0
1F96:  CALL   0C8C
1F9A:  MOVFF  00,100
1F9E:  MOVFF  01,101
1FA2:  MOVFF  02,102
1FA6:  MOVFF  03,103
1FAA:  BSF    FD8.1
1FAC:  MOVFF  03,121
1FB0:  MOVFF  02,120
1FB4:  MOVFF  01,11F
1FB8:  MOVFF  00,11E
1FBC:  MOVLB  1
1FBE:  CLRF   x25
1FC0:  CLRF   x24
1FC2:  CLRF   x23
1FC4:  MOVLW  7F
1FC6:  MOVWF  x22
1FC8:  MOVLB  0
1FCA:  CALL   0DEA
1FCE:  MOVFF  6E,121
1FD2:  MOVFF  6D,120
1FD6:  MOVFF  6C,11F
1FDA:  MOVFF  6B,11E
1FDE:  MOVFF  03,125
1FE2:  MOVFF  02,124
1FE6:  MOVFF  01,123
1FEA:  MOVFF  00,122
1FEE:  CALL   0C8C
1FF2:  MOVFF  03,72
1FF6:  MOVFF  02,71
1FFA:  MOVFF  01,70
1FFE:  MOVFF  00,6F
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
2002:  MOVFF  72,121
2006:  MOVFF  71,120
200A:  MOVFF  70,11F
200E:  MOVFF  6F,11E
2012:  MOVFF  5E,125
2016:  MOVFF  5D,124
201A:  MOVFF  5C,123
201E:  MOVFF  5B,122
2022:  CALL   0C8C
2026:  MOVFF  00,100
202A:  MOVFF  01,101
202E:  MOVFF  02,102
2032:  MOVFF  03,103
2036:  MOVFF  03,108
203A:  MOVFF  02,107
203E:  MOVFF  01,106
2042:  MOVFF  00,105
2046:  BRA    199C
2048:  MOVFF  00,100
204C:  MOVFF  01,101
2050:  MOVFF  02,102
2054:  MOVFF  03,103
2058:  MOVFF  03,121
205C:  MOVFF  02,120
2060:  MOVFF  01,11F
2064:  MOVFF  00,11E
2068:  MOVFF  5A,125
206C:  MOVFF  59,124
2070:  MOVFF  58,123
2074:  MOVFF  57,122
2078:  CALL   0C8C
207C:  MOVFF  00,100
2080:  MOVFF  01,101
2084:  MOVFF  02,102
2088:  MOVFF  03,103
208C:  MOVLB  1
208E:  CLRF   x21
2090:  CLRF   x20
2092:  CLRF   x1F
2094:  MOVLW  7F
2096:  MOVWF  x1E
2098:  MOVFF  62,125
209C:  MOVFF  61,124
20A0:  MOVFF  60,123
20A4:  MOVFF  5F,122
20A8:  MOVLB  0
20AA:  CALL   0C8C
20AE:  MOVFF  FEA,105
20B2:  MOVFF  FE9,104
20B6:  BCF    FD8.1
20B8:  MOVFF  103,121
20BC:  MOVFF  102,120
20C0:  MOVFF  101,11F
20C4:  MOVFF  100,11E
20C8:  MOVFF  03,125
20CC:  MOVFF  02,124
20D0:  MOVFF  01,123
20D4:  MOVFF  00,122
20D8:  CALL   0DEA
20DC:  MOVFF  105,FEA
20E0:  MOVFF  104,FE9
20E4:  MOVLB  1
20E6:  CLRF   x21
20E8:  CLRF   x20
20EA:  CLRF   x1F
20EC:  MOVLW  7F
20EE:  MOVWF  x1E
20F0:  MOVFF  03,125
20F4:  MOVFF  02,124
20F8:  MOVFF  01,123
20FC:  MOVFF  00,122
2100:  MOVLB  0
2102:  CALL   0C8C
2106:  MOVFF  03,66
210A:  MOVFF  02,65
210E:  MOVFF  01,64
2112:  MOVFF  00,63
....................     TC=TK-273.15; 
2116:  BSF    FD8.1
2118:  MOVFF  66,121
211C:  MOVFF  65,120
2120:  MOVFF  64,11F
2124:  MOVFF  63,11E
2128:  MOVLW  33
212A:  MOVLB  1
212C:  MOVWF  x25
212E:  MOVLW  93
2130:  MOVWF  x24
2132:  MOVLW  08
2134:  MOVWF  x23
2136:  MOVLW  87
2138:  MOVWF  x22
213A:  MOVLB  0
213C:  CALL   0DEA
2140:  MOVFF  03,6A
2144:  MOVFF  02,69
2148:  MOVFF  01,68
214C:  MOVFF  00,67
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
2150:  MOVF   2C,W
2152:  SUBLW  0A
2154:  BNZ   21B6
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
2156:  MOVLB  1
2158:  CLRF   x04
215A:  MOVLB  0
215C:  CALL   18E2
2160:  MOVFF  00,100
2164:  MOVFF  01,101
2168:  MOVFF  02,102
216C:  MOVFF  03,103
2170:  MOVFF  FEA,105
2174:  MOVFF  FE9,104
2178:  BCF    FD8.1
217A:  MOVFF  03,121
217E:  MOVFF  02,120
2182:  MOVFF  01,11F
2186:  MOVFF  00,11E
218A:  MOVFF  BE,125
218E:  MOVFF  BD,124
2192:  MOVFF  BC,123
2196:  MOVFF  BB,122
219A:  CALL   0DEA
219E:  MOVFF  105,FEA
21A2:  MOVFF  104,FE9
21A6:  MOVFF  03,9A
21AA:  MOVFF  02,99
21AE:  MOVFF  01,98
21B2:  MOVFF  00,97
....................     } 
....................     if(negativo==20) 
21B6:  MOVF   2C,W
21B8:  SUBLW  14
21BA:  BNZ   221C
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
21BC:  MOVLB  1
21BE:  CLRF   x04
21C0:  MOVLB  0
21C2:  CALL   18E2
21C6:  MOVFF  00,100
21CA:  MOVFF  01,101
21CE:  MOVFF  02,102
21D2:  MOVFF  03,103
21D6:  MOVFF  FEA,105
21DA:  MOVFF  FE9,104
21DE:  BSF    FD8.1
21E0:  MOVFF  03,121
21E4:  MOVFF  02,120
21E8:  MOVFF  01,11F
21EC:  MOVFF  00,11E
21F0:  MOVFF  BE,125
21F4:  MOVFF  BD,124
21F8:  MOVFF  BC,123
21FC:  MOVFF  BB,122
2200:  CALL   0DEA
2204:  MOVFF  105,FEA
2208:  MOVFF  104,FE9
220C:  MOVFF  03,9A
2210:  MOVFF  02,99
2214:  MOVFF  01,98
2218:  MOVFF  00,97
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
221C:  MOVFF  9A,11D
2220:  MOVFF  99,11C
2224:  MOVFF  98,11B
2228:  MOVFF  97,11A
222C:  MOVFF  9A,121
2230:  MOVFF  99,120
2234:  MOVFF  98,11F
2238:  MOVFF  97,11E
223C:  CALL   1490
2240:  MOVFF  03,9E
2244:  MOVFF  02,9D
2248:  MOVFF  01,9C
224C:  MOVFF  00,9B
....................     x_cubo=x_uno*x_cuadrado; 
2250:  MOVFF  9A,11D
2254:  MOVFF  99,11C
2258:  MOVFF  98,11B
225C:  MOVFF  97,11A
2260:  MOVFF  9E,121
2264:  MOVFF  9D,120
2268:  MOVFF  9C,11F
226C:  MOVFF  9B,11E
2270:  CALL   1490
2274:  MOVFF  03,A2
2278:  MOVFF  02,A1
227C:  MOVFF  01,A0
2280:  MOVFF  00,9F
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
2284:  MOVFF  A2,11D
2288:  MOVFF  A1,11C
228C:  MOVFF  A0,11B
2290:  MOVFF  9F,11A
2294:  MOVFF  7E,121
2298:  MOVFF  7D,120
229C:  MOVFF  7C,11F
22A0:  MOVFF  7B,11E
22A4:  CALL   1490
22A8:  MOVFF  00,100
22AC:  MOVFF  01,101
22B0:  MOVFF  02,102
22B4:  MOVFF  03,103
22B8:  MOVFF  9E,11D
22BC:  MOVFF  9D,11C
22C0:  MOVFF  9C,11B
22C4:  MOVFF  9B,11A
22C8:  MOVFF  82,121
22CC:  MOVFF  81,120
22D0:  MOVFF  80,11F
22D4:  MOVFF  7F,11E
22D8:  CALL   1490
22DC:  BCF    FD8.1
22DE:  MOVFF  103,121
22E2:  MOVFF  102,120
22E6:  MOVFF  101,11F
22EA:  MOVFF  100,11E
22EE:  MOVFF  03,125
22F2:  MOVFF  02,124
22F6:  MOVFF  01,123
22FA:  MOVFF  00,122
22FE:  CALL   0DEA
2302:  MOVFF  00,100
2306:  MOVFF  01,101
230A:  MOVFF  02,102
230E:  MOVFF  03,103
2312:  MOVFF  9A,11D
2316:  MOVFF  99,11C
231A:  MOVFF  98,11B
231E:  MOVFF  97,11A
2322:  MOVFF  86,121
2326:  MOVFF  85,120
232A:  MOVFF  84,11F
232E:  MOVFF  83,11E
2332:  CALL   1490
2336:  BCF    FD8.1
2338:  MOVFF  103,121
233C:  MOVFF  102,120
2340:  MOVFF  101,11F
2344:  MOVFF  100,11E
2348:  MOVFF  03,125
234C:  MOVFF  02,124
2350:  MOVFF  01,123
2354:  MOVFF  00,122
2358:  CALL   0DEA
235C:  MOVFF  00,100
2360:  MOVFF  01,101
2364:  MOVFF  02,102
2368:  MOVFF  03,103
236C:  BCF    FD8.1
236E:  MOVFF  03,121
2372:  MOVFF  02,120
2376:  MOVFF  01,11F
237A:  MOVFF  00,11E
237E:  MOVFF  8A,125
2382:  MOVFF  89,124
2386:  MOVFF  88,123
238A:  MOVFF  87,122
238E:  CALL   0DEA
2392:  MOVFF  03,B2
2396:  MOVFF  02,B1
239A:  MOVFF  01,B0
239E:  MOVFF  00,AF
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     //Velocidad=Velocidad-0.08; 
....................     if(Velocidad<0.0) 
23A2:  MOVFF  B2,11D
23A6:  MOVFF  B1,11C
23AA:  MOVFF  B0,11B
23AE:  MOVFF  AF,11A
23B2:  MOVLB  1
23B4:  CLRF   x21
23B6:  CLRF   x20
23B8:  CLRF   x1F
23BA:  CLRF   x1E
23BC:  MOVLB  0
23BE:  CALL   182C
23C2:  BNC   23CC
....................      {Velocidad=0.0;} 
23C4:  CLRF   xB2
23C6:  CLRF   xB1
23C8:  CLRF   xB0
23CA:  CLRF   xAF
....................       
....................      if(l>=media) 
23CC:  MOVF   xFF,W
23CE:  SUBWF  28,W
23D0:  BNC   23D4
....................        {l=0;} 
23D2:  CLRF   28
....................       
....................      promedio[l]=Velocidad;l++; 
23D4:  MOVF   28,W
23D6:  MULLW  04
23D8:  MOVF   FF3,W
23DA:  CLRF   03
23DC:  ADDLW  CF
23DE:  MOVWF  FE9
23E0:  MOVLW  00
23E2:  ADDWFC 03,W
23E4:  MOVWF  FEA
23E6:  MOVFF  AF,FEF
23EA:  MOVFF  B0,FEC
23EE:  MOVFF  B1,FEC
23F2:  MOVFF  B2,FEC
23F6:  INCF   28,F
....................      Flujo2=0; 
23F8:  CLRF   x92
23FA:  CLRF   x91
23FC:  CLRF   x90
23FE:  CLRF   x8F
....................         for(h=0;h<=(media-1);h++) 
2400:  CLRF   29
2402:  MOVLW  01
2404:  SUBWF  xFF,W
2406:  SUBWF  29,W
2408:  BZ    240C
240A:  BC    2478
....................         { 
....................            Flujo2+=promedio[h]; 
240C:  MOVF   29,W
240E:  MULLW  04
2410:  MOVF   FF3,W
2412:  CLRF   03
2414:  ADDLW  CF
2416:  MOVWF  FE9
2418:  MOVLW  00
241A:  ADDWFC 03,W
241C:  MOVWF  FEA
241E:  MOVFF  FEF,00
2422:  MOVFF  FEC,01
2426:  MOVFF  FEC,02
242A:  MOVFF  FEC,03
242E:  MOVFF  FEA,101
2432:  MOVFF  FE9,100
2436:  BCF    FD8.1
2438:  MOVFF  92,121
243C:  MOVFF  91,120
2440:  MOVFF  90,11F
2444:  MOVFF  8F,11E
2448:  MOVFF  03,125
244C:  MOVFF  02,124
2450:  MOVFF  01,123
2454:  MOVFF  00,122
2458:  CALL   0DEA
245C:  MOVFF  101,FEA
2460:  MOVFF  100,FE9
2464:  MOVFF  03,92
2468:  MOVFF  02,91
246C:  MOVFF  01,90
2470:  MOVFF  00,8F
....................         }  
2474:  INCF   29,F
2476:  BRA    2402
....................            Flujo2=(Flujo2/media)*Ajuste1;  
2478:  MOVLB  1
247A:  CLRF   x0A
247C:  MOVFF  FF,109
2480:  MOVLB  0
2482:  CALL   0C56
2486:  MOVFF  92,121
248A:  MOVFF  91,120
248E:  MOVFF  90,11F
2492:  MOVFF  8F,11E
2496:  MOVFF  03,125
249A:  MOVFF  02,124
249E:  MOVFF  01,123
24A2:  MOVFF  00,122
24A6:  CALL   0C8C
24AA:  MOVFF  00,100
24AE:  MOVFF  01,101
24B2:  MOVFF  02,102
24B6:  MOVFF  03,103
24BA:  MOVFF  03,11D
24BE:  MOVFF  02,11C
24C2:  MOVFF  01,11B
24C6:  MOVFF  00,11A
24CA:  MOVFF  C2,121
24CE:  MOVFF  C1,120
24D2:  MOVFF  C0,11F
24D6:  MOVFF  BF,11E
24DA:  CALL   1490
24DE:  MOVFF  03,92
24E2:  MOVFF  02,91
24E6:  MOVFF  01,90
24EA:  MOVFF  00,8F
....................            return Flujo2; 
24EE:  MOVFF  8F,00
24F2:  MOVFF  90,01
24F6:  MOVFF  91,02
24FA:  MOVFF  92,03
.................... } 
24FE:  GOTO   6818 (RETURN)
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
2502:  MOVF   2D,W
2504:  SUBLW  14
2506:  BTFSS  FD8.2
2508:  BRA    25FC
250A:  BTFSS  34.1
250C:  BRA    25FC
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
250E:  BSF    FD8.1
2510:  MOVFF  45,121
2514:  MOVFF  44,120
2518:  MOVFF  43,11F
251C:  MOVFF  42,11E
2520:  MOVFF  8E,125
2524:  MOVFF  8D,124
2528:  MOVFF  8C,123
252C:  MOVFF  8B,122
2530:  CALL   0DEA
2534:  MOVFF  03,CE
2538:  MOVFF  02,CD
253C:  MOVFF  01,CC
2540:  MOVFF  00,CB
....................       if(error<0.2&&error>-0.2) 
2544:  MOVFF  CE,11D
2548:  MOVFF  CD,11C
254C:  MOVFF  CC,11B
2550:  MOVFF  CB,11A
2554:  MOVLW  CD
2556:  MOVLB  1
2558:  MOVWF  x21
255A:  MOVLW  CC
255C:  MOVWF  x20
255E:  MOVLW  4C
2560:  MOVWF  x1F
2562:  MOVLW  7C
2564:  MOVWF  x1E
2566:  MOVLB  0
2568:  CALL   182C
256C:  BNC   2598
256E:  MOVLW  CD
2570:  MOVLB  1
2572:  MOVWF  x1D
2574:  MOVLW  CC
2576:  MOVWF  x1C
2578:  MOVWF  x1B
257A:  MOVLW  7C
257C:  MOVWF  x1A
257E:  MOVFF  CE,121
2582:  MOVFF  CD,120
2586:  MOVFF  CC,11F
258A:  MOVFF  CB,11E
258E:  MOVLB  0
2590:  CALL   182C
2594:  BNC   2598
....................       {} 
....................       else 
2596:  BRA    25E4
....................       { 
....................          if(error>0.0) 
2598:  MOVLB  1
259A:  CLRF   x1D
259C:  CLRF   x1C
259E:  CLRF   x1B
25A0:  CLRF   x1A
25A2:  MOVFF  CE,121
25A6:  MOVFF  CD,120
25AA:  MOVFF  CC,11F
25AE:  MOVFF  CB,11E
25B2:  MOVLB  0
25B4:  CALL   182C
25B8:  BNC   25BE
....................          {tmp+=1;} 
25BA:  MOVLW  01
25BC:  ADDWF  2A,F
....................                 
....................          if(error<-0.0) 
25BE:  MOVFF  CE,11D
25C2:  MOVFF  CD,11C
25C6:  MOVFF  CC,11B
25CA:  MOVFF  CB,11A
25CE:  MOVLB  1
25D0:  CLRF   x21
25D2:  CLRF   x20
25D4:  CLRF   x1F
25D6:  CLRF   x1E
25D8:  MOVLB  0
25DA:  CALL   182C
25DE:  BNC   25E4
....................          {tmp-=1;}   
25E0:  MOVLW  01
25E2:  SUBWF  2A,F
....................       } 
....................        
....................       if(tmp>251) 
25E4:  MOVF   2A,W
25E6:  SUBLW  FB
25E8:  BC    25EE
....................       {tmp=251;} 
25EA:  MOVLW  FB
25EC:  MOVWF  2A
....................       if(tmp<4)          
25EE:  MOVF   2A,W
25F0:  SUBLW  03
25F2:  BNC   25F8
....................       {tmp=4;}       
25F4:  MOVLW  04
25F6:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
25F8:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Manual==20) 
25FC:  MOVF   2E,W
25FE:  SUBLW  14
2600:  BNZ   260A
....................    { 
....................       tmp=251; 
2602:  MOVLW  FB
2604:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
2606:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Semi==20) 
260A:  MOVF   2F,W
260C:  SUBLW  14
260E:  BNZ   2614
....................    { 
....................       set_pwm1_duty (ValorSemi); 
2610:  MOVFF  30,FBE
....................    } 
.................... } 
2614:  GOTO   6830 (RETURN)
....................  
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
*
0312:  BTFSC  35.4
0314:  BRA    03D0
....................       { 
....................       delay_ms(500); 
0316:  MOVLW  02
0318:  MOVLB  1
031A:  MOVWF  x2F
031C:  MOVLW  FA
031E:  MOVWF  x32
0320:  MOVLB  0
0322:  RCALL  00B6
0324:  MOVLB  1
0326:  DECFSZ x2F,F
0328:  BRA    031C
....................          if(input(PIN_B0)) 
032A:  BSF    F93.0
032C:  BTFSS  F81.0
032E:  BRA    03CE
....................          { 
....................             lcd_init(); 
0330:  MOVLB  0
0332:  BRA    0184
....................             intensidadpantalla(contraste); 
0334:  MOVFF  21,12F
0338:  RCALL  01F8
....................             lcd_gotoxy(1,1); 
033A:  MOVLW  01
033C:  MOVLB  1
033E:  MOVWF  x32
0340:  MOVWF  x33
0342:  MOVLB  0
0344:  RCALL  020C
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
0346:  MOVLW  D6
0348:  MOVWF  FF6
034A:  MOVLW  03
034C:  MOVWF  FF7
034E:  RCALL  02F2
....................             lcd_gotoxy(1,2); 
0350:  MOVLW  01
0352:  MOVLB  1
0354:  MOVWF  x32
0356:  MOVLW  02
0358:  MOVWF  x33
035A:  MOVLB  0
035C:  RCALL  020C
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
035E:  MOVLW  EC
0360:  MOVWF  FF6
0362:  MOVLW  03
0364:  MOVWF  FF7
0366:  RCALL  02F2
....................             lcd_gotoxy(1,3); 
0368:  MOVLW  01
036A:  MOVLB  1
036C:  MOVWF  x32
036E:  MOVLW  03
0370:  MOVWF  x33
0372:  MOVLB  0
0374:  RCALL  020C
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
0376:  MOVLW  02
0378:  MOVWF  FF6
037A:  MOVLW  04
037C:  MOVWF  FF7
037E:  RCALL  02F2
....................             lcd_gotoxy(1,4); 
0380:  MOVLW  01
0382:  MOVLB  1
0384:  MOVWF  x32
0386:  MOVLW  04
0388:  MOVWF  x33
038A:  MOVLB  0
038C:  RCALL  020C
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
038E:  MOVLW  18
0390:  MOVWF  FF6
0392:  MOVLW  04
0394:  MOVWF  FF7
0396:  RCALL  02F2
....................             delay_ms(2000); 
0398:  MOVLW  08
039A:  MOVLB  1
039C:  MOVWF  x2F
039E:  MOVLW  FA
03A0:  MOVWF  x32
03A2:  MOVLB  0
03A4:  RCALL  00B6
03A6:  MOVLB  1
03A8:  DECFSZ x2F,F
03AA:  BRA    039E
....................             printf(lcd_putc,"\f"); 
03AC:  MOVLW  0C
03AE:  MOVWF  x31
03B0:  MOVLB  0
03B2:  RCALL  0286
....................             inicio=1; 
03B4:  BSF    35.4
....................             Menu=0; 
03B6:  CLRF   18
....................             ModoSleep=0; 
03B8:  BCF    35.3
....................             delay_ms(500); 
03BA:  MOVLW  02
03BC:  MOVLB  1
03BE:  MOVWF  x2F
03C0:  MOVLW  FA
03C2:  MOVWF  x32
03C4:  MOVLB  0
03C6:  RCALL  00B6
03C8:  MOVLB  1
03CA:  DECFSZ x2F,F
03CC:  BRA    03C0
03CE:  MOVLB  0
....................          } 
....................       } 
.................... } 
....................  
03D0:  BCF    FF2.1
03D2:  GOTO   0060
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(25561); 
....................    set_timer1(38286);  // 5 ms 
*
042E:  MOVLW  95
0430:  MOVWF  FCF
0432:  MOVLW  8E
0434:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    //set_timer1(6064);  // 5  ms 
....................    tiempos++; 
0436:  INCF   4F,F
0438:  BTFSC  FD8.2
043A:  INCF   50,F
....................    tiempos2++; 
043C:  INCF   53,F
043E:  BTFSC  FD8.2
0440:  INCF   54,F
....................     
....................    if(tiempos2==20) 
0442:  MOVF   53,W
0444:  SUBLW  14
0446:  BNZ   0452
0448:  MOVF   54,F
044A:  BNZ   0452
....................    {tiempos2=0;Lectura2=1;} 
044C:  CLRF   54
044E:  CLRF   53
0450:  BSF    35.6
....................     
....................    if(flag_latencia==1) 
0452:  BTFSS  35.0
0454:  BRA    045C
....................       { 
....................          t_latencia++;          
0456:  INCF   51,F
0458:  BTFSC  FD8.2
045A:  INCF   52,F
....................       } 
....................     
....................    if(t_latencia>=3000) 
045C:  MOVF   52,W
045E:  SUBLW  0A
0460:  BC    046E
0462:  XORLW  FF
0464:  BNZ   046C
0466:  MOVF   51,W
0468:  SUBLW  B7
046A:  BC    046E
....................    {Latencia=1;} 
046C:  BSF    35.1
....................     
....................    if(flag_iniciodamper==1) 
046E:  BTFSS  35.7
0470:  BRA    048E
....................    { 
....................       t_iniciodamper++; 
0472:  INCF   55,F
0474:  BTFSC  FD8.2
0476:  INCF   56,F
....................       if(t_iniciodamper>=12000) 
0478:  MOVF   56,W
047A:  SUBLW  2D
047C:  BC    048E
047E:  XORLW  FF
0480:  BNZ   0488
0482:  MOVF   55,W
0484:  SUBLW  DF
0486:  BC    048E
....................       { 
....................          estadomv=1;Motor_on; 
0488:  BSF    34.1
048A:  BSF    F8B.0
048C:  BCF    F94.0
....................       } 
....................    } 
....................     
....................    if(t_iniciodamper>=18000) 
048E:  MOVF   56,W
0490:  SUBLW  45
0492:  BC    04A2
0494:  XORLW  FF
0496:  BNZ   049E
0498:  MOVF   55,W
049A:  SUBLW  4F
049C:  BC    04A2
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
049E:  BSF    4E.0
04A0:  BCF    35.7
....................    } 
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
04A2:  MOVF   4F,W
04A4:  SUBLW  C8
04A6:  BNZ   04D0
04A8:  MOVF   50,F
04AA:  BNZ   04D0
....................    {tiempos=0;  
04AC:  CLRF   50
04AE:  CLRF   4F
....................         Lectura=1; 
04B0:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
04B2:  BTFSS  34.1
04B4:  BRA    04D0
04B6:  BTFSS  35.2
04B8:  BRA    04D0
....................          { 
....................             segundos++; 
04BA:  INCF   31,F
....................           
....................          if(segundos==60) 
04BC:  MOVF   31,W
04BE:  SUBLW  3C
04C0:  BNZ   04C6
....................          { 
....................             segundos=0;minutos++; 
04C2:  CLRF   31
04C4:  INCF   32,F
....................          } 
....................           
....................          if(minutos==60) 
04C6:  MOVF   32,W
04C8:  SUBLW  3C
04CA:  BNZ   04D0
....................          { 
....................             minutos=0;horas++; 
04CC:  CLRF   32
04CE:  INCF   33,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
04D0:  BCF    F9E.0
04D2:  GOTO   0060
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
11DC:  MOVLB  1
11DE:  DECFSZ x01,W
11E0:  BRA    1252
....................    {if(estadoalarma==0) 
11E2:  BTFSC  34.2
11E4:  BRA    121A
11E6:  CLRF   16
11E8:  BTFSC  FF2.7
11EA:  BSF    16.7
11EC:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA          OFF");} 
11EE:  MOVLW  02
11F0:  MOVWF  x32
11F2:  MOVFF  102,133
11F6:  MOVLB  0
11F8:  CALL   020C
11FC:  BTFSC  16.7
11FE:  BSF    FF2.7
1200:  MOVLW  D6
1202:  MOVWF  FF6
1204:  MOVLW  04
1206:  MOVWF  FF7
1208:  CLRF   16
120A:  BTFSC  FF2.7
120C:  BSF    16.7
120E:  BCF    FF2.7
1210:  CALL   02F2
1214:  BTFSC  16.7
1216:  BSF    FF2.7
1218:  MOVLB  1
....................    if(estadoalarma==1) 
121A:  BTFSS  34.2
121C:  BRA    1252
121E:  CLRF   16
1220:  BTFSC  FF2.7
1222:  BSF    16.7
1224:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA           ON");} 
1226:  MOVLW  02
1228:  MOVWF  x32
122A:  MOVFF  102,133
122E:  MOVLB  0
1230:  CALL   020C
1234:  BTFSC  16.7
1236:  BSF    FF2.7
1238:  MOVLW  EA
123A:  MOVWF  FF6
123C:  MOVLW  04
123E:  MOVWF  FF7
1240:  CLRF   16
1242:  BTFSC  FF2.7
1244:  BSF    16.7
1246:  BCF    FF2.7
1248:  CALL   02F2
124C:  BTFSC  16.7
124E:  BSF    FF2.7
1250:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
1252:  MOVF   x01,W
1254:  SUBLW  02
1256:  BNZ   128C
1258:  CLRF   16
125A:  BTFSC  FF2.7
125C:  BSF    16.7
125E:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"FILTRO             ");} 
1260:  MOVLW  02
1262:  MOVWF  x32
1264:  MOVFF  102,133
1268:  MOVLB  0
126A:  CALL   020C
126E:  BTFSC  16.7
1270:  BSF    FF2.7
1272:  MOVLW  FE
1274:  MOVWF  FF6
1276:  MOVLW  04
1278:  MOVWF  FF7
127A:  CLRF   16
127C:  BTFSC  FF2.7
127E:  BSF    16.7
1280:  BCF    FF2.7
1282:  CALL   02F2
1286:  BTFSC  16.7
1288:  BSF    FF2.7
128A:  MOVLB  1
....................     
....................    if(x==3) 
128C:  MOVF   x01,W
128E:  SUBLW  03
1290:  BNZ   12C6
1292:  CLRF   16
1294:  BTFSC  FF2.7
1296:  BSF    16.7
1298:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"SETPOINT           ");} 
129A:  MOVLW  02
129C:  MOVWF  x32
129E:  MOVFF  102,133
12A2:  MOVLB  0
12A4:  CALL   020C
12A8:  BTFSC  16.7
12AA:  BSF    FF2.7
12AC:  MOVLW  12
12AE:  MOVWF  FF6
12B0:  MOVLW  05
12B2:  MOVWF  FF7
12B4:  CLRF   16
12B6:  BTFSC  FF2.7
12B8:  BSF    16.7
12BA:  BCF    FF2.7
12BC:  CALL   02F2
12C0:  BTFSC  16.7
12C2:  BSF    FF2.7
12C4:  MOVLB  1
....................     
....................    if(x==4) 
12C6:  MOVF   x01,W
12C8:  SUBLW  04
12CA:  BNZ   1300
12CC:  CLRF   16
12CE:  BTFSC  FF2.7
12D0:  BSF    16.7
12D2:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"CAMBIO CONTRASENA  ");} 
12D4:  MOVLW  02
12D6:  MOVWF  x32
12D8:  MOVFF  102,133
12DC:  MOVLB  0
12DE:  CALL   020C
12E2:  BTFSC  16.7
12E4:  BSF    FF2.7
12E6:  MOVLW  26
12E8:  MOVWF  FF6
12EA:  MOVLW  05
12EC:  MOVWF  FF7
12EE:  CLRF   16
12F0:  BTFSC  FF2.7
12F2:  BSF    16.7
12F4:  BCF    FF2.7
12F6:  CALL   02F2
12FA:  BTFSC  16.7
12FC:  BSF    FF2.7
12FE:  MOVLB  1
....................     
....................    if(x==5) 
1300:  MOVF   x01,W
1302:  SUBLW  05
1304:  BNZ   133A
1306:  CLRF   16
1308:  BTFSC  FF2.7
130A:  BSF    16.7
130C:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MEDIA MOVIL        ");} 
130E:  MOVLW  02
1310:  MOVWF  x32
1312:  MOVFF  102,133
1316:  MOVLB  0
1318:  CALL   020C
131C:  BTFSC  16.7
131E:  BSF    FF2.7
1320:  MOVLW  3A
1322:  MOVWF  FF6
1324:  MOVLW  05
1326:  MOVWF  FF7
1328:  CLRF   16
132A:  BTFSC  FF2.7
132C:  BSF    16.7
132E:  BCF    FF2.7
1330:  CALL   02F2
1334:  BTFSC  16.7
1336:  BSF    FF2.7
1338:  MOVLB  1
....................     
....................    if(x==6) 
133A:  MOVF   x01,W
133C:  SUBLW  06
133E:  BNZ   1374
1340:  CLRF   16
1342:  BTFSC  FF2.7
1344:  BSF    16.7
1346:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"PUNTO ZERO         ");} 
1348:  MOVLW  02
134A:  MOVWF  x32
134C:  MOVFF  102,133
1350:  MOVLB  0
1352:  CALL   020C
1356:  BTFSC  16.7
1358:  BSF    FF2.7
135A:  MOVLW  4E
135C:  MOVWF  FF6
135E:  MOVLW  05
1360:  MOVWF  FF7
1362:  CLRF   16
1364:  BTFSC  FF2.7
1366:  BSF    16.7
1368:  BCF    FF2.7
136A:  CALL   02F2
136E:  BTFSC  16.7
1370:  BSF    FF2.7
1372:  MOVLB  1
....................     
....................    if(x==7) 
1374:  MOVF   x01,W
1376:  SUBLW  07
1378:  BNZ   13AE
137A:  CLRF   16
137C:  BTFSC  FF2.7
137E:  BSF    16.7
1380:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MANTENIMIENTO      ");} 
1382:  MOVLW  02
1384:  MOVWF  x32
1386:  MOVFF  102,133
138A:  MOVLB  0
138C:  CALL   020C
1390:  BTFSC  16.7
1392:  BSF    FF2.7
1394:  MOVLW  62
1396:  MOVWF  FF6
1398:  MOVLW  05
139A:  MOVWF  FF7
139C:  CLRF   16
139E:  BTFSC  FF2.7
13A0:  BSF    16.7
13A2:  BCF    FF2.7
13A4:  CALL   02F2
13A8:  BTFSC  16.7
13AA:  BSF    FF2.7
13AC:  MOVLB  1
....................     
....................    if(x==8) 
13AE:  MOVF   x01,W
13B0:  SUBLW  08
13B2:  BNZ   13E8
13B4:  CLRF   16
13B6:  BTFSC  FF2.7
13B8:  BSF    16.7
13BA:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MODO               ");} 
13BC:  MOVLW  02
13BE:  MOVWF  x32
13C0:  MOVFF  102,133
13C4:  MOVLB  0
13C6:  CALL   020C
13CA:  BTFSC  16.7
13CC:  BSF    FF2.7
13CE:  MOVLW  76
13D0:  MOVWF  FF6
13D2:  MOVLW  05
13D4:  MOVWF  FF7
13D6:  CLRF   16
13D8:  BTFSC  FF2.7
13DA:  BSF    16.7
13DC:  BCF    FF2.7
13DE:  CALL   02F2
13E2:  BTFSC  16.7
13E4:  BSF    FF2.7
13E6:  MOVLB  1
.................... } 
13E8:  MOVLB  0
13EA:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1946:  MOVFF  FF,FBE
.................... } 
194A:  RETLW  00
....................  
.................... void main () 
.................... { 
*
2618:  CLRF   FF8
261A:  BCF    FD0.7
261C:  BSF    07.7
261E:  CLRF   FEA
2620:  CLRF   FE9
2622:  MOVLW  64
2624:  MOVWF  18
2626:  MOVLW  09
2628:  MOVWF  19
262A:  MOVLW  02
262C:  MOVWF  1A
262E:  MOVLW  0B
2630:  MOVWF  1B
2632:  MOVLW  02
2634:  MOVWF  1C
2636:  MOVLW  03
2638:  MOVWF  1D
263A:  MOVLW  02
263C:  MOVWF  1E
263E:  MOVWF  1F
2640:  MOVLW  04
2642:  MOVWF  20
2644:  MOVLW  0A
2646:  MOVWF  21
2648:  CLRF   22
264A:  CLRF   23
264C:  CLRF   24
264E:  CLRF   25
2650:  CLRF   26
2652:  CLRF   27
2654:  CLRF   28
2656:  CLRF   29
2658:  MOVWF  2A
265A:  CLRF   2B
265C:  MOVWF  2C
265E:  MOVWF  2D
2660:  MOVWF  2E
2662:  MOVWF  2F
2664:  CLRF   30
2666:  CLRF   31
2668:  CLRF   32
266A:  CLRF   33
266C:  BCF    34.0
266E:  BCF    34.1
2670:  BCF    34.2
2672:  BCF    34.3
2674:  BCF    34.4
2676:  BCF    34.5
2678:  BCF    34.6
267A:  BCF    34.7
267C:  BCF    35.0
267E:  BCF    35.1
2680:  BCF    35.2
2682:  CLRF   36
2684:  CLRF   45
2686:  CLRF   44
2688:  CLRF   43
268A:  CLRF   42
268C:  CLRF   49
268E:  CLRF   48
2690:  CLRF   47
2692:  CLRF   46
2694:  CLRF   4D
2696:  MOVLW  80
2698:  MOVWF  4C
269A:  MOVLW  42
269C:  MOVWF  4B
269E:  MOVLW  87
26A0:  MOVWF  4A
26A2:  BCF    35.4
26A4:  BCF    35.5
26A6:  BCF    35.6
26A8:  BCF    35.7
26AA:  BCF    4E.0
26AC:  BCF    4E.1
26AE:  BCF    4E.2
26B0:  BCF    4E.3
26B2:  CLRF   50
26B4:  CLRF   4F
26B6:  CLRF   52
26B8:  CLRF   51
26BA:  CLRF   54
26BC:  CLRF   53
26BE:  CLRF   56
26C0:  CLRF   55
26C2:  CLRF   5A
26C4:  MOVLW  E0
26C6:  MOVWF  59
26C8:  MOVLW  5D
26CA:  MOVWF  58
26CC:  MOVLW  8A
26CE:  MOVWF  57
26D0:  CLRF   5E
26D2:  MOVLW  C0
26D4:  MOVWF  5D
26D6:  MOVLW  28
26D8:  MOVWF  5C
26DA:  MOVLW  89
26DC:  MOVWF  5B
26DE:  MOVLW  33
26E0:  MOVWF  x62
26E2:  MOVLW  13
26E4:  MOVWF  x61
26E6:  MOVLW  15
26E8:  MOVWF  x60
26EA:  MOVLW  87
26EC:  MOVWF  5F
26EE:  CLRF   x66
26F0:  CLRF   x65
26F2:  CLRF   x64
26F4:  CLRF   x63
26F6:  CLRF   x6A
26F8:  CLRF   x69
26FA:  CLRF   x68
26FC:  CLRF   x67
26FE:  CLRF   x6E
2700:  CLRF   x6D
2702:  MOVLW  7A
2704:  MOVWF  x6C
2706:  MOVLW  88
2708:  MOVWF  x6B
270A:  CLRF   x72
270C:  CLRF   x71
270E:  CLRF   x70
2710:  CLRF   x6F
2712:  CLRF   x76
2714:  CLRF   x75
2716:  CLRF   x74
2718:  CLRF   x73
271A:  CLRF   x7A
271C:  CLRF   x79
271E:  CLRF   x78
2720:  CLRF   x77
2722:  MOVLW  94
2724:  MOVWF  x7E
2726:  MOVLW  2F
2728:  MOVWF  x7D
272A:  MOVLW  A3
272C:  MOVWF  x7C
272E:  MOVLW  6E
2730:  MOVWF  x7B
2732:  MOVLW  AE
2734:  MOVWF  x82
2736:  MOVLW  85
2738:  MOVWF  x81
273A:  MOVLW  40
273C:  MOVWF  x80
273E:  MOVLW  78
2740:  MOVWF  x7F
2742:  MOVLW  A3
2744:  MOVWF  x86
2746:  MOVLW  89
2748:  MOVWF  x85
274A:  MOVLW  95
274C:  MOVWF  x84
274E:  MOVLW  81
2750:  MOVWF  x83
2752:  MOVLW  15
2754:  MOVWF  x8A
2756:  MOVLW  14
2758:  MOVWF  x89
275A:  MOVLW  19
275C:  MOVWF  x88
275E:  MOVLW  88
2760:  MOVWF  x87
2762:  CLRF   x8E
2764:  CLRF   x8D
2766:  CLRF   x8C
2768:  CLRF   x8B
276A:  CLRF   x92
276C:  CLRF   x91
276E:  CLRF   x90
2770:  CLRF   x8F
2772:  CLRF   x96
2774:  CLRF   x95
2776:  CLRF   x94
2778:  CLRF   x93
277A:  CLRF   x9A
277C:  CLRF   x99
277E:  CLRF   x98
2780:  CLRF   x97
2782:  CLRF   x9E
2784:  CLRF   x9D
2786:  CLRF   x9C
2788:  CLRF   x9B
278A:  CLRF   xA2
278C:  CLRF   xA1
278E:  CLRF   xA0
2790:  CLRF   x9F
2792:  MOVLW  8B
2794:  MOVWF  xA6
2796:  MOVLW  FD
2798:  MOVWF  xA5
279A:  MOVLW  65
279C:  MOVWF  xA4
279E:  MOVLW  7C
27A0:  MOVWF  xA3
27A2:  CLRF   xAA
27A4:  CLRF   xA9
27A6:  CLRF   xA8
27A8:  CLRF   xA7
27AA:  CLRF   xAE
27AC:  CLRF   xAD
27AE:  CLRF   xAC
27B0:  CLRF   xAB
27B2:  CLRF   xB2
27B4:  CLRF   xB1
27B6:  CLRF   xB0
27B8:  CLRF   xAF
27BA:  CLRF   xB6
27BC:  CLRF   xB5
27BE:  CLRF   xB4
27C0:  CLRF   xB3
27C2:  CLRF   xBA
27C4:  CLRF   xB9
27C6:  CLRF   xB8
27C8:  CLRF   xB7
27CA:  CLRF   xBE
27CC:  CLRF   xBD
27CE:  CLRF   xBC
27D0:  CLRF   xBB
27D2:  CLRF   xC2
27D4:  CLRF   xC1
27D6:  CLRF   xC0
27D8:  MOVLW  7F
27DA:  MOVWF  xBF
27DC:  CLRF   xC6
27DE:  CLRF   xC5
27E0:  MOVLW  24
27E2:  MOVWF  xC4
27E4:  MOVLW  88
27E6:  MOVWF  xC3
27E8:  CLRF   xCA
27EA:  CLRF   xC9
27EC:  CLRF   xC8
27EE:  CLRF   xC7
27F0:  CLRF   xCE
27F2:  CLRF   xCD
27F4:  CLRF   xCC
27F6:  CLRF   xCB
27F8:  MOVF   FC1,W
27FA:  ANDLW  C0
27FC:  IORLW  0F
27FE:  MOVWF  FC1
2800:  MOVLW  07
2802:  MOVWF  FB4
2804:  MOVLW  3E
2806:  MOVWF  37
2808:  MOVLW  20
280A:  MOVWF  38
280C:  MOVLW  5E
280E:  MOVWF  39
2810:  CLRF   3A
2812:  CLRF   3B
2814:  CLRF   3C
2816:  CLRF   3D
2818:  CLRF   3E
281A:  CLRF   3F
281C:  CLRF   40
281E:  CLRF   41
2820:  CLRF   xCF
2822:  CLRF   xD0
2824:  CLRF   xD1
2826:  CLRF   xD2
2828:  CLRF   xD3
282A:  CLRF   xD4
282C:  CLRF   xD5
282E:  CLRF   xD6
2830:  CLRF   xD7
2832:  CLRF   xD8
2834:  CLRF   xD9
2836:  CLRF   xDA
2838:  CLRF   xDB
283A:  CLRF   xDC
283C:  CLRF   xDD
283E:  CLRF   xDE
2840:  CLRF   xDF
2842:  CLRF   xE0
2844:  CLRF   xE1
2846:  CLRF   xE2
2848:  CLRF   xE3
284A:  CLRF   xE4
284C:  CLRF   xE5
284E:  CLRF   xE6
2850:  CLRF   xE7
2852:  CLRF   xE8
2854:  CLRF   xE9
2856:  CLRF   xEA
2858:  CLRF   xEB
285A:  CLRF   xEC
285C:  CLRF   xED
285E:  CLRF   xEE
2860:  CLRF   xEF
2862:  CLRF   xF0
2864:  CLRF   xF1
2866:  CLRF   xF2
2868:  CLRF   xF3
286A:  CLRF   xF4
286C:  CLRF   xF5
286E:  CLRF   xF6
2870:  CLRF   xF7
2872:  CLRF   xF8
2874:  CLRF   xF9
2876:  CLRF   xFA
2878:  CLRF   xFB
287A:  CLRF   xFC
287C:  CLRF   xFD
287E:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
2880:  MOVF   FC1,W
2882:  ANDLW  C0
2884:  IORLW  0B
2886:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2888:  BCF    FC0.0
288A:  BSF    FC0.1
288C:  BCF    FC0.2
288E:  BSF    FC0.7
2890:  BSF    FC2.0
....................    output_d(0);  
2892:  CLRF   F95
2894:  CLRF   F8C
....................    ModoSleep=1; 
2896:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2898:  MOVLW  85
289A:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
289C:  BSF    F9D.0
....................    enable_interrupts(INT_EXT_L2H); 
289E:  BSF    FF2.4
28A0:  BSF    FF1.6
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
28A2:  MOVLW  00
28A4:  IORLW  05
28A6:  MOVWF  FCA
28A8:  MOVLW  FF
28AA:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
28AC:  BCF    F94.2
28AE:  BCF    F8B.2
28B0:  BCF    F96.6
28B2:  MOVLW  0C
28B4:  MOVWF  FBD
28B6:  CLRF   FB7
28B8:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
28BA:  MOVLW  C0
28BC:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
28BE:  CLRF   FBE
....................     
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
28C0:  MOVFF  FF2,100
28C4:  BCF    FF2.7
28C6:  CLRF   FA9
28C8:  BCF    FA6.6
28CA:  BCF    FA6.7
28CC:  BSF    FA6.0
28CE:  MOVF   FA8,W
28D0:  MOVLB  1
28D2:  BTFSC  x00.7
28D4:  BSF    FF2.7
28D6:  MOVWF  3E
28D8:  CLRF   16
28DA:  BTFSC  FF2.7
28DC:  BSF    16.7
28DE:  BCF    FF2.7
28E0:  MOVLW  14
28E2:  MOVWF  x32
28E4:  MOVLB  0
28E6:  CALL   00B6
28EA:  BTFSC  16.7
28EC:  BSF    FF2.7
28EE:  MOVFF  FF2,100
28F2:  BCF    FF2.7
28F4:  MOVLW  01
28F6:  MOVWF  FA9
28F8:  BCF    FA6.6
28FA:  BCF    FA6.7
28FC:  BSF    FA6.0
28FE:  MOVF   FA8,W
2900:  MOVLB  1
2902:  BTFSC  x00.7
2904:  BSF    FF2.7
2906:  MOVWF  3F
2908:  CLRF   16
290A:  BTFSC  FF2.7
290C:  BSF    16.7
290E:  BCF    FF2.7
2910:  MOVLW  14
2912:  MOVWF  x32
2914:  MOVLB  0
2916:  CALL   00B6
291A:  BTFSC  16.7
291C:  BSF    FF2.7
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
291E:  MOVFF  FF2,100
2922:  BCF    FF2.7
2924:  MOVLW  02
2926:  MOVWF  FA9
2928:  BCF    FA6.6
292A:  BCF    FA6.7
292C:  BSF    FA6.0
292E:  MOVF   FA8,W
2930:  MOVLB  1
2932:  BTFSC  x00.7
2934:  BSF    FF2.7
2936:  MOVWF  40
2938:  CLRF   16
293A:  BTFSC  FF2.7
293C:  BSF    16.7
293E:  BCF    FF2.7
2940:  MOVLW  14
2942:  MOVWF  x32
2944:  MOVLB  0
2946:  CALL   00B6
294A:  BTFSC  16.7
294C:  BSF    FF2.7
294E:  MOVFF  FF2,100
2952:  BCF    FF2.7
2954:  MOVLW  03
2956:  MOVWF  FA9
2958:  BCF    FA6.6
295A:  BCF    FA6.7
295C:  BSF    FA6.0
295E:  MOVF   FA8,W
2960:  MOVLB  1
2962:  BTFSC  x00.7
2964:  BSF    FF2.7
2966:  MOVWF  41
2968:  CLRF   16
296A:  BTFSC  FF2.7
296C:  BSF    16.7
296E:  BCF    FF2.7
2970:  MOVLW  14
2972:  MOVWF  x32
2974:  MOVLB  0
2976:  CALL   00B6
297A:  BTFSC  16.7
297C:  BSF    FF2.7
....................    estadoalarma=read_eeprom(5); 
297E:  MOVFF  FF2,100
2982:  BCF    FF2.7
2984:  MOVLW  05
2986:  MOVWF  FA9
2988:  BCF    FA6.6
298A:  BCF    FA6.7
298C:  BSF    FA6.0
298E:  MOVF   FA8,W
2990:  MOVLB  1
2992:  BTFSC  x00.7
2994:  BSF    FF2.7
2996:  MOVWF  01
2998:  BCF    34.2
299A:  BTFSC  01.0
299C:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
299E:  MOVFF  FF2,100
29A2:  BCF    FF2.7
29A4:  MOVLW  0A
29A6:  MOVWF  FA9
29A8:  BCF    FA6.6
29AA:  BCF    FA6.7
29AC:  BSF    FA6.0
29AE:  MOVF   FA8,W
29B0:  BTFSC  x00.7
29B2:  BSF    FF2.7
29B4:  MOVWF  2E
29B6:  MOVFF  FF2,100
29BA:  BCF    FF2.7
29BC:  MOVLW  0B
29BE:  MOVWF  FA9
29C0:  BCF    FA6.6
29C2:  BCF    FA6.7
29C4:  BSF    FA6.0
29C6:  MOVF   FA8,W
29C8:  BTFSC  x00.7
29CA:  BSF    FF2.7
29CC:  MOVWF  2D
29CE:  MOVFF  FF2,100
29D2:  BCF    FF2.7
29D4:  MOVLW  0C
29D6:  MOVWF  FA9
29D8:  BCF    FA6.6
29DA:  BCF    FA6.7
29DC:  BSF    FA6.0
29DE:  MOVF   FA8,W
29E0:  BTFSC  x00.7
29E2:  BSF    FF2.7
29E4:  MOVWF  2F
29E6:  MOVFF  FF2,100
29EA:  BCF    FF2.7
29EC:  MOVLW  0D
29EE:  MOVWF  FA9
29F0:  BCF    FA6.6
29F2:  BCF    FA6.7
29F4:  BSF    FA6.0
29F6:  MOVF   FA8,W
29F8:  BTFSC  x00.7
29FA:  BSF    FF2.7
29FC:  MOVWF  30
29FE:  MOVFF  30,2A
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
2A02:  MOVFF  FF2,100
2A06:  BCF    FF2.7
2A08:  MOVLW  19
2A0A:  MOVWF  FA9
2A0C:  BCF    FA6.6
2A0E:  BCF    FA6.7
2A10:  BSF    FA6.0
2A12:  MOVF   FA8,W
2A14:  BTFSC  x00.7
2A16:  BSF    FF2.7
2A18:  MOVWF  22
....................    Temporal=read_eeprom(26); 
2A1A:  MOVFF  FF2,100
2A1E:  BCF    FF2.7
2A20:  MOVLW  1A
2A22:  MOVWF  FA9
2A24:  BCF    FA6.6
2A26:  BCF    FA6.7
2A28:  BSF    FA6.0
2A2A:  MOVF   FA8,W
2A2C:  BTFSC  x00.7
2A2E:  BSF    FF2.7
2A30:  CLRF   x0A
2A32:  MOVWF  x09
2A34:  MOVLB  0
2A36:  CALL   0C56
2A3A:  MOVFF  03,AA
2A3E:  MOVFF  02,A9
2A42:  MOVFF  01,A8
2A46:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
2A4A:  MOVFF  AA,121
2A4E:  MOVFF  A9,120
2A52:  MOVFF  A8,11F
2A56:  MOVFF  A7,11E
2A5A:  MOVLB  1
2A5C:  CLRF   x25
2A5E:  CLRF   x24
2A60:  MOVLW  48
2A62:  MOVWF  x23
2A64:  MOVLW  85
2A66:  MOVWF  x22
2A68:  MOVLB  0
2A6A:  CALL   0C8C
2A6E:  MOVFF  03,AA
2A72:  MOVFF  02,A9
2A76:  MOVFF  01,A8
2A7A:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
2A7E:  MOVLB  1
2A80:  CLRF   x0A
2A82:  MOVFF  22,109
2A86:  MOVLB  0
2A88:  CALL   0C56
2A8C:  BCF    FD8.1
2A8E:  MOVFF  03,121
2A92:  MOVFF  02,120
2A96:  MOVFF  01,11F
2A9A:  MOVFF  00,11E
2A9E:  MOVFF  AA,125
2AA2:  MOVFF  A9,124
2AA6:  MOVFF  A8,123
2AAA:  MOVFF  A7,122
2AAE:  CALL   0DEA
2AB2:  MOVFF  03,C2
2AB6:  MOVFF  02,C1
2ABA:  MOVFF  01,C0
2ABE:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
2AC2:  MOVFF  FF2,100
2AC6:  BCF    FF2.7
2AC8:  MOVLW  28
2ACA:  MOVWF  FA9
2ACC:  BCF    FA6.6
2ACE:  BCF    FA6.7
2AD0:  BSF    FA6.0
2AD2:  MOVF   FA8,W
2AD4:  MOVLB  1
2AD6:  BTFSC  x00.7
2AD8:  BSF    FF2.7
2ADA:  MOVWF  22
....................    Temporal=read_eeprom(41); 
2ADC:  MOVFF  FF2,100
2AE0:  BCF    FF2.7
2AE2:  MOVLW  29
2AE4:  MOVWF  FA9
2AE6:  BCF    FA6.6
2AE8:  BCF    FA6.7
2AEA:  BSF    FA6.0
2AEC:  MOVF   FA8,W
2AEE:  BTFSC  x00.7
2AF0:  BSF    FF2.7
2AF2:  CLRF   x0A
2AF4:  MOVWF  x09
2AF6:  MOVLB  0
2AF8:  CALL   0C56
2AFC:  MOVFF  03,AA
2B00:  MOVFF  02,A9
2B04:  MOVFF  01,A8
2B08:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
2B0C:  MOVFF  AA,121
2B10:  MOVFF  A9,120
2B14:  MOVFF  A8,11F
2B18:  MOVFF  A7,11E
2B1C:  MOVLB  1
2B1E:  CLRF   x25
2B20:  CLRF   x24
2B22:  MOVLW  48
2B24:  MOVWF  x23
2B26:  MOVLW  85
2B28:  MOVWF  x22
2B2A:  MOVLB  0
2B2C:  CALL   0C8C
2B30:  MOVFF  03,AA
2B34:  MOVFF  02,A9
2B38:  MOVFF  01,A8
2B3C:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
2B40:  MOVLB  1
2B42:  CLRF   x0A
2B44:  MOVFF  22,109
2B48:  MOVLB  0
2B4A:  CALL   0C56
2B4E:  BCF    FD8.1
2B50:  MOVFF  03,121
2B54:  MOVFF  02,120
2B58:  MOVFF  01,11F
2B5C:  MOVFF  00,11E
2B60:  MOVFF  AA,125
2B64:  MOVFF  A9,124
2B68:  MOVFF  A8,123
2B6C:  MOVFF  A7,122
2B70:  CALL   0DEA
2B74:  MOVFF  03,45
2B78:  MOVFF  02,44
2B7C:  MOVFF  01,43
2B80:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
2B84:  MOVFF  FF2,100
2B88:  BCF    FF2.7
2B8A:  MOVLW  3C
2B8C:  MOVWF  FA9
2B8E:  BCF    FA6.6
2B90:  BCF    FA6.7
2B92:  BSF    FA6.0
2B94:  MOVF   FA8,W
2B96:  MOVLB  1
2B98:  BTFSC  x00.7
2B9A:  BSF    FF2.7
2B9C:  MOVWF  25
....................    Temporal1=read_eeprom(61); 
2B9E:  MOVFF  FF2,100
2BA2:  BCF    FF2.7
2BA4:  MOVLW  3D
2BA6:  MOVWF  FA9
2BA8:  BCF    FA6.6
2BAA:  BCF    FA6.7
2BAC:  BSF    FA6.0
2BAE:  MOVF   FA8,W
2BB0:  BTFSC  x00.7
2BB2:  BSF    FF2.7
2BB4:  CLRF   x0A
2BB6:  MOVWF  x09
2BB8:  MOVLB  0
2BBA:  CALL   0C56
2BBE:  MOVFF  03,B6
2BC2:  MOVFF  02,B5
2BC6:  MOVFF  01,B4
2BCA:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
2BCE:  MOVFF  B6,121
2BD2:  MOVFF  B5,120
2BD6:  MOVFF  B4,11F
2BDA:  MOVFF  B3,11E
2BDE:  MOVLB  1
2BE0:  CLRF   x25
2BE2:  CLRF   x24
2BE4:  MOVLW  48
2BE6:  MOVWF  x23
2BE8:  MOVLW  85
2BEA:  MOVWF  x22
2BEC:  MOVLB  0
2BEE:  CALL   0C8C
2BF2:  MOVFF  03,B6
2BF6:  MOVFF  02,B5
2BFA:  MOVFF  01,B4
2BFE:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
2C02:  MOVLB  1
2C04:  CLRF   x0A
2C06:  MOVFF  25,109
2C0A:  MOVLB  0
2C0C:  CALL   0C56
2C10:  BCF    FD8.1
2C12:  MOVFF  03,121
2C16:  MOVFF  02,120
2C1A:  MOVFF  01,11F
2C1E:  MOVFF  00,11E
2C22:  MOVFF  B6,125
2C26:  MOVFF  B5,124
2C2A:  MOVFF  B4,123
2C2E:  MOVFF  B3,122
2C32:  CALL   0DEA
2C36:  MOVFF  03,BE
2C3A:  MOVFF  02,BD
2C3E:  MOVFF  01,BC
2C42:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
2C46:  MOVFF  FF2,100
2C4A:  BCF    FF2.7
2C4C:  MOVLW  32
2C4E:  MOVWF  FA9
2C50:  BCF    FA6.6
2C52:  BCF    FA6.7
2C54:  BSF    FA6.0
2C56:  MOVF   FA8,W
2C58:  MOVLB  1
2C5A:  BTFSC  x00.7
2C5C:  BSF    FF2.7
2C5E:  MOVWF  2C
....................  
....................    MediaMovil=read_eeprom(42); 
2C60:  MOVFF  FF2,100
2C64:  BCF    FF2.7
2C66:  MOVLW  2A
2C68:  MOVWF  FA9
2C6A:  BCF    FA6.6
2C6C:  BCF    FA6.7
2C6E:  BSF    FA6.0
2C70:  MOVF   FA8,W
2C72:  BTFSC  x00.7
2C74:  BSF    FF2.7
2C76:  MOVWF  2B
....................    if(MediaMovil>12) 
2C78:  MOVF   2B,W
2C7A:  SUBLW  0C
2C7C:  BC    2C82
....................    {MediaMovil=12;} 
2C7E:  MOVLW  0C
2C80:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
2C82:  MOVF   2B,F
2C84:  BNZ   2C8A
....................    {MediaMovil=1;} 
2C86:  MOVLW  01
2C88:  MOVWF  2B
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
2C8A:  MOVFF  FF2,100
2C8E:  BCF    FF2.7
2C90:  MOVLW  46
2C92:  MOVWF  FA9
2C94:  BCF    FA6.6
2C96:  BCF    FA6.7
2C98:  BSF    FA6.0
2C9A:  MOVF   FA8,W
2C9C:  BTFSC  x00.7
2C9E:  BSF    FF2.7
2CA0:  MOVWF  31
2CA2:  MOVFF  FF2,100
2CA6:  BCF    FF2.7
2CA8:  MOVLW  47
2CAA:  MOVWF  FA9
2CAC:  BCF    FA6.6
2CAE:  BCF    FA6.7
2CB0:  BSF    FA6.0
2CB2:  MOVF   FA8,W
2CB4:  BTFSC  x00.7
2CB6:  BSF    FF2.7
2CB8:  MOVWF  32
2CBA:  MOVFF  FF2,100
2CBE:  BCF    FF2.7
2CC0:  MOVLW  48
2CC2:  MOVWF  FA9
2CC4:  BCF    FA6.6
2CC6:  BCF    FA6.7
2CC8:  BSF    FA6.0
2CCA:  MOVF   FA8,W
2CCC:  BTFSC  x00.7
2CCE:  BSF    FF2.7
2CD0:  MOVWF  33
2CD2:  MOVFF  FF2,100
2CD6:  BCF    FF2.7
2CD8:  MOVLW  49
2CDA:  MOVWF  FA9
2CDC:  BCF    FA6.6
2CDE:  BCF    FA6.7
2CE0:  BSF    FA6.0
2CE2:  MOVF   FA8,W
2CE4:  BTFSC  x00.7
2CE6:  BSF    FF2.7
2CE8:  MOVWF  01
2CEA:  BCF    35.2
2CEC:  BTFSC  01.0
2CEE:  BSF    35.2
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2CF0:  MOVF   18,F
2CF2:  BTFSS  FD8.2
2CF4:  BRA    3350
....................    flag_latencia=1;set_pwm1_duty(0); 
2CF6:  BSF    35.0
2CF8:  CLRF   FBE
....................       if(Latencia==1) 
2CFA:  BTFSS  35.1
2CFC:  BRA    2D18
2CFE:  CLRF   16
2D00:  BTFSC  FF2.7
2D02:  BSF    16.7
2D04:  BCF    FF2.7
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2D06:  MOVLW  0C
2D08:  MOVWF  x31
2D0A:  MOVLB  0
2D0C:  CALL   0286
2D10:  BTFSC  16.7
2D12:  BSF    FF2.7
2D14:  RESET
2D16:  MOVLB  1
2D18:  CLRF   16
2D1A:  BTFSC  FF2.7
2D1C:  BSF    16.7
2D1E:  BCF    FF2.7
....................          } 
....................    lcd_gotoxy(1,1); 
2D20:  MOVLW  01
2D22:  MOVWF  x32
2D24:  MOVWF  x33
2D26:  MOVLB  0
2D28:  CALL   020C
2D2C:  BTFSC  16.7
2D2E:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
2D30:  MOVLW  8A
2D32:  MOVWF  FF6
2D34:  MOVLW  05
2D36:  MOVWF  FF7
2D38:  CLRF   16
2D3A:  BTFSC  FF2.7
2D3C:  BSF    16.7
2D3E:  BCF    FF2.7
2D40:  CALL   02F2
2D44:  BTFSC  16.7
2D46:  BSF    FF2.7
2D48:  CLRF   16
2D4A:  BTFSC  FF2.7
2D4C:  BSF    16.7
2D4E:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
2D50:  MOVLW  01
2D52:  MOVLB  1
2D54:  MOVWF  x32
2D56:  MOVLW  02
2D58:  MOVWF  x33
2D5A:  MOVLB  0
2D5C:  CALL   020C
2D60:  BTFSC  16.7
2D62:  BSF    FF2.7
....................    printf(lcd_putc,"    Contraseña      "); 
2D64:  MOVLW  A0
2D66:  MOVWF  FF6
2D68:  MOVLW  05
2D6A:  MOVWF  FF7
2D6C:  CLRF   16
2D6E:  BTFSC  FF2.7
2D70:  BSF    16.7
2D72:  BCF    FF2.7
2D74:  CALL   02F2
2D78:  BTFSC  16.7
2D7A:  BSF    FF2.7
2D7C:  CLRF   16
2D7E:  BTFSC  FF2.7
2D80:  BSF    16.7
2D82:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
2D84:  MOVLW  01
2D86:  MOVLB  1
2D88:  MOVWF  x32
2D8A:  MOVLW  03
2D8C:  MOVWF  x33
2D8E:  MOVLB  0
2D90:  CALL   020C
2D94:  BTFSC  16.7
2D96:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2D98:  MOVLW  B6
2D9A:  MOVWF  FF6
2D9C:  MOVLW  05
2D9E:  MOVWF  FF7
2DA0:  MOVLW  0A
2DA2:  MOVLB  1
2DA4:  MOVWF  x08
2DA6:  MOVLB  0
2DA8:  CALL   1062
2DAC:  MOVFF  3A,100
2DB0:  MOVLW  1F
2DB2:  MOVLB  1
2DB4:  MOVWF  x01
2DB6:  MOVLB  0
2DB8:  CALL   10C4
2DBC:  MOVFF  3B,100
2DC0:  MOVLW  1F
2DC2:  MOVLB  1
2DC4:  MOVWF  x01
2DC6:  MOVLB  0
2DC8:  CALL   10C4
2DCC:  MOVFF  3C,100
2DD0:  MOVLW  1F
2DD2:  MOVLB  1
2DD4:  MOVWF  x01
2DD6:  MOVLB  0
2DD8:  CALL   10C4
2DDC:  MOVFF  3D,100
2DE0:  MOVLW  1F
2DE2:  MOVLB  1
2DE4:  MOVWF  x01
2DE6:  MOVLB  0
2DE8:  CALL   10C4
2DEC:  CLRF   16
2DEE:  BTFSC  FF2.7
2DF0:  BSF    16.7
2DF2:  BCF    FF2.7
2DF4:  MOVLW  20
2DF6:  MOVLB  1
2DF8:  MOVWF  x31
2DFA:  MOVLB  0
2DFC:  CALL   0286
2E00:  BTFSC  16.7
2E02:  BSF    FF2.7
2E04:  CLRF   16
2E06:  BTFSC  FF2.7
2E08:  BSF    16.7
2E0A:  BCF    FF2.7
2E0C:  MOVLW  20
2E0E:  MOVLB  1
2E10:  MOVWF  x31
2E12:  MOVLB  0
2E14:  CALL   0286
2E18:  BTFSC  16.7
2E1A:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2E1C:  BSF    F93.3
2E1E:  BTFSS  F81.3
2E20:  BRA    2E58
....................       {  if(Flanco == 0)  
2E22:  BTFSC  34.4
2E24:  BRA    2E56
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2E26:  MOVLW  0B
2E28:  SUBWF  1B,W
2E2A:  CLRF   03
2E2C:  ADDLW  3A
2E2E:  MOVWF  FE9
2E30:  MOVLW  00
2E32:  ADDWFC 03,W
2E34:  MOVWF  FEA
2E36:  INCF   FEF,F
2E38:  BSF    34.4
2E3A:  CLRF   16
2E3C:  BTFSC  FF2.7
2E3E:  BSF    16.7
2E40:  BCF    FF2.7
2E42:  MOVLW  1E
2E44:  MOVLB  1
2E46:  MOVWF  x32
2E48:  MOVLB  0
2E4A:  CALL   00B6
2E4E:  BTFSC  16.7
2E50:  BSF    FF2.7
2E52:  CLRF   52
2E54:  CLRF   51
....................          else 
2E56:  BRA    2E5A
....................             {Flanco = 0;} 
2E58:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2E5A:  BSF    F93.2
2E5C:  BTFSS  F81.2
2E5E:  BRA    2E96
....................       {  if(Flanco2 == 0)  
2E60:  BTFSC  34.6
2E62:  BRA    2E94
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2E64:  MOVLW  0B
2E66:  SUBWF  1B,W
2E68:  CLRF   03
2E6A:  ADDLW  3A
2E6C:  MOVWF  FE9
2E6E:  MOVLW  00
2E70:  ADDWFC 03,W
2E72:  MOVWF  FEA
2E74:  DECF   FEF,F
2E76:  BSF    34.6
2E78:  CLRF   16
2E7A:  BTFSC  FF2.7
2E7C:  BSF    16.7
2E7E:  BCF    FF2.7
2E80:  MOVLW  1E
2E82:  MOVLB  1
2E84:  MOVWF  x32
2E86:  MOVLB  0
2E88:  CALL   00B6
2E8C:  BTFSC  16.7
2E8E:  BSF    FF2.7
2E90:  CLRF   52
2E92:  CLRF   51
....................          else 
2E94:  BRA    2E98
....................             {Flanco2 = 0;} 
2E96:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2E98:  BSF    F93.0
2E9A:  BTFSS  F81.0
2E9C:  BRA    2EDC
....................       {  if(Flanco1 == 0)  
2E9E:  BTFSC  34.5
2EA0:  BRA    2EDA
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2EA2:  BSF    34.5
2EA4:  INCF   1B,F
2EA6:  CLRF   16
2EA8:  BTFSC  FF2.7
2EAA:  BSF    16.7
2EAC:  BCF    FF2.7
2EAE:  MOVLW  1E
2EB0:  MOVLB  1
2EB2:  MOVWF  x32
2EB4:  MOVLB  0
2EB6:  CALL   00B6
2EBA:  BTFSC  16.7
2EBC:  BSF    FF2.7
2EBE:  CLRF   16
2EC0:  BTFSC  FF2.7
2EC2:  BSF    16.7
2EC4:  BCF    FF2.7
2EC6:  MOVLW  0C
2EC8:  MOVLB  1
2ECA:  MOVWF  x31
2ECC:  MOVLB  0
2ECE:  CALL   0286
2ED2:  BTFSC  16.7
2ED4:  BSF    FF2.7
2ED6:  CLRF   52
2ED8:  CLRF   51
....................          else 
2EDA:  BRA    2EDE
....................             {Flanco1 = 0;}    
2EDC:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2EDE:  BSF    F93.1
2EE0:  BTFSS  F81.1
2EE2:  BRA    2F22
....................       {  if(Flanco3 == 0)  
2EE4:  BTFSC  34.7
2EE6:  BRA    2F20
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2EE8:  BSF    34.7
2EEA:  DECF   1B,F
2EEC:  CLRF   16
2EEE:  BTFSC  FF2.7
2EF0:  BSF    16.7
2EF2:  BCF    FF2.7
2EF4:  MOVLW  1E
2EF6:  MOVLB  1
2EF8:  MOVWF  x32
2EFA:  MOVLB  0
2EFC:  CALL   00B6
2F00:  BTFSC  16.7
2F02:  BSF    FF2.7
2F04:  CLRF   16
2F06:  BTFSC  FF2.7
2F08:  BSF    16.7
2F0A:  BCF    FF2.7
2F0C:  MOVLW  0C
2F0E:  MOVLB  1
2F10:  MOVWF  x31
2F12:  MOVLB  0
2F14:  CALL   0286
2F18:  BTFSC  16.7
2F1A:  BSF    FF2.7
2F1C:  CLRF   52
2F1E:  CLRF   51
....................          else 
2F20:  BRA    2F24
....................             {Flanco3 = 0;}     
2F22:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2F24:  MOVLW  0B
2F26:  SUBWF  1B,W
2F28:  CLRF   03
2F2A:  ADDLW  3A
2F2C:  MOVWF  FE9
2F2E:  MOVLW  00
2F30:  ADDWFC 03,W
2F32:  MOVWF  FEA
2F34:  BTFSC  FEF.7
2F36:  BRA    2F3A
2F38:  BRA    2F4E
....................        {clave[unidad-11]=9;} 
2F3A:  MOVLW  0B
2F3C:  SUBWF  1B,W
2F3E:  CLRF   03
2F40:  ADDLW  3A
2F42:  MOVWF  FE9
2F44:  MOVLW  00
2F46:  ADDWFC 03,W
2F48:  MOVWF  FEA
2F4A:  MOVLW  09
2F4C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2F4E:  MOVLW  0B
2F50:  SUBWF  1B,W
2F52:  CLRF   03
2F54:  ADDLW  3A
2F56:  MOVWF  FE9
2F58:  MOVLW  00
2F5A:  ADDWFC 03,W
2F5C:  MOVWF  FEA
2F5E:  BTFSC  FEF.7
2F60:  BRA    2F7A
2F62:  MOVF   FEF,W
2F64:  SUBLW  09
2F66:  BC    2F7A
....................        {clave[unidad-11]=0;} 
2F68:  MOVLW  0B
2F6A:  SUBWF  1B,W
2F6C:  CLRF   03
2F6E:  ADDLW  3A
2F70:  MOVWF  FE9
2F72:  MOVLW  00
2F74:  ADDWFC 03,W
2F76:  MOVWF  FEA
2F78:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2F7A:  MOVF   1B,W
2F7C:  SUBLW  0A
2F7E:  BNC   2F84
....................        {unidad=11;} 
2F80:  MOVLW  0B
2F82:  MOVWF  1B
2F84:  CLRF   16
2F86:  BTFSC  FF2.7
2F88:  BSF    16.7
2F8A:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2F8C:  MOVFF  1B,132
2F90:  MOVLW  04
2F92:  MOVLB  1
2F94:  MOVWF  x33
2F96:  MOVLB  0
2F98:  CALL   020C
2F9C:  BTFSC  16.7
2F9E:  BSF    FF2.7
2FA0:  CLRF   16
2FA2:  BTFSC  FF2.7
2FA4:  BSF    16.7
2FA6:  BCF    FF2.7
....................        lcd_putc(t[2]); 
2FA8:  MOVFF  39,131
2FAC:  CALL   0286
2FB0:  BTFSC  16.7
2FB2:  BSF    FF2.7
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2FB4:  MOVF   1B,W
2FB6:  SUBLW  0E
2FB8:  BTFSC  FD8.0
2FBA:  BRA    330C
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2FBC:  MOVF   3A,W
2FBE:  SUBLW  03
2FC0:  BTFSS  FD8.2
2FC2:  BRA    30DC
2FC4:  MOVF   3B,W
2FC6:  SUBLW  08
2FC8:  BTFSS  FD8.2
2FCA:  BRA    30DC
2FCC:  MOVF   3C,W
2FCE:  SUBLW  09
2FD0:  BTFSS  FD8.2
2FD2:  BRA    30DC
2FD4:  MOVF   3D,W
2FD6:  SUBLW  02
2FD8:  BTFSS  FD8.2
2FDA:  BRA    30DC
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2FDC:  CLRF   FA9
2FDE:  CLRF   FA8
2FE0:  BCF    FA6.6
2FE2:  BCF    FA6.7
2FE4:  BSF    FA6.2
2FE6:  MOVF   FF2,W
2FE8:  MOVWF  00
2FEA:  BCF    FF2.7
2FEC:  MOVLB  F
2FEE:  MOVLW  55
2FF0:  MOVWF  FA7
2FF2:  MOVLW  AA
2FF4:  MOVWF  FA7
2FF6:  BSF    FA6.1
2FF8:  BTFSC  FA6.1
2FFA:  BRA    2FF8
2FFC:  BCF    FA6.2
2FFE:  MOVF   00,W
3000:  IORWF  FF2,F
3002:  CLRF   16
3004:  BTFSC  FF2.7
3006:  BSF    16.7
3008:  BCF    FF2.7
300A:  MOVLW  14
300C:  MOVLB  1
300E:  MOVWF  x32
3010:  MOVLB  0
3012:  CALL   00B6
3016:  BTFSC  16.7
3018:  BSF    FF2.7
301A:  MOVLW  01
301C:  MOVWF  FA9
301E:  CLRF   FA8
3020:  BCF    FA6.6
3022:  BCF    FA6.7
3024:  BSF    FA6.2
3026:  MOVF   FF2,W
3028:  MOVWF  00
302A:  BCF    FF2.7
302C:  MOVLB  F
302E:  MOVLW  55
3030:  MOVWF  FA7
3032:  MOVLW  AA
3034:  MOVWF  FA7
3036:  BSF    FA6.1
3038:  BTFSC  FA6.1
303A:  BRA    3038
303C:  BCF    FA6.2
303E:  MOVF   00,W
3040:  IORWF  FF2,F
3042:  CLRF   16
3044:  BTFSC  FF2.7
3046:  BSF    16.7
3048:  BCF    FF2.7
304A:  MOVLW  14
304C:  MOVLB  1
304E:  MOVWF  x32
3050:  MOVLB  0
3052:  CALL   00B6
3056:  BTFSC  16.7
3058:  BSF    FF2.7
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
305A:  MOVLW  02
305C:  MOVWF  FA9
305E:  CLRF   FA8
3060:  BCF    FA6.6
3062:  BCF    FA6.7
3064:  BSF    FA6.2
3066:  MOVF   FF2,W
3068:  MOVWF  00
306A:  BCF    FF2.7
306C:  MOVLB  F
306E:  MOVLW  55
3070:  MOVWF  FA7
3072:  MOVLW  AA
3074:  MOVWF  FA7
3076:  BSF    FA6.1
3078:  BTFSC  FA6.1
307A:  BRA    3078
307C:  BCF    FA6.2
307E:  MOVF   00,W
3080:  IORWF  FF2,F
3082:  CLRF   16
3084:  BTFSC  FF2.7
3086:  BSF    16.7
3088:  BCF    FF2.7
308A:  MOVLW  14
308C:  MOVLB  1
308E:  MOVWF  x32
3090:  MOVLB  0
3092:  CALL   00B6
3096:  BTFSC  16.7
3098:  BSF    FF2.7
309A:  MOVLW  03
309C:  MOVWF  FA9
309E:  CLRF   FA8
30A0:  BCF    FA6.6
30A2:  BCF    FA6.7
30A4:  BSF    FA6.2
30A6:  MOVF   FF2,W
30A8:  MOVWF  00
30AA:  BCF    FF2.7
30AC:  MOVLB  F
30AE:  MOVLW  55
30B0:  MOVWF  FA7
30B2:  MOVLW  AA
30B4:  MOVWF  FA7
30B6:  BSF    FA6.1
30B8:  BTFSC  FA6.1
30BA:  BRA    30B8
30BC:  BCF    FA6.2
30BE:  MOVF   00,W
30C0:  IORWF  FF2,F
30C2:  CLRF   16
30C4:  BTFSC  FF2.7
30C6:  BSF    16.7
30C8:  BCF    FF2.7
30CA:  MOVLW  14
30CC:  MOVLB  1
30CE:  MOVWF  x32
30D0:  MOVLB  0
30D2:  CALL   00B6
30D6:  BTFSC  16.7
30D8:  BSF    FF2.7
....................              reset_cpu();} 
30DA:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
30DC:  MOVF   3E,W
30DE:  SUBWF  3A,W
30E0:  BTFSS  FD8.2
30E2:  BRA    321A
30E4:  MOVF   3F,W
30E6:  SUBWF  3B,W
30E8:  BTFSS  FD8.2
30EA:  BRA    321A
30EC:  MOVF   40,W
30EE:  SUBWF  3C,W
30F0:  BTFSS  FD8.2
30F2:  BRA    321A
30F4:  MOVF   41,W
30F6:  SUBWF  3D,W
30F8:  BTFSS  FD8.2
30FA:  BRA    321A
30FC:  CLRF   16
30FE:  BTFSC  FF2.7
3100:  BSF    16.7
3102:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
3104:  MOVLW  01
3106:  MOVLB  1
3108:  MOVWF  x32
310A:  MOVWF  x33
310C:  MOVLB  0
310E:  CALL   020C
3112:  BTFSC  16.7
3114:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
3116:  MOVLW  CC
3118:  MOVWF  FF6
311A:  MOVLW  05
311C:  MOVWF  FF7
311E:  CLRF   16
3120:  BTFSC  FF2.7
3122:  BSF    16.7
3124:  BCF    FF2.7
3126:  CALL   02F2
312A:  BTFSC  16.7
312C:  BSF    FF2.7
312E:  CLRF   16
3130:  BTFSC  FF2.7
3132:  BSF    16.7
3134:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
3136:  MOVLW  01
3138:  MOVLB  1
313A:  MOVWF  x32
313C:  MOVLW  02
313E:  MOVWF  x33
3140:  MOVLB  0
3142:  CALL   020C
3146:  BTFSC  16.7
3148:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
314A:  MOVLW  E0
314C:  MOVWF  FF6
314E:  MOVLW  05
3150:  MOVWF  FF7
3152:  CLRF   16
3154:  BTFSC  FF2.7
3156:  BSF    16.7
3158:  BCF    FF2.7
315A:  CALL   02F2
315E:  BTFSC  16.7
3160:  BSF    FF2.7
3162:  CLRF   16
3164:  BTFSC  FF2.7
3166:  BSF    16.7
3168:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
316A:  MOVLW  01
316C:  MOVLB  1
316E:  MOVWF  x32
3170:  MOVLW  03
3172:  MOVWF  x33
3174:  MOVLB  0
3176:  CALL   020C
317A:  BTFSC  16.7
317C:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta     "); 
317E:  MOVLW  F4
3180:  MOVWF  FF6
3182:  MOVLW  05
3184:  MOVWF  FF7
3186:  CLRF   16
3188:  BTFSC  FF2.7
318A:  BSF    16.7
318C:  BCF    FF2.7
318E:  CALL   02F2
3192:  BTFSC  16.7
3194:  BSF    FF2.7
3196:  CLRF   16
3198:  BTFSC  FF2.7
319A:  BSF    16.7
319C:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
319E:  MOVLW  01
31A0:  MOVLB  1
31A2:  MOVWF  x32
31A4:  MOVLW  04
31A6:  MOVWF  x33
31A8:  MOVLB  0
31AA:  CALL   020C
31AE:  BTFSC  16.7
31B0:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
31B2:  MOVLW  08
31B4:  MOVWF  FF6
31B6:  MOVLW  06
31B8:  MOVWF  FF7
31BA:  CLRF   16
31BC:  BTFSC  FF2.7
31BE:  BSF    16.7
31C0:  BCF    FF2.7
31C2:  CALL   02F2
31C6:  BTFSC  16.7
31C8:  BSF    FF2.7
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
31CA:  MOVLW  02
31CC:  MOVLB  1
31CE:  MOVWF  x00
31D0:  CLRF   16
31D2:  BTFSC  FF2.7
31D4:  BSF    16.7
31D6:  BCF    FF2.7
31D8:  MOVLW  FA
31DA:  MOVWF  x32
31DC:  MOVLB  0
31DE:  CALL   00B6
31E2:  BTFSC  16.7
31E4:  BSF    FF2.7
31E6:  MOVLB  1
31E8:  DECFSZ x00,F
31EA:  BRA    31D0
31EC:  MOVLW  14
31EE:  MOVWF  18
31F0:  MOVLW  0B
31F2:  MOVWF  1B
31F4:  CLRF   16
31F6:  BTFSC  FF2.7
31F8:  BSF    16.7
31FA:  BCF    FF2.7
31FC:  MOVLW  0C
31FE:  MOVWF  x31
3200:  MOVLB  0
3202:  CALL   0286
3206:  BTFSC  16.7
3208:  BSF    FF2.7
320A:  BSF    F8A.5
320C:  BCF    F93.5
320E:  BCF    35.0
3210:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
3212:  CLRF   52
3214:  CLRF   51
3216:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
3218:  BRA    330C
321A:  CLRF   16
321C:  BTFSC  FF2.7
321E:  BSF    16.7
3220:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
3222:  MOVLW  01
3224:  MOVLB  1
3226:  MOVWF  x32
3228:  MOVWF  x33
322A:  MOVLB  0
322C:  CALL   020C
3230:  BTFSC  16.7
3232:  BSF    FF2.7
3234:  CLRF   16
3236:  BTFSC  FF2.7
3238:  BSF    16.7
323A:  BCF    FF2.7
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
323C:  MOVLW  01
323E:  MOVLB  1
3240:  MOVWF  x32
3242:  MOVLW  02
3244:  MOVWF  x33
3246:  MOVLB  0
3248:  CALL   020C
324C:  BTFSC  16.7
324E:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
3250:  MOVLW  1C
3252:  MOVWF  FF6
3254:  MOVLW  06
3256:  MOVWF  FF7
3258:  CLRF   16
325A:  BTFSC  FF2.7
325C:  BSF    16.7
325E:  BCF    FF2.7
3260:  CALL   02F2
3264:  BTFSC  16.7
3266:  BSF    FF2.7
3268:  CLRF   16
326A:  BTFSC  FF2.7
326C:  BSF    16.7
326E:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
3270:  MOVLW  01
3272:  MOVLB  1
3274:  MOVWF  x32
3276:  MOVLW  03
3278:  MOVWF  x33
327A:  MOVLB  0
327C:  CALL   020C
3280:  BTFSC  16.7
3282:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta    "); 
3284:  MOVLW  30
3286:  MOVWF  FF6
3288:  MOVLW  06
328A:  MOVWF  FF7
328C:  CLRF   16
328E:  BTFSC  FF2.7
3290:  BSF    16.7
3292:  BCF    FF2.7
3294:  CALL   02F2
3298:  BTFSC  16.7
329A:  BSF    FF2.7
329C:  CLRF   16
329E:  BTFSC  FF2.7
32A0:  BSF    16.7
32A2:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
32A4:  MOVLW  01
32A6:  MOVLB  1
32A8:  MOVWF  x32
32AA:  MOVLW  04
32AC:  MOVWF  x33
32AE:  MOVLB  0
32B0:  CALL   020C
32B4:  BTFSC  16.7
32B6:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
32B8:  MOVLW  44
32BA:  MOVWF  FF6
32BC:  MOVLW  06
32BE:  MOVWF  FF7
32C0:  CLRF   16
32C2:  BTFSC  FF2.7
32C4:  BSF    16.7
32C6:  BCF    FF2.7
32C8:  CALL   02F2
32CC:  BTFSC  16.7
32CE:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
32D0:  MOVLW  02
32D2:  MOVLB  1
32D4:  MOVWF  x00
32D6:  CLRF   16
32D8:  BTFSC  FF2.7
32DA:  BSF    16.7
32DC:  BCF    FF2.7
32DE:  MOVLW  FA
32E0:  MOVWF  x32
32E2:  MOVLB  0
32E4:  CALL   00B6
32E8:  BTFSC  16.7
32EA:  BSF    FF2.7
32EC:  MOVLB  1
32EE:  DECFSZ x00,F
32F0:  BRA    32D6
32F2:  MOVLW  0B
32F4:  MOVWF  1B
32F6:  CLRF   16
32F8:  BTFSC  FF2.7
32FA:  BSF    16.7
32FC:  BCF    FF2.7
32FE:  MOVLW  0C
3300:  MOVWF  x31
3302:  MOVLB  0
3304:  CALL   0286
3308:  BTFSC  16.7
330A:  BSF    FF2.7
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
330C:  MOVF   1B,W
330E:  SUBLW  0B
3310:  BC    334C
3312:  MOVF   1B,W
3314:  SUBLW  0D
3316:  BNC   334C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3318:  MOVLW  01
331A:  SUBWF  1B,W
331C:  MOVLB  1
331E:  MOVWF  x00
3320:  CLRF   16
3322:  BTFSC  FF2.7
3324:  BSF    16.7
3326:  BCF    FF2.7
3328:  MOVWF  x32
332A:  MOVLW  04
332C:  MOVWF  x33
332E:  MOVLB  0
3330:  CALL   020C
3334:  BTFSC  16.7
3336:  BSF    FF2.7
3338:  CLRF   16
333A:  BTFSC  FF2.7
333C:  BSF    16.7
333E:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3340:  MOVFF  38,131
3344:  CALL   0286
3348:  BTFSC  16.7
334A:  BSF    FF2.7
....................           } 
....................  
....................    } 
334C:  MOVLB  1
334E:  BRA    2CF0
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
3350:  DECFSZ 18,W
3352:  BRA    3696
....................       if(paso<0) 
3354:  BTFSC  36.7
3356:  BRA    335A
3358:  BRA    335C
....................         {paso=0;} 
335A:  CLRF   36
335C:  CLRF   16
335E:  BTFSC  FF2.7
3360:  BSF    16.7
3362:  BCF    FF2.7
....................     
....................    lcd_gotoxy(1,1); 
3364:  MOVLW  01
3366:  MOVWF  x32
3368:  MOVWF  x33
336A:  MOVLB  0
336C:  CALL   020C
3370:  BTFSC  16.7
3372:  BSF    FF2.7
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
3374:  MOVLW  58
3376:  MOVWF  FF6
3378:  MOVLW  06
337A:  MOVWF  FF7
337C:  CLRF   16
337E:  BTFSC  FF2.7
3380:  BSF    16.7
3382:  BCF    FF2.7
3384:  CALL   02F2
3388:  BTFSC  16.7
338A:  BSF    FF2.7
....................     
....................    if(UP)//Si oprime hacia arriba 
338C:  BSF    F93.3
338E:  BTFSS  F81.3
3390:  BRA    33BC
....................       {  if(Flanco == 0)  
3392:  BTFSC  34.4
3394:  BRA    33BA
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
3396:  DECF   1E,F
3398:  DECF   1C,F
339A:  MOVLW  01
339C:  ADDWF  1C,W
339E:  MOVWF  1D
33A0:  BSF    34.4
33A2:  CLRF   16
33A4:  BTFSC  FF2.7
33A6:  BSF    16.7
33A8:  BCF    FF2.7
33AA:  MOVLW  1E
33AC:  MOVLB  1
33AE:  MOVWF  x32
33B0:  MOVLB  0
33B2:  CALL   00B6
33B6:  BTFSC  16.7
33B8:  BSF    FF2.7
....................          else 
33BA:  BRA    33BE
....................             {Flanco = 0;} 
33BC:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
33BE:  BSF    F93.2
33C0:  BTFSS  F81.2
33C2:  BRA    33EE
....................       {  if(Flanco2 == 0)  
33C4:  BTFSC  34.6
33C6:  BRA    33EC
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
33C8:  INCF   1E,F
33CA:  INCF   1C,F
33CC:  MOVLW  01
33CE:  SUBWF  1C,W
33D0:  MOVWF  1D
33D2:  BSF    34.6
33D4:  CLRF   16
33D6:  BTFSC  FF2.7
33D8:  BSF    16.7
33DA:  BCF    FF2.7
33DC:  MOVLW  1E
33DE:  MOVLB  1
33E0:  MOVWF  x32
33E2:  MOVLB  0
33E4:  CALL   00B6
33E8:  BTFSC  16.7
33EA:  BSF    FF2.7
....................          else 
33EC:  BRA    33F0
....................             {Flanco2 = 0;} 
33EE:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
33F0:  MOVF   1E,W
33F2:  SUBWF  20,W
33F4:  BC    3406
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
33F6:  INCF   36,F
33F8:  MOVFF  1E,20
33FC:  MOVLW  02
33FE:  SUBWF  20,W
3400:  MOVWF  1F
3402:  MOVLW  04
3404:  MOVWF  1C
....................          
....................         if(Flecha2<nMenuL) 
3406:  MOVF   1F,W
3408:  SUBWF  1E,W
340A:  BC    341C
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
340C:  DECF   36,F
340E:  MOVFF  1E,1F
3412:  MOVLW  02
3414:  ADDWF  1F,W
3416:  MOVWF  20
3418:  MOVLW  02
341A:  MOVWF  1C
....................          
....................         if(Flecha2>n_opcionH) 
341C:  MOVF   1E,W
341E:  SUBWF  19,W
3420:  BC    3434
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
3422:  MOVFF  1A,1E
3426:  MOVLW  02
3428:  MOVWF  1C
342A:  CLRF   36
342C:  MOVFF  1E,1F
3430:  ADDWF  1F,W
3432:  MOVWF  20
....................          
....................         if(Flecha2<n_opcionL) 
3434:  MOVF   1A,W
3436:  SUBWF  1E,W
3438:  BC    3450
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
343A:  MOVFF  19,1E
343E:  MOVLW  04
3440:  MOVWF  1C
3442:  SUBWF  19,W
3444:  MOVWF  36
3446:  MOVFF  1E,20
344A:  MOVLW  02
344C:  SUBWF  20,W
344E:  MOVWF  1F
....................          
....................         mensajes(1+paso,2); 
3450:  MOVLW  01
3452:  ADDWF  36,W
3454:  MOVLB  1
3456:  MOVWF  x00
3458:  MOVWF  x01
345A:  MOVLW  02
345C:  MOVWF  x02
345E:  MOVLB  0
3460:  CALL   11DC
....................         mensajes(2+paso,3); 
3464:  MOVLW  02
3466:  ADDWF  36,W
3468:  MOVLB  1
346A:  MOVWF  x00
346C:  MOVWF  x01
346E:  MOVLW  03
3470:  MOVWF  x02
3472:  MOVLB  0
3474:  CALL   11DC
....................         mensajes(3+paso,4); 
3478:  MOVLW  03
347A:  ADDWF  36,W
347C:  MOVLB  1
347E:  MOVWF  x00
3480:  MOVWF  x01
3482:  MOVLW  04
3484:  MOVWF  x02
3486:  MOVLB  0
3488:  CALL   11DC
348C:  CLRF   16
348E:  BTFSC  FF2.7
3490:  BSF    16.7
3492:  BCF    FF2.7
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
3494:  MOVLW  01
3496:  MOVLB  1
3498:  MOVWF  x32
349A:  MOVFF  1C,133
349E:  MOVLB  0
34A0:  CALL   020C
34A4:  BTFSC  16.7
34A6:  BSF    FF2.7
34A8:  CLRF   16
34AA:  BTFSC  FF2.7
34AC:  BSF    16.7
34AE:  BCF    FF2.7
....................         lcd_putc(t[0]); 
34B0:  MOVFF  37,131
34B4:  CALL   0286
34B8:  BTFSC  16.7
34BA:  BSF    FF2.7
....................  
....................         if(Flecha==2) 
34BC:  MOVF   1C,W
34BE:  SUBLW  02
34C0:  BNZ   3522
34C2:  CLRF   16
34C4:  BTFSC  FF2.7
34C6:  BSF    16.7
34C8:  BCF    FF2.7
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
34CA:  MOVLW  01
34CC:  MOVLB  1
34CE:  MOVWF  x32
34D0:  MOVLW  04
34D2:  MOVWF  x33
34D4:  MOVLB  0
34D6:  CALL   020C
34DA:  BTFSC  16.7
34DC:  BSF    FF2.7
34DE:  CLRF   16
34E0:  BTFSC  FF2.7
34E2:  BSF    16.7
34E4:  BCF    FF2.7
....................             lcd_putc(t[1]); 
34E6:  MOVFF  38,131
34EA:  CALL   0286
34EE:  BTFSC  16.7
34F0:  BSF    FF2.7
34F2:  CLRF   16
34F4:  BTFSC  FF2.7
34F6:  BSF    16.7
34F8:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
34FA:  MOVLW  01
34FC:  MOVLB  1
34FE:  MOVWF  x32
3500:  MOVLW  03
3502:  MOVWF  x33
3504:  MOVLB  0
3506:  CALL   020C
350A:  BTFSC  16.7
350C:  BSF    FF2.7
350E:  CLRF   16
3510:  BTFSC  FF2.7
3512:  BSF    16.7
3514:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3516:  MOVFF  38,131
351A:  CALL   0286
351E:  BTFSC  16.7
3520:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==4) 
3522:  MOVF   1C,W
3524:  SUBLW  04
3526:  BNZ   3588
3528:  CLRF   16
352A:  BTFSC  FF2.7
352C:  BSF    16.7
352E:  BCF    FF2.7
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3530:  MOVLW  01
3532:  MOVLB  1
3534:  MOVWF  x32
3536:  MOVLW  02
3538:  MOVWF  x33
353A:  MOVLB  0
353C:  CALL   020C
3540:  BTFSC  16.7
3542:  BSF    FF2.7
3544:  CLRF   16
3546:  BTFSC  FF2.7
3548:  BSF    16.7
354A:  BCF    FF2.7
....................             lcd_putc(t[1]); 
354C:  MOVFF  38,131
3550:  CALL   0286
3554:  BTFSC  16.7
3556:  BSF    FF2.7
3558:  CLRF   16
355A:  BTFSC  FF2.7
355C:  BSF    16.7
355E:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
3560:  MOVLW  01
3562:  MOVLB  1
3564:  MOVWF  x32
3566:  MOVLW  03
3568:  MOVWF  x33
356A:  MOVLB  0
356C:  CALL   020C
3570:  BTFSC  16.7
3572:  BSF    FF2.7
3574:  CLRF   16
3576:  BTFSC  FF2.7
3578:  BSF    16.7
357A:  BCF    FF2.7
....................             lcd_putc(t[1]); 
357C:  MOVFF  38,131
3580:  CALL   0286
3584:  BTFSC  16.7
3586:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==3) 
3588:  MOVF   1C,W
358A:  SUBLW  03
358C:  BNZ   35EE
358E:  CLRF   16
3590:  BTFSC  FF2.7
3592:  BSF    16.7
3594:  BCF    FF2.7
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3596:  MOVLW  01
3598:  MOVLB  1
359A:  MOVWF  x32
359C:  MOVLW  04
359E:  MOVWF  x33
35A0:  MOVLB  0
35A2:  CALL   020C
35A6:  BTFSC  16.7
35A8:  BSF    FF2.7
35AA:  CLRF   16
35AC:  BTFSC  FF2.7
35AE:  BSF    16.7
35B0:  BCF    FF2.7
....................             lcd_putc(t[1]); 
35B2:  MOVFF  38,131
35B6:  CALL   0286
35BA:  BTFSC  16.7
35BC:  BSF    FF2.7
35BE:  CLRF   16
35C0:  BTFSC  FF2.7
35C2:  BSF    16.7
35C4:  BCF    FF2.7
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
35C6:  MOVLW  01
35C8:  MOVLB  1
35CA:  MOVWF  x32
35CC:  MOVLW  02
35CE:  MOVWF  x33
35D0:  MOVLB  0
35D2:  CALL   020C
35D6:  BTFSC  16.7
35D8:  BSF    FF2.7
35DA:  CLRF   16
35DC:  BTFSC  FF2.7
35DE:  BSF    16.7
35E0:  BCF    FF2.7
....................             lcd_putc(t[1]); 
35E2:  MOVFF  38,131
35E6:  CALL   0286
35EA:  BTFSC  16.7
35EC:  BSF    FF2.7
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
35EE:  BSF    F93.0
35F0:  BTFSS  F81.0
35F2:  BRA    3648
....................       {  if(Flanco1 == 0)  
35F4:  BTFSC  34.5
35F6:  BRA    3646
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
35F8:  MOVFF  1E,18
35FC:  MOVLW  03
35FE:  MOVWF  1C
3600:  MOVLW  02
3602:  MOVLB  1
3604:  MOVWF  x00
3606:  CLRF   16
3608:  BTFSC  FF2.7
360A:  BSF    16.7
360C:  BCF    FF2.7
360E:  MOVLW  FA
3610:  MOVWF  x32
3612:  MOVLB  0
3614:  CALL   00B6
3618:  BTFSC  16.7
361A:  BSF    FF2.7
361C:  MOVLB  1
361E:  DECFSZ x00,F
3620:  BRA    3606
3622:  CLRF   16
3624:  BTFSC  FF2.7
3626:  BSF    16.7
3628:  BCF    FF2.7
362A:  MOVLW  0C
362C:  MOVWF  x31
362E:  MOVLB  0
3630:  CALL   0286
3634:  BTFSC  16.7
3636:  BSF    FF2.7
....................             if(Menu==6) 
3638:  MOVF   18,W
363A:  SUBLW  06
363C:  BNZ   3646
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
363E:  CLRF   3A
3640:  CLRF   3B
3642:  CLRF   3C
3644:  CLRF   3D
....................          else 
3646:  BRA    364A
....................             {Flanco1 = 0;}   
3648:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
364A:  BSF    F93.1
364C:  BTFSS  F81.1
364E:  BRA    3692
....................       {  if(Flanco3 == 0)  
3650:  BTFSC  34.7
3652:  BRA    3690
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
3654:  MOVLW  02
3656:  MOVLB  1
3658:  MOVWF  x00
365A:  CLRF   16
365C:  BTFSC  FF2.7
365E:  BSF    16.7
3660:  BCF    FF2.7
3662:  MOVLW  FA
3664:  MOVWF  x32
3666:  MOVLB  0
3668:  CALL   00B6
366C:  BTFSC  16.7
366E:  BSF    FF2.7
3670:  MOVLB  1
3672:  DECFSZ x00,F
3674:  BRA    365A
3676:  MOVLW  14
3678:  MOVWF  18
367A:  CLRF   16
367C:  BTFSC  FF2.7
367E:  BSF    16.7
3680:  BCF    FF2.7
3682:  MOVLW  0C
3684:  MOVWF  x31
3686:  MOVLB  0
3688:  CALL   0286
368C:  BTFSC  16.7
368E:  BSF    FF2.7
....................          else 
3690:  BRA    3694
....................             {Flanco3 = 0;}                
3692:  BCF    34.7
3694:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
3696:  MOVF   18,W
3698:  SUBLW  02
369A:  BTFSS  FD8.2
369C:  BRA    38C2
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
369E:  BTG    34.2
36A0:  BSF    34.5
36A2:  MOVLW  01
36A4:  MOVWF  18
36A6:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
36A8:  BTFSS  34.2
36AA:  BRA    377C
....................             {estadoalarma=1; 
36AC:  BSF    34.2
36AE:  CLRF   16
36B0:  BTFSC  FF2.7
36B2:  BSF    16.7
36B4:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
36B6:  MOVLW  01
36B8:  MOVWF  x32
36BA:  MOVWF  x33
36BC:  MOVLB  0
36BE:  CALL   020C
36C2:  BTFSC  16.7
36C4:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
36C6:  MOVLW  6E
36C8:  MOVWF  FF6
36CA:  MOVLW  06
36CC:  MOVWF  FF7
36CE:  CLRF   16
36D0:  BTFSC  FF2.7
36D2:  BSF    16.7
36D4:  BCF    FF2.7
36D6:  CALL   02F2
36DA:  BTFSC  16.7
36DC:  BSF    FF2.7
36DE:  CLRF   16
36E0:  BTFSC  FF2.7
36E2:  BSF    16.7
36E4:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
36E6:  MOVLW  01
36E8:  MOVLB  1
36EA:  MOVWF  x32
36EC:  MOVLW  02
36EE:  MOVWF  x33
36F0:  MOVLB  0
36F2:  CALL   020C
36F6:  BTFSC  16.7
36F8:  BSF    FF2.7
....................                printf(lcd_putc,"        Activo      "); 
36FA:  MOVLW  84
36FC:  MOVWF  FF6
36FE:  MOVLW  06
3700:  MOVWF  FF7
3702:  CLRF   16
3704:  BTFSC  FF2.7
3706:  BSF    16.7
3708:  BCF    FF2.7
370A:  CALL   02F2
370E:  BTFSC  16.7
3710:  BSF    FF2.7
3712:  CLRF   16
3714:  BTFSC  FF2.7
3716:  BSF    16.7
3718:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
371A:  MOVLW  01
371C:  MOVLB  1
371E:  MOVWF  x32
3720:  MOVLW  03
3722:  MOVWF  x33
3724:  MOVLB  0
3726:  CALL   020C
372A:  BTFSC  16.7
372C:  BSF    FF2.7
....................                printf(lcd_putc,"        Alarma      "); 
372E:  MOVLW  9A
3730:  MOVWF  FF6
3732:  MOVLW  06
3734:  MOVWF  FF7
3736:  CLRF   16
3738:  BTFSC  FF2.7
373A:  BSF    16.7
373C:  BCF    FF2.7
373E:  CALL   02F2
3742:  BTFSC  16.7
3744:  BSF    FF2.7
3746:  CLRF   16
3748:  BTFSC  FF2.7
374A:  BSF    16.7
374C:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
374E:  MOVLW  01
3750:  MOVLB  1
3752:  MOVWF  x32
3754:  MOVLW  04
3756:  MOVWF  x33
3758:  MOVLB  0
375A:  CALL   020C
375E:  BTFSC  16.7
3760:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
3762:  MOVLW  B0
3764:  MOVWF  FF6
3766:  MOVLW  06
3768:  MOVWF  FF7
376A:  CLRF   16
376C:  BTFSC  FF2.7
376E:  BSF    16.7
3770:  BCF    FF2.7
3772:  CALL   02F2
3776:  BTFSC  16.7
3778:  BSF    FF2.7
377A:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
377C:  BTFSC  34.2
377E:  BRA    3850
....................             {estadoalarma=0; 
3780:  BCF    34.2
3782:  CLRF   16
3784:  BTFSC  FF2.7
3786:  BSF    16.7
3788:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
378A:  MOVLW  01
378C:  MOVWF  x32
378E:  MOVWF  x33
3790:  MOVLB  0
3792:  CALL   020C
3796:  BTFSC  16.7
3798:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
379A:  MOVLW  C6
379C:  MOVWF  FF6
379E:  MOVLW  06
37A0:  MOVWF  FF7
37A2:  CLRF   16
37A4:  BTFSC  FF2.7
37A6:  BSF    16.7
37A8:  BCF    FF2.7
37AA:  CALL   02F2
37AE:  BTFSC  16.7
37B0:  BSF    FF2.7
37B2:  CLRF   16
37B4:  BTFSC  FF2.7
37B6:  BSF    16.7
37B8:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
37BA:  MOVLW  01
37BC:  MOVLB  1
37BE:  MOVWF  x32
37C0:  MOVLW  02
37C2:  MOVWF  x33
37C4:  MOVLB  0
37C6:  CALL   020C
37CA:  BTFSC  16.7
37CC:  BSF    FF2.7
....................                printf(lcd_putc,"      Desactivo     "); 
37CE:  MOVLW  DC
37D0:  MOVWF  FF6
37D2:  MOVLW  06
37D4:  MOVWF  FF7
37D6:  CLRF   16
37D8:  BTFSC  FF2.7
37DA:  BSF    16.7
37DC:  BCF    FF2.7
37DE:  CALL   02F2
37E2:  BTFSC  16.7
37E4:  BSF    FF2.7
37E6:  CLRF   16
37E8:  BTFSC  FF2.7
37EA:  BSF    16.7
37EC:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
37EE:  MOVLW  01
37F0:  MOVLB  1
37F2:  MOVWF  x32
37F4:  MOVLW  03
37F6:  MOVWF  x33
37F8:  MOVLB  0
37FA:  CALL   020C
37FE:  BTFSC  16.7
3800:  BSF    FF2.7
....................                printf(lcd_putc,"       Alarma       "); 
3802:  MOVLW  F2
3804:  MOVWF  FF6
3806:  MOVLW  06
3808:  MOVWF  FF7
380A:  CLRF   16
380C:  BTFSC  FF2.7
380E:  BSF    16.7
3810:  BCF    FF2.7
3812:  CALL   02F2
3816:  BTFSC  16.7
3818:  BSF    FF2.7
381A:  CLRF   16
381C:  BTFSC  FF2.7
381E:  BSF    16.7
3820:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
3822:  MOVLW  01
3824:  MOVLB  1
3826:  MOVWF  x32
3828:  MOVLW  04
382A:  MOVWF  x33
382C:  MOVLB  0
382E:  CALL   020C
3832:  BTFSC  16.7
3834:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
3836:  MOVLW  08
3838:  MOVWF  FF6
383A:  MOVLW  07
383C:  MOVWF  FF7
383E:  CLRF   16
3840:  BTFSC  FF2.7
3842:  BSF    16.7
3844:  BCF    FF2.7
3846:  CALL   02F2
384A:  BTFSC  16.7
384C:  BSF    FF2.7
384E:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3850:  MOVLW  00
3852:  BTFSC  34.2
3854:  MOVLW  01
3856:  MOVWF  x00
3858:  MOVLW  05
385A:  MOVWF  FA9
385C:  MOVFF  100,FA8
3860:  BCF    FA6.6
3862:  BCF    FA6.7
3864:  BSF    FA6.2
3866:  MOVF   FF2,W
3868:  MOVWF  00
386A:  BCF    FF2.7
386C:  MOVLB  F
386E:  MOVLW  55
3870:  MOVWF  FA7
3872:  MOVLW  AA
3874:  MOVWF  FA7
3876:  BSF    FA6.1
3878:  BTFSC  FA6.1
387A:  BRA    3878
387C:  BCF    FA6.2
387E:  MOVF   00,W
3880:  IORWF  FF2,F
3882:  MOVLW  02
3884:  MOVLB  1
3886:  MOVWF  x00
3888:  CLRF   16
388A:  BTFSC  FF2.7
388C:  BSF    16.7
388E:  BCF    FF2.7
3890:  MOVLW  FA
3892:  MOVWF  x32
3894:  MOVLB  0
3896:  CALL   00B6
389A:  BTFSC  16.7
389C:  BSF    FF2.7
389E:  MOVLB  1
38A0:  DECFSZ x00,F
38A2:  BRA    3888
38A4:  MOVLW  02
38A6:  MOVWF  1C
38A8:  MOVWF  1E
38AA:  CLRF   16
38AC:  BTFSC  FF2.7
38AE:  BSF    16.7
38B0:  BCF    FF2.7
38B2:  MOVLW  0C
38B4:  MOVWF  x31
38B6:  MOVLB  0
38B8:  CALL   0286
38BC:  BTFSC  16.7
38BE:  BSF    FF2.7
38C0:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
38C2:  MOVF   18,W
38C4:  SUBLW  03
38C6:  BTFSS  FD8.2
38C8:  BRA    3C86
38CA:  CLRF   16
38CC:  BTFSC  FF2.7
38CE:  BSF    16.7
38D0:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
38D2:  MOVLW  01
38D4:  MOVWF  x32
38D6:  MOVWF  x33
38D8:  MOVLB  0
38DA:  CALL   020C
38DE:  BTFSC  16.7
38E0:  BSF    FF2.7
....................    printf(lcd_putc,"  Duracion Actual   ");                           
38E2:  MOVLW  1E
38E4:  MOVWF  FF6
38E6:  MOVLW  07
38E8:  MOVWF  FF7
38EA:  CLRF   16
38EC:  BTFSC  FF2.7
38EE:  BSF    16.7
38F0:  BCF    FF2.7
38F2:  CALL   02F2
38F6:  BTFSC  16.7
38F8:  BSF    FF2.7
38FA:  CLRF   16
38FC:  BTFSC  FF2.7
38FE:  BSF    16.7
3900:  BCF    FF2.7
....................    lcd_gotoxy(1,2);                                                   
3902:  MOVLW  01
3904:  MOVLB  1
3906:  MOVWF  x32
3908:  MOVLW  02
390A:  MOVWF  x33
390C:  MOVLB  0
390E:  CALL   020C
3912:  BTFSC  16.7
3914:  BSF    FF2.7
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
3916:  MOVLW  34
3918:  MOVWF  FF6
391A:  MOVLW  07
391C:  MOVWF  FF7
391E:  MOVLW  09
3920:  MOVLB  1
3922:  MOVWF  x08
3924:  MOVLB  0
3926:  CALL   1062
392A:  MOVFF  33,FF
392E:  MOVLW  01
3930:  MOVLB  1
3932:  MOVWF  x00
3934:  MOVLB  0
3936:  CALL   13EC
393A:  CLRF   16
393C:  BTFSC  FF2.7
393E:  BSF    16.7
3940:  BCF    FF2.7
3942:  MOVLW  3A
3944:  MOVLB  1
3946:  MOVWF  x31
3948:  MOVLB  0
394A:  CALL   0286
394E:  BTFSC  16.7
3950:  BSF    FF2.7
3952:  MOVFF  32,FF
3956:  MOVLW  01
3958:  MOVLB  1
395A:  MOVWF  x00
395C:  MOVLB  0
395E:  CALL   13EC
3962:  CLRF   16
3964:  BTFSC  FF2.7
3966:  BSF    16.7
3968:  BCF    FF2.7
396A:  MOVLW  3A
396C:  MOVLB  1
396E:  MOVWF  x31
3970:  MOVLB  0
3972:  CALL   0286
3976:  BTFSC  16.7
3978:  BSF    FF2.7
397A:  MOVFF  31,FF
397E:  MOVLW  01
3980:  MOVLB  1
3982:  MOVWF  x00
3984:  MOVLB  0
3986:  CALL   13EC
398A:  CLRF   16
398C:  BTFSC  FF2.7
398E:  BSF    16.7
3990:  BCF    FF2.7
3992:  MOVLW  20
3994:  MOVLB  1
3996:  MOVWF  x31
3998:  MOVLB  0
399A:  CALL   0286
399E:  BTFSC  16.7
39A0:  BSF    FF2.7
....................     
....................    if(flag_filtro==1) 
39A2:  BTFSS  35.2
39A4:  BRA    39DC
39A6:  CLRF   16
39A8:  BTFSC  FF2.7
39AA:  BSF    16.7
39AC:  BCF    FF2.7
....................    { 
....................       lcd_gotoxy(1,3);                                                  
39AE:  MOVLW  01
39B0:  MOVLB  1
39B2:  MOVWF  x32
39B4:  MOVLW  03
39B6:  MOVWF  x33
39B8:  MOVLB  0
39BA:  CALL   020C
39BE:  BTFSC  16.7
39C0:  BSF    FF2.7
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
39C2:  MOVLW  4E
39C4:  MOVWF  FF6
39C6:  MOVLW  07
39C8:  MOVWF  FF7
39CA:  CLRF   16
39CC:  BTFSC  FF2.7
39CE:  BSF    16.7
39D0:  BCF    FF2.7
39D2:  CALL   02F2
39D6:  BTFSC  16.7
39D8:  BSF    FF2.7
....................    } 
....................    else 
39DA:  BRA    3A10
39DC:  CLRF   16
39DE:  BTFSC  FF2.7
39E0:  BSF    16.7
39E2:  BCF    FF2.7
....................    { 
....................       lcd_gotoxy(1,3);                                                  
39E4:  MOVLW  01
39E6:  MOVLB  1
39E8:  MOVWF  x32
39EA:  MOVLW  03
39EC:  MOVWF  x33
39EE:  MOVLB  0
39F0:  CALL   020C
39F4:  BTFSC  16.7
39F6:  BSF    FF2.7
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
39F8:  MOVLW  64
39FA:  MOVWF  FF6
39FC:  MOVLW  07
39FE:  MOVWF  FF7
3A00:  CLRF   16
3A02:  BTFSC  FF2.7
3A04:  BSF    16.7
3A06:  BCF    FF2.7
3A08:  CALL   02F2
3A0C:  BTFSC  16.7
3A0E:  BSF    FF2.7
3A10:  CLRF   16
3A12:  BTFSC  FF2.7
3A14:  BSF    16.7
3A16:  BCF    FF2.7
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
3A18:  MOVLW  01
3A1A:  MOVLB  1
3A1C:  MOVWF  x32
3A1E:  MOVLW  04
3A20:  MOVWF  x33
3A22:  MOVLB  0
3A24:  CALL   020C
3A28:  BTFSC  16.7
3A2A:  BSF    FF2.7
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
3A2C:  MOVLW  7A
3A2E:  MOVWF  FF6
3A30:  MOVLW  07
3A32:  MOVWF  FF7
3A34:  CLRF   16
3A36:  BTFSC  FF2.7
3A38:  BSF    16.7
3A3A:  BCF    FF2.7
3A3C:  CALL   02F2
3A40:  BTFSC  16.7
3A42:  BSF    FF2.7
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
3A44:  BSF    F93.3
3A46:  BTFSS  F81.3
3A48:  BRA    3BB8
3A4A:  CLRF   16
3A4C:  BTFSC  FF2.7
3A4E:  BSF    16.7
3A50:  BCF    FF2.7
....................       {  delay_ms(200); 
3A52:  MOVLW  C8
3A54:  MOVLB  1
3A56:  MOVWF  x32
3A58:  MOVLB  0
3A5A:  CALL   00B6
3A5E:  BTFSC  16.7
3A60:  BSF    FF2.7
3A62:  CLRF   16
3A64:  BTFSC  FF2.7
3A66:  BSF    16.7
3A68:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
3A6A:  MOVLW  0C
3A6C:  MOVLB  1
3A6E:  MOVWF  x31
3A70:  MOVLB  0
3A72:  CALL   0286
3A76:  BTFSC  16.7
3A78:  BSF    FF2.7
3A7A:  CLRF   16
3A7C:  BTFSC  FF2.7
3A7E:  BSF    16.7
3A80:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
3A82:  MOVLW  01
3A84:  MOVLB  1
3A86:  MOVWF  x32
3A88:  MOVLW  02
3A8A:  MOVWF  x33
3A8C:  MOVLB  0
3A8E:  CALL   020C
3A92:  BTFSC  16.7
3A94:  BSF    FF2.7
....................          printf(lcd_putc," Reset de tiempo "); 
3A96:  MOVLW  90
3A98:  MOVWF  FF6
3A9A:  MOVLW  07
3A9C:  MOVWF  FF7
3A9E:  CLRF   16
3AA0:  BTFSC  FF2.7
3AA2:  BSF    16.7
3AA4:  BCF    FF2.7
3AA6:  CALL   02F2
3AAA:  BTFSC  16.7
3AAC:  BSF    FF2.7
3AAE:  CLRF   16
3AB0:  BTFSC  FF2.7
3AB2:  BSF    16.7
3AB4:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
3AB6:  MOVLW  01
3AB8:  MOVLB  1
3ABA:  MOVWF  x32
3ABC:  MOVLW  03
3ABE:  MOVWF  x33
3AC0:  MOVLB  0
3AC2:  CALL   020C
3AC6:  BTFSC  16.7
3AC8:  BSF    FF2.7
....................          printf(lcd_putc,"     Exitoso     "); 
3ACA:  MOVLW  A2
3ACC:  MOVWF  FF6
3ACE:  MOVLW  07
3AD0:  MOVWF  FF7
3AD2:  CLRF   16
3AD4:  BTFSC  FF2.7
3AD6:  BSF    16.7
3AD8:  BCF    FF2.7
3ADA:  CALL   02F2
3ADE:  BTFSC  16.7
3AE0:  BSF    FF2.7
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
3AE2:  MOVLW  46
3AE4:  MOVWF  FA9
3AE6:  CLRF   FA8
3AE8:  BCF    FA6.6
3AEA:  BCF    FA6.7
3AEC:  BSF    FA6.2
3AEE:  MOVF   FF2,W
3AF0:  MOVWF  00
3AF2:  BCF    FF2.7
3AF4:  MOVLB  F
3AF6:  MOVLW  55
3AF8:  MOVWF  FA7
3AFA:  MOVLW  AA
3AFC:  MOVWF  FA7
3AFE:  BSF    FA6.1
3B00:  BTFSC  FA6.1
3B02:  BRA    3B00
3B04:  BCF    FA6.2
3B06:  MOVF   00,W
3B08:  IORWF  FF2,F
3B0A:  MOVLW  47
3B0C:  MOVWF  FA9
3B0E:  CLRF   FA8
3B10:  BCF    FA6.6
3B12:  BCF    FA6.7
3B14:  BSF    FA6.2
3B16:  MOVF   FF2,W
3B18:  MOVWF  00
3B1A:  BCF    FF2.7
3B1C:  MOVLW  55
3B1E:  MOVWF  FA7
3B20:  MOVLW  AA
3B22:  MOVWF  FA7
3B24:  BSF    FA6.1
3B26:  BTFSC  FA6.1
3B28:  BRA    3B26
3B2A:  BCF    FA6.2
3B2C:  MOVF   00,W
3B2E:  IORWF  FF2,F
3B30:  MOVLW  48
3B32:  MOVWF  FA9
3B34:  CLRF   FA8
3B36:  BCF    FA6.6
3B38:  BCF    FA6.7
3B3A:  BSF    FA6.2
3B3C:  MOVF   FF2,W
3B3E:  MOVWF  00
3B40:  BCF    FF2.7
3B42:  MOVLW  55
3B44:  MOVWF  FA7
3B46:  MOVLW  AA
3B48:  MOVWF  FA7
3B4A:  BSF    FA6.1
3B4C:  BTFSC  FA6.1
3B4E:  BRA    3B4C
3B50:  BCF    FA6.2
3B52:  MOVF   00,W
3B54:  IORWF  FF2,F
....................          delay_ms(700); 
3B56:  MOVLW  04
3B58:  MOVLB  1
3B5A:  MOVWF  x00
3B5C:  CLRF   16
3B5E:  BTFSC  FF2.7
3B60:  BSF    16.7
3B62:  BCF    FF2.7
3B64:  MOVLW  AF
3B66:  MOVWF  x32
3B68:  MOVLB  0
3B6A:  CALL   00B6
3B6E:  BTFSC  16.7
3B70:  BSF    FF2.7
3B72:  MOVLB  1
3B74:  DECFSZ x00,F
3B76:  BRA    3B5C
....................          segundos=0;minutos=0;horas=0; 
3B78:  CLRF   31
3B7A:  CLRF   32
3B7C:  CLRF   33
3B7E:  CLRF   16
3B80:  BTFSC  FF2.7
3B82:  BSF    16.7
3B84:  BCF    FF2.7
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3B86:  MOVLW  1E
3B88:  MOVWF  x32
3B8A:  MOVLB  0
3B8C:  CALL   00B6
3B90:  BTFSC  16.7
3B92:  BSF    FF2.7
3B94:  MOVLW  01
3B96:  MOVWF  18
3B98:  CLRF   36
3B9A:  MOVLW  02
3B9C:  MOVWF  1C
3B9E:  MOVWF  1E
3BA0:  CLRF   16
3BA2:  BTFSC  FF2.7
3BA4:  BSF    16.7
3BA6:  BCF    FF2.7
3BA8:  MOVLW  0C
3BAA:  MOVLB  1
3BAC:  MOVWF  x31
3BAE:  MOVLB  0
3BB0:  CALL   0286
3BB4:  BTFSC  16.7
3BB6:  BSF    FF2.7
....................       } 
....................        
....................       if(RIGHT) 
3BB8:  BSF    F93.0
3BBA:  BTFSS  F81.0
3BBC:  BRA    3C38
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
3BBE:  BTG    35.2
3BC0:  MOVLW  00
3BC2:  BTFSC  35.2
3BC4:  MOVLW  01
3BC6:  MOVLB  1
3BC8:  MOVWF  x00
3BCA:  MOVLW  49
3BCC:  MOVWF  FA9
3BCE:  MOVFF  100,FA8
3BD2:  BCF    FA6.6
3BD4:  BCF    FA6.7
3BD6:  BSF    FA6.2
3BD8:  MOVF   FF2,W
3BDA:  MOVWF  00
3BDC:  BCF    FF2.7
3BDE:  MOVLB  F
3BE0:  MOVLW  55
3BE2:  MOVWF  FA7
3BE4:  MOVLW  AA
3BE6:  MOVWF  FA7
3BE8:  BSF    FA6.1
3BEA:  BTFSC  FA6.1
3BEC:  BRA    3BEA
3BEE:  BCF    FA6.2
3BF0:  MOVF   00,W
3BF2:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3BF4:  MOVLW  02
3BF6:  MOVLB  1
3BF8:  MOVWF  x00
3BFA:  CLRF   16
3BFC:  BTFSC  FF2.7
3BFE:  BSF    16.7
3C00:  BCF    FF2.7
3C02:  MOVLW  FA
3C04:  MOVWF  x32
3C06:  MOVLB  0
3C08:  CALL   00B6
3C0C:  BTFSC  16.7
3C0E:  BSF    FF2.7
3C10:  MOVLB  1
3C12:  DECFSZ x00,F
3C14:  BRA    3BFA
3C16:  MOVLW  01
3C18:  MOVWF  18
3C1A:  CLRF   36
3C1C:  MOVLW  02
3C1E:  MOVWF  1C
3C20:  MOVWF  1E
3C22:  CLRF   16
3C24:  BTFSC  FF2.7
3C26:  BSF    16.7
3C28:  BCF    FF2.7
3C2A:  MOVLW  0C
3C2C:  MOVWF  x31
3C2E:  MOVLB  0
3C30:  CALL   0286
3C34:  BTFSC  16.7
3C36:  BSF    FF2.7
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
3C38:  BSF    F93.1
3C3A:  BTFSS  F81.1
3C3C:  BRA    3C82
....................       {  if(Flanco3 == 0)  
3C3E:  BTFSC  34.7
3C40:  BRA    3C80
....................             {Flanco3 = 1;delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
3C42:  BSF    34.7
3C44:  CLRF   16
3C46:  BTFSC  FF2.7
3C48:  BSF    16.7
3C4A:  BCF    FF2.7
3C4C:  MOVLW  1E
3C4E:  MOVLB  1
3C50:  MOVWF  x32
3C52:  MOVLB  0
3C54:  CALL   00B6
3C58:  BTFSC  16.7
3C5A:  BSF    FF2.7
3C5C:  MOVLW  01
3C5E:  MOVWF  18
3C60:  CLRF   36
3C62:  MOVLW  02
3C64:  MOVWF  1C
3C66:  MOVWF  1E
3C68:  CLRF   16
3C6A:  BTFSC  FF2.7
3C6C:  BSF    16.7
3C6E:  BCF    FF2.7
3C70:  MOVLW  0C
3C72:  MOVLB  1
3C74:  MOVWF  x31
3C76:  MOVLB  0
3C78:  CALL   0286
3C7C:  BTFSC  16.7
3C7E:  BSF    FF2.7
....................          else 
3C80:  BRA    3C84
....................             {Flanco3 = 0;}       
3C82:  BCF    34.7
3C84:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
3C86:  MOVF   18,W
3C88:  SUBLW  04
3C8A:  BTFSS  FD8.2
3C8C:  BRA    4022
3C8E:  CLRF   16
3C90:  BTFSC  FF2.7
3C92:  BSF    16.7
3C94:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
3C96:  MOVLW  01
3C98:  MOVWF  x32
3C9A:  MOVLW  02
3C9C:  MOVWF  x33
3C9E:  MOVLB  0
3CA0:  CALL   020C
3CA4:  BTFSC  16.7
3CA6:  BSF    FF2.7
....................    printf(lcd_putc,"      Setpoint      "); 
3CA8:  MOVLW  B4
3CAA:  MOVWF  FF6
3CAC:  MOVLW  07
3CAE:  MOVWF  FF7
3CB0:  CLRF   16
3CB2:  BTFSC  FF2.7
3CB4:  BSF    16.7
3CB6:  BCF    FF2.7
3CB8:  CALL   02F2
3CBC:  BTFSC  16.7
3CBE:  BSF    FF2.7
3CC0:  CLRF   16
3CC2:  BTFSC  FF2.7
3CC4:  BSF    16.7
3CC6:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
3CC8:  MOVLW  01
3CCA:  MOVLB  1
3CCC:  MOVWF  x32
3CCE:  MOVLW  03
3CD0:  MOVWF  x33
3CD2:  MOVLB  0
3CD4:  CALL   020C
3CD8:  BTFSC  16.7
3CDA:  BSF    FF2.7
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
3CDC:  MOVLW  CA
3CDE:  MOVWF  FF6
3CE0:  MOVLW  07
3CE2:  MOVWF  FF7
3CE4:  MOVLW  07
3CE6:  MOVLB  1
3CE8:  MOVWF  x08
3CEA:  MOVLB  0
3CEC:  CALL   1062
3CF0:  MOVLW  89
3CF2:  MOVWF  FE9
3CF4:  MOVFF  45,10B
3CF8:  MOVFF  44,10A
3CFC:  MOVFF  43,109
3D00:  MOVFF  42,108
3D04:  MOVLW  02
3D06:  MOVLB  1
3D08:  MOVWF  x0C
3D0A:  MOVLB  0
3D0C:  CALL   164A
3D10:  CLRF   16
3D12:  BTFSC  FF2.7
3D14:  BSF    16.7
3D16:  BCF    FF2.7
3D18:  MOVLW  20
3D1A:  MOVLB  1
3D1C:  MOVWF  x31
3D1E:  MOVLB  0
3D20:  CALL   0286
3D24:  BTFSC  16.7
3D26:  BSF    FF2.7
3D28:  CLRF   16
3D2A:  BTFSC  FF2.7
3D2C:  BSF    16.7
3D2E:  BCF    FF2.7
3D30:  MOVLW  20
3D32:  MOVLB  1
3D34:  MOVWF  x31
3D36:  MOVLB  0
3D38:  CALL   0286
3D3C:  BTFSC  16.7
3D3E:  BSF    FF2.7
3D40:  CLRF   16
3D42:  BTFSC  FF2.7
3D44:  BSF    16.7
3D46:  BCF    FF2.7
3D48:  MOVLW  20
3D4A:  MOVLB  1
3D4C:  MOVWF  x31
3D4E:  MOVLB  0
3D50:  CALL   0286
3D54:  BTFSC  16.7
3D56:  BSF    FF2.7
....................     
....................    if(setpoint>2.0) 
3D58:  MOVLB  1
3D5A:  CLRF   x1D
3D5C:  CLRF   x1C
3D5E:  CLRF   x1B
3D60:  MOVLW  80
3D62:  MOVWF  x1A
3D64:  MOVFF  45,121
3D68:  MOVFF  44,120
3D6C:  MOVFF  43,11F
3D70:  MOVFF  42,11E
3D74:  MOVLB  0
3D76:  CALL   182C
3D7A:  BNC   3D86
....................    {setpoint=2.0;} 
3D7C:  CLRF   45
3D7E:  CLRF   44
3D80:  CLRF   43
3D82:  MOVLW  80
3D84:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
3D86:  MOVFF  45,11D
3D8A:  MOVFF  44,11C
3D8E:  MOVFF  43,11B
3D92:  MOVFF  42,11A
3D96:  MOVLB  1
3D98:  CLRF   x21
3D9A:  CLRF   x20
3D9C:  CLRF   x1F
3D9E:  MOVLW  7E
3DA0:  MOVWF  x1E
3DA2:  MOVLB  0
3DA4:  CALL   182C
3DA8:  BNC   3DB4
....................    {setpoint=0.5;} 
3DAA:  CLRF   45
3DAC:  CLRF   44
3DAE:  CLRF   43
3DB0:  MOVLW  7E
3DB2:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
3DB4:  BSF    F93.3
3DB6:  BTFSS  F81.3
3DB8:  BRA    3E14
....................       {  if(Flanco == 0)  
3DBA:  BTFSC  34.4
3DBC:  BRA    3E12
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
3DBE:  BCF    FD8.1
3DC0:  MOVFF  45,121
3DC4:  MOVFF  44,120
3DC8:  MOVFF  43,11F
3DCC:  MOVFF  42,11E
3DD0:  MOVLW  CD
3DD2:  MOVLB  1
3DD4:  MOVWF  x25
3DD6:  MOVLW  CC
3DD8:  MOVWF  x24
3DDA:  MOVLW  4C
3DDC:  MOVWF  x23
3DDE:  MOVLW  7B
3DE0:  MOVWF  x22
3DE2:  MOVLB  0
3DE4:  CALL   0DEA
3DE8:  MOVFF  03,45
3DEC:  MOVFF  02,44
3DF0:  MOVFF  01,43
3DF4:  MOVFF  00,42
3DF8:  BSF    34.4
3DFA:  CLRF   16
3DFC:  BTFSC  FF2.7
3DFE:  BSF    16.7
3E00:  BCF    FF2.7
3E02:  MOVLW  1E
3E04:  MOVLB  1
3E06:  MOVWF  x32
3E08:  MOVLB  0
3E0A:  CALL   00B6
3E0E:  BTFSC  16.7
3E10:  BSF    FF2.7
....................          else 
3E12:  BRA    3E16
....................             {Flanco = 0;} 
3E14:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3E16:  BSF    F93.2
3E18:  BTFSS  F81.2
3E1A:  BRA    3E76
....................       {  if(Flanco2 == 0)  
3E1C:  BTFSC  34.6
3E1E:  BRA    3E74
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
3E20:  BSF    FD8.1
3E22:  MOVFF  45,121
3E26:  MOVFF  44,120
3E2A:  MOVFF  43,11F
3E2E:  MOVFF  42,11E
3E32:  MOVLW  CD
3E34:  MOVLB  1
3E36:  MOVWF  x25
3E38:  MOVLW  CC
3E3A:  MOVWF  x24
3E3C:  MOVLW  4C
3E3E:  MOVWF  x23
3E40:  MOVLW  7B
3E42:  MOVWF  x22
3E44:  MOVLB  0
3E46:  CALL   0DEA
3E4A:  MOVFF  03,45
3E4E:  MOVFF  02,44
3E52:  MOVFF  01,43
3E56:  MOVFF  00,42
3E5A:  BSF    34.6
3E5C:  CLRF   16
3E5E:  BTFSC  FF2.7
3E60:  BSF    16.7
3E62:  BCF    FF2.7
3E64:  MOVLW  1E
3E66:  MOVLB  1
3E68:  MOVWF  x32
3E6A:  MOVLB  0
3E6C:  CALL   00B6
3E70:  BTFSC  16.7
3E72:  BSF    FF2.7
....................          else 
3E74:  BRA    3E78
....................             {Flanco2 = 0;} 
3E76:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3E78:  BSF    F93.0
3E7A:  BTFSS  F81.0
3E7C:  BRA    3FD0
....................       {  if(Flanco1 == 0)  
3E7E:  BTFSC  34.5
3E80:  BRA    3FCE
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3E82:  MOVLW  01
3E84:  MOVWF  18
3E86:  CLRF   36
3E88:  MOVLW  02
3E8A:  MOVWF  1C
3E8C:  MOVWF  1E
3E8E:  MOVLW  0B
3E90:  MOVWF  1B
3E92:  CLRF   16
3E94:  BTFSC  FF2.7
3E96:  BSF    16.7
3E98:  BCF    FF2.7
3E9A:  MOVLW  1E
3E9C:  MOVLB  1
3E9E:  MOVWF  x32
3EA0:  MOVLB  0
3EA2:  CALL   00B6
3EA6:  BTFSC  16.7
3EA8:  BSF    FF2.7
3EAA:  CLRF   16
3EAC:  BTFSC  FF2.7
3EAE:  BSF    16.7
3EB0:  BCF    FF2.7
3EB2:  MOVLW  0C
3EB4:  MOVLB  1
3EB6:  MOVWF  x31
3EB8:  MOVLB  0
3EBA:  CALL   0286
3EBE:  BTFSC  16.7
3EC0:  BSF    FF2.7
....................             Temporal=setpoint; 
3EC2:  MOVFF  45,AA
3EC6:  MOVFF  44,A9
3ECA:  MOVFF  43,A8
3ECE:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
3ED2:  MOVFF  45,102
3ED6:  MOVFF  44,101
3EDA:  MOVFF  43,100
3EDE:  MOVFF  42,FF
3EE2:  CALL   18A6
3EE6:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
3EEA:  MOVLB  1
3EEC:  CLRF   x0A
3EEE:  MOVFF  22,109
3EF2:  MOVLB  0
3EF4:  CALL   0C56
3EF8:  BSF    FD8.1
3EFA:  MOVFF  AA,121
3EFE:  MOVFF  A9,120
3F02:  MOVFF  A8,11F
3F06:  MOVFF  A7,11E
3F0A:  MOVFF  03,125
3F0E:  MOVFF  02,124
3F12:  MOVFF  01,123
3F16:  MOVFF  00,122
3F1A:  CALL   0DEA
3F1E:  MOVFF  03,AA
3F22:  MOVFF  02,A9
3F26:  MOVFF  01,A8
3F2A:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
3F2E:  MOVFF  AA,11D
3F32:  MOVFF  A9,11C
3F36:  MOVFF  A8,11B
3F3A:  MOVFF  A7,11A
3F3E:  MOVLB  1
3F40:  CLRF   x21
3F42:  CLRF   x20
3F44:  MOVLW  48
3F46:  MOVWF  x1F
3F48:  MOVLW  85
3F4A:  MOVWF  x1E
3F4C:  MOVLB  0
3F4E:  CALL   1490
3F52:  MOVFF  03,AE
3F56:  MOVFF  02,AD
3F5A:  MOVFF  01,AC
3F5E:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
3F62:  MOVFF  AE,102
3F66:  MOVFF  AD,101
3F6A:  MOVFF  AC,100
3F6E:  MOVFF  AB,FF
3F72:  CALL   18A6
3F76:  MOVFF  01,24
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
3F7A:  MOVLW  28
3F7C:  MOVWF  FA9
3F7E:  MOVFF  22,FA8
3F82:  BCF    FA6.6
3F84:  BCF    FA6.7
3F86:  BSF    FA6.2
3F88:  MOVF   FF2,W
3F8A:  MOVWF  00
3F8C:  BCF    FF2.7
3F8E:  MOVLB  F
3F90:  MOVLW  55
3F92:  MOVWF  FA7
3F94:  MOVLW  AA
3F96:  MOVWF  FA7
3F98:  BSF    FA6.1
3F9A:  BTFSC  FA6.1
3F9C:  BRA    3F9A
3F9E:  BCF    FA6.2
3FA0:  MOVF   00,W
3FA2:  IORWF  FF2,F
3FA4:  MOVLW  29
3FA6:  MOVWF  FA9
3FA8:  MOVFF  24,FA8
3FAC:  BCF    FA6.6
3FAE:  BCF    FA6.7
3FB0:  BSF    FA6.2
3FB2:  MOVF   FF2,W
3FB4:  MOVWF  00
3FB6:  BCF    FF2.7
3FB8:  MOVLW  55
3FBA:  MOVWF  FA7
3FBC:  MOVLW  AA
3FBE:  MOVWF  FA7
3FC0:  BSF    FA6.1
3FC2:  BTFSC  FA6.1
3FC4:  BRA    3FC2
3FC6:  BCF    FA6.2
3FC8:  MOVF   00,W
3FCA:  IORWF  FF2,F
3FCC:  MOVLB  0
....................             }} 
....................          else 
3FCE:  BRA    3FD2
....................             {Flanco1 = 0;}    
3FD0:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3FD2:  BSF    F93.1
3FD4:  BTFSS  F81.1
3FD6:  BRA    401E
....................       {  if(Flanco3 == 0)  
3FD8:  BTFSC  34.7
3FDA:  BRA    401C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
3FDC:  MOVLW  01
3FDE:  MOVWF  18
3FE0:  CLRF   36
3FE2:  MOVLW  02
3FE4:  MOVWF  1C
3FE6:  MOVWF  1E
3FE8:  MOVLW  0B
3FEA:  MOVWF  1B
3FEC:  CLRF   16
3FEE:  BTFSC  FF2.7
3FF0:  BSF    16.7
3FF2:  BCF    FF2.7
3FF4:  MOVLW  1E
3FF6:  MOVLB  1
3FF8:  MOVWF  x32
3FFA:  MOVLB  0
3FFC:  CALL   00B6
4000:  BTFSC  16.7
4002:  BSF    FF2.7
4004:  CLRF   16
4006:  BTFSC  FF2.7
4008:  BSF    16.7
400A:  BCF    FF2.7
400C:  MOVLW  0C
400E:  MOVLB  1
4010:  MOVWF  x31
4012:  MOVLB  0
4014:  CALL   0286
4018:  BTFSC  16.7
401A:  BSF    FF2.7
....................          else 
401C:  BRA    4020
....................             {Flanco3 = 0;}     
401E:  BCF    34.7
4020:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
4022:  MOVF   18,W
4024:  SUBLW  05
4026:  BTFSS  FD8.2
4028:  BRA    454E
402A:  CLRF   16
402C:  BTFSC  FF2.7
402E:  BSF    16.7
4030:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
4032:  MOVLW  01
4034:  MOVWF  x32
4036:  MOVWF  x33
4038:  MOVLB  0
403A:  CALL   020C
403E:  BTFSC  16.7
4040:  BSF    FF2.7
....................    printf(lcd_putc,"      Ingrese       "); 
4042:  MOVLW  DA
4044:  MOVWF  FF6
4046:  MOVLW  07
4048:  MOVWF  FF7
404A:  CLRF   16
404C:  BTFSC  FF2.7
404E:  BSF    16.7
4050:  BCF    FF2.7
4052:  CALL   02F2
4056:  BTFSC  16.7
4058:  BSF    FF2.7
405A:  CLRF   16
405C:  BTFSC  FF2.7
405E:  BSF    16.7
4060:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
4062:  MOVLW  01
4064:  MOVLB  1
4066:  MOVWF  x32
4068:  MOVLW  02
406A:  MOVWF  x33
406C:  MOVLB  0
406E:  CALL   020C
4072:  BTFSC  16.7
4074:  BSF    FF2.7
....................    printf(lcd_putc," Contraseña Actual  "); 
4076:  MOVLW  F0
4078:  MOVWF  FF6
407A:  MOVLW  07
407C:  MOVWF  FF7
407E:  CLRF   16
4080:  BTFSC  FF2.7
4082:  BSF    16.7
4084:  BCF    FF2.7
4086:  CALL   02F2
408A:  BTFSC  16.7
408C:  BSF    FF2.7
408E:  CLRF   16
4090:  BTFSC  FF2.7
4092:  BSF    16.7
4094:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4096:  MOVLW  01
4098:  MOVLB  1
409A:  MOVWF  x32
409C:  MOVLW  03
409E:  MOVWF  x33
40A0:  MOVLB  0
40A2:  CALL   020C
40A6:  BTFSC  16.7
40A8:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
40AA:  MOVLW  06
40AC:  MOVWF  FF6
40AE:  MOVLW  08
40B0:  MOVWF  FF7
40B2:  MOVLW  0A
40B4:  MOVLB  1
40B6:  MOVWF  x08
40B8:  MOVLB  0
40BA:  CALL   1062
40BE:  MOVFF  3A,100
40C2:  MOVLW  1F
40C4:  MOVLB  1
40C6:  MOVWF  x01
40C8:  MOVLB  0
40CA:  CALL   10C4
40CE:  MOVFF  3B,100
40D2:  MOVLW  1F
40D4:  MOVLB  1
40D6:  MOVWF  x01
40D8:  MOVLB  0
40DA:  CALL   10C4
40DE:  MOVFF  3C,100
40E2:  MOVLW  1F
40E4:  MOVLB  1
40E6:  MOVWF  x01
40E8:  MOVLB  0
40EA:  CALL   10C4
40EE:  MOVFF  3D,100
40F2:  MOVLW  1F
40F4:  MOVLB  1
40F6:  MOVWF  x01
40F8:  MOVLB  0
40FA:  CALL   10C4
40FE:  CLRF   16
4100:  BTFSC  FF2.7
4102:  BSF    16.7
4104:  BCF    FF2.7
4106:  MOVLW  20
4108:  MOVLB  1
410A:  MOVWF  x31
410C:  MOVLB  0
410E:  CALL   0286
4112:  BTFSC  16.7
4114:  BSF    FF2.7
4116:  CLRF   16
4118:  BTFSC  FF2.7
411A:  BSF    16.7
411C:  BCF    FF2.7
411E:  MOVLW  20
4120:  MOVLB  1
4122:  MOVWF  x31
4124:  MOVLB  0
4126:  CALL   0286
412A:  BTFSC  16.7
412C:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
412E:  BSF    F93.3
4130:  BTFSS  F81.3
4132:  BRA    4166
....................       {  if(Flanco == 0)  
4134:  BTFSC  34.4
4136:  BRA    4164
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
4138:  MOVLW  0B
413A:  SUBWF  1B,W
413C:  CLRF   03
413E:  ADDLW  3A
4140:  MOVWF  FE9
4142:  MOVLW  00
4144:  ADDWFC 03,W
4146:  MOVWF  FEA
4148:  INCF   FEF,F
414A:  BSF    34.4
414C:  CLRF   16
414E:  BTFSC  FF2.7
4150:  BSF    16.7
4152:  BCF    FF2.7
4154:  MOVLW  1E
4156:  MOVLB  1
4158:  MOVWF  x32
415A:  MOVLB  0
415C:  CALL   00B6
4160:  BTFSC  16.7
4162:  BSF    FF2.7
....................          else 
4164:  BRA    4168
....................             {Flanco = 0;} 
4166:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4168:  BSF    F93.2
416A:  BTFSS  F81.2
416C:  BRA    41A0
....................       {  if(Flanco2 == 0)  
416E:  BTFSC  34.6
4170:  BRA    419E
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
4172:  MOVLW  0B
4174:  SUBWF  1B,W
4176:  CLRF   03
4178:  ADDLW  3A
417A:  MOVWF  FE9
417C:  MOVLW  00
417E:  ADDWFC 03,W
4180:  MOVWF  FEA
4182:  DECF   FEF,F
4184:  BSF    34.6
4186:  CLRF   16
4188:  BTFSC  FF2.7
418A:  BSF    16.7
418C:  BCF    FF2.7
418E:  MOVLW  1E
4190:  MOVLB  1
4192:  MOVWF  x32
4194:  MOVLB  0
4196:  CALL   00B6
419A:  BTFSC  16.7
419C:  BSF    FF2.7
....................          else 
419E:  BRA    41A2
....................             {Flanco2 = 0;} 
41A0:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
41A2:  BSF    F93.0
41A4:  BTFSS  F81.0
41A6:  BRA    41E2
....................       {  if(Flanco1 == 0)  
41A8:  BTFSC  34.5
41AA:  BRA    41E0
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
41AC:  BSF    34.5
41AE:  INCF   1B,F
41B0:  CLRF   16
41B2:  BTFSC  FF2.7
41B4:  BSF    16.7
41B6:  BCF    FF2.7
41B8:  MOVLW  1E
41BA:  MOVLB  1
41BC:  MOVWF  x32
41BE:  MOVLB  0
41C0:  CALL   00B6
41C4:  BTFSC  16.7
41C6:  BSF    FF2.7
41C8:  CLRF   16
41CA:  BTFSC  FF2.7
41CC:  BSF    16.7
41CE:  BCF    FF2.7
41D0:  MOVLW  0C
41D2:  MOVLB  1
41D4:  MOVWF  x31
41D6:  MOVLB  0
41D8:  CALL   0286
41DC:  BTFSC  16.7
41DE:  BSF    FF2.7
....................          else 
41E0:  BRA    41E4
....................             {Flanco1 = 0;}    
41E2:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
41E4:  BSF    F93.1
41E6:  BTFSS  F81.1
41E8:  BRA    4224
....................       {  if(Flanco3 == 0)  
41EA:  BTFSC  34.7
41EC:  BRA    4222
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
41EE:  BSF    34.7
41F0:  DECF   1B,F
41F2:  CLRF   16
41F4:  BTFSC  FF2.7
41F6:  BSF    16.7
41F8:  BCF    FF2.7
41FA:  MOVLW  1E
41FC:  MOVLB  1
41FE:  MOVWF  x32
4200:  MOVLB  0
4202:  CALL   00B6
4206:  BTFSC  16.7
4208:  BSF    FF2.7
420A:  CLRF   16
420C:  BTFSC  FF2.7
420E:  BSF    16.7
4210:  BCF    FF2.7
4212:  MOVLW  0C
4214:  MOVLB  1
4216:  MOVWF  x31
4218:  MOVLB  0
421A:  CALL   0286
421E:  BTFSC  16.7
4220:  BSF    FF2.7
....................          else 
4222:  BRA    4226
....................             {Flanco3 = 0;}     
4224:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
4226:  MOVLW  0B
4228:  SUBWF  1B,W
422A:  CLRF   03
422C:  ADDLW  3A
422E:  MOVWF  FE9
4230:  MOVLW  00
4232:  ADDWFC 03,W
4234:  MOVWF  FEA
4236:  BTFSC  FEF.7
4238:  BRA    423C
423A:  BRA    4250
....................        {clave[unidad-11]=9;} 
423C:  MOVLW  0B
423E:  SUBWF  1B,W
4240:  CLRF   03
4242:  ADDLW  3A
4244:  MOVWF  FE9
4246:  MOVLW  00
4248:  ADDWFC 03,W
424A:  MOVWF  FEA
424C:  MOVLW  09
424E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
4250:  MOVLW  0B
4252:  SUBWF  1B,W
4254:  CLRF   03
4256:  ADDLW  3A
4258:  MOVWF  FE9
425A:  MOVLW  00
425C:  ADDWFC 03,W
425E:  MOVWF  FEA
4260:  BTFSC  FEF.7
4262:  BRA    427C
4264:  MOVF   FEF,W
4266:  SUBLW  09
4268:  BC    427C
....................        {clave[unidad-11]=0;} 
426A:  MOVLW  0B
426C:  SUBWF  1B,W
426E:  CLRF   03
4270:  ADDLW  3A
4272:  MOVWF  FE9
4274:  MOVLW  00
4276:  ADDWFC 03,W
4278:  MOVWF  FEA
427A:  CLRF   FEF
....................        if(unidad<11) 
427C:  MOVF   1B,W
427E:  SUBLW  0A
4280:  BNC   4292
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
4282:  MOVLW  01
4284:  MOVWF  18
4286:  CLRF   36
4288:  MOVLW  02
428A:  MOVWF  1C
428C:  MOVWF  1E
428E:  MOVLW  0B
4290:  MOVWF  1B
4292:  CLRF   16
4294:  BTFSC  FF2.7
4296:  BSF    16.7
4298:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
429A:  MOVFF  1B,132
429E:  MOVLW  04
42A0:  MOVLB  1
42A2:  MOVWF  x33
42A4:  MOVLB  0
42A6:  CALL   020C
42AA:  BTFSC  16.7
42AC:  BSF    FF2.7
42AE:  CLRF   16
42B0:  BTFSC  FF2.7
42B2:  BSF    16.7
42B4:  BCF    FF2.7
....................        lcd_putc(t[2]); 
42B6:  MOVFF  39,131
42BA:  CALL   0286
42BE:  BTFSC  16.7
42C0:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
42C2:  MOVF   1B,W
42C4:  SUBLW  0E
42C6:  BTFSC  FD8.0
42C8:  BRA    450C
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
42CA:  MOVF   3E,W
42CC:  SUBWF  3A,W
42CE:  BTFSS  FD8.2
42D0:  BRA    4402
42D2:  MOVF   3F,W
42D4:  SUBWF  3B,W
42D6:  BTFSS  FD8.2
42D8:  BRA    4402
42DA:  MOVF   40,W
42DC:  SUBWF  3C,W
42DE:  BTFSS  FD8.2
42E0:  BRA    4402
42E2:  MOVF   41,W
42E4:  SUBWF  3D,W
42E6:  BTFSS  FD8.2
42E8:  BRA    4402
42EA:  CLRF   16
42EC:  BTFSC  FF2.7
42EE:  BSF    16.7
42F0:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
42F2:  MOVLW  01
42F4:  MOVLB  1
42F6:  MOVWF  x32
42F8:  MOVWF  x33
42FA:  MOVLB  0
42FC:  CALL   020C
4300:  BTFSC  16.7
4302:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
4304:  MOVLW  1C
4306:  MOVWF  FF6
4308:  MOVLW  08
430A:  MOVWF  FF7
430C:  CLRF   16
430E:  BTFSC  FF2.7
4310:  BSF    16.7
4312:  BCF    FF2.7
4314:  CALL   02F2
4318:  BTFSC  16.7
431A:  BSF    FF2.7
431C:  CLRF   16
431E:  BTFSC  FF2.7
4320:  BSF    16.7
4322:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
4324:  MOVLW  01
4326:  MOVLB  1
4328:  MOVWF  x32
432A:  MOVLW  02
432C:  MOVWF  x33
432E:  MOVLB  0
4330:  CALL   020C
4334:  BTFSC  16.7
4336:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
4338:  MOVLW  32
433A:  MOVWF  FF6
433C:  MOVLW  08
433E:  MOVWF  FF7
4340:  CLRF   16
4342:  BTFSC  FF2.7
4344:  BSF    16.7
4346:  BCF    FF2.7
4348:  CALL   02F2
434C:  BTFSC  16.7
434E:  BSF    FF2.7
4350:  CLRF   16
4352:  BTFSC  FF2.7
4354:  BSF    16.7
4356:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
4358:  MOVLW  01
435A:  MOVLB  1
435C:  MOVWF  x32
435E:  MOVLW  03
4360:  MOVWF  x33
4362:  MOVLB  0
4364:  CALL   020C
4368:  BTFSC  16.7
436A:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta      "); 
436C:  MOVLW  48
436E:  MOVWF  FF6
4370:  MOVLW  08
4372:  MOVWF  FF7
4374:  CLRF   16
4376:  BTFSC  FF2.7
4378:  BSF    16.7
437A:  BCF    FF2.7
437C:  CALL   02F2
4380:  BTFSC  16.7
4382:  BSF    FF2.7
4384:  CLRF   16
4386:  BTFSC  FF2.7
4388:  BSF    16.7
438A:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
438C:  MOVLW  01
438E:  MOVLB  1
4390:  MOVWF  x32
4392:  MOVLW  04
4394:  MOVWF  x33
4396:  MOVLB  0
4398:  CALL   020C
439C:  BTFSC  16.7
439E:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
43A0:  MOVLW  5E
43A2:  MOVWF  FF6
43A4:  MOVLW  08
43A6:  MOVWF  FF7
43A8:  CLRF   16
43AA:  BTFSC  FF2.7
43AC:  BSF    16.7
43AE:  BCF    FF2.7
43B0:  CALL   02F2
43B4:  BTFSC  16.7
43B6:  BSF    FF2.7
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
43B8:  MOVLW  02
43BA:  MOVLB  1
43BC:  MOVWF  x00
43BE:  CLRF   16
43C0:  BTFSC  FF2.7
43C2:  BSF    16.7
43C4:  BCF    FF2.7
43C6:  MOVLW  FA
43C8:  MOVWF  x32
43CA:  MOVLB  0
43CC:  CALL   00B6
43D0:  BTFSC  16.7
43D2:  BSF    FF2.7
43D4:  MOVLB  1
43D6:  DECFSZ x00,F
43D8:  BRA    43BE
43DA:  MOVLW  33
43DC:  MOVWF  18
43DE:  MOVLW  0B
43E0:  MOVWF  1B
43E2:  CLRF   16
43E4:  BTFSC  FF2.7
43E6:  BSF    16.7
43E8:  BCF    FF2.7
43EA:  MOVLW  0C
43EC:  MOVWF  x31
43EE:  MOVLB  0
43F0:  CALL   0286
43F4:  BTFSC  16.7
43F6:  BSF    FF2.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
43F8:  CLRF   3A
43FA:  CLRF   3B
43FC:  CLRF   3C
43FE:  CLRF   3D
....................          else 
4400:  BRA    450C
4402:  CLRF   16
4404:  BTFSC  FF2.7
4406:  BSF    16.7
4408:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
440A:  MOVLW  01
440C:  MOVLB  1
440E:  MOVWF  x32
4410:  MOVWF  x33
4412:  MOVLB  0
4414:  CALL   020C
4418:  BTFSC  16.7
441A:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
441C:  MOVLW  74
441E:  MOVWF  FF6
4420:  MOVLW  08
4422:  MOVWF  FF7
4424:  CLRF   16
4426:  BTFSC  FF2.7
4428:  BSF    16.7
442A:  BCF    FF2.7
442C:  CALL   02F2
4430:  BTFSC  16.7
4432:  BSF    FF2.7
4434:  CLRF   16
4436:  BTFSC  FF2.7
4438:  BSF    16.7
443A:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
443C:  MOVLW  01
443E:  MOVLB  1
4440:  MOVWF  x32
4442:  MOVLW  02
4444:  MOVWF  x33
4446:  MOVLB  0
4448:  CALL   020C
444C:  BTFSC  16.7
444E:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
4450:  MOVLW  8A
4452:  MOVWF  FF6
4454:  MOVLW  08
4456:  MOVWF  FF7
4458:  CLRF   16
445A:  BTFSC  FF2.7
445C:  BSF    16.7
445E:  BCF    FF2.7
4460:  CALL   02F2
4464:  BTFSC  16.7
4466:  BSF    FF2.7
4468:  CLRF   16
446A:  BTFSC  FF2.7
446C:  BSF    16.7
446E:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
4470:  MOVLW  01
4472:  MOVLB  1
4474:  MOVWF  x32
4476:  MOVLW  03
4478:  MOVWF  x33
447A:  MOVLB  0
447C:  CALL   020C
4480:  BTFSC  16.7
4482:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta     "); 
4484:  MOVLW  A0
4486:  MOVWF  FF6
4488:  MOVLW  08
448A:  MOVWF  FF7
448C:  CLRF   16
448E:  BTFSC  FF2.7
4490:  BSF    16.7
4492:  BCF    FF2.7
4494:  CALL   02F2
4498:  BTFSC  16.7
449A:  BSF    FF2.7
449C:  CLRF   16
449E:  BTFSC  FF2.7
44A0:  BSF    16.7
44A2:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
44A4:  MOVLW  01
44A6:  MOVLB  1
44A8:  MOVWF  x32
44AA:  MOVLW  04
44AC:  MOVWF  x33
44AE:  MOVLB  0
44B0:  CALL   020C
44B4:  BTFSC  16.7
44B6:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
44B8:  MOVLW  B6
44BA:  MOVWF  FF6
44BC:  MOVLW  08
44BE:  MOVWF  FF7
44C0:  CLRF   16
44C2:  BTFSC  FF2.7
44C4:  BSF    16.7
44C6:  BCF    FF2.7
44C8:  CALL   02F2
44CC:  BTFSC  16.7
44CE:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
44D0:  MOVLW  02
44D2:  MOVLB  1
44D4:  MOVWF  x00
44D6:  CLRF   16
44D8:  BTFSC  FF2.7
44DA:  BSF    16.7
44DC:  BCF    FF2.7
44DE:  MOVLW  FA
44E0:  MOVWF  x32
44E2:  MOVLB  0
44E4:  CALL   00B6
44E8:  BTFSC  16.7
44EA:  BSF    FF2.7
44EC:  MOVLB  1
44EE:  DECFSZ x00,F
44F0:  BRA    44D6
44F2:  MOVLW  0B
44F4:  MOVWF  1B
44F6:  CLRF   16
44F8:  BTFSC  FF2.7
44FA:  BSF    16.7
44FC:  BCF    FF2.7
44FE:  MOVLW  0C
4500:  MOVWF  x31
4502:  MOVLB  0
4504:  CALL   0286
4508:  BTFSC  16.7
450A:  BSF    FF2.7
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
450C:  MOVF   1B,W
450E:  SUBLW  0B
4510:  BC    454C
4512:  MOVF   1B,W
4514:  SUBLW  0D
4516:  BNC   454C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
4518:  MOVLW  01
451A:  SUBWF  1B,W
451C:  MOVLB  1
451E:  MOVWF  x00
4520:  CLRF   16
4522:  BTFSC  FF2.7
4524:  BSF    16.7
4526:  BCF    FF2.7
4528:  MOVWF  x32
452A:  MOVLW  04
452C:  MOVWF  x33
452E:  MOVLB  0
4530:  CALL   020C
4534:  BTFSC  16.7
4536:  BSF    FF2.7
4538:  CLRF   16
453A:  BTFSC  FF2.7
453C:  BSF    16.7
453E:  BCF    FF2.7
....................             lcd_putc(t[1]); 
4540:  MOVFF  38,131
4544:  CALL   0286
4548:  BTFSC  16.7
454A:  BSF    FF2.7
454C:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
454E:  MOVF   18,W
4550:  SUBLW  33
4552:  BTFSS  FD8.2
4554:  BRA    4A34
4556:  CLRF   16
4558:  BTFSC  FF2.7
455A:  BSF    16.7
455C:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
455E:  MOVLW  01
4560:  MOVWF  x32
4562:  MOVWF  x33
4564:  MOVLB  0
4566:  CALL   020C
456A:  BTFSC  16.7
456C:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
456E:  MOVLW  CC
4570:  MOVWF  FF6
4572:  MOVLW  08
4574:  MOVWF  FF7
4576:  CLRF   16
4578:  BTFSC  FF2.7
457A:  BSF    16.7
457C:  BCF    FF2.7
457E:  CALL   02F2
4582:  BTFSC  16.7
4584:  BSF    FF2.7
4586:  CLRF   16
4588:  BTFSC  FF2.7
458A:  BSF    16.7
458C:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
458E:  MOVLW  01
4590:  MOVLB  1
4592:  MOVWF  x32
4594:  MOVLW  02
4596:  MOVWF  x33
4598:  MOVLB  0
459A:  CALL   020C
459E:  BTFSC  16.7
45A0:  BSF    FF2.7
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
45A2:  MOVLW  E2
45A4:  MOVWF  FF6
45A6:  MOVLW  08
45A8:  MOVWF  FF7
45AA:  CLRF   16
45AC:  BTFSC  FF2.7
45AE:  BSF    16.7
45B0:  BCF    FF2.7
45B2:  CALL   02F2
45B6:  BTFSC  16.7
45B8:  BSF    FF2.7
45BA:  CLRF   16
45BC:  BTFSC  FF2.7
45BE:  BSF    16.7
45C0:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
45C2:  MOVLW  01
45C4:  MOVLB  1
45C6:  MOVWF  x32
45C8:  MOVLW  03
45CA:  MOVWF  x33
45CC:  MOVLB  0
45CE:  CALL   020C
45D2:  BTFSC  16.7
45D4:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
45D6:  MOVLW  F8
45D8:  MOVWF  FF6
45DA:  MOVLW  08
45DC:  MOVWF  FF7
45DE:  MOVLW  0A
45E0:  MOVLB  1
45E2:  MOVWF  x08
45E4:  MOVLB  0
45E6:  CALL   1062
45EA:  MOVFF  3A,100
45EE:  MOVLW  1F
45F0:  MOVLB  1
45F2:  MOVWF  x01
45F4:  MOVLB  0
45F6:  CALL   10C4
45FA:  MOVFF  3B,100
45FE:  MOVLW  1F
4600:  MOVLB  1
4602:  MOVWF  x01
4604:  MOVLB  0
4606:  CALL   10C4
460A:  MOVFF  3C,100
460E:  MOVLW  1F
4610:  MOVLB  1
4612:  MOVWF  x01
4614:  MOVLB  0
4616:  CALL   10C4
461A:  MOVFF  3D,100
461E:  MOVLW  1F
4620:  MOVLB  1
4622:  MOVWF  x01
4624:  MOVLB  0
4626:  CALL   10C4
462A:  CLRF   16
462C:  BTFSC  FF2.7
462E:  BSF    16.7
4630:  BCF    FF2.7
4632:  MOVLW  20
4634:  MOVLB  1
4636:  MOVWF  x31
4638:  MOVLB  0
463A:  CALL   0286
463E:  BTFSC  16.7
4640:  BSF    FF2.7
4642:  CLRF   16
4644:  BTFSC  FF2.7
4646:  BSF    16.7
4648:  BCF    FF2.7
464A:  MOVLW  20
464C:  MOVLB  1
464E:  MOVWF  x31
4650:  MOVLB  0
4652:  CALL   0286
4656:  BTFSC  16.7
4658:  BSF    FF2.7
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
465A:  BSF    F93.3
465C:  BTFSS  F81.3
465E:  BRA    4692
....................       {  if(Flanco == 0)  
4660:  BTFSC  34.4
4662:  BRA    4690
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
4664:  MOVLW  0B
4666:  SUBWF  1B,W
4668:  CLRF   03
466A:  ADDLW  3A
466C:  MOVWF  FE9
466E:  MOVLW  00
4670:  ADDWFC 03,W
4672:  MOVWF  FEA
4674:  INCF   FEF,F
4676:  BSF    34.4
4678:  CLRF   16
467A:  BTFSC  FF2.7
467C:  BSF    16.7
467E:  BCF    FF2.7
4680:  MOVLW  1E
4682:  MOVLB  1
4684:  MOVWF  x32
4686:  MOVLB  0
4688:  CALL   00B6
468C:  BTFSC  16.7
468E:  BSF    FF2.7
....................          else 
4690:  BRA    4694
....................             {Flanco = 0;} 
4692:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4694:  BSF    F93.2
4696:  BTFSS  F81.2
4698:  BRA    46CC
....................       {  if(Flanco2 == 0)  
469A:  BTFSC  34.6
469C:  BRA    46CA
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
469E:  MOVLW  0B
46A0:  SUBWF  1B,W
46A2:  CLRF   03
46A4:  ADDLW  3A
46A6:  MOVWF  FE9
46A8:  MOVLW  00
46AA:  ADDWFC 03,W
46AC:  MOVWF  FEA
46AE:  DECF   FEF,F
46B0:  BSF    34.6
46B2:  CLRF   16
46B4:  BTFSC  FF2.7
46B6:  BSF    16.7
46B8:  BCF    FF2.7
46BA:  MOVLW  1E
46BC:  MOVLB  1
46BE:  MOVWF  x32
46C0:  MOVLB  0
46C2:  CALL   00B6
46C6:  BTFSC  16.7
46C8:  BSF    FF2.7
....................          else 
46CA:  BRA    46CE
....................             {Flanco2 = 0;} 
46CC:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
46CE:  BSF    F93.0
46D0:  BTFSS  F81.0
46D2:  BRA    470E
....................       {  if(Flanco1 == 0)  
46D4:  BTFSC  34.5
46D6:  BRA    470C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
46D8:  BSF    34.5
46DA:  INCF   1B,F
46DC:  CLRF   16
46DE:  BTFSC  FF2.7
46E0:  BSF    16.7
46E2:  BCF    FF2.7
46E4:  MOVLW  1E
46E6:  MOVLB  1
46E8:  MOVWF  x32
46EA:  MOVLB  0
46EC:  CALL   00B6
46F0:  BTFSC  16.7
46F2:  BSF    FF2.7
46F4:  CLRF   16
46F6:  BTFSC  FF2.7
46F8:  BSF    16.7
46FA:  BCF    FF2.7
46FC:  MOVLW  0C
46FE:  MOVLB  1
4700:  MOVWF  x31
4702:  MOVLB  0
4704:  CALL   0286
4708:  BTFSC  16.7
470A:  BSF    FF2.7
....................          else 
470C:  BRA    4710
....................             {Flanco1 = 0;}    
470E:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4710:  BSF    F93.1
4712:  BTFSS  F81.1
4714:  BRA    4750
....................       {  if(Flanco3 == 0)  
4716:  BTFSC  34.7
4718:  BRA    474E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
471A:  BSF    34.7
471C:  DECF   1B,F
471E:  CLRF   16
4720:  BTFSC  FF2.7
4722:  BSF    16.7
4724:  BCF    FF2.7
4726:  MOVLW  1E
4728:  MOVLB  1
472A:  MOVWF  x32
472C:  MOVLB  0
472E:  CALL   00B6
4732:  BTFSC  16.7
4734:  BSF    FF2.7
4736:  CLRF   16
4738:  BTFSC  FF2.7
473A:  BSF    16.7
473C:  BCF    FF2.7
473E:  MOVLW  0C
4740:  MOVLB  1
4742:  MOVWF  x31
4744:  MOVLB  0
4746:  CALL   0286
474A:  BTFSC  16.7
474C:  BSF    FF2.7
....................          else 
474E:  BRA    4752
....................             {Flanco3 = 0;}     
4750:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
4752:  MOVLW  0B
4754:  SUBWF  1B,W
4756:  CLRF   03
4758:  ADDLW  3A
475A:  MOVWF  FE9
475C:  MOVLW  00
475E:  ADDWFC 03,W
4760:  MOVWF  FEA
4762:  BTFSC  FEF.7
4764:  BRA    4768
4766:  BRA    477C
....................        {clave[unidad-11]=9;} 
4768:  MOVLW  0B
476A:  SUBWF  1B,W
476C:  CLRF   03
476E:  ADDLW  3A
4770:  MOVWF  FE9
4772:  MOVLW  00
4774:  ADDWFC 03,W
4776:  MOVWF  FEA
4778:  MOVLW  09
477A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
477C:  MOVLW  0B
477E:  SUBWF  1B,W
4780:  CLRF   03
4782:  ADDLW  3A
4784:  MOVWF  FE9
4786:  MOVLW  00
4788:  ADDWFC 03,W
478A:  MOVWF  FEA
478C:  BTFSC  FEF.7
478E:  BRA    47A8
4790:  MOVF   FEF,W
4792:  SUBLW  09
4794:  BC    47A8
....................        {clave[unidad-11]=0;} 
4796:  MOVLW  0B
4798:  SUBWF  1B,W
479A:  CLRF   03
479C:  ADDLW  3A
479E:  MOVWF  FE9
47A0:  MOVLW  00
47A2:  ADDWFC 03,W
47A4:  MOVWF  FEA
47A6:  CLRF   FEF
....................        if(unidad<11) 
47A8:  MOVF   1B,W
47AA:  SUBLW  0A
47AC:  BNC   47B6
....................        {Menu=5;unidad=11;} 
47AE:  MOVLW  05
47B0:  MOVWF  18
47B2:  MOVLW  0B
47B4:  MOVWF  1B
47B6:  CLRF   16
47B8:  BTFSC  FF2.7
47BA:  BSF    16.7
47BC:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
47BE:  MOVFF  1B,132
47C2:  MOVLW  04
47C4:  MOVLB  1
47C6:  MOVWF  x33
47C8:  MOVLB  0
47CA:  CALL   020C
47CE:  BTFSC  16.7
47D0:  BSF    FF2.7
47D2:  CLRF   16
47D4:  BTFSC  FF2.7
47D6:  BSF    16.7
47D8:  BCF    FF2.7
....................        lcd_putc(t[2]); 
47DA:  MOVFF  39,131
47DE:  CALL   0286
47E2:  BTFSC  16.7
47E4:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
47E6:  MOVF   1B,W
47E8:  SUBLW  0E
47EA:  BTFSC  FD8.0
47EC:  BRA    49F2
47EE:  CLRF   16
47F0:  BTFSC  FF2.7
47F2:  BSF    16.7
47F4:  BCF    FF2.7
....................        { 
....................             lcd_gotoxy(1,1); 
47F6:  MOVLW  01
47F8:  MOVLB  1
47FA:  MOVWF  x32
47FC:  MOVWF  x33
47FE:  MOVLB  0
4800:  CALL   020C
4804:  BTFSC  16.7
4806:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
4808:  MOVLW  0E
480A:  MOVWF  FF6
480C:  MOVLW  09
480E:  MOVWF  FF7
4810:  CLRF   16
4812:  BTFSC  FF2.7
4814:  BSF    16.7
4816:  BCF    FF2.7
4818:  CALL   02F2
481C:  BTFSC  16.7
481E:  BSF    FF2.7
4820:  CLRF   16
4822:  BTFSC  FF2.7
4824:  BSF    16.7
4826:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
4828:  MOVLW  01
482A:  MOVLB  1
482C:  MOVWF  x32
482E:  MOVLW  02
4830:  MOVWF  x33
4832:  MOVLB  0
4834:  CALL   020C
4838:  BTFSC  16.7
483A:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
483C:  MOVLW  24
483E:  MOVWF  FF6
4840:  MOVLW  09
4842:  MOVWF  FF7
4844:  CLRF   16
4846:  BTFSC  FF2.7
4848:  BSF    16.7
484A:  BCF    FF2.7
484C:  CALL   02F2
4850:  BTFSC  16.7
4852:  BSF    FF2.7
4854:  CLRF   16
4856:  BTFSC  FF2.7
4858:  BSF    16.7
485A:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
485C:  MOVLW  01
485E:  MOVLB  1
4860:  MOVWF  x32
4862:  MOVLW  03
4864:  MOVWF  x33
4866:  MOVLB  0
4868:  CALL   020C
486C:  BTFSC  16.7
486E:  BSF    FF2.7
....................             printf(lcd_putc,"     Almacenada     "); 
4870:  MOVLW  3A
4872:  MOVWF  FF6
4874:  MOVLW  09
4876:  MOVWF  FF7
4878:  CLRF   16
487A:  BTFSC  FF2.7
487C:  BSF    16.7
487E:  BCF    FF2.7
4880:  CALL   02F2
4884:  BTFSC  16.7
4886:  BSF    FF2.7
4888:  CLRF   16
488A:  BTFSC  FF2.7
488C:  BSF    16.7
488E:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
4890:  MOVLW  01
4892:  MOVLB  1
4894:  MOVWF  x32
4896:  MOVLW  04
4898:  MOVWF  x33
489A:  MOVLB  0
489C:  CALL   020C
48A0:  BTFSC  16.7
48A2:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
48A4:  MOVLW  50
48A6:  MOVWF  FF6
48A8:  MOVLW  09
48AA:  MOVWF  FF7
48AC:  CLRF   16
48AE:  BTFSC  FF2.7
48B0:  BSF    16.7
48B2:  BCF    FF2.7
48B4:  CALL   02F2
48B8:  BTFSC  16.7
48BA:  BSF    FF2.7
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
48BC:  CLRF   FA9
48BE:  MOVFF  3A,FA8
48C2:  BCF    FA6.6
48C4:  BCF    FA6.7
48C6:  BSF    FA6.2
48C8:  MOVF   FF2,W
48CA:  MOVWF  00
48CC:  BCF    FF2.7
48CE:  MOVLB  F
48D0:  MOVLW  55
48D2:  MOVWF  FA7
48D4:  MOVLW  AA
48D6:  MOVWF  FA7
48D8:  BSF    FA6.1
48DA:  BTFSC  FA6.1
48DC:  BRA    48DA
48DE:  BCF    FA6.2
48E0:  MOVF   00,W
48E2:  IORWF  FF2,F
48E4:  CLRF   16
48E6:  BTFSC  FF2.7
48E8:  BSF    16.7
48EA:  BCF    FF2.7
48EC:  MOVLW  14
48EE:  MOVLB  1
48F0:  MOVWF  x32
48F2:  MOVLB  0
48F4:  CALL   00B6
48F8:  BTFSC  16.7
48FA:  BSF    FF2.7
48FC:  MOVLW  01
48FE:  MOVWF  FA9
4900:  MOVFF  3B,FA8
4904:  BCF    FA6.6
4906:  BCF    FA6.7
4908:  BSF    FA6.2
490A:  MOVF   FF2,W
490C:  MOVWF  00
490E:  BCF    FF2.7
4910:  MOVLB  F
4912:  MOVLW  55
4914:  MOVWF  FA7
4916:  MOVLW  AA
4918:  MOVWF  FA7
491A:  BSF    FA6.1
491C:  BTFSC  FA6.1
491E:  BRA    491C
4920:  BCF    FA6.2
4922:  MOVF   00,W
4924:  IORWF  FF2,F
4926:  CLRF   16
4928:  BTFSC  FF2.7
492A:  BSF    16.7
492C:  BCF    FF2.7
492E:  MOVLW  14
4930:  MOVLB  1
4932:  MOVWF  x32
4934:  MOVLB  0
4936:  CALL   00B6
493A:  BTFSC  16.7
493C:  BSF    FF2.7
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
493E:  MOVLW  02
4940:  MOVWF  FA9
4942:  MOVFF  3C,FA8
4946:  BCF    FA6.6
4948:  BCF    FA6.7
494A:  BSF    FA6.2
494C:  MOVF   FF2,W
494E:  MOVWF  00
4950:  BCF    FF2.7
4952:  MOVLB  F
4954:  MOVLW  55
4956:  MOVWF  FA7
4958:  MOVLW  AA
495A:  MOVWF  FA7
495C:  BSF    FA6.1
495E:  BTFSC  FA6.1
4960:  BRA    495E
4962:  BCF    FA6.2
4964:  MOVF   00,W
4966:  IORWF  FF2,F
4968:  CLRF   16
496A:  BTFSC  FF2.7
496C:  BSF    16.7
496E:  BCF    FF2.7
4970:  MOVLW  14
4972:  MOVLB  1
4974:  MOVWF  x32
4976:  MOVLB  0
4978:  CALL   00B6
497C:  BTFSC  16.7
497E:  BSF    FF2.7
4980:  MOVLW  03
4982:  MOVWF  FA9
4984:  MOVFF  3D,FA8
4988:  BCF    FA6.6
498A:  BCF    FA6.7
498C:  BSF    FA6.2
498E:  MOVF   FF2,W
4990:  MOVWF  00
4992:  BCF    FF2.7
4994:  MOVLB  F
4996:  MOVLW  55
4998:  MOVWF  FA7
499A:  MOVLW  AA
499C:  MOVWF  FA7
499E:  BSF    FA6.1
49A0:  BTFSC  FA6.1
49A2:  BRA    49A0
49A4:  BCF    FA6.2
49A6:  MOVF   00,W
49A8:  IORWF  FF2,F
49AA:  CLRF   16
49AC:  BTFSC  FF2.7
49AE:  BSF    16.7
49B0:  BCF    FF2.7
49B2:  MOVLW  14
49B4:  MOVLB  1
49B6:  MOVWF  x32
49B8:  MOVLB  0
49BA:  CALL   00B6
49BE:  BTFSC  16.7
49C0:  BSF    FF2.7
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
49C2:  MOVLW  02
49C4:  MOVLB  1
49C6:  MOVWF  x00
49C8:  CLRF   16
49CA:  BTFSC  FF2.7
49CC:  BSF    16.7
49CE:  BCF    FF2.7
49D0:  MOVLW  FA
49D2:  MOVWF  x32
49D4:  MOVLB  0
49D6:  CALL   00B6
49DA:  BTFSC  16.7
49DC:  BSF    FF2.7
49DE:  MOVLB  1
49E0:  DECFSZ x00,F
49E2:  BRA    49C8
49E4:  MOVLW  01
49E6:  MOVWF  18
49E8:  CLRF   36
49EA:  MOVLW  02
49EC:  MOVWF  1C
49EE:  MOVWF  1E
49F0:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
49F2:  MOVF   1B,W
49F4:  SUBLW  0B
49F6:  BC    4A32
49F8:  MOVF   1B,W
49FA:  SUBLW  0D
49FC:  BNC   4A32
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
49FE:  MOVLW  01
4A00:  SUBWF  1B,W
4A02:  MOVLB  1
4A04:  MOVWF  x00
4A06:  CLRF   16
4A08:  BTFSC  FF2.7
4A0A:  BSF    16.7
4A0C:  BCF    FF2.7
4A0E:  MOVWF  x32
4A10:  MOVLW  04
4A12:  MOVWF  x33
4A14:  MOVLB  0
4A16:  CALL   020C
4A1A:  BTFSC  16.7
4A1C:  BSF    FF2.7
4A1E:  CLRF   16
4A20:  BTFSC  FF2.7
4A22:  BSF    16.7
4A24:  BCF    FF2.7
....................             lcd_putc(t[1]); 
4A26:  MOVFF  38,131
4A2A:  CALL   0286
4A2E:  BTFSC  16.7
4A30:  BSF    FF2.7
4A32:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
4A34:  MOVF   18,W
4A36:  SUBLW  06
4A38:  BTFSS  FD8.2
4A3A:  BRA    4C2A
4A3C:  CLRF   16
4A3E:  BTFSC  FF2.7
4A40:  BSF    16.7
4A42:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,2); 
4A44:  MOVLW  01
4A46:  MOVWF  x32
4A48:  MOVLW  02
4A4A:  MOVWF  x33
4A4C:  MOVLB  0
4A4E:  CALL   020C
4A52:  BTFSC  16.7
4A54:  BSF    FF2.7
....................    printf(lcd_putc,"     Media Movil    "); 
4A56:  MOVLW  66
4A58:  MOVWF  FF6
4A5A:  MOVLW  09
4A5C:  MOVWF  FF7
4A5E:  CLRF   16
4A60:  BTFSC  FF2.7
4A62:  BSF    16.7
4A64:  BCF    FF2.7
4A66:  CALL   02F2
4A6A:  BTFSC  16.7
4A6C:  BSF    FF2.7
4A6E:  CLRF   16
4A70:  BTFSC  FF2.7
4A72:  BSF    16.7
4A74:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4A76:  MOVLW  01
4A78:  MOVLB  1
4A7A:  MOVWF  x32
4A7C:  MOVLW  03
4A7E:  MOVWF  x33
4A80:  MOVLB  0
4A82:  CALL   020C
4A86:  BTFSC  16.7
4A88:  BSF    FF2.7
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
4A8A:  MOVLW  7C
4A8C:  MOVWF  FF6
4A8E:  MOVLW  09
4A90:  MOVWF  FF7
4A92:  MOVLW  07
4A94:  MOVLB  1
4A96:  MOVWF  x08
4A98:  MOVLB  0
4A9A:  CALL   1062
4A9E:  MOVFF  2B,100
4AA2:  MOVLW  01
4AA4:  MOVLB  1
4AA6:  MOVWF  x01
4AA8:  MOVLB  0
4AAA:  CALL   10C4
4AAE:  CLRF   16
4AB0:  BTFSC  FF2.7
4AB2:  BSF    16.7
4AB4:  BCF    FF2.7
4AB6:  MOVLW  20
4AB8:  MOVLB  1
4ABA:  MOVWF  x31
4ABC:  MOVLB  0
4ABE:  CALL   0286
4AC2:  BTFSC  16.7
4AC4:  BSF    FF2.7
4AC6:  CLRF   16
4AC8:  BTFSC  FF2.7
4ACA:  BSF    16.7
4ACC:  BCF    FF2.7
4ACE:  MOVLW  20
4AD0:  MOVLB  1
4AD2:  MOVWF  x31
4AD4:  MOVLB  0
4AD6:  CALL   0286
4ADA:  BTFSC  16.7
4ADC:  BSF    FF2.7
4ADE:  CLRF   16
4AE0:  BTFSC  FF2.7
4AE2:  BSF    16.7
4AE4:  BCF    FF2.7
4AE6:  MOVLW  20
4AE8:  MOVLB  1
4AEA:  MOVWF  x31
4AEC:  MOVLB  0
4AEE:  CALL   0286
4AF2:  BTFSC  16.7
4AF4:  BSF    FF2.7
....................     
....................    if(MediaMovil>12) 
4AF6:  MOVF   2B,W
4AF8:  SUBLW  0C
4AFA:  BC    4B00
....................    {MediaMovil=12;} 
4AFC:  MOVLW  0C
4AFE:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
4B00:  MOVF   2B,F
4B02:  BNZ   4B08
....................    {MediaMovil=1;} 
4B04:  MOVLW  01
4B06:  MOVWF  2B
....................     
....................       if(UP)//Si oprime hacia arriba 
4B08:  BSF    F93.3
4B0A:  BTFSS  F81.3
4B0C:  BRA    4B32
....................       {  if(Flanco == 0)  
4B0E:  BTFSC  34.4
4B10:  BRA    4B30
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
4B12:  MOVLW  01
4B14:  ADDWF  2B,F
4B16:  BSF    34.4
4B18:  CLRF   16
4B1A:  BTFSC  FF2.7
4B1C:  BSF    16.7
4B1E:  BCF    FF2.7
4B20:  MOVLW  1E
4B22:  MOVLB  1
4B24:  MOVWF  x32
4B26:  MOVLB  0
4B28:  CALL   00B6
4B2C:  BTFSC  16.7
4B2E:  BSF    FF2.7
....................          else 
4B30:  BRA    4B34
....................             {Flanco = 0;} 
4B32:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4B34:  BSF    F93.2
4B36:  BTFSS  F81.2
4B38:  BRA    4B5E
....................       {  if(Flanco2 == 0)  
4B3A:  BTFSC  34.6
4B3C:  BRA    4B5C
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
4B3E:  MOVLW  01
4B40:  SUBWF  2B,F
4B42:  BSF    34.6
4B44:  CLRF   16
4B46:  BTFSC  FF2.7
4B48:  BSF    16.7
4B4A:  BCF    FF2.7
4B4C:  MOVLW  1E
4B4E:  MOVLB  1
4B50:  MOVWF  x32
4B52:  MOVLB  0
4B54:  CALL   00B6
4B58:  BTFSC  16.7
4B5A:  BSF    FF2.7
....................          else 
4B5C:  BRA    4B60
....................             {Flanco2 = 0;} 
4B5E:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
4B60:  BSF    F93.0
4B62:  BTFSS  F81.0
4B64:  BRA    4BD8
....................       {  if(Flanco1 == 0)  
4B66:  BTFSC  34.5
4B68:  BRA    4BD6
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4B6A:  MOVLW  01
4B6C:  MOVWF  18
4B6E:  CLRF   36
4B70:  MOVLW  02
4B72:  MOVWF  1C
4B74:  MOVWF  1E
4B76:  MOVLW  0B
4B78:  MOVWF  1B
4B7A:  CLRF   16
4B7C:  BTFSC  FF2.7
4B7E:  BSF    16.7
4B80:  BCF    FF2.7
4B82:  MOVLW  1E
4B84:  MOVLB  1
4B86:  MOVWF  x32
4B88:  MOVLB  0
4B8A:  CALL   00B6
4B8E:  BTFSC  16.7
4B90:  BSF    FF2.7
4B92:  CLRF   16
4B94:  BTFSC  FF2.7
4B96:  BSF    16.7
4B98:  BCF    FF2.7
4B9A:  MOVLW  0C
4B9C:  MOVLB  1
4B9E:  MOVWF  x31
4BA0:  MOVLB  0
4BA2:  CALL   0286
4BA6:  BTFSC  16.7
4BA8:  BSF    FF2.7
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
4BAA:  MOVLW  2A
4BAC:  MOVWF  FA9
4BAE:  MOVFF  2B,FA8
4BB2:  BCF    FA6.6
4BB4:  BCF    FA6.7
4BB6:  BSF    FA6.2
4BB8:  MOVF   FF2,W
4BBA:  MOVWF  00
4BBC:  BCF    FF2.7
4BBE:  MOVLB  F
4BC0:  MOVLW  55
4BC2:  MOVWF  FA7
4BC4:  MOVLW  AA
4BC6:  MOVWF  FA7
4BC8:  BSF    FA6.1
4BCA:  BTFSC  FA6.1
4BCC:  BRA    4BCA
4BCE:  BCF    FA6.2
4BD0:  MOVF   00,W
4BD2:  IORWF  FF2,F
4BD4:  MOVLB  0
....................             }} 
....................          else 
4BD6:  BRA    4BDA
....................             {Flanco1 = 0;}    
4BD8:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4BDA:  BSF    F93.1
4BDC:  BTFSS  F81.1
4BDE:  BRA    4C26
....................       {  if(Flanco3 == 0)  
4BE0:  BTFSC  34.7
4BE2:  BRA    4C24
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
4BE4:  MOVLW  01
4BE6:  MOVWF  18
4BE8:  CLRF   36
4BEA:  MOVLW  02
4BEC:  MOVWF  1C
4BEE:  MOVWF  1E
4BF0:  MOVLW  0B
4BF2:  MOVWF  1B
4BF4:  CLRF   16
4BF6:  BTFSC  FF2.7
4BF8:  BSF    16.7
4BFA:  BCF    FF2.7
4BFC:  MOVLW  1E
4BFE:  MOVLB  1
4C00:  MOVWF  x32
4C02:  MOVLB  0
4C04:  CALL   00B6
4C08:  BTFSC  16.7
4C0A:  BSF    FF2.7
4C0C:  CLRF   16
4C0E:  BTFSC  FF2.7
4C10:  BSF    16.7
4C12:  BCF    FF2.7
4C14:  MOVLW  0C
4C16:  MOVLB  1
4C18:  MOVWF  x31
4C1A:  MOVLB  0
4C1C:  CALL   0286
4C20:  BTFSC  16.7
4C22:  BSF    FF2.7
....................          else 
4C24:  BRA    4C28
....................             {Flanco3 = 0;}   
4C26:  BCF    34.7
4C28:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
4C2A:  MOVF   18,W
4C2C:  SUBLW  07
4C2E:  BTFSS  FD8.2
4C30:  BRA    50A0
4C32:  CLRF   16
4C34:  BTFSC  FF2.7
4C36:  BSF    16.7
4C38:  BCF    FF2.7
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
4C3A:  MOVLW  01
4C3C:  MOVWF  x32
4C3E:  MOVWF  x33
4C40:  MOVLB  0
4C42:  CALL   020C
4C46:  BTFSC  16.7
4C48:  BSF    FF2.7
....................    printf(lcd_putc,"  Zero Point Config "); 
4C4A:  MOVLW  8C
4C4C:  MOVWF  FF6
4C4E:  MOVLW  09
4C50:  MOVWF  FF7
4C52:  CLRF   16
4C54:  BTFSC  FF2.7
4C56:  BSF    16.7
4C58:  BCF    FF2.7
4C5A:  CALL   02F2
4C5E:  BTFSC  16.7
4C60:  BSF    FF2.7
4C62:  CLRF   16
4C64:  BTFSC  FF2.7
4C66:  BSF    16.7
4C68:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
4C6A:  MOVLW  01
4C6C:  MOVLB  1
4C6E:  MOVWF  x32
4C70:  MOVLW  02
4C72:  MOVWF  x33
4C74:  MOVLB  0
4C76:  CALL   020C
4C7A:  BTFSC  16.7
4C7C:  BSF    FF2.7
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
4C7E:  MOVLW  A2
4C80:  MOVWF  FF6
4C82:  MOVLW  09
4C84:  MOVWF  FF7
4C86:  MOVLW  08
4C88:  MOVLB  1
4C8A:  MOVWF  x08
4C8C:  MOVLB  0
4C8E:  CALL   1062
4C92:  MOVLW  01
4C94:  MOVWF  FE9
4C96:  MOVFF  8E,10B
4C9A:  MOVFF  8D,10A
4C9E:  MOVFF  8C,109
4CA2:  MOVFF  8B,108
4CA6:  MOVLB  1
4CA8:  MOVWF  x0C
4CAA:  MOVLB  0
4CAC:  CALL   164A
4CB0:  MOVLW  AF
4CB2:  MOVWF  FF6
4CB4:  MOVLW  09
4CB6:  MOVWF  FF7
4CB8:  MOVLW  08
4CBA:  MOVLB  1
4CBC:  MOVWF  x08
4CBE:  MOVLB  0
4CC0:  CALL   1062
4CC4:  CLRF   16
4CC6:  BTFSC  FF2.7
4CC8:  BSF    16.7
4CCA:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4CCC:  MOVLW  01
4CCE:  MOVLB  1
4CD0:  MOVWF  x32
4CD2:  MOVLW  03
4CD4:  MOVWF  x33
4CD6:  MOVLB  0
4CD8:  CALL   020C
4CDC:  BTFSC  16.7
4CDE:  BSF    FF2.7
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
4CE0:  MOVLB  1
4CE2:  CLRF   x04
4CE4:  MOVLB  0
4CE6:  CALL   18E2
4CEA:  MOVFF  00,100
4CEE:  MOVFF  01,101
4CF2:  MOVFF  02,102
4CF6:  MOVFF  03,103
4CFA:  CLRF   16
4CFC:  BTFSC  FF2.7
4CFE:  BSF    16.7
4D00:  BCF    FF2.7
4D02:  MOVLW  5A
4D04:  MOVLB  1
4D06:  MOVWF  x31
4D08:  MOVLB  0
4D0A:  CALL   0286
4D0E:  BTFSC  16.7
4D10:  BSF    FF2.7
4D12:  CLRF   16
4D14:  BTFSC  FF2.7
4D16:  BSF    16.7
4D18:  BCF    FF2.7
4D1A:  MOVLW  46
4D1C:  MOVLB  1
4D1E:  MOVWF  x31
4D20:  MOVLB  0
4D22:  CALL   0286
4D26:  BTFSC  16.7
4D28:  BSF    FF2.7
4D2A:  CLRF   16
4D2C:  BTFSC  FF2.7
4D2E:  BSF    16.7
4D30:  BCF    FF2.7
4D32:  MOVLW  3D
4D34:  MOVLB  1
4D36:  MOVWF  x31
4D38:  MOVLB  0
4D3A:  CALL   0286
4D3E:  BTFSC  16.7
4D40:  BSF    FF2.7
4D42:  MOVLW  01
4D44:  MOVWF  FE9
4D46:  MOVFF  4D,10B
4D4A:  MOVFF  4C,10A
4D4E:  MOVFF  4B,109
4D52:  MOVFF  4A,108
4D56:  MOVLB  1
4D58:  CLRF   x0C
4D5A:  MOVLB  0
4D5C:  CALL   164A
4D60:  MOVLW  C0
4D62:  MOVWF  FF6
4D64:  MOVLW  09
4D66:  MOVWF  FF7
4D68:  MOVLW  05
4D6A:  MOVLB  1
4D6C:  MOVWF  x08
4D6E:  MOVLB  0
4D70:  CALL   1062
4D74:  MOVLW  01
4D76:  MOVWF  FE9
4D78:  MOVFF  103,10B
4D7C:  MOVFF  102,10A
4D80:  MOVFF  101,109
4D84:  MOVFF  100,108
4D88:  MOVLB  1
4D8A:  CLRF   x0C
4D8C:  MOVLB  0
4D8E:  CALL   164A
4D92:  CLRF   16
4D94:  BTFSC  FF2.7
4D96:  BSF    16.7
4D98:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
4D9A:  MOVLW  01
4D9C:  MOVLB  1
4D9E:  MOVWF  x32
4DA0:  MOVLW  04
4DA2:  MOVWF  x33
4DA4:  MOVLB  0
4DA6:  CALL   020C
4DAA:  BTFSC  16.7
4DAC:  BSF    FF2.7
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
4DAE:  MOVLW  CC
4DB0:  MOVWF  FF6
4DB2:  MOVLW  09
4DB4:  MOVWF  FF7
4DB6:  MOVLW  0C
4DB8:  MOVLB  1
4DBA:  MOVWF  x08
4DBC:  MOVLB  0
4DBE:  CALL   1062
4DC2:  MOVLW  01
4DC4:  MOVWF  FE9
4DC6:  MOVFF  BE,10B
4DCA:  MOVFF  BD,10A
4DCE:  MOVFF  BC,109
4DD2:  MOVFF  BB,108
4DD6:  MOVLB  1
4DD8:  CLRF   x0C
4DDA:  MOVLB  0
4DDC:  CALL   164A
....................      
....................       if(RIGHT)// Si oprime derecha 
4DE0:  BSF    F93.0
4DE2:  BTFSS  F81.0
4DE4:  BRA    504E
....................       {  if(Flanco1 == 0)  
4DE6:  BTFSC  34.5
4DE8:  BRA    504C
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4DEA:  MOVLW  01
4DEC:  MOVWF  18
4DEE:  CLRF   36
4DF0:  MOVLW  02
4DF2:  MOVWF  1C
4DF4:  MOVWF  1E
4DF6:  MOVLW  0B
4DF8:  MOVWF  1B
4DFA:  CLRF   16
4DFC:  BTFSC  FF2.7
4DFE:  BSF    16.7
4E00:  BCF    FF2.7
4E02:  MOVLW  1E
4E04:  MOVLB  1
4E06:  MOVWF  x32
4E08:  MOVLB  0
4E0A:  CALL   00B6
4E0E:  BTFSC  16.7
4E10:  BSF    FF2.7
4E12:  CLRF   16
4E14:  BTFSC  FF2.7
4E16:  BSF    16.7
4E18:  BCF    FF2.7
4E1A:  MOVLW  0C
4E1C:  MOVLB  1
4E1E:  MOVWF  x31
4E20:  MOVLB  0
4E22:  CALL   0286
4E26:  BTFSC  16.7
4E28:  BSF    FF2.7
....................             Diferencia=zero_fabrica-sensores(0); 
4E2A:  MOVLB  1
4E2C:  CLRF   x04
4E2E:  MOVLB  0
4E30:  CALL   18E2
4E34:  MOVFF  FEA,101
4E38:  MOVFF  FE9,100
4E3C:  BSF    FD8.1
4E3E:  MOVFF  4D,121
4E42:  MOVFF  4C,120
4E46:  MOVFF  4B,11F
4E4A:  MOVFF  4A,11E
4E4E:  MOVFF  03,125
4E52:  MOVFF  02,124
4E56:  MOVFF  01,123
4E5A:  MOVFF  00,122
4E5E:  CALL   0DEA
4E62:  MOVFF  101,FEA
4E66:  MOVFF  100,FE9
4E6A:  MOVFF  03,BE
4E6E:  MOVFF  02,BD
4E72:  MOVFF  01,BC
4E76:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
4E7A:  MOVLB  1
4E7C:  CLRF   x1D
4E7E:  CLRF   x1C
4E80:  CLRF   x1B
4E82:  CLRF   x1A
4E84:  MOVFF  BE,121
4E88:  MOVFF  BD,120
4E8C:  MOVFF  BC,11F
4E90:  MOVFF  BB,11E
4E94:  MOVLB  0
4E96:  CALL   182C
4E9A:  BC    4E9E
4E9C:  BNZ   4ECC
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
4E9E:  MOVLW  0A
4EA0:  MOVWF  2C
4EA2:  MOVLW  32
4EA4:  MOVWF  FA9
4EA6:  MOVFF  2C,FA8
4EAA:  BCF    FA6.6
4EAC:  BCF    FA6.7
4EAE:  BSF    FA6.2
4EB0:  MOVF   FF2,W
4EB2:  MOVWF  00
4EB4:  BCF    FF2.7
4EB6:  MOVLB  F
4EB8:  MOVLW  55
4EBA:  MOVWF  FA7
4EBC:  MOVLW  AA
4EBE:  MOVWF  FA7
4EC0:  BSF    FA6.1
4EC2:  BTFSC  FA6.1
4EC4:  BRA    4EC2
4EC6:  BCF    FA6.2
4EC8:  MOVF   00,W
4ECA:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
4ECC:  MOVFF  BE,11D
4ED0:  MOVFF  BD,11C
4ED4:  MOVFF  BC,11B
4ED8:  MOVFF  BB,11A
4EDC:  MOVLB  1
4EDE:  CLRF   x21
4EE0:  CLRF   x20
4EE2:  CLRF   x1F
4EE4:  CLRF   x1E
4EE6:  MOVLB  0
4EE8:  CALL   182C
4EEC:  BNC   4F1E
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
4EEE:  MOVLW  14
4EF0:  MOVWF  2C
4EF2:  MOVLW  32
4EF4:  MOVWF  FA9
4EF6:  MOVFF  2C,FA8
4EFA:  BCF    FA6.6
4EFC:  BCF    FA6.7
4EFE:  BSF    FA6.2
4F00:  MOVF   FF2,W
4F02:  MOVWF  00
4F04:  BCF    FF2.7
4F06:  MOVLB  F
4F08:  MOVLW  55
4F0A:  MOVWF  FA7
4F0C:  MOVLW  AA
4F0E:  MOVWF  FA7
4F10:  BSF    FA6.1
4F12:  BTFSC  FA6.1
4F14:  BRA    4F12
4F16:  BCF    FA6.2
4F18:  MOVF   00,W
4F1A:  IORWF  FF2,F
4F1C:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
4F1E:  MOVFF  BB,00
4F22:  MOVFF  BC,01
4F26:  MOVFF  BD,02
4F2A:  MOVFF  BE,03
4F2E:  BCF    01.7
4F30:  MOVFF  BE,BE
4F34:  MOVFF  BD,BD
4F38:  MOVFF  01,BC
4F3C:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
4F40:  MOVFF  BE,B6
4F44:  MOVFF  BD,B5
4F48:  MOVFF  BC,B4
4F4C:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
4F50:  MOVFF  B6,102
4F54:  MOVFF  B5,101
4F58:  MOVFF  B4,100
4F5C:  MOVFF  B3,FF
4F60:  CALL   18A6
4F64:  MOVFF  01,25
....................             Temporal1=Temporal1-Entero1; 
4F68:  MOVLB  1
4F6A:  CLRF   x0A
4F6C:  MOVFF  25,109
4F70:  MOVLB  0
4F72:  CALL   0C56
4F76:  BSF    FD8.1
4F78:  MOVFF  B6,121
4F7C:  MOVFF  B5,120
4F80:  MOVFF  B4,11F
4F84:  MOVFF  B3,11E
4F88:  MOVFF  03,125
4F8C:  MOVFF  02,124
4F90:  MOVFF  01,123
4F94:  MOVFF  00,122
4F98:  CALL   0DEA
4F9C:  MOVFF  03,B6
4FA0:  MOVFF  02,B5
4FA4:  MOVFF  01,B4
4FA8:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
4FAC:  MOVFF  B6,11D
4FB0:  MOVFF  B5,11C
4FB4:  MOVFF  B4,11B
4FB8:  MOVFF  B3,11A
4FBC:  MOVLB  1
4FBE:  CLRF   x21
4FC0:  CLRF   x20
4FC2:  MOVLW  48
4FC4:  MOVWF  x1F
4FC6:  MOVLW  85
4FC8:  MOVWF  x1E
4FCA:  MOVLB  0
4FCC:  CALL   1490
4FD0:  MOVFF  03,BA
4FD4:  MOVFF  02,B9
4FD8:  MOVFF  01,B8
4FDC:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
4FE0:  MOVFF  BA,102
4FE4:  MOVFF  B9,101
4FE8:  MOVFF  B8,100
4FEC:  MOVFF  B7,FF
4FF0:  CALL   18A6
4FF4:  MOVFF  01,26
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
4FF8:  MOVLW  3C
4FFA:  MOVWF  FA9
4FFC:  MOVFF  25,FA8
5000:  BCF    FA6.6
5002:  BCF    FA6.7
5004:  BSF    FA6.2
5006:  MOVF   FF2,W
5008:  MOVWF  00
500A:  BCF    FF2.7
500C:  MOVLB  F
500E:  MOVLW  55
5010:  MOVWF  FA7
5012:  MOVLW  AA
5014:  MOVWF  FA7
5016:  BSF    FA6.1
5018:  BTFSC  FA6.1
501A:  BRA    5018
501C:  BCF    FA6.2
501E:  MOVF   00,W
5020:  IORWF  FF2,F
5022:  MOVLW  3D
5024:  MOVWF  FA9
5026:  MOVFF  26,FA8
502A:  BCF    FA6.6
502C:  BCF    FA6.7
502E:  BSF    FA6.2
5030:  MOVF   FF2,W
5032:  MOVWF  00
5034:  BCF    FF2.7
5036:  MOVLW  55
5038:  MOVWF  FA7
503A:  MOVLW  AA
503C:  MOVWF  FA7
503E:  BSF    FA6.1
5040:  BTFSC  FA6.1
5042:  BRA    5040
5044:  BCF    FA6.2
5046:  MOVF   00,W
5048:  IORWF  FF2,F
504A:  MOVLB  0
....................             }} 
....................          else 
504C:  BRA    5050
....................             {Flanco1 = 0;}    
504E:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5050:  BSF    F93.1
5052:  BTFSS  F81.1
5054:  BRA    509C
....................       {  if(Flanco3 == 0)  
5056:  BTFSC  34.7
5058:  BRA    509A
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
505A:  MOVLW  01
505C:  MOVWF  18
505E:  CLRF   36
5060:  MOVLW  02
5062:  MOVWF  1C
5064:  MOVWF  1E
5066:  MOVLW  0B
5068:  MOVWF  1B
506A:  CLRF   16
506C:  BTFSC  FF2.7
506E:  BSF    16.7
5070:  BCF    FF2.7
5072:  MOVLW  1E
5074:  MOVLB  1
5076:  MOVWF  x32
5078:  MOVLB  0
507A:  CALL   00B6
507E:  BTFSC  16.7
5080:  BSF    FF2.7
5082:  CLRF   16
5084:  BTFSC  FF2.7
5086:  BSF    16.7
5088:  BCF    FF2.7
508A:  MOVLW  0C
508C:  MOVLB  1
508E:  MOVWF  x31
5090:  MOVLB  0
5092:  CALL   0286
5096:  BTFSC  16.7
5098:  BSF    FF2.7
....................          else 
509A:  BRA    509E
....................             {Flanco3 = 0;}   
509C:  BCF    34.7
509E:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
50A0:  MOVF   18,W
50A2:  SUBLW  08
50A4:  BTFSS  FD8.2
50A6:  BRA    56B4
50A8:  CLRF   16
50AA:  BTFSC  FF2.7
50AC:  BSF    16.7
50AE:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
50B0:  MOVLW  01
50B2:  MOVWF  x32
50B4:  MOVWF  x33
50B6:  MOVLB  0
50B8:  CALL   020C
50BC:  BTFSC  16.7
50BE:  BSF    FF2.7
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
50C0:  MOVLB  1
50C2:  CLRF   x04
50C4:  MOVLB  0
50C6:  CALL   18E2
50CA:  MOVFF  00,100
50CE:  MOVFF  01,101
50D2:  MOVFF  02,102
50D6:  MOVFF  03,103
50DA:  MOVLW  DE
50DC:  MOVWF  FF6
50DE:  MOVLW  09
50E0:  MOVWF  FF7
50E2:  MOVLW  0A
50E4:  MOVLB  1
50E6:  MOVWF  x08
50E8:  MOVLB  0
50EA:  CALL   1062
50EE:  MOVLW  01
50F0:  MOVWF  FE9
50F2:  MOVFF  103,10B
50F6:  MOVFF  102,10A
50FA:  MOVFF  101,109
50FE:  MOVFF  100,108
5102:  MOVLB  1
5104:  CLRF   x0C
5106:  MOVLB  0
5108:  CALL   164A
510C:  CLRF   16
510E:  BTFSC  FF2.7
5110:  BSF    16.7
5112:  BCF    FF2.7
5114:  MOVLW  20
5116:  MOVLB  1
5118:  MOVWF  x31
511A:  MOVLB  0
511C:  CALL   0286
5120:  BTFSC  16.7
5122:  BSF    FF2.7
5124:  CLRF   16
5126:  BTFSC  FF2.7
5128:  BSF    16.7
512A:  BCF    FF2.7
512C:  MOVLW  20
512E:  MOVLB  1
5130:  MOVWF  x31
5132:  MOVLB  0
5134:  CALL   0286
5138:  BTFSC  16.7
513A:  BSF    FF2.7
513C:  CLRF   16
513E:  BTFSC  FF2.7
5140:  BSF    16.7
5142:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
5144:  MOVLW  01
5146:  MOVLB  1
5148:  MOVWF  x32
514A:  MOVLW  02
514C:  MOVWF  x33
514E:  MOVLB  0
5150:  CALL   020C
5154:  BTFSC  16.7
5156:  BSF    FF2.7
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
5158:  MOVLB  1
515A:  CLRF   x0A
515C:  MOVFF  2A,109
5160:  MOVLB  0
5162:  CALL   0C56
5166:  MOVFF  00,100
516A:  MOVFF  01,101
516E:  MOVFF  02,102
5172:  MOVFF  03,103
5176:  MOVFF  03,121
517A:  MOVFF  02,120
517E:  MOVFF  01,11F
5182:  MOVFF  00,11E
5186:  MOVLB  1
5188:  CLRF   x25
518A:  CLRF   x24
518C:  MOVLW  7F
518E:  MOVWF  x23
5190:  MOVLW  86
5192:  MOVWF  x22
5194:  MOVLB  0
5196:  CALL   0C8C
519A:  MOVLB  1
519C:  CLRF   x1D
519E:  CLRF   x1C
51A0:  MOVLW  48
51A2:  MOVWF  x1B
51A4:  MOVLW  85
51A6:  MOVWF  x1A
51A8:  MOVFF  03,121
51AC:  MOVFF  02,120
51B0:  MOVFF  01,11F
51B4:  MOVFF  00,11E
51B8:  MOVLB  0
51BA:  CALL   1490
51BE:  MOVFF  00,100
51C2:  MOVFF  01,101
51C6:  MOVFF  02,102
51CA:  MOVFF  03,103
51CE:  MOVLW  01
51D0:  MOVLB  1
51D2:  MOVWF  x04
51D4:  MOVLB  0
51D6:  CALL   18E2
51DA:  MOVFF  00,104
51DE:  MOVFF  01,105
51E2:  MOVFF  02,106
51E6:  MOVFF  03,107
51EA:  MOVLW  F0
51EC:  MOVWF  FF6
51EE:  MOVLW  09
51F0:  MOVWF  FF7
51F2:  MOVLW  05
51F4:  MOVLB  1
51F6:  MOVWF  x08
51F8:  MOVLB  0
51FA:  CALL   1062
51FE:  MOVLW  01
5200:  MOVWF  FE9
5202:  MOVFF  103,10B
5206:  MOVFF  102,10A
520A:  MOVFF  101,109
520E:  MOVFF  100,108
5212:  MOVLB  1
5214:  CLRF   x0C
5216:  MOVLB  0
5218:  CALL   164A
521C:  CLRF   16
521E:  BTFSC  FF2.7
5220:  BSF    16.7
5222:  BCF    FF2.7
5224:  MOVLW  25
5226:  MOVLB  1
5228:  MOVWF  x31
522A:  MOVLB  0
522C:  CALL   0286
5230:  BTFSC  16.7
5232:  BSF    FF2.7
5234:  MOVLW  FC
5236:  MOVWF  FF6
5238:  MOVLW  09
523A:  MOVWF  FF7
523C:  MOVLW  04
523E:  MOVLB  1
5240:  MOVWF  x08
5242:  MOVLB  0
5244:  CALL   1062
5248:  MOVLW  01
524A:  MOVWF  FE9
524C:  MOVFF  107,10B
5250:  MOVFF  106,10A
5254:  MOVFF  105,109
5258:  MOVFF  104,108
525C:  MOVLB  1
525E:  CLRF   x0C
5260:  MOVLB  0
5262:  CALL   164A
5266:  CLRF   16
5268:  BTFSC  FF2.7
526A:  BSF    16.7
526C:  BCF    FF2.7
526E:  MOVLW  20
5270:  MOVLB  1
5272:  MOVWF  x31
5274:  MOVLB  0
5276:  CALL   0286
527A:  BTFSC  16.7
527C:  BSF    FF2.7
527E:  CLRF   16
5280:  BTFSC  FF2.7
5282:  BSF    16.7
5284:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
5286:  MOVLW  01
5288:  MOVLB  1
528A:  MOVWF  x32
528C:  MOVLW  03
528E:  MOVWF  x33
5290:  MOVLB  0
5292:  CALL   020C
5296:  BTFSC  16.7
5298:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
529A:  MOVLW  02
529C:  MOVLB  1
529E:  MOVWF  x04
52A0:  MOVLB  0
52A2:  CALL   18E2
52A6:  MOVFF  00,100
52AA:  MOVFF  01,101
52AE:  MOVFF  02,102
52B2:  MOVFF  03,103
52B6:  MOVFF  03,121
52BA:  MOVFF  02,120
52BE:  MOVFF  01,11F
52C2:  MOVFF  00,11E
52C6:  MOVLB  1
52C8:  CLRF   x25
52CA:  MOVLW  C0
52CC:  MOVWF  x24
52CE:  MOVLW  7F
52D0:  MOVWF  x23
52D2:  MOVLW  88
52D4:  MOVWF  x22
52D6:  MOVLB  0
52D8:  CALL   0C8C
52DC:  MOVLB  1
52DE:  CLRF   x1D
52E0:  CLRF   x1C
52E2:  MOVLW  48
52E4:  MOVWF  x1B
52E6:  MOVLW  85
52E8:  MOVWF  x1A
52EA:  MOVFF  03,121
52EE:  MOVFF  02,120
52F2:  MOVFF  01,11F
52F6:  MOVFF  00,11E
52FA:  MOVLB  0
52FC:  CALL   1490
5300:  MOVFF  00,100
5304:  MOVFF  01,101
5308:  MOVFF  02,102
530C:  MOVFF  03,103
5310:  MOVLW  08
5312:  MOVWF  FF6
5314:  MOVLW  0A
5316:  MOVWF  FF7
5318:  MOVLW  04
531A:  MOVLB  1
531C:  MOVWF  x08
531E:  MOVLB  0
5320:  CALL   1062
5324:  MOVLW  01
5326:  MOVWF  FE9
5328:  MOVFF  8E,10B
532C:  MOVFF  8D,10A
5330:  MOVFF  8C,109
5334:  MOVFF  8B,108
5338:  MOVLB  1
533A:  MOVWF  x0C
533C:  MOVLB  0
533E:  CALL   164A
5342:  MOVLW  11
5344:  MOVWF  FF6
5346:  MOVLW  0A
5348:  MOVWF  FF7
534A:  MOVLW  0A
534C:  MOVLB  1
534E:  MOVWF  x08
5350:  MOVLB  0
5352:  CALL   1062
5356:  MOVLW  01
5358:  MOVWF  FE9
535A:  MOVFF  103,10B
535E:  MOVFF  102,10A
5362:  MOVFF  101,109
5366:  MOVFF  100,108
536A:  MOVLB  1
536C:  CLRF   x0C
536E:  MOVLB  0
5370:  CALL   164A
5374:  CLRF   16
5376:  BTFSC  FF2.7
5378:  BSF    16.7
537A:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
537C:  MOVLW  01
537E:  MOVLB  1
5380:  MOVWF  x32
5382:  MOVLW  04
5384:  MOVWF  x33
5386:  MOVLB  0
5388:  CALL   020C
538C:  BTFSC  16.7
538E:  BSF    FF2.7
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
5390:  MOVLW  22
5392:  MOVWF  FF6
5394:  MOVLW  0A
5396:  MOVWF  FF7
5398:  MOVLW  09
539A:  MOVLB  1
539C:  MOVWF  x08
539E:  MOVLB  0
53A0:  CALL   1062
53A4:  MOVLW  89
53A6:  MOVWF  FE9
53A8:  MOVFF  C2,10B
53AC:  MOVFF  C1,10A
53B0:  MOVFF  C0,109
53B4:  MOVFF  BF,108
53B8:  MOVLW  02
53BA:  MOVLB  1
53BC:  MOVWF  x0C
53BE:  MOVLB  0
53C0:  CALL   164A
53C4:  CLRF   16
53C6:  BTFSC  FF2.7
53C8:  BSF    16.7
53CA:  BCF    FF2.7
53CC:  MOVLW  20
53CE:  MOVLB  1
53D0:  MOVWF  x31
53D2:  MOVLB  0
53D4:  CALL   0286
53D8:  BTFSC  16.7
53DA:  BSF    FF2.7
....................        
....................       if(UP)//Si oprime hacia arriba 
53DC:  BSF    F93.3
53DE:  BTFSS  F81.3
53E0:  BRA    5466
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
53E2:  BCF    FD8.1
53E4:  MOVFF  C2,121
53E8:  MOVFF  C1,120
53EC:  MOVFF  C0,11F
53F0:  MOVFF  BF,11E
53F4:  MOVLW  0A
53F6:  MOVLB  1
53F8:  MOVWF  x25
53FA:  MOVLW  D7
53FC:  MOVWF  x24
53FE:  MOVLW  23
5400:  MOVWF  x23
5402:  MOVLW  78
5404:  MOVWF  x22
5406:  MOVLB  0
5408:  CALL   0DEA
540C:  MOVFF  03,C2
5410:  MOVFF  02,C1
5414:  MOVFF  01,C0
5418:  MOVFF  00,BF
541C:  CLRF   16
541E:  BTFSC  FF2.7
5420:  BSF    16.7
5422:  BCF    FF2.7
5424:  MOVLW  32
5426:  MOVLB  1
5428:  MOVWF  x32
542A:  MOVLB  0
542C:  CALL   00B6
5430:  BTFSC  16.7
5432:  BSF    FF2.7
....................          if(Ajuste1>30.0) 
5434:  MOVLB  1
5436:  CLRF   x1D
5438:  CLRF   x1C
543A:  MOVLW  70
543C:  MOVWF  x1B
543E:  MOVLW  83
5440:  MOVWF  x1A
5442:  MOVFF  C2,121
5446:  MOVFF  C1,120
544A:  MOVFF  C0,11F
544E:  MOVFF  BF,11E
5452:  MOVLB  0
5454:  CALL   182C
5458:  BNC   5466
....................          {Ajuste1=30.0;} 
545A:  CLRF   xC2
545C:  CLRF   xC1
545E:  MOVLW  70
5460:  MOVWF  xC0
5462:  MOVLW  83
5464:  MOVWF  xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5466:  BSF    F93.2
5468:  BTFSS  F81.2
546A:  BRA    54E8
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
546C:  BSF    FD8.1
546E:  MOVFF  C2,121
5472:  MOVFF  C1,120
5476:  MOVFF  C0,11F
547A:  MOVFF  BF,11E
547E:  MOVLW  0A
5480:  MOVLB  1
5482:  MOVWF  x25
5484:  MOVLW  D7
5486:  MOVWF  x24
5488:  MOVLW  23
548A:  MOVWF  x23
548C:  MOVLW  78
548E:  MOVWF  x22
5490:  MOVLB  0
5492:  CALL   0DEA
5496:  MOVFF  03,C2
549A:  MOVFF  02,C1
549E:  MOVFF  01,C0
54A2:  MOVFF  00,BF
54A6:  CLRF   16
54A8:  BTFSC  FF2.7
54AA:  BSF    16.7
54AC:  BCF    FF2.7
54AE:  MOVLW  32
54B0:  MOVLB  1
54B2:  MOVWF  x32
54B4:  MOVLB  0
54B6:  CALL   00B6
54BA:  BTFSC  16.7
54BC:  BSF    FF2.7
....................          if(Ajuste1<0.0) 
54BE:  MOVFF  C2,11D
54C2:  MOVFF  C1,11C
54C6:  MOVFF  C0,11B
54CA:  MOVFF  BF,11A
54CE:  MOVLB  1
54D0:  CLRF   x21
54D2:  CLRF   x20
54D4:  CLRF   x1F
54D6:  CLRF   x1E
54D8:  MOVLB  0
54DA:  CALL   182C
54DE:  BNC   54E8
....................          {Ajuste1=0.0;} 
54E0:  CLRF   xC2
54E2:  CLRF   xC1
54E4:  CLRF   xC0
54E6:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
54E8:  BSF    F93.0
54EA:  BTFSS  F81.0
54EC:  BRA    5662
....................       {  if(Flanco1 == 0)  
54EE:  BTFSC  34.5
54F0:  BRA    5660
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
54F2:  MOVLW  01
54F4:  MOVWF  18
54F6:  CLRF   36
54F8:  MOVLW  02
54FA:  MOVWF  1C
54FC:  MOVWF  1E
54FE:  MOVLW  0B
5500:  MOVWF  1B
5502:  CLRF   16
5504:  BTFSC  FF2.7
5506:  BSF    16.7
5508:  BCF    FF2.7
550A:  MOVLW  1E
550C:  MOVLB  1
550E:  MOVWF  x32
5510:  MOVLB  0
5512:  CALL   00B6
5516:  BTFSC  16.7
5518:  BSF    FF2.7
551A:  CLRF   16
551C:  BTFSC  FF2.7
551E:  BSF    16.7
5520:  BCF    FF2.7
5522:  MOVLW  0C
5524:  MOVLB  1
5526:  MOVWF  x31
5528:  MOVLB  0
552A:  CALL   0286
552E:  BTFSC  16.7
5530:  BSF    FF2.7
....................             Temporal=Ajuste1; 
5532:  MOVFF  C2,AA
5536:  MOVFF  C1,A9
553A:  MOVFF  C0,A8
553E:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
5542:  MOVFF  C2,102
5546:  MOVFF  C1,101
554A:  MOVFF  C0,100
554E:  MOVFF  BF,FF
5552:  CALL   18A6
5556:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
555A:  MOVLB  1
555C:  CLRF   x0A
555E:  MOVFF  22,109
5562:  MOVLB  0
5564:  CALL   0C56
5568:  BSF    FD8.1
556A:  MOVFF  AA,121
556E:  MOVFF  A9,120
5572:  MOVFF  A8,11F
5576:  MOVFF  A7,11E
557A:  MOVFF  03,125
557E:  MOVFF  02,124
5582:  MOVFF  01,123
5586:  MOVFF  00,122
558A:  CALL   0DEA
558E:  MOVFF  03,AA
5592:  MOVFF  02,A9
5596:  MOVFF  01,A8
559A:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
559E:  MOVFF  AA,11D
55A2:  MOVFF  A9,11C
55A6:  MOVFF  A8,11B
55AA:  MOVFF  A7,11A
55AE:  MOVLB  1
55B0:  CLRF   x21
55B2:  CLRF   x20
55B4:  MOVLW  48
55B6:  MOVWF  x1F
55B8:  MOVLW  85
55BA:  MOVWF  x1E
55BC:  MOVLB  0
55BE:  CALL   1490
55C2:  MOVFF  03,AE
55C6:  MOVFF  02,AD
55CA:  MOVFF  01,AC
55CE:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
55D2:  MOVFF  AE,102
55D6:  MOVFF  AD,101
55DA:  MOVFF  AC,100
55DE:  MOVFF  AB,FF
55E2:  CALL   18A6
55E6:  MOVFF  01,23
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
55EA:  MOVLW  19
55EC:  MOVWF  FA9
55EE:  MOVFF  22,FA8
55F2:  BCF    FA6.6
55F4:  BCF    FA6.7
55F6:  BSF    FA6.2
55F8:  MOVF   FF2,W
55FA:  MOVWF  00
55FC:  BCF    FF2.7
55FE:  MOVLB  F
5600:  MOVLW  55
5602:  MOVWF  FA7
5604:  MOVLW  AA
5606:  MOVWF  FA7
5608:  BSF    FA6.1
560A:  BTFSC  FA6.1
560C:  BRA    560A
560E:  BCF    FA6.2
5610:  MOVF   00,W
5612:  IORWF  FF2,F
5614:  MOVLW  1A
5616:  MOVWF  FA9
5618:  MOVFF  23,FA8
561C:  BCF    FA6.6
561E:  BCF    FA6.7
5620:  BSF    FA6.2
5622:  MOVF   FF2,W
5624:  MOVWF  00
5626:  BCF    FF2.7
5628:  MOVLW  55
562A:  MOVWF  FA7
562C:  MOVLW  AA
562E:  MOVWF  FA7
5630:  BSF    FA6.1
5632:  BTFSC  FA6.1
5634:  BRA    5632
5636:  BCF    FA6.2
5638:  MOVF   00,W
563A:  IORWF  FF2,F
....................             delay_ms(1000); 
563C:  MOVLW  04
563E:  MOVLB  1
5640:  MOVWF  x00
5642:  CLRF   16
5644:  BTFSC  FF2.7
5646:  BSF    16.7
5648:  BCF    FF2.7
564A:  MOVLW  FA
564C:  MOVWF  x32
564E:  MOVLB  0
5650:  CALL   00B6
5654:  BTFSC  16.7
5656:  BSF    FF2.7
5658:  MOVLB  1
565A:  DECFSZ x00,F
565C:  BRA    5642
565E:  MOVLB  0
....................             }} 
....................          else 
5660:  BRA    5664
....................             {Flanco1 = 0;}    
5662:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5664:  BSF    F93.1
5666:  BTFSS  F81.1
5668:  BRA    56B0
....................       {  if(Flanco3 == 0)  
566A:  BTFSC  34.7
566C:  BRA    56AE
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
566E:  MOVLW  01
5670:  MOVWF  18
5672:  CLRF   36
5674:  MOVLW  02
5676:  MOVWF  1C
5678:  MOVWF  1E
567A:  MOVLW  0B
567C:  MOVWF  1B
567E:  CLRF   16
5680:  BTFSC  FF2.7
5682:  BSF    16.7
5684:  BCF    FF2.7
5686:  MOVLW  1E
5688:  MOVLB  1
568A:  MOVWF  x32
568C:  MOVLB  0
568E:  CALL   00B6
5692:  BTFSC  16.7
5694:  BSF    FF2.7
5696:  CLRF   16
5698:  BTFSC  FF2.7
569A:  BSF    16.7
569C:  BCF    FF2.7
569E:  MOVLW  0C
56A0:  MOVLB  1
56A2:  MOVWF  x31
56A4:  MOVLB  0
56A6:  CALL   0286
56AA:  BTFSC  16.7
56AC:  BSF    FF2.7
....................          else 
56AE:  BRA    56B2
....................             {Flanco3 = 0;}   
56B0:  BCF    34.7
56B2:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
56B4:  MOVF   18,W
56B6:  SUBLW  09
56B8:  BTFSS  FD8.2
56BA:  GOTO   5E9A
56BE:  CLRF   16
56C0:  BTFSC  FF2.7
56C2:  BSF    16.7
56C4:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
56C6:  MOVLW  01
56C8:  MOVWF  x32
56CA:  MOVWF  x33
56CC:  MOVLB  0
56CE:  CALL   020C
56D2:  BTFSC  16.7
56D4:  BSF    FF2.7
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
56D6:  MOVLB  1
56D8:  CLRF   x0A
56DA:  MOVFF  2A,109
56DE:  MOVLB  0
56E0:  CALL   0C56
56E4:  MOVFF  00,100
56E8:  MOVFF  01,101
56EC:  MOVFF  02,102
56F0:  MOVFF  03,103
56F4:  MOVFF  03,121
56F8:  MOVFF  02,120
56FC:  MOVFF  01,11F
5700:  MOVFF  00,11E
5704:  MOVLB  1
5706:  CLRF   x25
5708:  CLRF   x24
570A:  MOVLW  7F
570C:  MOVWF  x23
570E:  MOVLW  86
5710:  MOVWF  x22
5712:  MOVLB  0
5714:  CALL   0C8C
5718:  MOVLB  1
571A:  CLRF   x1D
571C:  CLRF   x1C
571E:  MOVLW  48
5720:  MOVWF  x1B
5722:  MOVLW  85
5724:  MOVWF  x1A
5726:  MOVFF  03,121
572A:  MOVFF  02,120
572E:  MOVFF  01,11F
5732:  MOVFF  00,11E
5736:  MOVLB  0
5738:  CALL   1490
573C:  MOVFF  00,100
5740:  MOVFF  01,101
5744:  MOVFF  02,102
5748:  MOVFF  03,103
574C:  MOVLW  32
574E:  MOVWF  FF6
5750:  MOVLW  0A
5752:  MOVWF  FF7
5754:  MOVLW  0D
5756:  MOVLB  1
5758:  MOVWF  x08
575A:  MOVLB  0
575C:  CALL   1062
5760:  MOVLW  01
5762:  MOVWF  FE9
5764:  MOVFF  103,10B
5768:  MOVFF  102,10A
576C:  MOVFF  101,109
5770:  MOVFF  100,108
5774:  MOVLB  1
5776:  CLRF   x0C
5778:  MOVLB  0
577A:  CALL   164A
577E:  CLRF   16
5780:  BTFSC  FF2.7
5782:  BSF    16.7
5784:  BCF    FF2.7
5786:  MOVLW  25
5788:  MOVLB  1
578A:  MOVWF  x31
578C:  MOVLB  0
578E:  CALL   0286
5792:  BTFSC  16.7
5794:  BSF    FF2.7
5796:  CLRF   16
5798:  BTFSC  FF2.7
579A:  BSF    16.7
579C:  BCF    FF2.7
579E:  MOVLW  20
57A0:  MOVLB  1
57A2:  MOVWF  x31
57A4:  MOVLB  0
57A6:  CALL   0286
57AA:  BTFSC  16.7
57AC:  BSF    FF2.7
57AE:  CLRF   16
57B0:  BTFSC  FF2.7
57B2:  BSF    16.7
57B4:  BCF    FF2.7
....................  
....................    lcd_gotoxy(1,4); 
57B6:  MOVLW  01
57B8:  MOVLB  1
57BA:  MOVWF  x32
57BC:  MOVLW  04
57BE:  MOVWF  x33
57C0:  MOVLB  0
57C2:  CALL   020C
57C6:  BTFSC  16.7
57C8:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
57CA:  MOVLW  02
57CC:  MOVLB  1
57CE:  MOVWF  x04
57D0:  MOVLB  0
57D2:  CALL   18E2
57D6:  MOVFF  00,100
57DA:  MOVFF  01,101
57DE:  MOVFF  02,102
57E2:  MOVFF  03,103
57E6:  MOVFF  03,121
57EA:  MOVFF  02,120
57EE:  MOVFF  01,11F
57F2:  MOVFF  00,11E
57F6:  MOVLB  1
57F8:  CLRF   x25
57FA:  MOVLW  C0
57FC:  MOVWF  x24
57FE:  MOVLW  7F
5800:  MOVWF  x23
5802:  MOVLW  88
5804:  MOVWF  x22
5806:  MOVLB  0
5808:  CALL   0C8C
580C:  MOVLB  1
580E:  CLRF   x1D
5810:  CLRF   x1C
5812:  MOVLW  48
5814:  MOVWF  x1B
5816:  MOVLW  85
5818:  MOVWF  x1A
581A:  MOVFF  03,121
581E:  MOVFF  02,120
5822:  MOVFF  01,11F
5826:  MOVFF  00,11E
582A:  MOVLB  0
582C:  CALL   1490
5830:  MOVFF  00,100
5834:  MOVFF  01,101
5838:  MOVFF  02,102
583C:  MOVFF  03,103
5840:  MOVLW  48
5842:  MOVWF  FF6
5844:  MOVLW  0A
5846:  MOVWF  FF7
5848:  MOVLW  04
584A:  MOVLB  1
584C:  MOVWF  x08
584E:  MOVLB  0
5850:  CALL   1062
5854:  MOVLW  01
5856:  MOVWF  FE9
5858:  MOVFF  8E,10B
585C:  MOVFF  8D,10A
5860:  MOVFF  8C,109
5864:  MOVFF  8B,108
5868:  MOVLB  1
586A:  MOVWF  x0C
586C:  MOVLB  0
586E:  CALL   164A
5872:  MOVLW  51
5874:  MOVWF  FF6
5876:  MOVLW  0A
5878:  MOVWF  FF7
587A:  MOVLW  0A
587C:  MOVLB  1
587E:  MOVWF  x08
5880:  MOVLB  0
5882:  CALL   1062
5886:  MOVLW  01
5888:  MOVWF  FE9
588A:  MOVFF  103,10B
588E:  MOVFF  102,10A
5892:  MOVFF  101,109
5896:  MOVFF  100,108
589A:  MOVLB  1
589C:  CLRF   x0C
589E:  MOVLB  0
58A0:  CALL   164A
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
58A4:  BTFSC  4E.1
58A6:  BRA    5AAE
58A8:  BTFSC  4E.2
58AA:  BRA    5AAE
58AC:  BTFSC  4E.3
58AE:  BRA    5AAE
....................       { 
....................          if(UP)//Si oprime hacia arriba 
58B0:  BSF    F93.3
58B2:  BTFSS  F81.3
58B4:  BRA    5940
....................          { 
....................             delay_ms(500); 
58B6:  MOVLW  02
58B8:  MOVLB  1
58BA:  MOVWF  x00
58BC:  CLRF   16
58BE:  BTFSC  FF2.7
58C0:  BSF    16.7
58C2:  BCF    FF2.7
58C4:  MOVLW  FA
58C6:  MOVWF  x32
58C8:  MOVLB  0
58CA:  CALL   00B6
58CE:  BTFSC  16.7
58D0:  BSF    FF2.7
58D2:  MOVLB  1
58D4:  DECFSZ x00,F
58D6:  BRA    58BC
....................             if(UP) 
58D8:  BSF    F93.3
58DA:  BTFSS  F81.3
58DC:  BRA    593E
58DE:  CLRF   16
58E0:  BTFSC  FF2.7
58E2:  BSF    16.7
58E4:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
58E6:  MOVLW  01
58E8:  MOVWF  x32
58EA:  MOVLW  02
58EC:  MOVWF  x33
58EE:  MOVLB  0
58F0:  CALL   020C
58F4:  BTFSC  16.7
58F6:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Manual  "); 
58F8:  MOVLW  62
58FA:  MOVWF  FF6
58FC:  MOVLW  0A
58FE:  MOVWF  FF7
5900:  CLRF   16
5902:  BTFSC  FF2.7
5904:  BSF    16.7
5906:  BCF    FF2.7
5908:  CALL   02F2
590C:  BTFSC  16.7
590E:  BSF    FF2.7
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
5910:  BSF    4E.1
5912:  BCF    4E.2
5914:  BCF    4E.3
5916:  MOVLW  0A
5918:  MOVWF  2D
591A:  MOVWF  2F
....................                delay_ms(1000); 
591C:  MOVLW  04
591E:  MOVLB  1
5920:  MOVWF  x00
5922:  CLRF   16
5924:  BTFSC  FF2.7
5926:  BSF    16.7
5928:  BCF    FF2.7
592A:  MOVLW  FA
592C:  MOVWF  x32
592E:  MOVLB  0
5930:  CALL   00B6
5934:  BTFSC  16.7
5936:  BSF    FF2.7
5938:  MOVLB  1
593A:  DECFSZ x00,F
593C:  BRA    5922
593E:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5940:  BSF    F93.2
5942:  BTFSS  F81.2
5944:  BRA    59D0
....................          { 
....................             delay_ms(500); 
5946:  MOVLW  02
5948:  MOVLB  1
594A:  MOVWF  x00
594C:  CLRF   16
594E:  BTFSC  FF2.7
5950:  BSF    16.7
5952:  BCF    FF2.7
5954:  MOVLW  FA
5956:  MOVWF  x32
5958:  MOVLB  0
595A:  CALL   00B6
595E:  BTFSC  16.7
5960:  BSF    FF2.7
5962:  MOVLB  1
5964:  DECFSZ x00,F
5966:  BRA    594C
....................             if(DOWN) 
5968:  BSF    F93.2
596A:  BTFSS  F81.2
596C:  BRA    59CE
596E:  CLRF   16
5970:  BTFSC  FF2.7
5972:  BSF    16.7
5974:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5976:  MOVLW  01
5978:  MOVWF  x32
597A:  MOVLW  02
597C:  MOVWF  x33
597E:  MOVLB  0
5980:  CALL   020C
5984:  BTFSC  16.7
5986:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Auto   "); 
5988:  MOVLW  74
598A:  MOVWF  FF6
598C:  MOVLW  0A
598E:  MOVWF  FF7
5990:  CLRF   16
5992:  BTFSC  FF2.7
5994:  BSF    16.7
5996:  BCF    FF2.7
5998:  CALL   02F2
599C:  BTFSC  16.7
599E:  BSF    FF2.7
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
59A0:  BSF    4E.2
59A2:  BCF    4E.1
59A4:  BCF    4E.3
59A6:  MOVLW  0A
59A8:  MOVWF  2E
59AA:  MOVWF  2F
....................                delay_ms(1000); 
59AC:  MOVLW  04
59AE:  MOVLB  1
59B0:  MOVWF  x00
59B2:  CLRF   16
59B4:  BTFSC  FF2.7
59B6:  BSF    16.7
59B8:  BCF    FF2.7
59BA:  MOVLW  FA
59BC:  MOVWF  x32
59BE:  MOVLB  0
59C0:  CALL   00B6
59C4:  BTFSC  16.7
59C6:  BSF    FF2.7
59C8:  MOVLB  1
59CA:  DECFSZ x00,F
59CC:  BRA    59B2
59CE:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
59D0:  BSF    F93.0
59D2:  BTFSS  F81.0
59D4:  BRA    5A60
....................          { 
....................             delay_ms(500); 
59D6:  MOVLW  02
59D8:  MOVLB  1
59DA:  MOVWF  x00
59DC:  CLRF   16
59DE:  BTFSC  FF2.7
59E0:  BSF    16.7
59E2:  BCF    FF2.7
59E4:  MOVLW  FA
59E6:  MOVWF  x32
59E8:  MOVLB  0
59EA:  CALL   00B6
59EE:  BTFSC  16.7
59F0:  BSF    FF2.7
59F2:  MOVLB  1
59F4:  DECFSZ x00,F
59F6:  BRA    59DC
....................             if(RIGHT) 
59F8:  BSF    F93.0
59FA:  BTFSS  F81.0
59FC:  BRA    5A5E
59FE:  CLRF   16
5A00:  BTFSC  FF2.7
5A02:  BSF    16.7
5A04:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5A06:  MOVLW  01
5A08:  MOVWF  x32
5A0A:  MOVLW  02
5A0C:  MOVWF  x33
5A0E:  MOVLB  0
5A10:  CALL   020C
5A14:  BTFSC  16.7
5A16:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Semi   "); 
5A18:  MOVLW  84
5A1A:  MOVWF  FF6
5A1C:  MOVLW  0A
5A1E:  MOVWF  FF7
5A20:  CLRF   16
5A22:  BTFSC  FF2.7
5A24:  BSF    16.7
5A26:  BCF    FF2.7
5A28:  CALL   02F2
5A2C:  BTFSC  16.7
5A2E:  BSF    FF2.7
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
5A30:  BSF    4E.3
5A32:  BCF    4E.1
5A34:  BCF    4E.2
5A36:  MOVLW  0A
5A38:  MOVWF  2D
5A3A:  MOVWF  2E
....................                delay_ms(1000); 
5A3C:  MOVLW  04
5A3E:  MOVLB  1
5A40:  MOVWF  x00
5A42:  CLRF   16
5A44:  BTFSC  FF2.7
5A46:  BSF    16.7
5A48:  BCF    FF2.7
5A4A:  MOVLW  FA
5A4C:  MOVWF  x32
5A4E:  MOVLB  0
5A50:  CALL   00B6
5A54:  BTFSC  16.7
5A56:  BSF    FF2.7
5A58:  MOVLB  1
5A5A:  DECFSZ x00,F
5A5C:  BRA    5A42
5A5E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
5A60:  BSF    F93.1
5A62:  BTFSS  F81.1
5A64:  BRA    5AAE
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
5A66:  MOVLW  01
5A68:  MOVWF  18
5A6A:  CLRF   36
5A6C:  MOVLW  02
5A6E:  MOVWF  1C
5A70:  MOVWF  1E
5A72:  MOVLW  0B
5A74:  MOVWF  1B
5A76:  MOVLW  02
5A78:  MOVLB  1
5A7A:  MOVWF  x00
5A7C:  CLRF   16
5A7E:  BTFSC  FF2.7
5A80:  BSF    16.7
5A82:  BCF    FF2.7
5A84:  MOVLW  FA
5A86:  MOVWF  x32
5A88:  MOVLB  0
5A8A:  CALL   00B6
5A8E:  BTFSC  16.7
5A90:  BSF    FF2.7
5A92:  MOVLB  1
5A94:  DECFSZ x00,F
5A96:  BRA    5A7C
5A98:  CLRF   16
5A9A:  BTFSC  FF2.7
5A9C:  BSF    16.7
5A9E:  BCF    FF2.7
5AA0:  MOVLW  0C
5AA2:  MOVWF  x31
5AA4:  MOVLB  0
5AA6:  CALL   0286
5AAA:  BTFSC  16.7
5AAC:  BSF    FF2.7
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
5AAE:  BTFSC  4E.1
5AB0:  BRA    5ABA
5AB2:  MOVF   2E,W
5AB4:  SUBLW  14
5AB6:  BTFSS  FD8.2
5AB8:  BRA    5C26
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
5ABA:  BCF    4E.2
5ABC:  BCF    4E.3
5ABE:  MOVLW  0A
5AC0:  MOVWF  2D
5AC2:  MOVWF  2F
5AC4:  CLRF   16
5AC6:  BTFSC  FF2.7
5AC8:  BSF    16.7
5ACA:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5ACC:  MOVLW  01
5ACE:  MOVLB  1
5AD0:  MOVWF  x32
5AD2:  MOVLW  02
5AD4:  MOVWF  x33
5AD6:  MOVLB  0
5AD8:  CALL   020C
5ADC:  BTFSC  16.7
5ADE:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Manual  "); 
5AE0:  MOVLW  94
5AE2:  MOVWF  FF6
5AE4:  MOVLW  0A
5AE6:  MOVWF  FF7
5AE8:  CLRF   16
5AEA:  BTFSC  FF2.7
5AEC:  BSF    16.7
5AEE:  BCF    FF2.7
5AF0:  CALL   02F2
5AF4:  BTFSC  16.7
5AF6:  BSF    FF2.7
5AF8:  CLRF   16
5AFA:  BTFSC  FF2.7
5AFC:  BSF    16.7
5AFE:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5B00:  MOVLW  01
5B02:  MOVLB  1
5B04:  MOVWF  x32
5B06:  MOVLW  03
5B08:  MOVWF  x33
5B0A:  MOVLB  0
5B0C:  CALL   020C
5B10:  BTFSC  16.7
5B12:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
5B14:  MOVLW  A6
5B16:  MOVWF  FF6
5B18:  MOVLW  0A
5B1A:  MOVWF  FF7
5B1C:  CLRF   16
5B1E:  BTFSC  FF2.7
5B20:  BSF    16.7
5B22:  BCF    FF2.7
5B24:  CALL   02F2
5B28:  BTFSC  16.7
5B2A:  BSF    FF2.7
....................          if(LEFT) 
5B2C:  BSF    F93.1
5B2E:  BTFSS  F81.1
5B30:  BRA    5C26
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(251);tmp=251;  
5B32:  BCF    4E.1
5B34:  MOVLW  14
5B36:  MOVWF  2E
5B38:  MOVLW  0A
5B3A:  MOVWF  2D
5B3C:  MOVWF  2F
5B3E:  MOVLW  02
5B40:  MOVLB  1
5B42:  MOVWF  x00
5B44:  CLRF   16
5B46:  BTFSC  FF2.7
5B48:  BSF    16.7
5B4A:  BCF    FF2.7
5B4C:  MOVLW  FA
5B4E:  MOVWF  x32
5B50:  MOVLB  0
5B52:  CALL   00B6
5B56:  BTFSC  16.7
5B58:  BSF    FF2.7
5B5A:  MOVLB  1
5B5C:  DECFSZ x00,F
5B5E:  BRA    5B44
5B60:  CLRF   16
5B62:  BTFSC  FF2.7
5B64:  BSF    16.7
5B66:  BCF    FF2.7
5B68:  MOVLW  0C
5B6A:  MOVWF  x31
5B6C:  MOVLB  0
5B6E:  CALL   0286
5B72:  BTFSC  16.7
5B74:  BSF    FF2.7
5B76:  MOVLW  FB
5B78:  MOVWF  xFF
5B7A:  CALL   1946
5B7E:  MOVLW  FB
5B80:  MOVWF  2A
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
5B82:  MOVLW  0A
5B84:  MOVWF  FA9
5B86:  MOVFF  2E,FA8
5B8A:  BCF    FA6.6
5B8C:  BCF    FA6.7
5B8E:  BSF    FA6.2
5B90:  MOVF   FF2,W
5B92:  MOVWF  00
5B94:  BCF    FF2.7
5B96:  MOVLB  F
5B98:  MOVLW  55
5B9A:  MOVWF  FA7
5B9C:  MOVLW  AA
5B9E:  MOVWF  FA7
5BA0:  BSF    FA6.1
5BA2:  BTFSC  FA6.1
5BA4:  BRA    5BA2
5BA6:  BCF    FA6.2
5BA8:  MOVF   00,W
5BAA:  IORWF  FF2,F
5BAC:  MOVLW  0C
5BAE:  MOVWF  FA9
5BB0:  MOVFF  2F,FA8
5BB4:  BCF    FA6.6
5BB6:  BCF    FA6.7
5BB8:  BSF    FA6.2
5BBA:  MOVF   FF2,W
5BBC:  MOVWF  00
5BBE:  BCF    FF2.7
5BC0:  MOVLW  55
5BC2:  MOVWF  FA7
5BC4:  MOVLW  AA
5BC6:  MOVWF  FA7
5BC8:  BSF    FA6.1
5BCA:  BTFSC  FA6.1
5BCC:  BRA    5BCA
5BCE:  BCF    FA6.2
5BD0:  MOVF   00,W
5BD2:  IORWF  FF2,F
5BD4:  MOVLW  0B
5BD6:  MOVWF  FA9
5BD8:  MOVFF  2D,FA8
5BDC:  BCF    FA6.6
5BDE:  BCF    FA6.7
5BE0:  BSF    FA6.2
5BE2:  MOVF   FF2,W
5BE4:  MOVWF  00
5BE6:  BCF    FF2.7
5BE8:  MOVLW  55
5BEA:  MOVWF  FA7
5BEC:  MOVLW  AA
5BEE:  MOVWF  FA7
5BF0:  BSF    FA6.1
5BF2:  BTFSC  FA6.1
5BF4:  BRA    5BF2
5BF6:  BCF    FA6.2
5BF8:  MOVF   00,W
5BFA:  IORWF  FF2,F
5BFC:  MOVLW  0D
5BFE:  MOVWF  FA9
5C00:  MOVFF  2A,FA8
5C04:  BCF    FA6.6
5C06:  BCF    FA6.7
5C08:  BSF    FA6.2
5C0A:  MOVF   FF2,W
5C0C:  MOVWF  00
5C0E:  BCF    FF2.7
5C10:  MOVLW  55
5C12:  MOVWF  FA7
5C14:  MOVLW  AA
5C16:  MOVWF  FA7
5C18:  BSF    FA6.1
5C1A:  BTFSC  FA6.1
5C1C:  BRA    5C1A
5C1E:  BCF    FA6.2
5C20:  MOVF   00,W
5C22:  IORWF  FF2,F
5C24:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
5C26:  BTFSC  4E.2
5C28:  BRA    5C32
5C2A:  MOVF   2D,W
5C2C:  SUBLW  14
5C2E:  BTFSS  FD8.2
5C30:  BRA    5D42
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
5C32:  BCF    4E.1
5C34:  BCF    4E.3
5C36:  MOVLW  0A
5C38:  MOVWF  2F
5C3A:  MOVWF  2E
5C3C:  CLRF   16
5C3E:  BTFSC  FF2.7
5C40:  BSF    16.7
5C42:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5C44:  MOVLW  01
5C46:  MOVLB  1
5C48:  MOVWF  x32
5C4A:  MOVLW  02
5C4C:  MOVWF  x33
5C4E:  MOVLB  0
5C50:  CALL   020C
5C54:  BTFSC  16.7
5C56:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Auto   "); 
5C58:  MOVLW  BC
5C5A:  MOVWF  FF6
5C5C:  MOVLW  0A
5C5E:  MOVWF  FF7
5C60:  CLRF   16
5C62:  BTFSC  FF2.7
5C64:  BSF    16.7
5C66:  BCF    FF2.7
5C68:  CALL   02F2
5C6C:  BTFSC  16.7
5C6E:  BSF    FF2.7
5C70:  CLRF   16
5C72:  BTFSC  FF2.7
5C74:  BSF    16.7
5C76:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5C78:  MOVLW  01
5C7A:  MOVLB  1
5C7C:  MOVWF  x32
5C7E:  MOVLW  03
5C80:  MOVWF  x33
5C82:  MOVLB  0
5C84:  CALL   020C
5C88:  BTFSC  16.7
5C8A:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
5C8C:  MOVLW  CC
5C8E:  MOVWF  FF6
5C90:  MOVLW  0A
5C92:  MOVWF  FF7
5C94:  CLRF   16
5C96:  BTFSC  FF2.7
5C98:  BSF    16.7
5C9A:  BCF    FF2.7
5C9C:  CALL   02F2
5CA0:  BTFSC  16.7
5CA2:  BSF    FF2.7
....................          if(LEFT) 
5CA4:  BSF    F93.1
5CA6:  BTFSS  F81.1
5CA8:  BRA    5D42
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5CAA:  BCF    4E.2
5CAC:  MOVLW  14
5CAE:  MOVWF  2D
5CB0:  MOVLW  0A
5CB2:  MOVWF  2F
5CB4:  MOVWF  2E
5CB6:  MOVLW  02
5CB8:  MOVLB  1
5CBA:  MOVWF  x00
5CBC:  CLRF   16
5CBE:  BTFSC  FF2.7
5CC0:  BSF    16.7
5CC2:  BCF    FF2.7
5CC4:  MOVLW  FA
5CC6:  MOVWF  x32
5CC8:  MOVLB  0
5CCA:  CALL   00B6
5CCE:  BTFSC  16.7
5CD0:  BSF    FF2.7
5CD2:  MOVLB  1
5CD4:  DECFSZ x00,F
5CD6:  BRA    5CBC
5CD8:  CLRF   16
5CDA:  BTFSC  FF2.7
5CDC:  BSF    16.7
5CDE:  BCF    FF2.7
5CE0:  MOVLW  0C
5CE2:  MOVWF  x31
5CE4:  MOVLB  0
5CE6:  CALL   0286
5CEA:  BTFSC  16.7
5CEC:  BSF    FF2.7
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
5CEE:  MOVLW  0B
5CF0:  MOVWF  FA9
5CF2:  MOVFF  2D,FA8
5CF6:  BCF    FA6.6
5CF8:  BCF    FA6.7
5CFA:  BSF    FA6.2
5CFC:  MOVF   FF2,W
5CFE:  MOVWF  00
5D00:  BCF    FF2.7
5D02:  MOVLB  F
5D04:  MOVLW  55
5D06:  MOVWF  FA7
5D08:  MOVLW  AA
5D0A:  MOVWF  FA7
5D0C:  BSF    FA6.1
5D0E:  BTFSC  FA6.1
5D10:  BRA    5D0E
5D12:  BCF    FA6.2
5D14:  MOVF   00,W
5D16:  IORWF  FF2,F
5D18:  MOVLW  0C
5D1A:  MOVWF  FA9
5D1C:  MOVFF  2F,FA8
5D20:  BCF    FA6.6
5D22:  BCF    FA6.7
5D24:  BSF    FA6.2
5D26:  MOVF   FF2,W
5D28:  MOVWF  00
5D2A:  BCF    FF2.7
5D2C:  MOVLW  55
5D2E:  MOVWF  FA7
5D30:  MOVLW  AA
5D32:  MOVWF  FA7
5D34:  BSF    FA6.1
5D36:  BTFSC  FA6.1
5D38:  BRA    5D36
5D3A:  BCF    FA6.2
5D3C:  MOVF   00,W
5D3E:  IORWF  FF2,F
5D40:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
5D42:  BTFSC  4E.3
5D44:  BRA    5D4E
5D46:  MOVF   2F,W
5D48:  SUBLW  14
5D4A:  BTFSS  FD8.2
5D4C:  BRA    5E98
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
5D4E:  BCF    4E.1
5D50:  BCF    4E.2
5D52:  MOVLW  0A
5D54:  MOVWF  2D
5D56:  MOVWF  2E
5D58:  CLRF   16
5D5A:  BTFSC  FF2.7
5D5C:  BSF    16.7
5D5E:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5D60:  MOVLW  01
5D62:  MOVLB  1
5D64:  MOVWF  x32
5D66:  MOVLW  02
5D68:  MOVWF  x33
5D6A:  MOVLB  0
5D6C:  CALL   020C
5D70:  BTFSC  16.7
5D72:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Semi   "); 
5D74:  MOVLW  E2
5D76:  MOVWF  FF6
5D78:  MOVLW  0A
5D7A:  MOVWF  FF7
5D7C:  CLRF   16
5D7E:  BTFSC  FF2.7
5D80:  BSF    16.7
5D82:  BCF    FF2.7
5D84:  CALL   02F2
5D88:  BTFSC  16.7
5D8A:  BSF    FF2.7
....................          if(UP) 
5D8C:  BSF    F93.3
5D8E:  BTFSS  F81.3
5D90:  BRA    5D94
....................          { 
....................             tmp++; 
5D92:  INCF   2A,F
....................              
....................          } 
....................           
....................          if(DOWN) 
5D94:  BSF    F93.2
5D96:  BTFSS  F81.2
5D98:  BRA    5D9C
....................          { 
....................             tmp--; 
5D9A:  DECF   2A,F
....................          } 
....................          ValorSemi=tmp; 
5D9C:  MOVFF  2A,30
....................          ajustar_damper(tmp); 
5DA0:  MOVFF  2A,FF
5DA4:  CALL   1946
....................          if(LEFT) 
5DA8:  BSF    F93.1
5DAA:  BTFSS  F81.1
5DAC:  BRA    5E98
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5DAE:  MOVLW  0D
5DB0:  MOVWF  FA9
5DB2:  MOVFF  2A,FA8
5DB6:  BCF    FA6.6
5DB8:  BCF    FA6.7
5DBA:  BSF    FA6.2
5DBC:  MOVF   FF2,W
5DBE:  MOVWF  00
5DC0:  BCF    FF2.7
5DC2:  MOVLB  F
5DC4:  MOVLW  55
5DC6:  MOVWF  FA7
5DC8:  MOVLW  AA
5DCA:  MOVWF  FA7
5DCC:  BSF    FA6.1
5DCE:  BTFSC  FA6.1
5DD0:  BRA    5DCE
5DD2:  BCF    FA6.2
5DD4:  MOVF   00,W
5DD6:  IORWF  FF2,F
5DD8:  BCF    4E.3
5DDA:  MOVLW  14
5DDC:  MOVWF  2F
5DDE:  MOVLW  0A
5DE0:  MOVWF  2D
5DE2:  MOVWF  2E
5DE4:  MOVLW  02
5DE6:  MOVLB  1
5DE8:  MOVWF  x00
5DEA:  CLRF   16
5DEC:  BTFSC  FF2.7
5DEE:  BSF    16.7
5DF0:  BCF    FF2.7
5DF2:  MOVLW  FA
5DF4:  MOVWF  x32
5DF6:  MOVLB  0
5DF8:  CALL   00B6
5DFC:  BTFSC  16.7
5DFE:  BSF    FF2.7
5E00:  MOVLB  1
5E02:  DECFSZ x00,F
5E04:  BRA    5DEA
5E06:  CLRF   16
5E08:  BTFSC  FF2.7
5E0A:  BSF    16.7
5E0C:  BCF    FF2.7
5E0E:  MOVLW  0C
5E10:  MOVWF  x31
5E12:  MOVLB  0
5E14:  CALL   0286
5E18:  BTFSC  16.7
5E1A:  BSF    FF2.7
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
5E1C:  MOVLW  0C
5E1E:  MOVWF  FA9
5E20:  MOVFF  2F,FA8
5E24:  BCF    FA6.6
5E26:  BCF    FA6.7
5E28:  BSF    FA6.2
5E2A:  MOVF   FF2,W
5E2C:  MOVWF  00
5E2E:  BCF    FF2.7
5E30:  MOVLB  F
5E32:  MOVLW  55
5E34:  MOVWF  FA7
5E36:  MOVLW  AA
5E38:  MOVWF  FA7
5E3A:  BSF    FA6.1
5E3C:  BTFSC  FA6.1
5E3E:  BRA    5E3C
5E40:  BCF    FA6.2
5E42:  MOVF   00,W
5E44:  IORWF  FF2,F
5E46:  MOVLW  0B
5E48:  MOVWF  FA9
5E4A:  MOVFF  2D,FA8
5E4E:  BCF    FA6.6
5E50:  BCF    FA6.7
5E52:  BSF    FA6.2
5E54:  MOVF   FF2,W
5E56:  MOVWF  00
5E58:  BCF    FF2.7
5E5A:  MOVLW  55
5E5C:  MOVWF  FA7
5E5E:  MOVLW  AA
5E60:  MOVWF  FA7
5E62:  BSF    FA6.1
5E64:  BTFSC  FA6.1
5E66:  BRA    5E64
5E68:  BCF    FA6.2
5E6A:  MOVF   00,W
5E6C:  IORWF  FF2,F
5E6E:  MOVLW  0A
5E70:  MOVWF  FA9
5E72:  MOVFF  2E,FA8
5E76:  BCF    FA6.6
5E78:  BCF    FA6.7
5E7A:  BSF    FA6.2
5E7C:  MOVF   FF2,W
5E7E:  MOVWF  00
5E80:  BCF    FF2.7
5E82:  MOVLW  55
5E84:  MOVWF  FA7
5E86:  MOVLW  AA
5E88:  MOVWF  FA7
5E8A:  BSF    FA6.1
5E8C:  BTFSC  FA6.1
5E8E:  BRA    5E8C
5E90:  BCF    FA6.2
5E92:  MOVF   00,W
5E94:  IORWF  FF2,F
5E96:  MOVLB  0
5E98:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
5E9A:  MOVF   18,W
5E9C:  SUBLW  14
5E9E:  BTFSS  FD8.2
5EA0:  BRA    6396
....................    { 
....................       if(Lectura2==1) 
5EA2:  BTFSS  35.6
5EA4:  BRA    6018
5EA6:  CLRF   16
5EA8:  BTFSC  FF2.7
5EAA:  BSF    16.7
5EAC:  BCF    FF2.7
....................       { 
....................       lcd_gotoxy(1,1);                      
5EAE:  MOVLW  01
5EB0:  MOVWF  x32
5EB2:  MOVWF  x33
5EB4:  MOVLB  0
5EB6:  CALL   020C
5EBA:  BTFSC  16.7
5EBC:  BSF    FF2.7
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
5EBE:  MOVLW  F2
5EC0:  MOVWF  FF6
5EC2:  MOVLW  0A
5EC4:  MOVWF  FF7
5EC6:  CLRF   16
5EC8:  BTFSC  FF2.7
5ECA:  BSF    16.7
5ECC:  BCF    FF2.7
5ECE:  CALL   02F2
5ED2:  BTFSC  16.7
5ED4:  BSF    FF2.7
5ED6:  CLRF   16
5ED8:  BTFSC  FF2.7
5EDA:  BSF    16.7
5EDC:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
5EDE:  MOVLW  01
5EE0:  MOVLB  1
5EE2:  MOVWF  x32
5EE4:  MOVLW  02
5EE6:  MOVWF  x33
5EE8:  MOVLB  0
5EEA:  CALL   020C
5EEE:  BTFSC  16.7
5EF0:  BSF    FF2.7
....................       printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
5EF2:  MOVLB  1
5EF4:  CLRF   x0A
5EF6:  MOVFF  2A,109
5EFA:  MOVLB  0
5EFC:  CALL   0C56
5F00:  MOVFF  00,100
5F04:  MOVFF  01,101
5F08:  MOVFF  02,102
5F0C:  MOVFF  03,103
5F10:  MOVFF  03,121
5F14:  MOVFF  02,120
5F18:  MOVFF  01,11F
5F1C:  MOVFF  00,11E
5F20:  MOVLB  1
5F22:  CLRF   x25
5F24:  CLRF   x24
5F26:  MOVLW  7F
5F28:  MOVWF  x23
5F2A:  MOVLW  86
5F2C:  MOVWF  x22
5F2E:  MOVLB  0
5F30:  CALL   0C8C
5F34:  MOVLB  1
5F36:  CLRF   x1D
5F38:  CLRF   x1C
5F3A:  MOVLW  48
5F3C:  MOVWF  x1B
5F3E:  MOVLW  85
5F40:  MOVWF  x1A
5F42:  MOVFF  03,121
5F46:  MOVFF  02,120
5F4A:  MOVFF  01,11F
5F4E:  MOVFF  00,11E
5F52:  MOVLB  0
5F54:  CALL   1490
5F58:  MOVFF  00,100
5F5C:  MOVFF  01,101
5F60:  MOVFF  02,102
5F64:  MOVFF  03,103
5F68:  MOVLW  FC
5F6A:  MOVWF  FF6
5F6C:  MOVLW  0A
5F6E:  MOVWF  FF7
5F70:  MOVLW  05
5F72:  MOVLB  1
5F74:  MOVWF  x08
5F76:  MOVLB  0
5F78:  CALL   1062
5F7C:  MOVLW  01
5F7E:  MOVWF  FE9
5F80:  MOVFF  103,10B
5F84:  MOVFF  102,10A
5F88:  MOVFF  101,109
5F8C:  MOVFF  100,108
5F90:  MOVLB  1
5F92:  CLRF   x0C
5F94:  MOVLB  0
5F96:  CALL   164A
5F9A:  CLRF   16
5F9C:  BTFSC  FF2.7
5F9E:  BSF    16.7
5FA0:  BCF    FF2.7
5FA2:  MOVLW  25
5FA4:  MOVLB  1
5FA6:  MOVWF  x31
5FA8:  MOVLB  0
5FAA:  CALL   0286
5FAE:  BTFSC  16.7
5FB0:  BSF    FF2.7
5FB2:  CLRF   16
5FB4:  BTFSC  FF2.7
5FB6:  BSF    16.7
5FB8:  BCF    FF2.7
....................       lcd_gotoxy(1,3); 
5FBA:  MOVLW  01
5FBC:  MOVLB  1
5FBE:  MOVWF  x32
5FC0:  MOVLW  03
5FC2:  MOVWF  x33
5FC4:  MOVLB  0
5FC6:  CALL   020C
5FCA:  BTFSC  16.7
5FCC:  BSF    FF2.7
....................       printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
5FCE:  MOVLW  0A
5FD0:  MOVWF  FF6
5FD2:  MOVLW  0B
5FD4:  MOVWF  FF7
5FD6:  MOVLW  08
5FD8:  MOVLB  1
5FDA:  MOVWF  x08
5FDC:  MOVLB  0
5FDE:  CALL   1062
5FE2:  MOVLW  01
5FE4:  MOVWF  FE9
5FE6:  MOVFF  8E,10B
5FEA:  MOVFF  8D,10A
5FEE:  MOVFF  8C,109
5FF2:  MOVFF  8B,108
5FF6:  MOVLB  1
5FF8:  MOVWF  x0C
5FFA:  MOVLB  0
5FFC:  CALL   164A
6000:  MOVLW  17
6002:  MOVWF  FF6
6004:  MOVLW  0B
6006:  MOVWF  FF7
6008:  MOVLW  07
600A:  MOVLB  1
600C:  MOVWF  x08
600E:  MOVLB  0
6010:  CALL   1062
....................       Lectura2=0; 
6014:  BCF    35.6
6016:  MOVLB  1
....................       } 
....................        
....................       if(horas==60) 
6018:  MOVF   33,W
601A:  SUBLW  3C
601C:  BNZ   6054
601E:  CLRF   16
6020:  BTFSC  FF2.7
6022:  BSF    16.7
6024:  BCF    FF2.7
....................       { 
....................          lcd_gotoxy(10,1);                      
6026:  MOVLW  0A
6028:  MOVWF  x32
602A:  MOVLW  01
602C:  MOVWF  x33
602E:  MOVLB  0
6030:  CALL   020C
6034:  BTFSC  16.7
6036:  BSF    FF2.7
....................          printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
6038:  MOVLW  20
603A:  MOVWF  FF6
603C:  MOVLW  0B
603E:  MOVWF  FF7
6040:  CLRF   16
6042:  BTFSC  FF2.7
6044:  BSF    16.7
6046:  BCF    FF2.7
6048:  CALL   02F2
604C:  BTFSC  16.7
604E:  BSF    FF2.7
....................       } 
....................       else 
6050:  BRA    6086
6052:  MOVLB  1
6054:  CLRF   16
6056:  BTFSC  FF2.7
6058:  BSF    16.7
605A:  BCF    FF2.7
....................       { 
....................          lcd_gotoxy(10,1);                      
605C:  MOVLW  0A
605E:  MOVWF  x32
6060:  MOVLW  01
6062:  MOVWF  x33
6064:  MOVLB  0
6066:  CALL   020C
606A:  BTFSC  16.7
606C:  BSF    FF2.7
....................          printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
606E:  MOVLW  2C
6070:  MOVWF  FF6
6072:  MOVLW  0B
6074:  MOVWF  FF7
6076:  CLRF   16
6078:  BTFSC  FF2.7
607A:  BSF    16.7
607C:  BCF    FF2.7
607E:  CALL   02F2
6082:  BTFSC  16.7
6084:  BSF    FF2.7
....................       } 
....................        
....................       if(iniciodamper==0) 
6086:  BTFSC  4E.0
6088:  BRA    60C2
....................       { 
....................          flag_iniciodamper=1; 
608A:  BSF    35.7
608C:  CLRF   16
608E:  BTFSC  FF2.7
6090:  BSF    16.7
6092:  BCF    FF2.7
....................          lcd_gotoxy(11,2); 
6094:  MOVLW  0B
6096:  MOVLB  1
6098:  MOVWF  x32
609A:  MOVLW  02
609C:  MOVWF  x33
609E:  MOVLB  0
60A0:  CALL   020C
60A4:  BTFSC  16.7
60A6:  BSF    FF2.7
....................          printf(lcd_putc,"Flujo=Ajus"); 
60A8:  MOVLW  38
60AA:  MOVWF  FF6
60AC:  MOVLW  0B
60AE:  MOVWF  FF7
60B0:  CLRF   16
60B2:  BTFSC  FF2.7
60B4:  BSF    16.7
60B6:  BCF    FF2.7
60B8:  CALL   02F2
60BC:  BTFSC  16.7
60BE:  BSF    FF2.7
....................       } 
....................       else 
60C0:  BRA    61AC
....................       { 
....................          flag_iniciodamper=0; 
60C2:  BCF    35.7
....................          if(Flujo<0.5) 
60C4:  MOVFF  8E,11D
60C8:  MOVFF  8D,11C
60CC:  MOVFF  8C,11B
60D0:  MOVFF  8B,11A
60D4:  MOVLB  1
60D6:  CLRF   x21
60D8:  CLRF   x20
60DA:  CLRF   x1F
60DC:  MOVLW  7E
60DE:  MOVWF  x1E
60E0:  MOVLB  0
60E2:  CALL   182C
60E6:  BNC   611E
60E8:  CLRF   16
60EA:  BTFSC  FF2.7
60EC:  BSF    16.7
60EE:  BCF    FF2.7
....................          { 
....................             lcd_gotoxy(11,2); 
60F0:  MOVLW  0B
60F2:  MOVLB  1
60F4:  MOVWF  x32
60F6:  MOVLW  02
60F8:  MOVWF  x33
60FA:  MOVLB  0
60FC:  CALL   020C
6100:  BTFSC  16.7
6102:  BSF    FF2.7
....................             printf(lcd_putc,"Flujo=Bajo");       
6104:  MOVLW  44
6106:  MOVWF  FF6
6108:  MOVLW  0B
610A:  MOVWF  FF7
610C:  CLRF   16
610E:  BTFSC  FF2.7
6110:  BSF    16.7
6112:  BCF    FF2.7
6114:  CALL   02F2
6118:  BTFSC  16.7
611A:  BSF    FF2.7
....................          } 
....................          else 
611C:  BRA    61AC
....................          { 
....................             if(Flujo>2.0) 
611E:  MOVLB  1
6120:  CLRF   x1D
6122:  CLRF   x1C
6124:  CLRF   x1B
6126:  MOVLW  80
6128:  MOVWF  x1A
612A:  MOVFF  8E,121
612E:  MOVFF  8D,120
6132:  MOVFF  8C,11F
6136:  MOVFF  8B,11E
613A:  MOVLB  0
613C:  CALL   182C
6140:  BNC   6178
6142:  CLRF   16
6144:  BTFSC  FF2.7
6146:  BSF    16.7
6148:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
614A:  MOVLW  0B
614C:  MOVLB  1
614E:  MOVWF  x32
6150:  MOVLW  02
6152:  MOVWF  x33
6154:  MOVLB  0
6156:  CALL   020C
615A:  BTFSC  16.7
615C:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=Alto");                
615E:  MOVLW  50
6160:  MOVWF  FF6
6162:  MOVLW  0B
6164:  MOVWF  FF7
6166:  CLRF   16
6168:  BTFSC  FF2.7
616A:  BSF    16.7
616C:  BCF    FF2.7
616E:  CALL   02F2
6172:  BTFSC  16.7
6174:  BSF    FF2.7
....................             } 
....................             else 
6176:  BRA    61AC
6178:  CLRF   16
617A:  BTFSC  FF2.7
617C:  BSF    16.7
617E:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
6180:  MOVLW  0B
6182:  MOVLB  1
6184:  MOVWF  x32
6186:  MOVLW  02
6188:  MOVWF  x33
618A:  MOVLB  0
618C:  CALL   020C
6190:  BTFSC  16.7
6192:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=OK  ");       
6194:  MOVLW  5C
6196:  MOVWF  FF6
6198:  MOVLW  0B
619A:  MOVWF  FF7
619C:  CLRF   16
619E:  BTFSC  FF2.7
61A0:  BSF    16.7
61A2:  BCF    FF2.7
61A4:  CALL   02F2
61A8:  BTFSC  16.7
61AA:  BSF    FF2.7
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
61AC:  BTFSS  34.0
61AE:  BRA    61EA
....................       { 
....................          Luz_Blanca_on; 
61B0:  BSF    F8A.4
61B2:  BCF    F93.4
61B4:  CLRF   16
61B6:  BTFSC  FF2.7
61B8:  BSF    16.7
61BA:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
61BC:  MOVLW  01
61BE:  MOVLB  1
61C0:  MOVWF  x32
61C2:  MOVLW  04
61C4:  MOVWF  x33
61C6:  MOVLB  0
61C8:  CALL   020C
61CC:  BTFSC  16.7
61CE:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:ON "); 
61D0:  MOVLW  68
61D2:  MOVWF  FF6
61D4:  MOVLW  0B
61D6:  MOVWF  FF7
61D8:  CLRF   16
61DA:  BTFSC  FF2.7
61DC:  BSF    16.7
61DE:  BCF    FF2.7
61E0:  CALL   02F2
61E4:  BTFSC  16.7
61E6:  BSF    FF2.7
....................       } 
....................       else 
61E8:  BRA    6222
....................       { 
....................          Luz_Blanca_off; 
61EA:  BCF    F8A.4
61EC:  BCF    F93.4
61EE:  CLRF   16
61F0:  BTFSC  FF2.7
61F2:  BSF    16.7
61F4:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
61F6:  MOVLW  01
61F8:  MOVLB  1
61FA:  MOVWF  x32
61FC:  MOVLW  04
61FE:  MOVWF  x33
6200:  MOVLB  0
6202:  CALL   020C
6206:  BTFSC  16.7
6208:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:OFF "); 
620A:  MOVLW  70
620C:  MOVWF  FF6
620E:  MOVLW  0B
6210:  MOVWF  FF7
6212:  CLRF   16
6214:  BTFSC  FF2.7
6216:  BSF    16.7
6218:  BCF    FF2.7
621A:  CALL   02F2
621E:  BTFSC  16.7
6220:  BSF    FF2.7
....................       } 
....................        
....................       if(estadomv==1) 
6222:  BTFSS  34.1
6224:  BRA    6264
....................       { 
....................          if(iniciodamper==1) 
6226:  BTFSS  4E.0
6228:  BRA    622E
....................          { 
....................             Motor_on; 
622A:  BSF    F8B.0
622C:  BCF    F94.0
622E:  CLRF   16
6230:  BTFSC  FF2.7
6232:  BSF    16.7
6234:  BCF    FF2.7
....................          }          
....................          lcd_gotoxy(10,4); 
6236:  MOVLW  0A
6238:  MOVLB  1
623A:  MOVWF  x32
623C:  MOVLW  04
623E:  MOVWF  x33
6240:  MOVLB  0
6242:  CALL   020C
6246:  BTFSC  16.7
6248:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:ON "); 
624A:  MOVLW  7A
624C:  MOVWF  FF6
624E:  MOVLW  0B
6250:  MOVWF  FF7
6252:  CLRF   16
6254:  BTFSC  FF2.7
6256:  BSF    16.7
6258:  BCF    FF2.7
625A:  CALL   02F2
625E:  BTFSC  16.7
6260:  BSF    FF2.7
....................       } 
....................       else 
6262:  BRA    62A0
....................       { 
....................          if(iniciodamper==1) 
6264:  BTFSS  4E.0
6266:  BRA    626C
....................          { 
....................             Motor_off;      
6268:  BCF    F8B.0
626A:  BCF    F94.0
626C:  CLRF   16
626E:  BTFSC  FF2.7
6270:  BSF    16.7
6272:  BCF    FF2.7
....................          } 
....................          lcd_gotoxy(10,4); 
6274:  MOVLW  0A
6276:  MOVLB  1
6278:  MOVWF  x32
627A:  MOVLW  04
627C:  MOVWF  x33
627E:  MOVLB  0
6280:  CALL   020C
6284:  BTFSC  16.7
6286:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:OFF ");  
6288:  MOVLW  84
628A:  MOVWF  FF6
628C:  MOVLW  0B
628E:  MOVWF  FF7
6290:  CLRF   16
6292:  BTFSC  FF2.7
6294:  BSF    16.7
6296:  BCF    FF2.7
6298:  CALL   02F2
629C:  BTFSC  16.7
629E:  BSF    FF2.7
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
62A0:  BSF    F93.2
62A2:  BTFSS  F81.2
62A4:  BRA    62C8
....................       {  if(Flanco == 0)  
62A6:  BTFSC  34.4
62A8:  BRA    62C6
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
62AA:  BSF    34.4
62AC:  CLRF   16
62AE:  BTFSC  FF2.7
62B0:  BSF    16.7
62B2:  BCF    FF2.7
62B4:  MOVLW  C8
62B6:  MOVLB  1
62B8:  MOVWF  x32
62BA:  MOVLB  0
62BC:  CALL   00B6
62C0:  BTFSC  16.7
62C2:  BSF    FF2.7
62C4:  BTG    34.0
....................          else 
62C6:  BRA    62CA
....................             {Flanco = 0;} 
62C8:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
62CA:  BSF    F93.1
62CC:  BTFSS  F81.1
62CE:  BRA    62F2
....................       {  if(Flanco2 == 0)  
62D0:  BTFSC  34.6
62D2:  BRA    62F0
....................             {Flanco2 = 1;delay_ms(200);estadomv=!estadomv;}} 
62D4:  BSF    34.6
62D6:  CLRF   16
62D8:  BTFSC  FF2.7
62DA:  BSF    16.7
62DC:  BCF    FF2.7
62DE:  MOVLW  C8
62E0:  MOVLB  1
62E2:  MOVWF  x32
62E4:  MOVLB  0
62E6:  CALL   00B6
62EA:  BTFSC  16.7
62EC:  BSF    FF2.7
62EE:  BTG    34.1
....................          else 
62F0:  BRA    62F4
....................             {Flanco2 = 0;} 
62F2:  BCF    34.6
....................     
....................       if(UP)// Si oprime Arriba 
62F4:  BSF    F93.3
62F6:  BTFSS  F81.3
62F8:  BRA    6348
....................       {  if(Flanco1 == 0)  
62FA:  BTFSC  34.5
62FC:  BRA    6346
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
62FE:  MOVLW  02
6300:  MOVLB  1
6302:  MOVWF  x00
6304:  CLRF   16
6306:  BTFSC  FF2.7
6308:  BSF    16.7
630A:  BCF    FF2.7
630C:  MOVLW  FA
630E:  MOVWF  x32
6310:  MOVLB  0
6312:  CALL   00B6
6316:  BTFSC  16.7
6318:  BSF    FF2.7
631A:  MOVLB  1
631C:  DECFSZ x00,F
631E:  BRA    6304
6320:  CLRF   16
6322:  BTFSC  FF2.7
6324:  BSF    16.7
6326:  BCF    FF2.7
6328:  MOVLW  0C
632A:  MOVWF  x31
632C:  MOVLB  0
632E:  CALL   0286
6332:  BTFSC  16.7
6334:  BSF    FF2.7
6336:  MOVLW  01
6338:  MOVWF  18
633A:  CLRF   36
633C:  MOVLW  02
633E:  MOVWF  1C
6340:  MOVWF  1E
6342:  MOVLW  0B
6344:  MOVWF  1B
....................          else 
6346:  BRA    634A
....................             {Flanco1 = 0;}    
6348:  BCF    34.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
634A:  BSF    F93.0
634C:  BTFSS  F81.0
634E:  BRA    6392
....................       {  if(Flanco3 == 0)  
6350:  BTFSC  34.7
6352:  BRA    6390
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
6354:  MOVLW  02
6356:  MOVLB  1
6358:  MOVWF  x00
635A:  CLRF   16
635C:  BTFSC  FF2.7
635E:  BSF    16.7
6360:  BCF    FF2.7
6362:  MOVLW  FA
6364:  MOVWF  x32
6366:  MOVLB  0
6368:  CALL   00B6
636C:  BTFSC  16.7
636E:  BSF    FF2.7
6370:  MOVLB  1
6372:  DECFSZ x00,F
6374:  BRA    635A
6376:  CLRF   16
6378:  BTFSC  FF2.7
637A:  BSF    16.7
637C:  BCF    FF2.7
637E:  MOVLW  0C
6380:  MOVWF  x31
6382:  MOVLB  0
6384:  CALL   0286
6388:  BTFSC  16.7
638A:  BSF    FF2.7
638C:  MOVLW  28
638E:  MOVWF  18
....................          else 
6390:  BRA    6394
....................             {Flanco3 = 0;}     
6392:  BCF    34.7
6394:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
6396:  MOVF   18,W
6398:  SUBLW  1E
639A:  BTFSS  FD8.2
639C:  BRA    667A
639E:  CLRF   16
63A0:  BTFSC  FF2.7
63A2:  BSF    16.7
63A4:  BCF    FF2.7
....................       lcd_gotoxy(1,1); 
63A6:  MOVLW  01
63A8:  MOVWF  x32
63AA:  MOVWF  x33
63AC:  MOVLB  0
63AE:  CALL   020C
63B2:  BTFSC  16.7
63B4:  BSF    FF2.7
....................       printf(lcd_putc,"     Apagando     "); 
63B6:  MOVLW  90
63B8:  MOVWF  FF6
63BA:  MOVLW  0B
63BC:  MOVWF  FF7
63BE:  CLRF   16
63C0:  BTFSC  FF2.7
63C2:  BSF    16.7
63C4:  BCF    FF2.7
63C6:  CALL   02F2
63CA:  BTFSC  16.7
63CC:  BSF    FF2.7
63CE:  CLRF   16
63D0:  BTFSC  FF2.7
63D2:  BSF    16.7
63D4:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
63D6:  MOVLW  01
63D8:  MOVLB  1
63DA:  MOVWF  x32
63DC:  MOVLW  02
63DE:  MOVWF  x33
63E0:  MOVLB  0
63E2:  CALL   020C
63E6:  BTFSC  16.7
63E8:  BSF    FF2.7
....................       printf(lcd_putc,"      Cabina      "); 
63EA:  MOVLW  A4
63EC:  MOVWF  FF6
63EE:  MOVLW  0B
63F0:  MOVWF  FF7
63F2:  CLRF   16
63F4:  BTFSC  FF2.7
63F6:  BSF    16.7
63F8:  BCF    FF2.7
63FA:  CALL   02F2
63FE:  BTFSC  16.7
6400:  BSF    FF2.7
6402:  CLRF   16
6404:  BTFSC  FF2.7
6406:  BSF    16.7
6408:  BCF    FF2.7
....................        
....................       lcd_gotoxy(1,3); 
640A:  MOVLW  01
640C:  MOVLB  1
640E:  MOVWF  x32
6410:  MOVLW  03
6412:  MOVWF  x33
6414:  MOVLB  0
6416:  CALL   020C
641A:  BTFSC  16.7
641C:  BSF    FF2.7
....................       printf(lcd_putc," Espere"); 
641E:  MOVLW  B8
6420:  MOVWF  FF6
6422:  MOVLW  0B
6424:  MOVWF  FF7
6426:  CLRF   16
6428:  BTFSC  FF2.7
642A:  BSF    16.7
642C:  BCF    FF2.7
642E:  CALL   02F2
6432:  BTFSC  16.7
6434:  BSF    FF2.7
....................        
....................       if(Lectura==1) 
6436:  BTFSS  35.5
6438:  BRA    6676
....................       {ajustar_damper(0); 
643A:  CLRF   xFF
643C:  CALL   1946
....................        
....................          if(n<8) 
6440:  MOVF   27,W
6442:  SUBLW  07
6444:  BNC   6482
....................          { 
....................             lcd_gotoxy(9+n,3); 
6446:  MOVLW  09
6448:  ADDWF  27,W
644A:  MOVLB  1
644C:  MOVWF  x00
644E:  CLRF   16
6450:  BTFSC  FF2.7
6452:  BSF    16.7
6454:  BCF    FF2.7
6456:  MOVWF  x32
6458:  MOVLW  03
645A:  MOVWF  x33
645C:  MOVLB  0
645E:  CALL   020C
6462:  BTFSC  16.7
6464:  BSF    FF2.7
6466:  CLRF   16
6468:  BTFSC  FF2.7
646A:  BSF    16.7
646C:  BCF    FF2.7
....................             printf(lcd_putc,"."); 
646E:  MOVLW  2E
6470:  MOVLB  1
6472:  MOVWF  x31
6474:  MOVLB  0
6476:  CALL   0286
647A:  BTFSC  16.7
647C:  BSF    FF2.7
....................             n++; 
647E:  INCF   27,F
....................          } 
....................          else 
6480:  BRA    64B8
....................          { 
....................             n=0;lcd_gotoxy(1,3); 
6482:  CLRF   27
6484:  CLRF   16
6486:  BTFSC  FF2.7
6488:  BSF    16.7
648A:  BCF    FF2.7
648C:  MOVLW  01
648E:  MOVLB  1
6490:  MOVWF  x32
6492:  MOVLW  03
6494:  MOVWF  x33
6496:  MOVLB  0
6498:  CALL   020C
649C:  BTFSC  16.7
649E:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
64A0:  MOVLW  C0
64A2:  MOVWF  FF6
64A4:  MOVLW  0B
64A6:  MOVWF  FF7
64A8:  CLRF   16
64AA:  BTFSC  FF2.7
64AC:  BSF    16.7
64AE:  BCF    FF2.7
64B0:  CALL   02F2
64B4:  BTFSC  16.7
64B6:  BSF    FF2.7
....................          } 
....................        
....................       if(sensores(2)<512) 
64B8:  MOVLW  02
64BA:  MOVLB  1
64BC:  MOVWF  x04
64BE:  MOVLB  0
64C0:  CALL   18E2
64C4:  MOVFF  00,100
64C8:  MOVFF  01,101
64CC:  MOVFF  02,102
64D0:  MOVFF  03,103
64D4:  MOVFF  03,11D
64D8:  MOVFF  02,11C
64DC:  MOVFF  01,11B
64E0:  MOVFF  00,11A
64E4:  MOVLB  1
64E6:  CLRF   x21
64E8:  CLRF   x20
64EA:  CLRF   x1F
64EC:  MOVLW  88
64EE:  MOVWF  x1E
64F0:  MOVLB  0
64F2:  CALL   182C
64F6:  BNC   64FC
....................       { 
....................          Motor_off; 
64F8:  BCF    F8B.0
64FA:  BCF    F94.0
....................       } 
....................        
....................       if(sensores(2)<6) 
64FC:  MOVLW  02
64FE:  MOVLB  1
6500:  MOVWF  x04
6502:  MOVLB  0
6504:  CALL   18E2
6508:  MOVFF  00,100
650C:  MOVFF  01,101
6510:  MOVFF  02,102
6514:  MOVFF  03,103
6518:  MOVFF  03,11D
651C:  MOVFF  02,11C
6520:  MOVFF  01,11B
6524:  MOVFF  00,11A
6528:  MOVLB  1
652A:  CLRF   x21
652C:  CLRF   x20
652E:  MOVLW  40
6530:  MOVWF  x1F
6532:  MOVLW  81
6534:  MOVWF  x1E
6536:  MOVLB  0
6538:  CALL   182C
653C:  BTFSS  FD8.0
653E:  BRA    6674
....................       { 
....................          write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
6540:  MOVLW  46
6542:  MOVWF  FA9
6544:  MOVFF  31,FA8
6548:  BCF    FA6.6
654A:  BCF    FA6.7
654C:  BSF    FA6.2
654E:  MOVF   FF2,W
6550:  MOVWF  00
6552:  BCF    FF2.7
6554:  MOVLB  F
6556:  MOVLW  55
6558:  MOVWF  FA7
655A:  MOVLW  AA
655C:  MOVWF  FA7
655E:  BSF    FA6.1
6560:  BTFSC  FA6.1
6562:  BRA    6560
6564:  BCF    FA6.2
6566:  MOVF   00,W
6568:  IORWF  FF2,F
656A:  MOVLW  47
656C:  MOVWF  FA9
656E:  MOVFF  32,FA8
6572:  BCF    FA6.6
6574:  BCF    FA6.7
6576:  BSF    FA6.2
6578:  MOVF   FF2,W
657A:  MOVWF  00
657C:  BCF    FF2.7
657E:  MOVLW  55
6580:  MOVWF  FA7
6582:  MOVLW  AA
6584:  MOVWF  FA7
6586:  BSF    FA6.1
6588:  BTFSC  FA6.1
658A:  BRA    6588
658C:  BCF    FA6.2
658E:  MOVF   00,W
6590:  IORWF  FF2,F
6592:  MOVLW  48
6594:  MOVWF  FA9
6596:  MOVFF  33,FA8
659A:  BCF    FA6.6
659C:  BCF    FA6.7
659E:  BSF    FA6.2
65A0:  MOVF   FF2,W
65A2:  MOVWF  00
65A4:  BCF    FF2.7
65A6:  MOVLW  55
65A8:  MOVWF  FA7
65AA:  MOVLW  AA
65AC:  MOVWF  FA7
65AE:  BSF    FA6.1
65B0:  BTFSC  FA6.1
65B2:  BRA    65B0
65B4:  BCF    FA6.2
65B6:  MOVF   00,W
65B8:  IORWF  FF2,F
65BA:  CLRF   16
65BC:  BTFSC  FF2.7
65BE:  BSF    16.7
65C0:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
65C2:  MOVLW  0C
65C4:  MOVLB  1
65C6:  MOVWF  x31
65C8:  MOVLB  0
65CA:  CALL   0286
65CE:  BTFSC  16.7
65D0:  BSF    FF2.7
65D2:  CLRF   16
65D4:  BTFSC  FF2.7
65D6:  BSF    16.7
65D8:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
65DA:  MOVLW  01
65DC:  MOVLB  1
65DE:  MOVWF  x32
65E0:  MOVLW  02
65E2:  MOVWF  x33
65E4:  MOVLB  0
65E6:  CALL   020C
65EA:  BTFSC  16.7
65EC:  BSF    FF2.7
....................          printf(lcd_putc,"     Proceso      "); 
65EE:  MOVLW  D6
65F0:  MOVWF  FF6
65F2:  MOVLW  0B
65F4:  MOVWF  FF7
65F6:  CLRF   16
65F8:  BTFSC  FF2.7
65FA:  BSF    16.7
65FC:  BCF    FF2.7
65FE:  CALL   02F2
6602:  BTFSC  16.7
6604:  BSF    FF2.7
6606:  CLRF   16
6608:  BTFSC  FF2.7
660A:  BSF    16.7
660C:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
660E:  MOVLW  01
6610:  MOVLB  1
6612:  MOVWF  x32
6614:  MOVLW  03
6616:  MOVWF  x33
6618:  MOVLB  0
661A:  CALL   020C
661E:  BTFSC  16.7
6620:  BSF    FF2.7
....................          printf(lcd_putc,"    Finalizado    "); 
6622:  MOVLW  EA
6624:  MOVWF  FF6
6626:  MOVLW  0B
6628:  MOVWF  FF7
662A:  CLRF   16
662C:  BTFSC  FF2.7
662E:  BSF    16.7
6630:  BCF    FF2.7
6632:  CALL   02F2
6636:  BTFSC  16.7
6638:  BSF    FF2.7
....................          delay_ms(2000); 
663A:  MOVLW  08
663C:  MOVLB  1
663E:  MOVWF  x00
6640:  CLRF   16
6642:  BTFSC  FF2.7
6644:  BSF    16.7
6646:  BCF    FF2.7
6648:  MOVLW  FA
664A:  MOVWF  x32
664C:  MOVLB  0
664E:  CALL   00B6
6652:  BTFSC  16.7
6654:  BSF    FF2.7
6656:  MOVLB  1
6658:  DECFSZ x00,F
665A:  BRA    6640
665C:  CLRF   16
665E:  BTFSC  FF2.7
6660:  BSF    16.7
6662:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
6664:  MOVLW  0C
6666:  MOVWF  x31
6668:  MOVLB  0
666A:  CALL   0286
666E:  BTFSC  16.7
6670:  BSF    FF2.7
....................          reset_cpu(); 
6672:  RESET
....................       } 
....................       Lectura=0; 
6674:  BCF    35.5
....................       }   
....................    } 
6676:  MOVLB  1
6678:  BRA    6396
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
667A:  MOVF   18,W
667C:  SUBLW  28
667E:  BTFSS  FD8.2
6680:  BRA    67E4
6682:  CLRF   16
6684:  BTFSC  FF2.7
6686:  BSF    16.7
6688:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
668A:  MOVLW  01
668C:  MOVWF  x32
668E:  MOVWF  x33
6690:  MOVLB  0
6692:  CALL   020C
6696:  BTFSC  16.7
6698:  BSF    FF2.7
....................    printf(lcd_putc,"   Desea apagar     "); 
669A:  MOVLW  FE
669C:  MOVWF  FF6
669E:  MOVLW  0B
66A0:  MOVWF  FF7
66A2:  CLRF   16
66A4:  BTFSC  FF2.7
66A6:  BSF    16.7
66A8:  BCF    FF2.7
66AA:  CALL   02F2
66AE:  BTFSC  16.7
66B0:  BSF    FF2.7
66B2:  CLRF   16
66B4:  BTFSC  FF2.7
66B6:  BSF    16.7
66B8:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
66BA:  MOVLW  01
66BC:  MOVLB  1
66BE:  MOVWF  x32
66C0:  MOVLW  02
66C2:  MOVWF  x33
66C4:  MOVLB  0
66C6:  CALL   020C
66CA:  BTFSC  16.7
66CC:  BSF    FF2.7
....................    printf(lcd_putc,"     la cabina      "); 
66CE:  MOVLW  14
66D0:  MOVWF  FF6
66D2:  MOVLW  0C
66D4:  MOVWF  FF7
66D6:  CLRF   16
66D8:  BTFSC  FF2.7
66DA:  BSF    16.7
66DC:  BCF    FF2.7
66DE:  CALL   02F2
66E2:  BTFSC  16.7
66E4:  BSF    FF2.7
66E6:  CLRF   16
66E8:  BTFSC  FF2.7
66EA:  BSF    16.7
66EC:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
66EE:  MOVLW  01
66F0:  MOVLB  1
66F2:  MOVWF  x32
66F4:  MOVLW  03
66F6:  MOVWF  x33
66F8:  MOVLB  0
66FA:  CALL   020C
66FE:  BTFSC  16.7
6700:  BSF    FF2.7
....................    printf(lcd_putc,"   > Aceptar        "); 
6702:  MOVLW  2A
6704:  MOVWF  FF6
6706:  MOVLW  0C
6708:  MOVWF  FF7
670A:  CLRF   16
670C:  BTFSC  FF2.7
670E:  BSF    16.7
6710:  BCF    FF2.7
6712:  CALL   02F2
6716:  BTFSC  16.7
6718:  BSF    FF2.7
671A:  CLRF   16
671C:  BTFSC  FF2.7
671E:  BSF    16.7
6720:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
6722:  MOVLW  01
6724:  MOVLB  1
6726:  MOVWF  x32
6728:  MOVLW  04
672A:  MOVWF  x33
672C:  MOVLB  0
672E:  CALL   020C
6732:  BTFSC  16.7
6734:  BSF    FF2.7
....................    printf(lcd_putc,"   < Cancelar       "); 
6736:  MOVLW  40
6738:  MOVWF  FF6
673A:  MOVLW  0C
673C:  MOVWF  FF7
673E:  CLRF   16
6740:  BTFSC  FF2.7
6742:  BSF    16.7
6744:  BCF    FF2.7
6746:  CALL   02F2
674A:  BTFSC  16.7
674C:  BSF    FF2.7
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
674E:  BSF    F93.0
6750:  BTFSS  F81.0
6752:  BRA    6790
....................       {  if(Flanco1 == 0)  
6754:  BTFSC  34.5
6756:  BRA    678E
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
6758:  BSF    34.5
675A:  MOVLW  1E
675C:  MOVWF  18
675E:  CLRF   16
6760:  BTFSC  FF2.7
6762:  BSF    16.7
6764:  BCF    FF2.7
6766:  MOVFF  21,12F
676A:  CALL   01F8
676E:  BTFSC  16.7
6770:  BSF    FF2.7
6772:  BCF    F8A.6
6774:  BCF    F93.6
6776:  CLRF   16
6778:  BTFSC  FF2.7
677A:  BSF    16.7
677C:  BCF    FF2.7
677E:  MOVLW  0C
6780:  MOVLB  1
6782:  MOVWF  x31
6784:  MOVLB  0
6786:  CALL   0286
678A:  BTFSC  16.7
678C:  BSF    FF2.7
....................             }} 
....................          else 
678E:  BRA    6792
....................             {Flanco1 = 0;}    
6790:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
6792:  BSF    F93.1
6794:  BTFSS  F81.1
6796:  BRA    67E0
....................       {  if(Flanco3 == 0)  
6798:  BTFSC  34.7
679A:  BRA    67DE
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
679C:  BSF    34.7
679E:  MOVLW  14
67A0:  MOVWF  18
67A2:  CLRF   36
67A4:  MOVLW  02
67A6:  MOVWF  1C
67A8:  MOVWF  1E
67AA:  MOVLW  0B
67AC:  MOVWF  1B
67AE:  CLRF   16
67B0:  BTFSC  FF2.7
67B2:  BSF    16.7
67B4:  BCF    FF2.7
67B6:  MOVLW  1E
67B8:  MOVLB  1
67BA:  MOVWF  x32
67BC:  MOVLB  0
67BE:  CALL   00B6
67C2:  BTFSC  16.7
67C4:  BSF    FF2.7
67C6:  CLRF   16
67C8:  BTFSC  FF2.7
67CA:  BSF    16.7
67CC:  BCF    FF2.7
67CE:  MOVLW  0C
67D0:  MOVLB  1
67D2:  MOVWF  x31
67D4:  MOVLB  0
67D6:  CALL   0286
67DA:  BTFSC  16.7
67DC:  BSF    FF2.7
....................          else 
67DE:  BRA    67E2
....................             {Flanco3 = 0;}     
67E0:  BCF    34.7
67E2:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(ModoSleep==1) 
67E4:  BTFSS  35.3
67E6:  BRA    6800
67E8:  CLRF   16
67EA:  BTFSC  FF2.7
67EC:  BSF    16.7
67EE:  BCF    FF2.7
....................       {intensidadpantalla(0);sleep();} 
67F0:  CLRF   x2F
67F2:  MOVLB  0
67F4:  CALL   01F8
67F8:  BTFSC  16.7
67FA:  BSF    FF2.7
67FC:  SLEEP 
67FE:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
6800:  MOVF   18,F
6802:  BNZ   680A
6804:  MOVF   18,W
6806:  SUBLW  1E
6808:  BZ    68E6
....................    { 
....................       if(Lectura==1) 
680A:  BTFSS  35.5
680C:  BRA    68E6
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
680E:  MOVFF  2B,FF
6812:  MOVLB  0
6814:  GOTO   1E70
6818:  MOVFF  03,8E
681C:  MOVFF  02,8D
6820:  MOVFF  01,8C
6824:  MOVFF  00,8B
....................         if(iniciodamper==1) 
6828:  BTFSS  4E.0
682A:  BRA    68C2
....................         { 
....................             controlar_flujo(); 
682C:  GOTO   2502
....................           
....................             if(Flujo<0.5 && iniciodamper==1) 
6830:  MOVFF  8E,11D
6834:  MOVFF  8D,11C
6838:  MOVFF  8C,11B
683C:  MOVFF  8B,11A
6840:  MOVLB  1
6842:  CLRF   x21
6844:  CLRF   x20
6846:  CLRF   x1F
6848:  MOVLW  7E
684A:  MOVWF  x1E
684C:  MOVLB  0
684E:  CALL   182C
6852:  BNC   68A0
6854:  BTFSS  4E.0
6856:  BRA    68A0
....................             { 
....................                flag_latencia=1; 
6858:  BSF    35.0
....................                 
....................                if(Latencia==1) 
685A:  BTFSS  35.1
685C:  BRA    689E
....................                { 
....................                   if(estadoalarma==1) 
685E:  BTFSS  34.2
6860:  BRA    6868
....................                   { 
....................                      Alarma_on; 
6862:  BSF    F8A.6
6864:  BCF    F93.6
....................                   } 
....................                   else 
6866:  BRA    686C
....................                   { 
....................                      Alarma_off; 
6868:  BCF    F8A.6
686A:  BCF    F93.6
....................                   } 
....................                   estadopantalla=!estadopantalla; 
686C:  BTG    34.3
....................                   if(estadopantalla==1) 
686E:  BTFSS  34.3
6870:  BRA    6888
6872:  CLRF   16
6874:  BTFSC  FF2.7
6876:  BSF    16.7
6878:  BCF    FF2.7
....................                   {intensidadpantalla(contraste);} 
687A:  MOVFF  21,12F
687E:  CALL   01F8
6882:  BTFSC  16.7
6884:  BSF    FF2.7
....................                   else 
6886:  BRA    689E
6888:  CLRF   16
688A:  BTFSC  FF2.7
688C:  BSF    16.7
688E:  BCF    FF2.7
....................                   {intensidadpantalla(0);} 
6890:  MOVLB  1
6892:  CLRF   x2F
6894:  MOVLB  0
6896:  CALL   01F8
689A:  BTFSC  16.7
689C:  BSF    FF2.7
....................                } 
....................             } 
....................             else 
689E:  BRA    68C0
68A0:  CLRF   16
68A2:  BTFSC  FF2.7
68A4:  BSF    16.7
68A6:  BCF    FF2.7
....................             { 
....................                intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
68A8:  MOVFF  21,12F
68AC:  CALL   01F8
68B0:  BTFSC  16.7
68B2:  BSF    FF2.7
68B4:  BCF    F8A.6
68B6:  BCF    F93.6
68B8:  BCF    35.1
68BA:  CLRF   52
68BC:  CLRF   51
68BE:  BCF    35.0
....................             } 
....................         } 
....................         else 
68C0:  BRA    68E2
68C2:  CLRF   16
68C4:  BTFSC  FF2.7
68C6:  BSF    16.7
68C8:  BCF    FF2.7
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
68CA:  MOVFF  21,12F
68CE:  CALL   01F8
68D2:  BTFSC  16.7
68D4:  BSF    FF2.7
68D6:  BCF    F8A.6
68D8:  BCF    F93.6
68DA:  BCF    35.1
68DC:  CLRF   52
68DE:  CLRF   51
68E0:  BCF    35.0
....................         } 
....................          Lectura=0; 
68E2:  BCF    35.5
68E4:  MOVLB  1
....................       }      
....................  
....................    }      
....................    } 
68E6:  GOTO   2CF0
.................... } 
68EA:  SLEEP 

Configuration Fuses:
   Word  1: CE30   IESO FCMEN HSPLL PLL1 CPUDIV3 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
