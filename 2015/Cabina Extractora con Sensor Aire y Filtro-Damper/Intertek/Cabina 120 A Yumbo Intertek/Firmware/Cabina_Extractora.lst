CCS PCH C Compiler, Version 4.104, 5967               18-jun-15 15:23

               Filename: E:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2015\Cabina Extractora con Sensor Aire y Filtro\Cabina 120 A Yumbo Intertek\Firmware\Cabina_Extractora.lst

               ROM used: 26854 bytes (82%)
                         Largest free fragment is 5910
               RAM used: 263 (13%) at main() level
                         314 (15%) worst case
               Stack:    12 worst case (6 in main + 6 for interrupts)

*
0000:  GOTO   2618
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   042E
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   0312
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV3,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=24000000) 
*
00B6:  MOVLW  01
00B8:  MOVWF  FEA
00BA:  MOVLW  32
00BC:  MOVWF  FE9
00BE:  MOVF   FEF,W
00C0:  BZ    00DE
00C2:  MOVLW  07
00C4:  MOVWF  01
00C6:  CLRF   00
00C8:  DECFSZ 00,F
00CA:  BRA    00C8
00CC:  DECFSZ 01,F
00CE:  BRA    00C6
00D0:  MOVLW  C7
00D2:  MOVWF  00
00D4:  DECFSZ 00,F
00D6:  BRA    00D4
00D8:  NOP   
00DA:  DECFSZ FEF,F
00DC:  BRA    00C2
00DE:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
0104:  MOVLW  F0
0106:  MOVWF  F95
....................       lcd.rw = 1; 
0108:  BSF    F83.0
....................       delay_cycles(1); 
010A:  NOP   
....................       lcd.enable = 1; 
010C:  BSF    F83.2
....................       delay_cycles(1); 
010E:  NOP   
....................       high = lcd.data; 
0110:  SWAPF  F83,W
0112:  ANDLW  0F
0114:  MOVLB  1
0116:  MOVWF  x38
....................       lcd.enable = 0; 
0118:  BCF    F83.2
....................       delay_cycles(1); 
011A:  NOP   
....................       lcd.enable = 1; 
011C:  BSF    F83.2
....................       delay_us(1); 
011E:  BRA    0120
0120:  BRA    0122
0122:  BRA    0124
....................       low = lcd.data; 
0124:  SWAPF  F83,W
0126:  ANDLW  0F
0128:  MOVWF  x37
....................       lcd.enable = 0; 
012A:  BCF    F83.2
....................       set_tris_d(LCD_WRITE); 
012C:  MOVLW  00
012E:  MOVWF  F95
....................       return( (high<<4) | low); 
0130:  SWAPF  x38,W
0132:  MOVWF  00
0134:  MOVLW  F0
0136:  ANDWF  00,F
0138:  MOVF   00,W
013A:  IORWF  x37,W
013C:  MOVWF  01
.................... } 
013E:  MOVLB  0
0140:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00E0:  MOVLB  1
00E2:  SWAPF  x38,W
00E4:  ANDLW  F0
00E6:  MOVWF  00
00E8:  MOVLW  0F
00EA:  ANDWF  F83,W
00EC:  IORWF  00,W
00EE:  MOVWF  F83
....................       delay_cycles(1); 
00F0:  NOP   
....................       lcd.enable = 1; 
00F2:  BSF    F83.2
....................       delay_us(2); 
00F4:  MOVLW  03
00F6:  MOVWF  00
00F8:  DECFSZ 00,F
00FA:  BRA    00F8
00FC:  BRA    00FE
....................       lcd.enable = 0; 
00FE:  BCF    F83.2
.................... } 
0100:  MOVLB  0
0102:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
0142:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
0144:  RCALL  0104
0146:  MOVFF  01,137
014A:  MOVLB  1
014C:  BTFSS  01.7
014E:  BRA    0154
0150:  MOVLB  0
0152:  BRA    0144
....................       lcd.rs = address; 
0154:  BTFSS  x35.0
0156:  BCF    F83.1
0158:  BTFSC  x35.0
015A:  BSF    F83.1
....................       delay_cycles(1); 
015C:  NOP   
....................       lcd.rw = 0; 
015E:  BCF    F83.0
....................       delay_cycles(1); 
0160:  NOP   
....................       lcd.enable = 0; 
0162:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0164:  SWAPF  x36,W
0166:  MOVWF  x37
0168:  MOVLW  0F
016A:  ANDWF  x37,F
016C:  MOVFF  137,138
0170:  MOVLB  0
0172:  RCALL  00E0
....................       lcd_send_nibble(n & 0xf); 
0174:  MOVLB  1
0176:  MOVF   x36,W
0178:  ANDLW  0F
017A:  MOVWF  x37
017C:  MOVWF  x38
017E:  MOVLB  0
0180:  RCALL  00E0
.................... } 
0182:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0184:  MOVLW  00
0186:  MOVWF  F95
....................     lcd.rs = 0; 
0188:  BCF    F83.1
....................     lcd.rw = 0; 
018A:  BCF    F83.0
....................     lcd.enable = 0; 
018C:  BCF    F83.2
....................     delay_ms(15); 
018E:  MOVLW  0F
0190:  MOVLB  1
0192:  MOVWF  x32
0194:  MOVLB  0
0196:  RCALL  00B6
....................     for(i=1;i<=3;++i) { 
0198:  MOVLW  01
019A:  MOVLB  1
019C:  MOVWF  x2F
019E:  MOVF   x2F,W
01A0:  SUBLW  03
01A2:  BNC   01BC
....................        lcd_send_nibble(3); 
01A4:  MOVLW  03
01A6:  MOVWF  x38
01A8:  MOVLB  0
01AA:  RCALL  00E0
....................        delay_ms(5); 
01AC:  MOVLW  05
01AE:  MOVLB  1
01B0:  MOVWF  x32
01B2:  MOVLB  0
01B4:  RCALL  00B6
....................     } 
01B6:  MOVLB  1
01B8:  INCF   x2F,F
01BA:  BRA    019E
....................     lcd_send_nibble(2); 
01BC:  MOVLW  02
01BE:  MOVWF  x38
01C0:  MOVLB  0
01C2:  RCALL  00E0
....................     for(i=0;i<=3;++i) 
01C4:  MOVLB  1
01C6:  CLRF   x2F
01C8:  MOVF   x2F,W
01CA:  SUBLW  03
01CC:  BNC   01F2
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
01CE:  CLRF   03
01D0:  MOVF   x2F,W
01D2:  MOVFF  FF2,130
01D6:  BCF    FF2.7
01D8:  MOVLB  0
01DA:  RCALL  00A2
01DC:  MOVLB  1
01DE:  BTFSC  x30.7
01E0:  BSF    FF2.7
01E2:  MOVWF  x30
01E4:  CLRF   x35
01E6:  MOVWF  x36
01E8:  MOVLB  0
01EA:  RCALL  0142
01EC:  MOVLB  1
01EE:  INCF   x2F,F
01F0:  BRA    01C8
.................... } 
01F2:  MOVLB  0
01F4:  GOTO   0334 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
020C:  MOVLW  01
020E:  MOVLB  1
0210:  SUBWF  x33,W
0212:  ADDLW  FC
0214:  BC    0240
0216:  ADDLW  04
0218:  MOVLB  0
021A:  GOTO   0252
....................      case 1 : address=0x80;break; 
021E:  MOVLW  80
0220:  MOVLB  1
0222:  MOVWF  x34
0224:  BRA    0240
....................      case 2 : address=0xc0;break; 
0226:  MOVLW  C0
0228:  MOVLB  1
022A:  MOVWF  x34
022C:  BRA    0240
....................      case 3 : address=0x94;break; 
022E:  MOVLW  94
0230:  MOVLB  1
0232:  MOVWF  x34
0234:  BRA    0240
....................      case 4 : address=0xd4;break; 
0236:  MOVLW  D4
0238:  MOVLB  1
023A:  MOVWF  x34
023C:  BRA    0240
023E:  MOVLB  1
....................    } 
....................    address+=x-1; 
0240:  MOVLW  01
0242:  SUBWF  x32,W
0244:  ADDWF  x34,F
....................    lcd_send_byte(0,address); 
0246:  CLRF   x35
0248:  MOVFF  134,136
024C:  MOVLB  0
024E:  RCALL  0142
.................... } 
0250:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0286:  MOVLB  1
0288:  MOVF   x31,W
028A:  SUBLW  F1
028C:  BNZ   0292
....................     c=238; 
028E:  MOVLW  EE
0290:  MOVWF  x31
....................    switch (c) { 
0292:  MOVF   x31,W
0294:  XORLW  0C
0296:  MOVLB  0
0298:  BZ    02A4
029A:  XORLW  06
029C:  BZ    02C0
029E:  XORLW  02
02A0:  BZ    02D2
02A2:  BRA    02E0
....................      case '\f'   : lcd_send_byte(0,1); 
02A4:  MOVLB  1
02A6:  CLRF   x35
02A8:  MOVLW  01
02AA:  MOVWF  x36
02AC:  MOVLB  0
02AE:  RCALL  0142
....................                    lcdline=1; 
02B0:  MOVLW  01
02B2:  MOVWF  17
....................                    delay_ms(2); 
02B4:  MOVLW  02
02B6:  MOVLB  1
02B8:  MOVWF  x32
02BA:  MOVLB  0
02BC:  RCALL  00B6
....................                                            break; 
02BE:  BRA    02F0
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02C0:  INCF   17,F
02C2:  MOVLW  01
02C4:  MOVLB  1
02C6:  MOVWF  x32
02C8:  MOVFF  17,133
02CC:  MOVLB  0
02CE:  RCALL  020C
02D0:  BRA    02F0
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02D2:  MOVLB  1
02D4:  CLRF   x35
02D6:  MOVLW  10
02D8:  MOVWF  x36
02DA:  MOVLB  0
02DC:  RCALL  0142
02DE:  BRA    02F0
....................      default     : lcd_send_byte(1,c);     break; 
02E0:  MOVLW  01
02E2:  MOVLB  1
02E4:  MOVWF  x35
02E6:  MOVFF  131,136
02EA:  MOVLB  0
02EC:  RCALL  0142
02EE:  BRA    02F0
....................    } 
.................... } 
02F0:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
199C:  MOVFF  108,10C
19A0:  MOVFF  107,10B
19A4:  MOVFF  106,10A
19A8:  MOVFF  105,109
....................  
....................    if (y != 1.0) 
19AC:  MOVFF  10C,11D
19B0:  MOVFF  10B,11C
19B4:  MOVFF  10A,11B
19B8:  MOVFF  109,11A
19BC:  MOVLB  1
19BE:  CLRF   x21
19C0:  CLRF   x20
19C2:  CLRF   x1F
19C4:  MOVLW  7F
19C6:  MOVWF  x1E
19C8:  MOVLB  0
19CA:  RCALL  182C
19CC:  BTFSC  FD8.2
19CE:  BRA    1E50
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
19D0:  MOVLW  01
19D2:  MOVLB  1
19D4:  MOVWF  x1B
19D6:  MOVLW  09
19D8:  MOVWF  FE9
19DA:  MOVFF  11B,FEA
19DE:  MOVLW  7E
19E0:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
19E2:  BSF    FD8.1
19E4:  MOVFF  10C,121
19E8:  MOVFF  10B,120
19EC:  MOVFF  10A,11F
19F0:  MOVFF  109,11E
19F4:  CLRF   x25
19F6:  CLRF   x24
19F8:  CLRF   x23
19FA:  MOVLW  7F
19FC:  MOVWF  x22
19FE:  MOVLB  0
1A00:  CALL   0DEA
1A04:  MOVFF  00,11A
1A08:  MOVFF  01,11B
1A0C:  MOVFF  02,11C
1A10:  MOVFF  03,11D
1A14:  BCF    FD8.1
1A16:  MOVFF  10C,121
1A1A:  MOVFF  10B,120
1A1E:  MOVFF  10A,11F
1A22:  MOVFF  109,11E
1A26:  MOVLB  1
1A28:  CLRF   x25
1A2A:  CLRF   x24
1A2C:  CLRF   x23
1A2E:  MOVLW  7F
1A30:  MOVWF  x22
1A32:  MOVLB  0
1A34:  CALL   0DEA
1A38:  MOVFF  11D,121
1A3C:  MOVFF  11C,120
1A40:  MOVFF  11B,11F
1A44:  MOVFF  11A,11E
1A48:  MOVFF  03,125
1A4C:  MOVFF  02,124
1A50:  MOVFF  01,123
1A54:  MOVFF  00,122
1A58:  CALL   0C8C
1A5C:  MOVFF  03,10C
1A60:  MOVFF  02,10B
1A64:  MOVFF  01,10A
1A68:  MOVFF  00,109
....................  
....................       y2=y*y; 
1A6C:  MOVFF  10C,11D
1A70:  MOVFF  10B,11C
1A74:  MOVFF  10A,11B
1A78:  MOVFF  109,11A
1A7C:  MOVFF  10C,121
1A80:  MOVFF  10B,120
1A84:  MOVFF  10A,11F
1A88:  MOVFF  109,11E
1A8C:  RCALL  1490
1A8E:  MOVFF  03,118
1A92:  MOVFF  02,117
1A96:  MOVFF  01,116
1A9A:  MOVFF  00,115
....................  
....................       res = pl[0]*y2 + pl[1]; 
1A9E:  MOVLW  BC
1AA0:  MOVLB  1
1AA2:  MOVWF  x1D
1AA4:  MOVLW  24
1AA6:  MOVWF  x1C
1AA8:  MOVLW  67
1AAA:  MOVWF  x1B
1AAC:  MOVLW  7D
1AAE:  MOVWF  x1A
1AB0:  MOVFF  118,121
1AB4:  MOVFF  117,120
1AB8:  MOVFF  116,11F
1ABC:  MOVFF  115,11E
1AC0:  MOVLB  0
1AC2:  RCALL  1490
1AC4:  MOVFF  00,11A
1AC8:  MOVFF  01,11B
1ACC:  MOVFF  02,11C
1AD0:  MOVFF  03,11D
1AD4:  BCF    FD8.1
1AD6:  MOVFF  03,121
1ADA:  MOVFF  02,120
1ADE:  MOVFF  01,11F
1AE2:  MOVFF  00,11E
1AE6:  MOVLW  E3
1AE8:  MOVLB  1
1AEA:  MOVWF  x25
1AEC:  MOVLW  E4
1AEE:  MOVWF  x24
1AF0:  MOVLW  90
1AF2:  MOVWF  x23
1AF4:  MOVLW  82
1AF6:  MOVWF  x22
1AF8:  MOVLB  0
1AFA:  CALL   0DEA
1AFE:  MOVFF  03,110
1B02:  MOVFF  02,10F
1B06:  MOVFF  01,10E
1B0A:  MOVFF  00,10D
....................       res = res*y2 + pl[2]; 
1B0E:  MOVFF  110,11D
1B12:  MOVFF  10F,11C
1B16:  MOVFF  10E,11B
1B1A:  MOVFF  10D,11A
1B1E:  MOVFF  118,121
1B22:  MOVFF  117,120
1B26:  MOVFF  116,11F
1B2A:  MOVFF  115,11E
1B2E:  RCALL  1490
1B30:  MOVFF  00,11A
1B34:  MOVFF  01,11B
1B38:  MOVFF  02,11C
1B3C:  MOVFF  03,11D
1B40:  BCF    FD8.1
1B42:  MOVFF  03,121
1B46:  MOVFF  02,120
1B4A:  MOVFF  01,11F
1B4E:  MOVFF  00,11E
1B52:  MOVLW  1C
1B54:  MOVLB  1
1B56:  MOVWF  x25
1B58:  MOVLW  87
1B5A:  MOVWF  x24
1B5C:  MOVLW  57
1B5E:  MOVWF  x23
1B60:  MOVLW  83
1B62:  MOVWF  x22
1B64:  MOVLB  0
1B66:  CALL   0DEA
1B6A:  MOVFF  03,110
1B6E:  MOVFF  02,10F
1B72:  MOVFF  01,10E
1B76:  MOVFF  00,10D
....................       res = res*y2 + pl[3]; 
1B7A:  MOVFF  110,11D
1B7E:  MOVFF  10F,11C
1B82:  MOVFF  10E,11B
1B86:  MOVFF  10D,11A
1B8A:  MOVFF  118,121
1B8E:  MOVFF  117,120
1B92:  MOVFF  116,11F
1B96:  MOVFF  115,11E
1B9A:  RCALL  1490
1B9C:  MOVFF  00,11A
1BA0:  MOVFF  01,11B
1BA4:  MOVFF  02,11C
1BA8:  MOVFF  03,11D
1BAC:  BCF    FD8.1
1BAE:  MOVFF  03,121
1BB2:  MOVFF  02,120
1BB6:  MOVFF  01,11F
1BBA:  MOVFF  00,11E
1BBE:  MOVLW  AB
1BC0:  MOVLB  1
1BC2:  MOVWF  x25
1BC4:  MOVLW  E1
1BC6:  MOVWF  x24
1BC8:  MOVLW  9E
1BCA:  MOVWF  x23
1BCC:  MOVLW  83
1BCE:  MOVWF  x22
1BD0:  MOVLB  0
1BD2:  CALL   0DEA
1BD6:  MOVFF  03,110
1BDA:  MOVFF  02,10F
1BDE:  MOVFF  01,10E
1BE2:  MOVFF  00,10D
....................  
....................       r = ql[0]*y2 + ql[1]; 
1BE6:  MOVLB  1
1BE8:  CLRF   x1D
1BEA:  CLRF   x1C
1BEC:  CLRF   x1B
1BEE:  MOVLW  7F
1BF0:  MOVWF  x1A
1BF2:  MOVFF  118,121
1BF6:  MOVFF  117,120
1BFA:  MOVFF  116,11F
1BFE:  MOVFF  115,11E
1C02:  MOVLB  0
1C04:  RCALL  1490
1C06:  MOVFF  00,11A
1C0A:  MOVFF  01,11B
1C0E:  MOVFF  02,11C
1C12:  MOVFF  03,11D
1C16:  BCF    FD8.1
1C18:  MOVFF  03,121
1C1C:  MOVFF  02,120
1C20:  MOVFF  01,11F
1C24:  MOVFF  00,11E
1C28:  MOVLW  B4
1C2A:  MOVLB  1
1C2C:  MOVWF  x25
1C2E:  MOVLW  2A
1C30:  MOVWF  x24
1C32:  MOVLW  82
1C34:  MOVWF  x23
1C36:  MOVWF  x22
1C38:  MOVLB  0
1C3A:  CALL   0DEA
1C3E:  MOVFF  03,114
1C42:  MOVFF  02,113
1C46:  MOVFF  01,112
1C4A:  MOVFF  00,111
....................       r = r*y2 + ql[2]; 
1C4E:  MOVFF  114,11D
1C52:  MOVFF  113,11C
1C56:  MOVFF  112,11B
1C5A:  MOVFF  111,11A
1C5E:  MOVFF  118,121
1C62:  MOVFF  117,120
1C66:  MOVFF  116,11F
1C6A:  MOVFF  115,11E
1C6E:  RCALL  1490
1C70:  MOVFF  00,11A
1C74:  MOVFF  01,11B
1C78:  MOVFF  02,11C
1C7C:  MOVFF  03,11D
1C80:  BCF    FD8.1
1C82:  MOVFF  03,121
1C86:  MOVFF  02,120
1C8A:  MOVFF  01,11F
1C8E:  MOVFF  00,11E
1C92:  MOVLW  80
1C94:  MOVLB  1
1C96:  MOVWF  x25
1C98:  MOVLW  3E
1C9A:  MOVWF  x24
1C9C:  MOVLW  06
1C9E:  MOVWF  x23
1CA0:  MOVLW  83
1CA2:  MOVWF  x22
1CA4:  MOVLB  0
1CA6:  CALL   0DEA
1CAA:  MOVFF  03,114
1CAE:  MOVFF  02,113
1CB2:  MOVFF  01,112
1CB6:  MOVFF  00,111
....................       r = r*y2 + ql[3]; 
1CBA:  MOVFF  114,11D
1CBE:  MOVFF  113,11C
1CC2:  MOVFF  112,11B
1CC6:  MOVFF  111,11A
1CCA:  MOVFF  118,121
1CCE:  MOVFF  117,120
1CD2:  MOVFF  116,11F
1CD6:  MOVFF  115,11E
1CDA:  CALL   1490
1CDE:  MOVFF  00,11A
1CE2:  MOVFF  01,11B
1CE6:  MOVFF  02,11C
1CEA:  MOVFF  03,11D
1CEE:  BCF    FD8.1
1CF0:  MOVFF  03,121
1CF4:  MOVFF  02,120
1CF8:  MOVFF  01,11F
1CFC:  MOVFF  00,11E
1D00:  MOVLW  AB
1D02:  MOVLB  1
1D04:  MOVWF  x25
1D06:  MOVLW  E1
1D08:  MOVWF  x24
1D0A:  MOVLW  9E
1D0C:  MOVWF  x23
1D0E:  MOVLW  82
1D10:  MOVWF  x22
1D12:  MOVLB  0
1D14:  CALL   0DEA
1D18:  MOVFF  03,114
1D1C:  MOVFF  02,113
1D20:  MOVFF  01,112
1D24:  MOVFF  00,111
....................  
....................       res = y*res/r; 
1D28:  MOVFF  10C,11D
1D2C:  MOVFF  10B,11C
1D30:  MOVFF  10A,11B
1D34:  MOVFF  109,11A
1D38:  MOVFF  110,121
1D3C:  MOVFF  10F,120
1D40:  MOVFF  10E,11F
1D44:  MOVFF  10D,11E
1D48:  CALL   1490
1D4C:  MOVFF  00,11A
1D50:  MOVFF  01,11B
1D54:  MOVFF  02,11C
1D58:  MOVFF  03,11D
1D5C:  MOVFF  03,121
1D60:  MOVFF  02,120
1D64:  MOVFF  01,11F
1D68:  MOVFF  00,11E
1D6C:  MOVFF  114,125
1D70:  MOVFF  113,124
1D74:  MOVFF  112,123
1D78:  MOVFF  111,122
1D7C:  CALL   0C8C
1D80:  MOVFF  03,110
1D84:  MOVFF  02,10F
1D88:  MOVFF  01,10E
1D8C:  MOVFF  00,10D
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1D90:  MOVLW  01
1D92:  MOVLB  1
1D94:  MOVWF  x1B
1D96:  MOVLW  05
1D98:  MOVWF  FE9
1D9A:  MOVFF  11B,FEA
1D9E:  MOVLW  7E
1DA0:  SUBWF  FEF,W
1DA2:  MOVWF  x19
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1DA4:  BTFSC  x19.7
1DA6:  BRA    1DAA
1DA8:  BRA    1DD2
....................          r = -(float32)-n; 
1DAA:  MOVLW  00
1DAC:  BSF    FD8.0
1DAE:  SUBFWB x19,W
1DB0:  CLRF   x1B
1DB2:  MOVWF  x1A
1DB4:  BTFSC  x1A.7
1DB6:  DECF   x1B,F
1DB8:  MOVLB  0
1DBA:  RCALL  194C
1DBC:  MOVFF  00,111
1DC0:  MOVF   01,W
1DC2:  XORLW  80
1DC4:  MOVLB  1
1DC6:  MOVWF  x12
1DC8:  MOVFF  02,113
1DCC:  MOVFF  03,114
....................       else 
1DD0:  BRA    1DF2
....................          r = (float32)n; 
1DD2:  CLRF   x1B
1DD4:  MOVFF  119,11A
1DD8:  BTFSC  x1A.7
1DDA:  DECF   x1B,F
1DDC:  MOVLB  0
1DDE:  RCALL  194C
1DE0:  MOVFF  03,114
1DE4:  MOVFF  02,113
1DE8:  MOVFF  01,112
1DEC:  MOVFF  00,111
1DF0:  MOVLB  1
....................  
....................       res += r*LN2; 
1DF2:  MOVFF  114,11D
1DF6:  MOVFF  113,11C
1DFA:  MOVFF  112,11B
1DFE:  MOVFF  111,11A
1E02:  MOVLW  18
1E04:  MOVWF  x21
1E06:  MOVLW  72
1E08:  MOVWF  x20
1E0A:  MOVLW  31
1E0C:  MOVWF  x1F
1E0E:  MOVLW  7E
1E10:  MOVWF  x1E
1E12:  MOVLB  0
1E14:  CALL   1490
1E18:  BCF    FD8.1
1E1A:  MOVFF  110,121
1E1E:  MOVFF  10F,120
1E22:  MOVFF  10E,11F
1E26:  MOVFF  10D,11E
1E2A:  MOVFF  03,125
1E2E:  MOVFF  02,124
1E32:  MOVFF  01,123
1E36:  MOVFF  00,122
1E3A:  CALL   0DEA
1E3E:  MOVFF  03,110
1E42:  MOVFF  02,10F
1E46:  MOVFF  01,10E
1E4A:  MOVFF  00,10D
....................    } 
....................  
....................    else 
1E4E:  BRA    1E5C
....................       res = 0.0; 
1E50:  MOVLB  1
1E52:  CLRF   x10
1E54:  CLRF   x0F
1E56:  CLRF   x0E
1E58:  CLRF   x0D
1E5A:  MOVLB  0
....................  
....................    return(res); 
1E5C:  MOVFF  10D,00
1E60:  MOVFF  10E,01
1E64:  MOVFF  10F,02
1E68:  MOVFF  110,03
.................... } 
1E6C:  GOTO   2048 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B5,1) 
.................... #define   Damper_off        output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Motor_on          output_bit(PIN_C0,1) 
.................... #define   Motor_off         output_bit(PIN_C0,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0, zero_fabrica=429.0;//zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... //float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float a=0.000053130644, b=-0.071168067595, c=31.801204383577, d=-4739.736861318933; // Prueba Faiver 18 Jun 2015 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
18E2:  MOVLB  1
18E4:  RLCF   x04,W
18E6:  MOVWF  00
18E8:  RLCF   00,F
18EA:  MOVLW  FC
18EC:  ANDWF  00,F
18EE:  MOVFF  00,01
18F2:  MOVF   FC2,W
18F4:  ANDLW  C3
18F6:  IORWF  00,W
18F8:  MOVWF  FC2
18FA:  CLRF   16
18FC:  BTFSC  FF2.7
18FE:  BSF    16.7
1900:  BCF    FF2.7
1902:  MOVLW  0A
1904:  MOVWF  x32
1906:  MOVLB  0
1908:  CALL   00B6
190C:  BTFSC  16.7
190E:  BSF    FF2.7
1910:  BSF    FC2.1
1912:  BTFSC  FC2.1
1914:  BRA    1912
1916:  MOVFF  FC4,10A
191A:  MOVFF  FC3,109
191E:  MOVLB  0
1920:  CALL   0C56
1924:  MOVFF  03,108
1928:  MOVFF  02,107
192C:  MOVFF  01,106
1930:  MOVFF  00,105
1934:  MOVFF  105,00
1938:  MOVFF  106,01
193C:  MOVFF  107,02
1940:  MOVFF  108,03
.................... } 
1944:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
01F8:  MOVLB  1
01FA:  MOVF   x2F,F
01FC:  BNZ   0204
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
01FE:  BCF    F8B.1
0200:  BCF    F94.1
....................    } 
....................    else 
0202:  BRA    0208
....................    { 
....................       Pantalla_on; 
0204:  BSF    F8B.1
0206:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0208:  MOVLB  0
020A:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1E70:  MOVLB  1
1E72:  CLRF   x04
1E74:  MOVLB  0
1E76:  RCALL  18E2
1E78:  MOVFF  00,100
1E7C:  MOVFF  01,101
1E80:  MOVFF  02,102
1E84:  MOVFF  03,103
1E88:  MOVFF  03,11D
1E8C:  MOVFF  02,11C
1E90:  MOVFF  01,11B
1E94:  MOVFF  00,11A
1E98:  MOVLB  1
1E9A:  CLRF   x21
1E9C:  CLRF   x20
1E9E:  MOVLW  20
1EA0:  MOVWF  x1F
1EA2:  MOVLW  81
1EA4:  MOVWF  x1E
1EA6:  MOVLB  0
1EA8:  CALL   1490
1EAC:  MOVFF  00,100
1EB0:  MOVFF  01,101
1EB4:  MOVFF  02,102
1EB8:  MOVFF  03,103
1EBC:  MOVFF  03,121
1EC0:  MOVFF  02,120
1EC4:  MOVFF  01,11F
1EC8:  MOVFF  00,11E
1ECC:  MOVLB  1
1ECE:  CLRF   x25
1ED0:  MOVLW  C0
1ED2:  MOVWF  x24
1ED4:  MOVLW  7F
1ED6:  MOVWF  x23
1ED8:  MOVLW  88
1EDA:  MOVWF  x22
1EDC:  MOVLB  0
1EDE:  CALL   0C8C
1EE2:  MOVFF  03,76
1EE6:  MOVFF  02,75
1EEA:  MOVFF  01,74
1EEE:  MOVFF  00,73
....................     Voltaje1=sensores(1)*5/1023; 
1EF2:  MOVLW  01
1EF4:  MOVLB  1
1EF6:  MOVWF  x04
1EF8:  MOVLB  0
1EFA:  RCALL  18E2
1EFC:  MOVFF  00,100
1F00:  MOVFF  01,101
1F04:  MOVFF  02,102
1F08:  MOVFF  03,103
1F0C:  MOVFF  03,11D
1F10:  MOVFF  02,11C
1F14:  MOVFF  01,11B
1F18:  MOVFF  00,11A
1F1C:  MOVLB  1
1F1E:  CLRF   x21
1F20:  CLRF   x20
1F22:  MOVLW  20
1F24:  MOVWF  x1F
1F26:  MOVLW  81
1F28:  MOVWF  x1E
1F2A:  MOVLB  0
1F2C:  CALL   1490
1F30:  MOVFF  00,100
1F34:  MOVFF  01,101
1F38:  MOVFF  02,102
1F3C:  MOVFF  03,103
1F40:  MOVFF  03,121
1F44:  MOVFF  02,120
1F48:  MOVFF  01,11F
1F4C:  MOVFF  00,11E
1F50:  MOVLB  1
1F52:  CLRF   x25
1F54:  MOVLW  C0
1F56:  MOVWF  x24
1F58:  MOVLW  7F
1F5A:  MOVWF  x23
1F5C:  MOVLW  88
1F5E:  MOVWF  x22
1F60:  MOVLB  0
1F62:  CALL   0C8C
1F66:  MOVFF  03,7A
1F6A:  MOVFF  02,79
1F6E:  MOVFF  01,78
1F72:  MOVFF  00,77
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1F76:  MOVLB  1
1F78:  CLRF   x21
1F7A:  CLRF   x20
1F7C:  MOVLW  20
1F7E:  MOVWF  x1F
1F80:  MOVLW  81
1F82:  MOVWF  x1E
1F84:  MOVFF  7A,125
1F88:  MOVFF  79,124
1F8C:  MOVFF  78,123
1F90:  MOVFF  77,122
1F94:  MOVLB  0
1F96:  CALL   0C8C
1F9A:  MOVFF  00,100
1F9E:  MOVFF  01,101
1FA2:  MOVFF  02,102
1FA6:  MOVFF  03,103
1FAA:  BSF    FD8.1
1FAC:  MOVFF  03,121
1FB0:  MOVFF  02,120
1FB4:  MOVFF  01,11F
1FB8:  MOVFF  00,11E
1FBC:  MOVLB  1
1FBE:  CLRF   x25
1FC0:  CLRF   x24
1FC2:  CLRF   x23
1FC4:  MOVLW  7F
1FC6:  MOVWF  x22
1FC8:  MOVLB  0
1FCA:  CALL   0DEA
1FCE:  MOVFF  6E,121
1FD2:  MOVFF  6D,120
1FD6:  MOVFF  6C,11F
1FDA:  MOVFF  6B,11E
1FDE:  MOVFF  03,125
1FE2:  MOVFF  02,124
1FE6:  MOVFF  01,123
1FEA:  MOVFF  00,122
1FEE:  CALL   0C8C
1FF2:  MOVFF  03,72
1FF6:  MOVFF  02,71
1FFA:  MOVFF  01,70
1FFE:  MOVFF  00,6F
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
2002:  MOVFF  72,121
2006:  MOVFF  71,120
200A:  MOVFF  70,11F
200E:  MOVFF  6F,11E
2012:  MOVFF  5E,125
2016:  MOVFF  5D,124
201A:  MOVFF  5C,123
201E:  MOVFF  5B,122
2022:  CALL   0C8C
2026:  MOVFF  00,100
202A:  MOVFF  01,101
202E:  MOVFF  02,102
2032:  MOVFF  03,103
2036:  MOVFF  03,108
203A:  MOVFF  02,107
203E:  MOVFF  01,106
2042:  MOVFF  00,105
2046:  BRA    199C
2048:  MOVFF  00,100
204C:  MOVFF  01,101
2050:  MOVFF  02,102
2054:  MOVFF  03,103
2058:  MOVFF  03,121
205C:  MOVFF  02,120
2060:  MOVFF  01,11F
2064:  MOVFF  00,11E
2068:  MOVFF  5A,125
206C:  MOVFF  59,124
2070:  MOVFF  58,123
2074:  MOVFF  57,122
2078:  CALL   0C8C
207C:  MOVFF  00,100
2080:  MOVFF  01,101
2084:  MOVFF  02,102
2088:  MOVFF  03,103
208C:  MOVLB  1
208E:  CLRF   x21
2090:  CLRF   x20
2092:  CLRF   x1F
2094:  MOVLW  7F
2096:  MOVWF  x1E
2098:  MOVFF  62,125
209C:  MOVFF  61,124
20A0:  MOVFF  60,123
20A4:  MOVFF  5F,122
20A8:  MOVLB  0
20AA:  CALL   0C8C
20AE:  MOVFF  FEA,105
20B2:  MOVFF  FE9,104
20B6:  BCF    FD8.1
20B8:  MOVFF  103,121
20BC:  MOVFF  102,120
20C0:  MOVFF  101,11F
20C4:  MOVFF  100,11E
20C8:  MOVFF  03,125
20CC:  MOVFF  02,124
20D0:  MOVFF  01,123
20D4:  MOVFF  00,122
20D8:  CALL   0DEA
20DC:  MOVFF  105,FEA
20E0:  MOVFF  104,FE9
20E4:  MOVLB  1
20E6:  CLRF   x21
20E8:  CLRF   x20
20EA:  CLRF   x1F
20EC:  MOVLW  7F
20EE:  MOVWF  x1E
20F0:  MOVFF  03,125
20F4:  MOVFF  02,124
20F8:  MOVFF  01,123
20FC:  MOVFF  00,122
2100:  MOVLB  0
2102:  CALL   0C8C
2106:  MOVFF  03,66
210A:  MOVFF  02,65
210E:  MOVFF  01,64
2112:  MOVFF  00,63
....................     TC=TK-273.15; 
2116:  BSF    FD8.1
2118:  MOVFF  66,121
211C:  MOVFF  65,120
2120:  MOVFF  64,11F
2124:  MOVFF  63,11E
2128:  MOVLW  33
212A:  MOVLB  1
212C:  MOVWF  x25
212E:  MOVLW  93
2130:  MOVWF  x24
2132:  MOVLW  08
2134:  MOVWF  x23
2136:  MOVLW  87
2138:  MOVWF  x22
213A:  MOVLB  0
213C:  CALL   0DEA
2140:  MOVFF  03,6A
2144:  MOVFF  02,69
2148:  MOVFF  01,68
214C:  MOVFF  00,67
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
2150:  MOVF   2C,W
2152:  SUBLW  0A
2154:  BNZ   21B6
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
2156:  MOVLB  1
2158:  CLRF   x04
215A:  MOVLB  0
215C:  CALL   18E2
2160:  MOVFF  00,100
2164:  MOVFF  01,101
2168:  MOVFF  02,102
216C:  MOVFF  03,103
2170:  MOVFF  FEA,105
2174:  MOVFF  FE9,104
2178:  BCF    FD8.1
217A:  MOVFF  03,121
217E:  MOVFF  02,120
2182:  MOVFF  01,11F
2186:  MOVFF  00,11E
218A:  MOVFF  BE,125
218E:  MOVFF  BD,124
2192:  MOVFF  BC,123
2196:  MOVFF  BB,122
219A:  CALL   0DEA
219E:  MOVFF  105,FEA
21A2:  MOVFF  104,FE9
21A6:  MOVFF  03,9A
21AA:  MOVFF  02,99
21AE:  MOVFF  01,98
21B2:  MOVFF  00,97
....................     } 
....................     if(negativo==20) 
21B6:  MOVF   2C,W
21B8:  SUBLW  14
21BA:  BNZ   221C
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
21BC:  MOVLB  1
21BE:  CLRF   x04
21C0:  MOVLB  0
21C2:  CALL   18E2
21C6:  MOVFF  00,100
21CA:  MOVFF  01,101
21CE:  MOVFF  02,102
21D2:  MOVFF  03,103
21D6:  MOVFF  FEA,105
21DA:  MOVFF  FE9,104
21DE:  BSF    FD8.1
21E0:  MOVFF  03,121
21E4:  MOVFF  02,120
21E8:  MOVFF  01,11F
21EC:  MOVFF  00,11E
21F0:  MOVFF  BE,125
21F4:  MOVFF  BD,124
21F8:  MOVFF  BC,123
21FC:  MOVFF  BB,122
2200:  CALL   0DEA
2204:  MOVFF  105,FEA
2208:  MOVFF  104,FE9
220C:  MOVFF  03,9A
2210:  MOVFF  02,99
2214:  MOVFF  01,98
2218:  MOVFF  00,97
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
221C:  MOVFF  9A,11D
2220:  MOVFF  99,11C
2224:  MOVFF  98,11B
2228:  MOVFF  97,11A
222C:  MOVFF  9A,121
2230:  MOVFF  99,120
2234:  MOVFF  98,11F
2238:  MOVFF  97,11E
223C:  CALL   1490
2240:  MOVFF  03,9E
2244:  MOVFF  02,9D
2248:  MOVFF  01,9C
224C:  MOVFF  00,9B
....................     x_cubo=x_uno*x_cuadrado; 
2250:  MOVFF  9A,11D
2254:  MOVFF  99,11C
2258:  MOVFF  98,11B
225C:  MOVFF  97,11A
2260:  MOVFF  9E,121
2264:  MOVFF  9D,120
2268:  MOVFF  9C,11F
226C:  MOVFF  9B,11E
2270:  CALL   1490
2274:  MOVFF  03,A2
2278:  MOVFF  02,A1
227C:  MOVFF  01,A0
2280:  MOVFF  00,9F
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
2284:  MOVFF  A2,11D
2288:  MOVFF  A1,11C
228C:  MOVFF  A0,11B
2290:  MOVFF  9F,11A
2294:  MOVFF  7E,121
2298:  MOVFF  7D,120
229C:  MOVFF  7C,11F
22A0:  MOVFF  7B,11E
22A4:  CALL   1490
22A8:  MOVFF  00,100
22AC:  MOVFF  01,101
22B0:  MOVFF  02,102
22B4:  MOVFF  03,103
22B8:  MOVFF  9E,11D
22BC:  MOVFF  9D,11C
22C0:  MOVFF  9C,11B
22C4:  MOVFF  9B,11A
22C8:  MOVFF  82,121
22CC:  MOVFF  81,120
22D0:  MOVFF  80,11F
22D4:  MOVFF  7F,11E
22D8:  CALL   1490
22DC:  BCF    FD8.1
22DE:  MOVFF  103,121
22E2:  MOVFF  102,120
22E6:  MOVFF  101,11F
22EA:  MOVFF  100,11E
22EE:  MOVFF  03,125
22F2:  MOVFF  02,124
22F6:  MOVFF  01,123
22FA:  MOVFF  00,122
22FE:  CALL   0DEA
2302:  MOVFF  00,100
2306:  MOVFF  01,101
230A:  MOVFF  02,102
230E:  MOVFF  03,103
2312:  MOVFF  9A,11D
2316:  MOVFF  99,11C
231A:  MOVFF  98,11B
231E:  MOVFF  97,11A
2322:  MOVFF  86,121
2326:  MOVFF  85,120
232A:  MOVFF  84,11F
232E:  MOVFF  83,11E
2332:  CALL   1490
2336:  BCF    FD8.1
2338:  MOVFF  103,121
233C:  MOVFF  102,120
2340:  MOVFF  101,11F
2344:  MOVFF  100,11E
2348:  MOVFF  03,125
234C:  MOVFF  02,124
2350:  MOVFF  01,123
2354:  MOVFF  00,122
2358:  CALL   0DEA
235C:  MOVFF  00,100
2360:  MOVFF  01,101
2364:  MOVFF  02,102
2368:  MOVFF  03,103
236C:  BCF    FD8.1
236E:  MOVFF  03,121
2372:  MOVFF  02,120
2376:  MOVFF  01,11F
237A:  MOVFF  00,11E
237E:  MOVFF  8A,125
2382:  MOVFF  89,124
2386:  MOVFF  88,123
238A:  MOVFF  87,122
238E:  CALL   0DEA
2392:  MOVFF  03,B2
2396:  MOVFF  02,B1
239A:  MOVFF  01,B0
239E:  MOVFF  00,AF
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     //Velocidad=Velocidad-0.08; 
....................     if(Velocidad<0.0) 
23A2:  MOVFF  B2,11D
23A6:  MOVFF  B1,11C
23AA:  MOVFF  B0,11B
23AE:  MOVFF  AF,11A
23B2:  MOVLB  1
23B4:  CLRF   x21
23B6:  CLRF   x20
23B8:  CLRF   x1F
23BA:  CLRF   x1E
23BC:  MOVLB  0
23BE:  CALL   182C
23C2:  BNC   23CC
....................      {Velocidad=0.0;} 
23C4:  CLRF   xB2
23C6:  CLRF   xB1
23C8:  CLRF   xB0
23CA:  CLRF   xAF
....................       
....................      if(l>=media) 
23CC:  MOVF   xFF,W
23CE:  SUBWF  28,W
23D0:  BNC   23D4
....................        {l=0;} 
23D2:  CLRF   28
....................       
....................      promedio[l]=Velocidad;l++; 
23D4:  MOVF   28,W
23D6:  MULLW  04
23D8:  MOVF   FF3,W
23DA:  CLRF   03
23DC:  ADDLW  CF
23DE:  MOVWF  FE9
23E0:  MOVLW  00
23E2:  ADDWFC 03,W
23E4:  MOVWF  FEA
23E6:  MOVFF  AF,FEF
23EA:  MOVFF  B0,FEC
23EE:  MOVFF  B1,FEC
23F2:  MOVFF  B2,FEC
23F6:  INCF   28,F
....................      Flujo2=0; 
23F8:  CLRF   x92
23FA:  CLRF   x91
23FC:  CLRF   x90
23FE:  CLRF   x8F
....................         for(h=0;h<=(media-1);h++) 
2400:  CLRF   29
2402:  MOVLW  01
2404:  SUBWF  xFF,W
2406:  SUBWF  29,W
2408:  BZ    240C
240A:  BC    2478
....................         { 
....................            Flujo2+=promedio[h]; 
240C:  MOVF   29,W
240E:  MULLW  04
2410:  MOVF   FF3,W
2412:  CLRF   03
2414:  ADDLW  CF
2416:  MOVWF  FE9
2418:  MOVLW  00
241A:  ADDWFC 03,W
241C:  MOVWF  FEA
241E:  MOVFF  FEF,00
2422:  MOVFF  FEC,01
2426:  MOVFF  FEC,02
242A:  MOVFF  FEC,03
242E:  MOVFF  FEA,101
2432:  MOVFF  FE9,100
2436:  BCF    FD8.1
2438:  MOVFF  92,121
243C:  MOVFF  91,120
2440:  MOVFF  90,11F
2444:  MOVFF  8F,11E
2448:  MOVFF  03,125
244C:  MOVFF  02,124
2450:  MOVFF  01,123
2454:  MOVFF  00,122
2458:  CALL   0DEA
245C:  MOVFF  101,FEA
2460:  MOVFF  100,FE9
2464:  MOVFF  03,92
2468:  MOVFF  02,91
246C:  MOVFF  01,90
2470:  MOVFF  00,8F
....................         }  
2474:  INCF   29,F
2476:  BRA    2402
....................            Flujo2=(Flujo2/media)*Ajuste1;  
2478:  MOVLB  1
247A:  CLRF   x0A
247C:  MOVFF  FF,109
2480:  MOVLB  0
2482:  CALL   0C56
2486:  MOVFF  92,121
248A:  MOVFF  91,120
248E:  MOVFF  90,11F
2492:  MOVFF  8F,11E
2496:  MOVFF  03,125
249A:  MOVFF  02,124
249E:  MOVFF  01,123
24A2:  MOVFF  00,122
24A6:  CALL   0C8C
24AA:  MOVFF  00,100
24AE:  MOVFF  01,101
24B2:  MOVFF  02,102
24B6:  MOVFF  03,103
24BA:  MOVFF  03,11D
24BE:  MOVFF  02,11C
24C2:  MOVFF  01,11B
24C6:  MOVFF  00,11A
24CA:  MOVFF  C2,121
24CE:  MOVFF  C1,120
24D2:  MOVFF  C0,11F
24D6:  MOVFF  BF,11E
24DA:  CALL   1490
24DE:  MOVFF  03,92
24E2:  MOVFF  02,91
24E6:  MOVFF  01,90
24EA:  MOVFF  00,8F
....................            return Flujo2; 
24EE:  MOVFF  8F,00
24F2:  MOVFF  90,01
24F6:  MOVFF  91,02
24FA:  MOVFF  92,03
.................... } 
24FE:  GOTO   6816 (RETURN)
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
2502:  MOVF   2D,W
2504:  SUBLW  14
2506:  BTFSS  FD8.2
2508:  BRA    25FC
250A:  BTFSS  34.1
250C:  BRA    25FC
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
250E:  BSF    FD8.1
2510:  MOVFF  45,121
2514:  MOVFF  44,120
2518:  MOVFF  43,11F
251C:  MOVFF  42,11E
2520:  MOVFF  8E,125
2524:  MOVFF  8D,124
2528:  MOVFF  8C,123
252C:  MOVFF  8B,122
2530:  CALL   0DEA
2534:  MOVFF  03,CE
2538:  MOVFF  02,CD
253C:  MOVFF  01,CC
2540:  MOVFF  00,CB
....................       if(error<0.2&&error>-0.2) 
2544:  MOVFF  CE,11D
2548:  MOVFF  CD,11C
254C:  MOVFF  CC,11B
2550:  MOVFF  CB,11A
2554:  MOVLW  CD
2556:  MOVLB  1
2558:  MOVWF  x21
255A:  MOVLW  CC
255C:  MOVWF  x20
255E:  MOVLW  4C
2560:  MOVWF  x1F
2562:  MOVLW  7C
2564:  MOVWF  x1E
2566:  MOVLB  0
2568:  CALL   182C
256C:  BNC   2598
256E:  MOVLW  CD
2570:  MOVLB  1
2572:  MOVWF  x1D
2574:  MOVLW  CC
2576:  MOVWF  x1C
2578:  MOVWF  x1B
257A:  MOVLW  7C
257C:  MOVWF  x1A
257E:  MOVFF  CE,121
2582:  MOVFF  CD,120
2586:  MOVFF  CC,11F
258A:  MOVFF  CB,11E
258E:  MOVLB  0
2590:  CALL   182C
2594:  BNC   2598
....................       {} 
....................       else 
2596:  BRA    25E4
....................       { 
....................          if(error>0.0) 
2598:  MOVLB  1
259A:  CLRF   x1D
259C:  CLRF   x1C
259E:  CLRF   x1B
25A0:  CLRF   x1A
25A2:  MOVFF  CE,121
25A6:  MOVFF  CD,120
25AA:  MOVFF  CC,11F
25AE:  MOVFF  CB,11E
25B2:  MOVLB  0
25B4:  CALL   182C
25B8:  BNC   25BE
....................          {tmp+=1;} 
25BA:  MOVLW  01
25BC:  ADDWF  2A,F
....................                 
....................          if(error<-0.0) 
25BE:  MOVFF  CE,11D
25C2:  MOVFF  CD,11C
25C6:  MOVFF  CC,11B
25CA:  MOVFF  CB,11A
25CE:  MOVLB  1
25D0:  CLRF   x21
25D2:  CLRF   x20
25D4:  CLRF   x1F
25D6:  CLRF   x1E
25D8:  MOVLB  0
25DA:  CALL   182C
25DE:  BNC   25E4
....................          {tmp-=1;}   
25E0:  MOVLW  01
25E2:  SUBWF  2A,F
....................       } 
....................        
....................       if(tmp>251) 
25E4:  MOVF   2A,W
25E6:  SUBLW  FB
25E8:  BC    25EE
....................       {tmp=251;} 
25EA:  MOVLW  FB
25EC:  MOVWF  2A
....................       if(tmp<4)          
25EE:  MOVF   2A,W
25F0:  SUBLW  03
25F2:  BNC   25F8
....................       {tmp=4;}       
25F4:  MOVLW  04
25F6:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
25F8:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Manual==20) 
25FC:  MOVF   2E,W
25FE:  SUBLW  14
2600:  BNZ   260A
....................    { 
....................       tmp=251; 
2602:  MOVLW  FB
2604:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
2606:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Semi==20) 
260A:  MOVF   2F,W
260C:  SUBLW  14
260E:  BNZ   2614
....................    { 
....................       set_pwm1_duty (ValorSemi); 
2610:  MOVFF  30,FBE
....................    } 
.................... } 
2614:  GOTO   682E (RETURN)
....................  
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
*
0312:  BTFSC  35.4
0314:  BRA    03D0
....................       { 
....................       delay_ms(500); 
0316:  MOVLW  02
0318:  MOVLB  1
031A:  MOVWF  x2F
031C:  MOVLW  FA
031E:  MOVWF  x32
0320:  MOVLB  0
0322:  RCALL  00B6
0324:  MOVLB  1
0326:  DECFSZ x2F,F
0328:  BRA    031C
....................          if(input(PIN_B0)) 
032A:  BSF    F93.0
032C:  BTFSS  F81.0
032E:  BRA    03CE
....................          { 
....................             lcd_init(); 
0330:  MOVLB  0
0332:  BRA    0184
....................             intensidadpantalla(contraste); 
0334:  MOVFF  21,12F
0338:  RCALL  01F8
....................             lcd_gotoxy(1,1); 
033A:  MOVLW  01
033C:  MOVLB  1
033E:  MOVWF  x32
0340:  MOVWF  x33
0342:  MOVLB  0
0344:  RCALL  020C
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
0346:  MOVLW  D6
0348:  MOVWF  FF6
034A:  MOVLW  03
034C:  MOVWF  FF7
034E:  RCALL  02F2
....................             lcd_gotoxy(1,2); 
0350:  MOVLW  01
0352:  MOVLB  1
0354:  MOVWF  x32
0356:  MOVLW  02
0358:  MOVWF  x33
035A:  MOVLB  0
035C:  RCALL  020C
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
035E:  MOVLW  EC
0360:  MOVWF  FF6
0362:  MOVLW  03
0364:  MOVWF  FF7
0366:  RCALL  02F2
....................             lcd_gotoxy(1,3); 
0368:  MOVLW  01
036A:  MOVLB  1
036C:  MOVWF  x32
036E:  MOVLW  03
0370:  MOVWF  x33
0372:  MOVLB  0
0374:  RCALL  020C
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
0376:  MOVLW  02
0378:  MOVWF  FF6
037A:  MOVLW  04
037C:  MOVWF  FF7
037E:  RCALL  02F2
....................             lcd_gotoxy(1,4); 
0380:  MOVLW  01
0382:  MOVLB  1
0384:  MOVWF  x32
0386:  MOVLW  04
0388:  MOVWF  x33
038A:  MOVLB  0
038C:  RCALL  020C
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
038E:  MOVLW  18
0390:  MOVWF  FF6
0392:  MOVLW  04
0394:  MOVWF  FF7
0396:  RCALL  02F2
....................             delay_ms(2000); 
0398:  MOVLW  08
039A:  MOVLB  1
039C:  MOVWF  x2F
039E:  MOVLW  FA
03A0:  MOVWF  x32
03A2:  MOVLB  0
03A4:  RCALL  00B6
03A6:  MOVLB  1
03A8:  DECFSZ x2F,F
03AA:  BRA    039E
....................             printf(lcd_putc,"\f"); 
03AC:  MOVLW  0C
03AE:  MOVWF  x31
03B0:  MOVLB  0
03B2:  RCALL  0286
....................             inicio=1; 
03B4:  BSF    35.4
....................             Menu=0; 
03B6:  CLRF   18
....................             ModoSleep=0; 
03B8:  BCF    35.3
....................             delay_ms(500); 
03BA:  MOVLW  02
03BC:  MOVLB  1
03BE:  MOVWF  x2F
03C0:  MOVLW  FA
03C2:  MOVWF  x32
03C4:  MOVLB  0
03C6:  RCALL  00B6
03C8:  MOVLB  1
03CA:  DECFSZ x2F,F
03CC:  BRA    03C0
03CE:  MOVLB  0
....................          } 
....................       } 
.................... } 
....................  
03D0:  BCF    FF2.1
03D2:  GOTO   0060
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(25561); 
....................    set_timer1(38286);  // 5 ms 
*
042E:  MOVLW  95
0430:  MOVWF  FCF
0432:  MOVLW  8E
0434:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    //set_timer1(6064);  // 5  ms 
....................    tiempos++; 
0436:  INCF   4F,F
0438:  BTFSC  FD8.2
043A:  INCF   50,F
....................    tiempos2++; 
043C:  INCF   53,F
043E:  BTFSC  FD8.2
0440:  INCF   54,F
....................     
....................    if(tiempos2==20) 
0442:  MOVF   53,W
0444:  SUBLW  14
0446:  BNZ   0452
0448:  MOVF   54,F
044A:  BNZ   0452
....................    {tiempos2=0;Lectura2=1;} 
044C:  CLRF   54
044E:  CLRF   53
0450:  BSF    35.6
....................     
....................    if(flag_latencia==1) 
0452:  BTFSS  35.0
0454:  BRA    045C
....................       { 
....................          t_latencia++;          
0456:  INCF   51,F
0458:  BTFSC  FD8.2
045A:  INCF   52,F
....................       } 
....................     
....................    if(t_latencia>=3000) 
045C:  MOVF   52,W
045E:  SUBLW  0A
0460:  BC    046E
0462:  XORLW  FF
0464:  BNZ   046C
0466:  MOVF   51,W
0468:  SUBLW  B7
046A:  BC    046E
....................    {Latencia=1;} 
046C:  BSF    35.1
....................     
....................    if(flag_iniciodamper==1) 
046E:  BTFSS  35.7
0470:  BRA    048E
....................    { 
....................       t_iniciodamper++; 
0472:  INCF   55,F
0474:  BTFSC  FD8.2
0476:  INCF   56,F
....................       if(t_iniciodamper>=12000) 
0478:  MOVF   56,W
047A:  SUBLW  2D
047C:  BC    048E
047E:  XORLW  FF
0480:  BNZ   0488
0482:  MOVF   55,W
0484:  SUBLW  DF
0486:  BC    048E
....................       { 
....................          estadomv=1;Motor_on; 
0488:  BSF    34.1
048A:  BSF    F8B.0
048C:  BCF    F94.0
....................       } 
....................    } 
....................     
....................    if(t_iniciodamper>=18000) 
048E:  MOVF   56,W
0490:  SUBLW  45
0492:  BC    04A2
0494:  XORLW  FF
0496:  BNZ   049E
0498:  MOVF   55,W
049A:  SUBLW  4F
049C:  BC    04A2
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
049E:  BSF    4E.0
04A0:  BCF    35.7
....................    } 
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
04A2:  MOVF   4F,W
04A4:  SUBLW  C8
04A6:  BNZ   04D0
04A8:  MOVF   50,F
04AA:  BNZ   04D0
....................    {tiempos=0;  
04AC:  CLRF   50
04AE:  CLRF   4F
....................         Lectura=1; 
04B0:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
04B2:  BTFSS  34.1
04B4:  BRA    04D0
04B6:  BTFSS  35.2
04B8:  BRA    04D0
....................          { 
....................             segundos++; 
04BA:  INCF   31,F
....................           
....................          if(segundos==60) 
04BC:  MOVF   31,W
04BE:  SUBLW  3C
04C0:  BNZ   04C6
....................          { 
....................             segundos=0;minutos++; 
04C2:  CLRF   31
04C4:  INCF   32,F
....................          } 
....................           
....................          if(minutos==60) 
04C6:  MOVF   32,W
04C8:  SUBLW  3C
04CA:  BNZ   04D0
....................          { 
....................             minutos=0;horas++; 
04CC:  CLRF   32
04CE:  INCF   33,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
04D0:  BCF    F9E.0
04D2:  GOTO   0060
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
11DC:  MOVLB  1
11DE:  DECFSZ x01,W
11E0:  BRA    1252
....................    {if(estadoalarma==0) 
11E2:  BTFSC  34.2
11E4:  BRA    121A
11E6:  CLRF   16
11E8:  BTFSC  FF2.7
11EA:  BSF    16.7
11EC:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA          OFF");} 
11EE:  MOVLW  02
11F0:  MOVWF  x32
11F2:  MOVFF  102,133
11F6:  MOVLB  0
11F8:  CALL   020C
11FC:  BTFSC  16.7
11FE:  BSF    FF2.7
1200:  MOVLW  D6
1202:  MOVWF  FF6
1204:  MOVLW  04
1206:  MOVWF  FF7
1208:  CLRF   16
120A:  BTFSC  FF2.7
120C:  BSF    16.7
120E:  BCF    FF2.7
1210:  CALL   02F2
1214:  BTFSC  16.7
1216:  BSF    FF2.7
1218:  MOVLB  1
....................    if(estadoalarma==1) 
121A:  BTFSS  34.2
121C:  BRA    1252
121E:  CLRF   16
1220:  BTFSC  FF2.7
1222:  BSF    16.7
1224:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA           ON");} 
1226:  MOVLW  02
1228:  MOVWF  x32
122A:  MOVFF  102,133
122E:  MOVLB  0
1230:  CALL   020C
1234:  BTFSC  16.7
1236:  BSF    FF2.7
1238:  MOVLW  EA
123A:  MOVWF  FF6
123C:  MOVLW  04
123E:  MOVWF  FF7
1240:  CLRF   16
1242:  BTFSC  FF2.7
1244:  BSF    16.7
1246:  BCF    FF2.7
1248:  CALL   02F2
124C:  BTFSC  16.7
124E:  BSF    FF2.7
1250:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
1252:  MOVF   x01,W
1254:  SUBLW  02
1256:  BNZ   128C
1258:  CLRF   16
125A:  BTFSC  FF2.7
125C:  BSF    16.7
125E:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"FILTRO             ");} 
1260:  MOVLW  02
1262:  MOVWF  x32
1264:  MOVFF  102,133
1268:  MOVLB  0
126A:  CALL   020C
126E:  BTFSC  16.7
1270:  BSF    FF2.7
1272:  MOVLW  FE
1274:  MOVWF  FF6
1276:  MOVLW  04
1278:  MOVWF  FF7
127A:  CLRF   16
127C:  BTFSC  FF2.7
127E:  BSF    16.7
1280:  BCF    FF2.7
1282:  CALL   02F2
1286:  BTFSC  16.7
1288:  BSF    FF2.7
128A:  MOVLB  1
....................     
....................    if(x==3) 
128C:  MOVF   x01,W
128E:  SUBLW  03
1290:  BNZ   12C6
1292:  CLRF   16
1294:  BTFSC  FF2.7
1296:  BSF    16.7
1298:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"SETPOINT           ");} 
129A:  MOVLW  02
129C:  MOVWF  x32
129E:  MOVFF  102,133
12A2:  MOVLB  0
12A4:  CALL   020C
12A8:  BTFSC  16.7
12AA:  BSF    FF2.7
12AC:  MOVLW  12
12AE:  MOVWF  FF6
12B0:  MOVLW  05
12B2:  MOVWF  FF7
12B4:  CLRF   16
12B6:  BTFSC  FF2.7
12B8:  BSF    16.7
12BA:  BCF    FF2.7
12BC:  CALL   02F2
12C0:  BTFSC  16.7
12C2:  BSF    FF2.7
12C4:  MOVLB  1
....................     
....................    if(x==4) 
12C6:  MOVF   x01,W
12C8:  SUBLW  04
12CA:  BNZ   1300
12CC:  CLRF   16
12CE:  BTFSC  FF2.7
12D0:  BSF    16.7
12D2:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"CAMBIO CONTRASENA  ");} 
12D4:  MOVLW  02
12D6:  MOVWF  x32
12D8:  MOVFF  102,133
12DC:  MOVLB  0
12DE:  CALL   020C
12E2:  BTFSC  16.7
12E4:  BSF    FF2.7
12E6:  MOVLW  26
12E8:  MOVWF  FF6
12EA:  MOVLW  05
12EC:  MOVWF  FF7
12EE:  CLRF   16
12F0:  BTFSC  FF2.7
12F2:  BSF    16.7
12F4:  BCF    FF2.7
12F6:  CALL   02F2
12FA:  BTFSC  16.7
12FC:  BSF    FF2.7
12FE:  MOVLB  1
....................     
....................    if(x==5) 
1300:  MOVF   x01,W
1302:  SUBLW  05
1304:  BNZ   133A
1306:  CLRF   16
1308:  BTFSC  FF2.7
130A:  BSF    16.7
130C:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MEDIA MOVIL        ");} 
130E:  MOVLW  02
1310:  MOVWF  x32
1312:  MOVFF  102,133
1316:  MOVLB  0
1318:  CALL   020C
131C:  BTFSC  16.7
131E:  BSF    FF2.7
1320:  MOVLW  3A
1322:  MOVWF  FF6
1324:  MOVLW  05
1326:  MOVWF  FF7
1328:  CLRF   16
132A:  BTFSC  FF2.7
132C:  BSF    16.7
132E:  BCF    FF2.7
1330:  CALL   02F2
1334:  BTFSC  16.7
1336:  BSF    FF2.7
1338:  MOVLB  1
....................     
....................    if(x==6) 
133A:  MOVF   x01,W
133C:  SUBLW  06
133E:  BNZ   1374
1340:  CLRF   16
1342:  BTFSC  FF2.7
1344:  BSF    16.7
1346:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"PUNTO ZERO         ");} 
1348:  MOVLW  02
134A:  MOVWF  x32
134C:  MOVFF  102,133
1350:  MOVLB  0
1352:  CALL   020C
1356:  BTFSC  16.7
1358:  BSF    FF2.7
135A:  MOVLW  4E
135C:  MOVWF  FF6
135E:  MOVLW  05
1360:  MOVWF  FF7
1362:  CLRF   16
1364:  BTFSC  FF2.7
1366:  BSF    16.7
1368:  BCF    FF2.7
136A:  CALL   02F2
136E:  BTFSC  16.7
1370:  BSF    FF2.7
1372:  MOVLB  1
....................     
....................    if(x==7) 
1374:  MOVF   x01,W
1376:  SUBLW  07
1378:  BNZ   13AE
137A:  CLRF   16
137C:  BTFSC  FF2.7
137E:  BSF    16.7
1380:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MANTENIMIENTO      ");} 
1382:  MOVLW  02
1384:  MOVWF  x32
1386:  MOVFF  102,133
138A:  MOVLB  0
138C:  CALL   020C
1390:  BTFSC  16.7
1392:  BSF    FF2.7
1394:  MOVLW  62
1396:  MOVWF  FF6
1398:  MOVLW  05
139A:  MOVWF  FF7
139C:  CLRF   16
139E:  BTFSC  FF2.7
13A0:  BSF    16.7
13A2:  BCF    FF2.7
13A4:  CALL   02F2
13A8:  BTFSC  16.7
13AA:  BSF    FF2.7
13AC:  MOVLB  1
....................     
....................    if(x==8) 
13AE:  MOVF   x01,W
13B0:  SUBLW  08
13B2:  BNZ   13E8
13B4:  CLRF   16
13B6:  BTFSC  FF2.7
13B8:  BSF    16.7
13BA:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MODO               ");} 
13BC:  MOVLW  02
13BE:  MOVWF  x32
13C0:  MOVFF  102,133
13C4:  MOVLB  0
13C6:  CALL   020C
13CA:  BTFSC  16.7
13CC:  BSF    FF2.7
13CE:  MOVLW  76
13D0:  MOVWF  FF6
13D2:  MOVLW  05
13D4:  MOVWF  FF7
13D6:  CLRF   16
13D8:  BTFSC  FF2.7
13DA:  BSF    16.7
13DC:  BCF    FF2.7
13DE:  CALL   02F2
13E2:  BTFSC  16.7
13E4:  BSF    FF2.7
13E6:  MOVLB  1
.................... } 
13E8:  MOVLB  0
13EA:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1946:  MOVFF  FF,FBE
.................... } 
194A:  RETLW  00
....................  
.................... void main () 
.................... { 
*
2618:  CLRF   FF8
261A:  BCF    FD0.7
261C:  BSF    07.7
261E:  CLRF   FEA
2620:  CLRF   FE9
2622:  MOVLW  64
2624:  MOVWF  18
2626:  MOVLW  09
2628:  MOVWF  19
262A:  MOVLW  02
262C:  MOVWF  1A
262E:  MOVLW  0B
2630:  MOVWF  1B
2632:  MOVLW  02
2634:  MOVWF  1C
2636:  MOVLW  03
2638:  MOVWF  1D
263A:  MOVLW  02
263C:  MOVWF  1E
263E:  MOVWF  1F
2640:  MOVLW  04
2642:  MOVWF  20
2644:  MOVLW  0A
2646:  MOVWF  21
2648:  CLRF   22
264A:  CLRF   23
264C:  CLRF   24
264E:  CLRF   25
2650:  CLRF   26
2652:  CLRF   27
2654:  CLRF   28
2656:  CLRF   29
2658:  MOVWF  2A
265A:  CLRF   2B
265C:  MOVWF  2C
265E:  MOVWF  2D
2660:  MOVWF  2E
2662:  MOVWF  2F
2664:  CLRF   30
2666:  CLRF   31
2668:  CLRF   32
266A:  CLRF   33
266C:  BCF    34.0
266E:  BCF    34.1
2670:  BCF    34.2
2672:  BCF    34.3
2674:  BCF    34.4
2676:  BCF    34.5
2678:  BCF    34.6
267A:  BCF    34.7
267C:  BCF    35.0
267E:  BCF    35.1
2680:  BCF    35.2
2682:  CLRF   36
2684:  CLRF   45
2686:  CLRF   44
2688:  CLRF   43
268A:  CLRF   42
268C:  CLRF   49
268E:  CLRF   48
2690:  CLRF   47
2692:  CLRF   46
2694:  CLRF   4D
2696:  MOVLW  80
2698:  MOVWF  4C
269A:  MOVLW  56
269C:  MOVWF  4B
269E:  MOVLW  87
26A0:  MOVWF  4A
26A2:  BCF    35.4
26A4:  BCF    35.5
26A6:  BCF    35.6
26A8:  BCF    35.7
26AA:  BCF    4E.0
26AC:  BCF    4E.1
26AE:  BCF    4E.2
26B0:  BCF    4E.3
26B2:  CLRF   50
26B4:  CLRF   4F
26B6:  CLRF   52
26B8:  CLRF   51
26BA:  CLRF   54
26BC:  CLRF   53
26BE:  CLRF   56
26C0:  CLRF   55
26C2:  CLRF   5A
26C4:  MOVLW  E0
26C6:  MOVWF  59
26C8:  MOVLW  5D
26CA:  MOVWF  58
26CC:  MOVLW  8A
26CE:  MOVWF  57
26D0:  CLRF   5E
26D2:  MOVLW  C0
26D4:  MOVWF  5D
26D6:  MOVLW  28
26D8:  MOVWF  5C
26DA:  MOVLW  89
26DC:  MOVWF  5B
26DE:  MOVLW  33
26E0:  MOVWF  x62
26E2:  MOVLW  13
26E4:  MOVWF  x61
26E6:  MOVLW  15
26E8:  MOVWF  x60
26EA:  MOVLW  87
26EC:  MOVWF  5F
26EE:  CLRF   x66
26F0:  CLRF   x65
26F2:  CLRF   x64
26F4:  CLRF   x63
26F6:  CLRF   x6A
26F8:  CLRF   x69
26FA:  CLRF   x68
26FC:  CLRF   x67
26FE:  CLRF   x6E
2700:  CLRF   x6D
2702:  MOVLW  7A
2704:  MOVWF  x6C
2706:  MOVLW  88
2708:  MOVWF  x6B
270A:  CLRF   x72
270C:  CLRF   x71
270E:  CLRF   x70
2710:  CLRF   x6F
2712:  CLRF   x76
2714:  CLRF   x75
2716:  CLRF   x74
2718:  CLRF   x73
271A:  CLRF   x7A
271C:  CLRF   x79
271E:  CLRF   x78
2720:  CLRF   x77
2722:  MOVLW  98
2724:  MOVWF  x7E
2726:  MOVLW  D8
2728:  MOVWF  x7D
272A:  MOVLW  5E
272C:  MOVWF  x7C
272E:  MOVLW  70
2730:  MOVWF  x7B
2732:  MOVLW  90
2734:  MOVWF  x82
2736:  MOVLW  C0
2738:  MOVWF  x81
273A:  MOVLW  91
273C:  MOVWF  x80
273E:  MOVLW  7B
2740:  MOVWF  x7F
2742:  MOVLW  DE
2744:  MOVWF  x86
2746:  MOVLW  68
2748:  MOVWF  x85
274A:  MOVLW  7E
274C:  MOVWF  x84
274E:  MOVLW  83
2750:  MOVWF  x83
2752:  MOVLW  E5
2754:  MOVWF  x8A
2756:  MOVLW  1D
2758:  MOVWF  x89
275A:  MOVLW  94
275C:  MOVWF  x88
275E:  MOVLW  8B
2760:  MOVWF  x87
2762:  CLRF   x8E
2764:  CLRF   x8D
2766:  CLRF   x8C
2768:  CLRF   x8B
276A:  CLRF   x92
276C:  CLRF   x91
276E:  CLRF   x90
2770:  CLRF   x8F
2772:  CLRF   x96
2774:  CLRF   x95
2776:  CLRF   x94
2778:  CLRF   x93
277A:  CLRF   x9A
277C:  CLRF   x99
277E:  CLRF   x98
2780:  CLRF   x97
2782:  CLRF   x9E
2784:  CLRF   x9D
2786:  CLRF   x9C
2788:  CLRF   x9B
278A:  CLRF   xA2
278C:  CLRF   xA1
278E:  CLRF   xA0
2790:  CLRF   x9F
2792:  MOVWF  xA6
2794:  MOVLW  FD
2796:  MOVWF  xA5
2798:  MOVLW  65
279A:  MOVWF  xA4
279C:  MOVLW  7C
279E:  MOVWF  xA3
27A0:  CLRF   xAA
27A2:  CLRF   xA9
27A4:  CLRF   xA8
27A6:  CLRF   xA7
27A8:  CLRF   xAE
27AA:  CLRF   xAD
27AC:  CLRF   xAC
27AE:  CLRF   xAB
27B0:  CLRF   xB2
27B2:  CLRF   xB1
27B4:  CLRF   xB0
27B6:  CLRF   xAF
27B8:  CLRF   xB6
27BA:  CLRF   xB5
27BC:  CLRF   xB4
27BE:  CLRF   xB3
27C0:  CLRF   xBA
27C2:  CLRF   xB9
27C4:  CLRF   xB8
27C6:  CLRF   xB7
27C8:  CLRF   xBE
27CA:  CLRF   xBD
27CC:  CLRF   xBC
27CE:  CLRF   xBB
27D0:  CLRF   xC2
27D2:  CLRF   xC1
27D4:  CLRF   xC0
27D6:  MOVLW  7F
27D8:  MOVWF  xBF
27DA:  CLRF   xC6
27DC:  CLRF   xC5
27DE:  MOVLW  24
27E0:  MOVWF  xC4
27E2:  MOVLW  88
27E4:  MOVWF  xC3
27E6:  CLRF   xCA
27E8:  CLRF   xC9
27EA:  CLRF   xC8
27EC:  CLRF   xC7
27EE:  CLRF   xCE
27F0:  CLRF   xCD
27F2:  CLRF   xCC
27F4:  CLRF   xCB
27F6:  MOVF   FC1,W
27F8:  ANDLW  C0
27FA:  IORLW  0F
27FC:  MOVWF  FC1
27FE:  MOVLW  07
2800:  MOVWF  FB4
2802:  MOVLW  3E
2804:  MOVWF  37
2806:  MOVLW  20
2808:  MOVWF  38
280A:  MOVLW  5E
280C:  MOVWF  39
280E:  CLRF   3A
2810:  CLRF   3B
2812:  CLRF   3C
2814:  CLRF   3D
2816:  CLRF   3E
2818:  CLRF   3F
281A:  CLRF   40
281C:  CLRF   41
281E:  CLRF   xCF
2820:  CLRF   xD0
2822:  CLRF   xD1
2824:  CLRF   xD2
2826:  CLRF   xD3
2828:  CLRF   xD4
282A:  CLRF   xD5
282C:  CLRF   xD6
282E:  CLRF   xD7
2830:  CLRF   xD8
2832:  CLRF   xD9
2834:  CLRF   xDA
2836:  CLRF   xDB
2838:  CLRF   xDC
283A:  CLRF   xDD
283C:  CLRF   xDE
283E:  CLRF   xDF
2840:  CLRF   xE0
2842:  CLRF   xE1
2844:  CLRF   xE2
2846:  CLRF   xE3
2848:  CLRF   xE4
284A:  CLRF   xE5
284C:  CLRF   xE6
284E:  CLRF   xE7
2850:  CLRF   xE8
2852:  CLRF   xE9
2854:  CLRF   xEA
2856:  CLRF   xEB
2858:  CLRF   xEC
285A:  CLRF   xED
285C:  CLRF   xEE
285E:  CLRF   xEF
2860:  CLRF   xF0
2862:  CLRF   xF1
2864:  CLRF   xF2
2866:  CLRF   xF3
2868:  CLRF   xF4
286A:  CLRF   xF5
286C:  CLRF   xF6
286E:  CLRF   xF7
2870:  CLRF   xF8
2872:  CLRF   xF9
2874:  CLRF   xFA
2876:  CLRF   xFB
2878:  CLRF   xFC
287A:  CLRF   xFD
287C:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
287E:  MOVF   FC1,W
2880:  ANDLW  C0
2882:  IORLW  0B
2884:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2886:  BCF    FC0.0
2888:  BSF    FC0.1
288A:  BCF    FC0.2
288C:  BSF    FC0.7
288E:  BSF    FC2.0
....................    output_d(0);  
2890:  CLRF   F95
2892:  CLRF   F8C
....................    ModoSleep=1; 
2894:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2896:  MOVLW  85
2898:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
289A:  BSF    F9D.0
....................    enable_interrupts(INT_EXT_L2H); 
289C:  BSF    FF2.4
289E:  BSF    FF1.6
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
28A0:  MOVLW  00
28A2:  IORLW  05
28A4:  MOVWF  FCA
28A6:  MOVLW  FF
28A8:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
28AA:  BCF    F94.2
28AC:  BCF    F8B.2
28AE:  BCF    F96.6
28B0:  MOVLW  0C
28B2:  MOVWF  FBD
28B4:  CLRF   FB7
28B6:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
28B8:  MOVLW  C0
28BA:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
28BC:  CLRF   FBE
....................     
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
28BE:  MOVFF  FF2,100
28C2:  BCF    FF2.7
28C4:  CLRF   FA9
28C6:  BCF    FA6.6
28C8:  BCF    FA6.7
28CA:  BSF    FA6.0
28CC:  MOVF   FA8,W
28CE:  MOVLB  1
28D0:  BTFSC  x00.7
28D2:  BSF    FF2.7
28D4:  MOVWF  3E
28D6:  CLRF   16
28D8:  BTFSC  FF2.7
28DA:  BSF    16.7
28DC:  BCF    FF2.7
28DE:  MOVLW  14
28E0:  MOVWF  x32
28E2:  MOVLB  0
28E4:  CALL   00B6
28E8:  BTFSC  16.7
28EA:  BSF    FF2.7
28EC:  MOVFF  FF2,100
28F0:  BCF    FF2.7
28F2:  MOVLW  01
28F4:  MOVWF  FA9
28F6:  BCF    FA6.6
28F8:  BCF    FA6.7
28FA:  BSF    FA6.0
28FC:  MOVF   FA8,W
28FE:  MOVLB  1
2900:  BTFSC  x00.7
2902:  BSF    FF2.7
2904:  MOVWF  3F
2906:  CLRF   16
2908:  BTFSC  FF2.7
290A:  BSF    16.7
290C:  BCF    FF2.7
290E:  MOVLW  14
2910:  MOVWF  x32
2912:  MOVLB  0
2914:  CALL   00B6
2918:  BTFSC  16.7
291A:  BSF    FF2.7
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
291C:  MOVFF  FF2,100
2920:  BCF    FF2.7
2922:  MOVLW  02
2924:  MOVWF  FA9
2926:  BCF    FA6.6
2928:  BCF    FA6.7
292A:  BSF    FA6.0
292C:  MOVF   FA8,W
292E:  MOVLB  1
2930:  BTFSC  x00.7
2932:  BSF    FF2.7
2934:  MOVWF  40
2936:  CLRF   16
2938:  BTFSC  FF2.7
293A:  BSF    16.7
293C:  BCF    FF2.7
293E:  MOVLW  14
2940:  MOVWF  x32
2942:  MOVLB  0
2944:  CALL   00B6
2948:  BTFSC  16.7
294A:  BSF    FF2.7
294C:  MOVFF  FF2,100
2950:  BCF    FF2.7
2952:  MOVLW  03
2954:  MOVWF  FA9
2956:  BCF    FA6.6
2958:  BCF    FA6.7
295A:  BSF    FA6.0
295C:  MOVF   FA8,W
295E:  MOVLB  1
2960:  BTFSC  x00.7
2962:  BSF    FF2.7
2964:  MOVWF  41
2966:  CLRF   16
2968:  BTFSC  FF2.7
296A:  BSF    16.7
296C:  BCF    FF2.7
296E:  MOVLW  14
2970:  MOVWF  x32
2972:  MOVLB  0
2974:  CALL   00B6
2978:  BTFSC  16.7
297A:  BSF    FF2.7
....................    estadoalarma=read_eeprom(5); 
297C:  MOVFF  FF2,100
2980:  BCF    FF2.7
2982:  MOVLW  05
2984:  MOVWF  FA9
2986:  BCF    FA6.6
2988:  BCF    FA6.7
298A:  BSF    FA6.0
298C:  MOVF   FA8,W
298E:  MOVLB  1
2990:  BTFSC  x00.7
2992:  BSF    FF2.7
2994:  MOVWF  01
2996:  BCF    34.2
2998:  BTFSC  01.0
299A:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
299C:  MOVFF  FF2,100
29A0:  BCF    FF2.7
29A2:  MOVLW  0A
29A4:  MOVWF  FA9
29A6:  BCF    FA6.6
29A8:  BCF    FA6.7
29AA:  BSF    FA6.0
29AC:  MOVF   FA8,W
29AE:  BTFSC  x00.7
29B0:  BSF    FF2.7
29B2:  MOVWF  2E
29B4:  MOVFF  FF2,100
29B8:  BCF    FF2.7
29BA:  MOVLW  0B
29BC:  MOVWF  FA9
29BE:  BCF    FA6.6
29C0:  BCF    FA6.7
29C2:  BSF    FA6.0
29C4:  MOVF   FA8,W
29C6:  BTFSC  x00.7
29C8:  BSF    FF2.7
29CA:  MOVWF  2D
29CC:  MOVFF  FF2,100
29D0:  BCF    FF2.7
29D2:  MOVLW  0C
29D4:  MOVWF  FA9
29D6:  BCF    FA6.6
29D8:  BCF    FA6.7
29DA:  BSF    FA6.0
29DC:  MOVF   FA8,W
29DE:  BTFSC  x00.7
29E0:  BSF    FF2.7
29E2:  MOVWF  2F
29E4:  MOVFF  FF2,100
29E8:  BCF    FF2.7
29EA:  MOVLW  0D
29EC:  MOVWF  FA9
29EE:  BCF    FA6.6
29F0:  BCF    FA6.7
29F2:  BSF    FA6.0
29F4:  MOVF   FA8,W
29F6:  BTFSC  x00.7
29F8:  BSF    FF2.7
29FA:  MOVWF  30
29FC:  MOVFF  30,2A
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
2A00:  MOVFF  FF2,100
2A04:  BCF    FF2.7
2A06:  MOVLW  19
2A08:  MOVWF  FA9
2A0A:  BCF    FA6.6
2A0C:  BCF    FA6.7
2A0E:  BSF    FA6.0
2A10:  MOVF   FA8,W
2A12:  BTFSC  x00.7
2A14:  BSF    FF2.7
2A16:  MOVWF  22
....................    Temporal=read_eeprom(26); 
2A18:  MOVFF  FF2,100
2A1C:  BCF    FF2.7
2A1E:  MOVLW  1A
2A20:  MOVWF  FA9
2A22:  BCF    FA6.6
2A24:  BCF    FA6.7
2A26:  BSF    FA6.0
2A28:  MOVF   FA8,W
2A2A:  BTFSC  x00.7
2A2C:  BSF    FF2.7
2A2E:  CLRF   x0A
2A30:  MOVWF  x09
2A32:  MOVLB  0
2A34:  CALL   0C56
2A38:  MOVFF  03,AA
2A3C:  MOVFF  02,A9
2A40:  MOVFF  01,A8
2A44:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
2A48:  MOVFF  AA,121
2A4C:  MOVFF  A9,120
2A50:  MOVFF  A8,11F
2A54:  MOVFF  A7,11E
2A58:  MOVLB  1
2A5A:  CLRF   x25
2A5C:  CLRF   x24
2A5E:  MOVLW  48
2A60:  MOVWF  x23
2A62:  MOVLW  85
2A64:  MOVWF  x22
2A66:  MOVLB  0
2A68:  CALL   0C8C
2A6C:  MOVFF  03,AA
2A70:  MOVFF  02,A9
2A74:  MOVFF  01,A8
2A78:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
2A7C:  MOVLB  1
2A7E:  CLRF   x0A
2A80:  MOVFF  22,109
2A84:  MOVLB  0
2A86:  CALL   0C56
2A8A:  BCF    FD8.1
2A8C:  MOVFF  03,121
2A90:  MOVFF  02,120
2A94:  MOVFF  01,11F
2A98:  MOVFF  00,11E
2A9C:  MOVFF  AA,125
2AA0:  MOVFF  A9,124
2AA4:  MOVFF  A8,123
2AA8:  MOVFF  A7,122
2AAC:  CALL   0DEA
2AB0:  MOVFF  03,C2
2AB4:  MOVFF  02,C1
2AB8:  MOVFF  01,C0
2ABC:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
2AC0:  MOVFF  FF2,100
2AC4:  BCF    FF2.7
2AC6:  MOVLW  28
2AC8:  MOVWF  FA9
2ACA:  BCF    FA6.6
2ACC:  BCF    FA6.7
2ACE:  BSF    FA6.0
2AD0:  MOVF   FA8,W
2AD2:  MOVLB  1
2AD4:  BTFSC  x00.7
2AD6:  BSF    FF2.7
2AD8:  MOVWF  22
....................    Temporal=read_eeprom(41); 
2ADA:  MOVFF  FF2,100
2ADE:  BCF    FF2.7
2AE0:  MOVLW  29
2AE2:  MOVWF  FA9
2AE4:  BCF    FA6.6
2AE6:  BCF    FA6.7
2AE8:  BSF    FA6.0
2AEA:  MOVF   FA8,W
2AEC:  BTFSC  x00.7
2AEE:  BSF    FF2.7
2AF0:  CLRF   x0A
2AF2:  MOVWF  x09
2AF4:  MOVLB  0
2AF6:  CALL   0C56
2AFA:  MOVFF  03,AA
2AFE:  MOVFF  02,A9
2B02:  MOVFF  01,A8
2B06:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
2B0A:  MOVFF  AA,121
2B0E:  MOVFF  A9,120
2B12:  MOVFF  A8,11F
2B16:  MOVFF  A7,11E
2B1A:  MOVLB  1
2B1C:  CLRF   x25
2B1E:  CLRF   x24
2B20:  MOVLW  48
2B22:  MOVWF  x23
2B24:  MOVLW  85
2B26:  MOVWF  x22
2B28:  MOVLB  0
2B2A:  CALL   0C8C
2B2E:  MOVFF  03,AA
2B32:  MOVFF  02,A9
2B36:  MOVFF  01,A8
2B3A:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
2B3E:  MOVLB  1
2B40:  CLRF   x0A
2B42:  MOVFF  22,109
2B46:  MOVLB  0
2B48:  CALL   0C56
2B4C:  BCF    FD8.1
2B4E:  MOVFF  03,121
2B52:  MOVFF  02,120
2B56:  MOVFF  01,11F
2B5A:  MOVFF  00,11E
2B5E:  MOVFF  AA,125
2B62:  MOVFF  A9,124
2B66:  MOVFF  A8,123
2B6A:  MOVFF  A7,122
2B6E:  CALL   0DEA
2B72:  MOVFF  03,45
2B76:  MOVFF  02,44
2B7A:  MOVFF  01,43
2B7E:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
2B82:  MOVFF  FF2,100
2B86:  BCF    FF2.7
2B88:  MOVLW  3C
2B8A:  MOVWF  FA9
2B8C:  BCF    FA6.6
2B8E:  BCF    FA6.7
2B90:  BSF    FA6.0
2B92:  MOVF   FA8,W
2B94:  MOVLB  1
2B96:  BTFSC  x00.7
2B98:  BSF    FF2.7
2B9A:  MOVWF  25
....................    Temporal1=read_eeprom(61); 
2B9C:  MOVFF  FF2,100
2BA0:  BCF    FF2.7
2BA2:  MOVLW  3D
2BA4:  MOVWF  FA9
2BA6:  BCF    FA6.6
2BA8:  BCF    FA6.7
2BAA:  BSF    FA6.0
2BAC:  MOVF   FA8,W
2BAE:  BTFSC  x00.7
2BB0:  BSF    FF2.7
2BB2:  CLRF   x0A
2BB4:  MOVWF  x09
2BB6:  MOVLB  0
2BB8:  CALL   0C56
2BBC:  MOVFF  03,B6
2BC0:  MOVFF  02,B5
2BC4:  MOVFF  01,B4
2BC8:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
2BCC:  MOVFF  B6,121
2BD0:  MOVFF  B5,120
2BD4:  MOVFF  B4,11F
2BD8:  MOVFF  B3,11E
2BDC:  MOVLB  1
2BDE:  CLRF   x25
2BE0:  CLRF   x24
2BE2:  MOVLW  48
2BE4:  MOVWF  x23
2BE6:  MOVLW  85
2BE8:  MOVWF  x22
2BEA:  MOVLB  0
2BEC:  CALL   0C8C
2BF0:  MOVFF  03,B6
2BF4:  MOVFF  02,B5
2BF8:  MOVFF  01,B4
2BFC:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
2C00:  MOVLB  1
2C02:  CLRF   x0A
2C04:  MOVFF  25,109
2C08:  MOVLB  0
2C0A:  CALL   0C56
2C0E:  BCF    FD8.1
2C10:  MOVFF  03,121
2C14:  MOVFF  02,120
2C18:  MOVFF  01,11F
2C1C:  MOVFF  00,11E
2C20:  MOVFF  B6,125
2C24:  MOVFF  B5,124
2C28:  MOVFF  B4,123
2C2C:  MOVFF  B3,122
2C30:  CALL   0DEA
2C34:  MOVFF  03,BE
2C38:  MOVFF  02,BD
2C3C:  MOVFF  01,BC
2C40:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
2C44:  MOVFF  FF2,100
2C48:  BCF    FF2.7
2C4A:  MOVLW  32
2C4C:  MOVWF  FA9
2C4E:  BCF    FA6.6
2C50:  BCF    FA6.7
2C52:  BSF    FA6.0
2C54:  MOVF   FA8,W
2C56:  MOVLB  1
2C58:  BTFSC  x00.7
2C5A:  BSF    FF2.7
2C5C:  MOVWF  2C
....................  
....................    MediaMovil=read_eeprom(42); 
2C5E:  MOVFF  FF2,100
2C62:  BCF    FF2.7
2C64:  MOVLW  2A
2C66:  MOVWF  FA9
2C68:  BCF    FA6.6
2C6A:  BCF    FA6.7
2C6C:  BSF    FA6.0
2C6E:  MOVF   FA8,W
2C70:  BTFSC  x00.7
2C72:  BSF    FF2.7
2C74:  MOVWF  2B
....................    if(MediaMovil>12) 
2C76:  MOVF   2B,W
2C78:  SUBLW  0C
2C7A:  BC    2C80
....................    {MediaMovil=12;} 
2C7C:  MOVLW  0C
2C7E:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
2C80:  MOVF   2B,F
2C82:  BNZ   2C88
....................    {MediaMovil=1;} 
2C84:  MOVLW  01
2C86:  MOVWF  2B
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
2C88:  MOVFF  FF2,100
2C8C:  BCF    FF2.7
2C8E:  MOVLW  46
2C90:  MOVWF  FA9
2C92:  BCF    FA6.6
2C94:  BCF    FA6.7
2C96:  BSF    FA6.0
2C98:  MOVF   FA8,W
2C9A:  BTFSC  x00.7
2C9C:  BSF    FF2.7
2C9E:  MOVWF  31
2CA0:  MOVFF  FF2,100
2CA4:  BCF    FF2.7
2CA6:  MOVLW  47
2CA8:  MOVWF  FA9
2CAA:  BCF    FA6.6
2CAC:  BCF    FA6.7
2CAE:  BSF    FA6.0
2CB0:  MOVF   FA8,W
2CB2:  BTFSC  x00.7
2CB4:  BSF    FF2.7
2CB6:  MOVWF  32
2CB8:  MOVFF  FF2,100
2CBC:  BCF    FF2.7
2CBE:  MOVLW  48
2CC0:  MOVWF  FA9
2CC2:  BCF    FA6.6
2CC4:  BCF    FA6.7
2CC6:  BSF    FA6.0
2CC8:  MOVF   FA8,W
2CCA:  BTFSC  x00.7
2CCC:  BSF    FF2.7
2CCE:  MOVWF  33
2CD0:  MOVFF  FF2,100
2CD4:  BCF    FF2.7
2CD6:  MOVLW  49
2CD8:  MOVWF  FA9
2CDA:  BCF    FA6.6
2CDC:  BCF    FA6.7
2CDE:  BSF    FA6.0
2CE0:  MOVF   FA8,W
2CE2:  BTFSC  x00.7
2CE4:  BSF    FF2.7
2CE6:  MOVWF  01
2CE8:  BCF    35.2
2CEA:  BTFSC  01.0
2CEC:  BSF    35.2
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2CEE:  MOVF   18,F
2CF0:  BTFSS  FD8.2
2CF2:  BRA    334E
....................    flag_latencia=1;set_pwm1_duty(0); 
2CF4:  BSF    35.0
2CF6:  CLRF   FBE
....................       if(Latencia==1) 
2CF8:  BTFSS  35.1
2CFA:  BRA    2D16
2CFC:  CLRF   16
2CFE:  BTFSC  FF2.7
2D00:  BSF    16.7
2D02:  BCF    FF2.7
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2D04:  MOVLW  0C
2D06:  MOVWF  x31
2D08:  MOVLB  0
2D0A:  CALL   0286
2D0E:  BTFSC  16.7
2D10:  BSF    FF2.7
2D12:  RESET
2D14:  MOVLB  1
2D16:  CLRF   16
2D18:  BTFSC  FF2.7
2D1A:  BSF    16.7
2D1C:  BCF    FF2.7
....................          } 
....................    lcd_gotoxy(1,1); 
2D1E:  MOVLW  01
2D20:  MOVWF  x32
2D22:  MOVWF  x33
2D24:  MOVLB  0
2D26:  CALL   020C
2D2A:  BTFSC  16.7
2D2C:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
2D2E:  MOVLW  8A
2D30:  MOVWF  FF6
2D32:  MOVLW  05
2D34:  MOVWF  FF7
2D36:  CLRF   16
2D38:  BTFSC  FF2.7
2D3A:  BSF    16.7
2D3C:  BCF    FF2.7
2D3E:  CALL   02F2
2D42:  BTFSC  16.7
2D44:  BSF    FF2.7
2D46:  CLRF   16
2D48:  BTFSC  FF2.7
2D4A:  BSF    16.7
2D4C:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
2D4E:  MOVLW  01
2D50:  MOVLB  1
2D52:  MOVWF  x32
2D54:  MOVLW  02
2D56:  MOVWF  x33
2D58:  MOVLB  0
2D5A:  CALL   020C
2D5E:  BTFSC  16.7
2D60:  BSF    FF2.7
....................    printf(lcd_putc,"    Contraseña      "); 
2D62:  MOVLW  A0
2D64:  MOVWF  FF6
2D66:  MOVLW  05
2D68:  MOVWF  FF7
2D6A:  CLRF   16
2D6C:  BTFSC  FF2.7
2D6E:  BSF    16.7
2D70:  BCF    FF2.7
2D72:  CALL   02F2
2D76:  BTFSC  16.7
2D78:  BSF    FF2.7
2D7A:  CLRF   16
2D7C:  BTFSC  FF2.7
2D7E:  BSF    16.7
2D80:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
2D82:  MOVLW  01
2D84:  MOVLB  1
2D86:  MOVWF  x32
2D88:  MOVLW  03
2D8A:  MOVWF  x33
2D8C:  MOVLB  0
2D8E:  CALL   020C
2D92:  BTFSC  16.7
2D94:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2D96:  MOVLW  B6
2D98:  MOVWF  FF6
2D9A:  MOVLW  05
2D9C:  MOVWF  FF7
2D9E:  MOVLW  0A
2DA0:  MOVLB  1
2DA2:  MOVWF  x08
2DA4:  MOVLB  0
2DA6:  CALL   1062
2DAA:  MOVFF  3A,100
2DAE:  MOVLW  1F
2DB0:  MOVLB  1
2DB2:  MOVWF  x01
2DB4:  MOVLB  0
2DB6:  CALL   10C4
2DBA:  MOVFF  3B,100
2DBE:  MOVLW  1F
2DC0:  MOVLB  1
2DC2:  MOVWF  x01
2DC4:  MOVLB  0
2DC6:  CALL   10C4
2DCA:  MOVFF  3C,100
2DCE:  MOVLW  1F
2DD0:  MOVLB  1
2DD2:  MOVWF  x01
2DD4:  MOVLB  0
2DD6:  CALL   10C4
2DDA:  MOVFF  3D,100
2DDE:  MOVLW  1F
2DE0:  MOVLB  1
2DE2:  MOVWF  x01
2DE4:  MOVLB  0
2DE6:  CALL   10C4
2DEA:  CLRF   16
2DEC:  BTFSC  FF2.7
2DEE:  BSF    16.7
2DF0:  BCF    FF2.7
2DF2:  MOVLW  20
2DF4:  MOVLB  1
2DF6:  MOVWF  x31
2DF8:  MOVLB  0
2DFA:  CALL   0286
2DFE:  BTFSC  16.7
2E00:  BSF    FF2.7
2E02:  CLRF   16
2E04:  BTFSC  FF2.7
2E06:  BSF    16.7
2E08:  BCF    FF2.7
2E0A:  MOVLW  20
2E0C:  MOVLB  1
2E0E:  MOVWF  x31
2E10:  MOVLB  0
2E12:  CALL   0286
2E16:  BTFSC  16.7
2E18:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2E1A:  BSF    F93.3
2E1C:  BTFSS  F81.3
2E1E:  BRA    2E56
....................       {  if(Flanco == 0)  
2E20:  BTFSC  34.4
2E22:  BRA    2E54
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2E24:  MOVLW  0B
2E26:  SUBWF  1B,W
2E28:  CLRF   03
2E2A:  ADDLW  3A
2E2C:  MOVWF  FE9
2E2E:  MOVLW  00
2E30:  ADDWFC 03,W
2E32:  MOVWF  FEA
2E34:  INCF   FEF,F
2E36:  BSF    34.4
2E38:  CLRF   16
2E3A:  BTFSC  FF2.7
2E3C:  BSF    16.7
2E3E:  BCF    FF2.7
2E40:  MOVLW  1E
2E42:  MOVLB  1
2E44:  MOVWF  x32
2E46:  MOVLB  0
2E48:  CALL   00B6
2E4C:  BTFSC  16.7
2E4E:  BSF    FF2.7
2E50:  CLRF   52
2E52:  CLRF   51
....................          else 
2E54:  BRA    2E58
....................             {Flanco = 0;} 
2E56:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2E58:  BSF    F93.2
2E5A:  BTFSS  F81.2
2E5C:  BRA    2E94
....................       {  if(Flanco2 == 0)  
2E5E:  BTFSC  34.6
2E60:  BRA    2E92
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2E62:  MOVLW  0B
2E64:  SUBWF  1B,W
2E66:  CLRF   03
2E68:  ADDLW  3A
2E6A:  MOVWF  FE9
2E6C:  MOVLW  00
2E6E:  ADDWFC 03,W
2E70:  MOVWF  FEA
2E72:  DECF   FEF,F
2E74:  BSF    34.6
2E76:  CLRF   16
2E78:  BTFSC  FF2.7
2E7A:  BSF    16.7
2E7C:  BCF    FF2.7
2E7E:  MOVLW  1E
2E80:  MOVLB  1
2E82:  MOVWF  x32
2E84:  MOVLB  0
2E86:  CALL   00B6
2E8A:  BTFSC  16.7
2E8C:  BSF    FF2.7
2E8E:  CLRF   52
2E90:  CLRF   51
....................          else 
2E92:  BRA    2E96
....................             {Flanco2 = 0;} 
2E94:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2E96:  BSF    F93.0
2E98:  BTFSS  F81.0
2E9A:  BRA    2EDA
....................       {  if(Flanco1 == 0)  
2E9C:  BTFSC  34.5
2E9E:  BRA    2ED8
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2EA0:  BSF    34.5
2EA2:  INCF   1B,F
2EA4:  CLRF   16
2EA6:  BTFSC  FF2.7
2EA8:  BSF    16.7
2EAA:  BCF    FF2.7
2EAC:  MOVLW  1E
2EAE:  MOVLB  1
2EB0:  MOVWF  x32
2EB2:  MOVLB  0
2EB4:  CALL   00B6
2EB8:  BTFSC  16.7
2EBA:  BSF    FF2.7
2EBC:  CLRF   16
2EBE:  BTFSC  FF2.7
2EC0:  BSF    16.7
2EC2:  BCF    FF2.7
2EC4:  MOVLW  0C
2EC6:  MOVLB  1
2EC8:  MOVWF  x31
2ECA:  MOVLB  0
2ECC:  CALL   0286
2ED0:  BTFSC  16.7
2ED2:  BSF    FF2.7
2ED4:  CLRF   52
2ED6:  CLRF   51
....................          else 
2ED8:  BRA    2EDC
....................             {Flanco1 = 0;}    
2EDA:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2EDC:  BSF    F93.1
2EDE:  BTFSS  F81.1
2EE0:  BRA    2F20
....................       {  if(Flanco3 == 0)  
2EE2:  BTFSC  34.7
2EE4:  BRA    2F1E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2EE6:  BSF    34.7
2EE8:  DECF   1B,F
2EEA:  CLRF   16
2EEC:  BTFSC  FF2.7
2EEE:  BSF    16.7
2EF0:  BCF    FF2.7
2EF2:  MOVLW  1E
2EF4:  MOVLB  1
2EF6:  MOVWF  x32
2EF8:  MOVLB  0
2EFA:  CALL   00B6
2EFE:  BTFSC  16.7
2F00:  BSF    FF2.7
2F02:  CLRF   16
2F04:  BTFSC  FF2.7
2F06:  BSF    16.7
2F08:  BCF    FF2.7
2F0A:  MOVLW  0C
2F0C:  MOVLB  1
2F0E:  MOVWF  x31
2F10:  MOVLB  0
2F12:  CALL   0286
2F16:  BTFSC  16.7
2F18:  BSF    FF2.7
2F1A:  CLRF   52
2F1C:  CLRF   51
....................          else 
2F1E:  BRA    2F22
....................             {Flanco3 = 0;}     
2F20:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2F22:  MOVLW  0B
2F24:  SUBWF  1B,W
2F26:  CLRF   03
2F28:  ADDLW  3A
2F2A:  MOVWF  FE9
2F2C:  MOVLW  00
2F2E:  ADDWFC 03,W
2F30:  MOVWF  FEA
2F32:  BTFSC  FEF.7
2F34:  BRA    2F38
2F36:  BRA    2F4C
....................        {clave[unidad-11]=9;} 
2F38:  MOVLW  0B
2F3A:  SUBWF  1B,W
2F3C:  CLRF   03
2F3E:  ADDLW  3A
2F40:  MOVWF  FE9
2F42:  MOVLW  00
2F44:  ADDWFC 03,W
2F46:  MOVWF  FEA
2F48:  MOVLW  09
2F4A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2F4C:  MOVLW  0B
2F4E:  SUBWF  1B,W
2F50:  CLRF   03
2F52:  ADDLW  3A
2F54:  MOVWF  FE9
2F56:  MOVLW  00
2F58:  ADDWFC 03,W
2F5A:  MOVWF  FEA
2F5C:  BTFSC  FEF.7
2F5E:  BRA    2F78
2F60:  MOVF   FEF,W
2F62:  SUBLW  09
2F64:  BC    2F78
....................        {clave[unidad-11]=0;} 
2F66:  MOVLW  0B
2F68:  SUBWF  1B,W
2F6A:  CLRF   03
2F6C:  ADDLW  3A
2F6E:  MOVWF  FE9
2F70:  MOVLW  00
2F72:  ADDWFC 03,W
2F74:  MOVWF  FEA
2F76:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2F78:  MOVF   1B,W
2F7A:  SUBLW  0A
2F7C:  BNC   2F82
....................        {unidad=11;} 
2F7E:  MOVLW  0B
2F80:  MOVWF  1B
2F82:  CLRF   16
2F84:  BTFSC  FF2.7
2F86:  BSF    16.7
2F88:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2F8A:  MOVFF  1B,132
2F8E:  MOVLW  04
2F90:  MOVLB  1
2F92:  MOVWF  x33
2F94:  MOVLB  0
2F96:  CALL   020C
2F9A:  BTFSC  16.7
2F9C:  BSF    FF2.7
2F9E:  CLRF   16
2FA0:  BTFSC  FF2.7
2FA2:  BSF    16.7
2FA4:  BCF    FF2.7
....................        lcd_putc(t[2]); 
2FA6:  MOVFF  39,131
2FAA:  CALL   0286
2FAE:  BTFSC  16.7
2FB0:  BSF    FF2.7
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2FB2:  MOVF   1B,W
2FB4:  SUBLW  0E
2FB6:  BTFSC  FD8.0
2FB8:  BRA    330A
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2FBA:  MOVF   3A,W
2FBC:  SUBLW  03
2FBE:  BTFSS  FD8.2
2FC0:  BRA    30DA
2FC2:  MOVF   3B,W
2FC4:  SUBLW  08
2FC6:  BTFSS  FD8.2
2FC8:  BRA    30DA
2FCA:  MOVF   3C,W
2FCC:  SUBLW  09
2FCE:  BTFSS  FD8.2
2FD0:  BRA    30DA
2FD2:  MOVF   3D,W
2FD4:  SUBLW  02
2FD6:  BTFSS  FD8.2
2FD8:  BRA    30DA
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2FDA:  CLRF   FA9
2FDC:  CLRF   FA8
2FDE:  BCF    FA6.6
2FE0:  BCF    FA6.7
2FE2:  BSF    FA6.2
2FE4:  MOVF   FF2,W
2FE6:  MOVWF  00
2FE8:  BCF    FF2.7
2FEA:  MOVLB  F
2FEC:  MOVLW  55
2FEE:  MOVWF  FA7
2FF0:  MOVLW  AA
2FF2:  MOVWF  FA7
2FF4:  BSF    FA6.1
2FF6:  BTFSC  FA6.1
2FF8:  BRA    2FF6
2FFA:  BCF    FA6.2
2FFC:  MOVF   00,W
2FFE:  IORWF  FF2,F
3000:  CLRF   16
3002:  BTFSC  FF2.7
3004:  BSF    16.7
3006:  BCF    FF2.7
3008:  MOVLW  14
300A:  MOVLB  1
300C:  MOVWF  x32
300E:  MOVLB  0
3010:  CALL   00B6
3014:  BTFSC  16.7
3016:  BSF    FF2.7
3018:  MOVLW  01
301A:  MOVWF  FA9
301C:  CLRF   FA8
301E:  BCF    FA6.6
3020:  BCF    FA6.7
3022:  BSF    FA6.2
3024:  MOVF   FF2,W
3026:  MOVWF  00
3028:  BCF    FF2.7
302A:  MOVLB  F
302C:  MOVLW  55
302E:  MOVWF  FA7
3030:  MOVLW  AA
3032:  MOVWF  FA7
3034:  BSF    FA6.1
3036:  BTFSC  FA6.1
3038:  BRA    3036
303A:  BCF    FA6.2
303C:  MOVF   00,W
303E:  IORWF  FF2,F
3040:  CLRF   16
3042:  BTFSC  FF2.7
3044:  BSF    16.7
3046:  BCF    FF2.7
3048:  MOVLW  14
304A:  MOVLB  1
304C:  MOVWF  x32
304E:  MOVLB  0
3050:  CALL   00B6
3054:  BTFSC  16.7
3056:  BSF    FF2.7
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
3058:  MOVLW  02
305A:  MOVWF  FA9
305C:  CLRF   FA8
305E:  BCF    FA6.6
3060:  BCF    FA6.7
3062:  BSF    FA6.2
3064:  MOVF   FF2,W
3066:  MOVWF  00
3068:  BCF    FF2.7
306A:  MOVLB  F
306C:  MOVLW  55
306E:  MOVWF  FA7
3070:  MOVLW  AA
3072:  MOVWF  FA7
3074:  BSF    FA6.1
3076:  BTFSC  FA6.1
3078:  BRA    3076
307A:  BCF    FA6.2
307C:  MOVF   00,W
307E:  IORWF  FF2,F
3080:  CLRF   16
3082:  BTFSC  FF2.7
3084:  BSF    16.7
3086:  BCF    FF2.7
3088:  MOVLW  14
308A:  MOVLB  1
308C:  MOVWF  x32
308E:  MOVLB  0
3090:  CALL   00B6
3094:  BTFSC  16.7
3096:  BSF    FF2.7
3098:  MOVLW  03
309A:  MOVWF  FA9
309C:  CLRF   FA8
309E:  BCF    FA6.6
30A0:  BCF    FA6.7
30A2:  BSF    FA6.2
30A4:  MOVF   FF2,W
30A6:  MOVWF  00
30A8:  BCF    FF2.7
30AA:  MOVLB  F
30AC:  MOVLW  55
30AE:  MOVWF  FA7
30B0:  MOVLW  AA
30B2:  MOVWF  FA7
30B4:  BSF    FA6.1
30B6:  BTFSC  FA6.1
30B8:  BRA    30B6
30BA:  BCF    FA6.2
30BC:  MOVF   00,W
30BE:  IORWF  FF2,F
30C0:  CLRF   16
30C2:  BTFSC  FF2.7
30C4:  BSF    16.7
30C6:  BCF    FF2.7
30C8:  MOVLW  14
30CA:  MOVLB  1
30CC:  MOVWF  x32
30CE:  MOVLB  0
30D0:  CALL   00B6
30D4:  BTFSC  16.7
30D6:  BSF    FF2.7
....................              reset_cpu();} 
30D8:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
30DA:  MOVF   3E,W
30DC:  SUBWF  3A,W
30DE:  BTFSS  FD8.2
30E0:  BRA    3218
30E2:  MOVF   3F,W
30E4:  SUBWF  3B,W
30E6:  BTFSS  FD8.2
30E8:  BRA    3218
30EA:  MOVF   40,W
30EC:  SUBWF  3C,W
30EE:  BTFSS  FD8.2
30F0:  BRA    3218
30F2:  MOVF   41,W
30F4:  SUBWF  3D,W
30F6:  BTFSS  FD8.2
30F8:  BRA    3218
30FA:  CLRF   16
30FC:  BTFSC  FF2.7
30FE:  BSF    16.7
3100:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
3102:  MOVLW  01
3104:  MOVLB  1
3106:  MOVWF  x32
3108:  MOVWF  x33
310A:  MOVLB  0
310C:  CALL   020C
3110:  BTFSC  16.7
3112:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
3114:  MOVLW  CC
3116:  MOVWF  FF6
3118:  MOVLW  05
311A:  MOVWF  FF7
311C:  CLRF   16
311E:  BTFSC  FF2.7
3120:  BSF    16.7
3122:  BCF    FF2.7
3124:  CALL   02F2
3128:  BTFSC  16.7
312A:  BSF    FF2.7
312C:  CLRF   16
312E:  BTFSC  FF2.7
3130:  BSF    16.7
3132:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
3134:  MOVLW  01
3136:  MOVLB  1
3138:  MOVWF  x32
313A:  MOVLW  02
313C:  MOVWF  x33
313E:  MOVLB  0
3140:  CALL   020C
3144:  BTFSC  16.7
3146:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
3148:  MOVLW  E0
314A:  MOVWF  FF6
314C:  MOVLW  05
314E:  MOVWF  FF7
3150:  CLRF   16
3152:  BTFSC  FF2.7
3154:  BSF    16.7
3156:  BCF    FF2.7
3158:  CALL   02F2
315C:  BTFSC  16.7
315E:  BSF    FF2.7
3160:  CLRF   16
3162:  BTFSC  FF2.7
3164:  BSF    16.7
3166:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
3168:  MOVLW  01
316A:  MOVLB  1
316C:  MOVWF  x32
316E:  MOVLW  03
3170:  MOVWF  x33
3172:  MOVLB  0
3174:  CALL   020C
3178:  BTFSC  16.7
317A:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta     "); 
317C:  MOVLW  F4
317E:  MOVWF  FF6
3180:  MOVLW  05
3182:  MOVWF  FF7
3184:  CLRF   16
3186:  BTFSC  FF2.7
3188:  BSF    16.7
318A:  BCF    FF2.7
318C:  CALL   02F2
3190:  BTFSC  16.7
3192:  BSF    FF2.7
3194:  CLRF   16
3196:  BTFSC  FF2.7
3198:  BSF    16.7
319A:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
319C:  MOVLW  01
319E:  MOVLB  1
31A0:  MOVWF  x32
31A2:  MOVLW  04
31A4:  MOVWF  x33
31A6:  MOVLB  0
31A8:  CALL   020C
31AC:  BTFSC  16.7
31AE:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
31B0:  MOVLW  08
31B2:  MOVWF  FF6
31B4:  MOVLW  06
31B6:  MOVWF  FF7
31B8:  CLRF   16
31BA:  BTFSC  FF2.7
31BC:  BSF    16.7
31BE:  BCF    FF2.7
31C0:  CALL   02F2
31C4:  BTFSC  16.7
31C6:  BSF    FF2.7
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
31C8:  MOVLW  02
31CA:  MOVLB  1
31CC:  MOVWF  x00
31CE:  CLRF   16
31D0:  BTFSC  FF2.7
31D2:  BSF    16.7
31D4:  BCF    FF2.7
31D6:  MOVLW  FA
31D8:  MOVWF  x32
31DA:  MOVLB  0
31DC:  CALL   00B6
31E0:  BTFSC  16.7
31E2:  BSF    FF2.7
31E4:  MOVLB  1
31E6:  DECFSZ x00,F
31E8:  BRA    31CE
31EA:  MOVLW  14
31EC:  MOVWF  18
31EE:  MOVLW  0B
31F0:  MOVWF  1B
31F2:  CLRF   16
31F4:  BTFSC  FF2.7
31F6:  BSF    16.7
31F8:  BCF    FF2.7
31FA:  MOVLW  0C
31FC:  MOVWF  x31
31FE:  MOVLB  0
3200:  CALL   0286
3204:  BTFSC  16.7
3206:  BSF    FF2.7
3208:  BSF    F8A.5
320A:  BCF    F93.5
320C:  BCF    35.0
320E:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
3210:  CLRF   52
3212:  CLRF   51
3214:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
3216:  BRA    330A
3218:  CLRF   16
321A:  BTFSC  FF2.7
321C:  BSF    16.7
321E:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
3220:  MOVLW  01
3222:  MOVLB  1
3224:  MOVWF  x32
3226:  MOVWF  x33
3228:  MOVLB  0
322A:  CALL   020C
322E:  BTFSC  16.7
3230:  BSF    FF2.7
3232:  CLRF   16
3234:  BTFSC  FF2.7
3236:  BSF    16.7
3238:  BCF    FF2.7
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
323A:  MOVLW  01
323C:  MOVLB  1
323E:  MOVWF  x32
3240:  MOVLW  02
3242:  MOVWF  x33
3244:  MOVLB  0
3246:  CALL   020C
324A:  BTFSC  16.7
324C:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
324E:  MOVLW  1C
3250:  MOVWF  FF6
3252:  MOVLW  06
3254:  MOVWF  FF7
3256:  CLRF   16
3258:  BTFSC  FF2.7
325A:  BSF    16.7
325C:  BCF    FF2.7
325E:  CALL   02F2
3262:  BTFSC  16.7
3264:  BSF    FF2.7
3266:  CLRF   16
3268:  BTFSC  FF2.7
326A:  BSF    16.7
326C:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
326E:  MOVLW  01
3270:  MOVLB  1
3272:  MOVWF  x32
3274:  MOVLW  03
3276:  MOVWF  x33
3278:  MOVLB  0
327A:  CALL   020C
327E:  BTFSC  16.7
3280:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta    "); 
3282:  MOVLW  30
3284:  MOVWF  FF6
3286:  MOVLW  06
3288:  MOVWF  FF7
328A:  CLRF   16
328C:  BTFSC  FF2.7
328E:  BSF    16.7
3290:  BCF    FF2.7
3292:  CALL   02F2
3296:  BTFSC  16.7
3298:  BSF    FF2.7
329A:  CLRF   16
329C:  BTFSC  FF2.7
329E:  BSF    16.7
32A0:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
32A2:  MOVLW  01
32A4:  MOVLB  1
32A6:  MOVWF  x32
32A8:  MOVLW  04
32AA:  MOVWF  x33
32AC:  MOVLB  0
32AE:  CALL   020C
32B2:  BTFSC  16.7
32B4:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
32B6:  MOVLW  44
32B8:  MOVWF  FF6
32BA:  MOVLW  06
32BC:  MOVWF  FF7
32BE:  CLRF   16
32C0:  BTFSC  FF2.7
32C2:  BSF    16.7
32C4:  BCF    FF2.7
32C6:  CALL   02F2
32CA:  BTFSC  16.7
32CC:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
32CE:  MOVLW  02
32D0:  MOVLB  1
32D2:  MOVWF  x00
32D4:  CLRF   16
32D6:  BTFSC  FF2.7
32D8:  BSF    16.7
32DA:  BCF    FF2.7
32DC:  MOVLW  FA
32DE:  MOVWF  x32
32E0:  MOVLB  0
32E2:  CALL   00B6
32E6:  BTFSC  16.7
32E8:  BSF    FF2.7
32EA:  MOVLB  1
32EC:  DECFSZ x00,F
32EE:  BRA    32D4
32F0:  MOVLW  0B
32F2:  MOVWF  1B
32F4:  CLRF   16
32F6:  BTFSC  FF2.7
32F8:  BSF    16.7
32FA:  BCF    FF2.7
32FC:  MOVLW  0C
32FE:  MOVWF  x31
3300:  MOVLB  0
3302:  CALL   0286
3306:  BTFSC  16.7
3308:  BSF    FF2.7
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
330A:  MOVF   1B,W
330C:  SUBLW  0B
330E:  BC    334A
3310:  MOVF   1B,W
3312:  SUBLW  0D
3314:  BNC   334A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3316:  MOVLW  01
3318:  SUBWF  1B,W
331A:  MOVLB  1
331C:  MOVWF  x00
331E:  CLRF   16
3320:  BTFSC  FF2.7
3322:  BSF    16.7
3324:  BCF    FF2.7
3326:  MOVWF  x32
3328:  MOVLW  04
332A:  MOVWF  x33
332C:  MOVLB  0
332E:  CALL   020C
3332:  BTFSC  16.7
3334:  BSF    FF2.7
3336:  CLRF   16
3338:  BTFSC  FF2.7
333A:  BSF    16.7
333C:  BCF    FF2.7
....................             lcd_putc(t[1]); 
333E:  MOVFF  38,131
3342:  CALL   0286
3346:  BTFSC  16.7
3348:  BSF    FF2.7
....................           } 
....................  
....................    } 
334A:  MOVLB  1
334C:  BRA    2CEE
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
334E:  DECFSZ 18,W
3350:  BRA    3694
....................       if(paso<0) 
3352:  BTFSC  36.7
3354:  BRA    3358
3356:  BRA    335A
....................         {paso=0;} 
3358:  CLRF   36
335A:  CLRF   16
335C:  BTFSC  FF2.7
335E:  BSF    16.7
3360:  BCF    FF2.7
....................     
....................    lcd_gotoxy(1,1); 
3362:  MOVLW  01
3364:  MOVWF  x32
3366:  MOVWF  x33
3368:  MOVLB  0
336A:  CALL   020C
336E:  BTFSC  16.7
3370:  BSF    FF2.7
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
3372:  MOVLW  58
3374:  MOVWF  FF6
3376:  MOVLW  06
3378:  MOVWF  FF7
337A:  CLRF   16
337C:  BTFSC  FF2.7
337E:  BSF    16.7
3380:  BCF    FF2.7
3382:  CALL   02F2
3386:  BTFSC  16.7
3388:  BSF    FF2.7
....................     
....................    if(UP)//Si oprime hacia arriba 
338A:  BSF    F93.3
338C:  BTFSS  F81.3
338E:  BRA    33BA
....................       {  if(Flanco == 0)  
3390:  BTFSC  34.4
3392:  BRA    33B8
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
3394:  DECF   1E,F
3396:  DECF   1C,F
3398:  MOVLW  01
339A:  ADDWF  1C,W
339C:  MOVWF  1D
339E:  BSF    34.4
33A0:  CLRF   16
33A2:  BTFSC  FF2.7
33A4:  BSF    16.7
33A6:  BCF    FF2.7
33A8:  MOVLW  1E
33AA:  MOVLB  1
33AC:  MOVWF  x32
33AE:  MOVLB  0
33B0:  CALL   00B6
33B4:  BTFSC  16.7
33B6:  BSF    FF2.7
....................          else 
33B8:  BRA    33BC
....................             {Flanco = 0;} 
33BA:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
33BC:  BSF    F93.2
33BE:  BTFSS  F81.2
33C0:  BRA    33EC
....................       {  if(Flanco2 == 0)  
33C2:  BTFSC  34.6
33C4:  BRA    33EA
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
33C6:  INCF   1E,F
33C8:  INCF   1C,F
33CA:  MOVLW  01
33CC:  SUBWF  1C,W
33CE:  MOVWF  1D
33D0:  BSF    34.6
33D2:  CLRF   16
33D4:  BTFSC  FF2.7
33D6:  BSF    16.7
33D8:  BCF    FF2.7
33DA:  MOVLW  1E
33DC:  MOVLB  1
33DE:  MOVWF  x32
33E0:  MOVLB  0
33E2:  CALL   00B6
33E6:  BTFSC  16.7
33E8:  BSF    FF2.7
....................          else 
33EA:  BRA    33EE
....................             {Flanco2 = 0;} 
33EC:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
33EE:  MOVF   1E,W
33F0:  SUBWF  20,W
33F2:  BC    3404
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
33F4:  INCF   36,F
33F6:  MOVFF  1E,20
33FA:  MOVLW  02
33FC:  SUBWF  20,W
33FE:  MOVWF  1F
3400:  MOVLW  04
3402:  MOVWF  1C
....................          
....................         if(Flecha2<nMenuL) 
3404:  MOVF   1F,W
3406:  SUBWF  1E,W
3408:  BC    341A
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
340A:  DECF   36,F
340C:  MOVFF  1E,1F
3410:  MOVLW  02
3412:  ADDWF  1F,W
3414:  MOVWF  20
3416:  MOVLW  02
3418:  MOVWF  1C
....................          
....................         if(Flecha2>n_opcionH) 
341A:  MOVF   1E,W
341C:  SUBWF  19,W
341E:  BC    3432
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
3420:  MOVFF  1A,1E
3424:  MOVLW  02
3426:  MOVWF  1C
3428:  CLRF   36
342A:  MOVFF  1E,1F
342E:  ADDWF  1F,W
3430:  MOVWF  20
....................          
....................         if(Flecha2<n_opcionL) 
3432:  MOVF   1A,W
3434:  SUBWF  1E,W
3436:  BC    344E
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
3438:  MOVFF  19,1E
343C:  MOVLW  04
343E:  MOVWF  1C
3440:  SUBWF  19,W
3442:  MOVWF  36
3444:  MOVFF  1E,20
3448:  MOVLW  02
344A:  SUBWF  20,W
344C:  MOVWF  1F
....................          
....................         mensajes(1+paso,2); 
344E:  MOVLW  01
3450:  ADDWF  36,W
3452:  MOVLB  1
3454:  MOVWF  x00
3456:  MOVWF  x01
3458:  MOVLW  02
345A:  MOVWF  x02
345C:  MOVLB  0
345E:  CALL   11DC
....................         mensajes(2+paso,3); 
3462:  MOVLW  02
3464:  ADDWF  36,W
3466:  MOVLB  1
3468:  MOVWF  x00
346A:  MOVWF  x01
346C:  MOVLW  03
346E:  MOVWF  x02
3470:  MOVLB  0
3472:  CALL   11DC
....................         mensajes(3+paso,4); 
3476:  MOVLW  03
3478:  ADDWF  36,W
347A:  MOVLB  1
347C:  MOVWF  x00
347E:  MOVWF  x01
3480:  MOVLW  04
3482:  MOVWF  x02
3484:  MOVLB  0
3486:  CALL   11DC
348A:  CLRF   16
348C:  BTFSC  FF2.7
348E:  BSF    16.7
3490:  BCF    FF2.7
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
3492:  MOVLW  01
3494:  MOVLB  1
3496:  MOVWF  x32
3498:  MOVFF  1C,133
349C:  MOVLB  0
349E:  CALL   020C
34A2:  BTFSC  16.7
34A4:  BSF    FF2.7
34A6:  CLRF   16
34A8:  BTFSC  FF2.7
34AA:  BSF    16.7
34AC:  BCF    FF2.7
....................         lcd_putc(t[0]); 
34AE:  MOVFF  37,131
34B2:  CALL   0286
34B6:  BTFSC  16.7
34B8:  BSF    FF2.7
....................  
....................         if(Flecha==2) 
34BA:  MOVF   1C,W
34BC:  SUBLW  02
34BE:  BNZ   3520
34C0:  CLRF   16
34C2:  BTFSC  FF2.7
34C4:  BSF    16.7
34C6:  BCF    FF2.7
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
34C8:  MOVLW  01
34CA:  MOVLB  1
34CC:  MOVWF  x32
34CE:  MOVLW  04
34D0:  MOVWF  x33
34D2:  MOVLB  0
34D4:  CALL   020C
34D8:  BTFSC  16.7
34DA:  BSF    FF2.7
34DC:  CLRF   16
34DE:  BTFSC  FF2.7
34E0:  BSF    16.7
34E2:  BCF    FF2.7
....................             lcd_putc(t[1]); 
34E4:  MOVFF  38,131
34E8:  CALL   0286
34EC:  BTFSC  16.7
34EE:  BSF    FF2.7
34F0:  CLRF   16
34F2:  BTFSC  FF2.7
34F4:  BSF    16.7
34F6:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
34F8:  MOVLW  01
34FA:  MOVLB  1
34FC:  MOVWF  x32
34FE:  MOVLW  03
3500:  MOVWF  x33
3502:  MOVLB  0
3504:  CALL   020C
3508:  BTFSC  16.7
350A:  BSF    FF2.7
350C:  CLRF   16
350E:  BTFSC  FF2.7
3510:  BSF    16.7
3512:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3514:  MOVFF  38,131
3518:  CALL   0286
351C:  BTFSC  16.7
351E:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==4) 
3520:  MOVF   1C,W
3522:  SUBLW  04
3524:  BNZ   3586
3526:  CLRF   16
3528:  BTFSC  FF2.7
352A:  BSF    16.7
352C:  BCF    FF2.7
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
352E:  MOVLW  01
3530:  MOVLB  1
3532:  MOVWF  x32
3534:  MOVLW  02
3536:  MOVWF  x33
3538:  MOVLB  0
353A:  CALL   020C
353E:  BTFSC  16.7
3540:  BSF    FF2.7
3542:  CLRF   16
3544:  BTFSC  FF2.7
3546:  BSF    16.7
3548:  BCF    FF2.7
....................             lcd_putc(t[1]); 
354A:  MOVFF  38,131
354E:  CALL   0286
3552:  BTFSC  16.7
3554:  BSF    FF2.7
3556:  CLRF   16
3558:  BTFSC  FF2.7
355A:  BSF    16.7
355C:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
355E:  MOVLW  01
3560:  MOVLB  1
3562:  MOVWF  x32
3564:  MOVLW  03
3566:  MOVWF  x33
3568:  MOVLB  0
356A:  CALL   020C
356E:  BTFSC  16.7
3570:  BSF    FF2.7
3572:  CLRF   16
3574:  BTFSC  FF2.7
3576:  BSF    16.7
3578:  BCF    FF2.7
....................             lcd_putc(t[1]); 
357A:  MOVFF  38,131
357E:  CALL   0286
3582:  BTFSC  16.7
3584:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==3) 
3586:  MOVF   1C,W
3588:  SUBLW  03
358A:  BNZ   35EC
358C:  CLRF   16
358E:  BTFSC  FF2.7
3590:  BSF    16.7
3592:  BCF    FF2.7
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3594:  MOVLW  01
3596:  MOVLB  1
3598:  MOVWF  x32
359A:  MOVLW  04
359C:  MOVWF  x33
359E:  MOVLB  0
35A0:  CALL   020C
35A4:  BTFSC  16.7
35A6:  BSF    FF2.7
35A8:  CLRF   16
35AA:  BTFSC  FF2.7
35AC:  BSF    16.7
35AE:  BCF    FF2.7
....................             lcd_putc(t[1]); 
35B0:  MOVFF  38,131
35B4:  CALL   0286
35B8:  BTFSC  16.7
35BA:  BSF    FF2.7
35BC:  CLRF   16
35BE:  BTFSC  FF2.7
35C0:  BSF    16.7
35C2:  BCF    FF2.7
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
35C4:  MOVLW  01
35C6:  MOVLB  1
35C8:  MOVWF  x32
35CA:  MOVLW  02
35CC:  MOVWF  x33
35CE:  MOVLB  0
35D0:  CALL   020C
35D4:  BTFSC  16.7
35D6:  BSF    FF2.7
35D8:  CLRF   16
35DA:  BTFSC  FF2.7
35DC:  BSF    16.7
35DE:  BCF    FF2.7
....................             lcd_putc(t[1]); 
35E0:  MOVFF  38,131
35E4:  CALL   0286
35E8:  BTFSC  16.7
35EA:  BSF    FF2.7
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
35EC:  BSF    F93.0
35EE:  BTFSS  F81.0
35F0:  BRA    3646
....................       {  if(Flanco1 == 0)  
35F2:  BTFSC  34.5
35F4:  BRA    3644
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
35F6:  MOVFF  1E,18
35FA:  MOVLW  03
35FC:  MOVWF  1C
35FE:  MOVLW  02
3600:  MOVLB  1
3602:  MOVWF  x00
3604:  CLRF   16
3606:  BTFSC  FF2.7
3608:  BSF    16.7
360A:  BCF    FF2.7
360C:  MOVLW  FA
360E:  MOVWF  x32
3610:  MOVLB  0
3612:  CALL   00B6
3616:  BTFSC  16.7
3618:  BSF    FF2.7
361A:  MOVLB  1
361C:  DECFSZ x00,F
361E:  BRA    3604
3620:  CLRF   16
3622:  BTFSC  FF2.7
3624:  BSF    16.7
3626:  BCF    FF2.7
3628:  MOVLW  0C
362A:  MOVWF  x31
362C:  MOVLB  0
362E:  CALL   0286
3632:  BTFSC  16.7
3634:  BSF    FF2.7
....................             if(Menu==6) 
3636:  MOVF   18,W
3638:  SUBLW  06
363A:  BNZ   3644
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
363C:  CLRF   3A
363E:  CLRF   3B
3640:  CLRF   3C
3642:  CLRF   3D
....................          else 
3644:  BRA    3648
....................             {Flanco1 = 0;}   
3646:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
3648:  BSF    F93.1
364A:  BTFSS  F81.1
364C:  BRA    3690
....................       {  if(Flanco3 == 0)  
364E:  BTFSC  34.7
3650:  BRA    368E
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
3652:  MOVLW  02
3654:  MOVLB  1
3656:  MOVWF  x00
3658:  CLRF   16
365A:  BTFSC  FF2.7
365C:  BSF    16.7
365E:  BCF    FF2.7
3660:  MOVLW  FA
3662:  MOVWF  x32
3664:  MOVLB  0
3666:  CALL   00B6
366A:  BTFSC  16.7
366C:  BSF    FF2.7
366E:  MOVLB  1
3670:  DECFSZ x00,F
3672:  BRA    3658
3674:  MOVLW  14
3676:  MOVWF  18
3678:  CLRF   16
367A:  BTFSC  FF2.7
367C:  BSF    16.7
367E:  BCF    FF2.7
3680:  MOVLW  0C
3682:  MOVWF  x31
3684:  MOVLB  0
3686:  CALL   0286
368A:  BTFSC  16.7
368C:  BSF    FF2.7
....................          else 
368E:  BRA    3692
....................             {Flanco3 = 0;}                
3690:  BCF    34.7
3692:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
3694:  MOVF   18,W
3696:  SUBLW  02
3698:  BTFSS  FD8.2
369A:  BRA    38C0
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
369C:  BTG    34.2
369E:  BSF    34.5
36A0:  MOVLW  01
36A2:  MOVWF  18
36A4:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
36A6:  BTFSS  34.2
36A8:  BRA    377A
....................             {estadoalarma=1; 
36AA:  BSF    34.2
36AC:  CLRF   16
36AE:  BTFSC  FF2.7
36B0:  BSF    16.7
36B2:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
36B4:  MOVLW  01
36B6:  MOVWF  x32
36B8:  MOVWF  x33
36BA:  MOVLB  0
36BC:  CALL   020C
36C0:  BTFSC  16.7
36C2:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
36C4:  MOVLW  6E
36C6:  MOVWF  FF6
36C8:  MOVLW  06
36CA:  MOVWF  FF7
36CC:  CLRF   16
36CE:  BTFSC  FF2.7
36D0:  BSF    16.7
36D2:  BCF    FF2.7
36D4:  CALL   02F2
36D8:  BTFSC  16.7
36DA:  BSF    FF2.7
36DC:  CLRF   16
36DE:  BTFSC  FF2.7
36E0:  BSF    16.7
36E2:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
36E4:  MOVLW  01
36E6:  MOVLB  1
36E8:  MOVWF  x32
36EA:  MOVLW  02
36EC:  MOVWF  x33
36EE:  MOVLB  0
36F0:  CALL   020C
36F4:  BTFSC  16.7
36F6:  BSF    FF2.7
....................                printf(lcd_putc,"        Activo      "); 
36F8:  MOVLW  84
36FA:  MOVWF  FF6
36FC:  MOVLW  06
36FE:  MOVWF  FF7
3700:  CLRF   16
3702:  BTFSC  FF2.7
3704:  BSF    16.7
3706:  BCF    FF2.7
3708:  CALL   02F2
370C:  BTFSC  16.7
370E:  BSF    FF2.7
3710:  CLRF   16
3712:  BTFSC  FF2.7
3714:  BSF    16.7
3716:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
3718:  MOVLW  01
371A:  MOVLB  1
371C:  MOVWF  x32
371E:  MOVLW  03
3720:  MOVWF  x33
3722:  MOVLB  0
3724:  CALL   020C
3728:  BTFSC  16.7
372A:  BSF    FF2.7
....................                printf(lcd_putc,"        Alarma      "); 
372C:  MOVLW  9A
372E:  MOVWF  FF6
3730:  MOVLW  06
3732:  MOVWF  FF7
3734:  CLRF   16
3736:  BTFSC  FF2.7
3738:  BSF    16.7
373A:  BCF    FF2.7
373C:  CALL   02F2
3740:  BTFSC  16.7
3742:  BSF    FF2.7
3744:  CLRF   16
3746:  BTFSC  FF2.7
3748:  BSF    16.7
374A:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
374C:  MOVLW  01
374E:  MOVLB  1
3750:  MOVWF  x32
3752:  MOVLW  04
3754:  MOVWF  x33
3756:  MOVLB  0
3758:  CALL   020C
375C:  BTFSC  16.7
375E:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
3760:  MOVLW  B0
3762:  MOVWF  FF6
3764:  MOVLW  06
3766:  MOVWF  FF7
3768:  CLRF   16
376A:  BTFSC  FF2.7
376C:  BSF    16.7
376E:  BCF    FF2.7
3770:  CALL   02F2
3774:  BTFSC  16.7
3776:  BSF    FF2.7
3778:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
377A:  BTFSC  34.2
377C:  BRA    384E
....................             {estadoalarma=0; 
377E:  BCF    34.2
3780:  CLRF   16
3782:  BTFSC  FF2.7
3784:  BSF    16.7
3786:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
3788:  MOVLW  01
378A:  MOVWF  x32
378C:  MOVWF  x33
378E:  MOVLB  0
3790:  CALL   020C
3794:  BTFSC  16.7
3796:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
3798:  MOVLW  C6
379A:  MOVWF  FF6
379C:  MOVLW  06
379E:  MOVWF  FF7
37A0:  CLRF   16
37A2:  BTFSC  FF2.7
37A4:  BSF    16.7
37A6:  BCF    FF2.7
37A8:  CALL   02F2
37AC:  BTFSC  16.7
37AE:  BSF    FF2.7
37B0:  CLRF   16
37B2:  BTFSC  FF2.7
37B4:  BSF    16.7
37B6:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
37B8:  MOVLW  01
37BA:  MOVLB  1
37BC:  MOVWF  x32
37BE:  MOVLW  02
37C0:  MOVWF  x33
37C2:  MOVLB  0
37C4:  CALL   020C
37C8:  BTFSC  16.7
37CA:  BSF    FF2.7
....................                printf(lcd_putc,"      Desactivo     "); 
37CC:  MOVLW  DC
37CE:  MOVWF  FF6
37D0:  MOVLW  06
37D2:  MOVWF  FF7
37D4:  CLRF   16
37D6:  BTFSC  FF2.7
37D8:  BSF    16.7
37DA:  BCF    FF2.7
37DC:  CALL   02F2
37E0:  BTFSC  16.7
37E2:  BSF    FF2.7
37E4:  CLRF   16
37E6:  BTFSC  FF2.7
37E8:  BSF    16.7
37EA:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
37EC:  MOVLW  01
37EE:  MOVLB  1
37F0:  MOVWF  x32
37F2:  MOVLW  03
37F4:  MOVWF  x33
37F6:  MOVLB  0
37F8:  CALL   020C
37FC:  BTFSC  16.7
37FE:  BSF    FF2.7
....................                printf(lcd_putc,"       Alarma       "); 
3800:  MOVLW  F2
3802:  MOVWF  FF6
3804:  MOVLW  06
3806:  MOVWF  FF7
3808:  CLRF   16
380A:  BTFSC  FF2.7
380C:  BSF    16.7
380E:  BCF    FF2.7
3810:  CALL   02F2
3814:  BTFSC  16.7
3816:  BSF    FF2.7
3818:  CLRF   16
381A:  BTFSC  FF2.7
381C:  BSF    16.7
381E:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
3820:  MOVLW  01
3822:  MOVLB  1
3824:  MOVWF  x32
3826:  MOVLW  04
3828:  MOVWF  x33
382A:  MOVLB  0
382C:  CALL   020C
3830:  BTFSC  16.7
3832:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
3834:  MOVLW  08
3836:  MOVWF  FF6
3838:  MOVLW  07
383A:  MOVWF  FF7
383C:  CLRF   16
383E:  BTFSC  FF2.7
3840:  BSF    16.7
3842:  BCF    FF2.7
3844:  CALL   02F2
3848:  BTFSC  16.7
384A:  BSF    FF2.7
384C:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
384E:  MOVLW  00
3850:  BTFSC  34.2
3852:  MOVLW  01
3854:  MOVWF  x00
3856:  MOVLW  05
3858:  MOVWF  FA9
385A:  MOVFF  100,FA8
385E:  BCF    FA6.6
3860:  BCF    FA6.7
3862:  BSF    FA6.2
3864:  MOVF   FF2,W
3866:  MOVWF  00
3868:  BCF    FF2.7
386A:  MOVLB  F
386C:  MOVLW  55
386E:  MOVWF  FA7
3870:  MOVLW  AA
3872:  MOVWF  FA7
3874:  BSF    FA6.1
3876:  BTFSC  FA6.1
3878:  BRA    3876
387A:  BCF    FA6.2
387C:  MOVF   00,W
387E:  IORWF  FF2,F
3880:  MOVLW  02
3882:  MOVLB  1
3884:  MOVWF  x00
3886:  CLRF   16
3888:  BTFSC  FF2.7
388A:  BSF    16.7
388C:  BCF    FF2.7
388E:  MOVLW  FA
3890:  MOVWF  x32
3892:  MOVLB  0
3894:  CALL   00B6
3898:  BTFSC  16.7
389A:  BSF    FF2.7
389C:  MOVLB  1
389E:  DECFSZ x00,F
38A0:  BRA    3886
38A2:  MOVLW  02
38A4:  MOVWF  1C
38A6:  MOVWF  1E
38A8:  CLRF   16
38AA:  BTFSC  FF2.7
38AC:  BSF    16.7
38AE:  BCF    FF2.7
38B0:  MOVLW  0C
38B2:  MOVWF  x31
38B4:  MOVLB  0
38B6:  CALL   0286
38BA:  BTFSC  16.7
38BC:  BSF    FF2.7
38BE:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
38C0:  MOVF   18,W
38C2:  SUBLW  03
38C4:  BTFSS  FD8.2
38C6:  BRA    3C84
38C8:  CLRF   16
38CA:  BTFSC  FF2.7
38CC:  BSF    16.7
38CE:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
38D0:  MOVLW  01
38D2:  MOVWF  x32
38D4:  MOVWF  x33
38D6:  MOVLB  0
38D8:  CALL   020C
38DC:  BTFSC  16.7
38DE:  BSF    FF2.7
....................    printf(lcd_putc,"  Duracion Actual   ");                           
38E0:  MOVLW  1E
38E2:  MOVWF  FF6
38E4:  MOVLW  07
38E6:  MOVWF  FF7
38E8:  CLRF   16
38EA:  BTFSC  FF2.7
38EC:  BSF    16.7
38EE:  BCF    FF2.7
38F0:  CALL   02F2
38F4:  BTFSC  16.7
38F6:  BSF    FF2.7
38F8:  CLRF   16
38FA:  BTFSC  FF2.7
38FC:  BSF    16.7
38FE:  BCF    FF2.7
....................    lcd_gotoxy(1,2);                                                   
3900:  MOVLW  01
3902:  MOVLB  1
3904:  MOVWF  x32
3906:  MOVLW  02
3908:  MOVWF  x33
390A:  MOVLB  0
390C:  CALL   020C
3910:  BTFSC  16.7
3912:  BSF    FF2.7
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
3914:  MOVLW  34
3916:  MOVWF  FF6
3918:  MOVLW  07
391A:  MOVWF  FF7
391C:  MOVLW  09
391E:  MOVLB  1
3920:  MOVWF  x08
3922:  MOVLB  0
3924:  CALL   1062
3928:  MOVFF  33,FF
392C:  MOVLW  01
392E:  MOVLB  1
3930:  MOVWF  x00
3932:  MOVLB  0
3934:  CALL   13EC
3938:  CLRF   16
393A:  BTFSC  FF2.7
393C:  BSF    16.7
393E:  BCF    FF2.7
3940:  MOVLW  3A
3942:  MOVLB  1
3944:  MOVWF  x31
3946:  MOVLB  0
3948:  CALL   0286
394C:  BTFSC  16.7
394E:  BSF    FF2.7
3950:  MOVFF  32,FF
3954:  MOVLW  01
3956:  MOVLB  1
3958:  MOVWF  x00
395A:  MOVLB  0
395C:  CALL   13EC
3960:  CLRF   16
3962:  BTFSC  FF2.7
3964:  BSF    16.7
3966:  BCF    FF2.7
3968:  MOVLW  3A
396A:  MOVLB  1
396C:  MOVWF  x31
396E:  MOVLB  0
3970:  CALL   0286
3974:  BTFSC  16.7
3976:  BSF    FF2.7
3978:  MOVFF  31,FF
397C:  MOVLW  01
397E:  MOVLB  1
3980:  MOVWF  x00
3982:  MOVLB  0
3984:  CALL   13EC
3988:  CLRF   16
398A:  BTFSC  FF2.7
398C:  BSF    16.7
398E:  BCF    FF2.7
3990:  MOVLW  20
3992:  MOVLB  1
3994:  MOVWF  x31
3996:  MOVLB  0
3998:  CALL   0286
399C:  BTFSC  16.7
399E:  BSF    FF2.7
....................     
....................    if(flag_filtro==1) 
39A0:  BTFSS  35.2
39A2:  BRA    39DA
39A4:  CLRF   16
39A6:  BTFSC  FF2.7
39A8:  BSF    16.7
39AA:  BCF    FF2.7
....................    { 
....................       lcd_gotoxy(1,3);                                                  
39AC:  MOVLW  01
39AE:  MOVLB  1
39B0:  MOVWF  x32
39B2:  MOVLW  03
39B4:  MOVWF  x33
39B6:  MOVLB  0
39B8:  CALL   020C
39BC:  BTFSC  16.7
39BE:  BSF    FF2.7
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
39C0:  MOVLW  4E
39C2:  MOVWF  FF6
39C4:  MOVLW  07
39C6:  MOVWF  FF7
39C8:  CLRF   16
39CA:  BTFSC  FF2.7
39CC:  BSF    16.7
39CE:  BCF    FF2.7
39D0:  CALL   02F2
39D4:  BTFSC  16.7
39D6:  BSF    FF2.7
....................    } 
....................    else 
39D8:  BRA    3A0E
39DA:  CLRF   16
39DC:  BTFSC  FF2.7
39DE:  BSF    16.7
39E0:  BCF    FF2.7
....................    { 
....................       lcd_gotoxy(1,3);                                                  
39E2:  MOVLW  01
39E4:  MOVLB  1
39E6:  MOVWF  x32
39E8:  MOVLW  03
39EA:  MOVWF  x33
39EC:  MOVLB  0
39EE:  CALL   020C
39F2:  BTFSC  16.7
39F4:  BSF    FF2.7
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
39F6:  MOVLW  64
39F8:  MOVWF  FF6
39FA:  MOVLW  07
39FC:  MOVWF  FF7
39FE:  CLRF   16
3A00:  BTFSC  FF2.7
3A02:  BSF    16.7
3A04:  BCF    FF2.7
3A06:  CALL   02F2
3A0A:  BTFSC  16.7
3A0C:  BSF    FF2.7
3A0E:  CLRF   16
3A10:  BTFSC  FF2.7
3A12:  BSF    16.7
3A14:  BCF    FF2.7
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
3A16:  MOVLW  01
3A18:  MOVLB  1
3A1A:  MOVWF  x32
3A1C:  MOVLW  04
3A1E:  MOVWF  x33
3A20:  MOVLB  0
3A22:  CALL   020C
3A26:  BTFSC  16.7
3A28:  BSF    FF2.7
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
3A2A:  MOVLW  7A
3A2C:  MOVWF  FF6
3A2E:  MOVLW  07
3A30:  MOVWF  FF7
3A32:  CLRF   16
3A34:  BTFSC  FF2.7
3A36:  BSF    16.7
3A38:  BCF    FF2.7
3A3A:  CALL   02F2
3A3E:  BTFSC  16.7
3A40:  BSF    FF2.7
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
3A42:  BSF    F93.3
3A44:  BTFSS  F81.3
3A46:  BRA    3BB6
3A48:  CLRF   16
3A4A:  BTFSC  FF2.7
3A4C:  BSF    16.7
3A4E:  BCF    FF2.7
....................       {  delay_ms(200); 
3A50:  MOVLW  C8
3A52:  MOVLB  1
3A54:  MOVWF  x32
3A56:  MOVLB  0
3A58:  CALL   00B6
3A5C:  BTFSC  16.7
3A5E:  BSF    FF2.7
3A60:  CLRF   16
3A62:  BTFSC  FF2.7
3A64:  BSF    16.7
3A66:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
3A68:  MOVLW  0C
3A6A:  MOVLB  1
3A6C:  MOVWF  x31
3A6E:  MOVLB  0
3A70:  CALL   0286
3A74:  BTFSC  16.7
3A76:  BSF    FF2.7
3A78:  CLRF   16
3A7A:  BTFSC  FF2.7
3A7C:  BSF    16.7
3A7E:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
3A80:  MOVLW  01
3A82:  MOVLB  1
3A84:  MOVWF  x32
3A86:  MOVLW  02
3A88:  MOVWF  x33
3A8A:  MOVLB  0
3A8C:  CALL   020C
3A90:  BTFSC  16.7
3A92:  BSF    FF2.7
....................          printf(lcd_putc," Reset de tiempo "); 
3A94:  MOVLW  90
3A96:  MOVWF  FF6
3A98:  MOVLW  07
3A9A:  MOVWF  FF7
3A9C:  CLRF   16
3A9E:  BTFSC  FF2.7
3AA0:  BSF    16.7
3AA2:  BCF    FF2.7
3AA4:  CALL   02F2
3AA8:  BTFSC  16.7
3AAA:  BSF    FF2.7
3AAC:  CLRF   16
3AAE:  BTFSC  FF2.7
3AB0:  BSF    16.7
3AB2:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
3AB4:  MOVLW  01
3AB6:  MOVLB  1
3AB8:  MOVWF  x32
3ABA:  MOVLW  03
3ABC:  MOVWF  x33
3ABE:  MOVLB  0
3AC0:  CALL   020C
3AC4:  BTFSC  16.7
3AC6:  BSF    FF2.7
....................          printf(lcd_putc,"     Exitoso     "); 
3AC8:  MOVLW  A2
3ACA:  MOVWF  FF6
3ACC:  MOVLW  07
3ACE:  MOVWF  FF7
3AD0:  CLRF   16
3AD2:  BTFSC  FF2.7
3AD4:  BSF    16.7
3AD6:  BCF    FF2.7
3AD8:  CALL   02F2
3ADC:  BTFSC  16.7
3ADE:  BSF    FF2.7
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
3AE0:  MOVLW  46
3AE2:  MOVWF  FA9
3AE4:  CLRF   FA8
3AE6:  BCF    FA6.6
3AE8:  BCF    FA6.7
3AEA:  BSF    FA6.2
3AEC:  MOVF   FF2,W
3AEE:  MOVWF  00
3AF0:  BCF    FF2.7
3AF2:  MOVLB  F
3AF4:  MOVLW  55
3AF6:  MOVWF  FA7
3AF8:  MOVLW  AA
3AFA:  MOVWF  FA7
3AFC:  BSF    FA6.1
3AFE:  BTFSC  FA6.1
3B00:  BRA    3AFE
3B02:  BCF    FA6.2
3B04:  MOVF   00,W
3B06:  IORWF  FF2,F
3B08:  MOVLW  47
3B0A:  MOVWF  FA9
3B0C:  CLRF   FA8
3B0E:  BCF    FA6.6
3B10:  BCF    FA6.7
3B12:  BSF    FA6.2
3B14:  MOVF   FF2,W
3B16:  MOVWF  00
3B18:  BCF    FF2.7
3B1A:  MOVLW  55
3B1C:  MOVWF  FA7
3B1E:  MOVLW  AA
3B20:  MOVWF  FA7
3B22:  BSF    FA6.1
3B24:  BTFSC  FA6.1
3B26:  BRA    3B24
3B28:  BCF    FA6.2
3B2A:  MOVF   00,W
3B2C:  IORWF  FF2,F
3B2E:  MOVLW  48
3B30:  MOVWF  FA9
3B32:  CLRF   FA8
3B34:  BCF    FA6.6
3B36:  BCF    FA6.7
3B38:  BSF    FA6.2
3B3A:  MOVF   FF2,W
3B3C:  MOVWF  00
3B3E:  BCF    FF2.7
3B40:  MOVLW  55
3B42:  MOVWF  FA7
3B44:  MOVLW  AA
3B46:  MOVWF  FA7
3B48:  BSF    FA6.1
3B4A:  BTFSC  FA6.1
3B4C:  BRA    3B4A
3B4E:  BCF    FA6.2
3B50:  MOVF   00,W
3B52:  IORWF  FF2,F
....................          delay_ms(700); 
3B54:  MOVLW  04
3B56:  MOVLB  1
3B58:  MOVWF  x00
3B5A:  CLRF   16
3B5C:  BTFSC  FF2.7
3B5E:  BSF    16.7
3B60:  BCF    FF2.7
3B62:  MOVLW  AF
3B64:  MOVWF  x32
3B66:  MOVLB  0
3B68:  CALL   00B6
3B6C:  BTFSC  16.7
3B6E:  BSF    FF2.7
3B70:  MOVLB  1
3B72:  DECFSZ x00,F
3B74:  BRA    3B5A
....................          segundos=0;minutos=0;horas=0; 
3B76:  CLRF   31
3B78:  CLRF   32
3B7A:  CLRF   33
3B7C:  CLRF   16
3B7E:  BTFSC  FF2.7
3B80:  BSF    16.7
3B82:  BCF    FF2.7
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3B84:  MOVLW  1E
3B86:  MOVWF  x32
3B88:  MOVLB  0
3B8A:  CALL   00B6
3B8E:  BTFSC  16.7
3B90:  BSF    FF2.7
3B92:  MOVLW  01
3B94:  MOVWF  18
3B96:  CLRF   36
3B98:  MOVLW  02
3B9A:  MOVWF  1C
3B9C:  MOVWF  1E
3B9E:  CLRF   16
3BA0:  BTFSC  FF2.7
3BA2:  BSF    16.7
3BA4:  BCF    FF2.7
3BA6:  MOVLW  0C
3BA8:  MOVLB  1
3BAA:  MOVWF  x31
3BAC:  MOVLB  0
3BAE:  CALL   0286
3BB2:  BTFSC  16.7
3BB4:  BSF    FF2.7
....................       } 
....................        
....................       if(RIGHT) 
3BB6:  BSF    F93.0
3BB8:  BTFSS  F81.0
3BBA:  BRA    3C36
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
3BBC:  BTG    35.2
3BBE:  MOVLW  00
3BC0:  BTFSC  35.2
3BC2:  MOVLW  01
3BC4:  MOVLB  1
3BC6:  MOVWF  x00
3BC8:  MOVLW  49
3BCA:  MOVWF  FA9
3BCC:  MOVFF  100,FA8
3BD0:  BCF    FA6.6
3BD2:  BCF    FA6.7
3BD4:  BSF    FA6.2
3BD6:  MOVF   FF2,W
3BD8:  MOVWF  00
3BDA:  BCF    FF2.7
3BDC:  MOVLB  F
3BDE:  MOVLW  55
3BE0:  MOVWF  FA7
3BE2:  MOVLW  AA
3BE4:  MOVWF  FA7
3BE6:  BSF    FA6.1
3BE8:  BTFSC  FA6.1
3BEA:  BRA    3BE8
3BEC:  BCF    FA6.2
3BEE:  MOVF   00,W
3BF0:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3BF2:  MOVLW  02
3BF4:  MOVLB  1
3BF6:  MOVWF  x00
3BF8:  CLRF   16
3BFA:  BTFSC  FF2.7
3BFC:  BSF    16.7
3BFE:  BCF    FF2.7
3C00:  MOVLW  FA
3C02:  MOVWF  x32
3C04:  MOVLB  0
3C06:  CALL   00B6
3C0A:  BTFSC  16.7
3C0C:  BSF    FF2.7
3C0E:  MOVLB  1
3C10:  DECFSZ x00,F
3C12:  BRA    3BF8
3C14:  MOVLW  01
3C16:  MOVWF  18
3C18:  CLRF   36
3C1A:  MOVLW  02
3C1C:  MOVWF  1C
3C1E:  MOVWF  1E
3C20:  CLRF   16
3C22:  BTFSC  FF2.7
3C24:  BSF    16.7
3C26:  BCF    FF2.7
3C28:  MOVLW  0C
3C2A:  MOVWF  x31
3C2C:  MOVLB  0
3C2E:  CALL   0286
3C32:  BTFSC  16.7
3C34:  BSF    FF2.7
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
3C36:  BSF    F93.1
3C38:  BTFSS  F81.1
3C3A:  BRA    3C80
....................       {  if(Flanco3 == 0)  
3C3C:  BTFSC  34.7
3C3E:  BRA    3C7E
....................             {Flanco3 = 1;delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
3C40:  BSF    34.7
3C42:  CLRF   16
3C44:  BTFSC  FF2.7
3C46:  BSF    16.7
3C48:  BCF    FF2.7
3C4A:  MOVLW  1E
3C4C:  MOVLB  1
3C4E:  MOVWF  x32
3C50:  MOVLB  0
3C52:  CALL   00B6
3C56:  BTFSC  16.7
3C58:  BSF    FF2.7
3C5A:  MOVLW  01
3C5C:  MOVWF  18
3C5E:  CLRF   36
3C60:  MOVLW  02
3C62:  MOVWF  1C
3C64:  MOVWF  1E
3C66:  CLRF   16
3C68:  BTFSC  FF2.7
3C6A:  BSF    16.7
3C6C:  BCF    FF2.7
3C6E:  MOVLW  0C
3C70:  MOVLB  1
3C72:  MOVWF  x31
3C74:  MOVLB  0
3C76:  CALL   0286
3C7A:  BTFSC  16.7
3C7C:  BSF    FF2.7
....................          else 
3C7E:  BRA    3C82
....................             {Flanco3 = 0;}       
3C80:  BCF    34.7
3C82:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
3C84:  MOVF   18,W
3C86:  SUBLW  04
3C88:  BTFSS  FD8.2
3C8A:  BRA    4020
3C8C:  CLRF   16
3C8E:  BTFSC  FF2.7
3C90:  BSF    16.7
3C92:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
3C94:  MOVLW  01
3C96:  MOVWF  x32
3C98:  MOVLW  02
3C9A:  MOVWF  x33
3C9C:  MOVLB  0
3C9E:  CALL   020C
3CA2:  BTFSC  16.7
3CA4:  BSF    FF2.7
....................    printf(lcd_putc,"      Setpoint      "); 
3CA6:  MOVLW  B4
3CA8:  MOVWF  FF6
3CAA:  MOVLW  07
3CAC:  MOVWF  FF7
3CAE:  CLRF   16
3CB0:  BTFSC  FF2.7
3CB2:  BSF    16.7
3CB4:  BCF    FF2.7
3CB6:  CALL   02F2
3CBA:  BTFSC  16.7
3CBC:  BSF    FF2.7
3CBE:  CLRF   16
3CC0:  BTFSC  FF2.7
3CC2:  BSF    16.7
3CC4:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
3CC6:  MOVLW  01
3CC8:  MOVLB  1
3CCA:  MOVWF  x32
3CCC:  MOVLW  03
3CCE:  MOVWF  x33
3CD0:  MOVLB  0
3CD2:  CALL   020C
3CD6:  BTFSC  16.7
3CD8:  BSF    FF2.7
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
3CDA:  MOVLW  CA
3CDC:  MOVWF  FF6
3CDE:  MOVLW  07
3CE0:  MOVWF  FF7
3CE2:  MOVLW  07
3CE4:  MOVLB  1
3CE6:  MOVWF  x08
3CE8:  MOVLB  0
3CEA:  CALL   1062
3CEE:  MOVLW  89
3CF0:  MOVWF  FE9
3CF2:  MOVFF  45,10B
3CF6:  MOVFF  44,10A
3CFA:  MOVFF  43,109
3CFE:  MOVFF  42,108
3D02:  MOVLW  02
3D04:  MOVLB  1
3D06:  MOVWF  x0C
3D08:  MOVLB  0
3D0A:  CALL   164A
3D0E:  CLRF   16
3D10:  BTFSC  FF2.7
3D12:  BSF    16.7
3D14:  BCF    FF2.7
3D16:  MOVLW  20
3D18:  MOVLB  1
3D1A:  MOVWF  x31
3D1C:  MOVLB  0
3D1E:  CALL   0286
3D22:  BTFSC  16.7
3D24:  BSF    FF2.7
3D26:  CLRF   16
3D28:  BTFSC  FF2.7
3D2A:  BSF    16.7
3D2C:  BCF    FF2.7
3D2E:  MOVLW  20
3D30:  MOVLB  1
3D32:  MOVWF  x31
3D34:  MOVLB  0
3D36:  CALL   0286
3D3A:  BTFSC  16.7
3D3C:  BSF    FF2.7
3D3E:  CLRF   16
3D40:  BTFSC  FF2.7
3D42:  BSF    16.7
3D44:  BCF    FF2.7
3D46:  MOVLW  20
3D48:  MOVLB  1
3D4A:  MOVWF  x31
3D4C:  MOVLB  0
3D4E:  CALL   0286
3D52:  BTFSC  16.7
3D54:  BSF    FF2.7
....................     
....................    if(setpoint>2.0) 
3D56:  MOVLB  1
3D58:  CLRF   x1D
3D5A:  CLRF   x1C
3D5C:  CLRF   x1B
3D5E:  MOVLW  80
3D60:  MOVWF  x1A
3D62:  MOVFF  45,121
3D66:  MOVFF  44,120
3D6A:  MOVFF  43,11F
3D6E:  MOVFF  42,11E
3D72:  MOVLB  0
3D74:  CALL   182C
3D78:  BNC   3D84
....................    {setpoint=2.0;} 
3D7A:  CLRF   45
3D7C:  CLRF   44
3D7E:  CLRF   43
3D80:  MOVLW  80
3D82:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
3D84:  MOVFF  45,11D
3D88:  MOVFF  44,11C
3D8C:  MOVFF  43,11B
3D90:  MOVFF  42,11A
3D94:  MOVLB  1
3D96:  CLRF   x21
3D98:  CLRF   x20
3D9A:  CLRF   x1F
3D9C:  MOVLW  7E
3D9E:  MOVWF  x1E
3DA0:  MOVLB  0
3DA2:  CALL   182C
3DA6:  BNC   3DB2
....................    {setpoint=0.5;} 
3DA8:  CLRF   45
3DAA:  CLRF   44
3DAC:  CLRF   43
3DAE:  MOVLW  7E
3DB0:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
3DB2:  BSF    F93.3
3DB4:  BTFSS  F81.3
3DB6:  BRA    3E12
....................       {  if(Flanco == 0)  
3DB8:  BTFSC  34.4
3DBA:  BRA    3E10
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
3DBC:  BCF    FD8.1
3DBE:  MOVFF  45,121
3DC2:  MOVFF  44,120
3DC6:  MOVFF  43,11F
3DCA:  MOVFF  42,11E
3DCE:  MOVLW  CD
3DD0:  MOVLB  1
3DD2:  MOVWF  x25
3DD4:  MOVLW  CC
3DD6:  MOVWF  x24
3DD8:  MOVLW  4C
3DDA:  MOVWF  x23
3DDC:  MOVLW  7B
3DDE:  MOVWF  x22
3DE0:  MOVLB  0
3DE2:  CALL   0DEA
3DE6:  MOVFF  03,45
3DEA:  MOVFF  02,44
3DEE:  MOVFF  01,43
3DF2:  MOVFF  00,42
3DF6:  BSF    34.4
3DF8:  CLRF   16
3DFA:  BTFSC  FF2.7
3DFC:  BSF    16.7
3DFE:  BCF    FF2.7
3E00:  MOVLW  1E
3E02:  MOVLB  1
3E04:  MOVWF  x32
3E06:  MOVLB  0
3E08:  CALL   00B6
3E0C:  BTFSC  16.7
3E0E:  BSF    FF2.7
....................          else 
3E10:  BRA    3E14
....................             {Flanco = 0;} 
3E12:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3E14:  BSF    F93.2
3E16:  BTFSS  F81.2
3E18:  BRA    3E74
....................       {  if(Flanco2 == 0)  
3E1A:  BTFSC  34.6
3E1C:  BRA    3E72
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
3E1E:  BSF    FD8.1
3E20:  MOVFF  45,121
3E24:  MOVFF  44,120
3E28:  MOVFF  43,11F
3E2C:  MOVFF  42,11E
3E30:  MOVLW  CD
3E32:  MOVLB  1
3E34:  MOVWF  x25
3E36:  MOVLW  CC
3E38:  MOVWF  x24
3E3A:  MOVLW  4C
3E3C:  MOVWF  x23
3E3E:  MOVLW  7B
3E40:  MOVWF  x22
3E42:  MOVLB  0
3E44:  CALL   0DEA
3E48:  MOVFF  03,45
3E4C:  MOVFF  02,44
3E50:  MOVFF  01,43
3E54:  MOVFF  00,42
3E58:  BSF    34.6
3E5A:  CLRF   16
3E5C:  BTFSC  FF2.7
3E5E:  BSF    16.7
3E60:  BCF    FF2.7
3E62:  MOVLW  1E
3E64:  MOVLB  1
3E66:  MOVWF  x32
3E68:  MOVLB  0
3E6A:  CALL   00B6
3E6E:  BTFSC  16.7
3E70:  BSF    FF2.7
....................          else 
3E72:  BRA    3E76
....................             {Flanco2 = 0;} 
3E74:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3E76:  BSF    F93.0
3E78:  BTFSS  F81.0
3E7A:  BRA    3FCE
....................       {  if(Flanco1 == 0)  
3E7C:  BTFSC  34.5
3E7E:  BRA    3FCC
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3E80:  MOVLW  01
3E82:  MOVWF  18
3E84:  CLRF   36
3E86:  MOVLW  02
3E88:  MOVWF  1C
3E8A:  MOVWF  1E
3E8C:  MOVLW  0B
3E8E:  MOVWF  1B
3E90:  CLRF   16
3E92:  BTFSC  FF2.7
3E94:  BSF    16.7
3E96:  BCF    FF2.7
3E98:  MOVLW  1E
3E9A:  MOVLB  1
3E9C:  MOVWF  x32
3E9E:  MOVLB  0
3EA0:  CALL   00B6
3EA4:  BTFSC  16.7
3EA6:  BSF    FF2.7
3EA8:  CLRF   16
3EAA:  BTFSC  FF2.7
3EAC:  BSF    16.7
3EAE:  BCF    FF2.7
3EB0:  MOVLW  0C
3EB2:  MOVLB  1
3EB4:  MOVWF  x31
3EB6:  MOVLB  0
3EB8:  CALL   0286
3EBC:  BTFSC  16.7
3EBE:  BSF    FF2.7
....................             Temporal=setpoint; 
3EC0:  MOVFF  45,AA
3EC4:  MOVFF  44,A9
3EC8:  MOVFF  43,A8
3ECC:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
3ED0:  MOVFF  45,102
3ED4:  MOVFF  44,101
3ED8:  MOVFF  43,100
3EDC:  MOVFF  42,FF
3EE0:  CALL   18A6
3EE4:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
3EE8:  MOVLB  1
3EEA:  CLRF   x0A
3EEC:  MOVFF  22,109
3EF0:  MOVLB  0
3EF2:  CALL   0C56
3EF6:  BSF    FD8.1
3EF8:  MOVFF  AA,121
3EFC:  MOVFF  A9,120
3F00:  MOVFF  A8,11F
3F04:  MOVFF  A7,11E
3F08:  MOVFF  03,125
3F0C:  MOVFF  02,124
3F10:  MOVFF  01,123
3F14:  MOVFF  00,122
3F18:  CALL   0DEA
3F1C:  MOVFF  03,AA
3F20:  MOVFF  02,A9
3F24:  MOVFF  01,A8
3F28:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
3F2C:  MOVFF  AA,11D
3F30:  MOVFF  A9,11C
3F34:  MOVFF  A8,11B
3F38:  MOVFF  A7,11A
3F3C:  MOVLB  1
3F3E:  CLRF   x21
3F40:  CLRF   x20
3F42:  MOVLW  48
3F44:  MOVWF  x1F
3F46:  MOVLW  85
3F48:  MOVWF  x1E
3F4A:  MOVLB  0
3F4C:  CALL   1490
3F50:  MOVFF  03,AE
3F54:  MOVFF  02,AD
3F58:  MOVFF  01,AC
3F5C:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
3F60:  MOVFF  AE,102
3F64:  MOVFF  AD,101
3F68:  MOVFF  AC,100
3F6C:  MOVFF  AB,FF
3F70:  CALL   18A6
3F74:  MOVFF  01,24
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
3F78:  MOVLW  28
3F7A:  MOVWF  FA9
3F7C:  MOVFF  22,FA8
3F80:  BCF    FA6.6
3F82:  BCF    FA6.7
3F84:  BSF    FA6.2
3F86:  MOVF   FF2,W
3F88:  MOVWF  00
3F8A:  BCF    FF2.7
3F8C:  MOVLB  F
3F8E:  MOVLW  55
3F90:  MOVWF  FA7
3F92:  MOVLW  AA
3F94:  MOVWF  FA7
3F96:  BSF    FA6.1
3F98:  BTFSC  FA6.1
3F9A:  BRA    3F98
3F9C:  BCF    FA6.2
3F9E:  MOVF   00,W
3FA0:  IORWF  FF2,F
3FA2:  MOVLW  29
3FA4:  MOVWF  FA9
3FA6:  MOVFF  24,FA8
3FAA:  BCF    FA6.6
3FAC:  BCF    FA6.7
3FAE:  BSF    FA6.2
3FB0:  MOVF   FF2,W
3FB2:  MOVWF  00
3FB4:  BCF    FF2.7
3FB6:  MOVLW  55
3FB8:  MOVWF  FA7
3FBA:  MOVLW  AA
3FBC:  MOVWF  FA7
3FBE:  BSF    FA6.1
3FC0:  BTFSC  FA6.1
3FC2:  BRA    3FC0
3FC4:  BCF    FA6.2
3FC6:  MOVF   00,W
3FC8:  IORWF  FF2,F
3FCA:  MOVLB  0
....................             }} 
....................          else 
3FCC:  BRA    3FD0
....................             {Flanco1 = 0;}    
3FCE:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3FD0:  BSF    F93.1
3FD2:  BTFSS  F81.1
3FD4:  BRA    401C
....................       {  if(Flanco3 == 0)  
3FD6:  BTFSC  34.7
3FD8:  BRA    401A
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
3FDA:  MOVLW  01
3FDC:  MOVWF  18
3FDE:  CLRF   36
3FE0:  MOVLW  02
3FE2:  MOVWF  1C
3FE4:  MOVWF  1E
3FE6:  MOVLW  0B
3FE8:  MOVWF  1B
3FEA:  CLRF   16
3FEC:  BTFSC  FF2.7
3FEE:  BSF    16.7
3FF0:  BCF    FF2.7
3FF2:  MOVLW  1E
3FF4:  MOVLB  1
3FF6:  MOVWF  x32
3FF8:  MOVLB  0
3FFA:  CALL   00B6
3FFE:  BTFSC  16.7
4000:  BSF    FF2.7
4002:  CLRF   16
4004:  BTFSC  FF2.7
4006:  BSF    16.7
4008:  BCF    FF2.7
400A:  MOVLW  0C
400C:  MOVLB  1
400E:  MOVWF  x31
4010:  MOVLB  0
4012:  CALL   0286
4016:  BTFSC  16.7
4018:  BSF    FF2.7
....................          else 
401A:  BRA    401E
....................             {Flanco3 = 0;}     
401C:  BCF    34.7
401E:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
4020:  MOVF   18,W
4022:  SUBLW  05
4024:  BTFSS  FD8.2
4026:  BRA    454C
4028:  CLRF   16
402A:  BTFSC  FF2.7
402C:  BSF    16.7
402E:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
4030:  MOVLW  01
4032:  MOVWF  x32
4034:  MOVWF  x33
4036:  MOVLB  0
4038:  CALL   020C
403C:  BTFSC  16.7
403E:  BSF    FF2.7
....................    printf(lcd_putc,"      Ingrese       "); 
4040:  MOVLW  DA
4042:  MOVWF  FF6
4044:  MOVLW  07
4046:  MOVWF  FF7
4048:  CLRF   16
404A:  BTFSC  FF2.7
404C:  BSF    16.7
404E:  BCF    FF2.7
4050:  CALL   02F2
4054:  BTFSC  16.7
4056:  BSF    FF2.7
4058:  CLRF   16
405A:  BTFSC  FF2.7
405C:  BSF    16.7
405E:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
4060:  MOVLW  01
4062:  MOVLB  1
4064:  MOVWF  x32
4066:  MOVLW  02
4068:  MOVWF  x33
406A:  MOVLB  0
406C:  CALL   020C
4070:  BTFSC  16.7
4072:  BSF    FF2.7
....................    printf(lcd_putc," Contraseña Actual  "); 
4074:  MOVLW  F0
4076:  MOVWF  FF6
4078:  MOVLW  07
407A:  MOVWF  FF7
407C:  CLRF   16
407E:  BTFSC  FF2.7
4080:  BSF    16.7
4082:  BCF    FF2.7
4084:  CALL   02F2
4088:  BTFSC  16.7
408A:  BSF    FF2.7
408C:  CLRF   16
408E:  BTFSC  FF2.7
4090:  BSF    16.7
4092:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4094:  MOVLW  01
4096:  MOVLB  1
4098:  MOVWF  x32
409A:  MOVLW  03
409C:  MOVWF  x33
409E:  MOVLB  0
40A0:  CALL   020C
40A4:  BTFSC  16.7
40A6:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
40A8:  MOVLW  06
40AA:  MOVWF  FF6
40AC:  MOVLW  08
40AE:  MOVWF  FF7
40B0:  MOVLW  0A
40B2:  MOVLB  1
40B4:  MOVWF  x08
40B6:  MOVLB  0
40B8:  CALL   1062
40BC:  MOVFF  3A,100
40C0:  MOVLW  1F
40C2:  MOVLB  1
40C4:  MOVWF  x01
40C6:  MOVLB  0
40C8:  CALL   10C4
40CC:  MOVFF  3B,100
40D0:  MOVLW  1F
40D2:  MOVLB  1
40D4:  MOVWF  x01
40D6:  MOVLB  0
40D8:  CALL   10C4
40DC:  MOVFF  3C,100
40E0:  MOVLW  1F
40E2:  MOVLB  1
40E4:  MOVWF  x01
40E6:  MOVLB  0
40E8:  CALL   10C4
40EC:  MOVFF  3D,100
40F0:  MOVLW  1F
40F2:  MOVLB  1
40F4:  MOVWF  x01
40F6:  MOVLB  0
40F8:  CALL   10C4
40FC:  CLRF   16
40FE:  BTFSC  FF2.7
4100:  BSF    16.7
4102:  BCF    FF2.7
4104:  MOVLW  20
4106:  MOVLB  1
4108:  MOVWF  x31
410A:  MOVLB  0
410C:  CALL   0286
4110:  BTFSC  16.7
4112:  BSF    FF2.7
4114:  CLRF   16
4116:  BTFSC  FF2.7
4118:  BSF    16.7
411A:  BCF    FF2.7
411C:  MOVLW  20
411E:  MOVLB  1
4120:  MOVWF  x31
4122:  MOVLB  0
4124:  CALL   0286
4128:  BTFSC  16.7
412A:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
412C:  BSF    F93.3
412E:  BTFSS  F81.3
4130:  BRA    4164
....................       {  if(Flanco == 0)  
4132:  BTFSC  34.4
4134:  BRA    4162
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
4136:  MOVLW  0B
4138:  SUBWF  1B,W
413A:  CLRF   03
413C:  ADDLW  3A
413E:  MOVWF  FE9
4140:  MOVLW  00
4142:  ADDWFC 03,W
4144:  MOVWF  FEA
4146:  INCF   FEF,F
4148:  BSF    34.4
414A:  CLRF   16
414C:  BTFSC  FF2.7
414E:  BSF    16.7
4150:  BCF    FF2.7
4152:  MOVLW  1E
4154:  MOVLB  1
4156:  MOVWF  x32
4158:  MOVLB  0
415A:  CALL   00B6
415E:  BTFSC  16.7
4160:  BSF    FF2.7
....................          else 
4162:  BRA    4166
....................             {Flanco = 0;} 
4164:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4166:  BSF    F93.2
4168:  BTFSS  F81.2
416A:  BRA    419E
....................       {  if(Flanco2 == 0)  
416C:  BTFSC  34.6
416E:  BRA    419C
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
4170:  MOVLW  0B
4172:  SUBWF  1B,W
4174:  CLRF   03
4176:  ADDLW  3A
4178:  MOVWF  FE9
417A:  MOVLW  00
417C:  ADDWFC 03,W
417E:  MOVWF  FEA
4180:  DECF   FEF,F
4182:  BSF    34.6
4184:  CLRF   16
4186:  BTFSC  FF2.7
4188:  BSF    16.7
418A:  BCF    FF2.7
418C:  MOVLW  1E
418E:  MOVLB  1
4190:  MOVWF  x32
4192:  MOVLB  0
4194:  CALL   00B6
4198:  BTFSC  16.7
419A:  BSF    FF2.7
....................          else 
419C:  BRA    41A0
....................             {Flanco2 = 0;} 
419E:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
41A0:  BSF    F93.0
41A2:  BTFSS  F81.0
41A4:  BRA    41E0
....................       {  if(Flanco1 == 0)  
41A6:  BTFSC  34.5
41A8:  BRA    41DE
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
41AA:  BSF    34.5
41AC:  INCF   1B,F
41AE:  CLRF   16
41B0:  BTFSC  FF2.7
41B2:  BSF    16.7
41B4:  BCF    FF2.7
41B6:  MOVLW  1E
41B8:  MOVLB  1
41BA:  MOVWF  x32
41BC:  MOVLB  0
41BE:  CALL   00B6
41C2:  BTFSC  16.7
41C4:  BSF    FF2.7
41C6:  CLRF   16
41C8:  BTFSC  FF2.7
41CA:  BSF    16.7
41CC:  BCF    FF2.7
41CE:  MOVLW  0C
41D0:  MOVLB  1
41D2:  MOVWF  x31
41D4:  MOVLB  0
41D6:  CALL   0286
41DA:  BTFSC  16.7
41DC:  BSF    FF2.7
....................          else 
41DE:  BRA    41E2
....................             {Flanco1 = 0;}    
41E0:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
41E2:  BSF    F93.1
41E4:  BTFSS  F81.1
41E6:  BRA    4222
....................       {  if(Flanco3 == 0)  
41E8:  BTFSC  34.7
41EA:  BRA    4220
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
41EC:  BSF    34.7
41EE:  DECF   1B,F
41F0:  CLRF   16
41F2:  BTFSC  FF2.7
41F4:  BSF    16.7
41F6:  BCF    FF2.7
41F8:  MOVLW  1E
41FA:  MOVLB  1
41FC:  MOVWF  x32
41FE:  MOVLB  0
4200:  CALL   00B6
4204:  BTFSC  16.7
4206:  BSF    FF2.7
4208:  CLRF   16
420A:  BTFSC  FF2.7
420C:  BSF    16.7
420E:  BCF    FF2.7
4210:  MOVLW  0C
4212:  MOVLB  1
4214:  MOVWF  x31
4216:  MOVLB  0
4218:  CALL   0286
421C:  BTFSC  16.7
421E:  BSF    FF2.7
....................          else 
4220:  BRA    4224
....................             {Flanco3 = 0;}     
4222:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
4224:  MOVLW  0B
4226:  SUBWF  1B,W
4228:  CLRF   03
422A:  ADDLW  3A
422C:  MOVWF  FE9
422E:  MOVLW  00
4230:  ADDWFC 03,W
4232:  MOVWF  FEA
4234:  BTFSC  FEF.7
4236:  BRA    423A
4238:  BRA    424E
....................        {clave[unidad-11]=9;} 
423A:  MOVLW  0B
423C:  SUBWF  1B,W
423E:  CLRF   03
4240:  ADDLW  3A
4242:  MOVWF  FE9
4244:  MOVLW  00
4246:  ADDWFC 03,W
4248:  MOVWF  FEA
424A:  MOVLW  09
424C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
424E:  MOVLW  0B
4250:  SUBWF  1B,W
4252:  CLRF   03
4254:  ADDLW  3A
4256:  MOVWF  FE9
4258:  MOVLW  00
425A:  ADDWFC 03,W
425C:  MOVWF  FEA
425E:  BTFSC  FEF.7
4260:  BRA    427A
4262:  MOVF   FEF,W
4264:  SUBLW  09
4266:  BC    427A
....................        {clave[unidad-11]=0;} 
4268:  MOVLW  0B
426A:  SUBWF  1B,W
426C:  CLRF   03
426E:  ADDLW  3A
4270:  MOVWF  FE9
4272:  MOVLW  00
4274:  ADDWFC 03,W
4276:  MOVWF  FEA
4278:  CLRF   FEF
....................        if(unidad<11) 
427A:  MOVF   1B,W
427C:  SUBLW  0A
427E:  BNC   4290
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
4280:  MOVLW  01
4282:  MOVWF  18
4284:  CLRF   36
4286:  MOVLW  02
4288:  MOVWF  1C
428A:  MOVWF  1E
428C:  MOVLW  0B
428E:  MOVWF  1B
4290:  CLRF   16
4292:  BTFSC  FF2.7
4294:  BSF    16.7
4296:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
4298:  MOVFF  1B,132
429C:  MOVLW  04
429E:  MOVLB  1
42A0:  MOVWF  x33
42A2:  MOVLB  0
42A4:  CALL   020C
42A8:  BTFSC  16.7
42AA:  BSF    FF2.7
42AC:  CLRF   16
42AE:  BTFSC  FF2.7
42B0:  BSF    16.7
42B2:  BCF    FF2.7
....................        lcd_putc(t[2]); 
42B4:  MOVFF  39,131
42B8:  CALL   0286
42BC:  BTFSC  16.7
42BE:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
42C0:  MOVF   1B,W
42C2:  SUBLW  0E
42C4:  BTFSC  FD8.0
42C6:  BRA    450A
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
42C8:  MOVF   3E,W
42CA:  SUBWF  3A,W
42CC:  BTFSS  FD8.2
42CE:  BRA    4400
42D0:  MOVF   3F,W
42D2:  SUBWF  3B,W
42D4:  BTFSS  FD8.2
42D6:  BRA    4400
42D8:  MOVF   40,W
42DA:  SUBWF  3C,W
42DC:  BTFSS  FD8.2
42DE:  BRA    4400
42E0:  MOVF   41,W
42E2:  SUBWF  3D,W
42E4:  BTFSS  FD8.2
42E6:  BRA    4400
42E8:  CLRF   16
42EA:  BTFSC  FF2.7
42EC:  BSF    16.7
42EE:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
42F0:  MOVLW  01
42F2:  MOVLB  1
42F4:  MOVWF  x32
42F6:  MOVWF  x33
42F8:  MOVLB  0
42FA:  CALL   020C
42FE:  BTFSC  16.7
4300:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
4302:  MOVLW  1C
4304:  MOVWF  FF6
4306:  MOVLW  08
4308:  MOVWF  FF7
430A:  CLRF   16
430C:  BTFSC  FF2.7
430E:  BSF    16.7
4310:  BCF    FF2.7
4312:  CALL   02F2
4316:  BTFSC  16.7
4318:  BSF    FF2.7
431A:  CLRF   16
431C:  BTFSC  FF2.7
431E:  BSF    16.7
4320:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
4322:  MOVLW  01
4324:  MOVLB  1
4326:  MOVWF  x32
4328:  MOVLW  02
432A:  MOVWF  x33
432C:  MOVLB  0
432E:  CALL   020C
4332:  BTFSC  16.7
4334:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
4336:  MOVLW  32
4338:  MOVWF  FF6
433A:  MOVLW  08
433C:  MOVWF  FF7
433E:  CLRF   16
4340:  BTFSC  FF2.7
4342:  BSF    16.7
4344:  BCF    FF2.7
4346:  CALL   02F2
434A:  BTFSC  16.7
434C:  BSF    FF2.7
434E:  CLRF   16
4350:  BTFSC  FF2.7
4352:  BSF    16.7
4354:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
4356:  MOVLW  01
4358:  MOVLB  1
435A:  MOVWF  x32
435C:  MOVLW  03
435E:  MOVWF  x33
4360:  MOVLB  0
4362:  CALL   020C
4366:  BTFSC  16.7
4368:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta      "); 
436A:  MOVLW  48
436C:  MOVWF  FF6
436E:  MOVLW  08
4370:  MOVWF  FF7
4372:  CLRF   16
4374:  BTFSC  FF2.7
4376:  BSF    16.7
4378:  BCF    FF2.7
437A:  CALL   02F2
437E:  BTFSC  16.7
4380:  BSF    FF2.7
4382:  CLRF   16
4384:  BTFSC  FF2.7
4386:  BSF    16.7
4388:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
438A:  MOVLW  01
438C:  MOVLB  1
438E:  MOVWF  x32
4390:  MOVLW  04
4392:  MOVWF  x33
4394:  MOVLB  0
4396:  CALL   020C
439A:  BTFSC  16.7
439C:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
439E:  MOVLW  5E
43A0:  MOVWF  FF6
43A2:  MOVLW  08
43A4:  MOVWF  FF7
43A6:  CLRF   16
43A8:  BTFSC  FF2.7
43AA:  BSF    16.7
43AC:  BCF    FF2.7
43AE:  CALL   02F2
43B2:  BTFSC  16.7
43B4:  BSF    FF2.7
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
43B6:  MOVLW  02
43B8:  MOVLB  1
43BA:  MOVWF  x00
43BC:  CLRF   16
43BE:  BTFSC  FF2.7
43C0:  BSF    16.7
43C2:  BCF    FF2.7
43C4:  MOVLW  FA
43C6:  MOVWF  x32
43C8:  MOVLB  0
43CA:  CALL   00B6
43CE:  BTFSC  16.7
43D0:  BSF    FF2.7
43D2:  MOVLB  1
43D4:  DECFSZ x00,F
43D6:  BRA    43BC
43D8:  MOVLW  33
43DA:  MOVWF  18
43DC:  MOVLW  0B
43DE:  MOVWF  1B
43E0:  CLRF   16
43E2:  BTFSC  FF2.7
43E4:  BSF    16.7
43E6:  BCF    FF2.7
43E8:  MOVLW  0C
43EA:  MOVWF  x31
43EC:  MOVLB  0
43EE:  CALL   0286
43F2:  BTFSC  16.7
43F4:  BSF    FF2.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
43F6:  CLRF   3A
43F8:  CLRF   3B
43FA:  CLRF   3C
43FC:  CLRF   3D
....................          else 
43FE:  BRA    450A
4400:  CLRF   16
4402:  BTFSC  FF2.7
4404:  BSF    16.7
4406:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
4408:  MOVLW  01
440A:  MOVLB  1
440C:  MOVWF  x32
440E:  MOVWF  x33
4410:  MOVLB  0
4412:  CALL   020C
4416:  BTFSC  16.7
4418:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
441A:  MOVLW  74
441C:  MOVWF  FF6
441E:  MOVLW  08
4420:  MOVWF  FF7
4422:  CLRF   16
4424:  BTFSC  FF2.7
4426:  BSF    16.7
4428:  BCF    FF2.7
442A:  CALL   02F2
442E:  BTFSC  16.7
4430:  BSF    FF2.7
4432:  CLRF   16
4434:  BTFSC  FF2.7
4436:  BSF    16.7
4438:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
443A:  MOVLW  01
443C:  MOVLB  1
443E:  MOVWF  x32
4440:  MOVLW  02
4442:  MOVWF  x33
4444:  MOVLB  0
4446:  CALL   020C
444A:  BTFSC  16.7
444C:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
444E:  MOVLW  8A
4450:  MOVWF  FF6
4452:  MOVLW  08
4454:  MOVWF  FF7
4456:  CLRF   16
4458:  BTFSC  FF2.7
445A:  BSF    16.7
445C:  BCF    FF2.7
445E:  CALL   02F2
4462:  BTFSC  16.7
4464:  BSF    FF2.7
4466:  CLRF   16
4468:  BTFSC  FF2.7
446A:  BSF    16.7
446C:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
446E:  MOVLW  01
4470:  MOVLB  1
4472:  MOVWF  x32
4474:  MOVLW  03
4476:  MOVWF  x33
4478:  MOVLB  0
447A:  CALL   020C
447E:  BTFSC  16.7
4480:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta     "); 
4482:  MOVLW  A0
4484:  MOVWF  FF6
4486:  MOVLW  08
4488:  MOVWF  FF7
448A:  CLRF   16
448C:  BTFSC  FF2.7
448E:  BSF    16.7
4490:  BCF    FF2.7
4492:  CALL   02F2
4496:  BTFSC  16.7
4498:  BSF    FF2.7
449A:  CLRF   16
449C:  BTFSC  FF2.7
449E:  BSF    16.7
44A0:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
44A2:  MOVLW  01
44A4:  MOVLB  1
44A6:  MOVWF  x32
44A8:  MOVLW  04
44AA:  MOVWF  x33
44AC:  MOVLB  0
44AE:  CALL   020C
44B2:  BTFSC  16.7
44B4:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
44B6:  MOVLW  B6
44B8:  MOVWF  FF6
44BA:  MOVLW  08
44BC:  MOVWF  FF7
44BE:  CLRF   16
44C0:  BTFSC  FF2.7
44C2:  BSF    16.7
44C4:  BCF    FF2.7
44C6:  CALL   02F2
44CA:  BTFSC  16.7
44CC:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
44CE:  MOVLW  02
44D0:  MOVLB  1
44D2:  MOVWF  x00
44D4:  CLRF   16
44D6:  BTFSC  FF2.7
44D8:  BSF    16.7
44DA:  BCF    FF2.7
44DC:  MOVLW  FA
44DE:  MOVWF  x32
44E0:  MOVLB  0
44E2:  CALL   00B6
44E6:  BTFSC  16.7
44E8:  BSF    FF2.7
44EA:  MOVLB  1
44EC:  DECFSZ x00,F
44EE:  BRA    44D4
44F0:  MOVLW  0B
44F2:  MOVWF  1B
44F4:  CLRF   16
44F6:  BTFSC  FF2.7
44F8:  BSF    16.7
44FA:  BCF    FF2.7
44FC:  MOVLW  0C
44FE:  MOVWF  x31
4500:  MOVLB  0
4502:  CALL   0286
4506:  BTFSC  16.7
4508:  BSF    FF2.7
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
450A:  MOVF   1B,W
450C:  SUBLW  0B
450E:  BC    454A
4510:  MOVF   1B,W
4512:  SUBLW  0D
4514:  BNC   454A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
4516:  MOVLW  01
4518:  SUBWF  1B,W
451A:  MOVLB  1
451C:  MOVWF  x00
451E:  CLRF   16
4520:  BTFSC  FF2.7
4522:  BSF    16.7
4524:  BCF    FF2.7
4526:  MOVWF  x32
4528:  MOVLW  04
452A:  MOVWF  x33
452C:  MOVLB  0
452E:  CALL   020C
4532:  BTFSC  16.7
4534:  BSF    FF2.7
4536:  CLRF   16
4538:  BTFSC  FF2.7
453A:  BSF    16.7
453C:  BCF    FF2.7
....................             lcd_putc(t[1]); 
453E:  MOVFF  38,131
4542:  CALL   0286
4546:  BTFSC  16.7
4548:  BSF    FF2.7
454A:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
454C:  MOVF   18,W
454E:  SUBLW  33
4550:  BTFSS  FD8.2
4552:  BRA    4A32
4554:  CLRF   16
4556:  BTFSC  FF2.7
4558:  BSF    16.7
455A:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
455C:  MOVLW  01
455E:  MOVWF  x32
4560:  MOVWF  x33
4562:  MOVLB  0
4564:  CALL   020C
4568:  BTFSC  16.7
456A:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
456C:  MOVLW  CC
456E:  MOVWF  FF6
4570:  MOVLW  08
4572:  MOVWF  FF7
4574:  CLRF   16
4576:  BTFSC  FF2.7
4578:  BSF    16.7
457A:  BCF    FF2.7
457C:  CALL   02F2
4580:  BTFSC  16.7
4582:  BSF    FF2.7
4584:  CLRF   16
4586:  BTFSC  FF2.7
4588:  BSF    16.7
458A:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
458C:  MOVLW  01
458E:  MOVLB  1
4590:  MOVWF  x32
4592:  MOVLW  02
4594:  MOVWF  x33
4596:  MOVLB  0
4598:  CALL   020C
459C:  BTFSC  16.7
459E:  BSF    FF2.7
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
45A0:  MOVLW  E2
45A2:  MOVWF  FF6
45A4:  MOVLW  08
45A6:  MOVWF  FF7
45A8:  CLRF   16
45AA:  BTFSC  FF2.7
45AC:  BSF    16.7
45AE:  BCF    FF2.7
45B0:  CALL   02F2
45B4:  BTFSC  16.7
45B6:  BSF    FF2.7
45B8:  CLRF   16
45BA:  BTFSC  FF2.7
45BC:  BSF    16.7
45BE:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
45C0:  MOVLW  01
45C2:  MOVLB  1
45C4:  MOVWF  x32
45C6:  MOVLW  03
45C8:  MOVWF  x33
45CA:  MOVLB  0
45CC:  CALL   020C
45D0:  BTFSC  16.7
45D2:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
45D4:  MOVLW  F8
45D6:  MOVWF  FF6
45D8:  MOVLW  08
45DA:  MOVWF  FF7
45DC:  MOVLW  0A
45DE:  MOVLB  1
45E0:  MOVWF  x08
45E2:  MOVLB  0
45E4:  CALL   1062
45E8:  MOVFF  3A,100
45EC:  MOVLW  1F
45EE:  MOVLB  1
45F0:  MOVWF  x01
45F2:  MOVLB  0
45F4:  CALL   10C4
45F8:  MOVFF  3B,100
45FC:  MOVLW  1F
45FE:  MOVLB  1
4600:  MOVWF  x01
4602:  MOVLB  0
4604:  CALL   10C4
4608:  MOVFF  3C,100
460C:  MOVLW  1F
460E:  MOVLB  1
4610:  MOVWF  x01
4612:  MOVLB  0
4614:  CALL   10C4
4618:  MOVFF  3D,100
461C:  MOVLW  1F
461E:  MOVLB  1
4620:  MOVWF  x01
4622:  MOVLB  0
4624:  CALL   10C4
4628:  CLRF   16
462A:  BTFSC  FF2.7
462C:  BSF    16.7
462E:  BCF    FF2.7
4630:  MOVLW  20
4632:  MOVLB  1
4634:  MOVWF  x31
4636:  MOVLB  0
4638:  CALL   0286
463C:  BTFSC  16.7
463E:  BSF    FF2.7
4640:  CLRF   16
4642:  BTFSC  FF2.7
4644:  BSF    16.7
4646:  BCF    FF2.7
4648:  MOVLW  20
464A:  MOVLB  1
464C:  MOVWF  x31
464E:  MOVLB  0
4650:  CALL   0286
4654:  BTFSC  16.7
4656:  BSF    FF2.7
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
4658:  BSF    F93.3
465A:  BTFSS  F81.3
465C:  BRA    4690
....................       {  if(Flanco == 0)  
465E:  BTFSC  34.4
4660:  BRA    468E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
4662:  MOVLW  0B
4664:  SUBWF  1B,W
4666:  CLRF   03
4668:  ADDLW  3A
466A:  MOVWF  FE9
466C:  MOVLW  00
466E:  ADDWFC 03,W
4670:  MOVWF  FEA
4672:  INCF   FEF,F
4674:  BSF    34.4
4676:  CLRF   16
4678:  BTFSC  FF2.7
467A:  BSF    16.7
467C:  BCF    FF2.7
467E:  MOVLW  1E
4680:  MOVLB  1
4682:  MOVWF  x32
4684:  MOVLB  0
4686:  CALL   00B6
468A:  BTFSC  16.7
468C:  BSF    FF2.7
....................          else 
468E:  BRA    4692
....................             {Flanco = 0;} 
4690:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4692:  BSF    F93.2
4694:  BTFSS  F81.2
4696:  BRA    46CA
....................       {  if(Flanco2 == 0)  
4698:  BTFSC  34.6
469A:  BRA    46C8
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
469C:  MOVLW  0B
469E:  SUBWF  1B,W
46A0:  CLRF   03
46A2:  ADDLW  3A
46A4:  MOVWF  FE9
46A6:  MOVLW  00
46A8:  ADDWFC 03,W
46AA:  MOVWF  FEA
46AC:  DECF   FEF,F
46AE:  BSF    34.6
46B0:  CLRF   16
46B2:  BTFSC  FF2.7
46B4:  BSF    16.7
46B6:  BCF    FF2.7
46B8:  MOVLW  1E
46BA:  MOVLB  1
46BC:  MOVWF  x32
46BE:  MOVLB  0
46C0:  CALL   00B6
46C4:  BTFSC  16.7
46C6:  BSF    FF2.7
....................          else 
46C8:  BRA    46CC
....................             {Flanco2 = 0;} 
46CA:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
46CC:  BSF    F93.0
46CE:  BTFSS  F81.0
46D0:  BRA    470C
....................       {  if(Flanco1 == 0)  
46D2:  BTFSC  34.5
46D4:  BRA    470A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
46D6:  BSF    34.5
46D8:  INCF   1B,F
46DA:  CLRF   16
46DC:  BTFSC  FF2.7
46DE:  BSF    16.7
46E0:  BCF    FF2.7
46E2:  MOVLW  1E
46E4:  MOVLB  1
46E6:  MOVWF  x32
46E8:  MOVLB  0
46EA:  CALL   00B6
46EE:  BTFSC  16.7
46F0:  BSF    FF2.7
46F2:  CLRF   16
46F4:  BTFSC  FF2.7
46F6:  BSF    16.7
46F8:  BCF    FF2.7
46FA:  MOVLW  0C
46FC:  MOVLB  1
46FE:  MOVWF  x31
4700:  MOVLB  0
4702:  CALL   0286
4706:  BTFSC  16.7
4708:  BSF    FF2.7
....................          else 
470A:  BRA    470E
....................             {Flanco1 = 0;}    
470C:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
470E:  BSF    F93.1
4710:  BTFSS  F81.1
4712:  BRA    474E
....................       {  if(Flanco3 == 0)  
4714:  BTFSC  34.7
4716:  BRA    474C
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
4718:  BSF    34.7
471A:  DECF   1B,F
471C:  CLRF   16
471E:  BTFSC  FF2.7
4720:  BSF    16.7
4722:  BCF    FF2.7
4724:  MOVLW  1E
4726:  MOVLB  1
4728:  MOVWF  x32
472A:  MOVLB  0
472C:  CALL   00B6
4730:  BTFSC  16.7
4732:  BSF    FF2.7
4734:  CLRF   16
4736:  BTFSC  FF2.7
4738:  BSF    16.7
473A:  BCF    FF2.7
473C:  MOVLW  0C
473E:  MOVLB  1
4740:  MOVWF  x31
4742:  MOVLB  0
4744:  CALL   0286
4748:  BTFSC  16.7
474A:  BSF    FF2.7
....................          else 
474C:  BRA    4750
....................             {Flanco3 = 0;}     
474E:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
4750:  MOVLW  0B
4752:  SUBWF  1B,W
4754:  CLRF   03
4756:  ADDLW  3A
4758:  MOVWF  FE9
475A:  MOVLW  00
475C:  ADDWFC 03,W
475E:  MOVWF  FEA
4760:  BTFSC  FEF.7
4762:  BRA    4766
4764:  BRA    477A
....................        {clave[unidad-11]=9;} 
4766:  MOVLW  0B
4768:  SUBWF  1B,W
476A:  CLRF   03
476C:  ADDLW  3A
476E:  MOVWF  FE9
4770:  MOVLW  00
4772:  ADDWFC 03,W
4774:  MOVWF  FEA
4776:  MOVLW  09
4778:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
477A:  MOVLW  0B
477C:  SUBWF  1B,W
477E:  CLRF   03
4780:  ADDLW  3A
4782:  MOVWF  FE9
4784:  MOVLW  00
4786:  ADDWFC 03,W
4788:  MOVWF  FEA
478A:  BTFSC  FEF.7
478C:  BRA    47A6
478E:  MOVF   FEF,W
4790:  SUBLW  09
4792:  BC    47A6
....................        {clave[unidad-11]=0;} 
4794:  MOVLW  0B
4796:  SUBWF  1B,W
4798:  CLRF   03
479A:  ADDLW  3A
479C:  MOVWF  FE9
479E:  MOVLW  00
47A0:  ADDWFC 03,W
47A2:  MOVWF  FEA
47A4:  CLRF   FEF
....................        if(unidad<11) 
47A6:  MOVF   1B,W
47A8:  SUBLW  0A
47AA:  BNC   47B4
....................        {Menu=5;unidad=11;} 
47AC:  MOVLW  05
47AE:  MOVWF  18
47B0:  MOVLW  0B
47B2:  MOVWF  1B
47B4:  CLRF   16
47B6:  BTFSC  FF2.7
47B8:  BSF    16.7
47BA:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
47BC:  MOVFF  1B,132
47C0:  MOVLW  04
47C2:  MOVLB  1
47C4:  MOVWF  x33
47C6:  MOVLB  0
47C8:  CALL   020C
47CC:  BTFSC  16.7
47CE:  BSF    FF2.7
47D0:  CLRF   16
47D2:  BTFSC  FF2.7
47D4:  BSF    16.7
47D6:  BCF    FF2.7
....................        lcd_putc(t[2]); 
47D8:  MOVFF  39,131
47DC:  CALL   0286
47E0:  BTFSC  16.7
47E2:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
47E4:  MOVF   1B,W
47E6:  SUBLW  0E
47E8:  BTFSC  FD8.0
47EA:  BRA    49F0
47EC:  CLRF   16
47EE:  BTFSC  FF2.7
47F0:  BSF    16.7
47F2:  BCF    FF2.7
....................        { 
....................             lcd_gotoxy(1,1); 
47F4:  MOVLW  01
47F6:  MOVLB  1
47F8:  MOVWF  x32
47FA:  MOVWF  x33
47FC:  MOVLB  0
47FE:  CALL   020C
4802:  BTFSC  16.7
4804:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
4806:  MOVLW  0E
4808:  MOVWF  FF6
480A:  MOVLW  09
480C:  MOVWF  FF7
480E:  CLRF   16
4810:  BTFSC  FF2.7
4812:  BSF    16.7
4814:  BCF    FF2.7
4816:  CALL   02F2
481A:  BTFSC  16.7
481C:  BSF    FF2.7
481E:  CLRF   16
4820:  BTFSC  FF2.7
4822:  BSF    16.7
4824:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
4826:  MOVLW  01
4828:  MOVLB  1
482A:  MOVWF  x32
482C:  MOVLW  02
482E:  MOVWF  x33
4830:  MOVLB  0
4832:  CALL   020C
4836:  BTFSC  16.7
4838:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
483A:  MOVLW  24
483C:  MOVWF  FF6
483E:  MOVLW  09
4840:  MOVWF  FF7
4842:  CLRF   16
4844:  BTFSC  FF2.7
4846:  BSF    16.7
4848:  BCF    FF2.7
484A:  CALL   02F2
484E:  BTFSC  16.7
4850:  BSF    FF2.7
4852:  CLRF   16
4854:  BTFSC  FF2.7
4856:  BSF    16.7
4858:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
485A:  MOVLW  01
485C:  MOVLB  1
485E:  MOVWF  x32
4860:  MOVLW  03
4862:  MOVWF  x33
4864:  MOVLB  0
4866:  CALL   020C
486A:  BTFSC  16.7
486C:  BSF    FF2.7
....................             printf(lcd_putc,"     Almacenada     "); 
486E:  MOVLW  3A
4870:  MOVWF  FF6
4872:  MOVLW  09
4874:  MOVWF  FF7
4876:  CLRF   16
4878:  BTFSC  FF2.7
487A:  BSF    16.7
487C:  BCF    FF2.7
487E:  CALL   02F2
4882:  BTFSC  16.7
4884:  BSF    FF2.7
4886:  CLRF   16
4888:  BTFSC  FF2.7
488A:  BSF    16.7
488C:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
488E:  MOVLW  01
4890:  MOVLB  1
4892:  MOVWF  x32
4894:  MOVLW  04
4896:  MOVWF  x33
4898:  MOVLB  0
489A:  CALL   020C
489E:  BTFSC  16.7
48A0:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
48A2:  MOVLW  50
48A4:  MOVWF  FF6
48A6:  MOVLW  09
48A8:  MOVWF  FF7
48AA:  CLRF   16
48AC:  BTFSC  FF2.7
48AE:  BSF    16.7
48B0:  BCF    FF2.7
48B2:  CALL   02F2
48B6:  BTFSC  16.7
48B8:  BSF    FF2.7
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
48BA:  CLRF   FA9
48BC:  MOVFF  3A,FA8
48C0:  BCF    FA6.6
48C2:  BCF    FA6.7
48C4:  BSF    FA6.2
48C6:  MOVF   FF2,W
48C8:  MOVWF  00
48CA:  BCF    FF2.7
48CC:  MOVLB  F
48CE:  MOVLW  55
48D0:  MOVWF  FA7
48D2:  MOVLW  AA
48D4:  MOVWF  FA7
48D6:  BSF    FA6.1
48D8:  BTFSC  FA6.1
48DA:  BRA    48D8
48DC:  BCF    FA6.2
48DE:  MOVF   00,W
48E0:  IORWF  FF2,F
48E2:  CLRF   16
48E4:  BTFSC  FF2.7
48E6:  BSF    16.7
48E8:  BCF    FF2.7
48EA:  MOVLW  14
48EC:  MOVLB  1
48EE:  MOVWF  x32
48F0:  MOVLB  0
48F2:  CALL   00B6
48F6:  BTFSC  16.7
48F8:  BSF    FF2.7
48FA:  MOVLW  01
48FC:  MOVWF  FA9
48FE:  MOVFF  3B,FA8
4902:  BCF    FA6.6
4904:  BCF    FA6.7
4906:  BSF    FA6.2
4908:  MOVF   FF2,W
490A:  MOVWF  00
490C:  BCF    FF2.7
490E:  MOVLB  F
4910:  MOVLW  55
4912:  MOVWF  FA7
4914:  MOVLW  AA
4916:  MOVWF  FA7
4918:  BSF    FA6.1
491A:  BTFSC  FA6.1
491C:  BRA    491A
491E:  BCF    FA6.2
4920:  MOVF   00,W
4922:  IORWF  FF2,F
4924:  CLRF   16
4926:  BTFSC  FF2.7
4928:  BSF    16.7
492A:  BCF    FF2.7
492C:  MOVLW  14
492E:  MOVLB  1
4930:  MOVWF  x32
4932:  MOVLB  0
4934:  CALL   00B6
4938:  BTFSC  16.7
493A:  BSF    FF2.7
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
493C:  MOVLW  02
493E:  MOVWF  FA9
4940:  MOVFF  3C,FA8
4944:  BCF    FA6.6
4946:  BCF    FA6.7
4948:  BSF    FA6.2
494A:  MOVF   FF2,W
494C:  MOVWF  00
494E:  BCF    FF2.7
4950:  MOVLB  F
4952:  MOVLW  55
4954:  MOVWF  FA7
4956:  MOVLW  AA
4958:  MOVWF  FA7
495A:  BSF    FA6.1
495C:  BTFSC  FA6.1
495E:  BRA    495C
4960:  BCF    FA6.2
4962:  MOVF   00,W
4964:  IORWF  FF2,F
4966:  CLRF   16
4968:  BTFSC  FF2.7
496A:  BSF    16.7
496C:  BCF    FF2.7
496E:  MOVLW  14
4970:  MOVLB  1
4972:  MOVWF  x32
4974:  MOVLB  0
4976:  CALL   00B6
497A:  BTFSC  16.7
497C:  BSF    FF2.7
497E:  MOVLW  03
4980:  MOVWF  FA9
4982:  MOVFF  3D,FA8
4986:  BCF    FA6.6
4988:  BCF    FA6.7
498A:  BSF    FA6.2
498C:  MOVF   FF2,W
498E:  MOVWF  00
4990:  BCF    FF2.7
4992:  MOVLB  F
4994:  MOVLW  55
4996:  MOVWF  FA7
4998:  MOVLW  AA
499A:  MOVWF  FA7
499C:  BSF    FA6.1
499E:  BTFSC  FA6.1
49A0:  BRA    499E
49A2:  BCF    FA6.2
49A4:  MOVF   00,W
49A6:  IORWF  FF2,F
49A8:  CLRF   16
49AA:  BTFSC  FF2.7
49AC:  BSF    16.7
49AE:  BCF    FF2.7
49B0:  MOVLW  14
49B2:  MOVLB  1
49B4:  MOVWF  x32
49B6:  MOVLB  0
49B8:  CALL   00B6
49BC:  BTFSC  16.7
49BE:  BSF    FF2.7
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
49C0:  MOVLW  02
49C2:  MOVLB  1
49C4:  MOVWF  x00
49C6:  CLRF   16
49C8:  BTFSC  FF2.7
49CA:  BSF    16.7
49CC:  BCF    FF2.7
49CE:  MOVLW  FA
49D0:  MOVWF  x32
49D2:  MOVLB  0
49D4:  CALL   00B6
49D8:  BTFSC  16.7
49DA:  BSF    FF2.7
49DC:  MOVLB  1
49DE:  DECFSZ x00,F
49E0:  BRA    49C6
49E2:  MOVLW  01
49E4:  MOVWF  18
49E6:  CLRF   36
49E8:  MOVLW  02
49EA:  MOVWF  1C
49EC:  MOVWF  1E
49EE:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
49F0:  MOVF   1B,W
49F2:  SUBLW  0B
49F4:  BC    4A30
49F6:  MOVF   1B,W
49F8:  SUBLW  0D
49FA:  BNC   4A30
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
49FC:  MOVLW  01
49FE:  SUBWF  1B,W
4A00:  MOVLB  1
4A02:  MOVWF  x00
4A04:  CLRF   16
4A06:  BTFSC  FF2.7
4A08:  BSF    16.7
4A0A:  BCF    FF2.7
4A0C:  MOVWF  x32
4A0E:  MOVLW  04
4A10:  MOVWF  x33
4A12:  MOVLB  0
4A14:  CALL   020C
4A18:  BTFSC  16.7
4A1A:  BSF    FF2.7
4A1C:  CLRF   16
4A1E:  BTFSC  FF2.7
4A20:  BSF    16.7
4A22:  BCF    FF2.7
....................             lcd_putc(t[1]); 
4A24:  MOVFF  38,131
4A28:  CALL   0286
4A2C:  BTFSC  16.7
4A2E:  BSF    FF2.7
4A30:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
4A32:  MOVF   18,W
4A34:  SUBLW  06
4A36:  BTFSS  FD8.2
4A38:  BRA    4C28
4A3A:  CLRF   16
4A3C:  BTFSC  FF2.7
4A3E:  BSF    16.7
4A40:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,2); 
4A42:  MOVLW  01
4A44:  MOVWF  x32
4A46:  MOVLW  02
4A48:  MOVWF  x33
4A4A:  MOVLB  0
4A4C:  CALL   020C
4A50:  BTFSC  16.7
4A52:  BSF    FF2.7
....................    printf(lcd_putc,"     Media Movil    "); 
4A54:  MOVLW  66
4A56:  MOVWF  FF6
4A58:  MOVLW  09
4A5A:  MOVWF  FF7
4A5C:  CLRF   16
4A5E:  BTFSC  FF2.7
4A60:  BSF    16.7
4A62:  BCF    FF2.7
4A64:  CALL   02F2
4A68:  BTFSC  16.7
4A6A:  BSF    FF2.7
4A6C:  CLRF   16
4A6E:  BTFSC  FF2.7
4A70:  BSF    16.7
4A72:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4A74:  MOVLW  01
4A76:  MOVLB  1
4A78:  MOVWF  x32
4A7A:  MOVLW  03
4A7C:  MOVWF  x33
4A7E:  MOVLB  0
4A80:  CALL   020C
4A84:  BTFSC  16.7
4A86:  BSF    FF2.7
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
4A88:  MOVLW  7C
4A8A:  MOVWF  FF6
4A8C:  MOVLW  09
4A8E:  MOVWF  FF7
4A90:  MOVLW  07
4A92:  MOVLB  1
4A94:  MOVWF  x08
4A96:  MOVLB  0
4A98:  CALL   1062
4A9C:  MOVFF  2B,100
4AA0:  MOVLW  01
4AA2:  MOVLB  1
4AA4:  MOVWF  x01
4AA6:  MOVLB  0
4AA8:  CALL   10C4
4AAC:  CLRF   16
4AAE:  BTFSC  FF2.7
4AB0:  BSF    16.7
4AB2:  BCF    FF2.7
4AB4:  MOVLW  20
4AB6:  MOVLB  1
4AB8:  MOVWF  x31
4ABA:  MOVLB  0
4ABC:  CALL   0286
4AC0:  BTFSC  16.7
4AC2:  BSF    FF2.7
4AC4:  CLRF   16
4AC6:  BTFSC  FF2.7
4AC8:  BSF    16.7
4ACA:  BCF    FF2.7
4ACC:  MOVLW  20
4ACE:  MOVLB  1
4AD0:  MOVWF  x31
4AD2:  MOVLB  0
4AD4:  CALL   0286
4AD8:  BTFSC  16.7
4ADA:  BSF    FF2.7
4ADC:  CLRF   16
4ADE:  BTFSC  FF2.7
4AE0:  BSF    16.7
4AE2:  BCF    FF2.7
4AE4:  MOVLW  20
4AE6:  MOVLB  1
4AE8:  MOVWF  x31
4AEA:  MOVLB  0
4AEC:  CALL   0286
4AF0:  BTFSC  16.7
4AF2:  BSF    FF2.7
....................     
....................    if(MediaMovil>12) 
4AF4:  MOVF   2B,W
4AF6:  SUBLW  0C
4AF8:  BC    4AFE
....................    {MediaMovil=12;} 
4AFA:  MOVLW  0C
4AFC:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
4AFE:  MOVF   2B,F
4B00:  BNZ   4B06
....................    {MediaMovil=1;} 
4B02:  MOVLW  01
4B04:  MOVWF  2B
....................     
....................       if(UP)//Si oprime hacia arriba 
4B06:  BSF    F93.3
4B08:  BTFSS  F81.3
4B0A:  BRA    4B30
....................       {  if(Flanco == 0)  
4B0C:  BTFSC  34.4
4B0E:  BRA    4B2E
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
4B10:  MOVLW  01
4B12:  ADDWF  2B,F
4B14:  BSF    34.4
4B16:  CLRF   16
4B18:  BTFSC  FF2.7
4B1A:  BSF    16.7
4B1C:  BCF    FF2.7
4B1E:  MOVLW  1E
4B20:  MOVLB  1
4B22:  MOVWF  x32
4B24:  MOVLB  0
4B26:  CALL   00B6
4B2A:  BTFSC  16.7
4B2C:  BSF    FF2.7
....................          else 
4B2E:  BRA    4B32
....................             {Flanco = 0;} 
4B30:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4B32:  BSF    F93.2
4B34:  BTFSS  F81.2
4B36:  BRA    4B5C
....................       {  if(Flanco2 == 0)  
4B38:  BTFSC  34.6
4B3A:  BRA    4B5A
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
4B3C:  MOVLW  01
4B3E:  SUBWF  2B,F
4B40:  BSF    34.6
4B42:  CLRF   16
4B44:  BTFSC  FF2.7
4B46:  BSF    16.7
4B48:  BCF    FF2.7
4B4A:  MOVLW  1E
4B4C:  MOVLB  1
4B4E:  MOVWF  x32
4B50:  MOVLB  0
4B52:  CALL   00B6
4B56:  BTFSC  16.7
4B58:  BSF    FF2.7
....................          else 
4B5A:  BRA    4B5E
....................             {Flanco2 = 0;} 
4B5C:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
4B5E:  BSF    F93.0
4B60:  BTFSS  F81.0
4B62:  BRA    4BD6
....................       {  if(Flanco1 == 0)  
4B64:  BTFSC  34.5
4B66:  BRA    4BD4
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4B68:  MOVLW  01
4B6A:  MOVWF  18
4B6C:  CLRF   36
4B6E:  MOVLW  02
4B70:  MOVWF  1C
4B72:  MOVWF  1E
4B74:  MOVLW  0B
4B76:  MOVWF  1B
4B78:  CLRF   16
4B7A:  BTFSC  FF2.7
4B7C:  BSF    16.7
4B7E:  BCF    FF2.7
4B80:  MOVLW  1E
4B82:  MOVLB  1
4B84:  MOVWF  x32
4B86:  MOVLB  0
4B88:  CALL   00B6
4B8C:  BTFSC  16.7
4B8E:  BSF    FF2.7
4B90:  CLRF   16
4B92:  BTFSC  FF2.7
4B94:  BSF    16.7
4B96:  BCF    FF2.7
4B98:  MOVLW  0C
4B9A:  MOVLB  1
4B9C:  MOVWF  x31
4B9E:  MOVLB  0
4BA0:  CALL   0286
4BA4:  BTFSC  16.7
4BA6:  BSF    FF2.7
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
4BA8:  MOVLW  2A
4BAA:  MOVWF  FA9
4BAC:  MOVFF  2B,FA8
4BB0:  BCF    FA6.6
4BB2:  BCF    FA6.7
4BB4:  BSF    FA6.2
4BB6:  MOVF   FF2,W
4BB8:  MOVWF  00
4BBA:  BCF    FF2.7
4BBC:  MOVLB  F
4BBE:  MOVLW  55
4BC0:  MOVWF  FA7
4BC2:  MOVLW  AA
4BC4:  MOVWF  FA7
4BC6:  BSF    FA6.1
4BC8:  BTFSC  FA6.1
4BCA:  BRA    4BC8
4BCC:  BCF    FA6.2
4BCE:  MOVF   00,W
4BD0:  IORWF  FF2,F
4BD2:  MOVLB  0
....................             }} 
....................          else 
4BD4:  BRA    4BD8
....................             {Flanco1 = 0;}    
4BD6:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4BD8:  BSF    F93.1
4BDA:  BTFSS  F81.1
4BDC:  BRA    4C24
....................       {  if(Flanco3 == 0)  
4BDE:  BTFSC  34.7
4BE0:  BRA    4C22
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
4BE2:  MOVLW  01
4BE4:  MOVWF  18
4BE6:  CLRF   36
4BE8:  MOVLW  02
4BEA:  MOVWF  1C
4BEC:  MOVWF  1E
4BEE:  MOVLW  0B
4BF0:  MOVWF  1B
4BF2:  CLRF   16
4BF4:  BTFSC  FF2.7
4BF6:  BSF    16.7
4BF8:  BCF    FF2.7
4BFA:  MOVLW  1E
4BFC:  MOVLB  1
4BFE:  MOVWF  x32
4C00:  MOVLB  0
4C02:  CALL   00B6
4C06:  BTFSC  16.7
4C08:  BSF    FF2.7
4C0A:  CLRF   16
4C0C:  BTFSC  FF2.7
4C0E:  BSF    16.7
4C10:  BCF    FF2.7
4C12:  MOVLW  0C
4C14:  MOVLB  1
4C16:  MOVWF  x31
4C18:  MOVLB  0
4C1A:  CALL   0286
4C1E:  BTFSC  16.7
4C20:  BSF    FF2.7
....................          else 
4C22:  BRA    4C26
....................             {Flanco3 = 0;}   
4C24:  BCF    34.7
4C26:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
4C28:  MOVF   18,W
4C2A:  SUBLW  07
4C2C:  BTFSS  FD8.2
4C2E:  BRA    509E
4C30:  CLRF   16
4C32:  BTFSC  FF2.7
4C34:  BSF    16.7
4C36:  BCF    FF2.7
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
4C38:  MOVLW  01
4C3A:  MOVWF  x32
4C3C:  MOVWF  x33
4C3E:  MOVLB  0
4C40:  CALL   020C
4C44:  BTFSC  16.7
4C46:  BSF    FF2.7
....................    printf(lcd_putc,"  Zero Point Config "); 
4C48:  MOVLW  8C
4C4A:  MOVWF  FF6
4C4C:  MOVLW  09
4C4E:  MOVWF  FF7
4C50:  CLRF   16
4C52:  BTFSC  FF2.7
4C54:  BSF    16.7
4C56:  BCF    FF2.7
4C58:  CALL   02F2
4C5C:  BTFSC  16.7
4C5E:  BSF    FF2.7
4C60:  CLRF   16
4C62:  BTFSC  FF2.7
4C64:  BSF    16.7
4C66:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
4C68:  MOVLW  01
4C6A:  MOVLB  1
4C6C:  MOVWF  x32
4C6E:  MOVLW  02
4C70:  MOVWF  x33
4C72:  MOVLB  0
4C74:  CALL   020C
4C78:  BTFSC  16.7
4C7A:  BSF    FF2.7
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
4C7C:  MOVLW  A2
4C7E:  MOVWF  FF6
4C80:  MOVLW  09
4C82:  MOVWF  FF7
4C84:  MOVLW  08
4C86:  MOVLB  1
4C88:  MOVWF  x08
4C8A:  MOVLB  0
4C8C:  CALL   1062
4C90:  MOVLW  01
4C92:  MOVWF  FE9
4C94:  MOVFF  8E,10B
4C98:  MOVFF  8D,10A
4C9C:  MOVFF  8C,109
4CA0:  MOVFF  8B,108
4CA4:  MOVLB  1
4CA6:  MOVWF  x0C
4CA8:  MOVLB  0
4CAA:  CALL   164A
4CAE:  MOVLW  AF
4CB0:  MOVWF  FF6
4CB2:  MOVLW  09
4CB4:  MOVWF  FF7
4CB6:  MOVLW  08
4CB8:  MOVLB  1
4CBA:  MOVWF  x08
4CBC:  MOVLB  0
4CBE:  CALL   1062
4CC2:  CLRF   16
4CC4:  BTFSC  FF2.7
4CC6:  BSF    16.7
4CC8:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4CCA:  MOVLW  01
4CCC:  MOVLB  1
4CCE:  MOVWF  x32
4CD0:  MOVLW  03
4CD2:  MOVWF  x33
4CD4:  MOVLB  0
4CD6:  CALL   020C
4CDA:  BTFSC  16.7
4CDC:  BSF    FF2.7
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
4CDE:  MOVLB  1
4CE0:  CLRF   x04
4CE2:  MOVLB  0
4CE4:  CALL   18E2
4CE8:  MOVFF  00,100
4CEC:  MOVFF  01,101
4CF0:  MOVFF  02,102
4CF4:  MOVFF  03,103
4CF8:  CLRF   16
4CFA:  BTFSC  FF2.7
4CFC:  BSF    16.7
4CFE:  BCF    FF2.7
4D00:  MOVLW  5A
4D02:  MOVLB  1
4D04:  MOVWF  x31
4D06:  MOVLB  0
4D08:  CALL   0286
4D0C:  BTFSC  16.7
4D0E:  BSF    FF2.7
4D10:  CLRF   16
4D12:  BTFSC  FF2.7
4D14:  BSF    16.7
4D16:  BCF    FF2.7
4D18:  MOVLW  46
4D1A:  MOVLB  1
4D1C:  MOVWF  x31
4D1E:  MOVLB  0
4D20:  CALL   0286
4D24:  BTFSC  16.7
4D26:  BSF    FF2.7
4D28:  CLRF   16
4D2A:  BTFSC  FF2.7
4D2C:  BSF    16.7
4D2E:  BCF    FF2.7
4D30:  MOVLW  3D
4D32:  MOVLB  1
4D34:  MOVWF  x31
4D36:  MOVLB  0
4D38:  CALL   0286
4D3C:  BTFSC  16.7
4D3E:  BSF    FF2.7
4D40:  MOVLW  01
4D42:  MOVWF  FE9
4D44:  MOVFF  4D,10B
4D48:  MOVFF  4C,10A
4D4C:  MOVFF  4B,109
4D50:  MOVFF  4A,108
4D54:  MOVLB  1
4D56:  CLRF   x0C
4D58:  MOVLB  0
4D5A:  CALL   164A
4D5E:  MOVLW  C0
4D60:  MOVWF  FF6
4D62:  MOVLW  09
4D64:  MOVWF  FF7
4D66:  MOVLW  05
4D68:  MOVLB  1
4D6A:  MOVWF  x08
4D6C:  MOVLB  0
4D6E:  CALL   1062
4D72:  MOVLW  01
4D74:  MOVWF  FE9
4D76:  MOVFF  103,10B
4D7A:  MOVFF  102,10A
4D7E:  MOVFF  101,109
4D82:  MOVFF  100,108
4D86:  MOVLB  1
4D88:  CLRF   x0C
4D8A:  MOVLB  0
4D8C:  CALL   164A
4D90:  CLRF   16
4D92:  BTFSC  FF2.7
4D94:  BSF    16.7
4D96:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
4D98:  MOVLW  01
4D9A:  MOVLB  1
4D9C:  MOVWF  x32
4D9E:  MOVLW  04
4DA0:  MOVWF  x33
4DA2:  MOVLB  0
4DA4:  CALL   020C
4DA8:  BTFSC  16.7
4DAA:  BSF    FF2.7
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
4DAC:  MOVLW  CC
4DAE:  MOVWF  FF6
4DB0:  MOVLW  09
4DB2:  MOVWF  FF7
4DB4:  MOVLW  0C
4DB6:  MOVLB  1
4DB8:  MOVWF  x08
4DBA:  MOVLB  0
4DBC:  CALL   1062
4DC0:  MOVLW  01
4DC2:  MOVWF  FE9
4DC4:  MOVFF  BE,10B
4DC8:  MOVFF  BD,10A
4DCC:  MOVFF  BC,109
4DD0:  MOVFF  BB,108
4DD4:  MOVLB  1
4DD6:  CLRF   x0C
4DD8:  MOVLB  0
4DDA:  CALL   164A
....................      
....................       if(RIGHT)// Si oprime derecha 
4DDE:  BSF    F93.0
4DE0:  BTFSS  F81.0
4DE2:  BRA    504C
....................       {  if(Flanco1 == 0)  
4DE4:  BTFSC  34.5
4DE6:  BRA    504A
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4DE8:  MOVLW  01
4DEA:  MOVWF  18
4DEC:  CLRF   36
4DEE:  MOVLW  02
4DF0:  MOVWF  1C
4DF2:  MOVWF  1E
4DF4:  MOVLW  0B
4DF6:  MOVWF  1B
4DF8:  CLRF   16
4DFA:  BTFSC  FF2.7
4DFC:  BSF    16.7
4DFE:  BCF    FF2.7
4E00:  MOVLW  1E
4E02:  MOVLB  1
4E04:  MOVWF  x32
4E06:  MOVLB  0
4E08:  CALL   00B6
4E0C:  BTFSC  16.7
4E0E:  BSF    FF2.7
4E10:  CLRF   16
4E12:  BTFSC  FF2.7
4E14:  BSF    16.7
4E16:  BCF    FF2.7
4E18:  MOVLW  0C
4E1A:  MOVLB  1
4E1C:  MOVWF  x31
4E1E:  MOVLB  0
4E20:  CALL   0286
4E24:  BTFSC  16.7
4E26:  BSF    FF2.7
....................             Diferencia=zero_fabrica-sensores(0); 
4E28:  MOVLB  1
4E2A:  CLRF   x04
4E2C:  MOVLB  0
4E2E:  CALL   18E2
4E32:  MOVFF  FEA,101
4E36:  MOVFF  FE9,100
4E3A:  BSF    FD8.1
4E3C:  MOVFF  4D,121
4E40:  MOVFF  4C,120
4E44:  MOVFF  4B,11F
4E48:  MOVFF  4A,11E
4E4C:  MOVFF  03,125
4E50:  MOVFF  02,124
4E54:  MOVFF  01,123
4E58:  MOVFF  00,122
4E5C:  CALL   0DEA
4E60:  MOVFF  101,FEA
4E64:  MOVFF  100,FE9
4E68:  MOVFF  03,BE
4E6C:  MOVFF  02,BD
4E70:  MOVFF  01,BC
4E74:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
4E78:  MOVLB  1
4E7A:  CLRF   x1D
4E7C:  CLRF   x1C
4E7E:  CLRF   x1B
4E80:  CLRF   x1A
4E82:  MOVFF  BE,121
4E86:  MOVFF  BD,120
4E8A:  MOVFF  BC,11F
4E8E:  MOVFF  BB,11E
4E92:  MOVLB  0
4E94:  CALL   182C
4E98:  BC    4E9C
4E9A:  BNZ   4ECA
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
4E9C:  MOVLW  0A
4E9E:  MOVWF  2C
4EA0:  MOVLW  32
4EA2:  MOVWF  FA9
4EA4:  MOVFF  2C,FA8
4EA8:  BCF    FA6.6
4EAA:  BCF    FA6.7
4EAC:  BSF    FA6.2
4EAE:  MOVF   FF2,W
4EB0:  MOVWF  00
4EB2:  BCF    FF2.7
4EB4:  MOVLB  F
4EB6:  MOVLW  55
4EB8:  MOVWF  FA7
4EBA:  MOVLW  AA
4EBC:  MOVWF  FA7
4EBE:  BSF    FA6.1
4EC0:  BTFSC  FA6.1
4EC2:  BRA    4EC0
4EC4:  BCF    FA6.2
4EC6:  MOVF   00,W
4EC8:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
4ECA:  MOVFF  BE,11D
4ECE:  MOVFF  BD,11C
4ED2:  MOVFF  BC,11B
4ED6:  MOVFF  BB,11A
4EDA:  MOVLB  1
4EDC:  CLRF   x21
4EDE:  CLRF   x20
4EE0:  CLRF   x1F
4EE2:  CLRF   x1E
4EE4:  MOVLB  0
4EE6:  CALL   182C
4EEA:  BNC   4F1C
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
4EEC:  MOVLW  14
4EEE:  MOVWF  2C
4EF0:  MOVLW  32
4EF2:  MOVWF  FA9
4EF4:  MOVFF  2C,FA8
4EF8:  BCF    FA6.6
4EFA:  BCF    FA6.7
4EFC:  BSF    FA6.2
4EFE:  MOVF   FF2,W
4F00:  MOVWF  00
4F02:  BCF    FF2.7
4F04:  MOVLB  F
4F06:  MOVLW  55
4F08:  MOVWF  FA7
4F0A:  MOVLW  AA
4F0C:  MOVWF  FA7
4F0E:  BSF    FA6.1
4F10:  BTFSC  FA6.1
4F12:  BRA    4F10
4F14:  BCF    FA6.2
4F16:  MOVF   00,W
4F18:  IORWF  FF2,F
4F1A:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
4F1C:  MOVFF  BB,00
4F20:  MOVFF  BC,01
4F24:  MOVFF  BD,02
4F28:  MOVFF  BE,03
4F2C:  BCF    01.7
4F2E:  MOVFF  BE,BE
4F32:  MOVFF  BD,BD
4F36:  MOVFF  01,BC
4F3A:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
4F3E:  MOVFF  BE,B6
4F42:  MOVFF  BD,B5
4F46:  MOVFF  BC,B4
4F4A:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
4F4E:  MOVFF  B6,102
4F52:  MOVFF  B5,101
4F56:  MOVFF  B4,100
4F5A:  MOVFF  B3,FF
4F5E:  CALL   18A6
4F62:  MOVFF  01,25
....................             Temporal1=Temporal1-Entero1; 
4F66:  MOVLB  1
4F68:  CLRF   x0A
4F6A:  MOVFF  25,109
4F6E:  MOVLB  0
4F70:  CALL   0C56
4F74:  BSF    FD8.1
4F76:  MOVFF  B6,121
4F7A:  MOVFF  B5,120
4F7E:  MOVFF  B4,11F
4F82:  MOVFF  B3,11E
4F86:  MOVFF  03,125
4F8A:  MOVFF  02,124
4F8E:  MOVFF  01,123
4F92:  MOVFF  00,122
4F96:  CALL   0DEA
4F9A:  MOVFF  03,B6
4F9E:  MOVFF  02,B5
4FA2:  MOVFF  01,B4
4FA6:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
4FAA:  MOVFF  B6,11D
4FAE:  MOVFF  B5,11C
4FB2:  MOVFF  B4,11B
4FB6:  MOVFF  B3,11A
4FBA:  MOVLB  1
4FBC:  CLRF   x21
4FBE:  CLRF   x20
4FC0:  MOVLW  48
4FC2:  MOVWF  x1F
4FC4:  MOVLW  85
4FC6:  MOVWF  x1E
4FC8:  MOVLB  0
4FCA:  CALL   1490
4FCE:  MOVFF  03,BA
4FD2:  MOVFF  02,B9
4FD6:  MOVFF  01,B8
4FDA:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
4FDE:  MOVFF  BA,102
4FE2:  MOVFF  B9,101
4FE6:  MOVFF  B8,100
4FEA:  MOVFF  B7,FF
4FEE:  CALL   18A6
4FF2:  MOVFF  01,26
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
4FF6:  MOVLW  3C
4FF8:  MOVWF  FA9
4FFA:  MOVFF  25,FA8
4FFE:  BCF    FA6.6
5000:  BCF    FA6.7
5002:  BSF    FA6.2
5004:  MOVF   FF2,W
5006:  MOVWF  00
5008:  BCF    FF2.7
500A:  MOVLB  F
500C:  MOVLW  55
500E:  MOVWF  FA7
5010:  MOVLW  AA
5012:  MOVWF  FA7
5014:  BSF    FA6.1
5016:  BTFSC  FA6.1
5018:  BRA    5016
501A:  BCF    FA6.2
501C:  MOVF   00,W
501E:  IORWF  FF2,F
5020:  MOVLW  3D
5022:  MOVWF  FA9
5024:  MOVFF  26,FA8
5028:  BCF    FA6.6
502A:  BCF    FA6.7
502C:  BSF    FA6.2
502E:  MOVF   FF2,W
5030:  MOVWF  00
5032:  BCF    FF2.7
5034:  MOVLW  55
5036:  MOVWF  FA7
5038:  MOVLW  AA
503A:  MOVWF  FA7
503C:  BSF    FA6.1
503E:  BTFSC  FA6.1
5040:  BRA    503E
5042:  BCF    FA6.2
5044:  MOVF   00,W
5046:  IORWF  FF2,F
5048:  MOVLB  0
....................             }} 
....................          else 
504A:  BRA    504E
....................             {Flanco1 = 0;}    
504C:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
504E:  BSF    F93.1
5050:  BTFSS  F81.1
5052:  BRA    509A
....................       {  if(Flanco3 == 0)  
5054:  BTFSC  34.7
5056:  BRA    5098
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
5058:  MOVLW  01
505A:  MOVWF  18
505C:  CLRF   36
505E:  MOVLW  02
5060:  MOVWF  1C
5062:  MOVWF  1E
5064:  MOVLW  0B
5066:  MOVWF  1B
5068:  CLRF   16
506A:  BTFSC  FF2.7
506C:  BSF    16.7
506E:  BCF    FF2.7
5070:  MOVLW  1E
5072:  MOVLB  1
5074:  MOVWF  x32
5076:  MOVLB  0
5078:  CALL   00B6
507C:  BTFSC  16.7
507E:  BSF    FF2.7
5080:  CLRF   16
5082:  BTFSC  FF2.7
5084:  BSF    16.7
5086:  BCF    FF2.7
5088:  MOVLW  0C
508A:  MOVLB  1
508C:  MOVWF  x31
508E:  MOVLB  0
5090:  CALL   0286
5094:  BTFSC  16.7
5096:  BSF    FF2.7
....................          else 
5098:  BRA    509C
....................             {Flanco3 = 0;}   
509A:  BCF    34.7
509C:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
509E:  MOVF   18,W
50A0:  SUBLW  08
50A2:  BTFSS  FD8.2
50A4:  BRA    56B2
50A6:  CLRF   16
50A8:  BTFSC  FF2.7
50AA:  BSF    16.7
50AC:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
50AE:  MOVLW  01
50B0:  MOVWF  x32
50B2:  MOVWF  x33
50B4:  MOVLB  0
50B6:  CALL   020C
50BA:  BTFSC  16.7
50BC:  BSF    FF2.7
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
50BE:  MOVLB  1
50C0:  CLRF   x04
50C2:  MOVLB  0
50C4:  CALL   18E2
50C8:  MOVFF  00,100
50CC:  MOVFF  01,101
50D0:  MOVFF  02,102
50D4:  MOVFF  03,103
50D8:  MOVLW  DE
50DA:  MOVWF  FF6
50DC:  MOVLW  09
50DE:  MOVWF  FF7
50E0:  MOVLW  0A
50E2:  MOVLB  1
50E4:  MOVWF  x08
50E6:  MOVLB  0
50E8:  CALL   1062
50EC:  MOVLW  01
50EE:  MOVWF  FE9
50F0:  MOVFF  103,10B
50F4:  MOVFF  102,10A
50F8:  MOVFF  101,109
50FC:  MOVFF  100,108
5100:  MOVLB  1
5102:  CLRF   x0C
5104:  MOVLB  0
5106:  CALL   164A
510A:  CLRF   16
510C:  BTFSC  FF2.7
510E:  BSF    16.7
5110:  BCF    FF2.7
5112:  MOVLW  20
5114:  MOVLB  1
5116:  MOVWF  x31
5118:  MOVLB  0
511A:  CALL   0286
511E:  BTFSC  16.7
5120:  BSF    FF2.7
5122:  CLRF   16
5124:  BTFSC  FF2.7
5126:  BSF    16.7
5128:  BCF    FF2.7
512A:  MOVLW  20
512C:  MOVLB  1
512E:  MOVWF  x31
5130:  MOVLB  0
5132:  CALL   0286
5136:  BTFSC  16.7
5138:  BSF    FF2.7
513A:  CLRF   16
513C:  BTFSC  FF2.7
513E:  BSF    16.7
5140:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
5142:  MOVLW  01
5144:  MOVLB  1
5146:  MOVWF  x32
5148:  MOVLW  02
514A:  MOVWF  x33
514C:  MOVLB  0
514E:  CALL   020C
5152:  BTFSC  16.7
5154:  BSF    FF2.7
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
5156:  MOVLB  1
5158:  CLRF   x0A
515A:  MOVFF  2A,109
515E:  MOVLB  0
5160:  CALL   0C56
5164:  MOVFF  00,100
5168:  MOVFF  01,101
516C:  MOVFF  02,102
5170:  MOVFF  03,103
5174:  MOVFF  03,121
5178:  MOVFF  02,120
517C:  MOVFF  01,11F
5180:  MOVFF  00,11E
5184:  MOVLB  1
5186:  CLRF   x25
5188:  CLRF   x24
518A:  MOVLW  7F
518C:  MOVWF  x23
518E:  MOVLW  86
5190:  MOVWF  x22
5192:  MOVLB  0
5194:  CALL   0C8C
5198:  MOVLB  1
519A:  CLRF   x1D
519C:  CLRF   x1C
519E:  MOVLW  48
51A0:  MOVWF  x1B
51A2:  MOVLW  85
51A4:  MOVWF  x1A
51A6:  MOVFF  03,121
51AA:  MOVFF  02,120
51AE:  MOVFF  01,11F
51B2:  MOVFF  00,11E
51B6:  MOVLB  0
51B8:  CALL   1490
51BC:  MOVFF  00,100
51C0:  MOVFF  01,101
51C4:  MOVFF  02,102
51C8:  MOVFF  03,103
51CC:  MOVLW  01
51CE:  MOVLB  1
51D0:  MOVWF  x04
51D2:  MOVLB  0
51D4:  CALL   18E2
51D8:  MOVFF  00,104
51DC:  MOVFF  01,105
51E0:  MOVFF  02,106
51E4:  MOVFF  03,107
51E8:  MOVLW  F0
51EA:  MOVWF  FF6
51EC:  MOVLW  09
51EE:  MOVWF  FF7
51F0:  MOVLW  05
51F2:  MOVLB  1
51F4:  MOVWF  x08
51F6:  MOVLB  0
51F8:  CALL   1062
51FC:  MOVLW  01
51FE:  MOVWF  FE9
5200:  MOVFF  103,10B
5204:  MOVFF  102,10A
5208:  MOVFF  101,109
520C:  MOVFF  100,108
5210:  MOVLB  1
5212:  CLRF   x0C
5214:  MOVLB  0
5216:  CALL   164A
521A:  CLRF   16
521C:  BTFSC  FF2.7
521E:  BSF    16.7
5220:  BCF    FF2.7
5222:  MOVLW  25
5224:  MOVLB  1
5226:  MOVWF  x31
5228:  MOVLB  0
522A:  CALL   0286
522E:  BTFSC  16.7
5230:  BSF    FF2.7
5232:  MOVLW  FC
5234:  MOVWF  FF6
5236:  MOVLW  09
5238:  MOVWF  FF7
523A:  MOVLW  04
523C:  MOVLB  1
523E:  MOVWF  x08
5240:  MOVLB  0
5242:  CALL   1062
5246:  MOVLW  01
5248:  MOVWF  FE9
524A:  MOVFF  107,10B
524E:  MOVFF  106,10A
5252:  MOVFF  105,109
5256:  MOVFF  104,108
525A:  MOVLB  1
525C:  CLRF   x0C
525E:  MOVLB  0
5260:  CALL   164A
5264:  CLRF   16
5266:  BTFSC  FF2.7
5268:  BSF    16.7
526A:  BCF    FF2.7
526C:  MOVLW  20
526E:  MOVLB  1
5270:  MOVWF  x31
5272:  MOVLB  0
5274:  CALL   0286
5278:  BTFSC  16.7
527A:  BSF    FF2.7
527C:  CLRF   16
527E:  BTFSC  FF2.7
5280:  BSF    16.7
5282:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
5284:  MOVLW  01
5286:  MOVLB  1
5288:  MOVWF  x32
528A:  MOVLW  03
528C:  MOVWF  x33
528E:  MOVLB  0
5290:  CALL   020C
5294:  BTFSC  16.7
5296:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
5298:  MOVLW  02
529A:  MOVLB  1
529C:  MOVWF  x04
529E:  MOVLB  0
52A0:  CALL   18E2
52A4:  MOVFF  00,100
52A8:  MOVFF  01,101
52AC:  MOVFF  02,102
52B0:  MOVFF  03,103
52B4:  MOVFF  03,121
52B8:  MOVFF  02,120
52BC:  MOVFF  01,11F
52C0:  MOVFF  00,11E
52C4:  MOVLB  1
52C6:  CLRF   x25
52C8:  MOVLW  C0
52CA:  MOVWF  x24
52CC:  MOVLW  7F
52CE:  MOVWF  x23
52D0:  MOVLW  88
52D2:  MOVWF  x22
52D4:  MOVLB  0
52D6:  CALL   0C8C
52DA:  MOVLB  1
52DC:  CLRF   x1D
52DE:  CLRF   x1C
52E0:  MOVLW  48
52E2:  MOVWF  x1B
52E4:  MOVLW  85
52E6:  MOVWF  x1A
52E8:  MOVFF  03,121
52EC:  MOVFF  02,120
52F0:  MOVFF  01,11F
52F4:  MOVFF  00,11E
52F8:  MOVLB  0
52FA:  CALL   1490
52FE:  MOVFF  00,100
5302:  MOVFF  01,101
5306:  MOVFF  02,102
530A:  MOVFF  03,103
530E:  MOVLW  08
5310:  MOVWF  FF6
5312:  MOVLW  0A
5314:  MOVWF  FF7
5316:  MOVLW  04
5318:  MOVLB  1
531A:  MOVWF  x08
531C:  MOVLB  0
531E:  CALL   1062
5322:  MOVLW  01
5324:  MOVWF  FE9
5326:  MOVFF  8E,10B
532A:  MOVFF  8D,10A
532E:  MOVFF  8C,109
5332:  MOVFF  8B,108
5336:  MOVLB  1
5338:  MOVWF  x0C
533A:  MOVLB  0
533C:  CALL   164A
5340:  MOVLW  11
5342:  MOVWF  FF6
5344:  MOVLW  0A
5346:  MOVWF  FF7
5348:  MOVLW  0A
534A:  MOVLB  1
534C:  MOVWF  x08
534E:  MOVLB  0
5350:  CALL   1062
5354:  MOVLW  01
5356:  MOVWF  FE9
5358:  MOVFF  103,10B
535C:  MOVFF  102,10A
5360:  MOVFF  101,109
5364:  MOVFF  100,108
5368:  MOVLB  1
536A:  CLRF   x0C
536C:  MOVLB  0
536E:  CALL   164A
5372:  CLRF   16
5374:  BTFSC  FF2.7
5376:  BSF    16.7
5378:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
537A:  MOVLW  01
537C:  MOVLB  1
537E:  MOVWF  x32
5380:  MOVLW  04
5382:  MOVWF  x33
5384:  MOVLB  0
5386:  CALL   020C
538A:  BTFSC  16.7
538C:  BSF    FF2.7
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
538E:  MOVLW  22
5390:  MOVWF  FF6
5392:  MOVLW  0A
5394:  MOVWF  FF7
5396:  MOVLW  09
5398:  MOVLB  1
539A:  MOVWF  x08
539C:  MOVLB  0
539E:  CALL   1062
53A2:  MOVLW  89
53A4:  MOVWF  FE9
53A6:  MOVFF  C2,10B
53AA:  MOVFF  C1,10A
53AE:  MOVFF  C0,109
53B2:  MOVFF  BF,108
53B6:  MOVLW  02
53B8:  MOVLB  1
53BA:  MOVWF  x0C
53BC:  MOVLB  0
53BE:  CALL   164A
53C2:  CLRF   16
53C4:  BTFSC  FF2.7
53C6:  BSF    16.7
53C8:  BCF    FF2.7
53CA:  MOVLW  20
53CC:  MOVLB  1
53CE:  MOVWF  x31
53D0:  MOVLB  0
53D2:  CALL   0286
53D6:  BTFSC  16.7
53D8:  BSF    FF2.7
....................        
....................       if(UP)//Si oprime hacia arriba 
53DA:  BSF    F93.3
53DC:  BTFSS  F81.3
53DE:  BRA    5464
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
53E0:  BCF    FD8.1
53E2:  MOVFF  C2,121
53E6:  MOVFF  C1,120
53EA:  MOVFF  C0,11F
53EE:  MOVFF  BF,11E
53F2:  MOVLW  0A
53F4:  MOVLB  1
53F6:  MOVWF  x25
53F8:  MOVLW  D7
53FA:  MOVWF  x24
53FC:  MOVLW  23
53FE:  MOVWF  x23
5400:  MOVLW  78
5402:  MOVWF  x22
5404:  MOVLB  0
5406:  CALL   0DEA
540A:  MOVFF  03,C2
540E:  MOVFF  02,C1
5412:  MOVFF  01,C0
5416:  MOVFF  00,BF
541A:  CLRF   16
541C:  BTFSC  FF2.7
541E:  BSF    16.7
5420:  BCF    FF2.7
5422:  MOVLW  32
5424:  MOVLB  1
5426:  MOVWF  x32
5428:  MOVLB  0
542A:  CALL   00B6
542E:  BTFSC  16.7
5430:  BSF    FF2.7
....................          if(Ajuste1>30.0) 
5432:  MOVLB  1
5434:  CLRF   x1D
5436:  CLRF   x1C
5438:  MOVLW  70
543A:  MOVWF  x1B
543C:  MOVLW  83
543E:  MOVWF  x1A
5440:  MOVFF  C2,121
5444:  MOVFF  C1,120
5448:  MOVFF  C0,11F
544C:  MOVFF  BF,11E
5450:  MOVLB  0
5452:  CALL   182C
5456:  BNC   5464
....................          {Ajuste1=30.0;} 
5458:  CLRF   xC2
545A:  CLRF   xC1
545C:  MOVLW  70
545E:  MOVWF  xC0
5460:  MOVLW  83
5462:  MOVWF  xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5464:  BSF    F93.2
5466:  BTFSS  F81.2
5468:  BRA    54E6
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
546A:  BSF    FD8.1
546C:  MOVFF  C2,121
5470:  MOVFF  C1,120
5474:  MOVFF  C0,11F
5478:  MOVFF  BF,11E
547C:  MOVLW  0A
547E:  MOVLB  1
5480:  MOVWF  x25
5482:  MOVLW  D7
5484:  MOVWF  x24
5486:  MOVLW  23
5488:  MOVWF  x23
548A:  MOVLW  78
548C:  MOVWF  x22
548E:  MOVLB  0
5490:  CALL   0DEA
5494:  MOVFF  03,C2
5498:  MOVFF  02,C1
549C:  MOVFF  01,C0
54A0:  MOVFF  00,BF
54A4:  CLRF   16
54A6:  BTFSC  FF2.7
54A8:  BSF    16.7
54AA:  BCF    FF2.7
54AC:  MOVLW  32
54AE:  MOVLB  1
54B0:  MOVWF  x32
54B2:  MOVLB  0
54B4:  CALL   00B6
54B8:  BTFSC  16.7
54BA:  BSF    FF2.7
....................          if(Ajuste1<0.0) 
54BC:  MOVFF  C2,11D
54C0:  MOVFF  C1,11C
54C4:  MOVFF  C0,11B
54C8:  MOVFF  BF,11A
54CC:  MOVLB  1
54CE:  CLRF   x21
54D0:  CLRF   x20
54D2:  CLRF   x1F
54D4:  CLRF   x1E
54D6:  MOVLB  0
54D8:  CALL   182C
54DC:  BNC   54E6
....................          {Ajuste1=0.0;} 
54DE:  CLRF   xC2
54E0:  CLRF   xC1
54E2:  CLRF   xC0
54E4:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
54E6:  BSF    F93.0
54E8:  BTFSS  F81.0
54EA:  BRA    5660
....................       {  if(Flanco1 == 0)  
54EC:  BTFSC  34.5
54EE:  BRA    565E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
54F0:  MOVLW  01
54F2:  MOVWF  18
54F4:  CLRF   36
54F6:  MOVLW  02
54F8:  MOVWF  1C
54FA:  MOVWF  1E
54FC:  MOVLW  0B
54FE:  MOVWF  1B
5500:  CLRF   16
5502:  BTFSC  FF2.7
5504:  BSF    16.7
5506:  BCF    FF2.7
5508:  MOVLW  1E
550A:  MOVLB  1
550C:  MOVWF  x32
550E:  MOVLB  0
5510:  CALL   00B6
5514:  BTFSC  16.7
5516:  BSF    FF2.7
5518:  CLRF   16
551A:  BTFSC  FF2.7
551C:  BSF    16.7
551E:  BCF    FF2.7
5520:  MOVLW  0C
5522:  MOVLB  1
5524:  MOVWF  x31
5526:  MOVLB  0
5528:  CALL   0286
552C:  BTFSC  16.7
552E:  BSF    FF2.7
....................             Temporal=Ajuste1; 
5530:  MOVFF  C2,AA
5534:  MOVFF  C1,A9
5538:  MOVFF  C0,A8
553C:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
5540:  MOVFF  C2,102
5544:  MOVFF  C1,101
5548:  MOVFF  C0,100
554C:  MOVFF  BF,FF
5550:  CALL   18A6
5554:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
5558:  MOVLB  1
555A:  CLRF   x0A
555C:  MOVFF  22,109
5560:  MOVLB  0
5562:  CALL   0C56
5566:  BSF    FD8.1
5568:  MOVFF  AA,121
556C:  MOVFF  A9,120
5570:  MOVFF  A8,11F
5574:  MOVFF  A7,11E
5578:  MOVFF  03,125
557C:  MOVFF  02,124
5580:  MOVFF  01,123
5584:  MOVFF  00,122
5588:  CALL   0DEA
558C:  MOVFF  03,AA
5590:  MOVFF  02,A9
5594:  MOVFF  01,A8
5598:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
559C:  MOVFF  AA,11D
55A0:  MOVFF  A9,11C
55A4:  MOVFF  A8,11B
55A8:  MOVFF  A7,11A
55AC:  MOVLB  1
55AE:  CLRF   x21
55B0:  CLRF   x20
55B2:  MOVLW  48
55B4:  MOVWF  x1F
55B6:  MOVLW  85
55B8:  MOVWF  x1E
55BA:  MOVLB  0
55BC:  CALL   1490
55C0:  MOVFF  03,AE
55C4:  MOVFF  02,AD
55C8:  MOVFF  01,AC
55CC:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
55D0:  MOVFF  AE,102
55D4:  MOVFF  AD,101
55D8:  MOVFF  AC,100
55DC:  MOVFF  AB,FF
55E0:  CALL   18A6
55E4:  MOVFF  01,23
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
55E8:  MOVLW  19
55EA:  MOVWF  FA9
55EC:  MOVFF  22,FA8
55F0:  BCF    FA6.6
55F2:  BCF    FA6.7
55F4:  BSF    FA6.2
55F6:  MOVF   FF2,W
55F8:  MOVWF  00
55FA:  BCF    FF2.7
55FC:  MOVLB  F
55FE:  MOVLW  55
5600:  MOVWF  FA7
5602:  MOVLW  AA
5604:  MOVWF  FA7
5606:  BSF    FA6.1
5608:  BTFSC  FA6.1
560A:  BRA    5608
560C:  BCF    FA6.2
560E:  MOVF   00,W
5610:  IORWF  FF2,F
5612:  MOVLW  1A
5614:  MOVWF  FA9
5616:  MOVFF  23,FA8
561A:  BCF    FA6.6
561C:  BCF    FA6.7
561E:  BSF    FA6.2
5620:  MOVF   FF2,W
5622:  MOVWF  00
5624:  BCF    FF2.7
5626:  MOVLW  55
5628:  MOVWF  FA7
562A:  MOVLW  AA
562C:  MOVWF  FA7
562E:  BSF    FA6.1
5630:  BTFSC  FA6.1
5632:  BRA    5630
5634:  BCF    FA6.2
5636:  MOVF   00,W
5638:  IORWF  FF2,F
....................             delay_ms(1000); 
563A:  MOVLW  04
563C:  MOVLB  1
563E:  MOVWF  x00
5640:  CLRF   16
5642:  BTFSC  FF2.7
5644:  BSF    16.7
5646:  BCF    FF2.7
5648:  MOVLW  FA
564A:  MOVWF  x32
564C:  MOVLB  0
564E:  CALL   00B6
5652:  BTFSC  16.7
5654:  BSF    FF2.7
5656:  MOVLB  1
5658:  DECFSZ x00,F
565A:  BRA    5640
565C:  MOVLB  0
....................             }} 
....................          else 
565E:  BRA    5662
....................             {Flanco1 = 0;}    
5660:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5662:  BSF    F93.1
5664:  BTFSS  F81.1
5666:  BRA    56AE
....................       {  if(Flanco3 == 0)  
5668:  BTFSC  34.7
566A:  BRA    56AC
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
566C:  MOVLW  01
566E:  MOVWF  18
5670:  CLRF   36
5672:  MOVLW  02
5674:  MOVWF  1C
5676:  MOVWF  1E
5678:  MOVLW  0B
567A:  MOVWF  1B
567C:  CLRF   16
567E:  BTFSC  FF2.7
5680:  BSF    16.7
5682:  BCF    FF2.7
5684:  MOVLW  1E
5686:  MOVLB  1
5688:  MOVWF  x32
568A:  MOVLB  0
568C:  CALL   00B6
5690:  BTFSC  16.7
5692:  BSF    FF2.7
5694:  CLRF   16
5696:  BTFSC  FF2.7
5698:  BSF    16.7
569A:  BCF    FF2.7
569C:  MOVLW  0C
569E:  MOVLB  1
56A0:  MOVWF  x31
56A2:  MOVLB  0
56A4:  CALL   0286
56A8:  BTFSC  16.7
56AA:  BSF    FF2.7
....................          else 
56AC:  BRA    56B0
....................             {Flanco3 = 0;}   
56AE:  BCF    34.7
56B0:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
56B2:  MOVF   18,W
56B4:  SUBLW  09
56B6:  BTFSS  FD8.2
56B8:  GOTO   5E98
56BC:  CLRF   16
56BE:  BTFSC  FF2.7
56C0:  BSF    16.7
56C2:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
56C4:  MOVLW  01
56C6:  MOVWF  x32
56C8:  MOVWF  x33
56CA:  MOVLB  0
56CC:  CALL   020C
56D0:  BTFSC  16.7
56D2:  BSF    FF2.7
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
56D4:  MOVLB  1
56D6:  CLRF   x0A
56D8:  MOVFF  2A,109
56DC:  MOVLB  0
56DE:  CALL   0C56
56E2:  MOVFF  00,100
56E6:  MOVFF  01,101
56EA:  MOVFF  02,102
56EE:  MOVFF  03,103
56F2:  MOVFF  03,121
56F6:  MOVFF  02,120
56FA:  MOVFF  01,11F
56FE:  MOVFF  00,11E
5702:  MOVLB  1
5704:  CLRF   x25
5706:  CLRF   x24
5708:  MOVLW  7F
570A:  MOVWF  x23
570C:  MOVLW  86
570E:  MOVWF  x22
5710:  MOVLB  0
5712:  CALL   0C8C
5716:  MOVLB  1
5718:  CLRF   x1D
571A:  CLRF   x1C
571C:  MOVLW  48
571E:  MOVWF  x1B
5720:  MOVLW  85
5722:  MOVWF  x1A
5724:  MOVFF  03,121
5728:  MOVFF  02,120
572C:  MOVFF  01,11F
5730:  MOVFF  00,11E
5734:  MOVLB  0
5736:  CALL   1490
573A:  MOVFF  00,100
573E:  MOVFF  01,101
5742:  MOVFF  02,102
5746:  MOVFF  03,103
574A:  MOVLW  32
574C:  MOVWF  FF6
574E:  MOVLW  0A
5750:  MOVWF  FF7
5752:  MOVLW  0D
5754:  MOVLB  1
5756:  MOVWF  x08
5758:  MOVLB  0
575A:  CALL   1062
575E:  MOVLW  01
5760:  MOVWF  FE9
5762:  MOVFF  103,10B
5766:  MOVFF  102,10A
576A:  MOVFF  101,109
576E:  MOVFF  100,108
5772:  MOVLB  1
5774:  CLRF   x0C
5776:  MOVLB  0
5778:  CALL   164A
577C:  CLRF   16
577E:  BTFSC  FF2.7
5780:  BSF    16.7
5782:  BCF    FF2.7
5784:  MOVLW  25
5786:  MOVLB  1
5788:  MOVWF  x31
578A:  MOVLB  0
578C:  CALL   0286
5790:  BTFSC  16.7
5792:  BSF    FF2.7
5794:  CLRF   16
5796:  BTFSC  FF2.7
5798:  BSF    16.7
579A:  BCF    FF2.7
579C:  MOVLW  20
579E:  MOVLB  1
57A0:  MOVWF  x31
57A2:  MOVLB  0
57A4:  CALL   0286
57A8:  BTFSC  16.7
57AA:  BSF    FF2.7
57AC:  CLRF   16
57AE:  BTFSC  FF2.7
57B0:  BSF    16.7
57B2:  BCF    FF2.7
....................  
....................    lcd_gotoxy(1,4); 
57B4:  MOVLW  01
57B6:  MOVLB  1
57B8:  MOVWF  x32
57BA:  MOVLW  04
57BC:  MOVWF  x33
57BE:  MOVLB  0
57C0:  CALL   020C
57C4:  BTFSC  16.7
57C6:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
57C8:  MOVLW  02
57CA:  MOVLB  1
57CC:  MOVWF  x04
57CE:  MOVLB  0
57D0:  CALL   18E2
57D4:  MOVFF  00,100
57D8:  MOVFF  01,101
57DC:  MOVFF  02,102
57E0:  MOVFF  03,103
57E4:  MOVFF  03,121
57E8:  MOVFF  02,120
57EC:  MOVFF  01,11F
57F0:  MOVFF  00,11E
57F4:  MOVLB  1
57F6:  CLRF   x25
57F8:  MOVLW  C0
57FA:  MOVWF  x24
57FC:  MOVLW  7F
57FE:  MOVWF  x23
5800:  MOVLW  88
5802:  MOVWF  x22
5804:  MOVLB  0
5806:  CALL   0C8C
580A:  MOVLB  1
580C:  CLRF   x1D
580E:  CLRF   x1C
5810:  MOVLW  48
5812:  MOVWF  x1B
5814:  MOVLW  85
5816:  MOVWF  x1A
5818:  MOVFF  03,121
581C:  MOVFF  02,120
5820:  MOVFF  01,11F
5824:  MOVFF  00,11E
5828:  MOVLB  0
582A:  CALL   1490
582E:  MOVFF  00,100
5832:  MOVFF  01,101
5836:  MOVFF  02,102
583A:  MOVFF  03,103
583E:  MOVLW  48
5840:  MOVWF  FF6
5842:  MOVLW  0A
5844:  MOVWF  FF7
5846:  MOVLW  04
5848:  MOVLB  1
584A:  MOVWF  x08
584C:  MOVLB  0
584E:  CALL   1062
5852:  MOVLW  01
5854:  MOVWF  FE9
5856:  MOVFF  8E,10B
585A:  MOVFF  8D,10A
585E:  MOVFF  8C,109
5862:  MOVFF  8B,108
5866:  MOVLB  1
5868:  MOVWF  x0C
586A:  MOVLB  0
586C:  CALL   164A
5870:  MOVLW  51
5872:  MOVWF  FF6
5874:  MOVLW  0A
5876:  MOVWF  FF7
5878:  MOVLW  0A
587A:  MOVLB  1
587C:  MOVWF  x08
587E:  MOVLB  0
5880:  CALL   1062
5884:  MOVLW  01
5886:  MOVWF  FE9
5888:  MOVFF  103,10B
588C:  MOVFF  102,10A
5890:  MOVFF  101,109
5894:  MOVFF  100,108
5898:  MOVLB  1
589A:  CLRF   x0C
589C:  MOVLB  0
589E:  CALL   164A
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
58A2:  BTFSC  4E.1
58A4:  BRA    5AAC
58A6:  BTFSC  4E.2
58A8:  BRA    5AAC
58AA:  BTFSC  4E.3
58AC:  BRA    5AAC
....................       { 
....................          if(UP)//Si oprime hacia arriba 
58AE:  BSF    F93.3
58B0:  BTFSS  F81.3
58B2:  BRA    593E
....................          { 
....................             delay_ms(500); 
58B4:  MOVLW  02
58B6:  MOVLB  1
58B8:  MOVWF  x00
58BA:  CLRF   16
58BC:  BTFSC  FF2.7
58BE:  BSF    16.7
58C0:  BCF    FF2.7
58C2:  MOVLW  FA
58C4:  MOVWF  x32
58C6:  MOVLB  0
58C8:  CALL   00B6
58CC:  BTFSC  16.7
58CE:  BSF    FF2.7
58D0:  MOVLB  1
58D2:  DECFSZ x00,F
58D4:  BRA    58BA
....................             if(UP) 
58D6:  BSF    F93.3
58D8:  BTFSS  F81.3
58DA:  BRA    593C
58DC:  CLRF   16
58DE:  BTFSC  FF2.7
58E0:  BSF    16.7
58E2:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
58E4:  MOVLW  01
58E6:  MOVWF  x32
58E8:  MOVLW  02
58EA:  MOVWF  x33
58EC:  MOVLB  0
58EE:  CALL   020C
58F2:  BTFSC  16.7
58F4:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Manual  "); 
58F6:  MOVLW  62
58F8:  MOVWF  FF6
58FA:  MOVLW  0A
58FC:  MOVWF  FF7
58FE:  CLRF   16
5900:  BTFSC  FF2.7
5902:  BSF    16.7
5904:  BCF    FF2.7
5906:  CALL   02F2
590A:  BTFSC  16.7
590C:  BSF    FF2.7
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
590E:  BSF    4E.1
5910:  BCF    4E.2
5912:  BCF    4E.3
5914:  MOVLW  0A
5916:  MOVWF  2D
5918:  MOVWF  2F
....................                delay_ms(1000); 
591A:  MOVLW  04
591C:  MOVLB  1
591E:  MOVWF  x00
5920:  CLRF   16
5922:  BTFSC  FF2.7
5924:  BSF    16.7
5926:  BCF    FF2.7
5928:  MOVLW  FA
592A:  MOVWF  x32
592C:  MOVLB  0
592E:  CALL   00B6
5932:  BTFSC  16.7
5934:  BSF    FF2.7
5936:  MOVLB  1
5938:  DECFSZ x00,F
593A:  BRA    5920
593C:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
593E:  BSF    F93.2
5940:  BTFSS  F81.2
5942:  BRA    59CE
....................          { 
....................             delay_ms(500); 
5944:  MOVLW  02
5946:  MOVLB  1
5948:  MOVWF  x00
594A:  CLRF   16
594C:  BTFSC  FF2.7
594E:  BSF    16.7
5950:  BCF    FF2.7
5952:  MOVLW  FA
5954:  MOVWF  x32
5956:  MOVLB  0
5958:  CALL   00B6
595C:  BTFSC  16.7
595E:  BSF    FF2.7
5960:  MOVLB  1
5962:  DECFSZ x00,F
5964:  BRA    594A
....................             if(DOWN) 
5966:  BSF    F93.2
5968:  BTFSS  F81.2
596A:  BRA    59CC
596C:  CLRF   16
596E:  BTFSC  FF2.7
5970:  BSF    16.7
5972:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5974:  MOVLW  01
5976:  MOVWF  x32
5978:  MOVLW  02
597A:  MOVWF  x33
597C:  MOVLB  0
597E:  CALL   020C
5982:  BTFSC  16.7
5984:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Auto   "); 
5986:  MOVLW  74
5988:  MOVWF  FF6
598A:  MOVLW  0A
598C:  MOVWF  FF7
598E:  CLRF   16
5990:  BTFSC  FF2.7
5992:  BSF    16.7
5994:  BCF    FF2.7
5996:  CALL   02F2
599A:  BTFSC  16.7
599C:  BSF    FF2.7
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
599E:  BSF    4E.2
59A0:  BCF    4E.1
59A2:  BCF    4E.3
59A4:  MOVLW  0A
59A6:  MOVWF  2E
59A8:  MOVWF  2F
....................                delay_ms(1000); 
59AA:  MOVLW  04
59AC:  MOVLB  1
59AE:  MOVWF  x00
59B0:  CLRF   16
59B2:  BTFSC  FF2.7
59B4:  BSF    16.7
59B6:  BCF    FF2.7
59B8:  MOVLW  FA
59BA:  MOVWF  x32
59BC:  MOVLB  0
59BE:  CALL   00B6
59C2:  BTFSC  16.7
59C4:  BSF    FF2.7
59C6:  MOVLB  1
59C8:  DECFSZ x00,F
59CA:  BRA    59B0
59CC:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
59CE:  BSF    F93.0
59D0:  BTFSS  F81.0
59D2:  BRA    5A5E
....................          { 
....................             delay_ms(500); 
59D4:  MOVLW  02
59D6:  MOVLB  1
59D8:  MOVWF  x00
59DA:  CLRF   16
59DC:  BTFSC  FF2.7
59DE:  BSF    16.7
59E0:  BCF    FF2.7
59E2:  MOVLW  FA
59E4:  MOVWF  x32
59E6:  MOVLB  0
59E8:  CALL   00B6
59EC:  BTFSC  16.7
59EE:  BSF    FF2.7
59F0:  MOVLB  1
59F2:  DECFSZ x00,F
59F4:  BRA    59DA
....................             if(RIGHT) 
59F6:  BSF    F93.0
59F8:  BTFSS  F81.0
59FA:  BRA    5A5C
59FC:  CLRF   16
59FE:  BTFSC  FF2.7
5A00:  BSF    16.7
5A02:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5A04:  MOVLW  01
5A06:  MOVWF  x32
5A08:  MOVLW  02
5A0A:  MOVWF  x33
5A0C:  MOVLB  0
5A0E:  CALL   020C
5A12:  BTFSC  16.7
5A14:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Semi   "); 
5A16:  MOVLW  84
5A18:  MOVWF  FF6
5A1A:  MOVLW  0A
5A1C:  MOVWF  FF7
5A1E:  CLRF   16
5A20:  BTFSC  FF2.7
5A22:  BSF    16.7
5A24:  BCF    FF2.7
5A26:  CALL   02F2
5A2A:  BTFSC  16.7
5A2C:  BSF    FF2.7
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
5A2E:  BSF    4E.3
5A30:  BCF    4E.1
5A32:  BCF    4E.2
5A34:  MOVLW  0A
5A36:  MOVWF  2D
5A38:  MOVWF  2E
....................                delay_ms(1000); 
5A3A:  MOVLW  04
5A3C:  MOVLB  1
5A3E:  MOVWF  x00
5A40:  CLRF   16
5A42:  BTFSC  FF2.7
5A44:  BSF    16.7
5A46:  BCF    FF2.7
5A48:  MOVLW  FA
5A4A:  MOVWF  x32
5A4C:  MOVLB  0
5A4E:  CALL   00B6
5A52:  BTFSC  16.7
5A54:  BSF    FF2.7
5A56:  MOVLB  1
5A58:  DECFSZ x00,F
5A5A:  BRA    5A40
5A5C:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
5A5E:  BSF    F93.1
5A60:  BTFSS  F81.1
5A62:  BRA    5AAC
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
5A64:  MOVLW  01
5A66:  MOVWF  18
5A68:  CLRF   36
5A6A:  MOVLW  02
5A6C:  MOVWF  1C
5A6E:  MOVWF  1E
5A70:  MOVLW  0B
5A72:  MOVWF  1B
5A74:  MOVLW  02
5A76:  MOVLB  1
5A78:  MOVWF  x00
5A7A:  CLRF   16
5A7C:  BTFSC  FF2.7
5A7E:  BSF    16.7
5A80:  BCF    FF2.7
5A82:  MOVLW  FA
5A84:  MOVWF  x32
5A86:  MOVLB  0
5A88:  CALL   00B6
5A8C:  BTFSC  16.7
5A8E:  BSF    FF2.7
5A90:  MOVLB  1
5A92:  DECFSZ x00,F
5A94:  BRA    5A7A
5A96:  CLRF   16
5A98:  BTFSC  FF2.7
5A9A:  BSF    16.7
5A9C:  BCF    FF2.7
5A9E:  MOVLW  0C
5AA0:  MOVWF  x31
5AA2:  MOVLB  0
5AA4:  CALL   0286
5AA8:  BTFSC  16.7
5AAA:  BSF    FF2.7
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
5AAC:  BTFSC  4E.1
5AAE:  BRA    5AB8
5AB0:  MOVF   2E,W
5AB2:  SUBLW  14
5AB4:  BTFSS  FD8.2
5AB6:  BRA    5C24
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
5AB8:  BCF    4E.2
5ABA:  BCF    4E.3
5ABC:  MOVLW  0A
5ABE:  MOVWF  2D
5AC0:  MOVWF  2F
5AC2:  CLRF   16
5AC4:  BTFSC  FF2.7
5AC6:  BSF    16.7
5AC8:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5ACA:  MOVLW  01
5ACC:  MOVLB  1
5ACE:  MOVWF  x32
5AD0:  MOVLW  02
5AD2:  MOVWF  x33
5AD4:  MOVLB  0
5AD6:  CALL   020C
5ADA:  BTFSC  16.7
5ADC:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Manual  "); 
5ADE:  MOVLW  94
5AE0:  MOVWF  FF6
5AE2:  MOVLW  0A
5AE4:  MOVWF  FF7
5AE6:  CLRF   16
5AE8:  BTFSC  FF2.7
5AEA:  BSF    16.7
5AEC:  BCF    FF2.7
5AEE:  CALL   02F2
5AF2:  BTFSC  16.7
5AF4:  BSF    FF2.7
5AF6:  CLRF   16
5AF8:  BTFSC  FF2.7
5AFA:  BSF    16.7
5AFC:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5AFE:  MOVLW  01
5B00:  MOVLB  1
5B02:  MOVWF  x32
5B04:  MOVLW  03
5B06:  MOVWF  x33
5B08:  MOVLB  0
5B0A:  CALL   020C
5B0E:  BTFSC  16.7
5B10:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
5B12:  MOVLW  A6
5B14:  MOVWF  FF6
5B16:  MOVLW  0A
5B18:  MOVWF  FF7
5B1A:  CLRF   16
5B1C:  BTFSC  FF2.7
5B1E:  BSF    16.7
5B20:  BCF    FF2.7
5B22:  CALL   02F2
5B26:  BTFSC  16.7
5B28:  BSF    FF2.7
....................          if(LEFT) 
5B2A:  BSF    F93.1
5B2C:  BTFSS  F81.1
5B2E:  BRA    5C24
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(251);tmp=251;  
5B30:  BCF    4E.1
5B32:  MOVLW  14
5B34:  MOVWF  2E
5B36:  MOVLW  0A
5B38:  MOVWF  2D
5B3A:  MOVWF  2F
5B3C:  MOVLW  02
5B3E:  MOVLB  1
5B40:  MOVWF  x00
5B42:  CLRF   16
5B44:  BTFSC  FF2.7
5B46:  BSF    16.7
5B48:  BCF    FF2.7
5B4A:  MOVLW  FA
5B4C:  MOVWF  x32
5B4E:  MOVLB  0
5B50:  CALL   00B6
5B54:  BTFSC  16.7
5B56:  BSF    FF2.7
5B58:  MOVLB  1
5B5A:  DECFSZ x00,F
5B5C:  BRA    5B42
5B5E:  CLRF   16
5B60:  BTFSC  FF2.7
5B62:  BSF    16.7
5B64:  BCF    FF2.7
5B66:  MOVLW  0C
5B68:  MOVWF  x31
5B6A:  MOVLB  0
5B6C:  CALL   0286
5B70:  BTFSC  16.7
5B72:  BSF    FF2.7
5B74:  MOVLW  FB
5B76:  MOVWF  xFF
5B78:  CALL   1946
5B7C:  MOVLW  FB
5B7E:  MOVWF  2A
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
5B80:  MOVLW  0A
5B82:  MOVWF  FA9
5B84:  MOVFF  2E,FA8
5B88:  BCF    FA6.6
5B8A:  BCF    FA6.7
5B8C:  BSF    FA6.2
5B8E:  MOVF   FF2,W
5B90:  MOVWF  00
5B92:  BCF    FF2.7
5B94:  MOVLB  F
5B96:  MOVLW  55
5B98:  MOVWF  FA7
5B9A:  MOVLW  AA
5B9C:  MOVWF  FA7
5B9E:  BSF    FA6.1
5BA0:  BTFSC  FA6.1
5BA2:  BRA    5BA0
5BA4:  BCF    FA6.2
5BA6:  MOVF   00,W
5BA8:  IORWF  FF2,F
5BAA:  MOVLW  0C
5BAC:  MOVWF  FA9
5BAE:  MOVFF  2F,FA8
5BB2:  BCF    FA6.6
5BB4:  BCF    FA6.7
5BB6:  BSF    FA6.2
5BB8:  MOVF   FF2,W
5BBA:  MOVWF  00
5BBC:  BCF    FF2.7
5BBE:  MOVLW  55
5BC0:  MOVWF  FA7
5BC2:  MOVLW  AA
5BC4:  MOVWF  FA7
5BC6:  BSF    FA6.1
5BC8:  BTFSC  FA6.1
5BCA:  BRA    5BC8
5BCC:  BCF    FA6.2
5BCE:  MOVF   00,W
5BD0:  IORWF  FF2,F
5BD2:  MOVLW  0B
5BD4:  MOVWF  FA9
5BD6:  MOVFF  2D,FA8
5BDA:  BCF    FA6.6
5BDC:  BCF    FA6.7
5BDE:  BSF    FA6.2
5BE0:  MOVF   FF2,W
5BE2:  MOVWF  00
5BE4:  BCF    FF2.7
5BE6:  MOVLW  55
5BE8:  MOVWF  FA7
5BEA:  MOVLW  AA
5BEC:  MOVWF  FA7
5BEE:  BSF    FA6.1
5BF0:  BTFSC  FA6.1
5BF2:  BRA    5BF0
5BF4:  BCF    FA6.2
5BF6:  MOVF   00,W
5BF8:  IORWF  FF2,F
5BFA:  MOVLW  0D
5BFC:  MOVWF  FA9
5BFE:  MOVFF  2A,FA8
5C02:  BCF    FA6.6
5C04:  BCF    FA6.7
5C06:  BSF    FA6.2
5C08:  MOVF   FF2,W
5C0A:  MOVWF  00
5C0C:  BCF    FF2.7
5C0E:  MOVLW  55
5C10:  MOVWF  FA7
5C12:  MOVLW  AA
5C14:  MOVWF  FA7
5C16:  BSF    FA6.1
5C18:  BTFSC  FA6.1
5C1A:  BRA    5C18
5C1C:  BCF    FA6.2
5C1E:  MOVF   00,W
5C20:  IORWF  FF2,F
5C22:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
5C24:  BTFSC  4E.2
5C26:  BRA    5C30
5C28:  MOVF   2D,W
5C2A:  SUBLW  14
5C2C:  BTFSS  FD8.2
5C2E:  BRA    5D40
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
5C30:  BCF    4E.1
5C32:  BCF    4E.3
5C34:  MOVLW  0A
5C36:  MOVWF  2F
5C38:  MOVWF  2E
5C3A:  CLRF   16
5C3C:  BTFSC  FF2.7
5C3E:  BSF    16.7
5C40:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5C42:  MOVLW  01
5C44:  MOVLB  1
5C46:  MOVWF  x32
5C48:  MOVLW  02
5C4A:  MOVWF  x33
5C4C:  MOVLB  0
5C4E:  CALL   020C
5C52:  BTFSC  16.7
5C54:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Auto   "); 
5C56:  MOVLW  BC
5C58:  MOVWF  FF6
5C5A:  MOVLW  0A
5C5C:  MOVWF  FF7
5C5E:  CLRF   16
5C60:  BTFSC  FF2.7
5C62:  BSF    16.7
5C64:  BCF    FF2.7
5C66:  CALL   02F2
5C6A:  BTFSC  16.7
5C6C:  BSF    FF2.7
5C6E:  CLRF   16
5C70:  BTFSC  FF2.7
5C72:  BSF    16.7
5C74:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5C76:  MOVLW  01
5C78:  MOVLB  1
5C7A:  MOVWF  x32
5C7C:  MOVLW  03
5C7E:  MOVWF  x33
5C80:  MOVLB  0
5C82:  CALL   020C
5C86:  BTFSC  16.7
5C88:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
5C8A:  MOVLW  CC
5C8C:  MOVWF  FF6
5C8E:  MOVLW  0A
5C90:  MOVWF  FF7
5C92:  CLRF   16
5C94:  BTFSC  FF2.7
5C96:  BSF    16.7
5C98:  BCF    FF2.7
5C9A:  CALL   02F2
5C9E:  BTFSC  16.7
5CA0:  BSF    FF2.7
....................          if(LEFT) 
5CA2:  BSF    F93.1
5CA4:  BTFSS  F81.1
5CA6:  BRA    5D40
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5CA8:  BCF    4E.2
5CAA:  MOVLW  14
5CAC:  MOVWF  2D
5CAE:  MOVLW  0A
5CB0:  MOVWF  2F
5CB2:  MOVWF  2E
5CB4:  MOVLW  02
5CB6:  MOVLB  1
5CB8:  MOVWF  x00
5CBA:  CLRF   16
5CBC:  BTFSC  FF2.7
5CBE:  BSF    16.7
5CC0:  BCF    FF2.7
5CC2:  MOVLW  FA
5CC4:  MOVWF  x32
5CC6:  MOVLB  0
5CC8:  CALL   00B6
5CCC:  BTFSC  16.7
5CCE:  BSF    FF2.7
5CD0:  MOVLB  1
5CD2:  DECFSZ x00,F
5CD4:  BRA    5CBA
5CD6:  CLRF   16
5CD8:  BTFSC  FF2.7
5CDA:  BSF    16.7
5CDC:  BCF    FF2.7
5CDE:  MOVLW  0C
5CE0:  MOVWF  x31
5CE2:  MOVLB  0
5CE4:  CALL   0286
5CE8:  BTFSC  16.7
5CEA:  BSF    FF2.7
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
5CEC:  MOVLW  0B
5CEE:  MOVWF  FA9
5CF0:  MOVFF  2D,FA8
5CF4:  BCF    FA6.6
5CF6:  BCF    FA6.7
5CF8:  BSF    FA6.2
5CFA:  MOVF   FF2,W
5CFC:  MOVWF  00
5CFE:  BCF    FF2.7
5D00:  MOVLB  F
5D02:  MOVLW  55
5D04:  MOVWF  FA7
5D06:  MOVLW  AA
5D08:  MOVWF  FA7
5D0A:  BSF    FA6.1
5D0C:  BTFSC  FA6.1
5D0E:  BRA    5D0C
5D10:  BCF    FA6.2
5D12:  MOVF   00,W
5D14:  IORWF  FF2,F
5D16:  MOVLW  0C
5D18:  MOVWF  FA9
5D1A:  MOVFF  2F,FA8
5D1E:  BCF    FA6.6
5D20:  BCF    FA6.7
5D22:  BSF    FA6.2
5D24:  MOVF   FF2,W
5D26:  MOVWF  00
5D28:  BCF    FF2.7
5D2A:  MOVLW  55
5D2C:  MOVWF  FA7
5D2E:  MOVLW  AA
5D30:  MOVWF  FA7
5D32:  BSF    FA6.1
5D34:  BTFSC  FA6.1
5D36:  BRA    5D34
5D38:  BCF    FA6.2
5D3A:  MOVF   00,W
5D3C:  IORWF  FF2,F
5D3E:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
5D40:  BTFSC  4E.3
5D42:  BRA    5D4C
5D44:  MOVF   2F,W
5D46:  SUBLW  14
5D48:  BTFSS  FD8.2
5D4A:  BRA    5E96
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
5D4C:  BCF    4E.1
5D4E:  BCF    4E.2
5D50:  MOVLW  0A
5D52:  MOVWF  2D
5D54:  MOVWF  2E
5D56:  CLRF   16
5D58:  BTFSC  FF2.7
5D5A:  BSF    16.7
5D5C:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5D5E:  MOVLW  01
5D60:  MOVLB  1
5D62:  MOVWF  x32
5D64:  MOVLW  02
5D66:  MOVWF  x33
5D68:  MOVLB  0
5D6A:  CALL   020C
5D6E:  BTFSC  16.7
5D70:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Semi   "); 
5D72:  MOVLW  E2
5D74:  MOVWF  FF6
5D76:  MOVLW  0A
5D78:  MOVWF  FF7
5D7A:  CLRF   16
5D7C:  BTFSC  FF2.7
5D7E:  BSF    16.7
5D80:  BCF    FF2.7
5D82:  CALL   02F2
5D86:  BTFSC  16.7
5D88:  BSF    FF2.7
....................          if(UP) 
5D8A:  BSF    F93.3
5D8C:  BTFSS  F81.3
5D8E:  BRA    5D92
....................          { 
....................             tmp++; 
5D90:  INCF   2A,F
....................              
....................          } 
....................           
....................          if(DOWN) 
5D92:  BSF    F93.2
5D94:  BTFSS  F81.2
5D96:  BRA    5D9A
....................          { 
....................             tmp--; 
5D98:  DECF   2A,F
....................          } 
....................          ValorSemi=tmp; 
5D9A:  MOVFF  2A,30
....................          ajustar_damper(tmp); 
5D9E:  MOVFF  2A,FF
5DA2:  CALL   1946
....................          if(LEFT) 
5DA6:  BSF    F93.1
5DA8:  BTFSS  F81.1
5DAA:  BRA    5E96
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5DAC:  MOVLW  0D
5DAE:  MOVWF  FA9
5DB0:  MOVFF  2A,FA8
5DB4:  BCF    FA6.6
5DB6:  BCF    FA6.7
5DB8:  BSF    FA6.2
5DBA:  MOVF   FF2,W
5DBC:  MOVWF  00
5DBE:  BCF    FF2.7
5DC0:  MOVLB  F
5DC2:  MOVLW  55
5DC4:  MOVWF  FA7
5DC6:  MOVLW  AA
5DC8:  MOVWF  FA7
5DCA:  BSF    FA6.1
5DCC:  BTFSC  FA6.1
5DCE:  BRA    5DCC
5DD0:  BCF    FA6.2
5DD2:  MOVF   00,W
5DD4:  IORWF  FF2,F
5DD6:  BCF    4E.3
5DD8:  MOVLW  14
5DDA:  MOVWF  2F
5DDC:  MOVLW  0A
5DDE:  MOVWF  2D
5DE0:  MOVWF  2E
5DE2:  MOVLW  02
5DE4:  MOVLB  1
5DE6:  MOVWF  x00
5DE8:  CLRF   16
5DEA:  BTFSC  FF2.7
5DEC:  BSF    16.7
5DEE:  BCF    FF2.7
5DF0:  MOVLW  FA
5DF2:  MOVWF  x32
5DF4:  MOVLB  0
5DF6:  CALL   00B6
5DFA:  BTFSC  16.7
5DFC:  BSF    FF2.7
5DFE:  MOVLB  1
5E00:  DECFSZ x00,F
5E02:  BRA    5DE8
5E04:  CLRF   16
5E06:  BTFSC  FF2.7
5E08:  BSF    16.7
5E0A:  BCF    FF2.7
5E0C:  MOVLW  0C
5E0E:  MOVWF  x31
5E10:  MOVLB  0
5E12:  CALL   0286
5E16:  BTFSC  16.7
5E18:  BSF    FF2.7
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
5E1A:  MOVLW  0C
5E1C:  MOVWF  FA9
5E1E:  MOVFF  2F,FA8
5E22:  BCF    FA6.6
5E24:  BCF    FA6.7
5E26:  BSF    FA6.2
5E28:  MOVF   FF2,W
5E2A:  MOVWF  00
5E2C:  BCF    FF2.7
5E2E:  MOVLB  F
5E30:  MOVLW  55
5E32:  MOVWF  FA7
5E34:  MOVLW  AA
5E36:  MOVWF  FA7
5E38:  BSF    FA6.1
5E3A:  BTFSC  FA6.1
5E3C:  BRA    5E3A
5E3E:  BCF    FA6.2
5E40:  MOVF   00,W
5E42:  IORWF  FF2,F
5E44:  MOVLW  0B
5E46:  MOVWF  FA9
5E48:  MOVFF  2D,FA8
5E4C:  BCF    FA6.6
5E4E:  BCF    FA6.7
5E50:  BSF    FA6.2
5E52:  MOVF   FF2,W
5E54:  MOVWF  00
5E56:  BCF    FF2.7
5E58:  MOVLW  55
5E5A:  MOVWF  FA7
5E5C:  MOVLW  AA
5E5E:  MOVWF  FA7
5E60:  BSF    FA6.1
5E62:  BTFSC  FA6.1
5E64:  BRA    5E62
5E66:  BCF    FA6.2
5E68:  MOVF   00,W
5E6A:  IORWF  FF2,F
5E6C:  MOVLW  0A
5E6E:  MOVWF  FA9
5E70:  MOVFF  2E,FA8
5E74:  BCF    FA6.6
5E76:  BCF    FA6.7
5E78:  BSF    FA6.2
5E7A:  MOVF   FF2,W
5E7C:  MOVWF  00
5E7E:  BCF    FF2.7
5E80:  MOVLW  55
5E82:  MOVWF  FA7
5E84:  MOVLW  AA
5E86:  MOVWF  FA7
5E88:  BSF    FA6.1
5E8A:  BTFSC  FA6.1
5E8C:  BRA    5E8A
5E8E:  BCF    FA6.2
5E90:  MOVF   00,W
5E92:  IORWF  FF2,F
5E94:  MOVLB  0
5E96:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
5E98:  MOVF   18,W
5E9A:  SUBLW  14
5E9C:  BTFSS  FD8.2
5E9E:  BRA    6394
....................    { 
....................       if(Lectura2==1) 
5EA0:  BTFSS  35.6
5EA2:  BRA    6016
5EA4:  CLRF   16
5EA6:  BTFSC  FF2.7
5EA8:  BSF    16.7
5EAA:  BCF    FF2.7
....................       { 
....................       lcd_gotoxy(1,1);                      
5EAC:  MOVLW  01
5EAE:  MOVWF  x32
5EB0:  MOVWF  x33
5EB2:  MOVLB  0
5EB4:  CALL   020C
5EB8:  BTFSC  16.7
5EBA:  BSF    FF2.7
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
5EBC:  MOVLW  F2
5EBE:  MOVWF  FF6
5EC0:  MOVLW  0A
5EC2:  MOVWF  FF7
5EC4:  CLRF   16
5EC6:  BTFSC  FF2.7
5EC8:  BSF    16.7
5ECA:  BCF    FF2.7
5ECC:  CALL   02F2
5ED0:  BTFSC  16.7
5ED2:  BSF    FF2.7
5ED4:  CLRF   16
5ED6:  BTFSC  FF2.7
5ED8:  BSF    16.7
5EDA:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
5EDC:  MOVLW  01
5EDE:  MOVLB  1
5EE0:  MOVWF  x32
5EE2:  MOVLW  02
5EE4:  MOVWF  x33
5EE6:  MOVLB  0
5EE8:  CALL   020C
5EEC:  BTFSC  16.7
5EEE:  BSF    FF2.7
....................       printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
5EF0:  MOVLB  1
5EF2:  CLRF   x0A
5EF4:  MOVFF  2A,109
5EF8:  MOVLB  0
5EFA:  CALL   0C56
5EFE:  MOVFF  00,100
5F02:  MOVFF  01,101
5F06:  MOVFF  02,102
5F0A:  MOVFF  03,103
5F0E:  MOVFF  03,121
5F12:  MOVFF  02,120
5F16:  MOVFF  01,11F
5F1A:  MOVFF  00,11E
5F1E:  MOVLB  1
5F20:  CLRF   x25
5F22:  CLRF   x24
5F24:  MOVLW  7F
5F26:  MOVWF  x23
5F28:  MOVLW  86
5F2A:  MOVWF  x22
5F2C:  MOVLB  0
5F2E:  CALL   0C8C
5F32:  MOVLB  1
5F34:  CLRF   x1D
5F36:  CLRF   x1C
5F38:  MOVLW  48
5F3A:  MOVWF  x1B
5F3C:  MOVLW  85
5F3E:  MOVWF  x1A
5F40:  MOVFF  03,121
5F44:  MOVFF  02,120
5F48:  MOVFF  01,11F
5F4C:  MOVFF  00,11E
5F50:  MOVLB  0
5F52:  CALL   1490
5F56:  MOVFF  00,100
5F5A:  MOVFF  01,101
5F5E:  MOVFF  02,102
5F62:  MOVFF  03,103
5F66:  MOVLW  FC
5F68:  MOVWF  FF6
5F6A:  MOVLW  0A
5F6C:  MOVWF  FF7
5F6E:  MOVLW  05
5F70:  MOVLB  1
5F72:  MOVWF  x08
5F74:  MOVLB  0
5F76:  CALL   1062
5F7A:  MOVLW  01
5F7C:  MOVWF  FE9
5F7E:  MOVFF  103,10B
5F82:  MOVFF  102,10A
5F86:  MOVFF  101,109
5F8A:  MOVFF  100,108
5F8E:  MOVLB  1
5F90:  CLRF   x0C
5F92:  MOVLB  0
5F94:  CALL   164A
5F98:  CLRF   16
5F9A:  BTFSC  FF2.7
5F9C:  BSF    16.7
5F9E:  BCF    FF2.7
5FA0:  MOVLW  25
5FA2:  MOVLB  1
5FA4:  MOVWF  x31
5FA6:  MOVLB  0
5FA8:  CALL   0286
5FAC:  BTFSC  16.7
5FAE:  BSF    FF2.7
5FB0:  CLRF   16
5FB2:  BTFSC  FF2.7
5FB4:  BSF    16.7
5FB6:  BCF    FF2.7
....................       lcd_gotoxy(1,3); 
5FB8:  MOVLW  01
5FBA:  MOVLB  1
5FBC:  MOVWF  x32
5FBE:  MOVLW  03
5FC0:  MOVWF  x33
5FC2:  MOVLB  0
5FC4:  CALL   020C
5FC8:  BTFSC  16.7
5FCA:  BSF    FF2.7
....................       printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
5FCC:  MOVLW  0A
5FCE:  MOVWF  FF6
5FD0:  MOVLW  0B
5FD2:  MOVWF  FF7
5FD4:  MOVLW  08
5FD6:  MOVLB  1
5FD8:  MOVWF  x08
5FDA:  MOVLB  0
5FDC:  CALL   1062
5FE0:  MOVLW  01
5FE2:  MOVWF  FE9
5FE4:  MOVFF  8E,10B
5FE8:  MOVFF  8D,10A
5FEC:  MOVFF  8C,109
5FF0:  MOVFF  8B,108
5FF4:  MOVLB  1
5FF6:  MOVWF  x0C
5FF8:  MOVLB  0
5FFA:  CALL   164A
5FFE:  MOVLW  17
6000:  MOVWF  FF6
6002:  MOVLW  0B
6004:  MOVWF  FF7
6006:  MOVLW  07
6008:  MOVLB  1
600A:  MOVWF  x08
600C:  MOVLB  0
600E:  CALL   1062
....................       Lectura2=0; 
6012:  BCF    35.6
6014:  MOVLB  1
....................       } 
....................        
....................       if(horas==60) 
6016:  MOVF   33,W
6018:  SUBLW  3C
601A:  BNZ   6052
601C:  CLRF   16
601E:  BTFSC  FF2.7
6020:  BSF    16.7
6022:  BCF    FF2.7
....................       { 
....................          lcd_gotoxy(10,1);                      
6024:  MOVLW  0A
6026:  MOVWF  x32
6028:  MOVLW  01
602A:  MOVWF  x33
602C:  MOVLB  0
602E:  CALL   020C
6032:  BTFSC  16.7
6034:  BSF    FF2.7
....................          printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
6036:  MOVLW  20
6038:  MOVWF  FF6
603A:  MOVLW  0B
603C:  MOVWF  FF7
603E:  CLRF   16
6040:  BTFSC  FF2.7
6042:  BSF    16.7
6044:  BCF    FF2.7
6046:  CALL   02F2
604A:  BTFSC  16.7
604C:  BSF    FF2.7
....................       } 
....................       else 
604E:  BRA    6084
6050:  MOVLB  1
6052:  CLRF   16
6054:  BTFSC  FF2.7
6056:  BSF    16.7
6058:  BCF    FF2.7
....................       { 
....................          lcd_gotoxy(10,1);                      
605A:  MOVLW  0A
605C:  MOVWF  x32
605E:  MOVLW  01
6060:  MOVWF  x33
6062:  MOVLB  0
6064:  CALL   020C
6068:  BTFSC  16.7
606A:  BSF    FF2.7
....................          printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
606C:  MOVLW  2C
606E:  MOVWF  FF6
6070:  MOVLW  0B
6072:  MOVWF  FF7
6074:  CLRF   16
6076:  BTFSC  FF2.7
6078:  BSF    16.7
607A:  BCF    FF2.7
607C:  CALL   02F2
6080:  BTFSC  16.7
6082:  BSF    FF2.7
....................       } 
....................        
....................       if(iniciodamper==0) 
6084:  BTFSC  4E.0
6086:  BRA    60C0
....................       { 
....................          flag_iniciodamper=1; 
6088:  BSF    35.7
608A:  CLRF   16
608C:  BTFSC  FF2.7
608E:  BSF    16.7
6090:  BCF    FF2.7
....................          lcd_gotoxy(11,2); 
6092:  MOVLW  0B
6094:  MOVLB  1
6096:  MOVWF  x32
6098:  MOVLW  02
609A:  MOVWF  x33
609C:  MOVLB  0
609E:  CALL   020C
60A2:  BTFSC  16.7
60A4:  BSF    FF2.7
....................          printf(lcd_putc,"Flujo=Ajus"); 
60A6:  MOVLW  38
60A8:  MOVWF  FF6
60AA:  MOVLW  0B
60AC:  MOVWF  FF7
60AE:  CLRF   16
60B0:  BTFSC  FF2.7
60B2:  BSF    16.7
60B4:  BCF    FF2.7
60B6:  CALL   02F2
60BA:  BTFSC  16.7
60BC:  BSF    FF2.7
....................       } 
....................       else 
60BE:  BRA    61AA
....................       { 
....................          flag_iniciodamper=0; 
60C0:  BCF    35.7
....................          if(Flujo<0.5) 
60C2:  MOVFF  8E,11D
60C6:  MOVFF  8D,11C
60CA:  MOVFF  8C,11B
60CE:  MOVFF  8B,11A
60D2:  MOVLB  1
60D4:  CLRF   x21
60D6:  CLRF   x20
60D8:  CLRF   x1F
60DA:  MOVLW  7E
60DC:  MOVWF  x1E
60DE:  MOVLB  0
60E0:  CALL   182C
60E4:  BNC   611C
60E6:  CLRF   16
60E8:  BTFSC  FF2.7
60EA:  BSF    16.7
60EC:  BCF    FF2.7
....................          { 
....................             lcd_gotoxy(11,2); 
60EE:  MOVLW  0B
60F0:  MOVLB  1
60F2:  MOVWF  x32
60F4:  MOVLW  02
60F6:  MOVWF  x33
60F8:  MOVLB  0
60FA:  CALL   020C
60FE:  BTFSC  16.7
6100:  BSF    FF2.7
....................             printf(lcd_putc,"Flujo=Bajo");       
6102:  MOVLW  44
6104:  MOVWF  FF6
6106:  MOVLW  0B
6108:  MOVWF  FF7
610A:  CLRF   16
610C:  BTFSC  FF2.7
610E:  BSF    16.7
6110:  BCF    FF2.7
6112:  CALL   02F2
6116:  BTFSC  16.7
6118:  BSF    FF2.7
....................          } 
....................          else 
611A:  BRA    61AA
....................          { 
....................             if(Flujo>2.0) 
611C:  MOVLB  1
611E:  CLRF   x1D
6120:  CLRF   x1C
6122:  CLRF   x1B
6124:  MOVLW  80
6126:  MOVWF  x1A
6128:  MOVFF  8E,121
612C:  MOVFF  8D,120
6130:  MOVFF  8C,11F
6134:  MOVFF  8B,11E
6138:  MOVLB  0
613A:  CALL   182C
613E:  BNC   6176
6140:  CLRF   16
6142:  BTFSC  FF2.7
6144:  BSF    16.7
6146:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
6148:  MOVLW  0B
614A:  MOVLB  1
614C:  MOVWF  x32
614E:  MOVLW  02
6150:  MOVWF  x33
6152:  MOVLB  0
6154:  CALL   020C
6158:  BTFSC  16.7
615A:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=Alto");                
615C:  MOVLW  50
615E:  MOVWF  FF6
6160:  MOVLW  0B
6162:  MOVWF  FF7
6164:  CLRF   16
6166:  BTFSC  FF2.7
6168:  BSF    16.7
616A:  BCF    FF2.7
616C:  CALL   02F2
6170:  BTFSC  16.7
6172:  BSF    FF2.7
....................             } 
....................             else 
6174:  BRA    61AA
6176:  CLRF   16
6178:  BTFSC  FF2.7
617A:  BSF    16.7
617C:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
617E:  MOVLW  0B
6180:  MOVLB  1
6182:  MOVWF  x32
6184:  MOVLW  02
6186:  MOVWF  x33
6188:  MOVLB  0
618A:  CALL   020C
618E:  BTFSC  16.7
6190:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=OK  ");       
6192:  MOVLW  5C
6194:  MOVWF  FF6
6196:  MOVLW  0B
6198:  MOVWF  FF7
619A:  CLRF   16
619C:  BTFSC  FF2.7
619E:  BSF    16.7
61A0:  BCF    FF2.7
61A2:  CALL   02F2
61A6:  BTFSC  16.7
61A8:  BSF    FF2.7
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
61AA:  BTFSS  34.0
61AC:  BRA    61E8
....................       { 
....................          Luz_Blanca_on; 
61AE:  BSF    F8A.4
61B0:  BCF    F93.4
61B2:  CLRF   16
61B4:  BTFSC  FF2.7
61B6:  BSF    16.7
61B8:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
61BA:  MOVLW  01
61BC:  MOVLB  1
61BE:  MOVWF  x32
61C0:  MOVLW  04
61C2:  MOVWF  x33
61C4:  MOVLB  0
61C6:  CALL   020C
61CA:  BTFSC  16.7
61CC:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:ON "); 
61CE:  MOVLW  68
61D0:  MOVWF  FF6
61D2:  MOVLW  0B
61D4:  MOVWF  FF7
61D6:  CLRF   16
61D8:  BTFSC  FF2.7
61DA:  BSF    16.7
61DC:  BCF    FF2.7
61DE:  CALL   02F2
61E2:  BTFSC  16.7
61E4:  BSF    FF2.7
....................       } 
....................       else 
61E6:  BRA    6220
....................       { 
....................          Luz_Blanca_off; 
61E8:  BCF    F8A.4
61EA:  BCF    F93.4
61EC:  CLRF   16
61EE:  BTFSC  FF2.7
61F0:  BSF    16.7
61F2:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
61F4:  MOVLW  01
61F6:  MOVLB  1
61F8:  MOVWF  x32
61FA:  MOVLW  04
61FC:  MOVWF  x33
61FE:  MOVLB  0
6200:  CALL   020C
6204:  BTFSC  16.7
6206:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:OFF "); 
6208:  MOVLW  70
620A:  MOVWF  FF6
620C:  MOVLW  0B
620E:  MOVWF  FF7
6210:  CLRF   16
6212:  BTFSC  FF2.7
6214:  BSF    16.7
6216:  BCF    FF2.7
6218:  CALL   02F2
621C:  BTFSC  16.7
621E:  BSF    FF2.7
....................       } 
....................        
....................       if(estadomv==1) 
6220:  BTFSS  34.1
6222:  BRA    6262
....................       { 
....................          if(iniciodamper==1) 
6224:  BTFSS  4E.0
6226:  BRA    622C
....................          { 
....................             Motor_on; 
6228:  BSF    F8B.0
622A:  BCF    F94.0
622C:  CLRF   16
622E:  BTFSC  FF2.7
6230:  BSF    16.7
6232:  BCF    FF2.7
....................          }          
....................          lcd_gotoxy(10,4); 
6234:  MOVLW  0A
6236:  MOVLB  1
6238:  MOVWF  x32
623A:  MOVLW  04
623C:  MOVWF  x33
623E:  MOVLB  0
6240:  CALL   020C
6244:  BTFSC  16.7
6246:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:ON "); 
6248:  MOVLW  7A
624A:  MOVWF  FF6
624C:  MOVLW  0B
624E:  MOVWF  FF7
6250:  CLRF   16
6252:  BTFSC  FF2.7
6254:  BSF    16.7
6256:  BCF    FF2.7
6258:  CALL   02F2
625C:  BTFSC  16.7
625E:  BSF    FF2.7
....................       } 
....................       else 
6260:  BRA    629E
....................       { 
....................          if(iniciodamper==1) 
6262:  BTFSS  4E.0
6264:  BRA    626A
....................          { 
....................             Motor_off;      
6266:  BCF    F8B.0
6268:  BCF    F94.0
626A:  CLRF   16
626C:  BTFSC  FF2.7
626E:  BSF    16.7
6270:  BCF    FF2.7
....................          } 
....................          lcd_gotoxy(10,4); 
6272:  MOVLW  0A
6274:  MOVLB  1
6276:  MOVWF  x32
6278:  MOVLW  04
627A:  MOVWF  x33
627C:  MOVLB  0
627E:  CALL   020C
6282:  BTFSC  16.7
6284:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:OFF ");  
6286:  MOVLW  84
6288:  MOVWF  FF6
628A:  MOVLW  0B
628C:  MOVWF  FF7
628E:  CLRF   16
6290:  BTFSC  FF2.7
6292:  BSF    16.7
6294:  BCF    FF2.7
6296:  CALL   02F2
629A:  BTFSC  16.7
629C:  BSF    FF2.7
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
629E:  BSF    F93.2
62A0:  BTFSS  F81.2
62A2:  BRA    62C6
....................       {  if(Flanco == 0)  
62A4:  BTFSC  34.4
62A6:  BRA    62C4
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
62A8:  BSF    34.4
62AA:  CLRF   16
62AC:  BTFSC  FF2.7
62AE:  BSF    16.7
62B0:  BCF    FF2.7
62B2:  MOVLW  C8
62B4:  MOVLB  1
62B6:  MOVWF  x32
62B8:  MOVLB  0
62BA:  CALL   00B6
62BE:  BTFSC  16.7
62C0:  BSF    FF2.7
62C2:  BTG    34.0
....................          else 
62C4:  BRA    62C8
....................             {Flanco = 0;} 
62C6:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
62C8:  BSF    F93.1
62CA:  BTFSS  F81.1
62CC:  BRA    62F0
....................       {  if(Flanco2 == 0)  
62CE:  BTFSC  34.6
62D0:  BRA    62EE
....................             {Flanco2 = 1;delay_ms(200);estadomv=!estadomv;}} 
62D2:  BSF    34.6
62D4:  CLRF   16
62D6:  BTFSC  FF2.7
62D8:  BSF    16.7
62DA:  BCF    FF2.7
62DC:  MOVLW  C8
62DE:  MOVLB  1
62E0:  MOVWF  x32
62E2:  MOVLB  0
62E4:  CALL   00B6
62E8:  BTFSC  16.7
62EA:  BSF    FF2.7
62EC:  BTG    34.1
....................          else 
62EE:  BRA    62F2
....................             {Flanco2 = 0;} 
62F0:  BCF    34.6
....................     
....................       if(UP)// Si oprime Arriba 
62F2:  BSF    F93.3
62F4:  BTFSS  F81.3
62F6:  BRA    6346
....................       {  if(Flanco1 == 0)  
62F8:  BTFSC  34.5
62FA:  BRA    6344
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
62FC:  MOVLW  02
62FE:  MOVLB  1
6300:  MOVWF  x00
6302:  CLRF   16
6304:  BTFSC  FF2.7
6306:  BSF    16.7
6308:  BCF    FF2.7
630A:  MOVLW  FA
630C:  MOVWF  x32
630E:  MOVLB  0
6310:  CALL   00B6
6314:  BTFSC  16.7
6316:  BSF    FF2.7
6318:  MOVLB  1
631A:  DECFSZ x00,F
631C:  BRA    6302
631E:  CLRF   16
6320:  BTFSC  FF2.7
6322:  BSF    16.7
6324:  BCF    FF2.7
6326:  MOVLW  0C
6328:  MOVWF  x31
632A:  MOVLB  0
632C:  CALL   0286
6330:  BTFSC  16.7
6332:  BSF    FF2.7
6334:  MOVLW  01
6336:  MOVWF  18
6338:  CLRF   36
633A:  MOVLW  02
633C:  MOVWF  1C
633E:  MOVWF  1E
6340:  MOVLW  0B
6342:  MOVWF  1B
....................          else 
6344:  BRA    6348
....................             {Flanco1 = 0;}    
6346:  BCF    34.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
6348:  BSF    F93.0
634A:  BTFSS  F81.0
634C:  BRA    6390
....................       {  if(Flanco3 == 0)  
634E:  BTFSC  34.7
6350:  BRA    638E
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
6352:  MOVLW  02
6354:  MOVLB  1
6356:  MOVWF  x00
6358:  CLRF   16
635A:  BTFSC  FF2.7
635C:  BSF    16.7
635E:  BCF    FF2.7
6360:  MOVLW  FA
6362:  MOVWF  x32
6364:  MOVLB  0
6366:  CALL   00B6
636A:  BTFSC  16.7
636C:  BSF    FF2.7
636E:  MOVLB  1
6370:  DECFSZ x00,F
6372:  BRA    6358
6374:  CLRF   16
6376:  BTFSC  FF2.7
6378:  BSF    16.7
637A:  BCF    FF2.7
637C:  MOVLW  0C
637E:  MOVWF  x31
6380:  MOVLB  0
6382:  CALL   0286
6386:  BTFSC  16.7
6388:  BSF    FF2.7
638A:  MOVLW  28
638C:  MOVWF  18
....................          else 
638E:  BRA    6392
....................             {Flanco3 = 0;}     
6390:  BCF    34.7
6392:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
6394:  MOVF   18,W
6396:  SUBLW  1E
6398:  BTFSS  FD8.2
639A:  BRA    6678
639C:  CLRF   16
639E:  BTFSC  FF2.7
63A0:  BSF    16.7
63A2:  BCF    FF2.7
....................       lcd_gotoxy(1,1); 
63A4:  MOVLW  01
63A6:  MOVWF  x32
63A8:  MOVWF  x33
63AA:  MOVLB  0
63AC:  CALL   020C
63B0:  BTFSC  16.7
63B2:  BSF    FF2.7
....................       printf(lcd_putc,"     Apagando     "); 
63B4:  MOVLW  90
63B6:  MOVWF  FF6
63B8:  MOVLW  0B
63BA:  MOVWF  FF7
63BC:  CLRF   16
63BE:  BTFSC  FF2.7
63C0:  BSF    16.7
63C2:  BCF    FF2.7
63C4:  CALL   02F2
63C8:  BTFSC  16.7
63CA:  BSF    FF2.7
63CC:  CLRF   16
63CE:  BTFSC  FF2.7
63D0:  BSF    16.7
63D2:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
63D4:  MOVLW  01
63D6:  MOVLB  1
63D8:  MOVWF  x32
63DA:  MOVLW  02
63DC:  MOVWF  x33
63DE:  MOVLB  0
63E0:  CALL   020C
63E4:  BTFSC  16.7
63E6:  BSF    FF2.7
....................       printf(lcd_putc,"      Cabina      "); 
63E8:  MOVLW  A4
63EA:  MOVWF  FF6
63EC:  MOVLW  0B
63EE:  MOVWF  FF7
63F0:  CLRF   16
63F2:  BTFSC  FF2.7
63F4:  BSF    16.7
63F6:  BCF    FF2.7
63F8:  CALL   02F2
63FC:  BTFSC  16.7
63FE:  BSF    FF2.7
6400:  CLRF   16
6402:  BTFSC  FF2.7
6404:  BSF    16.7
6406:  BCF    FF2.7
....................        
....................       lcd_gotoxy(1,3); 
6408:  MOVLW  01
640A:  MOVLB  1
640C:  MOVWF  x32
640E:  MOVLW  03
6410:  MOVWF  x33
6412:  MOVLB  0
6414:  CALL   020C
6418:  BTFSC  16.7
641A:  BSF    FF2.7
....................       printf(lcd_putc," Espere"); 
641C:  MOVLW  B8
641E:  MOVWF  FF6
6420:  MOVLW  0B
6422:  MOVWF  FF7
6424:  CLRF   16
6426:  BTFSC  FF2.7
6428:  BSF    16.7
642A:  BCF    FF2.7
642C:  CALL   02F2
6430:  BTFSC  16.7
6432:  BSF    FF2.7
....................        
....................       if(Lectura==1) 
6434:  BTFSS  35.5
6436:  BRA    6674
....................       {ajustar_damper(0); 
6438:  CLRF   xFF
643A:  CALL   1946
....................        
....................          if(n<8) 
643E:  MOVF   27,W
6440:  SUBLW  07
6442:  BNC   6480
....................          { 
....................             lcd_gotoxy(9+n,3); 
6444:  MOVLW  09
6446:  ADDWF  27,W
6448:  MOVLB  1
644A:  MOVWF  x00
644C:  CLRF   16
644E:  BTFSC  FF2.7
6450:  BSF    16.7
6452:  BCF    FF2.7
6454:  MOVWF  x32
6456:  MOVLW  03
6458:  MOVWF  x33
645A:  MOVLB  0
645C:  CALL   020C
6460:  BTFSC  16.7
6462:  BSF    FF2.7
6464:  CLRF   16
6466:  BTFSC  FF2.7
6468:  BSF    16.7
646A:  BCF    FF2.7
....................             printf(lcd_putc,"."); 
646C:  MOVLW  2E
646E:  MOVLB  1
6470:  MOVWF  x31
6472:  MOVLB  0
6474:  CALL   0286
6478:  BTFSC  16.7
647A:  BSF    FF2.7
....................             n++; 
647C:  INCF   27,F
....................          } 
....................          else 
647E:  BRA    64B6
....................          { 
....................             n=0;lcd_gotoxy(1,3); 
6480:  CLRF   27
6482:  CLRF   16
6484:  BTFSC  FF2.7
6486:  BSF    16.7
6488:  BCF    FF2.7
648A:  MOVLW  01
648C:  MOVLB  1
648E:  MOVWF  x32
6490:  MOVLW  03
6492:  MOVWF  x33
6494:  MOVLB  0
6496:  CALL   020C
649A:  BTFSC  16.7
649C:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
649E:  MOVLW  C0
64A0:  MOVWF  FF6
64A2:  MOVLW  0B
64A4:  MOVWF  FF7
64A6:  CLRF   16
64A8:  BTFSC  FF2.7
64AA:  BSF    16.7
64AC:  BCF    FF2.7
64AE:  CALL   02F2
64B2:  BTFSC  16.7
64B4:  BSF    FF2.7
....................          } 
....................        
....................       if(sensores(2)<512) 
64B6:  MOVLW  02
64B8:  MOVLB  1
64BA:  MOVWF  x04
64BC:  MOVLB  0
64BE:  CALL   18E2
64C2:  MOVFF  00,100
64C6:  MOVFF  01,101
64CA:  MOVFF  02,102
64CE:  MOVFF  03,103
64D2:  MOVFF  03,11D
64D6:  MOVFF  02,11C
64DA:  MOVFF  01,11B
64DE:  MOVFF  00,11A
64E2:  MOVLB  1
64E4:  CLRF   x21
64E6:  CLRF   x20
64E8:  CLRF   x1F
64EA:  MOVLW  88
64EC:  MOVWF  x1E
64EE:  MOVLB  0
64F0:  CALL   182C
64F4:  BNC   64FA
....................       { 
....................          Motor_off; 
64F6:  BCF    F8B.0
64F8:  BCF    F94.0
....................       } 
....................        
....................       if(sensores(2)<6) 
64FA:  MOVLW  02
64FC:  MOVLB  1
64FE:  MOVWF  x04
6500:  MOVLB  0
6502:  CALL   18E2
6506:  MOVFF  00,100
650A:  MOVFF  01,101
650E:  MOVFF  02,102
6512:  MOVFF  03,103
6516:  MOVFF  03,11D
651A:  MOVFF  02,11C
651E:  MOVFF  01,11B
6522:  MOVFF  00,11A
6526:  MOVLB  1
6528:  CLRF   x21
652A:  CLRF   x20
652C:  MOVLW  40
652E:  MOVWF  x1F
6530:  MOVLW  81
6532:  MOVWF  x1E
6534:  MOVLB  0
6536:  CALL   182C
653A:  BTFSS  FD8.0
653C:  BRA    6672
....................       { 
....................          write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
653E:  MOVLW  46
6540:  MOVWF  FA9
6542:  MOVFF  31,FA8
6546:  BCF    FA6.6
6548:  BCF    FA6.7
654A:  BSF    FA6.2
654C:  MOVF   FF2,W
654E:  MOVWF  00
6550:  BCF    FF2.7
6552:  MOVLB  F
6554:  MOVLW  55
6556:  MOVWF  FA7
6558:  MOVLW  AA
655A:  MOVWF  FA7
655C:  BSF    FA6.1
655E:  BTFSC  FA6.1
6560:  BRA    655E
6562:  BCF    FA6.2
6564:  MOVF   00,W
6566:  IORWF  FF2,F
6568:  MOVLW  47
656A:  MOVWF  FA9
656C:  MOVFF  32,FA8
6570:  BCF    FA6.6
6572:  BCF    FA6.7
6574:  BSF    FA6.2
6576:  MOVF   FF2,W
6578:  MOVWF  00
657A:  BCF    FF2.7
657C:  MOVLW  55
657E:  MOVWF  FA7
6580:  MOVLW  AA
6582:  MOVWF  FA7
6584:  BSF    FA6.1
6586:  BTFSC  FA6.1
6588:  BRA    6586
658A:  BCF    FA6.2
658C:  MOVF   00,W
658E:  IORWF  FF2,F
6590:  MOVLW  48
6592:  MOVWF  FA9
6594:  MOVFF  33,FA8
6598:  BCF    FA6.6
659A:  BCF    FA6.7
659C:  BSF    FA6.2
659E:  MOVF   FF2,W
65A0:  MOVWF  00
65A2:  BCF    FF2.7
65A4:  MOVLW  55
65A6:  MOVWF  FA7
65A8:  MOVLW  AA
65AA:  MOVWF  FA7
65AC:  BSF    FA6.1
65AE:  BTFSC  FA6.1
65B0:  BRA    65AE
65B2:  BCF    FA6.2
65B4:  MOVF   00,W
65B6:  IORWF  FF2,F
65B8:  CLRF   16
65BA:  BTFSC  FF2.7
65BC:  BSF    16.7
65BE:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
65C0:  MOVLW  0C
65C2:  MOVLB  1
65C4:  MOVWF  x31
65C6:  MOVLB  0
65C8:  CALL   0286
65CC:  BTFSC  16.7
65CE:  BSF    FF2.7
65D0:  CLRF   16
65D2:  BTFSC  FF2.7
65D4:  BSF    16.7
65D6:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
65D8:  MOVLW  01
65DA:  MOVLB  1
65DC:  MOVWF  x32
65DE:  MOVLW  02
65E0:  MOVWF  x33
65E2:  MOVLB  0
65E4:  CALL   020C
65E8:  BTFSC  16.7
65EA:  BSF    FF2.7
....................          printf(lcd_putc,"     Proceso      "); 
65EC:  MOVLW  D6
65EE:  MOVWF  FF6
65F0:  MOVLW  0B
65F2:  MOVWF  FF7
65F4:  CLRF   16
65F6:  BTFSC  FF2.7
65F8:  BSF    16.7
65FA:  BCF    FF2.7
65FC:  CALL   02F2
6600:  BTFSC  16.7
6602:  BSF    FF2.7
6604:  CLRF   16
6606:  BTFSC  FF2.7
6608:  BSF    16.7
660A:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
660C:  MOVLW  01
660E:  MOVLB  1
6610:  MOVWF  x32
6612:  MOVLW  03
6614:  MOVWF  x33
6616:  MOVLB  0
6618:  CALL   020C
661C:  BTFSC  16.7
661E:  BSF    FF2.7
....................          printf(lcd_putc,"    Finalizado    "); 
6620:  MOVLW  EA
6622:  MOVWF  FF6
6624:  MOVLW  0B
6626:  MOVWF  FF7
6628:  CLRF   16
662A:  BTFSC  FF2.7
662C:  BSF    16.7
662E:  BCF    FF2.7
6630:  CALL   02F2
6634:  BTFSC  16.7
6636:  BSF    FF2.7
....................          delay_ms(2000); 
6638:  MOVLW  08
663A:  MOVLB  1
663C:  MOVWF  x00
663E:  CLRF   16
6640:  BTFSC  FF2.7
6642:  BSF    16.7
6644:  BCF    FF2.7
6646:  MOVLW  FA
6648:  MOVWF  x32
664A:  MOVLB  0
664C:  CALL   00B6
6650:  BTFSC  16.7
6652:  BSF    FF2.7
6654:  MOVLB  1
6656:  DECFSZ x00,F
6658:  BRA    663E
665A:  CLRF   16
665C:  BTFSC  FF2.7
665E:  BSF    16.7
6660:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
6662:  MOVLW  0C
6664:  MOVWF  x31
6666:  MOVLB  0
6668:  CALL   0286
666C:  BTFSC  16.7
666E:  BSF    FF2.7
....................          reset_cpu(); 
6670:  RESET
....................       } 
....................       Lectura=0; 
6672:  BCF    35.5
....................       }   
....................    } 
6674:  MOVLB  1
6676:  BRA    6394
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
6678:  MOVF   18,W
667A:  SUBLW  28
667C:  BTFSS  FD8.2
667E:  BRA    67E2
6680:  CLRF   16
6682:  BTFSC  FF2.7
6684:  BSF    16.7
6686:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
6688:  MOVLW  01
668A:  MOVWF  x32
668C:  MOVWF  x33
668E:  MOVLB  0
6690:  CALL   020C
6694:  BTFSC  16.7
6696:  BSF    FF2.7
....................    printf(lcd_putc,"   Desea apagar     "); 
6698:  MOVLW  FE
669A:  MOVWF  FF6
669C:  MOVLW  0B
669E:  MOVWF  FF7
66A0:  CLRF   16
66A2:  BTFSC  FF2.7
66A4:  BSF    16.7
66A6:  BCF    FF2.7
66A8:  CALL   02F2
66AC:  BTFSC  16.7
66AE:  BSF    FF2.7
66B0:  CLRF   16
66B2:  BTFSC  FF2.7
66B4:  BSF    16.7
66B6:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
66B8:  MOVLW  01
66BA:  MOVLB  1
66BC:  MOVWF  x32
66BE:  MOVLW  02
66C0:  MOVWF  x33
66C2:  MOVLB  0
66C4:  CALL   020C
66C8:  BTFSC  16.7
66CA:  BSF    FF2.7
....................    printf(lcd_putc,"     la cabina      "); 
66CC:  MOVLW  14
66CE:  MOVWF  FF6
66D0:  MOVLW  0C
66D2:  MOVWF  FF7
66D4:  CLRF   16
66D6:  BTFSC  FF2.7
66D8:  BSF    16.7
66DA:  BCF    FF2.7
66DC:  CALL   02F2
66E0:  BTFSC  16.7
66E2:  BSF    FF2.7
66E4:  CLRF   16
66E6:  BTFSC  FF2.7
66E8:  BSF    16.7
66EA:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
66EC:  MOVLW  01
66EE:  MOVLB  1
66F0:  MOVWF  x32
66F2:  MOVLW  03
66F4:  MOVWF  x33
66F6:  MOVLB  0
66F8:  CALL   020C
66FC:  BTFSC  16.7
66FE:  BSF    FF2.7
....................    printf(lcd_putc,"   > Aceptar        "); 
6700:  MOVLW  2A
6702:  MOVWF  FF6
6704:  MOVLW  0C
6706:  MOVWF  FF7
6708:  CLRF   16
670A:  BTFSC  FF2.7
670C:  BSF    16.7
670E:  BCF    FF2.7
6710:  CALL   02F2
6714:  BTFSC  16.7
6716:  BSF    FF2.7
6718:  CLRF   16
671A:  BTFSC  FF2.7
671C:  BSF    16.7
671E:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
6720:  MOVLW  01
6722:  MOVLB  1
6724:  MOVWF  x32
6726:  MOVLW  04
6728:  MOVWF  x33
672A:  MOVLB  0
672C:  CALL   020C
6730:  BTFSC  16.7
6732:  BSF    FF2.7
....................    printf(lcd_putc,"   < Cancelar       "); 
6734:  MOVLW  40
6736:  MOVWF  FF6
6738:  MOVLW  0C
673A:  MOVWF  FF7
673C:  CLRF   16
673E:  BTFSC  FF2.7
6740:  BSF    16.7
6742:  BCF    FF2.7
6744:  CALL   02F2
6748:  BTFSC  16.7
674A:  BSF    FF2.7
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
674C:  BSF    F93.0
674E:  BTFSS  F81.0
6750:  BRA    678E
....................       {  if(Flanco1 == 0)  
6752:  BTFSC  34.5
6754:  BRA    678C
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
6756:  BSF    34.5
6758:  MOVLW  1E
675A:  MOVWF  18
675C:  CLRF   16
675E:  BTFSC  FF2.7
6760:  BSF    16.7
6762:  BCF    FF2.7
6764:  MOVFF  21,12F
6768:  CALL   01F8
676C:  BTFSC  16.7
676E:  BSF    FF2.7
6770:  BCF    F8A.6
6772:  BCF    F93.6
6774:  CLRF   16
6776:  BTFSC  FF2.7
6778:  BSF    16.7
677A:  BCF    FF2.7
677C:  MOVLW  0C
677E:  MOVLB  1
6780:  MOVWF  x31
6782:  MOVLB  0
6784:  CALL   0286
6788:  BTFSC  16.7
678A:  BSF    FF2.7
....................             }} 
....................          else 
678C:  BRA    6790
....................             {Flanco1 = 0;}    
678E:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
6790:  BSF    F93.1
6792:  BTFSS  F81.1
6794:  BRA    67DE
....................       {  if(Flanco3 == 0)  
6796:  BTFSC  34.7
6798:  BRA    67DC
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
679A:  BSF    34.7
679C:  MOVLW  14
679E:  MOVWF  18
67A0:  CLRF   36
67A2:  MOVLW  02
67A4:  MOVWF  1C
67A6:  MOVWF  1E
67A8:  MOVLW  0B
67AA:  MOVWF  1B
67AC:  CLRF   16
67AE:  BTFSC  FF2.7
67B0:  BSF    16.7
67B2:  BCF    FF2.7
67B4:  MOVLW  1E
67B6:  MOVLB  1
67B8:  MOVWF  x32
67BA:  MOVLB  0
67BC:  CALL   00B6
67C0:  BTFSC  16.7
67C2:  BSF    FF2.7
67C4:  CLRF   16
67C6:  BTFSC  FF2.7
67C8:  BSF    16.7
67CA:  BCF    FF2.7
67CC:  MOVLW  0C
67CE:  MOVLB  1
67D0:  MOVWF  x31
67D2:  MOVLB  0
67D4:  CALL   0286
67D8:  BTFSC  16.7
67DA:  BSF    FF2.7
....................          else 
67DC:  BRA    67E0
....................             {Flanco3 = 0;}     
67DE:  BCF    34.7
67E0:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(ModoSleep==1) 
67E2:  BTFSS  35.3
67E4:  BRA    67FE
67E6:  CLRF   16
67E8:  BTFSC  FF2.7
67EA:  BSF    16.7
67EC:  BCF    FF2.7
....................       {intensidadpantalla(0);sleep();} 
67EE:  CLRF   x2F
67F0:  MOVLB  0
67F2:  CALL   01F8
67F6:  BTFSC  16.7
67F8:  BSF    FF2.7
67FA:  SLEEP 
67FC:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
67FE:  MOVF   18,F
6800:  BNZ   6808
6802:  MOVF   18,W
6804:  SUBLW  1E
6806:  BZ    68E4
....................    { 
....................       if(Lectura==1) 
6808:  BTFSS  35.5
680A:  BRA    68E4
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
680C:  MOVFF  2B,FF
6810:  MOVLB  0
6812:  GOTO   1E70
6816:  MOVFF  03,8E
681A:  MOVFF  02,8D
681E:  MOVFF  01,8C
6822:  MOVFF  00,8B
....................         if(iniciodamper==1) 
6826:  BTFSS  4E.0
6828:  BRA    68C0
....................         { 
....................             controlar_flujo(); 
682A:  GOTO   2502
....................           
....................             if(Flujo<0.5 && iniciodamper==1) 
682E:  MOVFF  8E,11D
6832:  MOVFF  8D,11C
6836:  MOVFF  8C,11B
683A:  MOVFF  8B,11A
683E:  MOVLB  1
6840:  CLRF   x21
6842:  CLRF   x20
6844:  CLRF   x1F
6846:  MOVLW  7E
6848:  MOVWF  x1E
684A:  MOVLB  0
684C:  CALL   182C
6850:  BNC   689E
6852:  BTFSS  4E.0
6854:  BRA    689E
....................             { 
....................                flag_latencia=1; 
6856:  BSF    35.0
....................                 
....................                if(Latencia==1) 
6858:  BTFSS  35.1
685A:  BRA    689C
....................                { 
....................                   if(estadoalarma==1) 
685C:  BTFSS  34.2
685E:  BRA    6866
....................                   { 
....................                      Alarma_on; 
6860:  BSF    F8A.6
6862:  BCF    F93.6
....................                   } 
....................                   else 
6864:  BRA    686A
....................                   { 
....................                      Alarma_off; 
6866:  BCF    F8A.6
6868:  BCF    F93.6
....................                   } 
....................                   estadopantalla=!estadopantalla; 
686A:  BTG    34.3
....................                   if(estadopantalla==1) 
686C:  BTFSS  34.3
686E:  BRA    6886
6870:  CLRF   16
6872:  BTFSC  FF2.7
6874:  BSF    16.7
6876:  BCF    FF2.7
....................                   {intensidadpantalla(contraste);} 
6878:  MOVFF  21,12F
687C:  CALL   01F8
6880:  BTFSC  16.7
6882:  BSF    FF2.7
....................                   else 
6884:  BRA    689C
6886:  CLRF   16
6888:  BTFSC  FF2.7
688A:  BSF    16.7
688C:  BCF    FF2.7
....................                   {intensidadpantalla(0);} 
688E:  MOVLB  1
6890:  CLRF   x2F
6892:  MOVLB  0
6894:  CALL   01F8
6898:  BTFSC  16.7
689A:  BSF    FF2.7
....................                } 
....................             } 
....................             else 
689C:  BRA    68BE
689E:  CLRF   16
68A0:  BTFSC  FF2.7
68A2:  BSF    16.7
68A4:  BCF    FF2.7
....................             { 
....................                intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
68A6:  MOVFF  21,12F
68AA:  CALL   01F8
68AE:  BTFSC  16.7
68B0:  BSF    FF2.7
68B2:  BCF    F8A.6
68B4:  BCF    F93.6
68B6:  BCF    35.1
68B8:  CLRF   52
68BA:  CLRF   51
68BC:  BCF    35.0
....................             } 
....................         } 
....................         else 
68BE:  BRA    68E0
68C0:  CLRF   16
68C2:  BTFSC  FF2.7
68C4:  BSF    16.7
68C6:  BCF    FF2.7
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
68C8:  MOVFF  21,12F
68CC:  CALL   01F8
68D0:  BTFSC  16.7
68D2:  BSF    FF2.7
68D4:  BCF    F8A.6
68D6:  BCF    F93.6
68D8:  BCF    35.1
68DA:  CLRF   52
68DC:  CLRF   51
68DE:  BCF    35.0
....................         } 
....................          Lectura=0; 
68E0:  BCF    35.5
68E2:  MOVLB  1
....................       }      
....................  
....................    }      
....................    } 
68E4:  GOTO   2CEE
.................... } 
68E8:  SLEEP 

Configuration Fuses:
   Word  1: CE30   IESO FCMEN HSPLL PLL1 CPUDIV3 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
