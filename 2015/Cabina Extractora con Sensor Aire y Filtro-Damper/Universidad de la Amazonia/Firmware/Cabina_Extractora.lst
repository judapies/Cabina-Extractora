CCS PCH C Compiler, Version 4.104, 5967               05-dic.-15 09:48

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2015\Cabina Extractora con Sensor Aire y Filtro-Damper\Universidad de la Amazonia\Firmware\Cabina_Extractora.lst

               ROM used: 22702 bytes (69%)
                         Largest free fragment is 10062
               RAM used: 263 (13%) at main() level
                         304 (15%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2398
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0922:  MOVLW  01
0924:  MOVWF  FEA
0926:  MOVLW  1B
0928:  MOVWF  FE9
092A:  MOVF   FEF,W
092C:  BZ    094A
092E:  MOVLW  0F
0930:  MOVWF  01
0932:  CLRF   00
0934:  DECFSZ 00,F
0936:  BRA    0934
0938:  DECFSZ 01,F
093A:  BRA    0932
093C:  MOVLW  8F
093E:  MOVWF  00
0940:  DECFSZ 00,F
0942:  BRA    0940
0944:  NOP   
0946:  DECFSZ FEF,F
0948:  BRA    092E
094A:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
094C:  MOVLB  1
094E:  SWAPF  x1C,W
0950:  ANDLW  F0
0952:  MOVWF  00
0954:  MOVLW  0F
0956:  ANDWF  F83,W
0958:  IORWF  00,W
095A:  MOVWF  F83
....................       delay_cycles(25); 
095C:  MOVLW  08
095E:  MOVWF  00
0960:  DECFSZ 00,F
0962:  BRA    0960
....................       lcd.enable = 1; 
0964:  BSF    F83.2
....................       delay_us(55); 
0966:  MOVLW  DB
0968:  MOVWF  00
096A:  DECFSZ 00,F
096C:  BRA    096A
096E:  BRA    0970
....................       lcd.enable = 0; 
0970:  BCF    F83.2
.................... } 
0972:  MOVLB  0
0974:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0976:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0978:  MOVLW  01
097A:  MOVLB  1
097C:  MOVWF  x1B
097E:  MOVLB  0
0980:  RCALL  0922
....................       lcd.rs = address; 
0982:  MOVLB  1
0984:  BTFSS  x19.0
0986:  BCF    F83.1
0988:  BTFSC  x19.0
098A:  BSF    F83.1
....................       delay_cycles(25); 
098C:  MOVLW  08
098E:  MOVWF  00
0990:  DECFSZ 00,F
0992:  BRA    0990
....................       lcd.rw = 0; 
0994:  BCF    F83.0
....................       delay_cycles(25); 
0996:  MOVLW  08
0998:  MOVWF  00
099A:  DECFSZ 00,F
099C:  BRA    099A
....................       lcd.enable = 0; 
099E:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
09A0:  SWAPF  x1A,W
09A2:  MOVWF  x1B
09A4:  MOVLW  0F
09A6:  ANDWF  x1B,F
09A8:  MOVFF  11B,11C
09AC:  MOVLB  0
09AE:  RCALL  094C
....................       lcd_send_nibble(n & 0xf); 
09B0:  MOVLB  1
09B2:  MOVF   x1A,W
09B4:  ANDLW  0F
09B6:  MOVWF  x1B
09B8:  MOVWF  x1C
09BA:  MOVLB  0
09BC:  RCALL  094C
.................... } 
09BE:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
09C0:  MOVLW  00
09C2:  MOVWF  F95
....................     lcd.rs = 0; 
09C4:  BCF    F83.1
....................     lcd.rw = 0; 
09C6:  BCF    F83.0
....................     lcd.enable = 0; 
09C8:  BCF    F83.2
....................     delay_ms(15); 
09CA:  MOVLW  0F
09CC:  MOVLB  1
09CE:  MOVWF  x1B
09D0:  MOVLB  0
09D2:  RCALL  0922
....................     for(i=1;i<=3;++i) { 
09D4:  MOVLW  01
09D6:  MOVWF  xFF
09D8:  MOVF   xFF,W
09DA:  SUBLW  03
09DC:  BNC   09F6
....................        lcd_send_nibble(3); 
09DE:  MOVLW  03
09E0:  MOVLB  1
09E2:  MOVWF  x1C
09E4:  MOVLB  0
09E6:  RCALL  094C
....................        delay_ms(5); 
09E8:  MOVLW  05
09EA:  MOVLB  1
09EC:  MOVWF  x1B
09EE:  MOVLB  0
09F0:  RCALL  0922
....................     } 
09F2:  INCF   xFF,F
09F4:  BRA    09D8
....................     lcd_send_nibble(2); 
09F6:  MOVLW  02
09F8:  MOVLB  1
09FA:  MOVWF  x1C
09FC:  MOVLB  0
09FE:  RCALL  094C
....................     for(i=0;i<=3;++i) 
0A00:  CLRF   xFF
0A02:  MOVF   xFF,W
0A04:  SUBLW  03
0A06:  BNC   0A2A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0A08:  CLRF   03
0A0A:  MOVF   xFF,W
0A0C:  MOVFF  FF2,100
0A10:  BCF    FF2.7
0A12:  CALL   0096
0A16:  MOVLB  1
0A18:  BTFSC  x00.7
0A1A:  BSF    FF2.7
0A1C:  MOVWF  x00
0A1E:  CLRF   x19
0A20:  MOVWF  x1A
0A22:  MOVLB  0
0A24:  RCALL  0976
0A26:  INCF   xFF,F
0A28:  BRA    0A02
.................... } 
0A2A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0A2C:  MOVLW  01
0A2E:  MOVLB  1
0A30:  SUBWF  x17,W
0A32:  ADDLW  FC
0A34:  BC    0A60
0A36:  ADDLW  04
0A38:  MOVLB  0
0A3A:  GOTO   0A72
....................      case 1 : address=0x80;break; 
0A3E:  MOVLW  80
0A40:  MOVLB  1
0A42:  MOVWF  x18
0A44:  BRA    0A60
....................      case 2 : address=0xc0;break; 
0A46:  MOVLW  C0
0A48:  MOVLB  1
0A4A:  MOVWF  x18
0A4C:  BRA    0A60
....................      case 3 : address=0x94;break; 
0A4E:  MOVLW  94
0A50:  MOVLB  1
0A52:  MOVWF  x18
0A54:  BRA    0A60
....................      case 4 : address=0xd4;break; 
0A56:  MOVLW  D4
0A58:  MOVLB  1
0A5A:  MOVWF  x18
0A5C:  BRA    0A60
0A5E:  MOVLB  1
....................    } 
....................    address+=x-1; 
0A60:  MOVLW  01
0A62:  SUBWF  x16,W
0A64:  ADDWF  x18,F
....................    lcd_send_byte(0,address); 
0A66:  CLRF   x19
0A68:  MOVFF  118,11A
0A6C:  MOVLB  0
0A6E:  RCALL  0976
.................... } 
0A70:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A9E:  MOVLB  1
0AA0:  MOVF   x15,W
0AA2:  SUBLW  F1
0AA4:  BNZ   0AAA
....................     c=238; 
0AA6:  MOVLW  EE
0AA8:  MOVWF  x15
....................    switch (c) { 
0AAA:  MOVF   x15,W
0AAC:  XORLW  0C
0AAE:  MOVLB  0
0AB0:  BZ    0ABC
0AB2:  XORLW  06
0AB4:  BZ    0AD8
0AB6:  XORLW  02
0AB8:  BZ    0AEA
0ABA:  BRA    0AF8
....................      case '\f'   : lcd_send_byte(0,1); 
0ABC:  MOVLB  1
0ABE:  CLRF   x19
0AC0:  MOVLW  01
0AC2:  MOVWF  x1A
0AC4:  MOVLB  0
0AC6:  RCALL  0976
....................                    lcdline=1; 
0AC8:  MOVLW  01
0ACA:  MOVWF  16
....................                    delay_ms(2); 
0ACC:  MOVLW  02
0ACE:  MOVLB  1
0AD0:  MOVWF  x1B
0AD2:  MOVLB  0
0AD4:  RCALL  0922
....................                                            break; 
0AD6:  BRA    0B08
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0AD8:  INCF   16,F
0ADA:  MOVLW  01
0ADC:  MOVLB  1
0ADE:  MOVWF  x16
0AE0:  MOVFF  16,117
0AE4:  MOVLB  0
0AE6:  RCALL  0A2C
0AE8:  BRA    0B08
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0AEA:  MOVLB  1
0AEC:  CLRF   x19
0AEE:  MOVLW  10
0AF0:  MOVWF  x1A
0AF2:  MOVLB  0
0AF4:  RCALL  0976
0AF6:  BRA    0B08
....................      default     : lcd_send_byte(1,c);     break; 
0AF8:  MOVLW  01
0AFA:  MOVLB  1
0AFC:  MOVWF  x19
0AFE:  MOVFF  115,11A
0B02:  MOVLB  0
0B04:  RCALL  0976
0B06:  BRA    0B08
....................    } 
.................... } 
0B08:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
16DA:  MOVFF  108,10C
16DE:  MOVFF  107,10B
16E2:  MOVFF  106,10A
16E6:  MOVFF  105,109
....................  
....................    if (y != 1.0) 
16EA:  MOVFF  10C,11D
16EE:  MOVFF  10B,11C
16F2:  MOVFF  10A,11B
16F6:  MOVFF  109,11A
16FA:  MOVLB  1
16FC:  CLRF   x21
16FE:  CLRF   x20
1700:  CLRF   x1F
1702:  MOVLW  7F
1704:  MOVWF  x1E
1706:  MOVLB  0
1708:  RCALL  1576
170A:  BTFSC  FD8.2
170C:  BRA    1B8E
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
170E:  MOVLW  01
1710:  MOVLB  1
1712:  MOVWF  x1B
1714:  MOVLW  09
1716:  MOVWF  FE9
1718:  MOVFF  11B,FEA
171C:  MOVLW  7E
171E:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
1720:  BSF    FD8.1
1722:  MOVFF  10C,121
1726:  MOVFF  10B,120
172A:  MOVFF  10A,11F
172E:  MOVFF  109,11E
1732:  CLRF   x25
1734:  CLRF   x24
1736:  CLRF   x23
1738:  MOVLW  7F
173A:  MOVWF  x22
173C:  MOVLB  0
173E:  CALL   0C9E
1742:  MOVFF  00,11A
1746:  MOVFF  01,11B
174A:  MOVFF  02,11C
174E:  MOVFF  03,11D
1752:  BCF    FD8.1
1754:  MOVFF  10C,121
1758:  MOVFF  10B,120
175C:  MOVFF  10A,11F
1760:  MOVFF  109,11E
1764:  MOVLB  1
1766:  CLRF   x25
1768:  CLRF   x24
176A:  CLRF   x23
176C:  MOVLW  7F
176E:  MOVWF  x22
1770:  MOVLB  0
1772:  CALL   0C9E
1776:  MOVFF  11D,121
177A:  MOVFF  11C,120
177E:  MOVFF  11B,11F
1782:  MOVFF  11A,11E
1786:  MOVFF  03,125
178A:  MOVFF  02,124
178E:  MOVFF  01,123
1792:  MOVFF  00,122
1796:  CALL   0B40
179A:  MOVFF  03,10C
179E:  MOVFF  02,10B
17A2:  MOVFF  01,10A
17A6:  MOVFF  00,109
....................  
....................       y2=y*y; 
17AA:  MOVFF  10C,11D
17AE:  MOVFF  10B,11C
17B2:  MOVFF  10A,11B
17B6:  MOVFF  109,11A
17BA:  MOVFF  10C,121
17BE:  MOVFF  10B,120
17C2:  MOVFF  10A,11F
17C6:  MOVFF  109,11E
17CA:  RCALL  120A
17CC:  MOVFF  03,118
17D0:  MOVFF  02,117
17D4:  MOVFF  01,116
17D8:  MOVFF  00,115
....................  
....................       res = pl[0]*y2 + pl[1]; 
17DC:  MOVLW  BC
17DE:  MOVLB  1
17E0:  MOVWF  x1D
17E2:  MOVLW  24
17E4:  MOVWF  x1C
17E6:  MOVLW  67
17E8:  MOVWF  x1B
17EA:  MOVLW  7D
17EC:  MOVWF  x1A
17EE:  MOVFF  118,121
17F2:  MOVFF  117,120
17F6:  MOVFF  116,11F
17FA:  MOVFF  115,11E
17FE:  MOVLB  0
1800:  RCALL  120A
1802:  MOVFF  00,11A
1806:  MOVFF  01,11B
180A:  MOVFF  02,11C
180E:  MOVFF  03,11D
1812:  BCF    FD8.1
1814:  MOVFF  03,121
1818:  MOVFF  02,120
181C:  MOVFF  01,11F
1820:  MOVFF  00,11E
1824:  MOVLW  E3
1826:  MOVLB  1
1828:  MOVWF  x25
182A:  MOVLW  E4
182C:  MOVWF  x24
182E:  MOVLW  90
1830:  MOVWF  x23
1832:  MOVLW  82
1834:  MOVWF  x22
1836:  MOVLB  0
1838:  CALL   0C9E
183C:  MOVFF  03,110
1840:  MOVFF  02,10F
1844:  MOVFF  01,10E
1848:  MOVFF  00,10D
....................       res = res*y2 + pl[2]; 
184C:  MOVFF  110,11D
1850:  MOVFF  10F,11C
1854:  MOVFF  10E,11B
1858:  MOVFF  10D,11A
185C:  MOVFF  118,121
1860:  MOVFF  117,120
1864:  MOVFF  116,11F
1868:  MOVFF  115,11E
186C:  RCALL  120A
186E:  MOVFF  00,11A
1872:  MOVFF  01,11B
1876:  MOVFF  02,11C
187A:  MOVFF  03,11D
187E:  BCF    FD8.1
1880:  MOVFF  03,121
1884:  MOVFF  02,120
1888:  MOVFF  01,11F
188C:  MOVFF  00,11E
1890:  MOVLW  1C
1892:  MOVLB  1
1894:  MOVWF  x25
1896:  MOVLW  87
1898:  MOVWF  x24
189A:  MOVLW  57
189C:  MOVWF  x23
189E:  MOVLW  83
18A0:  MOVWF  x22
18A2:  MOVLB  0
18A4:  CALL   0C9E
18A8:  MOVFF  03,110
18AC:  MOVFF  02,10F
18B0:  MOVFF  01,10E
18B4:  MOVFF  00,10D
....................       res = res*y2 + pl[3]; 
18B8:  MOVFF  110,11D
18BC:  MOVFF  10F,11C
18C0:  MOVFF  10E,11B
18C4:  MOVFF  10D,11A
18C8:  MOVFF  118,121
18CC:  MOVFF  117,120
18D0:  MOVFF  116,11F
18D4:  MOVFF  115,11E
18D8:  RCALL  120A
18DA:  MOVFF  00,11A
18DE:  MOVFF  01,11B
18E2:  MOVFF  02,11C
18E6:  MOVFF  03,11D
18EA:  BCF    FD8.1
18EC:  MOVFF  03,121
18F0:  MOVFF  02,120
18F4:  MOVFF  01,11F
18F8:  MOVFF  00,11E
18FC:  MOVLW  AB
18FE:  MOVLB  1
1900:  MOVWF  x25
1902:  MOVLW  E1
1904:  MOVWF  x24
1906:  MOVLW  9E
1908:  MOVWF  x23
190A:  MOVLW  83
190C:  MOVWF  x22
190E:  MOVLB  0
1910:  CALL   0C9E
1914:  MOVFF  03,110
1918:  MOVFF  02,10F
191C:  MOVFF  01,10E
1920:  MOVFF  00,10D
....................  
....................       r = ql[0]*y2 + ql[1]; 
1924:  MOVLB  1
1926:  CLRF   x1D
1928:  CLRF   x1C
192A:  CLRF   x1B
192C:  MOVLW  7F
192E:  MOVWF  x1A
1930:  MOVFF  118,121
1934:  MOVFF  117,120
1938:  MOVFF  116,11F
193C:  MOVFF  115,11E
1940:  MOVLB  0
1942:  RCALL  120A
1944:  MOVFF  00,11A
1948:  MOVFF  01,11B
194C:  MOVFF  02,11C
1950:  MOVFF  03,11D
1954:  BCF    FD8.1
1956:  MOVFF  03,121
195A:  MOVFF  02,120
195E:  MOVFF  01,11F
1962:  MOVFF  00,11E
1966:  MOVLW  B4
1968:  MOVLB  1
196A:  MOVWF  x25
196C:  MOVLW  2A
196E:  MOVWF  x24
1970:  MOVLW  82
1972:  MOVWF  x23
1974:  MOVWF  x22
1976:  MOVLB  0
1978:  CALL   0C9E
197C:  MOVFF  03,114
1980:  MOVFF  02,113
1984:  MOVFF  01,112
1988:  MOVFF  00,111
....................       r = r*y2 + ql[2]; 
198C:  MOVFF  114,11D
1990:  MOVFF  113,11C
1994:  MOVFF  112,11B
1998:  MOVFF  111,11A
199C:  MOVFF  118,121
19A0:  MOVFF  117,120
19A4:  MOVFF  116,11F
19A8:  MOVFF  115,11E
19AC:  RCALL  120A
19AE:  MOVFF  00,11A
19B2:  MOVFF  01,11B
19B6:  MOVFF  02,11C
19BA:  MOVFF  03,11D
19BE:  BCF    FD8.1
19C0:  MOVFF  03,121
19C4:  MOVFF  02,120
19C8:  MOVFF  01,11F
19CC:  MOVFF  00,11E
19D0:  MOVLW  80
19D2:  MOVLB  1
19D4:  MOVWF  x25
19D6:  MOVLW  3E
19D8:  MOVWF  x24
19DA:  MOVLW  06
19DC:  MOVWF  x23
19DE:  MOVLW  83
19E0:  MOVWF  x22
19E2:  MOVLB  0
19E4:  CALL   0C9E
19E8:  MOVFF  03,114
19EC:  MOVFF  02,113
19F0:  MOVFF  01,112
19F4:  MOVFF  00,111
....................       r = r*y2 + ql[3]; 
19F8:  MOVFF  114,11D
19FC:  MOVFF  113,11C
1A00:  MOVFF  112,11B
1A04:  MOVFF  111,11A
1A08:  MOVFF  118,121
1A0C:  MOVFF  117,120
1A10:  MOVFF  116,11F
1A14:  MOVFF  115,11E
1A18:  CALL   120A
1A1C:  MOVFF  00,11A
1A20:  MOVFF  01,11B
1A24:  MOVFF  02,11C
1A28:  MOVFF  03,11D
1A2C:  BCF    FD8.1
1A2E:  MOVFF  03,121
1A32:  MOVFF  02,120
1A36:  MOVFF  01,11F
1A3A:  MOVFF  00,11E
1A3E:  MOVLW  AB
1A40:  MOVLB  1
1A42:  MOVWF  x25
1A44:  MOVLW  E1
1A46:  MOVWF  x24
1A48:  MOVLW  9E
1A4A:  MOVWF  x23
1A4C:  MOVLW  82
1A4E:  MOVWF  x22
1A50:  MOVLB  0
1A52:  CALL   0C9E
1A56:  MOVFF  03,114
1A5A:  MOVFF  02,113
1A5E:  MOVFF  01,112
1A62:  MOVFF  00,111
....................  
....................       res = y*res/r; 
1A66:  MOVFF  10C,11D
1A6A:  MOVFF  10B,11C
1A6E:  MOVFF  10A,11B
1A72:  MOVFF  109,11A
1A76:  MOVFF  110,121
1A7A:  MOVFF  10F,120
1A7E:  MOVFF  10E,11F
1A82:  MOVFF  10D,11E
1A86:  CALL   120A
1A8A:  MOVFF  00,11A
1A8E:  MOVFF  01,11B
1A92:  MOVFF  02,11C
1A96:  MOVFF  03,11D
1A9A:  MOVFF  03,121
1A9E:  MOVFF  02,120
1AA2:  MOVFF  01,11F
1AA6:  MOVFF  00,11E
1AAA:  MOVFF  114,125
1AAE:  MOVFF  113,124
1AB2:  MOVFF  112,123
1AB6:  MOVFF  111,122
1ABA:  CALL   0B40
1ABE:  MOVFF  03,110
1AC2:  MOVFF  02,10F
1AC6:  MOVFF  01,10E
1ACA:  MOVFF  00,10D
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1ACE:  MOVLW  01
1AD0:  MOVLB  1
1AD2:  MOVWF  x1B
1AD4:  MOVLW  05
1AD6:  MOVWF  FE9
1AD8:  MOVFF  11B,FEA
1ADC:  MOVLW  7E
1ADE:  SUBWF  FEF,W
1AE0:  MOVWF  x19
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1AE2:  BTFSC  x19.7
1AE4:  BRA    1AE8
1AE6:  BRA    1B10
....................          r = -(float32)-n; 
1AE8:  MOVLW  00
1AEA:  BSF    FD8.0
1AEC:  SUBFWB x19,W
1AEE:  CLRF   x1B
1AF0:  MOVWF  x1A
1AF2:  BTFSC  x1A.7
1AF4:  DECF   x1B,F
1AF6:  MOVLB  0
1AF8:  RCALL  168A
1AFA:  MOVFF  00,111
1AFE:  MOVF   01,W
1B00:  XORLW  80
1B02:  MOVLB  1
1B04:  MOVWF  x12
1B06:  MOVFF  02,113
1B0A:  MOVFF  03,114
....................       else 
1B0E:  BRA    1B30
....................          r = (float32)n; 
1B10:  CLRF   x1B
1B12:  MOVFF  119,11A
1B16:  BTFSC  x1A.7
1B18:  DECF   x1B,F
1B1A:  MOVLB  0
1B1C:  RCALL  168A
1B1E:  MOVFF  03,114
1B22:  MOVFF  02,113
1B26:  MOVFF  01,112
1B2A:  MOVFF  00,111
1B2E:  MOVLB  1
....................  
....................       res += r*LN2; 
1B30:  MOVFF  114,11D
1B34:  MOVFF  113,11C
1B38:  MOVFF  112,11B
1B3C:  MOVFF  111,11A
1B40:  MOVLW  18
1B42:  MOVWF  x21
1B44:  MOVLW  72
1B46:  MOVWF  x20
1B48:  MOVLW  31
1B4A:  MOVWF  x1F
1B4C:  MOVLW  7E
1B4E:  MOVWF  x1E
1B50:  MOVLB  0
1B52:  CALL   120A
1B56:  BCF    FD8.1
1B58:  MOVFF  110,121
1B5C:  MOVFF  10F,120
1B60:  MOVFF  10E,11F
1B64:  MOVFF  10D,11E
1B68:  MOVFF  03,125
1B6C:  MOVFF  02,124
1B70:  MOVFF  01,123
1B74:  MOVFF  00,122
1B78:  CALL   0C9E
1B7C:  MOVFF  03,110
1B80:  MOVFF  02,10F
1B84:  MOVFF  01,10E
1B88:  MOVFF  00,10D
....................    } 
....................  
....................    else 
1B8C:  BRA    1B9A
....................       res = 0.0; 
1B8E:  MOVLB  1
1B90:  CLRF   x10
1B92:  CLRF   x0F
1B94:  CLRF   x0E
1B96:  CLRF   x0D
1B98:  MOVLB  0
....................  
....................    return(res); 
1B9A:  MOVFF  10D,00
1B9E:  MOVFF  10E,01
1BA2:  MOVFF  10F,02
1BA6:  MOVFF  110,03
.................... } 
1BAA:  GOTO   1D86 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B6,1) 
.................... #define   Damper_off        output_bit(PIN_B6,0) 
.................... #define   Alarma_on         output_bit(PIN_B5,1) 
.................... #define   Alarma_off        output_bit(PIN_B5,0) 
.................... #define   Motor_on          output_bit(PIN_B7,1) 
.................... #define   Motor_off         output_bit(PIN_B7,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
162C:  MOVLB  1
162E:  RLCF   x04,W
1630:  MOVWF  00
1632:  RLCF   00,F
1634:  MOVLW  FC
1636:  ANDWF  00,F
1638:  MOVFF  00,01
163C:  MOVF   FC2,W
163E:  ANDLW  C3
1640:  IORWF  00,W
1642:  MOVWF  FC2
1644:  MOVLW  0A
1646:  MOVWF  x1B
1648:  MOVLB  0
164A:  CALL   0922
164E:  BSF    FC2.1
1650:  BTFSC  FC2.1
1652:  BRA    1650
1654:  MOVFF  FC4,10A
1658:  MOVFF  FC3,109
165C:  MOVLB  0
165E:  CALL   0B0A
1662:  MOVFF  03,108
1666:  MOVFF  02,107
166A:  MOVFF  01,106
166E:  MOVFF  00,105
1672:  MOVFF  105,00
1676:  MOVFF  106,01
167A:  MOVFF  107,02
167E:  MOVFF  108,03
.................... } 
1682:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0F16:  MOVLB  1
0F18:  MOVF   x00,F
0F1A:  BNZ   0F22
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
0F1C:  BCF    F8B.1
0F1E:  BCF    F94.1
....................    } 
....................    else 
0F20:  BRA    0F26
....................    { 
....................       Pantalla_on; 
0F22:  BSF    F8B.1
0F24:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0F26:  MOVLB  0
0F28:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1BAE:  MOVLB  1
1BB0:  CLRF   x04
1BB2:  MOVLB  0
1BB4:  RCALL  162C
1BB6:  MOVFF  00,101
1BBA:  MOVFF  01,102
1BBE:  MOVFF  02,103
1BC2:  MOVFF  03,104
1BC6:  MOVFF  03,11D
1BCA:  MOVFF  02,11C
1BCE:  MOVFF  01,11B
1BD2:  MOVFF  00,11A
1BD6:  MOVLB  1
1BD8:  CLRF   x21
1BDA:  CLRF   x20
1BDC:  MOVLW  20
1BDE:  MOVWF  x1F
1BE0:  MOVLW  81
1BE2:  MOVWF  x1E
1BE4:  MOVLB  0
1BE6:  CALL   120A
1BEA:  MOVFF  00,101
1BEE:  MOVFF  01,102
1BF2:  MOVFF  02,103
1BF6:  MOVFF  03,104
1BFA:  MOVFF  03,121
1BFE:  MOVFF  02,120
1C02:  MOVFF  01,11F
1C06:  MOVFF  00,11E
1C0A:  MOVLB  1
1C0C:  CLRF   x25
1C0E:  MOVLW  C0
1C10:  MOVWF  x24
1C12:  MOVLW  7F
1C14:  MOVWF  x23
1C16:  MOVLW  88
1C18:  MOVWF  x22
1C1A:  MOVLB  0
1C1C:  CALL   0B40
1C20:  MOVFF  03,76
1C24:  MOVFF  02,75
1C28:  MOVFF  01,74
1C2C:  MOVFF  00,73
....................     Voltaje1=sensores(1)*5/1023; 
1C30:  MOVLW  01
1C32:  MOVLB  1
1C34:  MOVWF  x04
1C36:  MOVLB  0
1C38:  RCALL  162C
1C3A:  MOVFF  00,101
1C3E:  MOVFF  01,102
1C42:  MOVFF  02,103
1C46:  MOVFF  03,104
1C4A:  MOVFF  03,11D
1C4E:  MOVFF  02,11C
1C52:  MOVFF  01,11B
1C56:  MOVFF  00,11A
1C5A:  MOVLB  1
1C5C:  CLRF   x21
1C5E:  CLRF   x20
1C60:  MOVLW  20
1C62:  MOVWF  x1F
1C64:  MOVLW  81
1C66:  MOVWF  x1E
1C68:  MOVLB  0
1C6A:  CALL   120A
1C6E:  MOVFF  00,101
1C72:  MOVFF  01,102
1C76:  MOVFF  02,103
1C7A:  MOVFF  03,104
1C7E:  MOVFF  03,121
1C82:  MOVFF  02,120
1C86:  MOVFF  01,11F
1C8A:  MOVFF  00,11E
1C8E:  MOVLB  1
1C90:  CLRF   x25
1C92:  MOVLW  C0
1C94:  MOVWF  x24
1C96:  MOVLW  7F
1C98:  MOVWF  x23
1C9A:  MOVLW  88
1C9C:  MOVWF  x22
1C9E:  MOVLB  0
1CA0:  CALL   0B40
1CA4:  MOVFF  03,7A
1CA8:  MOVFF  02,79
1CAC:  MOVFF  01,78
1CB0:  MOVFF  00,77
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1CB4:  MOVLB  1
1CB6:  CLRF   x21
1CB8:  CLRF   x20
1CBA:  MOVLW  20
1CBC:  MOVWF  x1F
1CBE:  MOVLW  81
1CC0:  MOVWF  x1E
1CC2:  MOVFF  7A,125
1CC6:  MOVFF  79,124
1CCA:  MOVFF  78,123
1CCE:  MOVFF  77,122
1CD2:  MOVLB  0
1CD4:  CALL   0B40
1CD8:  MOVFF  00,101
1CDC:  MOVFF  01,102
1CE0:  MOVFF  02,103
1CE4:  MOVFF  03,104
1CE8:  BSF    FD8.1
1CEA:  MOVFF  03,121
1CEE:  MOVFF  02,120
1CF2:  MOVFF  01,11F
1CF6:  MOVFF  00,11E
1CFA:  MOVLB  1
1CFC:  CLRF   x25
1CFE:  CLRF   x24
1D00:  CLRF   x23
1D02:  MOVLW  7F
1D04:  MOVWF  x22
1D06:  MOVLB  0
1D08:  CALL   0C9E
1D0C:  MOVFF  6E,121
1D10:  MOVFF  6D,120
1D14:  MOVFF  6C,11F
1D18:  MOVFF  6B,11E
1D1C:  MOVFF  03,125
1D20:  MOVFF  02,124
1D24:  MOVFF  01,123
1D28:  MOVFF  00,122
1D2C:  CALL   0B40
1D30:  MOVFF  03,72
1D34:  MOVFF  02,71
1D38:  MOVFF  01,70
1D3C:  MOVFF  00,6F
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
1D40:  MOVFF  72,121
1D44:  MOVFF  71,120
1D48:  MOVFF  70,11F
1D4C:  MOVFF  6F,11E
1D50:  MOVFF  5E,125
1D54:  MOVFF  5D,124
1D58:  MOVFF  5C,123
1D5C:  MOVFF  5B,122
1D60:  CALL   0B40
1D64:  MOVFF  00,101
1D68:  MOVFF  01,102
1D6C:  MOVFF  02,103
1D70:  MOVFF  03,104
1D74:  MOVFF  03,108
1D78:  MOVFF  02,107
1D7C:  MOVFF  01,106
1D80:  MOVFF  00,105
1D84:  BRA    16DA
1D86:  MOVFF  00,101
1D8A:  MOVFF  01,102
1D8E:  MOVFF  02,103
1D92:  MOVFF  03,104
1D96:  MOVFF  03,121
1D9A:  MOVFF  02,120
1D9E:  MOVFF  01,11F
1DA2:  MOVFF  00,11E
1DA6:  MOVFF  5A,125
1DAA:  MOVFF  59,124
1DAE:  MOVFF  58,123
1DB2:  MOVFF  57,122
1DB6:  CALL   0B40
1DBA:  MOVFF  00,101
1DBE:  MOVFF  01,102
1DC2:  MOVFF  02,103
1DC6:  MOVFF  03,104
1DCA:  MOVLB  1
1DCC:  CLRF   x21
1DCE:  CLRF   x20
1DD0:  CLRF   x1F
1DD2:  MOVLW  7F
1DD4:  MOVWF  x1E
1DD6:  MOVFF  62,125
1DDA:  MOVFF  61,124
1DDE:  MOVFF  60,123
1DE2:  MOVFF  5F,122
1DE6:  MOVLB  0
1DE8:  CALL   0B40
1DEC:  MOVFF  FEA,106
1DF0:  MOVFF  FE9,105
1DF4:  BCF    FD8.1
1DF6:  MOVFF  104,121
1DFA:  MOVFF  103,120
1DFE:  MOVFF  102,11F
1E02:  MOVFF  101,11E
1E06:  MOVFF  03,125
1E0A:  MOVFF  02,124
1E0E:  MOVFF  01,123
1E12:  MOVFF  00,122
1E16:  CALL   0C9E
1E1A:  MOVFF  106,FEA
1E1E:  MOVFF  105,FE9
1E22:  MOVLB  1
1E24:  CLRF   x21
1E26:  CLRF   x20
1E28:  CLRF   x1F
1E2A:  MOVLW  7F
1E2C:  MOVWF  x1E
1E2E:  MOVFF  03,125
1E32:  MOVFF  02,124
1E36:  MOVFF  01,123
1E3A:  MOVFF  00,122
1E3E:  MOVLB  0
1E40:  CALL   0B40
1E44:  MOVFF  03,66
1E48:  MOVFF  02,65
1E4C:  MOVFF  01,64
1E50:  MOVFF  00,63
....................     TC=TK-273.15; 
1E54:  BSF    FD8.1
1E56:  MOVFF  66,121
1E5A:  MOVFF  65,120
1E5E:  MOVFF  64,11F
1E62:  MOVFF  63,11E
1E66:  MOVLW  33
1E68:  MOVLB  1
1E6A:  MOVWF  x25
1E6C:  MOVLW  93
1E6E:  MOVWF  x24
1E70:  MOVLW  08
1E72:  MOVWF  x23
1E74:  MOVLW  87
1E76:  MOVWF  x22
1E78:  MOVLB  0
1E7A:  CALL   0C9E
1E7E:  MOVFF  03,6A
1E82:  MOVFF  02,69
1E86:  MOVFF  01,68
1E8A:  MOVFF  00,67
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
1E8E:  MOVF   2B,W
1E90:  SUBLW  0A
1E92:  BNZ   1EF4
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
1E94:  MOVLB  1
1E96:  CLRF   x04
1E98:  MOVLB  0
1E9A:  CALL   162C
1E9E:  MOVFF  00,101
1EA2:  MOVFF  01,102
1EA6:  MOVFF  02,103
1EAA:  MOVFF  03,104
1EAE:  MOVFF  FEA,106
1EB2:  MOVFF  FE9,105
1EB6:  BCF    FD8.1
1EB8:  MOVFF  03,121
1EBC:  MOVFF  02,120
1EC0:  MOVFF  01,11F
1EC4:  MOVFF  00,11E
1EC8:  MOVFF  BE,125
1ECC:  MOVFF  BD,124
1ED0:  MOVFF  BC,123
1ED4:  MOVFF  BB,122
1ED8:  CALL   0C9E
1EDC:  MOVFF  106,FEA
1EE0:  MOVFF  105,FE9
1EE4:  MOVFF  03,9A
1EE8:  MOVFF  02,99
1EEC:  MOVFF  01,98
1EF0:  MOVFF  00,97
....................     } 
....................     if(negativo==20) 
1EF4:  MOVF   2B,W
1EF6:  SUBLW  14
1EF8:  BNZ   1F5A
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
1EFA:  MOVLB  1
1EFC:  CLRF   x04
1EFE:  MOVLB  0
1F00:  CALL   162C
1F04:  MOVFF  00,101
1F08:  MOVFF  01,102
1F0C:  MOVFF  02,103
1F10:  MOVFF  03,104
1F14:  MOVFF  FEA,106
1F18:  MOVFF  FE9,105
1F1C:  BSF    FD8.1
1F1E:  MOVFF  03,121
1F22:  MOVFF  02,120
1F26:  MOVFF  01,11F
1F2A:  MOVFF  00,11E
1F2E:  MOVFF  BE,125
1F32:  MOVFF  BD,124
1F36:  MOVFF  BC,123
1F3A:  MOVFF  BB,122
1F3E:  CALL   0C9E
1F42:  MOVFF  106,FEA
1F46:  MOVFF  105,FE9
1F4A:  MOVFF  03,9A
1F4E:  MOVFF  02,99
1F52:  MOVFF  01,98
1F56:  MOVFF  00,97
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
1F5A:  MOVFF  9A,11D
1F5E:  MOVFF  99,11C
1F62:  MOVFF  98,11B
1F66:  MOVFF  97,11A
1F6A:  MOVFF  9A,121
1F6E:  MOVFF  99,120
1F72:  MOVFF  98,11F
1F76:  MOVFF  97,11E
1F7A:  CALL   120A
1F7E:  MOVFF  03,9E
1F82:  MOVFF  02,9D
1F86:  MOVFF  01,9C
1F8A:  MOVFF  00,9B
....................     x_cubo=x_uno*x_cuadrado; 
1F8E:  MOVFF  9A,11D
1F92:  MOVFF  99,11C
1F96:  MOVFF  98,11B
1F9A:  MOVFF  97,11A
1F9E:  MOVFF  9E,121
1FA2:  MOVFF  9D,120
1FA6:  MOVFF  9C,11F
1FAA:  MOVFF  9B,11E
1FAE:  CALL   120A
1FB2:  MOVFF  03,A2
1FB6:  MOVFF  02,A1
1FBA:  MOVFF  01,A0
1FBE:  MOVFF  00,9F
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
1FC2:  MOVFF  A2,11D
1FC6:  MOVFF  A1,11C
1FCA:  MOVFF  A0,11B
1FCE:  MOVFF  9F,11A
1FD2:  MOVFF  7E,121
1FD6:  MOVFF  7D,120
1FDA:  MOVFF  7C,11F
1FDE:  MOVFF  7B,11E
1FE2:  CALL   120A
1FE6:  MOVFF  00,101
1FEA:  MOVFF  01,102
1FEE:  MOVFF  02,103
1FF2:  MOVFF  03,104
1FF6:  MOVFF  9E,11D
1FFA:  MOVFF  9D,11C
1FFE:  MOVFF  9C,11B
2002:  MOVFF  9B,11A
2006:  MOVFF  82,121
200A:  MOVFF  81,120
200E:  MOVFF  80,11F
2012:  MOVFF  7F,11E
2016:  CALL   120A
201A:  BCF    FD8.1
201C:  MOVFF  104,121
2020:  MOVFF  103,120
2024:  MOVFF  102,11F
2028:  MOVFF  101,11E
202C:  MOVFF  03,125
2030:  MOVFF  02,124
2034:  MOVFF  01,123
2038:  MOVFF  00,122
203C:  CALL   0C9E
2040:  MOVFF  00,101
2044:  MOVFF  01,102
2048:  MOVFF  02,103
204C:  MOVFF  03,104
2050:  MOVFF  9A,11D
2054:  MOVFF  99,11C
2058:  MOVFF  98,11B
205C:  MOVFF  97,11A
2060:  MOVFF  86,121
2064:  MOVFF  85,120
2068:  MOVFF  84,11F
206C:  MOVFF  83,11E
2070:  CALL   120A
2074:  BCF    FD8.1
2076:  MOVFF  104,121
207A:  MOVFF  103,120
207E:  MOVFF  102,11F
2082:  MOVFF  101,11E
2086:  MOVFF  03,125
208A:  MOVFF  02,124
208E:  MOVFF  01,123
2092:  MOVFF  00,122
2096:  CALL   0C9E
209A:  MOVFF  00,101
209E:  MOVFF  01,102
20A2:  MOVFF  02,103
20A6:  MOVFF  03,104
20AA:  BCF    FD8.1
20AC:  MOVFF  03,121
20B0:  MOVFF  02,120
20B4:  MOVFF  01,11F
20B8:  MOVFF  00,11E
20BC:  MOVFF  8A,125
20C0:  MOVFF  89,124
20C4:  MOVFF  88,123
20C8:  MOVFF  87,122
20CC:  CALL   0C9E
20D0:  MOVFF  03,B2
20D4:  MOVFF  02,B1
20D8:  MOVFF  01,B0
20DC:  MOVFF  00,AF
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
20E0:  BSF    FD8.1
20E2:  MOVFF  B2,121
20E6:  MOVFF  B1,120
20EA:  MOVFF  B0,11F
20EE:  MOVFF  AF,11E
20F2:  MOVLW  0A
20F4:  MOVLB  1
20F6:  MOVWF  x25
20F8:  MOVLW  D7
20FA:  MOVWF  x24
20FC:  MOVLW  23
20FE:  MOVWF  x23
2100:  MOVLW  7B
2102:  MOVWF  x22
2104:  MOVLB  0
2106:  CALL   0C9E
210A:  MOVFF  03,B2
210E:  MOVFF  02,B1
2112:  MOVFF  01,B0
2116:  MOVFF  00,AF
....................     if(Velocidad<0.0) 
211A:  MOVFF  B2,11D
211E:  MOVFF  B1,11C
2122:  MOVFF  B0,11B
2126:  MOVFF  AF,11A
212A:  MOVLB  1
212C:  CLRF   x21
212E:  CLRF   x20
2130:  CLRF   x1F
2132:  CLRF   x1E
2134:  MOVLB  0
2136:  CALL   1576
213A:  BNC   2144
....................      {Velocidad=0.0;} 
213C:  CLRF   xB2
213E:  CLRF   xB1
2140:  CLRF   xB0
2142:  CLRF   xAF
....................       
....................      if(l>=media) 
2144:  MOVLB  1
2146:  MOVF   x00,W
2148:  SUBWF  27,W
214A:  BNC   214E
....................        {l=0;} 
214C:  CLRF   27
....................       
....................      promedio[l]=Velocidad;l++; 
214E:  MOVF   27,W
2150:  MULLW  04
2152:  MOVF   FF3,W
2154:  CLRF   03
2156:  ADDLW  CF
2158:  MOVWF  FE9
215A:  MOVLW  00
215C:  ADDWFC 03,W
215E:  MOVWF  FEA
2160:  MOVFF  AF,FEF
2164:  MOVFF  B0,FEC
2168:  MOVFF  B1,FEC
216C:  MOVFF  B2,FEC
2170:  INCF   27,F
....................      Flujo2=0; 
2172:  MOVLB  0
2174:  CLRF   x92
2176:  CLRF   x91
2178:  CLRF   x90
217A:  CLRF   x8F
....................         for(h=0;h<=(media-1);h++) 
217C:  CLRF   28
217E:  MOVLW  01
2180:  MOVLB  1
2182:  SUBWF  x00,W
2184:  SUBWF  28,W
2186:  BZ    218A
2188:  BC    21FA
....................         { 
....................            Flujo2+=promedio[h]; 
218A:  MOVF   28,W
218C:  MULLW  04
218E:  MOVF   FF3,W
2190:  CLRF   03
2192:  ADDLW  CF
2194:  MOVWF  FE9
2196:  MOVLW  00
2198:  ADDWFC 03,W
219A:  MOVWF  FEA
219C:  MOVFF  FEF,00
21A0:  MOVFF  FEC,01
21A4:  MOVFF  FEC,02
21A8:  MOVFF  FEC,03
21AC:  MOVFF  FEA,102
21B0:  MOVFF  FE9,101
21B4:  BCF    FD8.1
21B6:  MOVFF  92,121
21BA:  MOVFF  91,120
21BE:  MOVFF  90,11F
21C2:  MOVFF  8F,11E
21C6:  MOVFF  03,125
21CA:  MOVFF  02,124
21CE:  MOVFF  01,123
21D2:  MOVFF  00,122
21D6:  MOVLB  0
21D8:  CALL   0C9E
21DC:  MOVFF  102,FEA
21E0:  MOVFF  101,FE9
21E4:  MOVFF  03,92
21E8:  MOVFF  02,91
21EC:  MOVFF  01,90
21F0:  MOVFF  00,8F
....................         }  
21F4:  INCF   28,F
21F6:  BRA    217E
21F8:  MOVLB  1
....................            Flujo2=(Flujo2/media)*Ajuste1;  
21FA:  CLRF   x0A
21FC:  MOVFF  100,109
2200:  MOVLB  0
2202:  CALL   0B0A
2206:  MOVFF  92,121
220A:  MOVFF  91,120
220E:  MOVFF  90,11F
2212:  MOVFF  8F,11E
2216:  MOVFF  03,125
221A:  MOVFF  02,124
221E:  MOVFF  01,123
2222:  MOVFF  00,122
2226:  CALL   0B40
222A:  MOVFF  00,101
222E:  MOVFF  01,102
2232:  MOVFF  02,103
2236:  MOVFF  03,104
223A:  MOVFF  03,11D
223E:  MOVFF  02,11C
2242:  MOVFF  01,11B
2246:  MOVFF  00,11A
224A:  MOVFF  C2,121
224E:  MOVFF  C1,120
2252:  MOVFF  C0,11F
2256:  MOVFF  BF,11E
225A:  CALL   120A
225E:  MOVFF  03,92
2262:  MOVFF  02,91
2266:  MOVFF  01,90
226A:  MOVFF  00,8F
....................            return Flujo2; 
226E:  MOVFF  8F,00
2272:  MOVFF  90,01
2276:  MOVFF  91,02
227A:  MOVFF  92,03
.................... } 
227E:  GOTO   57CE (RETURN)
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
2282:  MOVF   2C,W
2284:  SUBLW  14
2286:  BTFSS  FD8.2
2288:  BRA    237C
228A:  BTFSS  34.1
228C:  BRA    237C
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
228E:  BSF    FD8.1
2290:  MOVFF  45,121
2294:  MOVFF  44,120
2298:  MOVFF  43,11F
229C:  MOVFF  42,11E
22A0:  MOVFF  8E,125
22A4:  MOVFF  8D,124
22A8:  MOVFF  8C,123
22AC:  MOVFF  8B,122
22B0:  CALL   0C9E
22B4:  MOVFF  03,CE
22B8:  MOVFF  02,CD
22BC:  MOVFF  01,CC
22C0:  MOVFF  00,CB
....................       if(error<0.2&&error>-0.2) 
22C4:  MOVFF  CE,11D
22C8:  MOVFF  CD,11C
22CC:  MOVFF  CC,11B
22D0:  MOVFF  CB,11A
22D4:  MOVLW  CD
22D6:  MOVLB  1
22D8:  MOVWF  x21
22DA:  MOVLW  CC
22DC:  MOVWF  x20
22DE:  MOVLW  4C
22E0:  MOVWF  x1F
22E2:  MOVLW  7C
22E4:  MOVWF  x1E
22E6:  MOVLB  0
22E8:  CALL   1576
22EC:  BNC   2318
22EE:  MOVLW  CD
22F0:  MOVLB  1
22F2:  MOVWF  x1D
22F4:  MOVLW  CC
22F6:  MOVWF  x1C
22F8:  MOVWF  x1B
22FA:  MOVLW  7C
22FC:  MOVWF  x1A
22FE:  MOVFF  CE,121
2302:  MOVFF  CD,120
2306:  MOVFF  CC,11F
230A:  MOVFF  CB,11E
230E:  MOVLB  0
2310:  CALL   1576
2314:  BNC   2318
....................       {} 
....................       else 
2316:  BRA    2364
....................       { 
....................          if(error>0.0) 
2318:  MOVLB  1
231A:  CLRF   x1D
231C:  CLRF   x1C
231E:  CLRF   x1B
2320:  CLRF   x1A
2322:  MOVFF  CE,121
2326:  MOVFF  CD,120
232A:  MOVFF  CC,11F
232E:  MOVFF  CB,11E
2332:  MOVLB  0
2334:  CALL   1576
2338:  BNC   233E
....................          {tmp+=1;} 
233A:  MOVLW  01
233C:  ADDWF  29,F
....................                 
....................          if(error<-0.0) 
233E:  MOVFF  CE,11D
2342:  MOVFF  CD,11C
2346:  MOVFF  CC,11B
234A:  MOVFF  CB,11A
234E:  MOVLB  1
2350:  CLRF   x21
2352:  CLRF   x20
2354:  CLRF   x1F
2356:  CLRF   x1E
2358:  MOVLB  0
235A:  CALL   1576
235E:  BNC   2364
....................          {tmp-=1;}   
2360:  MOVLW  01
2362:  SUBWF  29,F
....................       } 
....................        
....................       if(tmp>251) 
2364:  MOVF   29,W
2366:  SUBLW  FB
2368:  BC    236E
....................       {tmp=251;} 
236A:  MOVLW  FB
236C:  MOVWF  29
....................       if(tmp<4)          
236E:  MOVF   29,W
2370:  SUBLW  03
2372:  BNC   2378
....................       {tmp=4;}       
2374:  MOVLW  04
2376:  MOVWF  29
....................       set_pwm1_duty (tmp); 
2378:  MOVFF  29,FBE
....................    } 
....................     
....................    if(Manual==20) 
237C:  MOVF   2D,W
237E:  SUBLW  14
2380:  BNZ   238A
....................    { 
....................       tmp=251; 
2382:  MOVLW  FB
2384:  MOVWF  29
....................       set_pwm1_duty (tmp); 
2386:  MOVFF  29,FBE
....................    } 
....................     
....................    if(Semi==20) 
238A:  MOVF   2E,W
238C:  SUBLW  14
238E:  BNZ   2394
....................    { 
....................       set_pwm1_duty (ValorSemi); 
2390:  MOVFF  2F,FBE
....................    } 
.................... } 
2394:  GOTO   57E6 (RETURN)
.................... /* 
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
....................       { 
....................       delay_ms(500); 
....................          if(input(PIN_B0)) 
....................          { 
....................             lcd_init(); 
....................             intensidadpantalla(contraste); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
....................             delay_ms(2000); 
....................             printf(lcd_putc,"\f"); 
....................             inicio=1; 
....................             Menu=0; 
....................             ModoSleep=0; 
....................             delay_ms(500); 
....................          } 
....................       } 
.................... }*/ 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(25561); 
....................    //set_timer1(38286);  // 5 ms 
....................    //set_timer1(45536);  // 5 ms 
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   50,F
....................    tiempos2++; 
00C2:  INCF   53,F
00C4:  BTFSC  FD8.2
00C6:  INCF   54,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   52,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   51,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    35.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  35.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   51,F
00E0:  BTFSC  FD8.2
00E2:  INCF   52,F
....................    } 
....................     
....................    if(flag_iniciodamper==1) 
00E4:  BTFSS  35.7
00E6:  BRA    0104
....................    { 
....................       t_iniciodamper++; 
00E8:  INCF   55,F
00EA:  BTFSC  FD8.2
00EC:  INCF   56,F
....................       if(t_iniciodamper>=12000) 
00EE:  MOVF   56,W
00F0:  SUBLW  2D
00F2:  BC    0104
00F4:  XORLW  FF
00F6:  BNZ   00FE
00F8:  MOVF   55,W
00FA:  SUBLW  DF
00FC:  BC    0104
....................       { 
....................          estadomv=1;Motor_on; 
00FE:  BSF    34.1
0100:  BSF    F8A.7
0102:  BCF    F93.7
....................       } 
....................    } 
....................     
....................    if(tiempos2==20) 
0104:  MOVF   53,W
0106:  SUBLW  14
0108:  BNZ   0114
010A:  MOVF   54,F
010C:  BNZ   0114
....................    {tiempos2=0;Lectura2=1;} 
010E:  CLRF   54
0110:  CLRF   53
0112:  BSF    35.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
0114:  MOVF   4F,W
0116:  SUBLW  C8
0118:  BNZ   0144
011A:  MOVF   50,F
011C:  BNZ   0144
....................    {tiempos=0;tiemporeset++; 
011E:  CLRF   50
0120:  CLRF   4F
0122:  INCF   33,F
....................         Lectura=1; 
0124:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
0126:  BTFSS  34.1
0128:  BRA    0144
012A:  BTFSS  35.2
012C:  BRA    0144
....................          { 
....................             segundos++; 
012E:  INCF   30,F
....................           
....................          if(segundos==60) 
0130:  MOVF   30,W
0132:  SUBLW  3C
0134:  BNZ   013A
....................          { 
....................             segundos=0;minutos++; 
0136:  CLRF   30
0138:  INCF   31,F
....................          } 
....................           
....................          if(minutos==60) 
013A:  MOVF   31,W
013C:  SUBLW  3C
013E:  BNZ   0144
....................          { 
....................             minutos=0;horas++; 
0140:  CLRF   31
0142:  INCF   32,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
0144:  BCF    F9E.0
0146:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
107C:  MOVLB  1
107E:  DECFSZ x01,W
1080:  BRA    10BA
....................    {if(estadoalarma==0) 
1082:  BTFSC  34.2
1084:  BRA    109E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1086:  MOVLW  02
1088:  MOVWF  x16
108A:  MOVFF  102,117
108E:  MOVLB  0
1090:  RCALL  0A2C
1092:  MOVLW  4A
1094:  MOVWF  FF6
1096:  MOVLW  01
1098:  MOVWF  FF7
109A:  RCALL  0F2A
109C:  MOVLB  1
....................    if(estadoalarma==1) 
109E:  BTFSS  34.2
10A0:  BRA    10BA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
10A2:  MOVLW  02
10A4:  MOVWF  x16
10A6:  MOVFF  102,117
10AA:  MOVLB  0
10AC:  RCALL  0A2C
10AE:  MOVLW  5E
10B0:  MOVWF  FF6
10B2:  MOVLW  01
10B4:  MOVWF  FF7
10B6:  RCALL  0F2A
10B8:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
10BA:  MOVF   x01,W
10BC:  SUBLW  02
10BE:  BNZ   10D8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
10C0:  MOVLW  02
10C2:  MOVWF  x16
10C4:  MOVFF  102,117
10C8:  MOVLB  0
10CA:  RCALL  0A2C
10CC:  MOVLW  72
10CE:  MOVWF  FF6
10D0:  MOVLW  01
10D2:  MOVWF  FF7
10D4:  RCALL  0F2A
10D6:  MOVLB  1
....................     
....................    if(x==3) 
10D8:  MOVF   x01,W
10DA:  SUBLW  03
10DC:  BNZ   10F6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
10DE:  MOVLW  02
10E0:  MOVWF  x16
10E2:  MOVFF  102,117
10E6:  MOVLB  0
10E8:  RCALL  0A2C
10EA:  MOVLW  86
10EC:  MOVWF  FF6
10EE:  MOVLW  01
10F0:  MOVWF  FF7
10F2:  RCALL  0F2A
10F4:  MOVLB  1
....................     
....................    if(x==4) 
10F6:  MOVF   x01,W
10F8:  SUBLW  04
10FA:  BNZ   1114
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
10FC:  MOVLW  02
10FE:  MOVWF  x16
1100:  MOVFF  102,117
1104:  MOVLB  0
1106:  RCALL  0A2C
1108:  MOVLW  9A
110A:  MOVWF  FF6
110C:  MOVLW  01
110E:  MOVWF  FF7
1110:  RCALL  0F2A
1112:  MOVLB  1
....................     
....................    if(x==5) 
1114:  MOVF   x01,W
1116:  SUBLW  05
1118:  BNZ   1132
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
111A:  MOVLW  02
111C:  MOVWF  x16
111E:  MOVFF  102,117
1122:  MOVLB  0
1124:  RCALL  0A2C
1126:  MOVLW  AE
1128:  MOVWF  FF6
112A:  MOVLW  01
112C:  MOVWF  FF7
112E:  RCALL  0F2A
1130:  MOVLB  1
....................     
....................    if(x==6) 
1132:  MOVF   x01,W
1134:  SUBLW  06
1136:  BNZ   1150
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1138:  MOVLW  02
113A:  MOVWF  x16
113C:  MOVFF  102,117
1140:  MOVLB  0
1142:  RCALL  0A2C
1144:  MOVLW  C2
1146:  MOVWF  FF6
1148:  MOVLW  01
114A:  MOVWF  FF7
114C:  RCALL  0F2A
114E:  MOVLB  1
....................     
....................    if(x==7) 
1150:  MOVF   x01,W
1152:  SUBLW  07
1154:  BNZ   116E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1156:  MOVLW  02
1158:  MOVWF  x16
115A:  MOVFF  102,117
115E:  MOVLB  0
1160:  RCALL  0A2C
1162:  MOVLW  D6
1164:  MOVWF  FF6
1166:  MOVLW  01
1168:  MOVWF  FF7
116A:  RCALL  0F2A
116C:  MOVLB  1
....................     
....................    if(x==8) 
116E:  MOVF   x01,W
1170:  SUBLW  08
1172:  BNZ   118C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
1174:  MOVLW  02
1176:  MOVWF  x16
1178:  MOVFF  102,117
117C:  MOVLB  0
117E:  RCALL  0A2C
1180:  MOVLW  EA
1182:  MOVWF  FF6
1184:  MOVLW  01
1186:  MOVWF  FF7
1188:  RCALL  0F2A
118A:  MOVLB  1
.................... } 
118C:  MOVLB  0
118E:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1684:  MOVFF  100,FBE
.................... } 
1688:  RETLW  00
....................  
.................... void main () 
.................... { 
*
2398:  CLRF   FF8
239A:  BCF    FD0.7
239C:  BSF    07.7
239E:  CLRF   FEA
23A0:  CLRF   FE9
23A2:  MOVLW  64
23A4:  MOVWF  17
23A6:  MOVLW  09
23A8:  MOVWF  18
23AA:  MOVLW  02
23AC:  MOVWF  19
23AE:  MOVLW  0B
23B0:  MOVWF  1A
23B2:  MOVLW  02
23B4:  MOVWF  1B
23B6:  MOVLW  03
23B8:  MOVWF  1C
23BA:  MOVLW  02
23BC:  MOVWF  1D
23BE:  MOVWF  1E
23C0:  MOVLW  04
23C2:  MOVWF  1F
23C4:  MOVLW  0A
23C6:  MOVWF  20
23C8:  CLRF   21
23CA:  CLRF   22
23CC:  CLRF   23
23CE:  CLRF   24
23D0:  CLRF   25
23D2:  CLRF   26
23D4:  CLRF   27
23D6:  CLRF   28
23D8:  MOVWF  29
23DA:  CLRF   2A
23DC:  MOVWF  2B
23DE:  MOVWF  2C
23E0:  MOVWF  2D
23E2:  MOVWF  2E
23E4:  CLRF   2F
23E6:  CLRF   30
23E8:  CLRF   31
23EA:  CLRF   32
23EC:  CLRF   33
23EE:  BCF    34.0
23F0:  BCF    34.1
23F2:  BCF    34.2
23F4:  BCF    34.3
23F6:  BCF    34.4
23F8:  BCF    34.5
23FA:  BCF    34.6
23FC:  BCF    34.7
23FE:  BCF    35.0
2400:  BCF    35.1
2402:  BCF    35.2
2404:  CLRF   36
2406:  CLRF   45
2408:  CLRF   44
240A:  CLRF   43
240C:  CLRF   42
240E:  CLRF   49
2410:  CLRF   48
2412:  CLRF   47
2414:  CLRF   46
2416:  CLRF   4D
2418:  CLRF   4C
241A:  MOVLW  4B
241C:  MOVWF  4B
241E:  MOVLW  86
2420:  MOVWF  4A
2422:  BCF    35.4
2424:  BCF    35.5
2426:  BCF    35.6
2428:  BCF    35.7
242A:  BCF    4E.0
242C:  BCF    4E.1
242E:  BCF    4E.2
2430:  BCF    4E.3
2432:  CLRF   50
2434:  CLRF   4F
2436:  CLRF   52
2438:  CLRF   51
243A:  CLRF   54
243C:  CLRF   53
243E:  CLRF   56
2440:  CLRF   55
2442:  CLRF   5A
2444:  MOVLW  E0
2446:  MOVWF  59
2448:  MOVLW  5D
244A:  MOVWF  58
244C:  MOVLW  8A
244E:  MOVWF  57
2450:  CLRF   5E
2452:  MOVLW  C0
2454:  MOVWF  5D
2456:  MOVLW  28
2458:  MOVWF  5C
245A:  MOVLW  89
245C:  MOVWF  5B
245E:  MOVLW  33
2460:  MOVWF  x62
2462:  MOVLW  13
2464:  MOVWF  x61
2466:  MOVLW  15
2468:  MOVWF  x60
246A:  MOVLW  87
246C:  MOVWF  5F
246E:  CLRF   x66
2470:  CLRF   x65
2472:  CLRF   x64
2474:  CLRF   x63
2476:  CLRF   x6A
2478:  CLRF   x69
247A:  CLRF   x68
247C:  CLRF   x67
247E:  CLRF   x6E
2480:  CLRF   x6D
2482:  MOVLW  7A
2484:  MOVWF  x6C
2486:  MOVLW  88
2488:  MOVWF  x6B
248A:  CLRF   x72
248C:  CLRF   x71
248E:  CLRF   x70
2490:  CLRF   x6F
2492:  CLRF   x76
2494:  CLRF   x75
2496:  CLRF   x74
2498:  CLRF   x73
249A:  CLRF   x7A
249C:  CLRF   x79
249E:  CLRF   x78
24A0:  CLRF   x77
24A2:  MOVLW  19
24A4:  MOVWF  x7E
24A6:  MOVLW  53
24A8:  MOVWF  x7D
24AA:  MOVLW  18
24AC:  MOVWF  x7C
24AE:  MOVLW  68
24B0:  MOVWF  x7B
24B2:  MOVLW  E9
24B4:  MOVWF  x82
24B6:  MOVLW  BD
24B8:  MOVWF  x81
24BA:  MOVLW  C6
24BC:  MOVWF  x80
24BE:  MOVLW  71
24C0:  MOVWF  x7F
24C2:  MOVLW  BE
24C4:  MOVWF  x86
24C6:  MOVLW  96
24C8:  MOVWF  x85
24CA:  MOVLW  24
24CC:  MOVWF  x84
24CE:  MOVLW  7A
24D0:  MOVWF  x83
24D2:  MOVLW  F3
24D4:  MOVWF  x8A
24D6:  MOVLW  5A
24D8:  MOVWF  x89
24DA:  MOVLW  AB
24DC:  MOVWF  x88
24DE:  MOVLW  81
24E0:  MOVWF  x87
24E2:  CLRF   x8E
24E4:  CLRF   x8D
24E6:  CLRF   x8C
24E8:  CLRF   x8B
24EA:  CLRF   x92
24EC:  CLRF   x91
24EE:  CLRF   x90
24F0:  CLRF   x8F
24F2:  CLRF   x96
24F4:  CLRF   x95
24F6:  CLRF   x94
24F8:  CLRF   x93
24FA:  CLRF   x9A
24FC:  CLRF   x99
24FE:  CLRF   x98
2500:  CLRF   x97
2502:  CLRF   x9E
2504:  CLRF   x9D
2506:  CLRF   x9C
2508:  CLRF   x9B
250A:  CLRF   xA2
250C:  CLRF   xA1
250E:  CLRF   xA0
2510:  CLRF   x9F
2512:  MOVLW  8B
2514:  MOVWF  xA6
2516:  MOVLW  FD
2518:  MOVWF  xA5
251A:  MOVLW  65
251C:  MOVWF  xA4
251E:  MOVLW  7C
2520:  MOVWF  xA3
2522:  CLRF   xAA
2524:  CLRF   xA9
2526:  CLRF   xA8
2528:  CLRF   xA7
252A:  CLRF   xAE
252C:  CLRF   xAD
252E:  CLRF   xAC
2530:  CLRF   xAB
2532:  CLRF   xB2
2534:  CLRF   xB1
2536:  CLRF   xB0
2538:  CLRF   xAF
253A:  CLRF   xB6
253C:  CLRF   xB5
253E:  CLRF   xB4
2540:  CLRF   xB3
2542:  CLRF   xBA
2544:  CLRF   xB9
2546:  CLRF   xB8
2548:  CLRF   xB7
254A:  CLRF   xBE
254C:  CLRF   xBD
254E:  CLRF   xBC
2550:  CLRF   xBB
2552:  CLRF   xC2
2554:  CLRF   xC1
2556:  CLRF   xC0
2558:  MOVLW  7F
255A:  MOVWF  xBF
255C:  CLRF   xC6
255E:  CLRF   xC5
2560:  MOVLW  24
2562:  MOVWF  xC4
2564:  MOVLW  88
2566:  MOVWF  xC3
2568:  CLRF   xCA
256A:  CLRF   xC9
256C:  CLRF   xC8
256E:  CLRF   xC7
2570:  CLRF   xCE
2572:  CLRF   xCD
2574:  CLRF   xCC
2576:  CLRF   xCB
2578:  MOVF   FC1,W
257A:  ANDLW  C0
257C:  IORLW  0F
257E:  MOVWF  FC1
2580:  MOVLW  07
2582:  MOVWF  FB4
2584:  MOVLW  3E
2586:  MOVWF  37
2588:  MOVLW  20
258A:  MOVWF  38
258C:  MOVLW  5E
258E:  MOVWF  39
2590:  CLRF   3A
2592:  CLRF   3B
2594:  CLRF   3C
2596:  CLRF   3D
2598:  CLRF   3E
259A:  CLRF   3F
259C:  CLRF   40
259E:  CLRF   41
25A0:  CLRF   xCF
25A2:  CLRF   xD0
25A4:  CLRF   xD1
25A6:  CLRF   xD2
25A8:  CLRF   xD3
25AA:  CLRF   xD4
25AC:  CLRF   xD5
25AE:  CLRF   xD6
25B0:  CLRF   xD7
25B2:  CLRF   xD8
25B4:  CLRF   xD9
25B6:  CLRF   xDA
25B8:  CLRF   xDB
25BA:  CLRF   xDC
25BC:  CLRF   xDD
25BE:  CLRF   xDE
25C0:  CLRF   xDF
25C2:  CLRF   xE0
25C4:  CLRF   xE1
25C6:  CLRF   xE2
25C8:  CLRF   xE3
25CA:  CLRF   xE4
25CC:  CLRF   xE5
25CE:  CLRF   xE6
25D0:  CLRF   xE7
25D2:  CLRF   xE8
25D4:  CLRF   xE9
25D6:  CLRF   xEA
25D8:  CLRF   xEB
25DA:  CLRF   xEC
25DC:  CLRF   xED
25DE:  CLRF   xEE
25E0:  CLRF   xEF
25E2:  CLRF   xF0
25E4:  CLRF   xF1
25E6:  CLRF   xF2
25E8:  CLRF   xF3
25EA:  CLRF   xF4
25EC:  CLRF   xF5
25EE:  CLRF   xF6
25F0:  CLRF   xF7
25F2:  CLRF   xF8
25F4:  CLRF   xF9
25F6:  CLRF   xFA
25F8:  CLRF   xFB
25FA:  CLRF   xFC
25FC:  CLRF   xFD
25FE:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
2600:  MOVF   FC1,W
2602:  ANDLW  C0
2604:  IORLW  0B
2606:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2608:  BCF    FC0.0
260A:  BSF    FC0.1
260C:  BCF    FC0.2
260E:  BSF    FC0.7
2610:  BSF    FC2.0
....................    output_d(0);  
2612:  CLRF   F95
2614:  CLRF   F8C
....................    ModoSleep=1; 
2616:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2618:  MOVLW  85
261A:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
261C:  BSF    F9D.0
....................    //enable_interrupts(INT_EXT_L2H); 
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
261E:  MOVLW  00
2620:  IORLW  05
2622:  MOVWF  FCA
2624:  MOVLW  FF
2626:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
2628:  BCF    F94.2
262A:  BCF    F8B.2
262C:  BCF    F96.6
262E:  MOVLW  0C
2630:  MOVWF  FBD
2632:  CLRF   FB7
2634:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
2636:  MOVLW  C0
2638:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
263A:  CLRF   FBE
....................    lcd_init(); 
263C:  CALL   09C0
....................    printf(lcd_putc,"\f"); 
2640:  MOVLW  0C
2642:  MOVLB  1
2644:  MOVWF  x15
2646:  MOVLB  0
2648:  CALL   0A9E
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
264C:  MOVFF  FF2,100
2650:  BCF    FF2.7
2652:  CLRF   FA9
2654:  BCF    FA6.6
2656:  BCF    FA6.7
2658:  BSF    FA6.0
265A:  MOVF   FA8,W
265C:  MOVLB  1
265E:  BTFSC  x00.7
2660:  BSF    FF2.7
2662:  MOVWF  3E
2664:  MOVLW  14
2666:  MOVWF  x1B
2668:  MOVLB  0
266A:  CALL   0922
266E:  MOVFF  FF2,100
2672:  BCF    FF2.7
2674:  MOVLW  01
2676:  MOVWF  FA9
2678:  BCF    FA6.6
267A:  BCF    FA6.7
267C:  BSF    FA6.0
267E:  MOVF   FA8,W
2680:  MOVLB  1
2682:  BTFSC  x00.7
2684:  BSF    FF2.7
2686:  MOVWF  3F
2688:  MOVLW  14
268A:  MOVWF  x1B
268C:  MOVLB  0
268E:  CALL   0922
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
2692:  MOVFF  FF2,100
2696:  BCF    FF2.7
2698:  MOVLW  02
269A:  MOVWF  FA9
269C:  BCF    FA6.6
269E:  BCF    FA6.7
26A0:  BSF    FA6.0
26A2:  MOVF   FA8,W
26A4:  MOVLB  1
26A6:  BTFSC  x00.7
26A8:  BSF    FF2.7
26AA:  MOVWF  40
26AC:  MOVLW  14
26AE:  MOVWF  x1B
26B0:  MOVLB  0
26B2:  CALL   0922
26B6:  MOVFF  FF2,100
26BA:  BCF    FF2.7
26BC:  MOVLW  03
26BE:  MOVWF  FA9
26C0:  BCF    FA6.6
26C2:  BCF    FA6.7
26C4:  BSF    FA6.0
26C6:  MOVF   FA8,W
26C8:  MOVLB  1
26CA:  BTFSC  x00.7
26CC:  BSF    FF2.7
26CE:  MOVWF  41
26D0:  MOVLW  14
26D2:  MOVWF  x1B
26D4:  MOVLB  0
26D6:  CALL   0922
....................    estadoalarma=read_eeprom(5); 
26DA:  MOVFF  FF2,100
26DE:  BCF    FF2.7
26E0:  MOVLW  05
26E2:  MOVWF  FA9
26E4:  BCF    FA6.6
26E6:  BCF    FA6.7
26E8:  BSF    FA6.0
26EA:  MOVF   FA8,W
26EC:  MOVLB  1
26EE:  BTFSC  x00.7
26F0:  BSF    FF2.7
26F2:  MOVWF  01
26F4:  BCF    34.2
26F6:  BTFSC  01.0
26F8:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
26FA:  MOVFF  FF2,100
26FE:  BCF    FF2.7
2700:  MOVLW  0A
2702:  MOVWF  FA9
2704:  BCF    FA6.6
2706:  BCF    FA6.7
2708:  BSF    FA6.0
270A:  MOVF   FA8,W
270C:  BTFSC  x00.7
270E:  BSF    FF2.7
2710:  MOVWF  2D
2712:  MOVFF  FF2,100
2716:  BCF    FF2.7
2718:  MOVLW  0B
271A:  MOVWF  FA9
271C:  BCF    FA6.6
271E:  BCF    FA6.7
2720:  BSF    FA6.0
2722:  MOVF   FA8,W
2724:  BTFSC  x00.7
2726:  BSF    FF2.7
2728:  MOVWF  2C
272A:  MOVFF  FF2,100
272E:  BCF    FF2.7
2730:  MOVLW  0C
2732:  MOVWF  FA9
2734:  BCF    FA6.6
2736:  BCF    FA6.7
2738:  BSF    FA6.0
273A:  MOVF   FA8,W
273C:  BTFSC  x00.7
273E:  BSF    FF2.7
2740:  MOVWF  2E
2742:  MOVFF  FF2,100
2746:  BCF    FF2.7
2748:  MOVLW  0D
274A:  MOVWF  FA9
274C:  BCF    FA6.6
274E:  BCF    FA6.7
2750:  BSF    FA6.0
2752:  MOVF   FA8,W
2754:  BTFSC  x00.7
2756:  BSF    FF2.7
2758:  MOVWF  2F
275A:  MOVFF  2F,29
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
275E:  MOVFF  FF2,100
2762:  BCF    FF2.7
2764:  MOVLW  19
2766:  MOVWF  FA9
2768:  BCF    FA6.6
276A:  BCF    FA6.7
276C:  BSF    FA6.0
276E:  MOVF   FA8,W
2770:  BTFSC  x00.7
2772:  BSF    FF2.7
2774:  MOVWF  21
....................    Temporal=read_eeprom(26); 
2776:  MOVFF  FF2,100
277A:  BCF    FF2.7
277C:  MOVLW  1A
277E:  MOVWF  FA9
2780:  BCF    FA6.6
2782:  BCF    FA6.7
2784:  BSF    FA6.0
2786:  MOVF   FA8,W
2788:  BTFSC  x00.7
278A:  BSF    FF2.7
278C:  CLRF   x0A
278E:  MOVWF  x09
2790:  MOVLB  0
2792:  CALL   0B0A
2796:  MOVFF  03,AA
279A:  MOVFF  02,A9
279E:  MOVFF  01,A8
27A2:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
27A6:  MOVFF  AA,121
27AA:  MOVFF  A9,120
27AE:  MOVFF  A8,11F
27B2:  MOVFF  A7,11E
27B6:  MOVLB  1
27B8:  CLRF   x25
27BA:  CLRF   x24
27BC:  MOVLW  48
27BE:  MOVWF  x23
27C0:  MOVLW  85
27C2:  MOVWF  x22
27C4:  MOVLB  0
27C6:  CALL   0B40
27CA:  MOVFF  03,AA
27CE:  MOVFF  02,A9
27D2:  MOVFF  01,A8
27D6:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
27DA:  MOVLB  1
27DC:  CLRF   x0A
27DE:  MOVFF  21,109
27E2:  MOVLB  0
27E4:  CALL   0B0A
27E8:  BCF    FD8.1
27EA:  MOVFF  03,121
27EE:  MOVFF  02,120
27F2:  MOVFF  01,11F
27F6:  MOVFF  00,11E
27FA:  MOVFF  AA,125
27FE:  MOVFF  A9,124
2802:  MOVFF  A8,123
2806:  MOVFF  A7,122
280A:  CALL   0C9E
280E:  MOVFF  03,C2
2812:  MOVFF  02,C1
2816:  MOVFF  01,C0
281A:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
281E:  MOVFF  FF2,100
2822:  BCF    FF2.7
2824:  MOVLW  28
2826:  MOVWF  FA9
2828:  BCF    FA6.6
282A:  BCF    FA6.7
282C:  BSF    FA6.0
282E:  MOVF   FA8,W
2830:  MOVLB  1
2832:  BTFSC  x00.7
2834:  BSF    FF2.7
2836:  MOVWF  21
....................    Temporal=read_eeprom(41); 
2838:  MOVFF  FF2,100
283C:  BCF    FF2.7
283E:  MOVLW  29
2840:  MOVWF  FA9
2842:  BCF    FA6.6
2844:  BCF    FA6.7
2846:  BSF    FA6.0
2848:  MOVF   FA8,W
284A:  BTFSC  x00.7
284C:  BSF    FF2.7
284E:  CLRF   x0A
2850:  MOVWF  x09
2852:  MOVLB  0
2854:  CALL   0B0A
2858:  MOVFF  03,AA
285C:  MOVFF  02,A9
2860:  MOVFF  01,A8
2864:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
2868:  MOVFF  AA,121
286C:  MOVFF  A9,120
2870:  MOVFF  A8,11F
2874:  MOVFF  A7,11E
2878:  MOVLB  1
287A:  CLRF   x25
287C:  CLRF   x24
287E:  MOVLW  48
2880:  MOVWF  x23
2882:  MOVLW  85
2884:  MOVWF  x22
2886:  MOVLB  0
2888:  CALL   0B40
288C:  MOVFF  03,AA
2890:  MOVFF  02,A9
2894:  MOVFF  01,A8
2898:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
289C:  MOVLB  1
289E:  CLRF   x0A
28A0:  MOVFF  21,109
28A4:  MOVLB  0
28A6:  CALL   0B0A
28AA:  BCF    FD8.1
28AC:  MOVFF  03,121
28B0:  MOVFF  02,120
28B4:  MOVFF  01,11F
28B8:  MOVFF  00,11E
28BC:  MOVFF  AA,125
28C0:  MOVFF  A9,124
28C4:  MOVFF  A8,123
28C8:  MOVFF  A7,122
28CC:  CALL   0C9E
28D0:  MOVFF  03,45
28D4:  MOVFF  02,44
28D8:  MOVFF  01,43
28DC:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
28E0:  MOVFF  FF2,100
28E4:  BCF    FF2.7
28E6:  MOVLW  3C
28E8:  MOVWF  FA9
28EA:  BCF    FA6.6
28EC:  BCF    FA6.7
28EE:  BSF    FA6.0
28F0:  MOVF   FA8,W
28F2:  MOVLB  1
28F4:  BTFSC  x00.7
28F6:  BSF    FF2.7
28F8:  MOVWF  24
....................    Temporal1=read_eeprom(61); 
28FA:  MOVFF  FF2,100
28FE:  BCF    FF2.7
2900:  MOVLW  3D
2902:  MOVWF  FA9
2904:  BCF    FA6.6
2906:  BCF    FA6.7
2908:  BSF    FA6.0
290A:  MOVF   FA8,W
290C:  BTFSC  x00.7
290E:  BSF    FF2.7
2910:  CLRF   x0A
2912:  MOVWF  x09
2914:  MOVLB  0
2916:  CALL   0B0A
291A:  MOVFF  03,B6
291E:  MOVFF  02,B5
2922:  MOVFF  01,B4
2926:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
292A:  MOVFF  B6,121
292E:  MOVFF  B5,120
2932:  MOVFF  B4,11F
2936:  MOVFF  B3,11E
293A:  MOVLB  1
293C:  CLRF   x25
293E:  CLRF   x24
2940:  MOVLW  48
2942:  MOVWF  x23
2944:  MOVLW  85
2946:  MOVWF  x22
2948:  MOVLB  0
294A:  CALL   0B40
294E:  MOVFF  03,B6
2952:  MOVFF  02,B5
2956:  MOVFF  01,B4
295A:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
295E:  MOVLB  1
2960:  CLRF   x0A
2962:  MOVFF  24,109
2966:  MOVLB  0
2968:  CALL   0B0A
296C:  BCF    FD8.1
296E:  MOVFF  03,121
2972:  MOVFF  02,120
2976:  MOVFF  01,11F
297A:  MOVFF  00,11E
297E:  MOVFF  B6,125
2982:  MOVFF  B5,124
2986:  MOVFF  B4,123
298A:  MOVFF  B3,122
298E:  CALL   0C9E
2992:  MOVFF  03,BE
2996:  MOVFF  02,BD
299A:  MOVFF  01,BC
299E:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
29A2:  MOVFF  FF2,100
29A6:  BCF    FF2.7
29A8:  MOVLW  32
29AA:  MOVWF  FA9
29AC:  BCF    FA6.6
29AE:  BCF    FA6.7
29B0:  BSF    FA6.0
29B2:  MOVF   FA8,W
29B4:  MOVLB  1
29B6:  BTFSC  x00.7
29B8:  BSF    FF2.7
29BA:  MOVWF  2B
....................  
....................    MediaMovil=read_eeprom(42); 
29BC:  MOVFF  FF2,100
29C0:  BCF    FF2.7
29C2:  MOVLW  2A
29C4:  MOVWF  FA9
29C6:  BCF    FA6.6
29C8:  BCF    FA6.7
29CA:  BSF    FA6.0
29CC:  MOVF   FA8,W
29CE:  BTFSC  x00.7
29D0:  BSF    FF2.7
29D2:  MOVWF  2A
....................    if(MediaMovil>12) 
29D4:  MOVF   2A,W
29D6:  SUBLW  0C
29D8:  BC    29DE
....................    {MediaMovil=12;} 
29DA:  MOVLW  0C
29DC:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
29DE:  MOVF   2A,F
29E0:  BNZ   29E6
....................    {MediaMovil=1;} 
29E2:  MOVLW  01
29E4:  MOVWF  2A
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
29E6:  MOVFF  FF2,100
29EA:  BCF    FF2.7
29EC:  MOVLW  46
29EE:  MOVWF  FA9
29F0:  BCF    FA6.6
29F2:  BCF    FA6.7
29F4:  BSF    FA6.0
29F6:  MOVF   FA8,W
29F8:  BTFSC  x00.7
29FA:  BSF    FF2.7
29FC:  MOVWF  30
29FE:  MOVFF  FF2,100
2A02:  BCF    FF2.7
2A04:  MOVLW  47
2A06:  MOVWF  FA9
2A08:  BCF    FA6.6
2A0A:  BCF    FA6.7
2A0C:  BSF    FA6.0
2A0E:  MOVF   FA8,W
2A10:  BTFSC  x00.7
2A12:  BSF    FF2.7
2A14:  MOVWF  31
2A16:  MOVFF  FF2,100
2A1A:  BCF    FF2.7
2A1C:  MOVLW  48
2A1E:  MOVWF  FA9
2A20:  BCF    FA6.6
2A22:  BCF    FA6.7
2A24:  BSF    FA6.0
2A26:  MOVF   FA8,W
2A28:  BTFSC  x00.7
2A2A:  BSF    FF2.7
2A2C:  MOVWF  32
2A2E:  MOVFF  FF2,100
2A32:  BCF    FF2.7
2A34:  MOVLW  49
2A36:  MOVWF  FA9
2A38:  BCF    FA6.6
2A3A:  BCF    FA6.7
2A3C:  BSF    FA6.0
2A3E:  MOVF   FA8,W
2A40:  BTFSC  x00.7
2A42:  BSF    FF2.7
2A44:  MOVWF  01
2A46:  BCF    35.2
2A48:  BTFSC  01.0
2A4A:  BSF    35.2
....................    Menu=200; 
2A4C:  MOVLW  C8
2A4E:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
2A50:  MOVF   17,W
2A52:  SUBLW  C8
2A54:  BNZ   2B2E
....................       if(inicio==0) 
2A56:  BTFSC  35.4
2A58:  BRA    2B2C
....................       { 
....................       delay_ms(500); 
2A5A:  MOVLW  02
2A5C:  MOVWF  x00
2A5E:  MOVLW  FA
2A60:  MOVWF  x1B
2A62:  MOVLB  0
2A64:  CALL   0922
2A68:  MOVLB  1
2A6A:  DECFSZ x00,F
2A6C:  BRA    2A5E
....................          if(input(PIN_B0)) 
2A6E:  BSF    F93.0
2A70:  BTFSS  F81.0
2A72:  BRA    2B2C
....................          { 
....................             lcd_init(); 
2A74:  MOVLB  0
2A76:  CALL   09C0
....................             intensidadpantalla(contraste); 
2A7A:  MOVFF  20,100
2A7E:  CALL   0F16
....................             lcd_gotoxy(1,1); 
2A82:  MOVLW  01
2A84:  MOVLB  1
2A86:  MOVWF  x16
2A88:  MOVWF  x17
2A8A:  MOVLB  0
2A8C:  CALL   0A2C
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
2A90:  MOVLW  FE
2A92:  MOVWF  FF6
2A94:  MOVLW  01
2A96:  MOVWF  FF7
2A98:  CALL   0F2A
....................             lcd_gotoxy(1,2); 
2A9C:  MOVLW  01
2A9E:  MOVLB  1
2AA0:  MOVWF  x16
2AA2:  MOVLW  02
2AA4:  MOVWF  x17
2AA6:  MOVLB  0
2AA8:  CALL   0A2C
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
2AAC:  MOVLW  14
2AAE:  MOVWF  FF6
2AB0:  MOVLW  02
2AB2:  MOVWF  FF7
2AB4:  CALL   0F2A
....................             lcd_gotoxy(1,3); 
2AB8:  MOVLW  01
2ABA:  MOVLB  1
2ABC:  MOVWF  x16
2ABE:  MOVLW  03
2AC0:  MOVWF  x17
2AC2:  MOVLB  0
2AC4:  CALL   0A2C
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
2AC8:  MOVLW  2A
2ACA:  MOVWF  FF6
2ACC:  MOVLW  02
2ACE:  MOVWF  FF7
2AD0:  CALL   0F2A
....................             lcd_gotoxy(1,4); 
2AD4:  MOVLW  01
2AD6:  MOVLB  1
2AD8:  MOVWF  x16
2ADA:  MOVLW  04
2ADC:  MOVWF  x17
2ADE:  MOVLB  0
2AE0:  CALL   0A2C
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
2AE4:  MOVLW  40
2AE6:  MOVWF  FF6
2AE8:  MOVLW  02
2AEA:  MOVWF  FF7
2AEC:  CALL   0F2A
....................             delay_ms(2000); 
2AF0:  MOVLW  08
2AF2:  MOVLB  1
2AF4:  MOVWF  x00
2AF6:  MOVLW  FA
2AF8:  MOVWF  x1B
2AFA:  MOVLB  0
2AFC:  CALL   0922
2B00:  MOVLB  1
2B02:  DECFSZ x00,F
2B04:  BRA    2AF6
....................             printf(lcd_putc,"\f"); 
2B06:  MOVLW  0C
2B08:  MOVWF  x15
2B0A:  MOVLB  0
2B0C:  CALL   0A9E
....................             inicio=1; 
2B10:  BSF    35.4
....................             Menu=0; 
2B12:  CLRF   17
....................             ModoSleep=0; 
2B14:  BCF    35.3
....................             delay_ms(500); 
2B16:  MOVLW  02
2B18:  MOVLB  1
2B1A:  MOVWF  x00
2B1C:  MOVLW  FA
2B1E:  MOVWF  x1B
2B20:  MOVLB  0
2B22:  CALL   0922
2B26:  MOVLB  1
2B28:  DECFSZ x00,F
2B2A:  BRA    2B1C
....................          } 
....................       } 
....................    } 
2B2C:  BRA    2A50
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2B2E:  MOVF   17,F
2B30:  BTFSS  FD8.2
2B32:  BRA    2F92
....................    flag_latencia=1;set_pwm1_duty(0); 
2B34:  BSF    35.0
2B36:  CLRF   FBE
....................       if(Latencia==1) 
2B38:  BTFSS  35.1
2B3A:  BRA    2B4A
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2B3C:  MOVLW  0C
2B3E:  MOVWF  x15
2B40:  MOVLB  0
2B42:  CALL   0A9E
2B46:  RESET
2B48:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
2B4A:  MOVLW  01
2B4C:  MOVWF  x16
2B4E:  MOVWF  x17
2B50:  MOVLB  0
2B52:  CALL   0A2C
....................    printf(lcd_putc,"     Ingrese        "); 
2B56:  MOVLW  56
2B58:  MOVWF  FF6
2B5A:  MOVLW  02
2B5C:  MOVWF  FF7
2B5E:  CALL   0F2A
....................    lcd_gotoxy(1,2); 
2B62:  MOVLW  01
2B64:  MOVLB  1
2B66:  MOVWF  x16
2B68:  MOVLW  02
2B6A:  MOVWF  x17
2B6C:  MOVLB  0
2B6E:  CALL   0A2C
....................    printf(lcd_putc,"    Contraseña      "); 
2B72:  MOVLW  6C
2B74:  MOVWF  FF6
2B76:  MOVLW  02
2B78:  MOVWF  FF7
2B7A:  CALL   0F2A
....................    lcd_gotoxy(1,3); 
2B7E:  MOVLW  01
2B80:  MOVLB  1
2B82:  MOVWF  x16
2B84:  MOVLW  03
2B86:  MOVWF  x17
2B88:  MOVLB  0
2B8A:  CALL   0A2C
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2B8E:  MOVLW  82
2B90:  MOVWF  FF6
2B92:  MOVLW  02
2B94:  MOVWF  FF7
2B96:  MOVLW  0A
2B98:  MOVLB  1
2B9A:  MOVWF  x08
2B9C:  MOVLB  0
2B9E:  CALL   0F4A
2BA2:  MOVFF  3A,100
2BA6:  MOVLW  1F
2BA8:  MOVLB  1
2BAA:  MOVWF  x01
2BAC:  MOVLB  0
2BAE:  CALL   0F9E
2BB2:  MOVFF  3B,100
2BB6:  MOVLW  1F
2BB8:  MOVLB  1
2BBA:  MOVWF  x01
2BBC:  MOVLB  0
2BBE:  CALL   0F9E
2BC2:  MOVFF  3C,100
2BC6:  MOVLW  1F
2BC8:  MOVLB  1
2BCA:  MOVWF  x01
2BCC:  MOVLB  0
2BCE:  CALL   0F9E
2BD2:  MOVFF  3D,100
2BD6:  MOVLW  1F
2BD8:  MOVLB  1
2BDA:  MOVWF  x01
2BDC:  MOVLB  0
2BDE:  CALL   0F9E
2BE2:  MOVLW  20
2BE4:  MOVLB  1
2BE6:  MOVWF  x15
2BE8:  MOVLB  0
2BEA:  CALL   0A9E
2BEE:  MOVLW  20
2BF0:  MOVLB  1
2BF2:  MOVWF  x15
2BF4:  MOVLB  0
2BF6:  CALL   0A9E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2BFA:  BSF    F93.3
2BFC:  BTFSS  F81.3
2BFE:  BRA    2C2A
....................       {  if(Flanco == 0)  
2C00:  BTFSC  34.4
2C02:  BRA    2C28
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2C04:  MOVLW  0B
2C06:  SUBWF  1A,W
2C08:  CLRF   03
2C0A:  ADDLW  3A
2C0C:  MOVWF  FE9
2C0E:  MOVLW  00
2C10:  ADDWFC 03,W
2C12:  MOVWF  FEA
2C14:  INCF   FEF,F
2C16:  BSF    34.4
2C18:  MOVLW  1E
2C1A:  MOVLB  1
2C1C:  MOVWF  x1B
2C1E:  MOVLB  0
2C20:  CALL   0922
2C24:  CLRF   52
2C26:  CLRF   51
....................          else 
2C28:  BRA    2C2C
....................             {Flanco = 0;} 
2C2A:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2C2C:  BSF    F93.2
2C2E:  BTFSS  F81.2
2C30:  BRA    2C5C
....................       {  if(Flanco2 == 0)  
2C32:  BTFSC  34.6
2C34:  BRA    2C5A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2C36:  MOVLW  0B
2C38:  SUBWF  1A,W
2C3A:  CLRF   03
2C3C:  ADDLW  3A
2C3E:  MOVWF  FE9
2C40:  MOVLW  00
2C42:  ADDWFC 03,W
2C44:  MOVWF  FEA
2C46:  DECF   FEF,F
2C48:  BSF    34.6
2C4A:  MOVLW  1E
2C4C:  MOVLB  1
2C4E:  MOVWF  x1B
2C50:  MOVLB  0
2C52:  CALL   0922
2C56:  CLRF   52
2C58:  CLRF   51
....................          else 
2C5A:  BRA    2C5E
....................             {Flanco2 = 0;} 
2C5C:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2C5E:  BSF    F93.0
2C60:  BTFSS  F81.0
2C62:  BRA    2C8A
....................       {  if(Flanco1 == 0)  
2C64:  BTFSC  34.5
2C66:  BRA    2C88
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2C68:  BSF    34.5
2C6A:  INCF   1A,F
2C6C:  MOVLW  1E
2C6E:  MOVLB  1
2C70:  MOVWF  x1B
2C72:  MOVLB  0
2C74:  CALL   0922
2C78:  MOVLW  0C
2C7A:  MOVLB  1
2C7C:  MOVWF  x15
2C7E:  MOVLB  0
2C80:  CALL   0A9E
2C84:  CLRF   52
2C86:  CLRF   51
....................          else 
2C88:  BRA    2C8C
....................             {Flanco1 = 0;}    
2C8A:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2C8C:  BSF    F93.1
2C8E:  BTFSS  F81.1
2C90:  BRA    2CB8
....................       {  if(Flanco3 == 0)  
2C92:  BTFSC  34.7
2C94:  BRA    2CB6
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2C96:  BSF    34.7
2C98:  DECF   1A,F
2C9A:  MOVLW  1E
2C9C:  MOVLB  1
2C9E:  MOVWF  x1B
2CA0:  MOVLB  0
2CA2:  CALL   0922
2CA6:  MOVLW  0C
2CA8:  MOVLB  1
2CAA:  MOVWF  x15
2CAC:  MOVLB  0
2CAE:  CALL   0A9E
2CB2:  CLRF   52
2CB4:  CLRF   51
....................          else 
2CB6:  BRA    2CBA
....................             {Flanco3 = 0;}     
2CB8:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2CBA:  MOVLW  0B
2CBC:  SUBWF  1A,W
2CBE:  CLRF   03
2CC0:  ADDLW  3A
2CC2:  MOVWF  FE9
2CC4:  MOVLW  00
2CC6:  ADDWFC 03,W
2CC8:  MOVWF  FEA
2CCA:  BTFSC  FEF.7
2CCC:  BRA    2CD0
2CCE:  BRA    2CE4
....................        {clave[unidad-11]=9;} 
2CD0:  MOVLW  0B
2CD2:  SUBWF  1A,W
2CD4:  CLRF   03
2CD6:  ADDLW  3A
2CD8:  MOVWF  FE9
2CDA:  MOVLW  00
2CDC:  ADDWFC 03,W
2CDE:  MOVWF  FEA
2CE0:  MOVLW  09
2CE2:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2CE4:  MOVLW  0B
2CE6:  SUBWF  1A,W
2CE8:  CLRF   03
2CEA:  ADDLW  3A
2CEC:  MOVWF  FE9
2CEE:  MOVLW  00
2CF0:  ADDWFC 03,W
2CF2:  MOVWF  FEA
2CF4:  BTFSC  FEF.7
2CF6:  BRA    2D10
2CF8:  MOVF   FEF,W
2CFA:  SUBLW  09
2CFC:  BC    2D10
....................        {clave[unidad-11]=0;} 
2CFE:  MOVLW  0B
2D00:  SUBWF  1A,W
2D02:  CLRF   03
2D04:  ADDLW  3A
2D06:  MOVWF  FE9
2D08:  MOVLW  00
2D0A:  ADDWFC 03,W
2D0C:  MOVWF  FEA
2D0E:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2D10:  MOVF   1A,W
2D12:  SUBLW  0A
2D14:  BNC   2D1A
....................        {unidad=11;} 
2D16:  MOVLW  0B
2D18:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2D1A:  MOVFF  1A,116
2D1E:  MOVLW  04
2D20:  MOVLB  1
2D22:  MOVWF  x17
2D24:  MOVLB  0
2D26:  CALL   0A2C
....................        lcd_putc(t[2]); 
2D2A:  MOVFF  39,115
2D2E:  CALL   0A9E
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2D32:  MOVF   1A,W
2D34:  SUBLW  0E
2D36:  BTFSC  FD8.0
2D38:  BRA    2F66
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2D3A:  MOVF   3A,W
2D3C:  SUBLW  03
2D3E:  BNZ   2E22
2D40:  MOVF   3B,W
2D42:  SUBLW  08
2D44:  BNZ   2E22
2D46:  MOVF   3C,W
2D48:  SUBLW  09
2D4A:  BNZ   2E22
2D4C:  MOVF   3D,W
2D4E:  SUBLW  02
2D50:  BNZ   2E22
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2D52:  CLRF   FA9
2D54:  CLRF   FA8
2D56:  BCF    FA6.6
2D58:  BCF    FA6.7
2D5A:  BSF    FA6.2
2D5C:  MOVF   FF2,W
2D5E:  MOVWF  00
2D60:  BCF    FF2.7
2D62:  MOVLB  F
2D64:  MOVLW  55
2D66:  MOVWF  FA7
2D68:  MOVLW  AA
2D6A:  MOVWF  FA7
2D6C:  BSF    FA6.1
2D6E:  BTFSC  FA6.1
2D70:  BRA    2D6E
2D72:  BCF    FA6.2
2D74:  MOVF   00,W
2D76:  IORWF  FF2,F
2D78:  MOVLW  14
2D7A:  MOVLB  1
2D7C:  MOVWF  x1B
2D7E:  MOVLB  0
2D80:  CALL   0922
2D84:  MOVLW  01
2D86:  MOVWF  FA9
2D88:  CLRF   FA8
2D8A:  BCF    FA6.6
2D8C:  BCF    FA6.7
2D8E:  BSF    FA6.2
2D90:  MOVF   FF2,W
2D92:  MOVWF  00
2D94:  BCF    FF2.7
2D96:  MOVLB  F
2D98:  MOVLW  55
2D9A:  MOVWF  FA7
2D9C:  MOVLW  AA
2D9E:  MOVWF  FA7
2DA0:  BSF    FA6.1
2DA2:  BTFSC  FA6.1
2DA4:  BRA    2DA2
2DA6:  BCF    FA6.2
2DA8:  MOVF   00,W
2DAA:  IORWF  FF2,F
2DAC:  MOVLW  14
2DAE:  MOVLB  1
2DB0:  MOVWF  x1B
2DB2:  MOVLB  0
2DB4:  CALL   0922
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2DB8:  MOVLW  02
2DBA:  MOVWF  FA9
2DBC:  CLRF   FA8
2DBE:  BCF    FA6.6
2DC0:  BCF    FA6.7
2DC2:  BSF    FA6.2
2DC4:  MOVF   FF2,W
2DC6:  MOVWF  00
2DC8:  BCF    FF2.7
2DCA:  MOVLB  F
2DCC:  MOVLW  55
2DCE:  MOVWF  FA7
2DD0:  MOVLW  AA
2DD2:  MOVWF  FA7
2DD4:  BSF    FA6.1
2DD6:  BTFSC  FA6.1
2DD8:  BRA    2DD6
2DDA:  BCF    FA6.2
2DDC:  MOVF   00,W
2DDE:  IORWF  FF2,F
2DE0:  MOVLW  14
2DE2:  MOVLB  1
2DE4:  MOVWF  x1B
2DE6:  MOVLB  0
2DE8:  CALL   0922
2DEC:  MOVLW  03
2DEE:  MOVWF  FA9
2DF0:  CLRF   FA8
2DF2:  BCF    FA6.6
2DF4:  BCF    FA6.7
2DF6:  BSF    FA6.2
2DF8:  MOVF   FF2,W
2DFA:  MOVWF  00
2DFC:  BCF    FF2.7
2DFE:  MOVLB  F
2E00:  MOVLW  55
2E02:  MOVWF  FA7
2E04:  MOVLW  AA
2E06:  MOVWF  FA7
2E08:  BSF    FA6.1
2E0A:  BTFSC  FA6.1
2E0C:  BRA    2E0A
2E0E:  BCF    FA6.2
2E10:  MOVF   00,W
2E12:  IORWF  FF2,F
2E14:  MOVLW  14
2E16:  MOVLB  1
2E18:  MOVWF  x1B
2E1A:  MOVLB  0
2E1C:  CALL   0922
....................              reset_cpu();} 
2E20:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
2E22:  MOVF   3E,W
2E24:  SUBWF  3A,W
2E26:  BNZ   2EE0
2E28:  MOVF   3F,W
2E2A:  SUBWF  3B,W
2E2C:  BNZ   2EE0
2E2E:  MOVF   40,W
2E30:  SUBWF  3C,W
2E32:  BNZ   2EE0
2E34:  MOVF   41,W
2E36:  SUBWF  3D,W
2E38:  BNZ   2EE0
....................             {lcd_gotoxy(1,1); 
2E3A:  MOVLW  01
2E3C:  MOVLB  1
2E3E:  MOVWF  x16
2E40:  MOVWF  x17
2E42:  MOVLB  0
2E44:  CALL   0A2C
....................             printf(lcd_putc,"                   "); 
2E48:  MOVLW  98
2E4A:  MOVWF  FF6
2E4C:  MOVLW  02
2E4E:  MOVWF  FF7
2E50:  CALL   0F2A
....................             lcd_gotoxy(1,2); 
2E54:  MOVLW  01
2E56:  MOVLB  1
2E58:  MOVWF  x16
2E5A:  MOVLW  02
2E5C:  MOVWF  x17
2E5E:  MOVLB  0
2E60:  CALL   0A2C
....................             printf(lcd_putc,"     Contraseña    "); 
2E64:  MOVLW  AC
2E66:  MOVWF  FF6
2E68:  MOVLW  02
2E6A:  MOVWF  FF7
2E6C:  CALL   0F2A
....................             lcd_gotoxy(1,3); 
2E70:  MOVLW  01
2E72:  MOVLB  1
2E74:  MOVWF  x16
2E76:  MOVLW  03
2E78:  MOVWF  x17
2E7A:  MOVLB  0
2E7C:  CALL   0A2C
....................             printf(lcd_putc,"      Correcta     "); 
2E80:  MOVLW  C0
2E82:  MOVWF  FF6
2E84:  MOVLW  02
2E86:  MOVWF  FF7
2E88:  CALL   0F2A
....................             lcd_gotoxy(1,4); 
2E8C:  MOVLW  01
2E8E:  MOVLB  1
2E90:  MOVWF  x16
2E92:  MOVLW  04
2E94:  MOVWF  x17
2E96:  MOVLB  0
2E98:  CALL   0A2C
....................             printf(lcd_putc,"                   "); 
2E9C:  MOVLW  D4
2E9E:  MOVWF  FF6
2EA0:  MOVLW  02
2EA2:  MOVWF  FF7
2EA4:  CALL   0F2A
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
2EA8:  MOVLW  02
2EAA:  MOVLB  1
2EAC:  MOVWF  x00
2EAE:  MOVLW  FA
2EB0:  MOVWF  x1B
2EB2:  MOVLB  0
2EB4:  CALL   0922
2EB8:  MOVLB  1
2EBA:  DECFSZ x00,F
2EBC:  BRA    2EAE
2EBE:  MOVLW  14
2EC0:  MOVWF  17
2EC2:  MOVLW  0B
2EC4:  MOVWF  1A
2EC6:  MOVLW  0C
2EC8:  MOVWF  x15
2ECA:  MOVLB  0
2ECC:  CALL   0A9E
2ED0:  BSF    F8A.6
2ED2:  BCF    F93.6
2ED4:  BCF    35.0
2ED6:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
2ED8:  CLRF   52
2EDA:  CLRF   51
2EDC:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2EDE:  BRA    2F66
....................          {lcd_gotoxy(1,1); 
2EE0:  MOVLW  01
2EE2:  MOVLB  1
2EE4:  MOVWF  x16
2EE6:  MOVWF  x17
2EE8:  MOVLB  0
2EEA:  CALL   0A2C
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2EEE:  MOVLW  01
2EF0:  MOVLB  1
2EF2:  MOVWF  x16
2EF4:  MOVLW  02
2EF6:  MOVWF  x17
2EF8:  MOVLB  0
2EFA:  CALL   0A2C
....................             printf(lcd_putc,"     Contraseña    "); 
2EFE:  MOVLW  E8
2F00:  MOVWF  FF6
2F02:  MOVLW  02
2F04:  MOVWF  FF7
2F06:  CALL   0F2A
....................             lcd_gotoxy(1,3); 
2F0A:  MOVLW  01
2F0C:  MOVLB  1
2F0E:  MOVWF  x16
2F10:  MOVLW  03
2F12:  MOVWF  x17
2F14:  MOVLB  0
2F16:  CALL   0A2C
....................             printf(lcd_putc,"     Incorrecta    "); 
2F1A:  MOVLW  FC
2F1C:  MOVWF  FF6
2F1E:  MOVLW  02
2F20:  MOVWF  FF7
2F22:  CALL   0F2A
....................             lcd_gotoxy(1,4); 
2F26:  MOVLW  01
2F28:  MOVLB  1
2F2A:  MOVWF  x16
2F2C:  MOVLW  04
2F2E:  MOVWF  x17
2F30:  MOVLB  0
2F32:  CALL   0A2C
....................             printf(lcd_putc,"                   "); 
2F36:  MOVLW  10
2F38:  MOVWF  FF6
2F3A:  MOVLW  03
2F3C:  MOVWF  FF7
2F3E:  CALL   0F2A
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2F42:  MOVLW  02
2F44:  MOVLB  1
2F46:  MOVWF  x00
2F48:  MOVLW  FA
2F4A:  MOVWF  x1B
2F4C:  MOVLB  0
2F4E:  CALL   0922
2F52:  MOVLB  1
2F54:  DECFSZ x00,F
2F56:  BRA    2F48
2F58:  MOVLW  0B
2F5A:  MOVWF  1A
2F5C:  MOVLW  0C
2F5E:  MOVWF  x15
2F60:  MOVLB  0
2F62:  CALL   0A9E
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
2F66:  MOVF   1A,W
2F68:  SUBLW  0B
2F6A:  BC    2F8E
2F6C:  MOVF   1A,W
2F6E:  SUBLW  0D
2F70:  BNC   2F8E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2F72:  MOVLW  01
2F74:  SUBWF  1A,W
2F76:  MOVLB  1
2F78:  MOVWF  x00
2F7A:  MOVWF  x16
2F7C:  MOVLW  04
2F7E:  MOVWF  x17
2F80:  MOVLB  0
2F82:  CALL   0A2C
....................             lcd_putc(t[1]); 
2F86:  MOVFF  38,115
2F8A:  CALL   0A9E
....................           } 
....................  
....................    } 
2F8E:  MOVLB  1
2F90:  BRA    2B2E
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2F92:  DECFSZ 17,W
2F94:  BRA    31D0
....................       if(paso<0) 
2F96:  BTFSC  36.7
2F98:  BRA    2F9C
2F9A:  BRA    2F9E
....................         {paso=0;} 
2F9C:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
2F9E:  MOVLW  01
2FA0:  MOVWF  x16
2FA2:  MOVWF  x17
2FA4:  MOVLB  0
2FA6:  CALL   0A2C
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2FAA:  MOVLW  24
2FAC:  MOVWF  FF6
2FAE:  MOVLW  03
2FB0:  MOVWF  FF7
2FB2:  CALL   0F2A
....................     
....................    if(UP)//Si oprime hacia arriba 
2FB6:  BSF    F93.3
2FB8:  BTFSS  F81.3
2FBA:  BRA    2FDA
....................       {  if(Flanco == 0)  
2FBC:  BTFSC  34.4
2FBE:  BRA    2FD8
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
2FC0:  DECF   1D,F
2FC2:  DECF   1B,F
2FC4:  MOVLW  01
2FC6:  ADDWF  1B,W
2FC8:  MOVWF  1C
2FCA:  BSF    34.4
2FCC:  MOVLW  1E
2FCE:  MOVLB  1
2FD0:  MOVWF  x1B
2FD2:  MOVLB  0
2FD4:  CALL   0922
....................          else 
2FD8:  BRA    2FDC
....................             {Flanco = 0;} 
2FDA:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2FDC:  BSF    F93.2
2FDE:  BTFSS  F81.2
2FE0:  BRA    3000
....................       {  if(Flanco2 == 0)  
2FE2:  BTFSC  34.6
2FE4:  BRA    2FFE
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
2FE6:  INCF   1D,F
2FE8:  INCF   1B,F
2FEA:  MOVLW  01
2FEC:  SUBWF  1B,W
2FEE:  MOVWF  1C
2FF0:  BSF    34.6
2FF2:  MOVLW  1E
2FF4:  MOVLB  1
2FF6:  MOVWF  x1B
2FF8:  MOVLB  0
2FFA:  CALL   0922
....................          else 
2FFE:  BRA    3002
....................             {Flanco2 = 0;} 
3000:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
3002:  MOVF   1D,W
3004:  SUBWF  1F,W
3006:  BC    3018
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
3008:  INCF   36,F
300A:  MOVFF  1D,1F
300E:  MOVLW  02
3010:  SUBWF  1F,W
3012:  MOVWF  1E
3014:  MOVLW  04
3016:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
3018:  MOVF   1E,W
301A:  SUBWF  1D,W
301C:  BC    302E
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
301E:  DECF   36,F
3020:  MOVFF  1D,1E
3024:  MOVLW  02
3026:  ADDWF  1E,W
3028:  MOVWF  1F
302A:  MOVLW  02
302C:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
302E:  MOVF   1D,W
3030:  SUBWF  18,W
3032:  BC    3046
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
3034:  MOVFF  19,1D
3038:  MOVLW  02
303A:  MOVWF  1B
303C:  CLRF   36
303E:  MOVFF  1D,1E
3042:  ADDWF  1E,W
3044:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
3046:  MOVF   19,W
3048:  SUBWF  1D,W
304A:  BC    3062
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
304C:  MOVFF  18,1D
3050:  MOVLW  04
3052:  MOVWF  1B
3054:  SUBWF  18,W
3056:  MOVWF  36
3058:  MOVFF  1D,1F
305C:  MOVLW  02
305E:  SUBWF  1F,W
3060:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
3062:  MOVLW  01
3064:  ADDWF  36,W
3066:  MOVLB  1
3068:  MOVWF  x00
306A:  MOVWF  x01
306C:  MOVLW  02
306E:  MOVWF  x02
3070:  MOVLB  0
3072:  CALL   107C
....................         mensajes(2+paso,3); 
3076:  MOVLW  02
3078:  ADDWF  36,W
307A:  MOVLB  1
307C:  MOVWF  x00
307E:  MOVWF  x01
3080:  MOVLW  03
3082:  MOVWF  x02
3084:  MOVLB  0
3086:  CALL   107C
....................         mensajes(3+paso,4); 
308A:  MOVLW  03
308C:  ADDWF  36,W
308E:  MOVLB  1
3090:  MOVWF  x00
3092:  MOVWF  x01
3094:  MOVLW  04
3096:  MOVWF  x02
3098:  MOVLB  0
309A:  CALL   107C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
309E:  MOVLW  01
30A0:  MOVLB  1
30A2:  MOVWF  x16
30A4:  MOVFF  1B,117
30A8:  MOVLB  0
30AA:  CALL   0A2C
....................         lcd_putc(t[0]); 
30AE:  MOVFF  37,115
30B2:  CALL   0A9E
....................  
....................         if(Flecha==2) 
30B6:  MOVF   1B,W
30B8:  SUBLW  02
30BA:  BNZ   30EC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
30BC:  MOVLW  01
30BE:  MOVLB  1
30C0:  MOVWF  x16
30C2:  MOVLW  04
30C4:  MOVWF  x17
30C6:  MOVLB  0
30C8:  CALL   0A2C
....................             lcd_putc(t[1]); 
30CC:  MOVFF  38,115
30D0:  CALL   0A9E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
30D4:  MOVLW  01
30D6:  MOVLB  1
30D8:  MOVWF  x16
30DA:  MOVLW  03
30DC:  MOVWF  x17
30DE:  MOVLB  0
30E0:  CALL   0A2C
....................             lcd_putc(t[1]); 
30E4:  MOVFF  38,115
30E8:  CALL   0A9E
....................           } 
....................          
....................         if(Flecha==4) 
30EC:  MOVF   1B,W
30EE:  SUBLW  04
30F0:  BNZ   3122
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
30F2:  MOVLW  01
30F4:  MOVLB  1
30F6:  MOVWF  x16
30F8:  MOVLW  02
30FA:  MOVWF  x17
30FC:  MOVLB  0
30FE:  CALL   0A2C
....................             lcd_putc(t[1]); 
3102:  MOVFF  38,115
3106:  CALL   0A9E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
310A:  MOVLW  01
310C:  MOVLB  1
310E:  MOVWF  x16
3110:  MOVLW  03
3112:  MOVWF  x17
3114:  MOVLB  0
3116:  CALL   0A2C
....................             lcd_putc(t[1]); 
311A:  MOVFF  38,115
311E:  CALL   0A9E
....................           } 
....................          
....................         if(Flecha==3) 
3122:  MOVF   1B,W
3124:  SUBLW  03
3126:  BNZ   3158
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3128:  MOVLW  01
312A:  MOVLB  1
312C:  MOVWF  x16
312E:  MOVLW  04
3130:  MOVWF  x17
3132:  MOVLB  0
3134:  CALL   0A2C
....................             lcd_putc(t[1]); 
3138:  MOVFF  38,115
313C:  CALL   0A9E
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3140:  MOVLW  01
3142:  MOVLB  1
3144:  MOVWF  x16
3146:  MOVLW  02
3148:  MOVWF  x17
314A:  MOVLB  0
314C:  CALL   0A2C
....................             lcd_putc(t[1]); 
3150:  MOVFF  38,115
3154:  CALL   0A9E
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
3158:  BSF    F93.0
315A:  BTFSS  F81.0
315C:  BRA    319A
....................       {  if(Flanco1 == 0)  
315E:  BTFSC  34.5
3160:  BRA    3198
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
3162:  MOVFF  1D,17
3166:  MOVLW  03
3168:  MOVWF  1B
316A:  MOVLW  02
316C:  MOVLB  1
316E:  MOVWF  x00
3170:  MOVLW  FA
3172:  MOVWF  x1B
3174:  MOVLB  0
3176:  CALL   0922
317A:  MOVLB  1
317C:  DECFSZ x00,F
317E:  BRA    3170
3180:  MOVLW  0C
3182:  MOVWF  x15
3184:  MOVLB  0
3186:  CALL   0A9E
....................             if(Menu==6) 
318A:  MOVF   17,W
318C:  SUBLW  06
318E:  BNZ   3198
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
3190:  CLRF   3A
3192:  CLRF   3B
3194:  CLRF   3C
3196:  CLRF   3D
....................          else 
3198:  BRA    319C
....................             {Flanco1 = 0;}   
319A:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
319C:  BSF    F93.1
319E:  BTFSS  F81.1
31A0:  BRA    31CC
....................       {  if(Flanco3 == 0)  
31A2:  BTFSC  34.7
31A4:  BRA    31CA
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
31A6:  MOVLW  02
31A8:  MOVLB  1
31AA:  MOVWF  x00
31AC:  MOVLW  FA
31AE:  MOVWF  x1B
31B0:  MOVLB  0
31B2:  CALL   0922
31B6:  MOVLB  1
31B8:  DECFSZ x00,F
31BA:  BRA    31AC
31BC:  MOVLW  14
31BE:  MOVWF  17
31C0:  MOVLW  0C
31C2:  MOVWF  x15
31C4:  MOVLB  0
31C6:  CALL   0A9E
....................          else 
31CA:  BRA    31CE
....................             {Flanco3 = 0;}                
31CC:  BCF    34.7
31CE:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
31D0:  MOVF   17,W
31D2:  SUBLW  02
31D4:  BTFSS  FD8.2
31D6:  BRA    3324
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
31D8:  BTG    34.2
31DA:  BSF    34.5
31DC:  MOVLW  01
31DE:  MOVWF  17
31E0:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
31E2:  BTFSS  34.2
31E4:  BRA    3256
....................             {estadoalarma=1; 
31E6:  BSF    34.2
....................                lcd_gotoxy(1,1); 
31E8:  MOVLW  01
31EA:  MOVWF  x16
31EC:  MOVWF  x17
31EE:  MOVLB  0
31F0:  CALL   0A2C
....................                printf(lcd_putc,"                    "); 
31F4:  MOVLW  3A
31F6:  MOVWF  FF6
31F8:  MOVLW  03
31FA:  MOVWF  FF7
31FC:  CALL   0F2A
....................                lcd_gotoxy(1,2); 
3200:  MOVLW  01
3202:  MOVLB  1
3204:  MOVWF  x16
3206:  MOVLW  02
3208:  MOVWF  x17
320A:  MOVLB  0
320C:  CALL   0A2C
....................                printf(lcd_putc,"        Activo      "); 
3210:  MOVLW  50
3212:  MOVWF  FF6
3214:  MOVLW  03
3216:  MOVWF  FF7
3218:  CALL   0F2A
....................                lcd_gotoxy(1,3); 
321C:  MOVLW  01
321E:  MOVLB  1
3220:  MOVWF  x16
3222:  MOVLW  03
3224:  MOVWF  x17
3226:  MOVLB  0
3228:  CALL   0A2C
....................                printf(lcd_putc,"        Alarma      "); 
322C:  MOVLW  66
322E:  MOVWF  FF6
3230:  MOVLW  03
3232:  MOVWF  FF7
3234:  CALL   0F2A
....................                lcd_gotoxy(1,4); 
3238:  MOVLW  01
323A:  MOVLB  1
323C:  MOVWF  x16
323E:  MOVLW  04
3240:  MOVWF  x17
3242:  MOVLB  0
3244:  CALL   0A2C
....................                printf(lcd_putc,"                    ");} 
3248:  MOVLW  7C
324A:  MOVWF  FF6
324C:  MOVLW  03
324E:  MOVWF  FF7
3250:  CALL   0F2A
3254:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
3256:  BTFSC  34.2
3258:  BRA    32CA
....................             {estadoalarma=0; 
325A:  BCF    34.2
....................                lcd_gotoxy(1,1); 
325C:  MOVLW  01
325E:  MOVWF  x16
3260:  MOVWF  x17
3262:  MOVLB  0
3264:  CALL   0A2C
....................                printf(lcd_putc,"                    "); 
3268:  MOVLW  92
326A:  MOVWF  FF6
326C:  MOVLW  03
326E:  MOVWF  FF7
3270:  CALL   0F2A
....................                lcd_gotoxy(1,2); 
3274:  MOVLW  01
3276:  MOVLB  1
3278:  MOVWF  x16
327A:  MOVLW  02
327C:  MOVWF  x17
327E:  MOVLB  0
3280:  CALL   0A2C
....................                printf(lcd_putc,"      Desactivo     "); 
3284:  MOVLW  A8
3286:  MOVWF  FF6
3288:  MOVLW  03
328A:  MOVWF  FF7
328C:  CALL   0F2A
....................                lcd_gotoxy(1,3); 
3290:  MOVLW  01
3292:  MOVLB  1
3294:  MOVWF  x16
3296:  MOVLW  03
3298:  MOVWF  x17
329A:  MOVLB  0
329C:  CALL   0A2C
....................                printf(lcd_putc,"       Alarma       "); 
32A0:  MOVLW  BE
32A2:  MOVWF  FF6
32A4:  MOVLW  03
32A6:  MOVWF  FF7
32A8:  CALL   0F2A
....................                lcd_gotoxy(1,4); 
32AC:  MOVLW  01
32AE:  MOVLB  1
32B0:  MOVWF  x16
32B2:  MOVLW  04
32B4:  MOVWF  x17
32B6:  MOVLB  0
32B8:  CALL   0A2C
....................                printf(lcd_putc,"                    ");} 
32BC:  MOVLW  D4
32BE:  MOVWF  FF6
32C0:  MOVLW  03
32C2:  MOVWF  FF7
32C4:  CALL   0F2A
32C8:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
32CA:  MOVLW  00
32CC:  BTFSC  34.2
32CE:  MOVLW  01
32D0:  MOVWF  x00
32D2:  MOVLW  05
32D4:  MOVWF  FA9
32D6:  MOVFF  100,FA8
32DA:  BCF    FA6.6
32DC:  BCF    FA6.7
32DE:  BSF    FA6.2
32E0:  MOVF   FF2,W
32E2:  MOVWF  00
32E4:  BCF    FF2.7
32E6:  MOVLB  F
32E8:  MOVLW  55
32EA:  MOVWF  FA7
32EC:  MOVLW  AA
32EE:  MOVWF  FA7
32F0:  BSF    FA6.1
32F2:  BTFSC  FA6.1
32F4:  BRA    32F2
32F6:  BCF    FA6.2
32F8:  MOVF   00,W
32FA:  IORWF  FF2,F
32FC:  MOVLW  02
32FE:  MOVLB  1
3300:  MOVWF  x00
3302:  MOVLW  FA
3304:  MOVWF  x1B
3306:  MOVLB  0
3308:  CALL   0922
330C:  MOVLB  1
330E:  DECFSZ x00,F
3310:  BRA    3302
3312:  MOVLW  02
3314:  MOVWF  1B
3316:  MOVWF  1D
3318:  MOVLW  0C
331A:  MOVWF  x15
331C:  MOVLB  0
331E:  CALL   0A9E
3322:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
3324:  MOVF   17,W
3326:  SUBLW  03
3328:  BTFSS  FD8.2
332A:  BRA    35C4
....................    lcd_gotoxy(1,1); 
332C:  MOVLW  01
332E:  MOVWF  x16
3330:  MOVWF  x17
3332:  MOVLB  0
3334:  CALL   0A2C
....................    printf(lcd_putc,"  Duracion Actual   ");                           
3338:  MOVLW  EA
333A:  MOVWF  FF6
333C:  MOVLW  03
333E:  MOVWF  FF7
3340:  CALL   0F2A
....................    lcd_gotoxy(1,2);                                                   
3344:  MOVLW  01
3346:  MOVLB  1
3348:  MOVWF  x16
334A:  MOVLW  02
334C:  MOVWF  x17
334E:  MOVLB  0
3350:  CALL   0A2C
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
3354:  MOVLW  00
3356:  MOVWF  FF6
3358:  MOVLW  04
335A:  MOVWF  FF7
335C:  MOVLW  09
335E:  MOVLB  1
3360:  MOVWF  x08
3362:  MOVLB  0
3364:  CALL   0F4A
3368:  MOVFF  32,FF
336C:  MOVLW  01
336E:  MOVLB  1
3370:  MOVWF  x00
3372:  MOVLB  0
3374:  CALL   1190
3378:  MOVLW  3A
337A:  MOVLB  1
337C:  MOVWF  x15
337E:  MOVLB  0
3380:  CALL   0A9E
3384:  MOVFF  31,FF
3388:  MOVLW  01
338A:  MOVLB  1
338C:  MOVWF  x00
338E:  MOVLB  0
3390:  CALL   1190
3394:  MOVLW  3A
3396:  MOVLB  1
3398:  MOVWF  x15
339A:  MOVLB  0
339C:  CALL   0A9E
33A0:  MOVFF  30,FF
33A4:  MOVLW  01
33A6:  MOVLB  1
33A8:  MOVWF  x00
33AA:  MOVLB  0
33AC:  CALL   1190
33B0:  MOVLW  20
33B2:  MOVLB  1
33B4:  MOVWF  x15
33B6:  MOVLB  0
33B8:  CALL   0A9E
....................     
....................    if(flag_filtro==1) 
33BC:  BTFSS  35.2
33BE:  BRA    33DE
....................    { 
....................       lcd_gotoxy(1,3);                                                  
33C0:  MOVLW  01
33C2:  MOVLB  1
33C4:  MOVWF  x16
33C6:  MOVLW  03
33C8:  MOVWF  x17
33CA:  MOVLB  0
33CC:  CALL   0A2C
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
33D0:  MOVLW  1A
33D2:  MOVWF  FF6
33D4:  MOVLW  04
33D6:  MOVWF  FF7
33D8:  CALL   0F2A
....................    } 
....................    else 
33DC:  BRA    33FA
....................    { 
....................       lcd_gotoxy(1,3);                                                  
33DE:  MOVLW  01
33E0:  MOVLB  1
33E2:  MOVWF  x16
33E4:  MOVLW  03
33E6:  MOVWF  x17
33E8:  MOVLB  0
33EA:  CALL   0A2C
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
33EE:  MOVLW  30
33F0:  MOVWF  FF6
33F2:  MOVLW  04
33F4:  MOVWF  FF7
33F6:  CALL   0F2A
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
33FA:  MOVLW  01
33FC:  MOVLB  1
33FE:  MOVWF  x16
3400:  MOVLW  04
3402:  MOVWF  x17
3404:  MOVLB  0
3406:  CALL   0A2C
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
340A:  MOVLW  46
340C:  MOVWF  FF6
340E:  MOVLW  04
3410:  MOVWF  FF7
3412:  CALL   0F2A
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
3416:  BSF    F93.3
3418:  BTFSS  F81.3
341A:  BRA    351E
....................       {  delay_ms(200); 
341C:  MOVLW  C8
341E:  MOVLB  1
3420:  MOVWF  x1B
3422:  MOVLB  0
3424:  CALL   0922
....................          printf(lcd_putc,"\f"); 
3428:  MOVLW  0C
342A:  MOVLB  1
342C:  MOVWF  x15
342E:  MOVLB  0
3430:  CALL   0A9E
....................          lcd_gotoxy(1,2); 
3434:  MOVLW  01
3436:  MOVLB  1
3438:  MOVWF  x16
343A:  MOVLW  02
343C:  MOVWF  x17
343E:  MOVLB  0
3440:  CALL   0A2C
....................          printf(lcd_putc," Reset de tiempo "); 
3444:  MOVLW  5C
3446:  MOVWF  FF6
3448:  MOVLW  04
344A:  MOVWF  FF7
344C:  CALL   0F2A
....................          lcd_gotoxy(1,3); 
3450:  MOVLW  01
3452:  MOVLB  1
3454:  MOVWF  x16
3456:  MOVLW  03
3458:  MOVWF  x17
345A:  MOVLB  0
345C:  CALL   0A2C
....................          printf(lcd_putc,"     Exitoso     "); 
3460:  MOVLW  6E
3462:  MOVWF  FF6
3464:  MOVLW  04
3466:  MOVWF  FF7
3468:  CALL   0F2A
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
346C:  MOVLW  46
346E:  MOVWF  FA9
3470:  CLRF   FA8
3472:  BCF    FA6.6
3474:  BCF    FA6.7
3476:  BSF    FA6.2
3478:  MOVF   FF2,W
347A:  MOVWF  00
347C:  BCF    FF2.7
347E:  MOVLB  F
3480:  MOVLW  55
3482:  MOVWF  FA7
3484:  MOVLW  AA
3486:  MOVWF  FA7
3488:  BSF    FA6.1
348A:  BTFSC  FA6.1
348C:  BRA    348A
348E:  BCF    FA6.2
3490:  MOVF   00,W
3492:  IORWF  FF2,F
3494:  MOVLW  47
3496:  MOVWF  FA9
3498:  CLRF   FA8
349A:  BCF    FA6.6
349C:  BCF    FA6.7
349E:  BSF    FA6.2
34A0:  MOVF   FF2,W
34A2:  MOVWF  00
34A4:  BCF    FF2.7
34A6:  MOVLW  55
34A8:  MOVWF  FA7
34AA:  MOVLW  AA
34AC:  MOVWF  FA7
34AE:  BSF    FA6.1
34B0:  BTFSC  FA6.1
34B2:  BRA    34B0
34B4:  BCF    FA6.2
34B6:  MOVF   00,W
34B8:  IORWF  FF2,F
34BA:  MOVLW  48
34BC:  MOVWF  FA9
34BE:  CLRF   FA8
34C0:  BCF    FA6.6
34C2:  BCF    FA6.7
34C4:  BSF    FA6.2
34C6:  MOVF   FF2,W
34C8:  MOVWF  00
34CA:  BCF    FF2.7
34CC:  MOVLW  55
34CE:  MOVWF  FA7
34D0:  MOVLW  AA
34D2:  MOVWF  FA7
34D4:  BSF    FA6.1
34D6:  BTFSC  FA6.1
34D8:  BRA    34D6
34DA:  BCF    FA6.2
34DC:  MOVF   00,W
34DE:  IORWF  FF2,F
....................          delay_ms(700); 
34E0:  MOVLW  04
34E2:  MOVLB  1
34E4:  MOVWF  x00
34E6:  MOVLW  AF
34E8:  MOVWF  x1B
34EA:  MOVLB  0
34EC:  CALL   0922
34F0:  MOVLB  1
34F2:  DECFSZ x00,F
34F4:  BRA    34E6
....................          segundos=0;minutos=0;horas=0; 
34F6:  CLRF   30
34F8:  CLRF   31
34FA:  CLRF   32
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
34FC:  MOVLW  1E
34FE:  MOVWF  x1B
3500:  MOVLB  0
3502:  CALL   0922
3506:  MOVLW  01
3508:  MOVWF  17
350A:  CLRF   36
350C:  MOVLW  02
350E:  MOVWF  1B
3510:  MOVWF  1D
3512:  MOVLW  0C
3514:  MOVLB  1
3516:  MOVWF  x15
3518:  MOVLB  0
351A:  CALL   0A9E
....................       } 
....................        
....................       if(RIGHT) 
351E:  BSF    F93.0
3520:  BTFSS  F81.0
3522:  BRA    3586
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
3524:  BTG    35.2
3526:  MOVLW  00
3528:  BTFSC  35.2
352A:  MOVLW  01
352C:  MOVLB  1
352E:  MOVWF  x00
3530:  MOVLW  49
3532:  MOVWF  FA9
3534:  MOVFF  100,FA8
3538:  BCF    FA6.6
353A:  BCF    FA6.7
353C:  BSF    FA6.2
353E:  MOVF   FF2,W
3540:  MOVWF  00
3542:  BCF    FF2.7
3544:  MOVLB  F
3546:  MOVLW  55
3548:  MOVWF  FA7
354A:  MOVLW  AA
354C:  MOVWF  FA7
354E:  BSF    FA6.1
3550:  BTFSC  FA6.1
3552:  BRA    3550
3554:  BCF    FA6.2
3556:  MOVF   00,W
3558:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
355A:  MOVLW  02
355C:  MOVLB  1
355E:  MOVWF  x00
3560:  MOVLW  FA
3562:  MOVWF  x1B
3564:  MOVLB  0
3566:  CALL   0922
356A:  MOVLB  1
356C:  DECFSZ x00,F
356E:  BRA    3560
3570:  MOVLW  01
3572:  MOVWF  17
3574:  CLRF   36
3576:  MOVLW  02
3578:  MOVWF  1B
357A:  MOVWF  1D
357C:  MOVLW  0C
357E:  MOVWF  x15
3580:  MOVLB  0
3582:  CALL   0A9E
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
3586:  BSF    F93.1
3588:  BTFSS  F81.1
358A:  BRA    35C0
....................       {  if(Flanco3 == 0)  
358C:  BTFSC  34.7
358E:  BRA    35BE
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
3590:  BSF    34.7
3592:  MOVLW  02
3594:  MOVLB  1
3596:  MOVWF  x00
3598:  MOVLW  FA
359A:  MOVWF  x1B
359C:  MOVLB  0
359E:  CALL   0922
35A2:  MOVLB  1
35A4:  DECFSZ x00,F
35A6:  BRA    3598
35A8:  MOVLW  01
35AA:  MOVWF  17
35AC:  CLRF   36
35AE:  MOVLW  02
35B0:  MOVWF  1B
35B2:  MOVWF  1D
35B4:  MOVLW  0C
35B6:  MOVWF  x15
35B8:  MOVLB  0
35BA:  CALL   0A9E
....................          else 
35BE:  BRA    35C2
....................             {Flanco3 = 0;}       
35C0:  BCF    34.7
35C2:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
35C4:  MOVF   17,W
35C6:  SUBLW  04
35C8:  BTFSS  FD8.2
35CA:  BRA    38E0
....................    lcd_gotoxy(1,2); 
35CC:  MOVLW  01
35CE:  MOVWF  x16
35D0:  MOVLW  02
35D2:  MOVWF  x17
35D4:  MOVLB  0
35D6:  CALL   0A2C
....................    printf(lcd_putc,"      Setpoint      "); 
35DA:  MOVLW  80
35DC:  MOVWF  FF6
35DE:  MOVLW  04
35E0:  MOVWF  FF7
35E2:  CALL   0F2A
....................    lcd_gotoxy(1,3); 
35E6:  MOVLW  01
35E8:  MOVLB  1
35EA:  MOVWF  x16
35EC:  MOVLW  03
35EE:  MOVWF  x17
35F0:  MOVLB  0
35F2:  CALL   0A2C
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
35F6:  MOVLW  96
35F8:  MOVWF  FF6
35FA:  MOVLW  04
35FC:  MOVWF  FF7
35FE:  MOVLW  07
3600:  MOVLB  1
3602:  MOVWF  x08
3604:  MOVLB  0
3606:  CALL   0F4A
360A:  MOVLW  89
360C:  MOVWF  FE9
360E:  MOVFF  45,10B
3612:  MOVFF  44,10A
3616:  MOVFF  43,109
361A:  MOVFF  42,108
361E:  MOVLW  02
3620:  MOVLB  1
3622:  MOVWF  x0C
3624:  MOVLB  0
3626:  CALL   13C4
362A:  MOVLW  20
362C:  MOVLB  1
362E:  MOVWF  x15
3630:  MOVLB  0
3632:  CALL   0A9E
3636:  MOVLW  20
3638:  MOVLB  1
363A:  MOVWF  x15
363C:  MOVLB  0
363E:  CALL   0A9E
3642:  MOVLW  20
3644:  MOVLB  1
3646:  MOVWF  x15
3648:  MOVLB  0
364A:  CALL   0A9E
....................     
....................    if(setpoint>2.0) 
364E:  MOVLB  1
3650:  CLRF   x1D
3652:  CLRF   x1C
3654:  CLRF   x1B
3656:  MOVLW  80
3658:  MOVWF  x1A
365A:  MOVFF  45,121
365E:  MOVFF  44,120
3662:  MOVFF  43,11F
3666:  MOVFF  42,11E
366A:  MOVLB  0
366C:  CALL   1576
3670:  BNC   367C
....................    {setpoint=2.0;} 
3672:  CLRF   45
3674:  CLRF   44
3676:  CLRF   43
3678:  MOVLW  80
367A:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
367C:  MOVFF  45,11D
3680:  MOVFF  44,11C
3684:  MOVFF  43,11B
3688:  MOVFF  42,11A
368C:  MOVLB  1
368E:  CLRF   x21
3690:  CLRF   x20
3692:  CLRF   x1F
3694:  MOVLW  7E
3696:  MOVWF  x1E
3698:  MOVLB  0
369A:  CALL   1576
369E:  BNC   36AA
....................    {setpoint=0.5;} 
36A0:  CLRF   45
36A2:  CLRF   44
36A4:  CLRF   43
36A6:  MOVLW  7E
36A8:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
36AA:  BSF    F93.3
36AC:  BTFSS  F81.3
36AE:  BRA    36FE
....................       {  if(Flanco == 0)  
36B0:  BTFSC  34.4
36B2:  BRA    36FC
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
36B4:  BCF    FD8.1
36B6:  MOVFF  45,121
36BA:  MOVFF  44,120
36BE:  MOVFF  43,11F
36C2:  MOVFF  42,11E
36C6:  MOVLW  CD
36C8:  MOVLB  1
36CA:  MOVWF  x25
36CC:  MOVLW  CC
36CE:  MOVWF  x24
36D0:  MOVLW  4C
36D2:  MOVWF  x23
36D4:  MOVLW  7B
36D6:  MOVWF  x22
36D8:  MOVLB  0
36DA:  CALL   0C9E
36DE:  MOVFF  03,45
36E2:  MOVFF  02,44
36E6:  MOVFF  01,43
36EA:  MOVFF  00,42
36EE:  BSF    34.4
36F0:  MOVLW  1E
36F2:  MOVLB  1
36F4:  MOVWF  x1B
36F6:  MOVLB  0
36F8:  CALL   0922
....................          else 
36FC:  BRA    3700
....................             {Flanco = 0;} 
36FE:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3700:  BSF    F93.2
3702:  BTFSS  F81.2
3704:  BRA    3754
....................       {  if(Flanco2 == 0)  
3706:  BTFSC  34.6
3708:  BRA    3752
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
370A:  BSF    FD8.1
370C:  MOVFF  45,121
3710:  MOVFF  44,120
3714:  MOVFF  43,11F
3718:  MOVFF  42,11E
371C:  MOVLW  CD
371E:  MOVLB  1
3720:  MOVWF  x25
3722:  MOVLW  CC
3724:  MOVWF  x24
3726:  MOVLW  4C
3728:  MOVWF  x23
372A:  MOVLW  7B
372C:  MOVWF  x22
372E:  MOVLB  0
3730:  CALL   0C9E
3734:  MOVFF  03,45
3738:  MOVFF  02,44
373C:  MOVFF  01,43
3740:  MOVFF  00,42
3744:  BSF    34.6
3746:  MOVLW  1E
3748:  MOVLB  1
374A:  MOVWF  x1B
374C:  MOVLB  0
374E:  CALL   0922
....................          else 
3752:  BRA    3756
....................             {Flanco2 = 0;} 
3754:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3756:  BSF    F93.0
3758:  BTFSS  F81.0
375A:  BRA    389E
....................       {  if(Flanco1 == 0)  
375C:  BTFSC  34.5
375E:  BRA    389C
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3760:  MOVLW  01
3762:  MOVWF  17
3764:  CLRF   36
3766:  MOVLW  02
3768:  MOVWF  1B
376A:  MOVWF  1D
376C:  MOVLW  0B
376E:  MOVWF  1A
3770:  MOVLW  02
3772:  MOVLB  1
3774:  MOVWF  x00
3776:  MOVLW  FA
3778:  MOVWF  x1B
377A:  MOVLB  0
377C:  CALL   0922
3780:  MOVLB  1
3782:  DECFSZ x00,F
3784:  BRA    3776
3786:  MOVLW  0C
3788:  MOVWF  x15
378A:  MOVLB  0
378C:  CALL   0A9E
....................             Temporal=setpoint; 
3790:  MOVFF  45,AA
3794:  MOVFF  44,A9
3798:  MOVFF  43,A8
379C:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
37A0:  MOVFF  45,102
37A4:  MOVFF  44,101
37A8:  MOVFF  43,100
37AC:  MOVFF  42,FF
37B0:  CALL   15F0
37B4:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
37B8:  MOVLB  1
37BA:  CLRF   x0A
37BC:  MOVFF  21,109
37C0:  MOVLB  0
37C2:  CALL   0B0A
37C6:  BSF    FD8.1
37C8:  MOVFF  AA,121
37CC:  MOVFF  A9,120
37D0:  MOVFF  A8,11F
37D4:  MOVFF  A7,11E
37D8:  MOVFF  03,125
37DC:  MOVFF  02,124
37E0:  MOVFF  01,123
37E4:  MOVFF  00,122
37E8:  CALL   0C9E
37EC:  MOVFF  03,AA
37F0:  MOVFF  02,A9
37F4:  MOVFF  01,A8
37F8:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
37FC:  MOVFF  AA,11D
3800:  MOVFF  A9,11C
3804:  MOVFF  A8,11B
3808:  MOVFF  A7,11A
380C:  MOVLB  1
380E:  CLRF   x21
3810:  CLRF   x20
3812:  MOVLW  48
3814:  MOVWF  x1F
3816:  MOVLW  85
3818:  MOVWF  x1E
381A:  MOVLB  0
381C:  CALL   120A
3820:  MOVFF  03,AE
3824:  MOVFF  02,AD
3828:  MOVFF  01,AC
382C:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
3830:  MOVFF  AE,102
3834:  MOVFF  AD,101
3838:  MOVFF  AC,100
383C:  MOVFF  AB,FF
3840:  CALL   15F0
3844:  MOVFF  01,23
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
3848:  MOVLW  28
384A:  MOVWF  FA9
384C:  MOVFF  21,FA8
3850:  BCF    FA6.6
3852:  BCF    FA6.7
3854:  BSF    FA6.2
3856:  MOVF   FF2,W
3858:  MOVWF  00
385A:  BCF    FF2.7
385C:  MOVLB  F
385E:  MOVLW  55
3860:  MOVWF  FA7
3862:  MOVLW  AA
3864:  MOVWF  FA7
3866:  BSF    FA6.1
3868:  BTFSC  FA6.1
386A:  BRA    3868
386C:  BCF    FA6.2
386E:  MOVF   00,W
3870:  IORWF  FF2,F
3872:  MOVLW  29
3874:  MOVWF  FA9
3876:  MOVFF  23,FA8
387A:  BCF    FA6.6
387C:  BCF    FA6.7
387E:  BSF    FA6.2
3880:  MOVF   FF2,W
3882:  MOVWF  00
3884:  BCF    FF2.7
3886:  MOVLW  55
3888:  MOVWF  FA7
388A:  MOVLW  AA
388C:  MOVWF  FA7
388E:  BSF    FA6.1
3890:  BTFSC  FA6.1
3892:  BRA    3890
3894:  BCF    FA6.2
3896:  MOVF   00,W
3898:  IORWF  FF2,F
389A:  MOVLB  0
....................             }} 
....................          else 
389C:  BRA    38A0
....................             {Flanco1 = 0;}    
389E:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
38A0:  BSF    F93.1
38A2:  BTFSS  F81.1
38A4:  BRA    38DC
....................       {  if(Flanco3 == 0)  
38A6:  BTFSC  34.7
38A8:  BRA    38DA
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
38AA:  MOVLW  01
38AC:  MOVWF  17
38AE:  CLRF   36
38B0:  MOVLW  02
38B2:  MOVWF  1B
38B4:  MOVWF  1D
38B6:  MOVLW  0B
38B8:  MOVWF  1A
38BA:  MOVLW  02
38BC:  MOVLB  1
38BE:  MOVWF  x00
38C0:  MOVLW  FA
38C2:  MOVWF  x1B
38C4:  MOVLB  0
38C6:  CALL   0922
38CA:  MOVLB  1
38CC:  DECFSZ x00,F
38CE:  BRA    38C0
38D0:  MOVLW  0C
38D2:  MOVWF  x15
38D4:  MOVLB  0
38D6:  CALL   0A9E
....................          else 
38DA:  BRA    38DE
....................             {Flanco3 = 0;}     
38DC:  BCF    34.7
38DE:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
38E0:  MOVF   17,W
38E2:  SUBLW  05
38E4:  BTFSS  FD8.2
38E6:  BRA    3C58
....................    lcd_gotoxy(1,1); 
38E8:  MOVLW  01
38EA:  MOVWF  x16
38EC:  MOVWF  x17
38EE:  MOVLB  0
38F0:  CALL   0A2C
....................    printf(lcd_putc,"      Ingrese       "); 
38F4:  MOVLW  A6
38F6:  MOVWF  FF6
38F8:  MOVLW  04
38FA:  MOVWF  FF7
38FC:  CALL   0F2A
....................    lcd_gotoxy(1,2); 
3900:  MOVLW  01
3902:  MOVLB  1
3904:  MOVWF  x16
3906:  MOVLW  02
3908:  MOVWF  x17
390A:  MOVLB  0
390C:  CALL   0A2C
....................    printf(lcd_putc," Contraseña Actual  "); 
3910:  MOVLW  BC
3912:  MOVWF  FF6
3914:  MOVLW  04
3916:  MOVWF  FF7
3918:  CALL   0F2A
....................    lcd_gotoxy(1,3); 
391C:  MOVLW  01
391E:  MOVLB  1
3920:  MOVWF  x16
3922:  MOVLW  03
3924:  MOVWF  x17
3926:  MOVLB  0
3928:  CALL   0A2C
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
392C:  MOVLW  D2
392E:  MOVWF  FF6
3930:  MOVLW  04
3932:  MOVWF  FF7
3934:  MOVLW  0A
3936:  MOVLB  1
3938:  MOVWF  x08
393A:  MOVLB  0
393C:  CALL   0F4A
3940:  MOVFF  3A,100
3944:  MOVLW  1F
3946:  MOVLB  1
3948:  MOVWF  x01
394A:  MOVLB  0
394C:  CALL   0F9E
3950:  MOVFF  3B,100
3954:  MOVLW  1F
3956:  MOVLB  1
3958:  MOVWF  x01
395A:  MOVLB  0
395C:  CALL   0F9E
3960:  MOVFF  3C,100
3964:  MOVLW  1F
3966:  MOVLB  1
3968:  MOVWF  x01
396A:  MOVLB  0
396C:  CALL   0F9E
3970:  MOVFF  3D,100
3974:  MOVLW  1F
3976:  MOVLB  1
3978:  MOVWF  x01
397A:  MOVLB  0
397C:  CALL   0F9E
3980:  MOVLW  20
3982:  MOVLB  1
3984:  MOVWF  x15
3986:  MOVLB  0
3988:  CALL   0A9E
398C:  MOVLW  20
398E:  MOVLB  1
3990:  MOVWF  x15
3992:  MOVLB  0
3994:  CALL   0A9E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3998:  BSF    F93.3
399A:  BTFSS  F81.3
399C:  BRA    39C4
....................       {  if(Flanco == 0)  
399E:  BTFSC  34.4
39A0:  BRA    39C2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
39A2:  MOVLW  0B
39A4:  SUBWF  1A,W
39A6:  CLRF   03
39A8:  ADDLW  3A
39AA:  MOVWF  FE9
39AC:  MOVLW  00
39AE:  ADDWFC 03,W
39B0:  MOVWF  FEA
39B2:  INCF   FEF,F
39B4:  BSF    34.4
39B6:  MOVLW  1E
39B8:  MOVLB  1
39BA:  MOVWF  x1B
39BC:  MOVLB  0
39BE:  CALL   0922
....................          else 
39C2:  BRA    39C6
....................             {Flanco = 0;} 
39C4:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
39C6:  BSF    F93.2
39C8:  BTFSS  F81.2
39CA:  BRA    39F2
....................       {  if(Flanco2 == 0)  
39CC:  BTFSC  34.6
39CE:  BRA    39F0
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
39D0:  MOVLW  0B
39D2:  SUBWF  1A,W
39D4:  CLRF   03
39D6:  ADDLW  3A
39D8:  MOVWF  FE9
39DA:  MOVLW  00
39DC:  ADDWFC 03,W
39DE:  MOVWF  FEA
39E0:  DECF   FEF,F
39E2:  BSF    34.6
39E4:  MOVLW  1E
39E6:  MOVLB  1
39E8:  MOVWF  x1B
39EA:  MOVLB  0
39EC:  CALL   0922
....................          else 
39F0:  BRA    39F4
....................             {Flanco2 = 0;} 
39F2:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
39F4:  BSF    F93.0
39F6:  BTFSS  F81.0
39F8:  BRA    3A24
....................       {  if(Flanco1 == 0)  
39FA:  BTFSC  34.5
39FC:  BRA    3A22
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
39FE:  BSF    34.5
3A00:  INCF   1A,F
3A02:  MOVLW  02
3A04:  MOVLB  1
3A06:  MOVWF  x00
3A08:  MOVLW  FA
3A0A:  MOVWF  x1B
3A0C:  MOVLB  0
3A0E:  CALL   0922
3A12:  MOVLB  1
3A14:  DECFSZ x00,F
3A16:  BRA    3A08
3A18:  MOVLW  0C
3A1A:  MOVWF  x15
3A1C:  MOVLB  0
3A1E:  CALL   0A9E
....................          else 
3A22:  BRA    3A26
....................             {Flanco1 = 0;}    
3A24:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3A26:  BSF    F93.1
3A28:  BTFSS  F81.1
3A2A:  BRA    3A56
....................       {  if(Flanco3 == 0)  
3A2C:  BTFSC  34.7
3A2E:  BRA    3A54
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
3A30:  BSF    34.7
3A32:  DECF   1A,F
3A34:  MOVLW  02
3A36:  MOVLB  1
3A38:  MOVWF  x00
3A3A:  MOVLW  FA
3A3C:  MOVWF  x1B
3A3E:  MOVLB  0
3A40:  CALL   0922
3A44:  MOVLB  1
3A46:  DECFSZ x00,F
3A48:  BRA    3A3A
3A4A:  MOVLW  0C
3A4C:  MOVWF  x15
3A4E:  MOVLB  0
3A50:  CALL   0A9E
....................          else 
3A54:  BRA    3A58
....................             {Flanco3 = 0;}     
3A56:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3A58:  MOVLW  0B
3A5A:  SUBWF  1A,W
3A5C:  CLRF   03
3A5E:  ADDLW  3A
3A60:  MOVWF  FE9
3A62:  MOVLW  00
3A64:  ADDWFC 03,W
3A66:  MOVWF  FEA
3A68:  BTFSC  FEF.7
3A6A:  BRA    3A6E
3A6C:  BRA    3A82
....................        {clave[unidad-11]=9;} 
3A6E:  MOVLW  0B
3A70:  SUBWF  1A,W
3A72:  CLRF   03
3A74:  ADDLW  3A
3A76:  MOVWF  FE9
3A78:  MOVLW  00
3A7A:  ADDWFC 03,W
3A7C:  MOVWF  FEA
3A7E:  MOVLW  09
3A80:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3A82:  MOVLW  0B
3A84:  SUBWF  1A,W
3A86:  CLRF   03
3A88:  ADDLW  3A
3A8A:  MOVWF  FE9
3A8C:  MOVLW  00
3A8E:  ADDWFC 03,W
3A90:  MOVWF  FEA
3A92:  BTFSC  FEF.7
3A94:  BRA    3AAE
3A96:  MOVF   FEF,W
3A98:  SUBLW  09
3A9A:  BC    3AAE
....................        {clave[unidad-11]=0;} 
3A9C:  MOVLW  0B
3A9E:  SUBWF  1A,W
3AA0:  CLRF   03
3AA2:  ADDLW  3A
3AA4:  MOVWF  FE9
3AA6:  MOVLW  00
3AA8:  ADDWFC 03,W
3AAA:  MOVWF  FEA
3AAC:  CLRF   FEF
....................        if(unidad<11) 
3AAE:  MOVF   1A,W
3AB0:  SUBLW  0A
3AB2:  BNC   3AC4
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
3AB4:  MOVLW  01
3AB6:  MOVWF  17
3AB8:  CLRF   36
3ABA:  MOVLW  02
3ABC:  MOVWF  1B
3ABE:  MOVWF  1D
3AC0:  MOVLW  0B
3AC2:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3AC4:  MOVFF  1A,116
3AC8:  MOVLW  04
3ACA:  MOVLB  1
3ACC:  MOVWF  x17
3ACE:  MOVLB  0
3AD0:  CALL   0A2C
....................        lcd_putc(t[2]); 
3AD4:  MOVFF  39,115
3AD8:  CALL   0A9E
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3ADC:  MOVF   1A,W
3ADE:  SUBLW  0E
3AE0:  BTFSC  FD8.0
3AE2:  BRA    3C2E
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3AE4:  MOVF   3E,W
3AE6:  SUBWF  3A,W
3AE8:  BNZ   3B9C
3AEA:  MOVF   3F,W
3AEC:  SUBWF  3B,W
3AEE:  BNZ   3B9C
3AF0:  MOVF   40,W
3AF2:  SUBWF  3C,W
3AF4:  BNZ   3B9C
3AF6:  MOVF   41,W
3AF8:  SUBWF  3D,W
3AFA:  BNZ   3B9C
....................             {lcd_gotoxy(1,1); 
3AFC:  MOVLW  01
3AFE:  MOVLB  1
3B00:  MOVWF  x16
3B02:  MOVWF  x17
3B04:  MOVLB  0
3B06:  CALL   0A2C
....................             printf(lcd_putc,"                    "); 
3B0A:  MOVLW  E8
3B0C:  MOVWF  FF6
3B0E:  MOVLW  04
3B10:  MOVWF  FF7
3B12:  CALL   0F2A
....................             lcd_gotoxy(1,2); 
3B16:  MOVLW  01
3B18:  MOVLB  1
3B1A:  MOVWF  x16
3B1C:  MOVLW  02
3B1E:  MOVWF  x17
3B20:  MOVLB  0
3B22:  CALL   0A2C
....................             printf(lcd_putc,"     Contraseña     "); 
3B26:  MOVLW  FE
3B28:  MOVWF  FF6
3B2A:  MOVLW  04
3B2C:  MOVWF  FF7
3B2E:  CALL   0F2A
....................             lcd_gotoxy(1,3); 
3B32:  MOVLW  01
3B34:  MOVLB  1
3B36:  MOVWF  x16
3B38:  MOVLW  03
3B3A:  MOVWF  x17
3B3C:  MOVLB  0
3B3E:  CALL   0A2C
....................             printf(lcd_putc,"      Correcta      "); 
3B42:  MOVLW  14
3B44:  MOVWF  FF6
3B46:  MOVLW  05
3B48:  MOVWF  FF7
3B4A:  CALL   0F2A
....................             lcd_gotoxy(1,4); 
3B4E:  MOVLW  01
3B50:  MOVLB  1
3B52:  MOVWF  x16
3B54:  MOVLW  04
3B56:  MOVWF  x17
3B58:  MOVLB  0
3B5A:  CALL   0A2C
....................             printf(lcd_putc,"                    "); 
3B5E:  MOVLW  2A
3B60:  MOVWF  FF6
3B62:  MOVLW  05
3B64:  MOVWF  FF7
3B66:  CALL   0F2A
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
3B6A:  MOVLW  02
3B6C:  MOVLB  1
3B6E:  MOVWF  x00
3B70:  MOVLW  FA
3B72:  MOVWF  x1B
3B74:  MOVLB  0
3B76:  CALL   0922
3B7A:  MOVLB  1
3B7C:  DECFSZ x00,F
3B7E:  BRA    3B70
3B80:  MOVLW  33
3B82:  MOVWF  17
3B84:  MOVLW  0B
3B86:  MOVWF  1A
3B88:  MOVLW  0C
3B8A:  MOVWF  x15
3B8C:  MOVLB  0
3B8E:  CALL   0A9E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3B92:  CLRF   3A
3B94:  CLRF   3B
3B96:  CLRF   3C
3B98:  CLRF   3D
....................          else 
3B9A:  BRA    3C2E
....................          {lcd_gotoxy(1,1); 
3B9C:  MOVLW  01
3B9E:  MOVLB  1
3BA0:  MOVWF  x16
3BA2:  MOVWF  x17
3BA4:  MOVLB  0
3BA6:  CALL   0A2C
....................             printf(lcd_putc,"                    "); 
3BAA:  MOVLW  40
3BAC:  MOVWF  FF6
3BAE:  MOVLW  05
3BB0:  MOVWF  FF7
3BB2:  CALL   0F2A
....................             lcd_gotoxy(1,2); 
3BB6:  MOVLW  01
3BB8:  MOVLB  1
3BBA:  MOVWF  x16
3BBC:  MOVLW  02
3BBE:  MOVWF  x17
3BC0:  MOVLB  0
3BC2:  CALL   0A2C
....................             printf(lcd_putc,"     Contraseña     "); 
3BC6:  MOVLW  56
3BC8:  MOVWF  FF6
3BCA:  MOVLW  05
3BCC:  MOVWF  FF7
3BCE:  CALL   0F2A
....................             lcd_gotoxy(1,3); 
3BD2:  MOVLW  01
3BD4:  MOVLB  1
3BD6:  MOVWF  x16
3BD8:  MOVLW  03
3BDA:  MOVWF  x17
3BDC:  MOVLB  0
3BDE:  CALL   0A2C
....................             printf(lcd_putc,"     Incorrecta     "); 
3BE2:  MOVLW  6C
3BE4:  MOVWF  FF6
3BE6:  MOVLW  05
3BE8:  MOVWF  FF7
3BEA:  CALL   0F2A
....................             lcd_gotoxy(1,4); 
3BEE:  MOVLW  01
3BF0:  MOVLB  1
3BF2:  MOVWF  x16
3BF4:  MOVLW  04
3BF6:  MOVWF  x17
3BF8:  MOVLB  0
3BFA:  CALL   0A2C
....................             printf(lcd_putc,"                    "); 
3BFE:  MOVLW  82
3C00:  MOVWF  FF6
3C02:  MOVLW  05
3C04:  MOVWF  FF7
3C06:  CALL   0F2A
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3C0A:  MOVLW  02
3C0C:  MOVLB  1
3C0E:  MOVWF  x00
3C10:  MOVLW  FA
3C12:  MOVWF  x1B
3C14:  MOVLB  0
3C16:  CALL   0922
3C1A:  MOVLB  1
3C1C:  DECFSZ x00,F
3C1E:  BRA    3C10
3C20:  MOVLW  0B
3C22:  MOVWF  1A
3C24:  MOVLW  0C
3C26:  MOVWF  x15
3C28:  MOVLB  0
3C2A:  CALL   0A9E
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
3C2E:  MOVF   1A,W
3C30:  SUBLW  0B
3C32:  BC    3C56
3C34:  MOVF   1A,W
3C36:  SUBLW  0D
3C38:  BNC   3C56
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3C3A:  MOVLW  01
3C3C:  SUBWF  1A,W
3C3E:  MOVLB  1
3C40:  MOVWF  x00
3C42:  MOVWF  x16
3C44:  MOVLW  04
3C46:  MOVWF  x17
3C48:  MOVLB  0
3C4A:  CALL   0A2C
....................             lcd_putc(t[1]); 
3C4E:  MOVFF  38,115
3C52:  CALL   0A9E
3C56:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3C58:  MOVF   17,W
3C5A:  SUBLW  33
3C5C:  BTFSS  FD8.2
3C5E:  BRA    3FD6
....................    lcd_gotoxy(1,1); 
3C60:  MOVLW  01
3C62:  MOVWF  x16
3C64:  MOVWF  x17
3C66:  MOVLB  0
3C68:  CALL   0A2C
....................    printf(lcd_putc,"     Ingrese        "); 
3C6C:  MOVLW  98
3C6E:  MOVWF  FF6
3C70:  MOVLW  05
3C72:  MOVWF  FF7
3C74:  CALL   0F2A
....................    lcd_gotoxy(1,2); 
3C78:  MOVLW  01
3C7A:  MOVLB  1
3C7C:  MOVWF  x16
3C7E:  MOVLW  02
3C80:  MOVWF  x17
3C82:  MOVLB  0
3C84:  CALL   0A2C
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
3C88:  MOVLW  AE
3C8A:  MOVWF  FF6
3C8C:  MOVLW  05
3C8E:  MOVWF  FF7
3C90:  CALL   0F2A
....................    lcd_gotoxy(1,3); 
3C94:  MOVLW  01
3C96:  MOVLB  1
3C98:  MOVWF  x16
3C9A:  MOVLW  03
3C9C:  MOVWF  x17
3C9E:  MOVLB  0
3CA0:  CALL   0A2C
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3CA4:  MOVLW  C4
3CA6:  MOVWF  FF6
3CA8:  MOVLW  05
3CAA:  MOVWF  FF7
3CAC:  MOVLW  0A
3CAE:  MOVLB  1
3CB0:  MOVWF  x08
3CB2:  MOVLB  0
3CB4:  CALL   0F4A
3CB8:  MOVFF  3A,100
3CBC:  MOVLW  1F
3CBE:  MOVLB  1
3CC0:  MOVWF  x01
3CC2:  MOVLB  0
3CC4:  CALL   0F9E
3CC8:  MOVFF  3B,100
3CCC:  MOVLW  1F
3CCE:  MOVLB  1
3CD0:  MOVWF  x01
3CD2:  MOVLB  0
3CD4:  CALL   0F9E
3CD8:  MOVFF  3C,100
3CDC:  MOVLW  1F
3CDE:  MOVLB  1
3CE0:  MOVWF  x01
3CE2:  MOVLB  0
3CE4:  CALL   0F9E
3CE8:  MOVFF  3D,100
3CEC:  MOVLW  1F
3CEE:  MOVLB  1
3CF0:  MOVWF  x01
3CF2:  MOVLB  0
3CF4:  CALL   0F9E
3CF8:  MOVLW  20
3CFA:  MOVLB  1
3CFC:  MOVWF  x15
3CFE:  MOVLB  0
3D00:  CALL   0A9E
3D04:  MOVLW  20
3D06:  MOVLB  1
3D08:  MOVWF  x15
3D0A:  MOVLB  0
3D0C:  CALL   0A9E
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
3D10:  BSF    F93.3
3D12:  BTFSS  F81.3
3D14:  BRA    3D3C
....................       {  if(Flanco == 0)  
3D16:  BTFSC  34.4
3D18:  BRA    3D3A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3D1A:  MOVLW  0B
3D1C:  SUBWF  1A,W
3D1E:  CLRF   03
3D20:  ADDLW  3A
3D22:  MOVWF  FE9
3D24:  MOVLW  00
3D26:  ADDWFC 03,W
3D28:  MOVWF  FEA
3D2A:  INCF   FEF,F
3D2C:  BSF    34.4
3D2E:  MOVLW  1E
3D30:  MOVLB  1
3D32:  MOVWF  x1B
3D34:  MOVLB  0
3D36:  CALL   0922
....................          else 
3D3A:  BRA    3D3E
....................             {Flanco = 0;} 
3D3C:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3D3E:  BSF    F93.2
3D40:  BTFSS  F81.2
3D42:  BRA    3D6A
....................       {  if(Flanco2 == 0)  
3D44:  BTFSC  34.6
3D46:  BRA    3D68
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3D48:  MOVLW  0B
3D4A:  SUBWF  1A,W
3D4C:  CLRF   03
3D4E:  ADDLW  3A
3D50:  MOVWF  FE9
3D52:  MOVLW  00
3D54:  ADDWFC 03,W
3D56:  MOVWF  FEA
3D58:  DECF   FEF,F
3D5A:  BSF    34.6
3D5C:  MOVLW  1E
3D5E:  MOVLB  1
3D60:  MOVWF  x1B
3D62:  MOVLB  0
3D64:  CALL   0922
....................          else 
3D68:  BRA    3D6C
....................             {Flanco2 = 0;} 
3D6A:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
3D6C:  BSF    F93.0
3D6E:  BTFSS  F81.0
3D70:  BRA    3D94
....................       {  if(Flanco1 == 0)  
3D72:  BTFSC  34.5
3D74:  BRA    3D92
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3D76:  BSF    34.5
3D78:  INCF   1A,F
3D7A:  MOVLW  1E
3D7C:  MOVLB  1
3D7E:  MOVWF  x1B
3D80:  MOVLB  0
3D82:  CALL   0922
3D86:  MOVLW  0C
3D88:  MOVLB  1
3D8A:  MOVWF  x15
3D8C:  MOVLB  0
3D8E:  CALL   0A9E
....................          else 
3D92:  BRA    3D96
....................             {Flanco1 = 0;}    
3D94:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3D96:  BSF    F93.1
3D98:  BTFSS  F81.1
3D9A:  BRA    3DBE
....................       {  if(Flanco3 == 0)  
3D9C:  BTFSC  34.7
3D9E:  BRA    3DBC
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3DA0:  BSF    34.7
3DA2:  DECF   1A,F
3DA4:  MOVLW  1E
3DA6:  MOVLB  1
3DA8:  MOVWF  x1B
3DAA:  MOVLB  0
3DAC:  CALL   0922
3DB0:  MOVLW  0C
3DB2:  MOVLB  1
3DB4:  MOVWF  x15
3DB6:  MOVLB  0
3DB8:  CALL   0A9E
....................          else 
3DBC:  BRA    3DC0
....................             {Flanco3 = 0;}     
3DBE:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3DC0:  MOVLW  0B
3DC2:  SUBWF  1A,W
3DC4:  CLRF   03
3DC6:  ADDLW  3A
3DC8:  MOVWF  FE9
3DCA:  MOVLW  00
3DCC:  ADDWFC 03,W
3DCE:  MOVWF  FEA
3DD0:  BTFSC  FEF.7
3DD2:  BRA    3DD6
3DD4:  BRA    3DEA
....................        {clave[unidad-11]=9;} 
3DD6:  MOVLW  0B
3DD8:  SUBWF  1A,W
3DDA:  CLRF   03
3DDC:  ADDLW  3A
3DDE:  MOVWF  FE9
3DE0:  MOVLW  00
3DE2:  ADDWFC 03,W
3DE4:  MOVWF  FEA
3DE6:  MOVLW  09
3DE8:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3DEA:  MOVLW  0B
3DEC:  SUBWF  1A,W
3DEE:  CLRF   03
3DF0:  ADDLW  3A
3DF2:  MOVWF  FE9
3DF4:  MOVLW  00
3DF6:  ADDWFC 03,W
3DF8:  MOVWF  FEA
3DFA:  BTFSC  FEF.7
3DFC:  BRA    3E16
3DFE:  MOVF   FEF,W
3E00:  SUBLW  09
3E02:  BC    3E16
....................        {clave[unidad-11]=0;} 
3E04:  MOVLW  0B
3E06:  SUBWF  1A,W
3E08:  CLRF   03
3E0A:  ADDLW  3A
3E0C:  MOVWF  FE9
3E0E:  MOVLW  00
3E10:  ADDWFC 03,W
3E12:  MOVWF  FEA
3E14:  CLRF   FEF
....................        if(unidad<11) 
3E16:  MOVF   1A,W
3E18:  SUBLW  0A
3E1A:  BNC   3E24
....................        {Menu=5;unidad=11;} 
3E1C:  MOVLW  05
3E1E:  MOVWF  17
3E20:  MOVLW  0B
3E22:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3E24:  MOVFF  1A,116
3E28:  MOVLW  04
3E2A:  MOVLB  1
3E2C:  MOVWF  x17
3E2E:  MOVLB  0
3E30:  CALL   0A2C
....................        lcd_putc(t[2]); 
3E34:  MOVFF  39,115
3E38:  CALL   0A9E
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
3E3C:  MOVF   1A,W
3E3E:  SUBLW  0E
3E40:  BTFSC  FD8.0
3E42:  BRA    3FAC
....................        { 
....................             lcd_gotoxy(1,1); 
3E44:  MOVLW  01
3E46:  MOVLB  1
3E48:  MOVWF  x16
3E4A:  MOVWF  x17
3E4C:  MOVLB  0
3E4E:  CALL   0A2C
....................             printf(lcd_putc,"                    "); 
3E52:  MOVLW  DA
3E54:  MOVWF  FF6
3E56:  MOVLW  05
3E58:  MOVWF  FF7
3E5A:  CALL   0F2A
....................             lcd_gotoxy(1,2); 
3E5E:  MOVLW  01
3E60:  MOVLB  1
3E62:  MOVWF  x16
3E64:  MOVLW  02
3E66:  MOVWF  x17
3E68:  MOVLB  0
3E6A:  CALL   0A2C
....................             printf(lcd_putc,"     Contraseña     "); 
3E6E:  MOVLW  F0
3E70:  MOVWF  FF6
3E72:  MOVLW  05
3E74:  MOVWF  FF7
3E76:  CALL   0F2A
....................             lcd_gotoxy(1,3); 
3E7A:  MOVLW  01
3E7C:  MOVLB  1
3E7E:  MOVWF  x16
3E80:  MOVLW  03
3E82:  MOVWF  x17
3E84:  MOVLB  0
3E86:  CALL   0A2C
....................             printf(lcd_putc,"     Almacenada     "); 
3E8A:  MOVLW  06
3E8C:  MOVWF  FF6
3E8E:  MOVLW  06
3E90:  MOVWF  FF7
3E92:  CALL   0F2A
....................             lcd_gotoxy(1,4); 
3E96:  MOVLW  01
3E98:  MOVLB  1
3E9A:  MOVWF  x16
3E9C:  MOVLW  04
3E9E:  MOVWF  x17
3EA0:  MOVLB  0
3EA2:  CALL   0A2C
....................             printf(lcd_putc,"                    "); 
3EA6:  MOVLW  1C
3EA8:  MOVWF  FF6
3EAA:  MOVLW  06
3EAC:  MOVWF  FF7
3EAE:  CALL   0F2A
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3EB2:  CLRF   FA9
3EB4:  MOVFF  3A,FA8
3EB8:  BCF    FA6.6
3EBA:  BCF    FA6.7
3EBC:  BSF    FA6.2
3EBE:  MOVF   FF2,W
3EC0:  MOVWF  00
3EC2:  BCF    FF2.7
3EC4:  MOVLB  F
3EC6:  MOVLW  55
3EC8:  MOVWF  FA7
3ECA:  MOVLW  AA
3ECC:  MOVWF  FA7
3ECE:  BSF    FA6.1
3ED0:  BTFSC  FA6.1
3ED2:  BRA    3ED0
3ED4:  BCF    FA6.2
3ED6:  MOVF   00,W
3ED8:  IORWF  FF2,F
3EDA:  MOVLW  14
3EDC:  MOVLB  1
3EDE:  MOVWF  x1B
3EE0:  MOVLB  0
3EE2:  CALL   0922
3EE6:  MOVLW  01
3EE8:  MOVWF  FA9
3EEA:  MOVFF  3B,FA8
3EEE:  BCF    FA6.6
3EF0:  BCF    FA6.7
3EF2:  BSF    FA6.2
3EF4:  MOVF   FF2,W
3EF6:  MOVWF  00
3EF8:  BCF    FF2.7
3EFA:  MOVLB  F
3EFC:  MOVLW  55
3EFE:  MOVWF  FA7
3F00:  MOVLW  AA
3F02:  MOVWF  FA7
3F04:  BSF    FA6.1
3F06:  BTFSC  FA6.1
3F08:  BRA    3F06
3F0A:  BCF    FA6.2
3F0C:  MOVF   00,W
3F0E:  IORWF  FF2,F
3F10:  MOVLW  14
3F12:  MOVLB  1
3F14:  MOVWF  x1B
3F16:  MOVLB  0
3F18:  CALL   0922
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3F1C:  MOVLW  02
3F1E:  MOVWF  FA9
3F20:  MOVFF  3C,FA8
3F24:  BCF    FA6.6
3F26:  BCF    FA6.7
3F28:  BSF    FA6.2
3F2A:  MOVF   FF2,W
3F2C:  MOVWF  00
3F2E:  BCF    FF2.7
3F30:  MOVLB  F
3F32:  MOVLW  55
3F34:  MOVWF  FA7
3F36:  MOVLW  AA
3F38:  MOVWF  FA7
3F3A:  BSF    FA6.1
3F3C:  BTFSC  FA6.1
3F3E:  BRA    3F3C
3F40:  BCF    FA6.2
3F42:  MOVF   00,W
3F44:  IORWF  FF2,F
3F46:  MOVLW  14
3F48:  MOVLB  1
3F4A:  MOVWF  x1B
3F4C:  MOVLB  0
3F4E:  CALL   0922
3F52:  MOVLW  03
3F54:  MOVWF  FA9
3F56:  MOVFF  3D,FA8
3F5A:  BCF    FA6.6
3F5C:  BCF    FA6.7
3F5E:  BSF    FA6.2
3F60:  MOVF   FF2,W
3F62:  MOVWF  00
3F64:  BCF    FF2.7
3F66:  MOVLB  F
3F68:  MOVLW  55
3F6A:  MOVWF  FA7
3F6C:  MOVLW  AA
3F6E:  MOVWF  FA7
3F70:  BSF    FA6.1
3F72:  BTFSC  FA6.1
3F74:  BRA    3F72
3F76:  BCF    FA6.2
3F78:  MOVF   00,W
3F7A:  IORWF  FF2,F
3F7C:  MOVLW  14
3F7E:  MOVLB  1
3F80:  MOVWF  x1B
3F82:  MOVLB  0
3F84:  CALL   0922
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3F88:  MOVLW  02
3F8A:  MOVLB  1
3F8C:  MOVWF  x00
3F8E:  MOVLW  FA
3F90:  MOVWF  x1B
3F92:  MOVLB  0
3F94:  CALL   0922
3F98:  MOVLB  1
3F9A:  DECFSZ x00,F
3F9C:  BRA    3F8E
3F9E:  MOVLW  01
3FA0:  MOVWF  17
3FA2:  CLRF   36
3FA4:  MOVLW  02
3FA6:  MOVWF  1B
3FA8:  MOVWF  1D
3FAA:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
3FAC:  MOVF   1A,W
3FAE:  SUBLW  0B
3FB0:  BC    3FD4
3FB2:  MOVF   1A,W
3FB4:  SUBLW  0D
3FB6:  BNC   3FD4
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3FB8:  MOVLW  01
3FBA:  SUBWF  1A,W
3FBC:  MOVLB  1
3FBE:  MOVWF  x00
3FC0:  MOVWF  x16
3FC2:  MOVLW  04
3FC4:  MOVWF  x17
3FC6:  MOVLB  0
3FC8:  CALL   0A2C
....................             lcd_putc(t[1]); 
3FCC:  MOVFF  38,115
3FD0:  CALL   0A9E
3FD4:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
3FD6:  MOVF   17,W
3FD8:  SUBLW  06
3FDA:  BTFSS  FD8.2
3FDC:  BRA    414C
....................    { 
....................    lcd_gotoxy(1,2); 
3FDE:  MOVLW  01
3FE0:  MOVWF  x16
3FE2:  MOVLW  02
3FE4:  MOVWF  x17
3FE6:  MOVLB  0
3FE8:  CALL   0A2C
....................    printf(lcd_putc,"     Media Movil    "); 
3FEC:  MOVLW  32
3FEE:  MOVWF  FF6
3FF0:  MOVLW  06
3FF2:  MOVWF  FF7
3FF4:  CALL   0F2A
....................    lcd_gotoxy(1,3); 
3FF8:  MOVLW  01
3FFA:  MOVLB  1
3FFC:  MOVWF  x16
3FFE:  MOVLW  03
4000:  MOVWF  x17
4002:  MOVLB  0
4004:  CALL   0A2C
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
4008:  MOVLW  48
400A:  MOVWF  FF6
400C:  MOVLW  06
400E:  MOVWF  FF7
4010:  MOVLW  07
4012:  MOVLB  1
4014:  MOVWF  x08
4016:  MOVLB  0
4018:  CALL   0F4A
401C:  MOVFF  2A,100
4020:  MOVLW  01
4022:  MOVLB  1
4024:  MOVWF  x01
4026:  MOVLB  0
4028:  CALL   0F9E
402C:  MOVLW  20
402E:  MOVLB  1
4030:  MOVWF  x15
4032:  MOVLB  0
4034:  CALL   0A9E
4038:  MOVLW  20
403A:  MOVLB  1
403C:  MOVWF  x15
403E:  MOVLB  0
4040:  CALL   0A9E
4044:  MOVLW  20
4046:  MOVLB  1
4048:  MOVWF  x15
404A:  MOVLB  0
404C:  CALL   0A9E
....................     
....................    if(MediaMovil>12) 
4050:  MOVF   2A,W
4052:  SUBLW  0C
4054:  BC    405A
....................    {MediaMovil=12;} 
4056:  MOVLW  0C
4058:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
405A:  MOVF   2A,F
405C:  BNZ   4062
....................    {MediaMovil=1;} 
405E:  MOVLW  01
4060:  MOVWF  2A
....................     
....................       if(UP)//Si oprime hacia arriba 
4062:  BSF    F93.3
4064:  BTFSS  F81.3
4066:  BRA    4080
....................       {  if(Flanco == 0)  
4068:  BTFSC  34.4
406A:  BRA    407E
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
406C:  MOVLW  01
406E:  ADDWF  2A,F
4070:  BSF    34.4
4072:  MOVLW  1E
4074:  MOVLB  1
4076:  MOVWF  x1B
4078:  MOVLB  0
407A:  CALL   0922
....................          else 
407E:  BRA    4082
....................             {Flanco = 0;} 
4080:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4082:  BSF    F93.2
4084:  BTFSS  F81.2
4086:  BRA    40A0
....................       {  if(Flanco2 == 0)  
4088:  BTFSC  34.6
408A:  BRA    409E
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
408C:  MOVLW  01
408E:  SUBWF  2A,F
4090:  BSF    34.6
4092:  MOVLW  1E
4094:  MOVLB  1
4096:  MOVWF  x1B
4098:  MOVLB  0
409A:  CALL   0922
....................          else 
409E:  BRA    40A2
....................             {Flanco2 = 0;} 
40A0:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
40A2:  BSF    F93.0
40A4:  BTFSS  F81.0
40A6:  BRA    410A
....................       {  if(Flanco1 == 0)  
40A8:  BTFSC  34.5
40AA:  BRA    4108
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
40AC:  MOVLW  01
40AE:  MOVWF  17
40B0:  CLRF   36
40B2:  MOVLW  02
40B4:  MOVWF  1B
40B6:  MOVWF  1D
40B8:  MOVLW  0B
40BA:  MOVWF  1A
40BC:  MOVLW  02
40BE:  MOVLB  1
40C0:  MOVWF  x00
40C2:  MOVLW  FA
40C4:  MOVWF  x1B
40C6:  MOVLB  0
40C8:  CALL   0922
40CC:  MOVLB  1
40CE:  DECFSZ x00,F
40D0:  BRA    40C2
40D2:  MOVLW  0C
40D4:  MOVWF  x15
40D6:  MOVLB  0
40D8:  CALL   0A9E
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
40DC:  MOVLW  2A
40DE:  MOVWF  FA9
40E0:  MOVFF  2A,FA8
40E4:  BCF    FA6.6
40E6:  BCF    FA6.7
40E8:  BSF    FA6.2
40EA:  MOVF   FF2,W
40EC:  MOVWF  00
40EE:  BCF    FF2.7
40F0:  MOVLB  F
40F2:  MOVLW  55
40F4:  MOVWF  FA7
40F6:  MOVLW  AA
40F8:  MOVWF  FA7
40FA:  BSF    FA6.1
40FC:  BTFSC  FA6.1
40FE:  BRA    40FC
4100:  BCF    FA6.2
4102:  MOVF   00,W
4104:  IORWF  FF2,F
4106:  MOVLB  0
....................             }} 
....................          else 
4108:  BRA    410C
....................             {Flanco1 = 0;}    
410A:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
410C:  BSF    F93.1
410E:  BTFSS  F81.1
4110:  BRA    4148
....................       {  if(Flanco3 == 0)  
4112:  BTFSC  34.7
4114:  BRA    4146
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4116:  MOVLW  01
4118:  MOVWF  17
411A:  CLRF   36
411C:  MOVLW  02
411E:  MOVWF  1B
4120:  MOVWF  1D
4122:  MOVLW  0B
4124:  MOVWF  1A
4126:  MOVLW  02
4128:  MOVLB  1
412A:  MOVWF  x00
412C:  MOVLW  FA
412E:  MOVWF  x1B
4130:  MOVLB  0
4132:  CALL   0922
4136:  MOVLB  1
4138:  DECFSZ x00,F
413A:  BRA    412C
413C:  MOVLW  0C
413E:  MOVWF  x15
4140:  MOVLB  0
4142:  CALL   0A9E
....................          else 
4146:  BRA    414A
....................             {Flanco3 = 0;}   
4148:  BCF    34.7
414A:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
414C:  MOVF   17,W
414E:  SUBLW  07
4150:  BTFSS  FD8.2
4152:  BRA    4542
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
4154:  MOVLW  01
4156:  MOVWF  x16
4158:  MOVWF  x17
415A:  MOVLB  0
415C:  CALL   0A2C
....................    printf(lcd_putc,"  Zero Point Config "); 
4160:  MOVLW  58
4162:  MOVWF  FF6
4164:  MOVLW  06
4166:  MOVWF  FF7
4168:  CALL   0F2A
....................    lcd_gotoxy(1,2); 
416C:  MOVLW  01
416E:  MOVLB  1
4170:  MOVWF  x16
4172:  MOVLW  02
4174:  MOVWF  x17
4176:  MOVLB  0
4178:  CALL   0A2C
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
417C:  MOVLW  6E
417E:  MOVWF  FF6
4180:  MOVLW  06
4182:  MOVWF  FF7
4184:  MOVLW  08
4186:  MOVLB  1
4188:  MOVWF  x08
418A:  MOVLB  0
418C:  CALL   0F4A
4190:  MOVLW  01
4192:  MOVWF  FE9
4194:  MOVFF  8E,10B
4198:  MOVFF  8D,10A
419C:  MOVFF  8C,109
41A0:  MOVFF  8B,108
41A4:  MOVLB  1
41A6:  MOVWF  x0C
41A8:  MOVLB  0
41AA:  CALL   13C4
41AE:  MOVLW  7B
41B0:  MOVWF  FF6
41B2:  MOVLW  06
41B4:  MOVWF  FF7
41B6:  MOVLW  08
41B8:  MOVLB  1
41BA:  MOVWF  x08
41BC:  MOVLB  0
41BE:  CALL   0F4A
....................    lcd_gotoxy(1,3); 
41C2:  MOVLW  01
41C4:  MOVLB  1
41C6:  MOVWF  x16
41C8:  MOVLW  03
41CA:  MOVWF  x17
41CC:  MOVLB  0
41CE:  CALL   0A2C
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
41D2:  MOVLB  1
41D4:  CLRF   x04
41D6:  MOVLB  0
41D8:  CALL   162C
41DC:  MOVFF  00,100
41E0:  MOVFF  01,101
41E4:  MOVFF  02,102
41E8:  MOVFF  03,103
41EC:  MOVLW  5A
41EE:  MOVLB  1
41F0:  MOVWF  x15
41F2:  MOVLB  0
41F4:  CALL   0A9E
41F8:  MOVLW  46
41FA:  MOVLB  1
41FC:  MOVWF  x15
41FE:  MOVLB  0
4200:  CALL   0A9E
4204:  MOVLW  3D
4206:  MOVLB  1
4208:  MOVWF  x15
420A:  MOVLB  0
420C:  CALL   0A9E
4210:  MOVLW  01
4212:  MOVWF  FE9
4214:  MOVFF  4D,10B
4218:  MOVFF  4C,10A
421C:  MOVFF  4B,109
4220:  MOVFF  4A,108
4224:  MOVLB  1
4226:  CLRF   x0C
4228:  MOVLB  0
422A:  CALL   13C4
422E:  MOVLW  8C
4230:  MOVWF  FF6
4232:  MOVLW  06
4234:  MOVWF  FF7
4236:  MOVLW  05
4238:  MOVLB  1
423A:  MOVWF  x08
423C:  MOVLB  0
423E:  CALL   0F4A
4242:  MOVLW  01
4244:  MOVWF  FE9
4246:  MOVFF  103,10B
424A:  MOVFF  102,10A
424E:  MOVFF  101,109
4252:  MOVFF  100,108
4256:  MOVLB  1
4258:  CLRF   x0C
425A:  MOVLB  0
425C:  CALL   13C4
....................    lcd_gotoxy(1,4); 
4260:  MOVLW  01
4262:  MOVLB  1
4264:  MOVWF  x16
4266:  MOVLW  04
4268:  MOVWF  x17
426A:  MOVLB  0
426C:  CALL   0A2C
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
4270:  MOVLW  98
4272:  MOVWF  FF6
4274:  MOVLW  06
4276:  MOVWF  FF7
4278:  MOVLW  0C
427A:  MOVLB  1
427C:  MOVWF  x08
427E:  MOVLB  0
4280:  CALL   0F4A
4284:  MOVLW  01
4286:  MOVWF  FE9
4288:  MOVFF  BE,10B
428C:  MOVFF  BD,10A
4290:  MOVFF  BC,109
4294:  MOVFF  BB,108
4298:  MOVLB  1
429A:  CLRF   x0C
429C:  MOVLB  0
429E:  CALL   13C4
....................      
....................       if(RIGHT)// Si oprime derecha 
42A2:  BSF    F93.0
42A4:  BTFSS  F81.0
42A6:  BRA    4500
....................       {  if(Flanco1 == 0)  
42A8:  BTFSC  34.5
42AA:  BRA    44FE
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
42AC:  MOVLW  01
42AE:  MOVWF  17
42B0:  CLRF   36
42B2:  MOVLW  02
42B4:  MOVWF  1B
42B6:  MOVWF  1D
42B8:  MOVLW  0B
42BA:  MOVWF  1A
42BC:  MOVLW  02
42BE:  MOVLB  1
42C0:  MOVWF  x00
42C2:  MOVLW  FA
42C4:  MOVWF  x1B
42C6:  MOVLB  0
42C8:  CALL   0922
42CC:  MOVLB  1
42CE:  DECFSZ x00,F
42D0:  BRA    42C2
42D2:  MOVLW  0C
42D4:  MOVWF  x15
42D6:  MOVLB  0
42D8:  CALL   0A9E
....................             Diferencia=zero_fabrica-sensores(0); 
42DC:  MOVLB  1
42DE:  CLRF   x04
42E0:  MOVLB  0
42E2:  CALL   162C
42E6:  MOVFF  FEA,101
42EA:  MOVFF  FE9,100
42EE:  BSF    FD8.1
42F0:  MOVFF  4D,121
42F4:  MOVFF  4C,120
42F8:  MOVFF  4B,11F
42FC:  MOVFF  4A,11E
4300:  MOVFF  03,125
4304:  MOVFF  02,124
4308:  MOVFF  01,123
430C:  MOVFF  00,122
4310:  CALL   0C9E
4314:  MOVFF  101,FEA
4318:  MOVFF  100,FE9
431C:  MOVFF  03,BE
4320:  MOVFF  02,BD
4324:  MOVFF  01,BC
4328:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
432C:  MOVLB  1
432E:  CLRF   x1D
4330:  CLRF   x1C
4332:  CLRF   x1B
4334:  CLRF   x1A
4336:  MOVFF  BE,121
433A:  MOVFF  BD,120
433E:  MOVFF  BC,11F
4342:  MOVFF  BB,11E
4346:  MOVLB  0
4348:  CALL   1576
434C:  BC    4350
434E:  BNZ   437E
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
4350:  MOVLW  0A
4352:  MOVWF  2B
4354:  MOVLW  32
4356:  MOVWF  FA9
4358:  MOVFF  2B,FA8
435C:  BCF    FA6.6
435E:  BCF    FA6.7
4360:  BSF    FA6.2
4362:  MOVF   FF2,W
4364:  MOVWF  00
4366:  BCF    FF2.7
4368:  MOVLB  F
436A:  MOVLW  55
436C:  MOVWF  FA7
436E:  MOVLW  AA
4370:  MOVWF  FA7
4372:  BSF    FA6.1
4374:  BTFSC  FA6.1
4376:  BRA    4374
4378:  BCF    FA6.2
437A:  MOVF   00,W
437C:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
437E:  MOVFF  BE,11D
4382:  MOVFF  BD,11C
4386:  MOVFF  BC,11B
438A:  MOVFF  BB,11A
438E:  MOVLB  1
4390:  CLRF   x21
4392:  CLRF   x20
4394:  CLRF   x1F
4396:  CLRF   x1E
4398:  MOVLB  0
439A:  CALL   1576
439E:  BNC   43D0
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
43A0:  MOVLW  14
43A2:  MOVWF  2B
43A4:  MOVLW  32
43A6:  MOVWF  FA9
43A8:  MOVFF  2B,FA8
43AC:  BCF    FA6.6
43AE:  BCF    FA6.7
43B0:  BSF    FA6.2
43B2:  MOVF   FF2,W
43B4:  MOVWF  00
43B6:  BCF    FF2.7
43B8:  MOVLB  F
43BA:  MOVLW  55
43BC:  MOVWF  FA7
43BE:  MOVLW  AA
43C0:  MOVWF  FA7
43C2:  BSF    FA6.1
43C4:  BTFSC  FA6.1
43C6:  BRA    43C4
43C8:  BCF    FA6.2
43CA:  MOVF   00,W
43CC:  IORWF  FF2,F
43CE:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
43D0:  MOVFF  BB,00
43D4:  MOVFF  BC,01
43D8:  MOVFF  BD,02
43DC:  MOVFF  BE,03
43E0:  BCF    01.7
43E2:  MOVFF  BE,BE
43E6:  MOVFF  BD,BD
43EA:  MOVFF  01,BC
43EE:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
43F2:  MOVFF  BE,B6
43F6:  MOVFF  BD,B5
43FA:  MOVFF  BC,B4
43FE:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
4402:  MOVFF  B6,102
4406:  MOVFF  B5,101
440A:  MOVFF  B4,100
440E:  MOVFF  B3,FF
4412:  CALL   15F0
4416:  MOVFF  01,24
....................             Temporal1=Temporal1-Entero1; 
441A:  MOVLB  1
441C:  CLRF   x0A
441E:  MOVFF  24,109
4422:  MOVLB  0
4424:  CALL   0B0A
4428:  BSF    FD8.1
442A:  MOVFF  B6,121
442E:  MOVFF  B5,120
4432:  MOVFF  B4,11F
4436:  MOVFF  B3,11E
443A:  MOVFF  03,125
443E:  MOVFF  02,124
4442:  MOVFF  01,123
4446:  MOVFF  00,122
444A:  CALL   0C9E
444E:  MOVFF  03,B6
4452:  MOVFF  02,B5
4456:  MOVFF  01,B4
445A:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
445E:  MOVFF  B6,11D
4462:  MOVFF  B5,11C
4466:  MOVFF  B4,11B
446A:  MOVFF  B3,11A
446E:  MOVLB  1
4470:  CLRF   x21
4472:  CLRF   x20
4474:  MOVLW  48
4476:  MOVWF  x1F
4478:  MOVLW  85
447A:  MOVWF  x1E
447C:  MOVLB  0
447E:  CALL   120A
4482:  MOVFF  03,BA
4486:  MOVFF  02,B9
448A:  MOVFF  01,B8
448E:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
4492:  MOVFF  BA,102
4496:  MOVFF  B9,101
449A:  MOVFF  B8,100
449E:  MOVFF  B7,FF
44A2:  CALL   15F0
44A6:  MOVFF  01,25
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
44AA:  MOVLW  3C
44AC:  MOVWF  FA9
44AE:  MOVFF  24,FA8
44B2:  BCF    FA6.6
44B4:  BCF    FA6.7
44B6:  BSF    FA6.2
44B8:  MOVF   FF2,W
44BA:  MOVWF  00
44BC:  BCF    FF2.7
44BE:  MOVLB  F
44C0:  MOVLW  55
44C2:  MOVWF  FA7
44C4:  MOVLW  AA
44C6:  MOVWF  FA7
44C8:  BSF    FA6.1
44CA:  BTFSC  FA6.1
44CC:  BRA    44CA
44CE:  BCF    FA6.2
44D0:  MOVF   00,W
44D2:  IORWF  FF2,F
44D4:  MOVLW  3D
44D6:  MOVWF  FA9
44D8:  MOVFF  25,FA8
44DC:  BCF    FA6.6
44DE:  BCF    FA6.7
44E0:  BSF    FA6.2
44E2:  MOVF   FF2,W
44E4:  MOVWF  00
44E6:  BCF    FF2.7
44E8:  MOVLW  55
44EA:  MOVWF  FA7
44EC:  MOVLW  AA
44EE:  MOVWF  FA7
44F0:  BSF    FA6.1
44F2:  BTFSC  FA6.1
44F4:  BRA    44F2
44F6:  BCF    FA6.2
44F8:  MOVF   00,W
44FA:  IORWF  FF2,F
44FC:  MOVLB  0
....................             }} 
....................          else 
44FE:  BRA    4502
....................             {Flanco1 = 0;}    
4500:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4502:  BSF    F93.1
4504:  BTFSS  F81.1
4506:  BRA    453E
....................       {  if(Flanco3 == 0)  
4508:  BTFSC  34.7
450A:  BRA    453C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
450C:  MOVLW  01
450E:  MOVWF  17
4510:  CLRF   36
4512:  MOVLW  02
4514:  MOVWF  1B
4516:  MOVWF  1D
4518:  MOVLW  0B
451A:  MOVWF  1A
451C:  MOVLW  02
451E:  MOVLB  1
4520:  MOVWF  x00
4522:  MOVLW  FA
4524:  MOVWF  x1B
4526:  MOVLB  0
4528:  CALL   0922
452C:  MOVLB  1
452E:  DECFSZ x00,F
4530:  BRA    4522
4532:  MOVLW  0C
4534:  MOVWF  x15
4536:  MOVLB  0
4538:  CALL   0A9E
....................          else 
453C:  BRA    4540
....................             {Flanco3 = 0;}   
453E:  BCF    34.7
4540:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
4542:  MOVF   17,W
4544:  SUBLW  08
4546:  BTFSS  FD8.2
4548:  BRA    4A9A
....................    { 
....................    lcd_gotoxy(1,1); 
454A:  MOVLW  01
454C:  MOVWF  x16
454E:  MOVWF  x17
4550:  MOVLB  0
4552:  CALL   0A2C
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4556:  MOVLB  1
4558:  CLRF   x04
455A:  MOVLB  0
455C:  CALL   162C
4560:  MOVFF  00,100
4564:  MOVFF  01,101
4568:  MOVFF  02,102
456C:  MOVFF  03,103
4570:  MOVLW  AA
4572:  MOVWF  FF6
4574:  MOVLW  06
4576:  MOVWF  FF7
4578:  MOVLW  0A
457A:  MOVLB  1
457C:  MOVWF  x08
457E:  MOVLB  0
4580:  CALL   0F4A
4584:  MOVLW  01
4586:  MOVWF  FE9
4588:  MOVFF  103,10B
458C:  MOVFF  102,10A
4590:  MOVFF  101,109
4594:  MOVFF  100,108
4598:  MOVLB  1
459A:  CLRF   x0C
459C:  MOVLB  0
459E:  CALL   13C4
45A2:  MOVLW  20
45A4:  MOVLB  1
45A6:  MOVWF  x15
45A8:  MOVLB  0
45AA:  CALL   0A9E
45AE:  MOVLW  20
45B0:  MOVLB  1
45B2:  MOVWF  x15
45B4:  MOVLB  0
45B6:  CALL   0A9E
....................    lcd_gotoxy(1,2); 
45BA:  MOVLW  01
45BC:  MOVLB  1
45BE:  MOVWF  x16
45C0:  MOVLW  02
45C2:  MOVWF  x17
45C4:  MOVLB  0
45C6:  CALL   0A2C
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
45CA:  MOVLB  1
45CC:  CLRF   x0A
45CE:  MOVFF  29,109
45D2:  MOVLB  0
45D4:  CALL   0B0A
45D8:  MOVFF  00,100
45DC:  MOVFF  01,101
45E0:  MOVFF  02,102
45E4:  MOVFF  03,103
45E8:  MOVFF  03,121
45EC:  MOVFF  02,120
45F0:  MOVFF  01,11F
45F4:  MOVFF  00,11E
45F8:  MOVLB  1
45FA:  CLRF   x25
45FC:  CLRF   x24
45FE:  MOVLW  7F
4600:  MOVWF  x23
4602:  MOVLW  86
4604:  MOVWF  x22
4606:  MOVLB  0
4608:  CALL   0B40
460C:  MOVLB  1
460E:  CLRF   x1D
4610:  CLRF   x1C
4612:  MOVLW  48
4614:  MOVWF  x1B
4616:  MOVLW  85
4618:  MOVWF  x1A
461A:  MOVFF  03,121
461E:  MOVFF  02,120
4622:  MOVFF  01,11F
4626:  MOVFF  00,11E
462A:  MOVLB  0
462C:  CALL   120A
4630:  MOVFF  00,100
4634:  MOVFF  01,101
4638:  MOVFF  02,102
463C:  MOVFF  03,103
4640:  MOVLW  01
4642:  MOVLB  1
4644:  MOVWF  x04
4646:  MOVLB  0
4648:  CALL   162C
464C:  MOVFF  00,104
4650:  MOVFF  01,105
4654:  MOVFF  02,106
4658:  MOVFF  03,107
465C:  MOVLW  BC
465E:  MOVWF  FF6
4660:  MOVLW  06
4662:  MOVWF  FF7
4664:  MOVLW  05
4666:  MOVLB  1
4668:  MOVWF  x08
466A:  MOVLB  0
466C:  CALL   0F4A
4670:  MOVLW  01
4672:  MOVWF  FE9
4674:  MOVFF  103,10B
4678:  MOVFF  102,10A
467C:  MOVFF  101,109
4680:  MOVFF  100,108
4684:  MOVLB  1
4686:  CLRF   x0C
4688:  MOVLB  0
468A:  CALL   13C4
468E:  MOVLW  25
4690:  MOVLB  1
4692:  MOVWF  x15
4694:  MOVLB  0
4696:  CALL   0A9E
469A:  MOVLW  C8
469C:  MOVWF  FF6
469E:  MOVLW  06
46A0:  MOVWF  FF7
46A2:  MOVLW  04
46A4:  MOVLB  1
46A6:  MOVWF  x08
46A8:  MOVLB  0
46AA:  CALL   0F4A
46AE:  MOVLW  01
46B0:  MOVWF  FE9
46B2:  MOVFF  107,10B
46B6:  MOVFF  106,10A
46BA:  MOVFF  105,109
46BE:  MOVFF  104,108
46C2:  MOVLB  1
46C4:  CLRF   x0C
46C6:  MOVLB  0
46C8:  CALL   13C4
46CC:  MOVLW  20
46CE:  MOVLB  1
46D0:  MOVWF  x15
46D2:  MOVLB  0
46D4:  CALL   0A9E
....................    lcd_gotoxy(1,3); 
46D8:  MOVLW  01
46DA:  MOVLB  1
46DC:  MOVWF  x16
46DE:  MOVLW  03
46E0:  MOVWF  x17
46E2:  MOVLB  0
46E4:  CALL   0A2C
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
46E8:  MOVLW  02
46EA:  MOVLB  1
46EC:  MOVWF  x04
46EE:  MOVLB  0
46F0:  CALL   162C
46F4:  MOVFF  00,100
46F8:  MOVFF  01,101
46FC:  MOVFF  02,102
4700:  MOVFF  03,103
4704:  MOVFF  03,121
4708:  MOVFF  02,120
470C:  MOVFF  01,11F
4710:  MOVFF  00,11E
4714:  MOVLB  1
4716:  CLRF   x25
4718:  MOVLW  C0
471A:  MOVWF  x24
471C:  MOVLW  7F
471E:  MOVWF  x23
4720:  MOVLW  88
4722:  MOVWF  x22
4724:  MOVLB  0
4726:  CALL   0B40
472A:  MOVLB  1
472C:  CLRF   x1D
472E:  CLRF   x1C
4730:  MOVLW  48
4732:  MOVWF  x1B
4734:  MOVLW  85
4736:  MOVWF  x1A
4738:  MOVFF  03,121
473C:  MOVFF  02,120
4740:  MOVFF  01,11F
4744:  MOVFF  00,11E
4748:  MOVLB  0
474A:  CALL   120A
474E:  MOVFF  00,100
4752:  MOVFF  01,101
4756:  MOVFF  02,102
475A:  MOVFF  03,103
475E:  MOVLW  D4
4760:  MOVWF  FF6
4762:  MOVLW  06
4764:  MOVWF  FF7
4766:  MOVLW  04
4768:  MOVLB  1
476A:  MOVWF  x08
476C:  MOVLB  0
476E:  CALL   0F4A
4772:  MOVLW  01
4774:  MOVWF  FE9
4776:  MOVFF  8E,10B
477A:  MOVFF  8D,10A
477E:  MOVFF  8C,109
4782:  MOVFF  8B,108
4786:  MOVLB  1
4788:  MOVWF  x0C
478A:  MOVLB  0
478C:  CALL   13C4
4790:  MOVLW  DD
4792:  MOVWF  FF6
4794:  MOVLW  06
4796:  MOVWF  FF7
4798:  MOVLW  0A
479A:  MOVLB  1
479C:  MOVWF  x08
479E:  MOVLB  0
47A0:  CALL   0F4A
47A4:  MOVLW  01
47A6:  MOVWF  FE9
47A8:  MOVFF  103,10B
47AC:  MOVFF  102,10A
47B0:  MOVFF  101,109
47B4:  MOVFF  100,108
47B8:  MOVLB  1
47BA:  CLRF   x0C
47BC:  MOVLB  0
47BE:  CALL   13C4
....................    lcd_gotoxy(1,4); 
47C2:  MOVLW  01
47C4:  MOVLB  1
47C6:  MOVWF  x16
47C8:  MOVLW  04
47CA:  MOVWF  x17
47CC:  MOVLB  0
47CE:  CALL   0A2C
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
47D2:  MOVLW  EE
47D4:  MOVWF  FF6
47D6:  MOVLW  06
47D8:  MOVWF  FF7
47DA:  MOVLW  09
47DC:  MOVLB  1
47DE:  MOVWF  x08
47E0:  MOVLB  0
47E2:  CALL   0F4A
47E6:  MOVLW  89
47E8:  MOVWF  FE9
47EA:  MOVFF  C2,10B
47EE:  MOVFF  C1,10A
47F2:  MOVFF  C0,109
47F6:  MOVFF  BF,108
47FA:  MOVLW  02
47FC:  MOVLB  1
47FE:  MOVWF  x0C
4800:  MOVLB  0
4802:  CALL   13C4
4806:  MOVLW  20
4808:  MOVLB  1
480A:  MOVWF  x15
480C:  MOVLB  0
480E:  CALL   0A9E
....................        
....................       if(UP)//Si oprime hacia arriba 
4812:  BSF    F93.3
4814:  BTFSS  F81.3
4816:  BRA    488C
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
4818:  BCF    FD8.1
481A:  MOVFF  C2,121
481E:  MOVFF  C1,120
4822:  MOVFF  C0,11F
4826:  MOVFF  BF,11E
482A:  MOVLW  0A
482C:  MOVLB  1
482E:  MOVWF  x25
4830:  MOVLW  D7
4832:  MOVWF  x24
4834:  MOVLW  23
4836:  MOVWF  x23
4838:  MOVLW  78
483A:  MOVWF  x22
483C:  MOVLB  0
483E:  CALL   0C9E
4842:  MOVFF  03,C2
4846:  MOVFF  02,C1
484A:  MOVFF  01,C0
484E:  MOVFF  00,BF
4852:  MOVLW  32
4854:  MOVLB  1
4856:  MOVWF  x1B
4858:  MOVLB  0
485A:  CALL   0922
....................          if(Ajuste1>30.0) 
485E:  MOVLB  1
4860:  CLRF   x1D
4862:  CLRF   x1C
4864:  MOVLW  70
4866:  MOVWF  x1B
4868:  MOVLW  83
486A:  MOVWF  x1A
486C:  MOVFF  C2,121
4870:  MOVFF  C1,120
4874:  MOVFF  C0,11F
4878:  MOVFF  BF,11E
487C:  MOVLB  0
487E:  CALL   1576
4882:  BNC   488C
....................          {Ajuste1=0.0;} 
4884:  CLRF   xC2
4886:  CLRF   xC1
4888:  CLRF   xC0
488A:  CLRF   xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
488C:  BSF    F93.2
488E:  BTFSS  F81.2
4890:  BRA    4902
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
4892:  BSF    FD8.1
4894:  MOVFF  C2,121
4898:  MOVFF  C1,120
489C:  MOVFF  C0,11F
48A0:  MOVFF  BF,11E
48A4:  MOVLW  0A
48A6:  MOVLB  1
48A8:  MOVWF  x25
48AA:  MOVLW  D7
48AC:  MOVWF  x24
48AE:  MOVLW  23
48B0:  MOVWF  x23
48B2:  MOVLW  78
48B4:  MOVWF  x22
48B6:  MOVLB  0
48B8:  CALL   0C9E
48BC:  MOVFF  03,C2
48C0:  MOVFF  02,C1
48C4:  MOVFF  01,C0
48C8:  MOVFF  00,BF
48CC:  MOVLW  32
48CE:  MOVLB  1
48D0:  MOVWF  x1B
48D2:  MOVLB  0
48D4:  CALL   0922
....................          if(Ajuste1<0.0) 
48D8:  MOVFF  C2,11D
48DC:  MOVFF  C1,11C
48E0:  MOVFF  C0,11B
48E4:  MOVFF  BF,11A
48E8:  MOVLB  1
48EA:  CLRF   x21
48EC:  CLRF   x20
48EE:  CLRF   x1F
48F0:  CLRF   x1E
48F2:  MOVLB  0
48F4:  CALL   1576
48F8:  BNC   4902
....................          {Ajuste1=0.0;} 
48FA:  CLRF   xC2
48FC:  CLRF   xC1
48FE:  CLRF   xC0
4900:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
4902:  BSF    F93.0
4904:  BTFSS  F81.0
4906:  BRA    4A58
....................       {  if(Flanco1 == 0)  
4908:  BTFSC  34.5
490A:  BRA    4A56
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
490C:  MOVLW  01
490E:  MOVWF  17
4910:  CLRF   36
4912:  MOVLW  02
4914:  MOVWF  1B
4916:  MOVWF  1D
4918:  MOVLW  0B
491A:  MOVWF  1A
491C:  MOVLW  1E
491E:  MOVLB  1
4920:  MOVWF  x1B
4922:  MOVLB  0
4924:  CALL   0922
4928:  MOVLW  0C
492A:  MOVLB  1
492C:  MOVWF  x15
492E:  MOVLB  0
4930:  CALL   0A9E
....................             Temporal=Ajuste1; 
4934:  MOVFF  C2,AA
4938:  MOVFF  C1,A9
493C:  MOVFF  C0,A8
4940:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
4944:  MOVFF  C2,102
4948:  MOVFF  C1,101
494C:  MOVFF  C0,100
4950:  MOVFF  BF,FF
4954:  CALL   15F0
4958:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
495C:  MOVLB  1
495E:  CLRF   x0A
4960:  MOVFF  21,109
4964:  MOVLB  0
4966:  CALL   0B0A
496A:  BSF    FD8.1
496C:  MOVFF  AA,121
4970:  MOVFF  A9,120
4974:  MOVFF  A8,11F
4978:  MOVFF  A7,11E
497C:  MOVFF  03,125
4980:  MOVFF  02,124
4984:  MOVFF  01,123
4988:  MOVFF  00,122
498C:  CALL   0C9E
4990:  MOVFF  03,AA
4994:  MOVFF  02,A9
4998:  MOVFF  01,A8
499C:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
49A0:  MOVFF  AA,11D
49A4:  MOVFF  A9,11C
49A8:  MOVFF  A8,11B
49AC:  MOVFF  A7,11A
49B0:  MOVLB  1
49B2:  CLRF   x21
49B4:  CLRF   x20
49B6:  MOVLW  48
49B8:  MOVWF  x1F
49BA:  MOVLW  85
49BC:  MOVWF  x1E
49BE:  MOVLB  0
49C0:  CALL   120A
49C4:  MOVFF  03,AE
49C8:  MOVFF  02,AD
49CC:  MOVFF  01,AC
49D0:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
49D4:  MOVFF  AE,102
49D8:  MOVFF  AD,101
49DC:  MOVFF  AC,100
49E0:  MOVFF  AB,FF
49E4:  CALL   15F0
49E8:  MOVFF  01,22
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
49EC:  MOVLW  19
49EE:  MOVWF  FA9
49F0:  MOVFF  21,FA8
49F4:  BCF    FA6.6
49F6:  BCF    FA6.7
49F8:  BSF    FA6.2
49FA:  MOVF   FF2,W
49FC:  MOVWF  00
49FE:  BCF    FF2.7
4A00:  MOVLB  F
4A02:  MOVLW  55
4A04:  MOVWF  FA7
4A06:  MOVLW  AA
4A08:  MOVWF  FA7
4A0A:  BSF    FA6.1
4A0C:  BTFSC  FA6.1
4A0E:  BRA    4A0C
4A10:  BCF    FA6.2
4A12:  MOVF   00,W
4A14:  IORWF  FF2,F
4A16:  MOVLW  1A
4A18:  MOVWF  FA9
4A1A:  MOVFF  22,FA8
4A1E:  BCF    FA6.6
4A20:  BCF    FA6.7
4A22:  BSF    FA6.2
4A24:  MOVF   FF2,W
4A26:  MOVWF  00
4A28:  BCF    FF2.7
4A2A:  MOVLW  55
4A2C:  MOVWF  FA7
4A2E:  MOVLW  AA
4A30:  MOVWF  FA7
4A32:  BSF    FA6.1
4A34:  BTFSC  FA6.1
4A36:  BRA    4A34
4A38:  BCF    FA6.2
4A3A:  MOVF   00,W
4A3C:  IORWF  FF2,F
....................             delay_ms(1000); 
4A3E:  MOVLW  04
4A40:  MOVLB  1
4A42:  MOVWF  x00
4A44:  MOVLW  FA
4A46:  MOVWF  x1B
4A48:  MOVLB  0
4A4A:  CALL   0922
4A4E:  MOVLB  1
4A50:  DECFSZ x00,F
4A52:  BRA    4A44
4A54:  MOVLB  0
....................             }} 
....................          else 
4A56:  BRA    4A5A
....................             {Flanco1 = 0;}    
4A58:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4A5A:  BSF    F93.1
4A5C:  BTFSS  F81.1
4A5E:  BRA    4A96
....................       {  if(Flanco3 == 0)  
4A60:  BTFSC  34.7
4A62:  BRA    4A94
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4A64:  MOVLW  01
4A66:  MOVWF  17
4A68:  CLRF   36
4A6A:  MOVLW  02
4A6C:  MOVWF  1B
4A6E:  MOVWF  1D
4A70:  MOVLW  0B
4A72:  MOVWF  1A
4A74:  MOVLW  02
4A76:  MOVLB  1
4A78:  MOVWF  x00
4A7A:  MOVLW  FA
4A7C:  MOVWF  x1B
4A7E:  MOVLB  0
4A80:  CALL   0922
4A84:  MOVLB  1
4A86:  DECFSZ x00,F
4A88:  BRA    4A7A
4A8A:  MOVLW  0C
4A8C:  MOVWF  x15
4A8E:  MOVLB  0
4A90:  CALL   0A9E
....................          else 
4A94:  BRA    4A98
....................             {Flanco3 = 0;}   
4A96:  BCF    34.7
4A98:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
4A9A:  MOVF   17,W
4A9C:  SUBLW  09
4A9E:  BTFSS  FD8.2
4AA0:  BRA    50E8
....................    { 
....................    lcd_gotoxy(1,1); 
4AA2:  MOVLW  01
4AA4:  MOVWF  x16
4AA6:  MOVWF  x17
4AA8:  MOVLB  0
4AAA:  CALL   0A2C
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
4AAE:  MOVLB  1
4AB0:  CLRF   x0A
4AB2:  MOVFF  29,109
4AB6:  MOVLB  0
4AB8:  CALL   0B0A
4ABC:  MOVFF  00,100
4AC0:  MOVFF  01,101
4AC4:  MOVFF  02,102
4AC8:  MOVFF  03,103
4ACC:  MOVFF  03,121
4AD0:  MOVFF  02,120
4AD4:  MOVFF  01,11F
4AD8:  MOVFF  00,11E
4ADC:  MOVLB  1
4ADE:  CLRF   x25
4AE0:  CLRF   x24
4AE2:  MOVLW  7F
4AE4:  MOVWF  x23
4AE6:  MOVLW  86
4AE8:  MOVWF  x22
4AEA:  MOVLB  0
4AEC:  CALL   0B40
4AF0:  MOVLB  1
4AF2:  CLRF   x1D
4AF4:  CLRF   x1C
4AF6:  MOVLW  48
4AF8:  MOVWF  x1B
4AFA:  MOVLW  85
4AFC:  MOVWF  x1A
4AFE:  MOVFF  03,121
4B02:  MOVFF  02,120
4B06:  MOVFF  01,11F
4B0A:  MOVFF  00,11E
4B0E:  MOVLB  0
4B10:  CALL   120A
4B14:  MOVFF  00,100
4B18:  MOVFF  01,101
4B1C:  MOVFF  02,102
4B20:  MOVFF  03,103
4B24:  MOVLW  FE
4B26:  MOVWF  FF6
4B28:  MOVLW  06
4B2A:  MOVWF  FF7
4B2C:  MOVLW  0D
4B2E:  MOVLB  1
4B30:  MOVWF  x08
4B32:  MOVLB  0
4B34:  CALL   0F4A
4B38:  MOVLW  01
4B3A:  MOVWF  FE9
4B3C:  MOVFF  103,10B
4B40:  MOVFF  102,10A
4B44:  MOVFF  101,109
4B48:  MOVFF  100,108
4B4C:  MOVLB  1
4B4E:  CLRF   x0C
4B50:  MOVLB  0
4B52:  CALL   13C4
4B56:  MOVLW  25
4B58:  MOVLB  1
4B5A:  MOVWF  x15
4B5C:  MOVLB  0
4B5E:  CALL   0A9E
4B62:  MOVLW  20
4B64:  MOVLB  1
4B66:  MOVWF  x15
4B68:  MOVLB  0
4B6A:  CALL   0A9E
....................  
....................    lcd_gotoxy(1,4); 
4B6E:  MOVLW  01
4B70:  MOVLB  1
4B72:  MOVWF  x16
4B74:  MOVLW  04
4B76:  MOVWF  x17
4B78:  MOVLB  0
4B7A:  CALL   0A2C
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
4B7E:  MOVLW  02
4B80:  MOVLB  1
4B82:  MOVWF  x04
4B84:  MOVLB  0
4B86:  CALL   162C
4B8A:  MOVFF  00,100
4B8E:  MOVFF  01,101
4B92:  MOVFF  02,102
4B96:  MOVFF  03,103
4B9A:  MOVFF  03,121
4B9E:  MOVFF  02,120
4BA2:  MOVFF  01,11F
4BA6:  MOVFF  00,11E
4BAA:  MOVLB  1
4BAC:  CLRF   x25
4BAE:  MOVLW  C0
4BB0:  MOVWF  x24
4BB2:  MOVLW  7F
4BB4:  MOVWF  x23
4BB6:  MOVLW  88
4BB8:  MOVWF  x22
4BBA:  MOVLB  0
4BBC:  CALL   0B40
4BC0:  MOVLB  1
4BC2:  CLRF   x1D
4BC4:  CLRF   x1C
4BC6:  MOVLW  48
4BC8:  MOVWF  x1B
4BCA:  MOVLW  85
4BCC:  MOVWF  x1A
4BCE:  MOVFF  03,121
4BD2:  MOVFF  02,120
4BD6:  MOVFF  01,11F
4BDA:  MOVFF  00,11E
4BDE:  MOVLB  0
4BE0:  CALL   120A
4BE4:  MOVFF  00,100
4BE8:  MOVFF  01,101
4BEC:  MOVFF  02,102
4BF0:  MOVFF  03,103
4BF4:  MOVLW  14
4BF6:  MOVWF  FF6
4BF8:  MOVLW  07
4BFA:  MOVWF  FF7
4BFC:  MOVLW  04
4BFE:  MOVLB  1
4C00:  MOVWF  x08
4C02:  MOVLB  0
4C04:  CALL   0F4A
4C08:  MOVLW  01
4C0A:  MOVWF  FE9
4C0C:  MOVFF  8E,10B
4C10:  MOVFF  8D,10A
4C14:  MOVFF  8C,109
4C18:  MOVFF  8B,108
4C1C:  MOVLB  1
4C1E:  MOVWF  x0C
4C20:  MOVLB  0
4C22:  CALL   13C4
4C26:  MOVLW  1D
4C28:  MOVWF  FF6
4C2A:  MOVLW  07
4C2C:  MOVWF  FF7
4C2E:  MOVLW  0A
4C30:  MOVLB  1
4C32:  MOVWF  x08
4C34:  MOVLB  0
4C36:  CALL   0F4A
4C3A:  MOVLW  01
4C3C:  MOVWF  FE9
4C3E:  MOVFF  103,10B
4C42:  MOVFF  102,10A
4C46:  MOVFF  101,109
4C4A:  MOVFF  100,108
4C4E:  MOVLB  1
4C50:  CLRF   x0C
4C52:  MOVLB  0
4C54:  CALL   13C4
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
4C58:  BTFSC  4E.1
4C5A:  BRA    4DBA
4C5C:  BTFSC  4E.2
4C5E:  BRA    4DBA
4C60:  BTFSC  4E.3
4C62:  BRA    4DBA
....................       { 
....................          if(UP)//Si oprime hacia arriba 
4C64:  BSF    F93.3
4C66:  BTFSS  F81.3
4C68:  BRA    4CC4
....................          { 
....................             delay_ms(500); 
4C6A:  MOVLW  02
4C6C:  MOVLB  1
4C6E:  MOVWF  x00
4C70:  MOVLW  FA
4C72:  MOVWF  x1B
4C74:  MOVLB  0
4C76:  CALL   0922
4C7A:  MOVLB  1
4C7C:  DECFSZ x00,F
4C7E:  BRA    4C70
....................             if(UP) 
4C80:  BSF    F93.3
4C82:  BTFSS  F81.3
4C84:  BRA    4CC2
....................             { 
....................                lcd_gotoxy(1,2); 
4C86:  MOVLW  01
4C88:  MOVWF  x16
4C8A:  MOVLW  02
4C8C:  MOVWF  x17
4C8E:  MOVLB  0
4C90:  CALL   0A2C
....................                printf(lcd_putc,"   Modo Manual  "); 
4C94:  MOVLW  2E
4C96:  MOVWF  FF6
4C98:  MOVLW  07
4C9A:  MOVWF  FF7
4C9C:  CALL   0F2A
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4CA0:  BSF    4E.1
4CA2:  BCF    4E.2
4CA4:  BCF    4E.3
4CA6:  MOVLW  0A
4CA8:  MOVWF  2C
4CAA:  MOVWF  2E
....................                delay_ms(1000); 
4CAC:  MOVLW  04
4CAE:  MOVLB  1
4CB0:  MOVWF  x00
4CB2:  MOVLW  FA
4CB4:  MOVWF  x1B
4CB6:  MOVLB  0
4CB8:  CALL   0922
4CBC:  MOVLB  1
4CBE:  DECFSZ x00,F
4CC0:  BRA    4CB2
4CC2:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
4CC4:  BSF    F93.2
4CC6:  BTFSS  F81.2
4CC8:  BRA    4D24
....................          { 
....................             delay_ms(500); 
4CCA:  MOVLW  02
4CCC:  MOVLB  1
4CCE:  MOVWF  x00
4CD0:  MOVLW  FA
4CD2:  MOVWF  x1B
4CD4:  MOVLB  0
4CD6:  CALL   0922
4CDA:  MOVLB  1
4CDC:  DECFSZ x00,F
4CDE:  BRA    4CD0
....................             if(DOWN) 
4CE0:  BSF    F93.2
4CE2:  BTFSS  F81.2
4CE4:  BRA    4D22
....................             { 
....................                lcd_gotoxy(1,2); 
4CE6:  MOVLW  01
4CE8:  MOVWF  x16
4CEA:  MOVLW  02
4CEC:  MOVWF  x17
4CEE:  MOVLB  0
4CF0:  CALL   0A2C
....................                printf(lcd_putc,"   Modo Auto   "); 
4CF4:  MOVLW  40
4CF6:  MOVWF  FF6
4CF8:  MOVLW  07
4CFA:  MOVWF  FF7
4CFC:  CALL   0F2A
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
4D00:  BSF    4E.2
4D02:  BCF    4E.1
4D04:  BCF    4E.3
4D06:  MOVLW  0A
4D08:  MOVWF  2D
4D0A:  MOVWF  2E
....................                delay_ms(1000); 
4D0C:  MOVLW  04
4D0E:  MOVLB  1
4D10:  MOVWF  x00
4D12:  MOVLW  FA
4D14:  MOVWF  x1B
4D16:  MOVLB  0
4D18:  CALL   0922
4D1C:  MOVLB  1
4D1E:  DECFSZ x00,F
4D20:  BRA    4D12
4D22:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
4D24:  BSF    F93.0
4D26:  BTFSS  F81.0
4D28:  BRA    4D84
....................          { 
....................             delay_ms(500); 
4D2A:  MOVLW  02
4D2C:  MOVLB  1
4D2E:  MOVWF  x00
4D30:  MOVLW  FA
4D32:  MOVWF  x1B
4D34:  MOVLB  0
4D36:  CALL   0922
4D3A:  MOVLB  1
4D3C:  DECFSZ x00,F
4D3E:  BRA    4D30
....................             if(RIGHT) 
4D40:  BSF    F93.0
4D42:  BTFSS  F81.0
4D44:  BRA    4D82
....................             { 
....................                lcd_gotoxy(1,2); 
4D46:  MOVLW  01
4D48:  MOVWF  x16
4D4A:  MOVLW  02
4D4C:  MOVWF  x17
4D4E:  MOVLB  0
4D50:  CALL   0A2C
....................                printf(lcd_putc,"   Modo Semi   "); 
4D54:  MOVLW  50
4D56:  MOVWF  FF6
4D58:  MOVLW  07
4D5A:  MOVWF  FF7
4D5C:  CALL   0F2A
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4D60:  BSF    4E.3
4D62:  BCF    4E.1
4D64:  BCF    4E.2
4D66:  MOVLW  0A
4D68:  MOVWF  2C
4D6A:  MOVWF  2D
....................                delay_ms(1000); 
4D6C:  MOVLW  04
4D6E:  MOVLB  1
4D70:  MOVWF  x00
4D72:  MOVLW  FA
4D74:  MOVWF  x1B
4D76:  MOVLB  0
4D78:  CALL   0922
4D7C:  MOVLB  1
4D7E:  DECFSZ x00,F
4D80:  BRA    4D72
4D82:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
4D84:  BSF    F93.1
4D86:  BTFSS  F81.1
4D88:  BRA    4DBA
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4D8A:  MOVLW  01
4D8C:  MOVWF  17
4D8E:  CLRF   36
4D90:  MOVLW  02
4D92:  MOVWF  1B
4D94:  MOVWF  1D
4D96:  MOVLW  0B
4D98:  MOVWF  1A
4D9A:  MOVLW  02
4D9C:  MOVLB  1
4D9E:  MOVWF  x00
4DA0:  MOVLW  FA
4DA2:  MOVWF  x1B
4DA4:  MOVLB  0
4DA6:  CALL   0922
4DAA:  MOVLB  1
4DAC:  DECFSZ x00,F
4DAE:  BRA    4DA0
4DB0:  MOVLW  0C
4DB2:  MOVWF  x15
4DB4:  MOVLB  0
4DB6:  CALL   0A9E
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4DBA:  BTFSC  4E.1
4DBC:  BRA    4DC6
4DBE:  MOVF   2D,W
4DC0:  SUBLW  14
4DC2:  BTFSS  FD8.2
4DC4:  BRA    4EEE
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4DC6:  BCF    4E.2
4DC8:  BCF    4E.3
4DCA:  MOVLW  0A
4DCC:  MOVWF  2C
4DCE:  MOVWF  2E
....................          lcd_gotoxy(1,2); 
4DD0:  MOVLW  01
4DD2:  MOVLB  1
4DD4:  MOVWF  x16
4DD6:  MOVLW  02
4DD8:  MOVWF  x17
4DDA:  MOVLB  0
4DDC:  CALL   0A2C
....................          printf(lcd_putc,"   Modo Manual  "); 
4DE0:  MOVLW  60
4DE2:  MOVWF  FF6
4DE4:  MOVLW  07
4DE6:  MOVWF  FF7
4DE8:  CALL   0F2A
....................          lcd_gotoxy(1,3); 
4DEC:  MOVLW  01
4DEE:  MOVLB  1
4DF0:  MOVWF  x16
4DF2:  MOVLW  03
4DF4:  MOVWF  x17
4DF6:  MOVLB  0
4DF8:  CALL   0A2C
....................          printf(lcd_putc,"    Seleccionado    "); 
4DFC:  MOVLW  72
4DFE:  MOVWF  FF6
4E00:  MOVLW  07
4E02:  MOVWF  FF7
4E04:  CALL   0F2A
....................          if(LEFT) 
4E08:  BSF    F93.1
4E0A:  BTFSS  F81.1
4E0C:  BRA    4EEE
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
4E0E:  BCF    4E.1
4E10:  MOVLW  14
4E12:  MOVWF  2D
4E14:  MOVLW  0A
4E16:  MOVWF  2C
4E18:  MOVWF  2E
4E1A:  MOVLW  02
4E1C:  MOVLB  1
4E1E:  MOVWF  x00
4E20:  MOVLW  FA
4E22:  MOVWF  x1B
4E24:  MOVLB  0
4E26:  CALL   0922
4E2A:  MOVLB  1
4E2C:  DECFSZ x00,F
4E2E:  BRA    4E20
4E30:  MOVLW  0C
4E32:  MOVWF  x15
4E34:  MOVLB  0
4E36:  CALL   0A9E
4E3A:  MOVLW  FE
4E3C:  MOVLB  1
4E3E:  MOVWF  x00
4E40:  MOVLB  0
4E42:  CALL   1684
4E46:  MOVLW  FE
4E48:  MOVWF  29
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
4E4A:  MOVLW  0A
4E4C:  MOVWF  FA9
4E4E:  MOVFF  2D,FA8
4E52:  BCF    FA6.6
4E54:  BCF    FA6.7
4E56:  BSF    FA6.2
4E58:  MOVF   FF2,W
4E5A:  MOVWF  00
4E5C:  BCF    FF2.7
4E5E:  MOVLB  F
4E60:  MOVLW  55
4E62:  MOVWF  FA7
4E64:  MOVLW  AA
4E66:  MOVWF  FA7
4E68:  BSF    FA6.1
4E6A:  BTFSC  FA6.1
4E6C:  BRA    4E6A
4E6E:  BCF    FA6.2
4E70:  MOVF   00,W
4E72:  IORWF  FF2,F
4E74:  MOVLW  0C
4E76:  MOVWF  FA9
4E78:  MOVFF  2E,FA8
4E7C:  BCF    FA6.6
4E7E:  BCF    FA6.7
4E80:  BSF    FA6.2
4E82:  MOVF   FF2,W
4E84:  MOVWF  00
4E86:  BCF    FF2.7
4E88:  MOVLW  55
4E8A:  MOVWF  FA7
4E8C:  MOVLW  AA
4E8E:  MOVWF  FA7
4E90:  BSF    FA6.1
4E92:  BTFSC  FA6.1
4E94:  BRA    4E92
4E96:  BCF    FA6.2
4E98:  MOVF   00,W
4E9A:  IORWF  FF2,F
4E9C:  MOVLW  0B
4E9E:  MOVWF  FA9
4EA0:  MOVFF  2C,FA8
4EA4:  BCF    FA6.6
4EA6:  BCF    FA6.7
4EA8:  BSF    FA6.2
4EAA:  MOVF   FF2,W
4EAC:  MOVWF  00
4EAE:  BCF    FF2.7
4EB0:  MOVLW  55
4EB2:  MOVWF  FA7
4EB4:  MOVLW  AA
4EB6:  MOVWF  FA7
4EB8:  BSF    FA6.1
4EBA:  BTFSC  FA6.1
4EBC:  BRA    4EBA
4EBE:  BCF    FA6.2
4EC0:  MOVF   00,W
4EC2:  IORWF  FF2,F
4EC4:  MOVLW  0D
4EC6:  MOVWF  FA9
4EC8:  MOVFF  29,FA8
4ECC:  BCF    FA6.6
4ECE:  BCF    FA6.7
4ED0:  BSF    FA6.2
4ED2:  MOVF   FF2,W
4ED4:  MOVWF  00
4ED6:  BCF    FF2.7
4ED8:  MOVLW  55
4EDA:  MOVWF  FA7
4EDC:  MOVLW  AA
4EDE:  MOVWF  FA7
4EE0:  BSF    FA6.1
4EE2:  BTFSC  FA6.1
4EE4:  BRA    4EE2
4EE6:  BCF    FA6.2
4EE8:  MOVF   00,W
4EEA:  IORWF  FF2,F
4EEC:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
4EEE:  BTFSC  4E.2
4EF0:  BRA    4EF8
4EF2:  MOVF   2C,W
4EF4:  SUBLW  14
4EF6:  BNZ   4FC0
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
4EF8:  BCF    4E.1
4EFA:  BCF    4E.3
4EFC:  MOVLW  0A
4EFE:  MOVWF  2E
4F00:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
4F02:  MOVLW  01
4F04:  MOVLB  1
4F06:  MOVWF  x16
4F08:  MOVLW  02
4F0A:  MOVWF  x17
4F0C:  MOVLB  0
4F0E:  CALL   0A2C
....................          printf(lcd_putc,"   Modo Auto   "); 
4F12:  MOVLW  88
4F14:  MOVWF  FF6
4F16:  MOVLW  07
4F18:  MOVWF  FF7
4F1A:  CALL   0F2A
....................          lcd_gotoxy(1,3); 
4F1E:  MOVLW  01
4F20:  MOVLB  1
4F22:  MOVWF  x16
4F24:  MOVLW  03
4F26:  MOVWF  x17
4F28:  MOVLB  0
4F2A:  CALL   0A2C
....................          printf(lcd_putc,"    Seleccionado    "); 
4F2E:  MOVLW  98
4F30:  MOVWF  FF6
4F32:  MOVLW  07
4F34:  MOVWF  FF7
4F36:  CALL   0F2A
....................          if(LEFT) 
4F3A:  BSF    F93.1
4F3C:  BTFSS  F81.1
4F3E:  BRA    4FC0
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
4F40:  BCF    4E.2
4F42:  MOVLW  14
4F44:  MOVWF  2C
4F46:  MOVLW  0A
4F48:  MOVWF  2E
4F4A:  MOVWF  2D
4F4C:  MOVLW  02
4F4E:  MOVLB  1
4F50:  MOVWF  x00
4F52:  MOVLW  FA
4F54:  MOVWF  x1B
4F56:  MOVLB  0
4F58:  CALL   0922
4F5C:  MOVLB  1
4F5E:  DECFSZ x00,F
4F60:  BRA    4F52
4F62:  MOVLW  0C
4F64:  MOVWF  x15
4F66:  MOVLB  0
4F68:  CALL   0A9E
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
4F6C:  MOVLW  0B
4F6E:  MOVWF  FA9
4F70:  MOVFF  2C,FA8
4F74:  BCF    FA6.6
4F76:  BCF    FA6.7
4F78:  BSF    FA6.2
4F7A:  MOVF   FF2,W
4F7C:  MOVWF  00
4F7E:  BCF    FF2.7
4F80:  MOVLB  F
4F82:  MOVLW  55
4F84:  MOVWF  FA7
4F86:  MOVLW  AA
4F88:  MOVWF  FA7
4F8A:  BSF    FA6.1
4F8C:  BTFSC  FA6.1
4F8E:  BRA    4F8C
4F90:  BCF    FA6.2
4F92:  MOVF   00,W
4F94:  IORWF  FF2,F
4F96:  MOVLW  0C
4F98:  MOVWF  FA9
4F9A:  MOVFF  2E,FA8
4F9E:  BCF    FA6.6
4FA0:  BCF    FA6.7
4FA2:  BSF    FA6.2
4FA4:  MOVF   FF2,W
4FA6:  MOVWF  00
4FA8:  BCF    FF2.7
4FAA:  MOVLW  55
4FAC:  MOVWF  FA7
4FAE:  MOVLW  AA
4FB0:  MOVWF  FA7
4FB2:  BSF    FA6.1
4FB4:  BTFSC  FA6.1
4FB6:  BRA    4FB4
4FB8:  BCF    FA6.2
4FBA:  MOVF   00,W
4FBC:  IORWF  FF2,F
4FBE:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
4FC0:  BTFSC  4E.3
4FC2:  BRA    4FCC
4FC4:  MOVF   2E,W
4FC6:  SUBLW  14
4FC8:  BTFSS  FD8.2
4FCA:  BRA    50E6
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4FCC:  BCF    4E.1
4FCE:  BCF    4E.2
4FD0:  MOVLW  0A
4FD2:  MOVWF  2C
4FD4:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
4FD6:  MOVLW  01
4FD8:  MOVLB  1
4FDA:  MOVWF  x16
4FDC:  MOVLW  02
4FDE:  MOVWF  x17
4FE0:  MOVLB  0
4FE2:  CALL   0A2C
....................          printf(lcd_putc,"   Modo Semi   "); 
4FE6:  MOVLW  AE
4FE8:  MOVWF  FF6
4FEA:  MOVLW  07
4FEC:  MOVWF  FF7
4FEE:  CALL   0F2A
....................          if(UP) 
4FF2:  BSF    F93.3
4FF4:  BTFSS  F81.3
4FF6:  BRA    4FFA
....................          { 
....................             tmp++; 
4FF8:  INCF   29,F
....................              
....................          } 
....................           
....................          if(DOWN) 
4FFA:  BSF    F93.2
4FFC:  BTFSS  F81.2
4FFE:  BRA    5002
....................          { 
....................             tmp--; 
5000:  DECF   29,F
....................          } 
....................          ValorSemi=tmp; 
5002:  MOVFF  29,2F
....................          ajustar_damper(tmp); 
5006:  MOVFF  29,100
500A:  CALL   1684
....................          if(LEFT) 
500E:  BSF    F93.1
5010:  BTFSS  F81.1
5012:  BRA    50E6
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5014:  MOVLW  0D
5016:  MOVWF  FA9
5018:  MOVFF  29,FA8
501C:  BCF    FA6.6
501E:  BCF    FA6.7
5020:  BSF    FA6.2
5022:  MOVF   FF2,W
5024:  MOVWF  00
5026:  BCF    FF2.7
5028:  MOVLB  F
502A:  MOVLW  55
502C:  MOVWF  FA7
502E:  MOVLW  AA
5030:  MOVWF  FA7
5032:  BSF    FA6.1
5034:  BTFSC  FA6.1
5036:  BRA    5034
5038:  BCF    FA6.2
503A:  MOVF   00,W
503C:  IORWF  FF2,F
503E:  BCF    4E.3
5040:  MOVLW  14
5042:  MOVWF  2E
5044:  MOVLW  0A
5046:  MOVWF  2C
5048:  MOVWF  2D
504A:  MOVLW  02
504C:  MOVLB  1
504E:  MOVWF  x00
5050:  MOVLW  FA
5052:  MOVWF  x1B
5054:  MOVLB  0
5056:  CALL   0922
505A:  MOVLB  1
505C:  DECFSZ x00,F
505E:  BRA    5050
5060:  MOVLW  0C
5062:  MOVWF  x15
5064:  MOVLB  0
5066:  CALL   0A9E
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
506A:  MOVLW  0C
506C:  MOVWF  FA9
506E:  MOVFF  2E,FA8
5072:  BCF    FA6.6
5074:  BCF    FA6.7
5076:  BSF    FA6.2
5078:  MOVF   FF2,W
507A:  MOVWF  00
507C:  BCF    FF2.7
507E:  MOVLB  F
5080:  MOVLW  55
5082:  MOVWF  FA7
5084:  MOVLW  AA
5086:  MOVWF  FA7
5088:  BSF    FA6.1
508A:  BTFSC  FA6.1
508C:  BRA    508A
508E:  BCF    FA6.2
5090:  MOVF   00,W
5092:  IORWF  FF2,F
5094:  MOVLW  0B
5096:  MOVWF  FA9
5098:  MOVFF  2C,FA8
509C:  BCF    FA6.6
509E:  BCF    FA6.7
50A0:  BSF    FA6.2
50A2:  MOVF   FF2,W
50A4:  MOVWF  00
50A6:  BCF    FF2.7
50A8:  MOVLW  55
50AA:  MOVWF  FA7
50AC:  MOVLW  AA
50AE:  MOVWF  FA7
50B0:  BSF    FA6.1
50B2:  BTFSC  FA6.1
50B4:  BRA    50B2
50B6:  BCF    FA6.2
50B8:  MOVF   00,W
50BA:  IORWF  FF2,F
50BC:  MOVLW  0A
50BE:  MOVWF  FA9
50C0:  MOVFF  2D,FA8
50C4:  BCF    FA6.6
50C6:  BCF    FA6.7
50C8:  BSF    FA6.2
50CA:  MOVF   FF2,W
50CC:  MOVWF  00
50CE:  BCF    FF2.7
50D0:  MOVLW  55
50D2:  MOVWF  FA7
50D4:  MOVLW  AA
50D6:  MOVWF  FA7
50D8:  BSF    FA6.1
50DA:  BTFSC  FA6.1
50DC:  BRA    50DA
50DE:  BCF    FA6.2
50E0:  MOVF   00,W
50E2:  IORWF  FF2,F
50E4:  MOVLB  0
50E6:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
50E8:  MOVF   17,W
50EA:  SUBLW  14
50EC:  BTFSS  FD8.2
50EE:  BRA    549A
....................    { 
....................       if(Lectura2==1) 
50F0:  BTFSS  35.6
50F2:  BRA    522A
....................       { 
....................       lcd_gotoxy(1,1);                      
50F4:  MOVLW  01
50F6:  MOVWF  x16
50F8:  MOVWF  x17
50FA:  MOVLB  0
50FC:  CALL   0A2C
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
5100:  MOVLW  BE
5102:  MOVWF  FF6
5104:  MOVLW  07
5106:  MOVWF  FF7
5108:  CALL   0F2A
....................       lcd_gotoxy(1,2); 
510C:  MOVLW  01
510E:  MOVLB  1
5110:  MOVWF  x16
5112:  MOVLW  02
5114:  MOVWF  x17
5116:  MOVLB  0
5118:  CALL   0A2C
....................       printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
511C:  MOVLB  1
511E:  CLRF   x0A
5120:  MOVFF  29,109
5124:  MOVLB  0
5126:  CALL   0B0A
512A:  MOVFF  00,100
512E:  MOVFF  01,101
5132:  MOVFF  02,102
5136:  MOVFF  03,103
513A:  MOVFF  03,121
513E:  MOVFF  02,120
5142:  MOVFF  01,11F
5146:  MOVFF  00,11E
514A:  MOVLB  1
514C:  CLRF   x25
514E:  CLRF   x24
5150:  MOVLW  7F
5152:  MOVWF  x23
5154:  MOVLW  86
5156:  MOVWF  x22
5158:  MOVLB  0
515A:  CALL   0B40
515E:  MOVLB  1
5160:  CLRF   x1D
5162:  CLRF   x1C
5164:  MOVLW  48
5166:  MOVWF  x1B
5168:  MOVLW  85
516A:  MOVWF  x1A
516C:  MOVFF  03,121
5170:  MOVFF  02,120
5174:  MOVFF  01,11F
5178:  MOVFF  00,11E
517C:  MOVLB  0
517E:  CALL   120A
5182:  MOVFF  00,100
5186:  MOVFF  01,101
518A:  MOVFF  02,102
518E:  MOVFF  03,103
5192:  MOVLW  C8
5194:  MOVWF  FF6
5196:  MOVLW  07
5198:  MOVWF  FF7
519A:  MOVLW  05
519C:  MOVLB  1
519E:  MOVWF  x08
51A0:  MOVLB  0
51A2:  CALL   0F4A
51A6:  MOVLW  01
51A8:  MOVWF  FE9
51AA:  MOVFF  103,10B
51AE:  MOVFF  102,10A
51B2:  MOVFF  101,109
51B6:  MOVFF  100,108
51BA:  MOVLB  1
51BC:  CLRF   x0C
51BE:  MOVLB  0
51C0:  CALL   13C4
51C4:  MOVLW  25
51C6:  MOVLB  1
51C8:  MOVWF  x15
51CA:  MOVLB  0
51CC:  CALL   0A9E
....................       lcd_gotoxy(1,3); 
51D0:  MOVLW  01
51D2:  MOVLB  1
51D4:  MOVWF  x16
51D6:  MOVLW  03
51D8:  MOVWF  x17
51DA:  MOVLB  0
51DC:  CALL   0A2C
....................       printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
51E0:  MOVLW  D6
51E2:  MOVWF  FF6
51E4:  MOVLW  07
51E6:  MOVWF  FF7
51E8:  MOVLW  08
51EA:  MOVLB  1
51EC:  MOVWF  x08
51EE:  MOVLB  0
51F0:  CALL   0F4A
51F4:  MOVLW  01
51F6:  MOVWF  FE9
51F8:  MOVFF  8E,10B
51FC:  MOVFF  8D,10A
5200:  MOVFF  8C,109
5204:  MOVFF  8B,108
5208:  MOVLB  1
520A:  MOVWF  x0C
520C:  MOVLB  0
520E:  CALL   13C4
5212:  MOVLW  E3
5214:  MOVWF  FF6
5216:  MOVLW  07
5218:  MOVWF  FF7
521A:  MOVLW  07
521C:  MOVLB  1
521E:  MOVWF  x08
5220:  MOVLB  0
5222:  CALL   0F4A
....................       Lectura2=0; 
5226:  BCF    35.6
5228:  MOVLB  1
....................       } 
....................        
....................       if(horas>=60) 
522A:  MOVF   32,W
522C:  SUBLW  3B
522E:  BC    524E
....................       { 
....................          lcd_gotoxy(10,1);                      
5230:  MOVLW  0A
5232:  MOVWF  x16
5234:  MOVLW  01
5236:  MOVWF  x17
5238:  MOVLB  0
523A:  CALL   0A2C
....................          printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
523E:  MOVLW  EC
5240:  MOVWF  FF6
5242:  MOVLW  07
5244:  MOVWF  FF7
5246:  CALL   0F2A
....................       } 
....................       else 
524A:  BRA    5268
524C:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
524E:  MOVLW  0A
5250:  MOVWF  x16
5252:  MOVLW  01
5254:  MOVWF  x17
5256:  MOVLB  0
5258:  CALL   0A2C
....................          printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
525C:  MOVLW  F8
525E:  MOVWF  FF6
5260:  MOVLW  07
5262:  MOVWF  FF7
5264:  CALL   0F2A
....................       } 
....................        
....................       if(iniciodamper==0) 
5268:  BTFSC  4E.0
526A:  BRA    528C
....................       { 
....................          flag_iniciodamper=1; 
526C:  BSF    35.7
....................          lcd_gotoxy(11,2); 
526E:  MOVLW  0B
5270:  MOVLB  1
5272:  MOVWF  x16
5274:  MOVLW  02
5276:  MOVWF  x17
5278:  MOVLB  0
527A:  CALL   0A2C
....................          printf(lcd_putc,"Flujo=Ajus"); 
527E:  MOVLW  04
5280:  MOVWF  FF6
5282:  MOVLW  08
5284:  MOVWF  FF7
5286:  CALL   0F2A
....................       } 
....................       else 
528A:  BRA    532E
....................       { 
....................          flag_iniciodamper=0; 
528C:  BCF    35.7
....................          if(Flujo<0.5) 
528E:  MOVFF  8E,11D
5292:  MOVFF  8D,11C
5296:  MOVFF  8C,11B
529A:  MOVFF  8B,11A
529E:  MOVLB  1
52A0:  CLRF   x21
52A2:  CLRF   x20
52A4:  CLRF   x1F
52A6:  MOVLW  7E
52A8:  MOVWF  x1E
52AA:  MOVLB  0
52AC:  CALL   1576
52B0:  BNC   52D0
....................          { 
....................             lcd_gotoxy(11,2); 
52B2:  MOVLW  0B
52B4:  MOVLB  1
52B6:  MOVWF  x16
52B8:  MOVLW  02
52BA:  MOVWF  x17
52BC:  MOVLB  0
52BE:  CALL   0A2C
....................             printf(lcd_putc,"Flujo=Bajo");       
52C2:  MOVLW  10
52C4:  MOVWF  FF6
52C6:  MOVLW  08
52C8:  MOVWF  FF7
52CA:  CALL   0F2A
....................          } 
....................          else 
52CE:  BRA    532E
....................          { 
....................             if(Flujo>2.0) 
52D0:  MOVLB  1
52D2:  CLRF   x1D
52D4:  CLRF   x1C
52D6:  CLRF   x1B
52D8:  MOVLW  80
52DA:  MOVWF  x1A
52DC:  MOVFF  8E,121
52E0:  MOVFF  8D,120
52E4:  MOVFF  8C,11F
52E8:  MOVFF  8B,11E
52EC:  MOVLB  0
52EE:  CALL   1576
52F2:  BNC   5312
....................             { 
....................                lcd_gotoxy(11,2); 
52F4:  MOVLW  0B
52F6:  MOVLB  1
52F8:  MOVWF  x16
52FA:  MOVLW  02
52FC:  MOVWF  x17
52FE:  MOVLB  0
5300:  CALL   0A2C
....................                printf(lcd_putc,"Flujo=Alto");                
5304:  MOVLW  1C
5306:  MOVWF  FF6
5308:  MOVLW  08
530A:  MOVWF  FF7
530C:  CALL   0F2A
....................             } 
....................             else 
5310:  BRA    532E
....................             { 
....................                lcd_gotoxy(11,2); 
5312:  MOVLW  0B
5314:  MOVLB  1
5316:  MOVWF  x16
5318:  MOVLW  02
531A:  MOVWF  x17
531C:  MOVLB  0
531E:  CALL   0A2C
....................                printf(lcd_putc,"Flujo=OK  ");       
5322:  MOVLW  28
5324:  MOVWF  FF6
5326:  MOVLW  08
5328:  MOVWF  FF7
532A:  CALL   0F2A
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
532E:  BTFSS  34.0
5330:  BRA    5354
....................       { 
....................          Luz_Blanca_on; 
5332:  BSF    F8A.4
5334:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5336:  MOVLW  01
5338:  MOVLB  1
533A:  MOVWF  x16
533C:  MOVLW  04
533E:  MOVWF  x17
5340:  MOVLB  0
5342:  CALL   0A2C
....................          printf(lcd_putc,"Luz:ON "); 
5346:  MOVLW  34
5348:  MOVWF  FF6
534A:  MOVLW  08
534C:  MOVWF  FF7
534E:  CALL   0F2A
....................       } 
....................       else 
5352:  BRA    5374
....................       { 
....................          Luz_Blanca_off; 
5354:  BCF    F8A.4
5356:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5358:  MOVLW  01
535A:  MOVLB  1
535C:  MOVWF  x16
535E:  MOVLW  04
5360:  MOVWF  x17
5362:  MOVLB  0
5364:  CALL   0A2C
....................          printf(lcd_putc,"Luz:OFF "); 
5368:  MOVLW  3C
536A:  MOVWF  FF6
536C:  MOVLW  08
536E:  MOVWF  FF7
5370:  CALL   0F2A
....................       } 
....................        
....................       if(estadomv==1) 
5374:  BTFSS  34.1
5376:  BRA    5396
....................       { 
....................          lcd_gotoxy(10,4); 
5378:  MOVLW  0A
537A:  MOVLB  1
537C:  MOVWF  x16
537E:  MOVLW  04
5380:  MOVWF  x17
5382:  MOVLB  0
5384:  CALL   0A2C
....................          printf(lcd_putc,"Motor:ON "); 
5388:  MOVLW  46
538A:  MOVWF  FF6
538C:  MOVLW  08
538E:  MOVWF  FF7
5390:  CALL   0F2A
....................       } 
....................       else 
5394:  BRA    53BA
....................       { 
....................          if(iniciodamper==1) 
5396:  BTFSS  4E.0
5398:  BRA    539E
....................          { 
....................             Motor_off;      
539A:  BCF    F8A.7
539C:  BCF    F93.7
....................          } 
....................          lcd_gotoxy(10,4); 
539E:  MOVLW  0A
53A0:  MOVLB  1
53A2:  MOVWF  x16
53A4:  MOVLW  04
53A6:  MOVWF  x17
53A8:  MOVLB  0
53AA:  CALL   0A2C
....................          printf(lcd_putc,"Motor:OFF ");  
53AE:  MOVLW  50
53B0:  MOVWF  FF6
53B2:  MOVLW  08
53B4:  MOVWF  FF7
53B6:  CALL   0F2A
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
53BA:  BSF    F93.2
53BC:  BTFSS  F81.2
53BE:  BRA    53D6
....................       {  if(Flanco == 0)  
53C0:  BTFSC  34.4
53C2:  BRA    53D4
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
53C4:  BSF    34.4
53C6:  MOVLW  C8
53C8:  MOVLB  1
53CA:  MOVWF  x1B
53CC:  MOVLB  0
53CE:  CALL   0922
53D2:  BTG    34.0
....................          else 
53D4:  BRA    53D8
....................             {Flanco = 0;} 
53D6:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
53D8:  BSF    F93.1
53DA:  BTFSS  F81.1
53DC:  BRA    5426
....................       {   
....................          if(Flanco2 == 0) 
53DE:  BTFSC  34.6
53E0:  BRA    5424
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
53E2:  BSF    34.6
53E4:  MOVLW  C8
53E6:  MOVLB  1
53E8:  MOVWF  x1B
53EA:  MOVLB  0
53EC:  CALL   0922
53F0:  BTG    34.1
....................             if(estadomv==1) 
53F2:  BTFSS  34.1
53F4:  BRA    5410
....................             { 
....................                if(iniciodamper==1) 
53F6:  BTFSS  4E.0
53F8:  BRA    53FE
....................                { 
....................                   Motor_on; 
53FA:  BSF    F8A.7
53FC:  BCF    F93.7
....................                }          
....................                delay_ms(150); 
53FE:  MOVLW  96
5400:  MOVLB  1
5402:  MOVWF  x1B
5404:  MOVLB  0
5406:  CALL   0922
....................                lcd_init(); 
540A:  CALL   09C0
....................             } 
....................             else 
540E:  BRA    5424
....................             { 
....................                Motor_off; 
5410:  BCF    F8A.7
5412:  BCF    F93.7
....................                delay_ms(150); 
5414:  MOVLW  96
5416:  MOVLB  1
5418:  MOVWF  x1B
541A:  MOVLB  0
541C:  CALL   0922
....................                lcd_init(); 
5420:  CALL   09C0
....................             } 
....................          } 
....................       } 
....................       else 
5424:  BRA    5428
....................       { 
....................          Flanco2 = 0; 
5426:  BCF    34.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
5428:  BSF    F93.3
542A:  BTFSS  F81.3
542C:  BRA    5464
....................       {  if(Flanco1 == 0)  
542E:  BTFSC  34.5
5430:  BRA    5462
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
5432:  MOVLW  02
5434:  MOVLB  1
5436:  MOVWF  x00
5438:  MOVLW  FA
543A:  MOVWF  x1B
543C:  MOVLB  0
543E:  CALL   0922
5442:  MOVLB  1
5444:  DECFSZ x00,F
5446:  BRA    5438
5448:  MOVLW  0C
544A:  MOVWF  x15
544C:  MOVLB  0
544E:  CALL   0A9E
5452:  MOVLW  01
5454:  MOVWF  17
5456:  CLRF   36
5458:  MOVLW  02
545A:  MOVWF  1B
545C:  MOVWF  1D
545E:  MOVLW  0B
5460:  MOVWF  1A
....................          else 
5462:  BRA    5466
....................             {Flanco1 = 0;}    
5464:  BCF    34.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
5466:  BSF    F93.0
5468:  BTFSS  F81.0
546A:  BRA    5496
....................       {  if(Flanco3 == 0)  
546C:  BTFSC  34.7
546E:  BRA    5494
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
5470:  MOVLW  02
5472:  MOVLB  1
5474:  MOVWF  x00
5476:  MOVLW  FA
5478:  MOVWF  x1B
547A:  MOVLB  0
547C:  CALL   0922
5480:  MOVLB  1
5482:  DECFSZ x00,F
5484:  BRA    5476
5486:  MOVLW  0C
5488:  MOVWF  x15
548A:  MOVLB  0
548C:  CALL   0A9E
5490:  MOVLW  28
5492:  MOVWF  17
....................          else 
5494:  BRA    5498
....................             {Flanco3 = 0;}     
5496:  BCF    34.7
5498:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
549A:  MOVF   17,W
549C:  SUBLW  1E
549E:  BTFSS  FD8.2
54A0:  BRA    56B4
....................       lcd_gotoxy(1,1); 
54A2:  MOVLW  01
54A4:  MOVWF  x16
54A6:  MOVWF  x17
54A8:  MOVLB  0
54AA:  CALL   0A2C
....................       printf(lcd_putc,"     Apagando     "); 
54AE:  MOVLW  5C
54B0:  MOVWF  FF6
54B2:  MOVLW  08
54B4:  MOVWF  FF7
54B6:  CALL   0F2A
....................       lcd_gotoxy(1,2); 
54BA:  MOVLW  01
54BC:  MOVLB  1
54BE:  MOVWF  x16
54C0:  MOVLW  02
54C2:  MOVWF  x17
54C4:  MOVLB  0
54C6:  CALL   0A2C
....................       printf(lcd_putc,"      Cabina      "); 
54CA:  MOVLW  70
54CC:  MOVWF  FF6
54CE:  MOVLW  08
54D0:  MOVWF  FF7
54D2:  CALL   0F2A
....................        
....................       lcd_gotoxy(1,3); 
54D6:  MOVLW  01
54D8:  MOVLB  1
54DA:  MOVWF  x16
54DC:  MOVLW  03
54DE:  MOVWF  x17
54E0:  MOVLB  0
54E2:  CALL   0A2C
....................       printf(lcd_putc," Espere"); 
54E6:  MOVLW  84
54E8:  MOVWF  FF6
54EA:  MOVLW  08
54EC:  MOVWF  FF7
54EE:  CALL   0F2A
....................        
....................       if(Lectura==1) 
54F2:  BTFSS  35.5
54F4:  BRA    56B0
....................       {ajustar_damper(0); 
54F6:  MOVLB  1
54F8:  CLRF   x00
54FA:  MOVLB  0
54FC:  CALL   1684
....................        
....................          if(n<8) 
5500:  MOVF   26,W
5502:  SUBLW  07
5504:  BNC   552A
....................          { 
....................             lcd_gotoxy(9+n,3); 
5506:  MOVLW  09
5508:  ADDWF  26,W
550A:  MOVLB  1
550C:  MOVWF  x00
550E:  MOVWF  x16
5510:  MOVLW  03
5512:  MOVWF  x17
5514:  MOVLB  0
5516:  CALL   0A2C
....................             printf(lcd_putc,"."); 
551A:  MOVLW  2E
551C:  MOVLB  1
551E:  MOVWF  x15
5520:  MOVLB  0
5522:  CALL   0A9E
....................             n++; 
5526:  INCF   26,F
....................          } 
....................          else 
5528:  BRA    5548
....................          { 
....................             n=0;lcd_gotoxy(1,3); 
552A:  CLRF   26
552C:  MOVLW  01
552E:  MOVLB  1
5530:  MOVWF  x16
5532:  MOVLW  03
5534:  MOVWF  x17
5536:  MOVLB  0
5538:  CALL   0A2C
....................             printf(lcd_putc,"                    "); 
553C:  MOVLW  8C
553E:  MOVWF  FF6
5540:  MOVLW  08
5542:  MOVWF  FF7
5544:  CALL   0F2A
....................          } 
....................        
....................       if(sensores(2)<512) 
5548:  MOVLW  02
554A:  MOVLB  1
554C:  MOVWF  x04
554E:  MOVLB  0
5550:  CALL   162C
5554:  MOVFF  00,100
5558:  MOVFF  01,101
555C:  MOVFF  02,102
5560:  MOVFF  03,103
5564:  MOVFF  03,11D
5568:  MOVFF  02,11C
556C:  MOVFF  01,11B
5570:  MOVFF  00,11A
5574:  MOVLB  1
5576:  CLRF   x21
5578:  CLRF   x20
557A:  CLRF   x1F
557C:  MOVLW  88
557E:  MOVWF  x1E
5580:  MOVLB  0
5582:  CALL   1576
5586:  BNC   558C
....................       { 
....................          Motor_off; 
5588:  BCF    F8A.7
558A:  BCF    F93.7
....................       } 
....................        
....................       if(sensores(2)<6) 
558C:  MOVLW  02
558E:  MOVLB  1
5590:  MOVWF  x04
5592:  MOVLB  0
5594:  CALL   162C
5598:  MOVFF  00,100
559C:  MOVFF  01,101
55A0:  MOVFF  02,102
55A4:  MOVFF  03,103
55A8:  MOVFF  03,11D
55AC:  MOVFF  02,11C
55B0:  MOVFF  01,11B
55B4:  MOVFF  00,11A
55B8:  MOVLB  1
55BA:  CLRF   x21
55BC:  CLRF   x20
55BE:  MOVLW  40
55C0:  MOVWF  x1F
55C2:  MOVLW  81
55C4:  MOVWF  x1E
55C6:  MOVLB  0
55C8:  CALL   1576
55CC:  BNC   56AE
....................       { 
....................          write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
55CE:  MOVLW  46
55D0:  MOVWF  FA9
55D2:  MOVFF  30,FA8
55D6:  BCF    FA6.6
55D8:  BCF    FA6.7
55DA:  BSF    FA6.2
55DC:  MOVF   FF2,W
55DE:  MOVWF  00
55E0:  BCF    FF2.7
55E2:  MOVLB  F
55E4:  MOVLW  55
55E6:  MOVWF  FA7
55E8:  MOVLW  AA
55EA:  MOVWF  FA7
55EC:  BSF    FA6.1
55EE:  BTFSC  FA6.1
55F0:  BRA    55EE
55F2:  BCF    FA6.2
55F4:  MOVF   00,W
55F6:  IORWF  FF2,F
55F8:  MOVLW  47
55FA:  MOVWF  FA9
55FC:  MOVFF  31,FA8
5600:  BCF    FA6.6
5602:  BCF    FA6.7
5604:  BSF    FA6.2
5606:  MOVF   FF2,W
5608:  MOVWF  00
560A:  BCF    FF2.7
560C:  MOVLW  55
560E:  MOVWF  FA7
5610:  MOVLW  AA
5612:  MOVWF  FA7
5614:  BSF    FA6.1
5616:  BTFSC  FA6.1
5618:  BRA    5616
561A:  BCF    FA6.2
561C:  MOVF   00,W
561E:  IORWF  FF2,F
5620:  MOVLW  48
5622:  MOVWF  FA9
5624:  MOVFF  32,FA8
5628:  BCF    FA6.6
562A:  BCF    FA6.7
562C:  BSF    FA6.2
562E:  MOVF   FF2,W
5630:  MOVWF  00
5632:  BCF    FF2.7
5634:  MOVLW  55
5636:  MOVWF  FA7
5638:  MOVLW  AA
563A:  MOVWF  FA7
563C:  BSF    FA6.1
563E:  BTFSC  FA6.1
5640:  BRA    563E
5642:  BCF    FA6.2
5644:  MOVF   00,W
5646:  IORWF  FF2,F
....................          printf(lcd_putc,"\f"); 
5648:  MOVLW  0C
564A:  MOVLB  1
564C:  MOVWF  x15
564E:  MOVLB  0
5650:  CALL   0A9E
....................          lcd_gotoxy(1,2); 
5654:  MOVLW  01
5656:  MOVLB  1
5658:  MOVWF  x16
565A:  MOVLW  02
565C:  MOVWF  x17
565E:  MOVLB  0
5660:  CALL   0A2C
....................          printf(lcd_putc,"     Proceso      "); 
5664:  MOVLW  A2
5666:  MOVWF  FF6
5668:  MOVLW  08
566A:  MOVWF  FF7
566C:  CALL   0F2A
....................          lcd_gotoxy(1,3); 
5670:  MOVLW  01
5672:  MOVLB  1
5674:  MOVWF  x16
5676:  MOVLW  03
5678:  MOVWF  x17
567A:  MOVLB  0
567C:  CALL   0A2C
....................          printf(lcd_putc,"    Finalizado    "); 
5680:  MOVLW  B6
5682:  MOVWF  FF6
5684:  MOVLW  08
5686:  MOVWF  FF7
5688:  CALL   0F2A
....................          delay_ms(2000); 
568C:  MOVLW  08
568E:  MOVLB  1
5690:  MOVWF  x00
5692:  MOVLW  FA
5694:  MOVWF  x1B
5696:  MOVLB  0
5698:  CALL   0922
569C:  MOVLB  1
569E:  DECFSZ x00,F
56A0:  BRA    5692
....................          printf(lcd_putc,"\f"); 
56A2:  MOVLW  0C
56A4:  MOVWF  x15
56A6:  MOVLB  0
56A8:  CALL   0A9E
....................          reset_cpu(); 
56AC:  RESET
....................       } 
....................       Lectura=0; 
56AE:  BCF    35.5
....................       }   
....................    } 
56B0:  MOVLB  1
56B2:  BRA    549A
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
56B4:  MOVF   17,W
56B6:  SUBLW  28
56B8:  BNZ   5794
....................    lcd_gotoxy(1,1); 
56BA:  MOVLW  01
56BC:  MOVWF  x16
56BE:  MOVWF  x17
56C0:  MOVLB  0
56C2:  CALL   0A2C
....................    printf(lcd_putc,"   Desea apagar     "); 
56C6:  MOVLW  CA
56C8:  MOVWF  FF6
56CA:  MOVLW  08
56CC:  MOVWF  FF7
56CE:  CALL   0F2A
....................    lcd_gotoxy(1,2); 
56D2:  MOVLW  01
56D4:  MOVLB  1
56D6:  MOVWF  x16
56D8:  MOVLW  02
56DA:  MOVWF  x17
56DC:  MOVLB  0
56DE:  CALL   0A2C
....................    printf(lcd_putc,"     la cabina      "); 
56E2:  MOVLW  E0
56E4:  MOVWF  FF6
56E6:  MOVLW  08
56E8:  MOVWF  FF7
56EA:  CALL   0F2A
....................    lcd_gotoxy(1,3); 
56EE:  MOVLW  01
56F0:  MOVLB  1
56F2:  MOVWF  x16
56F4:  MOVLW  03
56F6:  MOVWF  x17
56F8:  MOVLB  0
56FA:  CALL   0A2C
....................    printf(lcd_putc,"   > Aceptar        "); 
56FE:  MOVLW  F6
5700:  MOVWF  FF6
5702:  MOVLW  08
5704:  MOVWF  FF7
5706:  CALL   0F2A
....................    lcd_gotoxy(1,4); 
570A:  MOVLW  01
570C:  MOVLB  1
570E:  MOVWF  x16
5710:  MOVLW  04
5712:  MOVWF  x17
5714:  MOVLB  0
5716:  CALL   0A2C
....................    printf(lcd_putc,"   < Cancelar       "); 
571A:  MOVLW  0C
571C:  MOVWF  FF6
571E:  MOVLW  09
5720:  MOVWF  FF7
5722:  CALL   0F2A
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
5726:  BSF    F93.0
5728:  BTFSS  F81.0
572A:  BRA    5750
....................       {  if(Flanco1 == 0)  
572C:  BTFSC  34.5
572E:  BRA    574E
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
5730:  BSF    34.5
5732:  MOVLW  1E
5734:  MOVWF  17
5736:  MOVFF  20,100
573A:  CALL   0F16
573E:  BCF    F8A.5
5740:  BCF    F93.5
5742:  MOVLW  0C
5744:  MOVLB  1
5746:  MOVWF  x15
5748:  MOVLB  0
574A:  CALL   0A9E
....................             }} 
....................          else 
574E:  BRA    5752
....................             {Flanco1 = 0;}    
5750:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5752:  BSF    F93.1
5754:  BTFSS  F81.1
5756:  BRA    5790
....................       {  if(Flanco3 == 0)  
5758:  BTFSC  34.7
575A:  BRA    578E
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
575C:  BSF    34.7
575E:  MOVLW  14
5760:  MOVWF  17
5762:  CLRF   36
5764:  MOVLW  02
5766:  MOVWF  1B
5768:  MOVWF  1D
576A:  MOVLW  0B
576C:  MOVWF  1A
576E:  MOVLW  02
5770:  MOVLB  1
5772:  MOVWF  x00
5774:  MOVLW  FA
5776:  MOVWF  x1B
5778:  MOVLB  0
577A:  CALL   0922
577E:  MOVLB  1
5780:  DECFSZ x00,F
5782:  BRA    5774
5784:  MOVLW  0C
5786:  MOVWF  x15
5788:  MOVLB  0
578A:  CALL   0A9E
....................          else 
578E:  BRA    5792
....................             {Flanco3 = 0;}     
5790:  BCF    34.7
5792:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(tiemporeset>=20) 
5794:  MOVF   33,W
5796:  SUBLW  13
5798:  BC    57A4
....................    { 
....................       lcd_init(); 
579A:  MOVLB  0
579C:  CALL   09C0
....................       tiemporeset=0; 
57A0:  CLRF   33
57A2:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
57A4:  BTFSS  35.3
57A6:  BRA    57B4
....................       {intensidadpantalla(0);sleep();} 
57A8:  CLRF   x00
57AA:  MOVLB  0
57AC:  CALL   0F16
57B0:  SLEEP 
57B2:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
57B4:  MOVF   17,F
57B6:  BNZ   57C0
57B8:  MOVF   17,W
57BA:  SUBLW  1E
57BC:  BTFSC  FD8.2
57BE:  BRA    5898
....................    { 
....................       if(Lectura==1) 
57C0:  BTFSS  35.5
57C2:  BRA    5898
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
57C4:  MOVFF  2A,100
57C8:  MOVLB  0
57CA:  GOTO   1BAE
57CE:  MOVFF  03,8E
57D2:  MOVFF  02,8D
57D6:  MOVFF  01,8C
57DA:  MOVFF  00,8B
....................         if(iniciodamper==1) 
57DE:  BTFSS  4E.0
57E0:  BRA    5880
....................         { 
....................             controlar_flujo(); 
57E2:  GOTO   2282
....................           
....................             if(Flujo<0.5 && iniciodamper==1 && Menu==20) 
57E6:  MOVFF  8E,11D
57EA:  MOVFF  8D,11C
57EE:  MOVFF  8C,11B
57F2:  MOVFF  8B,11A
57F6:  MOVLB  1
57F8:  CLRF   x21
57FA:  CLRF   x20
57FC:  CLRF   x1F
57FE:  MOVLW  7E
5800:  MOVWF  x1E
5802:  MOVLB  0
5804:  CALL   1576
5808:  BNC   5844
580A:  BTFSS  4E.0
580C:  BRA    5844
580E:  MOVF   17,W
5810:  SUBLW  14
5812:  BNZ   5844
....................             { 
....................                flag_latencia=1; 
5814:  BSF    35.0
....................                 
....................                if(Latencia==1) 
5816:  BTFSS  35.1
5818:  BRA    5842
....................                { 
....................                   if(estadoalarma==1) 
581A:  BTFSS  34.2
581C:  BRA    5824
....................                   { 
....................                      Alarma_on; 
581E:  BSF    F8A.5
5820:  BCF    F93.5
....................                   } 
....................                   else 
5822:  BRA    5828
....................                   { 
....................                      Alarma_off; 
5824:  BCF    F8A.5
5826:  BCF    F93.5
....................                   } 
....................                   estadopantalla=!estadopantalla; 
5828:  BTG    34.3
....................                   if(estadopantalla==1) 
582A:  BTFSS  34.3
582C:  BRA    5838
....................                   {intensidadpantalla(contraste);} 
582E:  MOVFF  20,100
5832:  CALL   0F16
....................                   else 
5836:  BRA    5842
....................                   {intensidadpantalla(0);} 
5838:  MOVLB  1
583A:  CLRF   x00
583C:  MOVLB  0
583E:  CALL   0F16
....................                } 
....................             } 
....................             else 
5842:  BRA    587E
....................             { 
....................                intensidadpantalla(contraste);Alarma_off; 
5844:  MOVFF  20,100
5848:  CALL   0F16
584C:  BCF    F8A.5
584E:  BCF    F93.5
....................                if(Flujo>=0.5) 
5850:  MOVLB  1
5852:  CLRF   x1D
5854:  CLRF   x1C
5856:  CLRF   x1B
5858:  MOVLW  7E
585A:  MOVWF  x1A
585C:  MOVFF  8E,121
5860:  MOVFF  8D,120
5864:  MOVFF  8C,11F
5868:  MOVFF  8B,11E
586C:  MOVLB  0
586E:  CALL   1576
5872:  BC    5876
5874:  BNZ   587E
....................                { 
....................                   Latencia=0;t_latencia=0;flag_latencia=0; 
5876:  BCF    35.1
5878:  CLRF   52
587A:  CLRF   51
587C:  BCF    35.0
....................                } 
....................             } 
....................         } 
....................         else 
587E:  BRA    5894
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
5880:  MOVFF  20,100
5884:  CALL   0F16
5888:  BCF    F8A.5
588A:  BCF    F93.5
588C:  BCF    35.1
588E:  CLRF   52
5890:  CLRF   51
5892:  BCF    35.0
....................         } 
....................          Lectura=0; 
5894:  BCF    35.5
5896:  MOVLB  1
....................       }      
....................  
....................    }      
....................     
....................    if(t_iniciodamper>=18000) 
5898:  MOVF   56,W
589A:  SUBLW  45
589C:  BC    58AC
589E:  XORLW  FF
58A0:  BNZ   58A8
58A2:  MOVF   55,W
58A4:  SUBLW  4F
58A6:  BC    58AC
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
58A8:  BSF    4E.0
58AA:  BCF    35.7
....................    } 
....................     
....................    } 
58AC:  GOTO   2A50
.................... } 
58B0:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
