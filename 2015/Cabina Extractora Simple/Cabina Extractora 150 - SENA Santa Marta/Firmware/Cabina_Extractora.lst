CCS PCH C Compiler, Version 4.104, 5967               29-dic.-15 11:25

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2015\Cabina Extractora Simple\Cabina Extractora 150 - SENA Santa Marta\Firmware\Cabina_Extractora.lst

               ROM used: 18676 bytes (57%)
                         Largest free fragment is 14088
               RAM used: 263 (13%) at main() level
                         293 (14%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1650
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
08E4:  MOVLW  01
08E6:  MOVWF  FEA
08E8:  MOVLW  1B
08EA:  MOVWF  FE9
08EC:  MOVF   FEF,W
08EE:  BZ    090C
08F0:  MOVLW  0F
08F2:  MOVWF  01
08F4:  CLRF   00
08F6:  DECFSZ 00,F
08F8:  BRA    08F6
08FA:  DECFSZ 01,F
08FC:  BRA    08F4
08FE:  MOVLW  8F
0900:  MOVWF  00
0902:  DECFSZ 00,F
0904:  BRA    0902
0906:  NOP   
0908:  DECFSZ FEF,F
090A:  BRA    08F0
090C:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
090E:  MOVLB  1
0910:  SWAPF  x1C,W
0912:  ANDLW  F0
0914:  MOVWF  00
0916:  MOVLW  0F
0918:  ANDWF  F83,W
091A:  IORWF  00,W
091C:  MOVWF  F83
....................       delay_cycles(25); 
091E:  MOVLW  08
0920:  MOVWF  00
0922:  DECFSZ 00,F
0924:  BRA    0922
....................       lcd.enable = 1; 
0926:  BSF    F83.2
....................       delay_us(55); 
0928:  MOVLW  DB
092A:  MOVWF  00
092C:  DECFSZ 00,F
092E:  BRA    092C
0930:  BRA    0932
....................       lcd.enable = 0; 
0932:  BCF    F83.2
.................... } 
0934:  MOVLB  0
0936:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0938:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
093A:  MOVLW  01
093C:  MOVLB  1
093E:  MOVWF  x1B
0940:  MOVLB  0
0942:  RCALL  08E4
....................       lcd.rs = address; 
0944:  MOVLB  1
0946:  BTFSS  x19.0
0948:  BCF    F83.1
094A:  BTFSC  x19.0
094C:  BSF    F83.1
....................       delay_cycles(25); 
094E:  MOVLW  08
0950:  MOVWF  00
0952:  DECFSZ 00,F
0954:  BRA    0952
....................       lcd.rw = 0; 
0956:  BCF    F83.0
....................       delay_cycles(25); 
0958:  MOVLW  08
095A:  MOVWF  00
095C:  DECFSZ 00,F
095E:  BRA    095C
....................       lcd.enable = 0; 
0960:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0962:  SWAPF  x1A,W
0964:  MOVWF  x1B
0966:  MOVLW  0F
0968:  ANDWF  x1B,F
096A:  MOVFF  11B,11C
096E:  MOVLB  0
0970:  RCALL  090E
....................       lcd_send_nibble(n & 0xf); 
0972:  MOVLB  1
0974:  MOVF   x1A,W
0976:  ANDLW  0F
0978:  MOVWF  x1B
097A:  MOVWF  x1C
097C:  MOVLB  0
097E:  RCALL  090E
.................... } 
0980:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0982:  MOVLW  00
0984:  MOVWF  F95
....................     lcd.rs = 0; 
0986:  BCF    F83.1
....................     lcd.rw = 0; 
0988:  BCF    F83.0
....................     lcd.enable = 0; 
098A:  BCF    F83.2
....................     delay_ms(15); 
098C:  MOVLW  0F
098E:  MOVLB  1
0990:  MOVWF  x1B
0992:  MOVLB  0
0994:  RCALL  08E4
....................     for(i=1;i<=3;++i) { 
0996:  MOVLW  01
0998:  MOVWF  xFF
099A:  MOVF   xFF,W
099C:  SUBLW  03
099E:  BNC   09B8
....................        lcd_send_nibble(3); 
09A0:  MOVLW  03
09A2:  MOVLB  1
09A4:  MOVWF  x1C
09A6:  MOVLB  0
09A8:  RCALL  090E
....................        delay_ms(5); 
09AA:  MOVLW  05
09AC:  MOVLB  1
09AE:  MOVWF  x1B
09B0:  MOVLB  0
09B2:  RCALL  08E4
....................     } 
09B4:  INCF   xFF,F
09B6:  BRA    099A
....................     lcd_send_nibble(2); 
09B8:  MOVLW  02
09BA:  MOVLB  1
09BC:  MOVWF  x1C
09BE:  MOVLB  0
09C0:  RCALL  090E
....................     for(i=0;i<=3;++i) 
09C2:  CLRF   xFF
09C4:  MOVF   xFF,W
09C6:  SUBLW  03
09C8:  BNC   09EC
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
09CA:  CLRF   03
09CC:  MOVF   xFF,W
09CE:  MOVFF  FF2,100
09D2:  BCF    FF2.7
09D4:  CALL   0096
09D8:  MOVLB  1
09DA:  BTFSC  x00.7
09DC:  BSF    FF2.7
09DE:  MOVWF  x00
09E0:  CLRF   x19
09E2:  MOVWF  x1A
09E4:  MOVLB  0
09E6:  RCALL  0938
09E8:  INCF   xFF,F
09EA:  BRA    09C4
.................... } 
09EC:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
09EE:  MOVLW  01
09F0:  MOVLB  1
09F2:  SUBWF  x17,W
09F4:  ADDLW  FC
09F6:  BC    0A22
09F8:  ADDLW  04
09FA:  MOVLB  0
09FC:  GOTO   0A34
....................      case 1 : address=0x80;break; 
0A00:  MOVLW  80
0A02:  MOVLB  1
0A04:  MOVWF  x18
0A06:  BRA    0A22
....................      case 2 : address=0xc0;break; 
0A08:  MOVLW  C0
0A0A:  MOVLB  1
0A0C:  MOVWF  x18
0A0E:  BRA    0A22
....................      case 3 : address=0x94;break; 
0A10:  MOVLW  94
0A12:  MOVLB  1
0A14:  MOVWF  x18
0A16:  BRA    0A22
....................      case 4 : address=0xd4;break; 
0A18:  MOVLW  D4
0A1A:  MOVLB  1
0A1C:  MOVWF  x18
0A1E:  BRA    0A22
0A20:  MOVLB  1
....................    } 
....................    address+=x-1; 
0A22:  MOVLW  01
0A24:  SUBWF  x16,W
0A26:  ADDWF  x18,F
....................    lcd_send_byte(0,address); 
0A28:  CLRF   x19
0A2A:  MOVFF  118,11A
0A2E:  MOVLB  0
0A30:  RCALL  0938
.................... } 
0A32:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A60:  MOVLB  1
0A62:  MOVF   x15,W
0A64:  SUBLW  F1
0A66:  BNZ   0A6C
....................     c=238; 
0A68:  MOVLW  EE
0A6A:  MOVWF  x15
....................    switch (c) { 
0A6C:  MOVF   x15,W
0A6E:  XORLW  0C
0A70:  MOVLB  0
0A72:  BZ    0A7E
0A74:  XORLW  06
0A76:  BZ    0A9A
0A78:  XORLW  02
0A7A:  BZ    0AAC
0A7C:  BRA    0ABA
....................      case '\f'   : lcd_send_byte(0,1); 
0A7E:  MOVLB  1
0A80:  CLRF   x19
0A82:  MOVLW  01
0A84:  MOVWF  x1A
0A86:  MOVLB  0
0A88:  RCALL  0938
....................                    lcdline=1; 
0A8A:  MOVLW  01
0A8C:  MOVWF  16
....................                    delay_ms(2); 
0A8E:  MOVLW  02
0A90:  MOVLB  1
0A92:  MOVWF  x1B
0A94:  MOVLB  0
0A96:  RCALL  08E4
....................                                            break; 
0A98:  BRA    0ACA
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A9A:  INCF   16,F
0A9C:  MOVLW  01
0A9E:  MOVLB  1
0AA0:  MOVWF  x16
0AA2:  MOVFF  16,117
0AA6:  MOVLB  0
0AA8:  RCALL  09EE
0AAA:  BRA    0ACA
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0AAC:  MOVLB  1
0AAE:  CLRF   x19
0AB0:  MOVLW  10
0AB2:  MOVWF  x1A
0AB4:  MOVLB  0
0AB6:  RCALL  0938
0AB8:  BRA    0ACA
....................      default     : lcd_send_byte(1,c);     break; 
0ABA:  MOVLW  01
0ABC:  MOVLB  1
0ABE:  MOVWF  x19
0AC0:  MOVFF  115,11A
0AC4:  MOVLB  0
0AC6:  RCALL  0938
0AC8:  BRA    0ACA
....................    } 
.................... } 
0ACA:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B6,1) 
.................... #define   Damper_off        output_bit(PIN_B6,0) 
.................... #define   Alarma_on         output_bit(PIN_B5,1) 
.................... #define   Alarma_off        output_bit(PIN_B5,0) 
.................... #define   Motor_on          output_bit(PIN_B7,1) 
.................... #define   Motor_off         output_bit(PIN_B7,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
15F2:  MOVLB  1
15F4:  RLCF   x04,W
15F6:  MOVWF  00
15F8:  RLCF   00,F
15FA:  MOVLW  FC
15FC:  ANDWF  00,F
15FE:  MOVFF  00,01
1602:  MOVF   FC2,W
1604:  ANDLW  C3
1606:  IORWF  00,W
1608:  MOVWF  FC2
160A:  MOVLW  0A
160C:  MOVWF  x1B
160E:  MOVLB  0
1610:  CALL   08E4
1614:  BSF    FC2.1
1616:  BTFSC  FC2.1
1618:  BRA    1616
161A:  MOVFF  FC4,10A
161E:  MOVFF  FC3,109
1622:  MOVLB  0
1624:  CALL   0ACC
1628:  MOVFF  03,108
162C:  MOVFF  02,107
1630:  MOVFF  01,106
1634:  MOVFF  00,105
1638:  MOVFF  105,00
163C:  MOVFF  106,01
1640:  MOVFF  107,02
1644:  MOVFF  108,03
.................... } 
1648:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0ED8:  MOVLB  1
0EDA:  MOVF   x00,F
0EDC:  BNZ   0EE4
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
0EDE:  BCF    F8B.1
0EE0:  BCF    F94.1
....................    } 
....................    else 
0EE2:  BRA    0EE8
....................    { 
....................       Pantalla_on; 
0EE4:  BSF    F8B.1
0EE6:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0EE8:  MOVLB  0
0EEA:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
....................     Voltaje1=sensores(1)*5/1023; 
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
....................     x_cubo=x_uno*x_cuadrado; 
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
....................     if(Velocidad<0.0) 
....................      {Velocidad=0.0;} 
....................       
....................      if(l>=media) 
....................        {l=0;} 
....................       
....................      promedio[l]=Velocidad;l++; 
....................      Flujo2=0; 
....................         for(h=0;h<=(media-1);h++) 
....................         { 
....................            Flujo2+=promedio[h]; 
....................         }  
....................            Flujo2=(Flujo2/media)*Ajuste1;  
....................            return Flujo2; 
.................... } 
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
....................       if(error<0.2&&error>-0.2) 
....................       {} 
....................       else 
....................       { 
....................          if(error>0.0) 
....................          {tmp+=1;} 
....................                 
....................          if(error<-0.0) 
....................          {tmp-=1;}   
....................       } 
....................        
....................       if(tmp>251) 
....................       {tmp=251;} 
....................       if(tmp<4)          
....................       {tmp=4;}       
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Manual==20) 
....................    { 
....................       tmp=251; 
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Semi==20) 
....................    { 
....................       set_pwm1_duty (ValorSemi); 
....................    } 
.................... } 
.................... /* 
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
....................       { 
....................       delay_ms(500); 
....................          if(input(PIN_B0)) 
....................          { 
....................             lcd_init(); 
....................             intensidadpantalla(contraste); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
....................             delay_ms(2000); 
....................             printf(lcd_putc,"\f"); 
....................             inicio=1; 
....................             Menu=0; 
....................             ModoSleep=0; 
....................             delay_ms(500); 
....................          } 
....................       } 
.................... }*/ 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................  
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   50,F
....................    tiempos2++; 
00C2:  INCF   53,F
00C4:  BTFSC  FD8.2
00C6:  INCF   54,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   52,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   51,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    35.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  35.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   51,F
00E0:  BTFSC  FD8.2
00E2:  INCF   52,F
....................    } 
....................     
....................    if(tiempos2==20) 
00E4:  MOVF   53,W
00E6:  SUBLW  14
00E8:  BNZ   00F4
00EA:  MOVF   54,F
00EC:  BNZ   00F4
....................    {tiempos2=0;Lectura2=1;} 
00EE:  CLRF   54
00F0:  CLRF   53
00F2:  BSF    35.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00F4:  MOVF   4F,W
00F6:  SUBLW  C8
00F8:  BNZ   0124
00FA:  MOVF   50,F
00FC:  BNZ   0124
....................    {tiempos=0;tiemporeset++; 
00FE:  CLRF   50
0100:  CLRF   4F
0102:  INCF   33,F
....................         Lectura=1; 
0104:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
0106:  BTFSS  34.1
0108:  BRA    0124
010A:  BTFSS  35.2
010C:  BRA    0124
....................          { 
....................             segundos++; 
010E:  INCF   30,F
....................           
....................          if(segundos==60) 
0110:  MOVF   30,W
0112:  SUBLW  3C
0114:  BNZ   011A
....................          { 
....................             segundos=0;minutos++; 
0116:  CLRF   30
0118:  INCF   31,F
....................          } 
....................           
....................          if(minutos==60) 
011A:  MOVF   31,W
011C:  SUBLW  3C
011E:  BNZ   0124
....................          { 
....................             minutos=0;horas++; 
0120:  CLRF   31
0122:  INCF   32,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
0124:  BCF    F9E.0
0126:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
103E:  MOVLB  1
1040:  DECFSZ x01,W
1042:  BRA    107C
....................    {if(estadoalarma==0) 
1044:  BTFSC  34.2
1046:  BRA    1060
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1048:  MOVLW  02
104A:  MOVWF  x16
104C:  MOVFF  102,117
1050:  MOVLB  0
1052:  RCALL  09EE
1054:  MOVLW  2A
1056:  MOVWF  FF6
1058:  MOVLW  01
105A:  MOVWF  FF7
105C:  RCALL  0EEC
105E:  MOVLB  1
....................    if(estadoalarma==1) 
1060:  BTFSS  34.2
1062:  BRA    107C
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1064:  MOVLW  02
1066:  MOVWF  x16
1068:  MOVFF  102,117
106C:  MOVLB  0
106E:  RCALL  09EE
1070:  MOVLW  3E
1072:  MOVWF  FF6
1074:  MOVLW  01
1076:  MOVWF  FF7
1078:  RCALL  0EEC
107A:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
107C:  MOVF   x01,W
107E:  SUBLW  02
1080:  BNZ   109A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
1082:  MOVLW  02
1084:  MOVWF  x16
1086:  MOVFF  102,117
108A:  MOVLB  0
108C:  RCALL  09EE
108E:  MOVLW  52
1090:  MOVWF  FF6
1092:  MOVLW  01
1094:  MOVWF  FF7
1096:  RCALL  0EEC
1098:  MOVLB  1
....................     
....................    if(x==3) 
109A:  MOVF   x01,W
109C:  SUBLW  03
109E:  BNZ   10B8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
10A0:  MOVLW  02
10A2:  MOVWF  x16
10A4:  MOVFF  102,117
10A8:  MOVLB  0
10AA:  RCALL  09EE
10AC:  MOVLW  66
10AE:  MOVWF  FF6
10B0:  MOVLW  01
10B2:  MOVWF  FF7
10B4:  RCALL  0EEC
10B6:  MOVLB  1
....................     
....................    if(x==4) 
10B8:  MOVF   x01,W
10BA:  SUBLW  04
10BC:  BNZ   10D6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
10BE:  MOVLW  02
10C0:  MOVWF  x16
10C2:  MOVFF  102,117
10C6:  MOVLB  0
10C8:  RCALL  09EE
10CA:  MOVLW  7A
10CC:  MOVWF  FF6
10CE:  MOVLW  01
10D0:  MOVWF  FF7
10D2:  RCALL  0EEC
10D4:  MOVLB  1
....................     
....................    if(x==5) 
10D6:  MOVF   x01,W
10D8:  SUBLW  05
10DA:  BNZ   10F4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
10DC:  MOVLW  02
10DE:  MOVWF  x16
10E0:  MOVFF  102,117
10E4:  MOVLB  0
10E6:  RCALL  09EE
10E8:  MOVLW  8E
10EA:  MOVWF  FF6
10EC:  MOVLW  01
10EE:  MOVWF  FF7
10F0:  RCALL  0EEC
10F2:  MOVLB  1
....................     
....................    if(x==6) 
10F4:  MOVF   x01,W
10F6:  SUBLW  06
10F8:  BNZ   1112
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
10FA:  MOVLW  02
10FC:  MOVWF  x16
10FE:  MOVFF  102,117
1102:  MOVLB  0
1104:  RCALL  09EE
1106:  MOVLW  A2
1108:  MOVWF  FF6
110A:  MOVLW  01
110C:  MOVWF  FF7
110E:  RCALL  0EEC
1110:  MOVLB  1
....................     
....................    if(x==7) 
1112:  MOVF   x01,W
1114:  SUBLW  07
1116:  BNZ   1130
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1118:  MOVLW  02
111A:  MOVWF  x16
111C:  MOVFF  102,117
1120:  MOVLB  0
1122:  RCALL  09EE
1124:  MOVLW  B6
1126:  MOVWF  FF6
1128:  MOVLW  01
112A:  MOVWF  FF7
112C:  RCALL  0EEC
112E:  MOVLB  1
....................     
....................    if(x==8) 
1130:  MOVF   x01,W
1132:  SUBLW  08
1134:  BNZ   114E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
1136:  MOVLW  02
1138:  MOVWF  x16
113A:  MOVFF  102,117
113E:  MOVLB  0
1140:  RCALL  09EE
1142:  MOVLW  CA
1144:  MOVWF  FF6
1146:  MOVLW  01
1148:  MOVWF  FF7
114A:  RCALL  0EEC
114C:  MOVLB  1
.................... } 
114E:  MOVLB  0
1150:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
164A:  MOVFF  100,FBE
.................... } 
164E:  RETLW  00
....................  
.................... void main () 
.................... { 
1650:  CLRF   FF8
1652:  BCF    FD0.7
1654:  BSF    07.7
1656:  CLRF   FEA
1658:  CLRF   FE9
165A:  MOVLW  64
165C:  MOVWF  17
165E:  MOVLW  09
1660:  MOVWF  18
1662:  MOVLW  02
1664:  MOVWF  19
1666:  MOVLW  0B
1668:  MOVWF  1A
166A:  MOVLW  02
166C:  MOVWF  1B
166E:  MOVLW  03
1670:  MOVWF  1C
1672:  MOVLW  02
1674:  MOVWF  1D
1676:  MOVWF  1E
1678:  MOVLW  04
167A:  MOVWF  1F
167C:  MOVLW  0A
167E:  MOVWF  20
1680:  CLRF   21
1682:  CLRF   22
1684:  CLRF   23
1686:  CLRF   24
1688:  CLRF   25
168A:  CLRF   26
168C:  CLRF   27
168E:  CLRF   28
1690:  MOVWF  29
1692:  CLRF   2A
1694:  MOVWF  2B
1696:  MOVWF  2C
1698:  MOVWF  2D
169A:  MOVWF  2E
169C:  CLRF   2F
169E:  CLRF   30
16A0:  CLRF   31
16A2:  CLRF   32
16A4:  CLRF   33
16A6:  BCF    34.0
16A8:  BCF    34.1
16AA:  BCF    34.2
16AC:  BCF    34.3
16AE:  BCF    34.4
16B0:  BCF    34.5
16B2:  BCF    34.6
16B4:  BCF    34.7
16B6:  BCF    35.0
16B8:  BCF    35.1
16BA:  BCF    35.2
16BC:  CLRF   36
16BE:  CLRF   45
16C0:  CLRF   44
16C2:  CLRF   43
16C4:  CLRF   42
16C6:  CLRF   49
16C8:  CLRF   48
16CA:  CLRF   47
16CC:  CLRF   46
16CE:  CLRF   4D
16D0:  CLRF   4C
16D2:  MOVLW  4B
16D4:  MOVWF  4B
16D6:  MOVLW  86
16D8:  MOVWF  4A
16DA:  BCF    35.4
16DC:  BCF    35.5
16DE:  BCF    35.6
16E0:  BCF    35.7
16E2:  BCF    4E.0
16E4:  BCF    4E.1
16E6:  BCF    4E.2
16E8:  BCF    4E.3
16EA:  CLRF   50
16EC:  CLRF   4F
16EE:  CLRF   52
16F0:  CLRF   51
16F2:  CLRF   54
16F4:  CLRF   53
16F6:  CLRF   56
16F8:  CLRF   55
16FA:  CLRF   5A
16FC:  MOVLW  E0
16FE:  MOVWF  59
1700:  MOVLW  5D
1702:  MOVWF  58
1704:  MOVLW  8A
1706:  MOVWF  57
1708:  CLRF   5E
170A:  MOVLW  C0
170C:  MOVWF  5D
170E:  MOVLW  28
1710:  MOVWF  5C
1712:  MOVLW  89
1714:  MOVWF  5B
1716:  MOVLW  33
1718:  MOVWF  x62
171A:  MOVLW  13
171C:  MOVWF  x61
171E:  MOVLW  15
1720:  MOVWF  x60
1722:  MOVLW  87
1724:  MOVWF  5F
1726:  CLRF   x66
1728:  CLRF   x65
172A:  CLRF   x64
172C:  CLRF   x63
172E:  CLRF   x6A
1730:  CLRF   x69
1732:  CLRF   x68
1734:  CLRF   x67
1736:  CLRF   x6E
1738:  CLRF   x6D
173A:  MOVLW  7A
173C:  MOVWF  x6C
173E:  MOVLW  88
1740:  MOVWF  x6B
1742:  CLRF   x72
1744:  CLRF   x71
1746:  CLRF   x70
1748:  CLRF   x6F
174A:  CLRF   x76
174C:  CLRF   x75
174E:  CLRF   x74
1750:  CLRF   x73
1752:  CLRF   x7A
1754:  CLRF   x79
1756:  CLRF   x78
1758:  CLRF   x77
175A:  MOVLW  19
175C:  MOVWF  x7E
175E:  MOVLW  53
1760:  MOVWF  x7D
1762:  MOVLW  18
1764:  MOVWF  x7C
1766:  MOVLW  68
1768:  MOVWF  x7B
176A:  MOVLW  E9
176C:  MOVWF  x82
176E:  MOVLW  BD
1770:  MOVWF  x81
1772:  MOVLW  C6
1774:  MOVWF  x80
1776:  MOVLW  71
1778:  MOVWF  x7F
177A:  MOVLW  BE
177C:  MOVWF  x86
177E:  MOVLW  96
1780:  MOVWF  x85
1782:  MOVLW  24
1784:  MOVWF  x84
1786:  MOVLW  7A
1788:  MOVWF  x83
178A:  MOVLW  F3
178C:  MOVWF  x8A
178E:  MOVLW  5A
1790:  MOVWF  x89
1792:  MOVLW  AB
1794:  MOVWF  x88
1796:  MOVLW  81
1798:  MOVWF  x87
179A:  CLRF   x8E
179C:  CLRF   x8D
179E:  CLRF   x8C
17A0:  CLRF   x8B
17A2:  CLRF   x92
17A4:  CLRF   x91
17A6:  CLRF   x90
17A8:  CLRF   x8F
17AA:  CLRF   x96
17AC:  CLRF   x95
17AE:  CLRF   x94
17B0:  CLRF   x93
17B2:  CLRF   x9A
17B4:  CLRF   x99
17B6:  CLRF   x98
17B8:  CLRF   x97
17BA:  CLRF   x9E
17BC:  CLRF   x9D
17BE:  CLRF   x9C
17C0:  CLRF   x9B
17C2:  CLRF   xA2
17C4:  CLRF   xA1
17C6:  CLRF   xA0
17C8:  CLRF   x9F
17CA:  MOVLW  8B
17CC:  MOVWF  xA6
17CE:  MOVLW  FD
17D0:  MOVWF  xA5
17D2:  MOVLW  65
17D4:  MOVWF  xA4
17D6:  MOVLW  7C
17D8:  MOVWF  xA3
17DA:  CLRF   xAA
17DC:  CLRF   xA9
17DE:  CLRF   xA8
17E0:  CLRF   xA7
17E2:  CLRF   xAE
17E4:  CLRF   xAD
17E6:  CLRF   xAC
17E8:  CLRF   xAB
17EA:  CLRF   xB2
17EC:  CLRF   xB1
17EE:  CLRF   xB0
17F0:  CLRF   xAF
17F2:  CLRF   xB6
17F4:  CLRF   xB5
17F6:  CLRF   xB4
17F8:  CLRF   xB3
17FA:  CLRF   xBA
17FC:  CLRF   xB9
17FE:  CLRF   xB8
1800:  CLRF   xB7
1802:  CLRF   xBE
1804:  CLRF   xBD
1806:  CLRF   xBC
1808:  CLRF   xBB
180A:  CLRF   xC2
180C:  CLRF   xC1
180E:  CLRF   xC0
1810:  MOVLW  7F
1812:  MOVWF  xBF
1814:  CLRF   xC6
1816:  CLRF   xC5
1818:  MOVLW  24
181A:  MOVWF  xC4
181C:  MOVLW  88
181E:  MOVWF  xC3
1820:  CLRF   xCA
1822:  CLRF   xC9
1824:  CLRF   xC8
1826:  CLRF   xC7
1828:  CLRF   xCE
182A:  CLRF   xCD
182C:  CLRF   xCC
182E:  CLRF   xCB
1830:  MOVF   FC1,W
1832:  ANDLW  C0
1834:  IORLW  0F
1836:  MOVWF  FC1
1838:  MOVLW  07
183A:  MOVWF  FB4
183C:  MOVLW  3E
183E:  MOVWF  37
1840:  MOVLW  20
1842:  MOVWF  38
1844:  MOVLW  5E
1846:  MOVWF  39
1848:  CLRF   3A
184A:  CLRF   3B
184C:  CLRF   3C
184E:  CLRF   3D
1850:  CLRF   3E
1852:  CLRF   3F
1854:  CLRF   40
1856:  CLRF   41
1858:  CLRF   xCF
185A:  CLRF   xD0
185C:  CLRF   xD1
185E:  CLRF   xD2
1860:  CLRF   xD3
1862:  CLRF   xD4
1864:  CLRF   xD5
1866:  CLRF   xD6
1868:  CLRF   xD7
186A:  CLRF   xD8
186C:  CLRF   xD9
186E:  CLRF   xDA
1870:  CLRF   xDB
1872:  CLRF   xDC
1874:  CLRF   xDD
1876:  CLRF   xDE
1878:  CLRF   xDF
187A:  CLRF   xE0
187C:  CLRF   xE1
187E:  CLRF   xE2
1880:  CLRF   xE3
1882:  CLRF   xE4
1884:  CLRF   xE5
1886:  CLRF   xE6
1888:  CLRF   xE7
188A:  CLRF   xE8
188C:  CLRF   xE9
188E:  CLRF   xEA
1890:  CLRF   xEB
1892:  CLRF   xEC
1894:  CLRF   xED
1896:  CLRF   xEE
1898:  CLRF   xEF
189A:  CLRF   xF0
189C:  CLRF   xF1
189E:  CLRF   xF2
18A0:  CLRF   xF3
18A2:  CLRF   xF4
18A4:  CLRF   xF5
18A6:  CLRF   xF6
18A8:  CLRF   xF7
18AA:  CLRF   xF8
18AC:  CLRF   xF9
18AE:  CLRF   xFA
18B0:  CLRF   xFB
18B2:  CLRF   xFC
18B4:  CLRF   xFD
18B6:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
18B8:  MOVF   FC1,W
18BA:  ANDLW  C0
18BC:  IORLW  0B
18BE:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
18C0:  BCF    FC0.0
18C2:  BSF    FC0.1
18C4:  BCF    FC0.2
18C6:  BSF    FC0.7
18C8:  BSF    FC2.0
....................    output_d(0);  
18CA:  CLRF   F95
18CC:  CLRF   F8C
....................    ModoSleep=1; 
18CE:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
18D0:  MOVLW  85
18D2:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
18D4:  BSF    F9D.0
....................    //enable_interrupts(INT_EXT_L2H); 
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
18D6:  MOVLW  00
18D8:  IORLW  05
18DA:  MOVWF  FCA
18DC:  MOVLW  FF
18DE:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
18E0:  BCF    F94.2
18E2:  BCF    F8B.2
18E4:  BCF    F96.6
18E6:  MOVLW  0C
18E8:  MOVWF  FBD
18EA:  CLRF   FB7
18EC:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
18EE:  MOVLW  C0
18F0:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
18F2:  CLRF   FBE
....................    lcd_init(); 
18F4:  CALL   0982
....................    printf(lcd_putc,"\f"); 
18F8:  MOVLW  0C
18FA:  MOVLB  1
18FC:  MOVWF  x15
18FE:  MOVLB  0
1900:  CALL   0A60
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1904:  MOVFF  FF2,100
1908:  BCF    FF2.7
190A:  CLRF   FA9
190C:  BCF    FA6.6
190E:  BCF    FA6.7
1910:  BSF    FA6.0
1912:  MOVF   FA8,W
1914:  MOVLB  1
1916:  BTFSC  x00.7
1918:  BSF    FF2.7
191A:  MOVWF  3E
191C:  MOVLW  14
191E:  MOVWF  x1B
1920:  MOVLB  0
1922:  CALL   08E4
1926:  MOVFF  FF2,100
192A:  BCF    FF2.7
192C:  MOVLW  01
192E:  MOVWF  FA9
1930:  BCF    FA6.6
1932:  BCF    FA6.7
1934:  BSF    FA6.0
1936:  MOVF   FA8,W
1938:  MOVLB  1
193A:  BTFSC  x00.7
193C:  BSF    FF2.7
193E:  MOVWF  3F
1940:  MOVLW  14
1942:  MOVWF  x1B
1944:  MOVLB  0
1946:  CALL   08E4
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
194A:  MOVFF  FF2,100
194E:  BCF    FF2.7
1950:  MOVLW  02
1952:  MOVWF  FA9
1954:  BCF    FA6.6
1956:  BCF    FA6.7
1958:  BSF    FA6.0
195A:  MOVF   FA8,W
195C:  MOVLB  1
195E:  BTFSC  x00.7
1960:  BSF    FF2.7
1962:  MOVWF  40
1964:  MOVLW  14
1966:  MOVWF  x1B
1968:  MOVLB  0
196A:  CALL   08E4
196E:  MOVFF  FF2,100
1972:  BCF    FF2.7
1974:  MOVLW  03
1976:  MOVWF  FA9
1978:  BCF    FA6.6
197A:  BCF    FA6.7
197C:  BSF    FA6.0
197E:  MOVF   FA8,W
1980:  MOVLB  1
1982:  BTFSC  x00.7
1984:  BSF    FF2.7
1986:  MOVWF  41
1988:  MOVLW  14
198A:  MOVWF  x1B
198C:  MOVLB  0
198E:  CALL   08E4
....................    estadoalarma=read_eeprom(5); 
1992:  MOVFF  FF2,100
1996:  BCF    FF2.7
1998:  MOVLW  05
199A:  MOVWF  FA9
199C:  BCF    FA6.6
199E:  BCF    FA6.7
19A0:  BSF    FA6.0
19A2:  MOVF   FA8,W
19A4:  MOVLB  1
19A6:  BTFSC  x00.7
19A8:  BSF    FF2.7
19AA:  MOVWF  01
19AC:  BCF    34.2
19AE:  BTFSC  01.0
19B0:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
19B2:  MOVFF  FF2,100
19B6:  BCF    FF2.7
19B8:  MOVLW  0A
19BA:  MOVWF  FA9
19BC:  BCF    FA6.6
19BE:  BCF    FA6.7
19C0:  BSF    FA6.0
19C2:  MOVF   FA8,W
19C4:  BTFSC  x00.7
19C6:  BSF    FF2.7
19C8:  MOVWF  2D
19CA:  MOVFF  FF2,100
19CE:  BCF    FF2.7
19D0:  MOVLW  0B
19D2:  MOVWF  FA9
19D4:  BCF    FA6.6
19D6:  BCF    FA6.7
19D8:  BSF    FA6.0
19DA:  MOVF   FA8,W
19DC:  BTFSC  x00.7
19DE:  BSF    FF2.7
19E0:  MOVWF  2C
19E2:  MOVFF  FF2,100
19E6:  BCF    FF2.7
19E8:  MOVLW  0C
19EA:  MOVWF  FA9
19EC:  BCF    FA6.6
19EE:  BCF    FA6.7
19F0:  BSF    FA6.0
19F2:  MOVF   FA8,W
19F4:  BTFSC  x00.7
19F6:  BSF    FF2.7
19F8:  MOVWF  2E
19FA:  MOVFF  FF2,100
19FE:  BCF    FF2.7
1A00:  MOVLW  0D
1A02:  MOVWF  FA9
1A04:  BCF    FA6.6
1A06:  BCF    FA6.7
1A08:  BSF    FA6.0
1A0A:  MOVF   FA8,W
1A0C:  BTFSC  x00.7
1A0E:  BSF    FF2.7
1A10:  MOVWF  2F
1A12:  MOVFF  2F,29
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
1A16:  MOVFF  FF2,100
1A1A:  BCF    FF2.7
1A1C:  MOVLW  19
1A1E:  MOVWF  FA9
1A20:  BCF    FA6.6
1A22:  BCF    FA6.7
1A24:  BSF    FA6.0
1A26:  MOVF   FA8,W
1A28:  BTFSC  x00.7
1A2A:  BSF    FF2.7
1A2C:  MOVWF  21
....................    Temporal=read_eeprom(26); 
1A2E:  MOVFF  FF2,100
1A32:  BCF    FF2.7
1A34:  MOVLW  1A
1A36:  MOVWF  FA9
1A38:  BCF    FA6.6
1A3A:  BCF    FA6.7
1A3C:  BSF    FA6.0
1A3E:  MOVF   FA8,W
1A40:  BTFSC  x00.7
1A42:  BSF    FF2.7
1A44:  CLRF   x0A
1A46:  MOVWF  x09
1A48:  MOVLB  0
1A4A:  CALL   0ACC
1A4E:  MOVFF  03,AA
1A52:  MOVFF  02,A9
1A56:  MOVFF  01,A8
1A5A:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1A5E:  MOVFF  AA,107
1A62:  MOVFF  A9,106
1A66:  MOVFF  A8,105
1A6A:  MOVFF  A7,104
1A6E:  MOVLB  1
1A70:  CLRF   x0B
1A72:  CLRF   x0A
1A74:  MOVLW  48
1A76:  MOVWF  x09
1A78:  MOVLW  85
1A7A:  MOVWF  x08
1A7C:  MOVLB  0
1A7E:  CALL   0B02
1A82:  MOVFF  03,AA
1A86:  MOVFF  02,A9
1A8A:  MOVFF  01,A8
1A8E:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
1A92:  MOVLB  1
1A94:  CLRF   x0A
1A96:  MOVFF  21,109
1A9A:  MOVLB  0
1A9C:  CALL   0ACC
1AA0:  BCF    FD8.1
1AA2:  MOVFF  03,105
1AA6:  MOVFF  02,104
1AAA:  MOVFF  01,103
1AAE:  MOVFF  00,102
1AB2:  MOVFF  AA,109
1AB6:  MOVFF  A9,108
1ABA:  MOVFF  A8,107
1ABE:  MOVFF  A7,106
1AC2:  CALL   0C60
1AC6:  MOVFF  03,C2
1ACA:  MOVFF  02,C1
1ACE:  MOVFF  01,C0
1AD2:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
1AD6:  MOVFF  FF2,100
1ADA:  BCF    FF2.7
1ADC:  MOVLW  28
1ADE:  MOVWF  FA9
1AE0:  BCF    FA6.6
1AE2:  BCF    FA6.7
1AE4:  BSF    FA6.0
1AE6:  MOVF   FA8,W
1AE8:  MOVLB  1
1AEA:  BTFSC  x00.7
1AEC:  BSF    FF2.7
1AEE:  MOVWF  21
....................    Temporal=read_eeprom(41); 
1AF0:  MOVFF  FF2,100
1AF4:  BCF    FF2.7
1AF6:  MOVLW  29
1AF8:  MOVWF  FA9
1AFA:  BCF    FA6.6
1AFC:  BCF    FA6.7
1AFE:  BSF    FA6.0
1B00:  MOVF   FA8,W
1B02:  BTFSC  x00.7
1B04:  BSF    FF2.7
1B06:  CLRF   x0A
1B08:  MOVWF  x09
1B0A:  MOVLB  0
1B0C:  CALL   0ACC
1B10:  MOVFF  03,AA
1B14:  MOVFF  02,A9
1B18:  MOVFF  01,A8
1B1C:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1B20:  MOVFF  AA,107
1B24:  MOVFF  A9,106
1B28:  MOVFF  A8,105
1B2C:  MOVFF  A7,104
1B30:  MOVLB  1
1B32:  CLRF   x0B
1B34:  CLRF   x0A
1B36:  MOVLW  48
1B38:  MOVWF  x09
1B3A:  MOVLW  85
1B3C:  MOVWF  x08
1B3E:  MOVLB  0
1B40:  CALL   0B02
1B44:  MOVFF  03,AA
1B48:  MOVFF  02,A9
1B4C:  MOVFF  01,A8
1B50:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
1B54:  MOVLB  1
1B56:  CLRF   x0A
1B58:  MOVFF  21,109
1B5C:  MOVLB  0
1B5E:  CALL   0ACC
1B62:  BCF    FD8.1
1B64:  MOVFF  03,105
1B68:  MOVFF  02,104
1B6C:  MOVFF  01,103
1B70:  MOVFF  00,102
1B74:  MOVFF  AA,109
1B78:  MOVFF  A9,108
1B7C:  MOVFF  A8,107
1B80:  MOVFF  A7,106
1B84:  CALL   0C60
1B88:  MOVFF  03,45
1B8C:  MOVFF  02,44
1B90:  MOVFF  01,43
1B94:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1B98:  MOVFF  FF2,100
1B9C:  BCF    FF2.7
1B9E:  MOVLW  3C
1BA0:  MOVWF  FA9
1BA2:  BCF    FA6.6
1BA4:  BCF    FA6.7
1BA6:  BSF    FA6.0
1BA8:  MOVF   FA8,W
1BAA:  MOVLB  1
1BAC:  BTFSC  x00.7
1BAE:  BSF    FF2.7
1BB0:  MOVWF  24
....................    Temporal1=read_eeprom(61); 
1BB2:  MOVFF  FF2,100
1BB6:  BCF    FF2.7
1BB8:  MOVLW  3D
1BBA:  MOVWF  FA9
1BBC:  BCF    FA6.6
1BBE:  BCF    FA6.7
1BC0:  BSF    FA6.0
1BC2:  MOVF   FA8,W
1BC4:  BTFSC  x00.7
1BC6:  BSF    FF2.7
1BC8:  CLRF   x0A
1BCA:  MOVWF  x09
1BCC:  MOVLB  0
1BCE:  CALL   0ACC
1BD2:  MOVFF  03,B6
1BD6:  MOVFF  02,B5
1BDA:  MOVFF  01,B4
1BDE:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
1BE2:  MOVFF  B6,107
1BE6:  MOVFF  B5,106
1BEA:  MOVFF  B4,105
1BEE:  MOVFF  B3,104
1BF2:  MOVLB  1
1BF4:  CLRF   x0B
1BF6:  CLRF   x0A
1BF8:  MOVLW  48
1BFA:  MOVWF  x09
1BFC:  MOVLW  85
1BFE:  MOVWF  x08
1C00:  MOVLB  0
1C02:  CALL   0B02
1C06:  MOVFF  03,B6
1C0A:  MOVFF  02,B5
1C0E:  MOVFF  01,B4
1C12:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
1C16:  MOVLB  1
1C18:  CLRF   x0A
1C1A:  MOVFF  24,109
1C1E:  MOVLB  0
1C20:  CALL   0ACC
1C24:  BCF    FD8.1
1C26:  MOVFF  03,105
1C2A:  MOVFF  02,104
1C2E:  MOVFF  01,103
1C32:  MOVFF  00,102
1C36:  MOVFF  B6,109
1C3A:  MOVFF  B5,108
1C3E:  MOVFF  B4,107
1C42:  MOVFF  B3,106
1C46:  CALL   0C60
1C4A:  MOVFF  03,BE
1C4E:  MOVFF  02,BD
1C52:  MOVFF  01,BC
1C56:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
1C5A:  MOVFF  FF2,100
1C5E:  BCF    FF2.7
1C60:  MOVLW  32
1C62:  MOVWF  FA9
1C64:  BCF    FA6.6
1C66:  BCF    FA6.7
1C68:  BSF    FA6.0
1C6A:  MOVF   FA8,W
1C6C:  MOVLB  1
1C6E:  BTFSC  x00.7
1C70:  BSF    FF2.7
1C72:  MOVWF  2B
....................  
....................    MediaMovil=read_eeprom(42); 
1C74:  MOVFF  FF2,100
1C78:  BCF    FF2.7
1C7A:  MOVLW  2A
1C7C:  MOVWF  FA9
1C7E:  BCF    FA6.6
1C80:  BCF    FA6.7
1C82:  BSF    FA6.0
1C84:  MOVF   FA8,W
1C86:  BTFSC  x00.7
1C88:  BSF    FF2.7
1C8A:  MOVWF  2A
....................    if(MediaMovil>12) 
1C8C:  MOVF   2A,W
1C8E:  SUBLW  0C
1C90:  BC    1C96
....................    {MediaMovil=12;} 
1C92:  MOVLW  0C
1C94:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
1C96:  MOVF   2A,F
1C98:  BNZ   1C9E
....................    {MediaMovil=1;} 
1C9A:  MOVLW  01
1C9C:  MOVWF  2A
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
1C9E:  MOVFF  FF2,100
1CA2:  BCF    FF2.7
1CA4:  MOVLW  46
1CA6:  MOVWF  FA9
1CA8:  BCF    FA6.6
1CAA:  BCF    FA6.7
1CAC:  BSF    FA6.0
1CAE:  MOVF   FA8,W
1CB0:  BTFSC  x00.7
1CB2:  BSF    FF2.7
1CB4:  MOVWF  30
1CB6:  MOVFF  FF2,100
1CBA:  BCF    FF2.7
1CBC:  MOVLW  47
1CBE:  MOVWF  FA9
1CC0:  BCF    FA6.6
1CC2:  BCF    FA6.7
1CC4:  BSF    FA6.0
1CC6:  MOVF   FA8,W
1CC8:  BTFSC  x00.7
1CCA:  BSF    FF2.7
1CCC:  MOVWF  31
1CCE:  MOVFF  FF2,100
1CD2:  BCF    FF2.7
1CD4:  MOVLW  48
1CD6:  MOVWF  FA9
1CD8:  BCF    FA6.6
1CDA:  BCF    FA6.7
1CDC:  BSF    FA6.0
1CDE:  MOVF   FA8,W
1CE0:  BTFSC  x00.7
1CE2:  BSF    FF2.7
1CE4:  MOVWF  32
1CE6:  MOVFF  FF2,100
1CEA:  BCF    FF2.7
1CEC:  MOVLW  49
1CEE:  MOVWF  FA9
1CF0:  BCF    FA6.6
1CF2:  BCF    FA6.7
1CF4:  BSF    FA6.0
1CF6:  MOVF   FA8,W
1CF8:  BTFSC  x00.7
1CFA:  BSF    FF2.7
1CFC:  MOVWF  01
1CFE:  BCF    35.2
1D00:  BTFSC  01.0
1D02:  BSF    35.2
....................    Menu=200; 
1D04:  MOVLW  C8
1D06:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
1D08:  MOVF   17,W
1D0A:  SUBLW  C8
1D0C:  BNZ   1DE6
....................       if(inicio==0) 
1D0E:  BTFSC  35.4
1D10:  BRA    1DE4
....................       { 
....................       delay_ms(500); 
1D12:  MOVLW  02
1D14:  MOVWF  x00
1D16:  MOVLW  FA
1D18:  MOVWF  x1B
1D1A:  MOVLB  0
1D1C:  CALL   08E4
1D20:  MOVLB  1
1D22:  DECFSZ x00,F
1D24:  BRA    1D16
....................          if(input(PIN_B0)) 
1D26:  BSF    F93.0
1D28:  BTFSS  F81.0
1D2A:  BRA    1DE4
....................          { 
....................             lcd_init(); 
1D2C:  MOVLB  0
1D2E:  CALL   0982
....................             intensidadpantalla(contraste); 
1D32:  MOVFF  20,100
1D36:  CALL   0ED8
....................             lcd_gotoxy(1,1); 
1D3A:  MOVLW  01
1D3C:  MOVLB  1
1D3E:  MOVWF  x16
1D40:  MOVWF  x17
1D42:  MOVLB  0
1D44:  CALL   09EE
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
1D48:  MOVLW  DE
1D4A:  MOVWF  FF6
1D4C:  MOVLW  01
1D4E:  MOVWF  FF7
1D50:  CALL   0EEC
....................             lcd_gotoxy(1,2); 
1D54:  MOVLW  01
1D56:  MOVLB  1
1D58:  MOVWF  x16
1D5A:  MOVLW  02
1D5C:  MOVWF  x17
1D5E:  MOVLB  0
1D60:  CALL   09EE
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1D64:  MOVLW  F4
1D66:  MOVWF  FF6
1D68:  MOVLW  01
1D6A:  MOVWF  FF7
1D6C:  CALL   0EEC
....................             lcd_gotoxy(1,3); 
1D70:  MOVLW  01
1D72:  MOVLB  1
1D74:  MOVWF  x16
1D76:  MOVLW  03
1D78:  MOVWF  x17
1D7A:  MOVLB  0
1D7C:  CALL   09EE
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
1D80:  MOVLW  0A
1D82:  MOVWF  FF6
1D84:  MOVLW  02
1D86:  MOVWF  FF7
1D88:  CALL   0EEC
....................             lcd_gotoxy(1,4); 
1D8C:  MOVLW  01
1D8E:  MOVLB  1
1D90:  MOVWF  x16
1D92:  MOVLW  04
1D94:  MOVWF  x17
1D96:  MOVLB  0
1D98:  CALL   09EE
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1D9C:  MOVLW  20
1D9E:  MOVWF  FF6
1DA0:  MOVLW  02
1DA2:  MOVWF  FF7
1DA4:  CALL   0EEC
....................             delay_ms(2000); 
1DA8:  MOVLW  08
1DAA:  MOVLB  1
1DAC:  MOVWF  x00
1DAE:  MOVLW  FA
1DB0:  MOVWF  x1B
1DB2:  MOVLB  0
1DB4:  CALL   08E4
1DB8:  MOVLB  1
1DBA:  DECFSZ x00,F
1DBC:  BRA    1DAE
....................             printf(lcd_putc,"\f"); 
1DBE:  MOVLW  0C
1DC0:  MOVWF  x15
1DC2:  MOVLB  0
1DC4:  CALL   0A60
....................             inicio=1; 
1DC8:  BSF    35.4
....................             Menu=0; 
1DCA:  CLRF   17
....................             ModoSleep=0; 
1DCC:  BCF    35.3
....................             delay_ms(500); 
1DCE:  MOVLW  02
1DD0:  MOVLB  1
1DD2:  MOVWF  x00
1DD4:  MOVLW  FA
1DD6:  MOVWF  x1B
1DD8:  MOVLB  0
1DDA:  CALL   08E4
1DDE:  MOVLB  1
1DE0:  DECFSZ x00,F
1DE2:  BRA    1DD4
....................          } 
....................       } 
....................    } 
1DE4:  BRA    1D08
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1DE6:  MOVF   17,F
1DE8:  BTFSS  FD8.2
1DEA:  BRA    224A
....................    flag_latencia=1;set_pwm1_duty(0); 
1DEC:  BSF    35.0
1DEE:  CLRF   FBE
....................       if(Latencia==1) 
1DF0:  BTFSS  35.1
1DF2:  BRA    1E02
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1DF4:  MOVLW  0C
1DF6:  MOVWF  x15
1DF8:  MOVLB  0
1DFA:  CALL   0A60
1DFE:  RESET
1E00:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
1E02:  MOVLW  01
1E04:  MOVWF  x16
1E06:  MOVWF  x17
1E08:  MOVLB  0
1E0A:  CALL   09EE
....................    printf(lcd_putc,"     Ingrese        "); 
1E0E:  MOVLW  36
1E10:  MOVWF  FF6
1E12:  MOVLW  02
1E14:  MOVWF  FF7
1E16:  CALL   0EEC
....................    lcd_gotoxy(1,2); 
1E1A:  MOVLW  01
1E1C:  MOVLB  1
1E1E:  MOVWF  x16
1E20:  MOVLW  02
1E22:  MOVWF  x17
1E24:  MOVLB  0
1E26:  CALL   09EE
....................    printf(lcd_putc,"    Contraseña      "); 
1E2A:  MOVLW  4C
1E2C:  MOVWF  FF6
1E2E:  MOVLW  02
1E30:  MOVWF  FF7
1E32:  CALL   0EEC
....................    lcd_gotoxy(1,3); 
1E36:  MOVLW  01
1E38:  MOVLB  1
1E3A:  MOVWF  x16
1E3C:  MOVLW  03
1E3E:  MOVWF  x17
1E40:  MOVLB  0
1E42:  CALL   09EE
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1E46:  MOVLW  62
1E48:  MOVWF  FF6
1E4A:  MOVLW  02
1E4C:  MOVWF  FF7
1E4E:  MOVLW  0A
1E50:  MOVLB  1
1E52:  MOVWF  x08
1E54:  MOVLB  0
1E56:  CALL   0F0C
1E5A:  MOVFF  3A,100
1E5E:  MOVLW  1F
1E60:  MOVLB  1
1E62:  MOVWF  x01
1E64:  MOVLB  0
1E66:  CALL   0F60
1E6A:  MOVFF  3B,100
1E6E:  MOVLW  1F
1E70:  MOVLB  1
1E72:  MOVWF  x01
1E74:  MOVLB  0
1E76:  CALL   0F60
1E7A:  MOVFF  3C,100
1E7E:  MOVLW  1F
1E80:  MOVLB  1
1E82:  MOVWF  x01
1E84:  MOVLB  0
1E86:  CALL   0F60
1E8A:  MOVFF  3D,100
1E8E:  MOVLW  1F
1E90:  MOVLB  1
1E92:  MOVWF  x01
1E94:  MOVLB  0
1E96:  CALL   0F60
1E9A:  MOVLW  20
1E9C:  MOVLB  1
1E9E:  MOVWF  x15
1EA0:  MOVLB  0
1EA2:  CALL   0A60
1EA6:  MOVLW  20
1EA8:  MOVLB  1
1EAA:  MOVWF  x15
1EAC:  MOVLB  0
1EAE:  CALL   0A60
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1EB2:  BSF    F93.3
1EB4:  BTFSS  F81.3
1EB6:  BRA    1EE2
....................       {  if(Flanco == 0)  
1EB8:  BTFSC  34.4
1EBA:  BRA    1EE0
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
1EBC:  MOVLW  0B
1EBE:  SUBWF  1A,W
1EC0:  CLRF   03
1EC2:  ADDLW  3A
1EC4:  MOVWF  FE9
1EC6:  MOVLW  00
1EC8:  ADDWFC 03,W
1ECA:  MOVWF  FEA
1ECC:  INCF   FEF,F
1ECE:  BSF    34.4
1ED0:  MOVLW  1E
1ED2:  MOVLB  1
1ED4:  MOVWF  x1B
1ED6:  MOVLB  0
1ED8:  CALL   08E4
1EDC:  CLRF   52
1EDE:  CLRF   51
....................          else 
1EE0:  BRA    1EE4
....................             {Flanco = 0;} 
1EE2:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1EE4:  BSF    F93.2
1EE6:  BTFSS  F81.2
1EE8:  BRA    1F14
....................       {  if(Flanco2 == 0)  
1EEA:  BTFSC  34.6
1EEC:  BRA    1F12
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
1EEE:  MOVLW  0B
1EF0:  SUBWF  1A,W
1EF2:  CLRF   03
1EF4:  ADDLW  3A
1EF6:  MOVWF  FE9
1EF8:  MOVLW  00
1EFA:  ADDWFC 03,W
1EFC:  MOVWF  FEA
1EFE:  DECF   FEF,F
1F00:  BSF    34.6
1F02:  MOVLW  1E
1F04:  MOVLB  1
1F06:  MOVWF  x1B
1F08:  MOVLB  0
1F0A:  CALL   08E4
1F0E:  CLRF   52
1F10:  CLRF   51
....................          else 
1F12:  BRA    1F16
....................             {Flanco2 = 0;} 
1F14:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1F16:  BSF    F93.0
1F18:  BTFSS  F81.0
1F1A:  BRA    1F42
....................       {  if(Flanco1 == 0)  
1F1C:  BTFSC  34.5
1F1E:  BRA    1F40
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F20:  BSF    34.5
1F22:  INCF   1A,F
1F24:  MOVLW  1E
1F26:  MOVLB  1
1F28:  MOVWF  x1B
1F2A:  MOVLB  0
1F2C:  CALL   08E4
1F30:  MOVLW  0C
1F32:  MOVLB  1
1F34:  MOVWF  x15
1F36:  MOVLB  0
1F38:  CALL   0A60
1F3C:  CLRF   52
1F3E:  CLRF   51
....................          else 
1F40:  BRA    1F44
....................             {Flanco1 = 0;}    
1F42:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
1F44:  BSF    F93.1
1F46:  BTFSS  F81.1
1F48:  BRA    1F70
....................       {  if(Flanco3 == 0)  
1F4A:  BTFSC  34.7
1F4C:  BRA    1F6E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F4E:  BSF    34.7
1F50:  DECF   1A,F
1F52:  MOVLW  1E
1F54:  MOVLB  1
1F56:  MOVWF  x1B
1F58:  MOVLB  0
1F5A:  CALL   08E4
1F5E:  MOVLW  0C
1F60:  MOVLB  1
1F62:  MOVWF  x15
1F64:  MOVLB  0
1F66:  CALL   0A60
1F6A:  CLRF   52
1F6C:  CLRF   51
....................          else 
1F6E:  BRA    1F72
....................             {Flanco3 = 0;}     
1F70:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1F72:  MOVLW  0B
1F74:  SUBWF  1A,W
1F76:  CLRF   03
1F78:  ADDLW  3A
1F7A:  MOVWF  FE9
1F7C:  MOVLW  00
1F7E:  ADDWFC 03,W
1F80:  MOVWF  FEA
1F82:  BTFSC  FEF.7
1F84:  BRA    1F88
1F86:  BRA    1F9C
....................        {clave[unidad-11]=9;} 
1F88:  MOVLW  0B
1F8A:  SUBWF  1A,W
1F8C:  CLRF   03
1F8E:  ADDLW  3A
1F90:  MOVWF  FE9
1F92:  MOVLW  00
1F94:  ADDWFC 03,W
1F96:  MOVWF  FEA
1F98:  MOVLW  09
1F9A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1F9C:  MOVLW  0B
1F9E:  SUBWF  1A,W
1FA0:  CLRF   03
1FA2:  ADDLW  3A
1FA4:  MOVWF  FE9
1FA6:  MOVLW  00
1FA8:  ADDWFC 03,W
1FAA:  MOVWF  FEA
1FAC:  BTFSC  FEF.7
1FAE:  BRA    1FC8
1FB0:  MOVF   FEF,W
1FB2:  SUBLW  09
1FB4:  BC    1FC8
....................        {clave[unidad-11]=0;} 
1FB6:  MOVLW  0B
1FB8:  SUBWF  1A,W
1FBA:  CLRF   03
1FBC:  ADDLW  3A
1FBE:  MOVWF  FE9
1FC0:  MOVLW  00
1FC2:  ADDWFC 03,W
1FC4:  MOVWF  FEA
1FC6:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1FC8:  MOVF   1A,W
1FCA:  SUBLW  0A
1FCC:  BNC   1FD2
....................        {unidad=11;} 
1FCE:  MOVLW  0B
1FD0:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1FD2:  MOVFF  1A,116
1FD6:  MOVLW  04
1FD8:  MOVLB  1
1FDA:  MOVWF  x17
1FDC:  MOVLB  0
1FDE:  CALL   09EE
....................        lcd_putc(t[2]); 
1FE2:  MOVFF  39,115
1FE6:  CALL   0A60
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1FEA:  MOVF   1A,W
1FEC:  SUBLW  0E
1FEE:  BTFSC  FD8.0
1FF0:  BRA    221E
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1FF2:  MOVF   3A,W
1FF4:  SUBLW  03
1FF6:  BNZ   20DA
1FF8:  MOVF   3B,W
1FFA:  SUBLW  08
1FFC:  BNZ   20DA
1FFE:  MOVF   3C,W
2000:  SUBLW  09
2002:  BNZ   20DA
2004:  MOVF   3D,W
2006:  SUBLW  02
2008:  BNZ   20DA
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
200A:  CLRF   FA9
200C:  CLRF   FA8
200E:  BCF    FA6.6
2010:  BCF    FA6.7
2012:  BSF    FA6.2
2014:  MOVF   FF2,W
2016:  MOVWF  00
2018:  BCF    FF2.7
201A:  MOVLB  F
201C:  MOVLW  55
201E:  MOVWF  FA7
2020:  MOVLW  AA
2022:  MOVWF  FA7
2024:  BSF    FA6.1
2026:  BTFSC  FA6.1
2028:  BRA    2026
202A:  BCF    FA6.2
202C:  MOVF   00,W
202E:  IORWF  FF2,F
2030:  MOVLW  14
2032:  MOVLB  1
2034:  MOVWF  x1B
2036:  MOVLB  0
2038:  CALL   08E4
203C:  MOVLW  01
203E:  MOVWF  FA9
2040:  CLRF   FA8
2042:  BCF    FA6.6
2044:  BCF    FA6.7
2046:  BSF    FA6.2
2048:  MOVF   FF2,W
204A:  MOVWF  00
204C:  BCF    FF2.7
204E:  MOVLB  F
2050:  MOVLW  55
2052:  MOVWF  FA7
2054:  MOVLW  AA
2056:  MOVWF  FA7
2058:  BSF    FA6.1
205A:  BTFSC  FA6.1
205C:  BRA    205A
205E:  BCF    FA6.2
2060:  MOVF   00,W
2062:  IORWF  FF2,F
2064:  MOVLW  14
2066:  MOVLB  1
2068:  MOVWF  x1B
206A:  MOVLB  0
206C:  CALL   08E4
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2070:  MOVLW  02
2072:  MOVWF  FA9
2074:  CLRF   FA8
2076:  BCF    FA6.6
2078:  BCF    FA6.7
207A:  BSF    FA6.2
207C:  MOVF   FF2,W
207E:  MOVWF  00
2080:  BCF    FF2.7
2082:  MOVLB  F
2084:  MOVLW  55
2086:  MOVWF  FA7
2088:  MOVLW  AA
208A:  MOVWF  FA7
208C:  BSF    FA6.1
208E:  BTFSC  FA6.1
2090:  BRA    208E
2092:  BCF    FA6.2
2094:  MOVF   00,W
2096:  IORWF  FF2,F
2098:  MOVLW  14
209A:  MOVLB  1
209C:  MOVWF  x1B
209E:  MOVLB  0
20A0:  CALL   08E4
20A4:  MOVLW  03
20A6:  MOVWF  FA9
20A8:  CLRF   FA8
20AA:  BCF    FA6.6
20AC:  BCF    FA6.7
20AE:  BSF    FA6.2
20B0:  MOVF   FF2,W
20B2:  MOVWF  00
20B4:  BCF    FF2.7
20B6:  MOVLB  F
20B8:  MOVLW  55
20BA:  MOVWF  FA7
20BC:  MOVLW  AA
20BE:  MOVWF  FA7
20C0:  BSF    FA6.1
20C2:  BTFSC  FA6.1
20C4:  BRA    20C2
20C6:  BCF    FA6.2
20C8:  MOVF   00,W
20CA:  IORWF  FF2,F
20CC:  MOVLW  14
20CE:  MOVLB  1
20D0:  MOVWF  x1B
20D2:  MOVLB  0
20D4:  CALL   08E4
....................              reset_cpu();} 
20D8:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
20DA:  MOVF   3E,W
20DC:  SUBWF  3A,W
20DE:  BNZ   2198
20E0:  MOVF   3F,W
20E2:  SUBWF  3B,W
20E4:  BNZ   2198
20E6:  MOVF   40,W
20E8:  SUBWF  3C,W
20EA:  BNZ   2198
20EC:  MOVF   41,W
20EE:  SUBWF  3D,W
20F0:  BNZ   2198
....................             {lcd_gotoxy(1,1); 
20F2:  MOVLW  01
20F4:  MOVLB  1
20F6:  MOVWF  x16
20F8:  MOVWF  x17
20FA:  MOVLB  0
20FC:  CALL   09EE
....................             printf(lcd_putc,"                   "); 
2100:  MOVLW  78
2102:  MOVWF  FF6
2104:  MOVLW  02
2106:  MOVWF  FF7
2108:  CALL   0EEC
....................             lcd_gotoxy(1,2); 
210C:  MOVLW  01
210E:  MOVLB  1
2110:  MOVWF  x16
2112:  MOVLW  02
2114:  MOVWF  x17
2116:  MOVLB  0
2118:  CALL   09EE
....................             printf(lcd_putc,"     Contraseña    "); 
211C:  MOVLW  8C
211E:  MOVWF  FF6
2120:  MOVLW  02
2122:  MOVWF  FF7
2124:  CALL   0EEC
....................             lcd_gotoxy(1,3); 
2128:  MOVLW  01
212A:  MOVLB  1
212C:  MOVWF  x16
212E:  MOVLW  03
2130:  MOVWF  x17
2132:  MOVLB  0
2134:  CALL   09EE
....................             printf(lcd_putc,"      Correcta     "); 
2138:  MOVLW  A0
213A:  MOVWF  FF6
213C:  MOVLW  02
213E:  MOVWF  FF7
2140:  CALL   0EEC
....................             lcd_gotoxy(1,4); 
2144:  MOVLW  01
2146:  MOVLB  1
2148:  MOVWF  x16
214A:  MOVLW  04
214C:  MOVWF  x17
214E:  MOVLB  0
2150:  CALL   09EE
....................             printf(lcd_putc,"                   "); 
2154:  MOVLW  B4
2156:  MOVWF  FF6
2158:  MOVLW  02
215A:  MOVWF  FF7
215C:  CALL   0EEC
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
2160:  MOVLW  02
2162:  MOVLB  1
2164:  MOVWF  x00
2166:  MOVLW  FA
2168:  MOVWF  x1B
216A:  MOVLB  0
216C:  CALL   08E4
2170:  MOVLB  1
2172:  DECFSZ x00,F
2174:  BRA    2166
2176:  MOVLW  14
2178:  MOVWF  17
217A:  MOVLW  0B
217C:  MOVWF  1A
217E:  MOVLW  0C
2180:  MOVWF  x15
2182:  MOVLB  0
2184:  CALL   0A60
2188:  BSF    F8A.6
218A:  BCF    F93.6
218C:  BCF    35.0
218E:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
2190:  CLRF   52
2192:  CLRF   51
2194:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2196:  BRA    221E
....................          {lcd_gotoxy(1,1); 
2198:  MOVLW  01
219A:  MOVLB  1
219C:  MOVWF  x16
219E:  MOVWF  x17
21A0:  MOVLB  0
21A2:  CALL   09EE
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
21A6:  MOVLW  01
21A8:  MOVLB  1
21AA:  MOVWF  x16
21AC:  MOVLW  02
21AE:  MOVWF  x17
21B0:  MOVLB  0
21B2:  CALL   09EE
....................             printf(lcd_putc,"     Contraseña    "); 
21B6:  MOVLW  C8
21B8:  MOVWF  FF6
21BA:  MOVLW  02
21BC:  MOVWF  FF7
21BE:  CALL   0EEC
....................             lcd_gotoxy(1,3); 
21C2:  MOVLW  01
21C4:  MOVLB  1
21C6:  MOVWF  x16
21C8:  MOVLW  03
21CA:  MOVWF  x17
21CC:  MOVLB  0
21CE:  CALL   09EE
....................             printf(lcd_putc,"     Incorrecta    "); 
21D2:  MOVLW  DC
21D4:  MOVWF  FF6
21D6:  MOVLW  02
21D8:  MOVWF  FF7
21DA:  CALL   0EEC
....................             lcd_gotoxy(1,4); 
21DE:  MOVLW  01
21E0:  MOVLB  1
21E2:  MOVWF  x16
21E4:  MOVLW  04
21E6:  MOVWF  x17
21E8:  MOVLB  0
21EA:  CALL   09EE
....................             printf(lcd_putc,"                   "); 
21EE:  MOVLW  F0
21F0:  MOVWF  FF6
21F2:  MOVLW  02
21F4:  MOVWF  FF7
21F6:  CALL   0EEC
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
21FA:  MOVLW  02
21FC:  MOVLB  1
21FE:  MOVWF  x00
2200:  MOVLW  FA
2202:  MOVWF  x1B
2204:  MOVLB  0
2206:  CALL   08E4
220A:  MOVLB  1
220C:  DECFSZ x00,F
220E:  BRA    2200
2210:  MOVLW  0B
2212:  MOVWF  1A
2214:  MOVLW  0C
2216:  MOVWF  x15
2218:  MOVLB  0
221A:  CALL   0A60
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
221E:  MOVF   1A,W
2220:  SUBLW  0B
2222:  BC    2246
2224:  MOVF   1A,W
2226:  SUBLW  0D
2228:  BNC   2246
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
222A:  MOVLW  01
222C:  SUBWF  1A,W
222E:  MOVLB  1
2230:  MOVWF  x00
2232:  MOVWF  x16
2234:  MOVLW  04
2236:  MOVWF  x17
2238:  MOVLB  0
223A:  CALL   09EE
....................             lcd_putc(t[1]); 
223E:  MOVFF  38,115
2242:  CALL   0A60
....................           } 
....................  
....................    } 
2246:  MOVLB  1
2248:  BRA    1DE6
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
224A:  DECFSZ 17,W
224C:  BRA    2488
....................       if(paso<0) 
224E:  BTFSC  36.7
2250:  BRA    2254
2252:  BRA    2256
....................         {paso=0;} 
2254:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
2256:  MOVLW  01
2258:  MOVWF  x16
225A:  MOVWF  x17
225C:  MOVLB  0
225E:  CALL   09EE
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2262:  MOVLW  04
2264:  MOVWF  FF6
2266:  MOVLW  03
2268:  MOVWF  FF7
226A:  CALL   0EEC
....................     
....................    if(UP)//Si oprime hacia arriba 
226E:  BSF    F93.3
2270:  BTFSS  F81.3
2272:  BRA    2292
....................       {  if(Flanco == 0)  
2274:  BTFSC  34.4
2276:  BRA    2290
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
2278:  DECF   1D,F
227A:  DECF   1B,F
227C:  MOVLW  01
227E:  ADDWF  1B,W
2280:  MOVWF  1C
2282:  BSF    34.4
2284:  MOVLW  1E
2286:  MOVLB  1
2288:  MOVWF  x1B
228A:  MOVLB  0
228C:  CALL   08E4
....................          else 
2290:  BRA    2294
....................             {Flanco = 0;} 
2292:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2294:  BSF    F93.2
2296:  BTFSS  F81.2
2298:  BRA    22B8
....................       {  if(Flanco2 == 0)  
229A:  BTFSC  34.6
229C:  BRA    22B6
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
229E:  INCF   1D,F
22A0:  INCF   1B,F
22A2:  MOVLW  01
22A4:  SUBWF  1B,W
22A6:  MOVWF  1C
22A8:  BSF    34.6
22AA:  MOVLW  1E
22AC:  MOVLB  1
22AE:  MOVWF  x1B
22B0:  MOVLB  0
22B2:  CALL   08E4
....................          else 
22B6:  BRA    22BA
....................             {Flanco2 = 0;} 
22B8:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
22BA:  MOVF   1D,W
22BC:  SUBWF  1F,W
22BE:  BC    22D0
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
22C0:  INCF   36,F
22C2:  MOVFF  1D,1F
22C6:  MOVLW  02
22C8:  SUBWF  1F,W
22CA:  MOVWF  1E
22CC:  MOVLW  04
22CE:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
22D0:  MOVF   1E,W
22D2:  SUBWF  1D,W
22D4:  BC    22E6
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
22D6:  DECF   36,F
22D8:  MOVFF  1D,1E
22DC:  MOVLW  02
22DE:  ADDWF  1E,W
22E0:  MOVWF  1F
22E2:  MOVLW  02
22E4:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
22E6:  MOVF   1D,W
22E8:  SUBWF  18,W
22EA:  BC    22FE
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
22EC:  MOVFF  19,1D
22F0:  MOVLW  02
22F2:  MOVWF  1B
22F4:  CLRF   36
22F6:  MOVFF  1D,1E
22FA:  ADDWF  1E,W
22FC:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
22FE:  MOVF   19,W
2300:  SUBWF  1D,W
2302:  BC    231A
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
2304:  MOVFF  18,1D
2308:  MOVLW  04
230A:  MOVWF  1B
230C:  SUBWF  18,W
230E:  MOVWF  36
2310:  MOVFF  1D,1F
2314:  MOVLW  02
2316:  SUBWF  1F,W
2318:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
231A:  MOVLW  01
231C:  ADDWF  36,W
231E:  MOVLB  1
2320:  MOVWF  x00
2322:  MOVWF  x01
2324:  MOVLW  02
2326:  MOVWF  x02
2328:  MOVLB  0
232A:  CALL   103E
....................         mensajes(2+paso,3); 
232E:  MOVLW  02
2330:  ADDWF  36,W
2332:  MOVLB  1
2334:  MOVWF  x00
2336:  MOVWF  x01
2338:  MOVLW  03
233A:  MOVWF  x02
233C:  MOVLB  0
233E:  CALL   103E
....................         mensajes(3+paso,4); 
2342:  MOVLW  03
2344:  ADDWF  36,W
2346:  MOVLB  1
2348:  MOVWF  x00
234A:  MOVWF  x01
234C:  MOVLW  04
234E:  MOVWF  x02
2350:  MOVLB  0
2352:  CALL   103E
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2356:  MOVLW  01
2358:  MOVLB  1
235A:  MOVWF  x16
235C:  MOVFF  1B,117
2360:  MOVLB  0
2362:  CALL   09EE
....................         lcd_putc(t[0]); 
2366:  MOVFF  37,115
236A:  CALL   0A60
....................  
....................         if(Flecha==2) 
236E:  MOVF   1B,W
2370:  SUBLW  02
2372:  BNZ   23A4
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2374:  MOVLW  01
2376:  MOVLB  1
2378:  MOVWF  x16
237A:  MOVLW  04
237C:  MOVWF  x17
237E:  MOVLB  0
2380:  CALL   09EE
....................             lcd_putc(t[1]); 
2384:  MOVFF  38,115
2388:  CALL   0A60
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
238C:  MOVLW  01
238E:  MOVLB  1
2390:  MOVWF  x16
2392:  MOVLW  03
2394:  MOVWF  x17
2396:  MOVLB  0
2398:  CALL   09EE
....................             lcd_putc(t[1]); 
239C:  MOVFF  38,115
23A0:  CALL   0A60
....................           } 
....................          
....................         if(Flecha==4) 
23A4:  MOVF   1B,W
23A6:  SUBLW  04
23A8:  BNZ   23DA
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
23AA:  MOVLW  01
23AC:  MOVLB  1
23AE:  MOVWF  x16
23B0:  MOVLW  02
23B2:  MOVWF  x17
23B4:  MOVLB  0
23B6:  CALL   09EE
....................             lcd_putc(t[1]); 
23BA:  MOVFF  38,115
23BE:  CALL   0A60
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
23C2:  MOVLW  01
23C4:  MOVLB  1
23C6:  MOVWF  x16
23C8:  MOVLW  03
23CA:  MOVWF  x17
23CC:  MOVLB  0
23CE:  CALL   09EE
....................             lcd_putc(t[1]); 
23D2:  MOVFF  38,115
23D6:  CALL   0A60
....................           } 
....................          
....................         if(Flecha==3) 
23DA:  MOVF   1B,W
23DC:  SUBLW  03
23DE:  BNZ   2410
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
23E0:  MOVLW  01
23E2:  MOVLB  1
23E4:  MOVWF  x16
23E6:  MOVLW  04
23E8:  MOVWF  x17
23EA:  MOVLB  0
23EC:  CALL   09EE
....................             lcd_putc(t[1]); 
23F0:  MOVFF  38,115
23F4:  CALL   0A60
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
23F8:  MOVLW  01
23FA:  MOVLB  1
23FC:  MOVWF  x16
23FE:  MOVLW  02
2400:  MOVWF  x17
2402:  MOVLB  0
2404:  CALL   09EE
....................             lcd_putc(t[1]); 
2408:  MOVFF  38,115
240C:  CALL   0A60
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
2410:  BSF    F93.0
2412:  BTFSS  F81.0
2414:  BRA    2452
....................       {  if(Flanco1 == 0)  
2416:  BTFSC  34.5
2418:  BRA    2450
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
241A:  MOVFF  1D,17
241E:  MOVLW  03
2420:  MOVWF  1B
2422:  MOVLW  02
2424:  MOVLB  1
2426:  MOVWF  x00
2428:  MOVLW  FA
242A:  MOVWF  x1B
242C:  MOVLB  0
242E:  CALL   08E4
2432:  MOVLB  1
2434:  DECFSZ x00,F
2436:  BRA    2428
2438:  MOVLW  0C
243A:  MOVWF  x15
243C:  MOVLB  0
243E:  CALL   0A60
....................             if(Menu==6) 
2442:  MOVF   17,W
2444:  SUBLW  06
2446:  BNZ   2450
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
2448:  CLRF   3A
244A:  CLRF   3B
244C:  CLRF   3C
244E:  CLRF   3D
....................          else 
2450:  BRA    2454
....................             {Flanco1 = 0;}   
2452:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
2454:  BSF    F93.1
2456:  BTFSS  F81.1
2458:  BRA    2484
....................       {  if(Flanco3 == 0)  
245A:  BTFSC  34.7
245C:  BRA    2482
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
245E:  MOVLW  02
2460:  MOVLB  1
2462:  MOVWF  x00
2464:  MOVLW  FA
2466:  MOVWF  x1B
2468:  MOVLB  0
246A:  CALL   08E4
246E:  MOVLB  1
2470:  DECFSZ x00,F
2472:  BRA    2464
2474:  MOVLW  14
2476:  MOVWF  17
2478:  MOVLW  0C
247A:  MOVWF  x15
247C:  MOVLB  0
247E:  CALL   0A60
....................          else 
2482:  BRA    2486
....................             {Flanco3 = 0;}                
2484:  BCF    34.7
2486:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
2488:  MOVF   17,W
248A:  SUBLW  02
248C:  BTFSS  FD8.2
248E:  BRA    25DC
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
2490:  BTG    34.2
2492:  BSF    34.5
2494:  MOVLW  01
2496:  MOVWF  17
2498:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
249A:  BTFSS  34.2
249C:  BRA    250E
....................             {estadoalarma=1; 
249E:  BSF    34.2
....................                lcd_gotoxy(1,1); 
24A0:  MOVLW  01
24A2:  MOVWF  x16
24A4:  MOVWF  x17
24A6:  MOVLB  0
24A8:  CALL   09EE
....................                printf(lcd_putc,"                    "); 
24AC:  MOVLW  1A
24AE:  MOVWF  FF6
24B0:  MOVLW  03
24B2:  MOVWF  FF7
24B4:  CALL   0EEC
....................                lcd_gotoxy(1,2); 
24B8:  MOVLW  01
24BA:  MOVLB  1
24BC:  MOVWF  x16
24BE:  MOVLW  02
24C0:  MOVWF  x17
24C2:  MOVLB  0
24C4:  CALL   09EE
....................                printf(lcd_putc,"        Activo      "); 
24C8:  MOVLW  30
24CA:  MOVWF  FF6
24CC:  MOVLW  03
24CE:  MOVWF  FF7
24D0:  CALL   0EEC
....................                lcd_gotoxy(1,3); 
24D4:  MOVLW  01
24D6:  MOVLB  1
24D8:  MOVWF  x16
24DA:  MOVLW  03
24DC:  MOVWF  x17
24DE:  MOVLB  0
24E0:  CALL   09EE
....................                printf(lcd_putc,"        Alarma      "); 
24E4:  MOVLW  46
24E6:  MOVWF  FF6
24E8:  MOVLW  03
24EA:  MOVWF  FF7
24EC:  CALL   0EEC
....................                lcd_gotoxy(1,4); 
24F0:  MOVLW  01
24F2:  MOVLB  1
24F4:  MOVWF  x16
24F6:  MOVLW  04
24F8:  MOVWF  x17
24FA:  MOVLB  0
24FC:  CALL   09EE
....................                printf(lcd_putc,"                    ");} 
2500:  MOVLW  5C
2502:  MOVWF  FF6
2504:  MOVLW  03
2506:  MOVWF  FF7
2508:  CALL   0EEC
250C:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
250E:  BTFSC  34.2
2510:  BRA    2582
....................             {estadoalarma=0; 
2512:  BCF    34.2
....................                lcd_gotoxy(1,1); 
2514:  MOVLW  01
2516:  MOVWF  x16
2518:  MOVWF  x17
251A:  MOVLB  0
251C:  CALL   09EE
....................                printf(lcd_putc,"                    "); 
2520:  MOVLW  72
2522:  MOVWF  FF6
2524:  MOVLW  03
2526:  MOVWF  FF7
2528:  CALL   0EEC
....................                lcd_gotoxy(1,2); 
252C:  MOVLW  01
252E:  MOVLB  1
2530:  MOVWF  x16
2532:  MOVLW  02
2534:  MOVWF  x17
2536:  MOVLB  0
2538:  CALL   09EE
....................                printf(lcd_putc,"      Desactivo     "); 
253C:  MOVLW  88
253E:  MOVWF  FF6
2540:  MOVLW  03
2542:  MOVWF  FF7
2544:  CALL   0EEC
....................                lcd_gotoxy(1,3); 
2548:  MOVLW  01
254A:  MOVLB  1
254C:  MOVWF  x16
254E:  MOVLW  03
2550:  MOVWF  x17
2552:  MOVLB  0
2554:  CALL   09EE
....................                printf(lcd_putc,"       Alarma       "); 
2558:  MOVLW  9E
255A:  MOVWF  FF6
255C:  MOVLW  03
255E:  MOVWF  FF7
2560:  CALL   0EEC
....................                lcd_gotoxy(1,4); 
2564:  MOVLW  01
2566:  MOVLB  1
2568:  MOVWF  x16
256A:  MOVLW  04
256C:  MOVWF  x17
256E:  MOVLB  0
2570:  CALL   09EE
....................                printf(lcd_putc,"                    ");} 
2574:  MOVLW  B4
2576:  MOVWF  FF6
2578:  MOVLW  03
257A:  MOVWF  FF7
257C:  CALL   0EEC
2580:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2582:  MOVLW  00
2584:  BTFSC  34.2
2586:  MOVLW  01
2588:  MOVWF  x00
258A:  MOVLW  05
258C:  MOVWF  FA9
258E:  MOVFF  100,FA8
2592:  BCF    FA6.6
2594:  BCF    FA6.7
2596:  BSF    FA6.2
2598:  MOVF   FF2,W
259A:  MOVWF  00
259C:  BCF    FF2.7
259E:  MOVLB  F
25A0:  MOVLW  55
25A2:  MOVWF  FA7
25A4:  MOVLW  AA
25A6:  MOVWF  FA7
25A8:  BSF    FA6.1
25AA:  BTFSC  FA6.1
25AC:  BRA    25AA
25AE:  BCF    FA6.2
25B0:  MOVF   00,W
25B2:  IORWF  FF2,F
25B4:  MOVLW  02
25B6:  MOVLB  1
25B8:  MOVWF  x00
25BA:  MOVLW  FA
25BC:  MOVWF  x1B
25BE:  MOVLB  0
25C0:  CALL   08E4
25C4:  MOVLB  1
25C6:  DECFSZ x00,F
25C8:  BRA    25BA
25CA:  MOVLW  02
25CC:  MOVWF  1B
25CE:  MOVWF  1D
25D0:  MOVLW  0C
25D2:  MOVWF  x15
25D4:  MOVLB  0
25D6:  CALL   0A60
25DA:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
25DC:  MOVF   17,W
25DE:  SUBLW  03
25E0:  BTFSS  FD8.2
25E2:  BRA    287C
....................    lcd_gotoxy(1,1); 
25E4:  MOVLW  01
25E6:  MOVWF  x16
25E8:  MOVWF  x17
25EA:  MOVLB  0
25EC:  CALL   09EE
....................    printf(lcd_putc,"  Duracion Actual   ");                           
25F0:  MOVLW  CA
25F2:  MOVWF  FF6
25F4:  MOVLW  03
25F6:  MOVWF  FF7
25F8:  CALL   0EEC
....................    lcd_gotoxy(1,2);                                                   
25FC:  MOVLW  01
25FE:  MOVLB  1
2600:  MOVWF  x16
2602:  MOVLW  02
2604:  MOVWF  x17
2606:  MOVLB  0
2608:  CALL   09EE
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
260C:  MOVLW  E0
260E:  MOVWF  FF6
2610:  MOVLW  03
2612:  MOVWF  FF7
2614:  MOVLW  09
2616:  MOVLB  1
2618:  MOVWF  x08
261A:  MOVLB  0
261C:  CALL   0F0C
2620:  MOVFF  32,FF
2624:  MOVLW  01
2626:  MOVLB  1
2628:  MOVWF  x00
262A:  MOVLB  0
262C:  CALL   1152
2630:  MOVLW  3A
2632:  MOVLB  1
2634:  MOVWF  x15
2636:  MOVLB  0
2638:  CALL   0A60
263C:  MOVFF  31,FF
2640:  MOVLW  01
2642:  MOVLB  1
2644:  MOVWF  x00
2646:  MOVLB  0
2648:  CALL   1152
264C:  MOVLW  3A
264E:  MOVLB  1
2650:  MOVWF  x15
2652:  MOVLB  0
2654:  CALL   0A60
2658:  MOVFF  30,FF
265C:  MOVLW  01
265E:  MOVLB  1
2660:  MOVWF  x00
2662:  MOVLB  0
2664:  CALL   1152
2668:  MOVLW  20
266A:  MOVLB  1
266C:  MOVWF  x15
266E:  MOVLB  0
2670:  CALL   0A60
....................     
....................    if(flag_filtro==1) 
2674:  BTFSS  35.2
2676:  BRA    2696
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2678:  MOVLW  01
267A:  MOVLB  1
267C:  MOVWF  x16
267E:  MOVLW  03
2680:  MOVWF  x17
2682:  MOVLB  0
2684:  CALL   09EE
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
2688:  MOVLW  FA
268A:  MOVWF  FF6
268C:  MOVLW  03
268E:  MOVWF  FF7
2690:  CALL   0EEC
....................    } 
....................    else 
2694:  BRA    26B2
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2696:  MOVLW  01
2698:  MOVLB  1
269A:  MOVWF  x16
269C:  MOVLW  03
269E:  MOVWF  x17
26A0:  MOVLB  0
26A2:  CALL   09EE
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
26A6:  MOVLW  10
26A8:  MOVWF  FF6
26AA:  MOVLW  04
26AC:  MOVWF  FF7
26AE:  CALL   0EEC
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
26B2:  MOVLW  01
26B4:  MOVLB  1
26B6:  MOVWF  x16
26B8:  MOVLW  04
26BA:  MOVWF  x17
26BC:  MOVLB  0
26BE:  CALL   09EE
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
26C2:  MOVLW  26
26C4:  MOVWF  FF6
26C6:  MOVLW  04
26C8:  MOVWF  FF7
26CA:  CALL   0EEC
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
26CE:  BSF    F93.3
26D0:  BTFSS  F81.3
26D2:  BRA    27D6
....................       {  delay_ms(200); 
26D4:  MOVLW  C8
26D6:  MOVLB  1
26D8:  MOVWF  x1B
26DA:  MOVLB  0
26DC:  CALL   08E4
....................          printf(lcd_putc,"\f"); 
26E0:  MOVLW  0C
26E2:  MOVLB  1
26E4:  MOVWF  x15
26E6:  MOVLB  0
26E8:  CALL   0A60
....................          lcd_gotoxy(1,2); 
26EC:  MOVLW  01
26EE:  MOVLB  1
26F0:  MOVWF  x16
26F2:  MOVLW  02
26F4:  MOVWF  x17
26F6:  MOVLB  0
26F8:  CALL   09EE
....................          printf(lcd_putc," Reset de tiempo "); 
26FC:  MOVLW  3C
26FE:  MOVWF  FF6
2700:  MOVLW  04
2702:  MOVWF  FF7
2704:  CALL   0EEC
....................          lcd_gotoxy(1,3); 
2708:  MOVLW  01
270A:  MOVLB  1
270C:  MOVWF  x16
270E:  MOVLW  03
2710:  MOVWF  x17
2712:  MOVLB  0
2714:  CALL   09EE
....................          printf(lcd_putc,"     Exitoso     "); 
2718:  MOVLW  4E
271A:  MOVWF  FF6
271C:  MOVLW  04
271E:  MOVWF  FF7
2720:  CALL   0EEC
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
2724:  MOVLW  46
2726:  MOVWF  FA9
2728:  CLRF   FA8
272A:  BCF    FA6.6
272C:  BCF    FA6.7
272E:  BSF    FA6.2
2730:  MOVF   FF2,W
2732:  MOVWF  00
2734:  BCF    FF2.7
2736:  MOVLB  F
2738:  MOVLW  55
273A:  MOVWF  FA7
273C:  MOVLW  AA
273E:  MOVWF  FA7
2740:  BSF    FA6.1
2742:  BTFSC  FA6.1
2744:  BRA    2742
2746:  BCF    FA6.2
2748:  MOVF   00,W
274A:  IORWF  FF2,F
274C:  MOVLW  47
274E:  MOVWF  FA9
2750:  CLRF   FA8
2752:  BCF    FA6.6
2754:  BCF    FA6.7
2756:  BSF    FA6.2
2758:  MOVF   FF2,W
275A:  MOVWF  00
275C:  BCF    FF2.7
275E:  MOVLW  55
2760:  MOVWF  FA7
2762:  MOVLW  AA
2764:  MOVWF  FA7
2766:  BSF    FA6.1
2768:  BTFSC  FA6.1
276A:  BRA    2768
276C:  BCF    FA6.2
276E:  MOVF   00,W
2770:  IORWF  FF2,F
2772:  MOVLW  48
2774:  MOVWF  FA9
2776:  CLRF   FA8
2778:  BCF    FA6.6
277A:  BCF    FA6.7
277C:  BSF    FA6.2
277E:  MOVF   FF2,W
2780:  MOVWF  00
2782:  BCF    FF2.7
2784:  MOVLW  55
2786:  MOVWF  FA7
2788:  MOVLW  AA
278A:  MOVWF  FA7
278C:  BSF    FA6.1
278E:  BTFSC  FA6.1
2790:  BRA    278E
2792:  BCF    FA6.2
2794:  MOVF   00,W
2796:  IORWF  FF2,F
....................          delay_ms(700); 
2798:  MOVLW  04
279A:  MOVLB  1
279C:  MOVWF  x00
279E:  MOVLW  AF
27A0:  MOVWF  x1B
27A2:  MOVLB  0
27A4:  CALL   08E4
27A8:  MOVLB  1
27AA:  DECFSZ x00,F
27AC:  BRA    279E
....................          segundos=0;minutos=0;horas=0; 
27AE:  CLRF   30
27B0:  CLRF   31
27B2:  CLRF   32
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
27B4:  MOVLW  1E
27B6:  MOVWF  x1B
27B8:  MOVLB  0
27BA:  CALL   08E4
27BE:  MOVLW  01
27C0:  MOVWF  17
27C2:  CLRF   36
27C4:  MOVLW  02
27C6:  MOVWF  1B
27C8:  MOVWF  1D
27CA:  MOVLW  0C
27CC:  MOVLB  1
27CE:  MOVWF  x15
27D0:  MOVLB  0
27D2:  CALL   0A60
....................       } 
....................        
....................       if(RIGHT) 
27D6:  BSF    F93.0
27D8:  BTFSS  F81.0
27DA:  BRA    283E
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
27DC:  BTG    35.2
27DE:  MOVLW  00
27E0:  BTFSC  35.2
27E2:  MOVLW  01
27E4:  MOVLB  1
27E6:  MOVWF  x00
27E8:  MOVLW  49
27EA:  MOVWF  FA9
27EC:  MOVFF  100,FA8
27F0:  BCF    FA6.6
27F2:  BCF    FA6.7
27F4:  BSF    FA6.2
27F6:  MOVF   FF2,W
27F8:  MOVWF  00
27FA:  BCF    FF2.7
27FC:  MOVLB  F
27FE:  MOVLW  55
2800:  MOVWF  FA7
2802:  MOVLW  AA
2804:  MOVWF  FA7
2806:  BSF    FA6.1
2808:  BTFSC  FA6.1
280A:  BRA    2808
280C:  BCF    FA6.2
280E:  MOVF   00,W
2810:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2812:  MOVLW  02
2814:  MOVLB  1
2816:  MOVWF  x00
2818:  MOVLW  FA
281A:  MOVWF  x1B
281C:  MOVLB  0
281E:  CALL   08E4
2822:  MOVLB  1
2824:  DECFSZ x00,F
2826:  BRA    2818
2828:  MOVLW  01
282A:  MOVWF  17
282C:  CLRF   36
282E:  MOVLW  02
2830:  MOVWF  1B
2832:  MOVWF  1D
2834:  MOVLW  0C
2836:  MOVWF  x15
2838:  MOVLB  0
283A:  CALL   0A60
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
283E:  BSF    F93.1
2840:  BTFSS  F81.1
2842:  BRA    2878
....................       {  if(Flanco3 == 0)  
2844:  BTFSC  34.7
2846:  BRA    2876
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
2848:  BSF    34.7
284A:  MOVLW  02
284C:  MOVLB  1
284E:  MOVWF  x00
2850:  MOVLW  FA
2852:  MOVWF  x1B
2854:  MOVLB  0
2856:  CALL   08E4
285A:  MOVLB  1
285C:  DECFSZ x00,F
285E:  BRA    2850
2860:  MOVLW  01
2862:  MOVWF  17
2864:  CLRF   36
2866:  MOVLW  02
2868:  MOVWF  1B
286A:  MOVWF  1D
286C:  MOVLW  0C
286E:  MOVWF  x15
2870:  MOVLB  0
2872:  CALL   0A60
....................          else 
2876:  BRA    287A
....................             {Flanco3 = 0;}       
2878:  BCF    34.7
287A:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
287C:  MOVF   17,W
287E:  SUBLW  04
2880:  BTFSS  FD8.2
2882:  BRA    2B98
....................    lcd_gotoxy(1,2); 
2884:  MOVLW  01
2886:  MOVWF  x16
2888:  MOVLW  02
288A:  MOVWF  x17
288C:  MOVLB  0
288E:  CALL   09EE
....................    printf(lcd_putc,"      Setpoint      "); 
2892:  MOVLW  60
2894:  MOVWF  FF6
2896:  MOVLW  04
2898:  MOVWF  FF7
289A:  CALL   0EEC
....................    lcd_gotoxy(1,3); 
289E:  MOVLW  01
28A0:  MOVLB  1
28A2:  MOVWF  x16
28A4:  MOVLW  03
28A6:  MOVWF  x17
28A8:  MOVLB  0
28AA:  CALL   09EE
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
28AE:  MOVLW  76
28B0:  MOVWF  FF6
28B2:  MOVLW  04
28B4:  MOVWF  FF7
28B6:  MOVLW  07
28B8:  MOVLB  1
28BA:  MOVWF  x08
28BC:  MOVLB  0
28BE:  CALL   0F0C
28C2:  MOVLW  89
28C4:  MOVWF  FE9
28C6:  MOVFF  45,10B
28CA:  MOVFF  44,10A
28CE:  MOVFF  43,109
28D2:  MOVFF  42,108
28D6:  MOVLW  02
28D8:  MOVLB  1
28DA:  MOVWF  x0C
28DC:  MOVLB  0
28DE:  CALL   1386
28E2:  MOVLW  20
28E4:  MOVLB  1
28E6:  MOVWF  x15
28E8:  MOVLB  0
28EA:  CALL   0A60
28EE:  MOVLW  20
28F0:  MOVLB  1
28F2:  MOVWF  x15
28F4:  MOVLB  0
28F6:  CALL   0A60
28FA:  MOVLW  20
28FC:  MOVLB  1
28FE:  MOVWF  x15
2900:  MOVLB  0
2902:  CALL   0A60
....................     
....................    if(setpoint>2.0) 
2906:  MOVLB  1
2908:  CLRF   x02
290A:  CLRF   x01
290C:  CLRF   x00
290E:  MOVLW  80
2910:  MOVLB  0
2912:  MOVWF  xFF
2914:  MOVFF  45,106
2918:  MOVFF  44,105
291C:  MOVFF  43,104
2920:  MOVFF  42,103
2924:  CALL   1538
2928:  BNC   2934
....................    {setpoint=2.0;} 
292A:  CLRF   45
292C:  CLRF   44
292E:  CLRF   43
2930:  MOVLW  80
2932:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
2934:  MOVFF  45,102
2938:  MOVFF  44,101
293C:  MOVFF  43,100
2940:  MOVFF  42,FF
2944:  MOVLB  1
2946:  CLRF   x06
2948:  CLRF   x05
294A:  CLRF   x04
294C:  MOVLW  7E
294E:  MOVWF  x03
2950:  MOVLB  0
2952:  CALL   1538
2956:  BNC   2962
....................    {setpoint=0.5;} 
2958:  CLRF   45
295A:  CLRF   44
295C:  CLRF   43
295E:  MOVLW  7E
2960:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
2962:  BSF    F93.3
2964:  BTFSS  F81.3
2966:  BRA    29B6
....................       {  if(Flanco == 0)  
2968:  BTFSC  34.4
296A:  BRA    29B4
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
296C:  BCF    FD8.1
296E:  MOVFF  45,105
2972:  MOVFF  44,104
2976:  MOVFF  43,103
297A:  MOVFF  42,102
297E:  MOVLW  CD
2980:  MOVLB  1
2982:  MOVWF  x09
2984:  MOVLW  CC
2986:  MOVWF  x08
2988:  MOVLW  4C
298A:  MOVWF  x07
298C:  MOVLW  7B
298E:  MOVWF  x06
2990:  MOVLB  0
2992:  CALL   0C60
2996:  MOVFF  03,45
299A:  MOVFF  02,44
299E:  MOVFF  01,43
29A2:  MOVFF  00,42
29A6:  BSF    34.4
29A8:  MOVLW  1E
29AA:  MOVLB  1
29AC:  MOVWF  x1B
29AE:  MOVLB  0
29B0:  CALL   08E4
....................          else 
29B4:  BRA    29B8
....................             {Flanco = 0;} 
29B6:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
29B8:  BSF    F93.2
29BA:  BTFSS  F81.2
29BC:  BRA    2A0C
....................       {  if(Flanco2 == 0)  
29BE:  BTFSC  34.6
29C0:  BRA    2A0A
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
29C2:  BSF    FD8.1
29C4:  MOVFF  45,105
29C8:  MOVFF  44,104
29CC:  MOVFF  43,103
29D0:  MOVFF  42,102
29D4:  MOVLW  CD
29D6:  MOVLB  1
29D8:  MOVWF  x09
29DA:  MOVLW  CC
29DC:  MOVWF  x08
29DE:  MOVLW  4C
29E0:  MOVWF  x07
29E2:  MOVLW  7B
29E4:  MOVWF  x06
29E6:  MOVLB  0
29E8:  CALL   0C60
29EC:  MOVFF  03,45
29F0:  MOVFF  02,44
29F4:  MOVFF  01,43
29F8:  MOVFF  00,42
29FC:  BSF    34.6
29FE:  MOVLW  1E
2A00:  MOVLB  1
2A02:  MOVWF  x1B
2A04:  MOVLB  0
2A06:  CALL   08E4
....................          else 
2A0A:  BRA    2A0E
....................             {Flanco2 = 0;} 
2A0C:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
2A0E:  BSF    F93.0
2A10:  BTFSS  F81.0
2A12:  BRA    2B56
....................       {  if(Flanco1 == 0)  
2A14:  BTFSC  34.5
2A16:  BRA    2B54
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2A18:  MOVLW  01
2A1A:  MOVWF  17
2A1C:  CLRF   36
2A1E:  MOVLW  02
2A20:  MOVWF  1B
2A22:  MOVWF  1D
2A24:  MOVLW  0B
2A26:  MOVWF  1A
2A28:  MOVLW  02
2A2A:  MOVLB  1
2A2C:  MOVWF  x00
2A2E:  MOVLW  FA
2A30:  MOVWF  x1B
2A32:  MOVLB  0
2A34:  CALL   08E4
2A38:  MOVLB  1
2A3A:  DECFSZ x00,F
2A3C:  BRA    2A2E
2A3E:  MOVLW  0C
2A40:  MOVWF  x15
2A42:  MOVLB  0
2A44:  CALL   0A60
....................             Temporal=setpoint; 
2A48:  MOVFF  45,AA
2A4C:  MOVFF  44,A9
2A50:  MOVFF  43,A8
2A54:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
2A58:  MOVFF  45,102
2A5C:  MOVFF  44,101
2A60:  MOVFF  43,100
2A64:  MOVFF  42,FF
2A68:  CALL   15B6
2A6C:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
2A70:  MOVLB  1
2A72:  CLRF   x0A
2A74:  MOVFF  21,109
2A78:  MOVLB  0
2A7A:  CALL   0ACC
2A7E:  BSF    FD8.1
2A80:  MOVFF  AA,105
2A84:  MOVFF  A9,104
2A88:  MOVFF  A8,103
2A8C:  MOVFF  A7,102
2A90:  MOVFF  03,109
2A94:  MOVFF  02,108
2A98:  MOVFF  01,107
2A9C:  MOVFF  00,106
2AA0:  CALL   0C60
2AA4:  MOVFF  03,AA
2AA8:  MOVFF  02,A9
2AAC:  MOVFF  01,A8
2AB0:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
2AB4:  MOVFF  AA,118
2AB8:  MOVFF  A9,117
2ABC:  MOVFF  A8,116
2AC0:  MOVFF  A7,115
2AC4:  MOVLB  1
2AC6:  CLRF   x1C
2AC8:  CLRF   x1B
2ACA:  MOVLW  48
2ACC:  MOVWF  x1A
2ACE:  MOVLW  85
2AD0:  MOVWF  x19
2AD2:  MOVLB  0
2AD4:  CALL   11CC
2AD8:  MOVFF  03,AE
2ADC:  MOVFF  02,AD
2AE0:  MOVFF  01,AC
2AE4:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
2AE8:  MOVFF  AE,102
2AEC:  MOVFF  AD,101
2AF0:  MOVFF  AC,100
2AF4:  MOVFF  AB,FF
2AF8:  CALL   15B6
2AFC:  MOVFF  01,23
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
2B00:  MOVLW  28
2B02:  MOVWF  FA9
2B04:  MOVFF  21,FA8
2B08:  BCF    FA6.6
2B0A:  BCF    FA6.7
2B0C:  BSF    FA6.2
2B0E:  MOVF   FF2,W
2B10:  MOVWF  00
2B12:  BCF    FF2.7
2B14:  MOVLB  F
2B16:  MOVLW  55
2B18:  MOVWF  FA7
2B1A:  MOVLW  AA
2B1C:  MOVWF  FA7
2B1E:  BSF    FA6.1
2B20:  BTFSC  FA6.1
2B22:  BRA    2B20
2B24:  BCF    FA6.2
2B26:  MOVF   00,W
2B28:  IORWF  FF2,F
2B2A:  MOVLW  29
2B2C:  MOVWF  FA9
2B2E:  MOVFF  23,FA8
2B32:  BCF    FA6.6
2B34:  BCF    FA6.7
2B36:  BSF    FA6.2
2B38:  MOVF   FF2,W
2B3A:  MOVWF  00
2B3C:  BCF    FF2.7
2B3E:  MOVLW  55
2B40:  MOVWF  FA7
2B42:  MOVLW  AA
2B44:  MOVWF  FA7
2B46:  BSF    FA6.1
2B48:  BTFSC  FA6.1
2B4A:  BRA    2B48
2B4C:  BCF    FA6.2
2B4E:  MOVF   00,W
2B50:  IORWF  FF2,F
2B52:  MOVLB  0
....................             }} 
....................          else 
2B54:  BRA    2B58
....................             {Flanco1 = 0;}    
2B56:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2B58:  BSF    F93.1
2B5A:  BTFSS  F81.1
2B5C:  BRA    2B94
....................       {  if(Flanco3 == 0)  
2B5E:  BTFSC  34.7
2B60:  BRA    2B92
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
2B62:  MOVLW  01
2B64:  MOVWF  17
2B66:  CLRF   36
2B68:  MOVLW  02
2B6A:  MOVWF  1B
2B6C:  MOVWF  1D
2B6E:  MOVLW  0B
2B70:  MOVWF  1A
2B72:  MOVLW  02
2B74:  MOVLB  1
2B76:  MOVWF  x00
2B78:  MOVLW  FA
2B7A:  MOVWF  x1B
2B7C:  MOVLB  0
2B7E:  CALL   08E4
2B82:  MOVLB  1
2B84:  DECFSZ x00,F
2B86:  BRA    2B78
2B88:  MOVLW  0C
2B8A:  MOVWF  x15
2B8C:  MOVLB  0
2B8E:  CALL   0A60
....................          else 
2B92:  BRA    2B96
....................             {Flanco3 = 0;}     
2B94:  BCF    34.7
2B96:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
2B98:  MOVF   17,W
2B9A:  SUBLW  05
2B9C:  BTFSS  FD8.2
2B9E:  BRA    2F10
....................    lcd_gotoxy(1,1); 
2BA0:  MOVLW  01
2BA2:  MOVWF  x16
2BA4:  MOVWF  x17
2BA6:  MOVLB  0
2BA8:  CALL   09EE
....................    printf(lcd_putc,"      Ingrese       "); 
2BAC:  MOVLW  86
2BAE:  MOVWF  FF6
2BB0:  MOVLW  04
2BB2:  MOVWF  FF7
2BB4:  CALL   0EEC
....................    lcd_gotoxy(1,2); 
2BB8:  MOVLW  01
2BBA:  MOVLB  1
2BBC:  MOVWF  x16
2BBE:  MOVLW  02
2BC0:  MOVWF  x17
2BC2:  MOVLB  0
2BC4:  CALL   09EE
....................    printf(lcd_putc," Contraseña Actual  "); 
2BC8:  MOVLW  9C
2BCA:  MOVWF  FF6
2BCC:  MOVLW  04
2BCE:  MOVWF  FF7
2BD0:  CALL   0EEC
....................    lcd_gotoxy(1,3); 
2BD4:  MOVLW  01
2BD6:  MOVLB  1
2BD8:  MOVWF  x16
2BDA:  MOVLW  03
2BDC:  MOVWF  x17
2BDE:  MOVLB  0
2BE0:  CALL   09EE
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2BE4:  MOVLW  B2
2BE6:  MOVWF  FF6
2BE8:  MOVLW  04
2BEA:  MOVWF  FF7
2BEC:  MOVLW  0A
2BEE:  MOVLB  1
2BF0:  MOVWF  x08
2BF2:  MOVLB  0
2BF4:  CALL   0F0C
2BF8:  MOVFF  3A,100
2BFC:  MOVLW  1F
2BFE:  MOVLB  1
2C00:  MOVWF  x01
2C02:  MOVLB  0
2C04:  CALL   0F60
2C08:  MOVFF  3B,100
2C0C:  MOVLW  1F
2C0E:  MOVLB  1
2C10:  MOVWF  x01
2C12:  MOVLB  0
2C14:  CALL   0F60
2C18:  MOVFF  3C,100
2C1C:  MOVLW  1F
2C1E:  MOVLB  1
2C20:  MOVWF  x01
2C22:  MOVLB  0
2C24:  CALL   0F60
2C28:  MOVFF  3D,100
2C2C:  MOVLW  1F
2C2E:  MOVLB  1
2C30:  MOVWF  x01
2C32:  MOVLB  0
2C34:  CALL   0F60
2C38:  MOVLW  20
2C3A:  MOVLB  1
2C3C:  MOVWF  x15
2C3E:  MOVLB  0
2C40:  CALL   0A60
2C44:  MOVLW  20
2C46:  MOVLB  1
2C48:  MOVWF  x15
2C4A:  MOVLB  0
2C4C:  CALL   0A60
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2C50:  BSF    F93.3
2C52:  BTFSS  F81.3
2C54:  BRA    2C7C
....................       {  if(Flanco == 0)  
2C56:  BTFSC  34.4
2C58:  BRA    2C7A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2C5A:  MOVLW  0B
2C5C:  SUBWF  1A,W
2C5E:  CLRF   03
2C60:  ADDLW  3A
2C62:  MOVWF  FE9
2C64:  MOVLW  00
2C66:  ADDWFC 03,W
2C68:  MOVWF  FEA
2C6A:  INCF   FEF,F
2C6C:  BSF    34.4
2C6E:  MOVLW  1E
2C70:  MOVLB  1
2C72:  MOVWF  x1B
2C74:  MOVLB  0
2C76:  CALL   08E4
....................          else 
2C7A:  BRA    2C7E
....................             {Flanco = 0;} 
2C7C:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2C7E:  BSF    F93.2
2C80:  BTFSS  F81.2
2C82:  BRA    2CAA
....................       {  if(Flanco2 == 0)  
2C84:  BTFSC  34.6
2C86:  BRA    2CA8
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2C88:  MOVLW  0B
2C8A:  SUBWF  1A,W
2C8C:  CLRF   03
2C8E:  ADDLW  3A
2C90:  MOVWF  FE9
2C92:  MOVLW  00
2C94:  ADDWFC 03,W
2C96:  MOVWF  FEA
2C98:  DECF   FEF,F
2C9A:  BSF    34.6
2C9C:  MOVLW  1E
2C9E:  MOVLB  1
2CA0:  MOVWF  x1B
2CA2:  MOVLB  0
2CA4:  CALL   08E4
....................          else 
2CA8:  BRA    2CAC
....................             {Flanco2 = 0;} 
2CAA:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
2CAC:  BSF    F93.0
2CAE:  BTFSS  F81.0
2CB0:  BRA    2CDC
....................       {  if(Flanco1 == 0)  
2CB2:  BTFSC  34.5
2CB4:  BRA    2CDA
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
2CB6:  BSF    34.5
2CB8:  INCF   1A,F
2CBA:  MOVLW  02
2CBC:  MOVLB  1
2CBE:  MOVWF  x00
2CC0:  MOVLW  FA
2CC2:  MOVWF  x1B
2CC4:  MOVLB  0
2CC6:  CALL   08E4
2CCA:  MOVLB  1
2CCC:  DECFSZ x00,F
2CCE:  BRA    2CC0
2CD0:  MOVLW  0C
2CD2:  MOVWF  x15
2CD4:  MOVLB  0
2CD6:  CALL   0A60
....................          else 
2CDA:  BRA    2CDE
....................             {Flanco1 = 0;}    
2CDC:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2CDE:  BSF    F93.1
2CE0:  BTFSS  F81.1
2CE2:  BRA    2D0E
....................       {  if(Flanco3 == 0)  
2CE4:  BTFSC  34.7
2CE6:  BRA    2D0C
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
2CE8:  BSF    34.7
2CEA:  DECF   1A,F
2CEC:  MOVLW  02
2CEE:  MOVLB  1
2CF0:  MOVWF  x00
2CF2:  MOVLW  FA
2CF4:  MOVWF  x1B
2CF6:  MOVLB  0
2CF8:  CALL   08E4
2CFC:  MOVLB  1
2CFE:  DECFSZ x00,F
2D00:  BRA    2CF2
2D02:  MOVLW  0C
2D04:  MOVWF  x15
2D06:  MOVLB  0
2D08:  CALL   0A60
....................          else 
2D0C:  BRA    2D10
....................             {Flanco3 = 0;}     
2D0E:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2D10:  MOVLW  0B
2D12:  SUBWF  1A,W
2D14:  CLRF   03
2D16:  ADDLW  3A
2D18:  MOVWF  FE9
2D1A:  MOVLW  00
2D1C:  ADDWFC 03,W
2D1E:  MOVWF  FEA
2D20:  BTFSC  FEF.7
2D22:  BRA    2D26
2D24:  BRA    2D3A
....................        {clave[unidad-11]=9;} 
2D26:  MOVLW  0B
2D28:  SUBWF  1A,W
2D2A:  CLRF   03
2D2C:  ADDLW  3A
2D2E:  MOVWF  FE9
2D30:  MOVLW  00
2D32:  ADDWFC 03,W
2D34:  MOVWF  FEA
2D36:  MOVLW  09
2D38:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2D3A:  MOVLW  0B
2D3C:  SUBWF  1A,W
2D3E:  CLRF   03
2D40:  ADDLW  3A
2D42:  MOVWF  FE9
2D44:  MOVLW  00
2D46:  ADDWFC 03,W
2D48:  MOVWF  FEA
2D4A:  BTFSC  FEF.7
2D4C:  BRA    2D66
2D4E:  MOVF   FEF,W
2D50:  SUBLW  09
2D52:  BC    2D66
....................        {clave[unidad-11]=0;} 
2D54:  MOVLW  0B
2D56:  SUBWF  1A,W
2D58:  CLRF   03
2D5A:  ADDLW  3A
2D5C:  MOVWF  FE9
2D5E:  MOVLW  00
2D60:  ADDWFC 03,W
2D62:  MOVWF  FEA
2D64:  CLRF   FEF
....................        if(unidad<11) 
2D66:  MOVF   1A,W
2D68:  SUBLW  0A
2D6A:  BNC   2D7C
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
2D6C:  MOVLW  01
2D6E:  MOVWF  17
2D70:  CLRF   36
2D72:  MOVLW  02
2D74:  MOVWF  1B
2D76:  MOVWF  1D
2D78:  MOVLW  0B
2D7A:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2D7C:  MOVFF  1A,116
2D80:  MOVLW  04
2D82:  MOVLB  1
2D84:  MOVWF  x17
2D86:  MOVLB  0
2D88:  CALL   09EE
....................        lcd_putc(t[2]); 
2D8C:  MOVFF  39,115
2D90:  CALL   0A60
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2D94:  MOVF   1A,W
2D96:  SUBLW  0E
2D98:  BTFSC  FD8.0
2D9A:  BRA    2EE6
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2D9C:  MOVF   3E,W
2D9E:  SUBWF  3A,W
2DA0:  BNZ   2E54
2DA2:  MOVF   3F,W
2DA4:  SUBWF  3B,W
2DA6:  BNZ   2E54
2DA8:  MOVF   40,W
2DAA:  SUBWF  3C,W
2DAC:  BNZ   2E54
2DAE:  MOVF   41,W
2DB0:  SUBWF  3D,W
2DB2:  BNZ   2E54
....................             {lcd_gotoxy(1,1); 
2DB4:  MOVLW  01
2DB6:  MOVLB  1
2DB8:  MOVWF  x16
2DBA:  MOVWF  x17
2DBC:  MOVLB  0
2DBE:  CALL   09EE
....................             printf(lcd_putc,"                    "); 
2DC2:  MOVLW  C8
2DC4:  MOVWF  FF6
2DC6:  MOVLW  04
2DC8:  MOVWF  FF7
2DCA:  CALL   0EEC
....................             lcd_gotoxy(1,2); 
2DCE:  MOVLW  01
2DD0:  MOVLB  1
2DD2:  MOVWF  x16
2DD4:  MOVLW  02
2DD6:  MOVWF  x17
2DD8:  MOVLB  0
2DDA:  CALL   09EE
....................             printf(lcd_putc,"     Contraseña     "); 
2DDE:  MOVLW  DE
2DE0:  MOVWF  FF6
2DE2:  MOVLW  04
2DE4:  MOVWF  FF7
2DE6:  CALL   0EEC
....................             lcd_gotoxy(1,3); 
2DEA:  MOVLW  01
2DEC:  MOVLB  1
2DEE:  MOVWF  x16
2DF0:  MOVLW  03
2DF2:  MOVWF  x17
2DF4:  MOVLB  0
2DF6:  CALL   09EE
....................             printf(lcd_putc,"      Correcta      "); 
2DFA:  MOVLW  F4
2DFC:  MOVWF  FF6
2DFE:  MOVLW  04
2E00:  MOVWF  FF7
2E02:  CALL   0EEC
....................             lcd_gotoxy(1,4); 
2E06:  MOVLW  01
2E08:  MOVLB  1
2E0A:  MOVWF  x16
2E0C:  MOVLW  04
2E0E:  MOVWF  x17
2E10:  MOVLB  0
2E12:  CALL   09EE
....................             printf(lcd_putc,"                    "); 
2E16:  MOVLW  0A
2E18:  MOVWF  FF6
2E1A:  MOVLW  05
2E1C:  MOVWF  FF7
2E1E:  CALL   0EEC
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
2E22:  MOVLW  02
2E24:  MOVLB  1
2E26:  MOVWF  x00
2E28:  MOVLW  FA
2E2A:  MOVWF  x1B
2E2C:  MOVLB  0
2E2E:  CALL   08E4
2E32:  MOVLB  1
2E34:  DECFSZ x00,F
2E36:  BRA    2E28
2E38:  MOVLW  33
2E3A:  MOVWF  17
2E3C:  MOVLW  0B
2E3E:  MOVWF  1A
2E40:  MOVLW  0C
2E42:  MOVWF  x15
2E44:  MOVLB  0
2E46:  CALL   0A60
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2E4A:  CLRF   3A
2E4C:  CLRF   3B
2E4E:  CLRF   3C
2E50:  CLRF   3D
....................          else 
2E52:  BRA    2EE6
....................          {lcd_gotoxy(1,1); 
2E54:  MOVLW  01
2E56:  MOVLB  1
2E58:  MOVWF  x16
2E5A:  MOVWF  x17
2E5C:  MOVLB  0
2E5E:  CALL   09EE
....................             printf(lcd_putc,"                    "); 
2E62:  MOVLW  20
2E64:  MOVWF  FF6
2E66:  MOVLW  05
2E68:  MOVWF  FF7
2E6A:  CALL   0EEC
....................             lcd_gotoxy(1,2); 
2E6E:  MOVLW  01
2E70:  MOVLB  1
2E72:  MOVWF  x16
2E74:  MOVLW  02
2E76:  MOVWF  x17
2E78:  MOVLB  0
2E7A:  CALL   09EE
....................             printf(lcd_putc,"     Contraseña     "); 
2E7E:  MOVLW  36
2E80:  MOVWF  FF6
2E82:  MOVLW  05
2E84:  MOVWF  FF7
2E86:  CALL   0EEC
....................             lcd_gotoxy(1,3); 
2E8A:  MOVLW  01
2E8C:  MOVLB  1
2E8E:  MOVWF  x16
2E90:  MOVLW  03
2E92:  MOVWF  x17
2E94:  MOVLB  0
2E96:  CALL   09EE
....................             printf(lcd_putc,"     Incorrecta     "); 
2E9A:  MOVLW  4C
2E9C:  MOVWF  FF6
2E9E:  MOVLW  05
2EA0:  MOVWF  FF7
2EA2:  CALL   0EEC
....................             lcd_gotoxy(1,4); 
2EA6:  MOVLW  01
2EA8:  MOVLB  1
2EAA:  MOVWF  x16
2EAC:  MOVLW  04
2EAE:  MOVWF  x17
2EB0:  MOVLB  0
2EB2:  CALL   09EE
....................             printf(lcd_putc,"                    "); 
2EB6:  MOVLW  62
2EB8:  MOVWF  FF6
2EBA:  MOVLW  05
2EBC:  MOVWF  FF7
2EBE:  CALL   0EEC
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2EC2:  MOVLW  02
2EC4:  MOVLB  1
2EC6:  MOVWF  x00
2EC8:  MOVLW  FA
2ECA:  MOVWF  x1B
2ECC:  MOVLB  0
2ECE:  CALL   08E4
2ED2:  MOVLB  1
2ED4:  DECFSZ x00,F
2ED6:  BRA    2EC8
2ED8:  MOVLW  0B
2EDA:  MOVWF  1A
2EDC:  MOVLW  0C
2EDE:  MOVWF  x15
2EE0:  MOVLB  0
2EE2:  CALL   0A60
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2EE6:  MOVF   1A,W
2EE8:  SUBLW  0B
2EEA:  BC    2F0E
2EEC:  MOVF   1A,W
2EEE:  SUBLW  0D
2EF0:  BNC   2F0E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2EF2:  MOVLW  01
2EF4:  SUBWF  1A,W
2EF6:  MOVLB  1
2EF8:  MOVWF  x00
2EFA:  MOVWF  x16
2EFC:  MOVLW  04
2EFE:  MOVWF  x17
2F00:  MOVLB  0
2F02:  CALL   09EE
....................             lcd_putc(t[1]); 
2F06:  MOVFF  38,115
2F0A:  CALL   0A60
2F0E:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2F10:  MOVF   17,W
2F12:  SUBLW  33
2F14:  BTFSS  FD8.2
2F16:  BRA    328E
....................    lcd_gotoxy(1,1); 
2F18:  MOVLW  01
2F1A:  MOVWF  x16
2F1C:  MOVWF  x17
2F1E:  MOVLB  0
2F20:  CALL   09EE
....................    printf(lcd_putc,"     Ingrese        "); 
2F24:  MOVLW  78
2F26:  MOVWF  FF6
2F28:  MOVLW  05
2F2A:  MOVWF  FF7
2F2C:  CALL   0EEC
....................    lcd_gotoxy(1,2); 
2F30:  MOVLW  01
2F32:  MOVLB  1
2F34:  MOVWF  x16
2F36:  MOVLW  02
2F38:  MOVWF  x17
2F3A:  MOVLB  0
2F3C:  CALL   09EE
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2F40:  MOVLW  8E
2F42:  MOVWF  FF6
2F44:  MOVLW  05
2F46:  MOVWF  FF7
2F48:  CALL   0EEC
....................    lcd_gotoxy(1,3); 
2F4C:  MOVLW  01
2F4E:  MOVLB  1
2F50:  MOVWF  x16
2F52:  MOVLW  03
2F54:  MOVWF  x17
2F56:  MOVLB  0
2F58:  CALL   09EE
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F5C:  MOVLW  A4
2F5E:  MOVWF  FF6
2F60:  MOVLW  05
2F62:  MOVWF  FF7
2F64:  MOVLW  0A
2F66:  MOVLB  1
2F68:  MOVWF  x08
2F6A:  MOVLB  0
2F6C:  CALL   0F0C
2F70:  MOVFF  3A,100
2F74:  MOVLW  1F
2F76:  MOVLB  1
2F78:  MOVWF  x01
2F7A:  MOVLB  0
2F7C:  CALL   0F60
2F80:  MOVFF  3B,100
2F84:  MOVLW  1F
2F86:  MOVLB  1
2F88:  MOVWF  x01
2F8A:  MOVLB  0
2F8C:  CALL   0F60
2F90:  MOVFF  3C,100
2F94:  MOVLW  1F
2F96:  MOVLB  1
2F98:  MOVWF  x01
2F9A:  MOVLB  0
2F9C:  CALL   0F60
2FA0:  MOVFF  3D,100
2FA4:  MOVLW  1F
2FA6:  MOVLB  1
2FA8:  MOVWF  x01
2FAA:  MOVLB  0
2FAC:  CALL   0F60
2FB0:  MOVLW  20
2FB2:  MOVLB  1
2FB4:  MOVWF  x15
2FB6:  MOVLB  0
2FB8:  CALL   0A60
2FBC:  MOVLW  20
2FBE:  MOVLB  1
2FC0:  MOVWF  x15
2FC2:  MOVLB  0
2FC4:  CALL   0A60
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
2FC8:  BSF    F93.3
2FCA:  BTFSS  F81.3
2FCC:  BRA    2FF4
....................       {  if(Flanco == 0)  
2FCE:  BTFSC  34.4
2FD0:  BRA    2FF2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2FD2:  MOVLW  0B
2FD4:  SUBWF  1A,W
2FD6:  CLRF   03
2FD8:  ADDLW  3A
2FDA:  MOVWF  FE9
2FDC:  MOVLW  00
2FDE:  ADDWFC 03,W
2FE0:  MOVWF  FEA
2FE2:  INCF   FEF,F
2FE4:  BSF    34.4
2FE6:  MOVLW  1E
2FE8:  MOVLB  1
2FEA:  MOVWF  x1B
2FEC:  MOVLB  0
2FEE:  CALL   08E4
....................          else 
2FF2:  BRA    2FF6
....................             {Flanco = 0;} 
2FF4:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2FF6:  BSF    F93.2
2FF8:  BTFSS  F81.2
2FFA:  BRA    3022
....................       {  if(Flanco2 == 0)  
2FFC:  BTFSC  34.6
2FFE:  BRA    3020
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3000:  MOVLW  0B
3002:  SUBWF  1A,W
3004:  CLRF   03
3006:  ADDLW  3A
3008:  MOVWF  FE9
300A:  MOVLW  00
300C:  ADDWFC 03,W
300E:  MOVWF  FEA
3010:  DECF   FEF,F
3012:  BSF    34.6
3014:  MOVLW  1E
3016:  MOVLB  1
3018:  MOVWF  x1B
301A:  MOVLB  0
301C:  CALL   08E4
....................          else 
3020:  BRA    3024
....................             {Flanco2 = 0;} 
3022:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
3024:  BSF    F93.0
3026:  BTFSS  F81.0
3028:  BRA    304C
....................       {  if(Flanco1 == 0)  
302A:  BTFSC  34.5
302C:  BRA    304A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
302E:  BSF    34.5
3030:  INCF   1A,F
3032:  MOVLW  1E
3034:  MOVLB  1
3036:  MOVWF  x1B
3038:  MOVLB  0
303A:  CALL   08E4
303E:  MOVLW  0C
3040:  MOVLB  1
3042:  MOVWF  x15
3044:  MOVLB  0
3046:  CALL   0A60
....................          else 
304A:  BRA    304E
....................             {Flanco1 = 0;}    
304C:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
304E:  BSF    F93.1
3050:  BTFSS  F81.1
3052:  BRA    3076
....................       {  if(Flanco3 == 0)  
3054:  BTFSC  34.7
3056:  BRA    3074
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3058:  BSF    34.7
305A:  DECF   1A,F
305C:  MOVLW  1E
305E:  MOVLB  1
3060:  MOVWF  x1B
3062:  MOVLB  0
3064:  CALL   08E4
3068:  MOVLW  0C
306A:  MOVLB  1
306C:  MOVWF  x15
306E:  MOVLB  0
3070:  CALL   0A60
....................          else 
3074:  BRA    3078
....................             {Flanco3 = 0;}     
3076:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3078:  MOVLW  0B
307A:  SUBWF  1A,W
307C:  CLRF   03
307E:  ADDLW  3A
3080:  MOVWF  FE9
3082:  MOVLW  00
3084:  ADDWFC 03,W
3086:  MOVWF  FEA
3088:  BTFSC  FEF.7
308A:  BRA    308E
308C:  BRA    30A2
....................        {clave[unidad-11]=9;} 
308E:  MOVLW  0B
3090:  SUBWF  1A,W
3092:  CLRF   03
3094:  ADDLW  3A
3096:  MOVWF  FE9
3098:  MOVLW  00
309A:  ADDWFC 03,W
309C:  MOVWF  FEA
309E:  MOVLW  09
30A0:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
30A2:  MOVLW  0B
30A4:  SUBWF  1A,W
30A6:  CLRF   03
30A8:  ADDLW  3A
30AA:  MOVWF  FE9
30AC:  MOVLW  00
30AE:  ADDWFC 03,W
30B0:  MOVWF  FEA
30B2:  BTFSC  FEF.7
30B4:  BRA    30CE
30B6:  MOVF   FEF,W
30B8:  SUBLW  09
30BA:  BC    30CE
....................        {clave[unidad-11]=0;} 
30BC:  MOVLW  0B
30BE:  SUBWF  1A,W
30C0:  CLRF   03
30C2:  ADDLW  3A
30C4:  MOVWF  FE9
30C6:  MOVLW  00
30C8:  ADDWFC 03,W
30CA:  MOVWF  FEA
30CC:  CLRF   FEF
....................        if(unidad<11) 
30CE:  MOVF   1A,W
30D0:  SUBLW  0A
30D2:  BNC   30DC
....................        {Menu=5;unidad=11;} 
30D4:  MOVLW  05
30D6:  MOVWF  17
30D8:  MOVLW  0B
30DA:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
30DC:  MOVFF  1A,116
30E0:  MOVLW  04
30E2:  MOVLB  1
30E4:  MOVWF  x17
30E6:  MOVLB  0
30E8:  CALL   09EE
....................        lcd_putc(t[2]); 
30EC:  MOVFF  39,115
30F0:  CALL   0A60
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
30F4:  MOVF   1A,W
30F6:  SUBLW  0E
30F8:  BTFSC  FD8.0
30FA:  BRA    3264
....................        { 
....................             lcd_gotoxy(1,1); 
30FC:  MOVLW  01
30FE:  MOVLB  1
3100:  MOVWF  x16
3102:  MOVWF  x17
3104:  MOVLB  0
3106:  CALL   09EE
....................             printf(lcd_putc,"                    "); 
310A:  MOVLW  BA
310C:  MOVWF  FF6
310E:  MOVLW  05
3110:  MOVWF  FF7
3112:  CALL   0EEC
....................             lcd_gotoxy(1,2); 
3116:  MOVLW  01
3118:  MOVLB  1
311A:  MOVWF  x16
311C:  MOVLW  02
311E:  MOVWF  x17
3120:  MOVLB  0
3122:  CALL   09EE
....................             printf(lcd_putc,"     Contraseña     "); 
3126:  MOVLW  D0
3128:  MOVWF  FF6
312A:  MOVLW  05
312C:  MOVWF  FF7
312E:  CALL   0EEC
....................             lcd_gotoxy(1,3); 
3132:  MOVLW  01
3134:  MOVLB  1
3136:  MOVWF  x16
3138:  MOVLW  03
313A:  MOVWF  x17
313C:  MOVLB  0
313E:  CALL   09EE
....................             printf(lcd_putc,"     Almacenada     "); 
3142:  MOVLW  E6
3144:  MOVWF  FF6
3146:  MOVLW  05
3148:  MOVWF  FF7
314A:  CALL   0EEC
....................             lcd_gotoxy(1,4); 
314E:  MOVLW  01
3150:  MOVLB  1
3152:  MOVWF  x16
3154:  MOVLW  04
3156:  MOVWF  x17
3158:  MOVLB  0
315A:  CALL   09EE
....................             printf(lcd_putc,"                    "); 
315E:  MOVLW  FC
3160:  MOVWF  FF6
3162:  MOVLW  05
3164:  MOVWF  FF7
3166:  CALL   0EEC
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
316A:  CLRF   FA9
316C:  MOVFF  3A,FA8
3170:  BCF    FA6.6
3172:  BCF    FA6.7
3174:  BSF    FA6.2
3176:  MOVF   FF2,W
3178:  MOVWF  00
317A:  BCF    FF2.7
317C:  MOVLB  F
317E:  MOVLW  55
3180:  MOVWF  FA7
3182:  MOVLW  AA
3184:  MOVWF  FA7
3186:  BSF    FA6.1
3188:  BTFSC  FA6.1
318A:  BRA    3188
318C:  BCF    FA6.2
318E:  MOVF   00,W
3190:  IORWF  FF2,F
3192:  MOVLW  14
3194:  MOVLB  1
3196:  MOVWF  x1B
3198:  MOVLB  0
319A:  CALL   08E4
319E:  MOVLW  01
31A0:  MOVWF  FA9
31A2:  MOVFF  3B,FA8
31A6:  BCF    FA6.6
31A8:  BCF    FA6.7
31AA:  BSF    FA6.2
31AC:  MOVF   FF2,W
31AE:  MOVWF  00
31B0:  BCF    FF2.7
31B2:  MOVLB  F
31B4:  MOVLW  55
31B6:  MOVWF  FA7
31B8:  MOVLW  AA
31BA:  MOVWF  FA7
31BC:  BSF    FA6.1
31BE:  BTFSC  FA6.1
31C0:  BRA    31BE
31C2:  BCF    FA6.2
31C4:  MOVF   00,W
31C6:  IORWF  FF2,F
31C8:  MOVLW  14
31CA:  MOVLB  1
31CC:  MOVWF  x1B
31CE:  MOVLB  0
31D0:  CALL   08E4
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
31D4:  MOVLW  02
31D6:  MOVWF  FA9
31D8:  MOVFF  3C,FA8
31DC:  BCF    FA6.6
31DE:  BCF    FA6.7
31E0:  BSF    FA6.2
31E2:  MOVF   FF2,W
31E4:  MOVWF  00
31E6:  BCF    FF2.7
31E8:  MOVLB  F
31EA:  MOVLW  55
31EC:  MOVWF  FA7
31EE:  MOVLW  AA
31F0:  MOVWF  FA7
31F2:  BSF    FA6.1
31F4:  BTFSC  FA6.1
31F6:  BRA    31F4
31F8:  BCF    FA6.2
31FA:  MOVF   00,W
31FC:  IORWF  FF2,F
31FE:  MOVLW  14
3200:  MOVLB  1
3202:  MOVWF  x1B
3204:  MOVLB  0
3206:  CALL   08E4
320A:  MOVLW  03
320C:  MOVWF  FA9
320E:  MOVFF  3D,FA8
3212:  BCF    FA6.6
3214:  BCF    FA6.7
3216:  BSF    FA6.2
3218:  MOVF   FF2,W
321A:  MOVWF  00
321C:  BCF    FF2.7
321E:  MOVLB  F
3220:  MOVLW  55
3222:  MOVWF  FA7
3224:  MOVLW  AA
3226:  MOVWF  FA7
3228:  BSF    FA6.1
322A:  BTFSC  FA6.1
322C:  BRA    322A
322E:  BCF    FA6.2
3230:  MOVF   00,W
3232:  IORWF  FF2,F
3234:  MOVLW  14
3236:  MOVLB  1
3238:  MOVWF  x1B
323A:  MOVLB  0
323C:  CALL   08E4
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3240:  MOVLW  02
3242:  MOVLB  1
3244:  MOVWF  x00
3246:  MOVLW  FA
3248:  MOVWF  x1B
324A:  MOVLB  0
324C:  CALL   08E4
3250:  MOVLB  1
3252:  DECFSZ x00,F
3254:  BRA    3246
3256:  MOVLW  01
3258:  MOVWF  17
325A:  CLRF   36
325C:  MOVLW  02
325E:  MOVWF  1B
3260:  MOVWF  1D
3262:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
3264:  MOVF   1A,W
3266:  SUBLW  0B
3268:  BC    328C
326A:  MOVF   1A,W
326C:  SUBLW  0D
326E:  BNC   328C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3270:  MOVLW  01
3272:  SUBWF  1A,W
3274:  MOVLB  1
3276:  MOVWF  x00
3278:  MOVWF  x16
327A:  MOVLW  04
327C:  MOVWF  x17
327E:  MOVLB  0
3280:  CALL   09EE
....................             lcd_putc(t[1]); 
3284:  MOVFF  38,115
3288:  CALL   0A60
328C:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
328E:  MOVF   17,W
3290:  SUBLW  06
3292:  BTFSS  FD8.2
3294:  BRA    3404
....................    { 
....................    lcd_gotoxy(1,2); 
3296:  MOVLW  01
3298:  MOVWF  x16
329A:  MOVLW  02
329C:  MOVWF  x17
329E:  MOVLB  0
32A0:  CALL   09EE
....................    printf(lcd_putc,"     Media Movil    "); 
32A4:  MOVLW  12
32A6:  MOVWF  FF6
32A8:  MOVLW  06
32AA:  MOVWF  FF7
32AC:  CALL   0EEC
....................    lcd_gotoxy(1,3); 
32B0:  MOVLW  01
32B2:  MOVLB  1
32B4:  MOVWF  x16
32B6:  MOVLW  03
32B8:  MOVWF  x17
32BA:  MOVLB  0
32BC:  CALL   09EE
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
32C0:  MOVLW  28
32C2:  MOVWF  FF6
32C4:  MOVLW  06
32C6:  MOVWF  FF7
32C8:  MOVLW  07
32CA:  MOVLB  1
32CC:  MOVWF  x08
32CE:  MOVLB  0
32D0:  CALL   0F0C
32D4:  MOVFF  2A,100
32D8:  MOVLW  01
32DA:  MOVLB  1
32DC:  MOVWF  x01
32DE:  MOVLB  0
32E0:  CALL   0F60
32E4:  MOVLW  20
32E6:  MOVLB  1
32E8:  MOVWF  x15
32EA:  MOVLB  0
32EC:  CALL   0A60
32F0:  MOVLW  20
32F2:  MOVLB  1
32F4:  MOVWF  x15
32F6:  MOVLB  0
32F8:  CALL   0A60
32FC:  MOVLW  20
32FE:  MOVLB  1
3300:  MOVWF  x15
3302:  MOVLB  0
3304:  CALL   0A60
....................     
....................    if(MediaMovil>12) 
3308:  MOVF   2A,W
330A:  SUBLW  0C
330C:  BC    3312
....................    {MediaMovil=12;} 
330E:  MOVLW  0C
3310:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
3312:  MOVF   2A,F
3314:  BNZ   331A
....................    {MediaMovil=1;} 
3316:  MOVLW  01
3318:  MOVWF  2A
....................     
....................       if(UP)//Si oprime hacia arriba 
331A:  BSF    F93.3
331C:  BTFSS  F81.3
331E:  BRA    3338
....................       {  if(Flanco == 0)  
3320:  BTFSC  34.4
3322:  BRA    3336
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
3324:  MOVLW  01
3326:  ADDWF  2A,F
3328:  BSF    34.4
332A:  MOVLW  1E
332C:  MOVLB  1
332E:  MOVWF  x1B
3330:  MOVLB  0
3332:  CALL   08E4
....................          else 
3336:  BRA    333A
....................             {Flanco = 0;} 
3338:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
333A:  BSF    F93.2
333C:  BTFSS  F81.2
333E:  BRA    3358
....................       {  if(Flanco2 == 0)  
3340:  BTFSC  34.6
3342:  BRA    3356
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
3344:  MOVLW  01
3346:  SUBWF  2A,F
3348:  BSF    34.6
334A:  MOVLW  1E
334C:  MOVLB  1
334E:  MOVWF  x1B
3350:  MOVLB  0
3352:  CALL   08E4
....................          else 
3356:  BRA    335A
....................             {Flanco2 = 0;} 
3358:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
335A:  BSF    F93.0
335C:  BTFSS  F81.0
335E:  BRA    33C2
....................       {  if(Flanco1 == 0)  
3360:  BTFSC  34.5
3362:  BRA    33C0
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3364:  MOVLW  01
3366:  MOVWF  17
3368:  CLRF   36
336A:  MOVLW  02
336C:  MOVWF  1B
336E:  MOVWF  1D
3370:  MOVLW  0B
3372:  MOVWF  1A
3374:  MOVLW  02
3376:  MOVLB  1
3378:  MOVWF  x00
337A:  MOVLW  FA
337C:  MOVWF  x1B
337E:  MOVLB  0
3380:  CALL   08E4
3384:  MOVLB  1
3386:  DECFSZ x00,F
3388:  BRA    337A
338A:  MOVLW  0C
338C:  MOVWF  x15
338E:  MOVLB  0
3390:  CALL   0A60
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
3394:  MOVLW  2A
3396:  MOVWF  FA9
3398:  MOVFF  2A,FA8
339C:  BCF    FA6.6
339E:  BCF    FA6.7
33A0:  BSF    FA6.2
33A2:  MOVF   FF2,W
33A4:  MOVWF  00
33A6:  BCF    FF2.7
33A8:  MOVLB  F
33AA:  MOVLW  55
33AC:  MOVWF  FA7
33AE:  MOVLW  AA
33B0:  MOVWF  FA7
33B2:  BSF    FA6.1
33B4:  BTFSC  FA6.1
33B6:  BRA    33B4
33B8:  BCF    FA6.2
33BA:  MOVF   00,W
33BC:  IORWF  FF2,F
33BE:  MOVLB  0
....................             }} 
....................          else 
33C0:  BRA    33C4
....................             {Flanco1 = 0;}    
33C2:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
33C4:  BSF    F93.1
33C6:  BTFSS  F81.1
33C8:  BRA    3400
....................       {  if(Flanco3 == 0)  
33CA:  BTFSC  34.7
33CC:  BRA    33FE
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
33CE:  MOVLW  01
33D0:  MOVWF  17
33D2:  CLRF   36
33D4:  MOVLW  02
33D6:  MOVWF  1B
33D8:  MOVWF  1D
33DA:  MOVLW  0B
33DC:  MOVWF  1A
33DE:  MOVLW  02
33E0:  MOVLB  1
33E2:  MOVWF  x00
33E4:  MOVLW  FA
33E6:  MOVWF  x1B
33E8:  MOVLB  0
33EA:  CALL   08E4
33EE:  MOVLB  1
33F0:  DECFSZ x00,F
33F2:  BRA    33E4
33F4:  MOVLW  0C
33F6:  MOVWF  x15
33F8:  MOVLB  0
33FA:  CALL   0A60
....................          else 
33FE:  BRA    3402
....................             {Flanco3 = 0;}   
3400:  BCF    34.7
3402:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
3404:  MOVF   17,W
3406:  SUBLW  07
3408:  BTFSS  FD8.2
340A:  BRA    37FA
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
340C:  MOVLW  01
340E:  MOVWF  x16
3410:  MOVWF  x17
3412:  MOVLB  0
3414:  CALL   09EE
....................    printf(lcd_putc,"  Zero Point Config "); 
3418:  MOVLW  38
341A:  MOVWF  FF6
341C:  MOVLW  06
341E:  MOVWF  FF7
3420:  CALL   0EEC
....................    lcd_gotoxy(1,2); 
3424:  MOVLW  01
3426:  MOVLB  1
3428:  MOVWF  x16
342A:  MOVLW  02
342C:  MOVWF  x17
342E:  MOVLB  0
3430:  CALL   09EE
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
3434:  MOVLW  4E
3436:  MOVWF  FF6
3438:  MOVLW  06
343A:  MOVWF  FF7
343C:  MOVLW  08
343E:  MOVLB  1
3440:  MOVWF  x08
3442:  MOVLB  0
3444:  CALL   0F0C
3448:  MOVLW  01
344A:  MOVWF  FE9
344C:  MOVFF  8E,10B
3450:  MOVFF  8D,10A
3454:  MOVFF  8C,109
3458:  MOVFF  8B,108
345C:  MOVLB  1
345E:  MOVWF  x0C
3460:  MOVLB  0
3462:  CALL   1386
3466:  MOVLW  5B
3468:  MOVWF  FF6
346A:  MOVLW  06
346C:  MOVWF  FF7
346E:  MOVLW  08
3470:  MOVLB  1
3472:  MOVWF  x08
3474:  MOVLB  0
3476:  CALL   0F0C
....................    lcd_gotoxy(1,3); 
347A:  MOVLW  01
347C:  MOVLB  1
347E:  MOVWF  x16
3480:  MOVLW  03
3482:  MOVWF  x17
3484:  MOVLB  0
3486:  CALL   09EE
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
348A:  MOVLB  1
348C:  CLRF   x04
348E:  MOVLB  0
3490:  CALL   15F2
3494:  MOVFF  00,100
3498:  MOVFF  01,101
349C:  MOVFF  02,102
34A0:  MOVFF  03,103
34A4:  MOVLW  5A
34A6:  MOVLB  1
34A8:  MOVWF  x15
34AA:  MOVLB  0
34AC:  CALL   0A60
34B0:  MOVLW  46
34B2:  MOVLB  1
34B4:  MOVWF  x15
34B6:  MOVLB  0
34B8:  CALL   0A60
34BC:  MOVLW  3D
34BE:  MOVLB  1
34C0:  MOVWF  x15
34C2:  MOVLB  0
34C4:  CALL   0A60
34C8:  MOVLW  01
34CA:  MOVWF  FE9
34CC:  MOVFF  4D,10B
34D0:  MOVFF  4C,10A
34D4:  MOVFF  4B,109
34D8:  MOVFF  4A,108
34DC:  MOVLB  1
34DE:  CLRF   x0C
34E0:  MOVLB  0
34E2:  CALL   1386
34E6:  MOVLW  6C
34E8:  MOVWF  FF6
34EA:  MOVLW  06
34EC:  MOVWF  FF7
34EE:  MOVLW  05
34F0:  MOVLB  1
34F2:  MOVWF  x08
34F4:  MOVLB  0
34F6:  CALL   0F0C
34FA:  MOVLW  01
34FC:  MOVWF  FE9
34FE:  MOVFF  103,10B
3502:  MOVFF  102,10A
3506:  MOVFF  101,109
350A:  MOVFF  100,108
350E:  MOVLB  1
3510:  CLRF   x0C
3512:  MOVLB  0
3514:  CALL   1386
....................    lcd_gotoxy(1,4); 
3518:  MOVLW  01
351A:  MOVLB  1
351C:  MOVWF  x16
351E:  MOVLW  04
3520:  MOVWF  x17
3522:  MOVLB  0
3524:  CALL   09EE
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
3528:  MOVLW  78
352A:  MOVWF  FF6
352C:  MOVLW  06
352E:  MOVWF  FF7
3530:  MOVLW  0C
3532:  MOVLB  1
3534:  MOVWF  x08
3536:  MOVLB  0
3538:  CALL   0F0C
353C:  MOVLW  01
353E:  MOVWF  FE9
3540:  MOVFF  BE,10B
3544:  MOVFF  BD,10A
3548:  MOVFF  BC,109
354C:  MOVFF  BB,108
3550:  MOVLB  1
3552:  CLRF   x0C
3554:  MOVLB  0
3556:  CALL   1386
....................      
....................       if(RIGHT)// Si oprime derecha 
355A:  BSF    F93.0
355C:  BTFSS  F81.0
355E:  BRA    37B8
....................       {  if(Flanco1 == 0)  
3560:  BTFSC  34.5
3562:  BRA    37B6
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3564:  MOVLW  01
3566:  MOVWF  17
3568:  CLRF   36
356A:  MOVLW  02
356C:  MOVWF  1B
356E:  MOVWF  1D
3570:  MOVLW  0B
3572:  MOVWF  1A
3574:  MOVLW  02
3576:  MOVLB  1
3578:  MOVWF  x00
357A:  MOVLW  FA
357C:  MOVWF  x1B
357E:  MOVLB  0
3580:  CALL   08E4
3584:  MOVLB  1
3586:  DECFSZ x00,F
3588:  BRA    357A
358A:  MOVLW  0C
358C:  MOVWF  x15
358E:  MOVLB  0
3590:  CALL   0A60
....................             Diferencia=zero_fabrica-sensores(0); 
3594:  MOVLB  1
3596:  CLRF   x04
3598:  MOVLB  0
359A:  CALL   15F2
359E:  MOVFF  FEA,101
35A2:  MOVFF  FE9,100
35A6:  BSF    FD8.1
35A8:  MOVFF  4D,105
35AC:  MOVFF  4C,104
35B0:  MOVFF  4B,103
35B4:  MOVFF  4A,102
35B8:  MOVFF  03,109
35BC:  MOVFF  02,108
35C0:  MOVFF  01,107
35C4:  MOVFF  00,106
35C8:  CALL   0C60
35CC:  MOVFF  101,FEA
35D0:  MOVFF  100,FE9
35D4:  MOVFF  03,BE
35D8:  MOVFF  02,BD
35DC:  MOVFF  01,BC
35E0:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
35E4:  MOVLB  1
35E6:  CLRF   x02
35E8:  CLRF   x01
35EA:  CLRF   x00
35EC:  MOVLB  0
35EE:  CLRF   xFF
35F0:  MOVFF  BE,106
35F4:  MOVFF  BD,105
35F8:  MOVFF  BC,104
35FC:  MOVFF  BB,103
3600:  CALL   1538
3604:  BC    3608
3606:  BNZ   3636
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
3608:  MOVLW  0A
360A:  MOVWF  2B
360C:  MOVLW  32
360E:  MOVWF  FA9
3610:  MOVFF  2B,FA8
3614:  BCF    FA6.6
3616:  BCF    FA6.7
3618:  BSF    FA6.2
361A:  MOVF   FF2,W
361C:  MOVWF  00
361E:  BCF    FF2.7
3620:  MOVLB  F
3622:  MOVLW  55
3624:  MOVWF  FA7
3626:  MOVLW  AA
3628:  MOVWF  FA7
362A:  BSF    FA6.1
362C:  BTFSC  FA6.1
362E:  BRA    362C
3630:  BCF    FA6.2
3632:  MOVF   00,W
3634:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
3636:  MOVFF  BE,102
363A:  MOVFF  BD,101
363E:  MOVFF  BC,100
3642:  MOVFF  BB,FF
3646:  MOVLB  1
3648:  CLRF   x06
364A:  CLRF   x05
364C:  CLRF   x04
364E:  CLRF   x03
3650:  MOVLB  0
3652:  CALL   1538
3656:  BNC   3688
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
3658:  MOVLW  14
365A:  MOVWF  2B
365C:  MOVLW  32
365E:  MOVWF  FA9
3660:  MOVFF  2B,FA8
3664:  BCF    FA6.6
3666:  BCF    FA6.7
3668:  BSF    FA6.2
366A:  MOVF   FF2,W
366C:  MOVWF  00
366E:  BCF    FF2.7
3670:  MOVLB  F
3672:  MOVLW  55
3674:  MOVWF  FA7
3676:  MOVLW  AA
3678:  MOVWF  FA7
367A:  BSF    FA6.1
367C:  BTFSC  FA6.1
367E:  BRA    367C
3680:  BCF    FA6.2
3682:  MOVF   00,W
3684:  IORWF  FF2,F
3686:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
3688:  MOVFF  BB,00
368C:  MOVFF  BC,01
3690:  MOVFF  BD,02
3694:  MOVFF  BE,03
3698:  BCF    01.7
369A:  MOVFF  BE,BE
369E:  MOVFF  BD,BD
36A2:  MOVFF  01,BC
36A6:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
36AA:  MOVFF  BE,B6
36AE:  MOVFF  BD,B5
36B2:  MOVFF  BC,B4
36B6:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
36BA:  MOVFF  B6,102
36BE:  MOVFF  B5,101
36C2:  MOVFF  B4,100
36C6:  MOVFF  B3,FF
36CA:  CALL   15B6
36CE:  MOVFF  01,24
....................             Temporal1=Temporal1-Entero1; 
36D2:  MOVLB  1
36D4:  CLRF   x0A
36D6:  MOVFF  24,109
36DA:  MOVLB  0
36DC:  CALL   0ACC
36E0:  BSF    FD8.1
36E2:  MOVFF  B6,105
36E6:  MOVFF  B5,104
36EA:  MOVFF  B4,103
36EE:  MOVFF  B3,102
36F2:  MOVFF  03,109
36F6:  MOVFF  02,108
36FA:  MOVFF  01,107
36FE:  MOVFF  00,106
3702:  CALL   0C60
3706:  MOVFF  03,B6
370A:  MOVFF  02,B5
370E:  MOVFF  01,B4
3712:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
3716:  MOVFF  B6,118
371A:  MOVFF  B5,117
371E:  MOVFF  B4,116
3722:  MOVFF  B3,115
3726:  MOVLB  1
3728:  CLRF   x1C
372A:  CLRF   x1B
372C:  MOVLW  48
372E:  MOVWF  x1A
3730:  MOVLW  85
3732:  MOVWF  x19
3734:  MOVLB  0
3736:  CALL   11CC
373A:  MOVFF  03,BA
373E:  MOVFF  02,B9
3742:  MOVFF  01,B8
3746:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
374A:  MOVFF  BA,102
374E:  MOVFF  B9,101
3752:  MOVFF  B8,100
3756:  MOVFF  B7,FF
375A:  CALL   15B6
375E:  MOVFF  01,25
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
3762:  MOVLW  3C
3764:  MOVWF  FA9
3766:  MOVFF  24,FA8
376A:  BCF    FA6.6
376C:  BCF    FA6.7
376E:  BSF    FA6.2
3770:  MOVF   FF2,W
3772:  MOVWF  00
3774:  BCF    FF2.7
3776:  MOVLB  F
3778:  MOVLW  55
377A:  MOVWF  FA7
377C:  MOVLW  AA
377E:  MOVWF  FA7
3780:  BSF    FA6.1
3782:  BTFSC  FA6.1
3784:  BRA    3782
3786:  BCF    FA6.2
3788:  MOVF   00,W
378A:  IORWF  FF2,F
378C:  MOVLW  3D
378E:  MOVWF  FA9
3790:  MOVFF  25,FA8
3794:  BCF    FA6.6
3796:  BCF    FA6.7
3798:  BSF    FA6.2
379A:  MOVF   FF2,W
379C:  MOVWF  00
379E:  BCF    FF2.7
37A0:  MOVLW  55
37A2:  MOVWF  FA7
37A4:  MOVLW  AA
37A6:  MOVWF  FA7
37A8:  BSF    FA6.1
37AA:  BTFSC  FA6.1
37AC:  BRA    37AA
37AE:  BCF    FA6.2
37B0:  MOVF   00,W
37B2:  IORWF  FF2,F
37B4:  MOVLB  0
....................             }} 
....................          else 
37B6:  BRA    37BA
....................             {Flanco1 = 0;}    
37B8:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
37BA:  BSF    F93.1
37BC:  BTFSS  F81.1
37BE:  BRA    37F6
....................       {  if(Flanco3 == 0)  
37C0:  BTFSC  34.7
37C2:  BRA    37F4
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
37C4:  MOVLW  01
37C6:  MOVWF  17
37C8:  CLRF   36
37CA:  MOVLW  02
37CC:  MOVWF  1B
37CE:  MOVWF  1D
37D0:  MOVLW  0B
37D2:  MOVWF  1A
37D4:  MOVLW  02
37D6:  MOVLB  1
37D8:  MOVWF  x00
37DA:  MOVLW  FA
37DC:  MOVWF  x1B
37DE:  MOVLB  0
37E0:  CALL   08E4
37E4:  MOVLB  1
37E6:  DECFSZ x00,F
37E8:  BRA    37DA
37EA:  MOVLW  0C
37EC:  MOVWF  x15
37EE:  MOVLB  0
37F0:  CALL   0A60
....................          else 
37F4:  BRA    37F8
....................             {Flanco3 = 0;}   
37F6:  BCF    34.7
37F8:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
37FA:  MOVF   17,W
37FC:  SUBLW  08
37FE:  BTFSS  FD8.2
3800:  BRA    3D52
....................    { 
....................    lcd_gotoxy(1,1); 
3802:  MOVLW  01
3804:  MOVWF  x16
3806:  MOVWF  x17
3808:  MOVLB  0
380A:  CALL   09EE
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
380E:  MOVLB  1
3810:  CLRF   x04
3812:  MOVLB  0
3814:  CALL   15F2
3818:  MOVFF  00,100
381C:  MOVFF  01,101
3820:  MOVFF  02,102
3824:  MOVFF  03,103
3828:  MOVLW  8A
382A:  MOVWF  FF6
382C:  MOVLW  06
382E:  MOVWF  FF7
3830:  MOVLW  0A
3832:  MOVLB  1
3834:  MOVWF  x08
3836:  MOVLB  0
3838:  CALL   0F0C
383C:  MOVLW  01
383E:  MOVWF  FE9
3840:  MOVFF  103,10B
3844:  MOVFF  102,10A
3848:  MOVFF  101,109
384C:  MOVFF  100,108
3850:  MOVLB  1
3852:  CLRF   x0C
3854:  MOVLB  0
3856:  CALL   1386
385A:  MOVLW  20
385C:  MOVLB  1
385E:  MOVWF  x15
3860:  MOVLB  0
3862:  CALL   0A60
3866:  MOVLW  20
3868:  MOVLB  1
386A:  MOVWF  x15
386C:  MOVLB  0
386E:  CALL   0A60
....................    lcd_gotoxy(1,2); 
3872:  MOVLW  01
3874:  MOVLB  1
3876:  MOVWF  x16
3878:  MOVLW  02
387A:  MOVWF  x17
387C:  MOVLB  0
387E:  CALL   09EE
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
3882:  MOVLB  1
3884:  CLRF   x0A
3886:  MOVFF  29,109
388A:  MOVLB  0
388C:  CALL   0ACC
3890:  MOVFF  00,100
3894:  MOVFF  01,101
3898:  MOVFF  02,102
389C:  MOVFF  03,103
38A0:  MOVFF  03,107
38A4:  MOVFF  02,106
38A8:  MOVFF  01,105
38AC:  MOVFF  00,104
38B0:  MOVLB  1
38B2:  CLRF   x0B
38B4:  CLRF   x0A
38B6:  MOVLW  7F
38B8:  MOVWF  x09
38BA:  MOVLW  86
38BC:  MOVWF  x08
38BE:  MOVLB  0
38C0:  CALL   0B02
38C4:  MOVLB  1
38C6:  CLRF   x18
38C8:  CLRF   x17
38CA:  MOVLW  48
38CC:  MOVWF  x16
38CE:  MOVLW  85
38D0:  MOVWF  x15
38D2:  MOVFF  03,11C
38D6:  MOVFF  02,11B
38DA:  MOVFF  01,11A
38DE:  MOVFF  00,119
38E2:  MOVLB  0
38E4:  CALL   11CC
38E8:  MOVFF  00,100
38EC:  MOVFF  01,101
38F0:  MOVFF  02,102
38F4:  MOVFF  03,103
38F8:  MOVLW  01
38FA:  MOVLB  1
38FC:  MOVWF  x04
38FE:  MOVLB  0
3900:  CALL   15F2
3904:  MOVFF  00,104
3908:  MOVFF  01,105
390C:  MOVFF  02,106
3910:  MOVFF  03,107
3914:  MOVLW  9C
3916:  MOVWF  FF6
3918:  MOVLW  06
391A:  MOVWF  FF7
391C:  MOVLW  05
391E:  MOVLB  1
3920:  MOVWF  x08
3922:  MOVLB  0
3924:  CALL   0F0C
3928:  MOVLW  01
392A:  MOVWF  FE9
392C:  MOVFF  103,10B
3930:  MOVFF  102,10A
3934:  MOVFF  101,109
3938:  MOVFF  100,108
393C:  MOVLB  1
393E:  CLRF   x0C
3940:  MOVLB  0
3942:  CALL   1386
3946:  MOVLW  25
3948:  MOVLB  1
394A:  MOVWF  x15
394C:  MOVLB  0
394E:  CALL   0A60
3952:  MOVLW  A8
3954:  MOVWF  FF6
3956:  MOVLW  06
3958:  MOVWF  FF7
395A:  MOVLW  04
395C:  MOVLB  1
395E:  MOVWF  x08
3960:  MOVLB  0
3962:  CALL   0F0C
3966:  MOVLW  01
3968:  MOVWF  FE9
396A:  MOVFF  107,10B
396E:  MOVFF  106,10A
3972:  MOVFF  105,109
3976:  MOVFF  104,108
397A:  MOVLB  1
397C:  CLRF   x0C
397E:  MOVLB  0
3980:  CALL   1386
3984:  MOVLW  20
3986:  MOVLB  1
3988:  MOVWF  x15
398A:  MOVLB  0
398C:  CALL   0A60
....................    lcd_gotoxy(1,3); 
3990:  MOVLW  01
3992:  MOVLB  1
3994:  MOVWF  x16
3996:  MOVLW  03
3998:  MOVWF  x17
399A:  MOVLB  0
399C:  CALL   09EE
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
39A0:  MOVLW  02
39A2:  MOVLB  1
39A4:  MOVWF  x04
39A6:  MOVLB  0
39A8:  CALL   15F2
39AC:  MOVFF  00,100
39B0:  MOVFF  01,101
39B4:  MOVFF  02,102
39B8:  MOVFF  03,103
39BC:  MOVFF  03,107
39C0:  MOVFF  02,106
39C4:  MOVFF  01,105
39C8:  MOVFF  00,104
39CC:  MOVLB  1
39CE:  CLRF   x0B
39D0:  MOVLW  C0
39D2:  MOVWF  x0A
39D4:  MOVLW  7F
39D6:  MOVWF  x09
39D8:  MOVLW  88
39DA:  MOVWF  x08
39DC:  MOVLB  0
39DE:  CALL   0B02
39E2:  MOVLB  1
39E4:  CLRF   x18
39E6:  CLRF   x17
39E8:  MOVLW  48
39EA:  MOVWF  x16
39EC:  MOVLW  85
39EE:  MOVWF  x15
39F0:  MOVFF  03,11C
39F4:  MOVFF  02,11B
39F8:  MOVFF  01,11A
39FC:  MOVFF  00,119
3A00:  MOVLB  0
3A02:  CALL   11CC
3A06:  MOVFF  00,100
3A0A:  MOVFF  01,101
3A0E:  MOVFF  02,102
3A12:  MOVFF  03,103
3A16:  MOVLW  B4
3A18:  MOVWF  FF6
3A1A:  MOVLW  06
3A1C:  MOVWF  FF7
3A1E:  MOVLW  04
3A20:  MOVLB  1
3A22:  MOVWF  x08
3A24:  MOVLB  0
3A26:  CALL   0F0C
3A2A:  MOVLW  01
3A2C:  MOVWF  FE9
3A2E:  MOVFF  8E,10B
3A32:  MOVFF  8D,10A
3A36:  MOVFF  8C,109
3A3A:  MOVFF  8B,108
3A3E:  MOVLB  1
3A40:  MOVWF  x0C
3A42:  MOVLB  0
3A44:  CALL   1386
3A48:  MOVLW  BD
3A4A:  MOVWF  FF6
3A4C:  MOVLW  06
3A4E:  MOVWF  FF7
3A50:  MOVLW  0A
3A52:  MOVLB  1
3A54:  MOVWF  x08
3A56:  MOVLB  0
3A58:  CALL   0F0C
3A5C:  MOVLW  01
3A5E:  MOVWF  FE9
3A60:  MOVFF  103,10B
3A64:  MOVFF  102,10A
3A68:  MOVFF  101,109
3A6C:  MOVFF  100,108
3A70:  MOVLB  1
3A72:  CLRF   x0C
3A74:  MOVLB  0
3A76:  CALL   1386
....................    lcd_gotoxy(1,4); 
3A7A:  MOVLW  01
3A7C:  MOVLB  1
3A7E:  MOVWF  x16
3A80:  MOVLW  04
3A82:  MOVWF  x17
3A84:  MOVLB  0
3A86:  CALL   09EE
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
3A8A:  MOVLW  CE
3A8C:  MOVWF  FF6
3A8E:  MOVLW  06
3A90:  MOVWF  FF7
3A92:  MOVLW  09
3A94:  MOVLB  1
3A96:  MOVWF  x08
3A98:  MOVLB  0
3A9A:  CALL   0F0C
3A9E:  MOVLW  89
3AA0:  MOVWF  FE9
3AA2:  MOVFF  C2,10B
3AA6:  MOVFF  C1,10A
3AAA:  MOVFF  C0,109
3AAE:  MOVFF  BF,108
3AB2:  MOVLW  02
3AB4:  MOVLB  1
3AB6:  MOVWF  x0C
3AB8:  MOVLB  0
3ABA:  CALL   1386
3ABE:  MOVLW  20
3AC0:  MOVLB  1
3AC2:  MOVWF  x15
3AC4:  MOVLB  0
3AC6:  CALL   0A60
....................        
....................       if(UP)//Si oprime hacia arriba 
3ACA:  BSF    F93.3
3ACC:  BTFSS  F81.3
3ACE:  BRA    3B44
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
3AD0:  BCF    FD8.1
3AD2:  MOVFF  C2,105
3AD6:  MOVFF  C1,104
3ADA:  MOVFF  C0,103
3ADE:  MOVFF  BF,102
3AE2:  MOVLW  0A
3AE4:  MOVLB  1
3AE6:  MOVWF  x09
3AE8:  MOVLW  D7
3AEA:  MOVWF  x08
3AEC:  MOVLW  23
3AEE:  MOVWF  x07
3AF0:  MOVLW  78
3AF2:  MOVWF  x06
3AF4:  MOVLB  0
3AF6:  CALL   0C60
3AFA:  MOVFF  03,C2
3AFE:  MOVFF  02,C1
3B02:  MOVFF  01,C0
3B06:  MOVFF  00,BF
3B0A:  MOVLW  32
3B0C:  MOVLB  1
3B0E:  MOVWF  x1B
3B10:  MOVLB  0
3B12:  CALL   08E4
....................          if(Ajuste1>30.0) 
3B16:  MOVLB  1
3B18:  CLRF   x02
3B1A:  CLRF   x01
3B1C:  MOVLW  70
3B1E:  MOVWF  x00
3B20:  MOVLW  83
3B22:  MOVLB  0
3B24:  MOVWF  xFF
3B26:  MOVFF  C2,106
3B2A:  MOVFF  C1,105
3B2E:  MOVFF  C0,104
3B32:  MOVFF  BF,103
3B36:  CALL   1538
3B3A:  BNC   3B44
....................          {Ajuste1=0.0;} 
3B3C:  CLRF   xC2
3B3E:  CLRF   xC1
3B40:  CLRF   xC0
3B42:  CLRF   xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3B44:  BSF    F93.2
3B46:  BTFSS  F81.2
3B48:  BRA    3BBA
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
3B4A:  BSF    FD8.1
3B4C:  MOVFF  C2,105
3B50:  MOVFF  C1,104
3B54:  MOVFF  C0,103
3B58:  MOVFF  BF,102
3B5C:  MOVLW  0A
3B5E:  MOVLB  1
3B60:  MOVWF  x09
3B62:  MOVLW  D7
3B64:  MOVWF  x08
3B66:  MOVLW  23
3B68:  MOVWF  x07
3B6A:  MOVLW  78
3B6C:  MOVWF  x06
3B6E:  MOVLB  0
3B70:  CALL   0C60
3B74:  MOVFF  03,C2
3B78:  MOVFF  02,C1
3B7C:  MOVFF  01,C0
3B80:  MOVFF  00,BF
3B84:  MOVLW  32
3B86:  MOVLB  1
3B88:  MOVWF  x1B
3B8A:  MOVLB  0
3B8C:  CALL   08E4
....................          if(Ajuste1<0.0) 
3B90:  MOVFF  C2,102
3B94:  MOVFF  C1,101
3B98:  MOVFF  C0,100
3B9C:  MOVFF  BF,FF
3BA0:  MOVLB  1
3BA2:  CLRF   x06
3BA4:  CLRF   x05
3BA6:  CLRF   x04
3BA8:  CLRF   x03
3BAA:  MOVLB  0
3BAC:  CALL   1538
3BB0:  BNC   3BBA
....................          {Ajuste1=0.0;} 
3BB2:  CLRF   xC2
3BB4:  CLRF   xC1
3BB6:  CLRF   xC0
3BB8:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
3BBA:  BSF    F93.0
3BBC:  BTFSS  F81.0
3BBE:  BRA    3D10
....................       {  if(Flanco1 == 0)  
3BC0:  BTFSC  34.5
3BC2:  BRA    3D0E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3BC4:  MOVLW  01
3BC6:  MOVWF  17
3BC8:  CLRF   36
3BCA:  MOVLW  02
3BCC:  MOVWF  1B
3BCE:  MOVWF  1D
3BD0:  MOVLW  0B
3BD2:  MOVWF  1A
3BD4:  MOVLW  1E
3BD6:  MOVLB  1
3BD8:  MOVWF  x1B
3BDA:  MOVLB  0
3BDC:  CALL   08E4
3BE0:  MOVLW  0C
3BE2:  MOVLB  1
3BE4:  MOVWF  x15
3BE6:  MOVLB  0
3BE8:  CALL   0A60
....................             Temporal=Ajuste1; 
3BEC:  MOVFF  C2,AA
3BF0:  MOVFF  C1,A9
3BF4:  MOVFF  C0,A8
3BF8:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
3BFC:  MOVFF  C2,102
3C00:  MOVFF  C1,101
3C04:  MOVFF  C0,100
3C08:  MOVFF  BF,FF
3C0C:  CALL   15B6
3C10:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
3C14:  MOVLB  1
3C16:  CLRF   x0A
3C18:  MOVFF  21,109
3C1C:  MOVLB  0
3C1E:  CALL   0ACC
3C22:  BSF    FD8.1
3C24:  MOVFF  AA,105
3C28:  MOVFF  A9,104
3C2C:  MOVFF  A8,103
3C30:  MOVFF  A7,102
3C34:  MOVFF  03,109
3C38:  MOVFF  02,108
3C3C:  MOVFF  01,107
3C40:  MOVFF  00,106
3C44:  CALL   0C60
3C48:  MOVFF  03,AA
3C4C:  MOVFF  02,A9
3C50:  MOVFF  01,A8
3C54:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
3C58:  MOVFF  AA,118
3C5C:  MOVFF  A9,117
3C60:  MOVFF  A8,116
3C64:  MOVFF  A7,115
3C68:  MOVLB  1
3C6A:  CLRF   x1C
3C6C:  CLRF   x1B
3C6E:  MOVLW  48
3C70:  MOVWF  x1A
3C72:  MOVLW  85
3C74:  MOVWF  x19
3C76:  MOVLB  0
3C78:  CALL   11CC
3C7C:  MOVFF  03,AE
3C80:  MOVFF  02,AD
3C84:  MOVFF  01,AC
3C88:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
3C8C:  MOVFF  AE,102
3C90:  MOVFF  AD,101
3C94:  MOVFF  AC,100
3C98:  MOVFF  AB,FF
3C9C:  CALL   15B6
3CA0:  MOVFF  01,22
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
3CA4:  MOVLW  19
3CA6:  MOVWF  FA9
3CA8:  MOVFF  21,FA8
3CAC:  BCF    FA6.6
3CAE:  BCF    FA6.7
3CB0:  BSF    FA6.2
3CB2:  MOVF   FF2,W
3CB4:  MOVWF  00
3CB6:  BCF    FF2.7
3CB8:  MOVLB  F
3CBA:  MOVLW  55
3CBC:  MOVWF  FA7
3CBE:  MOVLW  AA
3CC0:  MOVWF  FA7
3CC2:  BSF    FA6.1
3CC4:  BTFSC  FA6.1
3CC6:  BRA    3CC4
3CC8:  BCF    FA6.2
3CCA:  MOVF   00,W
3CCC:  IORWF  FF2,F
3CCE:  MOVLW  1A
3CD0:  MOVWF  FA9
3CD2:  MOVFF  22,FA8
3CD6:  BCF    FA6.6
3CD8:  BCF    FA6.7
3CDA:  BSF    FA6.2
3CDC:  MOVF   FF2,W
3CDE:  MOVWF  00
3CE0:  BCF    FF2.7
3CE2:  MOVLW  55
3CE4:  MOVWF  FA7
3CE6:  MOVLW  AA
3CE8:  MOVWF  FA7
3CEA:  BSF    FA6.1
3CEC:  BTFSC  FA6.1
3CEE:  BRA    3CEC
3CF0:  BCF    FA6.2
3CF2:  MOVF   00,W
3CF4:  IORWF  FF2,F
....................             delay_ms(1000); 
3CF6:  MOVLW  04
3CF8:  MOVLB  1
3CFA:  MOVWF  x00
3CFC:  MOVLW  FA
3CFE:  MOVWF  x1B
3D00:  MOVLB  0
3D02:  CALL   08E4
3D06:  MOVLB  1
3D08:  DECFSZ x00,F
3D0A:  BRA    3CFC
3D0C:  MOVLB  0
....................             }} 
....................          else 
3D0E:  BRA    3D12
....................             {Flanco1 = 0;}    
3D10:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3D12:  BSF    F93.1
3D14:  BTFSS  F81.1
3D16:  BRA    3D4E
....................       {  if(Flanco3 == 0)  
3D18:  BTFSC  34.7
3D1A:  BRA    3D4C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3D1C:  MOVLW  01
3D1E:  MOVWF  17
3D20:  CLRF   36
3D22:  MOVLW  02
3D24:  MOVWF  1B
3D26:  MOVWF  1D
3D28:  MOVLW  0B
3D2A:  MOVWF  1A
3D2C:  MOVLW  02
3D2E:  MOVLB  1
3D30:  MOVWF  x00
3D32:  MOVLW  FA
3D34:  MOVWF  x1B
3D36:  MOVLB  0
3D38:  CALL   08E4
3D3C:  MOVLB  1
3D3E:  DECFSZ x00,F
3D40:  BRA    3D32
3D42:  MOVLW  0C
3D44:  MOVWF  x15
3D46:  MOVLB  0
3D48:  CALL   0A60
....................          else 
3D4C:  BRA    3D50
....................             {Flanco3 = 0;}   
3D4E:  BCF    34.7
3D50:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
3D52:  MOVF   17,W
3D54:  SUBLW  09
3D56:  BTFSS  FD8.2
3D58:  BRA    43A0
....................    { 
....................    lcd_gotoxy(1,1); 
3D5A:  MOVLW  01
3D5C:  MOVWF  x16
3D5E:  MOVWF  x17
3D60:  MOVLB  0
3D62:  CALL   09EE
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
3D66:  MOVLB  1
3D68:  CLRF   x0A
3D6A:  MOVFF  29,109
3D6E:  MOVLB  0
3D70:  CALL   0ACC
3D74:  MOVFF  00,100
3D78:  MOVFF  01,101
3D7C:  MOVFF  02,102
3D80:  MOVFF  03,103
3D84:  MOVFF  03,107
3D88:  MOVFF  02,106
3D8C:  MOVFF  01,105
3D90:  MOVFF  00,104
3D94:  MOVLB  1
3D96:  CLRF   x0B
3D98:  CLRF   x0A
3D9A:  MOVLW  7F
3D9C:  MOVWF  x09
3D9E:  MOVLW  86
3DA0:  MOVWF  x08
3DA2:  MOVLB  0
3DA4:  CALL   0B02
3DA8:  MOVLB  1
3DAA:  CLRF   x18
3DAC:  CLRF   x17
3DAE:  MOVLW  48
3DB0:  MOVWF  x16
3DB2:  MOVLW  85
3DB4:  MOVWF  x15
3DB6:  MOVFF  03,11C
3DBA:  MOVFF  02,11B
3DBE:  MOVFF  01,11A
3DC2:  MOVFF  00,119
3DC6:  MOVLB  0
3DC8:  CALL   11CC
3DCC:  MOVFF  00,100
3DD0:  MOVFF  01,101
3DD4:  MOVFF  02,102
3DD8:  MOVFF  03,103
3DDC:  MOVLW  DE
3DDE:  MOVWF  FF6
3DE0:  MOVLW  06
3DE2:  MOVWF  FF7
3DE4:  MOVLW  0D
3DE6:  MOVLB  1
3DE8:  MOVWF  x08
3DEA:  MOVLB  0
3DEC:  CALL   0F0C
3DF0:  MOVLW  01
3DF2:  MOVWF  FE9
3DF4:  MOVFF  103,10B
3DF8:  MOVFF  102,10A
3DFC:  MOVFF  101,109
3E00:  MOVFF  100,108
3E04:  MOVLB  1
3E06:  CLRF   x0C
3E08:  MOVLB  0
3E0A:  CALL   1386
3E0E:  MOVLW  25
3E10:  MOVLB  1
3E12:  MOVWF  x15
3E14:  MOVLB  0
3E16:  CALL   0A60
3E1A:  MOVLW  20
3E1C:  MOVLB  1
3E1E:  MOVWF  x15
3E20:  MOVLB  0
3E22:  CALL   0A60
....................  
....................    lcd_gotoxy(1,4); 
3E26:  MOVLW  01
3E28:  MOVLB  1
3E2A:  MOVWF  x16
3E2C:  MOVLW  04
3E2E:  MOVWF  x17
3E30:  MOVLB  0
3E32:  CALL   09EE
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
3E36:  MOVLW  02
3E38:  MOVLB  1
3E3A:  MOVWF  x04
3E3C:  MOVLB  0
3E3E:  CALL   15F2
3E42:  MOVFF  00,100
3E46:  MOVFF  01,101
3E4A:  MOVFF  02,102
3E4E:  MOVFF  03,103
3E52:  MOVFF  03,107
3E56:  MOVFF  02,106
3E5A:  MOVFF  01,105
3E5E:  MOVFF  00,104
3E62:  MOVLB  1
3E64:  CLRF   x0B
3E66:  MOVLW  C0
3E68:  MOVWF  x0A
3E6A:  MOVLW  7F
3E6C:  MOVWF  x09
3E6E:  MOVLW  88
3E70:  MOVWF  x08
3E72:  MOVLB  0
3E74:  CALL   0B02
3E78:  MOVLB  1
3E7A:  CLRF   x18
3E7C:  CLRF   x17
3E7E:  MOVLW  48
3E80:  MOVWF  x16
3E82:  MOVLW  85
3E84:  MOVWF  x15
3E86:  MOVFF  03,11C
3E8A:  MOVFF  02,11B
3E8E:  MOVFF  01,11A
3E92:  MOVFF  00,119
3E96:  MOVLB  0
3E98:  CALL   11CC
3E9C:  MOVFF  00,100
3EA0:  MOVFF  01,101
3EA4:  MOVFF  02,102
3EA8:  MOVFF  03,103
3EAC:  MOVLW  F4
3EAE:  MOVWF  FF6
3EB0:  MOVLW  06
3EB2:  MOVWF  FF7
3EB4:  MOVLW  04
3EB6:  MOVLB  1
3EB8:  MOVWF  x08
3EBA:  MOVLB  0
3EBC:  CALL   0F0C
3EC0:  MOVLW  01
3EC2:  MOVWF  FE9
3EC4:  MOVFF  8E,10B
3EC8:  MOVFF  8D,10A
3ECC:  MOVFF  8C,109
3ED0:  MOVFF  8B,108
3ED4:  MOVLB  1
3ED6:  MOVWF  x0C
3ED8:  MOVLB  0
3EDA:  CALL   1386
3EDE:  MOVLW  FD
3EE0:  MOVWF  FF6
3EE2:  MOVLW  06
3EE4:  MOVWF  FF7
3EE6:  MOVLW  0A
3EE8:  MOVLB  1
3EEA:  MOVWF  x08
3EEC:  MOVLB  0
3EEE:  CALL   0F0C
3EF2:  MOVLW  01
3EF4:  MOVWF  FE9
3EF6:  MOVFF  103,10B
3EFA:  MOVFF  102,10A
3EFE:  MOVFF  101,109
3F02:  MOVFF  100,108
3F06:  MOVLB  1
3F08:  CLRF   x0C
3F0A:  MOVLB  0
3F0C:  CALL   1386
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
3F10:  BTFSC  4E.1
3F12:  BRA    4072
3F14:  BTFSC  4E.2
3F16:  BRA    4072
3F18:  BTFSC  4E.3
3F1A:  BRA    4072
....................       { 
....................          if(UP)//Si oprime hacia arriba 
3F1C:  BSF    F93.3
3F1E:  BTFSS  F81.3
3F20:  BRA    3F7C
....................          { 
....................             delay_ms(500); 
3F22:  MOVLW  02
3F24:  MOVLB  1
3F26:  MOVWF  x00
3F28:  MOVLW  FA
3F2A:  MOVWF  x1B
3F2C:  MOVLB  0
3F2E:  CALL   08E4
3F32:  MOVLB  1
3F34:  DECFSZ x00,F
3F36:  BRA    3F28
....................             if(UP) 
3F38:  BSF    F93.3
3F3A:  BTFSS  F81.3
3F3C:  BRA    3F7A
....................             { 
....................                lcd_gotoxy(1,2); 
3F3E:  MOVLW  01
3F40:  MOVWF  x16
3F42:  MOVLW  02
3F44:  MOVWF  x17
3F46:  MOVLB  0
3F48:  CALL   09EE
....................                printf(lcd_putc,"   Modo Manual  "); 
3F4C:  MOVLW  0E
3F4E:  MOVWF  FF6
3F50:  MOVLW  07
3F52:  MOVWF  FF7
3F54:  CALL   0EEC
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
3F58:  BSF    4E.1
3F5A:  BCF    4E.2
3F5C:  BCF    4E.3
3F5E:  MOVLW  0A
3F60:  MOVWF  2C
3F62:  MOVWF  2E
....................                delay_ms(1000); 
3F64:  MOVLW  04
3F66:  MOVLB  1
3F68:  MOVWF  x00
3F6A:  MOVLW  FA
3F6C:  MOVWF  x1B
3F6E:  MOVLB  0
3F70:  CALL   08E4
3F74:  MOVLB  1
3F76:  DECFSZ x00,F
3F78:  BRA    3F6A
3F7A:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
3F7C:  BSF    F93.2
3F7E:  BTFSS  F81.2
3F80:  BRA    3FDC
....................          { 
....................             delay_ms(500); 
3F82:  MOVLW  02
3F84:  MOVLB  1
3F86:  MOVWF  x00
3F88:  MOVLW  FA
3F8A:  MOVWF  x1B
3F8C:  MOVLB  0
3F8E:  CALL   08E4
3F92:  MOVLB  1
3F94:  DECFSZ x00,F
3F96:  BRA    3F88
....................             if(DOWN) 
3F98:  BSF    F93.2
3F9A:  BTFSS  F81.2
3F9C:  BRA    3FDA
....................             { 
....................                lcd_gotoxy(1,2); 
3F9E:  MOVLW  01
3FA0:  MOVWF  x16
3FA2:  MOVLW  02
3FA4:  MOVWF  x17
3FA6:  MOVLB  0
3FA8:  CALL   09EE
....................                printf(lcd_putc,"   Modo Auto   "); 
3FAC:  MOVLW  20
3FAE:  MOVWF  FF6
3FB0:  MOVLW  07
3FB2:  MOVWF  FF7
3FB4:  CALL   0EEC
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
3FB8:  BSF    4E.2
3FBA:  BCF    4E.1
3FBC:  BCF    4E.3
3FBE:  MOVLW  0A
3FC0:  MOVWF  2D
3FC2:  MOVWF  2E
....................                delay_ms(1000); 
3FC4:  MOVLW  04
3FC6:  MOVLB  1
3FC8:  MOVWF  x00
3FCA:  MOVLW  FA
3FCC:  MOVWF  x1B
3FCE:  MOVLB  0
3FD0:  CALL   08E4
3FD4:  MOVLB  1
3FD6:  DECFSZ x00,F
3FD8:  BRA    3FCA
3FDA:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
3FDC:  BSF    F93.0
3FDE:  BTFSS  F81.0
3FE0:  BRA    403C
....................          { 
....................             delay_ms(500); 
3FE2:  MOVLW  02
3FE4:  MOVLB  1
3FE6:  MOVWF  x00
3FE8:  MOVLW  FA
3FEA:  MOVWF  x1B
3FEC:  MOVLB  0
3FEE:  CALL   08E4
3FF2:  MOVLB  1
3FF4:  DECFSZ x00,F
3FF6:  BRA    3FE8
....................             if(RIGHT) 
3FF8:  BSF    F93.0
3FFA:  BTFSS  F81.0
3FFC:  BRA    403A
....................             { 
....................                lcd_gotoxy(1,2); 
3FFE:  MOVLW  01
4000:  MOVWF  x16
4002:  MOVLW  02
4004:  MOVWF  x17
4006:  MOVLB  0
4008:  CALL   09EE
....................                printf(lcd_putc,"   Modo Semi   "); 
400C:  MOVLW  30
400E:  MOVWF  FF6
4010:  MOVLW  07
4012:  MOVWF  FF7
4014:  CALL   0EEC
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4018:  BSF    4E.3
401A:  BCF    4E.1
401C:  BCF    4E.2
401E:  MOVLW  0A
4020:  MOVWF  2C
4022:  MOVWF  2D
....................                delay_ms(1000); 
4024:  MOVLW  04
4026:  MOVLB  1
4028:  MOVWF  x00
402A:  MOVLW  FA
402C:  MOVWF  x1B
402E:  MOVLB  0
4030:  CALL   08E4
4034:  MOVLB  1
4036:  DECFSZ x00,F
4038:  BRA    402A
403A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
403C:  BSF    F93.1
403E:  BTFSS  F81.1
4040:  BRA    4072
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4042:  MOVLW  01
4044:  MOVWF  17
4046:  CLRF   36
4048:  MOVLW  02
404A:  MOVWF  1B
404C:  MOVWF  1D
404E:  MOVLW  0B
4050:  MOVWF  1A
4052:  MOVLW  02
4054:  MOVLB  1
4056:  MOVWF  x00
4058:  MOVLW  FA
405A:  MOVWF  x1B
405C:  MOVLB  0
405E:  CALL   08E4
4062:  MOVLB  1
4064:  DECFSZ x00,F
4066:  BRA    4058
4068:  MOVLW  0C
406A:  MOVWF  x15
406C:  MOVLB  0
406E:  CALL   0A60
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4072:  BTFSC  4E.1
4074:  BRA    407E
4076:  MOVF   2D,W
4078:  SUBLW  14
407A:  BTFSS  FD8.2
407C:  BRA    41A6
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
407E:  BCF    4E.2
4080:  BCF    4E.3
4082:  MOVLW  0A
4084:  MOVWF  2C
4086:  MOVWF  2E
....................          lcd_gotoxy(1,2); 
4088:  MOVLW  01
408A:  MOVLB  1
408C:  MOVWF  x16
408E:  MOVLW  02
4090:  MOVWF  x17
4092:  MOVLB  0
4094:  CALL   09EE
....................          printf(lcd_putc,"   Modo Manual  "); 
4098:  MOVLW  40
409A:  MOVWF  FF6
409C:  MOVLW  07
409E:  MOVWF  FF7
40A0:  CALL   0EEC
....................          lcd_gotoxy(1,3); 
40A4:  MOVLW  01
40A6:  MOVLB  1
40A8:  MOVWF  x16
40AA:  MOVLW  03
40AC:  MOVWF  x17
40AE:  MOVLB  0
40B0:  CALL   09EE
....................          printf(lcd_putc,"    Seleccionado    "); 
40B4:  MOVLW  52
40B6:  MOVWF  FF6
40B8:  MOVLW  07
40BA:  MOVWF  FF7
40BC:  CALL   0EEC
....................          if(LEFT) 
40C0:  BSF    F93.1
40C2:  BTFSS  F81.1
40C4:  BRA    41A6
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
40C6:  BCF    4E.1
40C8:  MOVLW  14
40CA:  MOVWF  2D
40CC:  MOVLW  0A
40CE:  MOVWF  2C
40D0:  MOVWF  2E
40D2:  MOVLW  02
40D4:  MOVLB  1
40D6:  MOVWF  x00
40D8:  MOVLW  FA
40DA:  MOVWF  x1B
40DC:  MOVLB  0
40DE:  CALL   08E4
40E2:  MOVLB  1
40E4:  DECFSZ x00,F
40E6:  BRA    40D8
40E8:  MOVLW  0C
40EA:  MOVWF  x15
40EC:  MOVLB  0
40EE:  CALL   0A60
40F2:  MOVLW  FE
40F4:  MOVLB  1
40F6:  MOVWF  x00
40F8:  MOVLB  0
40FA:  CALL   164A
40FE:  MOVLW  FE
4100:  MOVWF  29
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
4102:  MOVLW  0A
4104:  MOVWF  FA9
4106:  MOVFF  2D,FA8
410A:  BCF    FA6.6
410C:  BCF    FA6.7
410E:  BSF    FA6.2
4110:  MOVF   FF2,W
4112:  MOVWF  00
4114:  BCF    FF2.7
4116:  MOVLB  F
4118:  MOVLW  55
411A:  MOVWF  FA7
411C:  MOVLW  AA
411E:  MOVWF  FA7
4120:  BSF    FA6.1
4122:  BTFSC  FA6.1
4124:  BRA    4122
4126:  BCF    FA6.2
4128:  MOVF   00,W
412A:  IORWF  FF2,F
412C:  MOVLW  0C
412E:  MOVWF  FA9
4130:  MOVFF  2E,FA8
4134:  BCF    FA6.6
4136:  BCF    FA6.7
4138:  BSF    FA6.2
413A:  MOVF   FF2,W
413C:  MOVWF  00
413E:  BCF    FF2.7
4140:  MOVLW  55
4142:  MOVWF  FA7
4144:  MOVLW  AA
4146:  MOVWF  FA7
4148:  BSF    FA6.1
414A:  BTFSC  FA6.1
414C:  BRA    414A
414E:  BCF    FA6.2
4150:  MOVF   00,W
4152:  IORWF  FF2,F
4154:  MOVLW  0B
4156:  MOVWF  FA9
4158:  MOVFF  2C,FA8
415C:  BCF    FA6.6
415E:  BCF    FA6.7
4160:  BSF    FA6.2
4162:  MOVF   FF2,W
4164:  MOVWF  00
4166:  BCF    FF2.7
4168:  MOVLW  55
416A:  MOVWF  FA7
416C:  MOVLW  AA
416E:  MOVWF  FA7
4170:  BSF    FA6.1
4172:  BTFSC  FA6.1
4174:  BRA    4172
4176:  BCF    FA6.2
4178:  MOVF   00,W
417A:  IORWF  FF2,F
417C:  MOVLW  0D
417E:  MOVWF  FA9
4180:  MOVFF  29,FA8
4184:  BCF    FA6.6
4186:  BCF    FA6.7
4188:  BSF    FA6.2
418A:  MOVF   FF2,W
418C:  MOVWF  00
418E:  BCF    FF2.7
4190:  MOVLW  55
4192:  MOVWF  FA7
4194:  MOVLW  AA
4196:  MOVWF  FA7
4198:  BSF    FA6.1
419A:  BTFSC  FA6.1
419C:  BRA    419A
419E:  BCF    FA6.2
41A0:  MOVF   00,W
41A2:  IORWF  FF2,F
41A4:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
41A6:  BTFSC  4E.2
41A8:  BRA    41B0
41AA:  MOVF   2C,W
41AC:  SUBLW  14
41AE:  BNZ   4278
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
41B0:  BCF    4E.1
41B2:  BCF    4E.3
41B4:  MOVLW  0A
41B6:  MOVWF  2E
41B8:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
41BA:  MOVLW  01
41BC:  MOVLB  1
41BE:  MOVWF  x16
41C0:  MOVLW  02
41C2:  MOVWF  x17
41C4:  MOVLB  0
41C6:  CALL   09EE
....................          printf(lcd_putc,"   Modo Auto   "); 
41CA:  MOVLW  68
41CC:  MOVWF  FF6
41CE:  MOVLW  07
41D0:  MOVWF  FF7
41D2:  CALL   0EEC
....................          lcd_gotoxy(1,3); 
41D6:  MOVLW  01
41D8:  MOVLB  1
41DA:  MOVWF  x16
41DC:  MOVLW  03
41DE:  MOVWF  x17
41E0:  MOVLB  0
41E2:  CALL   09EE
....................          printf(lcd_putc,"    Seleccionado    "); 
41E6:  MOVLW  78
41E8:  MOVWF  FF6
41EA:  MOVLW  07
41EC:  MOVWF  FF7
41EE:  CALL   0EEC
....................          if(LEFT) 
41F2:  BSF    F93.1
41F4:  BTFSS  F81.1
41F6:  BRA    4278
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
41F8:  BCF    4E.2
41FA:  MOVLW  14
41FC:  MOVWF  2C
41FE:  MOVLW  0A
4200:  MOVWF  2E
4202:  MOVWF  2D
4204:  MOVLW  02
4206:  MOVLB  1
4208:  MOVWF  x00
420A:  MOVLW  FA
420C:  MOVWF  x1B
420E:  MOVLB  0
4210:  CALL   08E4
4214:  MOVLB  1
4216:  DECFSZ x00,F
4218:  BRA    420A
421A:  MOVLW  0C
421C:  MOVWF  x15
421E:  MOVLB  0
4220:  CALL   0A60
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
4224:  MOVLW  0B
4226:  MOVWF  FA9
4228:  MOVFF  2C,FA8
422C:  BCF    FA6.6
422E:  BCF    FA6.7
4230:  BSF    FA6.2
4232:  MOVF   FF2,W
4234:  MOVWF  00
4236:  BCF    FF2.7
4238:  MOVLB  F
423A:  MOVLW  55
423C:  MOVWF  FA7
423E:  MOVLW  AA
4240:  MOVWF  FA7
4242:  BSF    FA6.1
4244:  BTFSC  FA6.1
4246:  BRA    4244
4248:  BCF    FA6.2
424A:  MOVF   00,W
424C:  IORWF  FF2,F
424E:  MOVLW  0C
4250:  MOVWF  FA9
4252:  MOVFF  2E,FA8
4256:  BCF    FA6.6
4258:  BCF    FA6.7
425A:  BSF    FA6.2
425C:  MOVF   FF2,W
425E:  MOVWF  00
4260:  BCF    FF2.7
4262:  MOVLW  55
4264:  MOVWF  FA7
4266:  MOVLW  AA
4268:  MOVWF  FA7
426A:  BSF    FA6.1
426C:  BTFSC  FA6.1
426E:  BRA    426C
4270:  BCF    FA6.2
4272:  MOVF   00,W
4274:  IORWF  FF2,F
4276:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
4278:  BTFSC  4E.3
427A:  BRA    4284
427C:  MOVF   2E,W
427E:  SUBLW  14
4280:  BTFSS  FD8.2
4282:  BRA    439E
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4284:  BCF    4E.1
4286:  BCF    4E.2
4288:  MOVLW  0A
428A:  MOVWF  2C
428C:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
428E:  MOVLW  01
4290:  MOVLB  1
4292:  MOVWF  x16
4294:  MOVLW  02
4296:  MOVWF  x17
4298:  MOVLB  0
429A:  CALL   09EE
....................          printf(lcd_putc,"   Modo Semi   "); 
429E:  MOVLW  8E
42A0:  MOVWF  FF6
42A2:  MOVLW  07
42A4:  MOVWF  FF7
42A6:  CALL   0EEC
....................          if(UP) 
42AA:  BSF    F93.3
42AC:  BTFSS  F81.3
42AE:  BRA    42B2
....................          { 
....................             tmp++; 
42B0:  INCF   29,F
....................              
....................          } 
....................           
....................          if(DOWN) 
42B2:  BSF    F93.2
42B4:  BTFSS  F81.2
42B6:  BRA    42BA
....................          { 
....................             tmp--; 
42B8:  DECF   29,F
....................          } 
....................          ValorSemi=tmp; 
42BA:  MOVFF  29,2F
....................          ajustar_damper(tmp); 
42BE:  MOVFF  29,100
42C2:  CALL   164A
....................          if(LEFT) 
42C6:  BSF    F93.1
42C8:  BTFSS  F81.1
42CA:  BRA    439E
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
42CC:  MOVLW  0D
42CE:  MOVWF  FA9
42D0:  MOVFF  29,FA8
42D4:  BCF    FA6.6
42D6:  BCF    FA6.7
42D8:  BSF    FA6.2
42DA:  MOVF   FF2,W
42DC:  MOVWF  00
42DE:  BCF    FF2.7
42E0:  MOVLB  F
42E2:  MOVLW  55
42E4:  MOVWF  FA7
42E6:  MOVLW  AA
42E8:  MOVWF  FA7
42EA:  BSF    FA6.1
42EC:  BTFSC  FA6.1
42EE:  BRA    42EC
42F0:  BCF    FA6.2
42F2:  MOVF   00,W
42F4:  IORWF  FF2,F
42F6:  BCF    4E.3
42F8:  MOVLW  14
42FA:  MOVWF  2E
42FC:  MOVLW  0A
42FE:  MOVWF  2C
4300:  MOVWF  2D
4302:  MOVLW  02
4304:  MOVLB  1
4306:  MOVWF  x00
4308:  MOVLW  FA
430A:  MOVWF  x1B
430C:  MOVLB  0
430E:  CALL   08E4
4312:  MOVLB  1
4314:  DECFSZ x00,F
4316:  BRA    4308
4318:  MOVLW  0C
431A:  MOVWF  x15
431C:  MOVLB  0
431E:  CALL   0A60
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
4322:  MOVLW  0C
4324:  MOVWF  FA9
4326:  MOVFF  2E,FA8
432A:  BCF    FA6.6
432C:  BCF    FA6.7
432E:  BSF    FA6.2
4330:  MOVF   FF2,W
4332:  MOVWF  00
4334:  BCF    FF2.7
4336:  MOVLB  F
4338:  MOVLW  55
433A:  MOVWF  FA7
433C:  MOVLW  AA
433E:  MOVWF  FA7
4340:  BSF    FA6.1
4342:  BTFSC  FA6.1
4344:  BRA    4342
4346:  BCF    FA6.2
4348:  MOVF   00,W
434A:  IORWF  FF2,F
434C:  MOVLW  0B
434E:  MOVWF  FA9
4350:  MOVFF  2C,FA8
4354:  BCF    FA6.6
4356:  BCF    FA6.7
4358:  BSF    FA6.2
435A:  MOVF   FF2,W
435C:  MOVWF  00
435E:  BCF    FF2.7
4360:  MOVLW  55
4362:  MOVWF  FA7
4364:  MOVLW  AA
4366:  MOVWF  FA7
4368:  BSF    FA6.1
436A:  BTFSC  FA6.1
436C:  BRA    436A
436E:  BCF    FA6.2
4370:  MOVF   00,W
4372:  IORWF  FF2,F
4374:  MOVLW  0A
4376:  MOVWF  FA9
4378:  MOVFF  2D,FA8
437C:  BCF    FA6.6
437E:  BCF    FA6.7
4380:  BSF    FA6.2
4382:  MOVF   FF2,W
4384:  MOVWF  00
4386:  BCF    FF2.7
4388:  MOVLW  55
438A:  MOVWF  FA7
438C:  MOVLW  AA
438E:  MOVWF  FA7
4390:  BSF    FA6.1
4392:  BTFSC  FA6.1
4394:  BRA    4392
4396:  BCF    FA6.2
4398:  MOVF   00,W
439A:  IORWF  FF2,F
439C:  MOVLB  0
439E:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
43A0:  MOVF   17,W
43A2:  SUBLW  14
43A4:  BTFSS  FD8.2
43A6:  BRA    4668
....................    { 
....................       if(Lectura2==1) 
43A8:  BTFSS  35.6
43AA:  BRA    4400
....................       { 
....................       lcd_gotoxy(1,1);                      
43AC:  MOVLW  01
43AE:  MOVWF  x16
43B0:  MOVWF  x17
43B2:  MOVLB  0
43B4:  CALL   09EE
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
43B8:  MOVLW  9E
43BA:  MOVWF  FF6
43BC:  MOVLW  07
43BE:  MOVWF  FF7
43C0:  CALL   0EEC
....................       lcd_gotoxy(1,2); 
43C4:  MOVLW  01
43C6:  MOVLB  1
43C8:  MOVWF  x16
43CA:  MOVLW  02
43CC:  MOVWF  x17
43CE:  MOVLB  0
43D0:  CALL   09EE
....................       printf(lcd_putc,"Damp= Op. "); 
43D4:  MOVLW  A8
43D6:  MOVWF  FF6
43D8:  MOVLW  07
43DA:  MOVWF  FF7
43DC:  CALL   0EEC
....................       //printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
....................       lcd_gotoxy(1,3); 
43E0:  MOVLW  01
43E2:  MOVLB  1
43E4:  MOVWF  x16
43E6:  MOVLW  03
43E8:  MOVWF  x17
43EA:  MOVLB  0
43EC:  CALL   09EE
....................       printf(lcd_putc,"InFlow= Opc.  "); 
43F0:  MOVLW  B4
43F2:  MOVWF  FF6
43F4:  MOVLW  07
43F6:  MOVWF  FF7
43F8:  CALL   0EEC
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       Lectura2=0; 
43FC:  BCF    35.6
43FE:  MOVLB  1
....................       } 
....................        
....................       if(horas>=60) 
4400:  MOVF   32,W
4402:  SUBLW  3B
4404:  BC    4424
....................       { 
....................          lcd_gotoxy(10,1);                      
4406:  MOVLW  0A
4408:  MOVWF  x16
440A:  MOVLW  01
440C:  MOVWF  x17
440E:  MOVLB  0
4410:  CALL   09EE
....................          printf(lcd_putc,"Filtro:Opc.");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4414:  MOVLW  C4
4416:  MOVWF  FF6
4418:  MOVLW  07
441A:  MOVWF  FF7
441C:  CALL   0EEC
....................          //printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................       else 
4420:  BRA    443E
4422:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
4424:  MOVLW  0A
4426:  MOVWF  x16
4428:  MOVLW  01
442A:  MOVWF  x17
442C:  MOVLB  0
442E:  CALL   09EE
....................          printf(lcd_putc,"Filtro:OPC");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
4432:  MOVLW  D0
4434:  MOVWF  FF6
4436:  MOVLW  07
4438:  MOVWF  FF7
443A:  CALL   0EEC
....................          //printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................        
....................       if(iniciodamper==0) 
443E:  BTFSC  4E.0
4440:  BRA    4462
....................       { 
....................          flag_iniciodamper=1; 
4442:  BSF    35.7
....................          lcd_gotoxy(11,2); 
4444:  MOVLW  0B
4446:  MOVLB  1
4448:  MOVWF  x16
444A:  MOVLW  02
444C:  MOVWF  x17
444E:  MOVLB  0
4450:  CALL   09EE
....................          printf(lcd_putc,"Flujo=Opc."); 
4454:  MOVLW  DC
4456:  MOVWF  FF6
4458:  MOVLW  07
445A:  MOVWF  FF7
445C:  CALL   0EEC
....................          //printf(lcd_putc,"Flujo=Ajus"); 
....................       } 
....................       else 
4460:  BRA    4504
....................       { 
....................          flag_iniciodamper=0; 
4462:  BCF    35.7
....................          if(Flujo<0.5) 
4464:  MOVFF  8E,102
4468:  MOVFF  8D,101
446C:  MOVFF  8C,100
4470:  MOVFF  8B,FF
4474:  MOVLB  1
4476:  CLRF   x06
4478:  CLRF   x05
447A:  CLRF   x04
447C:  MOVLW  7E
447E:  MOVWF  x03
4480:  MOVLB  0
4482:  CALL   1538
4486:  BNC   44A6
....................          { 
....................             lcd_gotoxy(11,2); 
4488:  MOVLW  0B
448A:  MOVLB  1
448C:  MOVWF  x16
448E:  MOVLW  02
4490:  MOVWF  x17
4492:  MOVLB  0
4494:  CALL   09EE
....................             printf(lcd_putc,"Flujo=Opc.");       
4498:  MOVLW  E8
449A:  MOVWF  FF6
449C:  MOVLW  07
449E:  MOVWF  FF7
44A0:  CALL   0EEC
....................             //printf(lcd_putc,"Flujo=Bajo"); 
....................          } 
....................          else 
44A4:  BRA    4504
....................          { 
....................             if(Flujo>2.0) 
44A6:  MOVLB  1
44A8:  CLRF   x02
44AA:  CLRF   x01
44AC:  CLRF   x00
44AE:  MOVLW  80
44B0:  MOVLB  0
44B2:  MOVWF  xFF
44B4:  MOVFF  8E,106
44B8:  MOVFF  8D,105
44BC:  MOVFF  8C,104
44C0:  MOVFF  8B,103
44C4:  CALL   1538
44C8:  BNC   44E8
....................             { 
....................                lcd_gotoxy(11,2); 
44CA:  MOVLW  0B
44CC:  MOVLB  1
44CE:  MOVWF  x16
44D0:  MOVLW  02
44D2:  MOVWF  x17
44D4:  MOVLB  0
44D6:  CALL   09EE
....................                printf(lcd_putc,"Flujo=Opc."); 
44DA:  MOVLW  F4
44DC:  MOVWF  FF6
44DE:  MOVLW  07
44E0:  MOVWF  FF7
44E2:  CALL   0EEC
....................                //printf(lcd_putc,"Flujo=Alto"); 
....................             } 
....................             else 
44E6:  BRA    4504
....................             { 
....................                lcd_gotoxy(11,2); 
44E8:  MOVLW  0B
44EA:  MOVLB  1
44EC:  MOVWF  x16
44EE:  MOVLW  02
44F0:  MOVWF  x17
44F2:  MOVLB  0
44F4:  CALL   09EE
....................                printf(lcd_putc,"Flujo=Opc. ");       
44F8:  MOVLW  00
44FA:  MOVWF  FF6
44FC:  MOVLW  08
44FE:  MOVWF  FF7
4500:  CALL   0EEC
....................                //printf(lcd_putc,"Flujo=OK  "); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
4504:  BTFSS  34.0
4506:  BRA    452A
....................       { 
....................          Luz_Blanca_on; 
4508:  BSF    F8A.4
450A:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
450C:  MOVLW  01
450E:  MOVLB  1
4510:  MOVWF  x16
4512:  MOVLW  04
4514:  MOVWF  x17
4516:  MOVLB  0
4518:  CALL   09EE
....................          printf(lcd_putc,"Luz:ON "); 
451C:  MOVLW  0C
451E:  MOVWF  FF6
4520:  MOVLW  08
4522:  MOVWF  FF7
4524:  CALL   0EEC
....................       } 
....................       else 
4528:  BRA    454A
....................       { 
....................          Luz_Blanca_off; 
452A:  BCF    F8A.4
452C:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
452E:  MOVLW  01
4530:  MOVLB  1
4532:  MOVWF  x16
4534:  MOVLW  04
4536:  MOVWF  x17
4538:  MOVLB  0
453A:  CALL   09EE
....................          printf(lcd_putc,"Luz:OFF "); 
453E:  MOVLW  14
4540:  MOVWF  FF6
4542:  MOVLW  08
4544:  MOVWF  FF7
4546:  CALL   0EEC
....................       } 
....................        
....................       if(estadomv==1) 
454A:  BTFSS  34.1
454C:  BRA    456C
....................       { 
....................          lcd_gotoxy(10,4); 
454E:  MOVLW  0A
4550:  MOVLB  1
4552:  MOVWF  x16
4554:  MOVLW  04
4556:  MOVWF  x17
4558:  MOVLB  0
455A:  CALL   09EE
....................          printf(lcd_putc,"Motor:ON "); 
455E:  MOVLW  1E
4560:  MOVWF  FF6
4562:  MOVLW  08
4564:  MOVWF  FF7
4566:  CALL   0EEC
....................       } 
....................       else 
456A:  BRA    458C
....................       { 
....................          Motor_off;      
456C:  BCF    F8A.7
456E:  BCF    F93.7
....................          lcd_gotoxy(10,4); 
4570:  MOVLW  0A
4572:  MOVLB  1
4574:  MOVWF  x16
4576:  MOVLW  04
4578:  MOVWF  x17
457A:  MOVLB  0
457C:  CALL   09EE
....................          printf(lcd_putc,"Motor:OFF ");  
4580:  MOVLW  28
4582:  MOVWF  FF6
4584:  MOVLW  08
4586:  MOVWF  FF7
4588:  CALL   0EEC
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
458C:  BSF    F93.2
458E:  BTFSS  F81.2
4590:  BRA    45A8
....................       {  if(Flanco == 0)  
4592:  BTFSC  34.4
4594:  BRA    45A6
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
4596:  BSF    34.4
4598:  MOVLW  C8
459A:  MOVLB  1
459C:  MOVWF  x1B
459E:  MOVLB  0
45A0:  CALL   08E4
45A4:  BTG    34.0
....................          else 
45A6:  BRA    45AA
....................             {Flanco = 0;} 
45A8:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
45AA:  BSF    F93.1
45AC:  BTFSS  F81.1
45AE:  BRA    45F4
....................       {   
....................          if(Flanco2 == 0) 
45B0:  BTFSC  34.6
45B2:  BRA    45F2
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
45B4:  BSF    34.6
45B6:  MOVLW  C8
45B8:  MOVLB  1
45BA:  MOVWF  x1B
45BC:  MOVLB  0
45BE:  CALL   08E4
45C2:  BTG    34.1
....................             if(estadomv==1) 
45C4:  BTFSS  34.1
45C6:  BRA    45DE
....................             { 
....................                Motor_on;         
45C8:  BSF    F8A.7
45CA:  BCF    F93.7
....................                delay_ms(150); 
45CC:  MOVLW  96
45CE:  MOVLB  1
45D0:  MOVWF  x1B
45D2:  MOVLB  0
45D4:  CALL   08E4
....................                lcd_init(); 
45D8:  CALL   0982
....................             } 
....................             else 
45DC:  BRA    45F2
....................             { 
....................                Motor_off; 
45DE:  BCF    F8A.7
45E0:  BCF    F93.7
....................                delay_ms(150); 
45E2:  MOVLW  96
45E4:  MOVLB  1
45E6:  MOVWF  x1B
45E8:  MOVLB  0
45EA:  CALL   08E4
....................                lcd_init(); 
45EE:  CALL   0982
....................             } 
....................          } 
....................       } 
....................       else 
45F2:  BRA    45F6
....................       { 
....................          Flanco2 = 0; 
45F4:  BCF    34.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
45F6:  BSF    F93.3
45F8:  BTFSS  F81.3
45FA:  BRA    4632
....................       {  if(Flanco1 == 0)  
45FC:  BTFSC  34.5
45FE:  BRA    4630
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
4600:  MOVLW  02
4602:  MOVLB  1
4604:  MOVWF  x00
4606:  MOVLW  FA
4608:  MOVWF  x1B
460A:  MOVLB  0
460C:  CALL   08E4
4610:  MOVLB  1
4612:  DECFSZ x00,F
4614:  BRA    4606
4616:  MOVLW  0C
4618:  MOVWF  x15
461A:  MOVLB  0
461C:  CALL   0A60
4620:  MOVLW  01
4622:  MOVWF  17
4624:  CLRF   36
4626:  MOVLW  02
4628:  MOVWF  1B
462A:  MOVWF  1D
462C:  MOVLW  0B
462E:  MOVWF  1A
....................          else 
4630:  BRA    4634
....................             {Flanco1 = 0;}    
4632:  BCF    34.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
4634:  BSF    F93.0
4636:  BTFSS  F81.0
4638:  BRA    4664
....................       {  if(Flanco3 == 0)  
463A:  BTFSC  34.7
463C:  BRA    4662
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
463E:  MOVLW  02
4640:  MOVLB  1
4642:  MOVWF  x00
4644:  MOVLW  FA
4646:  MOVWF  x1B
4648:  MOVLB  0
464A:  CALL   08E4
464E:  MOVLB  1
4650:  DECFSZ x00,F
4652:  BRA    4644
4654:  MOVLW  0C
4656:  MOVWF  x15
4658:  MOVLB  0
465A:  CALL   0A60
465E:  MOVLW  28
4660:  MOVWF  17
....................          else 
4662:  BRA    4666
....................             {Flanco3 = 0;}     
4664:  BCF    34.7
4666:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
4668:  MOVF   17,W
466A:  SUBLW  1E
466C:  BTFSS  FD8.2
466E:  BRA    47DE
....................       lcd_gotoxy(1,1); 
4670:  MOVLW  01
4672:  MOVWF  x16
4674:  MOVWF  x17
4676:  MOVLB  0
4678:  CALL   09EE
....................       printf(lcd_putc,"     Apagando     "); 
467C:  MOVLW  34
467E:  MOVWF  FF6
4680:  MOVLW  08
4682:  MOVWF  FF7
4684:  CALL   0EEC
....................       lcd_gotoxy(1,2); 
4688:  MOVLW  01
468A:  MOVLB  1
468C:  MOVWF  x16
468E:  MOVLW  02
4690:  MOVWF  x17
4692:  MOVLB  0
4694:  CALL   09EE
....................       printf(lcd_putc,"      Cabina      "); 
4698:  MOVLW  48
469A:  MOVWF  FF6
469C:  MOVLW  08
469E:  MOVWF  FF7
46A0:  CALL   0EEC
....................        
....................       lcd_gotoxy(1,3); 
46A4:  MOVLW  01
46A6:  MOVLB  1
46A8:  MOVWF  x16
46AA:  MOVLW  03
46AC:  MOVWF  x17
46AE:  MOVLB  0
46B0:  CALL   09EE
....................       printf(lcd_putc," Espere"); 
46B4:  MOVLW  5C
46B6:  MOVWF  FF6
46B8:  MOVLW  08
46BA:  MOVWF  FF7
46BC:  CALL   0EEC
....................        
....................       if(Lectura==1) 
46C0:  BTFSS  35.5
46C2:  BRA    47DA
....................       {ajustar_damper(0); 
46C4:  MOVLB  1
46C6:  CLRF   x00
46C8:  MOVLB  0
46CA:  CALL   164A
....................        
....................          if(n<8) 
46CE:  MOVF   26,W
46D0:  SUBLW  07
46D2:  BNC   46F8
....................          { 
....................             lcd_gotoxy(9+n,3); 
46D4:  MOVLW  09
46D6:  ADDWF  26,W
46D8:  MOVLB  1
46DA:  MOVWF  x00
46DC:  MOVWF  x16
46DE:  MOVLW  03
46E0:  MOVWF  x17
46E2:  MOVLB  0
46E4:  CALL   09EE
....................             printf(lcd_putc,"."); 
46E8:  MOVLW  2E
46EA:  MOVLB  1
46EC:  MOVWF  x15
46EE:  MOVLB  0
46F0:  CALL   0A60
....................             n++; 
46F4:  INCF   26,F
....................          } 
....................          else 
46F6:  BRA    47D8
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
46F8:  MOVLW  46
46FA:  MOVWF  FA9
46FC:  MOVFF  30,FA8
4700:  BCF    FA6.6
4702:  BCF    FA6.7
4704:  BSF    FA6.2
4706:  MOVF   FF2,W
4708:  MOVWF  00
470A:  BCF    FF2.7
470C:  MOVLB  F
470E:  MOVLW  55
4710:  MOVWF  FA7
4712:  MOVLW  AA
4714:  MOVWF  FA7
4716:  BSF    FA6.1
4718:  BTFSC  FA6.1
471A:  BRA    4718
471C:  BCF    FA6.2
471E:  MOVF   00,W
4720:  IORWF  FF2,F
4722:  MOVLW  47
4724:  MOVWF  FA9
4726:  MOVFF  31,FA8
472A:  BCF    FA6.6
472C:  BCF    FA6.7
472E:  BSF    FA6.2
4730:  MOVF   FF2,W
4732:  MOVWF  00
4734:  BCF    FF2.7
4736:  MOVLW  55
4738:  MOVWF  FA7
473A:  MOVLW  AA
473C:  MOVWF  FA7
473E:  BSF    FA6.1
4740:  BTFSC  FA6.1
4742:  BRA    4740
4744:  BCF    FA6.2
4746:  MOVF   00,W
4748:  IORWF  FF2,F
474A:  MOVLW  48
474C:  MOVWF  FA9
474E:  MOVFF  32,FA8
4752:  BCF    FA6.6
4754:  BCF    FA6.7
4756:  BSF    FA6.2
4758:  MOVF   FF2,W
475A:  MOVWF  00
475C:  BCF    FF2.7
475E:  MOVLW  55
4760:  MOVWF  FA7
4762:  MOVLW  AA
4764:  MOVWF  FA7
4766:  BSF    FA6.1
4768:  BTFSC  FA6.1
476A:  BRA    4768
476C:  BCF    FA6.2
476E:  MOVF   00,W
4770:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
4772:  MOVLW  0C
4774:  MOVLB  1
4776:  MOVWF  x15
4778:  MOVLB  0
477A:  CALL   0A60
....................             lcd_gotoxy(1,2); 
477E:  MOVLW  01
4780:  MOVLB  1
4782:  MOVWF  x16
4784:  MOVLW  02
4786:  MOVWF  x17
4788:  MOVLB  0
478A:  CALL   09EE
....................             printf(lcd_putc,"     Proceso      "); 
478E:  MOVLW  64
4790:  MOVWF  FF6
4792:  MOVLW  08
4794:  MOVWF  FF7
4796:  CALL   0EEC
....................             lcd_gotoxy(1,3); 
479A:  MOVLW  01
479C:  MOVLB  1
479E:  MOVWF  x16
47A0:  MOVLW  03
47A2:  MOVWF  x17
47A4:  MOVLB  0
47A6:  CALL   09EE
....................             printf(lcd_putc,"    Finalizado    "); 
47AA:  MOVLW  78
47AC:  MOVWF  FF6
47AE:  MOVLW  08
47B0:  MOVWF  FF7
47B2:  CALL   0EEC
....................             delay_ms(2000); 
47B6:  MOVLW  08
47B8:  MOVLB  1
47BA:  MOVWF  x00
47BC:  MOVLW  FA
47BE:  MOVWF  x1B
47C0:  MOVLB  0
47C2:  CALL   08E4
47C6:  MOVLB  1
47C8:  DECFSZ x00,F
47CA:  BRA    47BC
....................             printf(lcd_putc,"\f"); 
47CC:  MOVLW  0C
47CE:  MOVWF  x15
47D0:  MOVLB  0
47D2:  CALL   0A60
....................             reset_cpu(); 
47D6:  RESET
....................          } 
....................        
....................        
....................       Lectura=0; 
47D8:  BCF    35.5
....................       }   
....................    } 
47DA:  MOVLB  1
47DC:  BRA    4668
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
47DE:  MOVF   17,W
47E0:  SUBLW  28
47E2:  BNZ   48BE
....................    lcd_gotoxy(1,1); 
47E4:  MOVLW  01
47E6:  MOVWF  x16
47E8:  MOVWF  x17
47EA:  MOVLB  0
47EC:  CALL   09EE
....................    printf(lcd_putc,"   Desea apagar     "); 
47F0:  MOVLW  8C
47F2:  MOVWF  FF6
47F4:  MOVLW  08
47F6:  MOVWF  FF7
47F8:  CALL   0EEC
....................    lcd_gotoxy(1,2); 
47FC:  MOVLW  01
47FE:  MOVLB  1
4800:  MOVWF  x16
4802:  MOVLW  02
4804:  MOVWF  x17
4806:  MOVLB  0
4808:  CALL   09EE
....................    printf(lcd_putc,"     la cabina      "); 
480C:  MOVLW  A2
480E:  MOVWF  FF6
4810:  MOVLW  08
4812:  MOVWF  FF7
4814:  CALL   0EEC
....................    lcd_gotoxy(1,3); 
4818:  MOVLW  01
481A:  MOVLB  1
481C:  MOVWF  x16
481E:  MOVLW  03
4820:  MOVWF  x17
4822:  MOVLB  0
4824:  CALL   09EE
....................    printf(lcd_putc,"   > Aceptar        "); 
4828:  MOVLW  B8
482A:  MOVWF  FF6
482C:  MOVLW  08
482E:  MOVWF  FF7
4830:  CALL   0EEC
....................    lcd_gotoxy(1,4); 
4834:  MOVLW  01
4836:  MOVLB  1
4838:  MOVWF  x16
483A:  MOVLW  04
483C:  MOVWF  x17
483E:  MOVLB  0
4840:  CALL   09EE
....................    printf(lcd_putc,"   < Cancelar       "); 
4844:  MOVLW  CE
4846:  MOVWF  FF6
4848:  MOVLW  08
484A:  MOVWF  FF7
484C:  CALL   0EEC
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
4850:  BSF    F93.0
4852:  BTFSS  F81.0
4854:  BRA    487A
....................       {  if(Flanco1 == 0)  
4856:  BTFSC  34.5
4858:  BRA    4878
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
485A:  BSF    34.5
485C:  MOVLW  1E
485E:  MOVWF  17
4860:  MOVFF  20,100
4864:  CALL   0ED8
4868:  BCF    F8A.5
486A:  BCF    F93.5
486C:  MOVLW  0C
486E:  MOVLB  1
4870:  MOVWF  x15
4872:  MOVLB  0
4874:  CALL   0A60
....................             }} 
....................          else 
4878:  BRA    487C
....................             {Flanco1 = 0;}    
487A:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
487C:  BSF    F93.1
487E:  BTFSS  F81.1
4880:  BRA    48BA
....................       {  if(Flanco3 == 0)  
4882:  BTFSC  34.7
4884:  BRA    48B8
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4886:  BSF    34.7
4888:  MOVLW  14
488A:  MOVWF  17
488C:  CLRF   36
488E:  MOVLW  02
4890:  MOVWF  1B
4892:  MOVWF  1D
4894:  MOVLW  0B
4896:  MOVWF  1A
4898:  MOVLW  02
489A:  MOVLB  1
489C:  MOVWF  x00
489E:  MOVLW  FA
48A0:  MOVWF  x1B
48A2:  MOVLB  0
48A4:  CALL   08E4
48A8:  MOVLB  1
48AA:  DECFSZ x00,F
48AC:  BRA    489E
48AE:  MOVLW  0C
48B0:  MOVWF  x15
48B2:  MOVLB  0
48B4:  CALL   0A60
....................          else 
48B8:  BRA    48BC
....................             {Flanco3 = 0;}     
48BA:  BCF    34.7
48BC:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(tiemporeset>=20) 
48BE:  MOVF   33,W
48C0:  SUBLW  13
48C2:  BC    48CE
....................    { 
....................       lcd_init(); 
48C4:  MOVLB  0
48C6:  CALL   0982
....................       tiemporeset=0; 
48CA:  CLRF   33
48CC:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
48CE:  BTFSS  35.3
48D0:  BRA    48DE
....................       {intensidadpantalla(0);sleep();} 
48D2:  CLRF   x00
48D4:  MOVLB  0
48D6:  CALL   0ED8
48DA:  SLEEP 
48DC:  MOVLB  1
.................... /* 
....................    if(Menu!=0 || Menu!=30) 
....................    { 
....................       if(Lectura==1) 
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
....................         if(iniciodamper==1) 
....................         { 
....................             controlar_flujo(); 
....................           
....................             if(Flujo<0.5 && iniciodamper==1 && Menu==20) 
....................             { 
....................                flag_latencia=1; 
....................                 
....................                if(Latencia==1) 
....................                { 
....................                   if(estadoalarma==1) 
....................                   { 
....................                      Alarma_on; 
....................                   } 
....................                   else 
....................                   { 
....................                      Alarma_off; 
....................                   } 
....................                   estadopantalla=!estadopantalla; 
....................                   if(estadopantalla==1) 
....................                   {intensidadpantalla(contraste);} 
....................                   else 
....................                   {intensidadpantalla(0);} 
....................                } 
....................             } 
....................             else 
....................             { 
....................                intensidadpantalla(contraste);Alarma_off; 
....................                if(Flujo>=0.5) 
....................                { 
....................                   Latencia=0;t_latencia=0;flag_latencia=0; 
....................                } 
....................             } 
....................         } 
....................         else 
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
....................         } 
....................          Lectura=0; 
....................       }      
....................  
....................    }  */    
....................     
....................    if(t_iniciodamper>=18000) 
48DE:  MOVF   56,W
48E0:  SUBLW  45
48E2:  BC    48F2
48E4:  XORLW  FF
48E6:  BNZ   48EE
48E8:  MOVF   55,W
48EA:  SUBLW  4F
48EC:  BC    48F2
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
48EE:  BSF    4E.0
48F0:  BCF    35.7
....................    } 
....................     
....................    } 
48F2:  GOTO   1D08
.................... } 
48F6:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
