CCS PCH C Compiler, Version 4.104, 5967               27-abr-15 16:08

               Filename: E:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2015\Cabina Extractora con Sensor Aire\Firmware\Cabina_Extractora.lst

               ROM used: 25116 bytes (77%)
                         Largest free fragment is 7648
               RAM used: 260 (13%) at main() level
                         317 (15%) worst case
               Stack:    12 worst case (6 in main + 6 for interrupts)

*
0000:  GOTO   248C
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0428
0054:  BTFSS  FF2.4
0056:  GOTO   0060
005A:  BTFSC  FF2.1
005C:  GOTO   030C
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV3,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=12000000) 
*
00B6:  MOVLW  01
00B8:  MOVWF  FEA
00BA:  MOVLW  35
00BC:  MOVWF  FE9
00BE:  MOVF   FEF,W
00C0:  BZ    00DE
00C2:  MOVLW  03
00C4:  MOVWF  01
00C6:  CLRF   00
00C8:  DECFSZ 00,F
00CA:  BRA    00C8
00CC:  DECFSZ 01,F
00CE:  BRA    00C6
00D0:  MOVLW  E3
00D2:  MOVWF  00
00D4:  DECFSZ 00,F
00D6:  BRA    00D4
00D8:  NOP   
00DA:  DECFSZ FEF,F
00DC:  BRA    00C2
00DE:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
0100:  MOVLW  F0
0102:  MOVWF  F95
....................       lcd.rw = 1; 
0104:  BSF    F83.0
....................       delay_cycles(1); 
0106:  NOP   
....................       lcd.enable = 1; 
0108:  BSF    F83.2
....................       delay_cycles(1); 
010A:  NOP   
....................       high = lcd.data; 
010C:  SWAPF  F83,W
010E:  ANDLW  0F
0110:  MOVLB  1
0112:  MOVWF  x3B
....................       lcd.enable = 0; 
0114:  BCF    F83.2
....................       delay_cycles(1); 
0116:  NOP   
....................       lcd.enable = 1; 
0118:  BSF    F83.2
....................       delay_us(1); 
011A:  BRA    011C
011C:  NOP   
....................       low = lcd.data; 
011E:  SWAPF  F83,W
0120:  ANDLW  0F
0122:  MOVWF  x3A
....................       lcd.enable = 0; 
0124:  BCF    F83.2
....................       set_tris_d(LCD_WRITE); 
0126:  MOVLW  00
0128:  MOVWF  F95
....................       return( (high<<4) | low); 
012A:  SWAPF  x3B,W
012C:  MOVWF  00
012E:  MOVLW  F0
0130:  ANDWF  00,F
0132:  MOVF   00,W
0134:  IORWF  x3A,W
0136:  MOVWF  01
.................... } 
0138:  MOVLB  0
013A:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
00E0:  MOVLB  1
00E2:  SWAPF  x3B,W
00E4:  ANDLW  F0
00E6:  MOVWF  00
00E8:  MOVLW  0F
00EA:  ANDWF  F83,W
00EC:  IORWF  00,W
00EE:  MOVWF  F83
....................       delay_cycles(1); 
00F0:  NOP   
....................       lcd.enable = 1; 
00F2:  BSF    F83.2
....................       delay_us(2); 
00F4:  BRA    00F6
00F6:  BRA    00F8
00F8:  BRA    00FA
....................       lcd.enable = 0; 
00FA:  BCF    F83.2
.................... } 
00FC:  MOVLB  0
00FE:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
013C:  BCF    F83.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
013E:  RCALL  0100
0140:  MOVFF  01,13A
0144:  MOVLB  1
0146:  BTFSS  01.7
0148:  BRA    014E
014A:  MOVLB  0
014C:  BRA    013E
....................       lcd.rs = address; 
014E:  BTFSS  x38.0
0150:  BCF    F83.1
0152:  BTFSC  x38.0
0154:  BSF    F83.1
....................       delay_cycles(1); 
0156:  NOP   
....................       lcd.rw = 0; 
0158:  BCF    F83.0
....................       delay_cycles(1); 
015A:  NOP   
....................       lcd.enable = 0; 
015C:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
015E:  SWAPF  x39,W
0160:  MOVWF  x3A
0162:  MOVLW  0F
0164:  ANDWF  x3A,F
0166:  MOVFF  13A,13B
016A:  MOVLB  0
016C:  RCALL  00E0
....................       lcd_send_nibble(n & 0xf); 
016E:  MOVLB  1
0170:  MOVF   x39,W
0172:  ANDLW  0F
0174:  MOVWF  x3A
0176:  MOVWF  x3B
0178:  MOVLB  0
017A:  RCALL  00E0
.................... } 
017C:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
017E:  MOVLW  00
0180:  MOVWF  F95
....................     lcd.rs = 0; 
0182:  BCF    F83.1
....................     lcd.rw = 0; 
0184:  BCF    F83.0
....................     lcd.enable = 0; 
0186:  BCF    F83.2
....................     delay_ms(15); 
0188:  MOVLW  0F
018A:  MOVLB  1
018C:  MOVWF  x35
018E:  MOVLB  0
0190:  RCALL  00B6
....................     for(i=1;i<=3;++i) { 
0192:  MOVLW  01
0194:  MOVLB  1
0196:  MOVWF  x32
0198:  MOVF   x32,W
019A:  SUBLW  03
019C:  BNC   01B6
....................        lcd_send_nibble(3); 
019E:  MOVLW  03
01A0:  MOVWF  x3B
01A2:  MOVLB  0
01A4:  RCALL  00E0
....................        delay_ms(5); 
01A6:  MOVLW  05
01A8:  MOVLB  1
01AA:  MOVWF  x35
01AC:  MOVLB  0
01AE:  RCALL  00B6
....................     } 
01B0:  MOVLB  1
01B2:  INCF   x32,F
01B4:  BRA    0198
....................     lcd_send_nibble(2); 
01B6:  MOVLW  02
01B8:  MOVWF  x3B
01BA:  MOVLB  0
01BC:  RCALL  00E0
....................     for(i=0;i<=3;++i) 
01BE:  MOVLB  1
01C0:  CLRF   x32
01C2:  MOVF   x32,W
01C4:  SUBLW  03
01C6:  BNC   01EC
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
01C8:  CLRF   03
01CA:  MOVF   x32,W
01CC:  MOVFF  FF2,133
01D0:  BCF    FF2.7
01D2:  MOVLB  0
01D4:  RCALL  00A2
01D6:  MOVLB  1
01D8:  BTFSC  x33.7
01DA:  BSF    FF2.7
01DC:  MOVWF  x33
01DE:  CLRF   x38
01E0:  MOVWF  x39
01E2:  MOVLB  0
01E4:  RCALL  013C
01E6:  MOVLB  1
01E8:  INCF   x32,F
01EA:  BRA    01C2
.................... } 
01EC:  MOVLB  0
01EE:  GOTO   032E (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0206:  MOVLW  01
0208:  MOVLB  1
020A:  SUBWF  x36,W
020C:  ADDLW  FC
020E:  BC    023A
0210:  ADDLW  04
0212:  MOVLB  0
0214:  GOTO   024C
....................      case 1 : address=0x80;break; 
0218:  MOVLW  80
021A:  MOVLB  1
021C:  MOVWF  x37
021E:  BRA    023A
....................      case 2 : address=0xc0;break; 
0220:  MOVLW  C0
0222:  MOVLB  1
0224:  MOVWF  x37
0226:  BRA    023A
....................      case 3 : address=0x94;break; 
0228:  MOVLW  94
022A:  MOVLB  1
022C:  MOVWF  x37
022E:  BRA    023A
....................      case 4 : address=0xd4;break; 
0230:  MOVLW  D4
0232:  MOVLB  1
0234:  MOVWF  x37
0236:  BRA    023A
0238:  MOVLB  1
....................    } 
....................    address+=x-1; 
023A:  MOVLW  01
023C:  SUBWF  x35,W
023E:  ADDWF  x37,F
....................    lcd_send_byte(0,address); 
0240:  CLRF   x38
0242:  MOVFF  137,139
0246:  MOVLB  0
0248:  RCALL  013C
.................... } 
024A:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0280:  MOVLB  1
0282:  MOVF   x34,W
0284:  SUBLW  F1
0286:  BNZ   028C
....................     c=238; 
0288:  MOVLW  EE
028A:  MOVWF  x34
....................    switch (c) { 
028C:  MOVF   x34,W
028E:  XORLW  0C
0290:  MOVLB  0
0292:  BZ    029E
0294:  XORLW  06
0296:  BZ    02BA
0298:  XORLW  02
029A:  BZ    02CC
029C:  BRA    02DA
....................      case '\f'   : lcd_send_byte(0,1); 
029E:  MOVLB  1
02A0:  CLRF   x38
02A2:  MOVLW  01
02A4:  MOVWF  x39
02A6:  MOVLB  0
02A8:  RCALL  013C
....................                    lcdline=1; 
02AA:  MOVLW  01
02AC:  MOVWF  17
....................                    delay_ms(2); 
02AE:  MOVLW  02
02B0:  MOVLB  1
02B2:  MOVWF  x35
02B4:  MOVLB  0
02B6:  RCALL  00B6
....................                                            break; 
02B8:  BRA    02EA
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
02BA:  INCF   17,F
02BC:  MOVLW  01
02BE:  MOVLB  1
02C0:  MOVWF  x35
02C2:  MOVFF  17,136
02C6:  MOVLB  0
02C8:  RCALL  0206
02CA:  BRA    02EA
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
02CC:  MOVLB  1
02CE:  CLRF   x38
02D0:  MOVLW  10
02D2:  MOVWF  x39
02D4:  MOVLB  0
02D6:  RCALL  013C
02D8:  BRA    02EA
....................      default     : lcd_send_byte(1,c);     break; 
02DA:  MOVLW  01
02DC:  MOVLB  1
02DE:  MOVWF  x38
02E0:  MOVFF  134,139
02E4:  MOVLB  0
02E6:  RCALL  013C
02E8:  BRA    02EA
....................    } 
.................... } 
02EA:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
17D6:  MOVFF  108,10C
17DA:  MOVFF  107,10B
17DE:  MOVFF  106,10A
17E2:  MOVFF  105,109
....................  
....................    if (y != 1.0) 
17E6:  MOVFF  10C,11D
17EA:  MOVFF  10B,11C
17EE:  MOVFF  10A,11B
17F2:  MOVFF  109,11A
17F6:  MOVLB  1
17F8:  CLRF   x21
17FA:  CLRF   x20
17FC:  CLRF   x1F
17FE:  MOVLW  7F
1800:  MOVWF  x1E
1802:  MOVLB  0
1804:  RCALL  166A
1806:  BTFSC  FD8.2
1808:  BRA    1C8A
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
180A:  MOVLW  01
180C:  MOVLB  1
180E:  MOVWF  x1B
1810:  MOVLW  09
1812:  MOVWF  FE9
1814:  MOVFF  11B,FEA
1818:  MOVLW  7E
181A:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
181C:  BSF    FD8.1
181E:  MOVFF  10C,121
1822:  MOVFF  10B,120
1826:  MOVFF  10A,11F
182A:  MOVFF  109,11E
182E:  CLRF   x25
1830:  CLRF   x24
1832:  CLRF   x23
1834:  MOVLW  7F
1836:  MOVWF  x22
1838:  MOVLB  0
183A:  CALL   0D06
183E:  MOVFF  00,11A
1842:  MOVFF  01,11B
1846:  MOVFF  02,11C
184A:  MOVFF  03,11D
184E:  BCF    FD8.1
1850:  MOVFF  10C,121
1854:  MOVFF  10B,120
1858:  MOVFF  10A,11F
185C:  MOVFF  109,11E
1860:  MOVLB  1
1862:  CLRF   x25
1864:  CLRF   x24
1866:  CLRF   x23
1868:  MOVLW  7F
186A:  MOVWF  x22
186C:  MOVLB  0
186E:  CALL   0D06
1872:  MOVFF  11D,121
1876:  MOVFF  11C,120
187A:  MOVFF  11B,11F
187E:  MOVFF  11A,11E
1882:  MOVFF  03,125
1886:  MOVFF  02,124
188A:  MOVFF  01,123
188E:  MOVFF  00,122
1892:  CALL   0BA8
1896:  MOVFF  03,10C
189A:  MOVFF  02,10B
189E:  MOVFF  01,10A
18A2:  MOVFF  00,109
....................  
....................       y2=y*y; 
18A6:  MOVFF  10C,11D
18AA:  MOVFF  10B,11C
18AE:  MOVFF  10A,11B
18B2:  MOVFF  109,11A
18B6:  MOVFF  10C,121
18BA:  MOVFF  10B,120
18BE:  MOVFF  10A,11F
18C2:  MOVFF  109,11E
18C6:  RCALL  12CE
18C8:  MOVFF  03,118
18CC:  MOVFF  02,117
18D0:  MOVFF  01,116
18D4:  MOVFF  00,115
....................  
....................       res = pl[0]*y2 + pl[1]; 
18D8:  MOVLW  BC
18DA:  MOVLB  1
18DC:  MOVWF  x1D
18DE:  MOVLW  24
18E0:  MOVWF  x1C
18E2:  MOVLW  67
18E4:  MOVWF  x1B
18E6:  MOVLW  7D
18E8:  MOVWF  x1A
18EA:  MOVFF  118,121
18EE:  MOVFF  117,120
18F2:  MOVFF  116,11F
18F6:  MOVFF  115,11E
18FA:  MOVLB  0
18FC:  RCALL  12CE
18FE:  MOVFF  00,11A
1902:  MOVFF  01,11B
1906:  MOVFF  02,11C
190A:  MOVFF  03,11D
190E:  BCF    FD8.1
1910:  MOVFF  03,121
1914:  MOVFF  02,120
1918:  MOVFF  01,11F
191C:  MOVFF  00,11E
1920:  MOVLW  E3
1922:  MOVLB  1
1924:  MOVWF  x25
1926:  MOVLW  E4
1928:  MOVWF  x24
192A:  MOVLW  90
192C:  MOVWF  x23
192E:  MOVLW  82
1930:  MOVWF  x22
1932:  MOVLB  0
1934:  CALL   0D06
1938:  MOVFF  03,110
193C:  MOVFF  02,10F
1940:  MOVFF  01,10E
1944:  MOVFF  00,10D
....................       res = res*y2 + pl[2]; 
1948:  MOVFF  110,11D
194C:  MOVFF  10F,11C
1950:  MOVFF  10E,11B
1954:  MOVFF  10D,11A
1958:  MOVFF  118,121
195C:  MOVFF  117,120
1960:  MOVFF  116,11F
1964:  MOVFF  115,11E
1968:  RCALL  12CE
196A:  MOVFF  00,11A
196E:  MOVFF  01,11B
1972:  MOVFF  02,11C
1976:  MOVFF  03,11D
197A:  BCF    FD8.1
197C:  MOVFF  03,121
1980:  MOVFF  02,120
1984:  MOVFF  01,11F
1988:  MOVFF  00,11E
198C:  MOVLW  1C
198E:  MOVLB  1
1990:  MOVWF  x25
1992:  MOVLW  87
1994:  MOVWF  x24
1996:  MOVLW  57
1998:  MOVWF  x23
199A:  MOVLW  83
199C:  MOVWF  x22
199E:  MOVLB  0
19A0:  CALL   0D06
19A4:  MOVFF  03,110
19A8:  MOVFF  02,10F
19AC:  MOVFF  01,10E
19B0:  MOVFF  00,10D
....................       res = res*y2 + pl[3]; 
19B4:  MOVFF  110,11D
19B8:  MOVFF  10F,11C
19BC:  MOVFF  10E,11B
19C0:  MOVFF  10D,11A
19C4:  MOVFF  118,121
19C8:  MOVFF  117,120
19CC:  MOVFF  116,11F
19D0:  MOVFF  115,11E
19D4:  RCALL  12CE
19D6:  MOVFF  00,11A
19DA:  MOVFF  01,11B
19DE:  MOVFF  02,11C
19E2:  MOVFF  03,11D
19E6:  BCF    FD8.1
19E8:  MOVFF  03,121
19EC:  MOVFF  02,120
19F0:  MOVFF  01,11F
19F4:  MOVFF  00,11E
19F8:  MOVLW  AB
19FA:  MOVLB  1
19FC:  MOVWF  x25
19FE:  MOVLW  E1
1A00:  MOVWF  x24
1A02:  MOVLW  9E
1A04:  MOVWF  x23
1A06:  MOVLW  83
1A08:  MOVWF  x22
1A0A:  MOVLB  0
1A0C:  CALL   0D06
1A10:  MOVFF  03,110
1A14:  MOVFF  02,10F
1A18:  MOVFF  01,10E
1A1C:  MOVFF  00,10D
....................  
....................       r = ql[0]*y2 + ql[1]; 
1A20:  MOVLB  1
1A22:  CLRF   x1D
1A24:  CLRF   x1C
1A26:  CLRF   x1B
1A28:  MOVLW  7F
1A2A:  MOVWF  x1A
1A2C:  MOVFF  118,121
1A30:  MOVFF  117,120
1A34:  MOVFF  116,11F
1A38:  MOVFF  115,11E
1A3C:  MOVLB  0
1A3E:  RCALL  12CE
1A40:  MOVFF  00,11A
1A44:  MOVFF  01,11B
1A48:  MOVFF  02,11C
1A4C:  MOVFF  03,11D
1A50:  BCF    FD8.1
1A52:  MOVFF  03,121
1A56:  MOVFF  02,120
1A5A:  MOVFF  01,11F
1A5E:  MOVFF  00,11E
1A62:  MOVLW  B4
1A64:  MOVLB  1
1A66:  MOVWF  x25
1A68:  MOVLW  2A
1A6A:  MOVWF  x24
1A6C:  MOVLW  82
1A6E:  MOVWF  x23
1A70:  MOVWF  x22
1A72:  MOVLB  0
1A74:  CALL   0D06
1A78:  MOVFF  03,114
1A7C:  MOVFF  02,113
1A80:  MOVFF  01,112
1A84:  MOVFF  00,111
....................       r = r*y2 + ql[2]; 
1A88:  MOVFF  114,11D
1A8C:  MOVFF  113,11C
1A90:  MOVFF  112,11B
1A94:  MOVFF  111,11A
1A98:  MOVFF  118,121
1A9C:  MOVFF  117,120
1AA0:  MOVFF  116,11F
1AA4:  MOVFF  115,11E
1AA8:  RCALL  12CE
1AAA:  MOVFF  00,11A
1AAE:  MOVFF  01,11B
1AB2:  MOVFF  02,11C
1AB6:  MOVFF  03,11D
1ABA:  BCF    FD8.1
1ABC:  MOVFF  03,121
1AC0:  MOVFF  02,120
1AC4:  MOVFF  01,11F
1AC8:  MOVFF  00,11E
1ACC:  MOVLW  80
1ACE:  MOVLB  1
1AD0:  MOVWF  x25
1AD2:  MOVLW  3E
1AD4:  MOVWF  x24
1AD6:  MOVLW  06
1AD8:  MOVWF  x23
1ADA:  MOVLW  83
1ADC:  MOVWF  x22
1ADE:  MOVLB  0
1AE0:  CALL   0D06
1AE4:  MOVFF  03,114
1AE8:  MOVFF  02,113
1AEC:  MOVFF  01,112
1AF0:  MOVFF  00,111
....................       r = r*y2 + ql[3]; 
1AF4:  MOVFF  114,11D
1AF8:  MOVFF  113,11C
1AFC:  MOVFF  112,11B
1B00:  MOVFF  111,11A
1B04:  MOVFF  118,121
1B08:  MOVFF  117,120
1B0C:  MOVFF  116,11F
1B10:  MOVFF  115,11E
1B14:  CALL   12CE
1B18:  MOVFF  00,11A
1B1C:  MOVFF  01,11B
1B20:  MOVFF  02,11C
1B24:  MOVFF  03,11D
1B28:  BCF    FD8.1
1B2A:  MOVFF  03,121
1B2E:  MOVFF  02,120
1B32:  MOVFF  01,11F
1B36:  MOVFF  00,11E
1B3A:  MOVLW  AB
1B3C:  MOVLB  1
1B3E:  MOVWF  x25
1B40:  MOVLW  E1
1B42:  MOVWF  x24
1B44:  MOVLW  9E
1B46:  MOVWF  x23
1B48:  MOVLW  82
1B4A:  MOVWF  x22
1B4C:  MOVLB  0
1B4E:  CALL   0D06
1B52:  MOVFF  03,114
1B56:  MOVFF  02,113
1B5A:  MOVFF  01,112
1B5E:  MOVFF  00,111
....................  
....................       res = y*res/r; 
1B62:  MOVFF  10C,11D
1B66:  MOVFF  10B,11C
1B6A:  MOVFF  10A,11B
1B6E:  MOVFF  109,11A
1B72:  MOVFF  110,121
1B76:  MOVFF  10F,120
1B7A:  MOVFF  10E,11F
1B7E:  MOVFF  10D,11E
1B82:  CALL   12CE
1B86:  MOVFF  00,11A
1B8A:  MOVFF  01,11B
1B8E:  MOVFF  02,11C
1B92:  MOVFF  03,11D
1B96:  MOVFF  03,121
1B9A:  MOVFF  02,120
1B9E:  MOVFF  01,11F
1BA2:  MOVFF  00,11E
1BA6:  MOVFF  114,125
1BAA:  MOVFF  113,124
1BAE:  MOVFF  112,123
1BB2:  MOVFF  111,122
1BB6:  CALL   0BA8
1BBA:  MOVFF  03,110
1BBE:  MOVFF  02,10F
1BC2:  MOVFF  01,10E
1BC6:  MOVFF  00,10D
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1BCA:  MOVLW  01
1BCC:  MOVLB  1
1BCE:  MOVWF  x1B
1BD0:  MOVLW  05
1BD2:  MOVWF  FE9
1BD4:  MOVFF  11B,FEA
1BD8:  MOVLW  7E
1BDA:  SUBWF  FEF,W
1BDC:  MOVWF  x19
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1BDE:  BTFSC  x19.7
1BE0:  BRA    1BE4
1BE2:  BRA    1C0C
....................          r = -(float32)-n; 
1BE4:  MOVLW  00
1BE6:  BSF    FD8.0
1BE8:  SUBFWB x19,W
1BEA:  CLRF   x1B
1BEC:  MOVWF  x1A
1BEE:  BTFSC  x1A.7
1BF0:  DECF   x1B,F
1BF2:  MOVLB  0
1BF4:  RCALL  1786
1BF6:  MOVFF  00,111
1BFA:  MOVF   01,W
1BFC:  XORLW  80
1BFE:  MOVLB  1
1C00:  MOVWF  x12
1C02:  MOVFF  02,113
1C06:  MOVFF  03,114
....................       else 
1C0A:  BRA    1C2C
....................          r = (float32)n; 
1C0C:  CLRF   x1B
1C0E:  MOVFF  119,11A
1C12:  BTFSC  x1A.7
1C14:  DECF   x1B,F
1C16:  MOVLB  0
1C18:  RCALL  1786
1C1A:  MOVFF  03,114
1C1E:  MOVFF  02,113
1C22:  MOVFF  01,112
1C26:  MOVFF  00,111
1C2A:  MOVLB  1
....................  
....................       res += r*LN2; 
1C2C:  MOVFF  114,11D
1C30:  MOVFF  113,11C
1C34:  MOVFF  112,11B
1C38:  MOVFF  111,11A
1C3C:  MOVLW  18
1C3E:  MOVWF  x21
1C40:  MOVLW  72
1C42:  MOVWF  x20
1C44:  MOVLW  31
1C46:  MOVWF  x1F
1C48:  MOVLW  7E
1C4A:  MOVWF  x1E
1C4C:  MOVLB  0
1C4E:  CALL   12CE
1C52:  BCF    FD8.1
1C54:  MOVFF  110,121
1C58:  MOVFF  10F,120
1C5C:  MOVFF  10E,11F
1C60:  MOVFF  10D,11E
1C64:  MOVFF  03,125
1C68:  MOVFF  02,124
1C6C:  MOVFF  01,123
1C70:  MOVFF  00,122
1C74:  CALL   0D06
1C78:  MOVFF  03,110
1C7C:  MOVFF  02,10F
1C80:  MOVFF  01,10E
1C84:  MOVFF  00,10D
....................    } 
....................  
....................    else 
1C88:  BRA    1C96
....................       res = 0.0; 
1C8A:  MOVLB  1
1C8C:  CLRF   x10
1C8E:  CLRF   x0F
1C90:  CLRF   x0E
1C92:  CLRF   x0D
1C94:  MOVLB  0
....................  
....................    return(res); 
1C96:  MOVFF  10D,00
1C9A:  MOVFF  10E,01
1C9E:  MOVFF  10F,02
1CA2:  MOVFF  110,03
.................... } 
1CA6:  GOTO   1E82 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B5,1) 
.................... #define   Damper_off        output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Motor_on          output_bit(PIN_C0,1) 
.................... #define   Motor_off         output_bit(PIN_C0,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=8,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
171C:  MOVLB  1
171E:  RLCF   x04,W
1720:  MOVWF  00
1722:  RLCF   00,F
1724:  MOVLW  FC
1726:  ANDWF  00,F
1728:  MOVFF  00,01
172C:  MOVF   FC2,W
172E:  ANDLW  C3
1730:  IORWF  00,W
1732:  MOVWF  FC2
1734:  CLRF   16
1736:  BTFSC  FF2.7
1738:  BSF    16.7
173A:  BCF    FF2.7
173C:  MOVLW  0A
173E:  MOVWF  x35
1740:  MOVLB  0
1742:  CALL   00B6
1746:  BTFSC  16.7
1748:  BSF    FF2.7
174A:  BSF    FC2.1
174C:  BTFSC  FC2.1
174E:  BRA    174C
1750:  MOVFF  FC4,10A
1754:  MOVFF  FC3,109
1758:  MOVLB  0
175A:  CALL   0B72
175E:  MOVFF  03,108
1762:  MOVFF  02,107
1766:  MOVFF  01,106
176A:  MOVFF  00,105
176E:  MOVFF  105,00
1772:  MOVFF  106,01
1776:  MOVFF  107,02
177A:  MOVFF  108,03
.................... } 
177E:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
01F2:  MOVLB  1
01F4:  MOVF   x32,F
01F6:  BNZ   01FE
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
01F8:  BCF    F8B.1
01FA:  BCF    F94.1
....................    } 
....................    else 
01FC:  BRA    0202
....................    { 
....................       Pantalla_on; 
01FE:  BSF    F8B.1
0200:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0202:  MOVLB  0
0204:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1CAA:  MOVLB  1
1CAC:  CLRF   x04
1CAE:  MOVLB  0
1CB0:  RCALL  171C
1CB2:  MOVFF  00,100
1CB6:  MOVFF  01,101
1CBA:  MOVFF  02,102
1CBE:  MOVFF  03,103
1CC2:  MOVFF  03,11D
1CC6:  MOVFF  02,11C
1CCA:  MOVFF  01,11B
1CCE:  MOVFF  00,11A
1CD2:  MOVLB  1
1CD4:  CLRF   x21
1CD6:  CLRF   x20
1CD8:  MOVLW  20
1CDA:  MOVWF  x1F
1CDC:  MOVLW  81
1CDE:  MOVWF  x1E
1CE0:  MOVLB  0
1CE2:  CALL   12CE
1CE6:  MOVFF  00,100
1CEA:  MOVFF  01,101
1CEE:  MOVFF  02,102
1CF2:  MOVFF  03,103
1CF6:  MOVFF  03,121
1CFA:  MOVFF  02,120
1CFE:  MOVFF  01,11F
1D02:  MOVFF  00,11E
1D06:  MOVLB  1
1D08:  CLRF   x25
1D0A:  MOVLW  C0
1D0C:  MOVWF  x24
1D0E:  MOVLW  7F
1D10:  MOVWF  x23
1D12:  MOVLW  88
1D14:  MOVWF  x22
1D16:  MOVLB  0
1D18:  CALL   0BA8
1D1C:  MOVFF  03,73
1D20:  MOVFF  02,72
1D24:  MOVFF  01,71
1D28:  MOVFF  00,70
....................     Voltaje1=sensores(1)*5/1023; 
1D2C:  MOVLW  01
1D2E:  MOVLB  1
1D30:  MOVWF  x04
1D32:  MOVLB  0
1D34:  RCALL  171C
1D36:  MOVFF  00,100
1D3A:  MOVFF  01,101
1D3E:  MOVFF  02,102
1D42:  MOVFF  03,103
1D46:  MOVFF  03,11D
1D4A:  MOVFF  02,11C
1D4E:  MOVFF  01,11B
1D52:  MOVFF  00,11A
1D56:  MOVLB  1
1D58:  CLRF   x21
1D5A:  CLRF   x20
1D5C:  MOVLW  20
1D5E:  MOVWF  x1F
1D60:  MOVLW  81
1D62:  MOVWF  x1E
1D64:  MOVLB  0
1D66:  CALL   12CE
1D6A:  MOVFF  00,100
1D6E:  MOVFF  01,101
1D72:  MOVFF  02,102
1D76:  MOVFF  03,103
1D7A:  MOVFF  03,121
1D7E:  MOVFF  02,120
1D82:  MOVFF  01,11F
1D86:  MOVFF  00,11E
1D8A:  MOVLB  1
1D8C:  CLRF   x25
1D8E:  MOVLW  C0
1D90:  MOVWF  x24
1D92:  MOVLW  7F
1D94:  MOVWF  x23
1D96:  MOVLW  88
1D98:  MOVWF  x22
1D9A:  MOVLB  0
1D9C:  CALL   0BA8
1DA0:  MOVFF  03,77
1DA4:  MOVFF  02,76
1DA8:  MOVFF  01,75
1DAC:  MOVFF  00,74
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1DB0:  MOVLB  1
1DB2:  CLRF   x21
1DB4:  CLRF   x20
1DB6:  MOVLW  20
1DB8:  MOVWF  x1F
1DBA:  MOVLW  81
1DBC:  MOVWF  x1E
1DBE:  MOVFF  77,125
1DC2:  MOVFF  76,124
1DC6:  MOVFF  75,123
1DCA:  MOVFF  74,122
1DCE:  MOVLB  0
1DD0:  CALL   0BA8
1DD4:  MOVFF  00,100
1DD8:  MOVFF  01,101
1DDC:  MOVFF  02,102
1DE0:  MOVFF  03,103
1DE4:  BSF    FD8.1
1DE6:  MOVFF  03,121
1DEA:  MOVFF  02,120
1DEE:  MOVFF  01,11F
1DF2:  MOVFF  00,11E
1DF6:  MOVLB  1
1DF8:  CLRF   x25
1DFA:  CLRF   x24
1DFC:  CLRF   x23
1DFE:  MOVLW  7F
1E00:  MOVWF  x22
1E02:  MOVLB  0
1E04:  CALL   0D06
1E08:  MOVFF  6B,121
1E0C:  MOVFF  6A,120
1E10:  MOVFF  69,11F
1E14:  MOVFF  68,11E
1E18:  MOVFF  03,125
1E1C:  MOVFF  02,124
1E20:  MOVFF  01,123
1E24:  MOVFF  00,122
1E28:  CALL   0BA8
1E2C:  MOVFF  03,6F
1E30:  MOVFF  02,6E
1E34:  MOVFF  01,6D
1E38:  MOVFF  00,6C
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
1E3C:  MOVFF  6F,121
1E40:  MOVFF  6E,120
1E44:  MOVFF  6D,11F
1E48:  MOVFF  6C,11E
1E4C:  MOVFF  5B,125
1E50:  MOVFF  5A,124
1E54:  MOVFF  59,123
1E58:  MOVFF  58,122
1E5C:  CALL   0BA8
1E60:  MOVFF  00,100
1E64:  MOVFF  01,101
1E68:  MOVFF  02,102
1E6C:  MOVFF  03,103
1E70:  MOVFF  03,108
1E74:  MOVFF  02,107
1E78:  MOVFF  01,106
1E7C:  MOVFF  00,105
1E80:  BRA    17D6
1E82:  MOVFF  00,100
1E86:  MOVFF  01,101
1E8A:  MOVFF  02,102
1E8E:  MOVFF  03,103
1E92:  MOVFF  03,121
1E96:  MOVFF  02,120
1E9A:  MOVFF  01,11F
1E9E:  MOVFF  00,11E
1EA2:  MOVFF  57,125
1EA6:  MOVFF  56,124
1EAA:  MOVFF  55,123
1EAE:  MOVFF  54,122
1EB2:  CALL   0BA8
1EB6:  MOVFF  00,100
1EBA:  MOVFF  01,101
1EBE:  MOVFF  02,102
1EC2:  MOVFF  03,103
1EC6:  MOVLB  1
1EC8:  CLRF   x21
1ECA:  CLRF   x20
1ECC:  CLRF   x1F
1ECE:  MOVLW  7F
1ED0:  MOVWF  x1E
1ED2:  MOVFF  5F,125
1ED6:  MOVFF  5E,124
1EDA:  MOVFF  5D,123
1EDE:  MOVFF  5C,122
1EE2:  MOVLB  0
1EE4:  CALL   0BA8
1EE8:  MOVFF  FEA,105
1EEC:  MOVFF  FE9,104
1EF0:  BCF    FD8.1
1EF2:  MOVFF  103,121
1EF6:  MOVFF  102,120
1EFA:  MOVFF  101,11F
1EFE:  MOVFF  100,11E
1F02:  MOVFF  03,125
1F06:  MOVFF  02,124
1F0A:  MOVFF  01,123
1F0E:  MOVFF  00,122
1F12:  CALL   0D06
1F16:  MOVFF  105,FEA
1F1A:  MOVFF  104,FE9
1F1E:  MOVLB  1
1F20:  CLRF   x21
1F22:  CLRF   x20
1F24:  CLRF   x1F
1F26:  MOVLW  7F
1F28:  MOVWF  x1E
1F2A:  MOVFF  03,125
1F2E:  MOVFF  02,124
1F32:  MOVFF  01,123
1F36:  MOVFF  00,122
1F3A:  MOVLB  0
1F3C:  CALL   0BA8
1F40:  MOVFF  03,63
1F44:  MOVFF  02,62
1F48:  MOVFF  01,61
1F4C:  MOVFF  00,60
....................     TC=TK-273.15; 
1F50:  BSF    FD8.1
1F52:  MOVFF  63,121
1F56:  MOVFF  62,120
1F5A:  MOVFF  61,11F
1F5E:  MOVFF  60,11E
1F62:  MOVLW  33
1F64:  MOVLB  1
1F66:  MOVWF  x25
1F68:  MOVLW  93
1F6A:  MOVWF  x24
1F6C:  MOVLW  08
1F6E:  MOVWF  x23
1F70:  MOVLW  87
1F72:  MOVWF  x22
1F74:  MOVLB  0
1F76:  CALL   0D06
1F7A:  MOVFF  03,67
1F7E:  MOVFF  02,66
1F82:  MOVFF  01,65
1F86:  MOVFF  00,64
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
1F8A:  MOVF   2C,W
1F8C:  SUBLW  0A
1F8E:  BNZ   1FF0
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
1F90:  MOVLB  1
1F92:  CLRF   x04
1F94:  MOVLB  0
1F96:  CALL   171C
1F9A:  MOVFF  00,100
1F9E:  MOVFF  01,101
1FA2:  MOVFF  02,102
1FA6:  MOVFF  03,103
1FAA:  MOVFF  FEA,105
1FAE:  MOVFF  FE9,104
1FB2:  BCF    FD8.1
1FB4:  MOVFF  03,121
1FB8:  MOVFF  02,120
1FBC:  MOVFF  01,11F
1FC0:  MOVFF  00,11E
1FC4:  MOVFF  BB,125
1FC8:  MOVFF  BA,124
1FCC:  MOVFF  B9,123
1FD0:  MOVFF  B8,122
1FD4:  CALL   0D06
1FD8:  MOVFF  105,FEA
1FDC:  MOVFF  104,FE9
1FE0:  MOVFF  03,97
1FE4:  MOVFF  02,96
1FE8:  MOVFF  01,95
1FEC:  MOVFF  00,94
....................     } 
....................     if(negativo==20) 
1FF0:  MOVF   2C,W
1FF2:  SUBLW  14
1FF4:  BNZ   2056
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
1FF6:  MOVLB  1
1FF8:  CLRF   x04
1FFA:  MOVLB  0
1FFC:  CALL   171C
2000:  MOVFF  00,100
2004:  MOVFF  01,101
2008:  MOVFF  02,102
200C:  MOVFF  03,103
2010:  MOVFF  FEA,105
2014:  MOVFF  FE9,104
2018:  BSF    FD8.1
201A:  MOVFF  03,121
201E:  MOVFF  02,120
2022:  MOVFF  01,11F
2026:  MOVFF  00,11E
202A:  MOVFF  BB,125
202E:  MOVFF  BA,124
2032:  MOVFF  B9,123
2036:  MOVFF  B8,122
203A:  CALL   0D06
203E:  MOVFF  105,FEA
2042:  MOVFF  104,FE9
2046:  MOVFF  03,97
204A:  MOVFF  02,96
204E:  MOVFF  01,95
2052:  MOVFF  00,94
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
2056:  MOVFF  97,11D
205A:  MOVFF  96,11C
205E:  MOVFF  95,11B
2062:  MOVFF  94,11A
2066:  MOVFF  97,121
206A:  MOVFF  96,120
206E:  MOVFF  95,11F
2072:  MOVFF  94,11E
2076:  CALL   12CE
207A:  MOVFF  03,9B
207E:  MOVFF  02,9A
2082:  MOVFF  01,99
2086:  MOVFF  00,98
....................     x_cubo=x_uno*x_cuadrado; 
208A:  MOVFF  97,11D
208E:  MOVFF  96,11C
2092:  MOVFF  95,11B
2096:  MOVFF  94,11A
209A:  MOVFF  9B,121
209E:  MOVFF  9A,120
20A2:  MOVFF  99,11F
20A6:  MOVFF  98,11E
20AA:  CALL   12CE
20AE:  MOVFF  03,9F
20B2:  MOVFF  02,9E
20B6:  MOVFF  01,9D
20BA:  MOVFF  00,9C
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
20BE:  MOVFF  9F,11D
20C2:  MOVFF  9E,11C
20C6:  MOVFF  9D,11B
20CA:  MOVFF  9C,11A
20CE:  MOVFF  7B,121
20D2:  MOVFF  7A,120
20D6:  MOVFF  79,11F
20DA:  MOVFF  78,11E
20DE:  CALL   12CE
20E2:  MOVFF  00,100
20E6:  MOVFF  01,101
20EA:  MOVFF  02,102
20EE:  MOVFF  03,103
20F2:  MOVFF  9B,11D
20F6:  MOVFF  9A,11C
20FA:  MOVFF  99,11B
20FE:  MOVFF  98,11A
2102:  MOVFF  7F,121
2106:  MOVFF  7E,120
210A:  MOVFF  7D,11F
210E:  MOVFF  7C,11E
2112:  CALL   12CE
2116:  BCF    FD8.1
2118:  MOVFF  103,121
211C:  MOVFF  102,120
2120:  MOVFF  101,11F
2124:  MOVFF  100,11E
2128:  MOVFF  03,125
212C:  MOVFF  02,124
2130:  MOVFF  01,123
2134:  MOVFF  00,122
2138:  CALL   0D06
213C:  MOVFF  00,100
2140:  MOVFF  01,101
2144:  MOVFF  02,102
2148:  MOVFF  03,103
214C:  MOVFF  97,11D
2150:  MOVFF  96,11C
2154:  MOVFF  95,11B
2158:  MOVFF  94,11A
215C:  MOVFF  83,121
2160:  MOVFF  82,120
2164:  MOVFF  81,11F
2168:  MOVFF  80,11E
216C:  CALL   12CE
2170:  BCF    FD8.1
2172:  MOVFF  103,121
2176:  MOVFF  102,120
217A:  MOVFF  101,11F
217E:  MOVFF  100,11E
2182:  MOVFF  03,125
2186:  MOVFF  02,124
218A:  MOVFF  01,123
218E:  MOVFF  00,122
2192:  CALL   0D06
2196:  MOVFF  00,100
219A:  MOVFF  01,101
219E:  MOVFF  02,102
21A2:  MOVFF  03,103
21A6:  BCF    FD8.1
21A8:  MOVFF  03,121
21AC:  MOVFF  02,120
21B0:  MOVFF  01,11F
21B4:  MOVFF  00,11E
21B8:  MOVFF  87,125
21BC:  MOVFF  86,124
21C0:  MOVFF  85,123
21C4:  MOVFF  84,122
21C8:  CALL   0D06
21CC:  MOVFF  03,AF
21D0:  MOVFF  02,AE
21D4:  MOVFF  01,AD
21D8:  MOVFF  00,AC
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
21DC:  BSF    FD8.1
21DE:  MOVFF  AF,121
21E2:  MOVFF  AE,120
21E6:  MOVFF  AD,11F
21EA:  MOVFF  AC,11E
21EE:  MOVLW  0A
21F0:  MOVLB  1
21F2:  MOVWF  x25
21F4:  MOVLW  D7
21F6:  MOVWF  x24
21F8:  MOVLW  23
21FA:  MOVWF  x23
21FC:  MOVLW  7B
21FE:  MOVWF  x22
2200:  MOVLB  0
2202:  CALL   0D06
2206:  MOVFF  03,AF
220A:  MOVFF  02,AE
220E:  MOVFF  01,AD
2212:  MOVFF  00,AC
....................     if(Velocidad<0.0) 
2216:  MOVFF  AF,11D
221A:  MOVFF  AE,11C
221E:  MOVFF  AD,11B
2222:  MOVFF  AC,11A
2226:  MOVLB  1
2228:  CLRF   x21
222A:  CLRF   x20
222C:  CLRF   x1F
222E:  CLRF   x1E
2230:  MOVLB  0
2232:  CALL   166A
2236:  BNC   2240
....................      {Velocidad=0.0;} 
2238:  CLRF   xAF
223A:  CLRF   xAE
223C:  CLRF   xAD
223E:  CLRF   xAC
....................       
....................      if(l>=media) 
2240:  MOVF   xFC,W
2242:  SUBWF  28,W
2244:  BNC   2248
....................        {l=0;} 
2246:  CLRF   28
....................       
....................      promedio[l]=Velocidad;l++; 
2248:  MOVF   28,W
224A:  MULLW  04
224C:  MOVF   FF3,W
224E:  CLRF   03
2250:  ADDLW  CC
2252:  MOVWF  FE9
2254:  MOVLW  00
2256:  ADDWFC 03,W
2258:  MOVWF  FEA
225A:  MOVFF  AC,FEF
225E:  MOVFF  AD,FEC
2262:  MOVFF  AE,FEC
2266:  MOVFF  AF,FEC
226A:  INCF   28,F
....................      Flujo2=0; 
226C:  CLRF   x8F
226E:  CLRF   x8E
2270:  CLRF   x8D
2272:  CLRF   x8C
....................         for(h=0;h<=(media-1);h++) 
2274:  CLRF   29
2276:  MOVLW  01
2278:  SUBWF  xFC,W
227A:  SUBWF  29,W
227C:  BZ    2280
227E:  BC    22EC
....................         { 
....................            Flujo2+=promedio[h]; 
2280:  MOVF   29,W
2282:  MULLW  04
2284:  MOVF   FF3,W
2286:  CLRF   03
2288:  ADDLW  CC
228A:  MOVWF  FE9
228C:  MOVLW  00
228E:  ADDWFC 03,W
2290:  MOVWF  FEA
2292:  MOVFF  FEF,00
2296:  MOVFF  FEC,01
229A:  MOVFF  FEC,02
229E:  MOVFF  FEC,03
22A2:  MOVFF  FEA,101
22A6:  MOVFF  FE9,100
22AA:  BCF    FD8.1
22AC:  MOVFF  8F,121
22B0:  MOVFF  8E,120
22B4:  MOVFF  8D,11F
22B8:  MOVFF  8C,11E
22BC:  MOVFF  03,125
22C0:  MOVFF  02,124
22C4:  MOVFF  01,123
22C8:  MOVFF  00,122
22CC:  CALL   0D06
22D0:  MOVFF  101,FEA
22D4:  MOVFF  100,FE9
22D8:  MOVFF  03,8F
22DC:  MOVFF  02,8E
22E0:  MOVFF  01,8D
22E4:  MOVFF  00,8C
....................         }  
22E8:  INCF   29,F
22EA:  BRA    2276
....................            Flujo2=(Flujo2/media)*Ajuste1;  
22EC:  MOVLB  1
22EE:  CLRF   x0A
22F0:  MOVFF  FC,109
22F4:  MOVLB  0
22F6:  CALL   0B72
22FA:  MOVFF  8F,121
22FE:  MOVFF  8E,120
2302:  MOVFF  8D,11F
2306:  MOVFF  8C,11E
230A:  MOVFF  03,125
230E:  MOVFF  02,124
2312:  MOVFF  01,123
2316:  MOVFF  00,122
231A:  CALL   0BA8
231E:  MOVFF  00,100
2322:  MOVFF  01,101
2326:  MOVFF  02,102
232A:  MOVFF  03,103
232E:  MOVFF  03,11D
2332:  MOVFF  02,11C
2336:  MOVFF  01,11B
233A:  MOVFF  00,11A
233E:  MOVFF  BF,121
2342:  MOVFF  BE,120
2346:  MOVFF  BD,11F
234A:  MOVFF  BC,11E
234E:  CALL   12CE
2352:  MOVFF  03,8F
2356:  MOVFF  02,8E
235A:  MOVFF  01,8D
235E:  MOVFF  00,8C
....................            return Flujo2; 
2362:  MOVFF  8C,00
2366:  MOVFF  8D,01
236A:  MOVFF  8E,02
236E:  MOVFF  8F,03
.................... } 
2372:  GOTO   614C (RETURN)
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
2376:  MOVF   2D,W
2378:  SUBLW  14
237A:  BTFSS  FD8.2
237C:  BRA    2470
237E:  BTFSS  31.1
2380:  BRA    2470
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
2382:  BSF    FD8.1
2384:  MOVFF  42,121
2388:  MOVFF  41,120
238C:  MOVFF  40,11F
2390:  MOVFF  3F,11E
2394:  MOVFF  8B,125
2398:  MOVFF  8A,124
239C:  MOVFF  89,123
23A0:  MOVFF  88,122
23A4:  CALL   0D06
23A8:  MOVFF  03,CB
23AC:  MOVFF  02,CA
23B0:  MOVFF  01,C9
23B4:  MOVFF  00,C8
....................       if(error<0.2&&error>-0.2) 
23B8:  MOVFF  CB,11D
23BC:  MOVFF  CA,11C
23C0:  MOVFF  C9,11B
23C4:  MOVFF  C8,11A
23C8:  MOVLW  CD
23CA:  MOVLB  1
23CC:  MOVWF  x21
23CE:  MOVLW  CC
23D0:  MOVWF  x20
23D2:  MOVLW  4C
23D4:  MOVWF  x1F
23D6:  MOVLW  7C
23D8:  MOVWF  x1E
23DA:  MOVLB  0
23DC:  CALL   166A
23E0:  BNC   240C
23E2:  MOVLW  CD
23E4:  MOVLB  1
23E6:  MOVWF  x1D
23E8:  MOVLW  CC
23EA:  MOVWF  x1C
23EC:  MOVWF  x1B
23EE:  MOVLW  7C
23F0:  MOVWF  x1A
23F2:  MOVFF  CB,121
23F6:  MOVFF  CA,120
23FA:  MOVFF  C9,11F
23FE:  MOVFF  C8,11E
2402:  MOVLB  0
2404:  CALL   166A
2408:  BNC   240C
....................       {} 
....................       else 
240A:  BRA    2458
....................       { 
....................          if(error>0.0) 
240C:  MOVLB  1
240E:  CLRF   x1D
2410:  CLRF   x1C
2412:  CLRF   x1B
2414:  CLRF   x1A
2416:  MOVFF  CB,121
241A:  MOVFF  CA,120
241E:  MOVFF  C9,11F
2422:  MOVFF  C8,11E
2426:  MOVLB  0
2428:  CALL   166A
242C:  BNC   2432
....................          {tmp+=1;} 
242E:  MOVLW  01
2430:  ADDWF  2A,F
....................                 
....................          if(error<-0.0) 
2432:  MOVFF  CB,11D
2436:  MOVFF  CA,11C
243A:  MOVFF  C9,11B
243E:  MOVFF  C8,11A
2442:  MOVLB  1
2444:  CLRF   x21
2446:  CLRF   x20
2448:  CLRF   x1F
244A:  CLRF   x1E
244C:  MOVLB  0
244E:  CALL   166A
2452:  BNC   2458
....................          {tmp-=1;}   
2454:  MOVLW  01
2456:  SUBWF  2A,F
....................       } 
....................        
....................       if(tmp>251) 
2458:  MOVF   2A,W
245A:  SUBLW  FB
245C:  BC    2462
....................       {tmp=251;} 
245E:  MOVLW  FB
2460:  MOVWF  2A
....................       if(tmp<4)          
2462:  MOVF   2A,W
2464:  SUBLW  03
2466:  BNC   246C
....................       {tmp=4;}       
2468:  MOVLW  04
246A:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
246C:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Manual==20) 
2470:  MOVF   2E,W
2472:  SUBLW  14
2474:  BNZ   247E
....................    { 
....................       tmp=251; 
2476:  MOVLW  FB
2478:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
247A:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Semi==20) 
247E:  MOVF   2F,W
2480:  SUBLW  14
2482:  BNZ   2488
....................    { 
....................       set_pwm1_duty (ValorSemi); 
2484:  MOVFF  30,FBE
....................    } 
.................... } 
2488:  GOTO   6164 (RETURN)
....................  
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
*
030C:  BTFSC  32.3
030E:  BRA    03CA
....................       { 
....................       delay_ms(500); 
0310:  MOVLW  02
0312:  MOVLB  1
0314:  MOVWF  x32
0316:  MOVLW  FA
0318:  MOVWF  x35
031A:  MOVLB  0
031C:  RCALL  00B6
031E:  MOVLB  1
0320:  DECFSZ x32,F
0322:  BRA    0316
....................          if(input(PIN_B0)) 
0324:  BSF    F93.0
0326:  BTFSS  F81.0
0328:  BRA    03C8
....................          { 
....................             lcd_init(); 
032A:  MOVLB  0
032C:  BRA    017E
....................             intensidadpantalla(contraste); 
032E:  MOVFF  21,132
0332:  RCALL  01F2
....................             lcd_gotoxy(1,1); 
0334:  MOVLW  01
0336:  MOVLB  1
0338:  MOVWF  x35
033A:  MOVWF  x36
033C:  MOVLB  0
033E:  RCALL  0206
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
0340:  MOVLW  D0
0342:  MOVWF  FF6
0344:  MOVLW  03
0346:  MOVWF  FF7
0348:  RCALL  02EC
....................             lcd_gotoxy(1,2); 
034A:  MOVLW  01
034C:  MOVLB  1
034E:  MOVWF  x35
0350:  MOVLW  02
0352:  MOVWF  x36
0354:  MOVLB  0
0356:  RCALL  0206
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
0358:  MOVLW  E6
035A:  MOVWF  FF6
035C:  MOVLW  03
035E:  MOVWF  FF7
0360:  RCALL  02EC
....................             lcd_gotoxy(1,3); 
0362:  MOVLW  01
0364:  MOVLB  1
0366:  MOVWF  x35
0368:  MOVLW  03
036A:  MOVWF  x36
036C:  MOVLB  0
036E:  RCALL  0206
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
0370:  MOVLW  FC
0372:  MOVWF  FF6
0374:  MOVLW  03
0376:  MOVWF  FF7
0378:  RCALL  02EC
....................             lcd_gotoxy(1,4); 
037A:  MOVLW  01
037C:  MOVLB  1
037E:  MOVWF  x35
0380:  MOVLW  04
0382:  MOVWF  x36
0384:  MOVLB  0
0386:  RCALL  0206
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
0388:  MOVLW  12
038A:  MOVWF  FF6
038C:  MOVLW  04
038E:  MOVWF  FF7
0390:  RCALL  02EC
....................             delay_ms(2000); 
0392:  MOVLW  08
0394:  MOVLB  1
0396:  MOVWF  x32
0398:  MOVLW  FA
039A:  MOVWF  x35
039C:  MOVLB  0
039E:  RCALL  00B6
03A0:  MOVLB  1
03A2:  DECFSZ x32,F
03A4:  BRA    0398
....................             printf(lcd_putc,"\f"); 
03A6:  MOVLW  0C
03A8:  MOVWF  x34
03AA:  MOVLB  0
03AC:  RCALL  0280
....................             inicio=1; 
03AE:  BSF    32.3
....................             Menu=0; 
03B0:  CLRF   18
....................             ModoSleep=0; 
03B2:  BCF    32.2
....................             delay_ms(500); 
03B4:  MOVLW  02
03B6:  MOVLB  1
03B8:  MOVWF  x32
03BA:  MOVLW  FA
03BC:  MOVWF  x35
03BE:  MOVLB  0
03C0:  RCALL  00B6
03C2:  MOVLB  1
03C4:  DECFSZ x32,F
03C6:  BRA    03BA
03C8:  MOVLB  0
....................          } 
....................       } 
.................... } 
....................  
03CA:  BCF    FF2.1
03CC:  GOTO   0060
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer1(25561); 
....................    set_timer1(36530);  // 5 ms 
*
0428:  MOVLW  8E
042A:  MOVWF  FCF
042C:  MOVLW  B2
042E:  MOVWF  FCE
....................    //set_timer1(45530);  // 5 ms 
....................    //set_timer1(6064);  // 5  ms 
....................    tiempos++; 
0430:  INCF   4C,F
0432:  BTFSC  FD8.2
0434:  INCF   4D,F
....................    tiempos2++; 
0436:  INCF   50,F
0438:  BTFSC  FD8.2
043A:  INCF   51,F
....................     
....................    if(tiempos2==20) 
043C:  MOVF   50,W
043E:  SUBLW  14
0440:  BNZ   044C
0442:  MOVF   51,F
0444:  BNZ   044C
....................    {tiempos2=0;Lectura2=1;} 
0446:  CLRF   51
0448:  CLRF   50
044A:  BSF    32.5
....................     
....................    if(flag_latencia==1) 
044C:  BTFSS  32.0
044E:  BRA    0456
....................       { 
....................          t_latencia++;          
0450:  INCF   4E,F
0452:  BTFSC  FD8.2
0454:  INCF   4F,F
....................       } 
....................     
....................    if(t_latencia>=3000) 
0456:  MOVF   4F,W
0458:  SUBLW  0A
045A:  BC    0468
045C:  XORLW  FF
045E:  BNZ   0466
0460:  MOVF   4E,W
0462:  SUBLW  B7
0464:  BC    0468
....................    {Latencia=1;} 
0466:  BSF    32.1
....................     
....................    if(flag_iniciodamper==1) 
0468:  BTFSS  32.6
046A:  BRA    0488
....................    { 
....................       t_iniciodamper++; 
046C:  INCF   52,F
046E:  BTFSC  FD8.2
0470:  INCF   53,F
....................       if(t_iniciodamper>=12000) 
0472:  MOVF   53,W
0474:  SUBLW  2D
0476:  BC    0488
0478:  XORLW  FF
047A:  BNZ   0482
047C:  MOVF   52,W
047E:  SUBLW  DF
0480:  BC    0488
....................       { 
....................          estadomv=1;Motor_on; 
0482:  BSF    31.1
0484:  BSF    F8B.0
0486:  BCF    F94.0
....................       } 
....................    } 
....................     
....................    if(t_iniciodamper>=18000) 
0488:  MOVF   53,W
048A:  SUBLW  45
048C:  BC    049C
048E:  XORLW  FF
0490:  BNZ   0498
0492:  MOVF   52,W
0494:  SUBLW  4F
0496:  BC    049C
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
0498:  BSF    32.7
049A:  BCF    32.6
....................    } 
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
049C:  MOVF   4C,W
049E:  SUBLW  C8
04A0:  BNZ   04AC
04A2:  MOVF   4D,F
04A4:  BNZ   04AC
....................    {tiempos=0;  
04A6:  CLRF   4D
04A8:  CLRF   4C
....................         Lectura=1; 
04AA:  BSF    32.4
....................    } 
.................... } 
....................  
04AC:  BCF    F9E.0
04AE:  GOTO   0060
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
10F8:  MOVLB  1
10FA:  DECFSZ x01,W
10FC:  BRA    116E
....................    {if(estadoalarma==0) 
10FE:  BTFSC  31.2
1100:  BRA    1136
1102:  CLRF   16
1104:  BTFSC  FF2.7
1106:  BSF    16.7
1108:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA          OFF");} 
110A:  MOVLW  02
110C:  MOVWF  x35
110E:  MOVFF  102,136
1112:  MOVLB  0
1114:  CALL   0206
1118:  BTFSC  16.7
111A:  BSF    FF2.7
111C:  MOVLW  B2
111E:  MOVWF  FF6
1120:  MOVLW  04
1122:  MOVWF  FF7
1124:  CLRF   16
1126:  BTFSC  FF2.7
1128:  BSF    16.7
112A:  BCF    FF2.7
112C:  CALL   02EC
1130:  BTFSC  16.7
1132:  BSF    FF2.7
1134:  MOVLB  1
....................    if(estadoalarma==1) 
1136:  BTFSS  31.2
1138:  BRA    116E
113A:  CLRF   16
113C:  BTFSC  FF2.7
113E:  BSF    16.7
1140:  BCF    FF2.7
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"ALARMA           ON");} 
1142:  MOVLW  02
1144:  MOVWF  x35
1146:  MOVFF  102,136
114A:  MOVLB  0
114C:  CALL   0206
1150:  BTFSC  16.7
1152:  BSF    FF2.7
1154:  MOVLW  C6
1156:  MOVWF  FF6
1158:  MOVLW  04
115A:  MOVWF  FF7
115C:  CLRF   16
115E:  BTFSC  FF2.7
1160:  BSF    16.7
1162:  BCF    FF2.7
1164:  CALL   02EC
1168:  BTFSC  16.7
116A:  BSF    FF2.7
116C:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
116E:  MOVF   x01,W
1170:  SUBLW  02
1172:  BNZ   11A8
1174:  CLRF   16
1176:  BTFSC  FF2.7
1178:  BSF    16.7
117A:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"SETPOINT           ");} 
117C:  MOVLW  02
117E:  MOVWF  x35
1180:  MOVFF  102,136
1184:  MOVLB  0
1186:  CALL   0206
118A:  BTFSC  16.7
118C:  BSF    FF2.7
118E:  MOVLW  DA
1190:  MOVWF  FF6
1192:  MOVLW  04
1194:  MOVWF  FF7
1196:  CLRF   16
1198:  BTFSC  FF2.7
119A:  BSF    16.7
119C:  BCF    FF2.7
119E:  CALL   02EC
11A2:  BTFSC  16.7
11A4:  BSF    FF2.7
11A6:  MOVLB  1
....................     
....................    if(x==3) 
11A8:  MOVF   x01,W
11AA:  SUBLW  03
11AC:  BNZ   11E2
11AE:  CLRF   16
11B0:  BTFSC  FF2.7
11B2:  BSF    16.7
11B4:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"CAMBIO CONTRASENA  ");} 
11B6:  MOVLW  02
11B8:  MOVWF  x35
11BA:  MOVFF  102,136
11BE:  MOVLB  0
11C0:  CALL   0206
11C4:  BTFSC  16.7
11C6:  BSF    FF2.7
11C8:  MOVLW  EE
11CA:  MOVWF  FF6
11CC:  MOVLW  04
11CE:  MOVWF  FF7
11D0:  CLRF   16
11D2:  BTFSC  FF2.7
11D4:  BSF    16.7
11D6:  BCF    FF2.7
11D8:  CALL   02EC
11DC:  BTFSC  16.7
11DE:  BSF    FF2.7
11E0:  MOVLB  1
....................     
....................    if(x==4) 
11E2:  MOVF   x01,W
11E4:  SUBLW  04
11E6:  BNZ   121C
11E8:  CLRF   16
11EA:  BTFSC  FF2.7
11EC:  BSF    16.7
11EE:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MEDIA MOVIL        ");} 
11F0:  MOVLW  02
11F2:  MOVWF  x35
11F4:  MOVFF  102,136
11F8:  MOVLB  0
11FA:  CALL   0206
11FE:  BTFSC  16.7
1200:  BSF    FF2.7
1202:  MOVLW  02
1204:  MOVWF  FF6
1206:  MOVLW  05
1208:  MOVWF  FF7
120A:  CLRF   16
120C:  BTFSC  FF2.7
120E:  BSF    16.7
1210:  BCF    FF2.7
1212:  CALL   02EC
1216:  BTFSC  16.7
1218:  BSF    FF2.7
121A:  MOVLB  1
....................     
....................    if(x==5) 
121C:  MOVF   x01,W
121E:  SUBLW  05
1220:  BNZ   1256
1222:  CLRF   16
1224:  BTFSC  FF2.7
1226:  BSF    16.7
1228:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"PUNTO ZERO         ");} 
122A:  MOVLW  02
122C:  MOVWF  x35
122E:  MOVFF  102,136
1232:  MOVLB  0
1234:  CALL   0206
1238:  BTFSC  16.7
123A:  BSF    FF2.7
123C:  MOVLW  16
123E:  MOVWF  FF6
1240:  MOVLW  05
1242:  MOVWF  FF7
1244:  CLRF   16
1246:  BTFSC  FF2.7
1248:  BSF    16.7
124A:  BCF    FF2.7
124C:  CALL   02EC
1250:  BTFSC  16.7
1252:  BSF    FF2.7
1254:  MOVLB  1
....................     
....................    if(x==6) 
1256:  MOVF   x01,W
1258:  SUBLW  06
125A:  BNZ   1290
125C:  CLRF   16
125E:  BTFSC  FF2.7
1260:  BSF    16.7
1262:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MANTENIMIENTO      ");} 
1264:  MOVLW  02
1266:  MOVWF  x35
1268:  MOVFF  102,136
126C:  MOVLB  0
126E:  CALL   0206
1272:  BTFSC  16.7
1274:  BSF    FF2.7
1276:  MOVLW  2A
1278:  MOVWF  FF6
127A:  MOVLW  05
127C:  MOVWF  FF7
127E:  CLRF   16
1280:  BTFSC  FF2.7
1282:  BSF    16.7
1284:  BCF    FF2.7
1286:  CALL   02EC
128A:  BTFSC  16.7
128C:  BSF    FF2.7
128E:  MOVLB  1
....................     
....................    if(x==7) 
1290:  MOVF   x01,W
1292:  SUBLW  07
1294:  BNZ   12CA
1296:  CLRF   16
1298:  BTFSC  FF2.7
129A:  BSF    16.7
129C:  BCF    FF2.7
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"MODO               ");} 
129E:  MOVLW  02
12A0:  MOVWF  x35
12A2:  MOVFF  102,136
12A6:  MOVLB  0
12A8:  CALL   0206
12AC:  BTFSC  16.7
12AE:  BSF    FF2.7
12B0:  MOVLW  3E
12B2:  MOVWF  FF6
12B4:  MOVLW  05
12B6:  MOVWF  FF7
12B8:  CLRF   16
12BA:  BTFSC  FF2.7
12BC:  BSF    16.7
12BE:  BCF    FF2.7
12C0:  CALL   02EC
12C4:  BTFSC  16.7
12C6:  BSF    FF2.7
12C8:  MOVLB  1
.................... } 
12CA:  MOVLB  0
12CC:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1780:  MOVFF  FC,FBE
.................... } 
1784:  RETLW  00
....................  
.................... void main () 
.................... { 
*
248C:  CLRF   FF8
248E:  BCF    FD0.7
2490:  BSF    07.7
2492:  CLRF   FEA
2494:  CLRF   FE9
2496:  MOVLW  64
2498:  MOVWF  18
249A:  MOVLW  08
249C:  MOVWF  19
249E:  MOVLW  02
24A0:  MOVWF  1A
24A2:  MOVLW  0B
24A4:  MOVWF  1B
24A6:  MOVLW  02
24A8:  MOVWF  1C
24AA:  MOVLW  03
24AC:  MOVWF  1D
24AE:  MOVLW  02
24B0:  MOVWF  1E
24B2:  MOVWF  1F
24B4:  MOVLW  04
24B6:  MOVWF  20
24B8:  MOVLW  0A
24BA:  MOVWF  21
24BC:  CLRF   22
24BE:  CLRF   23
24C0:  CLRF   24
24C2:  CLRF   25
24C4:  CLRF   26
24C6:  CLRF   27
24C8:  CLRF   28
24CA:  CLRF   29
24CC:  MOVWF  2A
24CE:  CLRF   2B
24D0:  MOVWF  2C
24D2:  MOVWF  2D
24D4:  MOVWF  2E
24D6:  MOVWF  2F
24D8:  CLRF   30
24DA:  BCF    31.0
24DC:  BCF    31.1
24DE:  BCF    31.2
24E0:  BCF    31.3
24E2:  BCF    31.4
24E4:  BCF    31.5
24E6:  BCF    31.6
24E8:  BCF    31.7
24EA:  BCF    32.0
24EC:  BCF    32.1
24EE:  CLRF   33
24F0:  CLRF   42
24F2:  CLRF   41
24F4:  CLRF   40
24F6:  CLRF   3F
24F8:  CLRF   46
24FA:  CLRF   45
24FC:  CLRF   44
24FE:  CLRF   43
2500:  CLRF   4A
2502:  CLRF   49
2504:  MOVLW  4B
2506:  MOVWF  48
2508:  MOVLW  86
250A:  MOVWF  47
250C:  BCF    32.3
250E:  BCF    32.4
2510:  BCF    32.5
2512:  BCF    32.6
2514:  BCF    32.7
2516:  BCF    4B.0
2518:  BCF    4B.1
251A:  BCF    4B.2
251C:  CLRF   4D
251E:  CLRF   4C
2520:  CLRF   4F
2522:  CLRF   4E
2524:  CLRF   51
2526:  CLRF   50
2528:  CLRF   53
252A:  CLRF   52
252C:  CLRF   57
252E:  MOVLW  E0
2530:  MOVWF  56
2532:  MOVLW  5D
2534:  MOVWF  55
2536:  MOVLW  8A
2538:  MOVWF  54
253A:  CLRF   5B
253C:  MOVLW  C0
253E:  MOVWF  5A
2540:  MOVLW  28
2542:  MOVWF  59
2544:  MOVLW  89
2546:  MOVWF  58
2548:  MOVLW  33
254A:  MOVWF  5F
254C:  MOVLW  13
254E:  MOVWF  5E
2550:  MOVLW  15
2552:  MOVWF  5D
2554:  MOVLW  87
2556:  MOVWF  5C
2558:  CLRF   x63
255A:  CLRF   x62
255C:  CLRF   x61
255E:  CLRF   x60
2560:  CLRF   x67
2562:  CLRF   x66
2564:  CLRF   x65
2566:  CLRF   x64
2568:  CLRF   x6B
256A:  CLRF   x6A
256C:  MOVLW  7A
256E:  MOVWF  x69
2570:  MOVLW  88
2572:  MOVWF  x68
2574:  CLRF   x6F
2576:  CLRF   x6E
2578:  CLRF   x6D
257A:  CLRF   x6C
257C:  CLRF   x73
257E:  CLRF   x72
2580:  CLRF   x71
2582:  CLRF   x70
2584:  CLRF   x77
2586:  CLRF   x76
2588:  CLRF   x75
258A:  CLRF   x74
258C:  MOVLW  19
258E:  MOVWF  x7B
2590:  MOVLW  53
2592:  MOVWF  x7A
2594:  MOVLW  18
2596:  MOVWF  x79
2598:  MOVLW  68
259A:  MOVWF  x78
259C:  MOVLW  E9
259E:  MOVWF  x7F
25A0:  MOVLW  BD
25A2:  MOVWF  x7E
25A4:  MOVLW  C6
25A6:  MOVWF  x7D
25A8:  MOVLW  71
25AA:  MOVWF  x7C
25AC:  MOVLW  BE
25AE:  MOVWF  x83
25B0:  MOVLW  96
25B2:  MOVWF  x82
25B4:  MOVLW  24
25B6:  MOVWF  x81
25B8:  MOVLW  7A
25BA:  MOVWF  x80
25BC:  MOVLW  F3
25BE:  MOVWF  x87
25C0:  MOVLW  5A
25C2:  MOVWF  x86
25C4:  MOVLW  AB
25C6:  MOVWF  x85
25C8:  MOVLW  81
25CA:  MOVWF  x84
25CC:  CLRF   x8B
25CE:  CLRF   x8A
25D0:  CLRF   x89
25D2:  CLRF   x88
25D4:  CLRF   x8F
25D6:  CLRF   x8E
25D8:  CLRF   x8D
25DA:  CLRF   x8C
25DC:  CLRF   x93
25DE:  CLRF   x92
25E0:  CLRF   x91
25E2:  CLRF   x90
25E4:  CLRF   x97
25E6:  CLRF   x96
25E8:  CLRF   x95
25EA:  CLRF   x94
25EC:  CLRF   x9B
25EE:  CLRF   x9A
25F0:  CLRF   x99
25F2:  CLRF   x98
25F4:  CLRF   x9F
25F6:  CLRF   x9E
25F8:  CLRF   x9D
25FA:  CLRF   x9C
25FC:  MOVLW  8B
25FE:  MOVWF  xA3
2600:  MOVLW  FD
2602:  MOVWF  xA2
2604:  MOVLW  65
2606:  MOVWF  xA1
2608:  MOVLW  7C
260A:  MOVWF  xA0
260C:  CLRF   xA7
260E:  CLRF   xA6
2610:  CLRF   xA5
2612:  CLRF   xA4
2614:  CLRF   xAB
2616:  CLRF   xAA
2618:  CLRF   xA9
261A:  CLRF   xA8
261C:  CLRF   xAF
261E:  CLRF   xAE
2620:  CLRF   xAD
2622:  CLRF   xAC
2624:  CLRF   xB3
2626:  CLRF   xB2
2628:  CLRF   xB1
262A:  CLRF   xB0
262C:  CLRF   xB7
262E:  CLRF   xB6
2630:  CLRF   xB5
2632:  CLRF   xB4
2634:  CLRF   xBB
2636:  CLRF   xBA
2638:  CLRF   xB9
263A:  CLRF   xB8
263C:  CLRF   xBF
263E:  CLRF   xBE
2640:  CLRF   xBD
2642:  MOVLW  7F
2644:  MOVWF  xBC
2646:  CLRF   xC3
2648:  CLRF   xC2
264A:  MOVLW  24
264C:  MOVWF  xC1
264E:  MOVLW  88
2650:  MOVWF  xC0
2652:  CLRF   xC7
2654:  CLRF   xC6
2656:  CLRF   xC5
2658:  CLRF   xC4
265A:  CLRF   xCB
265C:  CLRF   xCA
265E:  CLRF   xC9
2660:  CLRF   xC8
2662:  MOVF   FC1,W
2664:  ANDLW  C0
2666:  IORLW  0F
2668:  MOVWF  FC1
266A:  MOVLW  07
266C:  MOVWF  FB4
266E:  MOVLW  3E
2670:  MOVWF  34
2672:  MOVLW  20
2674:  MOVWF  35
2676:  MOVLW  5E
2678:  MOVWF  36
267A:  CLRF   37
267C:  CLRF   38
267E:  CLRF   39
2680:  CLRF   3A
2682:  CLRF   3B
2684:  CLRF   3C
2686:  CLRF   3D
2688:  CLRF   3E
268A:  CLRF   xCC
268C:  CLRF   xCD
268E:  CLRF   xCE
2690:  CLRF   xCF
2692:  CLRF   xD0
2694:  CLRF   xD1
2696:  CLRF   xD2
2698:  CLRF   xD3
269A:  CLRF   xD4
269C:  CLRF   xD5
269E:  CLRF   xD6
26A0:  CLRF   xD7
26A2:  CLRF   xD8
26A4:  CLRF   xD9
26A6:  CLRF   xDA
26A8:  CLRF   xDB
26AA:  CLRF   xDC
26AC:  CLRF   xDD
26AE:  CLRF   xDE
26B0:  CLRF   xDF
26B2:  CLRF   xE0
26B4:  CLRF   xE1
26B6:  CLRF   xE2
26B8:  CLRF   xE3
26BA:  CLRF   xE4
26BC:  CLRF   xE5
26BE:  CLRF   xE6
26C0:  CLRF   xE7
26C2:  CLRF   xE8
26C4:  CLRF   xE9
26C6:  CLRF   xEA
26C8:  CLRF   xEB
26CA:  CLRF   xEC
26CC:  CLRF   xED
26CE:  CLRF   xEE
26D0:  CLRF   xEF
26D2:  CLRF   xF0
26D4:  CLRF   xF1
26D6:  CLRF   xF2
26D8:  CLRF   xF3
26DA:  CLRF   xF4
26DC:  CLRF   xF5
26DE:  CLRF   xF6
26E0:  CLRF   xF7
26E2:  CLRF   xF8
26E4:  CLRF   xF9
26E6:  CLRF   xFA
26E8:  CLRF   xFB
....................    setup_adc_ports(AN0_TO_AN3); 
26EA:  MOVF   FC1,W
26EC:  ANDLW  C0
26EE:  IORLW  0B
26F0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
26F2:  BCF    FC0.0
26F4:  BSF    FC0.1
26F6:  BCF    FC0.2
26F8:  BSF    FC0.7
26FA:  BSF    FC2.0
....................    output_d(0);  
26FC:  CLRF   F95
26FE:  CLRF   F8C
....................    ModoSleep=1; 
2700:  BSF    32.2
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
2702:  MOVLW  85
2704:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
2706:  BSF    F9D.0
....................    enable_interrupts(INT_EXT_L2H); 
2708:  BSF    FF2.4
270A:  BSF    FF1.6
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
270C:  MOVLW  00
270E:  IORLW  05
2710:  MOVWF  FCA
2712:  MOVLW  FF
2714:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
2716:  BCF    F94.2
2718:  BCF    F8B.2
271A:  BCF    F96.6
271C:  MOVLW  0C
271E:  MOVWF  FBD
2720:  CLRF   FB7
2722:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
2724:  MOVLW  C0
2726:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
2728:  CLRF   FBE
....................     
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
272A:  MOVFF  FF2,100
272E:  BCF    FF2.7
2730:  CLRF   FA9
2732:  BCF    FA6.6
2734:  BCF    FA6.7
2736:  BSF    FA6.0
2738:  MOVF   FA8,W
273A:  MOVLB  1
273C:  BTFSC  x00.7
273E:  BSF    FF2.7
2740:  MOVWF  3B
2742:  CLRF   16
2744:  BTFSC  FF2.7
2746:  BSF    16.7
2748:  BCF    FF2.7
274A:  MOVLW  14
274C:  MOVWF  x35
274E:  MOVLB  0
2750:  CALL   00B6
2754:  BTFSC  16.7
2756:  BSF    FF2.7
2758:  MOVFF  FF2,100
275C:  BCF    FF2.7
275E:  MOVLW  01
2760:  MOVWF  FA9
2762:  BCF    FA6.6
2764:  BCF    FA6.7
2766:  BSF    FA6.0
2768:  MOVF   FA8,W
276A:  MOVLB  1
276C:  BTFSC  x00.7
276E:  BSF    FF2.7
2770:  MOVWF  3C
2772:  CLRF   16
2774:  BTFSC  FF2.7
2776:  BSF    16.7
2778:  BCF    FF2.7
277A:  MOVLW  14
277C:  MOVWF  x35
277E:  MOVLB  0
2780:  CALL   00B6
2784:  BTFSC  16.7
2786:  BSF    FF2.7
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
2788:  MOVFF  FF2,100
278C:  BCF    FF2.7
278E:  MOVLW  02
2790:  MOVWF  FA9
2792:  BCF    FA6.6
2794:  BCF    FA6.7
2796:  BSF    FA6.0
2798:  MOVF   FA8,W
279A:  MOVLB  1
279C:  BTFSC  x00.7
279E:  BSF    FF2.7
27A0:  MOVWF  3D
27A2:  CLRF   16
27A4:  BTFSC  FF2.7
27A6:  BSF    16.7
27A8:  BCF    FF2.7
27AA:  MOVLW  14
27AC:  MOVWF  x35
27AE:  MOVLB  0
27B0:  CALL   00B6
27B4:  BTFSC  16.7
27B6:  BSF    FF2.7
27B8:  MOVFF  FF2,100
27BC:  BCF    FF2.7
27BE:  MOVLW  03
27C0:  MOVWF  FA9
27C2:  BCF    FA6.6
27C4:  BCF    FA6.7
27C6:  BSF    FA6.0
27C8:  MOVF   FA8,W
27CA:  MOVLB  1
27CC:  BTFSC  x00.7
27CE:  BSF    FF2.7
27D0:  MOVWF  3E
27D2:  CLRF   16
27D4:  BTFSC  FF2.7
27D6:  BSF    16.7
27D8:  BCF    FF2.7
27DA:  MOVLW  14
27DC:  MOVWF  x35
27DE:  MOVLB  0
27E0:  CALL   00B6
27E4:  BTFSC  16.7
27E6:  BSF    FF2.7
....................    estadoalarma=read_eeprom(5); 
27E8:  MOVFF  FF2,100
27EC:  BCF    FF2.7
27EE:  MOVLW  05
27F0:  MOVWF  FA9
27F2:  BCF    FA6.6
27F4:  BCF    FA6.7
27F6:  BSF    FA6.0
27F8:  MOVF   FA8,W
27FA:  MOVLB  1
27FC:  BTFSC  x00.7
27FE:  BSF    FF2.7
2800:  MOVWF  01
2802:  BCF    31.2
2804:  BTFSC  01.0
2806:  BSF    31.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
2808:  MOVFF  FF2,100
280C:  BCF    FF2.7
280E:  MOVLW  0A
2810:  MOVWF  FA9
2812:  BCF    FA6.6
2814:  BCF    FA6.7
2816:  BSF    FA6.0
2818:  MOVF   FA8,W
281A:  BTFSC  x00.7
281C:  BSF    FF2.7
281E:  MOVWF  2E
2820:  MOVFF  FF2,100
2824:  BCF    FF2.7
2826:  MOVLW  0B
2828:  MOVWF  FA9
282A:  BCF    FA6.6
282C:  BCF    FA6.7
282E:  BSF    FA6.0
2830:  MOVF   FA8,W
2832:  BTFSC  x00.7
2834:  BSF    FF2.7
2836:  MOVWF  2D
2838:  MOVFF  FF2,100
283C:  BCF    FF2.7
283E:  MOVLW  0C
2840:  MOVWF  FA9
2842:  BCF    FA6.6
2844:  BCF    FA6.7
2846:  BSF    FA6.0
2848:  MOVF   FA8,W
284A:  BTFSC  x00.7
284C:  BSF    FF2.7
284E:  MOVWF  2F
2850:  MOVFF  FF2,100
2854:  BCF    FF2.7
2856:  MOVLW  0D
2858:  MOVWF  FA9
285A:  BCF    FA6.6
285C:  BCF    FA6.7
285E:  BSF    FA6.0
2860:  MOVF   FA8,W
2862:  BTFSC  x00.7
2864:  BSF    FF2.7
2866:  MOVWF  30
2868:  MOVFF  30,2A
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
286C:  MOVFF  FF2,100
2870:  BCF    FF2.7
2872:  MOVLW  19
2874:  MOVWF  FA9
2876:  BCF    FA6.6
2878:  BCF    FA6.7
287A:  BSF    FA6.0
287C:  MOVF   FA8,W
287E:  BTFSC  x00.7
2880:  BSF    FF2.7
2882:  MOVWF  22
....................    Temporal=read_eeprom(26); 
2884:  MOVFF  FF2,100
2888:  BCF    FF2.7
288A:  MOVLW  1A
288C:  MOVWF  FA9
288E:  BCF    FA6.6
2890:  BCF    FA6.7
2892:  BSF    FA6.0
2894:  MOVF   FA8,W
2896:  BTFSC  x00.7
2898:  BSF    FF2.7
289A:  CLRF   x0A
289C:  MOVWF  x09
289E:  MOVLB  0
28A0:  CALL   0B72
28A4:  MOVFF  03,A7
28A8:  MOVFF  02,A6
28AC:  MOVFF  01,A5
28B0:  MOVFF  00,A4
....................    Temporal=Temporal/100.0; 
28B4:  MOVFF  A7,121
28B8:  MOVFF  A6,120
28BC:  MOVFF  A5,11F
28C0:  MOVFF  A4,11E
28C4:  MOVLB  1
28C6:  CLRF   x25
28C8:  CLRF   x24
28CA:  MOVLW  48
28CC:  MOVWF  x23
28CE:  MOVLW  85
28D0:  MOVWF  x22
28D2:  MOVLB  0
28D4:  CALL   0BA8
28D8:  MOVFF  03,A7
28DC:  MOVFF  02,A6
28E0:  MOVFF  01,A5
28E4:  MOVFF  00,A4
....................    Ajuste1=Entero+Temporal; 
28E8:  MOVLB  1
28EA:  CLRF   x0A
28EC:  MOVFF  22,109
28F0:  MOVLB  0
28F2:  CALL   0B72
28F6:  BCF    FD8.1
28F8:  MOVFF  03,121
28FC:  MOVFF  02,120
2900:  MOVFF  01,11F
2904:  MOVFF  00,11E
2908:  MOVFF  A7,125
290C:  MOVFF  A6,124
2910:  MOVFF  A5,123
2914:  MOVFF  A4,122
2918:  CALL   0D06
291C:  MOVFF  03,BF
2920:  MOVFF  02,BE
2924:  MOVFF  01,BD
2928:  MOVFF  00,BC
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
292C:  MOVFF  FF2,100
2930:  BCF    FF2.7
2932:  MOVLW  28
2934:  MOVWF  FA9
2936:  BCF    FA6.6
2938:  BCF    FA6.7
293A:  BSF    FA6.0
293C:  MOVF   FA8,W
293E:  MOVLB  1
2940:  BTFSC  x00.7
2942:  BSF    FF2.7
2944:  MOVWF  22
....................    Temporal=read_eeprom(41); 
2946:  MOVFF  FF2,100
294A:  BCF    FF2.7
294C:  MOVLW  29
294E:  MOVWF  FA9
2950:  BCF    FA6.6
2952:  BCF    FA6.7
2954:  BSF    FA6.0
2956:  MOVF   FA8,W
2958:  BTFSC  x00.7
295A:  BSF    FF2.7
295C:  CLRF   x0A
295E:  MOVWF  x09
2960:  MOVLB  0
2962:  CALL   0B72
2966:  MOVFF  03,A7
296A:  MOVFF  02,A6
296E:  MOVFF  01,A5
2972:  MOVFF  00,A4
....................    Temporal=Temporal/100.0; 
2976:  MOVFF  A7,121
297A:  MOVFF  A6,120
297E:  MOVFF  A5,11F
2982:  MOVFF  A4,11E
2986:  MOVLB  1
2988:  CLRF   x25
298A:  CLRF   x24
298C:  MOVLW  48
298E:  MOVWF  x23
2990:  MOVLW  85
2992:  MOVWF  x22
2994:  MOVLB  0
2996:  CALL   0BA8
299A:  MOVFF  03,A7
299E:  MOVFF  02,A6
29A2:  MOVFF  01,A5
29A6:  MOVFF  00,A4
....................    setpoint=Entero+Temporal; 
29AA:  MOVLB  1
29AC:  CLRF   x0A
29AE:  MOVFF  22,109
29B2:  MOVLB  0
29B4:  CALL   0B72
29B8:  BCF    FD8.1
29BA:  MOVFF  03,121
29BE:  MOVFF  02,120
29C2:  MOVFF  01,11F
29C6:  MOVFF  00,11E
29CA:  MOVFF  A7,125
29CE:  MOVFF  A6,124
29D2:  MOVFF  A5,123
29D6:  MOVFF  A4,122
29DA:  CALL   0D06
29DE:  MOVFF  03,42
29E2:  MOVFF  02,41
29E6:  MOVFF  01,40
29EA:  MOVFF  00,3F
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
29EE:  MOVFF  FF2,100
29F2:  BCF    FF2.7
29F4:  MOVLW  3C
29F6:  MOVWF  FA9
29F8:  BCF    FA6.6
29FA:  BCF    FA6.7
29FC:  BSF    FA6.0
29FE:  MOVF   FA8,W
2A00:  MOVLB  1
2A02:  BTFSC  x00.7
2A04:  BSF    FF2.7
2A06:  MOVWF  25
....................    Temporal1=read_eeprom(61); 
2A08:  MOVFF  FF2,100
2A0C:  BCF    FF2.7
2A0E:  MOVLW  3D
2A10:  MOVWF  FA9
2A12:  BCF    FA6.6
2A14:  BCF    FA6.7
2A16:  BSF    FA6.0
2A18:  MOVF   FA8,W
2A1A:  BTFSC  x00.7
2A1C:  BSF    FF2.7
2A1E:  CLRF   x0A
2A20:  MOVWF  x09
2A22:  MOVLB  0
2A24:  CALL   0B72
2A28:  MOVFF  03,B3
2A2C:  MOVFF  02,B2
2A30:  MOVFF  01,B1
2A34:  MOVFF  00,B0
....................    Temporal1=Temporal1/100.0; 
2A38:  MOVFF  B3,121
2A3C:  MOVFF  B2,120
2A40:  MOVFF  B1,11F
2A44:  MOVFF  B0,11E
2A48:  MOVLB  1
2A4A:  CLRF   x25
2A4C:  CLRF   x24
2A4E:  MOVLW  48
2A50:  MOVWF  x23
2A52:  MOVLW  85
2A54:  MOVWF  x22
2A56:  MOVLB  0
2A58:  CALL   0BA8
2A5C:  MOVFF  03,B3
2A60:  MOVFF  02,B2
2A64:  MOVFF  01,B1
2A68:  MOVFF  00,B0
....................    Diferencia=Entero1+Temporal1; 
2A6C:  MOVLB  1
2A6E:  CLRF   x0A
2A70:  MOVFF  25,109
2A74:  MOVLB  0
2A76:  CALL   0B72
2A7A:  BCF    FD8.1
2A7C:  MOVFF  03,121
2A80:  MOVFF  02,120
2A84:  MOVFF  01,11F
2A88:  MOVFF  00,11E
2A8C:  MOVFF  B3,125
2A90:  MOVFF  B2,124
2A94:  MOVFF  B1,123
2A98:  MOVFF  B0,122
2A9C:  CALL   0D06
2AA0:  MOVFF  03,BB
2AA4:  MOVFF  02,BA
2AA8:  MOVFF  01,B9
2AAC:  MOVFF  00,B8
....................     
....................    negativo=read_eeprom(50); 
2AB0:  MOVFF  FF2,100
2AB4:  BCF    FF2.7
2AB6:  MOVLW  32
2AB8:  MOVWF  FA9
2ABA:  BCF    FA6.6
2ABC:  BCF    FA6.7
2ABE:  BSF    FA6.0
2AC0:  MOVF   FA8,W
2AC2:  MOVLB  1
2AC4:  BTFSC  x00.7
2AC6:  BSF    FF2.7
2AC8:  MOVWF  2C
....................  
....................    MediaMovil=read_eeprom(42); 
2ACA:  MOVFF  FF2,100
2ACE:  BCF    FF2.7
2AD0:  MOVLW  2A
2AD2:  MOVWF  FA9
2AD4:  BCF    FA6.6
2AD6:  BCF    FA6.7
2AD8:  BSF    FA6.0
2ADA:  MOVF   FA8,W
2ADC:  BTFSC  x00.7
2ADE:  BSF    FF2.7
2AE0:  MOVWF  2B
....................    if(MediaMovil>12) 
2AE2:  MOVF   2B,W
2AE4:  SUBLW  0C
2AE6:  BC    2AEC
....................    {MediaMovil=12;} 
2AE8:  MOVLW  0C
2AEA:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
2AEC:  MOVF   2B,F
2AEE:  BNZ   2AF4
....................    {MediaMovil=1;} 
2AF0:  MOVLW  01
2AF2:  MOVWF  2B
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2AF4:  MOVF   18,F
2AF6:  BTFSS  FD8.2
2AF8:  BRA    3154
....................    flag_latencia=1;set_pwm1_duty(0); 
2AFA:  BSF    32.0
2AFC:  CLRF   FBE
....................       if(Latencia==1) 
2AFE:  BTFSS  32.1
2B00:  BRA    2B1C
2B02:  CLRF   16
2B04:  BTFSC  FF2.7
2B06:  BSF    16.7
2B08:  BCF    FF2.7
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2B0A:  MOVLW  0C
2B0C:  MOVWF  x34
2B0E:  MOVLB  0
2B10:  CALL   0280
2B14:  BTFSC  16.7
2B16:  BSF    FF2.7
2B18:  RESET
2B1A:  MOVLB  1
2B1C:  CLRF   16
2B1E:  BTFSC  FF2.7
2B20:  BSF    16.7
2B22:  BCF    FF2.7
....................          } 
....................    lcd_gotoxy(1,1); 
2B24:  MOVLW  01
2B26:  MOVWF  x35
2B28:  MOVWF  x36
2B2A:  MOVLB  0
2B2C:  CALL   0206
2B30:  BTFSC  16.7
2B32:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
2B34:  MOVLW  52
2B36:  MOVWF  FF6
2B38:  MOVLW  05
2B3A:  MOVWF  FF7
2B3C:  CLRF   16
2B3E:  BTFSC  FF2.7
2B40:  BSF    16.7
2B42:  BCF    FF2.7
2B44:  CALL   02EC
2B48:  BTFSC  16.7
2B4A:  BSF    FF2.7
2B4C:  CLRF   16
2B4E:  BTFSC  FF2.7
2B50:  BSF    16.7
2B52:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
2B54:  MOVLW  01
2B56:  MOVLB  1
2B58:  MOVWF  x35
2B5A:  MOVLW  02
2B5C:  MOVWF  x36
2B5E:  MOVLB  0
2B60:  CALL   0206
2B64:  BTFSC  16.7
2B66:  BSF    FF2.7
....................    printf(lcd_putc,"    Contraseña      "); 
2B68:  MOVLW  68
2B6A:  MOVWF  FF6
2B6C:  MOVLW  05
2B6E:  MOVWF  FF7
2B70:  CLRF   16
2B72:  BTFSC  FF2.7
2B74:  BSF    16.7
2B76:  BCF    FF2.7
2B78:  CALL   02EC
2B7C:  BTFSC  16.7
2B7E:  BSF    FF2.7
2B80:  CLRF   16
2B82:  BTFSC  FF2.7
2B84:  BSF    16.7
2B86:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
2B88:  MOVLW  01
2B8A:  MOVLB  1
2B8C:  MOVWF  x35
2B8E:  MOVLW  03
2B90:  MOVWF  x36
2B92:  MOVLB  0
2B94:  CALL   0206
2B98:  BTFSC  16.7
2B9A:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2B9C:  MOVLW  7E
2B9E:  MOVWF  FF6
2BA0:  MOVLW  05
2BA2:  MOVWF  FF7
2BA4:  MOVLW  0A
2BA6:  MOVLB  1
2BA8:  MOVWF  x08
2BAA:  MOVLB  0
2BAC:  CALL   0F7E
2BB0:  MOVFF  37,100
2BB4:  MOVLW  1F
2BB6:  MOVLB  1
2BB8:  MOVWF  x01
2BBA:  MOVLB  0
2BBC:  CALL   0FE0
2BC0:  MOVFF  38,100
2BC4:  MOVLW  1F
2BC6:  MOVLB  1
2BC8:  MOVWF  x01
2BCA:  MOVLB  0
2BCC:  CALL   0FE0
2BD0:  MOVFF  39,100
2BD4:  MOVLW  1F
2BD6:  MOVLB  1
2BD8:  MOVWF  x01
2BDA:  MOVLB  0
2BDC:  CALL   0FE0
2BE0:  MOVFF  3A,100
2BE4:  MOVLW  1F
2BE6:  MOVLB  1
2BE8:  MOVWF  x01
2BEA:  MOVLB  0
2BEC:  CALL   0FE0
2BF0:  CLRF   16
2BF2:  BTFSC  FF2.7
2BF4:  BSF    16.7
2BF6:  BCF    FF2.7
2BF8:  MOVLW  20
2BFA:  MOVLB  1
2BFC:  MOVWF  x34
2BFE:  MOVLB  0
2C00:  CALL   0280
2C04:  BTFSC  16.7
2C06:  BSF    FF2.7
2C08:  CLRF   16
2C0A:  BTFSC  FF2.7
2C0C:  BSF    16.7
2C0E:  BCF    FF2.7
2C10:  MOVLW  20
2C12:  MOVLB  1
2C14:  MOVWF  x34
2C16:  MOVLB  0
2C18:  CALL   0280
2C1C:  BTFSC  16.7
2C1E:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2C20:  BSF    F93.3
2C22:  BTFSS  F81.3
2C24:  BRA    2C5C
....................       {  if(Flanco == 0)  
2C26:  BTFSC  31.4
2C28:  BRA    2C5A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2C2A:  MOVLW  0B
2C2C:  SUBWF  1B,W
2C2E:  CLRF   03
2C30:  ADDLW  37
2C32:  MOVWF  FE9
2C34:  MOVLW  00
2C36:  ADDWFC 03,W
2C38:  MOVWF  FEA
2C3A:  INCF   FEF,F
2C3C:  BSF    31.4
2C3E:  CLRF   16
2C40:  BTFSC  FF2.7
2C42:  BSF    16.7
2C44:  BCF    FF2.7
2C46:  MOVLW  1E
2C48:  MOVLB  1
2C4A:  MOVWF  x35
2C4C:  MOVLB  0
2C4E:  CALL   00B6
2C52:  BTFSC  16.7
2C54:  BSF    FF2.7
2C56:  CLRF   4F
2C58:  CLRF   4E
....................          else 
2C5A:  BRA    2C5E
....................             {Flanco = 0;} 
2C5C:  BCF    31.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2C5E:  BSF    F93.2
2C60:  BTFSS  F81.2
2C62:  BRA    2C9A
....................       {  if(Flanco2 == 0)  
2C64:  BTFSC  31.6
2C66:  BRA    2C98
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2C68:  MOVLW  0B
2C6A:  SUBWF  1B,W
2C6C:  CLRF   03
2C6E:  ADDLW  37
2C70:  MOVWF  FE9
2C72:  MOVLW  00
2C74:  ADDWFC 03,W
2C76:  MOVWF  FEA
2C78:  DECF   FEF,F
2C7A:  BSF    31.6
2C7C:  CLRF   16
2C7E:  BTFSC  FF2.7
2C80:  BSF    16.7
2C82:  BCF    FF2.7
2C84:  MOVLW  1E
2C86:  MOVLB  1
2C88:  MOVWF  x35
2C8A:  MOVLB  0
2C8C:  CALL   00B6
2C90:  BTFSC  16.7
2C92:  BSF    FF2.7
2C94:  CLRF   4F
2C96:  CLRF   4E
....................          else 
2C98:  BRA    2C9C
....................             {Flanco2 = 0;} 
2C9A:  BCF    31.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2C9C:  BSF    F93.0
2C9E:  BTFSS  F81.0
2CA0:  BRA    2CE0
....................       {  if(Flanco1 == 0)  
2CA2:  BTFSC  31.5
2CA4:  BRA    2CDE
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2CA6:  BSF    31.5
2CA8:  INCF   1B,F
2CAA:  CLRF   16
2CAC:  BTFSC  FF2.7
2CAE:  BSF    16.7
2CB0:  BCF    FF2.7
2CB2:  MOVLW  1E
2CB4:  MOVLB  1
2CB6:  MOVWF  x35
2CB8:  MOVLB  0
2CBA:  CALL   00B6
2CBE:  BTFSC  16.7
2CC0:  BSF    FF2.7
2CC2:  CLRF   16
2CC4:  BTFSC  FF2.7
2CC6:  BSF    16.7
2CC8:  BCF    FF2.7
2CCA:  MOVLW  0C
2CCC:  MOVLB  1
2CCE:  MOVWF  x34
2CD0:  MOVLB  0
2CD2:  CALL   0280
2CD6:  BTFSC  16.7
2CD8:  BSF    FF2.7
2CDA:  CLRF   4F
2CDC:  CLRF   4E
....................          else 
2CDE:  BRA    2CE2
....................             {Flanco1 = 0;}    
2CE0:  BCF    31.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2CE2:  BSF    F93.1
2CE4:  BTFSS  F81.1
2CE6:  BRA    2D26
....................       {  if(Flanco3 == 0)  
2CE8:  BTFSC  31.7
2CEA:  BRA    2D24
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2CEC:  BSF    31.7
2CEE:  DECF   1B,F
2CF0:  CLRF   16
2CF2:  BTFSC  FF2.7
2CF4:  BSF    16.7
2CF6:  BCF    FF2.7
2CF8:  MOVLW  1E
2CFA:  MOVLB  1
2CFC:  MOVWF  x35
2CFE:  MOVLB  0
2D00:  CALL   00B6
2D04:  BTFSC  16.7
2D06:  BSF    FF2.7
2D08:  CLRF   16
2D0A:  BTFSC  FF2.7
2D0C:  BSF    16.7
2D0E:  BCF    FF2.7
2D10:  MOVLW  0C
2D12:  MOVLB  1
2D14:  MOVWF  x34
2D16:  MOVLB  0
2D18:  CALL   0280
2D1C:  BTFSC  16.7
2D1E:  BSF    FF2.7
2D20:  CLRF   4F
2D22:  CLRF   4E
....................          else 
2D24:  BRA    2D28
....................             {Flanco3 = 0;}     
2D26:  BCF    31.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2D28:  MOVLW  0B
2D2A:  SUBWF  1B,W
2D2C:  CLRF   03
2D2E:  ADDLW  37
2D30:  MOVWF  FE9
2D32:  MOVLW  00
2D34:  ADDWFC 03,W
2D36:  MOVWF  FEA
2D38:  BTFSC  FEF.7
2D3A:  BRA    2D3E
2D3C:  BRA    2D52
....................        {clave[unidad-11]=9;} 
2D3E:  MOVLW  0B
2D40:  SUBWF  1B,W
2D42:  CLRF   03
2D44:  ADDLW  37
2D46:  MOVWF  FE9
2D48:  MOVLW  00
2D4A:  ADDWFC 03,W
2D4C:  MOVWF  FEA
2D4E:  MOVLW  09
2D50:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2D52:  MOVLW  0B
2D54:  SUBWF  1B,W
2D56:  CLRF   03
2D58:  ADDLW  37
2D5A:  MOVWF  FE9
2D5C:  MOVLW  00
2D5E:  ADDWFC 03,W
2D60:  MOVWF  FEA
2D62:  BTFSC  FEF.7
2D64:  BRA    2D7E
2D66:  MOVF   FEF,W
2D68:  SUBLW  09
2D6A:  BC    2D7E
....................        {clave[unidad-11]=0;} 
2D6C:  MOVLW  0B
2D6E:  SUBWF  1B,W
2D70:  CLRF   03
2D72:  ADDLW  37
2D74:  MOVWF  FE9
2D76:  MOVLW  00
2D78:  ADDWFC 03,W
2D7A:  MOVWF  FEA
2D7C:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2D7E:  MOVF   1B,W
2D80:  SUBLW  0A
2D82:  BNC   2D88
....................        {unidad=11;} 
2D84:  MOVLW  0B
2D86:  MOVWF  1B
2D88:  CLRF   16
2D8A:  BTFSC  FF2.7
2D8C:  BSF    16.7
2D8E:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2D90:  MOVFF  1B,135
2D94:  MOVLW  04
2D96:  MOVLB  1
2D98:  MOVWF  x36
2D9A:  MOVLB  0
2D9C:  CALL   0206
2DA0:  BTFSC  16.7
2DA2:  BSF    FF2.7
2DA4:  CLRF   16
2DA6:  BTFSC  FF2.7
2DA8:  BSF    16.7
2DAA:  BCF    FF2.7
....................        lcd_putc(t[2]); 
2DAC:  MOVFF  36,134
2DB0:  CALL   0280
2DB4:  BTFSC  16.7
2DB6:  BSF    FF2.7
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2DB8:  MOVF   1B,W
2DBA:  SUBLW  0E
2DBC:  BTFSC  FD8.0
2DBE:  BRA    3110
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2DC0:  MOVF   37,W
2DC2:  SUBLW  03
2DC4:  BTFSS  FD8.2
2DC6:  BRA    2EE0
2DC8:  MOVF   38,W
2DCA:  SUBLW  08
2DCC:  BTFSS  FD8.2
2DCE:  BRA    2EE0
2DD0:  MOVF   39,W
2DD2:  SUBLW  09
2DD4:  BTFSS  FD8.2
2DD6:  BRA    2EE0
2DD8:  MOVF   3A,W
2DDA:  SUBLW  02
2DDC:  BTFSS  FD8.2
2DDE:  BRA    2EE0
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2DE0:  CLRF   FA9
2DE2:  CLRF   FA8
2DE4:  BCF    FA6.6
2DE6:  BCF    FA6.7
2DE8:  BSF    FA6.2
2DEA:  MOVF   FF2,W
2DEC:  MOVWF  00
2DEE:  BCF    FF2.7
2DF0:  MOVLB  F
2DF2:  MOVLW  55
2DF4:  MOVWF  FA7
2DF6:  MOVLW  AA
2DF8:  MOVWF  FA7
2DFA:  BSF    FA6.1
2DFC:  BTFSC  FA6.1
2DFE:  BRA    2DFC
2E00:  BCF    FA6.2
2E02:  MOVF   00,W
2E04:  IORWF  FF2,F
2E06:  CLRF   16
2E08:  BTFSC  FF2.7
2E0A:  BSF    16.7
2E0C:  BCF    FF2.7
2E0E:  MOVLW  14
2E10:  MOVLB  1
2E12:  MOVWF  x35
2E14:  MOVLB  0
2E16:  CALL   00B6
2E1A:  BTFSC  16.7
2E1C:  BSF    FF2.7
2E1E:  MOVLW  01
2E20:  MOVWF  FA9
2E22:  CLRF   FA8
2E24:  BCF    FA6.6
2E26:  BCF    FA6.7
2E28:  BSF    FA6.2
2E2A:  MOVF   FF2,W
2E2C:  MOVWF  00
2E2E:  BCF    FF2.7
2E30:  MOVLB  F
2E32:  MOVLW  55
2E34:  MOVWF  FA7
2E36:  MOVLW  AA
2E38:  MOVWF  FA7
2E3A:  BSF    FA6.1
2E3C:  BTFSC  FA6.1
2E3E:  BRA    2E3C
2E40:  BCF    FA6.2
2E42:  MOVF   00,W
2E44:  IORWF  FF2,F
2E46:  CLRF   16
2E48:  BTFSC  FF2.7
2E4A:  BSF    16.7
2E4C:  BCF    FF2.7
2E4E:  MOVLW  14
2E50:  MOVLB  1
2E52:  MOVWF  x35
2E54:  MOVLB  0
2E56:  CALL   00B6
2E5A:  BTFSC  16.7
2E5C:  BSF    FF2.7
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2E5E:  MOVLW  02
2E60:  MOVWF  FA9
2E62:  CLRF   FA8
2E64:  BCF    FA6.6
2E66:  BCF    FA6.7
2E68:  BSF    FA6.2
2E6A:  MOVF   FF2,W
2E6C:  MOVWF  00
2E6E:  BCF    FF2.7
2E70:  MOVLB  F
2E72:  MOVLW  55
2E74:  MOVWF  FA7
2E76:  MOVLW  AA
2E78:  MOVWF  FA7
2E7A:  BSF    FA6.1
2E7C:  BTFSC  FA6.1
2E7E:  BRA    2E7C
2E80:  BCF    FA6.2
2E82:  MOVF   00,W
2E84:  IORWF  FF2,F
2E86:  CLRF   16
2E88:  BTFSC  FF2.7
2E8A:  BSF    16.7
2E8C:  BCF    FF2.7
2E8E:  MOVLW  14
2E90:  MOVLB  1
2E92:  MOVWF  x35
2E94:  MOVLB  0
2E96:  CALL   00B6
2E9A:  BTFSC  16.7
2E9C:  BSF    FF2.7
2E9E:  MOVLW  03
2EA0:  MOVWF  FA9
2EA2:  CLRF   FA8
2EA4:  BCF    FA6.6
2EA6:  BCF    FA6.7
2EA8:  BSF    FA6.2
2EAA:  MOVF   FF2,W
2EAC:  MOVWF  00
2EAE:  BCF    FF2.7
2EB0:  MOVLB  F
2EB2:  MOVLW  55
2EB4:  MOVWF  FA7
2EB6:  MOVLW  AA
2EB8:  MOVWF  FA7
2EBA:  BSF    FA6.1
2EBC:  BTFSC  FA6.1
2EBE:  BRA    2EBC
2EC0:  BCF    FA6.2
2EC2:  MOVF   00,W
2EC4:  IORWF  FF2,F
2EC6:  CLRF   16
2EC8:  BTFSC  FF2.7
2ECA:  BSF    16.7
2ECC:  BCF    FF2.7
2ECE:  MOVLW  14
2ED0:  MOVLB  1
2ED2:  MOVWF  x35
2ED4:  MOVLB  0
2ED6:  CALL   00B6
2EDA:  BTFSC  16.7
2EDC:  BSF    FF2.7
....................              reset_cpu();} 
2EDE:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
2EE0:  MOVF   3B,W
2EE2:  SUBWF  37,W
2EE4:  BTFSS  FD8.2
2EE6:  BRA    301E
2EE8:  MOVF   3C,W
2EEA:  SUBWF  38,W
2EEC:  BTFSS  FD8.2
2EEE:  BRA    301E
2EF0:  MOVF   3D,W
2EF2:  SUBWF  39,W
2EF4:  BTFSS  FD8.2
2EF6:  BRA    301E
2EF8:  MOVF   3E,W
2EFA:  SUBWF  3A,W
2EFC:  BTFSS  FD8.2
2EFE:  BRA    301E
2F00:  CLRF   16
2F02:  BTFSC  FF2.7
2F04:  BSF    16.7
2F06:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
2F08:  MOVLW  01
2F0A:  MOVLB  1
2F0C:  MOVWF  x35
2F0E:  MOVWF  x36
2F10:  MOVLB  0
2F12:  CALL   0206
2F16:  BTFSC  16.7
2F18:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
2F1A:  MOVLW  94
2F1C:  MOVWF  FF6
2F1E:  MOVLW  05
2F20:  MOVWF  FF7
2F22:  CLRF   16
2F24:  BTFSC  FF2.7
2F26:  BSF    16.7
2F28:  BCF    FF2.7
2F2A:  CALL   02EC
2F2E:  BTFSC  16.7
2F30:  BSF    FF2.7
2F32:  CLRF   16
2F34:  BTFSC  FF2.7
2F36:  BSF    16.7
2F38:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
2F3A:  MOVLW  01
2F3C:  MOVLB  1
2F3E:  MOVWF  x35
2F40:  MOVLW  02
2F42:  MOVWF  x36
2F44:  MOVLB  0
2F46:  CALL   0206
2F4A:  BTFSC  16.7
2F4C:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
2F4E:  MOVLW  A8
2F50:  MOVWF  FF6
2F52:  MOVLW  05
2F54:  MOVWF  FF7
2F56:  CLRF   16
2F58:  BTFSC  FF2.7
2F5A:  BSF    16.7
2F5C:  BCF    FF2.7
2F5E:  CALL   02EC
2F62:  BTFSC  16.7
2F64:  BSF    FF2.7
2F66:  CLRF   16
2F68:  BTFSC  FF2.7
2F6A:  BSF    16.7
2F6C:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
2F6E:  MOVLW  01
2F70:  MOVLB  1
2F72:  MOVWF  x35
2F74:  MOVLW  03
2F76:  MOVWF  x36
2F78:  MOVLB  0
2F7A:  CALL   0206
2F7E:  BTFSC  16.7
2F80:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta     "); 
2F82:  MOVLW  BC
2F84:  MOVWF  FF6
2F86:  MOVLW  05
2F88:  MOVWF  FF7
2F8A:  CLRF   16
2F8C:  BTFSC  FF2.7
2F8E:  BSF    16.7
2F90:  BCF    FF2.7
2F92:  CALL   02EC
2F96:  BTFSC  16.7
2F98:  BSF    FF2.7
2F9A:  CLRF   16
2F9C:  BTFSC  FF2.7
2F9E:  BSF    16.7
2FA0:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
2FA2:  MOVLW  01
2FA4:  MOVLB  1
2FA6:  MOVWF  x35
2FA8:  MOVLW  04
2FAA:  MOVWF  x36
2FAC:  MOVLB  0
2FAE:  CALL   0206
2FB2:  BTFSC  16.7
2FB4:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
2FB6:  MOVLW  D0
2FB8:  MOVWF  FF6
2FBA:  MOVLW  05
2FBC:  MOVWF  FF7
2FBE:  CLRF   16
2FC0:  BTFSC  FF2.7
2FC2:  BSF    16.7
2FC4:  BCF    FF2.7
2FC6:  CALL   02EC
2FCA:  BTFSC  16.7
2FCC:  BSF    FF2.7
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
2FCE:  MOVLW  02
2FD0:  MOVLB  1
2FD2:  MOVWF  x00
2FD4:  CLRF   16
2FD6:  BTFSC  FF2.7
2FD8:  BSF    16.7
2FDA:  BCF    FF2.7
2FDC:  MOVLW  FA
2FDE:  MOVWF  x35
2FE0:  MOVLB  0
2FE2:  CALL   00B6
2FE6:  BTFSC  16.7
2FE8:  BSF    FF2.7
2FEA:  MOVLB  1
2FEC:  DECFSZ x00,F
2FEE:  BRA    2FD4
2FF0:  MOVLW  14
2FF2:  MOVWF  18
2FF4:  MOVLW  0B
2FF6:  MOVWF  1B
2FF8:  CLRF   16
2FFA:  BTFSC  FF2.7
2FFC:  BSF    16.7
2FFE:  BCF    FF2.7
3000:  MOVLW  0C
3002:  MOVWF  x34
3004:  MOVLB  0
3006:  CALL   0280
300A:  BTFSC  16.7
300C:  BSF    FF2.7
300E:  BSF    F8A.5
3010:  BCF    F93.5
3012:  BCF    32.0
3014:  BCF    32.1
....................             t_latencia=0;flag_iniciodamper=1;} 
3016:  CLRF   4F
3018:  CLRF   4E
301A:  BSF    32.6
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
301C:  BRA    3110
301E:  CLRF   16
3020:  BTFSC  FF2.7
3022:  BSF    16.7
3024:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
3026:  MOVLW  01
3028:  MOVLB  1
302A:  MOVWF  x35
302C:  MOVWF  x36
302E:  MOVLB  0
3030:  CALL   0206
3034:  BTFSC  16.7
3036:  BSF    FF2.7
3038:  CLRF   16
303A:  BTFSC  FF2.7
303C:  BSF    16.7
303E:  BCF    FF2.7
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
3040:  MOVLW  01
3042:  MOVLB  1
3044:  MOVWF  x35
3046:  MOVLW  02
3048:  MOVWF  x36
304A:  MOVLB  0
304C:  CALL   0206
3050:  BTFSC  16.7
3052:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña    "); 
3054:  MOVLW  E4
3056:  MOVWF  FF6
3058:  MOVLW  05
305A:  MOVWF  FF7
305C:  CLRF   16
305E:  BTFSC  FF2.7
3060:  BSF    16.7
3062:  BCF    FF2.7
3064:  CALL   02EC
3068:  BTFSC  16.7
306A:  BSF    FF2.7
306C:  CLRF   16
306E:  BTFSC  FF2.7
3070:  BSF    16.7
3072:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
3074:  MOVLW  01
3076:  MOVLB  1
3078:  MOVWF  x35
307A:  MOVLW  03
307C:  MOVWF  x36
307E:  MOVLB  0
3080:  CALL   0206
3084:  BTFSC  16.7
3086:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta    "); 
3088:  MOVLW  F8
308A:  MOVWF  FF6
308C:  MOVLW  05
308E:  MOVWF  FF7
3090:  CLRF   16
3092:  BTFSC  FF2.7
3094:  BSF    16.7
3096:  BCF    FF2.7
3098:  CALL   02EC
309C:  BTFSC  16.7
309E:  BSF    FF2.7
30A0:  CLRF   16
30A2:  BTFSC  FF2.7
30A4:  BSF    16.7
30A6:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
30A8:  MOVLW  01
30AA:  MOVLB  1
30AC:  MOVWF  x35
30AE:  MOVLW  04
30B0:  MOVWF  x36
30B2:  MOVLB  0
30B4:  CALL   0206
30B8:  BTFSC  16.7
30BA:  BSF    FF2.7
....................             printf(lcd_putc,"                   "); 
30BC:  MOVLW  0C
30BE:  MOVWF  FF6
30C0:  MOVLW  06
30C2:  MOVWF  FF7
30C4:  CLRF   16
30C6:  BTFSC  FF2.7
30C8:  BSF    16.7
30CA:  BCF    FF2.7
30CC:  CALL   02EC
30D0:  BTFSC  16.7
30D2:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
30D4:  MOVLW  02
30D6:  MOVLB  1
30D8:  MOVWF  x00
30DA:  CLRF   16
30DC:  BTFSC  FF2.7
30DE:  BSF    16.7
30E0:  BCF    FF2.7
30E2:  MOVLW  FA
30E4:  MOVWF  x35
30E6:  MOVLB  0
30E8:  CALL   00B6
30EC:  BTFSC  16.7
30EE:  BSF    FF2.7
30F0:  MOVLB  1
30F2:  DECFSZ x00,F
30F4:  BRA    30DA
30F6:  MOVLW  0B
30F8:  MOVWF  1B
30FA:  CLRF   16
30FC:  BTFSC  FF2.7
30FE:  BSF    16.7
3100:  BCF    FF2.7
3102:  MOVLW  0C
3104:  MOVWF  x34
3106:  MOVLB  0
3108:  CALL   0280
310C:  BTFSC  16.7
310E:  BSF    FF2.7
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
3110:  MOVF   1B,W
3112:  SUBLW  0B
3114:  BC    3150
3116:  MOVF   1B,W
3118:  SUBLW  0D
311A:  BNC   3150
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
311C:  MOVLW  01
311E:  SUBWF  1B,W
3120:  MOVLB  1
3122:  MOVWF  x00
3124:  CLRF   16
3126:  BTFSC  FF2.7
3128:  BSF    16.7
312A:  BCF    FF2.7
312C:  MOVWF  x35
312E:  MOVLW  04
3130:  MOVWF  x36
3132:  MOVLB  0
3134:  CALL   0206
3138:  BTFSC  16.7
313A:  BSF    FF2.7
313C:  CLRF   16
313E:  BTFSC  FF2.7
3140:  BSF    16.7
3142:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3144:  MOVFF  35,134
3148:  CALL   0280
314C:  BTFSC  16.7
314E:  BSF    FF2.7
....................           } 
....................  
....................    } 
3150:  MOVLB  1
3152:  BRA    2AF4
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
3154:  DECFSZ 18,W
3156:  BRA    3492
....................       if(paso<0) 
3158:  BTFSC  33.7
315A:  BRA    315E
315C:  BRA    3160
....................         {paso=0;} 
315E:  CLRF   33
3160:  CLRF   16
3162:  BTFSC  FF2.7
3164:  BSF    16.7
3166:  BCF    FF2.7
....................     
....................    lcd_gotoxy(1,1); 
3168:  MOVLW  01
316A:  MOVWF  x35
316C:  MOVWF  x36
316E:  MOVLB  0
3170:  CALL   0206
3174:  BTFSC  16.7
3176:  BSF    FF2.7
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
3178:  MOVLW  20
317A:  MOVWF  FF6
317C:  MOVLW  06
317E:  MOVWF  FF7
3180:  CLRF   16
3182:  BTFSC  FF2.7
3184:  BSF    16.7
3186:  BCF    FF2.7
3188:  CALL   02EC
318C:  BTFSC  16.7
318E:  BSF    FF2.7
....................     
....................    if(UP)//Si oprime hacia arriba 
3190:  BSF    F93.3
3192:  BTFSS  F81.3
3194:  BRA    31C0
....................       {  if(Flanco == 0)  
3196:  BTFSC  31.4
3198:  BRA    31BE
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
319A:  DECF   1E,F
319C:  DECF   1C,F
319E:  MOVLW  01
31A0:  ADDWF  1C,W
31A2:  MOVWF  1D
31A4:  BSF    31.4
31A6:  CLRF   16
31A8:  BTFSC  FF2.7
31AA:  BSF    16.7
31AC:  BCF    FF2.7
31AE:  MOVLW  1E
31B0:  MOVLB  1
31B2:  MOVWF  x35
31B4:  MOVLB  0
31B6:  CALL   00B6
31BA:  BTFSC  16.7
31BC:  BSF    FF2.7
....................          else 
31BE:  BRA    31C2
....................             {Flanco = 0;} 
31C0:  BCF    31.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31C2:  BSF    F93.2
31C4:  BTFSS  F81.2
31C6:  BRA    31F2
....................       {  if(Flanco2 == 0)  
31C8:  BTFSC  31.6
31CA:  BRA    31F0
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
31CC:  INCF   1E,F
31CE:  INCF   1C,F
31D0:  MOVLW  01
31D2:  SUBWF  1C,W
31D4:  MOVWF  1D
31D6:  BSF    31.6
31D8:  CLRF   16
31DA:  BTFSC  FF2.7
31DC:  BSF    16.7
31DE:  BCF    FF2.7
31E0:  MOVLW  1E
31E2:  MOVLB  1
31E4:  MOVWF  x35
31E6:  MOVLB  0
31E8:  CALL   00B6
31EC:  BTFSC  16.7
31EE:  BSF    FF2.7
....................          else 
31F0:  BRA    31F4
....................             {Flanco2 = 0;} 
31F2:  BCF    31.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
31F4:  MOVF   1E,W
31F6:  SUBWF  20,W
31F8:  BC    320A
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
31FA:  INCF   33,F
31FC:  MOVFF  1E,20
3200:  MOVLW  02
3202:  SUBWF  20,W
3204:  MOVWF  1F
3206:  MOVLW  04
3208:  MOVWF  1C
....................          
....................         if(Flecha2<nMenuL) 
320A:  MOVF   1F,W
320C:  SUBWF  1E,W
320E:  BC    3220
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
3210:  DECF   33,F
3212:  MOVFF  1E,1F
3216:  MOVLW  02
3218:  ADDWF  1F,W
321A:  MOVWF  20
321C:  MOVLW  02
321E:  MOVWF  1C
....................          
....................         if(Flecha2>n_opcionH) 
3220:  MOVF   1E,W
3222:  SUBWF  19,W
3224:  BC    3238
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
3226:  MOVFF  1A,1E
322A:  MOVLW  02
322C:  MOVWF  1C
322E:  CLRF   33
3230:  MOVFF  1E,1F
3234:  ADDWF  1F,W
3236:  MOVWF  20
....................          
....................         if(Flecha2<n_opcionL) 
3238:  MOVF   1A,W
323A:  SUBWF  1E,W
323C:  BC    3254
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
323E:  MOVFF  19,1E
3242:  MOVLW  04
3244:  MOVWF  1C
3246:  SUBWF  19,W
3248:  MOVWF  33
324A:  MOVFF  1E,20
324E:  MOVLW  02
3250:  SUBWF  20,W
3252:  MOVWF  1F
....................          
....................         mensajes(1+paso,2); 
3254:  MOVLW  01
3256:  ADDWF  33,W
3258:  MOVLB  1
325A:  MOVWF  x00
325C:  MOVWF  x01
325E:  MOVLW  02
3260:  MOVWF  x02
3262:  MOVLB  0
3264:  CALL   10F8
....................         mensajes(2+paso,3); 
3268:  MOVLW  02
326A:  ADDWF  33,W
326C:  MOVLB  1
326E:  MOVWF  x00
3270:  MOVWF  x01
3272:  MOVLW  03
3274:  MOVWF  x02
3276:  MOVLB  0
3278:  CALL   10F8
....................         mensajes(3+paso,4); 
327C:  MOVLW  03
327E:  ADDWF  33,W
3280:  MOVLB  1
3282:  MOVWF  x00
3284:  MOVWF  x01
3286:  MOVLW  04
3288:  MOVWF  x02
328A:  MOVLB  0
328C:  CALL   10F8
3290:  CLRF   16
3292:  BTFSC  FF2.7
3294:  BSF    16.7
3296:  BCF    FF2.7
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
3298:  MOVLW  01
329A:  MOVLB  1
329C:  MOVWF  x35
329E:  MOVFF  1C,136
32A2:  MOVLB  0
32A4:  CALL   0206
32A8:  BTFSC  16.7
32AA:  BSF    FF2.7
32AC:  CLRF   16
32AE:  BTFSC  FF2.7
32B0:  BSF    16.7
32B2:  BCF    FF2.7
....................         lcd_putc(t[0]); 
32B4:  MOVFF  34,134
32B8:  CALL   0280
32BC:  BTFSC  16.7
32BE:  BSF    FF2.7
....................  
....................         if(Flecha==2) 
32C0:  MOVF   1C,W
32C2:  SUBLW  02
32C4:  BNZ   3326
32C6:  CLRF   16
32C8:  BTFSC  FF2.7
32CA:  BSF    16.7
32CC:  BCF    FF2.7
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
32CE:  MOVLW  01
32D0:  MOVLB  1
32D2:  MOVWF  x35
32D4:  MOVLW  04
32D6:  MOVWF  x36
32D8:  MOVLB  0
32DA:  CALL   0206
32DE:  BTFSC  16.7
32E0:  BSF    FF2.7
32E2:  CLRF   16
32E4:  BTFSC  FF2.7
32E6:  BSF    16.7
32E8:  BCF    FF2.7
....................             lcd_putc(t[1]); 
32EA:  MOVFF  35,134
32EE:  CALL   0280
32F2:  BTFSC  16.7
32F4:  BSF    FF2.7
32F6:  CLRF   16
32F8:  BTFSC  FF2.7
32FA:  BSF    16.7
32FC:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
32FE:  MOVLW  01
3300:  MOVLB  1
3302:  MOVWF  x35
3304:  MOVLW  03
3306:  MOVWF  x36
3308:  MOVLB  0
330A:  CALL   0206
330E:  BTFSC  16.7
3310:  BSF    FF2.7
3312:  CLRF   16
3314:  BTFSC  FF2.7
3316:  BSF    16.7
3318:  BCF    FF2.7
....................             lcd_putc(t[1]); 
331A:  MOVFF  35,134
331E:  CALL   0280
3322:  BTFSC  16.7
3324:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==4) 
3326:  MOVF   1C,W
3328:  SUBLW  04
332A:  BNZ   338C
332C:  CLRF   16
332E:  BTFSC  FF2.7
3330:  BSF    16.7
3332:  BCF    FF2.7
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3334:  MOVLW  01
3336:  MOVLB  1
3338:  MOVWF  x35
333A:  MOVLW  02
333C:  MOVWF  x36
333E:  MOVLB  0
3340:  CALL   0206
3344:  BTFSC  16.7
3346:  BSF    FF2.7
3348:  CLRF   16
334A:  BTFSC  FF2.7
334C:  BSF    16.7
334E:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3350:  MOVFF  35,134
3354:  CALL   0280
3358:  BTFSC  16.7
335A:  BSF    FF2.7
335C:  CLRF   16
335E:  BTFSC  FF2.7
3360:  BSF    16.7
3362:  BCF    FF2.7
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
3364:  MOVLW  01
3366:  MOVLB  1
3368:  MOVWF  x35
336A:  MOVLW  03
336C:  MOVWF  x36
336E:  MOVLB  0
3370:  CALL   0206
3374:  BTFSC  16.7
3376:  BSF    FF2.7
3378:  CLRF   16
337A:  BTFSC  FF2.7
337C:  BSF    16.7
337E:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3380:  MOVFF  35,134
3384:  CALL   0280
3388:  BTFSC  16.7
338A:  BSF    FF2.7
....................           } 
....................          
....................         if(Flecha==3) 
338C:  MOVF   1C,W
338E:  SUBLW  03
3390:  BNZ   33F2
3392:  CLRF   16
3394:  BTFSC  FF2.7
3396:  BSF    16.7
3398:  BCF    FF2.7
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
339A:  MOVLW  01
339C:  MOVLB  1
339E:  MOVWF  x35
33A0:  MOVLW  04
33A2:  MOVWF  x36
33A4:  MOVLB  0
33A6:  CALL   0206
33AA:  BTFSC  16.7
33AC:  BSF    FF2.7
33AE:  CLRF   16
33B0:  BTFSC  FF2.7
33B2:  BSF    16.7
33B4:  BCF    FF2.7
....................             lcd_putc(t[1]); 
33B6:  MOVFF  35,134
33BA:  CALL   0280
33BE:  BTFSC  16.7
33C0:  BSF    FF2.7
33C2:  CLRF   16
33C4:  BTFSC  FF2.7
33C6:  BSF    16.7
33C8:  BCF    FF2.7
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
33CA:  MOVLW  01
33CC:  MOVLB  1
33CE:  MOVWF  x35
33D0:  MOVLW  02
33D2:  MOVWF  x36
33D4:  MOVLB  0
33D6:  CALL   0206
33DA:  BTFSC  16.7
33DC:  BSF    FF2.7
33DE:  CLRF   16
33E0:  BTFSC  FF2.7
33E2:  BSF    16.7
33E4:  BCF    FF2.7
....................             lcd_putc(t[1]); 
33E6:  MOVFF  35,134
33EA:  CALL   0280
33EE:  BTFSC  16.7
33F0:  BSF    FF2.7
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
33F2:  BSF    F93.0
33F4:  BTFSS  F81.0
33F6:  BRA    3444
....................       {  if(Flanco1 == 0)  
33F8:  BTFSC  31.5
33FA:  BRA    3442
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(200);printf(lcd_putc,"\f"); 
33FC:  MOVFF  1E,18
3400:  MOVLW  03
3402:  MOVWF  1C
3404:  CLRF   16
3406:  BTFSC  FF2.7
3408:  BSF    16.7
340A:  BCF    FF2.7
340C:  MOVLW  C8
340E:  MOVLB  1
3410:  MOVWF  x35
3412:  MOVLB  0
3414:  CALL   00B6
3418:  BTFSC  16.7
341A:  BSF    FF2.7
341C:  CLRF   16
341E:  BTFSC  FF2.7
3420:  BSF    16.7
3422:  BCF    FF2.7
3424:  MOVLW  0C
3426:  MOVLB  1
3428:  MOVWF  x34
342A:  MOVLB  0
342C:  CALL   0280
3430:  BTFSC  16.7
3432:  BSF    FF2.7
....................             if(Menu==6) 
3434:  MOVF   18,W
3436:  SUBLW  06
3438:  BNZ   3442
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
343A:  CLRF   37
343C:  CLRF   38
343E:  CLRF   39
3440:  CLRF   3A
....................          else 
3442:  BRA    3446
....................             {Flanco1 = 0;}   
3444:  BCF    31.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
3446:  BSF    F93.1
3448:  BTFSS  F81.1
344A:  BRA    348E
....................       {  if(Flanco3 == 0)  
344C:  BTFSC  31.7
344E:  BRA    348C
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
3450:  MOVLW  02
3452:  MOVLB  1
3454:  MOVWF  x00
3456:  CLRF   16
3458:  BTFSC  FF2.7
345A:  BSF    16.7
345C:  BCF    FF2.7
345E:  MOVLW  FA
3460:  MOVWF  x35
3462:  MOVLB  0
3464:  CALL   00B6
3468:  BTFSC  16.7
346A:  BSF    FF2.7
346C:  MOVLB  1
346E:  DECFSZ x00,F
3470:  BRA    3456
3472:  MOVLW  14
3474:  MOVWF  18
3476:  CLRF   16
3478:  BTFSC  FF2.7
347A:  BSF    16.7
347C:  BCF    FF2.7
347E:  MOVLW  0C
3480:  MOVWF  x34
3482:  MOVLB  0
3484:  CALL   0280
3488:  BTFSC  16.7
348A:  BSF    FF2.7
....................          else 
348C:  BRA    3490
....................             {Flanco3 = 0;}                
348E:  BCF    31.7
3490:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
3492:  MOVF   18,W
3494:  SUBLW  02
3496:  BTFSS  FD8.2
3498:  BRA    36BE
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
349A:  BTG    31.2
349C:  BSF    31.5
349E:  MOVLW  01
34A0:  MOVWF  18
34A2:  CLRF   33
....................                        
....................             if(estadoalarma==1) 
34A4:  BTFSS  31.2
34A6:  BRA    3578
....................             {estadoalarma=1; 
34A8:  BSF    31.2
34AA:  CLRF   16
34AC:  BTFSC  FF2.7
34AE:  BSF    16.7
34B0:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
34B2:  MOVLW  01
34B4:  MOVWF  x35
34B6:  MOVWF  x36
34B8:  MOVLB  0
34BA:  CALL   0206
34BE:  BTFSC  16.7
34C0:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
34C2:  MOVLW  36
34C4:  MOVWF  FF6
34C6:  MOVLW  06
34C8:  MOVWF  FF7
34CA:  CLRF   16
34CC:  BTFSC  FF2.7
34CE:  BSF    16.7
34D0:  BCF    FF2.7
34D2:  CALL   02EC
34D6:  BTFSC  16.7
34D8:  BSF    FF2.7
34DA:  CLRF   16
34DC:  BTFSC  FF2.7
34DE:  BSF    16.7
34E0:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
34E2:  MOVLW  01
34E4:  MOVLB  1
34E6:  MOVWF  x35
34E8:  MOVLW  02
34EA:  MOVWF  x36
34EC:  MOVLB  0
34EE:  CALL   0206
34F2:  BTFSC  16.7
34F4:  BSF    FF2.7
....................                printf(lcd_putc,"        Activo      "); 
34F6:  MOVLW  4C
34F8:  MOVWF  FF6
34FA:  MOVLW  06
34FC:  MOVWF  FF7
34FE:  CLRF   16
3500:  BTFSC  FF2.7
3502:  BSF    16.7
3504:  BCF    FF2.7
3506:  CALL   02EC
350A:  BTFSC  16.7
350C:  BSF    FF2.7
350E:  CLRF   16
3510:  BTFSC  FF2.7
3512:  BSF    16.7
3514:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
3516:  MOVLW  01
3518:  MOVLB  1
351A:  MOVWF  x35
351C:  MOVLW  03
351E:  MOVWF  x36
3520:  MOVLB  0
3522:  CALL   0206
3526:  BTFSC  16.7
3528:  BSF    FF2.7
....................                printf(lcd_putc,"        Alarma      "); 
352A:  MOVLW  62
352C:  MOVWF  FF6
352E:  MOVLW  06
3530:  MOVWF  FF7
3532:  CLRF   16
3534:  BTFSC  FF2.7
3536:  BSF    16.7
3538:  BCF    FF2.7
353A:  CALL   02EC
353E:  BTFSC  16.7
3540:  BSF    FF2.7
3542:  CLRF   16
3544:  BTFSC  FF2.7
3546:  BSF    16.7
3548:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
354A:  MOVLW  01
354C:  MOVLB  1
354E:  MOVWF  x35
3550:  MOVLW  04
3552:  MOVWF  x36
3554:  MOVLB  0
3556:  CALL   0206
355A:  BTFSC  16.7
355C:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
355E:  MOVLW  78
3560:  MOVWF  FF6
3562:  MOVLW  06
3564:  MOVWF  FF7
3566:  CLRF   16
3568:  BTFSC  FF2.7
356A:  BSF    16.7
356C:  BCF    FF2.7
356E:  CALL   02EC
3572:  BTFSC  16.7
3574:  BSF    FF2.7
3576:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
3578:  BTFSC  31.2
357A:  BRA    364C
....................             {estadoalarma=0; 
357C:  BCF    31.2
357E:  CLRF   16
3580:  BTFSC  FF2.7
3582:  BSF    16.7
3584:  BCF    FF2.7
....................                lcd_gotoxy(1,1); 
3586:  MOVLW  01
3588:  MOVWF  x35
358A:  MOVWF  x36
358C:  MOVLB  0
358E:  CALL   0206
3592:  BTFSC  16.7
3594:  BSF    FF2.7
....................                printf(lcd_putc,"                    "); 
3596:  MOVLW  8E
3598:  MOVWF  FF6
359A:  MOVLW  06
359C:  MOVWF  FF7
359E:  CLRF   16
35A0:  BTFSC  FF2.7
35A2:  BSF    16.7
35A4:  BCF    FF2.7
35A6:  CALL   02EC
35AA:  BTFSC  16.7
35AC:  BSF    FF2.7
35AE:  CLRF   16
35B0:  BTFSC  FF2.7
35B2:  BSF    16.7
35B4:  BCF    FF2.7
....................                lcd_gotoxy(1,2); 
35B6:  MOVLW  01
35B8:  MOVLB  1
35BA:  MOVWF  x35
35BC:  MOVLW  02
35BE:  MOVWF  x36
35C0:  MOVLB  0
35C2:  CALL   0206
35C6:  BTFSC  16.7
35C8:  BSF    FF2.7
....................                printf(lcd_putc,"      Desactivo     "); 
35CA:  MOVLW  A4
35CC:  MOVWF  FF6
35CE:  MOVLW  06
35D0:  MOVWF  FF7
35D2:  CLRF   16
35D4:  BTFSC  FF2.7
35D6:  BSF    16.7
35D8:  BCF    FF2.7
35DA:  CALL   02EC
35DE:  BTFSC  16.7
35E0:  BSF    FF2.7
35E2:  CLRF   16
35E4:  BTFSC  FF2.7
35E6:  BSF    16.7
35E8:  BCF    FF2.7
....................                lcd_gotoxy(1,3); 
35EA:  MOVLW  01
35EC:  MOVLB  1
35EE:  MOVWF  x35
35F0:  MOVLW  03
35F2:  MOVWF  x36
35F4:  MOVLB  0
35F6:  CALL   0206
35FA:  BTFSC  16.7
35FC:  BSF    FF2.7
....................                printf(lcd_putc,"       Alarma       "); 
35FE:  MOVLW  BA
3600:  MOVWF  FF6
3602:  MOVLW  06
3604:  MOVWF  FF7
3606:  CLRF   16
3608:  BTFSC  FF2.7
360A:  BSF    16.7
360C:  BCF    FF2.7
360E:  CALL   02EC
3612:  BTFSC  16.7
3614:  BSF    FF2.7
3616:  CLRF   16
3618:  BTFSC  FF2.7
361A:  BSF    16.7
361C:  BCF    FF2.7
....................                lcd_gotoxy(1,4); 
361E:  MOVLW  01
3620:  MOVLB  1
3622:  MOVWF  x35
3624:  MOVLW  04
3626:  MOVWF  x36
3628:  MOVLB  0
362A:  CALL   0206
362E:  BTFSC  16.7
3630:  BSF    FF2.7
....................                printf(lcd_putc,"                    ");} 
3632:  MOVLW  D0
3634:  MOVWF  FF6
3636:  MOVLW  06
3638:  MOVWF  FF7
363A:  CLRF   16
363C:  BTFSC  FF2.7
363E:  BSF    16.7
3640:  BCF    FF2.7
3642:  CALL   02EC
3646:  BTFSC  16.7
3648:  BSF    FF2.7
364A:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
364C:  MOVLW  00
364E:  BTFSC  31.2
3650:  MOVLW  01
3652:  MOVWF  x00
3654:  MOVLW  05
3656:  MOVWF  FA9
3658:  MOVFF  100,FA8
365C:  BCF    FA6.6
365E:  BCF    FA6.7
3660:  BSF    FA6.2
3662:  MOVF   FF2,W
3664:  MOVWF  00
3666:  BCF    FF2.7
3668:  MOVLB  F
366A:  MOVLW  55
366C:  MOVWF  FA7
366E:  MOVLW  AA
3670:  MOVWF  FA7
3672:  BSF    FA6.1
3674:  BTFSC  FA6.1
3676:  BRA    3674
3678:  BCF    FA6.2
367A:  MOVF   00,W
367C:  IORWF  FF2,F
367E:  MOVLW  02
3680:  MOVLB  1
3682:  MOVWF  x00
3684:  CLRF   16
3686:  BTFSC  FF2.7
3688:  BSF    16.7
368A:  BCF    FF2.7
368C:  MOVLW  FA
368E:  MOVWF  x35
3690:  MOVLB  0
3692:  CALL   00B6
3696:  BTFSC  16.7
3698:  BSF    FF2.7
369A:  MOVLB  1
369C:  DECFSZ x00,F
369E:  BRA    3684
36A0:  MOVLW  02
36A2:  MOVWF  1C
36A4:  MOVWF  1E
36A6:  CLRF   16
36A8:  BTFSC  FF2.7
36AA:  BSF    16.7
36AC:  BCF    FF2.7
36AE:  MOVLW  0C
36B0:  MOVWF  x34
36B2:  MOVLB  0
36B4:  CALL   0280
36B8:  BTFSC  16.7
36BA:  BSF    FF2.7
36BC:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de estado de Alarma 
36BE:  MOVF   18,W
36C0:  SUBLW  03
36C2:  BTFSS  FD8.2
36C4:  BRA    3A5A
36C6:  CLRF   16
36C8:  BTFSC  FF2.7
36CA:  BSF    16.7
36CC:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
36CE:  MOVLW  01
36D0:  MOVWF  x35
36D2:  MOVLW  02
36D4:  MOVWF  x36
36D6:  MOVLB  0
36D8:  CALL   0206
36DC:  BTFSC  16.7
36DE:  BSF    FF2.7
....................    printf(lcd_putc,"      Setpoint      "); 
36E0:  MOVLW  E6
36E2:  MOVWF  FF6
36E4:  MOVLW  06
36E6:  MOVWF  FF7
36E8:  CLRF   16
36EA:  BTFSC  FF2.7
36EC:  BSF    16.7
36EE:  BCF    FF2.7
36F0:  CALL   02EC
36F4:  BTFSC  16.7
36F6:  BSF    FF2.7
36F8:  CLRF   16
36FA:  BTFSC  FF2.7
36FC:  BSF    16.7
36FE:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
3700:  MOVLW  01
3702:  MOVLB  1
3704:  MOVWF  x35
3706:  MOVLW  03
3708:  MOVWF  x36
370A:  MOVLB  0
370C:  CALL   0206
3710:  BTFSC  16.7
3712:  BSF    FF2.7
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
3714:  MOVLW  FC
3716:  MOVWF  FF6
3718:  MOVLW  06
371A:  MOVWF  FF7
371C:  MOVLW  07
371E:  MOVLB  1
3720:  MOVWF  x08
3722:  MOVLB  0
3724:  CALL   0F7E
3728:  MOVLW  89
372A:  MOVWF  FE9
372C:  MOVFF  42,10B
3730:  MOVFF  41,10A
3734:  MOVFF  40,109
3738:  MOVFF  3F,108
373C:  MOVLW  02
373E:  MOVLB  1
3740:  MOVWF  x0C
3742:  MOVLB  0
3744:  CALL   1488
3748:  CLRF   16
374A:  BTFSC  FF2.7
374C:  BSF    16.7
374E:  BCF    FF2.7
3750:  MOVLW  20
3752:  MOVLB  1
3754:  MOVWF  x34
3756:  MOVLB  0
3758:  CALL   0280
375C:  BTFSC  16.7
375E:  BSF    FF2.7
3760:  CLRF   16
3762:  BTFSC  FF2.7
3764:  BSF    16.7
3766:  BCF    FF2.7
3768:  MOVLW  20
376A:  MOVLB  1
376C:  MOVWF  x34
376E:  MOVLB  0
3770:  CALL   0280
3774:  BTFSC  16.7
3776:  BSF    FF2.7
3778:  CLRF   16
377A:  BTFSC  FF2.7
377C:  BSF    16.7
377E:  BCF    FF2.7
3780:  MOVLW  20
3782:  MOVLB  1
3784:  MOVWF  x34
3786:  MOVLB  0
3788:  CALL   0280
378C:  BTFSC  16.7
378E:  BSF    FF2.7
....................     
....................    if(setpoint>2.0) 
3790:  MOVLB  1
3792:  CLRF   x1D
3794:  CLRF   x1C
3796:  CLRF   x1B
3798:  MOVLW  80
379A:  MOVWF  x1A
379C:  MOVFF  42,121
37A0:  MOVFF  41,120
37A4:  MOVFF  40,11F
37A8:  MOVFF  3F,11E
37AC:  MOVLB  0
37AE:  CALL   166A
37B2:  BNC   37BE
....................    {setpoint=2.0;} 
37B4:  CLRF   42
37B6:  CLRF   41
37B8:  CLRF   40
37BA:  MOVLW  80
37BC:  MOVWF  3F
....................     
....................    if(setpoint<0.5) 
37BE:  MOVFF  42,11D
37C2:  MOVFF  41,11C
37C6:  MOVFF  40,11B
37CA:  MOVFF  3F,11A
37CE:  MOVLB  1
37D0:  CLRF   x21
37D2:  CLRF   x20
37D4:  CLRF   x1F
37D6:  MOVLW  7E
37D8:  MOVWF  x1E
37DA:  MOVLB  0
37DC:  CALL   166A
37E0:  BNC   37EC
....................    {setpoint=0.5;} 
37E2:  CLRF   42
37E4:  CLRF   41
37E6:  CLRF   40
37E8:  MOVLW  7E
37EA:  MOVWF  3F
....................     
....................       if(UP)//Si oprime hacia arriba 
37EC:  BSF    F93.3
37EE:  BTFSS  F81.3
37F0:  BRA    384C
....................       {  if(Flanco == 0)  
37F2:  BTFSC  31.4
37F4:  BRA    384A
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
37F6:  BCF    FD8.1
37F8:  MOVFF  42,121
37FC:  MOVFF  41,120
3800:  MOVFF  40,11F
3804:  MOVFF  3F,11E
3808:  MOVLW  CD
380A:  MOVLB  1
380C:  MOVWF  x25
380E:  MOVLW  CC
3810:  MOVWF  x24
3812:  MOVLW  4C
3814:  MOVWF  x23
3816:  MOVLW  7B
3818:  MOVWF  x22
381A:  MOVLB  0
381C:  CALL   0D06
3820:  MOVFF  03,42
3824:  MOVFF  02,41
3828:  MOVFF  01,40
382C:  MOVFF  00,3F
3830:  BSF    31.4
3832:  CLRF   16
3834:  BTFSC  FF2.7
3836:  BSF    16.7
3838:  BCF    FF2.7
383A:  MOVLW  1E
383C:  MOVLB  1
383E:  MOVWF  x35
3840:  MOVLB  0
3842:  CALL   00B6
3846:  BTFSC  16.7
3848:  BSF    FF2.7
....................          else 
384A:  BRA    384E
....................             {Flanco = 0;} 
384C:  BCF    31.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
384E:  BSF    F93.2
3850:  BTFSS  F81.2
3852:  BRA    38AE
....................       {  if(Flanco2 == 0)  
3854:  BTFSC  31.6
3856:  BRA    38AC
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
3858:  BSF    FD8.1
385A:  MOVFF  42,121
385E:  MOVFF  41,120
3862:  MOVFF  40,11F
3866:  MOVFF  3F,11E
386A:  MOVLW  CD
386C:  MOVLB  1
386E:  MOVWF  x25
3870:  MOVLW  CC
3872:  MOVWF  x24
3874:  MOVLW  4C
3876:  MOVWF  x23
3878:  MOVLW  7B
387A:  MOVWF  x22
387C:  MOVLB  0
387E:  CALL   0D06
3882:  MOVFF  03,42
3886:  MOVFF  02,41
388A:  MOVFF  01,40
388E:  MOVFF  00,3F
3892:  BSF    31.6
3894:  CLRF   16
3896:  BTFSC  FF2.7
3898:  BSF    16.7
389A:  BCF    FF2.7
389C:  MOVLW  1E
389E:  MOVLB  1
38A0:  MOVWF  x35
38A2:  MOVLB  0
38A4:  CALL   00B6
38A8:  BTFSC  16.7
38AA:  BSF    FF2.7
....................          else 
38AC:  BRA    38B0
....................             {Flanco2 = 0;} 
38AE:  BCF    31.6
....................     
....................       if(RIGHT)// Si oprime derecha 
38B0:  BSF    F93.0
38B2:  BTFSS  F81.0
38B4:  BRA    3A08
....................       {  if(Flanco1 == 0)  
38B6:  BTFSC  31.5
38B8:  BRA    3A06
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
38BA:  MOVLW  01
38BC:  MOVWF  18
38BE:  CLRF   33
38C0:  MOVLW  02
38C2:  MOVWF  1C
38C4:  MOVWF  1E
38C6:  MOVLW  0B
38C8:  MOVWF  1B
38CA:  CLRF   16
38CC:  BTFSC  FF2.7
38CE:  BSF    16.7
38D0:  BCF    FF2.7
38D2:  MOVLW  1E
38D4:  MOVLB  1
38D6:  MOVWF  x35
38D8:  MOVLB  0
38DA:  CALL   00B6
38DE:  BTFSC  16.7
38E0:  BSF    FF2.7
38E2:  CLRF   16
38E4:  BTFSC  FF2.7
38E6:  BSF    16.7
38E8:  BCF    FF2.7
38EA:  MOVLW  0C
38EC:  MOVLB  1
38EE:  MOVWF  x34
38F0:  MOVLB  0
38F2:  CALL   0280
38F6:  BTFSC  16.7
38F8:  BSF    FF2.7
....................             Temporal=setpoint; 
38FA:  MOVFF  42,A7
38FE:  MOVFF  41,A6
3902:  MOVFF  40,A5
3906:  MOVFF  3F,A4
....................             Entero=(int)setpoint; 
390A:  MOVFF  42,FF
390E:  MOVFF  41,FE
3912:  MOVFF  40,FD
3916:  MOVFF  3F,FC
391A:  CALL   16E4
391E:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
3922:  MOVLB  1
3924:  CLRF   x0A
3926:  MOVFF  22,109
392A:  MOVLB  0
392C:  CALL   0B72
3930:  BSF    FD8.1
3932:  MOVFF  A7,121
3936:  MOVFF  A6,120
393A:  MOVFF  A5,11F
393E:  MOVFF  A4,11E
3942:  MOVFF  03,125
3946:  MOVFF  02,124
394A:  MOVFF  01,123
394E:  MOVFF  00,122
3952:  CALL   0D06
3956:  MOVFF  03,A7
395A:  MOVFF  02,A6
395E:  MOVFF  01,A5
3962:  MOVFF  00,A4
....................             Temporal2=Temporal*100.0; 
3966:  MOVFF  A7,11D
396A:  MOVFF  A6,11C
396E:  MOVFF  A5,11B
3972:  MOVFF  A4,11A
3976:  MOVLB  1
3978:  CLRF   x21
397A:  CLRF   x20
397C:  MOVLW  48
397E:  MOVWF  x1F
3980:  MOVLW  85
3982:  MOVWF  x1E
3984:  MOVLB  0
3986:  CALL   12CE
398A:  MOVFF  03,AB
398E:  MOVFF  02,AA
3992:  MOVFF  01,A9
3996:  MOVFF  00,A8
....................             Decimal2=(int8)Temporal2; 
399A:  MOVFF  AB,FF
399E:  MOVFF  AA,FE
39A2:  MOVFF  A9,FD
39A6:  MOVFF  A8,FC
39AA:  CALL   16E4
39AE:  MOVFF  01,24
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
39B2:  MOVLW  28
39B4:  MOVWF  FA9
39B6:  MOVFF  22,FA8
39BA:  BCF    FA6.6
39BC:  BCF    FA6.7
39BE:  BSF    FA6.2
39C0:  MOVF   FF2,W
39C2:  MOVWF  00
39C4:  BCF    FF2.7
39C6:  MOVLB  F
39C8:  MOVLW  55
39CA:  MOVWF  FA7
39CC:  MOVLW  AA
39CE:  MOVWF  FA7
39D0:  BSF    FA6.1
39D2:  BTFSC  FA6.1
39D4:  BRA    39D2
39D6:  BCF    FA6.2
39D8:  MOVF   00,W
39DA:  IORWF  FF2,F
39DC:  MOVLW  29
39DE:  MOVWF  FA9
39E0:  MOVFF  24,FA8
39E4:  BCF    FA6.6
39E6:  BCF    FA6.7
39E8:  BSF    FA6.2
39EA:  MOVF   FF2,W
39EC:  MOVWF  00
39EE:  BCF    FF2.7
39F0:  MOVLW  55
39F2:  MOVWF  FA7
39F4:  MOVLW  AA
39F6:  MOVWF  FA7
39F8:  BSF    FA6.1
39FA:  BTFSC  FA6.1
39FC:  BRA    39FA
39FE:  BCF    FA6.2
3A00:  MOVF   00,W
3A02:  IORWF  FF2,F
3A04:  MOVLB  0
....................             }} 
....................          else 
3A06:  BRA    3A0A
....................             {Flanco1 = 0;}    
3A08:  BCF    31.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3A0A:  BSF    F93.1
3A0C:  BTFSS  F81.1
3A0E:  BRA    3A56
....................       {  if(Flanco3 == 0)  
3A10:  BTFSC  31.7
3A12:  BRA    3A54
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
3A14:  MOVLW  01
3A16:  MOVWF  18
3A18:  CLRF   33
3A1A:  MOVLW  02
3A1C:  MOVWF  1C
3A1E:  MOVWF  1E
3A20:  MOVLW  0B
3A22:  MOVWF  1B
3A24:  CLRF   16
3A26:  BTFSC  FF2.7
3A28:  BSF    16.7
3A2A:  BCF    FF2.7
3A2C:  MOVLW  1E
3A2E:  MOVLB  1
3A30:  MOVWF  x35
3A32:  MOVLB  0
3A34:  CALL   00B6
3A38:  BTFSC  16.7
3A3A:  BSF    FF2.7
3A3C:  CLRF   16
3A3E:  BTFSC  FF2.7
3A40:  BSF    16.7
3A42:  BCF    FF2.7
3A44:  MOVLW  0C
3A46:  MOVLB  1
3A48:  MOVWF  x34
3A4A:  MOVLB  0
3A4C:  CALL   0280
3A50:  BTFSC  16.7
3A52:  BSF    FF2.7
....................          else 
3A54:  BRA    3A58
....................             {Flanco3 = 0;}     
3A56:  BCF    31.7
3A58:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
3A5A:  MOVF   18,W
3A5C:  SUBLW  04
3A5E:  BTFSS  FD8.2
3A60:  BRA    3F86
3A62:  CLRF   16
3A64:  BTFSC  FF2.7
3A66:  BSF    16.7
3A68:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
3A6A:  MOVLW  01
3A6C:  MOVWF  x35
3A6E:  MOVWF  x36
3A70:  MOVLB  0
3A72:  CALL   0206
3A76:  BTFSC  16.7
3A78:  BSF    FF2.7
....................    printf(lcd_putc,"      Ingrese       "); 
3A7A:  MOVLW  0C
3A7C:  MOVWF  FF6
3A7E:  MOVLW  07
3A80:  MOVWF  FF7
3A82:  CLRF   16
3A84:  BTFSC  FF2.7
3A86:  BSF    16.7
3A88:  BCF    FF2.7
3A8A:  CALL   02EC
3A8E:  BTFSC  16.7
3A90:  BSF    FF2.7
3A92:  CLRF   16
3A94:  BTFSC  FF2.7
3A96:  BSF    16.7
3A98:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
3A9A:  MOVLW  01
3A9C:  MOVLB  1
3A9E:  MOVWF  x35
3AA0:  MOVLW  02
3AA2:  MOVWF  x36
3AA4:  MOVLB  0
3AA6:  CALL   0206
3AAA:  BTFSC  16.7
3AAC:  BSF    FF2.7
....................    printf(lcd_putc," Contraseña Actual  "); 
3AAE:  MOVLW  22
3AB0:  MOVWF  FF6
3AB2:  MOVLW  07
3AB4:  MOVWF  FF7
3AB6:  CLRF   16
3AB8:  BTFSC  FF2.7
3ABA:  BSF    16.7
3ABC:  BCF    FF2.7
3ABE:  CALL   02EC
3AC2:  BTFSC  16.7
3AC4:  BSF    FF2.7
3AC6:  CLRF   16
3AC8:  BTFSC  FF2.7
3ACA:  BSF    16.7
3ACC:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
3ACE:  MOVLW  01
3AD0:  MOVLB  1
3AD2:  MOVWF  x35
3AD4:  MOVLW  03
3AD6:  MOVWF  x36
3AD8:  MOVLB  0
3ADA:  CALL   0206
3ADE:  BTFSC  16.7
3AE0:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3AE2:  MOVLW  38
3AE4:  MOVWF  FF6
3AE6:  MOVLW  07
3AE8:  MOVWF  FF7
3AEA:  MOVLW  0A
3AEC:  MOVLB  1
3AEE:  MOVWF  x08
3AF0:  MOVLB  0
3AF2:  CALL   0F7E
3AF6:  MOVFF  37,100
3AFA:  MOVLW  1F
3AFC:  MOVLB  1
3AFE:  MOVWF  x01
3B00:  MOVLB  0
3B02:  CALL   0FE0
3B06:  MOVFF  38,100
3B0A:  MOVLW  1F
3B0C:  MOVLB  1
3B0E:  MOVWF  x01
3B10:  MOVLB  0
3B12:  CALL   0FE0
3B16:  MOVFF  39,100
3B1A:  MOVLW  1F
3B1C:  MOVLB  1
3B1E:  MOVWF  x01
3B20:  MOVLB  0
3B22:  CALL   0FE0
3B26:  MOVFF  3A,100
3B2A:  MOVLW  1F
3B2C:  MOVLB  1
3B2E:  MOVWF  x01
3B30:  MOVLB  0
3B32:  CALL   0FE0
3B36:  CLRF   16
3B38:  BTFSC  FF2.7
3B3A:  BSF    16.7
3B3C:  BCF    FF2.7
3B3E:  MOVLW  20
3B40:  MOVLB  1
3B42:  MOVWF  x34
3B44:  MOVLB  0
3B46:  CALL   0280
3B4A:  BTFSC  16.7
3B4C:  BSF    FF2.7
3B4E:  CLRF   16
3B50:  BTFSC  FF2.7
3B52:  BSF    16.7
3B54:  BCF    FF2.7
3B56:  MOVLW  20
3B58:  MOVLB  1
3B5A:  MOVWF  x34
3B5C:  MOVLB  0
3B5E:  CALL   0280
3B62:  BTFSC  16.7
3B64:  BSF    FF2.7
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3B66:  BSF    F93.3
3B68:  BTFSS  F81.3
3B6A:  BRA    3B9E
....................       {  if(Flanco == 0)  
3B6C:  BTFSC  31.4
3B6E:  BRA    3B9C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3B70:  MOVLW  0B
3B72:  SUBWF  1B,W
3B74:  CLRF   03
3B76:  ADDLW  37
3B78:  MOVWF  FE9
3B7A:  MOVLW  00
3B7C:  ADDWFC 03,W
3B7E:  MOVWF  FEA
3B80:  INCF   FEF,F
3B82:  BSF    31.4
3B84:  CLRF   16
3B86:  BTFSC  FF2.7
3B88:  BSF    16.7
3B8A:  BCF    FF2.7
3B8C:  MOVLW  1E
3B8E:  MOVLB  1
3B90:  MOVWF  x35
3B92:  MOVLB  0
3B94:  CALL   00B6
3B98:  BTFSC  16.7
3B9A:  BSF    FF2.7
....................          else 
3B9C:  BRA    3BA0
....................             {Flanco = 0;} 
3B9E:  BCF    31.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3BA0:  BSF    F93.2
3BA2:  BTFSS  F81.2
3BA4:  BRA    3BD8
....................       {  if(Flanco2 == 0)  
3BA6:  BTFSC  31.6
3BA8:  BRA    3BD6
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3BAA:  MOVLW  0B
3BAC:  SUBWF  1B,W
3BAE:  CLRF   03
3BB0:  ADDLW  37
3BB2:  MOVWF  FE9
3BB4:  MOVLW  00
3BB6:  ADDWFC 03,W
3BB8:  MOVWF  FEA
3BBA:  DECF   FEF,F
3BBC:  BSF    31.6
3BBE:  CLRF   16
3BC0:  BTFSC  FF2.7
3BC2:  BSF    16.7
3BC4:  BCF    FF2.7
3BC6:  MOVLW  1E
3BC8:  MOVLB  1
3BCA:  MOVWF  x35
3BCC:  MOVLB  0
3BCE:  CALL   00B6
3BD2:  BTFSC  16.7
3BD4:  BSF    FF2.7
....................          else 
3BD6:  BRA    3BDA
....................             {Flanco2 = 0;} 
3BD8:  BCF    31.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3BDA:  BSF    F93.0
3BDC:  BTFSS  F81.0
3BDE:  BRA    3C1A
....................       {  if(Flanco1 == 0)  
3BE0:  BTFSC  31.5
3BE2:  BRA    3C18
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3BE4:  BSF    31.5
3BE6:  INCF   1B,F
3BE8:  CLRF   16
3BEA:  BTFSC  FF2.7
3BEC:  BSF    16.7
3BEE:  BCF    FF2.7
3BF0:  MOVLW  1E
3BF2:  MOVLB  1
3BF4:  MOVWF  x35
3BF6:  MOVLB  0
3BF8:  CALL   00B6
3BFC:  BTFSC  16.7
3BFE:  BSF    FF2.7
3C00:  CLRF   16
3C02:  BTFSC  FF2.7
3C04:  BSF    16.7
3C06:  BCF    FF2.7
3C08:  MOVLW  0C
3C0A:  MOVLB  1
3C0C:  MOVWF  x34
3C0E:  MOVLB  0
3C10:  CALL   0280
3C14:  BTFSC  16.7
3C16:  BSF    FF2.7
....................          else 
3C18:  BRA    3C1C
....................             {Flanco1 = 0;}    
3C1A:  BCF    31.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3C1C:  BSF    F93.1
3C1E:  BTFSS  F81.1
3C20:  BRA    3C5C
....................       {  if(Flanco3 == 0)  
3C22:  BTFSC  31.7
3C24:  BRA    3C5A
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3C26:  BSF    31.7
3C28:  DECF   1B,F
3C2A:  CLRF   16
3C2C:  BTFSC  FF2.7
3C2E:  BSF    16.7
3C30:  BCF    FF2.7
3C32:  MOVLW  1E
3C34:  MOVLB  1
3C36:  MOVWF  x35
3C38:  MOVLB  0
3C3A:  CALL   00B6
3C3E:  BTFSC  16.7
3C40:  BSF    FF2.7
3C42:  CLRF   16
3C44:  BTFSC  FF2.7
3C46:  BSF    16.7
3C48:  BCF    FF2.7
3C4A:  MOVLW  0C
3C4C:  MOVLB  1
3C4E:  MOVWF  x34
3C50:  MOVLB  0
3C52:  CALL   0280
3C56:  BTFSC  16.7
3C58:  BSF    FF2.7
....................          else 
3C5A:  BRA    3C5E
....................             {Flanco3 = 0;}     
3C5C:  BCF    31.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3C5E:  MOVLW  0B
3C60:  SUBWF  1B,W
3C62:  CLRF   03
3C64:  ADDLW  37
3C66:  MOVWF  FE9
3C68:  MOVLW  00
3C6A:  ADDWFC 03,W
3C6C:  MOVWF  FEA
3C6E:  BTFSC  FEF.7
3C70:  BRA    3C74
3C72:  BRA    3C88
....................        {clave[unidad-11]=9;} 
3C74:  MOVLW  0B
3C76:  SUBWF  1B,W
3C78:  CLRF   03
3C7A:  ADDLW  37
3C7C:  MOVWF  FE9
3C7E:  MOVLW  00
3C80:  ADDWFC 03,W
3C82:  MOVWF  FEA
3C84:  MOVLW  09
3C86:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3C88:  MOVLW  0B
3C8A:  SUBWF  1B,W
3C8C:  CLRF   03
3C8E:  ADDLW  37
3C90:  MOVWF  FE9
3C92:  MOVLW  00
3C94:  ADDWFC 03,W
3C96:  MOVWF  FEA
3C98:  BTFSC  FEF.7
3C9A:  BRA    3CB4
3C9C:  MOVF   FEF,W
3C9E:  SUBLW  09
3CA0:  BC    3CB4
....................        {clave[unidad-11]=0;} 
3CA2:  MOVLW  0B
3CA4:  SUBWF  1B,W
3CA6:  CLRF   03
3CA8:  ADDLW  37
3CAA:  MOVWF  FE9
3CAC:  MOVLW  00
3CAE:  ADDWFC 03,W
3CB0:  MOVWF  FEA
3CB2:  CLRF   FEF
....................        if(unidad<11) 
3CB4:  MOVF   1B,W
3CB6:  SUBLW  0A
3CB8:  BNC   3CCA
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
3CBA:  MOVLW  01
3CBC:  MOVWF  18
3CBE:  CLRF   33
3CC0:  MOVLW  02
3CC2:  MOVWF  1C
3CC4:  MOVWF  1E
3CC6:  MOVLW  0B
3CC8:  MOVWF  1B
3CCA:  CLRF   16
3CCC:  BTFSC  FF2.7
3CCE:  BSF    16.7
3CD0:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3CD2:  MOVFF  1B,135
3CD6:  MOVLW  04
3CD8:  MOVLB  1
3CDA:  MOVWF  x36
3CDC:  MOVLB  0
3CDE:  CALL   0206
3CE2:  BTFSC  16.7
3CE4:  BSF    FF2.7
3CE6:  CLRF   16
3CE8:  BTFSC  FF2.7
3CEA:  BSF    16.7
3CEC:  BCF    FF2.7
....................        lcd_putc(t[2]); 
3CEE:  MOVFF  36,134
3CF2:  CALL   0280
3CF6:  BTFSC  16.7
3CF8:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3CFA:  MOVF   1B,W
3CFC:  SUBLW  0E
3CFE:  BTFSC  FD8.0
3D00:  BRA    3F44
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3D02:  MOVF   3B,W
3D04:  SUBWF  37,W
3D06:  BTFSS  FD8.2
3D08:  BRA    3E3A
3D0A:  MOVF   3C,W
3D0C:  SUBWF  38,W
3D0E:  BTFSS  FD8.2
3D10:  BRA    3E3A
3D12:  MOVF   3D,W
3D14:  SUBWF  39,W
3D16:  BTFSS  FD8.2
3D18:  BRA    3E3A
3D1A:  MOVF   3E,W
3D1C:  SUBWF  3A,W
3D1E:  BTFSS  FD8.2
3D20:  BRA    3E3A
3D22:  CLRF   16
3D24:  BTFSC  FF2.7
3D26:  BSF    16.7
3D28:  BCF    FF2.7
....................             {lcd_gotoxy(1,1); 
3D2A:  MOVLW  01
3D2C:  MOVLB  1
3D2E:  MOVWF  x35
3D30:  MOVWF  x36
3D32:  MOVLB  0
3D34:  CALL   0206
3D38:  BTFSC  16.7
3D3A:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
3D3C:  MOVLW  4E
3D3E:  MOVWF  FF6
3D40:  MOVLW  07
3D42:  MOVWF  FF7
3D44:  CLRF   16
3D46:  BTFSC  FF2.7
3D48:  BSF    16.7
3D4A:  BCF    FF2.7
3D4C:  CALL   02EC
3D50:  BTFSC  16.7
3D52:  BSF    FF2.7
3D54:  CLRF   16
3D56:  BTFSC  FF2.7
3D58:  BSF    16.7
3D5A:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
3D5C:  MOVLW  01
3D5E:  MOVLB  1
3D60:  MOVWF  x35
3D62:  MOVLW  02
3D64:  MOVWF  x36
3D66:  MOVLB  0
3D68:  CALL   0206
3D6C:  BTFSC  16.7
3D6E:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
3D70:  MOVLW  64
3D72:  MOVWF  FF6
3D74:  MOVLW  07
3D76:  MOVWF  FF7
3D78:  CLRF   16
3D7A:  BTFSC  FF2.7
3D7C:  BSF    16.7
3D7E:  BCF    FF2.7
3D80:  CALL   02EC
3D84:  BTFSC  16.7
3D86:  BSF    FF2.7
3D88:  CLRF   16
3D8A:  BTFSC  FF2.7
3D8C:  BSF    16.7
3D8E:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
3D90:  MOVLW  01
3D92:  MOVLB  1
3D94:  MOVWF  x35
3D96:  MOVLW  03
3D98:  MOVWF  x36
3D9A:  MOVLB  0
3D9C:  CALL   0206
3DA0:  BTFSC  16.7
3DA2:  BSF    FF2.7
....................             printf(lcd_putc,"      Correcta      "); 
3DA4:  MOVLW  7A
3DA6:  MOVWF  FF6
3DA8:  MOVLW  07
3DAA:  MOVWF  FF7
3DAC:  CLRF   16
3DAE:  BTFSC  FF2.7
3DB0:  BSF    16.7
3DB2:  BCF    FF2.7
3DB4:  CALL   02EC
3DB8:  BTFSC  16.7
3DBA:  BSF    FF2.7
3DBC:  CLRF   16
3DBE:  BTFSC  FF2.7
3DC0:  BSF    16.7
3DC2:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
3DC4:  MOVLW  01
3DC6:  MOVLB  1
3DC8:  MOVWF  x35
3DCA:  MOVLW  04
3DCC:  MOVWF  x36
3DCE:  MOVLB  0
3DD0:  CALL   0206
3DD4:  BTFSC  16.7
3DD6:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
3DD8:  MOVLW  90
3DDA:  MOVWF  FF6
3DDC:  MOVLW  07
3DDE:  MOVWF  FF7
3DE0:  CLRF   16
3DE2:  BTFSC  FF2.7
3DE4:  BSF    16.7
3DE6:  BCF    FF2.7
3DE8:  CALL   02EC
3DEC:  BTFSC  16.7
3DEE:  BSF    FF2.7
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
3DF0:  MOVLW  02
3DF2:  MOVLB  1
3DF4:  MOVWF  x00
3DF6:  CLRF   16
3DF8:  BTFSC  FF2.7
3DFA:  BSF    16.7
3DFC:  BCF    FF2.7
3DFE:  MOVLW  FA
3E00:  MOVWF  x35
3E02:  MOVLB  0
3E04:  CALL   00B6
3E08:  BTFSC  16.7
3E0A:  BSF    FF2.7
3E0C:  MOVLB  1
3E0E:  DECFSZ x00,F
3E10:  BRA    3DF6
3E12:  MOVLW  33
3E14:  MOVWF  18
3E16:  MOVLW  0B
3E18:  MOVWF  1B
3E1A:  CLRF   16
3E1C:  BTFSC  FF2.7
3E1E:  BSF    16.7
3E20:  BCF    FF2.7
3E22:  MOVLW  0C
3E24:  MOVWF  x34
3E26:  MOVLB  0
3E28:  CALL   0280
3E2C:  BTFSC  16.7
3E2E:  BSF    FF2.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3E30:  CLRF   37
3E32:  CLRF   38
3E34:  CLRF   39
3E36:  CLRF   3A
....................          else 
3E38:  BRA    3F44
3E3A:  CLRF   16
3E3C:  BTFSC  FF2.7
3E3E:  BSF    16.7
3E40:  BCF    FF2.7
....................          {lcd_gotoxy(1,1); 
3E42:  MOVLW  01
3E44:  MOVLB  1
3E46:  MOVWF  x35
3E48:  MOVWF  x36
3E4A:  MOVLB  0
3E4C:  CALL   0206
3E50:  BTFSC  16.7
3E52:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
3E54:  MOVLW  A6
3E56:  MOVWF  FF6
3E58:  MOVLW  07
3E5A:  MOVWF  FF7
3E5C:  CLRF   16
3E5E:  BTFSC  FF2.7
3E60:  BSF    16.7
3E62:  BCF    FF2.7
3E64:  CALL   02EC
3E68:  BTFSC  16.7
3E6A:  BSF    FF2.7
3E6C:  CLRF   16
3E6E:  BTFSC  FF2.7
3E70:  BSF    16.7
3E72:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
3E74:  MOVLW  01
3E76:  MOVLB  1
3E78:  MOVWF  x35
3E7A:  MOVLW  02
3E7C:  MOVWF  x36
3E7E:  MOVLB  0
3E80:  CALL   0206
3E84:  BTFSC  16.7
3E86:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
3E88:  MOVLW  BC
3E8A:  MOVWF  FF6
3E8C:  MOVLW  07
3E8E:  MOVWF  FF7
3E90:  CLRF   16
3E92:  BTFSC  FF2.7
3E94:  BSF    16.7
3E96:  BCF    FF2.7
3E98:  CALL   02EC
3E9C:  BTFSC  16.7
3E9E:  BSF    FF2.7
3EA0:  CLRF   16
3EA2:  BTFSC  FF2.7
3EA4:  BSF    16.7
3EA6:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
3EA8:  MOVLW  01
3EAA:  MOVLB  1
3EAC:  MOVWF  x35
3EAE:  MOVLW  03
3EB0:  MOVWF  x36
3EB2:  MOVLB  0
3EB4:  CALL   0206
3EB8:  BTFSC  16.7
3EBA:  BSF    FF2.7
....................             printf(lcd_putc,"     Incorrecta     "); 
3EBC:  MOVLW  D2
3EBE:  MOVWF  FF6
3EC0:  MOVLW  07
3EC2:  MOVWF  FF7
3EC4:  CLRF   16
3EC6:  BTFSC  FF2.7
3EC8:  BSF    16.7
3ECA:  BCF    FF2.7
3ECC:  CALL   02EC
3ED0:  BTFSC  16.7
3ED2:  BSF    FF2.7
3ED4:  CLRF   16
3ED6:  BTFSC  FF2.7
3ED8:  BSF    16.7
3EDA:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
3EDC:  MOVLW  01
3EDE:  MOVLB  1
3EE0:  MOVWF  x35
3EE2:  MOVLW  04
3EE4:  MOVWF  x36
3EE6:  MOVLB  0
3EE8:  CALL   0206
3EEC:  BTFSC  16.7
3EEE:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
3EF0:  MOVLW  E8
3EF2:  MOVWF  FF6
3EF4:  MOVLW  07
3EF6:  MOVWF  FF7
3EF8:  CLRF   16
3EFA:  BTFSC  FF2.7
3EFC:  BSF    16.7
3EFE:  BCF    FF2.7
3F00:  CALL   02EC
3F04:  BTFSC  16.7
3F06:  BSF    FF2.7
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3F08:  MOVLW  02
3F0A:  MOVLB  1
3F0C:  MOVWF  x00
3F0E:  CLRF   16
3F10:  BTFSC  FF2.7
3F12:  BSF    16.7
3F14:  BCF    FF2.7
3F16:  MOVLW  FA
3F18:  MOVWF  x35
3F1A:  MOVLB  0
3F1C:  CALL   00B6
3F20:  BTFSC  16.7
3F22:  BSF    FF2.7
3F24:  MOVLB  1
3F26:  DECFSZ x00,F
3F28:  BRA    3F0E
3F2A:  MOVLW  0B
3F2C:  MOVWF  1B
3F2E:  CLRF   16
3F30:  BTFSC  FF2.7
3F32:  BSF    16.7
3F34:  BCF    FF2.7
3F36:  MOVLW  0C
3F38:  MOVWF  x34
3F3A:  MOVLB  0
3F3C:  CALL   0280
3F40:  BTFSC  16.7
3F42:  BSF    FF2.7
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
3F44:  MOVF   1B,W
3F46:  SUBLW  0B
3F48:  BC    3F84
3F4A:  MOVF   1B,W
3F4C:  SUBLW  0D
3F4E:  BNC   3F84
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3F50:  MOVLW  01
3F52:  SUBWF  1B,W
3F54:  MOVLB  1
3F56:  MOVWF  x00
3F58:  CLRF   16
3F5A:  BTFSC  FF2.7
3F5C:  BSF    16.7
3F5E:  BCF    FF2.7
3F60:  MOVWF  x35
3F62:  MOVLW  04
3F64:  MOVWF  x36
3F66:  MOVLB  0
3F68:  CALL   0206
3F6C:  BTFSC  16.7
3F6E:  BSF    FF2.7
3F70:  CLRF   16
3F72:  BTFSC  FF2.7
3F74:  BSF    16.7
3F76:  BCF    FF2.7
....................             lcd_putc(t[1]); 
3F78:  MOVFF  35,134
3F7C:  CALL   0280
3F80:  BTFSC  16.7
3F82:  BSF    FF2.7
3F84:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3F86:  MOVF   18,W
3F88:  SUBLW  33
3F8A:  BTFSS  FD8.2
3F8C:  BRA    446C
3F8E:  CLRF   16
3F90:  BTFSC  FF2.7
3F92:  BSF    16.7
3F94:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
3F96:  MOVLW  01
3F98:  MOVWF  x35
3F9A:  MOVWF  x36
3F9C:  MOVLB  0
3F9E:  CALL   0206
3FA2:  BTFSC  16.7
3FA4:  BSF    FF2.7
....................    printf(lcd_putc,"     Ingrese        "); 
3FA6:  MOVLW  FE
3FA8:  MOVWF  FF6
3FAA:  MOVLW  07
3FAC:  MOVWF  FF7
3FAE:  CLRF   16
3FB0:  BTFSC  FF2.7
3FB2:  BSF    16.7
3FB4:  BCF    FF2.7
3FB6:  CALL   02EC
3FBA:  BTFSC  16.7
3FBC:  BSF    FF2.7
3FBE:  CLRF   16
3FC0:  BTFSC  FF2.7
3FC2:  BSF    16.7
3FC4:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
3FC6:  MOVLW  01
3FC8:  MOVLB  1
3FCA:  MOVWF  x35
3FCC:  MOVLW  02
3FCE:  MOVWF  x36
3FD0:  MOVLB  0
3FD2:  CALL   0206
3FD6:  BTFSC  16.7
3FD8:  BSF    FF2.7
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
3FDA:  MOVLW  14
3FDC:  MOVWF  FF6
3FDE:  MOVLW  08
3FE0:  MOVWF  FF7
3FE2:  CLRF   16
3FE4:  BTFSC  FF2.7
3FE6:  BSF    16.7
3FE8:  BCF    FF2.7
3FEA:  CALL   02EC
3FEE:  BTFSC  16.7
3FF0:  BSF    FF2.7
3FF2:  CLRF   16
3FF4:  BTFSC  FF2.7
3FF6:  BSF    16.7
3FF8:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
3FFA:  MOVLW  01
3FFC:  MOVLB  1
3FFE:  MOVWF  x35
4000:  MOVLW  03
4002:  MOVWF  x36
4004:  MOVLB  0
4006:  CALL   0206
400A:  BTFSC  16.7
400C:  BSF    FF2.7
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
400E:  MOVLW  2A
4010:  MOVWF  FF6
4012:  MOVLW  08
4014:  MOVWF  FF7
4016:  MOVLW  0A
4018:  MOVLB  1
401A:  MOVWF  x08
401C:  MOVLB  0
401E:  CALL   0F7E
4022:  MOVFF  37,100
4026:  MOVLW  1F
4028:  MOVLB  1
402A:  MOVWF  x01
402C:  MOVLB  0
402E:  CALL   0FE0
4032:  MOVFF  38,100
4036:  MOVLW  1F
4038:  MOVLB  1
403A:  MOVWF  x01
403C:  MOVLB  0
403E:  CALL   0FE0
4042:  MOVFF  39,100
4046:  MOVLW  1F
4048:  MOVLB  1
404A:  MOVWF  x01
404C:  MOVLB  0
404E:  CALL   0FE0
4052:  MOVFF  3A,100
4056:  MOVLW  1F
4058:  MOVLB  1
405A:  MOVWF  x01
405C:  MOVLB  0
405E:  CALL   0FE0
4062:  CLRF   16
4064:  BTFSC  FF2.7
4066:  BSF    16.7
4068:  BCF    FF2.7
406A:  MOVLW  20
406C:  MOVLB  1
406E:  MOVWF  x34
4070:  MOVLB  0
4072:  CALL   0280
4076:  BTFSC  16.7
4078:  BSF    FF2.7
407A:  CLRF   16
407C:  BTFSC  FF2.7
407E:  BSF    16.7
4080:  BCF    FF2.7
4082:  MOVLW  20
4084:  MOVLB  1
4086:  MOVWF  x34
4088:  MOVLB  0
408A:  CALL   0280
408E:  BTFSC  16.7
4090:  BSF    FF2.7
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
4092:  BSF    F93.3
4094:  BTFSS  F81.3
4096:  BRA    40CA
....................       {  if(Flanco == 0)  
4098:  BTFSC  31.4
409A:  BRA    40C8
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
409C:  MOVLW  0B
409E:  SUBWF  1B,W
40A0:  CLRF   03
40A2:  ADDLW  37
40A4:  MOVWF  FE9
40A6:  MOVLW  00
40A8:  ADDWFC 03,W
40AA:  MOVWF  FEA
40AC:  INCF   FEF,F
40AE:  BSF    31.4
40B0:  CLRF   16
40B2:  BTFSC  FF2.7
40B4:  BSF    16.7
40B6:  BCF    FF2.7
40B8:  MOVLW  1E
40BA:  MOVLB  1
40BC:  MOVWF  x35
40BE:  MOVLB  0
40C0:  CALL   00B6
40C4:  BTFSC  16.7
40C6:  BSF    FF2.7
....................          else 
40C8:  BRA    40CC
....................             {Flanco = 0;} 
40CA:  BCF    31.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
40CC:  BSF    F93.2
40CE:  BTFSS  F81.2
40D0:  BRA    4104
....................       {  if(Flanco2 == 0)  
40D2:  BTFSC  31.6
40D4:  BRA    4102
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
40D6:  MOVLW  0B
40D8:  SUBWF  1B,W
40DA:  CLRF   03
40DC:  ADDLW  37
40DE:  MOVWF  FE9
40E0:  MOVLW  00
40E2:  ADDWFC 03,W
40E4:  MOVWF  FEA
40E6:  DECF   FEF,F
40E8:  BSF    31.6
40EA:  CLRF   16
40EC:  BTFSC  FF2.7
40EE:  BSF    16.7
40F0:  BCF    FF2.7
40F2:  MOVLW  1E
40F4:  MOVLB  1
40F6:  MOVWF  x35
40F8:  MOVLB  0
40FA:  CALL   00B6
40FE:  BTFSC  16.7
4100:  BSF    FF2.7
....................          else 
4102:  BRA    4106
....................             {Flanco2 = 0;} 
4104:  BCF    31.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
4106:  BSF    F93.0
4108:  BTFSS  F81.0
410A:  BRA    4146
....................       {  if(Flanco1 == 0)  
410C:  BTFSC  31.5
410E:  BRA    4144
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
4110:  BSF    31.5
4112:  INCF   1B,F
4114:  CLRF   16
4116:  BTFSC  FF2.7
4118:  BSF    16.7
411A:  BCF    FF2.7
411C:  MOVLW  1E
411E:  MOVLB  1
4120:  MOVWF  x35
4122:  MOVLB  0
4124:  CALL   00B6
4128:  BTFSC  16.7
412A:  BSF    FF2.7
412C:  CLRF   16
412E:  BTFSC  FF2.7
4130:  BSF    16.7
4132:  BCF    FF2.7
4134:  MOVLW  0C
4136:  MOVLB  1
4138:  MOVWF  x34
413A:  MOVLB  0
413C:  CALL   0280
4140:  BTFSC  16.7
4142:  BSF    FF2.7
....................          else 
4144:  BRA    4148
....................             {Flanco1 = 0;}    
4146:  BCF    31.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4148:  BSF    F93.1
414A:  BTFSS  F81.1
414C:  BRA    4188
....................       {  if(Flanco3 == 0)  
414E:  BTFSC  31.7
4150:  BRA    4186
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
4152:  BSF    31.7
4154:  DECF   1B,F
4156:  CLRF   16
4158:  BTFSC  FF2.7
415A:  BSF    16.7
415C:  BCF    FF2.7
415E:  MOVLW  1E
4160:  MOVLB  1
4162:  MOVWF  x35
4164:  MOVLB  0
4166:  CALL   00B6
416A:  BTFSC  16.7
416C:  BSF    FF2.7
416E:  CLRF   16
4170:  BTFSC  FF2.7
4172:  BSF    16.7
4174:  BCF    FF2.7
4176:  MOVLW  0C
4178:  MOVLB  1
417A:  MOVWF  x34
417C:  MOVLB  0
417E:  CALL   0280
4182:  BTFSC  16.7
4184:  BSF    FF2.7
....................          else 
4186:  BRA    418A
....................             {Flanco3 = 0;}     
4188:  BCF    31.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
418A:  MOVLW  0B
418C:  SUBWF  1B,W
418E:  CLRF   03
4190:  ADDLW  37
4192:  MOVWF  FE9
4194:  MOVLW  00
4196:  ADDWFC 03,W
4198:  MOVWF  FEA
419A:  BTFSC  FEF.7
419C:  BRA    41A0
419E:  BRA    41B4
....................        {clave[unidad-11]=9;} 
41A0:  MOVLW  0B
41A2:  SUBWF  1B,W
41A4:  CLRF   03
41A6:  ADDLW  37
41A8:  MOVWF  FE9
41AA:  MOVLW  00
41AC:  ADDWFC 03,W
41AE:  MOVWF  FEA
41B0:  MOVLW  09
41B2:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
41B4:  MOVLW  0B
41B6:  SUBWF  1B,W
41B8:  CLRF   03
41BA:  ADDLW  37
41BC:  MOVWF  FE9
41BE:  MOVLW  00
41C0:  ADDWFC 03,W
41C2:  MOVWF  FEA
41C4:  BTFSC  FEF.7
41C6:  BRA    41E0
41C8:  MOVF   FEF,W
41CA:  SUBLW  09
41CC:  BC    41E0
....................        {clave[unidad-11]=0;} 
41CE:  MOVLW  0B
41D0:  SUBWF  1B,W
41D2:  CLRF   03
41D4:  ADDLW  37
41D6:  MOVWF  FE9
41D8:  MOVLW  00
41DA:  ADDWFC 03,W
41DC:  MOVWF  FEA
41DE:  CLRF   FEF
....................        if(unidad<11) 
41E0:  MOVF   1B,W
41E2:  SUBLW  0A
41E4:  BNC   41EE
....................        {Menu=5;unidad=11;} 
41E6:  MOVLW  05
41E8:  MOVWF  18
41EA:  MOVLW  0B
41EC:  MOVWF  1B
41EE:  CLRF   16
41F0:  BTFSC  FF2.7
41F2:  BSF    16.7
41F4:  BCF    FF2.7
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
41F6:  MOVFF  1B,135
41FA:  MOVLW  04
41FC:  MOVLB  1
41FE:  MOVWF  x36
4200:  MOVLB  0
4202:  CALL   0206
4206:  BTFSC  16.7
4208:  BSF    FF2.7
420A:  CLRF   16
420C:  BTFSC  FF2.7
420E:  BSF    16.7
4210:  BCF    FF2.7
....................        lcd_putc(t[2]); 
4212:  MOVFF  36,134
4216:  CALL   0280
421A:  BTFSC  16.7
421C:  BSF    FF2.7
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
421E:  MOVF   1B,W
4220:  SUBLW  0E
4222:  BTFSC  FD8.0
4224:  BRA    442A
4226:  CLRF   16
4228:  BTFSC  FF2.7
422A:  BSF    16.7
422C:  BCF    FF2.7
....................        { 
....................             lcd_gotoxy(1,1); 
422E:  MOVLW  01
4230:  MOVLB  1
4232:  MOVWF  x35
4234:  MOVWF  x36
4236:  MOVLB  0
4238:  CALL   0206
423C:  BTFSC  16.7
423E:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
4240:  MOVLW  40
4242:  MOVWF  FF6
4244:  MOVLW  08
4246:  MOVWF  FF7
4248:  CLRF   16
424A:  BTFSC  FF2.7
424C:  BSF    16.7
424E:  BCF    FF2.7
4250:  CALL   02EC
4254:  BTFSC  16.7
4256:  BSF    FF2.7
4258:  CLRF   16
425A:  BTFSC  FF2.7
425C:  BSF    16.7
425E:  BCF    FF2.7
....................             lcd_gotoxy(1,2); 
4260:  MOVLW  01
4262:  MOVLB  1
4264:  MOVWF  x35
4266:  MOVLW  02
4268:  MOVWF  x36
426A:  MOVLB  0
426C:  CALL   0206
4270:  BTFSC  16.7
4272:  BSF    FF2.7
....................             printf(lcd_putc,"     Contraseña     "); 
4274:  MOVLW  56
4276:  MOVWF  FF6
4278:  MOVLW  08
427A:  MOVWF  FF7
427C:  CLRF   16
427E:  BTFSC  FF2.7
4280:  BSF    16.7
4282:  BCF    FF2.7
4284:  CALL   02EC
4288:  BTFSC  16.7
428A:  BSF    FF2.7
428C:  CLRF   16
428E:  BTFSC  FF2.7
4290:  BSF    16.7
4292:  BCF    FF2.7
....................             lcd_gotoxy(1,3); 
4294:  MOVLW  01
4296:  MOVLB  1
4298:  MOVWF  x35
429A:  MOVLW  03
429C:  MOVWF  x36
429E:  MOVLB  0
42A0:  CALL   0206
42A4:  BTFSC  16.7
42A6:  BSF    FF2.7
....................             printf(lcd_putc,"     Almacenada     "); 
42A8:  MOVLW  6C
42AA:  MOVWF  FF6
42AC:  MOVLW  08
42AE:  MOVWF  FF7
42B0:  CLRF   16
42B2:  BTFSC  FF2.7
42B4:  BSF    16.7
42B6:  BCF    FF2.7
42B8:  CALL   02EC
42BC:  BTFSC  16.7
42BE:  BSF    FF2.7
42C0:  CLRF   16
42C2:  BTFSC  FF2.7
42C4:  BSF    16.7
42C6:  BCF    FF2.7
....................             lcd_gotoxy(1,4); 
42C8:  MOVLW  01
42CA:  MOVLB  1
42CC:  MOVWF  x35
42CE:  MOVLW  04
42D0:  MOVWF  x36
42D2:  MOVLB  0
42D4:  CALL   0206
42D8:  BTFSC  16.7
42DA:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
42DC:  MOVLW  82
42DE:  MOVWF  FF6
42E0:  MOVLW  08
42E2:  MOVWF  FF7
42E4:  CLRF   16
42E6:  BTFSC  FF2.7
42E8:  BSF    16.7
42EA:  BCF    FF2.7
42EC:  CALL   02EC
42F0:  BTFSC  16.7
42F2:  BSF    FF2.7
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
42F4:  CLRF   FA9
42F6:  MOVFF  37,FA8
42FA:  BCF    FA6.6
42FC:  BCF    FA6.7
42FE:  BSF    FA6.2
4300:  MOVF   FF2,W
4302:  MOVWF  00
4304:  BCF    FF2.7
4306:  MOVLB  F
4308:  MOVLW  55
430A:  MOVWF  FA7
430C:  MOVLW  AA
430E:  MOVWF  FA7
4310:  BSF    FA6.1
4312:  BTFSC  FA6.1
4314:  BRA    4312
4316:  BCF    FA6.2
4318:  MOVF   00,W
431A:  IORWF  FF2,F
431C:  CLRF   16
431E:  BTFSC  FF2.7
4320:  BSF    16.7
4322:  BCF    FF2.7
4324:  MOVLW  14
4326:  MOVLB  1
4328:  MOVWF  x35
432A:  MOVLB  0
432C:  CALL   00B6
4330:  BTFSC  16.7
4332:  BSF    FF2.7
4334:  MOVLW  01
4336:  MOVWF  FA9
4338:  MOVFF  38,FA8
433C:  BCF    FA6.6
433E:  BCF    FA6.7
4340:  BSF    FA6.2
4342:  MOVF   FF2,W
4344:  MOVWF  00
4346:  BCF    FF2.7
4348:  MOVLB  F
434A:  MOVLW  55
434C:  MOVWF  FA7
434E:  MOVLW  AA
4350:  MOVWF  FA7
4352:  BSF    FA6.1
4354:  BTFSC  FA6.1
4356:  BRA    4354
4358:  BCF    FA6.2
435A:  MOVF   00,W
435C:  IORWF  FF2,F
435E:  CLRF   16
4360:  BTFSC  FF2.7
4362:  BSF    16.7
4364:  BCF    FF2.7
4366:  MOVLW  14
4368:  MOVLB  1
436A:  MOVWF  x35
436C:  MOVLB  0
436E:  CALL   00B6
4372:  BTFSC  16.7
4374:  BSF    FF2.7
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
4376:  MOVLW  02
4378:  MOVWF  FA9
437A:  MOVFF  39,FA8
437E:  BCF    FA6.6
4380:  BCF    FA6.7
4382:  BSF    FA6.2
4384:  MOVF   FF2,W
4386:  MOVWF  00
4388:  BCF    FF2.7
438A:  MOVLB  F
438C:  MOVLW  55
438E:  MOVWF  FA7
4390:  MOVLW  AA
4392:  MOVWF  FA7
4394:  BSF    FA6.1
4396:  BTFSC  FA6.1
4398:  BRA    4396
439A:  BCF    FA6.2
439C:  MOVF   00,W
439E:  IORWF  FF2,F
43A0:  CLRF   16
43A2:  BTFSC  FF2.7
43A4:  BSF    16.7
43A6:  BCF    FF2.7
43A8:  MOVLW  14
43AA:  MOVLB  1
43AC:  MOVWF  x35
43AE:  MOVLB  0
43B0:  CALL   00B6
43B4:  BTFSC  16.7
43B6:  BSF    FF2.7
43B8:  MOVLW  03
43BA:  MOVWF  FA9
43BC:  MOVFF  3A,FA8
43C0:  BCF    FA6.6
43C2:  BCF    FA6.7
43C4:  BSF    FA6.2
43C6:  MOVF   FF2,W
43C8:  MOVWF  00
43CA:  BCF    FF2.7
43CC:  MOVLB  F
43CE:  MOVLW  55
43D0:  MOVWF  FA7
43D2:  MOVLW  AA
43D4:  MOVWF  FA7
43D6:  BSF    FA6.1
43D8:  BTFSC  FA6.1
43DA:  BRA    43D8
43DC:  BCF    FA6.2
43DE:  MOVF   00,W
43E0:  IORWF  FF2,F
43E2:  CLRF   16
43E4:  BTFSC  FF2.7
43E6:  BSF    16.7
43E8:  BCF    FF2.7
43EA:  MOVLW  14
43EC:  MOVLB  1
43EE:  MOVWF  x35
43F0:  MOVLB  0
43F2:  CALL   00B6
43F6:  BTFSC  16.7
43F8:  BSF    FF2.7
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
43FA:  MOVLW  02
43FC:  MOVLB  1
43FE:  MOVWF  x00
4400:  CLRF   16
4402:  BTFSC  FF2.7
4404:  BSF    16.7
4406:  BCF    FF2.7
4408:  MOVLW  FA
440A:  MOVWF  x35
440C:  MOVLB  0
440E:  CALL   00B6
4412:  BTFSC  16.7
4414:  BSF    FF2.7
4416:  MOVLB  1
4418:  DECFSZ x00,F
441A:  BRA    4400
441C:  MOVLW  01
441E:  MOVWF  18
4420:  CLRF   33
4422:  MOVLW  02
4424:  MOVWF  1C
4426:  MOVWF  1E
4428:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
442A:  MOVF   1B,W
442C:  SUBLW  0B
442E:  BC    446A
4430:  MOVF   1B,W
4432:  SUBLW  0D
4434:  BNC   446A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
4436:  MOVLW  01
4438:  SUBWF  1B,W
443A:  MOVLB  1
443C:  MOVWF  x00
443E:  CLRF   16
4440:  BTFSC  FF2.7
4442:  BSF    16.7
4444:  BCF    FF2.7
4446:  MOVWF  x35
4448:  MOVLW  04
444A:  MOVWF  x36
444C:  MOVLB  0
444E:  CALL   0206
4452:  BTFSC  16.7
4454:  BSF    FF2.7
4456:  CLRF   16
4458:  BTFSC  FF2.7
445A:  BSF    16.7
445C:  BCF    FF2.7
....................             lcd_putc(t[1]); 
445E:  MOVFF  35,134
4462:  CALL   0280
4466:  BTFSC  16.7
4468:  BSF    FF2.7
446A:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5) 
446C:  MOVF   18,W
446E:  SUBLW  05
4470:  BTFSS  FD8.2
4472:  BRA    4662
4474:  CLRF   16
4476:  BTFSC  FF2.7
4478:  BSF    16.7
447A:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,2); 
447C:  MOVLW  01
447E:  MOVWF  x35
4480:  MOVLW  02
4482:  MOVWF  x36
4484:  MOVLB  0
4486:  CALL   0206
448A:  BTFSC  16.7
448C:  BSF    FF2.7
....................    printf(lcd_putc,"     Media Movil    "); 
448E:  MOVLW  98
4490:  MOVWF  FF6
4492:  MOVLW  08
4494:  MOVWF  FF7
4496:  CLRF   16
4498:  BTFSC  FF2.7
449A:  BSF    16.7
449C:  BCF    FF2.7
449E:  CALL   02EC
44A2:  BTFSC  16.7
44A4:  BSF    FF2.7
44A6:  CLRF   16
44A8:  BTFSC  FF2.7
44AA:  BSF    16.7
44AC:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
44AE:  MOVLW  01
44B0:  MOVLB  1
44B2:  MOVWF  x35
44B4:  MOVLW  03
44B6:  MOVWF  x36
44B8:  MOVLB  0
44BA:  CALL   0206
44BE:  BTFSC  16.7
44C0:  BSF    FF2.7
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
44C2:  MOVLW  AE
44C4:  MOVWF  FF6
44C6:  MOVLW  08
44C8:  MOVWF  FF7
44CA:  MOVLW  07
44CC:  MOVLB  1
44CE:  MOVWF  x08
44D0:  MOVLB  0
44D2:  CALL   0F7E
44D6:  MOVFF  2B,100
44DA:  MOVLW  01
44DC:  MOVLB  1
44DE:  MOVWF  x01
44E0:  MOVLB  0
44E2:  CALL   0FE0
44E6:  CLRF   16
44E8:  BTFSC  FF2.7
44EA:  BSF    16.7
44EC:  BCF    FF2.7
44EE:  MOVLW  20
44F0:  MOVLB  1
44F2:  MOVWF  x34
44F4:  MOVLB  0
44F6:  CALL   0280
44FA:  BTFSC  16.7
44FC:  BSF    FF2.7
44FE:  CLRF   16
4500:  BTFSC  FF2.7
4502:  BSF    16.7
4504:  BCF    FF2.7
4506:  MOVLW  20
4508:  MOVLB  1
450A:  MOVWF  x34
450C:  MOVLB  0
450E:  CALL   0280
4512:  BTFSC  16.7
4514:  BSF    FF2.7
4516:  CLRF   16
4518:  BTFSC  FF2.7
451A:  BSF    16.7
451C:  BCF    FF2.7
451E:  MOVLW  20
4520:  MOVLB  1
4522:  MOVWF  x34
4524:  MOVLB  0
4526:  CALL   0280
452A:  BTFSC  16.7
452C:  BSF    FF2.7
....................     
....................    if(MediaMovil>12) 
452E:  MOVF   2B,W
4530:  SUBLW  0C
4532:  BC    4538
....................    {MediaMovil=12;} 
4534:  MOVLW  0C
4536:  MOVWF  2B
....................     
....................    if(MediaMovil<1) 
4538:  MOVF   2B,F
453A:  BNZ   4540
....................    {MediaMovil=1;} 
453C:  MOVLW  01
453E:  MOVWF  2B
....................     
....................       if(UP)//Si oprime hacia arriba 
4540:  BSF    F93.3
4542:  BTFSS  F81.3
4544:  BRA    456A
....................       {  if(Flanco == 0)  
4546:  BTFSC  31.4
4548:  BRA    4568
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
454A:  MOVLW  01
454C:  ADDWF  2B,F
454E:  BSF    31.4
4550:  CLRF   16
4552:  BTFSC  FF2.7
4554:  BSF    16.7
4556:  BCF    FF2.7
4558:  MOVLW  1E
455A:  MOVLB  1
455C:  MOVWF  x35
455E:  MOVLB  0
4560:  CALL   00B6
4564:  BTFSC  16.7
4566:  BSF    FF2.7
....................          else 
4568:  BRA    456C
....................             {Flanco = 0;} 
456A:  BCF    31.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
456C:  BSF    F93.2
456E:  BTFSS  F81.2
4570:  BRA    4596
....................       {  if(Flanco2 == 0)  
4572:  BTFSC  31.6
4574:  BRA    4594
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
4576:  MOVLW  01
4578:  SUBWF  2B,F
457A:  BSF    31.6
457C:  CLRF   16
457E:  BTFSC  FF2.7
4580:  BSF    16.7
4582:  BCF    FF2.7
4584:  MOVLW  1E
4586:  MOVLB  1
4588:  MOVWF  x35
458A:  MOVLB  0
458C:  CALL   00B6
4590:  BTFSC  16.7
4592:  BSF    FF2.7
....................          else 
4594:  BRA    4598
....................             {Flanco2 = 0;} 
4596:  BCF    31.6
....................     
....................       if(RIGHT)// Si oprime derecha 
4598:  BSF    F93.0
459A:  BTFSS  F81.0
459C:  BRA    4610
....................       {  if(Flanco1 == 0)  
459E:  BTFSC  31.5
45A0:  BRA    460E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
45A2:  MOVLW  01
45A4:  MOVWF  18
45A6:  CLRF   33
45A8:  MOVLW  02
45AA:  MOVWF  1C
45AC:  MOVWF  1E
45AE:  MOVLW  0B
45B0:  MOVWF  1B
45B2:  CLRF   16
45B4:  BTFSC  FF2.7
45B6:  BSF    16.7
45B8:  BCF    FF2.7
45BA:  MOVLW  1E
45BC:  MOVLB  1
45BE:  MOVWF  x35
45C0:  MOVLB  0
45C2:  CALL   00B6
45C6:  BTFSC  16.7
45C8:  BSF    FF2.7
45CA:  CLRF   16
45CC:  BTFSC  FF2.7
45CE:  BSF    16.7
45D0:  BCF    FF2.7
45D2:  MOVLW  0C
45D4:  MOVLB  1
45D6:  MOVWF  x34
45D8:  MOVLB  0
45DA:  CALL   0280
45DE:  BTFSC  16.7
45E0:  BSF    FF2.7
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
45E2:  MOVLW  2A
45E4:  MOVWF  FA9
45E6:  MOVFF  2B,FA8
45EA:  BCF    FA6.6
45EC:  BCF    FA6.7
45EE:  BSF    FA6.2
45F0:  MOVF   FF2,W
45F2:  MOVWF  00
45F4:  BCF    FF2.7
45F6:  MOVLB  F
45F8:  MOVLW  55
45FA:  MOVWF  FA7
45FC:  MOVLW  AA
45FE:  MOVWF  FA7
4600:  BSF    FA6.1
4602:  BTFSC  FA6.1
4604:  BRA    4602
4606:  BCF    FA6.2
4608:  MOVF   00,W
460A:  IORWF  FF2,F
460C:  MOVLB  0
....................             }} 
....................          else 
460E:  BRA    4612
....................             {Flanco1 = 0;}    
4610:  BCF    31.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4612:  BSF    F93.1
4614:  BTFSS  F81.1
4616:  BRA    465E
....................       {  if(Flanco3 == 0)  
4618:  BTFSC  31.7
461A:  BRA    465C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
461C:  MOVLW  01
461E:  MOVWF  18
4620:  CLRF   33
4622:  MOVLW  02
4624:  MOVWF  1C
4626:  MOVWF  1E
4628:  MOVLW  0B
462A:  MOVWF  1B
462C:  CLRF   16
462E:  BTFSC  FF2.7
4630:  BSF    16.7
4632:  BCF    FF2.7
4634:  MOVLW  1E
4636:  MOVLB  1
4638:  MOVWF  x35
463A:  MOVLB  0
463C:  CALL   00B6
4640:  BTFSC  16.7
4642:  BSF    FF2.7
4644:  CLRF   16
4646:  BTFSC  FF2.7
4648:  BSF    16.7
464A:  BCF    FF2.7
464C:  MOVLW  0C
464E:  MOVLB  1
4650:  MOVWF  x34
4652:  MOVLB  0
4654:  CALL   0280
4658:  BTFSC  16.7
465A:  BSF    FF2.7
....................          else 
465C:  BRA    4660
....................             {Flanco3 = 0;}   
465E:  BCF    31.7
4660:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de configuración de punto zero. 
4662:  MOVF   18,W
4664:  SUBLW  06
4666:  BTFSS  FD8.2
4668:  BRA    4AD8
466A:  CLRF   16
466C:  BTFSC  FF2.7
466E:  BSF    16.7
4670:  BCF    FF2.7
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
4672:  MOVLW  01
4674:  MOVWF  x35
4676:  MOVWF  x36
4678:  MOVLB  0
467A:  CALL   0206
467E:  BTFSC  16.7
4680:  BSF    FF2.7
....................    printf(lcd_putc,"  Zero Point Config "); 
4682:  MOVLW  BE
4684:  MOVWF  FF6
4686:  MOVLW  08
4688:  MOVWF  FF7
468A:  CLRF   16
468C:  BTFSC  FF2.7
468E:  BSF    16.7
4690:  BCF    FF2.7
4692:  CALL   02EC
4696:  BTFSC  16.7
4698:  BSF    FF2.7
469A:  CLRF   16
469C:  BTFSC  FF2.7
469E:  BSF    16.7
46A0:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
46A2:  MOVLW  01
46A4:  MOVLB  1
46A6:  MOVWF  x35
46A8:  MOVLW  02
46AA:  MOVWF  x36
46AC:  MOVLB  0
46AE:  CALL   0206
46B2:  BTFSC  16.7
46B4:  BSF    FF2.7
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
46B6:  MOVLW  D4
46B8:  MOVWF  FF6
46BA:  MOVLW  08
46BC:  MOVWF  FF7
46BE:  MOVLW  08
46C0:  MOVLB  1
46C2:  MOVWF  x08
46C4:  MOVLB  0
46C6:  CALL   0F7E
46CA:  MOVLW  01
46CC:  MOVWF  FE9
46CE:  MOVFF  8B,10B
46D2:  MOVFF  8A,10A
46D6:  MOVFF  89,109
46DA:  MOVFF  88,108
46DE:  MOVLB  1
46E0:  MOVWF  x0C
46E2:  MOVLB  0
46E4:  CALL   1488
46E8:  MOVLW  E1
46EA:  MOVWF  FF6
46EC:  MOVLW  08
46EE:  MOVWF  FF7
46F0:  MOVLW  08
46F2:  MOVLB  1
46F4:  MOVWF  x08
46F6:  MOVLB  0
46F8:  CALL   0F7E
46FC:  CLRF   16
46FE:  BTFSC  FF2.7
4700:  BSF    16.7
4702:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4704:  MOVLW  01
4706:  MOVLB  1
4708:  MOVWF  x35
470A:  MOVLW  03
470C:  MOVWF  x36
470E:  MOVLB  0
4710:  CALL   0206
4714:  BTFSC  16.7
4716:  BSF    FF2.7
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
4718:  MOVLB  1
471A:  CLRF   x04
471C:  MOVLB  0
471E:  CALL   171C
4722:  MOVFF  00,100
4726:  MOVFF  01,101
472A:  MOVFF  02,102
472E:  MOVFF  03,103
4732:  CLRF   16
4734:  BTFSC  FF2.7
4736:  BSF    16.7
4738:  BCF    FF2.7
473A:  MOVLW  5A
473C:  MOVLB  1
473E:  MOVWF  x34
4740:  MOVLB  0
4742:  CALL   0280
4746:  BTFSC  16.7
4748:  BSF    FF2.7
474A:  CLRF   16
474C:  BTFSC  FF2.7
474E:  BSF    16.7
4750:  BCF    FF2.7
4752:  MOVLW  46
4754:  MOVLB  1
4756:  MOVWF  x34
4758:  MOVLB  0
475A:  CALL   0280
475E:  BTFSC  16.7
4760:  BSF    FF2.7
4762:  CLRF   16
4764:  BTFSC  FF2.7
4766:  BSF    16.7
4768:  BCF    FF2.7
476A:  MOVLW  3D
476C:  MOVLB  1
476E:  MOVWF  x34
4770:  MOVLB  0
4772:  CALL   0280
4776:  BTFSC  16.7
4778:  BSF    FF2.7
477A:  MOVLW  01
477C:  MOVWF  FE9
477E:  MOVFF  4A,10B
4782:  MOVFF  49,10A
4786:  MOVFF  48,109
478A:  MOVFF  47,108
478E:  MOVLB  1
4790:  CLRF   x0C
4792:  MOVLB  0
4794:  CALL   1488
4798:  MOVLW  F2
479A:  MOVWF  FF6
479C:  MOVLW  08
479E:  MOVWF  FF7
47A0:  MOVLW  05
47A2:  MOVLB  1
47A4:  MOVWF  x08
47A6:  MOVLB  0
47A8:  CALL   0F7E
47AC:  MOVLW  01
47AE:  MOVWF  FE9
47B0:  MOVFF  103,10B
47B4:  MOVFF  102,10A
47B8:  MOVFF  101,109
47BC:  MOVFF  100,108
47C0:  MOVLB  1
47C2:  CLRF   x0C
47C4:  MOVLB  0
47C6:  CALL   1488
47CA:  CLRF   16
47CC:  BTFSC  FF2.7
47CE:  BSF    16.7
47D0:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
47D2:  MOVLW  01
47D4:  MOVLB  1
47D6:  MOVWF  x35
47D8:  MOVLW  04
47DA:  MOVWF  x36
47DC:  MOVLB  0
47DE:  CALL   0206
47E2:  BTFSC  16.7
47E4:  BSF    FF2.7
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
47E6:  MOVLW  FE
47E8:  MOVWF  FF6
47EA:  MOVLW  08
47EC:  MOVWF  FF7
47EE:  MOVLW  0C
47F0:  MOVLB  1
47F2:  MOVWF  x08
47F4:  MOVLB  0
47F6:  CALL   0F7E
47FA:  MOVLW  01
47FC:  MOVWF  FE9
47FE:  MOVFF  BB,10B
4802:  MOVFF  BA,10A
4806:  MOVFF  B9,109
480A:  MOVFF  B8,108
480E:  MOVLB  1
4810:  CLRF   x0C
4812:  MOVLB  0
4814:  CALL   1488
....................      
....................       if(RIGHT)// Si oprime derecha 
4818:  BSF    F93.0
481A:  BTFSS  F81.0
481C:  BRA    4A86
....................       {  if(Flanco1 == 0)  
481E:  BTFSC  31.5
4820:  BRA    4A84
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4822:  MOVLW  01
4824:  MOVWF  18
4826:  CLRF   33
4828:  MOVLW  02
482A:  MOVWF  1C
482C:  MOVWF  1E
482E:  MOVLW  0B
4830:  MOVWF  1B
4832:  CLRF   16
4834:  BTFSC  FF2.7
4836:  BSF    16.7
4838:  BCF    FF2.7
483A:  MOVLW  1E
483C:  MOVLB  1
483E:  MOVWF  x35
4840:  MOVLB  0
4842:  CALL   00B6
4846:  BTFSC  16.7
4848:  BSF    FF2.7
484A:  CLRF   16
484C:  BTFSC  FF2.7
484E:  BSF    16.7
4850:  BCF    FF2.7
4852:  MOVLW  0C
4854:  MOVLB  1
4856:  MOVWF  x34
4858:  MOVLB  0
485A:  CALL   0280
485E:  BTFSC  16.7
4860:  BSF    FF2.7
....................             Diferencia=zero_fabrica-sensores(0); 
4862:  MOVLB  1
4864:  CLRF   x04
4866:  MOVLB  0
4868:  CALL   171C
486C:  MOVFF  FEA,101
4870:  MOVFF  FE9,100
4874:  BSF    FD8.1
4876:  MOVFF  4A,121
487A:  MOVFF  49,120
487E:  MOVFF  48,11F
4882:  MOVFF  47,11E
4886:  MOVFF  03,125
488A:  MOVFF  02,124
488E:  MOVFF  01,123
4892:  MOVFF  00,122
4896:  CALL   0D06
489A:  MOVFF  101,FEA
489E:  MOVFF  100,FE9
48A2:  MOVFF  03,BB
48A6:  MOVFF  02,BA
48AA:  MOVFF  01,B9
48AE:  MOVFF  00,B8
....................              
....................             if(Diferencia>=0) 
48B2:  MOVLB  1
48B4:  CLRF   x1D
48B6:  CLRF   x1C
48B8:  CLRF   x1B
48BA:  CLRF   x1A
48BC:  MOVFF  BB,121
48C0:  MOVFF  BA,120
48C4:  MOVFF  B9,11F
48C8:  MOVFF  B8,11E
48CC:  MOVLB  0
48CE:  CALL   166A
48D2:  BC    48D6
48D4:  BNZ   4904
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
48D6:  MOVLW  0A
48D8:  MOVWF  2C
48DA:  MOVLW  32
48DC:  MOVWF  FA9
48DE:  MOVFF  2C,FA8
48E2:  BCF    FA6.6
48E4:  BCF    FA6.7
48E6:  BSF    FA6.2
48E8:  MOVF   FF2,W
48EA:  MOVWF  00
48EC:  BCF    FF2.7
48EE:  MOVLB  F
48F0:  MOVLW  55
48F2:  MOVWF  FA7
48F4:  MOVLW  AA
48F6:  MOVWF  FA7
48F8:  BSF    FA6.1
48FA:  BTFSC  FA6.1
48FC:  BRA    48FA
48FE:  BCF    FA6.2
4900:  MOVF   00,W
4902:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
4904:  MOVFF  BB,11D
4908:  MOVFF  BA,11C
490C:  MOVFF  B9,11B
4910:  MOVFF  B8,11A
4914:  MOVLB  1
4916:  CLRF   x21
4918:  CLRF   x20
491A:  CLRF   x1F
491C:  CLRF   x1E
491E:  MOVLB  0
4920:  CALL   166A
4924:  BNC   4956
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
4926:  MOVLW  14
4928:  MOVWF  2C
492A:  MOVLW  32
492C:  MOVWF  FA9
492E:  MOVFF  2C,FA8
4932:  BCF    FA6.6
4934:  BCF    FA6.7
4936:  BSF    FA6.2
4938:  MOVF   FF2,W
493A:  MOVWF  00
493C:  BCF    FF2.7
493E:  MOVLB  F
4940:  MOVLW  55
4942:  MOVWF  FA7
4944:  MOVLW  AA
4946:  MOVWF  FA7
4948:  BSF    FA6.1
494A:  BTFSC  FA6.1
494C:  BRA    494A
494E:  BCF    FA6.2
4950:  MOVF   00,W
4952:  IORWF  FF2,F
4954:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
4956:  MOVFF  B8,00
495A:  MOVFF  B9,01
495E:  MOVFF  BA,02
4962:  MOVFF  BB,03
4966:  BCF    01.7
4968:  MOVFF  BB,BB
496C:  MOVFF  BA,BA
4970:  MOVFF  01,B9
4974:  MOVFF  B8,B8
....................             Temporal1=Diferencia; 
4978:  MOVFF  BB,B3
497C:  MOVFF  BA,B2
4980:  MOVFF  B9,B1
4984:  MOVFF  B8,B0
....................             Entero1=(int)Temporal1; 
4988:  MOVFF  B3,FF
498C:  MOVFF  B2,FE
4990:  MOVFF  B1,FD
4994:  MOVFF  B0,FC
4998:  CALL   16E4
499C:  MOVFF  01,25
....................             Temporal1=Temporal1-Entero1; 
49A0:  MOVLB  1
49A2:  CLRF   x0A
49A4:  MOVFF  25,109
49A8:  MOVLB  0
49AA:  CALL   0B72
49AE:  BSF    FD8.1
49B0:  MOVFF  B3,121
49B4:  MOVFF  B2,120
49B8:  MOVFF  B1,11F
49BC:  MOVFF  B0,11E
49C0:  MOVFF  03,125
49C4:  MOVFF  02,124
49C8:  MOVFF  01,123
49CC:  MOVFF  00,122
49D0:  CALL   0D06
49D4:  MOVFF  03,B3
49D8:  MOVFF  02,B2
49DC:  MOVFF  01,B1
49E0:  MOVFF  00,B0
....................             Temporal12=Temporal1*100.0; 
49E4:  MOVFF  B3,11D
49E8:  MOVFF  B2,11C
49EC:  MOVFF  B1,11B
49F0:  MOVFF  B0,11A
49F4:  MOVLB  1
49F6:  CLRF   x21
49F8:  CLRF   x20
49FA:  MOVLW  48
49FC:  MOVWF  x1F
49FE:  MOVLW  85
4A00:  MOVWF  x1E
4A02:  MOVLB  0
4A04:  CALL   12CE
4A08:  MOVFF  03,B7
4A0C:  MOVFF  02,B6
4A10:  MOVFF  01,B5
4A14:  MOVFF  00,B4
....................             Decimal12=(int8)Temporal12; 
4A18:  MOVFF  B7,FF
4A1C:  MOVFF  B6,FE
4A20:  MOVFF  B5,FD
4A24:  MOVFF  B4,FC
4A28:  CALL   16E4
4A2C:  MOVFF  01,26
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
4A30:  MOVLW  3C
4A32:  MOVWF  FA9
4A34:  MOVFF  25,FA8
4A38:  BCF    FA6.6
4A3A:  BCF    FA6.7
4A3C:  BSF    FA6.2
4A3E:  MOVF   FF2,W
4A40:  MOVWF  00
4A42:  BCF    FF2.7
4A44:  MOVLB  F
4A46:  MOVLW  55
4A48:  MOVWF  FA7
4A4A:  MOVLW  AA
4A4C:  MOVWF  FA7
4A4E:  BSF    FA6.1
4A50:  BTFSC  FA6.1
4A52:  BRA    4A50
4A54:  BCF    FA6.2
4A56:  MOVF   00,W
4A58:  IORWF  FF2,F
4A5A:  MOVLW  3D
4A5C:  MOVWF  FA9
4A5E:  MOVFF  26,FA8
4A62:  BCF    FA6.6
4A64:  BCF    FA6.7
4A66:  BSF    FA6.2
4A68:  MOVF   FF2,W
4A6A:  MOVWF  00
4A6C:  BCF    FF2.7
4A6E:  MOVLW  55
4A70:  MOVWF  FA7
4A72:  MOVLW  AA
4A74:  MOVWF  FA7
4A76:  BSF    FA6.1
4A78:  BTFSC  FA6.1
4A7A:  BRA    4A78
4A7C:  BCF    FA6.2
4A7E:  MOVF   00,W
4A80:  IORWF  FF2,F
4A82:  MOVLB  0
....................             }} 
....................          else 
4A84:  BRA    4A88
....................             {Flanco1 = 0;}    
4A86:  BCF    31.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4A88:  BSF    F93.1
4A8A:  BTFSS  F81.1
4A8C:  BRA    4AD4
....................       {  if(Flanco3 == 0)  
4A8E:  BTFSC  31.7
4A90:  BRA    4AD2
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
4A92:  MOVLW  01
4A94:  MOVWF  18
4A96:  CLRF   33
4A98:  MOVLW  02
4A9A:  MOVWF  1C
4A9C:  MOVWF  1E
4A9E:  MOVLW  0B
4AA0:  MOVWF  1B
4AA2:  CLRF   16
4AA4:  BTFSC  FF2.7
4AA6:  BSF    16.7
4AA8:  BCF    FF2.7
4AAA:  MOVLW  1E
4AAC:  MOVLB  1
4AAE:  MOVWF  x35
4AB0:  MOVLB  0
4AB2:  CALL   00B6
4AB6:  BTFSC  16.7
4AB8:  BSF    FF2.7
4ABA:  CLRF   16
4ABC:  BTFSC  FF2.7
4ABE:  BSF    16.7
4AC0:  BCF    FF2.7
4AC2:  MOVLW  0C
4AC4:  MOVLB  1
4AC6:  MOVWF  x34
4AC8:  MOVLB  0
4ACA:  CALL   0280
4ACE:  BTFSC  16.7
4AD0:  BSF    FF2.7
....................          else 
4AD2:  BRA    4AD6
....................             {Flanco3 = 0;}   
4AD4:  BCF    31.7
4AD6:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de Mantenimiento 
4AD8:  MOVF   18,W
4ADA:  SUBLW  07
4ADC:  BTFSS  FD8.2
4ADE:  BRA    50D4
4AE0:  CLRF   16
4AE2:  BTFSC  FF2.7
4AE4:  BSF    16.7
4AE6:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
4AE8:  MOVLW  01
4AEA:  MOVWF  x35
4AEC:  MOVWF  x36
4AEE:  MOVLB  0
4AF0:  CALL   0206
4AF4:  BTFSC  16.7
4AF6:  BSF    FF2.7
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4AF8:  MOVLB  1
4AFA:  CLRF   x04
4AFC:  MOVLB  0
4AFE:  CALL   171C
4B02:  MOVFF  00,100
4B06:  MOVFF  01,101
4B0A:  MOVFF  02,102
4B0E:  MOVFF  03,103
4B12:  MOVLW  10
4B14:  MOVWF  FF6
4B16:  MOVLW  09
4B18:  MOVWF  FF7
4B1A:  MOVLW  0A
4B1C:  MOVLB  1
4B1E:  MOVWF  x08
4B20:  MOVLB  0
4B22:  CALL   0F7E
4B26:  MOVLW  01
4B28:  MOVWF  FE9
4B2A:  MOVFF  103,10B
4B2E:  MOVFF  102,10A
4B32:  MOVFF  101,109
4B36:  MOVFF  100,108
4B3A:  MOVLB  1
4B3C:  CLRF   x0C
4B3E:  MOVLB  0
4B40:  CALL   1488
4B44:  CLRF   16
4B46:  BTFSC  FF2.7
4B48:  BSF    16.7
4B4A:  BCF    FF2.7
4B4C:  MOVLW  20
4B4E:  MOVLB  1
4B50:  MOVWF  x34
4B52:  MOVLB  0
4B54:  CALL   0280
4B58:  BTFSC  16.7
4B5A:  BSF    FF2.7
4B5C:  CLRF   16
4B5E:  BTFSC  FF2.7
4B60:  BSF    16.7
4B62:  BCF    FF2.7
4B64:  MOVLW  20
4B66:  MOVLB  1
4B68:  MOVWF  x34
4B6A:  MOVLB  0
4B6C:  CALL   0280
4B70:  BTFSC  16.7
4B72:  BSF    FF2.7
4B74:  CLRF   16
4B76:  BTFSC  FF2.7
4B78:  BSF    16.7
4B7A:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
4B7C:  MOVLW  01
4B7E:  MOVLB  1
4B80:  MOVWF  x35
4B82:  MOVLW  02
4B84:  MOVWF  x36
4B86:  MOVLB  0
4B88:  CALL   0206
4B8C:  BTFSC  16.7
4B8E:  BSF    FF2.7
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f",(100*((float)tmp/255)),sensores(1)); 
4B90:  MOVLB  1
4B92:  CLRF   x0A
4B94:  MOVFF  2A,109
4B98:  MOVLB  0
4B9A:  CALL   0B72
4B9E:  MOVFF  00,100
4BA2:  MOVFF  01,101
4BA6:  MOVFF  02,102
4BAA:  MOVFF  03,103
4BAE:  MOVFF  03,121
4BB2:  MOVFF  02,120
4BB6:  MOVFF  01,11F
4BBA:  MOVFF  00,11E
4BBE:  MOVLB  1
4BC0:  CLRF   x25
4BC2:  CLRF   x24
4BC4:  MOVLW  7F
4BC6:  MOVWF  x23
4BC8:  MOVLW  86
4BCA:  MOVWF  x22
4BCC:  MOVLB  0
4BCE:  CALL   0BA8
4BD2:  MOVLB  1
4BD4:  CLRF   x1D
4BD6:  CLRF   x1C
4BD8:  MOVLW  48
4BDA:  MOVWF  x1B
4BDC:  MOVLW  85
4BDE:  MOVWF  x1A
4BE0:  MOVFF  03,121
4BE4:  MOVFF  02,120
4BE8:  MOVFF  01,11F
4BEC:  MOVFF  00,11E
4BF0:  MOVLB  0
4BF2:  CALL   12CE
4BF6:  MOVFF  00,100
4BFA:  MOVFF  01,101
4BFE:  MOVFF  02,102
4C02:  MOVFF  03,103
4C06:  MOVLW  01
4C08:  MOVLB  1
4C0A:  MOVWF  x04
4C0C:  MOVLB  0
4C0E:  CALL   171C
4C12:  MOVFF  00,104
4C16:  MOVFF  01,105
4C1A:  MOVFF  02,106
4C1E:  MOVFF  03,107
4C22:  MOVLW  22
4C24:  MOVWF  FF6
4C26:  MOVLW  09
4C28:  MOVWF  FF7
4C2A:  MOVLW  05
4C2C:  MOVLB  1
4C2E:  MOVWF  x08
4C30:  MOVLB  0
4C32:  CALL   0F7E
4C36:  MOVLW  01
4C38:  MOVWF  FE9
4C3A:  MOVFF  103,10B
4C3E:  MOVFF  102,10A
4C42:  MOVFF  101,109
4C46:  MOVFF  100,108
4C4A:  MOVLB  1
4C4C:  CLRF   x0C
4C4E:  MOVLB  0
4C50:  CALL   1488
4C54:  CLRF   16
4C56:  BTFSC  FF2.7
4C58:  BSF    16.7
4C5A:  BCF    FF2.7
4C5C:  MOVLW  25
4C5E:  MOVLB  1
4C60:  MOVWF  x34
4C62:  MOVLB  0
4C64:  CALL   0280
4C68:  BTFSC  16.7
4C6A:  BSF    FF2.7
4C6C:  MOVLW  2E
4C6E:  MOVWF  FF6
4C70:  MOVLW  09
4C72:  MOVWF  FF7
4C74:  MOVLW  04
4C76:  MOVLB  1
4C78:  MOVWF  x08
4C7A:  MOVLB  0
4C7C:  CALL   0F7E
4C80:  MOVLW  01
4C82:  MOVWF  FE9
4C84:  MOVFF  107,10B
4C88:  MOVFF  106,10A
4C8C:  MOVFF  105,109
4C90:  MOVFF  104,108
4C94:  MOVLB  1
4C96:  CLRF   x0C
4C98:  MOVLB  0
4C9A:  CALL   1488
4C9E:  CLRF   16
4CA0:  BTFSC  FF2.7
4CA2:  BSF    16.7
4CA4:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
4CA6:  MOVLW  01
4CA8:  MOVLB  1
4CAA:  MOVWF  x35
4CAC:  MOVLW  03
4CAE:  MOVWF  x36
4CB0:  MOVLB  0
4CB2:  CALL   0206
4CB6:  BTFSC  16.7
4CB8:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
4CBA:  MOVLW  02
4CBC:  MOVLB  1
4CBE:  MOVWF  x04
4CC0:  MOVLB  0
4CC2:  CALL   171C
4CC6:  MOVFF  00,100
4CCA:  MOVFF  01,101
4CCE:  MOVFF  02,102
4CD2:  MOVFF  03,103
4CD6:  MOVFF  03,121
4CDA:  MOVFF  02,120
4CDE:  MOVFF  01,11F
4CE2:  MOVFF  00,11E
4CE6:  MOVLB  1
4CE8:  CLRF   x25
4CEA:  MOVLW  C0
4CEC:  MOVWF  x24
4CEE:  MOVLW  7F
4CF0:  MOVWF  x23
4CF2:  MOVLW  88
4CF4:  MOVWF  x22
4CF6:  MOVLB  0
4CF8:  CALL   0BA8
4CFC:  MOVLB  1
4CFE:  CLRF   x1D
4D00:  CLRF   x1C
4D02:  MOVLW  48
4D04:  MOVWF  x1B
4D06:  MOVLW  85
4D08:  MOVWF  x1A
4D0A:  MOVFF  03,121
4D0E:  MOVFF  02,120
4D12:  MOVFF  01,11F
4D16:  MOVFF  00,11E
4D1A:  MOVLB  0
4D1C:  CALL   12CE
4D20:  MOVFF  00,100
4D24:  MOVFF  01,101
4D28:  MOVFF  02,102
4D2C:  MOVFF  03,103
4D30:  MOVLW  38
4D32:  MOVWF  FF6
4D34:  MOVLW  09
4D36:  MOVWF  FF7
4D38:  MOVLW  04
4D3A:  MOVLB  1
4D3C:  MOVWF  x08
4D3E:  MOVLB  0
4D40:  CALL   0F7E
4D44:  MOVLW  01
4D46:  MOVWF  FE9
4D48:  MOVFF  8B,10B
4D4C:  MOVFF  8A,10A
4D50:  MOVFF  89,109
4D54:  MOVFF  88,108
4D58:  MOVLB  1
4D5A:  MOVWF  x0C
4D5C:  MOVLB  0
4D5E:  CALL   1488
4D62:  MOVLW  41
4D64:  MOVWF  FF6
4D66:  MOVLW  09
4D68:  MOVWF  FF7
4D6A:  MOVLW  0A
4D6C:  MOVLB  1
4D6E:  MOVWF  x08
4D70:  MOVLB  0
4D72:  CALL   0F7E
4D76:  MOVLW  01
4D78:  MOVWF  FE9
4D7A:  MOVFF  103,10B
4D7E:  MOVFF  102,10A
4D82:  MOVFF  101,109
4D86:  MOVFF  100,108
4D8A:  MOVLB  1
4D8C:  CLRF   x0C
4D8E:  MOVLB  0
4D90:  CALL   1488
4D94:  CLRF   16
4D96:  BTFSC  FF2.7
4D98:  BSF    16.7
4D9A:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
4D9C:  MOVLW  01
4D9E:  MOVLB  1
4DA0:  MOVWF  x35
4DA2:  MOVLW  04
4DA4:  MOVWF  x36
4DA6:  MOVLB  0
4DA8:  CALL   0206
4DAC:  BTFSC  16.7
4DAE:  BSF    FF2.7
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
4DB0:  MOVLW  52
4DB2:  MOVWF  FF6
4DB4:  MOVLW  09
4DB6:  MOVWF  FF7
4DB8:  MOVLW  09
4DBA:  MOVLB  1
4DBC:  MOVWF  x08
4DBE:  MOVLB  0
4DC0:  CALL   0F7E
4DC4:  MOVLW  89
4DC6:  MOVWF  FE9
4DC8:  MOVFF  BF,10B
4DCC:  MOVFF  BE,10A
4DD0:  MOVFF  BD,109
4DD4:  MOVFF  BC,108
4DD8:  MOVLW  02
4DDA:  MOVLB  1
4DDC:  MOVWF  x0C
4DDE:  MOVLB  0
4DE0:  CALL   1488
4DE4:  CLRF   16
4DE6:  BTFSC  FF2.7
4DE8:  BSF    16.7
4DEA:  BCF    FF2.7
4DEC:  MOVLW  20
4DEE:  MOVLB  1
4DF0:  MOVWF  x34
4DF2:  MOVLB  0
4DF4:  CALL   0280
4DF8:  BTFSC  16.7
4DFA:  BSF    FF2.7
....................        
....................       if(UP)//Si oprime hacia arriba 
4DFC:  BSF    F93.3
4DFE:  BTFSS  F81.3
4E00:  BRA    4E86
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
4E02:  BCF    FD8.1
4E04:  MOVFF  BF,121
4E08:  MOVFF  BE,120
4E0C:  MOVFF  BD,11F
4E10:  MOVFF  BC,11E
4E14:  MOVLW  0A
4E16:  MOVLB  1
4E18:  MOVWF  x25
4E1A:  MOVLW  D7
4E1C:  MOVWF  x24
4E1E:  MOVLW  23
4E20:  MOVWF  x23
4E22:  MOVLW  78
4E24:  MOVWF  x22
4E26:  MOVLB  0
4E28:  CALL   0D06
4E2C:  MOVFF  03,BF
4E30:  MOVFF  02,BE
4E34:  MOVFF  01,BD
4E38:  MOVFF  00,BC
4E3C:  CLRF   16
4E3E:  BTFSC  FF2.7
4E40:  BSF    16.7
4E42:  BCF    FF2.7
4E44:  MOVLW  32
4E46:  MOVLB  1
4E48:  MOVWF  x35
4E4A:  MOVLB  0
4E4C:  CALL   00B6
4E50:  BTFSC  16.7
4E52:  BSF    FF2.7
....................          if(Ajuste1>30.0) 
4E54:  MOVLB  1
4E56:  CLRF   x1D
4E58:  CLRF   x1C
4E5A:  MOVLW  70
4E5C:  MOVWF  x1B
4E5E:  MOVLW  83
4E60:  MOVWF  x1A
4E62:  MOVFF  BF,121
4E66:  MOVFF  BE,120
4E6A:  MOVFF  BD,11F
4E6E:  MOVFF  BC,11E
4E72:  MOVLB  0
4E74:  CALL   166A
4E78:  BNC   4E86
....................          {Ajuste1=30.0;} 
4E7A:  CLRF   xBF
4E7C:  CLRF   xBE
4E7E:  MOVLW  70
4E80:  MOVWF  xBD
4E82:  MOVLW  83
4E84:  MOVWF  xBC
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4E86:  BSF    F93.2
4E88:  BTFSS  F81.2
4E8A:  BRA    4F08
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
4E8C:  BSF    FD8.1
4E8E:  MOVFF  BF,121
4E92:  MOVFF  BE,120
4E96:  MOVFF  BD,11F
4E9A:  MOVFF  BC,11E
4E9E:  MOVLW  0A
4EA0:  MOVLB  1
4EA2:  MOVWF  x25
4EA4:  MOVLW  D7
4EA6:  MOVWF  x24
4EA8:  MOVLW  23
4EAA:  MOVWF  x23
4EAC:  MOVLW  78
4EAE:  MOVWF  x22
4EB0:  MOVLB  0
4EB2:  CALL   0D06
4EB6:  MOVFF  03,BF
4EBA:  MOVFF  02,BE
4EBE:  MOVFF  01,BD
4EC2:  MOVFF  00,BC
4EC6:  CLRF   16
4EC8:  BTFSC  FF2.7
4ECA:  BSF    16.7
4ECC:  BCF    FF2.7
4ECE:  MOVLW  32
4ED0:  MOVLB  1
4ED2:  MOVWF  x35
4ED4:  MOVLB  0
4ED6:  CALL   00B6
4EDA:  BTFSC  16.7
4EDC:  BSF    FF2.7
....................          if(Ajuste1<0.0) 
4EDE:  MOVFF  BF,11D
4EE2:  MOVFF  BE,11C
4EE6:  MOVFF  BD,11B
4EEA:  MOVFF  BC,11A
4EEE:  MOVLB  1
4EF0:  CLRF   x21
4EF2:  CLRF   x20
4EF4:  CLRF   x1F
4EF6:  CLRF   x1E
4EF8:  MOVLB  0
4EFA:  CALL   166A
4EFE:  BNC   4F08
....................          {Ajuste1=0.0;} 
4F00:  CLRF   xBF
4F02:  CLRF   xBE
4F04:  CLRF   xBD
4F06:  CLRF   xBC
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
4F08:  BSF    F93.0
4F0A:  BTFSS  F81.0
4F0C:  BRA    5082
....................       {  if(Flanco1 == 0)  
4F0E:  BTFSC  31.5
4F10:  BRA    5080
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4F12:  MOVLW  01
4F14:  MOVWF  18
4F16:  CLRF   33
4F18:  MOVLW  02
4F1A:  MOVWF  1C
4F1C:  MOVWF  1E
4F1E:  MOVLW  0B
4F20:  MOVWF  1B
4F22:  CLRF   16
4F24:  BTFSC  FF2.7
4F26:  BSF    16.7
4F28:  BCF    FF2.7
4F2A:  MOVLW  1E
4F2C:  MOVLB  1
4F2E:  MOVWF  x35
4F30:  MOVLB  0
4F32:  CALL   00B6
4F36:  BTFSC  16.7
4F38:  BSF    FF2.7
4F3A:  CLRF   16
4F3C:  BTFSC  FF2.7
4F3E:  BSF    16.7
4F40:  BCF    FF2.7
4F42:  MOVLW  0C
4F44:  MOVLB  1
4F46:  MOVWF  x34
4F48:  MOVLB  0
4F4A:  CALL   0280
4F4E:  BTFSC  16.7
4F50:  BSF    FF2.7
....................             Temporal=Ajuste1; 
4F52:  MOVFF  BF,A7
4F56:  MOVFF  BE,A6
4F5A:  MOVFF  BD,A5
4F5E:  MOVFF  BC,A4
....................             Entero=(int)Ajuste1; 
4F62:  MOVFF  BF,FF
4F66:  MOVFF  BE,FE
4F6A:  MOVFF  BD,FD
4F6E:  MOVFF  BC,FC
4F72:  CALL   16E4
4F76:  MOVFF  01,22
....................             Temporal=Temporal-Entero; 
4F7A:  MOVLB  1
4F7C:  CLRF   x0A
4F7E:  MOVFF  22,109
4F82:  MOVLB  0
4F84:  CALL   0B72
4F88:  BSF    FD8.1
4F8A:  MOVFF  A7,121
4F8E:  MOVFF  A6,120
4F92:  MOVFF  A5,11F
4F96:  MOVFF  A4,11E
4F9A:  MOVFF  03,125
4F9E:  MOVFF  02,124
4FA2:  MOVFF  01,123
4FA6:  MOVFF  00,122
4FAA:  CALL   0D06
4FAE:  MOVFF  03,A7
4FB2:  MOVFF  02,A6
4FB6:  MOVFF  01,A5
4FBA:  MOVFF  00,A4
....................             Temporal2=Temporal*100.0; 
4FBE:  MOVFF  A7,11D
4FC2:  MOVFF  A6,11C
4FC6:  MOVFF  A5,11B
4FCA:  MOVFF  A4,11A
4FCE:  MOVLB  1
4FD0:  CLRF   x21
4FD2:  CLRF   x20
4FD4:  MOVLW  48
4FD6:  MOVWF  x1F
4FD8:  MOVLW  85
4FDA:  MOVWF  x1E
4FDC:  MOVLB  0
4FDE:  CALL   12CE
4FE2:  MOVFF  03,AB
4FE6:  MOVFF  02,AA
4FEA:  MOVFF  01,A9
4FEE:  MOVFF  00,A8
....................             Decimal1=(int8)Temporal2; 
4FF2:  MOVFF  AB,FF
4FF6:  MOVFF  AA,FE
4FFA:  MOVFF  A9,FD
4FFE:  MOVFF  A8,FC
5002:  CALL   16E4
5006:  MOVFF  01,23
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
500A:  MOVLW  19
500C:  MOVWF  FA9
500E:  MOVFF  22,FA8
5012:  BCF    FA6.6
5014:  BCF    FA6.7
5016:  BSF    FA6.2
5018:  MOVF   FF2,W
501A:  MOVWF  00
501C:  BCF    FF2.7
501E:  MOVLB  F
5020:  MOVLW  55
5022:  MOVWF  FA7
5024:  MOVLW  AA
5026:  MOVWF  FA7
5028:  BSF    FA6.1
502A:  BTFSC  FA6.1
502C:  BRA    502A
502E:  BCF    FA6.2
5030:  MOVF   00,W
5032:  IORWF  FF2,F
5034:  MOVLW  1A
5036:  MOVWF  FA9
5038:  MOVFF  23,FA8
503C:  BCF    FA6.6
503E:  BCF    FA6.7
5040:  BSF    FA6.2
5042:  MOVF   FF2,W
5044:  MOVWF  00
5046:  BCF    FF2.7
5048:  MOVLW  55
504A:  MOVWF  FA7
504C:  MOVLW  AA
504E:  MOVWF  FA7
5050:  BSF    FA6.1
5052:  BTFSC  FA6.1
5054:  BRA    5052
5056:  BCF    FA6.2
5058:  MOVF   00,W
505A:  IORWF  FF2,F
....................             delay_ms(1000); 
505C:  MOVLW  04
505E:  MOVLB  1
5060:  MOVWF  x00
5062:  CLRF   16
5064:  BTFSC  FF2.7
5066:  BSF    16.7
5068:  BCF    FF2.7
506A:  MOVLW  FA
506C:  MOVWF  x35
506E:  MOVLB  0
5070:  CALL   00B6
5074:  BTFSC  16.7
5076:  BSF    FF2.7
5078:  MOVLB  1
507A:  DECFSZ x00,F
507C:  BRA    5062
507E:  MOVLB  0
....................             }} 
....................          else 
5080:  BRA    5084
....................             {Flanco1 = 0;}    
5082:  BCF    31.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5084:  BSF    F93.1
5086:  BTFSS  F81.1
5088:  BRA    50D0
....................       {  if(Flanco3 == 0)  
508A:  BTFSC  31.7
508C:  BRA    50CE
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
508E:  MOVLW  01
5090:  MOVWF  18
5092:  CLRF   33
5094:  MOVLW  02
5096:  MOVWF  1C
5098:  MOVWF  1E
509A:  MOVLW  0B
509C:  MOVWF  1B
509E:  CLRF   16
50A0:  BTFSC  FF2.7
50A2:  BSF    16.7
50A4:  BCF    FF2.7
50A6:  MOVLW  1E
50A8:  MOVLB  1
50AA:  MOVWF  x35
50AC:  MOVLB  0
50AE:  CALL   00B6
50B2:  BTFSC  16.7
50B4:  BSF    FF2.7
50B6:  CLRF   16
50B8:  BTFSC  FF2.7
50BA:  BSF    16.7
50BC:  BCF    FF2.7
50BE:  MOVLW  0C
50C0:  MOVLB  1
50C2:  MOVWF  x34
50C4:  MOVLB  0
50C6:  CALL   0280
50CA:  BTFSC  16.7
50CC:  BSF    FF2.7
....................          else 
50CE:  BRA    50D2
....................             {Flanco3 = 0;}   
50D0:  BCF    31.7
50D2:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Modo 
50D4:  MOVF   18,W
50D6:  SUBLW  08
50D8:  BTFSS  FD8.2
50DA:  GOTO   58BA
50DE:  CLRF   16
50E0:  BTFSC  FF2.7
50E2:  BSF    16.7
50E4:  BCF    FF2.7
....................    { 
....................    lcd_gotoxy(1,1); 
50E6:  MOVLW  01
50E8:  MOVWF  x35
50EA:  MOVWF  x36
50EC:  MOVLB  0
50EE:  CALL   0206
50F2:  BTFSC  16.7
50F4:  BSF    FF2.7
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
50F6:  MOVLB  1
50F8:  CLRF   x0A
50FA:  MOVFF  2A,109
50FE:  MOVLB  0
5100:  CALL   0B72
5104:  MOVFF  00,100
5108:  MOVFF  01,101
510C:  MOVFF  02,102
5110:  MOVFF  03,103
5114:  MOVFF  03,121
5118:  MOVFF  02,120
511C:  MOVFF  01,11F
5120:  MOVFF  00,11E
5124:  MOVLB  1
5126:  CLRF   x25
5128:  CLRF   x24
512A:  MOVLW  7F
512C:  MOVWF  x23
512E:  MOVLW  86
5130:  MOVWF  x22
5132:  MOVLB  0
5134:  CALL   0BA8
5138:  MOVLB  1
513A:  CLRF   x1D
513C:  CLRF   x1C
513E:  MOVLW  48
5140:  MOVWF  x1B
5142:  MOVLW  85
5144:  MOVWF  x1A
5146:  MOVFF  03,121
514A:  MOVFF  02,120
514E:  MOVFF  01,11F
5152:  MOVFF  00,11E
5156:  MOVLB  0
5158:  CALL   12CE
515C:  MOVFF  00,100
5160:  MOVFF  01,101
5164:  MOVFF  02,102
5168:  MOVFF  03,103
516C:  MOVLW  62
516E:  MOVWF  FF6
5170:  MOVLW  09
5172:  MOVWF  FF7
5174:  MOVLW  0D
5176:  MOVLB  1
5178:  MOVWF  x08
517A:  MOVLB  0
517C:  CALL   0F7E
5180:  MOVLW  01
5182:  MOVWF  FE9
5184:  MOVFF  103,10B
5188:  MOVFF  102,10A
518C:  MOVFF  101,109
5190:  MOVFF  100,108
5194:  MOVLB  1
5196:  CLRF   x0C
5198:  MOVLB  0
519A:  CALL   1488
519E:  CLRF   16
51A0:  BTFSC  FF2.7
51A2:  BSF    16.7
51A4:  BCF    FF2.7
51A6:  MOVLW  25
51A8:  MOVLB  1
51AA:  MOVWF  x34
51AC:  MOVLB  0
51AE:  CALL   0280
51B2:  BTFSC  16.7
51B4:  BSF    FF2.7
51B6:  CLRF   16
51B8:  BTFSC  FF2.7
51BA:  BSF    16.7
51BC:  BCF    FF2.7
51BE:  MOVLW  20
51C0:  MOVLB  1
51C2:  MOVWF  x34
51C4:  MOVLB  0
51C6:  CALL   0280
51CA:  BTFSC  16.7
51CC:  BSF    FF2.7
51CE:  CLRF   16
51D0:  BTFSC  FF2.7
51D2:  BSF    16.7
51D4:  BCF    FF2.7
....................  
....................    lcd_gotoxy(1,4); 
51D6:  MOVLW  01
51D8:  MOVLB  1
51DA:  MOVWF  x35
51DC:  MOVLW  04
51DE:  MOVWF  x36
51E0:  MOVLB  0
51E2:  CALL   0206
51E6:  BTFSC  16.7
51E8:  BSF    FF2.7
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
51EA:  MOVLW  02
51EC:  MOVLB  1
51EE:  MOVWF  x04
51F0:  MOVLB  0
51F2:  CALL   171C
51F6:  MOVFF  00,100
51FA:  MOVFF  01,101
51FE:  MOVFF  02,102
5202:  MOVFF  03,103
5206:  MOVFF  03,121
520A:  MOVFF  02,120
520E:  MOVFF  01,11F
5212:  MOVFF  00,11E
5216:  MOVLB  1
5218:  CLRF   x25
521A:  MOVLW  C0
521C:  MOVWF  x24
521E:  MOVLW  7F
5220:  MOVWF  x23
5222:  MOVLW  88
5224:  MOVWF  x22
5226:  MOVLB  0
5228:  CALL   0BA8
522C:  MOVLB  1
522E:  CLRF   x1D
5230:  CLRF   x1C
5232:  MOVLW  48
5234:  MOVWF  x1B
5236:  MOVLW  85
5238:  MOVWF  x1A
523A:  MOVFF  03,121
523E:  MOVFF  02,120
5242:  MOVFF  01,11F
5246:  MOVFF  00,11E
524A:  MOVLB  0
524C:  CALL   12CE
5250:  MOVFF  00,100
5254:  MOVFF  01,101
5258:  MOVFF  02,102
525C:  MOVFF  03,103
5260:  MOVLW  78
5262:  MOVWF  FF6
5264:  MOVLW  09
5266:  MOVWF  FF7
5268:  MOVLW  04
526A:  MOVLB  1
526C:  MOVWF  x08
526E:  MOVLB  0
5270:  CALL   0F7E
5274:  MOVLW  01
5276:  MOVWF  FE9
5278:  MOVFF  8B,10B
527C:  MOVFF  8A,10A
5280:  MOVFF  89,109
5284:  MOVFF  88,108
5288:  MOVLB  1
528A:  MOVWF  x0C
528C:  MOVLB  0
528E:  CALL   1488
5292:  MOVLW  81
5294:  MOVWF  FF6
5296:  MOVLW  09
5298:  MOVWF  FF7
529A:  MOVLW  0A
529C:  MOVLB  1
529E:  MOVWF  x08
52A0:  MOVLB  0
52A2:  CALL   0F7E
52A6:  MOVLW  01
52A8:  MOVWF  FE9
52AA:  MOVFF  103,10B
52AE:  MOVFF  102,10A
52B2:  MOVFF  101,109
52B6:  MOVFF  100,108
52BA:  MOVLB  1
52BC:  CLRF   x0C
52BE:  MOVLB  0
52C0:  CALL   1488
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
52C4:  BTFSC  4B.0
52C6:  BRA    54CE
52C8:  BTFSC  4B.1
52CA:  BRA    54CE
52CC:  BTFSC  4B.2
52CE:  BRA    54CE
....................       { 
....................          if(UP)//Si oprime hacia arriba 
52D0:  BSF    F93.3
52D2:  BTFSS  F81.3
52D4:  BRA    5360
....................          { 
....................             delay_ms(500); 
52D6:  MOVLW  02
52D8:  MOVLB  1
52DA:  MOVWF  x00
52DC:  CLRF   16
52DE:  BTFSC  FF2.7
52E0:  BSF    16.7
52E2:  BCF    FF2.7
52E4:  MOVLW  FA
52E6:  MOVWF  x35
52E8:  MOVLB  0
52EA:  CALL   00B6
52EE:  BTFSC  16.7
52F0:  BSF    FF2.7
52F2:  MOVLB  1
52F4:  DECFSZ x00,F
52F6:  BRA    52DC
....................             if(UP) 
52F8:  BSF    F93.3
52FA:  BTFSS  F81.3
52FC:  BRA    535E
52FE:  CLRF   16
5300:  BTFSC  FF2.7
5302:  BSF    16.7
5304:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5306:  MOVLW  01
5308:  MOVWF  x35
530A:  MOVLW  02
530C:  MOVWF  x36
530E:  MOVLB  0
5310:  CALL   0206
5314:  BTFSC  16.7
5316:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Manual  "); 
5318:  MOVLW  92
531A:  MOVWF  FF6
531C:  MOVLW  09
531E:  MOVWF  FF7
5320:  CLRF   16
5322:  BTFSC  FF2.7
5324:  BSF    16.7
5326:  BCF    FF2.7
5328:  CALL   02EC
532C:  BTFSC  16.7
532E:  BSF    FF2.7
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
5330:  BSF    4B.0
5332:  BCF    4B.1
5334:  BCF    4B.2
5336:  MOVLW  0A
5338:  MOVWF  2D
533A:  MOVWF  2F
....................                delay_ms(1000); 
533C:  MOVLW  04
533E:  MOVLB  1
5340:  MOVWF  x00
5342:  CLRF   16
5344:  BTFSC  FF2.7
5346:  BSF    16.7
5348:  BCF    FF2.7
534A:  MOVLW  FA
534C:  MOVWF  x35
534E:  MOVLB  0
5350:  CALL   00B6
5354:  BTFSC  16.7
5356:  BSF    FF2.7
5358:  MOVLB  1
535A:  DECFSZ x00,F
535C:  BRA    5342
535E:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
5360:  BSF    F93.2
5362:  BTFSS  F81.2
5364:  BRA    53F0
....................          { 
....................             delay_ms(500); 
5366:  MOVLW  02
5368:  MOVLB  1
536A:  MOVWF  x00
536C:  CLRF   16
536E:  BTFSC  FF2.7
5370:  BSF    16.7
5372:  BCF    FF2.7
5374:  MOVLW  FA
5376:  MOVWF  x35
5378:  MOVLB  0
537A:  CALL   00B6
537E:  BTFSC  16.7
5380:  BSF    FF2.7
5382:  MOVLB  1
5384:  DECFSZ x00,F
5386:  BRA    536C
....................             if(DOWN) 
5388:  BSF    F93.2
538A:  BTFSS  F81.2
538C:  BRA    53EE
538E:  CLRF   16
5390:  BTFSC  FF2.7
5392:  BSF    16.7
5394:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5396:  MOVLW  01
5398:  MOVWF  x35
539A:  MOVLW  02
539C:  MOVWF  x36
539E:  MOVLB  0
53A0:  CALL   0206
53A4:  BTFSC  16.7
53A6:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Auto   "); 
53A8:  MOVLW  A4
53AA:  MOVWF  FF6
53AC:  MOVLW  09
53AE:  MOVWF  FF7
53B0:  CLRF   16
53B2:  BTFSC  FF2.7
53B4:  BSF    16.7
53B6:  BCF    FF2.7
53B8:  CALL   02EC
53BC:  BTFSC  16.7
53BE:  BSF    FF2.7
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
53C0:  BSF    4B.1
53C2:  BCF    4B.0
53C4:  BCF    4B.2
53C6:  MOVLW  0A
53C8:  MOVWF  2E
53CA:  MOVWF  2F
....................                delay_ms(1000); 
53CC:  MOVLW  04
53CE:  MOVLB  1
53D0:  MOVWF  x00
53D2:  CLRF   16
53D4:  BTFSC  FF2.7
53D6:  BSF    16.7
53D8:  BCF    FF2.7
53DA:  MOVLW  FA
53DC:  MOVWF  x35
53DE:  MOVLB  0
53E0:  CALL   00B6
53E4:  BTFSC  16.7
53E6:  BSF    FF2.7
53E8:  MOVLB  1
53EA:  DECFSZ x00,F
53EC:  BRA    53D2
53EE:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
53F0:  BSF    F93.0
53F2:  BTFSS  F81.0
53F4:  BRA    5480
....................          { 
....................             delay_ms(500); 
53F6:  MOVLW  02
53F8:  MOVLB  1
53FA:  MOVWF  x00
53FC:  CLRF   16
53FE:  BTFSC  FF2.7
5400:  BSF    16.7
5402:  BCF    FF2.7
5404:  MOVLW  FA
5406:  MOVWF  x35
5408:  MOVLB  0
540A:  CALL   00B6
540E:  BTFSC  16.7
5410:  BSF    FF2.7
5412:  MOVLB  1
5414:  DECFSZ x00,F
5416:  BRA    53FC
....................             if(RIGHT) 
5418:  BSF    F93.0
541A:  BTFSS  F81.0
541C:  BRA    547E
541E:  CLRF   16
5420:  BTFSC  FF2.7
5422:  BSF    16.7
5424:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(1,2); 
5426:  MOVLW  01
5428:  MOVWF  x35
542A:  MOVLW  02
542C:  MOVWF  x36
542E:  MOVLB  0
5430:  CALL   0206
5434:  BTFSC  16.7
5436:  BSF    FF2.7
....................                printf(lcd_putc,"   Modo Semi   "); 
5438:  MOVLW  B4
543A:  MOVWF  FF6
543C:  MOVLW  09
543E:  MOVWF  FF7
5440:  CLRF   16
5442:  BTFSC  FF2.7
5444:  BSF    16.7
5446:  BCF    FF2.7
5448:  CALL   02EC
544C:  BTFSC  16.7
544E:  BSF    FF2.7
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
5450:  BSF    4B.2
5452:  BCF    4B.0
5454:  BCF    4B.1
5456:  MOVLW  0A
5458:  MOVWF  2D
545A:  MOVWF  2E
....................                delay_ms(1000); 
545C:  MOVLW  04
545E:  MOVLB  1
5460:  MOVWF  x00
5462:  CLRF   16
5464:  BTFSC  FF2.7
5466:  BSF    16.7
5468:  BCF    FF2.7
546A:  MOVLW  FA
546C:  MOVWF  x35
546E:  MOVLB  0
5470:  CALL   00B6
5474:  BTFSC  16.7
5476:  BSF    FF2.7
5478:  MOVLB  1
547A:  DECFSZ x00,F
547C:  BRA    5462
547E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
5480:  BSF    F93.1
5482:  BTFSS  F81.1
5484:  BRA    54CE
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
5486:  MOVLW  01
5488:  MOVWF  18
548A:  CLRF   33
548C:  MOVLW  02
548E:  MOVWF  1C
5490:  MOVWF  1E
5492:  MOVLW  0B
5494:  MOVWF  1B
5496:  MOVLW  02
5498:  MOVLB  1
549A:  MOVWF  x00
549C:  CLRF   16
549E:  BTFSC  FF2.7
54A0:  BSF    16.7
54A2:  BCF    FF2.7
54A4:  MOVLW  FA
54A6:  MOVWF  x35
54A8:  MOVLB  0
54AA:  CALL   00B6
54AE:  BTFSC  16.7
54B0:  BSF    FF2.7
54B2:  MOVLB  1
54B4:  DECFSZ x00,F
54B6:  BRA    549C
54B8:  CLRF   16
54BA:  BTFSC  FF2.7
54BC:  BSF    16.7
54BE:  BCF    FF2.7
54C0:  MOVLW  0C
54C2:  MOVWF  x34
54C4:  MOVLB  0
54C6:  CALL   0280
54CA:  BTFSC  16.7
54CC:  BSF    FF2.7
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
54CE:  BTFSC  4B.0
54D0:  BRA    54DA
54D2:  MOVF   2E,W
54D4:  SUBLW  14
54D6:  BTFSS  FD8.2
54D8:  BRA    5646
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
54DA:  BCF    4B.1
54DC:  BCF    4B.2
54DE:  MOVLW  0A
54E0:  MOVWF  2D
54E2:  MOVWF  2F
54E4:  CLRF   16
54E6:  BTFSC  FF2.7
54E8:  BSF    16.7
54EA:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
54EC:  MOVLW  01
54EE:  MOVLB  1
54F0:  MOVWF  x35
54F2:  MOVLW  02
54F4:  MOVWF  x36
54F6:  MOVLB  0
54F8:  CALL   0206
54FC:  BTFSC  16.7
54FE:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Manual  "); 
5500:  MOVLW  C4
5502:  MOVWF  FF6
5504:  MOVLW  09
5506:  MOVWF  FF7
5508:  CLRF   16
550A:  BTFSC  FF2.7
550C:  BSF    16.7
550E:  BCF    FF2.7
5510:  CALL   02EC
5514:  BTFSC  16.7
5516:  BSF    FF2.7
5518:  CLRF   16
551A:  BTFSC  FF2.7
551C:  BSF    16.7
551E:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5520:  MOVLW  01
5522:  MOVLB  1
5524:  MOVWF  x35
5526:  MOVLW  03
5528:  MOVWF  x36
552A:  MOVLB  0
552C:  CALL   0206
5530:  BTFSC  16.7
5532:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
5534:  MOVLW  D6
5536:  MOVWF  FF6
5538:  MOVLW  09
553A:  MOVWF  FF7
553C:  CLRF   16
553E:  BTFSC  FF2.7
5540:  BSF    16.7
5542:  BCF    FF2.7
5544:  CALL   02EC
5548:  BTFSC  16.7
554A:  BSF    FF2.7
....................          if(LEFT) 
554C:  BSF    F93.1
554E:  BTFSS  F81.1
5550:  BRA    5646
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(251);tmp=251;  
5552:  BCF    4B.0
5554:  MOVLW  14
5556:  MOVWF  2E
5558:  MOVLW  0A
555A:  MOVWF  2D
555C:  MOVWF  2F
555E:  MOVLW  02
5560:  MOVLB  1
5562:  MOVWF  x00
5564:  CLRF   16
5566:  BTFSC  FF2.7
5568:  BSF    16.7
556A:  BCF    FF2.7
556C:  MOVLW  FA
556E:  MOVWF  x35
5570:  MOVLB  0
5572:  CALL   00B6
5576:  BTFSC  16.7
5578:  BSF    FF2.7
557A:  MOVLB  1
557C:  DECFSZ x00,F
557E:  BRA    5564
5580:  CLRF   16
5582:  BTFSC  FF2.7
5584:  BSF    16.7
5586:  BCF    FF2.7
5588:  MOVLW  0C
558A:  MOVWF  x34
558C:  MOVLB  0
558E:  CALL   0280
5592:  BTFSC  16.7
5594:  BSF    FF2.7
5596:  MOVLW  FB
5598:  MOVWF  xFC
559A:  CALL   1780
559E:  MOVLW  FB
55A0:  MOVWF  2A
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
55A2:  MOVLW  0A
55A4:  MOVWF  FA9
55A6:  MOVFF  2E,FA8
55AA:  BCF    FA6.6
55AC:  BCF    FA6.7
55AE:  BSF    FA6.2
55B0:  MOVF   FF2,W
55B2:  MOVWF  00
55B4:  BCF    FF2.7
55B6:  MOVLB  F
55B8:  MOVLW  55
55BA:  MOVWF  FA7
55BC:  MOVLW  AA
55BE:  MOVWF  FA7
55C0:  BSF    FA6.1
55C2:  BTFSC  FA6.1
55C4:  BRA    55C2
55C6:  BCF    FA6.2
55C8:  MOVF   00,W
55CA:  IORWF  FF2,F
55CC:  MOVLW  0C
55CE:  MOVWF  FA9
55D0:  MOVFF  2F,FA8
55D4:  BCF    FA6.6
55D6:  BCF    FA6.7
55D8:  BSF    FA6.2
55DA:  MOVF   FF2,W
55DC:  MOVWF  00
55DE:  BCF    FF2.7
55E0:  MOVLW  55
55E2:  MOVWF  FA7
55E4:  MOVLW  AA
55E6:  MOVWF  FA7
55E8:  BSF    FA6.1
55EA:  BTFSC  FA6.1
55EC:  BRA    55EA
55EE:  BCF    FA6.2
55F0:  MOVF   00,W
55F2:  IORWF  FF2,F
55F4:  MOVLW  0B
55F6:  MOVWF  FA9
55F8:  MOVFF  2D,FA8
55FC:  BCF    FA6.6
55FE:  BCF    FA6.7
5600:  BSF    FA6.2
5602:  MOVF   FF2,W
5604:  MOVWF  00
5606:  BCF    FF2.7
5608:  MOVLW  55
560A:  MOVWF  FA7
560C:  MOVLW  AA
560E:  MOVWF  FA7
5610:  BSF    FA6.1
5612:  BTFSC  FA6.1
5614:  BRA    5612
5616:  BCF    FA6.2
5618:  MOVF   00,W
561A:  IORWF  FF2,F
561C:  MOVLW  0D
561E:  MOVWF  FA9
5620:  MOVFF  2A,FA8
5624:  BCF    FA6.6
5626:  BCF    FA6.7
5628:  BSF    FA6.2
562A:  MOVF   FF2,W
562C:  MOVWF  00
562E:  BCF    FF2.7
5630:  MOVLW  55
5632:  MOVWF  FA7
5634:  MOVLW  AA
5636:  MOVWF  FA7
5638:  BSF    FA6.1
563A:  BTFSC  FA6.1
563C:  BRA    563A
563E:  BCF    FA6.2
5640:  MOVF   00,W
5642:  IORWF  FF2,F
5644:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
5646:  BTFSC  4B.1
5648:  BRA    5652
564A:  MOVF   2D,W
564C:  SUBLW  14
564E:  BTFSS  FD8.2
5650:  BRA    5762
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
5652:  BCF    4B.0
5654:  BCF    4B.2
5656:  MOVLW  0A
5658:  MOVWF  2F
565A:  MOVWF  2E
565C:  CLRF   16
565E:  BTFSC  FF2.7
5660:  BSF    16.7
5662:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5664:  MOVLW  01
5666:  MOVLB  1
5668:  MOVWF  x35
566A:  MOVLW  02
566C:  MOVWF  x36
566E:  MOVLB  0
5670:  CALL   0206
5674:  BTFSC  16.7
5676:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Auto   "); 
5678:  MOVLW  EC
567A:  MOVWF  FF6
567C:  MOVLW  09
567E:  MOVWF  FF7
5680:  CLRF   16
5682:  BTFSC  FF2.7
5684:  BSF    16.7
5686:  BCF    FF2.7
5688:  CALL   02EC
568C:  BTFSC  16.7
568E:  BSF    FF2.7
5690:  CLRF   16
5692:  BTFSC  FF2.7
5694:  BSF    16.7
5696:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5698:  MOVLW  01
569A:  MOVLB  1
569C:  MOVWF  x35
569E:  MOVLW  03
56A0:  MOVWF  x36
56A2:  MOVLB  0
56A4:  CALL   0206
56A8:  BTFSC  16.7
56AA:  BSF    FF2.7
....................          printf(lcd_putc,"    Seleccionado    "); 
56AC:  MOVLW  FC
56AE:  MOVWF  FF6
56B0:  MOVLW  09
56B2:  MOVWF  FF7
56B4:  CLRF   16
56B6:  BTFSC  FF2.7
56B8:  BSF    16.7
56BA:  BCF    FF2.7
56BC:  CALL   02EC
56C0:  BTFSC  16.7
56C2:  BSF    FF2.7
....................          if(LEFT) 
56C4:  BSF    F93.1
56C6:  BTFSS  F81.1
56C8:  BRA    5762
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
56CA:  BCF    4B.1
56CC:  MOVLW  14
56CE:  MOVWF  2D
56D0:  MOVLW  0A
56D2:  MOVWF  2F
56D4:  MOVWF  2E
56D6:  MOVLW  02
56D8:  MOVLB  1
56DA:  MOVWF  x00
56DC:  CLRF   16
56DE:  BTFSC  FF2.7
56E0:  BSF    16.7
56E2:  BCF    FF2.7
56E4:  MOVLW  FA
56E6:  MOVWF  x35
56E8:  MOVLB  0
56EA:  CALL   00B6
56EE:  BTFSC  16.7
56F0:  BSF    FF2.7
56F2:  MOVLB  1
56F4:  DECFSZ x00,F
56F6:  BRA    56DC
56F8:  CLRF   16
56FA:  BTFSC  FF2.7
56FC:  BSF    16.7
56FE:  BCF    FF2.7
5700:  MOVLW  0C
5702:  MOVWF  x34
5704:  MOVLB  0
5706:  CALL   0280
570A:  BTFSC  16.7
570C:  BSF    FF2.7
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
570E:  MOVLW  0B
5710:  MOVWF  FA9
5712:  MOVFF  2D,FA8
5716:  BCF    FA6.6
5718:  BCF    FA6.7
571A:  BSF    FA6.2
571C:  MOVF   FF2,W
571E:  MOVWF  00
5720:  BCF    FF2.7
5722:  MOVLB  F
5724:  MOVLW  55
5726:  MOVWF  FA7
5728:  MOVLW  AA
572A:  MOVWF  FA7
572C:  BSF    FA6.1
572E:  BTFSC  FA6.1
5730:  BRA    572E
5732:  BCF    FA6.2
5734:  MOVF   00,W
5736:  IORWF  FF2,F
5738:  MOVLW  0C
573A:  MOVWF  FA9
573C:  MOVFF  2F,FA8
5740:  BCF    FA6.6
5742:  BCF    FA6.7
5744:  BSF    FA6.2
5746:  MOVF   FF2,W
5748:  MOVWF  00
574A:  BCF    FF2.7
574C:  MOVLW  55
574E:  MOVWF  FA7
5750:  MOVLW  AA
5752:  MOVWF  FA7
5754:  BSF    FA6.1
5756:  BTFSC  FA6.1
5758:  BRA    5756
575A:  BCF    FA6.2
575C:  MOVF   00,W
575E:  IORWF  FF2,F
5760:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
5762:  BTFSC  4B.2
5764:  BRA    576E
5766:  MOVF   2F,W
5768:  SUBLW  14
576A:  BTFSS  FD8.2
576C:  BRA    58B8
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
576E:  BCF    4B.0
5770:  BCF    4B.1
5772:  MOVLW  0A
5774:  MOVWF  2D
5776:  MOVWF  2E
5778:  CLRF   16
577A:  BTFSC  FF2.7
577C:  BSF    16.7
577E:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5780:  MOVLW  01
5782:  MOVLB  1
5784:  MOVWF  x35
5786:  MOVLW  02
5788:  MOVWF  x36
578A:  MOVLB  0
578C:  CALL   0206
5790:  BTFSC  16.7
5792:  BSF    FF2.7
....................          printf(lcd_putc,"   Modo Semi   "); 
5794:  MOVLW  12
5796:  MOVWF  FF6
5798:  MOVLW  0A
579A:  MOVWF  FF7
579C:  CLRF   16
579E:  BTFSC  FF2.7
57A0:  BSF    16.7
57A2:  BCF    FF2.7
57A4:  CALL   02EC
57A8:  BTFSC  16.7
57AA:  BSF    FF2.7
....................          if(UP) 
57AC:  BSF    F93.3
57AE:  BTFSS  F81.3
57B0:  BRA    57B4
....................          { 
....................             tmp++; 
57B2:  INCF   2A,F
....................              
....................          } 
....................           
....................          if(DOWN) 
57B4:  BSF    F93.2
57B6:  BTFSS  F81.2
57B8:  BRA    57BC
....................          { 
....................             tmp--; 
57BA:  DECF   2A,F
....................          } 
....................          ValorSemi=tmp; 
57BC:  MOVFF  2A,30
....................          ajustar_damper(tmp); 
57C0:  MOVFF  2A,FC
57C4:  CALL   1780
....................          if(LEFT) 
57C8:  BSF    F93.1
57CA:  BTFSS  F81.1
57CC:  BRA    58B8
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
57CE:  MOVLW  0D
57D0:  MOVWF  FA9
57D2:  MOVFF  2A,FA8
57D6:  BCF    FA6.6
57D8:  BCF    FA6.7
57DA:  BSF    FA6.2
57DC:  MOVF   FF2,W
57DE:  MOVWF  00
57E0:  BCF    FF2.7
57E2:  MOVLB  F
57E4:  MOVLW  55
57E6:  MOVWF  FA7
57E8:  MOVLW  AA
57EA:  MOVWF  FA7
57EC:  BSF    FA6.1
57EE:  BTFSC  FA6.1
57F0:  BRA    57EE
57F2:  BCF    FA6.2
57F4:  MOVF   00,W
57F6:  IORWF  FF2,F
57F8:  BCF    4B.2
57FA:  MOVLW  14
57FC:  MOVWF  2F
57FE:  MOVLW  0A
5800:  MOVWF  2D
5802:  MOVWF  2E
5804:  MOVLW  02
5806:  MOVLB  1
5808:  MOVWF  x00
580A:  CLRF   16
580C:  BTFSC  FF2.7
580E:  BSF    16.7
5810:  BCF    FF2.7
5812:  MOVLW  FA
5814:  MOVWF  x35
5816:  MOVLB  0
5818:  CALL   00B6
581C:  BTFSC  16.7
581E:  BSF    FF2.7
5820:  MOVLB  1
5822:  DECFSZ x00,F
5824:  BRA    580A
5826:  CLRF   16
5828:  BTFSC  FF2.7
582A:  BSF    16.7
582C:  BCF    FF2.7
582E:  MOVLW  0C
5830:  MOVWF  x34
5832:  MOVLB  0
5834:  CALL   0280
5838:  BTFSC  16.7
583A:  BSF    FF2.7
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
583C:  MOVLW  0C
583E:  MOVWF  FA9
5840:  MOVFF  2F,FA8
5844:  BCF    FA6.6
5846:  BCF    FA6.7
5848:  BSF    FA6.2
584A:  MOVF   FF2,W
584C:  MOVWF  00
584E:  BCF    FF2.7
5850:  MOVLB  F
5852:  MOVLW  55
5854:  MOVWF  FA7
5856:  MOVLW  AA
5858:  MOVWF  FA7
585A:  BSF    FA6.1
585C:  BTFSC  FA6.1
585E:  BRA    585C
5860:  BCF    FA6.2
5862:  MOVF   00,W
5864:  IORWF  FF2,F
5866:  MOVLW  0B
5868:  MOVWF  FA9
586A:  MOVFF  2D,FA8
586E:  BCF    FA6.6
5870:  BCF    FA6.7
5872:  BSF    FA6.2
5874:  MOVF   FF2,W
5876:  MOVWF  00
5878:  BCF    FF2.7
587A:  MOVLW  55
587C:  MOVWF  FA7
587E:  MOVLW  AA
5880:  MOVWF  FA7
5882:  BSF    FA6.1
5884:  BTFSC  FA6.1
5886:  BRA    5884
5888:  BCF    FA6.2
588A:  MOVF   00,W
588C:  IORWF  FF2,F
588E:  MOVLW  0A
5890:  MOVWF  FA9
5892:  MOVFF  2E,FA8
5896:  BCF    FA6.6
5898:  BCF    FA6.7
589A:  BSF    FA6.2
589C:  MOVF   FF2,W
589E:  MOVWF  00
58A0:  BCF    FF2.7
58A2:  MOVLW  55
58A4:  MOVWF  FA7
58A6:  MOVLW  AA
58A8:  MOVWF  FA7
58AA:  BSF    FA6.1
58AC:  BTFSC  FA6.1
58AE:  BRA    58AC
58B0:  BCF    FA6.2
58B2:  MOVF   00,W
58B4:  IORWF  FF2,F
58B6:  MOVLB  0
58B8:  MOVLB  1
....................          }  
....................       } 
....................        
....................        
....................               
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
58BA:  MOVF   18,W
58BC:  SUBLW  14
58BE:  BTFSS  FD8.2
58C0:  BRA    5D46
....................    { 
....................       if(Lectura2==1) 
58C2:  BTFSS  32.5
58C4:  BRA    5A38
58C6:  CLRF   16
58C8:  BTFSC  FF2.7
58CA:  BSF    16.7
58CC:  BCF    FF2.7
....................       { 
....................       lcd_gotoxy(1,1); 
58CE:  MOVLW  01
58D0:  MOVWF  x35
58D2:  MOVWF  x36
58D4:  MOVLB  0
58D6:  CALL   0206
58DA:  BTFSC  16.7
58DC:  BSF    FF2.7
....................       printf(lcd_putc," JP CEGH    ");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
58DE:  MOVLW  22
58E0:  MOVWF  FF6
58E2:  MOVLW  0A
58E4:  MOVWF  FF7
58E6:  CLRF   16
58E8:  BTFSC  FF2.7
58EA:  BSF    16.7
58EC:  BCF    FF2.7
58EE:  CALL   02EC
58F2:  BTFSC  16.7
58F4:  BSF    FF2.7
58F6:  CLRF   16
58F8:  BTFSC  FF2.7
58FA:  BSF    16.7
58FC:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
58FE:  MOVLW  01
5900:  MOVLB  1
5902:  MOVWF  x35
5904:  MOVLW  02
5906:  MOVWF  x36
5908:  MOVLB  0
590A:  CALL   0206
590E:  BTFSC  16.7
5910:  BSF    FF2.7
....................       printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
5912:  MOVLB  1
5914:  CLRF   x0A
5916:  MOVFF  2A,109
591A:  MOVLB  0
591C:  CALL   0B72
5920:  MOVFF  00,100
5924:  MOVFF  01,101
5928:  MOVFF  02,102
592C:  MOVFF  03,103
5930:  MOVFF  03,121
5934:  MOVFF  02,120
5938:  MOVFF  01,11F
593C:  MOVFF  00,11E
5940:  MOVLB  1
5942:  CLRF   x25
5944:  CLRF   x24
5946:  MOVLW  7F
5948:  MOVWF  x23
594A:  MOVLW  86
594C:  MOVWF  x22
594E:  MOVLB  0
5950:  CALL   0BA8
5954:  MOVLB  1
5956:  CLRF   x1D
5958:  CLRF   x1C
595A:  MOVLW  48
595C:  MOVWF  x1B
595E:  MOVLW  85
5960:  MOVWF  x1A
5962:  MOVFF  03,121
5966:  MOVFF  02,120
596A:  MOVFF  01,11F
596E:  MOVFF  00,11E
5972:  MOVLB  0
5974:  CALL   12CE
5978:  MOVFF  00,100
597C:  MOVFF  01,101
5980:  MOVFF  02,102
5984:  MOVFF  03,103
5988:  MOVLW  30
598A:  MOVWF  FF6
598C:  MOVLW  0A
598E:  MOVWF  FF7
5990:  MOVLW  05
5992:  MOVLB  1
5994:  MOVWF  x08
5996:  MOVLB  0
5998:  CALL   0F7E
599C:  MOVLW  01
599E:  MOVWF  FE9
59A0:  MOVFF  103,10B
59A4:  MOVFF  102,10A
59A8:  MOVFF  101,109
59AC:  MOVFF  100,108
59B0:  MOVLB  1
59B2:  CLRF   x0C
59B4:  MOVLB  0
59B6:  CALL   1488
59BA:  CLRF   16
59BC:  BTFSC  FF2.7
59BE:  BSF    16.7
59C0:  BCF    FF2.7
59C2:  MOVLW  25
59C4:  MOVLB  1
59C6:  MOVWF  x34
59C8:  MOVLB  0
59CA:  CALL   0280
59CE:  BTFSC  16.7
59D0:  BSF    FF2.7
59D2:  CLRF   16
59D4:  BTFSC  FF2.7
59D6:  BSF    16.7
59D8:  BCF    FF2.7
....................       lcd_gotoxy(1,3); 
59DA:  MOVLW  01
59DC:  MOVLB  1
59DE:  MOVWF  x35
59E0:  MOVLW  03
59E2:  MOVWF  x36
59E4:  MOVLB  0
59E6:  CALL   0206
59EA:  BTFSC  16.7
59EC:  BSF    FF2.7
....................       printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
59EE:  MOVLW  3E
59F0:  MOVWF  FF6
59F2:  MOVLW  0A
59F4:  MOVWF  FF7
59F6:  MOVLW  08
59F8:  MOVLB  1
59FA:  MOVWF  x08
59FC:  MOVLB  0
59FE:  CALL   0F7E
5A02:  MOVLW  01
5A04:  MOVWF  FE9
5A06:  MOVFF  8B,10B
5A0A:  MOVFF  8A,10A
5A0E:  MOVFF  89,109
5A12:  MOVFF  88,108
5A16:  MOVLB  1
5A18:  MOVWF  x0C
5A1A:  MOVLB  0
5A1C:  CALL   1488
5A20:  MOVLW  4B
5A22:  MOVWF  FF6
5A24:  MOVLW  0A
5A26:  MOVWF  FF7
5A28:  MOVLW  07
5A2A:  MOVLB  1
5A2C:  MOVWF  x08
5A2E:  MOVLB  0
5A30:  CALL   0F7E
....................       Lectura2=0; 
5A34:  BCF    32.5
5A36:  MOVLB  1
....................       } 
....................        
....................       if(iniciodamper==0) 
5A38:  BTFSC  32.7
5A3A:  BRA    5A74
....................       { 
....................          flag_iniciodamper=1; 
5A3C:  BSF    32.6
5A3E:  CLRF   16
5A40:  BTFSC  FF2.7
5A42:  BSF    16.7
5A44:  BCF    FF2.7
....................          lcd_gotoxy(11,2); 
5A46:  MOVLW  0B
5A48:  MOVWF  x35
5A4A:  MOVLW  02
5A4C:  MOVWF  x36
5A4E:  MOVLB  0
5A50:  CALL   0206
5A54:  BTFSC  16.7
5A56:  BSF    FF2.7
....................          printf(lcd_putc,"Flujo=Ajus"); 
5A58:  MOVLW  54
5A5A:  MOVWF  FF6
5A5C:  MOVLW  0A
5A5E:  MOVWF  FF7
5A60:  CLRF   16
5A62:  BTFSC  FF2.7
5A64:  BSF    16.7
5A66:  BCF    FF2.7
5A68:  CALL   02EC
5A6C:  BTFSC  16.7
5A6E:  BSF    FF2.7
....................       } 
....................       else 
5A70:  BRA    5B5C
5A72:  MOVLB  1
....................       { 
....................          flag_iniciodamper=0; 
5A74:  BCF    32.6
....................          if(Flujo<0.5) 
5A76:  MOVFF  8B,11D
5A7A:  MOVFF  8A,11C
5A7E:  MOVFF  89,11B
5A82:  MOVFF  88,11A
5A86:  CLRF   x21
5A88:  CLRF   x20
5A8A:  CLRF   x1F
5A8C:  MOVLW  7E
5A8E:  MOVWF  x1E
5A90:  MOVLB  0
5A92:  CALL   166A
5A96:  BNC   5ACE
5A98:  CLRF   16
5A9A:  BTFSC  FF2.7
5A9C:  BSF    16.7
5A9E:  BCF    FF2.7
....................          { 
....................             lcd_gotoxy(11,2); 
5AA0:  MOVLW  0B
5AA2:  MOVLB  1
5AA4:  MOVWF  x35
5AA6:  MOVLW  02
5AA8:  MOVWF  x36
5AAA:  MOVLB  0
5AAC:  CALL   0206
5AB0:  BTFSC  16.7
5AB2:  BSF    FF2.7
....................             printf(lcd_putc,"Flujo=Bajo");       
5AB4:  MOVLW  60
5AB6:  MOVWF  FF6
5AB8:  MOVLW  0A
5ABA:  MOVWF  FF7
5ABC:  CLRF   16
5ABE:  BTFSC  FF2.7
5AC0:  BSF    16.7
5AC2:  BCF    FF2.7
5AC4:  CALL   02EC
5AC8:  BTFSC  16.7
5ACA:  BSF    FF2.7
....................          } 
....................          else 
5ACC:  BRA    5B5C
....................          { 
....................             if(Flujo>2.0) 
5ACE:  MOVLB  1
5AD0:  CLRF   x1D
5AD2:  CLRF   x1C
5AD4:  CLRF   x1B
5AD6:  MOVLW  80
5AD8:  MOVWF  x1A
5ADA:  MOVFF  8B,121
5ADE:  MOVFF  8A,120
5AE2:  MOVFF  89,11F
5AE6:  MOVFF  88,11E
5AEA:  MOVLB  0
5AEC:  CALL   166A
5AF0:  BNC   5B28
5AF2:  CLRF   16
5AF4:  BTFSC  FF2.7
5AF6:  BSF    16.7
5AF8:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
5AFA:  MOVLW  0B
5AFC:  MOVLB  1
5AFE:  MOVWF  x35
5B00:  MOVLW  02
5B02:  MOVWF  x36
5B04:  MOVLB  0
5B06:  CALL   0206
5B0A:  BTFSC  16.7
5B0C:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=Alto");                
5B0E:  MOVLW  6C
5B10:  MOVWF  FF6
5B12:  MOVLW  0A
5B14:  MOVWF  FF7
5B16:  CLRF   16
5B18:  BTFSC  FF2.7
5B1A:  BSF    16.7
5B1C:  BCF    FF2.7
5B1E:  CALL   02EC
5B22:  BTFSC  16.7
5B24:  BSF    FF2.7
....................             } 
....................             else 
5B26:  BRA    5B5C
5B28:  CLRF   16
5B2A:  BTFSC  FF2.7
5B2C:  BSF    16.7
5B2E:  BCF    FF2.7
....................             { 
....................                lcd_gotoxy(11,2); 
5B30:  MOVLW  0B
5B32:  MOVLB  1
5B34:  MOVWF  x35
5B36:  MOVLW  02
5B38:  MOVWF  x36
5B3A:  MOVLB  0
5B3C:  CALL   0206
5B40:  BTFSC  16.7
5B42:  BSF    FF2.7
....................                printf(lcd_putc,"Flujo=OK  ");       
5B44:  MOVLW  78
5B46:  MOVWF  FF6
5B48:  MOVLW  0A
5B4A:  MOVWF  FF7
5B4C:  CLRF   16
5B4E:  BTFSC  FF2.7
5B50:  BSF    16.7
5B52:  BCF    FF2.7
5B54:  CALL   02EC
5B58:  BTFSC  16.7
5B5A:  BSF    FF2.7
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
5B5C:  BTFSS  31.0
5B5E:  BRA    5B9A
....................       { 
....................          Luz_Blanca_on; 
5B60:  BSF    F8A.4
5B62:  BCF    F93.4
5B64:  CLRF   16
5B66:  BTFSC  FF2.7
5B68:  BSF    16.7
5B6A:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
5B6C:  MOVLW  01
5B6E:  MOVLB  1
5B70:  MOVWF  x35
5B72:  MOVLW  04
5B74:  MOVWF  x36
5B76:  MOVLB  0
5B78:  CALL   0206
5B7C:  BTFSC  16.7
5B7E:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:ON "); 
5B80:  MOVLW  84
5B82:  MOVWF  FF6
5B84:  MOVLW  0A
5B86:  MOVWF  FF7
5B88:  CLRF   16
5B8A:  BTFSC  FF2.7
5B8C:  BSF    16.7
5B8E:  BCF    FF2.7
5B90:  CALL   02EC
5B94:  BTFSC  16.7
5B96:  BSF    FF2.7
....................       } 
....................       else 
5B98:  BRA    5BD2
....................       { 
....................          Luz_Blanca_off; 
5B9A:  BCF    F8A.4
5B9C:  BCF    F93.4
5B9E:  CLRF   16
5BA0:  BTFSC  FF2.7
5BA2:  BSF    16.7
5BA4:  BCF    FF2.7
....................          lcd_gotoxy(1,4); 
5BA6:  MOVLW  01
5BA8:  MOVLB  1
5BAA:  MOVWF  x35
5BAC:  MOVLW  04
5BAE:  MOVWF  x36
5BB0:  MOVLB  0
5BB2:  CALL   0206
5BB6:  BTFSC  16.7
5BB8:  BSF    FF2.7
....................          printf(lcd_putc,"Luz:OFF "); 
5BBA:  MOVLW  8C
5BBC:  MOVWF  FF6
5BBE:  MOVLW  0A
5BC0:  MOVWF  FF7
5BC2:  CLRF   16
5BC4:  BTFSC  FF2.7
5BC6:  BSF    16.7
5BC8:  BCF    FF2.7
5BCA:  CALL   02EC
5BCE:  BTFSC  16.7
5BD0:  BSF    FF2.7
....................       } 
....................        
....................       if(estadomv==1) 
5BD2:  BTFSS  31.1
5BD4:  BRA    5C14
....................       { 
....................          if(iniciodamper==1) 
5BD6:  BTFSS  32.7
5BD8:  BRA    5BDE
....................          { 
....................             Motor_on; 
5BDA:  BSF    F8B.0
5BDC:  BCF    F94.0
5BDE:  CLRF   16
5BE0:  BTFSC  FF2.7
5BE2:  BSF    16.7
5BE4:  BCF    FF2.7
....................          }          
....................          lcd_gotoxy(10,4); 
5BE6:  MOVLW  0A
5BE8:  MOVLB  1
5BEA:  MOVWF  x35
5BEC:  MOVLW  04
5BEE:  MOVWF  x36
5BF0:  MOVLB  0
5BF2:  CALL   0206
5BF6:  BTFSC  16.7
5BF8:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:ON "); 
5BFA:  MOVLW  96
5BFC:  MOVWF  FF6
5BFE:  MOVLW  0A
5C00:  MOVWF  FF7
5C02:  CLRF   16
5C04:  BTFSC  FF2.7
5C06:  BSF    16.7
5C08:  BCF    FF2.7
5C0A:  CALL   02EC
5C0E:  BTFSC  16.7
5C10:  BSF    FF2.7
....................       } 
....................       else 
5C12:  BRA    5C50
....................       { 
....................          if(iniciodamper==1) 
5C14:  BTFSS  32.7
5C16:  BRA    5C1C
....................          { 
....................             Motor_off;      
5C18:  BCF    F8B.0
5C1A:  BCF    F94.0
5C1C:  CLRF   16
5C1E:  BTFSC  FF2.7
5C20:  BSF    16.7
5C22:  BCF    FF2.7
....................          } 
....................          lcd_gotoxy(10,4); 
5C24:  MOVLW  0A
5C26:  MOVLB  1
5C28:  MOVWF  x35
5C2A:  MOVLW  04
5C2C:  MOVWF  x36
5C2E:  MOVLB  0
5C30:  CALL   0206
5C34:  BTFSC  16.7
5C36:  BSF    FF2.7
....................          printf(lcd_putc,"Motor:OFF ");  
5C38:  MOVLW  A0
5C3A:  MOVWF  FF6
5C3C:  MOVLW  0A
5C3E:  MOVWF  FF7
5C40:  CLRF   16
5C42:  BTFSC  FF2.7
5C44:  BSF    16.7
5C46:  BCF    FF2.7
5C48:  CALL   02EC
5C4C:  BTFSC  16.7
5C4E:  BSF    FF2.7
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
5C50:  BSF    F93.2
5C52:  BTFSS  F81.2
5C54:  BRA    5C78
....................       {  if(Flanco == 0)  
5C56:  BTFSC  31.4
5C58:  BRA    5C76
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
5C5A:  BSF    31.4
5C5C:  CLRF   16
5C5E:  BTFSC  FF2.7
5C60:  BSF    16.7
5C62:  BCF    FF2.7
5C64:  MOVLW  C8
5C66:  MOVLB  1
5C68:  MOVWF  x35
5C6A:  MOVLB  0
5C6C:  CALL   00B6
5C70:  BTFSC  16.7
5C72:  BSF    FF2.7
5C74:  BTG    31.0
....................          else 
5C76:  BRA    5C7A
....................             {Flanco = 0;} 
5C78:  BCF    31.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
5C7A:  BSF    F93.1
5C7C:  BTFSS  F81.1
5C7E:  BRA    5CA2
....................       {  if(Flanco2 == 0)  
5C80:  BTFSC  31.6
5C82:  BRA    5CA0
....................             {Flanco2 = 1;delay_ms(200);estadomv=!estadomv;}} 
5C84:  BSF    31.6
5C86:  CLRF   16
5C88:  BTFSC  FF2.7
5C8A:  BSF    16.7
5C8C:  BCF    FF2.7
5C8E:  MOVLW  C8
5C90:  MOVLB  1
5C92:  MOVWF  x35
5C94:  MOVLB  0
5C96:  CALL   00B6
5C9A:  BTFSC  16.7
5C9C:  BSF    FF2.7
5C9E:  BTG    31.1
....................          else 
5CA0:  BRA    5CA4
....................             {Flanco2 = 0;} 
5CA2:  BCF    31.6
....................     
....................       if(UP)// Si oprime Arriba 
5CA4:  BSF    F93.3
5CA6:  BTFSS  F81.3
5CA8:  BRA    5CF8
....................       {  if(Flanco1 == 0)  
5CAA:  BTFSC  31.5
5CAC:  BRA    5CF6
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
5CAE:  MOVLW  02
5CB0:  MOVLB  1
5CB2:  MOVWF  x00
5CB4:  CLRF   16
5CB6:  BTFSC  FF2.7
5CB8:  BSF    16.7
5CBA:  BCF    FF2.7
5CBC:  MOVLW  FA
5CBE:  MOVWF  x35
5CC0:  MOVLB  0
5CC2:  CALL   00B6
5CC6:  BTFSC  16.7
5CC8:  BSF    FF2.7
5CCA:  MOVLB  1
5CCC:  DECFSZ x00,F
5CCE:  BRA    5CB4
5CD0:  CLRF   16
5CD2:  BTFSC  FF2.7
5CD4:  BSF    16.7
5CD6:  BCF    FF2.7
5CD8:  MOVLW  0C
5CDA:  MOVWF  x34
5CDC:  MOVLB  0
5CDE:  CALL   0280
5CE2:  BTFSC  16.7
5CE4:  BSF    FF2.7
5CE6:  MOVLW  01
5CE8:  MOVWF  18
5CEA:  CLRF   33
5CEC:  MOVLW  02
5CEE:  MOVWF  1C
5CF0:  MOVWF  1E
5CF2:  MOVLW  0B
5CF4:  MOVWF  1B
....................          else 
5CF6:  BRA    5CFA
....................             {Flanco1 = 0;}    
5CF8:  BCF    31.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
5CFA:  BSF    F93.0
5CFC:  BTFSS  F81.0
5CFE:  BRA    5D42
....................       {  if(Flanco3 == 0)  
5D00:  BTFSC  31.7
5D02:  BRA    5D40
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
5D04:  MOVLW  02
5D06:  MOVLB  1
5D08:  MOVWF  x00
5D0A:  CLRF   16
5D0C:  BTFSC  FF2.7
5D0E:  BSF    16.7
5D10:  BCF    FF2.7
5D12:  MOVLW  FA
5D14:  MOVWF  x35
5D16:  MOVLB  0
5D18:  CALL   00B6
5D1C:  BTFSC  16.7
5D1E:  BSF    FF2.7
5D20:  MOVLB  1
5D22:  DECFSZ x00,F
5D24:  BRA    5D0A
5D26:  CLRF   16
5D28:  BTFSC  FF2.7
5D2A:  BSF    16.7
5D2C:  BCF    FF2.7
5D2E:  MOVLW  0C
5D30:  MOVWF  x34
5D32:  MOVLB  0
5D34:  CALL   0280
5D38:  BTFSC  16.7
5D3A:  BSF    FF2.7
5D3C:  MOVLW  28
5D3E:  MOVWF  18
....................          else 
5D40:  BRA    5D44
....................             {Flanco3 = 0;}     
5D42:  BCF    31.7
5D44:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
5D46:  MOVF   18,W
5D48:  SUBLW  1E
5D4A:  BTFSS  FD8.2
5D4C:  BRA    5FAE
5D4E:  CLRF   16
5D50:  BTFSC  FF2.7
5D52:  BSF    16.7
5D54:  BCF    FF2.7
....................       lcd_gotoxy(1,1); 
5D56:  MOVLW  01
5D58:  MOVWF  x35
5D5A:  MOVWF  x36
5D5C:  MOVLB  0
5D5E:  CALL   0206
5D62:  BTFSC  16.7
5D64:  BSF    FF2.7
....................       printf(lcd_putc,"     Apagando     "); 
5D66:  MOVLW  AC
5D68:  MOVWF  FF6
5D6A:  MOVLW  0A
5D6C:  MOVWF  FF7
5D6E:  CLRF   16
5D70:  BTFSC  FF2.7
5D72:  BSF    16.7
5D74:  BCF    FF2.7
5D76:  CALL   02EC
5D7A:  BTFSC  16.7
5D7C:  BSF    FF2.7
5D7E:  CLRF   16
5D80:  BTFSC  FF2.7
5D82:  BSF    16.7
5D84:  BCF    FF2.7
....................       lcd_gotoxy(1,2); 
5D86:  MOVLW  01
5D88:  MOVLB  1
5D8A:  MOVWF  x35
5D8C:  MOVLW  02
5D8E:  MOVWF  x36
5D90:  MOVLB  0
5D92:  CALL   0206
5D96:  BTFSC  16.7
5D98:  BSF    FF2.7
....................       printf(lcd_putc,"      Cabina      "); 
5D9A:  MOVLW  C0
5D9C:  MOVWF  FF6
5D9E:  MOVLW  0A
5DA0:  MOVWF  FF7
5DA2:  CLRF   16
5DA4:  BTFSC  FF2.7
5DA6:  BSF    16.7
5DA8:  BCF    FF2.7
5DAA:  CALL   02EC
5DAE:  BTFSC  16.7
5DB0:  BSF    FF2.7
5DB2:  CLRF   16
5DB4:  BTFSC  FF2.7
5DB6:  BSF    16.7
5DB8:  BCF    FF2.7
....................        
....................       lcd_gotoxy(1,3); 
5DBA:  MOVLW  01
5DBC:  MOVLB  1
5DBE:  MOVWF  x35
5DC0:  MOVLW  03
5DC2:  MOVWF  x36
5DC4:  MOVLB  0
5DC6:  CALL   0206
5DCA:  BTFSC  16.7
5DCC:  BSF    FF2.7
....................       printf(lcd_putc," Espere"); 
5DCE:  MOVLW  D4
5DD0:  MOVWF  FF6
5DD2:  MOVLW  0A
5DD4:  MOVWF  FF7
5DD6:  CLRF   16
5DD8:  BTFSC  FF2.7
5DDA:  BSF    16.7
5DDC:  BCF    FF2.7
5DDE:  CALL   02EC
5DE2:  BTFSC  16.7
5DE4:  BSF    FF2.7
....................        
....................       if(Lectura==1) 
5DE6:  BTFSS  32.4
5DE8:  BRA    5FAA
....................       {ajustar_damper(0); 
5DEA:  CLRF   xFC
5DEC:  CALL   1780
....................        
....................          if(n<8) 
5DF0:  MOVF   27,W
5DF2:  SUBLW  07
5DF4:  BNC   5E32
....................          { 
....................             lcd_gotoxy(9+n,3); 
5DF6:  MOVLW  09
5DF8:  ADDWF  27,W
5DFA:  MOVLB  1
5DFC:  MOVWF  x00
5DFE:  CLRF   16
5E00:  BTFSC  FF2.7
5E02:  BSF    16.7
5E04:  BCF    FF2.7
5E06:  MOVWF  x35
5E08:  MOVLW  03
5E0A:  MOVWF  x36
5E0C:  MOVLB  0
5E0E:  CALL   0206
5E12:  BTFSC  16.7
5E14:  BSF    FF2.7
5E16:  CLRF   16
5E18:  BTFSC  FF2.7
5E1A:  BSF    16.7
5E1C:  BCF    FF2.7
....................             printf(lcd_putc,"."); 
5E1E:  MOVLW  2E
5E20:  MOVLB  1
5E22:  MOVWF  x34
5E24:  MOVLB  0
5E26:  CALL   0280
5E2A:  BTFSC  16.7
5E2C:  BSF    FF2.7
....................             n++; 
5E2E:  INCF   27,F
....................          } 
....................          else 
5E30:  BRA    5E68
....................          { 
....................             n=0;lcd_gotoxy(1,3); 
5E32:  CLRF   27
5E34:  CLRF   16
5E36:  BTFSC  FF2.7
5E38:  BSF    16.7
5E3A:  BCF    FF2.7
5E3C:  MOVLW  01
5E3E:  MOVLB  1
5E40:  MOVWF  x35
5E42:  MOVLW  03
5E44:  MOVWF  x36
5E46:  MOVLB  0
5E48:  CALL   0206
5E4C:  BTFSC  16.7
5E4E:  BSF    FF2.7
....................             printf(lcd_putc,"                    "); 
5E50:  MOVLW  DC
5E52:  MOVWF  FF6
5E54:  MOVLW  0A
5E56:  MOVWF  FF7
5E58:  CLRF   16
5E5A:  BTFSC  FF2.7
5E5C:  BSF    16.7
5E5E:  BCF    FF2.7
5E60:  CALL   02EC
5E64:  BTFSC  16.7
5E66:  BSF    FF2.7
....................          } 
....................        
....................       if(sensores(2)<512) 
5E68:  MOVLW  02
5E6A:  MOVLB  1
5E6C:  MOVWF  x04
5E6E:  MOVLB  0
5E70:  CALL   171C
5E74:  MOVFF  00,100
5E78:  MOVFF  01,101
5E7C:  MOVFF  02,102
5E80:  MOVFF  03,103
5E84:  MOVFF  03,11D
5E88:  MOVFF  02,11C
5E8C:  MOVFF  01,11B
5E90:  MOVFF  00,11A
5E94:  MOVLB  1
5E96:  CLRF   x21
5E98:  CLRF   x20
5E9A:  CLRF   x1F
5E9C:  MOVLW  88
5E9E:  MOVWF  x1E
5EA0:  MOVLB  0
5EA2:  CALL   166A
5EA6:  BNC   5EAC
....................       { 
....................          Motor_off; 
5EA8:  BCF    F8B.0
5EAA:  BCF    F94.0
....................       } 
....................        
....................       if(sensores(2)<6) 
5EAC:  MOVLW  02
5EAE:  MOVLB  1
5EB0:  MOVWF  x04
5EB2:  MOVLB  0
5EB4:  CALL   171C
5EB8:  MOVFF  00,100
5EBC:  MOVFF  01,101
5EC0:  MOVFF  02,102
5EC4:  MOVFF  03,103
5EC8:  MOVFF  03,11D
5ECC:  MOVFF  02,11C
5ED0:  MOVFF  01,11B
5ED4:  MOVFF  00,11A
5ED8:  MOVLB  1
5EDA:  CLRF   x21
5EDC:  CLRF   x20
5EDE:  MOVLW  40
5EE0:  MOVWF  x1F
5EE2:  MOVLW  81
5EE4:  MOVWF  x1E
5EE6:  MOVLB  0
5EE8:  CALL   166A
5EEC:  BNC   5FA8
5EEE:  CLRF   16
5EF0:  BTFSC  FF2.7
5EF2:  BSF    16.7
5EF4:  BCF    FF2.7
....................       { 
....................          printf(lcd_putc,"\f"); 
5EF6:  MOVLW  0C
5EF8:  MOVLB  1
5EFA:  MOVWF  x34
5EFC:  MOVLB  0
5EFE:  CALL   0280
5F02:  BTFSC  16.7
5F04:  BSF    FF2.7
5F06:  CLRF   16
5F08:  BTFSC  FF2.7
5F0A:  BSF    16.7
5F0C:  BCF    FF2.7
....................          lcd_gotoxy(1,2); 
5F0E:  MOVLW  01
5F10:  MOVLB  1
5F12:  MOVWF  x35
5F14:  MOVLW  02
5F16:  MOVWF  x36
5F18:  MOVLB  0
5F1A:  CALL   0206
5F1E:  BTFSC  16.7
5F20:  BSF    FF2.7
....................          printf(lcd_putc,"     Proceso      "); 
5F22:  MOVLW  F2
5F24:  MOVWF  FF6
5F26:  MOVLW  0A
5F28:  MOVWF  FF7
5F2A:  CLRF   16
5F2C:  BTFSC  FF2.7
5F2E:  BSF    16.7
5F30:  BCF    FF2.7
5F32:  CALL   02EC
5F36:  BTFSC  16.7
5F38:  BSF    FF2.7
5F3A:  CLRF   16
5F3C:  BTFSC  FF2.7
5F3E:  BSF    16.7
5F40:  BCF    FF2.7
....................          lcd_gotoxy(1,3); 
5F42:  MOVLW  01
5F44:  MOVLB  1
5F46:  MOVWF  x35
5F48:  MOVLW  03
5F4A:  MOVWF  x36
5F4C:  MOVLB  0
5F4E:  CALL   0206
5F52:  BTFSC  16.7
5F54:  BSF    FF2.7
....................          printf(lcd_putc,"    Finalizado    "); 
5F56:  MOVLW  06
5F58:  MOVWF  FF6
5F5A:  MOVLW  0B
5F5C:  MOVWF  FF7
5F5E:  CLRF   16
5F60:  BTFSC  FF2.7
5F62:  BSF    16.7
5F64:  BCF    FF2.7
5F66:  CALL   02EC
5F6A:  BTFSC  16.7
5F6C:  BSF    FF2.7
....................          delay_ms(2000); 
5F6E:  MOVLW  08
5F70:  MOVLB  1
5F72:  MOVWF  x00
5F74:  CLRF   16
5F76:  BTFSC  FF2.7
5F78:  BSF    16.7
5F7A:  BCF    FF2.7
5F7C:  MOVLW  FA
5F7E:  MOVWF  x35
5F80:  MOVLB  0
5F82:  CALL   00B6
5F86:  BTFSC  16.7
5F88:  BSF    FF2.7
5F8A:  MOVLB  1
5F8C:  DECFSZ x00,F
5F8E:  BRA    5F74
5F90:  CLRF   16
5F92:  BTFSC  FF2.7
5F94:  BSF    16.7
5F96:  BCF    FF2.7
....................          printf(lcd_putc,"\f"); 
5F98:  MOVLW  0C
5F9A:  MOVWF  x34
5F9C:  MOVLB  0
5F9E:  CALL   0280
5FA2:  BTFSC  16.7
5FA4:  BSF    FF2.7
....................          reset_cpu(); 
5FA6:  RESET
....................       } 
....................       Lectura=0; 
5FA8:  BCF    32.4
....................       }   
....................    } 
5FAA:  MOVLB  1
5FAC:  BRA    5D46
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
5FAE:  MOVF   18,W
5FB0:  SUBLW  28
5FB2:  BTFSS  FD8.2
5FB4:  BRA    6118
5FB6:  CLRF   16
5FB8:  BTFSC  FF2.7
5FBA:  BSF    16.7
5FBC:  BCF    FF2.7
....................    lcd_gotoxy(1,1); 
5FBE:  MOVLW  01
5FC0:  MOVWF  x35
5FC2:  MOVWF  x36
5FC4:  MOVLB  0
5FC6:  CALL   0206
5FCA:  BTFSC  16.7
5FCC:  BSF    FF2.7
....................    printf(lcd_putc,"   Desea apagar     "); 
5FCE:  MOVLW  1A
5FD0:  MOVWF  FF6
5FD2:  MOVLW  0B
5FD4:  MOVWF  FF7
5FD6:  CLRF   16
5FD8:  BTFSC  FF2.7
5FDA:  BSF    16.7
5FDC:  BCF    FF2.7
5FDE:  CALL   02EC
5FE2:  BTFSC  16.7
5FE4:  BSF    FF2.7
5FE6:  CLRF   16
5FE8:  BTFSC  FF2.7
5FEA:  BSF    16.7
5FEC:  BCF    FF2.7
....................    lcd_gotoxy(1,2); 
5FEE:  MOVLW  01
5FF0:  MOVLB  1
5FF2:  MOVWF  x35
5FF4:  MOVLW  02
5FF6:  MOVWF  x36
5FF8:  MOVLB  0
5FFA:  CALL   0206
5FFE:  BTFSC  16.7
6000:  BSF    FF2.7
....................    printf(lcd_putc,"     la cabina      "); 
6002:  MOVLW  30
6004:  MOVWF  FF6
6006:  MOVLW  0B
6008:  MOVWF  FF7
600A:  CLRF   16
600C:  BTFSC  FF2.7
600E:  BSF    16.7
6010:  BCF    FF2.7
6012:  CALL   02EC
6016:  BTFSC  16.7
6018:  BSF    FF2.7
601A:  CLRF   16
601C:  BTFSC  FF2.7
601E:  BSF    16.7
6020:  BCF    FF2.7
....................    lcd_gotoxy(1,3); 
6022:  MOVLW  01
6024:  MOVLB  1
6026:  MOVWF  x35
6028:  MOVLW  03
602A:  MOVWF  x36
602C:  MOVLB  0
602E:  CALL   0206
6032:  BTFSC  16.7
6034:  BSF    FF2.7
....................    printf(lcd_putc,"   > Aceptar        "); 
6036:  MOVLW  46
6038:  MOVWF  FF6
603A:  MOVLW  0B
603C:  MOVWF  FF7
603E:  CLRF   16
6040:  BTFSC  FF2.7
6042:  BSF    16.7
6044:  BCF    FF2.7
6046:  CALL   02EC
604A:  BTFSC  16.7
604C:  BSF    FF2.7
604E:  CLRF   16
6050:  BTFSC  FF2.7
6052:  BSF    16.7
6054:  BCF    FF2.7
....................    lcd_gotoxy(1,4); 
6056:  MOVLW  01
6058:  MOVLB  1
605A:  MOVWF  x35
605C:  MOVLW  04
605E:  MOVWF  x36
6060:  MOVLB  0
6062:  CALL   0206
6066:  BTFSC  16.7
6068:  BSF    FF2.7
....................    printf(lcd_putc,"   < Cancelar       "); 
606A:  MOVLW  5C
606C:  MOVWF  FF6
606E:  MOVLW  0B
6070:  MOVWF  FF7
6072:  CLRF   16
6074:  BTFSC  FF2.7
6076:  BSF    16.7
6078:  BCF    FF2.7
607A:  CALL   02EC
607E:  BTFSC  16.7
6080:  BSF    FF2.7
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
6082:  BSF    F93.0
6084:  BTFSS  F81.0
6086:  BRA    60C4
....................       {  if(Flanco1 == 0)  
6088:  BTFSC  31.5
608A:  BRA    60C2
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
608C:  BSF    31.5
608E:  MOVLW  1E
6090:  MOVWF  18
6092:  CLRF   16
6094:  BTFSC  FF2.7
6096:  BSF    16.7
6098:  BCF    FF2.7
609A:  MOVFF  21,132
609E:  CALL   01F2
60A2:  BTFSC  16.7
60A4:  BSF    FF2.7
60A6:  BCF    F8A.6
60A8:  BCF    F93.6
60AA:  CLRF   16
60AC:  BTFSC  FF2.7
60AE:  BSF    16.7
60B0:  BCF    FF2.7
60B2:  MOVLW  0C
60B4:  MOVLB  1
60B6:  MOVWF  x34
60B8:  MOVLB  0
60BA:  CALL   0280
60BE:  BTFSC  16.7
60C0:  BSF    FF2.7
....................             }} 
....................          else 
60C2:  BRA    60C6
....................             {Flanco1 = 0;}    
60C4:  BCF    31.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
60C6:  BSF    F93.1
60C8:  BTFSS  F81.1
60CA:  BRA    6114
....................       {  if(Flanco3 == 0)  
60CC:  BTFSC  31.7
60CE:  BRA    6112
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
60D0:  BSF    31.7
60D2:  MOVLW  14
60D4:  MOVWF  18
60D6:  CLRF   33
60D8:  MOVLW  02
60DA:  MOVWF  1C
60DC:  MOVWF  1E
60DE:  MOVLW  0B
60E0:  MOVWF  1B
60E2:  CLRF   16
60E4:  BTFSC  FF2.7
60E6:  BSF    16.7
60E8:  BCF    FF2.7
60EA:  MOVLW  1E
60EC:  MOVLB  1
60EE:  MOVWF  x35
60F0:  MOVLB  0
60F2:  CALL   00B6
60F6:  BTFSC  16.7
60F8:  BSF    FF2.7
60FA:  CLRF   16
60FC:  BTFSC  FF2.7
60FE:  BSF    16.7
6100:  BCF    FF2.7
6102:  MOVLW  0C
6104:  MOVLB  1
6106:  MOVWF  x34
6108:  MOVLB  0
610A:  CALL   0280
610E:  BTFSC  16.7
6110:  BSF    FF2.7
....................          else 
6112:  BRA    6116
....................             {Flanco3 = 0;}     
6114:  BCF    31.7
6116:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(ModoSleep==1) 
6118:  BTFSS  32.2
611A:  BRA    6134
611C:  CLRF   16
611E:  BTFSC  FF2.7
6120:  BSF    16.7
6122:  BCF    FF2.7
....................       {intensidadpantalla(0);sleep();} 
6124:  CLRF   x32
6126:  MOVLB  0
6128:  CALL   01F2
612C:  BTFSC  16.7
612E:  BSF    FF2.7
6130:  SLEEP 
6132:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
6134:  MOVF   18,F
6136:  BNZ   613E
6138:  MOVF   18,W
613A:  SUBLW  1E
613C:  BZ    621A
....................    { 
....................       if(Lectura==1) 
613E:  BTFSS  32.4
6140:  BRA    621A
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
6142:  MOVFF  2B,FC
6146:  MOVLB  0
6148:  GOTO   1CAA
614C:  MOVFF  03,8B
6150:  MOVFF  02,8A
6154:  MOVFF  01,89
6158:  MOVFF  00,88
....................         if(iniciodamper==1) 
615C:  BTFSS  32.7
615E:  BRA    61F6
....................         { 
....................             controlar_flujo(); 
6160:  GOTO   2376
....................           
....................             if(Flujo<0.5 && iniciodamper==1) 
6164:  MOVFF  8B,11D
6168:  MOVFF  8A,11C
616C:  MOVFF  89,11B
6170:  MOVFF  88,11A
6174:  MOVLB  1
6176:  CLRF   x21
6178:  CLRF   x20
617A:  CLRF   x1F
617C:  MOVLW  7E
617E:  MOVWF  x1E
6180:  MOVLB  0
6182:  CALL   166A
6186:  BNC   61D4
6188:  BTFSS  32.7
618A:  BRA    61D4
....................             { 
....................                flag_latencia=1; 
618C:  BSF    32.0
....................                 
....................                if(Latencia==1) 
618E:  BTFSS  32.1
6190:  BRA    61D2
....................                { 
....................                   if(estadoalarma==1) 
6192:  BTFSS  31.2
6194:  BRA    619C
....................                   { 
....................                      Alarma_on; 
6196:  BSF    F8A.6
6198:  BCF    F93.6
....................                   } 
....................                   else 
619A:  BRA    61A0
....................                   { 
....................                      Alarma_off; 
619C:  BCF    F8A.6
619E:  BCF    F93.6
....................                   } 
....................                   estadopantalla=!estadopantalla; 
61A0:  BTG    31.3
....................                   if(estadopantalla==1) 
61A2:  BTFSS  31.3
61A4:  BRA    61BC
61A6:  CLRF   16
61A8:  BTFSC  FF2.7
61AA:  BSF    16.7
61AC:  BCF    FF2.7
....................                   {intensidadpantalla(contraste);} 
61AE:  MOVFF  21,132
61B2:  CALL   01F2
61B6:  BTFSC  16.7
61B8:  BSF    FF2.7
....................                   else 
61BA:  BRA    61D2
61BC:  CLRF   16
61BE:  BTFSC  FF2.7
61C0:  BSF    16.7
61C2:  BCF    FF2.7
....................                   {intensidadpantalla(0);} 
61C4:  MOVLB  1
61C6:  CLRF   x32
61C8:  MOVLB  0
61CA:  CALL   01F2
61CE:  BTFSC  16.7
61D0:  BSF    FF2.7
....................                } 
....................             } 
....................             else 
61D2:  BRA    61F4
61D4:  CLRF   16
61D6:  BTFSC  FF2.7
61D8:  BSF    16.7
61DA:  BCF    FF2.7
....................             { 
....................                intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
61DC:  MOVFF  21,132
61E0:  CALL   01F2
61E4:  BTFSC  16.7
61E6:  BSF    FF2.7
61E8:  BCF    F8A.6
61EA:  BCF    F93.6
61EC:  BCF    32.1
61EE:  CLRF   4F
61F0:  CLRF   4E
61F2:  BCF    32.0
....................             } 
....................         } 
....................         else 
61F4:  BRA    6216
61F6:  CLRF   16
61F8:  BTFSC  FF2.7
61FA:  BSF    16.7
61FC:  BCF    FF2.7
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
61FE:  MOVFF  21,132
6202:  CALL   01F2
6206:  BTFSC  16.7
6208:  BSF    FF2.7
620A:  BCF    F8A.6
620C:  BCF    F93.6
620E:  BCF    32.1
6210:  CLRF   4F
6212:  CLRF   4E
6214:  BCF    32.0
....................         } 
....................          Lectura=0; 
6216:  BCF    32.4
6218:  MOVLB  1
....................       }      
....................  
....................    }      
....................    } 
621A:  GOTO   2AF4
.................... } 
621E:  SLEEP 

Configuration Fuses:
   Word  1: CE30   IESO FCMEN HSPLL PLL1 CPUDIV3 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
