CCS PCH C Compiler, Version 4.104, 5967               10-nov.-15 07:44

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2015\Cabina Extractora con Sensor Aire-VariadorVelocidad\Paleosedes\Firmware\CabinaExtractoraVariadorVelocidad.lst

               ROM used: 19664 bytes (60%)
                         Largest free fragment is 13100
               RAM used: 262 (13%) at main() level
                         306 (15%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2156
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,PUT// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
074E:  MOVLW  01
0750:  MOVWF  FEA
0752:  MOVLW  1B
0754:  MOVWF  FE9
0756:  MOVF   FEF,W
0758:  BZ    0776
075A:  MOVLW  0F
075C:  MOVWF  01
075E:  CLRF   00
0760:  DECFSZ 00,F
0762:  BRA    0760
0764:  DECFSZ 01,F
0766:  BRA    075E
0768:  MOVLW  8F
076A:  MOVWF  00
076C:  DECFSZ 00,F
076E:  BRA    076C
0770:  NOP   
0772:  DECFSZ FEF,F
0774:  BRA    075A
0776:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0B84:  MOVLB  1
0B86:  SWAPF  x1C,W
0B88:  ANDLW  F0
0B8A:  MOVWF  00
0B8C:  MOVLW  0F
0B8E:  ANDWF  F83,W
0B90:  IORWF  00,W
0B92:  MOVWF  F83
....................       delay_cycles(25); 
0B94:  MOVLW  08
0B96:  MOVWF  00
0B98:  DECFSZ 00,F
0B9A:  BRA    0B98
....................       lcd.enable = 1; 
0B9C:  BSF    F83.2
....................       delay_us(55); 
0B9E:  MOVLW  DB
0BA0:  MOVWF  00
0BA2:  DECFSZ 00,F
0BA4:  BRA    0BA2
0BA6:  BRA    0BA8
....................       lcd.enable = 0; 
0BA8:  BCF    F83.2
.................... } 
0BAA:  MOVLB  0
0BAC:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0BAE:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0BB0:  MOVLW  01
0BB2:  MOVLB  1
0BB4:  MOVWF  x1B
0BB6:  MOVLB  0
0BB8:  RCALL  074E
....................       lcd.rs = address; 
0BBA:  MOVLB  1
0BBC:  BTFSS  x19.0
0BBE:  BCF    F83.1
0BC0:  BTFSC  x19.0
0BC2:  BSF    F83.1
....................       delay_cycles(25); 
0BC4:  MOVLW  08
0BC6:  MOVWF  00
0BC8:  DECFSZ 00,F
0BCA:  BRA    0BC8
....................       lcd.rw = 0; 
0BCC:  BCF    F83.0
....................       delay_cycles(25); 
0BCE:  MOVLW  08
0BD0:  MOVWF  00
0BD2:  DECFSZ 00,F
0BD4:  BRA    0BD2
....................       lcd.enable = 0; 
0BD6:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0BD8:  SWAPF  x1A,W
0BDA:  MOVWF  x1B
0BDC:  MOVLW  0F
0BDE:  ANDWF  x1B,F
0BE0:  MOVFF  11B,11C
0BE4:  MOVLB  0
0BE6:  RCALL  0B84
....................       lcd_send_nibble(n & 0xf); 
0BE8:  MOVLB  1
0BEA:  MOVF   x1A,W
0BEC:  ANDLW  0F
0BEE:  MOVWF  x1B
0BF0:  MOVWF  x1C
0BF2:  MOVLB  0
0BF4:  RCALL  0B84
.................... } 
0BF6:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0BF8:  MOVLW  00
0BFA:  MOVWF  F95
....................     lcd.rs = 0; 
0BFC:  BCF    F83.1
....................     lcd.rw = 0; 
0BFE:  BCF    F83.0
....................     lcd.enable = 0; 
0C00:  BCF    F83.2
....................     delay_ms(15); 
0C02:  MOVLW  0F
0C04:  MOVLB  1
0C06:  MOVWF  x1B
0C08:  MOVLB  0
0C0A:  RCALL  074E
....................     for(i=1;i<=3;++i) { 
0C0C:  MOVLW  01
0C0E:  MOVWF  xFE
0C10:  MOVF   xFE,W
0C12:  SUBLW  03
0C14:  BNC   0C2E
....................        lcd_send_nibble(3); 
0C16:  MOVLW  03
0C18:  MOVLB  1
0C1A:  MOVWF  x1C
0C1C:  MOVLB  0
0C1E:  RCALL  0B84
....................        delay_ms(5); 
0C20:  MOVLW  05
0C22:  MOVLB  1
0C24:  MOVWF  x1B
0C26:  MOVLB  0
0C28:  RCALL  074E
....................     } 
0C2A:  INCF   xFE,F
0C2C:  BRA    0C10
....................     lcd_send_nibble(2); 
0C2E:  MOVLW  02
0C30:  MOVLB  1
0C32:  MOVWF  x1C
0C34:  MOVLB  0
0C36:  RCALL  0B84
....................     for(i=0;i<=3;++i) 
0C38:  CLRF   xFE
0C3A:  MOVF   xFE,W
0C3C:  SUBLW  03
0C3E:  BNC   0C62
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0C40:  CLRF   03
0C42:  MOVF   xFE,W
0C44:  MOVFF  FF2,FF
0C48:  BCF    FF2.7
0C4A:  CALL   0096
0C4E:  BTFSC  xFF.7
0C50:  BSF    FF2.7
0C52:  MOVWF  xFF
0C54:  MOVLB  1
0C56:  CLRF   x19
0C58:  MOVWF  x1A
0C5A:  MOVLB  0
0C5C:  RCALL  0BAE
0C5E:  INCF   xFE,F
0C60:  BRA    0C3A
.................... } 
0C62:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0C64:  MOVLW  01
0C66:  MOVLB  1
0C68:  SUBWF  x17,W
0C6A:  ADDLW  FC
0C6C:  BC    0C98
0C6E:  ADDLW  04
0C70:  MOVLB  0
0C72:  GOTO   0CAA
....................      case 1 : address=0x80;break; 
0C76:  MOVLW  80
0C78:  MOVLB  1
0C7A:  MOVWF  x18
0C7C:  BRA    0C98
....................      case 2 : address=0xc0;break; 
0C7E:  MOVLW  C0
0C80:  MOVLB  1
0C82:  MOVWF  x18
0C84:  BRA    0C98
....................      case 3 : address=0x94;break; 
0C86:  MOVLW  94
0C88:  MOVLB  1
0C8A:  MOVWF  x18
0C8C:  BRA    0C98
....................      case 4 : address=0xd4;break; 
0C8E:  MOVLW  D4
0C90:  MOVLB  1
0C92:  MOVWF  x18
0C94:  BRA    0C98
0C96:  MOVLB  1
....................    } 
....................    address+=x-1; 
0C98:  MOVLW  01
0C9A:  SUBWF  x16,W
0C9C:  ADDWF  x18,F
....................    lcd_send_byte(0,address); 
0C9E:  CLRF   x19
0CA0:  MOVFF  118,11A
0CA4:  MOVLB  0
0CA6:  RCALL  0BAE
.................... } 
0CA8:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0CD6:  MOVLB  1
0CD8:  MOVF   x15,W
0CDA:  SUBLW  F1
0CDC:  BNZ   0CE2
....................     c=238; 
0CDE:  MOVLW  EE
0CE0:  MOVWF  x15
....................    switch (c) { 
0CE2:  MOVF   x15,W
0CE4:  XORLW  0C
0CE6:  MOVLB  0
0CE8:  BZ    0CF4
0CEA:  XORLW  06
0CEC:  BZ    0D10
0CEE:  XORLW  02
0CF0:  BZ    0D22
0CF2:  BRA    0D30
....................      case '\f'   : lcd_send_byte(0,1); 
0CF4:  MOVLB  1
0CF6:  CLRF   x19
0CF8:  MOVLW  01
0CFA:  MOVWF  x1A
0CFC:  MOVLB  0
0CFE:  RCALL  0BAE
....................                    lcdline=1; 
0D00:  MOVLW  01
0D02:  MOVWF  16
....................                    delay_ms(2); 
0D04:  MOVLW  02
0D06:  MOVLB  1
0D08:  MOVWF  x1B
0D0A:  MOVLB  0
0D0C:  RCALL  074E
....................                                            break; 
0D0E:  BRA    0D40
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0D10:  INCF   16,F
0D12:  MOVLW  01
0D14:  MOVLB  1
0D16:  MOVWF  x16
0D18:  MOVFF  16,117
0D1C:  MOVLB  0
0D1E:  RCALL  0C64
0D20:  BRA    0D40
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0D22:  MOVLB  1
0D24:  CLRF   x19
0D26:  MOVLW  10
0D28:  MOVWF  x1A
0D2A:  MOVLB  0
0D2C:  RCALL  0BAE
0D2E:  BRA    0D40
....................      default     : lcd_send_byte(1,c);     break; 
0D30:  MOVLW  01
0D32:  MOVLB  1
0D34:  MOVWF  x19
0D36:  MOVFF  115,11A
0D3A:  MOVLB  0
0D3C:  RCALL  0BAE
0D3E:  BRA    0D40
....................    } 
.................... } 
0D40:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
149E:  MOVFF  108,10C
14A2:  MOVFF  107,10B
14A6:  MOVFF  106,10A
14AA:  MOVFF  105,109
....................  
....................    if (y != 1.0) 
14AE:  MOVFF  10C,11D
14B2:  MOVFF  10B,11C
14B6:  MOVFF  10A,11B
14BA:  MOVFF  109,11A
14BE:  MOVLB  1
14C0:  CLRF   x21
14C2:  CLRF   x20
14C4:  CLRF   x1F
14C6:  MOVLW  7F
14C8:  MOVWF  x1E
14CA:  MOVLB  0
14CC:  RCALL  1308
14CE:  BTFSC  FD8.2
14D0:  BRA    1954
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
14D2:  MOVLW  01
14D4:  MOVLB  1
14D6:  MOVWF  x1B
14D8:  MOVLW  09
14DA:  MOVWF  FE9
14DC:  MOVFF  11B,FEA
14E0:  MOVLW  7E
14E2:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
14E4:  BSF    FD8.1
14E6:  MOVFF  10C,121
14EA:  MOVFF  10B,120
14EE:  MOVFF  10A,11F
14F2:  MOVFF  109,11E
14F6:  CLRF   x25
14F8:  CLRF   x24
14FA:  CLRF   x23
14FC:  MOVLW  7F
14FE:  MOVWF  x22
1500:  MOVLB  0
1502:  CALL   090C
1506:  MOVFF  00,11A
150A:  MOVFF  01,11B
150E:  MOVFF  02,11C
1512:  MOVFF  03,11D
1516:  BCF    FD8.1
1518:  MOVFF  10C,121
151C:  MOVFF  10B,120
1520:  MOVFF  10A,11F
1524:  MOVFF  109,11E
1528:  MOVLB  1
152A:  CLRF   x25
152C:  CLRF   x24
152E:  CLRF   x23
1530:  MOVLW  7F
1532:  MOVWF  x22
1534:  MOVLB  0
1536:  CALL   090C
153A:  MOVFF  11D,121
153E:  MOVFF  11C,120
1542:  MOVFF  11B,11F
1546:  MOVFF  11A,11E
154A:  MOVFF  03,125
154E:  MOVFF  02,124
1552:  MOVFF  01,123
1556:  MOVFF  00,122
155A:  CALL   07AE
155E:  MOVFF  03,10C
1562:  MOVFF  02,10B
1566:  MOVFF  01,10A
156A:  MOVFF  00,109
....................  
....................       y2=y*y; 
156E:  MOVFF  10C,11D
1572:  MOVFF  10B,11C
1576:  MOVFF  10A,11B
157A:  MOVFF  109,11A
157E:  MOVFF  10C,121
1582:  MOVFF  10B,120
1586:  MOVFF  10A,11F
158A:  MOVFF  109,11E
158E:  RCALL  0F4C
1590:  MOVFF  03,118
1594:  MOVFF  02,117
1598:  MOVFF  01,116
159C:  MOVFF  00,115
....................  
....................       res = pl[0]*y2 + pl[1]; 
15A0:  MOVLW  BC
15A2:  MOVLB  1
15A4:  MOVWF  x1D
15A6:  MOVLW  24
15A8:  MOVWF  x1C
15AA:  MOVLW  67
15AC:  MOVWF  x1B
15AE:  MOVLW  7D
15B0:  MOVWF  x1A
15B2:  MOVFF  118,121
15B6:  MOVFF  117,120
15BA:  MOVFF  116,11F
15BE:  MOVFF  115,11E
15C2:  MOVLB  0
15C4:  RCALL  0F4C
15C6:  MOVFF  00,11A
15CA:  MOVFF  01,11B
15CE:  MOVFF  02,11C
15D2:  MOVFF  03,11D
15D6:  BCF    FD8.1
15D8:  MOVFF  03,121
15DC:  MOVFF  02,120
15E0:  MOVFF  01,11F
15E4:  MOVFF  00,11E
15E8:  MOVLW  E3
15EA:  MOVLB  1
15EC:  MOVWF  x25
15EE:  MOVLW  E4
15F0:  MOVWF  x24
15F2:  MOVLW  90
15F4:  MOVWF  x23
15F6:  MOVLW  82
15F8:  MOVWF  x22
15FA:  MOVLB  0
15FC:  CALL   090C
1600:  MOVFF  03,110
1604:  MOVFF  02,10F
1608:  MOVFF  01,10E
160C:  MOVFF  00,10D
....................       res = res*y2 + pl[2]; 
1610:  MOVFF  110,11D
1614:  MOVFF  10F,11C
1618:  MOVFF  10E,11B
161C:  MOVFF  10D,11A
1620:  MOVFF  118,121
1624:  MOVFF  117,120
1628:  MOVFF  116,11F
162C:  MOVFF  115,11E
1630:  RCALL  0F4C
1632:  MOVFF  00,11A
1636:  MOVFF  01,11B
163A:  MOVFF  02,11C
163E:  MOVFF  03,11D
1642:  BCF    FD8.1
1644:  MOVFF  03,121
1648:  MOVFF  02,120
164C:  MOVFF  01,11F
1650:  MOVFF  00,11E
1654:  MOVLW  1C
1656:  MOVLB  1
1658:  MOVWF  x25
165A:  MOVLW  87
165C:  MOVWF  x24
165E:  MOVLW  57
1660:  MOVWF  x23
1662:  MOVLW  83
1664:  MOVWF  x22
1666:  MOVLB  0
1668:  CALL   090C
166C:  MOVFF  03,110
1670:  MOVFF  02,10F
1674:  MOVFF  01,10E
1678:  MOVFF  00,10D
....................       res = res*y2 + pl[3]; 
167C:  MOVFF  110,11D
1680:  MOVFF  10F,11C
1684:  MOVFF  10E,11B
1688:  MOVFF  10D,11A
168C:  MOVFF  118,121
1690:  MOVFF  117,120
1694:  MOVFF  116,11F
1698:  MOVFF  115,11E
169C:  RCALL  0F4C
169E:  MOVFF  00,11A
16A2:  MOVFF  01,11B
16A6:  MOVFF  02,11C
16AA:  MOVFF  03,11D
16AE:  BCF    FD8.1
16B0:  MOVFF  03,121
16B4:  MOVFF  02,120
16B8:  MOVFF  01,11F
16BC:  MOVFF  00,11E
16C0:  MOVLW  AB
16C2:  MOVLB  1
16C4:  MOVWF  x25
16C6:  MOVLW  E1
16C8:  MOVWF  x24
16CA:  MOVLW  9E
16CC:  MOVWF  x23
16CE:  MOVLW  83
16D0:  MOVWF  x22
16D2:  MOVLB  0
16D4:  CALL   090C
16D8:  MOVFF  03,110
16DC:  MOVFF  02,10F
16E0:  MOVFF  01,10E
16E4:  MOVFF  00,10D
....................  
....................       r = ql[0]*y2 + ql[1]; 
16E8:  MOVLB  1
16EA:  CLRF   x1D
16EC:  CLRF   x1C
16EE:  CLRF   x1B
16F0:  MOVLW  7F
16F2:  MOVWF  x1A
16F4:  MOVFF  118,121
16F8:  MOVFF  117,120
16FC:  MOVFF  116,11F
1700:  MOVFF  115,11E
1704:  MOVLB  0
1706:  RCALL  0F4C
1708:  MOVFF  00,11A
170C:  MOVFF  01,11B
1710:  MOVFF  02,11C
1714:  MOVFF  03,11D
1718:  BCF    FD8.1
171A:  MOVFF  03,121
171E:  MOVFF  02,120
1722:  MOVFF  01,11F
1726:  MOVFF  00,11E
172A:  MOVLW  B4
172C:  MOVLB  1
172E:  MOVWF  x25
1730:  MOVLW  2A
1732:  MOVWF  x24
1734:  MOVLW  82
1736:  MOVWF  x23
1738:  MOVWF  x22
173A:  MOVLB  0
173C:  CALL   090C
1740:  MOVFF  03,114
1744:  MOVFF  02,113
1748:  MOVFF  01,112
174C:  MOVFF  00,111
....................       r = r*y2 + ql[2]; 
1750:  MOVFF  114,11D
1754:  MOVFF  113,11C
1758:  MOVFF  112,11B
175C:  MOVFF  111,11A
1760:  MOVFF  118,121
1764:  MOVFF  117,120
1768:  MOVFF  116,11F
176C:  MOVFF  115,11E
1770:  CALL   0F4C
1774:  MOVFF  00,11A
1778:  MOVFF  01,11B
177C:  MOVFF  02,11C
1780:  MOVFF  03,11D
1784:  BCF    FD8.1
1786:  MOVFF  03,121
178A:  MOVFF  02,120
178E:  MOVFF  01,11F
1792:  MOVFF  00,11E
1796:  MOVLW  80
1798:  MOVLB  1
179A:  MOVWF  x25
179C:  MOVLW  3E
179E:  MOVWF  x24
17A0:  MOVLW  06
17A2:  MOVWF  x23
17A4:  MOVLW  83
17A6:  MOVWF  x22
17A8:  MOVLB  0
17AA:  CALL   090C
17AE:  MOVFF  03,114
17B2:  MOVFF  02,113
17B6:  MOVFF  01,112
17BA:  MOVFF  00,111
....................       r = r*y2 + ql[3]; 
17BE:  MOVFF  114,11D
17C2:  MOVFF  113,11C
17C6:  MOVFF  112,11B
17CA:  MOVFF  111,11A
17CE:  MOVFF  118,121
17D2:  MOVFF  117,120
17D6:  MOVFF  116,11F
17DA:  MOVFF  115,11E
17DE:  CALL   0F4C
17E2:  MOVFF  00,11A
17E6:  MOVFF  01,11B
17EA:  MOVFF  02,11C
17EE:  MOVFF  03,11D
17F2:  BCF    FD8.1
17F4:  MOVFF  03,121
17F8:  MOVFF  02,120
17FC:  MOVFF  01,11F
1800:  MOVFF  00,11E
1804:  MOVLW  AB
1806:  MOVLB  1
1808:  MOVWF  x25
180A:  MOVLW  E1
180C:  MOVWF  x24
180E:  MOVLW  9E
1810:  MOVWF  x23
1812:  MOVLW  82
1814:  MOVWF  x22
1816:  MOVLB  0
1818:  CALL   090C
181C:  MOVFF  03,114
1820:  MOVFF  02,113
1824:  MOVFF  01,112
1828:  MOVFF  00,111
....................  
....................       res = y*res/r; 
182C:  MOVFF  10C,11D
1830:  MOVFF  10B,11C
1834:  MOVFF  10A,11B
1838:  MOVFF  109,11A
183C:  MOVFF  110,121
1840:  MOVFF  10F,120
1844:  MOVFF  10E,11F
1848:  MOVFF  10D,11E
184C:  CALL   0F4C
1850:  MOVFF  00,11A
1854:  MOVFF  01,11B
1858:  MOVFF  02,11C
185C:  MOVFF  03,11D
1860:  MOVFF  03,121
1864:  MOVFF  02,120
1868:  MOVFF  01,11F
186C:  MOVFF  00,11E
1870:  MOVFF  114,125
1874:  MOVFF  113,124
1878:  MOVFF  112,123
187C:  MOVFF  111,122
1880:  CALL   07AE
1884:  MOVFF  03,110
1888:  MOVFF  02,10F
188C:  MOVFF  01,10E
1890:  MOVFF  00,10D
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1894:  MOVLW  01
1896:  MOVLB  1
1898:  MOVWF  x1B
189A:  MOVLW  05
189C:  MOVWF  FE9
189E:  MOVFF  11B,FEA
18A2:  MOVLW  7E
18A4:  SUBWF  FEF,W
18A6:  MOVWF  x19
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
18A8:  BTFSC  x19.7
18AA:  BRA    18AE
18AC:  BRA    18D6
....................          r = -(float32)-n; 
18AE:  MOVLW  00
18B0:  BSF    FD8.0
18B2:  SUBFWB x19,W
18B4:  CLRF   x1B
18B6:  MOVWF  x1A
18B8:  BTFSC  x1A.7
18BA:  DECF   x1B,F
18BC:  MOVLB  0
18BE:  RCALL  144E
18C0:  MOVFF  00,111
18C4:  MOVF   01,W
18C6:  XORLW  80
18C8:  MOVLB  1
18CA:  MOVWF  x12
18CC:  MOVFF  02,113
18D0:  MOVFF  03,114
....................       else 
18D4:  BRA    18F6
....................          r = (float32)n; 
18D6:  CLRF   x1B
18D8:  MOVFF  119,11A
18DC:  BTFSC  x1A.7
18DE:  DECF   x1B,F
18E0:  MOVLB  0
18E2:  RCALL  144E
18E4:  MOVFF  03,114
18E8:  MOVFF  02,113
18EC:  MOVFF  01,112
18F0:  MOVFF  00,111
18F4:  MOVLB  1
....................  
....................       res += r*LN2; 
18F6:  MOVFF  114,11D
18FA:  MOVFF  113,11C
18FE:  MOVFF  112,11B
1902:  MOVFF  111,11A
1906:  MOVLW  18
1908:  MOVWF  x21
190A:  MOVLW  72
190C:  MOVWF  x20
190E:  MOVLW  31
1910:  MOVWF  x1F
1912:  MOVLW  7E
1914:  MOVWF  x1E
1916:  MOVLB  0
1918:  CALL   0F4C
191C:  BCF    FD8.1
191E:  MOVFF  110,121
1922:  MOVFF  10F,120
1926:  MOVFF  10E,11F
192A:  MOVFF  10D,11E
192E:  MOVFF  03,125
1932:  MOVFF  02,124
1936:  MOVFF  01,123
193A:  MOVFF  00,122
193E:  CALL   090C
1942:  MOVFF  03,110
1946:  MOVFF  02,10F
194A:  MOVFF  01,10E
194E:  MOVFF  00,10D
....................    } 
....................  
....................    else 
1952:  BRA    1960
....................       res = 0.0; 
1954:  MOVLB  1
1956:  CLRF   x10
1958:  CLRF   x0F
195A:  CLRF   x0E
195C:  CLRF   x0D
195E:  MOVLB  0
....................  
....................    return(res); 
1960:  MOVFF  10D,00
1964:  MOVFF  10E,01
1968:  MOVFF  10F,02
196C:  MOVFF  110,03
.................... } 
1970:  GOTO   1B4C (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #priority TIMER1 
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... //#define   Damper_on         output_bit(PIN_B5,1) 
.................... //#define   Damper_off        output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(18367);  // 5 ms 
*
00B4:  MOVLW  47
00B6:  MOVWF  FCF
00B8:  MOVLW  BF
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4E,F
00BE:  BTFSC  FD8.2
00C0:  INCF   4F,F
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   4E,W
00C4:  SUBLW  C8
00C6:  BNZ   00DC
00C8:  MOVF   4F,F
00CA:  BNZ   00DC
....................    { 
....................       tiempos=0; 
00CC:  CLRF   4F
00CE:  CLRF   4E
....................       Lectura=1; 
00D0:  BSF    34.5
....................       if(estadomv==1 && flag_filtro==1) 
00D2:  BTFSS  33.1
00D4:  BRA    00DC
00D6:  BTFSS  34.2
00D8:  BRA    00DC
....................       { 
....................          segundos++; 
00DA:  INCF   30,F
....................       } 
....................    } 
....................    tiempos2++; 
00DC:  INCF   52,F
00DE:  BTFSC  FD8.2
00E0:  INCF   53,F
....................     
....................    if(tiempos2==20) 
00E2:  MOVF   52,W
00E4:  SUBLW  14
00E6:  BNZ   00F2
00E8:  MOVF   53,F
00EA:  BNZ   00F2
....................    {tiempos2=0;Lectura2=1;} 
00EC:  CLRF   53
00EE:  CLRF   52
00F0:  BSF    34.6
....................     
....................    if(flag_latencia==1) 
00F2:  BTFSS  34.0
00F4:  BRA    00FC
....................    { 
....................       t_latencia++;          
00F6:  INCF   50,F
00F8:  BTFSC  FD8.2
00FA:  INCF   51,F
....................    } 
.................... } 
....................  
.................... // Funcion para conversor analogo-digital 
00FC:  BCF    F9E.0
00FE:  GOTO   0054
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
12B0:  MOVLB  1
12B2:  RLCF   x04,W
12B4:  MOVWF  00
12B6:  RLCF   00,F
12B8:  MOVLW  FC
12BA:  ANDWF  00,F
12BC:  MOVFF  00,01
12C0:  MOVF   FC2,W
12C2:  ANDLW  C3
12C4:  IORWF  00,W
12C6:  MOVWF  FC2
12C8:  MOVLW  0A
12CA:  MOVWF  x1B
12CC:  MOVLB  0
12CE:  CALL   074E
12D2:  BSF    FC2.1
12D4:  BTFSC  FC2.1
12D6:  BRA    12D4
12D8:  MOVFF  FC4,10A
12DC:  MOVFF  FC3,109
12E0:  MOVLB  0
12E2:  CALL   0778
12E6:  MOVFF  03,108
12EA:  MOVFF  02,107
12EE:  MOVFF  01,106
12F2:  MOVFF  00,105
12F6:  MOVFF  105,00
12FA:  MOVFF  106,01
12FE:  MOVFF  107,02
1302:  MOVFF  108,03
.................... } 
1306:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
143E:  MOVF   xFE,F
1440:  BNZ   1448
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
1442:  BCF    F8B.1
1444:  BCF    F94.1
....................    } 
....................    else 
1446:  BRA    144C
....................    { 
....................       Pantalla_on; 
1448:  BSF    F8B.1
144A:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
144C:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1974:  MOVLB  1
1976:  CLRF   x04
1978:  MOVLB  0
197A:  RCALL  12B0
197C:  MOVFF  00,100
1980:  MOVFF  01,101
1984:  MOVFF  02,102
1988:  MOVFF  03,103
198C:  MOVFF  03,11D
1990:  MOVFF  02,11C
1994:  MOVFF  01,11B
1998:  MOVFF  00,11A
199C:  MOVLB  1
199E:  CLRF   x21
19A0:  CLRF   x20
19A2:  MOVLW  20
19A4:  MOVWF  x1F
19A6:  MOVLW  81
19A8:  MOVWF  x1E
19AA:  MOVLB  0
19AC:  CALL   0F4C
19B0:  MOVFF  00,100
19B4:  MOVFF  01,101
19B8:  MOVFF  02,102
19BC:  MOVFF  03,103
19C0:  MOVFF  03,121
19C4:  MOVFF  02,120
19C8:  MOVFF  01,11F
19CC:  MOVFF  00,11E
19D0:  MOVLB  1
19D2:  CLRF   x25
19D4:  MOVLW  C0
19D6:  MOVWF  x24
19D8:  MOVLW  7F
19DA:  MOVWF  x23
19DC:  MOVLW  88
19DE:  MOVWF  x22
19E0:  MOVLB  0
19E2:  CALL   07AE
19E6:  MOVFF  03,75
19EA:  MOVFF  02,74
19EE:  MOVFF  01,73
19F2:  MOVFF  00,72
....................     Voltaje1=sensores(1)*5/1023; 
19F6:  MOVLW  01
19F8:  MOVLB  1
19FA:  MOVWF  x04
19FC:  MOVLB  0
19FE:  RCALL  12B0
1A00:  MOVFF  00,100
1A04:  MOVFF  01,101
1A08:  MOVFF  02,102
1A0C:  MOVFF  03,103
1A10:  MOVFF  03,11D
1A14:  MOVFF  02,11C
1A18:  MOVFF  01,11B
1A1C:  MOVFF  00,11A
1A20:  MOVLB  1
1A22:  CLRF   x21
1A24:  CLRF   x20
1A26:  MOVLW  20
1A28:  MOVWF  x1F
1A2A:  MOVLW  81
1A2C:  MOVWF  x1E
1A2E:  MOVLB  0
1A30:  CALL   0F4C
1A34:  MOVFF  00,100
1A38:  MOVFF  01,101
1A3C:  MOVFF  02,102
1A40:  MOVFF  03,103
1A44:  MOVFF  03,121
1A48:  MOVFF  02,120
1A4C:  MOVFF  01,11F
1A50:  MOVFF  00,11E
1A54:  MOVLB  1
1A56:  CLRF   x25
1A58:  MOVLW  C0
1A5A:  MOVWF  x24
1A5C:  MOVLW  7F
1A5E:  MOVWF  x23
1A60:  MOVLW  88
1A62:  MOVWF  x22
1A64:  MOVLB  0
1A66:  CALL   07AE
1A6A:  MOVFF  03,79
1A6E:  MOVFF  02,78
1A72:  MOVFF  01,77
1A76:  MOVFF  00,76
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1A7A:  MOVLB  1
1A7C:  CLRF   x21
1A7E:  CLRF   x20
1A80:  MOVLW  20
1A82:  MOVWF  x1F
1A84:  MOVLW  81
1A86:  MOVWF  x1E
1A88:  MOVFF  79,125
1A8C:  MOVFF  78,124
1A90:  MOVFF  77,123
1A94:  MOVFF  76,122
1A98:  MOVLB  0
1A9A:  CALL   07AE
1A9E:  MOVFF  00,100
1AA2:  MOVFF  01,101
1AA6:  MOVFF  02,102
1AAA:  MOVFF  03,103
1AAE:  BSF    FD8.1
1AB0:  MOVFF  03,121
1AB4:  MOVFF  02,120
1AB8:  MOVFF  01,11F
1ABC:  MOVFF  00,11E
1AC0:  MOVLB  1
1AC2:  CLRF   x25
1AC4:  CLRF   x24
1AC6:  CLRF   x23
1AC8:  MOVLW  7F
1ACA:  MOVWF  x22
1ACC:  MOVLB  0
1ACE:  CALL   090C
1AD2:  MOVFF  6D,121
1AD6:  MOVFF  6C,120
1ADA:  MOVFF  6B,11F
1ADE:  MOVFF  6A,11E
1AE2:  MOVFF  03,125
1AE6:  MOVFF  02,124
1AEA:  MOVFF  01,123
1AEE:  MOVFF  00,122
1AF2:  CALL   07AE
1AF6:  MOVFF  03,71
1AFA:  MOVFF  02,70
1AFE:  MOVFF  01,6F
1B02:  MOVFF  00,6E
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
1B06:  MOVFF  71,121
1B0A:  MOVFF  70,120
1B0E:  MOVFF  6F,11F
1B12:  MOVFF  6E,11E
1B16:  MOVFF  5D,125
1B1A:  MOVFF  5C,124
1B1E:  MOVFF  5B,123
1B22:  MOVFF  5A,122
1B26:  CALL   07AE
1B2A:  MOVFF  00,100
1B2E:  MOVFF  01,101
1B32:  MOVFF  02,102
1B36:  MOVFF  03,103
1B3A:  MOVFF  03,108
1B3E:  MOVFF  02,107
1B42:  MOVFF  01,106
1B46:  MOVFF  00,105
1B4A:  BRA    149E
1B4C:  MOVFF  00,100
1B50:  MOVFF  01,101
1B54:  MOVFF  02,102
1B58:  MOVFF  03,103
1B5C:  MOVFF  03,121
1B60:  MOVFF  02,120
1B64:  MOVFF  01,11F
1B68:  MOVFF  00,11E
1B6C:  MOVFF  59,125
1B70:  MOVFF  58,124
1B74:  MOVFF  57,123
1B78:  MOVFF  56,122
1B7C:  CALL   07AE
1B80:  MOVFF  00,100
1B84:  MOVFF  01,101
1B88:  MOVFF  02,102
1B8C:  MOVFF  03,103
1B90:  MOVLB  1
1B92:  CLRF   x21
1B94:  CLRF   x20
1B96:  CLRF   x1F
1B98:  MOVLW  7F
1B9A:  MOVWF  x1E
1B9C:  MOVFF  61,125
1BA0:  MOVFF  60,124
1BA4:  MOVFF  5F,123
1BA8:  MOVFF  5E,122
1BAC:  MOVLB  0
1BAE:  CALL   07AE
1BB2:  MOVFF  FEA,105
1BB6:  MOVFF  FE9,104
1BBA:  BCF    FD8.1
1BBC:  MOVFF  103,121
1BC0:  MOVFF  102,120
1BC4:  MOVFF  101,11F
1BC8:  MOVFF  100,11E
1BCC:  MOVFF  03,125
1BD0:  MOVFF  02,124
1BD4:  MOVFF  01,123
1BD8:  MOVFF  00,122
1BDC:  CALL   090C
1BE0:  MOVFF  105,FEA
1BE4:  MOVFF  104,FE9
1BE8:  MOVLB  1
1BEA:  CLRF   x21
1BEC:  CLRF   x20
1BEE:  CLRF   x1F
1BF0:  MOVLW  7F
1BF2:  MOVWF  x1E
1BF4:  MOVFF  03,125
1BF8:  MOVFF  02,124
1BFC:  MOVFF  01,123
1C00:  MOVFF  00,122
1C04:  MOVLB  0
1C06:  CALL   07AE
1C0A:  MOVFF  03,65
1C0E:  MOVFF  02,64
1C12:  MOVFF  01,63
1C16:  MOVFF  00,62
....................     TC=TK-273.15; 
1C1A:  BSF    FD8.1
1C1C:  MOVFF  65,121
1C20:  MOVFF  64,120
1C24:  MOVFF  63,11F
1C28:  MOVFF  62,11E
1C2C:  MOVLW  33
1C2E:  MOVLB  1
1C30:  MOVWF  x25
1C32:  MOVLW  93
1C34:  MOVWF  x24
1C36:  MOVLW  08
1C38:  MOVWF  x23
1C3A:  MOVLW  87
1C3C:  MOVWF  x22
1C3E:  MOVLB  0
1C40:  CALL   090C
1C44:  MOVFF  03,69
1C48:  MOVFF  02,68
1C4C:  MOVFF  01,67
1C50:  MOVFF  00,66
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
1C54:  MOVF   2B,W
1C56:  SUBLW  0A
1C58:  BNZ   1CBA
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
1C5A:  MOVLB  1
1C5C:  CLRF   x04
1C5E:  MOVLB  0
1C60:  CALL   12B0
1C64:  MOVFF  00,100
1C68:  MOVFF  01,101
1C6C:  MOVFF  02,102
1C70:  MOVFF  03,103
1C74:  MOVFF  FEA,105
1C78:  MOVFF  FE9,104
1C7C:  BCF    FD8.1
1C7E:  MOVFF  03,121
1C82:  MOVFF  02,120
1C86:  MOVFF  01,11F
1C8A:  MOVFF  00,11E
1C8E:  MOVFF  BD,125
1C92:  MOVFF  BC,124
1C96:  MOVFF  BB,123
1C9A:  MOVFF  BA,122
1C9E:  CALL   090C
1CA2:  MOVFF  105,FEA
1CA6:  MOVFF  104,FE9
1CAA:  MOVFF  03,99
1CAE:  MOVFF  02,98
1CB2:  MOVFF  01,97
1CB6:  MOVFF  00,96
....................     } 
....................     if(negativo==20) 
1CBA:  MOVF   2B,W
1CBC:  SUBLW  14
1CBE:  BNZ   1D20
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
1CC0:  MOVLB  1
1CC2:  CLRF   x04
1CC4:  MOVLB  0
1CC6:  CALL   12B0
1CCA:  MOVFF  00,100
1CCE:  MOVFF  01,101
1CD2:  MOVFF  02,102
1CD6:  MOVFF  03,103
1CDA:  MOVFF  FEA,105
1CDE:  MOVFF  FE9,104
1CE2:  BSF    FD8.1
1CE4:  MOVFF  03,121
1CE8:  MOVFF  02,120
1CEC:  MOVFF  01,11F
1CF0:  MOVFF  00,11E
1CF4:  MOVFF  BD,125
1CF8:  MOVFF  BC,124
1CFC:  MOVFF  BB,123
1D00:  MOVFF  BA,122
1D04:  CALL   090C
1D08:  MOVFF  105,FEA
1D0C:  MOVFF  104,FE9
1D10:  MOVFF  03,99
1D14:  MOVFF  02,98
1D18:  MOVFF  01,97
1D1C:  MOVFF  00,96
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
1D20:  MOVFF  99,11D
1D24:  MOVFF  98,11C
1D28:  MOVFF  97,11B
1D2C:  MOVFF  96,11A
1D30:  MOVFF  99,121
1D34:  MOVFF  98,120
1D38:  MOVFF  97,11F
1D3C:  MOVFF  96,11E
1D40:  CALL   0F4C
1D44:  MOVFF  03,9D
1D48:  MOVFF  02,9C
1D4C:  MOVFF  01,9B
1D50:  MOVFF  00,9A
....................     x_cubo=x_uno*x_cuadrado; 
1D54:  MOVFF  99,11D
1D58:  MOVFF  98,11C
1D5C:  MOVFF  97,11B
1D60:  MOVFF  96,11A
1D64:  MOVFF  9D,121
1D68:  MOVFF  9C,120
1D6C:  MOVFF  9B,11F
1D70:  MOVFF  9A,11E
1D74:  CALL   0F4C
1D78:  MOVFF  03,A1
1D7C:  MOVFF  02,A0
1D80:  MOVFF  01,9F
1D84:  MOVFF  00,9E
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
1D88:  MOVFF  A1,11D
1D8C:  MOVFF  A0,11C
1D90:  MOVFF  9F,11B
1D94:  MOVFF  9E,11A
1D98:  MOVFF  7D,121
1D9C:  MOVFF  7C,120
1DA0:  MOVFF  7B,11F
1DA4:  MOVFF  7A,11E
1DA8:  CALL   0F4C
1DAC:  MOVFF  00,100
1DB0:  MOVFF  01,101
1DB4:  MOVFF  02,102
1DB8:  MOVFF  03,103
1DBC:  MOVFF  9D,11D
1DC0:  MOVFF  9C,11C
1DC4:  MOVFF  9B,11B
1DC8:  MOVFF  9A,11A
1DCC:  MOVFF  81,121
1DD0:  MOVFF  80,120
1DD4:  MOVFF  7F,11F
1DD8:  MOVFF  7E,11E
1DDC:  CALL   0F4C
1DE0:  BCF    FD8.1
1DE2:  MOVFF  103,121
1DE6:  MOVFF  102,120
1DEA:  MOVFF  101,11F
1DEE:  MOVFF  100,11E
1DF2:  MOVFF  03,125
1DF6:  MOVFF  02,124
1DFA:  MOVFF  01,123
1DFE:  MOVFF  00,122
1E02:  CALL   090C
1E06:  MOVFF  00,100
1E0A:  MOVFF  01,101
1E0E:  MOVFF  02,102
1E12:  MOVFF  03,103
1E16:  MOVFF  99,11D
1E1A:  MOVFF  98,11C
1E1E:  MOVFF  97,11B
1E22:  MOVFF  96,11A
1E26:  MOVFF  85,121
1E2A:  MOVFF  84,120
1E2E:  MOVFF  83,11F
1E32:  MOVFF  82,11E
1E36:  CALL   0F4C
1E3A:  BCF    FD8.1
1E3C:  MOVFF  103,121
1E40:  MOVFF  102,120
1E44:  MOVFF  101,11F
1E48:  MOVFF  100,11E
1E4C:  MOVFF  03,125
1E50:  MOVFF  02,124
1E54:  MOVFF  01,123
1E58:  MOVFF  00,122
1E5C:  CALL   090C
1E60:  MOVFF  00,100
1E64:  MOVFF  01,101
1E68:  MOVFF  02,102
1E6C:  MOVFF  03,103
1E70:  BCF    FD8.1
1E72:  MOVFF  03,121
1E76:  MOVFF  02,120
1E7A:  MOVFF  01,11F
1E7E:  MOVFF  00,11E
1E82:  MOVFF  89,125
1E86:  MOVFF  88,124
1E8A:  MOVFF  87,123
1E8E:  MOVFF  86,122
1E92:  CALL   090C
1E96:  MOVFF  03,B1
1E9A:  MOVFF  02,B0
1E9E:  MOVFF  01,AF
1EA2:  MOVFF  00,AE
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
1EA6:  BSF    FD8.1
1EA8:  MOVFF  B1,121
1EAC:  MOVFF  B0,120
1EB0:  MOVFF  AF,11F
1EB4:  MOVFF  AE,11E
1EB8:  MOVLW  0A
1EBA:  MOVLB  1
1EBC:  MOVWF  x25
1EBE:  MOVLW  D7
1EC0:  MOVWF  x24
1EC2:  MOVLW  23
1EC4:  MOVWF  x23
1EC6:  MOVLW  7B
1EC8:  MOVWF  x22
1ECA:  MOVLB  0
1ECC:  CALL   090C
1ED0:  MOVFF  03,B1
1ED4:  MOVFF  02,B0
1ED8:  MOVFF  01,AF
1EDC:  MOVFF  00,AE
....................     if(Velocidad<0.0) 
1EE0:  MOVFF  B1,11D
1EE4:  MOVFF  B0,11C
1EE8:  MOVFF  AF,11B
1EEC:  MOVFF  AE,11A
1EF0:  MOVLB  1
1EF2:  CLRF   x21
1EF4:  CLRF   x20
1EF6:  CLRF   x1F
1EF8:  CLRF   x1E
1EFA:  MOVLB  0
1EFC:  CALL   1308
1F00:  BNC   1F0A
....................      {Velocidad=0.0;} 
1F02:  CLRF   xB1
1F04:  CLRF   xB0
1F06:  CLRF   xAF
1F08:  CLRF   xAE
....................       
....................      if(l>=media) 
1F0A:  MOVF   xFE,W
1F0C:  SUBWF  27,W
1F0E:  BNC   1F12
....................        {l=0;} 
1F10:  CLRF   27
....................       
....................      promedio[l]=Velocidad;l++; 
1F12:  MOVF   27,W
1F14:  MULLW  04
1F16:  MOVF   FF3,W
1F18:  CLRF   03
1F1A:  ADDLW  CE
1F1C:  MOVWF  FE9
1F1E:  MOVLW  00
1F20:  ADDWFC 03,W
1F22:  MOVWF  FEA
1F24:  MOVFF  AE,FEF
1F28:  MOVFF  AF,FEC
1F2C:  MOVFF  B0,FEC
1F30:  MOVFF  B1,FEC
1F34:  INCF   27,F
....................      Flujo2=0; 
1F36:  CLRF   x91
1F38:  CLRF   x90
1F3A:  CLRF   x8F
1F3C:  CLRF   x8E
....................         for(h=0;h<=(media-1);h++) 
1F3E:  CLRF   28
1F40:  MOVLW  01
1F42:  SUBWF  xFE,W
1F44:  SUBWF  28,W
1F46:  BZ    1F4A
1F48:  BC    1FB6
....................         { 
....................            Flujo2+=promedio[h]; 
1F4A:  MOVF   28,W
1F4C:  MULLW  04
1F4E:  MOVF   FF3,W
1F50:  CLRF   03
1F52:  ADDLW  CE
1F54:  MOVWF  FE9
1F56:  MOVLW  00
1F58:  ADDWFC 03,W
1F5A:  MOVWF  FEA
1F5C:  MOVFF  FEF,00
1F60:  MOVFF  FEC,01
1F64:  MOVFF  FEC,02
1F68:  MOVFF  FEC,03
1F6C:  MOVFF  FEA,101
1F70:  MOVFF  FE9,100
1F74:  BCF    FD8.1
1F76:  MOVFF  91,121
1F7A:  MOVFF  90,120
1F7E:  MOVFF  8F,11F
1F82:  MOVFF  8E,11E
1F86:  MOVFF  03,125
1F8A:  MOVFF  02,124
1F8E:  MOVFF  01,123
1F92:  MOVFF  00,122
1F96:  CALL   090C
1F9A:  MOVFF  101,FEA
1F9E:  MOVFF  100,FE9
1FA2:  MOVFF  03,91
1FA6:  MOVFF  02,90
1FAA:  MOVFF  01,8F
1FAE:  MOVFF  00,8E
....................         }  
1FB2:  INCF   28,F
1FB4:  BRA    1F40
....................            Flujo2=(Flujo2/media)*Ajuste1;  
1FB6:  MOVLB  1
1FB8:  CLRF   x0A
1FBA:  MOVFF  FE,109
1FBE:  MOVLB  0
1FC0:  CALL   0778
1FC4:  MOVFF  91,121
1FC8:  MOVFF  90,120
1FCC:  MOVFF  8F,11F
1FD0:  MOVFF  8E,11E
1FD4:  MOVFF  03,125
1FD8:  MOVFF  02,124
1FDC:  MOVFF  01,123
1FE0:  MOVFF  00,122
1FE4:  CALL   07AE
1FE8:  MOVFF  00,100
1FEC:  MOVFF  01,101
1FF0:  MOVFF  02,102
1FF4:  MOVFF  03,103
1FF8:  MOVFF  03,11D
1FFC:  MOVFF  02,11C
2000:  MOVFF  01,11B
2004:  MOVFF  00,11A
2008:  MOVFF  C1,121
200C:  MOVFF  C0,120
2010:  MOVFF  BF,11F
2014:  MOVFF  BE,11E
2018:  CALL   0F4C
201C:  MOVFF  03,91
2020:  MOVFF  02,90
2024:  MOVFF  01,8F
2028:  MOVFF  00,8E
....................            return Flujo2; 
202C:  MOVFF  8E,00
2030:  MOVFF  8F,01
2034:  MOVFF  90,02
2038:  MOVFF  91,03
.................... } 
203C:  GOTO   4C42 (RETURN)
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
2040:  MOVF   2C,W
2042:  SUBLW  14
2044:  BTFSS  FD8.2
2046:  BRA    213A
2048:  BTFSS  33.1
204A:  BRA    213A
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
204C:  BSF    FD8.1
204E:  MOVFF  44,121
2052:  MOVFF  43,120
2056:  MOVFF  42,11F
205A:  MOVFF  41,11E
205E:  MOVFF  8D,125
2062:  MOVFF  8C,124
2066:  MOVFF  8B,123
206A:  MOVFF  8A,122
206E:  CALL   090C
2072:  MOVFF  03,CD
2076:  MOVFF  02,CC
207A:  MOVFF  01,CB
207E:  MOVFF  00,CA
....................       if(error<0.2&&error>-0.2) 
2082:  MOVFF  CD,11D
2086:  MOVFF  CC,11C
208A:  MOVFF  CB,11B
208E:  MOVFF  CA,11A
2092:  MOVLW  CD
2094:  MOVLB  1
2096:  MOVWF  x21
2098:  MOVLW  CC
209A:  MOVWF  x20
209C:  MOVLW  4C
209E:  MOVWF  x1F
20A0:  MOVLW  7C
20A2:  MOVWF  x1E
20A4:  MOVLB  0
20A6:  CALL   1308
20AA:  BNC   20D6
20AC:  MOVLW  CD
20AE:  MOVLB  1
20B0:  MOVWF  x1D
20B2:  MOVLW  CC
20B4:  MOVWF  x1C
20B6:  MOVWF  x1B
20B8:  MOVLW  7C
20BA:  MOVWF  x1A
20BC:  MOVFF  CD,121
20C0:  MOVFF  CC,120
20C4:  MOVFF  CB,11F
20C8:  MOVFF  CA,11E
20CC:  MOVLB  0
20CE:  CALL   1308
20D2:  BNC   20D6
....................       {} 
....................       else 
20D4:  BRA    2122
....................       { 
....................          if(error>0.0) 
20D6:  MOVLB  1
20D8:  CLRF   x1D
20DA:  CLRF   x1C
20DC:  CLRF   x1B
20DE:  CLRF   x1A
20E0:  MOVFF  CD,121
20E4:  MOVFF  CC,120
20E8:  MOVFF  CB,11F
20EC:  MOVFF  CA,11E
20F0:  MOVLB  0
20F2:  CALL   1308
20F6:  BNC   20FC
....................          {tmp+=1;} 
20F8:  MOVLW  01
20FA:  ADDWF  29,F
....................                 
....................          if(error<-0.0) 
20FC:  MOVFF  CD,11D
2100:  MOVFF  CC,11C
2104:  MOVFF  CB,11B
2108:  MOVFF  CA,11A
210C:  MOVLB  1
210E:  CLRF   x21
2110:  CLRF   x20
2112:  CLRF   x1F
2114:  CLRF   x1E
2116:  MOVLB  0
2118:  CALL   1308
211C:  BNC   2122
....................          {tmp-=1;}   
211E:  MOVLW  01
2120:  SUBWF  29,F
....................       } 
....................        
....................       if(tmp>251) 
2122:  MOVF   29,W
2124:  SUBLW  FB
2126:  BC    212C
....................       {tmp=251;} 
2128:  MOVLW  FB
212A:  MOVWF  29
....................       if(tmp<4)          
212C:  MOVF   29,W
212E:  SUBLW  03
2130:  BNC   2136
....................       {tmp=4;}       
2132:  MOVLW  04
2134:  MOVWF  29
....................       set_pwm1_duty (tmp); 
2136:  MOVFF  29,FBE
....................    } 
....................     
....................    if(Manual==20) 
213A:  MOVF   2D,W
213C:  SUBLW  14
213E:  BNZ   2148
....................    { 
....................       tmp=251; 
2140:  MOVLW  FB
2142:  MOVWF  29
....................       set_pwm1_duty (tmp); 
2144:  MOVFF  29,FBE
....................    } 
....................     
....................    if(Semi==20) 
2148:  MOVF   2E,W
214A:  SUBLW  14
214C:  BNZ   2152
....................    { 
....................       set_pwm1_duty (ValorSemi); 
214E:  MOVFF  2F,FBE
....................    } 
.................... } 
2152:  GOTO   4C56 (RETURN)
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0E94:  MOVLB  1
0E96:  DECFSZ x01,W
0E98:  BRA    0EB2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0E9A:  MOVLW  02
0E9C:  MOVWF  x16
0E9E:  MOVFF  102,117
0EA2:  MOVLB  0
0EA4:  RCALL  0C64
0EA6:  MOVLW  02
0EA8:  MOVWF  FF6
0EAA:  MOVLW  01
0EAC:  MOVWF  FF7
0EAE:  RCALL  0D42
0EB0:  MOVLB  1
....................     
....................    if(x==2) 
0EB2:  MOVF   x01,W
0EB4:  SUBLW  02
0EB6:  BNZ   0ED0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
0EB8:  MOVLW  02
0EBA:  MOVWF  x16
0EBC:  MOVFF  102,117
0EC0:  MOVLB  0
0EC2:  RCALL  0C64
0EC4:  MOVLW  16
0EC6:  MOVWF  FF6
0EC8:  MOVLW  01
0ECA:  MOVWF  FF7
0ECC:  RCALL  0D42
0ECE:  MOVLB  1
....................     
....................    if(x==3) 
0ED0:  MOVF   x01,W
0ED2:  SUBLW  03
0ED4:  BNZ   0EEE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0ED6:  MOVLW  02
0ED8:  MOVWF  x16
0EDA:  MOVFF  102,117
0EDE:  MOVLB  0
0EE0:  RCALL  0C64
0EE2:  MOVLW  2A
0EE4:  MOVWF  FF6
0EE6:  MOVLW  01
0EE8:  MOVWF  FF7
0EEA:  RCALL  0D42
0EEC:  MOVLB  1
....................     
....................    if(x==4) 
0EEE:  MOVF   x01,W
0EF0:  SUBLW  04
0EF2:  BNZ   0F0C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
0EF4:  MOVLW  02
0EF6:  MOVWF  x16
0EF8:  MOVFF  102,117
0EFC:  MOVLB  0
0EFE:  RCALL  0C64
0F00:  MOVLW  3E
0F02:  MOVWF  FF6
0F04:  MOVLW  01
0F06:  MOVWF  FF7
0F08:  RCALL  0D42
0F0A:  MOVLB  1
....................     
....................    if(x==5) 
0F0C:  MOVF   x01,W
0F0E:  SUBLW  05
0F10:  BNZ   0F2A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad Motor    ");} 
0F12:  MOVLW  02
0F14:  MOVWF  x16
0F16:  MOVFF  102,117
0F1A:  MOVLB  0
0F1C:  RCALL  0C64
0F1E:  MOVLW  52
0F20:  MOVWF  FF6
0F22:  MOVLW  01
0F24:  MOVWF  FF7
0F26:  RCALL  0D42
0F28:  MOVLB  1
....................     
....................    if(x==6) 
0F2A:  MOVF   x01,W
0F2C:  SUBLW  06
0F2E:  BNZ   0F48
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
0F30:  MOVLW  02
0F32:  MOVWF  x16
0F34:  MOVFF  102,117
0F38:  MOVLB  0
0F3A:  RCALL  0C64
0F3C:  MOVLW  66
0F3E:  MOVWF  FF6
0F40:  MOVLW  01
0F42:  MOVWF  FF7
0F44:  RCALL  0D42
0F46:  MOVLB  1
.................... } 
0F48:  MOVLB  0
0F4A:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
13BA:  MOVFF  FE,FBE
.................... } 
13BE:  GOTO   424A (RETURN)
....................  
.................... void main () 
.................... { 
*
2156:  CLRF   FF8
2158:  BCF    FD0.7
215A:  BSF    07.7
215C:  CLRF   FEA
215E:  CLRF   FE9
2160:  MOVLW  64
2162:  MOVWF  17
2164:  MOVLW  07
2166:  MOVWF  18
2168:  MOVLW  02
216A:  MOVWF  19
216C:  MOVLW  0B
216E:  MOVWF  1A
2170:  MOVLW  02
2172:  MOVWF  1B
2174:  MOVLW  03
2176:  MOVWF  1C
2178:  MOVLW  02
217A:  MOVWF  1D
217C:  MOVWF  1E
217E:  MOVLW  04
2180:  MOVWF  1F
2182:  MOVLW  0A
2184:  MOVWF  20
2186:  CLRF   21
2188:  CLRF   22
218A:  CLRF   23
218C:  CLRF   24
218E:  CLRF   25
2190:  CLRF   26
2192:  CLRF   27
2194:  CLRF   28
2196:  MOVWF  29
2198:  CLRF   2A
219A:  MOVWF  2B
219C:  MOVWF  2C
219E:  MOVWF  2D
21A0:  MOVWF  2E
21A2:  CLRF   2F
21A4:  CLRF   30
21A6:  CLRF   31
21A8:  CLRF   32
21AA:  BCF    33.0
21AC:  BCF    33.1
21AE:  BCF    33.2
21B0:  BCF    33.3
21B2:  BCF    33.4
21B4:  BCF    33.5
21B6:  BCF    33.6
21B8:  BCF    33.7
21BA:  BCF    34.0
21BC:  BCF    34.1
21BE:  BCF    34.2
21C0:  CLRF   35
21C2:  CLRF   44
21C4:  CLRF   43
21C6:  CLRF   42
21C8:  CLRF   41
21CA:  CLRF   48
21CC:  CLRF   47
21CE:  CLRF   46
21D0:  CLRF   45
21D2:  CLRF   4C
21D4:  CLRF   4B
21D6:  MOVLW  4B
21D8:  MOVWF  4A
21DA:  MOVLW  86
21DC:  MOVWF  49
21DE:  BCF    34.4
21E0:  BCF    34.5
21E2:  BCF    34.6
21E4:  BCF    34.7
21E6:  BCF    4D.0
21E8:  BCF    4D.1
21EA:  BCF    4D.2
21EC:  BCF    4D.3
21EE:  CLRF   4F
21F0:  CLRF   4E
21F2:  CLRF   51
21F4:  CLRF   50
21F6:  CLRF   53
21F8:  CLRF   52
21FA:  CLRF   55
21FC:  CLRF   54
21FE:  CLRF   59
2200:  MOVLW  E0
2202:  MOVWF  58
2204:  MOVLW  5D
2206:  MOVWF  57
2208:  MOVLW  8A
220A:  MOVWF  56
220C:  CLRF   5D
220E:  MOVLW  C0
2210:  MOVWF  5C
2212:  MOVLW  28
2214:  MOVWF  5B
2216:  MOVLW  89
2218:  MOVWF  5A
221A:  MOVLW  33
221C:  MOVWF  x61
221E:  MOVLW  13
2220:  MOVWF  x60
2222:  MOVLW  15
2224:  MOVWF  5F
2226:  MOVLW  87
2228:  MOVWF  5E
222A:  CLRF   x65
222C:  CLRF   x64
222E:  CLRF   x63
2230:  CLRF   x62
2232:  CLRF   x69
2234:  CLRF   x68
2236:  CLRF   x67
2238:  CLRF   x66
223A:  CLRF   x6D
223C:  CLRF   x6C
223E:  MOVLW  7A
2240:  MOVWF  x6B
2242:  MOVLW  88
2244:  MOVWF  x6A
2246:  CLRF   x71
2248:  CLRF   x70
224A:  CLRF   x6F
224C:  CLRF   x6E
224E:  CLRF   x75
2250:  CLRF   x74
2252:  CLRF   x73
2254:  CLRF   x72
2256:  CLRF   x79
2258:  CLRF   x78
225A:  CLRF   x77
225C:  CLRF   x76
225E:  MOVLW  19
2260:  MOVWF  x7D
2262:  MOVLW  53
2264:  MOVWF  x7C
2266:  MOVLW  18
2268:  MOVWF  x7B
226A:  MOVLW  68
226C:  MOVWF  x7A
226E:  MOVLW  E9
2270:  MOVWF  x81
2272:  MOVLW  BD
2274:  MOVWF  x80
2276:  MOVLW  C6
2278:  MOVWF  x7F
227A:  MOVLW  71
227C:  MOVWF  x7E
227E:  MOVLW  BE
2280:  MOVWF  x85
2282:  MOVLW  96
2284:  MOVWF  x84
2286:  MOVLW  24
2288:  MOVWF  x83
228A:  MOVLW  7A
228C:  MOVWF  x82
228E:  MOVLW  F3
2290:  MOVWF  x89
2292:  MOVLW  5A
2294:  MOVWF  x88
2296:  MOVLW  AB
2298:  MOVWF  x87
229A:  MOVLW  81
229C:  MOVWF  x86
229E:  CLRF   x8D
22A0:  CLRF   x8C
22A2:  CLRF   x8B
22A4:  CLRF   x8A
22A6:  CLRF   x91
22A8:  CLRF   x90
22AA:  CLRF   x8F
22AC:  CLRF   x8E
22AE:  CLRF   x95
22B0:  CLRF   x94
22B2:  CLRF   x93
22B4:  CLRF   x92
22B6:  CLRF   x99
22B8:  CLRF   x98
22BA:  CLRF   x97
22BC:  CLRF   x96
22BE:  CLRF   x9D
22C0:  CLRF   x9C
22C2:  CLRF   x9B
22C4:  CLRF   x9A
22C6:  CLRF   xA1
22C8:  CLRF   xA0
22CA:  CLRF   x9F
22CC:  CLRF   x9E
22CE:  MOVLW  8B
22D0:  MOVWF  xA5
22D2:  MOVLW  FD
22D4:  MOVWF  xA4
22D6:  MOVLW  65
22D8:  MOVWF  xA3
22DA:  MOVLW  7C
22DC:  MOVWF  xA2
22DE:  CLRF   xA9
22E0:  CLRF   xA8
22E2:  CLRF   xA7
22E4:  CLRF   xA6
22E6:  CLRF   xAD
22E8:  CLRF   xAC
22EA:  CLRF   xAB
22EC:  CLRF   xAA
22EE:  CLRF   xB1
22F0:  CLRF   xB0
22F2:  CLRF   xAF
22F4:  CLRF   xAE
22F6:  CLRF   xB5
22F8:  CLRF   xB4
22FA:  CLRF   xB3
22FC:  CLRF   xB2
22FE:  CLRF   xB9
2300:  CLRF   xB8
2302:  CLRF   xB7
2304:  CLRF   xB6
2306:  CLRF   xBD
2308:  CLRF   xBC
230A:  CLRF   xBB
230C:  CLRF   xBA
230E:  CLRF   xC1
2310:  CLRF   xC0
2312:  CLRF   xBF
2314:  MOVLW  7F
2316:  MOVWF  xBE
2318:  CLRF   xC5
231A:  CLRF   xC4
231C:  MOVLW  24
231E:  MOVWF  xC3
2320:  MOVLW  88
2322:  MOVWF  xC2
2324:  CLRF   xC9
2326:  CLRF   xC8
2328:  CLRF   xC7
232A:  CLRF   xC6
232C:  CLRF   xCD
232E:  CLRF   xCC
2330:  CLRF   xCB
2332:  CLRF   xCA
2334:  MOVF   FC1,W
2336:  ANDLW  C0
2338:  IORLW  0F
233A:  MOVWF  FC1
233C:  MOVLW  07
233E:  MOVWF  FB4
2340:  MOVLW  3E
2342:  MOVWF  36
2344:  MOVLW  20
2346:  MOVWF  37
2348:  MOVLW  5E
234A:  MOVWF  38
234C:  CLRF   39
234E:  CLRF   3A
2350:  CLRF   3B
2352:  CLRF   3C
2354:  CLRF   3D
2356:  CLRF   3E
2358:  CLRF   3F
235A:  CLRF   40
235C:  CLRF   xCE
235E:  CLRF   xCF
2360:  CLRF   xD0
2362:  CLRF   xD1
2364:  CLRF   xD2
2366:  CLRF   xD3
2368:  CLRF   xD4
236A:  CLRF   xD5
236C:  CLRF   xD6
236E:  CLRF   xD7
2370:  CLRF   xD8
2372:  CLRF   xD9
2374:  CLRF   xDA
2376:  CLRF   xDB
2378:  CLRF   xDC
237A:  CLRF   xDD
237C:  CLRF   xDE
237E:  CLRF   xDF
2380:  CLRF   xE0
2382:  CLRF   xE1
2384:  CLRF   xE2
2386:  CLRF   xE3
2388:  CLRF   xE4
238A:  CLRF   xE5
238C:  CLRF   xE6
238E:  CLRF   xE7
2390:  CLRF   xE8
2392:  CLRF   xE9
2394:  CLRF   xEA
2396:  CLRF   xEB
2398:  CLRF   xEC
239A:  CLRF   xED
239C:  CLRF   xEE
239E:  CLRF   xEF
23A0:  CLRF   xF0
23A2:  CLRF   xF1
23A4:  CLRF   xF2
23A6:  CLRF   xF3
23A8:  CLRF   xF4
23AA:  CLRF   xF5
23AC:  CLRF   xF6
23AE:  CLRF   xF7
23B0:  CLRF   xF8
23B2:  CLRF   xF9
23B4:  CLRF   xFA
23B6:  CLRF   xFB
23B8:  CLRF   xFC
23BA:  CLRF   xFD
....................    setup_adc_ports(AN0_TO_AN3); 
23BC:  MOVF   FC1,W
23BE:  ANDLW  C0
23C0:  IORLW  0B
23C2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
23C4:  BCF    FC0.0
23C6:  BSF    FC0.1
23C8:  BCF    FC0.2
23CA:  BSF    FC0.7
23CC:  BSF    FC2.0
....................    output_d(0);  
23CE:  CLRF   F95
23D0:  CLRF   F8C
....................    ModoSleep=1; 
23D2:  BSF    34.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
23D4:  MOVLW  85
23D6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
23D8:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
23DA:  MOVLW  00
23DC:  IORLW  05
23DE:  MOVWF  FCA
23E0:  MOVLW  FF
23E2:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
23E4:  BCF    F94.2
23E6:  BCF    F8B.2
23E8:  BCF    F96.6
23EA:  MOVLW  0C
23EC:  MOVWF  FBD
23EE:  CLRF   FB7
23F0:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
23F2:  MOVLW  C0
23F4:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
23F6:  CLRF   FBE
....................     
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
23F8:  MOVFF  FF2,100
23FC:  BCF    FF2.7
23FE:  CLRF   FA9
2400:  BCF    FA6.6
2402:  BCF    FA6.7
2404:  BSF    FA6.0
2406:  MOVF   FA8,W
2408:  MOVLB  1
240A:  BTFSC  x00.7
240C:  BSF    FF2.7
240E:  MOVWF  3D
2410:  MOVLW  14
2412:  MOVWF  x1B
2414:  MOVLB  0
2416:  CALL   074E
241A:  MOVFF  FF2,100
241E:  BCF    FF2.7
2420:  MOVLW  01
2422:  MOVWF  FA9
2424:  BCF    FA6.6
2426:  BCF    FA6.7
2428:  BSF    FA6.0
242A:  MOVF   FA8,W
242C:  MOVLB  1
242E:  BTFSC  x00.7
2430:  BSF    FF2.7
2432:  MOVWF  3E
2434:  MOVLW  14
2436:  MOVWF  x1B
2438:  MOVLB  0
243A:  CALL   074E
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
243E:  MOVFF  FF2,100
2442:  BCF    FF2.7
2444:  MOVLW  02
2446:  MOVWF  FA9
2448:  BCF    FA6.6
244A:  BCF    FA6.7
244C:  BSF    FA6.0
244E:  MOVF   FA8,W
2450:  MOVLB  1
2452:  BTFSC  x00.7
2454:  BSF    FF2.7
2456:  MOVWF  3F
2458:  MOVLW  14
245A:  MOVWF  x1B
245C:  MOVLB  0
245E:  CALL   074E
2462:  MOVFF  FF2,100
2466:  BCF    FF2.7
2468:  MOVLW  03
246A:  MOVWF  FA9
246C:  BCF    FA6.6
246E:  BCF    FA6.7
2470:  BSF    FA6.0
2472:  MOVF   FA8,W
2474:  MOVLB  1
2476:  BTFSC  x00.7
2478:  BSF    FF2.7
247A:  MOVWF  40
247C:  MOVLW  14
247E:  MOVWF  x1B
2480:  MOVLB  0
2482:  CALL   074E
....................    estadoalarma=read_eeprom(5); 
2486:  MOVFF  FF2,100
248A:  BCF    FF2.7
248C:  MOVLW  05
248E:  MOVWF  FA9
2490:  BCF    FA6.6
2492:  BCF    FA6.7
2494:  BSF    FA6.0
2496:  MOVF   FA8,W
2498:  MOVLB  1
249A:  BTFSC  x00.7
249C:  BSF    FF2.7
249E:  MOVWF  01
24A0:  BCF    33.2
24A2:  BTFSC  01.0
24A4:  BSF    33.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
24A6:  MOVFF  FF2,100
24AA:  BCF    FF2.7
24AC:  MOVLW  0A
24AE:  MOVWF  FA9
24B0:  BCF    FA6.6
24B2:  BCF    FA6.7
24B4:  BSF    FA6.0
24B6:  MOVF   FA8,W
24B8:  BTFSC  x00.7
24BA:  BSF    FF2.7
24BC:  MOVWF  2D
24BE:  MOVFF  FF2,100
24C2:  BCF    FF2.7
24C4:  MOVLW  0B
24C6:  MOVWF  FA9
24C8:  BCF    FA6.6
24CA:  BCF    FA6.7
24CC:  BSF    FA6.0
24CE:  MOVF   FA8,W
24D0:  BTFSC  x00.7
24D2:  BSF    FF2.7
24D4:  MOVWF  2C
24D6:  MOVFF  FF2,100
24DA:  BCF    FF2.7
24DC:  MOVLW  0C
24DE:  MOVWF  FA9
24E0:  BCF    FA6.6
24E2:  BCF    FA6.7
24E4:  BSF    FA6.0
24E6:  MOVF   FA8,W
24E8:  BTFSC  x00.7
24EA:  BSF    FF2.7
24EC:  MOVWF  2E
24EE:  MOVFF  FF2,100
24F2:  BCF    FF2.7
24F4:  MOVLW  0D
24F6:  MOVWF  FA9
24F8:  BCF    FA6.6
24FA:  BCF    FA6.7
24FC:  BSF    FA6.0
24FE:  MOVF   FA8,W
2500:  BTFSC  x00.7
2502:  BSF    FF2.7
2504:  MOVWF  2F
2506:  MOVFF  2F,29
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
250A:  MOVFF  FF2,100
250E:  BCF    FF2.7
2510:  MOVLW  19
2512:  MOVWF  FA9
2514:  BCF    FA6.6
2516:  BCF    FA6.7
2518:  BSF    FA6.0
251A:  MOVF   FA8,W
251C:  BTFSC  x00.7
251E:  BSF    FF2.7
2520:  MOVWF  21
....................    Temporal=read_eeprom(26); 
2522:  MOVFF  FF2,100
2526:  BCF    FF2.7
2528:  MOVLW  1A
252A:  MOVWF  FA9
252C:  BCF    FA6.6
252E:  BCF    FA6.7
2530:  BSF    FA6.0
2532:  MOVF   FA8,W
2534:  BTFSC  x00.7
2536:  BSF    FF2.7
2538:  CLRF   x0A
253A:  MOVWF  x09
253C:  MOVLB  0
253E:  CALL   0778
2542:  MOVFF  03,A9
2546:  MOVFF  02,A8
254A:  MOVFF  01,A7
254E:  MOVFF  00,A6
....................    Temporal=Temporal/100.0; 
2552:  MOVFF  A9,121
2556:  MOVFF  A8,120
255A:  MOVFF  A7,11F
255E:  MOVFF  A6,11E
2562:  MOVLB  1
2564:  CLRF   x25
2566:  CLRF   x24
2568:  MOVLW  48
256A:  MOVWF  x23
256C:  MOVLW  85
256E:  MOVWF  x22
2570:  MOVLB  0
2572:  CALL   07AE
2576:  MOVFF  03,A9
257A:  MOVFF  02,A8
257E:  MOVFF  01,A7
2582:  MOVFF  00,A6
....................    Ajuste1=Entero+Temporal; 
2586:  MOVLB  1
2588:  CLRF   x0A
258A:  MOVFF  21,109
258E:  MOVLB  0
2590:  CALL   0778
2594:  BCF    FD8.1
2596:  MOVFF  03,121
259A:  MOVFF  02,120
259E:  MOVFF  01,11F
25A2:  MOVFF  00,11E
25A6:  MOVFF  A9,125
25AA:  MOVFF  A8,124
25AE:  MOVFF  A7,123
25B2:  MOVFF  A6,122
25B6:  CALL   090C
25BA:  MOVFF  03,C1
25BE:  MOVFF  02,C0
25C2:  MOVFF  01,BF
25C6:  MOVFF  00,BE
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
25CA:  MOVFF  FF2,100
25CE:  BCF    FF2.7
25D0:  MOVLW  28
25D2:  MOVWF  FA9
25D4:  BCF    FA6.6
25D6:  BCF    FA6.7
25D8:  BSF    FA6.0
25DA:  MOVF   FA8,W
25DC:  MOVLB  1
25DE:  BTFSC  x00.7
25E0:  BSF    FF2.7
25E2:  MOVWF  21
....................    Temporal=read_eeprom(41); 
25E4:  MOVFF  FF2,100
25E8:  BCF    FF2.7
25EA:  MOVLW  29
25EC:  MOVWF  FA9
25EE:  BCF    FA6.6
25F0:  BCF    FA6.7
25F2:  BSF    FA6.0
25F4:  MOVF   FA8,W
25F6:  BTFSC  x00.7
25F8:  BSF    FF2.7
25FA:  CLRF   x0A
25FC:  MOVWF  x09
25FE:  MOVLB  0
2600:  CALL   0778
2604:  MOVFF  03,A9
2608:  MOVFF  02,A8
260C:  MOVFF  01,A7
2610:  MOVFF  00,A6
....................    Temporal=Temporal/100.0; 
2614:  MOVFF  A9,121
2618:  MOVFF  A8,120
261C:  MOVFF  A7,11F
2620:  MOVFF  A6,11E
2624:  MOVLB  1
2626:  CLRF   x25
2628:  CLRF   x24
262A:  MOVLW  48
262C:  MOVWF  x23
262E:  MOVLW  85
2630:  MOVWF  x22
2632:  MOVLB  0
2634:  CALL   07AE
2638:  MOVFF  03,A9
263C:  MOVFF  02,A8
2640:  MOVFF  01,A7
2644:  MOVFF  00,A6
....................    setpoint=Entero+Temporal; 
2648:  MOVLB  1
264A:  CLRF   x0A
264C:  MOVFF  21,109
2650:  MOVLB  0
2652:  CALL   0778
2656:  BCF    FD8.1
2658:  MOVFF  03,121
265C:  MOVFF  02,120
2660:  MOVFF  01,11F
2664:  MOVFF  00,11E
2668:  MOVFF  A9,125
266C:  MOVFF  A8,124
2670:  MOVFF  A7,123
2674:  MOVFF  A6,122
2678:  CALL   090C
267C:  MOVFF  03,44
2680:  MOVFF  02,43
2684:  MOVFF  01,42
2688:  MOVFF  00,41
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
268C:  MOVFF  FF2,100
2690:  BCF    FF2.7
2692:  MOVLW  3C
2694:  MOVWF  FA9
2696:  BCF    FA6.6
2698:  BCF    FA6.7
269A:  BSF    FA6.0
269C:  MOVF   FA8,W
269E:  MOVLB  1
26A0:  BTFSC  x00.7
26A2:  BSF    FF2.7
26A4:  MOVWF  24
....................    Temporal1=read_eeprom(61); 
26A6:  MOVFF  FF2,100
26AA:  BCF    FF2.7
26AC:  MOVLW  3D
26AE:  MOVWF  FA9
26B0:  BCF    FA6.6
26B2:  BCF    FA6.7
26B4:  BSF    FA6.0
26B6:  MOVF   FA8,W
26B8:  BTFSC  x00.7
26BA:  BSF    FF2.7
26BC:  CLRF   x0A
26BE:  MOVWF  x09
26C0:  MOVLB  0
26C2:  CALL   0778
26C6:  MOVFF  03,B5
26CA:  MOVFF  02,B4
26CE:  MOVFF  01,B3
26D2:  MOVFF  00,B2
....................    Temporal1=Temporal1/100.0; 
26D6:  MOVFF  B5,121
26DA:  MOVFF  B4,120
26DE:  MOVFF  B3,11F
26E2:  MOVFF  B2,11E
26E6:  MOVLB  1
26E8:  CLRF   x25
26EA:  CLRF   x24
26EC:  MOVLW  48
26EE:  MOVWF  x23
26F0:  MOVLW  85
26F2:  MOVWF  x22
26F4:  MOVLB  0
26F6:  CALL   07AE
26FA:  MOVFF  03,B5
26FE:  MOVFF  02,B4
2702:  MOVFF  01,B3
2706:  MOVFF  00,B2
....................    Diferencia=Entero1+Temporal1; 
270A:  MOVLB  1
270C:  CLRF   x0A
270E:  MOVFF  24,109
2712:  MOVLB  0
2714:  CALL   0778
2718:  BCF    FD8.1
271A:  MOVFF  03,121
271E:  MOVFF  02,120
2722:  MOVFF  01,11F
2726:  MOVFF  00,11E
272A:  MOVFF  B5,125
272E:  MOVFF  B4,124
2732:  MOVFF  B3,123
2736:  MOVFF  B2,122
273A:  CALL   090C
273E:  MOVFF  03,BD
2742:  MOVFF  02,BC
2746:  MOVFF  01,BB
274A:  MOVFF  00,BA
....................     
....................    negativo=read_eeprom(50); 
274E:  MOVFF  FF2,100
2752:  BCF    FF2.7
2754:  MOVLW  32
2756:  MOVWF  FA9
2758:  BCF    FA6.6
275A:  BCF    FA6.7
275C:  BSF    FA6.0
275E:  MOVF   FA8,W
2760:  MOVLB  1
2762:  BTFSC  x00.7
2764:  BSF    FF2.7
2766:  MOVWF  2B
....................  
....................    MediaMovil=read_eeprom(42); 
2768:  MOVFF  FF2,100
276C:  BCF    FF2.7
276E:  MOVLW  2A
2770:  MOVWF  FA9
2772:  BCF    FA6.6
2774:  BCF    FA6.7
2776:  BSF    FA6.0
2778:  MOVF   FA8,W
277A:  BTFSC  x00.7
277C:  BSF    FF2.7
277E:  MOVWF  2A
....................    if(MediaMovil>12) 
2780:  MOVF   2A,W
2782:  SUBLW  0C
2784:  BC    278A
....................    {MediaMovil=12;} 
2786:  MOVLW  0C
2788:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
278A:  MOVF   2A,F
278C:  BNZ   2792
....................    {MediaMovil=1;} 
278E:  MOVLW  01
2790:  MOVWF  2A
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
2792:  MOVFF  FF2,100
2796:  BCF    FF2.7
2798:  MOVLW  46
279A:  MOVWF  FA9
279C:  BCF    FA6.6
279E:  BCF    FA6.7
27A0:  BSF    FA6.0
27A2:  MOVF   FA8,W
27A4:  BTFSC  x00.7
27A6:  BSF    FF2.7
27A8:  MOVWF  30
27AA:  MOVFF  FF2,100
27AE:  BCF    FF2.7
27B0:  MOVLW  47
27B2:  MOVWF  FA9
27B4:  BCF    FA6.6
27B6:  BCF    FA6.7
27B8:  BSF    FA6.0
27BA:  MOVF   FA8,W
27BC:  BTFSC  x00.7
27BE:  BSF    FF2.7
27C0:  MOVWF  31
27C2:  MOVFF  FF2,100
27C6:  BCF    FF2.7
27C8:  MOVLW  48
27CA:  MOVWF  FA9
27CC:  BCF    FA6.6
27CE:  BCF    FA6.7
27D0:  BSF    FA6.0
27D2:  MOVF   FA8,W
27D4:  BTFSC  x00.7
27D6:  BSF    FF2.7
27D8:  MOVWF  32
27DA:  MOVFF  FF2,100
27DE:  BCF    FF2.7
27E0:  MOVLW  49
27E2:  MOVWF  FA9
27E4:  BCF    FA6.6
27E6:  BCF    FA6.7
27E8:  BSF    FA6.0
27EA:  MOVF   FA8,W
27EC:  BTFSC  x00.7
27EE:  BSF    FF2.7
27F0:  MOVWF  01
27F2:  BCF    34.2
27F4:  BTFSC  01.0
27F6:  BSF    34.2
....................    Menu=200; 
27F8:  MOVLW  C8
27FA:  MOVWF  17
....................    
....................    while(true){ 
....................     
....................    while(Menu==200) 
....................    { 
27FC:  MOVF   17,W
27FE:  SUBLW  C8
2800:  BNZ   28D6
....................       if(inicio==0) 
2802:  BTFSC  34.4
2804:  BRA    28D4
....................       { 
....................          delay_ms(500); 
2806:  MOVLW  02
2808:  MOVWF  x00
280A:  MOVLW  FA
280C:  MOVWF  x1B
280E:  MOVLB  0
2810:  CALL   074E
2814:  MOVLB  1
2816:  DECFSZ x00,F
2818:  BRA    280A
....................          if(input(PIN_B0)) 
281A:  BSF    F93.0
281C:  BTFSS  F81.0
281E:  BRA    28D4
....................          { 
....................             lcd_init(); 
2820:  MOVLB  0
2822:  CALL   0BF8
....................             Pantalla_on; 
2826:  BSF    F8B.1
2828:  BCF    F94.1
....................             lcd_gotoxy(1,1); 
282A:  MOVLW  01
282C:  MOVLB  1
282E:  MOVWF  x16
2830:  MOVWF  x17
2832:  MOVLB  0
2834:  CALL   0C64
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
2838:  MOVLW  7A
283A:  MOVWF  FF6
283C:  MOVLW  01
283E:  MOVWF  FF7
2840:  CALL   0D42
....................             lcd_gotoxy(1,2); 
2844:  MOVLW  01
2846:  MOVLB  1
2848:  MOVWF  x16
284A:  MOVLW  02
284C:  MOVWF  x17
284E:  MOVLB  0
2850:  CALL   0C64
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
2854:  MOVLW  90
2856:  MOVWF  FF6
2858:  MOVLW  01
285A:  MOVWF  FF7
285C:  CALL   0D42
....................             lcd_gotoxy(1,3); 
2860:  MOVLW  01
2862:  MOVLB  1
2864:  MOVWF  x16
2866:  MOVLW  03
2868:  MOVWF  x17
286A:  MOVLB  0
286C:  CALL   0C64
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
2870:  MOVLW  A6
2872:  MOVWF  FF6
2874:  MOVLW  01
2876:  MOVWF  FF7
2878:  CALL   0D42
....................             lcd_gotoxy(1,4); 
287C:  MOVLW  01
287E:  MOVLB  1
2880:  MOVWF  x16
2882:  MOVLW  04
2884:  MOVWF  x17
2886:  MOVLB  0
2888:  CALL   0C64
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
288C:  MOVLW  BC
288E:  MOVWF  FF6
2890:  MOVLW  01
2892:  MOVWF  FF7
2894:  CALL   0D42
....................             delay_ms(2000); 
2898:  MOVLW  08
289A:  MOVLB  1
289C:  MOVWF  x00
289E:  MOVLW  FA
28A0:  MOVWF  x1B
28A2:  MOVLB  0
28A4:  CALL   074E
28A8:  MOVLB  1
28AA:  DECFSZ x00,F
28AC:  BRA    289E
....................             printf(lcd_putc,"\f"); 
28AE:  MOVLW  0C
28B0:  MOVWF  x15
28B2:  MOVLB  0
28B4:  CALL   0CD6
....................             inicio=1; 
28B8:  BSF    34.4
....................             Menu=0; 
28BA:  CLRF   17
....................             ModoSleep=0; 
28BC:  BCF    34.3
....................             delay_ms(500); 
28BE:  MOVLW  02
28C0:  MOVLB  1
28C2:  MOVWF  x00
28C4:  MOVLW  FA
28C6:  MOVWF  x1B
28C8:  MOVLB  0
28CA:  CALL   074E
28CE:  MOVLB  1
28D0:  DECFSZ x00,F
28D2:  BRA    28C4
....................          } 
....................       } 
....................    } 
28D4:  BRA    27FC
....................     
....................    if(t_latencia>=3000) 
28D6:  MOVF   51,W
28D8:  SUBLW  0A
28DA:  BC    28E8
28DC:  XORLW  FF
28DE:  BNZ   28E6
28E0:  MOVF   50,W
28E2:  SUBLW  B7
28E4:  BC    28E8
....................    { 
....................       Latencia=1; 
28E6:  BSF    34.1
....................    } 
....................     
....................    if(segundos==60) 
28E8:  MOVF   30,W
28EA:  SUBLW  3C
28EC:  BNZ   28F2
....................    { 
....................       segundos=0;minutos++; 
28EE:  CLRF   30
28F0:  INCF   31,F
....................    } 
....................           
....................    if(minutos==60) 
28F2:  MOVF   31,W
28F4:  SUBLW  3C
28F6:  BNZ   28FC
....................    { 
....................       minutos=0;horas++; 
28F8:  CLRF   31
28FA:  INCF   32,F
....................    } 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
28FC:  MOVF   17,F
28FE:  BTFSS  FD8.2
2900:  BRA    2D5A
....................    flag_latencia=1;set_pwm1_duty(0); 
2902:  BSF    34.0
2904:  CLRF   FBE
....................       if(Latencia==1) 
2906:  BTFSS  34.1
2908:  BRA    2918
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
290A:  MOVLW  0C
290C:  MOVWF  x15
290E:  MOVLB  0
2910:  CALL   0CD6
2914:  RESET
2916:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
2918:  MOVLW  01
291A:  MOVWF  x16
291C:  MOVWF  x17
291E:  MOVLB  0
2920:  CALL   0C64
....................    printf(lcd_putc,"     Ingrese      "); 
2924:  MOVLW  D2
2926:  MOVWF  FF6
2928:  MOVLW  01
292A:  MOVWF  FF7
292C:  CALL   0D42
....................    lcd_gotoxy(1,2); 
2930:  MOVLW  01
2932:  MOVLB  1
2934:  MOVWF  x16
2936:  MOVLW  02
2938:  MOVWF  x17
293A:  MOVLB  0
293C:  CALL   0C64
....................    printf(lcd_putc,"    Contraseña      "); 
2940:  MOVLW  E6
2942:  MOVWF  FF6
2944:  MOVLW  01
2946:  MOVWF  FF7
2948:  CALL   0D42
....................    lcd_gotoxy(1,3); 
294C:  MOVLW  01
294E:  MOVLB  1
2950:  MOVWF  x16
2952:  MOVLW  03
2954:  MOVWF  x17
2956:  MOVLB  0
2958:  CALL   0C64
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
295C:  MOVLW  FC
295E:  MOVWF  FF6
2960:  MOVLW  01
2962:  MOVWF  FF7
2964:  MOVLW  0A
2966:  MOVLB  1
2968:  MOVWF  x08
296A:  MOVLB  0
296C:  CALL   0D62
2970:  MOVFF  39,100
2974:  MOVLW  1F
2976:  MOVLB  1
2978:  MOVWF  x01
297A:  MOVLB  0
297C:  CALL   0DB6
2980:  MOVFF  3A,100
2984:  MOVLW  1F
2986:  MOVLB  1
2988:  MOVWF  x01
298A:  MOVLB  0
298C:  CALL   0DB6
2990:  MOVFF  3B,100
2994:  MOVLW  1F
2996:  MOVLB  1
2998:  MOVWF  x01
299A:  MOVLB  0
299C:  CALL   0DB6
29A0:  MOVFF  3C,100
29A4:  MOVLW  1F
29A6:  MOVLB  1
29A8:  MOVWF  x01
29AA:  MOVLB  0
29AC:  CALL   0DB6
29B0:  MOVLW  20
29B2:  MOVLB  1
29B4:  MOVWF  x15
29B6:  MOVLB  0
29B8:  CALL   0CD6
29BC:  MOVLW  20
29BE:  MOVLB  1
29C0:  MOVWF  x15
29C2:  MOVLB  0
29C4:  CALL   0CD6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
29C8:  BSF    F93.3
29CA:  BTFSS  F81.3
29CC:  BRA    29F8
....................       {  if(Flanco == 0)  
29CE:  BTFSC  33.4
29D0:  BRA    29F6
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
29D2:  MOVLW  0B
29D4:  SUBWF  1A,W
29D6:  CLRF   03
29D8:  ADDLW  39
29DA:  MOVWF  FE9
29DC:  MOVLW  00
29DE:  ADDWFC 03,W
29E0:  MOVWF  FEA
29E2:  INCF   FEF,F
29E4:  BSF    33.4
29E6:  MOVLW  1E
29E8:  MOVLB  1
29EA:  MOVWF  x1B
29EC:  MOVLB  0
29EE:  CALL   074E
29F2:  CLRF   51
29F4:  CLRF   50
....................          else 
29F6:  BRA    29FA
....................             {Flanco = 0;} 
29F8:  BCF    33.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
29FA:  BSF    F93.2
29FC:  BTFSS  F81.2
29FE:  BRA    2A2A
....................       {  if(Flanco2 == 0)  
2A00:  BTFSC  33.6
2A02:  BRA    2A28
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2A04:  MOVLW  0B
2A06:  SUBWF  1A,W
2A08:  CLRF   03
2A0A:  ADDLW  39
2A0C:  MOVWF  FE9
2A0E:  MOVLW  00
2A10:  ADDWFC 03,W
2A12:  MOVWF  FEA
2A14:  DECF   FEF,F
2A16:  BSF    33.6
2A18:  MOVLW  1E
2A1A:  MOVLB  1
2A1C:  MOVWF  x1B
2A1E:  MOVLB  0
2A20:  CALL   074E
2A24:  CLRF   51
2A26:  CLRF   50
....................          else 
2A28:  BRA    2A2C
....................             {Flanco2 = 0;} 
2A2A:  BCF    33.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2A2C:  BSF    F93.0
2A2E:  BTFSS  F81.0
2A30:  BRA    2A58
....................       {  if(Flanco1 == 0)  
2A32:  BTFSC  33.5
2A34:  BRA    2A56
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2A36:  BSF    33.5
2A38:  INCF   1A,F
2A3A:  MOVLW  1E
2A3C:  MOVLB  1
2A3E:  MOVWF  x1B
2A40:  MOVLB  0
2A42:  CALL   074E
2A46:  MOVLW  0C
2A48:  MOVLB  1
2A4A:  MOVWF  x15
2A4C:  MOVLB  0
2A4E:  CALL   0CD6
2A52:  CLRF   51
2A54:  CLRF   50
....................          else 
2A56:  BRA    2A5A
....................             {Flanco1 = 0;}    
2A58:  BCF    33.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2A5A:  BSF    F93.1
2A5C:  BTFSS  F81.1
2A5E:  BRA    2A86
....................       {  if(Flanco3 == 0)  
2A60:  BTFSC  33.7
2A62:  BRA    2A84
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2A64:  BSF    33.7
2A66:  DECF   1A,F
2A68:  MOVLW  1E
2A6A:  MOVLB  1
2A6C:  MOVWF  x1B
2A6E:  MOVLB  0
2A70:  CALL   074E
2A74:  MOVLW  0C
2A76:  MOVLB  1
2A78:  MOVWF  x15
2A7A:  MOVLB  0
2A7C:  CALL   0CD6
2A80:  CLRF   51
2A82:  CLRF   50
....................          else 
2A84:  BRA    2A88
....................             {Flanco3 = 0;}     
2A86:  BCF    33.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2A88:  MOVLW  0B
2A8A:  SUBWF  1A,W
2A8C:  CLRF   03
2A8E:  ADDLW  39
2A90:  MOVWF  FE9
2A92:  MOVLW  00
2A94:  ADDWFC 03,W
2A96:  MOVWF  FEA
2A98:  BTFSC  FEF.7
2A9A:  BRA    2A9E
2A9C:  BRA    2AB2
....................        {clave[unidad-11]=9;} 
2A9E:  MOVLW  0B
2AA0:  SUBWF  1A,W
2AA2:  CLRF   03
2AA4:  ADDLW  39
2AA6:  MOVWF  FE9
2AA8:  MOVLW  00
2AAA:  ADDWFC 03,W
2AAC:  MOVWF  FEA
2AAE:  MOVLW  09
2AB0:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2AB2:  MOVLW  0B
2AB4:  SUBWF  1A,W
2AB6:  CLRF   03
2AB8:  ADDLW  39
2ABA:  MOVWF  FE9
2ABC:  MOVLW  00
2ABE:  ADDWFC 03,W
2AC0:  MOVWF  FEA
2AC2:  BTFSC  FEF.7
2AC4:  BRA    2ADE
2AC6:  MOVF   FEF,W
2AC8:  SUBLW  09
2ACA:  BC    2ADE
....................        {clave[unidad-11]=0;} 
2ACC:  MOVLW  0B
2ACE:  SUBWF  1A,W
2AD0:  CLRF   03
2AD2:  ADDLW  39
2AD4:  MOVWF  FE9
2AD6:  MOVLW  00
2AD8:  ADDWFC 03,W
2ADA:  MOVWF  FEA
2ADC:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2ADE:  MOVF   1A,W
2AE0:  SUBLW  0A
2AE2:  BNC   2AE8
....................        {unidad=11;} 
2AE4:  MOVLW  0B
2AE6:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2AE8:  MOVFF  1A,116
2AEC:  MOVLW  04
2AEE:  MOVLB  1
2AF0:  MOVWF  x17
2AF2:  MOVLB  0
2AF4:  CALL   0C64
....................        lcd_putc(t[2]); 
2AF8:  MOVFF  38,115
2AFC:  CALL   0CD6
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2B00:  MOVF   1A,W
2B02:  SUBLW  0E
2B04:  BTFSC  FD8.0
2B06:  BRA    2D30
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2B08:  MOVF   39,W
2B0A:  SUBLW  03
2B0C:  BNZ   2BF0
2B0E:  MOVF   3A,W
2B10:  SUBLW  08
2B12:  BNZ   2BF0
2B14:  MOVF   3B,W
2B16:  SUBLW  09
2B18:  BNZ   2BF0
2B1A:  MOVF   3C,W
2B1C:  SUBLW  02
2B1E:  BNZ   2BF0
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2B20:  CLRF   FA9
2B22:  CLRF   FA8
2B24:  BCF    FA6.6
2B26:  BCF    FA6.7
2B28:  BSF    FA6.2
2B2A:  MOVF   FF2,W
2B2C:  MOVWF  00
2B2E:  BCF    FF2.7
2B30:  MOVLB  F
2B32:  MOVLW  55
2B34:  MOVWF  FA7
2B36:  MOVLW  AA
2B38:  MOVWF  FA7
2B3A:  BSF    FA6.1
2B3C:  BTFSC  FA6.1
2B3E:  BRA    2B3C
2B40:  BCF    FA6.2
2B42:  MOVF   00,W
2B44:  IORWF  FF2,F
2B46:  MOVLW  14
2B48:  MOVLB  1
2B4A:  MOVWF  x1B
2B4C:  MOVLB  0
2B4E:  CALL   074E
2B52:  MOVLW  01
2B54:  MOVWF  FA9
2B56:  CLRF   FA8
2B58:  BCF    FA6.6
2B5A:  BCF    FA6.7
2B5C:  BSF    FA6.2
2B5E:  MOVF   FF2,W
2B60:  MOVWF  00
2B62:  BCF    FF2.7
2B64:  MOVLB  F
2B66:  MOVLW  55
2B68:  MOVWF  FA7
2B6A:  MOVLW  AA
2B6C:  MOVWF  FA7
2B6E:  BSF    FA6.1
2B70:  BTFSC  FA6.1
2B72:  BRA    2B70
2B74:  BCF    FA6.2
2B76:  MOVF   00,W
2B78:  IORWF  FF2,F
2B7A:  MOVLW  14
2B7C:  MOVLB  1
2B7E:  MOVWF  x1B
2B80:  MOVLB  0
2B82:  CALL   074E
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2B86:  MOVLW  02
2B88:  MOVWF  FA9
2B8A:  CLRF   FA8
2B8C:  BCF    FA6.6
2B8E:  BCF    FA6.7
2B90:  BSF    FA6.2
2B92:  MOVF   FF2,W
2B94:  MOVWF  00
2B96:  BCF    FF2.7
2B98:  MOVLB  F
2B9A:  MOVLW  55
2B9C:  MOVWF  FA7
2B9E:  MOVLW  AA
2BA0:  MOVWF  FA7
2BA2:  BSF    FA6.1
2BA4:  BTFSC  FA6.1
2BA6:  BRA    2BA4
2BA8:  BCF    FA6.2
2BAA:  MOVF   00,W
2BAC:  IORWF  FF2,F
2BAE:  MOVLW  14
2BB0:  MOVLB  1
2BB2:  MOVWF  x1B
2BB4:  MOVLB  0
2BB6:  CALL   074E
2BBA:  MOVLW  03
2BBC:  MOVWF  FA9
2BBE:  CLRF   FA8
2BC0:  BCF    FA6.6
2BC2:  BCF    FA6.7
2BC4:  BSF    FA6.2
2BC6:  MOVF   FF2,W
2BC8:  MOVWF  00
2BCA:  BCF    FF2.7
2BCC:  MOVLB  F
2BCE:  MOVLW  55
2BD0:  MOVWF  FA7
2BD2:  MOVLW  AA
2BD4:  MOVWF  FA7
2BD6:  BSF    FA6.1
2BD8:  BTFSC  FA6.1
2BDA:  BRA    2BD8
2BDC:  BCF    FA6.2
2BDE:  MOVF   00,W
2BE0:  IORWF  FF2,F
2BE2:  MOVLW  14
2BE4:  MOVLB  1
2BE6:  MOVWF  x1B
2BE8:  MOVLB  0
2BEA:  CALL   074E
....................              reset_cpu();} 
2BEE:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
2BF0:  MOVF   3D,W
2BF2:  SUBWF  39,W
2BF4:  BNZ   2CAA
2BF6:  MOVF   3E,W
2BF8:  SUBWF  3A,W
2BFA:  BNZ   2CAA
2BFC:  MOVF   3F,W
2BFE:  SUBWF  3B,W
2C00:  BNZ   2CAA
2C02:  MOVF   40,W
2C04:  SUBWF  3C,W
2C06:  BNZ   2CAA
....................             {lcd_gotoxy(1,1); 
2C08:  MOVLW  01
2C0A:  MOVLB  1
2C0C:  MOVWF  x16
2C0E:  MOVWF  x17
2C10:  MOVLB  0
2C12:  CALL   0C64
....................             printf(lcd_putc,"                   "); 
2C16:  MOVLW  12
2C18:  MOVWF  FF6
2C1A:  MOVLW  02
2C1C:  MOVWF  FF7
2C1E:  CALL   0D42
....................             lcd_gotoxy(1,2); 
2C22:  MOVLW  01
2C24:  MOVLB  1
2C26:  MOVWF  x16
2C28:  MOVLW  02
2C2A:  MOVWF  x17
2C2C:  MOVLB  0
2C2E:  CALL   0C64
....................             printf(lcd_putc,"     Contraseña    "); 
2C32:  MOVLW  26
2C34:  MOVWF  FF6
2C36:  MOVLW  02
2C38:  MOVWF  FF7
2C3A:  CALL   0D42
....................             lcd_gotoxy(1,3); 
2C3E:  MOVLW  01
2C40:  MOVLB  1
2C42:  MOVWF  x16
2C44:  MOVLW  03
2C46:  MOVWF  x17
2C48:  MOVLB  0
2C4A:  CALL   0C64
....................             printf(lcd_putc,"      Correcta     "); 
2C4E:  MOVLW  3A
2C50:  MOVWF  FF6
2C52:  MOVLW  02
2C54:  MOVWF  FF7
2C56:  CALL   0D42
....................             lcd_gotoxy(1,4); 
2C5A:  MOVLW  01
2C5C:  MOVLB  1
2C5E:  MOVWF  x16
2C60:  MOVLW  04
2C62:  MOVWF  x17
2C64:  MOVLB  0
2C66:  CALL   0C64
....................             printf(lcd_putc,"                   "); 
2C6A:  MOVLW  4E
2C6C:  MOVWF  FF6
2C6E:  MOVLW  02
2C70:  MOVWF  FF7
2C72:  CALL   0D42
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");//Damper_on; 
2C76:  MOVLW  02
2C78:  MOVLB  1
2C7A:  MOVWF  x00
2C7C:  MOVLW  FA
2C7E:  MOVWF  x1B
2C80:  MOVLB  0
2C82:  CALL   074E
2C86:  MOVLB  1
2C88:  DECFSZ x00,F
2C8A:  BRA    2C7C
2C8C:  MOVLW  14
2C8E:  MOVWF  17
2C90:  MOVLW  0B
2C92:  MOVWF  1A
2C94:  MOVLW  0C
2C96:  MOVWF  x15
2C98:  MOVLB  0
2C9A:  CALL   0CD6
....................             flag_latencia=0;Latencia=0; 
2C9E:  BCF    34.0
2CA0:  BCF    34.1
....................             t_latencia=0;flag_iniciodamper=1;} 
2CA2:  CLRF   51
2CA4:  CLRF   50
2CA6:  BSF    34.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2CA8:  BRA    2D30
....................          {lcd_gotoxy(1,1); 
2CAA:  MOVLW  01
2CAC:  MOVLB  1
2CAE:  MOVWF  x16
2CB0:  MOVWF  x17
2CB2:  MOVLB  0
2CB4:  CALL   0C64
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2CB8:  MOVLW  01
2CBA:  MOVLB  1
2CBC:  MOVWF  x16
2CBE:  MOVLW  02
2CC0:  MOVWF  x17
2CC2:  MOVLB  0
2CC4:  CALL   0C64
....................             printf(lcd_putc,"     Contraseña    "); 
2CC8:  MOVLW  62
2CCA:  MOVWF  FF6
2CCC:  MOVLW  02
2CCE:  MOVWF  FF7
2CD0:  CALL   0D42
....................             lcd_gotoxy(1,3); 
2CD4:  MOVLW  01
2CD6:  MOVLB  1
2CD8:  MOVWF  x16
2CDA:  MOVLW  03
2CDC:  MOVWF  x17
2CDE:  MOVLB  0
2CE0:  CALL   0C64
....................             printf(lcd_putc,"     Incorrecta    "); 
2CE4:  MOVLW  76
2CE6:  MOVWF  FF6
2CE8:  MOVLW  02
2CEA:  MOVWF  FF7
2CEC:  CALL   0D42
....................             lcd_gotoxy(1,4); 
2CF0:  MOVLW  01
2CF2:  MOVLB  1
2CF4:  MOVWF  x16
2CF6:  MOVLW  04
2CF8:  MOVWF  x17
2CFA:  MOVLB  0
2CFC:  CALL   0C64
....................             printf(lcd_putc,"                   "); 
2D00:  MOVLW  8A
2D02:  MOVWF  FF6
2D04:  MOVLW  02
2D06:  MOVWF  FF7
2D08:  CALL   0D42
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2D0C:  MOVLW  02
2D0E:  MOVLB  1
2D10:  MOVWF  x00
2D12:  MOVLW  FA
2D14:  MOVWF  x1B
2D16:  MOVLB  0
2D18:  CALL   074E
2D1C:  MOVLB  1
2D1E:  DECFSZ x00,F
2D20:  BRA    2D12
2D22:  MOVLW  0B
2D24:  MOVWF  1A
2D26:  MOVLW  0C
2D28:  MOVWF  x15
2D2A:  MOVLB  0
2D2C:  CALL   0CD6
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
2D30:  MOVF   1A,W
2D32:  SUBLW  0B
2D34:  BC    2D58
2D36:  MOVF   1A,W
2D38:  SUBLW  0D
2D3A:  BNC   2D58
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2D3C:  MOVLW  01
2D3E:  SUBWF  1A,W
2D40:  MOVLB  1
2D42:  MOVWF  x00
2D44:  MOVWF  x16
2D46:  MOVLW  04
2D48:  MOVWF  x17
2D4A:  MOVLB  0
2D4C:  CALL   0C64
....................             lcd_putc(t[1]); 
2D50:  MOVFF  37,115
2D54:  CALL   0CD6
2D58:  MOVLB  1
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2D5A:  DECFSZ 17,W
2D5C:  BRA    2F90
....................       if(paso<0) 
2D5E:  BTFSC  35.7
2D60:  BRA    2D64
2D62:  BRA    2D66
....................         {paso=0;} 
2D64:  CLRF   35
....................     
....................    lcd_gotoxy(1,1); 
2D66:  MOVLW  01
2D68:  MOVWF  x16
2D6A:  MOVWF  x17
2D6C:  MOVLB  0
2D6E:  CALL   0C64
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2D72:  MOVLW  9E
2D74:  MOVWF  FF6
2D76:  MOVLW  02
2D78:  MOVWF  FF7
2D7A:  CALL   0D42
....................     
....................    if(UP)//Si oprime hacia arriba 
2D7E:  BSF    F93.3
2D80:  BTFSS  F81.3
2D82:  BRA    2DA2
....................       {  if(Flanco == 0)  
2D84:  BTFSC  33.4
2D86:  BRA    2DA0
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
2D88:  DECF   1D,F
2D8A:  DECF   1B,F
2D8C:  MOVLW  01
2D8E:  ADDWF  1B,W
2D90:  MOVWF  1C
2D92:  BSF    33.4
2D94:  MOVLW  1E
2D96:  MOVLB  1
2D98:  MOVWF  x1B
2D9A:  MOVLB  0
2D9C:  CALL   074E
....................          else 
2DA0:  BRA    2DA4
....................             {Flanco = 0;} 
2DA2:  BCF    33.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2DA4:  BSF    F93.2
2DA6:  BTFSS  F81.2
2DA8:  BRA    2DC8
....................       {  if(Flanco2 == 0)  
2DAA:  BTFSC  33.6
2DAC:  BRA    2DC6
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
2DAE:  INCF   1D,F
2DB0:  INCF   1B,F
2DB2:  MOVLW  01
2DB4:  SUBWF  1B,W
2DB6:  MOVWF  1C
2DB8:  BSF    33.6
2DBA:  MOVLW  1E
2DBC:  MOVLB  1
2DBE:  MOVWF  x1B
2DC0:  MOVLB  0
2DC2:  CALL   074E
....................          else 
2DC6:  BRA    2DCA
....................             {Flanco2 = 0;} 
2DC8:  BCF    33.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
2DCA:  MOVF   1D,W
2DCC:  SUBWF  1F,W
2DCE:  BC    2DE0
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2DD0:  INCF   35,F
2DD2:  MOVFF  1D,1F
2DD6:  MOVLW  02
2DD8:  SUBWF  1F,W
2DDA:  MOVWF  1E
2DDC:  MOVLW  04
2DDE:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
2DE0:  MOVF   1E,W
2DE2:  SUBWF  1D,W
2DE4:  BC    2DF6
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2DE6:  DECF   35,F
2DE8:  MOVFF  1D,1E
2DEC:  MOVLW  02
2DEE:  ADDWF  1E,W
2DF0:  MOVWF  1F
2DF2:  MOVLW  02
2DF4:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
2DF6:  MOVF   1D,W
2DF8:  SUBWF  18,W
2DFA:  BC    2E0E
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2DFC:  MOVFF  19,1D
2E00:  MOVLW  02
2E02:  MOVWF  1B
2E04:  CLRF   35
2E06:  MOVFF  1D,1E
2E0A:  ADDWF  1E,W
2E0C:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
2E0E:  MOVF   19,W
2E10:  SUBWF  1D,W
2E12:  BC    2E2A
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
2E14:  MOVFF  18,1D
2E18:  MOVLW  04
2E1A:  MOVWF  1B
2E1C:  SUBWF  18,W
2E1E:  MOVWF  35
2E20:  MOVFF  1D,1F
2E24:  MOVLW  02
2E26:  SUBWF  1F,W
2E28:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
2E2A:  MOVLW  01
2E2C:  ADDWF  35,W
2E2E:  MOVLB  1
2E30:  MOVWF  x00
2E32:  MOVWF  x01
2E34:  MOVLW  02
2E36:  MOVWF  x02
2E38:  MOVLB  0
2E3A:  CALL   0E94
....................         mensajes(2+paso,3); 
2E3E:  MOVLW  02
2E40:  ADDWF  35,W
2E42:  MOVLB  1
2E44:  MOVWF  x00
2E46:  MOVWF  x01
2E48:  MOVLW  03
2E4A:  MOVWF  x02
2E4C:  MOVLB  0
2E4E:  CALL   0E94
....................         mensajes(3+paso,4); 
2E52:  MOVLW  03
2E54:  ADDWF  35,W
2E56:  MOVLB  1
2E58:  MOVWF  x00
2E5A:  MOVWF  x01
2E5C:  MOVLW  04
2E5E:  MOVWF  x02
2E60:  MOVLB  0
2E62:  CALL   0E94
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2E66:  MOVLW  01
2E68:  MOVLB  1
2E6A:  MOVWF  x16
2E6C:  MOVFF  1B,117
2E70:  MOVLB  0
2E72:  CALL   0C64
....................         lcd_putc(t[0]); 
2E76:  MOVFF  36,115
2E7A:  CALL   0CD6
....................  
....................         if(Flecha==2) 
2E7E:  MOVF   1B,W
2E80:  SUBLW  02
2E82:  BNZ   2EB4
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2E84:  MOVLW  01
2E86:  MOVLB  1
2E88:  MOVWF  x16
2E8A:  MOVLW  04
2E8C:  MOVWF  x17
2E8E:  MOVLB  0
2E90:  CALL   0C64
....................             lcd_putc(t[1]); 
2E94:  MOVFF  37,115
2E98:  CALL   0CD6
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2E9C:  MOVLW  01
2E9E:  MOVLB  1
2EA0:  MOVWF  x16
2EA2:  MOVLW  03
2EA4:  MOVWF  x17
2EA6:  MOVLB  0
2EA8:  CALL   0C64
....................             lcd_putc(t[1]); 
2EAC:  MOVFF  37,115
2EB0:  CALL   0CD6
....................           } 
....................          
....................         if(Flecha==4) 
2EB4:  MOVF   1B,W
2EB6:  SUBLW  04
2EB8:  BNZ   2EEA
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2EBA:  MOVLW  01
2EBC:  MOVLB  1
2EBE:  MOVWF  x16
2EC0:  MOVLW  02
2EC2:  MOVWF  x17
2EC4:  MOVLB  0
2EC6:  CALL   0C64
....................             lcd_putc(t[1]); 
2ECA:  MOVFF  37,115
2ECE:  CALL   0CD6
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2ED2:  MOVLW  01
2ED4:  MOVLB  1
2ED6:  MOVWF  x16
2ED8:  MOVLW  03
2EDA:  MOVWF  x17
2EDC:  MOVLB  0
2EDE:  CALL   0C64
....................             lcd_putc(t[1]); 
2EE2:  MOVFF  37,115
2EE6:  CALL   0CD6
....................           } 
....................          
....................         if(Flecha==3) 
2EEA:  MOVF   1B,W
2EEC:  SUBLW  03
2EEE:  BNZ   2F20
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2EF0:  MOVLW  01
2EF2:  MOVLB  1
2EF4:  MOVWF  x16
2EF6:  MOVLW  04
2EF8:  MOVWF  x17
2EFA:  MOVLB  0
2EFC:  CALL   0C64
....................             lcd_putc(t[1]); 
2F00:  MOVFF  37,115
2F04:  CALL   0CD6
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2F08:  MOVLW  01
2F0A:  MOVLB  1
2F0C:  MOVWF  x16
2F0E:  MOVLW  02
2F10:  MOVWF  x17
2F12:  MOVLB  0
2F14:  CALL   0C64
....................             lcd_putc(t[1]); 
2F18:  MOVFF  37,115
2F1C:  CALL   0CD6
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
2F20:  BSF    F93.0
2F22:  BTFSS  F81.0
2F24:  BRA    2F5A
....................       {  if(Flanco1 == 0)  
2F26:  BTFSC  33.5
2F28:  BRA    2F58
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(200);printf(lcd_putc,"\f"); 
2F2A:  MOVFF  1D,17
2F2E:  MOVLW  03
2F30:  MOVWF  1B
2F32:  MOVLW  C8
2F34:  MOVLB  1
2F36:  MOVWF  x1B
2F38:  MOVLB  0
2F3A:  CALL   074E
2F3E:  MOVLW  0C
2F40:  MOVLB  1
2F42:  MOVWF  x15
2F44:  MOVLB  0
2F46:  CALL   0CD6
....................             if(Menu==6) 
2F4A:  MOVF   17,W
2F4C:  SUBLW  06
2F4E:  BNZ   2F58
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
2F50:  CLRF   39
2F52:  CLRF   3A
2F54:  CLRF   3B
2F56:  CLRF   3C
....................          else 
2F58:  BRA    2F5C
....................             {Flanco1 = 0;}   
2F5A:  BCF    33.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
2F5C:  BSF    F93.1
2F5E:  BTFSS  F81.1
2F60:  BRA    2F8C
....................       {  if(Flanco3 == 0)  
2F62:  BTFSC  33.7
2F64:  BRA    2F8A
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
2F66:  MOVLW  02
2F68:  MOVLB  1
2F6A:  MOVWF  x00
2F6C:  MOVLW  FA
2F6E:  MOVWF  x1B
2F70:  MOVLB  0
2F72:  CALL   074E
2F76:  MOVLB  1
2F78:  DECFSZ x00,F
2F7A:  BRA    2F6C
2F7C:  MOVLW  14
2F7E:  MOVWF  17
2F80:  MOVLW  0C
2F82:  MOVWF  x15
2F84:  MOVLB  0
2F86:  CALL   0CD6
....................          else 
2F8A:  BRA    2F8E
....................             {Flanco3 = 0;}                
2F8C:  BCF    33.7
2F8E:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu para Cambio de Contraseña 
2F90:  MOVF   17,W
2F92:  SUBLW  02
2F94:  BTFSS  FD8.2
2F96:  BRA    32F8
....................    lcd_gotoxy(1,1); 
2F98:  MOVLW  01
2F9A:  MOVWF  x16
2F9C:  MOVWF  x17
2F9E:  MOVLB  0
2FA0:  CALL   0C64
....................    printf(lcd_putc,"      Ingrese       "); 
2FA4:  MOVLW  B4
2FA6:  MOVWF  FF6
2FA8:  MOVLW  02
2FAA:  MOVWF  FF7
2FAC:  CALL   0D42
....................    lcd_gotoxy(1,2); 
2FB0:  MOVLW  01
2FB2:  MOVLB  1
2FB4:  MOVWF  x16
2FB6:  MOVLW  02
2FB8:  MOVWF  x17
2FBA:  MOVLB  0
2FBC:  CALL   0C64
....................    printf(lcd_putc," Contraseña Actual  "); 
2FC0:  MOVLW  CA
2FC2:  MOVWF  FF6
2FC4:  MOVLW  02
2FC6:  MOVWF  FF7
2FC8:  CALL   0D42
....................    lcd_gotoxy(1,3); 
2FCC:  MOVLW  01
2FCE:  MOVLB  1
2FD0:  MOVWF  x16
2FD2:  MOVLW  03
2FD4:  MOVWF  x17
2FD6:  MOVLB  0
2FD8:  CALL   0C64
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2FDC:  MOVLW  E0
2FDE:  MOVWF  FF6
2FE0:  MOVLW  02
2FE2:  MOVWF  FF7
2FE4:  MOVLW  0A
2FE6:  MOVLB  1
2FE8:  MOVWF  x08
2FEA:  MOVLB  0
2FEC:  CALL   0D62
2FF0:  MOVFF  39,100
2FF4:  MOVLW  1F
2FF6:  MOVLB  1
2FF8:  MOVWF  x01
2FFA:  MOVLB  0
2FFC:  CALL   0DB6
3000:  MOVFF  3A,100
3004:  MOVLW  1F
3006:  MOVLB  1
3008:  MOVWF  x01
300A:  MOVLB  0
300C:  CALL   0DB6
3010:  MOVFF  3B,100
3014:  MOVLW  1F
3016:  MOVLB  1
3018:  MOVWF  x01
301A:  MOVLB  0
301C:  CALL   0DB6
3020:  MOVFF  3C,100
3024:  MOVLW  1F
3026:  MOVLB  1
3028:  MOVWF  x01
302A:  MOVLB  0
302C:  CALL   0DB6
3030:  MOVLW  20
3032:  MOVLB  1
3034:  MOVWF  x15
3036:  MOVLB  0
3038:  CALL   0CD6
303C:  MOVLW  20
303E:  MOVLB  1
3040:  MOVWF  x15
3042:  MOVLB  0
3044:  CALL   0CD6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3048:  BSF    F93.3
304A:  BTFSS  F81.3
304C:  BRA    3074
....................       {  if(Flanco == 0)  
304E:  BTFSC  33.4
3050:  BRA    3072
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3052:  MOVLW  0B
3054:  SUBWF  1A,W
3056:  CLRF   03
3058:  ADDLW  39
305A:  MOVWF  FE9
305C:  MOVLW  00
305E:  ADDWFC 03,W
3060:  MOVWF  FEA
3062:  INCF   FEF,F
3064:  BSF    33.4
3066:  MOVLW  1E
3068:  MOVLB  1
306A:  MOVWF  x1B
306C:  MOVLB  0
306E:  CALL   074E
....................          else 
3072:  BRA    3076
....................             {Flanco = 0;} 
3074:  BCF    33.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3076:  BSF    F93.2
3078:  BTFSS  F81.2
307A:  BRA    30A2
....................       {  if(Flanco2 == 0)  
307C:  BTFSC  33.6
307E:  BRA    30A0
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3080:  MOVLW  0B
3082:  SUBWF  1A,W
3084:  CLRF   03
3086:  ADDLW  39
3088:  MOVWF  FE9
308A:  MOVLW  00
308C:  ADDWFC 03,W
308E:  MOVWF  FEA
3090:  DECF   FEF,F
3092:  BSF    33.6
3094:  MOVLW  1E
3096:  MOVLB  1
3098:  MOVWF  x1B
309A:  MOVLB  0
309C:  CALL   074E
....................          else 
30A0:  BRA    30A4
....................             {Flanco2 = 0;} 
30A2:  BCF    33.6
....................     
....................       if(RIGHT)// Si oprime derecha 
30A4:  BSF    F93.0
30A6:  BTFSS  F81.0
30A8:  BRA    30CC
....................       {  if(Flanco1 == 0)  
30AA:  BTFSC  33.5
30AC:  BRA    30CA
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
30AE:  BSF    33.5
30B0:  INCF   1A,F
30B2:  MOVLW  1E
30B4:  MOVLB  1
30B6:  MOVWF  x1B
30B8:  MOVLB  0
30BA:  CALL   074E
30BE:  MOVLW  0C
30C0:  MOVLB  1
30C2:  MOVWF  x15
30C4:  MOVLB  0
30C6:  CALL   0CD6
....................          else 
30CA:  BRA    30CE
....................             {Flanco1 = 0;}    
30CC:  BCF    33.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
30CE:  BSF    F93.1
30D0:  BTFSS  F81.1
30D2:  BRA    30F6
....................       {  if(Flanco3 == 0)  
30D4:  BTFSC  33.7
30D6:  BRA    30F4
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
30D8:  BSF    33.7
30DA:  DECF   1A,F
30DC:  MOVLW  1E
30DE:  MOVLB  1
30E0:  MOVWF  x1B
30E2:  MOVLB  0
30E4:  CALL   074E
30E8:  MOVLW  0C
30EA:  MOVLB  1
30EC:  MOVWF  x15
30EE:  MOVLB  0
30F0:  CALL   0CD6
....................          else 
30F4:  BRA    30F8
....................             {Flanco3 = 0;}     
30F6:  BCF    33.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
30F8:  MOVLW  0B
30FA:  SUBWF  1A,W
30FC:  CLRF   03
30FE:  ADDLW  39
3100:  MOVWF  FE9
3102:  MOVLW  00
3104:  ADDWFC 03,W
3106:  MOVWF  FEA
3108:  BTFSC  FEF.7
310A:  BRA    310E
310C:  BRA    3122
....................        {clave[unidad-11]=9;} 
310E:  MOVLW  0B
3110:  SUBWF  1A,W
3112:  CLRF   03
3114:  ADDLW  39
3116:  MOVWF  FE9
3118:  MOVLW  00
311A:  ADDWFC 03,W
311C:  MOVWF  FEA
311E:  MOVLW  09
3120:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3122:  MOVLW  0B
3124:  SUBWF  1A,W
3126:  CLRF   03
3128:  ADDLW  39
312A:  MOVWF  FE9
312C:  MOVLW  00
312E:  ADDWFC 03,W
3130:  MOVWF  FEA
3132:  BTFSC  FEF.7
3134:  BRA    314E
3136:  MOVF   FEF,W
3138:  SUBLW  09
313A:  BC    314E
....................        {clave[unidad-11]=0;} 
313C:  MOVLW  0B
313E:  SUBWF  1A,W
3140:  CLRF   03
3142:  ADDLW  39
3144:  MOVWF  FE9
3146:  MOVLW  00
3148:  ADDWFC 03,W
314A:  MOVWF  FEA
314C:  CLRF   FEF
....................        if(unidad<11) 
314E:  MOVF   1A,W
3150:  SUBLW  0A
3152:  BNC   3164
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
3154:  MOVLW  01
3156:  MOVWF  17
3158:  CLRF   35
315A:  MOVLW  02
315C:  MOVWF  1B
315E:  MOVWF  1D
3160:  MOVLW  0B
3162:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3164:  MOVFF  1A,116
3168:  MOVLW  04
316A:  MOVLB  1
316C:  MOVWF  x17
316E:  MOVLB  0
3170:  CALL   0C64
....................        lcd_putc(t[2]); 
3174:  MOVFF  38,115
3178:  CALL   0CD6
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
317C:  MOVF   1A,W
317E:  SUBLW  0E
3180:  BTFSC  FD8.0
3182:  BRA    32CE
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3184:  MOVF   3D,W
3186:  SUBWF  39,W
3188:  BNZ   323C
318A:  MOVF   3E,W
318C:  SUBWF  3A,W
318E:  BNZ   323C
3190:  MOVF   3F,W
3192:  SUBWF  3B,W
3194:  BNZ   323C
3196:  MOVF   40,W
3198:  SUBWF  3C,W
319A:  BNZ   323C
....................             {lcd_gotoxy(1,1); 
319C:  MOVLW  01
319E:  MOVLB  1
31A0:  MOVWF  x16
31A2:  MOVWF  x17
31A4:  MOVLB  0
31A6:  CALL   0C64
....................             printf(lcd_putc,"                    "); 
31AA:  MOVLW  F6
31AC:  MOVWF  FF6
31AE:  MOVLW  02
31B0:  MOVWF  FF7
31B2:  CALL   0D42
....................             lcd_gotoxy(1,2); 
31B6:  MOVLW  01
31B8:  MOVLB  1
31BA:  MOVWF  x16
31BC:  MOVLW  02
31BE:  MOVWF  x17
31C0:  MOVLB  0
31C2:  CALL   0C64
....................             printf(lcd_putc,"     Contraseña     "); 
31C6:  MOVLW  0C
31C8:  MOVWF  FF6
31CA:  MOVLW  03
31CC:  MOVWF  FF7
31CE:  CALL   0D42
....................             lcd_gotoxy(1,3); 
31D2:  MOVLW  01
31D4:  MOVLB  1
31D6:  MOVWF  x16
31D8:  MOVLW  03
31DA:  MOVWF  x17
31DC:  MOVLB  0
31DE:  CALL   0C64
....................             printf(lcd_putc,"      Correcta      "); 
31E2:  MOVLW  22
31E4:  MOVWF  FF6
31E6:  MOVLW  03
31E8:  MOVWF  FF7
31EA:  CALL   0D42
....................             lcd_gotoxy(1,4); 
31EE:  MOVLW  01
31F0:  MOVLB  1
31F2:  MOVWF  x16
31F4:  MOVLW  04
31F6:  MOVWF  x17
31F8:  MOVLB  0
31FA:  CALL   0C64
....................             printf(lcd_putc,"                    "); 
31FE:  MOVLW  38
3200:  MOVWF  FF6
3202:  MOVLW  03
3204:  MOVWF  FF7
3206:  CALL   0D42
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
320A:  MOVLW  02
320C:  MOVLB  1
320E:  MOVWF  x00
3210:  MOVLW  FA
3212:  MOVWF  x1B
3214:  MOVLB  0
3216:  CALL   074E
321A:  MOVLB  1
321C:  DECFSZ x00,F
321E:  BRA    3210
3220:  MOVLW  33
3222:  MOVWF  17
3224:  MOVLW  0B
3226:  MOVWF  1A
3228:  MOVLW  0C
322A:  MOVWF  x15
322C:  MOVLB  0
322E:  CALL   0CD6
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3232:  CLRF   39
3234:  CLRF   3A
3236:  CLRF   3B
3238:  CLRF   3C
....................          else 
323A:  BRA    32CE
....................          {lcd_gotoxy(1,1); 
323C:  MOVLW  01
323E:  MOVLB  1
3240:  MOVWF  x16
3242:  MOVWF  x17
3244:  MOVLB  0
3246:  CALL   0C64
....................             printf(lcd_putc,"                    "); 
324A:  MOVLW  4E
324C:  MOVWF  FF6
324E:  MOVLW  03
3250:  MOVWF  FF7
3252:  CALL   0D42
....................             lcd_gotoxy(1,2); 
3256:  MOVLW  01
3258:  MOVLB  1
325A:  MOVWF  x16
325C:  MOVLW  02
325E:  MOVWF  x17
3260:  MOVLB  0
3262:  CALL   0C64
....................             printf(lcd_putc,"     Contraseña     "); 
3266:  MOVLW  64
3268:  MOVWF  FF6
326A:  MOVLW  03
326C:  MOVWF  FF7
326E:  CALL   0D42
....................             lcd_gotoxy(1,3); 
3272:  MOVLW  01
3274:  MOVLB  1
3276:  MOVWF  x16
3278:  MOVLW  03
327A:  MOVWF  x17
327C:  MOVLB  0
327E:  CALL   0C64
....................             printf(lcd_putc,"     Incorrecta     "); 
3282:  MOVLW  7A
3284:  MOVWF  FF6
3286:  MOVLW  03
3288:  MOVWF  FF7
328A:  CALL   0D42
....................             lcd_gotoxy(1,4); 
328E:  MOVLW  01
3290:  MOVLB  1
3292:  MOVWF  x16
3294:  MOVLW  04
3296:  MOVWF  x17
3298:  MOVLB  0
329A:  CALL   0C64
....................             printf(lcd_putc,"                    "); 
329E:  MOVLW  90
32A0:  MOVWF  FF6
32A2:  MOVLW  03
32A4:  MOVWF  FF7
32A6:  CALL   0D42
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
32AA:  MOVLW  02
32AC:  MOVLB  1
32AE:  MOVWF  x00
32B0:  MOVLW  FA
32B2:  MOVWF  x1B
32B4:  MOVLB  0
32B6:  CALL   074E
32BA:  MOVLB  1
32BC:  DECFSZ x00,F
32BE:  BRA    32B0
32C0:  MOVLW  0B
32C2:  MOVWF  1A
32C4:  MOVLW  0C
32C6:  MOVWF  x15
32C8:  MOVLB  0
32CA:  CALL   0CD6
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
32CE:  MOVF   1A,W
32D0:  SUBLW  0B
32D2:  BC    32F6
32D4:  MOVF   1A,W
32D6:  SUBLW  0D
32D8:  BNC   32F6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
32DA:  MOVLW  01
32DC:  SUBWF  1A,W
32DE:  MOVLB  1
32E0:  MOVWF  x00
32E2:  MOVWF  x16
32E4:  MOVLW  04
32E6:  MOVWF  x17
32E8:  MOVLB  0
32EA:  CALL   0C64
....................             lcd_putc(t[1]); 
32EE:  MOVFF  37,115
32F2:  CALL   0CD6
32F6:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
32F8:  MOVF   17,W
32FA:  SUBLW  33
32FC:  BTFSS  FD8.2
32FE:  BRA    3676
....................    lcd_gotoxy(1,1); 
3300:  MOVLW  01
3302:  MOVWF  x16
3304:  MOVWF  x17
3306:  MOVLB  0
3308:  CALL   0C64
....................    printf(lcd_putc,"     Ingrese        "); 
330C:  MOVLW  A6
330E:  MOVWF  FF6
3310:  MOVLW  03
3312:  MOVWF  FF7
3314:  CALL   0D42
....................    lcd_gotoxy(1,2); 
3318:  MOVLW  01
331A:  MOVLB  1
331C:  MOVWF  x16
331E:  MOVLW  02
3320:  MOVWF  x17
3322:  MOVLB  0
3324:  CALL   0C64
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
3328:  MOVLW  BC
332A:  MOVWF  FF6
332C:  MOVLW  03
332E:  MOVWF  FF7
3330:  CALL   0D42
....................    lcd_gotoxy(1,3); 
3334:  MOVLW  01
3336:  MOVLB  1
3338:  MOVWF  x16
333A:  MOVLW  03
333C:  MOVWF  x17
333E:  MOVLB  0
3340:  CALL   0C64
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3344:  MOVLW  D2
3346:  MOVWF  FF6
3348:  MOVLW  03
334A:  MOVWF  FF7
334C:  MOVLW  0A
334E:  MOVLB  1
3350:  MOVWF  x08
3352:  MOVLB  0
3354:  CALL   0D62
3358:  MOVFF  39,100
335C:  MOVLW  1F
335E:  MOVLB  1
3360:  MOVWF  x01
3362:  MOVLB  0
3364:  CALL   0DB6
3368:  MOVFF  3A,100
336C:  MOVLW  1F
336E:  MOVLB  1
3370:  MOVWF  x01
3372:  MOVLB  0
3374:  CALL   0DB6
3378:  MOVFF  3B,100
337C:  MOVLW  1F
337E:  MOVLB  1
3380:  MOVWF  x01
3382:  MOVLB  0
3384:  CALL   0DB6
3388:  MOVFF  3C,100
338C:  MOVLW  1F
338E:  MOVLB  1
3390:  MOVWF  x01
3392:  MOVLB  0
3394:  CALL   0DB6
3398:  MOVLW  20
339A:  MOVLB  1
339C:  MOVWF  x15
339E:  MOVLB  0
33A0:  CALL   0CD6
33A4:  MOVLW  20
33A6:  MOVLB  1
33A8:  MOVWF  x15
33AA:  MOVLB  0
33AC:  CALL   0CD6
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
33B0:  BSF    F93.3
33B2:  BTFSS  F81.3
33B4:  BRA    33DC
....................       {  if(Flanco == 0)  
33B6:  BTFSC  33.4
33B8:  BRA    33DA
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
33BA:  MOVLW  0B
33BC:  SUBWF  1A,W
33BE:  CLRF   03
33C0:  ADDLW  39
33C2:  MOVWF  FE9
33C4:  MOVLW  00
33C6:  ADDWFC 03,W
33C8:  MOVWF  FEA
33CA:  INCF   FEF,F
33CC:  BSF    33.4
33CE:  MOVLW  1E
33D0:  MOVLB  1
33D2:  MOVWF  x1B
33D4:  MOVLB  0
33D6:  CALL   074E
....................          else 
33DA:  BRA    33DE
....................             {Flanco = 0;} 
33DC:  BCF    33.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
33DE:  BSF    F93.2
33E0:  BTFSS  F81.2
33E2:  BRA    340A
....................       {  if(Flanco2 == 0)  
33E4:  BTFSC  33.6
33E6:  BRA    3408
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
33E8:  MOVLW  0B
33EA:  SUBWF  1A,W
33EC:  CLRF   03
33EE:  ADDLW  39
33F0:  MOVWF  FE9
33F2:  MOVLW  00
33F4:  ADDWFC 03,W
33F6:  MOVWF  FEA
33F8:  DECF   FEF,F
33FA:  BSF    33.6
33FC:  MOVLW  1E
33FE:  MOVLB  1
3400:  MOVWF  x1B
3402:  MOVLB  0
3404:  CALL   074E
....................          else 
3408:  BRA    340C
....................             {Flanco2 = 0;} 
340A:  BCF    33.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
340C:  BSF    F93.0
340E:  BTFSS  F81.0
3410:  BRA    3434
....................       {  if(Flanco1 == 0)  
3412:  BTFSC  33.5
3414:  BRA    3432
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3416:  BSF    33.5
3418:  INCF   1A,F
341A:  MOVLW  1E
341C:  MOVLB  1
341E:  MOVWF  x1B
3420:  MOVLB  0
3422:  CALL   074E
3426:  MOVLW  0C
3428:  MOVLB  1
342A:  MOVWF  x15
342C:  MOVLB  0
342E:  CALL   0CD6
....................          else 
3432:  BRA    3436
....................             {Flanco1 = 0;}    
3434:  BCF    33.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3436:  BSF    F93.1
3438:  BTFSS  F81.1
343A:  BRA    345E
....................       {  if(Flanco3 == 0)  
343C:  BTFSC  33.7
343E:  BRA    345C
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3440:  BSF    33.7
3442:  DECF   1A,F
3444:  MOVLW  1E
3446:  MOVLB  1
3448:  MOVWF  x1B
344A:  MOVLB  0
344C:  CALL   074E
3450:  MOVLW  0C
3452:  MOVLB  1
3454:  MOVWF  x15
3456:  MOVLB  0
3458:  CALL   0CD6
....................          else 
345C:  BRA    3460
....................             {Flanco3 = 0;}     
345E:  BCF    33.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3460:  MOVLW  0B
3462:  SUBWF  1A,W
3464:  CLRF   03
3466:  ADDLW  39
3468:  MOVWF  FE9
346A:  MOVLW  00
346C:  ADDWFC 03,W
346E:  MOVWF  FEA
3470:  BTFSC  FEF.7
3472:  BRA    3476
3474:  BRA    348A
....................        {clave[unidad-11]=9;} 
3476:  MOVLW  0B
3478:  SUBWF  1A,W
347A:  CLRF   03
347C:  ADDLW  39
347E:  MOVWF  FE9
3480:  MOVLW  00
3482:  ADDWFC 03,W
3484:  MOVWF  FEA
3486:  MOVLW  09
3488:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
348A:  MOVLW  0B
348C:  SUBWF  1A,W
348E:  CLRF   03
3490:  ADDLW  39
3492:  MOVWF  FE9
3494:  MOVLW  00
3496:  ADDWFC 03,W
3498:  MOVWF  FEA
349A:  BTFSC  FEF.7
349C:  BRA    34B6
349E:  MOVF   FEF,W
34A0:  SUBLW  09
34A2:  BC    34B6
....................        {clave[unidad-11]=0;} 
34A4:  MOVLW  0B
34A6:  SUBWF  1A,W
34A8:  CLRF   03
34AA:  ADDLW  39
34AC:  MOVWF  FE9
34AE:  MOVLW  00
34B0:  ADDWFC 03,W
34B2:  MOVWF  FEA
34B4:  CLRF   FEF
....................        if(unidad<11) 
34B6:  MOVF   1A,W
34B8:  SUBLW  0A
34BA:  BNC   34C4
....................        {Menu=5;unidad=11;} 
34BC:  MOVLW  05
34BE:  MOVWF  17
34C0:  MOVLW  0B
34C2:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
34C4:  MOVFF  1A,116
34C8:  MOVLW  04
34CA:  MOVLB  1
34CC:  MOVWF  x17
34CE:  MOVLB  0
34D0:  CALL   0C64
....................        lcd_putc(t[2]); 
34D4:  MOVFF  38,115
34D8:  CALL   0CD6
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
34DC:  MOVF   1A,W
34DE:  SUBLW  0E
34E0:  BTFSC  FD8.0
34E2:  BRA    364C
....................        { 
....................             lcd_gotoxy(1,1); 
34E4:  MOVLW  01
34E6:  MOVLB  1
34E8:  MOVWF  x16
34EA:  MOVWF  x17
34EC:  MOVLB  0
34EE:  CALL   0C64
....................             printf(lcd_putc,"                    "); 
34F2:  MOVLW  E8
34F4:  MOVWF  FF6
34F6:  MOVLW  03
34F8:  MOVWF  FF7
34FA:  CALL   0D42
....................             lcd_gotoxy(1,2); 
34FE:  MOVLW  01
3500:  MOVLB  1
3502:  MOVWF  x16
3504:  MOVLW  02
3506:  MOVWF  x17
3508:  MOVLB  0
350A:  CALL   0C64
....................             printf(lcd_putc,"     Contraseña     "); 
350E:  MOVLW  FE
3510:  MOVWF  FF6
3512:  MOVLW  03
3514:  MOVWF  FF7
3516:  CALL   0D42
....................             lcd_gotoxy(1,3); 
351A:  MOVLW  01
351C:  MOVLB  1
351E:  MOVWF  x16
3520:  MOVLW  03
3522:  MOVWF  x17
3524:  MOVLB  0
3526:  CALL   0C64
....................             printf(lcd_putc,"     Almacenada     "); 
352A:  MOVLW  14
352C:  MOVWF  FF6
352E:  MOVLW  04
3530:  MOVWF  FF7
3532:  CALL   0D42
....................             lcd_gotoxy(1,4); 
3536:  MOVLW  01
3538:  MOVLB  1
353A:  MOVWF  x16
353C:  MOVLW  04
353E:  MOVWF  x17
3540:  MOVLB  0
3542:  CALL   0C64
....................             printf(lcd_putc,"                    "); 
3546:  MOVLW  2A
3548:  MOVWF  FF6
354A:  MOVLW  04
354C:  MOVWF  FF7
354E:  CALL   0D42
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3552:  CLRF   FA9
3554:  MOVFF  39,FA8
3558:  BCF    FA6.6
355A:  BCF    FA6.7
355C:  BSF    FA6.2
355E:  MOVF   FF2,W
3560:  MOVWF  00
3562:  BCF    FF2.7
3564:  MOVLB  F
3566:  MOVLW  55
3568:  MOVWF  FA7
356A:  MOVLW  AA
356C:  MOVWF  FA7
356E:  BSF    FA6.1
3570:  BTFSC  FA6.1
3572:  BRA    3570
3574:  BCF    FA6.2
3576:  MOVF   00,W
3578:  IORWF  FF2,F
357A:  MOVLW  14
357C:  MOVLB  1
357E:  MOVWF  x1B
3580:  MOVLB  0
3582:  CALL   074E
3586:  MOVLW  01
3588:  MOVWF  FA9
358A:  MOVFF  3A,FA8
358E:  BCF    FA6.6
3590:  BCF    FA6.7
3592:  BSF    FA6.2
3594:  MOVF   FF2,W
3596:  MOVWF  00
3598:  BCF    FF2.7
359A:  MOVLB  F
359C:  MOVLW  55
359E:  MOVWF  FA7
35A0:  MOVLW  AA
35A2:  MOVWF  FA7
35A4:  BSF    FA6.1
35A6:  BTFSC  FA6.1
35A8:  BRA    35A6
35AA:  BCF    FA6.2
35AC:  MOVF   00,W
35AE:  IORWF  FF2,F
35B0:  MOVLW  14
35B2:  MOVLB  1
35B4:  MOVWF  x1B
35B6:  MOVLB  0
35B8:  CALL   074E
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
35BC:  MOVLW  02
35BE:  MOVWF  FA9
35C0:  MOVFF  3B,FA8
35C4:  BCF    FA6.6
35C6:  BCF    FA6.7
35C8:  BSF    FA6.2
35CA:  MOVF   FF2,W
35CC:  MOVWF  00
35CE:  BCF    FF2.7
35D0:  MOVLB  F
35D2:  MOVLW  55
35D4:  MOVWF  FA7
35D6:  MOVLW  AA
35D8:  MOVWF  FA7
35DA:  BSF    FA6.1
35DC:  BTFSC  FA6.1
35DE:  BRA    35DC
35E0:  BCF    FA6.2
35E2:  MOVF   00,W
35E4:  IORWF  FF2,F
35E6:  MOVLW  14
35E8:  MOVLB  1
35EA:  MOVWF  x1B
35EC:  MOVLB  0
35EE:  CALL   074E
35F2:  MOVLW  03
35F4:  MOVWF  FA9
35F6:  MOVFF  3C,FA8
35FA:  BCF    FA6.6
35FC:  BCF    FA6.7
35FE:  BSF    FA6.2
3600:  MOVF   FF2,W
3602:  MOVWF  00
3604:  BCF    FF2.7
3606:  MOVLB  F
3608:  MOVLW  55
360A:  MOVWF  FA7
360C:  MOVLW  AA
360E:  MOVWF  FA7
3610:  BSF    FA6.1
3612:  BTFSC  FA6.1
3614:  BRA    3612
3616:  BCF    FA6.2
3618:  MOVF   00,W
361A:  IORWF  FF2,F
361C:  MOVLW  14
361E:  MOVLB  1
3620:  MOVWF  x1B
3622:  MOVLB  0
3624:  CALL   074E
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3628:  MOVLW  02
362A:  MOVLB  1
362C:  MOVWF  x00
362E:  MOVLW  FA
3630:  MOVWF  x1B
3632:  MOVLB  0
3634:  CALL   074E
3638:  MOVLB  1
363A:  DECFSZ x00,F
363C:  BRA    362E
363E:  MOVLW  01
3640:  MOVWF  17
3642:  CLRF   35
3644:  MOVLW  02
3646:  MOVWF  1B
3648:  MOVWF  1D
364A:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
364C:  MOVF   1A,W
364E:  SUBLW  0B
3650:  BC    3674
3652:  MOVF   1A,W
3654:  SUBLW  0D
3656:  BNC   3674
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3658:  MOVLW  01
365A:  SUBWF  1A,W
365C:  MOVLB  1
365E:  MOVWF  x00
3660:  MOVWF  x16
3662:  MOVLW  04
3664:  MOVWF  x17
3666:  MOVLB  0
3668:  CALL   0C64
....................             lcd_putc(t[1]); 
366C:  MOVFF  37,115
3670:  CALL   0CD6
3674:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3) 
3676:  MOVF   17,W
3678:  SUBLW  03
367A:  BTFSS  FD8.2
367C:  BRA    37EC
....................    { 
....................    lcd_gotoxy(1,2); 
367E:  MOVLW  01
3680:  MOVWF  x16
3682:  MOVLW  02
3684:  MOVWF  x17
3686:  MOVLB  0
3688:  CALL   0C64
....................    printf(lcd_putc,"     Media Movil    "); 
368C:  MOVLW  40
368E:  MOVWF  FF6
3690:  MOVLW  04
3692:  MOVWF  FF7
3694:  CALL   0D42
....................    lcd_gotoxy(1,3); 
3698:  MOVLW  01
369A:  MOVLB  1
369C:  MOVWF  x16
369E:  MOVLW  03
36A0:  MOVWF  x17
36A2:  MOVLB  0
36A4:  CALL   0C64
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
36A8:  MOVLW  56
36AA:  MOVWF  FF6
36AC:  MOVLW  04
36AE:  MOVWF  FF7
36B0:  MOVLW  07
36B2:  MOVLB  1
36B4:  MOVWF  x08
36B6:  MOVLB  0
36B8:  CALL   0D62
36BC:  MOVFF  2A,100
36C0:  MOVLW  01
36C2:  MOVLB  1
36C4:  MOVWF  x01
36C6:  MOVLB  0
36C8:  CALL   0DB6
36CC:  MOVLW  20
36CE:  MOVLB  1
36D0:  MOVWF  x15
36D2:  MOVLB  0
36D4:  CALL   0CD6
36D8:  MOVLW  20
36DA:  MOVLB  1
36DC:  MOVWF  x15
36DE:  MOVLB  0
36E0:  CALL   0CD6
36E4:  MOVLW  20
36E6:  MOVLB  1
36E8:  MOVWF  x15
36EA:  MOVLB  0
36EC:  CALL   0CD6
....................     
....................    if(MediaMovil>12) 
36F0:  MOVF   2A,W
36F2:  SUBLW  0C
36F4:  BC    36FA
....................    {MediaMovil=12;} 
36F6:  MOVLW  0C
36F8:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
36FA:  MOVF   2A,F
36FC:  BNZ   3702
....................    {MediaMovil=1;} 
36FE:  MOVLW  01
3700:  MOVWF  2A
....................     
....................       if(UP)//Si oprime hacia arriba 
3702:  BSF    F93.3
3704:  BTFSS  F81.3
3706:  BRA    3720
....................       {  if(Flanco == 0)  
3708:  BTFSC  33.4
370A:  BRA    371E
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
370C:  MOVLW  01
370E:  ADDWF  2A,F
3710:  BSF    33.4
3712:  MOVLW  1E
3714:  MOVLB  1
3716:  MOVWF  x1B
3718:  MOVLB  0
371A:  CALL   074E
....................          else 
371E:  BRA    3722
....................             {Flanco = 0;} 
3720:  BCF    33.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3722:  BSF    F93.2
3724:  BTFSS  F81.2
3726:  BRA    3740
....................       {  if(Flanco2 == 0)  
3728:  BTFSC  33.6
372A:  BRA    373E
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
372C:  MOVLW  01
372E:  SUBWF  2A,F
3730:  BSF    33.6
3732:  MOVLW  1E
3734:  MOVLB  1
3736:  MOVWF  x1B
3738:  MOVLB  0
373A:  CALL   074E
....................          else 
373E:  BRA    3742
....................             {Flanco2 = 0;} 
3740:  BCF    33.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3742:  BSF    F93.0
3744:  BTFSS  F81.0
3746:  BRA    37AA
....................       {  if(Flanco1 == 0)  
3748:  BTFSC  33.5
374A:  BRA    37A8
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
374C:  MOVLW  01
374E:  MOVWF  17
3750:  CLRF   35
3752:  MOVLW  02
3754:  MOVWF  1B
3756:  MOVWF  1D
3758:  MOVLW  0B
375A:  MOVWF  1A
375C:  MOVLW  02
375E:  MOVLB  1
3760:  MOVWF  x00
3762:  MOVLW  FA
3764:  MOVWF  x1B
3766:  MOVLB  0
3768:  CALL   074E
376C:  MOVLB  1
376E:  DECFSZ x00,F
3770:  BRA    3762
3772:  MOVLW  0C
3774:  MOVWF  x15
3776:  MOVLB  0
3778:  CALL   0CD6
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
377C:  MOVLW  2A
377E:  MOVWF  FA9
3780:  MOVFF  2A,FA8
3784:  BCF    FA6.6
3786:  BCF    FA6.7
3788:  BSF    FA6.2
378A:  MOVF   FF2,W
378C:  MOVWF  00
378E:  BCF    FF2.7
3790:  MOVLB  F
3792:  MOVLW  55
3794:  MOVWF  FA7
3796:  MOVLW  AA
3798:  MOVWF  FA7
379A:  BSF    FA6.1
379C:  BTFSC  FA6.1
379E:  BRA    379C
37A0:  BCF    FA6.2
37A2:  MOVF   00,W
37A4:  IORWF  FF2,F
37A6:  MOVLB  0
....................             }} 
....................          else 
37A8:  BRA    37AC
....................             {Flanco1 = 0;}    
37AA:  BCF    33.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
37AC:  BSF    F93.1
37AE:  BTFSS  F81.1
37B0:  BRA    37E8
....................       {  if(Flanco3 == 0)  
37B2:  BTFSC  33.7
37B4:  BRA    37E6
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
37B6:  MOVLW  01
37B8:  MOVWF  17
37BA:  CLRF   35
37BC:  MOVLW  02
37BE:  MOVWF  1B
37C0:  MOVWF  1D
37C2:  MOVLW  0B
37C4:  MOVWF  1A
37C6:  MOVLW  02
37C8:  MOVLB  1
37CA:  MOVWF  x00
37CC:  MOVLW  FA
37CE:  MOVWF  x1B
37D0:  MOVLB  0
37D2:  CALL   074E
37D6:  MOVLB  1
37D8:  DECFSZ x00,F
37DA:  BRA    37CC
37DC:  MOVLW  0C
37DE:  MOVWF  x15
37E0:  MOVLB  0
37E2:  CALL   0CD6
....................          else 
37E6:  BRA    37EA
....................             {Flanco3 = 0;}   
37E8:  BCF    33.7
37EA:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4)// Menu de configuración de punto zero. 
37EC:  MOVF   17,W
37EE:  SUBLW  04
37F0:  BTFSS  FD8.2
37F2:  BRA    3BE2
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
37F4:  MOVLW  01
37F6:  MOVWF  x16
37F8:  MOVWF  x17
37FA:  MOVLB  0
37FC:  CALL   0C64
....................    printf(lcd_putc,"  Zero Point Config "); 
3800:  MOVLW  66
3802:  MOVWF  FF6
3804:  MOVLW  04
3806:  MOVWF  FF7
3808:  CALL   0D42
....................    lcd_gotoxy(1,2); 
380C:  MOVLW  01
380E:  MOVLB  1
3810:  MOVWF  x16
3812:  MOVLW  02
3814:  MOVWF  x17
3816:  MOVLB  0
3818:  CALL   0C64
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
381C:  MOVLW  7C
381E:  MOVWF  FF6
3820:  MOVLW  04
3822:  MOVWF  FF7
3824:  MOVLW  08
3826:  MOVLB  1
3828:  MOVWF  x08
382A:  MOVLB  0
382C:  CALL   0D62
3830:  MOVLW  01
3832:  MOVWF  FE9
3834:  MOVFF  8D,10B
3838:  MOVFF  8C,10A
383C:  MOVFF  8B,109
3840:  MOVFF  8A,108
3844:  MOVLB  1
3846:  MOVWF  x0C
3848:  MOVLB  0
384A:  CALL   1106
384E:  MOVLW  89
3850:  MOVWF  FF6
3852:  MOVLW  04
3854:  MOVWF  FF7
3856:  MOVLW  08
3858:  MOVLB  1
385A:  MOVWF  x08
385C:  MOVLB  0
385E:  CALL   0D62
....................    lcd_gotoxy(1,3); 
3862:  MOVLW  01
3864:  MOVLB  1
3866:  MOVWF  x16
3868:  MOVLW  03
386A:  MOVWF  x17
386C:  MOVLB  0
386E:  CALL   0C64
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
3872:  MOVLB  1
3874:  CLRF   x04
3876:  MOVLB  0
3878:  CALL   12B0
387C:  MOVFF  00,100
3880:  MOVFF  01,101
3884:  MOVFF  02,102
3888:  MOVFF  03,103
388C:  MOVLW  5A
388E:  MOVLB  1
3890:  MOVWF  x15
3892:  MOVLB  0
3894:  CALL   0CD6
3898:  MOVLW  46
389A:  MOVLB  1
389C:  MOVWF  x15
389E:  MOVLB  0
38A0:  CALL   0CD6
38A4:  MOVLW  3D
38A6:  MOVLB  1
38A8:  MOVWF  x15
38AA:  MOVLB  0
38AC:  CALL   0CD6
38B0:  MOVLW  01
38B2:  MOVWF  FE9
38B4:  MOVFF  4C,10B
38B8:  MOVFF  4B,10A
38BC:  MOVFF  4A,109
38C0:  MOVFF  49,108
38C4:  MOVLB  1
38C6:  CLRF   x0C
38C8:  MOVLB  0
38CA:  CALL   1106
38CE:  MOVLW  9A
38D0:  MOVWF  FF6
38D2:  MOVLW  04
38D4:  MOVWF  FF7
38D6:  MOVLW  05
38D8:  MOVLB  1
38DA:  MOVWF  x08
38DC:  MOVLB  0
38DE:  CALL   0D62
38E2:  MOVLW  01
38E4:  MOVWF  FE9
38E6:  MOVFF  103,10B
38EA:  MOVFF  102,10A
38EE:  MOVFF  101,109
38F2:  MOVFF  100,108
38F6:  MOVLB  1
38F8:  CLRF   x0C
38FA:  MOVLB  0
38FC:  CALL   1106
....................    lcd_gotoxy(1,4); 
3900:  MOVLW  01
3902:  MOVLB  1
3904:  MOVWF  x16
3906:  MOVLW  04
3908:  MOVWF  x17
390A:  MOVLB  0
390C:  CALL   0C64
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
3910:  MOVLW  A6
3912:  MOVWF  FF6
3914:  MOVLW  04
3916:  MOVWF  FF7
3918:  MOVLW  0C
391A:  MOVLB  1
391C:  MOVWF  x08
391E:  MOVLB  0
3920:  CALL   0D62
3924:  MOVLW  01
3926:  MOVWF  FE9
3928:  MOVFF  BD,10B
392C:  MOVFF  BC,10A
3930:  MOVFF  BB,109
3934:  MOVFF  BA,108
3938:  MOVLB  1
393A:  CLRF   x0C
393C:  MOVLB  0
393E:  CALL   1106
....................      
....................       if(RIGHT)// Si oprime derecha 
3942:  BSF    F93.0
3944:  BTFSS  F81.0
3946:  BRA    3BA0
....................       {  if(Flanco1 == 0)  
3948:  BTFSC  33.5
394A:  BRA    3B9E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
394C:  MOVLW  01
394E:  MOVWF  17
3950:  CLRF   35
3952:  MOVLW  02
3954:  MOVWF  1B
3956:  MOVWF  1D
3958:  MOVLW  0B
395A:  MOVWF  1A
395C:  MOVLW  02
395E:  MOVLB  1
3960:  MOVWF  x00
3962:  MOVLW  FA
3964:  MOVWF  x1B
3966:  MOVLB  0
3968:  CALL   074E
396C:  MOVLB  1
396E:  DECFSZ x00,F
3970:  BRA    3962
3972:  MOVLW  0C
3974:  MOVWF  x15
3976:  MOVLB  0
3978:  CALL   0CD6
....................             Diferencia=zero_fabrica-sensores(0); 
397C:  MOVLB  1
397E:  CLRF   x04
3980:  MOVLB  0
3982:  CALL   12B0
3986:  MOVFF  FEA,101
398A:  MOVFF  FE9,100
398E:  BSF    FD8.1
3990:  MOVFF  4C,121
3994:  MOVFF  4B,120
3998:  MOVFF  4A,11F
399C:  MOVFF  49,11E
39A0:  MOVFF  03,125
39A4:  MOVFF  02,124
39A8:  MOVFF  01,123
39AC:  MOVFF  00,122
39B0:  CALL   090C
39B4:  MOVFF  101,FEA
39B8:  MOVFF  100,FE9
39BC:  MOVFF  03,BD
39C0:  MOVFF  02,BC
39C4:  MOVFF  01,BB
39C8:  MOVFF  00,BA
....................              
....................             if(Diferencia>=0) 
39CC:  MOVLB  1
39CE:  CLRF   x1D
39D0:  CLRF   x1C
39D2:  CLRF   x1B
39D4:  CLRF   x1A
39D6:  MOVFF  BD,121
39DA:  MOVFF  BC,120
39DE:  MOVFF  BB,11F
39E2:  MOVFF  BA,11E
39E6:  MOVLB  0
39E8:  CALL   1308
39EC:  BC    39F0
39EE:  BNZ   3A1E
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
39F0:  MOVLW  0A
39F2:  MOVWF  2B
39F4:  MOVLW  32
39F6:  MOVWF  FA9
39F8:  MOVFF  2B,FA8
39FC:  BCF    FA6.6
39FE:  BCF    FA6.7
3A00:  BSF    FA6.2
3A02:  MOVF   FF2,W
3A04:  MOVWF  00
3A06:  BCF    FF2.7
3A08:  MOVLB  F
3A0A:  MOVLW  55
3A0C:  MOVWF  FA7
3A0E:  MOVLW  AA
3A10:  MOVWF  FA7
3A12:  BSF    FA6.1
3A14:  BTFSC  FA6.1
3A16:  BRA    3A14
3A18:  BCF    FA6.2
3A1A:  MOVF   00,W
3A1C:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
3A1E:  MOVFF  BD,11D
3A22:  MOVFF  BC,11C
3A26:  MOVFF  BB,11B
3A2A:  MOVFF  BA,11A
3A2E:  MOVLB  1
3A30:  CLRF   x21
3A32:  CLRF   x20
3A34:  CLRF   x1F
3A36:  CLRF   x1E
3A38:  MOVLB  0
3A3A:  CALL   1308
3A3E:  BNC   3A70
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
3A40:  MOVLW  14
3A42:  MOVWF  2B
3A44:  MOVLW  32
3A46:  MOVWF  FA9
3A48:  MOVFF  2B,FA8
3A4C:  BCF    FA6.6
3A4E:  BCF    FA6.7
3A50:  BSF    FA6.2
3A52:  MOVF   FF2,W
3A54:  MOVWF  00
3A56:  BCF    FF2.7
3A58:  MOVLB  F
3A5A:  MOVLW  55
3A5C:  MOVWF  FA7
3A5E:  MOVLW  AA
3A60:  MOVWF  FA7
3A62:  BSF    FA6.1
3A64:  BTFSC  FA6.1
3A66:  BRA    3A64
3A68:  BCF    FA6.2
3A6A:  MOVF   00,W
3A6C:  IORWF  FF2,F
3A6E:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
3A70:  MOVFF  BA,00
3A74:  MOVFF  BB,01
3A78:  MOVFF  BC,02
3A7C:  MOVFF  BD,03
3A80:  BCF    01.7
3A82:  MOVFF  BD,BD
3A86:  MOVFF  BC,BC
3A8A:  MOVFF  01,BB
3A8E:  MOVFF  BA,BA
....................             Temporal1=Diferencia; 
3A92:  MOVFF  BD,B5
3A96:  MOVFF  BC,B4
3A9A:  MOVFF  BB,B3
3A9E:  MOVFF  BA,B2
....................             Entero1=(int)Temporal1; 
3AA2:  MOVFF  B5,101
3AA6:  MOVFF  B4,100
3AAA:  MOVFF  B3,FF
3AAE:  MOVFF  B2,FE
3AB2:  CALL   1382
3AB6:  MOVFF  01,24
....................             Temporal1=Temporal1-Entero1; 
3ABA:  MOVLB  1
3ABC:  CLRF   x0A
3ABE:  MOVFF  24,109
3AC2:  MOVLB  0
3AC4:  CALL   0778
3AC8:  BSF    FD8.1
3ACA:  MOVFF  B5,121
3ACE:  MOVFF  B4,120
3AD2:  MOVFF  B3,11F
3AD6:  MOVFF  B2,11E
3ADA:  MOVFF  03,125
3ADE:  MOVFF  02,124
3AE2:  MOVFF  01,123
3AE6:  MOVFF  00,122
3AEA:  CALL   090C
3AEE:  MOVFF  03,B5
3AF2:  MOVFF  02,B4
3AF6:  MOVFF  01,B3
3AFA:  MOVFF  00,B2
....................             Temporal12=Temporal1*100.0; 
3AFE:  MOVFF  B5,11D
3B02:  MOVFF  B4,11C
3B06:  MOVFF  B3,11B
3B0A:  MOVFF  B2,11A
3B0E:  MOVLB  1
3B10:  CLRF   x21
3B12:  CLRF   x20
3B14:  MOVLW  48
3B16:  MOVWF  x1F
3B18:  MOVLW  85
3B1A:  MOVWF  x1E
3B1C:  MOVLB  0
3B1E:  CALL   0F4C
3B22:  MOVFF  03,B9
3B26:  MOVFF  02,B8
3B2A:  MOVFF  01,B7
3B2E:  MOVFF  00,B6
....................             Decimal12=(int8)Temporal12; 
3B32:  MOVFF  B9,101
3B36:  MOVFF  B8,100
3B3A:  MOVFF  B7,FF
3B3E:  MOVFF  B6,FE
3B42:  CALL   1382
3B46:  MOVFF  01,25
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
3B4A:  MOVLW  3C
3B4C:  MOVWF  FA9
3B4E:  MOVFF  24,FA8
3B52:  BCF    FA6.6
3B54:  BCF    FA6.7
3B56:  BSF    FA6.2
3B58:  MOVF   FF2,W
3B5A:  MOVWF  00
3B5C:  BCF    FF2.7
3B5E:  MOVLB  F
3B60:  MOVLW  55
3B62:  MOVWF  FA7
3B64:  MOVLW  AA
3B66:  MOVWF  FA7
3B68:  BSF    FA6.1
3B6A:  BTFSC  FA6.1
3B6C:  BRA    3B6A
3B6E:  BCF    FA6.2
3B70:  MOVF   00,W
3B72:  IORWF  FF2,F
3B74:  MOVLW  3D
3B76:  MOVWF  FA9
3B78:  MOVFF  25,FA8
3B7C:  BCF    FA6.6
3B7E:  BCF    FA6.7
3B80:  BSF    FA6.2
3B82:  MOVF   FF2,W
3B84:  MOVWF  00
3B86:  BCF    FF2.7
3B88:  MOVLW  55
3B8A:  MOVWF  FA7
3B8C:  MOVLW  AA
3B8E:  MOVWF  FA7
3B90:  BSF    FA6.1
3B92:  BTFSC  FA6.1
3B94:  BRA    3B92
3B96:  BCF    FA6.2
3B98:  MOVF   00,W
3B9A:  IORWF  FF2,F
3B9C:  MOVLB  0
....................             }} 
....................          else 
3B9E:  BRA    3BA2
....................             {Flanco1 = 0;}    
3BA0:  BCF    33.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3BA2:  BSF    F93.1
3BA4:  BTFSS  F81.1
3BA6:  BRA    3BDE
....................       {  if(Flanco3 == 0)  
3BA8:  BTFSC  33.7
3BAA:  BRA    3BDC
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3BAC:  MOVLW  01
3BAE:  MOVWF  17
3BB0:  CLRF   35
3BB2:  MOVLW  02
3BB4:  MOVWF  1B
3BB6:  MOVWF  1D
3BB8:  MOVLW  0B
3BBA:  MOVWF  1A
3BBC:  MOVLW  02
3BBE:  MOVLB  1
3BC0:  MOVWF  x00
3BC2:  MOVLW  FA
3BC4:  MOVWF  x1B
3BC6:  MOVLB  0
3BC8:  CALL   074E
3BCC:  MOVLB  1
3BCE:  DECFSZ x00,F
3BD0:  BRA    3BC2
3BD2:  MOVLW  0C
3BD4:  MOVWF  x15
3BD6:  MOVLB  0
3BD8:  CALL   0CD6
....................          else 
3BDC:  BRA    3BE0
....................             {Flanco3 = 0;}   
3BDE:  BCF    33.7
3BE0:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5)// Menu de Mantenimiento 
3BE2:  MOVF   17,W
3BE4:  SUBLW  05
3BE6:  BTFSS  FD8.2
3BE8:  BRA    409E
....................    { 
....................    lcd_gotoxy(1,1); 
3BEA:  MOVLW  01
3BEC:  MOVWF  x16
3BEE:  MOVWF  x17
3BF0:  MOVLB  0
3BF2:  CALL   0C64
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
3BF6:  MOVLB  1
3BF8:  CLRF   x04
3BFA:  MOVLB  0
3BFC:  CALL   12B0
3C00:  MOVFF  00,100
3C04:  MOVFF  01,101
3C08:  MOVFF  02,102
3C0C:  MOVFF  03,103
3C10:  MOVLW  B8
3C12:  MOVWF  FF6
3C14:  MOVLW  04
3C16:  MOVWF  FF7
3C18:  MOVLW  0A
3C1A:  MOVLB  1
3C1C:  MOVWF  x08
3C1E:  MOVLB  0
3C20:  CALL   0D62
3C24:  MOVLW  01
3C26:  MOVWF  FE9
3C28:  MOVFF  103,10B
3C2C:  MOVFF  102,10A
3C30:  MOVFF  101,109
3C34:  MOVFF  100,108
3C38:  MOVLB  1
3C3A:  CLRF   x0C
3C3C:  MOVLB  0
3C3E:  CALL   1106
3C42:  MOVLW  20
3C44:  MOVLB  1
3C46:  MOVWF  x15
3C48:  MOVLB  0
3C4A:  CALL   0CD6
3C4E:  MOVLW  20
3C50:  MOVLB  1
3C52:  MOVWF  x15
3C54:  MOVLB  0
3C56:  CALL   0CD6
....................    lcd_gotoxy(1,2); 
3C5A:  MOVLW  01
3C5C:  MOVLB  1
3C5E:  MOVWF  x16
3C60:  MOVLW  02
3C62:  MOVWF  x17
3C64:  MOVLB  0
3C66:  CALL   0C64
....................    printf(lcd_putc,"Motor=%2.0f%%  T=%2.0f",(100*((float)tmp/204)),sensores(1)); 
3C6A:  MOVLB  1
3C6C:  CLRF   x0A
3C6E:  MOVFF  29,109
3C72:  MOVLB  0
3C74:  CALL   0778
3C78:  MOVFF  00,100
3C7C:  MOVFF  01,101
3C80:  MOVFF  02,102
3C84:  MOVFF  03,103
3C88:  MOVFF  03,121
3C8C:  MOVFF  02,120
3C90:  MOVFF  01,11F
3C94:  MOVFF  00,11E
3C98:  MOVLB  1
3C9A:  CLRF   x25
3C9C:  CLRF   x24
3C9E:  MOVLW  4C
3CA0:  MOVWF  x23
3CA2:  MOVLW  86
3CA4:  MOVWF  x22
3CA6:  MOVLB  0
3CA8:  CALL   07AE
3CAC:  MOVLB  1
3CAE:  CLRF   x1D
3CB0:  CLRF   x1C
3CB2:  MOVLW  48
3CB4:  MOVWF  x1B
3CB6:  MOVLW  85
3CB8:  MOVWF  x1A
3CBA:  MOVFF  03,121
3CBE:  MOVFF  02,120
3CC2:  MOVFF  01,11F
3CC6:  MOVFF  00,11E
3CCA:  MOVLB  0
3CCC:  CALL   0F4C
3CD0:  MOVFF  00,100
3CD4:  MOVFF  01,101
3CD8:  MOVFF  02,102
3CDC:  MOVFF  03,103
3CE0:  MOVLW  01
3CE2:  MOVLB  1
3CE4:  MOVWF  x04
3CE6:  MOVLB  0
3CE8:  CALL   12B0
3CEC:  MOVFF  00,104
3CF0:  MOVFF  01,105
3CF4:  MOVFF  02,106
3CF8:  MOVFF  03,107
3CFC:  MOVLW  CA
3CFE:  MOVWF  FF6
3D00:  MOVLW  04
3D02:  MOVWF  FF7
3D04:  MOVLW  06
3D06:  MOVLB  1
3D08:  MOVWF  x08
3D0A:  MOVLB  0
3D0C:  CALL   0D62
3D10:  MOVLW  01
3D12:  MOVWF  FE9
3D14:  MOVFF  103,10B
3D18:  MOVFF  102,10A
3D1C:  MOVFF  101,109
3D20:  MOVFF  100,108
3D24:  MOVLB  1
3D26:  CLRF   x0C
3D28:  MOVLB  0
3D2A:  CALL   1106
3D2E:  MOVLW  25
3D30:  MOVLB  1
3D32:  MOVWF  x15
3D34:  MOVLB  0
3D36:  CALL   0CD6
3D3A:  MOVLW  D7
3D3C:  MOVWF  FF6
3D3E:  MOVLW  04
3D40:  MOVWF  FF7
3D42:  MOVLW  04
3D44:  MOVLB  1
3D46:  MOVWF  x08
3D48:  MOVLB  0
3D4A:  CALL   0D62
3D4E:  MOVLW  01
3D50:  MOVWF  FE9
3D52:  MOVFF  107,10B
3D56:  MOVFF  106,10A
3D5A:  MOVFF  105,109
3D5E:  MOVFF  104,108
3D62:  MOVLB  1
3D64:  CLRF   x0C
3D66:  MOVLB  0
3D68:  CALL   1106
....................    lcd_gotoxy(1,3); 
3D6C:  MOVLW  01
3D6E:  MOVLB  1
3D70:  MOVWF  x16
3D72:  MOVLW  03
3D74:  MOVWF  x17
3D76:  MOVLB  0
3D78:  CALL   0C64
....................    printf(lcd_putc,"InFlow= %2.1f(m/s)",Flujo); 
3D7C:  MOVLW  E2
3D7E:  MOVWF  FF6
3D80:  MOVLW  04
3D82:  MOVWF  FF7
3D84:  MOVLW  08
3D86:  MOVLB  1
3D88:  MOVWF  x08
3D8A:  MOVLB  0
3D8C:  CALL   0D62
3D90:  MOVLW  01
3D92:  MOVWF  FE9
3D94:  MOVFF  8D,10B
3D98:  MOVFF  8C,10A
3D9C:  MOVFF  8B,109
3DA0:  MOVFF  8A,108
3DA4:  MOVLB  1
3DA6:  MOVWF  x0C
3DA8:  MOVLB  0
3DAA:  CALL   1106
3DAE:  MOVLW  EF
3DB0:  MOVWF  FF6
3DB2:  MOVLW  04
3DB4:  MOVWF  FF7
3DB6:  MOVLW  05
3DB8:  MOVLB  1
3DBA:  MOVWF  x08
3DBC:  MOVLB  0
3DBE:  CALL   0D62
....................    lcd_gotoxy(1,4); 
3DC2:  MOVLW  01
3DC4:  MOVLB  1
3DC6:  MOVWF  x16
3DC8:  MOVLW  04
3DCA:  MOVWF  x17
3DCC:  MOVLB  0
3DCE:  CALL   0C64
....................    printf(lcd_putc,"K Sensor= %2.2f ",Ajuste1); 
3DD2:  MOVLW  F6
3DD4:  MOVWF  FF6
3DD6:  MOVLW  04
3DD8:  MOVWF  FF7
3DDA:  MOVLW  0A
3DDC:  MOVLB  1
3DDE:  MOVWF  x08
3DE0:  MOVLB  0
3DE2:  CALL   0D62
3DE6:  MOVLW  89
3DE8:  MOVWF  FE9
3DEA:  MOVFF  C1,10B
3DEE:  MOVFF  C0,10A
3DF2:  MOVFF  BF,109
3DF6:  MOVFF  BE,108
3DFA:  MOVLW  02
3DFC:  MOVLB  1
3DFE:  MOVWF  x0C
3E00:  MOVLB  0
3E02:  CALL   1106
3E06:  MOVLW  20
3E08:  MOVLB  1
3E0A:  MOVWF  x15
3E0C:  MOVLB  0
3E0E:  CALL   0CD6
....................        
....................       if(UP)//Si oprime hacia arriba 
3E12:  BSF    F93.3
3E14:  BTFSS  F81.3
3E16:  BRA    3E90
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
3E18:  BCF    FD8.1
3E1A:  MOVFF  C1,121
3E1E:  MOVFF  C0,120
3E22:  MOVFF  BF,11F
3E26:  MOVFF  BE,11E
3E2A:  MOVLW  0A
3E2C:  MOVLB  1
3E2E:  MOVWF  x25
3E30:  MOVLW  D7
3E32:  MOVWF  x24
3E34:  MOVLW  23
3E36:  MOVWF  x23
3E38:  MOVLW  78
3E3A:  MOVWF  x22
3E3C:  MOVLB  0
3E3E:  CALL   090C
3E42:  MOVFF  03,C1
3E46:  MOVFF  02,C0
3E4A:  MOVFF  01,BF
3E4E:  MOVFF  00,BE
3E52:  MOVLW  32
3E54:  MOVLB  1
3E56:  MOVWF  x1B
3E58:  MOVLB  0
3E5A:  CALL   074E
....................          if(Ajuste1>30.0) 
3E5E:  MOVLB  1
3E60:  CLRF   x1D
3E62:  CLRF   x1C
3E64:  MOVLW  70
3E66:  MOVWF  x1B
3E68:  MOVLW  83
3E6A:  MOVWF  x1A
3E6C:  MOVFF  C1,121
3E70:  MOVFF  C0,120
3E74:  MOVFF  BF,11F
3E78:  MOVFF  BE,11E
3E7C:  MOVLB  0
3E7E:  CALL   1308
3E82:  BNC   3E90
....................          {Ajuste1=30.0;} 
3E84:  CLRF   xC1
3E86:  CLRF   xC0
3E88:  MOVLW  70
3E8A:  MOVWF  xBF
3E8C:  MOVLW  83
3E8E:  MOVWF  xBE
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3E90:  BSF    F93.2
3E92:  BTFSS  F81.2
3E94:  BRA    3F06
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
3E96:  BSF    FD8.1
3E98:  MOVFF  C1,121
3E9C:  MOVFF  C0,120
3EA0:  MOVFF  BF,11F
3EA4:  MOVFF  BE,11E
3EA8:  MOVLW  0A
3EAA:  MOVLB  1
3EAC:  MOVWF  x25
3EAE:  MOVLW  D7
3EB0:  MOVWF  x24
3EB2:  MOVLW  23
3EB4:  MOVWF  x23
3EB6:  MOVLW  78
3EB8:  MOVWF  x22
3EBA:  MOVLB  0
3EBC:  CALL   090C
3EC0:  MOVFF  03,C1
3EC4:  MOVFF  02,C0
3EC8:  MOVFF  01,BF
3ECC:  MOVFF  00,BE
3ED0:  MOVLW  32
3ED2:  MOVLB  1
3ED4:  MOVWF  x1B
3ED6:  MOVLB  0
3ED8:  CALL   074E
....................          if(Ajuste1<0.0) 
3EDC:  MOVFF  C1,11D
3EE0:  MOVFF  C0,11C
3EE4:  MOVFF  BF,11B
3EE8:  MOVFF  BE,11A
3EEC:  MOVLB  1
3EEE:  CLRF   x21
3EF0:  CLRF   x20
3EF2:  CLRF   x1F
3EF4:  CLRF   x1E
3EF6:  MOVLB  0
3EF8:  CALL   1308
3EFC:  BNC   3F06
....................          {Ajuste1=0.0;} 
3EFE:  CLRF   xC1
3F00:  CLRF   xC0
3F02:  CLRF   xBF
3F04:  CLRF   xBE
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
3F06:  BSF    F93.0
3F08:  BTFSS  F81.0
3F0A:  BRA    405C
....................       {  if(Flanco1 == 0)  
3F0C:  BTFSC  33.5
3F0E:  BRA    405A
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3F10:  MOVLW  01
3F12:  MOVWF  17
3F14:  CLRF   35
3F16:  MOVLW  02
3F18:  MOVWF  1B
3F1A:  MOVWF  1D
3F1C:  MOVLW  0B
3F1E:  MOVWF  1A
3F20:  MOVLW  1E
3F22:  MOVLB  1
3F24:  MOVWF  x1B
3F26:  MOVLB  0
3F28:  CALL   074E
3F2C:  MOVLW  0C
3F2E:  MOVLB  1
3F30:  MOVWF  x15
3F32:  MOVLB  0
3F34:  CALL   0CD6
....................             Temporal=Ajuste1; 
3F38:  MOVFF  C1,A9
3F3C:  MOVFF  C0,A8
3F40:  MOVFF  BF,A7
3F44:  MOVFF  BE,A6
....................             Entero=(int)Ajuste1; 
3F48:  MOVFF  C1,101
3F4C:  MOVFF  C0,100
3F50:  MOVFF  BF,FF
3F54:  MOVFF  BE,FE
3F58:  CALL   1382
3F5C:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
3F60:  MOVLB  1
3F62:  CLRF   x0A
3F64:  MOVFF  21,109
3F68:  MOVLB  0
3F6A:  CALL   0778
3F6E:  BSF    FD8.1
3F70:  MOVFF  A9,121
3F74:  MOVFF  A8,120
3F78:  MOVFF  A7,11F
3F7C:  MOVFF  A6,11E
3F80:  MOVFF  03,125
3F84:  MOVFF  02,124
3F88:  MOVFF  01,123
3F8C:  MOVFF  00,122
3F90:  CALL   090C
3F94:  MOVFF  03,A9
3F98:  MOVFF  02,A8
3F9C:  MOVFF  01,A7
3FA0:  MOVFF  00,A6
....................             Temporal2=Temporal*100.0; 
3FA4:  MOVFF  A9,11D
3FA8:  MOVFF  A8,11C
3FAC:  MOVFF  A7,11B
3FB0:  MOVFF  A6,11A
3FB4:  MOVLB  1
3FB6:  CLRF   x21
3FB8:  CLRF   x20
3FBA:  MOVLW  48
3FBC:  MOVWF  x1F
3FBE:  MOVLW  85
3FC0:  MOVWF  x1E
3FC2:  MOVLB  0
3FC4:  CALL   0F4C
3FC8:  MOVFF  03,AD
3FCC:  MOVFF  02,AC
3FD0:  MOVFF  01,AB
3FD4:  MOVFF  00,AA
....................             Decimal1=(int8)Temporal2; 
3FD8:  MOVFF  AD,101
3FDC:  MOVFF  AC,100
3FE0:  MOVFF  AB,FF
3FE4:  MOVFF  AA,FE
3FE8:  CALL   1382
3FEC:  MOVFF  01,22
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
3FF0:  MOVLW  19
3FF2:  MOVWF  FA9
3FF4:  MOVFF  21,FA8
3FF8:  BCF    FA6.6
3FFA:  BCF    FA6.7
3FFC:  BSF    FA6.2
3FFE:  MOVF   FF2,W
4000:  MOVWF  00
4002:  BCF    FF2.7
4004:  MOVLB  F
4006:  MOVLW  55
4008:  MOVWF  FA7
400A:  MOVLW  AA
400C:  MOVWF  FA7
400E:  BSF    FA6.1
4010:  BTFSC  FA6.1
4012:  BRA    4010
4014:  BCF    FA6.2
4016:  MOVF   00,W
4018:  IORWF  FF2,F
401A:  MOVLW  1A
401C:  MOVWF  FA9
401E:  MOVFF  22,FA8
4022:  BCF    FA6.6
4024:  BCF    FA6.7
4026:  BSF    FA6.2
4028:  MOVF   FF2,W
402A:  MOVWF  00
402C:  BCF    FF2.7
402E:  MOVLW  55
4030:  MOVWF  FA7
4032:  MOVLW  AA
4034:  MOVWF  FA7
4036:  BSF    FA6.1
4038:  BTFSC  FA6.1
403A:  BRA    4038
403C:  BCF    FA6.2
403E:  MOVF   00,W
4040:  IORWF  FF2,F
....................             delay_ms(1000); 
4042:  MOVLW  04
4044:  MOVLB  1
4046:  MOVWF  x00
4048:  MOVLW  FA
404A:  MOVWF  x1B
404C:  MOVLB  0
404E:  CALL   074E
4052:  MOVLB  1
4054:  DECFSZ x00,F
4056:  BRA    4048
4058:  MOVLB  0
....................             }} 
....................          else 
405A:  BRA    405E
....................             {Flanco1 = 0;}    
405C:  BCF    33.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
405E:  BSF    F93.1
4060:  BTFSS  F81.1
4062:  BRA    409A
....................       {  if(Flanco3 == 0)  
4064:  BTFSC  33.7
4066:  BRA    4098
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4068:  MOVLW  01
406A:  MOVWF  17
406C:  CLRF   35
406E:  MOVLW  02
4070:  MOVWF  1B
4072:  MOVWF  1D
4074:  MOVLW  0B
4076:  MOVWF  1A
4078:  MOVLW  02
407A:  MOVLB  1
407C:  MOVWF  x00
407E:  MOVLW  FA
4080:  MOVWF  x1B
4082:  MOVLB  0
4084:  CALL   074E
4088:  MOVLB  1
408A:  DECFSZ x00,F
408C:  BRA    407E
408E:  MOVLW  0C
4090:  MOVWF  x15
4092:  MOVLB  0
4094:  CALL   0CD6
....................          else 
4098:  BRA    409C
....................             {Flanco3 = 0;}   
409A:  BCF    33.7
409C:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de Modo 
409E:  MOVF   17,W
40A0:  SUBLW  06
40A2:  BTFSS  FD8.2
40A4:  BRA    436A
....................    { 
....................       lcd_gotoxy(1,1); 
40A6:  MOVLW  01
40A8:  MOVWF  x16
40AA:  MOVWF  x17
40AC:  MOVLB  0
40AE:  CALL   0C64
....................       printf(lcd_putc,"Velocidad Motor=%2.0f%% ",(100*((float)tmp/204))); 
40B2:  MOVLB  1
40B4:  CLRF   x0A
40B6:  MOVFF  29,109
40BA:  MOVLB  0
40BC:  CALL   0778
40C0:  MOVFF  00,100
40C4:  MOVFF  01,101
40C8:  MOVFF  02,102
40CC:  MOVFF  03,103
40D0:  MOVFF  03,121
40D4:  MOVFF  02,120
40D8:  MOVFF  01,11F
40DC:  MOVFF  00,11E
40E0:  MOVLB  1
40E2:  CLRF   x25
40E4:  CLRF   x24
40E6:  MOVLW  4C
40E8:  MOVWF  x23
40EA:  MOVLW  86
40EC:  MOVWF  x22
40EE:  MOVLB  0
40F0:  CALL   07AE
40F4:  MOVLB  1
40F6:  CLRF   x1D
40F8:  CLRF   x1C
40FA:  MOVLW  48
40FC:  MOVWF  x1B
40FE:  MOVLW  85
4100:  MOVWF  x1A
4102:  MOVFF  03,121
4106:  MOVFF  02,120
410A:  MOVFF  01,11F
410E:  MOVFF  00,11E
4112:  MOVLB  0
4114:  CALL   0F4C
4118:  MOVFF  00,100
411C:  MOVFF  01,101
4120:  MOVFF  02,102
4124:  MOVFF  03,103
4128:  MOVLW  08
412A:  MOVWF  FF6
412C:  MOVLW  05
412E:  MOVWF  FF7
4130:  MOVLW  10
4132:  MOVLB  1
4134:  MOVWF  x08
4136:  MOVLB  0
4138:  CALL   0D62
413C:  MOVLW  01
413E:  MOVWF  FE9
4140:  MOVFF  103,10B
4144:  MOVFF  102,10A
4148:  MOVFF  101,109
414C:  MOVFF  100,108
4150:  MOVLB  1
4152:  CLRF   x0C
4154:  MOVLB  0
4156:  CALL   1106
415A:  MOVLW  25
415C:  MOVLB  1
415E:  MOVWF  x15
4160:  MOVLB  0
4162:  CALL   0CD6
4166:  MOVLW  20
4168:  MOVLB  1
416A:  MOVWF  x15
416C:  MOVLB  0
416E:  CALL   0CD6
....................     
....................       lcd_gotoxy(1,4); 
4172:  MOVLW  01
4174:  MOVLB  1
4176:  MOVWF  x16
4178:  MOVLW  04
417A:  MOVWF  x17
417C:  MOVLB  0
417E:  CALL   0C64
....................       printf(lcd_putc,"InFlow= %2.1f(m/s) ",Flujo); 
4182:  MOVLW  22
4184:  MOVWF  FF6
4186:  MOVLW  05
4188:  MOVWF  FF7
418A:  MOVLW  08
418C:  MOVLB  1
418E:  MOVWF  x08
4190:  MOVLB  0
4192:  CALL   0D62
4196:  MOVLW  01
4198:  MOVWF  FE9
419A:  MOVFF  8D,10B
419E:  MOVFF  8C,10A
41A2:  MOVFF  8B,109
41A6:  MOVFF  8A,108
41AA:  MOVLB  1
41AC:  MOVWF  x0C
41AE:  MOVLB  0
41B0:  CALL   1106
41B4:  MOVLW  2F
41B6:  MOVWF  FF6
41B8:  MOVLW  05
41BA:  MOVWF  FF7
41BC:  MOVLW  06
41BE:  MOVLB  1
41C0:  MOVWF  x08
41C2:  MOVLB  0
41C4:  CALL   0D62
....................        
....................       ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
41C8:  BCF    4D.1
41CA:  BCF    4D.2
41CC:  MOVLW  0A
41CE:  MOVWF  2C
41D0:  MOVWF  2D
....................       lcd_gotoxy(1,2); 
41D2:  MOVLW  01
41D4:  MOVLB  1
41D6:  MOVWF  x16
41D8:  MOVLW  02
41DA:  MOVWF  x17
41DC:  MOVLB  0
41DE:  CALL   0C64
....................       printf(lcd_putc," Control Velocidad  "); 
41E2:  MOVLW  36
41E4:  MOVWF  FF6
41E6:  MOVLW  05
41E8:  MOVWF  FF7
41EA:  CALL   0D42
....................       lcd_gotoxy(1,3); 
41EE:  MOVLW  01
41F0:  MOVLB  1
41F2:  MOVWF  x16
41F4:  MOVLW  03
41F6:  MOVWF  x17
41F8:  MOVLB  0
41FA:  CALL   0C64
....................       printf(lcd_putc," !Ajuste Setpoint!  "); 
41FE:  MOVLW  4C
4200:  MOVWF  FF6
4202:  MOVLW  05
4204:  MOVWF  FF7
4206:  CALL   0D42
....................       if(UP) 
420A:  BSF    F93.3
420C:  BTFSS  F81.3
420E:  BRA    4224
....................       { 
....................          if(tmp<204) 
4210:  MOVF   29,W
4212:  SUBLW  CB
4214:  BNC   4224
....................          { 
....................             tmp++; 
4216:  INCF   29,F
....................             delay_ms(50); 
4218:  MOVLW  32
421A:  MOVLB  1
421C:  MOVWF  x1B
421E:  MOVLB  0
4220:  CALL   074E
....................          } 
....................       } 
....................              
....................       if(DOWN) 
4224:  BSF    F93.2
4226:  BTFSS  F81.2
4228:  BRA    423E
....................       { 
....................          if(tmp>51) 
422A:  MOVF   29,W
422C:  SUBLW  33
422E:  BC    423E
....................          { 
....................             tmp--; 
4230:  DECF   29,F
....................             delay_ms(50); 
4232:  MOVLW  32
4234:  MOVLB  1
4236:  MOVWF  x1B
4238:  MOVLB  0
423A:  CALL   074E
....................          } 
....................       } 
....................       ValorSemi=tmp; 
423E:  MOVFF  29,2F
....................       ajustar_damper(tmp); 
4242:  MOVFF  29,FE
4246:  GOTO   13BA
....................       if(RIGHT) 
424A:  BSF    F93.0
424C:  BTFSS  F81.0
424E:  BRA    4332
....................       { 
....................          write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
4250:  MOVLW  0D
4252:  MOVWF  FA9
4254:  MOVFF  29,FA8
4258:  BCF    FA6.6
425A:  BCF    FA6.7
425C:  BSF    FA6.2
425E:  MOVF   FF2,W
4260:  MOVWF  00
4262:  BCF    FF2.7
4264:  MOVLB  F
4266:  MOVLW  55
4268:  MOVWF  FA7
426A:  MOVLW  AA
426C:  MOVWF  FA7
426E:  BSF    FA6.1
4270:  BTFSC  FA6.1
4272:  BRA    4270
4274:  BCF    FA6.2
4276:  MOVF   00,W
4278:  IORWF  FF2,F
427A:  BCF    4D.3
427C:  MOVLW  14
427E:  MOVWF  2E
4280:  MOVLW  0A
4282:  MOVWF  2C
4284:  MOVWF  2D
4286:  MOVLW  02
4288:  MOVLB  1
428A:  MOVWF  x00
428C:  MOVLW  FA
428E:  MOVWF  x1B
4290:  MOVLB  0
4292:  CALL   074E
4296:  MOVLB  1
4298:  DECFSZ x00,F
429A:  BRA    428C
429C:  MOVLW  0C
429E:  MOVWF  x15
42A0:  MOVLB  0
42A2:  CALL   0CD6
....................          write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
42A6:  MOVLW  0C
42A8:  MOVWF  FA9
42AA:  MOVFF  2E,FA8
42AE:  BCF    FA6.6
42B0:  BCF    FA6.7
42B2:  BSF    FA6.2
42B4:  MOVF   FF2,W
42B6:  MOVWF  00
42B8:  BCF    FF2.7
42BA:  MOVLB  F
42BC:  MOVLW  55
42BE:  MOVWF  FA7
42C0:  MOVLW  AA
42C2:  MOVWF  FA7
42C4:  BSF    FA6.1
42C6:  BTFSC  FA6.1
42C8:  BRA    42C6
42CA:  BCF    FA6.2
42CC:  MOVF   00,W
42CE:  IORWF  FF2,F
42D0:  MOVLW  0B
42D2:  MOVWF  FA9
42D4:  MOVFF  2C,FA8
42D8:  BCF    FA6.6
42DA:  BCF    FA6.7
42DC:  BSF    FA6.2
42DE:  MOVF   FF2,W
42E0:  MOVWF  00
42E2:  BCF    FF2.7
42E4:  MOVLW  55
42E6:  MOVWF  FA7
42E8:  MOVLW  AA
42EA:  MOVWF  FA7
42EC:  BSF    FA6.1
42EE:  BTFSC  FA6.1
42F0:  BRA    42EE
42F2:  BCF    FA6.2
42F4:  MOVF   00,W
42F6:  IORWF  FF2,F
42F8:  MOVLW  0A
42FA:  MOVWF  FA9
42FC:  MOVFF  2D,FA8
4300:  BCF    FA6.6
4302:  BCF    FA6.7
4304:  BSF    FA6.2
4306:  MOVF   FF2,W
4308:  MOVWF  00
430A:  BCF    FF2.7
430C:  MOVLW  55
430E:  MOVWF  FA7
4310:  MOVLW  AA
4312:  MOVWF  FA7
4314:  BSF    FA6.1
4316:  BTFSC  FA6.1
4318:  BRA    4316
431A:  BCF    FA6.2
431C:  MOVF   00,W
431E:  IORWF  FF2,F
....................          Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
4320:  MOVLW  01
4322:  MOVWF  17
4324:  CLRF   35
4326:  MOVLW  02
4328:  MOVWF  1B
432A:  MOVWF  1D
432C:  MOVLW  0B
432E:  MOVWF  1A
4330:  MOVLB  0
....................       }  
....................        
....................       if(LEFT) 
4332:  BSF    F93.1
4334:  BTFSS  F81.1
4336:  BRA    4368
....................       { 
....................          Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4338:  MOVLW  01
433A:  MOVWF  17
433C:  CLRF   35
433E:  MOVLW  02
4340:  MOVWF  1B
4342:  MOVWF  1D
4344:  MOVLW  0B
4346:  MOVWF  1A
4348:  MOVLW  02
434A:  MOVLB  1
434C:  MOVWF  x00
434E:  MOVLW  FA
4350:  MOVWF  x1B
4352:  MOVLB  0
4354:  CALL   074E
4358:  MOVLB  1
435A:  DECFSZ x00,F
435C:  BRA    434E
435E:  MOVLW  0C
4360:  MOVWF  x15
4362:  MOVLB  0
4364:  CALL   0CD6
4368:  MOVLB  1
....................       } 
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de SetPoint 
436A:  MOVF   17,W
436C:  SUBLW  07
436E:  BTFSS  FD8.2
4370:  BRA    460A
....................    lcd_gotoxy(1,1); 
4372:  MOVLW  01
4374:  MOVWF  x16
4376:  MOVWF  x17
4378:  MOVLB  0
437A:  CALL   0C64
....................    printf(lcd_putc,"  Duracion Actual   ");                           
437E:  MOVLW  62
4380:  MOVWF  FF6
4382:  MOVLW  05
4384:  MOVWF  FF7
4386:  CALL   0D42
....................    lcd_gotoxy(1,2);                                                   
438A:  MOVLW  01
438C:  MOVLB  1
438E:  MOVWF  x16
4390:  MOVLW  02
4392:  MOVWF  x17
4394:  MOVLB  0
4396:  CALL   0C64
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
439A:  MOVLW  78
439C:  MOVWF  FF6
439E:  MOVLW  05
43A0:  MOVWF  FF7
43A2:  MOVLW  09
43A4:  MOVLB  1
43A6:  MOVWF  x08
43A8:  MOVLB  0
43AA:  CALL   0D62
43AE:  MOVFF  32,100
43B2:  MOVLW  01
43B4:  MOVLB  1
43B6:  MOVWF  x01
43B8:  MOVLB  0
43BA:  CALL   13C2
43BE:  MOVLW  3A
43C0:  MOVLB  1
43C2:  MOVWF  x15
43C4:  MOVLB  0
43C6:  CALL   0CD6
43CA:  MOVFF  31,100
43CE:  MOVLW  01
43D0:  MOVLB  1
43D2:  MOVWF  x01
43D4:  MOVLB  0
43D6:  CALL   13C2
43DA:  MOVLW  3A
43DC:  MOVLB  1
43DE:  MOVWF  x15
43E0:  MOVLB  0
43E2:  CALL   0CD6
43E6:  MOVFF  30,100
43EA:  MOVLW  01
43EC:  MOVLB  1
43EE:  MOVWF  x01
43F0:  MOVLB  0
43F2:  CALL   13C2
43F6:  MOVLW  20
43F8:  MOVLB  1
43FA:  MOVWF  x15
43FC:  MOVLB  0
43FE:  CALL   0CD6
....................     
....................    if(flag_filtro==1) 
4402:  BTFSS  34.2
4404:  BRA    4424
....................    { 
....................       lcd_gotoxy(1,3);                                                  
4406:  MOVLW  01
4408:  MOVLB  1
440A:  MOVWF  x16
440C:  MOVLW  03
440E:  MOVWF  x17
4410:  MOVLB  0
4412:  CALL   0C64
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
4416:  MOVLW  92
4418:  MOVWF  FF6
441A:  MOVLW  05
441C:  MOVWF  FF7
441E:  CALL   0D42
....................    } 
....................    else 
4422:  BRA    4440
....................    { 
....................       lcd_gotoxy(1,3);                                                  
4424:  MOVLW  01
4426:  MOVLB  1
4428:  MOVWF  x16
442A:  MOVLW  03
442C:  MOVWF  x17
442E:  MOVLB  0
4430:  CALL   0C64
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
4434:  MOVLW  A8
4436:  MOVWF  FF6
4438:  MOVLW  05
443A:  MOVWF  FF7
443C:  CALL   0D42
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
4440:  MOVLW  01
4442:  MOVLB  1
4444:  MOVWF  x16
4446:  MOVLW  04
4448:  MOVWF  x17
444A:  MOVLB  0
444C:  CALL   0C64
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
4450:  MOVLW  BE
4452:  MOVWF  FF6
4454:  MOVLW  05
4456:  MOVWF  FF7
4458:  CALL   0D42
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
445C:  BSF    F93.3
445E:  BTFSS  F81.3
4460:  BRA    4564
....................       {  delay_ms(200); 
4462:  MOVLW  C8
4464:  MOVLB  1
4466:  MOVWF  x1B
4468:  MOVLB  0
446A:  CALL   074E
....................          printf(lcd_putc,"\f"); 
446E:  MOVLW  0C
4470:  MOVLB  1
4472:  MOVWF  x15
4474:  MOVLB  0
4476:  CALL   0CD6
....................          lcd_gotoxy(1,2); 
447A:  MOVLW  01
447C:  MOVLB  1
447E:  MOVWF  x16
4480:  MOVLW  02
4482:  MOVWF  x17
4484:  MOVLB  0
4486:  CALL   0C64
....................          printf(lcd_putc," Reset de tiempo "); 
448A:  MOVLW  D4
448C:  MOVWF  FF6
448E:  MOVLW  05
4490:  MOVWF  FF7
4492:  CALL   0D42
....................          lcd_gotoxy(1,3); 
4496:  MOVLW  01
4498:  MOVLB  1
449A:  MOVWF  x16
449C:  MOVLW  03
449E:  MOVWF  x17
44A0:  MOVLB  0
44A2:  CALL   0C64
....................          printf(lcd_putc,"     Exitoso     "); 
44A6:  MOVLW  E6
44A8:  MOVWF  FF6
44AA:  MOVLW  05
44AC:  MOVWF  FF7
44AE:  CALL   0D42
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
44B2:  MOVLW  46
44B4:  MOVWF  FA9
44B6:  CLRF   FA8
44B8:  BCF    FA6.6
44BA:  BCF    FA6.7
44BC:  BSF    FA6.2
44BE:  MOVF   FF2,W
44C0:  MOVWF  00
44C2:  BCF    FF2.7
44C4:  MOVLB  F
44C6:  MOVLW  55
44C8:  MOVWF  FA7
44CA:  MOVLW  AA
44CC:  MOVWF  FA7
44CE:  BSF    FA6.1
44D0:  BTFSC  FA6.1
44D2:  BRA    44D0
44D4:  BCF    FA6.2
44D6:  MOVF   00,W
44D8:  IORWF  FF2,F
44DA:  MOVLW  47
44DC:  MOVWF  FA9
44DE:  CLRF   FA8
44E0:  BCF    FA6.6
44E2:  BCF    FA6.7
44E4:  BSF    FA6.2
44E6:  MOVF   FF2,W
44E8:  MOVWF  00
44EA:  BCF    FF2.7
44EC:  MOVLW  55
44EE:  MOVWF  FA7
44F0:  MOVLW  AA
44F2:  MOVWF  FA7
44F4:  BSF    FA6.1
44F6:  BTFSC  FA6.1
44F8:  BRA    44F6
44FA:  BCF    FA6.2
44FC:  MOVF   00,W
44FE:  IORWF  FF2,F
4500:  MOVLW  48
4502:  MOVWF  FA9
4504:  CLRF   FA8
4506:  BCF    FA6.6
4508:  BCF    FA6.7
450A:  BSF    FA6.2
450C:  MOVF   FF2,W
450E:  MOVWF  00
4510:  BCF    FF2.7
4512:  MOVLW  55
4514:  MOVWF  FA7
4516:  MOVLW  AA
4518:  MOVWF  FA7
451A:  BSF    FA6.1
451C:  BTFSC  FA6.1
451E:  BRA    451C
4520:  BCF    FA6.2
4522:  MOVF   00,W
4524:  IORWF  FF2,F
....................          delay_ms(700); 
4526:  MOVLW  04
4528:  MOVLB  1
452A:  MOVWF  x00
452C:  MOVLW  AF
452E:  MOVWF  x1B
4530:  MOVLB  0
4532:  CALL   074E
4536:  MOVLB  1
4538:  DECFSZ x00,F
453A:  BRA    452C
....................          segundos=0;minutos=0;horas=0; 
453C:  CLRF   30
453E:  CLRF   31
4540:  CLRF   32
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4542:  MOVLW  1E
4544:  MOVWF  x1B
4546:  MOVLB  0
4548:  CALL   074E
454C:  MOVLW  01
454E:  MOVWF  17
4550:  CLRF   35
4552:  MOVLW  02
4554:  MOVWF  1B
4556:  MOVWF  1D
4558:  MOVLW  0C
455A:  MOVLB  1
455C:  MOVWF  x15
455E:  MOVLB  0
4560:  CALL   0CD6
....................       } 
....................        
....................       if(RIGHT) 
4564:  BSF    F93.0
4566:  BTFSS  F81.0
4568:  BRA    45CC
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
456A:  BTG    34.2
456C:  MOVLW  00
456E:  BTFSC  34.2
4570:  MOVLW  01
4572:  MOVLB  1
4574:  MOVWF  x00
4576:  MOVLW  49
4578:  MOVWF  FA9
457A:  MOVFF  100,FA8
457E:  BCF    FA6.6
4580:  BCF    FA6.7
4582:  BSF    FA6.2
4584:  MOVF   FF2,W
4586:  MOVWF  00
4588:  BCF    FF2.7
458A:  MOVLB  F
458C:  MOVLW  55
458E:  MOVWF  FA7
4590:  MOVLW  AA
4592:  MOVWF  FA7
4594:  BSF    FA6.1
4596:  BTFSC  FA6.1
4598:  BRA    4596
459A:  BCF    FA6.2
459C:  MOVF   00,W
459E:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
45A0:  MOVLW  02
45A2:  MOVLB  1
45A4:  MOVWF  x00
45A6:  MOVLW  FA
45A8:  MOVWF  x1B
45AA:  MOVLB  0
45AC:  CALL   074E
45B0:  MOVLB  1
45B2:  DECFSZ x00,F
45B4:  BRA    45A6
45B6:  MOVLW  01
45B8:  MOVWF  17
45BA:  CLRF   35
45BC:  MOVLW  02
45BE:  MOVWF  1B
45C0:  MOVWF  1D
45C2:  MOVLW  0C
45C4:  MOVWF  x15
45C6:  MOVLB  0
45C8:  CALL   0CD6
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
45CC:  BSF    F93.1
45CE:  BTFSS  F81.1
45D0:  BRA    4606
....................       {  if(Flanco3 == 0)  
45D2:  BTFSC  33.7
45D4:  BRA    4604
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
45D6:  BSF    33.7
45D8:  MOVLW  02
45DA:  MOVLB  1
45DC:  MOVWF  x00
45DE:  MOVLW  FA
45E0:  MOVWF  x1B
45E2:  MOVLB  0
45E4:  CALL   074E
45E8:  MOVLB  1
45EA:  DECFSZ x00,F
45EC:  BRA    45DE
45EE:  MOVLW  01
45F0:  MOVWF  17
45F2:  CLRF   35
45F4:  MOVLW  02
45F6:  MOVWF  1B
45F8:  MOVWF  1D
45FA:  MOVLW  0C
45FC:  MOVWF  x15
45FE:  MOVLB  0
4600:  CALL   0CD6
....................          else 
4604:  BRA    4608
....................             {Flanco3 = 0;}       
4606:  BCF    33.7
4608:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
460A:  MOVF   17,W
460C:  SUBLW  14
460E:  BTFSS  FD8.2
4610:  BRA    49B8
....................    { 
....................       if(Lectura2==1) 
4612:  BTFSS  34.6
4614:  BRA    474C
....................       { 
....................       lcd_gotoxy(1,1); 
4616:  MOVLW  01
4618:  MOVWF  x16
461A:  MOVWF  x17
461C:  MOVLB  0
461E:  CALL   0C64
....................       printf(lcd_putc," JP CEGH ");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4622:  MOVLW  F8
4624:  MOVWF  FF6
4626:  MOVLW  05
4628:  MOVWF  FF7
462A:  CALL   0D42
....................       lcd_gotoxy(1,2); 
462E:  MOVLW  01
4630:  MOVLB  1
4632:  MOVWF  x16
4634:  MOVLW  02
4636:  MOVWF  x17
4638:  MOVLB  0
463A:  CALL   0C64
....................       printf(lcd_putc,"Mot:%2.0f%%",(100*((float)tmp/204))); 
463E:  MOVLB  1
4640:  CLRF   x0A
4642:  MOVFF  29,109
4646:  MOVLB  0
4648:  CALL   0778
464C:  MOVFF  00,100
4650:  MOVFF  01,101
4654:  MOVFF  02,102
4658:  MOVFF  03,103
465C:  MOVFF  03,121
4660:  MOVFF  02,120
4664:  MOVFF  01,11F
4668:  MOVFF  00,11E
466C:  MOVLB  1
466E:  CLRF   x25
4670:  CLRF   x24
4672:  MOVLW  4C
4674:  MOVWF  x23
4676:  MOVLW  86
4678:  MOVWF  x22
467A:  MOVLB  0
467C:  CALL   07AE
4680:  MOVLB  1
4682:  CLRF   x1D
4684:  CLRF   x1C
4686:  MOVLW  48
4688:  MOVWF  x1B
468A:  MOVLW  85
468C:  MOVWF  x1A
468E:  MOVFF  03,121
4692:  MOVFF  02,120
4696:  MOVFF  01,11F
469A:  MOVFF  00,11E
469E:  MOVLB  0
46A0:  CALL   0F4C
46A4:  MOVFF  00,100
46A8:  MOVFF  01,101
46AC:  MOVFF  02,102
46B0:  MOVFF  03,103
46B4:  MOVLW  02
46B6:  MOVWF  FF6
46B8:  MOVLW  06
46BA:  MOVWF  FF7
46BC:  MOVLW  04
46BE:  MOVLB  1
46C0:  MOVWF  x08
46C2:  MOVLB  0
46C4:  CALL   0D62
46C8:  MOVLW  01
46CA:  MOVWF  FE9
46CC:  MOVFF  103,10B
46D0:  MOVFF  102,10A
46D4:  MOVFF  101,109
46D8:  MOVFF  100,108
46DC:  MOVLB  1
46DE:  CLRF   x0C
46E0:  MOVLB  0
46E2:  CALL   1106
46E6:  MOVLW  25
46E8:  MOVLB  1
46EA:  MOVWF  x15
46EC:  MOVLB  0
46EE:  CALL   0CD6
....................       lcd_gotoxy(1,3); 
46F2:  MOVLW  01
46F4:  MOVLB  1
46F6:  MOVWF  x16
46F8:  MOVLW  03
46FA:  MOVWF  x17
46FC:  MOVLB  0
46FE:  CALL   0C64
....................       printf(lcd_putc,"InFlow: %2.1f (m/s) ",Flujo); 
4702:  MOVLW  0E
4704:  MOVWF  FF6
4706:  MOVLW  06
4708:  MOVWF  FF7
470A:  MOVLW  08
470C:  MOVLB  1
470E:  MOVWF  x08
4710:  MOVLB  0
4712:  CALL   0D62
4716:  MOVLW  01
4718:  MOVWF  FE9
471A:  MOVFF  8D,10B
471E:  MOVFF  8C,10A
4722:  MOVFF  8B,109
4726:  MOVFF  8A,108
472A:  MOVLB  1
472C:  MOVWF  x0C
472E:  MOVLB  0
4730:  CALL   1106
4734:  MOVLW  1B
4736:  MOVWF  FF6
4738:  MOVLW  06
473A:  MOVWF  FF7
473C:  MOVLW  07
473E:  MOVLB  1
4740:  MOVWF  x08
4742:  MOVLB  0
4744:  CALL   0D62
....................       Lectura2=0; 
4748:  BCF    34.6
474A:  MOVLB  1
....................       } 
....................           
....................       if(horas>=60) 
474C:  MOVF   32,W
474E:  SUBLW  3B
4750:  BC    4770
....................       { 
....................          lcd_gotoxy(10,1);                      
4752:  MOVLW  0A
4754:  MOVWF  x16
4756:  MOVLW  01
4758:  MOVWF  x17
475A:  MOVLB  0
475C:  CALL   0C64
....................          printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4760:  MOVLW  24
4762:  MOVWF  FF6
4764:  MOVLW  06
4766:  MOVWF  FF7
4768:  CALL   0D42
....................       } 
....................       else 
476C:  BRA    478A
476E:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
4770:  MOVLW  0A
4772:  MOVWF  x16
4774:  MOVLW  01
4776:  MOVWF  x17
4778:  MOVLB  0
477A:  CALL   0C64
....................          printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
477E:  MOVLW  30
4780:  MOVWF  FF6
4782:  MOVLW  06
4784:  MOVWF  FF7
4786:  CALL   0D42
....................       } 
....................        
....................       if(Flujo<0.5) 
478A:  MOVFF  8D,11D
478E:  MOVFF  8C,11C
4792:  MOVFF  8B,11B
4796:  MOVFF  8A,11A
479A:  MOVLB  1
479C:  CLRF   x21
479E:  CLRF   x20
47A0:  CLRF   x1F
47A2:  MOVLW  7E
47A4:  MOVWF  x1E
47A6:  MOVLB  0
47A8:  CALL   1308
47AC:  BNC   47CC
....................       { 
....................          lcd_gotoxy(11,2); 
47AE:  MOVLW  0B
47B0:  MOVLB  1
47B2:  MOVWF  x16
47B4:  MOVLW  02
47B6:  MOVWF  x17
47B8:  MOVLB  0
47BA:  CALL   0C64
....................          printf(lcd_putc,"Flujo:Bajo");       
47BE:  MOVLW  3C
47C0:  MOVWF  FF6
47C2:  MOVLW  06
47C4:  MOVWF  FF7
47C6:  CALL   0D42
....................       } 
....................       else 
47CA:  BRA    482A
....................       { 
....................          if(Flujo>2.0) 
47CC:  MOVLB  1
47CE:  CLRF   x1D
47D0:  CLRF   x1C
47D2:  CLRF   x1B
47D4:  MOVLW  80
47D6:  MOVWF  x1A
47D8:  MOVFF  8D,121
47DC:  MOVFF  8C,120
47E0:  MOVFF  8B,11F
47E4:  MOVFF  8A,11E
47E8:  MOVLB  0
47EA:  CALL   1308
47EE:  BNC   480E
....................          { 
....................             lcd_gotoxy(11,2); 
47F0:  MOVLW  0B
47F2:  MOVLB  1
47F4:  MOVWF  x16
47F6:  MOVLW  02
47F8:  MOVWF  x17
47FA:  MOVLB  0
47FC:  CALL   0C64
....................             printf(lcd_putc,"Flujo:Alto");                
4800:  MOVLW  48
4802:  MOVWF  FF6
4804:  MOVLW  06
4806:  MOVWF  FF7
4808:  CALL   0D42
....................          } 
....................          else 
480C:  BRA    482A
....................          { 
....................             lcd_gotoxy(11,2); 
480E:  MOVLW  0B
4810:  MOVLB  1
4812:  MOVWF  x16
4814:  MOVLW  02
4816:  MOVWF  x17
4818:  MOVLB  0
481A:  CALL   0C64
....................             printf(lcd_putc,"Flujo:OK  ");       
481E:  MOVLW  54
4820:  MOVWF  FF6
4822:  MOVLW  06
4824:  MOVWF  FF7
4826:  CALL   0D42
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
482A:  BTFSS  33.0
482C:  BRA    4860
....................       { 
....................          Luz_Blanca_on; 
482E:  BSF    F8A.4
4830:  BCF    F93.4
....................          delay_ms(150); 
4832:  MOVLW  96
4834:  MOVLB  1
4836:  MOVWF  x1B
4838:  MOVLB  0
483A:  CALL   074E
....................          lcd_init(); 
483E:  CALL   0BF8
....................          lcd_gotoxy(1,4); 
4842:  MOVLW  01
4844:  MOVLB  1
4846:  MOVWF  x16
4848:  MOVLW  04
484A:  MOVWF  x17
484C:  MOVLB  0
484E:  CALL   0C64
....................          printf(lcd_putc,"Luz:ON "); 
4852:  MOVLW  60
4854:  MOVWF  FF6
4856:  MOVLW  06
4858:  MOVWF  FF7
485A:  CALL   0D42
....................       } 
....................       else 
485E:  BRA    4890
....................       { 
....................          Luz_Blanca_off; 
4860:  BCF    F8A.4
4862:  BCF    F93.4
....................          delay_ms(150); 
4864:  MOVLW  96
4866:  MOVLB  1
4868:  MOVWF  x1B
486A:  MOVLB  0
486C:  CALL   074E
....................          lcd_init(); 
4870:  CALL   0BF8
....................          lcd_gotoxy(1,4); 
4874:  MOVLW  01
4876:  MOVLB  1
4878:  MOVWF  x16
487A:  MOVLW  04
487C:  MOVWF  x17
487E:  MOVLB  0
4880:  CALL   0C64
....................          printf(lcd_putc,"Luz:OFF "); 
4884:  MOVLW  68
4886:  MOVWF  FF6
4888:  MOVLW  06
488A:  MOVWF  FF7
488C:  CALL   0D42
....................       } 
....................        
....................       if(estadomv==1) 
4890:  BTFSS  33.1
4892:  BRA    48C6
....................       { 
....................          Motor_on;    
4894:  BSF    F8A.5
4896:  BCF    F93.5
....................          delay_ms(150); 
4898:  MOVLW  96
489A:  MOVLB  1
489C:  MOVWF  x1B
489E:  MOVLB  0
48A0:  CALL   074E
....................          lcd_init(); 
48A4:  CALL   0BF8
....................          lcd_gotoxy(10,4); 
48A8:  MOVLW  0A
48AA:  MOVLB  1
48AC:  MOVWF  x16
48AE:  MOVLW  04
48B0:  MOVWF  x17
48B2:  MOVLB  0
48B4:  CALL   0C64
....................          printf(lcd_putc,"Motor:ON "); 
48B8:  MOVLW  72
48BA:  MOVWF  FF6
48BC:  MOVLW  06
48BE:  MOVWF  FF7
48C0:  CALL   0D42
....................       } 
....................       else 
48C4:  BRA    48F6
....................       { 
....................          Motor_off;      
48C6:  BCF    F8A.5
48C8:  BCF    F93.5
....................          delay_ms(150); 
48CA:  MOVLW  96
48CC:  MOVLB  1
48CE:  MOVWF  x1B
48D0:  MOVLB  0
48D2:  CALL   074E
....................          lcd_init(); 
48D6:  CALL   0BF8
....................          lcd_gotoxy(10,4); 
48DA:  MOVLW  0A
48DC:  MOVLB  1
48DE:  MOVWF  x16
48E0:  MOVLW  04
48E2:  MOVWF  x17
48E4:  MOVLB  0
48E6:  CALL   0C64
....................          printf(lcd_putc,"Motor:OFF ");  
48EA:  MOVLW  7C
48EC:  MOVWF  FF6
48EE:  MOVLW  06
48F0:  MOVWF  FF7
48F2:  CALL   0D42
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
48F6:  BSF    F93.2
48F8:  BTFSS  F81.2
48FA:  BRA    4912
....................       {  if(Flanco == 0)  
48FC:  BTFSC  33.4
48FE:  BRA    4910
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
4900:  BSF    33.4
4902:  MOVLW  C8
4904:  MOVLB  1
4906:  MOVWF  x1B
4908:  MOVLB  0
490A:  CALL   074E
490E:  BTG    33.0
....................          else 
4910:  BRA    4914
....................             {Flanco = 0;} 
4912:  BCF    33.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
4914:  BSF    F93.1
4916:  BTFSS  F81.1
4918:  BRA    4930
....................       {  if(Flanco2 == 0)  
491A:  BTFSC  33.6
491C:  BRA    492E
....................             {Flanco2 = 1;delay_ms(200);estadomv=!estadomv;}} 
491E:  BSF    33.6
4920:  MOVLW  C8
4922:  MOVLB  1
4924:  MOVWF  x1B
4926:  MOVLB  0
4928:  CALL   074E
492C:  BTG    33.1
....................          else 
492E:  BRA    4932
....................             {Flanco2 = 0;} 
4930:  BCF    33.6
....................     
....................       if(UP)// Si oprime Arriba 
4932:  BSF    F93.3
4934:  BTFSS  F81.3
4936:  BRA    496E
....................       {  if(Flanco1 == 0)  
4938:  BTFSC  33.5
493A:  BRA    496C
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
493C:  MOVLW  02
493E:  MOVLB  1
4940:  MOVWF  x00
4942:  MOVLW  FA
4944:  MOVWF  x1B
4946:  MOVLB  0
4948:  CALL   074E
494C:  MOVLB  1
494E:  DECFSZ x00,F
4950:  BRA    4942
4952:  MOVLW  0C
4954:  MOVWF  x15
4956:  MOVLB  0
4958:  CALL   0CD6
495C:  MOVLW  01
495E:  MOVWF  17
4960:  CLRF   35
4962:  MOVLW  02
4964:  MOVWF  1B
4966:  MOVWF  1D
4968:  MOVLW  0B
496A:  MOVWF  1A
....................          else 
496C:  BRA    4970
....................             {Flanco1 = 0;}    
496E:  BCF    33.5
....................              
....................       if(RIGHT)// Si oprime Derecha 
4970:  BSF    F93.0
4972:  BTFSS  F81.0
4974:  BRA    49B4
....................       { 
....................          if(Flanco3 == 0) 
4976:  BTFSC  33.7
4978:  BRA    49B2
....................          { 
....................             delay_ms(1500); 
497A:  MOVLW  06
497C:  MOVLB  1
497E:  MOVWF  x00
4980:  MOVLW  FA
4982:  MOVWF  x1B
4984:  MOVLB  0
4986:  CALL   074E
498A:  MOVLB  1
498C:  DECFSZ x00,F
498E:  BRA    4980
....................             if(RIGHT) 
4990:  BSF    F93.0
4992:  BTFSS  F81.0
4994:  BRA    49A2
....................             { 
....................                lcd_init();Flanco3=1; 
4996:  MOVLB  0
4998:  CALL   0BF8
499C:  BSF    33.7
....................             } 
....................             else 
499E:  BRA    49B2
49A0:  MOVLB  1
....................             { 
....................                printf(lcd_putc,"\f");Menu=40;Flanco3=1; 
49A2:  MOVLW  0C
49A4:  MOVWF  x15
49A6:  MOVLB  0
49A8:  CALL   0CD6
49AC:  MOVLW  28
49AE:  MOVWF  17
49B0:  BSF    33.7
....................             } 
....................          } 
....................       } 
....................       else 
49B2:  BRA    49B6
....................       { 
....................          Flanco3 = 0; 
49B4:  BCF    33.7
49B6:  MOVLB  1
....................       } 
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
49B8:  MOVF   17,W
49BA:  SUBLW  1E
49BC:  BTFSS  FD8.2
49BE:  BRA    4B42
....................       lcd_gotoxy(1,1); 
49C0:  MOVLW  01
49C2:  MOVWF  x16
49C4:  MOVWF  x17
49C6:  MOVLB  0
49C8:  CALL   0C64
....................       printf(lcd_putc,"     Apagando     "); 
49CC:  MOVLW  88
49CE:  MOVWF  FF6
49D0:  MOVLW  06
49D2:  MOVWF  FF7
49D4:  CALL   0D42
....................       lcd_gotoxy(1,2); 
49D8:  MOVLW  01
49DA:  MOVLB  1
49DC:  MOVWF  x16
49DE:  MOVLW  02
49E0:  MOVWF  x17
49E2:  MOVLB  0
49E4:  CALL   0C64
....................       printf(lcd_putc,"      Cabina      "); 
49E8:  MOVLW  9C
49EA:  MOVWF  FF6
49EC:  MOVLW  06
49EE:  MOVWF  FF7
49F0:  CALL   0D42
....................        
....................       lcd_gotoxy(1,3); 
49F4:  MOVLW  01
49F6:  MOVLB  1
49F8:  MOVWF  x16
49FA:  MOVLW  03
49FC:  MOVWF  x17
49FE:  MOVLB  0
4A00:  CALL   0C64
....................       printf(lcd_putc," Espere"); 
4A04:  MOVLW  B0
4A06:  MOVWF  FF6
4A08:  MOVLW  06
4A0A:  MOVWF  FF7
4A0C:  CALL   0D42
....................        
....................       if(Lectura==1) 
4A10:  BTFSS  34.5
4A12:  BRA    4B3E
....................       {       
....................          if(n<8) 
4A14:  MOVF   26,W
4A16:  SUBLW  07
4A18:  BNC   4A3E
....................          { 
....................             lcd_gotoxy(9+n,3); 
4A1A:  MOVLW  09
4A1C:  ADDWF  26,W
4A1E:  MOVLB  1
4A20:  MOVWF  x00
4A22:  MOVWF  x16
4A24:  MOVLW  03
4A26:  MOVWF  x17
4A28:  MOVLB  0
4A2A:  CALL   0C64
....................             printf(lcd_putc,"."); 
4A2E:  MOVLW  2E
4A30:  MOVLB  1
4A32:  MOVWF  x15
4A34:  MOVLB  0
4A36:  CALL   0CD6
....................             n++; 
4A3A:  INCF   26,F
....................          } 
....................          else 
4A3C:  BRA    4B3C
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
4A3E:  MOVLW  46
4A40:  MOVWF  FA9
4A42:  MOVFF  30,FA8
4A46:  BCF    FA6.6
4A48:  BCF    FA6.7
4A4A:  BSF    FA6.2
4A4C:  MOVF   FF2,W
4A4E:  MOVWF  00
4A50:  BCF    FF2.7
4A52:  MOVLB  F
4A54:  MOVLW  55
4A56:  MOVWF  FA7
4A58:  MOVLW  AA
4A5A:  MOVWF  FA7
4A5C:  BSF    FA6.1
4A5E:  BTFSC  FA6.1
4A60:  BRA    4A5E
4A62:  BCF    FA6.2
4A64:  MOVF   00,W
4A66:  IORWF  FF2,F
4A68:  MOVLW  47
4A6A:  MOVWF  FA9
4A6C:  MOVFF  31,FA8
4A70:  BCF    FA6.6
4A72:  BCF    FA6.7
4A74:  BSF    FA6.2
4A76:  MOVF   FF2,W
4A78:  MOVWF  00
4A7A:  BCF    FF2.7
4A7C:  MOVLW  55
4A7E:  MOVWF  FA7
4A80:  MOVLW  AA
4A82:  MOVWF  FA7
4A84:  BSF    FA6.1
4A86:  BTFSC  FA6.1
4A88:  BRA    4A86
4A8A:  BCF    FA6.2
4A8C:  MOVF   00,W
4A8E:  IORWF  FF2,F
4A90:  MOVLW  48
4A92:  MOVWF  FA9
4A94:  MOVFF  32,FA8
4A98:  BCF    FA6.6
4A9A:  BCF    FA6.7
4A9C:  BSF    FA6.2
4A9E:  MOVF   FF2,W
4AA0:  MOVWF  00
4AA2:  BCF    FF2.7
4AA4:  MOVLW  55
4AA6:  MOVWF  FA7
4AA8:  MOVLW  AA
4AAA:  MOVWF  FA7
4AAC:  BSF    FA6.1
4AAE:  BTFSC  FA6.1
4AB0:  BRA    4AAE
4AB2:  BCF    FA6.2
4AB4:  MOVF   00,W
4AB6:  IORWF  FF2,F
....................             n=0;lcd_gotoxy(1,3); 
4AB8:  CLRF   26
4ABA:  MOVLW  01
4ABC:  MOVLB  1
4ABE:  MOVWF  x16
4AC0:  MOVLW  03
4AC2:  MOVWF  x17
4AC4:  MOVLB  0
4AC6:  CALL   0C64
....................             printf(lcd_putc,"                    "); 
4ACA:  MOVLW  B8
4ACC:  MOVWF  FF6
4ACE:  MOVLW  06
4AD0:  MOVWF  FF7
4AD2:  CALL   0D42
....................             printf(lcd_putc,"\f"); 
4AD6:  MOVLW  0C
4AD8:  MOVLB  1
4ADA:  MOVWF  x15
4ADC:  MOVLB  0
4ADE:  CALL   0CD6
....................             lcd_gotoxy(1,2); 
4AE2:  MOVLW  01
4AE4:  MOVLB  1
4AE6:  MOVWF  x16
4AE8:  MOVLW  02
4AEA:  MOVWF  x17
4AEC:  MOVLB  0
4AEE:  CALL   0C64
....................             printf(lcd_putc,"     Proceso      "); 
4AF2:  MOVLW  CE
4AF4:  MOVWF  FF6
4AF6:  MOVLW  06
4AF8:  MOVWF  FF7
4AFA:  CALL   0D42
....................             lcd_gotoxy(1,3); 
4AFE:  MOVLW  01
4B00:  MOVLB  1
4B02:  MOVWF  x16
4B04:  MOVLW  03
4B06:  MOVWF  x17
4B08:  MOVLB  0
4B0A:  CALL   0C64
....................             printf(lcd_putc,"    Finalizado    "); 
4B0E:  MOVLW  E2
4B10:  MOVWF  FF6
4B12:  MOVLW  06
4B14:  MOVWF  FF7
4B16:  CALL   0D42
....................             delay_ms(2000); 
4B1A:  MOVLW  08
4B1C:  MOVLB  1
4B1E:  MOVWF  x00
4B20:  MOVLW  FA
4B22:  MOVWF  x1B
4B24:  MOVLB  0
4B26:  CALL   074E
4B2A:  MOVLB  1
4B2C:  DECFSZ x00,F
4B2E:  BRA    4B20
....................             printf(lcd_putc,"\f"); 
4B30:  MOVLW  0C
4B32:  MOVWF  x15
4B34:  MOVLB  0
4B36:  CALL   0CD6
....................             reset_cpu(); 
4B3A:  RESET
....................          } 
....................       Lectura=0; 
4B3C:  BCF    34.5
....................       }   
....................    } 
4B3E:  MOVLB  1
4B40:  BRA    49B8
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
4B42:  MOVF   17,W
4B44:  SUBLW  28
4B46:  BNZ   4C1A
....................    lcd_gotoxy(1,1); 
4B48:  MOVLW  01
4B4A:  MOVWF  x16
4B4C:  MOVWF  x17
4B4E:  MOVLB  0
4B50:  CALL   0C64
....................    printf(lcd_putc,"   Desea apagar     "); 
4B54:  MOVLW  F6
4B56:  MOVWF  FF6
4B58:  MOVLW  06
4B5A:  MOVWF  FF7
4B5C:  CALL   0D42
....................    lcd_gotoxy(1,2); 
4B60:  MOVLW  01
4B62:  MOVLB  1
4B64:  MOVWF  x16
4B66:  MOVLW  02
4B68:  MOVWF  x17
4B6A:  MOVLB  0
4B6C:  CALL   0C64
....................    printf(lcd_putc,"     la cabina      "); 
4B70:  MOVLW  0C
4B72:  MOVWF  FF6
4B74:  MOVLW  07
4B76:  MOVWF  FF7
4B78:  CALL   0D42
....................    lcd_gotoxy(1,3); 
4B7C:  MOVLW  01
4B7E:  MOVLB  1
4B80:  MOVWF  x16
4B82:  MOVLW  03
4B84:  MOVWF  x17
4B86:  MOVLB  0
4B88:  CALL   0C64
....................    printf(lcd_putc,"   > Aceptar        "); 
4B8C:  MOVLW  22
4B8E:  MOVWF  FF6
4B90:  MOVLW  07
4B92:  MOVWF  FF7
4B94:  CALL   0D42
....................    lcd_gotoxy(1,4); 
4B98:  MOVLW  01
4B9A:  MOVLB  1
4B9C:  MOVWF  x16
4B9E:  MOVLW  04
4BA0:  MOVWF  x17
4BA2:  MOVLB  0
4BA4:  CALL   0C64
....................    printf(lcd_putc,"   < Cancelar       "); 
4BA8:  MOVLW  38
4BAA:  MOVWF  FF6
4BAC:  MOVLW  07
4BAE:  MOVWF  FF7
4BB0:  CALL   0D42
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
4BB4:  BSF    F93.0
4BB6:  BTFSS  F81.0
4BB8:  BRA    4BDE
....................       {  if(Flanco1 == 0)  
4BBA:  BTFSC  33.5
4BBC:  BRA    4BDC
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
4BBE:  BSF    33.5
4BC0:  MOVLW  1E
4BC2:  MOVWF  17
4BC4:  MOVFF  20,FE
4BC8:  CALL   143E
4BCC:  BCF    F8A.6
4BCE:  BCF    F93.6
4BD0:  MOVLW  0C
4BD2:  MOVLB  1
4BD4:  MOVWF  x15
4BD6:  MOVLB  0
4BD8:  CALL   0CD6
....................             }} 
....................          else 
4BDC:  BRA    4BE0
....................             {Flanco1 = 0;}    
4BDE:  BCF    33.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4BE0:  BSF    F93.1
4BE2:  BTFSS  F81.1
4BE4:  BRA    4C16
....................       {  if(Flanco3 == 0)  
4BE6:  BTFSC  33.7
4BE8:  BRA    4C14
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
4BEA:  BSF    33.7
4BEC:  MOVLW  14
4BEE:  MOVWF  17
4BF0:  CLRF   35
4BF2:  MOVLW  02
4BF4:  MOVWF  1B
4BF6:  MOVWF  1D
4BF8:  MOVLW  0B
4BFA:  MOVWF  1A
4BFC:  MOVLW  1E
4BFE:  MOVLB  1
4C00:  MOVWF  x1B
4C02:  MOVLB  0
4C04:  CALL   074E
4C08:  MOVLW  0C
4C0A:  MOVLB  1
4C0C:  MOVWF  x15
4C0E:  MOVLB  0
4C10:  CALL   0CD6
....................          else 
4C14:  BRA    4C18
....................             {Flanco3 = 0;}     
4C16:  BCF    33.7
4C18:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(ModoSleep==1) 
4C1A:  BTFSS  34.3
4C1C:  BRA    4C2A
....................       {intensidadpantalla(0);sleep();} 
4C1E:  MOVLB  0
4C20:  CLRF   xFE
4C22:  CALL   143E
4C26:  SLEEP 
4C28:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
4C2A:  MOVF   17,F
4C2C:  BNZ   4C34
4C2E:  MOVF   17,W
4C30:  SUBLW  1E
4C32:  BZ    4CCE
....................    { 
....................       if(Lectura==1) 
4C34:  BTFSS  34.5
4C36:  BRA    4CCE
....................       { 
....................       //lcd_init(); 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
4C38:  MOVFF  2A,FE
4C3C:  MOVLB  0
4C3E:  GOTO   1974
4C42:  MOVFF  03,8D
4C46:  MOVFF  02,8C
4C4A:  MOVFF  01,8B
4C4E:  MOVFF  00,8A
....................             controlar_flujo(); 
4C52:  GOTO   2040
....................           
....................             if(Flujo<0.5) 
4C56:  MOVFF  8D,11D
4C5A:  MOVFF  8C,11C
4C5E:  MOVFF  8B,11B
4C62:  MOVFF  8A,11A
4C66:  MOVLB  1
4C68:  CLRF   x21
4C6A:  CLRF   x20
4C6C:  CLRF   x1F
4C6E:  MOVLW  7E
4C70:  MOVWF  x1E
4C72:  MOVLB  0
4C74:  CALL   1308
4C78:  BNC   4CB6
....................             { 
....................                flag_latencia=1; 
4C7A:  BSF    34.0
....................                 
....................                if(Latencia==1) 
4C7C:  BTFSS  34.1
4C7E:  BRA    4CB4
....................                { 
....................                   if(estadoalarma==1) 
4C80:  BTFSS  33.2
4C82:  BRA    4C8A
....................                   { 
....................                      Alarma_on; 
4C84:  BSF    F8A.6
4C86:  BCF    F93.6
....................                   } 
....................                   else 
4C88:  BRA    4C8E
....................                   { 
....................                      Alarma_off; 
4C8A:  BCF    F8A.6
4C8C:  BCF    F93.6
....................                   } 
....................                   if(Menu==20) 
4C8E:  MOVF   17,W
4C90:  SUBLW  14
4C92:  BNZ   4CAC
....................                   { 
....................                      estadopantalla=!estadopantalla; 
4C94:  BTG    33.3
....................                      if(estadopantalla==1) 
4C96:  BTFSS  33.3
4C98:  BRA    4CA4
....................                      {intensidadpantalla(contraste);} 
4C9A:  MOVFF  20,FE
4C9E:  CALL   143E
....................                      else 
4CA2:  BRA    4CAA
....................                      {intensidadpantalla(0);} 
4CA4:  CLRF   xFE
4CA6:  CALL   143E
....................                   } 
....................                   else 
4CAA:  BRA    4CB4
....................                   { 
....................                      intensidadpantalla(contraste); 
4CAC:  MOVFF  20,FE
4CB0:  CALL   143E
....................                   } 
....................                } 
....................             } 
....................             else 
4CB4:  BRA    4CCA
....................             { 
....................                intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
4CB6:  MOVFF  20,FE
4CBA:  CALL   143E
4CBE:  BCF    F8A.6
4CC0:  BCF    F93.6
4CC2:  BCF    34.1
4CC4:  CLRF   51
4CC6:  CLRF   50
4CC8:  BCF    34.0
....................             } 
....................          Lectura=0; 
4CCA:  BCF    34.5
4CCC:  MOVLB  1
....................       }      
....................  
....................    }      
....................    } 
4CCE:  GOTO   27FC
.................... } 
4CD2:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
