CCS PCH C Compiler, Version 4.104, 5967               14-jun.-18 14:47

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2018\Cabina Extractora 120 Seleccion Scrubber #004587790\Firmware\Cabina_Extractora.lst

               ROM used: 13788 bytes (42%)
                         Largest free fragment is 18976
               RAM used: 89 (4%) at main() level
                         113 (6%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1434
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0920:  CLRF   FEA
0922:  MOVLW  68
0924:  MOVWF  FE9
0926:  MOVF   FEF,W
0928:  BZ    0946
092A:  MOVLW  0F
092C:  MOVWF  01
092E:  CLRF   00
0930:  DECFSZ 00,F
0932:  BRA    0930
0934:  DECFSZ 01,F
0936:  BRA    092E
0938:  MOVLW  8F
093A:  MOVWF  00
093C:  DECFSZ 00,F
093E:  BRA    093C
0940:  NOP   
0942:  DECFSZ FEF,F
0944:  BRA    092A
0946:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0948:  SWAPF  x69,W
094A:  ANDLW  F0
094C:  MOVWF  00
094E:  MOVLW  0F
0950:  ANDWF  F83,W
0952:  IORWF  00,W
0954:  MOVWF  F83
....................       delay_cycles(25); 
0956:  MOVLW  08
0958:  MOVWF  00
095A:  DECFSZ 00,F
095C:  BRA    095A
....................       lcd.enable = 1; 
095E:  BSF    F83.2
....................       delay_us(55); 
0960:  MOVLW  DB
0962:  MOVWF  00
0964:  DECFSZ 00,F
0966:  BRA    0964
0968:  BRA    096A
....................       lcd.enable = 0; 
096A:  BCF    F83.2
.................... } 
096C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
096E:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
0970:  MOVLW  02
0972:  MOVWF  x68
0974:  RCALL  0920
....................       lcd.rs = address; 
0976:  BTFSS  x66.0
0978:  BCF    F83.0
097A:  BTFSC  x66.0
097C:  BSF    F83.0
....................       delay_cycles(25); 
097E:  MOVLW  08
0980:  MOVWF  00
0982:  DECFSZ 00,F
0984:  BRA    0982
....................       lcd.rw = 0; 
0986:  BCF    F83.1
....................       delay_cycles(25); 
0988:  MOVLW  08
098A:  MOVWF  00
098C:  DECFSZ 00,F
098E:  BRA    098C
....................       lcd.enable = 0; 
0990:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0992:  SWAPF  x67,W
0994:  MOVWF  x68
0996:  MOVLW  0F
0998:  ANDWF  x68,F
099A:  MOVFF  68,69
099E:  RCALL  0948
....................       lcd_send_nibble(n & 0xf); 
09A0:  MOVF   x67,W
09A2:  ANDLW  0F
09A4:  MOVWF  x68
09A6:  MOVWF  x69
09A8:  RCALL  0948
.................... } 
09AA:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
09AC:  MOVLW  00
09AE:  MOVWF  F95
....................     lcd.rs = 0; 
09B0:  BCF    F83.0
....................     lcd.rw = 0; 
09B2:  BCF    F83.1
....................     lcd.enable = 0; 
09B4:  BCF    F83.2
....................     delay_ms(15); 
09B6:  MOVLW  0F
09B8:  MOVWF  x68
09BA:  RCALL  0920
....................     for(i=1;i<=3;++i) { 
09BC:  MOVLW  01
09BE:  MOVWF  55
09C0:  MOVF   55,W
09C2:  SUBLW  03
09C4:  BNC   09D6
....................        lcd_send_nibble(3); 
09C6:  MOVLW  03
09C8:  MOVWF  x69
09CA:  RCALL  0948
....................        delay_ms(5); 
09CC:  MOVLW  05
09CE:  MOVWF  x68
09D0:  RCALL  0920
....................     } 
09D2:  INCF   55,F
09D4:  BRA    09C0
....................     lcd_send_nibble(2); 
09D6:  MOVLW  02
09D8:  MOVWF  x69
09DA:  RCALL  0948
....................     for(i=0;i<=3;++i) 
09DC:  CLRF   55
09DE:  MOVF   55,W
09E0:  SUBLW  03
09E2:  BNC   0A02
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
09E4:  CLRF   03
09E6:  MOVF   55,W
09E8:  MOVFF  FF2,56
09EC:  BCF    FF2.7
09EE:  CALL   0096
09F2:  BTFSC  56.7
09F4:  BSF    FF2.7
09F6:  MOVWF  56
09F8:  CLRF   x66
09FA:  MOVWF  x67
09FC:  RCALL  096E
09FE:  INCF   55,F
0A00:  BRA    09DE
.................... } 
0A02:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0A04:  MOVLW  01
0A06:  SUBWF  x64,W
0A08:  ADDLW  FC
0A0A:  BC    0A2A
0A0C:  ADDLW  04
0A0E:  GOTO   0A3A
....................      case 1 : address=0x80;break; 
0A12:  MOVLW  80
0A14:  MOVWF  x65
0A16:  BRA    0A2A
....................      case 2 : address=0xc0;break; 
0A18:  MOVLW  C0
0A1A:  MOVWF  x65
0A1C:  BRA    0A2A
....................      case 3 : address=0x94;break; 
0A1E:  MOVLW  94
0A20:  MOVWF  x65
0A22:  BRA    0A2A
....................      case 4 : address=0xd4;break; 
0A24:  MOVLW  D4
0A26:  MOVWF  x65
0A28:  BRA    0A2A
....................    } 
....................    address+=x-1; 
0A2A:  MOVLW  01
0A2C:  SUBWF  x63,W
0A2E:  ADDWF  x65,F
....................    lcd_send_byte(0,address); 
0A30:  CLRF   x66
0A32:  MOVFF  65,67
0A36:  RCALL  096E
.................... } 
0A38:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A66:  MOVF   x62,W
0A68:  SUBLW  F1
0A6A:  BNZ   0A70
....................     c=238; 
0A6C:  MOVLW  EE
0A6E:  MOVWF  x62
....................    switch (c) { 
0A70:  MOVF   x62,W
0A72:  XORLW  0C
0A74:  BZ    0A80
0A76:  XORLW  06
0A78:  BZ    0A94
0A7A:  XORLW  02
0A7C:  BZ    0AA2
0A7E:  BRA    0AAC
....................      case '\f'   : lcd_send_byte(0,1); 
0A80:  CLRF   x66
0A82:  MOVLW  01
0A84:  MOVWF  x67
0A86:  RCALL  096E
....................                    lcdline=1; 
0A88:  MOVLW  01
0A8A:  MOVWF  16
....................                    delay_ms(2); 
0A8C:  MOVLW  02
0A8E:  MOVWF  x68
0A90:  RCALL  0920
....................                                            break; 
0A92:  BRA    0AB8
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A94:  INCF   16,F
0A96:  MOVLW  01
0A98:  MOVWF  x63
0A9A:  MOVFF  16,64
0A9E:  RCALL  0A04
0AA0:  BRA    0AB8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0AA2:  CLRF   x66
0AA4:  MOVLW  10
0AA6:  MOVWF  x67
0AA8:  RCALL  096E
0AAA:  BRA    0AB8
....................      default     : lcd_send_byte(1,c);     break; 
0AAC:  MOVLW  01
0AAE:  MOVWF  x66
0AB0:  MOVFF  62,67
0AB4:  RCALL  096E
0AB6:  BRA    0AB8
....................    } 
.................... } 
0AB8:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP             input(PIN_A5) 
.................... #define   DOWN           input(PIN_E0) 
.................... #define   RIGHT          input(PIN_E1) 
.................... #define   LEFT           input(PIN_E2) 
.................... #define   VIDRIOUP      !input(PIN_A4) 
.................... #define   VIDRIODN      !input(PIN_A3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B7,1) 
.................... #define   Alarma_off        output_bit(PIN_B7,0) 
.................... #define   Rele_on           output_bit(PIN_B6,1) 
.................... #define   Rele_off          output_bit(PIN_B6,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
.................... #define   O1_on             output_bit(PIN_C6,1) 
.................... #define   O1_off            output_bit(PIN_C6,0) 
.................... #define   O2_on             output_bit(PIN_C7,1) 
.................... #define   O2_off            output_bit(PIN_C7,0) 
....................  
.................... signed int8 Menu=100, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... signed int8 Entero=0,tmp=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... signed int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0,estadopantalla=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,Temporal=0.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,tiemposr=0; 
.................... int8 Scrubber=10,flagrt=0; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
13DE:  RLCF   55,W
13E0:  MOVWF  00
13E2:  RLCF   00,F
13E4:  MOVLW  FC
13E6:  ANDWF  00,F
13E8:  MOVFF  00,01
13EC:  MOVF   FC2,W
13EE:  ANDLW  C3
13F0:  IORWF  00,W
13F2:  MOVWF  FC2
13F4:  MOVLW  0A
13F6:  MOVWF  x68
13F8:  CALL   0920
13FC:  BSF    FC2.1
13FE:  BTFSC  FC2.1
1400:  BRA    13FE
1402:  MOVFF  FC4,03
1406:  MOVFF  FC3,5A
140A:  MOVFF  FC4,5B
140E:  BRA    13A6
1410:  MOVFF  03,59
1414:  MOVFF  02,58
1418:  MOVFF  01,57
141C:  MOVFF  00,56
1420:  MOVFF  56,00
1424:  MOVFF  57,01
1428:  MOVFF  58,02
142C:  MOVFF  59,03
.................... } 
1430:  GOTO   3288 (RETURN)
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0B02:  MOVF   55,F
0B04:  BNZ   0B0C
....................    { 
....................       Pantalla_off; 
0B06:  BCF    F8B.1
0B08:  BCF    F94.1
....................    } 
....................    else 
0B0A:  BRA    0B10
....................    { 
....................       Pantalla_on; 
0B0C:  BSF    F8B.1
0B0E:  BCF    F94.1
....................    } 
.................... } 
0B10:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4B,F
00BE:  BTFSC  FD8.2
00C0:  INCF   4C,F
....................    tiempos2++; 
00C2:  INCF   4F,F
00C4:  BTFSC  FD8.2
00C6:  INCF   50,F
....................     
....................    if(flagrt==5){ 
00C8:  MOVF   54,W
00CA:  SUBLW  05
00CC:  BNZ   00D4
....................       tiemposr++; 
00CE:  INCF   51,F
00D0:  BTFSC  FD8.2
00D2:  INCF   52,F
....................    } 
....................     
....................    if(tiempos2>=20) 
00D4:  MOVF   50,F
00D6:  BNZ   00DE
00D8:  MOVF   4F,W
00DA:  SUBLW  13
00DC:  BC    00E4
....................    {tiempos2=0;Lectura2=1;} 
00DE:  CLRF   50
00E0:  CLRF   4F
00E2:  BSF    35.6
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00E4:  MOVF   4C,F
00E6:  BNZ   00EE
00E8:  MOVF   4B,W
00EA:  SUBLW  C7
00EC:  BC    0192
....................    { 
....................       if(flag_latencia==1){ 
00EE:  BTFSS  34.7
00F0:  BRA    00F8
....................          t_latencia++; 
00F2:  INCF   4D,F
00F4:  BTFSC  FD8.2
00F6:  INCF   4E,F
....................       } 
....................        
....................       tiempos=0;tiemporeset++; 
00F8:  CLRF   4C
00FA:  CLRF   4B
00FC:  INCF   2D,F
....................       Lectura=1; 
00FE:  BSF    35.5
....................           
....................       if(estadomv==1 && flag_filtro==1) 
0100:  BTFSS  34.1
0102:  BRA    0126
0104:  BTFSS  35.1
0106:  BRA    0126
....................       {   
....................          segundos++; 
0108:  INCF   2A,F
....................          if(segundos>=60) 
010A:  BTFSC  2A.7
010C:  BRA    0118
010E:  MOVF   2A,W
0110:  SUBLW  3B
0112:  BC    0118
....................          { 
....................             segundos=0;minutos++; 
0114:  CLRF   2A
0116:  INCF   2B,F
....................          } 
....................           
....................          if(minutos>=60) 
0118:  BTFSC  2B.7
011A:  BRA    0126
011C:  MOVF   2B,W
011E:  SUBLW  3B
0120:  BC    0126
....................          { 
....................             minutos=0;horas++; 
0122:  CLRF   2B
0124:  INCF   2C,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1) 
0126:  BTFSS  4A.1
0128:  BRA    016C
....................       { 
....................          if(purga_segundos>0) 
012A:  BTFSC  2E.7
012C:  BRA    0138
012E:  MOVF   2E,W
0130:  SUBLW  00
0132:  BC    0138
....................          { 
....................             purga_segundos--; 
0134:  DECF   2E,F
....................          } 
....................          else 
0136:  BRA    016C
....................          { 
....................             if(purga_minutos>0) 
0138:  BTFSC  22.7
013A:  BRA    014A
013C:  MOVF   22,W
013E:  SUBLW  00
0140:  BC    014A
....................             { 
....................                purga_minutos--; 
0142:  DECF   22,F
....................                purga_segundos=59; 
0144:  MOVLW  3B
0146:  MOVWF  2E
....................             } 
....................             else 
0148:  BRA    016C
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20; 
014A:  BCF    4A.1
014C:  BSF    F8A.5
014E:  BCF    F93.5
0150:  MOVLW  14
0152:  MOVWF  17
....................                if(Scrubber==5) 
0154:  MOVF   53,W
0156:  SUBLW  05
0158:  BNZ   0160
....................                   Rele_on; 
015A:  BSF    F8A.6
015C:  BCF    F93.6
....................                else 
015E:  BRA    0164
....................                   Rele_off; 
0160:  BCF    F8A.6
0162:  BCF    F93.6
....................                Luz_Blanca_on; 
0164:  BSF    F8A.4
0166:  BCF    F93.4
....................                estadomv=1; 
0168:  BSF    34.1
....................                estadofl=1; 
016A:  BSF    34.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
016C:  BTFSS  4A.2
016E:  BRA    0192
....................       { 
....................          if(ppurga_segundos>0) 
0170:  BTFSC  30.7
0172:  BRA    017E
0174:  MOVF   30,W
0176:  SUBLW  00
0178:  BC    017E
....................          { 
....................             ppurga_segundos--; 
017A:  DECF   30,F
....................          } 
....................          else 
017C:  BRA    0192
....................          { 
....................             if(ppurga_minutos>0) 
017E:  BTFSC  32.7
0180:  BRA    0190
0182:  MOVF   32,W
0184:  SUBLW  00
0186:  BC    0190
....................             { 
....................                ppurga_minutos--; 
0188:  DECF   32,F
....................                ppurga_segundos=59; 
018A:  MOVLW  3B
018C:  MOVWF  30
....................             } 
....................             else 
018E:  BRA    0192
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0190:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0192:  BCF    F9E.0
0194:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0C40:  DECFSZ 56,W
0C42:  BRA    0C74
....................    {if(estadoalarma==0) 
0C44:  BTFSC  34.2
0C46:  BRA    0C5C
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0C48:  MOVLW  02
0C4A:  MOVWF  x63
0C4C:  MOVFF  57,64
0C50:  RCALL  0A04
0C52:  MOVLW  98
0C54:  MOVWF  FF6
0C56:  MOVLW  01
0C58:  MOVWF  FF7
0C5A:  RCALL  0B12
....................    if(estadoalarma==1) 
0C5C:  BTFSS  34.2
0C5E:  BRA    0C74
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0C60:  MOVLW  02
0C62:  MOVWF  x63
0C64:  MOVFF  57,64
0C68:  RCALL  0A04
0C6A:  MOVLW  AC
0C6C:  MOVWF  FF6
0C6E:  MOVLW  01
0C70:  MOVWF  FF7
0C72:  RCALL  0B12
....................    } 
....................     
....................    if(x==2) 
0C74:  MOVF   56,W
0C76:  SUBLW  02
0C78:  BNZ   0C8E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
0C7A:  MOVLW  02
0C7C:  MOVWF  x63
0C7E:  MOVFF  57,64
0C82:  RCALL  0A04
0C84:  MOVLW  C0
0C86:  MOVWF  FF6
0C88:  MOVLW  01
0C8A:  MOVWF  FF7
0C8C:  RCALL  0B12
....................     
....................    if(x==3) 
0C8E:  MOVF   56,W
0C90:  SUBLW  03
0C92:  BNZ   0CA8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
0C94:  MOVLW  02
0C96:  MOVWF  x63
0C98:  MOVFF  57,64
0C9C:  RCALL  0A04
0C9E:  MOVLW  D4
0CA0:  MOVWF  FF6
0CA2:  MOVLW  01
0CA4:  MOVWF  FF7
0CA6:  RCALL  0B12
....................     
....................    if(x==4) 
0CA8:  MOVF   56,W
0CAA:  SUBLW  04
0CAC:  BNZ   0CC2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0CAE:  MOVLW  02
0CB0:  MOVWF  x63
0CB2:  MOVFF  57,64
0CB6:  RCALL  0A04
0CB8:  MOVLW  E8
0CBA:  MOVWF  FF6
0CBC:  MOVLW  01
0CBE:  MOVWF  FF7
0CC0:  RCALL  0B12
....................        
....................    if(x==5) 
0CC2:  MOVF   56,W
0CC4:  SUBLW  05
0CC6:  BNZ   0CDC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
0CC8:  MOVLW  02
0CCA:  MOVWF  x63
0CCC:  MOVFF  57,64
0CD0:  RCALL  0A04
0CD2:  MOVLW  FC
0CD4:  MOVWF  FF6
0CD6:  MOVLW  01
0CD8:  MOVWF  FF7
0CDA:  RCALL  0B12
....................     
....................    if(x==6) 
0CDC:  MOVF   56,W
0CDE:  SUBLW  06
0CE0:  BNZ   0CF6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
0CE2:  MOVLW  02
0CE4:  MOVWF  x63
0CE6:  MOVFF  57,64
0CEA:  RCALL  0A04
0CEC:  MOVLW  10
0CEE:  MOVWF  FF6
0CF0:  MOVLW  02
0CF2:  MOVWF  FF7
0CF4:  RCALL  0B12
.................... } 
0CF6:  RETLW  00
....................  
....................  
.................... void main () 
.................... { 
*
1434:  CLRF   FF8
1436:  BCF    FD0.7
1438:  BSF    07.7
143A:  CLRF   FEA
143C:  CLRF   FE9
143E:  MOVLW  64
1440:  MOVWF  17
1442:  MOVLW  07
1444:  MOVWF  18
1446:  MOVLW  02
1448:  MOVWF  19
144A:  MOVLW  0B
144C:  MOVWF  1A
144E:  MOVLW  02
1450:  MOVWF  1B
1452:  MOVLW  03
1454:  MOVWF  1C
1456:  MOVLW  02
1458:  MOVWF  1D
145A:  MOVWF  1E
145C:  MOVLW  04
145E:  MOVWF  1F
1460:  MOVLW  0A
1462:  MOVWF  20
1464:  MOVLW  01
1466:  MOVWF  21
1468:  CLRF   22
146A:  CLRF   23
146C:  CLRF   24
146E:  MOVLW  0A
1470:  MOVWF  25
1472:  MOVWF  26
1474:  MOVWF  27
1476:  MOVWF  28
1478:  CLRF   29
147A:  CLRF   2A
147C:  CLRF   2B
147E:  CLRF   2C
1480:  CLRF   2D
1482:  CLRF   2E
1484:  CLRF   2F
1486:  CLRF   30
1488:  CLRF   31
148A:  CLRF   32
148C:  CLRF   33
148E:  BCF    34.0
1490:  BCF    34.1
1492:  BCF    34.2
1494:  BCF    34.3
1496:  BCF    34.4
1498:  BCF    34.5
149A:  BCF    34.6
149C:  BCF    34.7
149E:  BCF    35.0
14A0:  BCF    35.1
14A2:  BCF    35.2
14A4:  CLRF   36
14A6:  CLRF   45
14A8:  CLRF   44
14AA:  CLRF   43
14AC:  CLRF   42
14AE:  CLRF   49
14B0:  CLRF   48
14B2:  CLRF   47
14B4:  CLRF   46
14B6:  BCF    35.4
14B8:  BCF    35.5
14BA:  BCF    35.6
14BC:  BCF    35.7
14BE:  BCF    4A.0
14C0:  BCF    4A.1
14C2:  BCF    4A.2
14C4:  CLRF   4C
14C6:  CLRF   4B
14C8:  CLRF   4E
14CA:  CLRF   4D
14CC:  CLRF   50
14CE:  CLRF   4F
14D0:  CLRF   52
14D2:  CLRF   51
14D4:  MOVWF  53
14D6:  CLRF   54
14D8:  MOVF   FC1,W
14DA:  ANDLW  C0
14DC:  IORLW  0F
14DE:  MOVWF  FC1
14E0:  MOVLW  07
14E2:  MOVWF  FB4
14E4:  MOVLW  3E
14E6:  MOVWF  37
14E8:  MOVLW  20
14EA:  MOVWF  38
14EC:  MOVLW  5E
14EE:  MOVWF  39
14F0:  CLRF   3A
14F2:  CLRF   3B
14F4:  CLRF   3C
14F6:  CLRF   3D
14F8:  CLRF   3E
14FA:  CLRF   3F
14FC:  CLRF   40
14FE:  CLRF   41
....................    setup_adc_ports(AN0_TO_AN3); 
1500:  MOVF   FC1,W
1502:  ANDLW  C0
1504:  IORLW  0B
1506:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1508:  BCF    FC0.0
150A:  BSF    FC0.1
150C:  BCF    FC0.2
150E:  BSF    FC0.7
1510:  BSF    FC2.0
....................    output_d(0);  
1512:  CLRF   F95
1514:  CLRF   F8C
....................    ModoSleep=1; 
1516:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1518:  MOVLW  85
151A:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
151C:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
151E:  MOVLW  00
1520:  IORLW  05
1522:  MOVWF  FCA
1524:  MOVLW  FF
1526:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
1528:  BCF    F94.2
152A:  BCF    F8B.2
152C:  BCF    F96.6
152E:  MOVLW  0C
1530:  MOVWF  FBD
1532:  CLRF   FB7
1534:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
1536:  MOVLW  C0
1538:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
153A:  CLRF   FBE
....................    lcd_init(); 
153C:  CALL   09AC
....................    printf(lcd_putc,"\f"); 
1540:  MOVLW  0C
1542:  MOVWF  x62
1544:  CALL   0A66
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1548:  MOVFF  FF2,55
154C:  BCF    FF2.7
154E:  CLRF   FA9
1550:  BCF    FA6.6
1552:  BCF    FA6.7
1554:  BSF    FA6.0
1556:  MOVF   FA8,W
1558:  BTFSC  55.7
155A:  BSF    FF2.7
155C:  MOVWF  3E
155E:  MOVLW  14
1560:  MOVWF  x68
1562:  CALL   0920
1566:  MOVFF  FF2,55
156A:  BCF    FF2.7
156C:  MOVLW  01
156E:  MOVWF  FA9
1570:  BCF    FA6.6
1572:  BCF    FA6.7
1574:  BSF    FA6.0
1576:  MOVF   FA8,W
1578:  BTFSC  55.7
157A:  BSF    FF2.7
157C:  MOVWF  3F
157E:  MOVLW  14
1580:  MOVWF  x68
1582:  CALL   0920
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1586:  MOVFF  FF2,55
158A:  BCF    FF2.7
158C:  MOVLW  02
158E:  MOVWF  FA9
1590:  BCF    FA6.6
1592:  BCF    FA6.7
1594:  BSF    FA6.0
1596:  MOVF   FA8,W
1598:  BTFSC  55.7
159A:  BSF    FF2.7
159C:  MOVWF  40
159E:  MOVLW  14
15A0:  MOVWF  x68
15A2:  CALL   0920
15A6:  MOVFF  FF2,55
15AA:  BCF    FF2.7
15AC:  MOVLW  03
15AE:  MOVWF  FA9
15B0:  BCF    FA6.6
15B2:  BCF    FA6.7
15B4:  BSF    FA6.0
15B6:  MOVF   FA8,W
15B8:  BTFSC  55.7
15BA:  BSF    FF2.7
15BC:  MOVWF  41
15BE:  MOVLW  14
15C0:  MOVWF  x68
15C2:  CALL   0920
....................    estadoalarma=read_eeprom(5); 
15C6:  MOVFF  FF2,55
15CA:  BCF    FF2.7
15CC:  MOVLW  05
15CE:  MOVWF  FA9
15D0:  BCF    FA6.6
15D2:  BCF    FA6.7
15D4:  BSF    FA6.0
15D6:  MOVF   FA8,W
15D8:  BTFSC  55.7
15DA:  BSF    FF2.7
15DC:  MOVWF  01
15DE:  BCF    34.2
15E0:  BTFSC  01.0
15E2:  BSF    34.2
....................    delay_ms(20); 
15E4:  MOVLW  14
15E6:  MOVWF  x68
15E8:  CALL   0920
....................    Manual=read_eeprom(10); 
15EC:  MOVFF  FF2,55
15F0:  BCF    FF2.7
15F2:  MOVLW  0A
15F4:  MOVWF  FA9
15F6:  BCF    FA6.6
15F8:  BCF    FA6.7
15FA:  BSF    FA6.0
15FC:  MOVF   FA8,W
15FE:  BTFSC  55.7
1600:  BSF    FF2.7
1602:  MOVWF  27
....................    delay_ms(20); 
1604:  MOVLW  14
1606:  MOVWF  x68
1608:  CALL   0920
....................    Automa=read_eeprom(11); 
160C:  MOVFF  FF2,55
1610:  BCF    FF2.7
1612:  MOVLW  0B
1614:  MOVWF  FA9
1616:  BCF    FA6.6
1618:  BCF    FA6.7
161A:  BSF    FA6.0
161C:  MOVF   FA8,W
161E:  BTFSC  55.7
1620:  BSF    FF2.7
1622:  MOVWF  26
....................    delay_ms(20); 
1624:  MOVLW  14
1626:  MOVWF  x68
1628:  CALL   0920
....................    Semi=read_eeprom(12); 
162C:  MOVFF  FF2,55
1630:  BCF    FF2.7
1632:  MOVLW  0C
1634:  MOVWF  FA9
1636:  BCF    FA6.6
1638:  BCF    FA6.7
163A:  BSF    FA6.0
163C:  MOVF   FA8,W
163E:  BTFSC  55.7
1640:  BSF    FF2.7
1642:  MOVWF  28
....................    delay_ms(20); 
1644:  MOVLW  14
1646:  MOVWF  x68
1648:  CALL   0920
....................    ValorSemi=read_eeprom(13); 
164C:  MOVFF  FF2,55
1650:  BCF    FF2.7
1652:  MOVLW  0D
1654:  MOVWF  FA9
1656:  BCF    FA6.6
1658:  BCF    FA6.7
165A:  BSF    FA6.0
165C:  MOVF   FA8,W
165E:  BTFSC  55.7
1660:  BSF    FF2.7
1662:  MOVWF  29
....................    delay_ms(20); 
1664:  MOVLW  14
1666:  MOVWF  x68
1668:  CALL   0920
....................    tmp=ValorSemi; 
166C:  MOVFF  29,25
....................  
....................    purga_minutos=read_eeprom(20); 
1670:  MOVFF  FF2,55
1674:  BCF    FF2.7
1676:  MOVLW  14
1678:  MOVWF  FA9
167A:  BCF    FA6.6
167C:  BCF    FA6.7
167E:  BSF    FA6.0
1680:  MOVF   FA8,W
1682:  BTFSC  55.7
1684:  BSF    FF2.7
1686:  MOVWF  22
....................    delay_ms(20); 
1688:  MOVLW  14
168A:  MOVWF  x68
168C:  CALL   0920
....................    purga_segundos=read_eeprom(21); 
1690:  MOVFF  FF2,55
1694:  BCF    FF2.7
1696:  MOVLW  15
1698:  MOVWF  FA9
169A:  BCF    FA6.6
169C:  BCF    FA6.7
169E:  BSF    FA6.0
16A0:  MOVF   FA8,W
16A2:  BTFSC  55.7
16A4:  BSF    FF2.7
16A6:  MOVWF  2E
....................    delay_ms(20); 
16A8:  MOVLW  14
16AA:  MOVWF  x68
16AC:  CALL   0920
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
16B0:  MOVFF  22,23
16B4:  MOVFF  2E,2F
....................    ppurga_minutos=read_eeprom(22); 
16B8:  MOVFF  FF2,55
16BC:  BCF    FF2.7
16BE:  MOVLW  16
16C0:  MOVWF  FA9
16C2:  BCF    FA6.6
16C4:  BCF    FA6.7
16C6:  BSF    FA6.0
16C8:  MOVF   FA8,W
16CA:  BTFSC  55.7
16CC:  BSF    FF2.7
16CE:  MOVWF  32
....................    delay_ms(20); 
16D0:  MOVLW  14
16D2:  MOVWF  x68
16D4:  CALL   0920
....................    ppurga_segundos=read_eeprom(23); 
16D8:  MOVFF  FF2,55
16DC:  BCF    FF2.7
16DE:  MOVLW  17
16E0:  MOVWF  FA9
16E2:  BCF    FA6.6
16E4:  BCF    FA6.7
16E6:  BSF    FA6.0
16E8:  MOVF   FA8,W
16EA:  BTFSC  55.7
16EC:  BSF    FF2.7
16EE:  MOVWF  30
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
16F0:  MOVFF  32,33
16F4:  MOVFF  30,31
....................           
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
16F8:  MOVFF  FF2,55
16FC:  BCF    FF2.7
16FE:  MOVLW  28
1700:  MOVWF  FA9
1702:  BCF    FA6.6
1704:  BCF    FA6.7
1706:  BSF    FA6.0
1708:  MOVF   FA8,W
170A:  BTFSC  55.7
170C:  BSF    FF2.7
170E:  MOVWF  24
....................    setpoint=Entero; 
1710:  CLRF   57
1712:  MOVFF  24,56
1716:  BTFSC  56.7
1718:  DECF   57,F
171A:  CALL   0ABA
171E:  MOVFF  03,45
1722:  MOVFF  02,44
1726:  MOVFF  01,43
172A:  MOVFF  00,42
....................    delay_ms(20); 
172E:  MOVLW  14
1730:  MOVWF  x68
1732:  CALL   0920
....................    segundos=read_eeprom(70); 
1736:  MOVFF  FF2,55
173A:  BCF    FF2.7
173C:  MOVLW  46
173E:  MOVWF  FA9
1740:  BCF    FA6.6
1742:  BCF    FA6.7
1744:  BSF    FA6.0
1746:  MOVF   FA8,W
1748:  BTFSC  55.7
174A:  BSF    FF2.7
174C:  MOVWF  2A
....................    delay_ms(20); 
174E:  MOVLW  14
1750:  MOVWF  x68
1752:  CALL   0920
....................    minutos=read_eeprom(71); 
1756:  MOVFF  FF2,55
175A:  BCF    FF2.7
175C:  MOVLW  47
175E:  MOVWF  FA9
1760:  BCF    FA6.6
1762:  BCF    FA6.7
1764:  BSF    FA6.0
1766:  MOVF   FA8,W
1768:  BTFSC  55.7
176A:  BSF    FF2.7
176C:  MOVWF  2B
....................    delay_ms(20); 
176E:  MOVLW  14
1770:  MOVWF  x68
1772:  CALL   0920
....................    horas=read_eeprom(72); 
1776:  MOVFF  FF2,55
177A:  BCF    FF2.7
177C:  MOVLW  48
177E:  MOVWF  FA9
1780:  BCF    FA6.6
1782:  BCF    FA6.7
1784:  BSF    FA6.0
1786:  MOVF   FA8,W
1788:  BTFSC  55.7
178A:  BSF    FF2.7
178C:  MOVWF  2C
....................    delay_ms(20); 
178E:  MOVLW  14
1790:  MOVWF  x68
1792:  CALL   0920
....................    flag_filtro=read_eeprom(73); 
1796:  MOVFF  FF2,55
179A:  BCF    FF2.7
179C:  MOVLW  49
179E:  MOVWF  FA9
17A0:  BCF    FA6.6
17A2:  BCF    FA6.7
17A4:  BSF    FA6.0
17A6:  MOVF   FA8,W
17A8:  BTFSC  55.7
17AA:  BSF    FF2.7
17AC:  MOVWF  01
17AE:  BCF    35.1
17B0:  BTFSC  01.0
17B2:  BSF    35.1
....................    Menu=200; 
17B4:  MOVLW  C8
17B6:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
17B8:  MOVF   17,W
17BA:  SUBLW  C8
17BC:  BNZ   1872
....................       if(inicio==0) 
17BE:  BTFSC  35.4
17C0:  BRA    1870
....................       { 
....................       delay_ms(500); 
17C2:  MOVLW  02
17C4:  MOVWF  55
17C6:  MOVLW  FA
17C8:  MOVWF  x68
17CA:  CALL   0920
17CE:  DECFSZ 55,F
17D0:  BRA    17C6
....................          if(RIGHT) 
17D2:  BSF    F96.1
17D4:  BTFSS  F84.1
17D6:  BRA    1870
....................          { 
....................             lcd_init(); 
17D8:  CALL   09AC
....................             intensidadpantalla(contraste); 
17DC:  MOVFF  20,55
17E0:  CALL   0B02
....................             lcd_gotoxy(1,1); 
17E4:  MOVLW  01
17E6:  MOVWF  x63
17E8:  MOVWF  x64
17EA:  CALL   0A04
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
17EE:  MOVLW  24
17F0:  MOVWF  FF6
17F2:  MOVLW  02
17F4:  MOVWF  FF7
17F6:  CALL   0B12
....................             lcd_gotoxy(1,2); 
17FA:  MOVLW  01
17FC:  MOVWF  x63
17FE:  MOVLW  02
1800:  MOVWF  x64
1802:  CALL   0A04
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1806:  MOVLW  3A
1808:  MOVWF  FF6
180A:  MOVLW  02
180C:  MOVWF  FF7
180E:  CALL   0B12
....................             lcd_gotoxy(1,3); 
1812:  MOVLW  01
1814:  MOVWF  x63
1816:  MOVLW  03
1818:  MOVWF  x64
181A:  CALL   0A04
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
181E:  MOVLW  50
1820:  MOVWF  FF6
1822:  MOVLW  02
1824:  MOVWF  FF7
1826:  CALL   0B12
....................             lcd_gotoxy(1,4); 
182A:  MOVLW  01
182C:  MOVWF  x63
182E:  MOVLW  04
1830:  MOVWF  x64
1832:  CALL   0A04
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1836:  MOVLW  66
1838:  MOVWF  FF6
183A:  MOVLW  02
183C:  MOVWF  FF7
183E:  CALL   0B12
....................             delay_ms(2000); 
1842:  MOVLW  08
1844:  MOVWF  55
1846:  MOVLW  FA
1848:  MOVWF  x68
184A:  CALL   0920
184E:  DECFSZ 55,F
1850:  BRA    1846
....................             printf(lcd_putc,"\f"); 
1852:  MOVLW  0C
1854:  MOVWF  x62
1856:  CALL   0A66
....................             inicio=1; 
185A:  BSF    35.4
....................             Menu=0; 
185C:  CLRF   17
....................             ModoSleep=0; 
185E:  BCF    35.3
....................             delay_ms(500); 
1860:  MOVLW  02
1862:  MOVWF  55
1864:  MOVLW  FA
1866:  MOVWF  x68
1868:  CALL   0920
186C:  DECFSZ 55,F
186E:  BRA    1864
....................          } 
....................       } 
....................    } 
1870:  BRA    17B8
....................  
.................... //----------------Menu10--------------------------------------------------------------- 
....................    if(Menu == 10){ // Menu de seleccion de Scrubber 
1872:  MOVF   17,W
1874:  SUBLW  0A
1876:  BTFSS  FD8.2
1878:  BRA    196C
....................       lcd_gotoxy(1,1); 
187A:  MOVLW  01
187C:  MOVWF  x63
187E:  MOVWF  x64
1880:  CALL   0A04
....................       printf(lcd_putc,"   Desea Activar    "); 
1884:  MOVLW  7C
1886:  MOVWF  FF6
1888:  MOVLW  02
188A:  MOVWF  FF7
188C:  CALL   0B12
....................       lcd_gotoxy(1,2); 
1890:  MOVLW  01
1892:  MOVWF  x63
1894:  MOVLW  02
1896:  MOVWF  x64
1898:  CALL   0A04
....................       printf(lcd_putc,"     el Scrubber?   "); 
189C:  MOVLW  92
189E:  MOVWF  FF6
18A0:  MOVLW  02
18A2:  MOVWF  FF7
18A4:  CALL   0B12
....................        
....................       if(Scrubber==5){ 
18A8:  MOVF   53,W
18AA:  SUBLW  05
18AC:  BNZ   18DE
....................          lcd_gotoxy(1,3); 
18AE:  MOVLW  01
18B0:  MOVWF  x63
18B2:  MOVLW  03
18B4:  MOVWF  x64
18B6:  CALL   0A04
....................          printf(lcd_putc,"        >SI         "); 
18BA:  MOVLW  A8
18BC:  MOVWF  FF6
18BE:  MOVLW  02
18C0:  MOVWF  FF7
18C2:  CALL   0B12
....................          lcd_gotoxy(1,4); 
18C6:  MOVLW  01
18C8:  MOVWF  x63
18CA:  MOVLW  04
18CC:  MOVWF  x64
18CE:  CALL   0A04
....................          printf(lcd_putc,"         NO         "); 
18D2:  MOVLW  BE
18D4:  MOVWF  FF6
18D6:  MOVLW  02
18D8:  MOVWF  FF7
18DA:  CALL   0B12
....................       } 
....................        
....................       if(Scrubber==10){ 
18DE:  MOVF   53,W
18E0:  SUBLW  0A
18E2:  BNZ   1914
....................          lcd_gotoxy(1,3); 
18E4:  MOVLW  01
18E6:  MOVWF  x63
18E8:  MOVLW  03
18EA:  MOVWF  x64
18EC:  CALL   0A04
....................          printf(lcd_putc,"         SI         "); 
18F0:  MOVLW  D4
18F2:  MOVWF  FF6
18F4:  MOVLW  02
18F6:  MOVWF  FF7
18F8:  CALL   0B12
....................          lcd_gotoxy(1,4); 
18FC:  MOVLW  01
18FE:  MOVWF  x63
1900:  MOVLW  04
1902:  MOVWF  x64
1904:  CALL   0A04
....................          printf(lcd_putc,"        >NO         "); 
1908:  MOVLW  EA
190A:  MOVWF  FF6
190C:  MOVLW  02
190E:  MOVWF  FF7
1910:  CALL   0B12
....................       } 
....................        
....................       if(UP){ 
1914:  BSF    F92.5
1916:  BTFSS  F80.5
1918:  BRA    1926
....................          Scrubber=5;delay_ms(100); 
191A:  MOVLW  05
191C:  MOVWF  53
191E:  MOVLW  64
1920:  MOVWF  x68
1922:  CALL   0920
....................       } 
....................        
....................       if(DOWN){ 
1926:  BSF    F96.0
1928:  BTFSS  F84.0
192A:  BRA    1938
....................          Scrubber=10;delay_ms(100); 
192C:  MOVLW  0A
192E:  MOVWF  53
1930:  MOVLW  64
1932:  MOVWF  x68
1934:  CALL   0920
....................       } 
....................        
....................       if(RIGHT){ 
1938:  BSF    F96.1
193A:  BTFSS  F84.1
193C:  BRA    1944
....................          flagrt=5; 
193E:  MOVLW  05
1940:  MOVWF  54
....................       }else{ 
1942:  BRA    194C
....................          flagrt=10; 
1944:  MOVLW  0A
1946:  MOVWF  54
....................          tiemposr=0; 
1948:  CLRF   52
194A:  CLRF   51
....................       } 
....................        
....................       if(tiemposr>250){ 
194C:  MOVF   52,F
194E:  BNZ   1956
1950:  MOVF   51,W
1952:  SUBLW  FA
1954:  BC    196C
....................          Menu=50;delay_ms(100);printf(lcd_putc,"\f");tiempo_purga=1; 
1956:  MOVLW  32
1958:  MOVWF  17
195A:  MOVLW  64
195C:  MOVWF  x68
195E:  CALL   0920
1962:  MOVLW  0C
1964:  MOVWF  x62
1966:  CALL   0A66
196A:  BSF    4A.1
....................       } 
....................    }       
.................... //----------------Fin-Menu10--------------------------------------------------------------- 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
196C:  MOVF   17,F
196E:  BTFSS  FD8.2
1970:  BRA    1D5E
....................    flag_latencia=1;set_pwm1_duty(0); 
1972:  BSF    34.7
1974:  CLRF   FBE
....................       if(t_latencia>20) 
1976:  MOVF   4E,F
1978:  BNZ   1980
197A:  MOVF   4D,W
197C:  SUBLW  14
197E:  BC    198A
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1980:  MOVLW  0C
1982:  MOVWF  x62
1984:  CALL   0A66
1988:  RESET
....................          } 
....................    lcd_gotoxy(1,1); 
198A:  MOVLW  01
198C:  MOVWF  x63
198E:  MOVWF  x64
1990:  CALL   0A04
....................    printf(lcd_putc,"     Ingrese        "); 
1994:  MOVLW  00
1996:  MOVWF  FF6
1998:  MOVLW  03
199A:  MOVWF  FF7
199C:  CALL   0B12
....................    lcd_gotoxy(1,2); 
19A0:  MOVLW  01
19A2:  MOVWF  x63
19A4:  MOVLW  02
19A6:  MOVWF  x64
19A8:  CALL   0A04
....................    printf(lcd_putc,"    Contraseña      "); 
19AC:  MOVLW  16
19AE:  MOVWF  FF6
19B0:  MOVLW  03
19B2:  MOVWF  FF7
19B4:  CALL   0B12
....................    lcd_gotoxy(1,3); 
19B8:  MOVLW  01
19BA:  MOVWF  x63
19BC:  MOVLW  03
19BE:  MOVWF  x64
19C0:  CALL   0A04
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
19C4:  MOVLW  2C
19C6:  MOVWF  FF6
19C8:  MOVLW  03
19CA:  MOVWF  FF7
19CC:  MOVLW  0A
19CE:  MOVWF  55
19D0:  CALL   0B32
19D4:  MOVFF  3A,55
19D8:  MOVLW  1F
19DA:  MOVWF  56
19DC:  CALL   0B78
19E0:  MOVFF  3B,55
19E4:  MOVLW  1F
19E6:  MOVWF  56
19E8:  CALL   0B78
19EC:  MOVFF  3C,55
19F0:  MOVLW  1F
19F2:  MOVWF  56
19F4:  CALL   0B78
19F8:  MOVFF  3D,55
19FC:  MOVLW  1F
19FE:  MOVWF  56
1A00:  CALL   0B78
1A04:  MOVLW  20
1A06:  MOVWF  x62
1A08:  CALL   0A66
1A0C:  MOVLW  20
1A0E:  MOVWF  x62
1A10:  CALL   0A66
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1A14:  BSF    F92.5
1A16:  BTFSS  F80.5
1A18:  BRA    1A40
....................       {  if(Flanco == 0)  
1A1A:  BTFSC  34.3
1A1C:  BRA    1A3E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
1A1E:  MOVLW  0B
1A20:  SUBWF  1A,W
1A22:  CLRF   03
1A24:  ADDLW  3A
1A26:  MOVWF  FE9
1A28:  MOVLW  00
1A2A:  ADDWFC 03,W
1A2C:  MOVWF  FEA
1A2E:  INCF   FEF,F
1A30:  BSF    34.3
1A32:  MOVLW  1E
1A34:  MOVWF  x68
1A36:  CALL   0920
1A3A:  CLRF   4E
1A3C:  CLRF   4D
....................          else 
1A3E:  BRA    1A42
....................             {Flanco = 0;} 
1A40:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1A42:  BSF    F96.0
1A44:  BTFSS  F84.0
1A46:  BRA    1A6E
....................       {  if(Flanco2 == 0)  
1A48:  BTFSC  34.5
1A4A:  BRA    1A6C
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
1A4C:  MOVLW  0B
1A4E:  SUBWF  1A,W
1A50:  CLRF   03
1A52:  ADDLW  3A
1A54:  MOVWF  FE9
1A56:  MOVLW  00
1A58:  ADDWFC 03,W
1A5A:  MOVWF  FEA
1A5C:  DECF   FEF,F
1A5E:  BSF    34.5
1A60:  MOVLW  1E
1A62:  MOVWF  x68
1A64:  CALL   0920
1A68:  CLRF   4E
1A6A:  CLRF   4D
....................          else 
1A6C:  BRA    1A70
....................             {Flanco2 = 0;} 
1A6E:  BCF    34.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1A70:  BSF    F96.1
1A72:  BTFSS  F84.1
1A74:  BRA    1A94
....................       {  if(Flanco1 == 0)  
1A76:  BTFSC  34.4
1A78:  BRA    1A92
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1A7A:  BSF    34.4
1A7C:  INCF   1A,F
1A7E:  MOVLW  1E
1A80:  MOVWF  x68
1A82:  CALL   0920
1A86:  MOVLW  0C
1A88:  MOVWF  x62
1A8A:  CALL   0A66
1A8E:  CLRF   4E
1A90:  CLRF   4D
....................          else 
1A92:  BRA    1A96
....................             {Flanco1 = 0;}    
1A94:  BCF    34.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1A96:  BSF    F96.2
1A98:  BTFSS  F84.2
1A9A:  BRA    1ABA
....................       {  if(Flanco3 == 0)  
1A9C:  BTFSC  34.6
1A9E:  BRA    1AB8
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1AA0:  BSF    34.6
1AA2:  DECF   1A,F
1AA4:  MOVLW  1E
1AA6:  MOVWF  x68
1AA8:  CALL   0920
1AAC:  MOVLW  0C
1AAE:  MOVWF  x62
1AB0:  CALL   0A66
1AB4:  CLRF   4E
1AB6:  CLRF   4D
....................          else 
1AB8:  BRA    1ABC
....................             {Flanco3 = 0;}     
1ABA:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1ABC:  MOVLW  0B
1ABE:  SUBWF  1A,W
1AC0:  CLRF   03
1AC2:  ADDLW  3A
1AC4:  MOVWF  FE9
1AC6:  MOVLW  00
1AC8:  ADDWFC 03,W
1ACA:  MOVWF  FEA
1ACC:  BTFSC  FEF.7
1ACE:  BRA    1AD2
1AD0:  BRA    1AE6
....................        {clave[unidad-11]=9;} 
1AD2:  MOVLW  0B
1AD4:  SUBWF  1A,W
1AD6:  CLRF   03
1AD8:  ADDLW  3A
1ADA:  MOVWF  FE9
1ADC:  MOVLW  00
1ADE:  ADDWFC 03,W
1AE0:  MOVWF  FEA
1AE2:  MOVLW  09
1AE4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1AE6:  MOVLW  0B
1AE8:  SUBWF  1A,W
1AEA:  CLRF   03
1AEC:  ADDLW  3A
1AEE:  MOVWF  FE9
1AF0:  MOVLW  00
1AF2:  ADDWFC 03,W
1AF4:  MOVWF  FEA
1AF6:  BTFSC  FEF.7
1AF8:  BRA    1B12
1AFA:  MOVF   FEF,W
1AFC:  SUBLW  09
1AFE:  BC    1B12
....................        {clave[unidad-11]=0;} 
1B00:  MOVLW  0B
1B02:  SUBWF  1A,W
1B04:  CLRF   03
1B06:  ADDLW  3A
1B08:  MOVWF  FE9
1B0A:  MOVLW  00
1B0C:  ADDWFC 03,W
1B0E:  MOVWF  FEA
1B10:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1B12:  BTFSC  1A.7
1B14:  BRA    1B1C
1B16:  MOVF   1A,W
1B18:  SUBLW  0A
1B1A:  BNC   1B20
....................        {unidad=11;} 
1B1C:  MOVLW  0B
1B1E:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1B20:  MOVFF  1A,63
1B24:  MOVLW  04
1B26:  MOVWF  x64
1B28:  CALL   0A04
....................        lcd_putc(t[2]); 
1B2C:  MOVFF  39,62
1B30:  CALL   0A66
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1B34:  BTFSC  1A.7
1B36:  BRA    1D30
1B38:  MOVF   1A,W
1B3A:  SUBLW  0E
1B3C:  BTFSC  FD8.0
1B3E:  BRA    1D30
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1B40:  MOVF   3A,W
1B42:  SUBLW  03
1B44:  BNZ   1C20
1B46:  MOVF   3B,W
1B48:  SUBLW  08
1B4A:  BNZ   1C20
1B4C:  MOVF   3C,W
1B4E:  SUBLW  09
1B50:  BNZ   1C20
1B52:  MOVF   3D,W
1B54:  SUBLW  02
1B56:  BNZ   1C20
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1B58:  CLRF   FA9
1B5A:  CLRF   FA8
1B5C:  BCF    FA6.6
1B5E:  BCF    FA6.7
1B60:  BSF    FA6.2
1B62:  MOVF   FF2,W
1B64:  MOVWF  00
1B66:  BCF    FF2.7
1B68:  MOVLB  F
1B6A:  MOVLW  55
1B6C:  MOVWF  FA7
1B6E:  MOVLW  AA
1B70:  MOVWF  FA7
1B72:  BSF    FA6.1
1B74:  BTFSC  FA6.1
1B76:  BRA    1B74
1B78:  BCF    FA6.2
1B7A:  MOVF   00,W
1B7C:  IORWF  FF2,F
1B7E:  MOVLW  14
1B80:  MOVLB  0
1B82:  MOVWF  x68
1B84:  CALL   0920
1B88:  MOVLW  01
1B8A:  MOVWF  FA9
1B8C:  CLRF   FA8
1B8E:  BCF    FA6.6
1B90:  BCF    FA6.7
1B92:  BSF    FA6.2
1B94:  MOVF   FF2,W
1B96:  MOVWF  00
1B98:  BCF    FF2.7
1B9A:  MOVLB  F
1B9C:  MOVLW  55
1B9E:  MOVWF  FA7
1BA0:  MOVLW  AA
1BA2:  MOVWF  FA7
1BA4:  BSF    FA6.1
1BA6:  BTFSC  FA6.1
1BA8:  BRA    1BA6
1BAA:  BCF    FA6.2
1BAC:  MOVF   00,W
1BAE:  IORWF  FF2,F
1BB0:  MOVLW  14
1BB2:  MOVLB  0
1BB4:  MOVWF  x68
1BB6:  CALL   0920
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1BBA:  MOVLW  02
1BBC:  MOVWF  FA9
1BBE:  CLRF   FA8
1BC0:  BCF    FA6.6
1BC2:  BCF    FA6.7
1BC4:  BSF    FA6.2
1BC6:  MOVF   FF2,W
1BC8:  MOVWF  00
1BCA:  BCF    FF2.7
1BCC:  MOVLB  F
1BCE:  MOVLW  55
1BD0:  MOVWF  FA7
1BD2:  MOVLW  AA
1BD4:  MOVWF  FA7
1BD6:  BSF    FA6.1
1BD8:  BTFSC  FA6.1
1BDA:  BRA    1BD8
1BDC:  BCF    FA6.2
1BDE:  MOVF   00,W
1BE0:  IORWF  FF2,F
1BE2:  MOVLW  14
1BE4:  MOVLB  0
1BE6:  MOVWF  x68
1BE8:  CALL   0920
1BEC:  MOVLW  03
1BEE:  MOVWF  FA9
1BF0:  CLRF   FA8
1BF2:  BCF    FA6.6
1BF4:  BCF    FA6.7
1BF6:  BSF    FA6.2
1BF8:  MOVF   FF2,W
1BFA:  MOVWF  00
1BFC:  BCF    FF2.7
1BFE:  MOVLB  F
1C00:  MOVLW  55
1C02:  MOVWF  FA7
1C04:  MOVLW  AA
1C06:  MOVWF  FA7
1C08:  BSF    FA6.1
1C0A:  BTFSC  FA6.1
1C0C:  BRA    1C0A
1C0E:  BCF    FA6.2
1C10:  MOVF   00,W
1C12:  IORWF  FF2,F
1C14:  MOVLW  14
1C16:  MOVLB  0
1C18:  MOVWF  x68
1C1A:  CALL   0920
....................              reset_cpu();} 
1C1E:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1C20:  MOVF   3E,W
1C22:  SUBWF  3A,W
1C24:  BNZ   1CC2
1C26:  MOVF   3F,W
1C28:  SUBWF  3B,W
1C2A:  BNZ   1CC2
1C2C:  MOVF   40,W
1C2E:  SUBWF  3C,W
1C30:  BNZ   1CC2
1C32:  MOVF   41,W
1C34:  SUBWF  3D,W
1C36:  BNZ   1CC2
....................             {lcd_gotoxy(1,1); 
1C38:  MOVLW  01
1C3A:  MOVWF  x63
1C3C:  MOVWF  x64
1C3E:  CALL   0A04
....................             printf(lcd_putc,"                   "); 
1C42:  MOVLW  42
1C44:  MOVWF  FF6
1C46:  MOVLW  03
1C48:  MOVWF  FF7
1C4A:  CALL   0B12
....................             lcd_gotoxy(1,2); 
1C4E:  MOVLW  01
1C50:  MOVWF  x63
1C52:  MOVLW  02
1C54:  MOVWF  x64
1C56:  CALL   0A04
....................             printf(lcd_putc,"     Contraseña    "); 
1C5A:  MOVLW  56
1C5C:  MOVWF  FF6
1C5E:  MOVLW  03
1C60:  MOVWF  FF7
1C62:  CALL   0B12
....................             lcd_gotoxy(1,3); 
1C66:  MOVLW  01
1C68:  MOVWF  x63
1C6A:  MOVLW  03
1C6C:  MOVWF  x64
1C6E:  CALL   0A04
....................             printf(lcd_putc,"      Correcta     "); 
1C72:  MOVLW  6A
1C74:  MOVWF  FF6
1C76:  MOVLW  03
1C78:  MOVWF  FF7
1C7A:  CALL   0B12
....................             lcd_gotoxy(1,4); 
1C7E:  MOVLW  01
1C80:  MOVWF  x63
1C82:  MOVLW  04
1C84:  MOVWF  x64
1C86:  CALL   0A04
....................             printf(lcd_putc,"                   "); 
1C8A:  MOVLW  7E
1C8C:  MOVWF  FF6
1C8E:  MOVLW  03
1C90:  MOVWF  FF7
1C92:  CALL   0B12
....................             delay_ms(1000);Menu=10;unidad=11;printf(lcd_putc,"\f");flag_latencia=0;Latencia=0; 
1C96:  MOVLW  04
1C98:  MOVWF  55
1C9A:  MOVLW  FA
1C9C:  MOVWF  x68
1C9E:  CALL   0920
1CA2:  DECFSZ 55,F
1CA4:  BRA    1C9A
1CA6:  MOVLW  0A
1CA8:  MOVWF  17
1CAA:  MOVLW  0B
1CAC:  MOVWF  1A
1CAE:  MOVLW  0C
1CB0:  MOVWF  x62
1CB2:  CALL   0A66
1CB6:  BCF    34.7
1CB8:  BCF    35.0
....................             t_latencia=0;flag_iniciodamper=1;} 
1CBA:  CLRF   4E
1CBC:  CLRF   4D
1CBE:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1CC0:  BRA    1D30
....................          {lcd_gotoxy(1,1); 
1CC2:  MOVLW  01
1CC4:  MOVWF  x63
1CC6:  MOVWF  x64
1CC8:  CALL   0A04
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1CCC:  MOVLW  01
1CCE:  MOVWF  x63
1CD0:  MOVLW  02
1CD2:  MOVWF  x64
1CD4:  CALL   0A04
....................             printf(lcd_putc,"     Contraseña    "); 
1CD8:  MOVLW  92
1CDA:  MOVWF  FF6
1CDC:  MOVLW  03
1CDE:  MOVWF  FF7
1CE0:  CALL   0B12
....................             lcd_gotoxy(1,3); 
1CE4:  MOVLW  01
1CE6:  MOVWF  x63
1CE8:  MOVLW  03
1CEA:  MOVWF  x64
1CEC:  CALL   0A04
....................             printf(lcd_putc,"     Incorrecta    "); 
1CF0:  MOVLW  A6
1CF2:  MOVWF  FF6
1CF4:  MOVLW  03
1CF6:  MOVWF  FF7
1CF8:  CALL   0B12
....................             lcd_gotoxy(1,4); 
1CFC:  MOVLW  01
1CFE:  MOVWF  x63
1D00:  MOVLW  04
1D02:  MOVWF  x64
1D04:  CALL   0A04
....................             printf(lcd_putc,"                   "); 
1D08:  MOVLW  BA
1D0A:  MOVWF  FF6
1D0C:  MOVLW  03
1D0E:  MOVWF  FF7
1D10:  CALL   0B12
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
1D14:  MOVLW  02
1D16:  MOVWF  55
1D18:  MOVLW  FA
1D1A:  MOVWF  x68
1D1C:  CALL   0920
1D20:  DECFSZ 55,F
1D22:  BRA    1D18
1D24:  MOVLW  0B
1D26:  MOVWF  1A
1D28:  MOVLW  0C
1D2A:  MOVWF  x62
1D2C:  CALL   0A66
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1D30:  BTFSC  1A.7
1D32:  BRA    1D5C
1D34:  MOVF   1A,W
1D36:  SUBLW  0B
1D38:  BC    1D5C
1D3A:  BTFSC  1A.7
1D3C:  BRA    1D44
1D3E:  MOVF   1A,W
1D40:  SUBLW  0D
1D42:  BNC   1D5C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1D44:  MOVLW  01
1D46:  SUBWF  1A,W
1D48:  MOVWF  55
1D4A:  MOVWF  x63
1D4C:  MOVLW  04
1D4E:  MOVWF  x64
1D50:  CALL   0A04
....................             lcd_putc(t[1]); 
1D54:  MOVFF  38,62
1D58:  CALL   0A66
....................           } 
....................  
....................    } 
1D5C:  BRA    196C
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1D5E:  DECFSZ 17,W
1D60:  BRA    1F78
....................       if(paso<0) 
1D62:  BTFSC  36.7
1D64:  BRA    1D68
1D66:  BRA    1D6A
....................         {paso=0;} 
1D68:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
1D6A:  MOVLW  01
1D6C:  MOVWF  x63
1D6E:  MOVWF  x64
1D70:  CALL   0A04
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1D74:  MOVLW  CE
1D76:  MOVWF  FF6
1D78:  MOVLW  03
1D7A:  MOVWF  FF7
1D7C:  CALL   0B12
....................     
....................       if(UP)//Si oprime hacia arriba 
1D80:  BSF    F92.5
1D82:  BTFSS  F80.5
1D84:  BRA    1DA0
....................       {  if(Flanco == 0)  
1D86:  BTFSC  34.3
1D88:  BRA    1D9E
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
1D8A:  DECF   1D,F
1D8C:  DECF   1B,F
1D8E:  MOVLW  01
1D90:  ADDWF  1B,W
1D92:  MOVWF  1C
1D94:  BSF    34.3
1D96:  MOVLW  1E
1D98:  MOVWF  x68
1D9A:  CALL   0920
....................          else 
1D9E:  BRA    1DA2
....................             {Flanco = 0;} 
1DA0:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1DA2:  BSF    F96.0
1DA4:  BTFSS  F84.0
1DA6:  BRA    1DC2
....................       {  if(Flanco2 == 0)  
1DA8:  BTFSC  34.5
1DAA:  BRA    1DC0
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
1DAC:  INCF   1D,F
1DAE:  INCF   1B,F
1DB0:  MOVLW  01
1DB2:  SUBWF  1B,W
1DB4:  MOVWF  1C
1DB6:  BSF    34.5
1DB8:  MOVLW  1E
1DBA:  MOVWF  x68
1DBC:  CALL   0920
....................          else 
1DC0:  BRA    1DC4
....................             {Flanco2 = 0;} 
1DC2:  BCF    34.5
....................     
....................          
....................         if(Flecha2>nMenuH) 
1DC4:  MOVF   1F,W
1DC6:  XORLW  80
1DC8:  MOVWF  00
1DCA:  MOVF   1D,W
1DCC:  XORLW  80
1DCE:  SUBWF  00,W
1DD0:  BC    1DE2
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1DD2:  INCF   36,F
1DD4:  MOVFF  1D,1F
1DD8:  MOVLW  02
1DDA:  SUBWF  1F,W
1DDC:  MOVWF  1E
1DDE:  MOVLW  04
1DE0:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
1DE2:  MOVF   1D,W
1DE4:  XORLW  80
1DE6:  MOVWF  00
1DE8:  MOVF   1E,W
1DEA:  XORLW  80
1DEC:  SUBWF  00,W
1DEE:  BC    1E00
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1DF0:  DECF   36,F
1DF2:  MOVFF  1D,1E
1DF6:  MOVLW  02
1DF8:  ADDWF  1E,W
1DFA:  MOVWF  1F
1DFC:  MOVLW  02
1DFE:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
1E00:  MOVF   18,W
1E02:  XORLW  80
1E04:  MOVWF  00
1E06:  MOVF   1D,W
1E08:  XORLW  80
1E0A:  SUBWF  00,W
1E0C:  BC    1E20
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1E0E:  MOVFF  19,1D
1E12:  MOVLW  02
1E14:  MOVWF  1B
1E16:  CLRF   36
1E18:  MOVFF  1D,1E
1E1C:  ADDWF  1E,W
1E1E:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
1E20:  MOVF   1D,W
1E22:  XORLW  80
1E24:  MOVWF  00
1E26:  MOVF   19,W
1E28:  XORLW  80
1E2A:  SUBWF  00,W
1E2C:  BC    1E44
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
1E2E:  MOVFF  18,1D
1E32:  MOVLW  04
1E34:  MOVWF  1B
1E36:  SUBWF  18,W
1E38:  MOVWF  36
1E3A:  MOVFF  1D,1F
1E3E:  MOVLW  02
1E40:  SUBWF  1F,W
1E42:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
1E44:  MOVLW  01
1E46:  ADDWF  36,W
1E48:  MOVWF  55
1E4A:  MOVWF  56
1E4C:  MOVLW  02
1E4E:  MOVWF  57
1E50:  CALL   0C40
....................         mensajes(2+paso,3); 
1E54:  MOVLW  02
1E56:  ADDWF  36,W
1E58:  MOVWF  55
1E5A:  MOVWF  56
1E5C:  MOVLW  03
1E5E:  MOVWF  57
1E60:  CALL   0C40
....................         mensajes(3+paso,4); 
1E64:  MOVLW  03
1E66:  ADDWF  36,W
1E68:  MOVWF  55
1E6A:  MOVWF  56
1E6C:  MOVLW  04
1E6E:  MOVWF  57
1E70:  CALL   0C40
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1E74:  MOVLW  01
1E76:  MOVWF  x63
1E78:  MOVFF  1B,64
1E7C:  CALL   0A04
....................         lcd_putc(t[0]); 
1E80:  MOVFF  37,62
1E84:  CALL   0A66
....................  
....................         if(Flecha==2) 
1E88:  MOVF   1B,W
1E8A:  SUBLW  02
1E8C:  BNZ   1EB6
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1E8E:  MOVLW  01
1E90:  MOVWF  x63
1E92:  MOVLW  04
1E94:  MOVWF  x64
1E96:  CALL   0A04
....................             lcd_putc(t[1]); 
1E9A:  MOVFF  38,62
1E9E:  CALL   0A66
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1EA2:  MOVLW  01
1EA4:  MOVWF  x63
1EA6:  MOVLW  03
1EA8:  MOVWF  x64
1EAA:  CALL   0A04
....................             lcd_putc(t[1]); 
1EAE:  MOVFF  38,62
1EB2:  CALL   0A66
....................           } 
....................          
....................         if(Flecha==4) 
1EB6:  MOVF   1B,W
1EB8:  SUBLW  04
1EBA:  BNZ   1EE4
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1EBC:  MOVLW  01
1EBE:  MOVWF  x63
1EC0:  MOVLW  02
1EC2:  MOVWF  x64
1EC4:  CALL   0A04
....................             lcd_putc(t[1]); 
1EC8:  MOVFF  38,62
1ECC:  CALL   0A66
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1ED0:  MOVLW  01
1ED2:  MOVWF  x63
1ED4:  MOVLW  03
1ED6:  MOVWF  x64
1ED8:  CALL   0A04
....................             lcd_putc(t[1]); 
1EDC:  MOVFF  38,62
1EE0:  CALL   0A66
....................           } 
....................          
....................         if(Flecha==3) 
1EE4:  MOVF   1B,W
1EE6:  SUBLW  03
1EE8:  BNZ   1F12
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1EEA:  MOVLW  01
1EEC:  MOVWF  x63
1EEE:  MOVLW  04
1EF0:  MOVWF  x64
1EF2:  CALL   0A04
....................             lcd_putc(t[1]); 
1EF6:  MOVFF  38,62
1EFA:  CALL   0A66
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1EFE:  MOVLW  01
1F00:  MOVWF  x63
1F02:  MOVLW  02
1F04:  MOVWF  x64
1F06:  CALL   0A04
....................             lcd_putc(t[1]); 
1F0A:  MOVFF  38,62
1F0E:  CALL   0A66
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
1F12:  BSF    F96.1
1F14:  BTFSS  F84.1
1F16:  BRA    1F4C
....................       {  if(Flanco1 == 0)  
1F18:  BTFSC  34.4
1F1A:  BRA    1F4A
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
1F1C:  MOVFF  1D,17
1F20:  MOVLW  03
1F22:  MOVWF  1B
1F24:  MOVLW  02
1F26:  MOVWF  55
1F28:  MOVLW  FA
1F2A:  MOVWF  x68
1F2C:  CALL   0920
1F30:  DECFSZ 55,F
1F32:  BRA    1F28
1F34:  MOVLW  0C
1F36:  MOVWF  x62
1F38:  CALL   0A66
....................             if(Menu==6) 
1F3C:  MOVF   17,W
1F3E:  SUBLW  06
1F40:  BNZ   1F4A
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
1F42:  CLRF   3A
1F44:  CLRF   3B
1F46:  CLRF   3C
1F48:  CLRF   3D
....................          else 
1F4A:  BRA    1F4E
....................             {Flanco1 = 0;}   
1F4C:  BCF    34.4
....................              
....................       if(LEFT)// Si oprime Izquierda 
1F4E:  BSF    F96.2
1F50:  BTFSS  F84.2
1F52:  BRA    1F76
....................       {  if(Flanco3 == 0)  
1F54:  BTFSC  34.6
1F56:  BRA    1F74
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
1F58:  MOVLW  02
1F5A:  MOVWF  55
1F5C:  MOVLW  FA
1F5E:  MOVWF  x68
1F60:  CALL   0920
1F64:  DECFSZ 55,F
1F66:  BRA    1F5C
1F68:  MOVLW  14
1F6A:  MOVWF  17
1F6C:  MOVLW  0C
1F6E:  MOVWF  x62
1F70:  CALL   0A66
....................          else 
1F74:  BRA    1F78
....................             {Flanco3 = 0;}                
1F76:  BCF    34.6
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
1F78:  MOVF   17,W
1F7A:  SUBLW  02
1F7C:  BTFSS  FD8.2
1F7E:  BRA    20AA
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
1F80:  BTG    34.2
1F82:  BSF    34.4
1F84:  MOVLW  01
1F86:  MOVWF  17
1F88:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
1F8A:  BTFSS  34.2
1F8C:  BRA    1FEE
....................             {estadoalarma=1; 
1F8E:  BSF    34.2
....................                lcd_gotoxy(1,1); 
1F90:  MOVLW  01
1F92:  MOVWF  x63
1F94:  MOVWF  x64
1F96:  CALL   0A04
....................                printf(lcd_putc,"                    "); 
1F9A:  MOVLW  E4
1F9C:  MOVWF  FF6
1F9E:  MOVLW  03
1FA0:  MOVWF  FF7
1FA2:  CALL   0B12
....................                lcd_gotoxy(1,2); 
1FA6:  MOVLW  01
1FA8:  MOVWF  x63
1FAA:  MOVLW  02
1FAC:  MOVWF  x64
1FAE:  CALL   0A04
....................                printf(lcd_putc,"        Activo      "); 
1FB2:  MOVLW  FA
1FB4:  MOVWF  FF6
1FB6:  MOVLW  03
1FB8:  MOVWF  FF7
1FBA:  CALL   0B12
....................                lcd_gotoxy(1,3); 
1FBE:  MOVLW  01
1FC0:  MOVWF  x63
1FC2:  MOVLW  03
1FC4:  MOVWF  x64
1FC6:  CALL   0A04
....................                printf(lcd_putc,"        Alarma      "); 
1FCA:  MOVLW  10
1FCC:  MOVWF  FF6
1FCE:  MOVLW  04
1FD0:  MOVWF  FF7
1FD2:  CALL   0B12
....................                lcd_gotoxy(1,4); 
1FD6:  MOVLW  01
1FD8:  MOVWF  x63
1FDA:  MOVLW  04
1FDC:  MOVWF  x64
1FDE:  CALL   0A04
....................                printf(lcd_putc,"                    ");} 
1FE2:  MOVLW  26
1FE4:  MOVWF  FF6
1FE6:  MOVLW  04
1FE8:  MOVWF  FF7
1FEA:  CALL   0B12
....................                 
....................             if(estadoalarma==0) 
1FEE:  BTFSC  34.2
1FF0:  BRA    2052
....................             {estadoalarma=0; 
1FF2:  BCF    34.2
....................                lcd_gotoxy(1,1); 
1FF4:  MOVLW  01
1FF6:  MOVWF  x63
1FF8:  MOVWF  x64
1FFA:  CALL   0A04
....................                printf(lcd_putc,"                    "); 
1FFE:  MOVLW  3C
2000:  MOVWF  FF6
2002:  MOVLW  04
2004:  MOVWF  FF7
2006:  CALL   0B12
....................                lcd_gotoxy(1,2); 
200A:  MOVLW  01
200C:  MOVWF  x63
200E:  MOVLW  02
2010:  MOVWF  x64
2012:  CALL   0A04
....................                printf(lcd_putc,"      Desactivo     "); 
2016:  MOVLW  52
2018:  MOVWF  FF6
201A:  MOVLW  04
201C:  MOVWF  FF7
201E:  CALL   0B12
....................                lcd_gotoxy(1,3); 
2022:  MOVLW  01
2024:  MOVWF  x63
2026:  MOVLW  03
2028:  MOVWF  x64
202A:  CALL   0A04
....................                printf(lcd_putc,"       Alarma       "); 
202E:  MOVLW  68
2030:  MOVWF  FF6
2032:  MOVLW  04
2034:  MOVWF  FF7
2036:  CALL   0B12
....................                lcd_gotoxy(1,4); 
203A:  MOVLW  01
203C:  MOVWF  x63
203E:  MOVLW  04
2040:  MOVWF  x64
2042:  CALL   0A04
....................                printf(lcd_putc,"                    ");} 
2046:  MOVLW  7E
2048:  MOVWF  FF6
204A:  MOVLW  04
204C:  MOVWF  FF7
204E:  CALL   0B12
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2052:  MOVLW  00
2054:  BTFSC  34.2
2056:  MOVLW  01
2058:  MOVWF  55
205A:  MOVLW  05
205C:  MOVWF  FA9
205E:  MOVFF  55,FA8
2062:  BCF    FA6.6
2064:  BCF    FA6.7
2066:  BSF    FA6.2
2068:  MOVF   FF2,W
206A:  MOVWF  00
206C:  BCF    FF2.7
206E:  MOVLB  F
2070:  MOVLW  55
2072:  MOVWF  FA7
2074:  MOVLW  AA
2076:  MOVWF  FA7
2078:  BSF    FA6.1
207A:  BTFSC  FA6.1
207C:  BRA    207A
207E:  BCF    FA6.2
2080:  MOVF   00,W
2082:  IORWF  FF2,F
2084:  MOVLW  04
2086:  MOVWF  55
2088:  MOVLW  FA
208A:  MOVLB  0
208C:  MOVWF  x68
208E:  CALL   0920
2092:  DECFSZ 55,F
2094:  BRA    2098
2096:  BRA    209C
2098:  MOVLB  F
209A:  BRA    2088
209C:  MOVLW  02
209E:  MOVWF  1B
20A0:  MOVWF  1D
20A2:  MOVLW  0C
20A4:  MOVWF  x62
20A6:  CALL   0A66
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
20AA:  MOVF   17,W
20AC:  SUBLW  03
20AE:  BTFSS  FD8.2
20B0:  BRA    22FC
....................    lcd_gotoxy(1,1); 
20B2:  MOVLW  01
20B4:  MOVWF  x63
20B6:  MOVWF  x64
20B8:  CALL   0A04
....................    printf(lcd_putc,"  Duracion Actual   ");                           
20BC:  MOVLW  94
20BE:  MOVWF  FF6
20C0:  MOVLW  04
20C2:  MOVWF  FF7
20C4:  CALL   0B12
....................    lcd_gotoxy(1,2);                                                   
20C8:  MOVLW  01
20CA:  MOVWF  x63
20CC:  MOVLW  02
20CE:  MOVWF  x64
20D0:  CALL   0A04
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
20D4:  MOVLW  AA
20D6:  MOVWF  FF6
20D8:  MOVLW  04
20DA:  MOVWF  FF7
20DC:  MOVLW  09
20DE:  MOVWF  55
20E0:  CALL   0B32
20E4:  MOVFF  2C,55
20E8:  MOVLW  01
20EA:  MOVWF  56
20EC:  CALL   0CF8
20F0:  MOVLW  3A
20F2:  MOVWF  x62
20F4:  CALL   0A66
20F8:  MOVFF  2B,55
20FC:  MOVLW  01
20FE:  MOVWF  56
2100:  CALL   0CF8
2104:  MOVLW  3A
2106:  MOVWF  x62
2108:  CALL   0A66
210C:  MOVFF  2A,55
2110:  MOVLW  01
2112:  MOVWF  56
2114:  CALL   0CF8
2118:  MOVLW  20
211A:  MOVWF  x62
211C:  CALL   0A66
....................     
....................    if(flag_filtro==1) 
2120:  BTFSS  35.1
2122:  BRA    213E
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2124:  MOVLW  01
2126:  MOVWF  x63
2128:  MOVLW  03
212A:  MOVWF  x64
212C:  CALL   0A04
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
2130:  MOVLW  C4
2132:  MOVWF  FF6
2134:  MOVLW  04
2136:  MOVWF  FF7
2138:  CALL   0B12
....................    } 
....................    else 
213C:  BRA    2156
....................    { 
....................       lcd_gotoxy(1,3);                                                  
213E:  MOVLW  01
2140:  MOVWF  x63
2142:  MOVLW  03
2144:  MOVWF  x64
2146:  CALL   0A04
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
214A:  MOVLW  DA
214C:  MOVWF  FF6
214E:  MOVLW  04
2150:  MOVWF  FF7
2152:  CALL   0B12
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
2156:  MOVLW  01
2158:  MOVWF  x63
215A:  MOVLW  04
215C:  MOVWF  x64
215E:  CALL   0A04
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
2162:  MOVLW  F0
2164:  MOVWF  FF6
2166:  MOVLW  04
2168:  MOVWF  FF7
216A:  CALL   0B12
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
216E:  BSF    F92.5
2170:  BTFSS  F80.5
2172:  BRA    2262
....................       {  delay_ms(200); 
2174:  MOVLW  C8
2176:  MOVWF  x68
2178:  CALL   0920
....................          printf(lcd_putc,"\f"); 
217C:  MOVLW  0C
217E:  MOVWF  x62
2180:  CALL   0A66
....................          lcd_gotoxy(1,2); 
2184:  MOVLW  01
2186:  MOVWF  x63
2188:  MOVLW  02
218A:  MOVWF  x64
218C:  CALL   0A04
....................          printf(lcd_putc," Reset de tiempo "); 
2190:  MOVLW  06
2192:  MOVWF  FF6
2194:  MOVLW  05
2196:  MOVWF  FF7
2198:  CALL   0B12
....................          lcd_gotoxy(1,3); 
219C:  MOVLW  01
219E:  MOVWF  x63
21A0:  MOVLW  03
21A2:  MOVWF  x64
21A4:  CALL   0A04
....................          printf(lcd_putc,"     Exitoso     "); 
21A8:  MOVLW  18
21AA:  MOVWF  FF6
21AC:  MOVLW  05
21AE:  MOVWF  FF7
21B0:  CALL   0B12
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
21B4:  MOVLW  46
21B6:  MOVWF  FA9
21B8:  CLRF   FA8
21BA:  BCF    FA6.6
21BC:  BCF    FA6.7
21BE:  BSF    FA6.2
21C0:  MOVF   FF2,W
21C2:  MOVWF  00
21C4:  BCF    FF2.7
21C6:  MOVLB  F
21C8:  MOVLW  55
21CA:  MOVWF  FA7
21CC:  MOVLW  AA
21CE:  MOVWF  FA7
21D0:  BSF    FA6.1
21D2:  BTFSC  FA6.1
21D4:  BRA    21D2
21D6:  BCF    FA6.2
21D8:  MOVF   00,W
21DA:  IORWF  FF2,F
21DC:  MOVLW  47
21DE:  MOVWF  FA9
21E0:  CLRF   FA8
21E2:  BCF    FA6.6
21E4:  BCF    FA6.7
21E6:  BSF    FA6.2
21E8:  MOVF   FF2,W
21EA:  MOVWF  00
21EC:  BCF    FF2.7
21EE:  MOVLW  55
21F0:  MOVWF  FA7
21F2:  MOVLW  AA
21F4:  MOVWF  FA7
21F6:  BSF    FA6.1
21F8:  BTFSC  FA6.1
21FA:  BRA    21F8
21FC:  BCF    FA6.2
21FE:  MOVF   00,W
2200:  IORWF  FF2,F
2202:  MOVLW  48
2204:  MOVWF  FA9
2206:  CLRF   FA8
2208:  BCF    FA6.6
220A:  BCF    FA6.7
220C:  BSF    FA6.2
220E:  MOVF   FF2,W
2210:  MOVWF  00
2212:  BCF    FF2.7
2214:  MOVLW  55
2216:  MOVWF  FA7
2218:  MOVLW  AA
221A:  MOVWF  FA7
221C:  BSF    FA6.1
221E:  BTFSC  FA6.1
2220:  BRA    221E
2222:  BCF    FA6.2
2224:  MOVF   00,W
2226:  IORWF  FF2,F
....................          delay_ms(700); 
2228:  MOVLW  04
222A:  MOVWF  55
222C:  MOVLW  AF
222E:  MOVLB  0
2230:  MOVWF  x68
2232:  CALL   0920
2236:  DECFSZ 55,F
2238:  BRA    223C
223A:  BRA    2240
223C:  MOVLB  F
223E:  BRA    222C
....................          segundos=0;minutos=0;horas=0; 
2240:  CLRF   2A
2242:  CLRF   2B
2244:  CLRF   2C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2246:  MOVLW  1E
2248:  MOVWF  x68
224A:  CALL   0920
224E:  MOVLW  01
2250:  MOVWF  17
2252:  CLRF   36
2254:  MOVLW  02
2256:  MOVWF  1B
2258:  MOVWF  1D
225A:  MOVLW  0C
225C:  MOVWF  x62
225E:  CALL   0A66
....................       } 
....................        
....................       if(RIGHT) 
2262:  BSF    F96.1
2264:  BTFSS  F84.1
2266:  BRA    22C8
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
2268:  BTG    35.1
226A:  MOVLW  00
226C:  BTFSC  35.1
226E:  MOVLW  01
2270:  MOVWF  55
2272:  MOVLW  49
2274:  MOVWF  FA9
2276:  MOVFF  55,FA8
227A:  BCF    FA6.6
227C:  BCF    FA6.7
227E:  BSF    FA6.2
2280:  MOVF   FF2,W
2282:  MOVWF  00
2284:  BCF    FF2.7
2286:  MOVLB  F
2288:  MOVLW  55
228A:  MOVWF  FA7
228C:  MOVLW  AA
228E:  MOVWF  FA7
2290:  BSF    FA6.1
2292:  BTFSC  FA6.1
2294:  BRA    2292
2296:  BCF    FA6.2
2298:  MOVF   00,W
229A:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
229C:  MOVLW  02
229E:  MOVWF  55
22A0:  MOVLW  FA
22A2:  MOVLB  0
22A4:  MOVWF  x68
22A6:  CALL   0920
22AA:  DECFSZ 55,F
22AC:  BRA    22B0
22AE:  BRA    22B4
22B0:  MOVLB  F
22B2:  BRA    22A0
22B4:  MOVLW  01
22B6:  MOVWF  17
22B8:  CLRF   36
22BA:  MOVLW  02
22BC:  MOVWF  1B
22BE:  MOVWF  1D
22C0:  MOVLW  0C
22C2:  MOVWF  x62
22C4:  CALL   0A66
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
22C8:  BSF    F96.2
22CA:  BTFSS  F84.2
22CC:  BRA    22FA
....................       {  if(Flanco3 == 0)  
22CE:  BTFSC  34.6
22D0:  BRA    22F8
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
22D2:  BSF    34.6
22D4:  MOVLW  02
22D6:  MOVWF  55
22D8:  MOVLW  FA
22DA:  MOVWF  x68
22DC:  CALL   0920
22E0:  DECFSZ 55,F
22E2:  BRA    22D8
22E4:  MOVLW  01
22E6:  MOVWF  17
22E8:  CLRF   36
22EA:  MOVLW  02
22EC:  MOVWF  1B
22EE:  MOVWF  1D
22F0:  MOVLW  0C
22F2:  MOVWF  x62
22F4:  CALL   0A66
....................          else 
22F8:  BRA    22FC
....................             {Flanco3 = 0;}       
22FA:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
22FC:  MOVF   17,W
22FE:  SUBLW  04
2300:  BTFSS  FD8.2
2302:  BRA    24FA
....................    lcd_gotoxy(1,2); 
2304:  MOVLW  01
2306:  MOVWF  x63
2308:  MOVLW  02
230A:  MOVWF  x64
230C:  CALL   0A04
....................    printf(lcd_putc,"    Vida Filtro     "); 
2310:  MOVLW  2A
2312:  MOVWF  FF6
2314:  MOVLW  05
2316:  MOVWF  FF7
2318:  CALL   0B12
....................    lcd_gotoxy(1,3); 
231C:  MOVLW  01
231E:  MOVWF  x63
2320:  MOVLW  03
2322:  MOVWF  x64
2324:  CALL   0A04
....................    printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
2328:  MOVLW  40
232A:  MOVWF  FF6
232C:  MOVLW  05
232E:  MOVWF  FF7
2330:  MOVLW  06
2332:  MOVWF  55
2334:  CALL   0B32
2338:  MOVLW  42
233A:  MOVWF  FE9
233C:  MOVFF  45,58
2340:  MOVFF  44,57
2344:  MOVFF  43,56
2348:  MOVFF  42,55
234C:  CLRF   59
234E:  GOTO   0F0C
2352:  MOVLW  4C
2354:  MOVWF  FF6
2356:  MOVLW  05
2358:  MOVWF  FF7
235A:  MOVLW  08
235C:  MOVWF  55
235E:  CALL   0B32
....................     
....................    if(setpoint<1.0) 
2362:  MOVFF  45,5C
2366:  MOVFF  44,5B
236A:  MOVFF  43,5A
236E:  MOVFF  42,59
2372:  CLRF   x60
2374:  CLRF   5F
2376:  CLRF   5E
2378:  MOVLW  7F
237A:  MOVWF  5D
237C:  CALL   108C
2380:  BNC   238C
....................    {setpoint=1.0;} 
2382:  CLRF   45
2384:  CLRF   44
2386:  CLRF   43
2388:  MOVLW  7F
238A:  MOVWF  42
....................     
....................    if(setpoint>255.0) 
238C:  CLRF   5C
238E:  CLRF   5B
2390:  MOVLW  7F
2392:  MOVWF  5A
2394:  MOVLW  86
2396:  MOVWF  59
2398:  MOVFF  45,60
239C:  MOVFF  44,5F
23A0:  MOVFF  43,5E
23A4:  MOVFF  42,5D
23A8:  CALL   108C
23AC:  BNC   23BA
....................    {setpoint=255.0;} 
23AE:  CLRF   45
23B0:  CLRF   44
23B2:  MOVLW  7F
23B4:  MOVWF  43
23B6:  MOVLW  86
23B8:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
23BA:  BSF    F92.5
23BC:  BTFSS  F80.5
23BE:  BRA    23FA
....................       {setpoint+=1.0;Flanco = 1;delay_ms(30);} 
23C0:  BCF    FD8.1
23C2:  MOVFF  45,58
23C6:  MOVFF  44,57
23CA:  MOVFF  43,56
23CE:  MOVFF  42,55
23D2:  CLRF   5C
23D4:  CLRF   5B
23D6:  CLRF   5A
23D8:  MOVLW  7F
23DA:  MOVWF  59
23DC:  CALL   1102
23E0:  MOVFF  03,45
23E4:  MOVFF  02,44
23E8:  MOVFF  01,43
23EC:  MOVFF  00,42
23F0:  BSF    34.3
23F2:  MOVLW  1E
23F4:  MOVWF  x68
23F6:  CALL   0920
....................       
....................              
....................       if(DOWN)//Si oprime hacia abajo 
23FA:  BSF    F96.0
23FC:  BTFSS  F84.0
23FE:  BRA    243A
....................       {setpoint-=1.0;Flanco2 = 1;delay_ms(30);} 
2400:  BSF    FD8.1
2402:  MOVFF  45,58
2406:  MOVFF  44,57
240A:  MOVFF  43,56
240E:  MOVFF  42,55
2412:  CLRF   5C
2414:  CLRF   5B
2416:  CLRF   5A
2418:  MOVLW  7F
241A:  MOVWF  59
241C:  CALL   1102
2420:  MOVFF  03,45
2424:  MOVFF  02,44
2428:  MOVFF  01,43
242C:  MOVFF  00,42
2430:  BSF    34.5
2432:  MOVLW  1E
2434:  MOVWF  x68
2436:  CALL   0920
....................          
....................     
....................       if(RIGHT)// Si oprime derecha 
243A:  BSF    F96.1
243C:  BTFSS  F84.1
243E:  BRA    24C2
....................       {  if(Flanco1 == 0)  
2440:  BTFSC  34.4
2442:  BRA    24C0
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2444:  MOVLW  01
2446:  MOVWF  17
2448:  CLRF   36
244A:  MOVLW  02
244C:  MOVWF  1B
244E:  MOVWF  1D
2450:  MOVLW  0B
2452:  MOVWF  1A
2454:  MOVLW  02
2456:  MOVWF  55
2458:  MOVLW  FA
245A:  MOVWF  x68
245C:  CALL   0920
2460:  DECFSZ 55,F
2462:  BRA    2458
2464:  MOVLW  0C
2466:  MOVWF  x62
2468:  CALL   0A66
....................             Temporal=setpoint; 
246C:  MOVFF  45,49
2470:  MOVFF  44,48
2474:  MOVFF  43,47
2478:  MOVFF  42,46
....................             Entero=(int)setpoint; 
247C:  MOVFF  45,58
2480:  MOVFF  44,57
2484:  MOVFF  43,56
2488:  MOVFF  42,55
248C:  GOTO   136C
2490:  MOVFF  01,24
....................             write_eeprom(40,Entero); 
2494:  MOVLW  28
2496:  MOVWF  FA9
2498:  MOVFF  24,FA8
249C:  BCF    FA6.6
249E:  BCF    FA6.7
24A0:  BSF    FA6.2
24A2:  MOVF   FF2,W
24A4:  MOVWF  00
24A6:  BCF    FF2.7
24A8:  MOVLB  F
24AA:  MOVLW  55
24AC:  MOVWF  FA7
24AE:  MOVLW  AA
24B0:  MOVWF  FA7
24B2:  BSF    FA6.1
24B4:  BTFSC  FA6.1
24B6:  BRA    24B4
24B8:  BCF    FA6.2
24BA:  MOVF   00,W
24BC:  IORWF  FF2,F
24BE:  MOVLB  0
....................             }} 
....................          else 
24C0:  BRA    24C4
....................             {Flanco1 = 0;}    
24C2:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
24C4:  BSF    F96.2
24C6:  BTFSS  F84.2
24C8:  BRA    24F8
....................       {  if(Flanco3 == 0)  
24CA:  BTFSC  34.6
24CC:  BRA    24F6
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
24CE:  MOVLW  01
24D0:  MOVWF  17
24D2:  CLRF   36
24D4:  MOVLW  02
24D6:  MOVWF  1B
24D8:  MOVWF  1D
24DA:  MOVLW  0B
24DC:  MOVWF  1A
24DE:  MOVLW  02
24E0:  MOVWF  55
24E2:  MOVLW  FA
24E4:  MOVWF  x68
24E6:  CALL   0920
24EA:  DECFSZ 55,F
24EC:  BRA    24E2
24EE:  MOVLW  0C
24F0:  MOVWF  x62
24F2:  CALL   0A66
....................          else 
24F6:  BRA    24FA
....................             {Flanco3 = 0;}     
24F8:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
24FA:  MOVF   17,W
24FC:  SUBLW  05
24FE:  BTFSS  FD8.2
2500:  BRA    280A
....................    lcd_gotoxy(1,1); 
2502:  MOVLW  01
2504:  MOVWF  x63
2506:  MOVWF  x64
2508:  CALL   0A04
....................    printf(lcd_putc,"      Ingrese       "); 
250C:  MOVLW  56
250E:  MOVWF  FF6
2510:  MOVLW  05
2512:  MOVWF  FF7
2514:  CALL   0B12
....................    lcd_gotoxy(1,2); 
2518:  MOVLW  01
251A:  MOVWF  x63
251C:  MOVLW  02
251E:  MOVWF  x64
2520:  CALL   0A04
....................    printf(lcd_putc," Contraseña Actual  "); 
2524:  MOVLW  6C
2526:  MOVWF  FF6
2528:  MOVLW  05
252A:  MOVWF  FF7
252C:  CALL   0B12
....................    lcd_gotoxy(1,3); 
2530:  MOVLW  01
2532:  MOVWF  x63
2534:  MOVLW  03
2536:  MOVWF  x64
2538:  CALL   0A04
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
253C:  MOVLW  82
253E:  MOVWF  FF6
2540:  MOVLW  05
2542:  MOVWF  FF7
2544:  MOVLW  0A
2546:  MOVWF  55
2548:  CALL   0B32
254C:  MOVFF  3A,55
2550:  MOVLW  1F
2552:  MOVWF  56
2554:  CALL   0B78
2558:  MOVFF  3B,55
255C:  MOVLW  1F
255E:  MOVWF  56
2560:  CALL   0B78
2564:  MOVFF  3C,55
2568:  MOVLW  1F
256A:  MOVWF  56
256C:  CALL   0B78
2570:  MOVFF  3D,55
2574:  MOVLW  1F
2576:  MOVWF  56
2578:  CALL   0B78
257C:  MOVLW  20
257E:  MOVWF  x62
2580:  CALL   0A66
2584:  MOVLW  20
2586:  MOVWF  x62
2588:  CALL   0A66
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
258C:  BSF    F92.5
258E:  BTFSS  F80.5
2590:  BRA    25B4
....................       {  if(Flanco == 0)  
2592:  BTFSC  34.3
2594:  BRA    25B2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2596:  MOVLW  0B
2598:  SUBWF  1A,W
259A:  CLRF   03
259C:  ADDLW  3A
259E:  MOVWF  FE9
25A0:  MOVLW  00
25A2:  ADDWFC 03,W
25A4:  MOVWF  FEA
25A6:  INCF   FEF,F
25A8:  BSF    34.3
25AA:  MOVLW  1E
25AC:  MOVWF  x68
25AE:  CALL   0920
....................          else 
25B2:  BRA    25B6
....................             {Flanco = 0;} 
25B4:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
25B6:  BSF    F96.0
25B8:  BTFSS  F84.0
25BA:  BRA    25DE
....................       {  if(Flanco2 == 0)  
25BC:  BTFSC  34.5
25BE:  BRA    25DC
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
25C0:  MOVLW  0B
25C2:  SUBWF  1A,W
25C4:  CLRF   03
25C6:  ADDLW  3A
25C8:  MOVWF  FE9
25CA:  MOVLW  00
25CC:  ADDWFC 03,W
25CE:  MOVWF  FEA
25D0:  DECF   FEF,F
25D2:  BSF    34.5
25D4:  MOVLW  1E
25D6:  MOVWF  x68
25D8:  CALL   0920
....................          else 
25DC:  BRA    25E0
....................             {Flanco2 = 0;} 
25DE:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime derecha 
25E0:  BSF    F96.1
25E2:  BTFSS  F84.1
25E4:  BRA    2608
....................       {  if(Flanco1 == 0)  
25E6:  BTFSC  34.4
25E8:  BRA    2606
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
25EA:  BSF    34.4
25EC:  INCF   1A,F
25EE:  MOVLW  02
25F0:  MOVWF  55
25F2:  MOVLW  FA
25F4:  MOVWF  x68
25F6:  CALL   0920
25FA:  DECFSZ 55,F
25FC:  BRA    25F2
25FE:  MOVLW  0C
2600:  MOVWF  x62
2602:  CALL   0A66
....................          else 
2606:  BRA    260A
....................             {Flanco1 = 0;}    
2608:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
260A:  BSF    F96.2
260C:  BTFSS  F84.2
260E:  BRA    2632
....................       {  if(Flanco3 == 0)  
2610:  BTFSC  34.6
2612:  BRA    2630
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
2614:  BSF    34.6
2616:  DECF   1A,F
2618:  MOVLW  02
261A:  MOVWF  55
261C:  MOVLW  FA
261E:  MOVWF  x68
2620:  CALL   0920
2624:  DECFSZ 55,F
2626:  BRA    261C
2628:  MOVLW  0C
262A:  MOVWF  x62
262C:  CALL   0A66
....................          else 
2630:  BRA    2634
....................             {Flanco3 = 0;}     
2632:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2634:  MOVLW  0B
2636:  SUBWF  1A,W
2638:  CLRF   03
263A:  ADDLW  3A
263C:  MOVWF  FE9
263E:  MOVLW  00
2640:  ADDWFC 03,W
2642:  MOVWF  FEA
2644:  BTFSC  FEF.7
2646:  BRA    264A
2648:  BRA    265E
....................        {clave[unidad-11]=9;} 
264A:  MOVLW  0B
264C:  SUBWF  1A,W
264E:  CLRF   03
2650:  ADDLW  3A
2652:  MOVWF  FE9
2654:  MOVLW  00
2656:  ADDWFC 03,W
2658:  MOVWF  FEA
265A:  MOVLW  09
265C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
265E:  MOVLW  0B
2660:  SUBWF  1A,W
2662:  CLRF   03
2664:  ADDLW  3A
2666:  MOVWF  FE9
2668:  MOVLW  00
266A:  ADDWFC 03,W
266C:  MOVWF  FEA
266E:  BTFSC  FEF.7
2670:  BRA    268A
2672:  MOVF   FEF,W
2674:  SUBLW  09
2676:  BC    268A
....................        {clave[unidad-11]=0;} 
2678:  MOVLW  0B
267A:  SUBWF  1A,W
267C:  CLRF   03
267E:  ADDLW  3A
2680:  MOVWF  FE9
2682:  MOVLW  00
2684:  ADDWFC 03,W
2686:  MOVWF  FEA
2688:  CLRF   FEF
....................        if(unidad<11) 
268A:  BTFSC  1A.7
268C:  BRA    2694
268E:  MOVF   1A,W
2690:  SUBLW  0A
2692:  BNC   26A4
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
2694:  MOVLW  01
2696:  MOVWF  17
2698:  CLRF   36
269A:  MOVLW  02
269C:  MOVWF  1B
269E:  MOVWF  1D
26A0:  MOVLW  0B
26A2:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
26A4:  MOVFF  1A,63
26A8:  MOVLW  04
26AA:  MOVWF  x64
26AC:  CALL   0A04
....................        lcd_putc(t[2]); 
26B0:  MOVFF  39,62
26B4:  CALL   0A66
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
26B8:  BTFSC  1A.7
26BA:  BRA    27DE
26BC:  MOVF   1A,W
26BE:  SUBLW  0E
26C0:  BTFSC  FD8.0
26C2:  BRA    27DE
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
26C4:  MOVF   3E,W
26C6:  SUBWF  3A,W
26C8:  BNZ   2764
26CA:  MOVF   3F,W
26CC:  SUBWF  3B,W
26CE:  BNZ   2764
26D0:  MOVF   40,W
26D2:  SUBWF  3C,W
26D4:  BNZ   2764
26D6:  MOVF   41,W
26D8:  SUBWF  3D,W
26DA:  BNZ   2764
....................             {lcd_gotoxy(1,1); 
26DC:  MOVLW  01
26DE:  MOVWF  x63
26E0:  MOVWF  x64
26E2:  CALL   0A04
....................             printf(lcd_putc,"                    "); 
26E6:  MOVLW  98
26E8:  MOVWF  FF6
26EA:  MOVLW  05
26EC:  MOVWF  FF7
26EE:  CALL   0B12
....................             lcd_gotoxy(1,2); 
26F2:  MOVLW  01
26F4:  MOVWF  x63
26F6:  MOVLW  02
26F8:  MOVWF  x64
26FA:  CALL   0A04
....................             printf(lcd_putc,"     Contraseña     "); 
26FE:  MOVLW  AE
2700:  MOVWF  FF6
2702:  MOVLW  05
2704:  MOVWF  FF7
2706:  CALL   0B12
....................             lcd_gotoxy(1,3); 
270A:  MOVLW  01
270C:  MOVWF  x63
270E:  MOVLW  03
2710:  MOVWF  x64
2712:  CALL   0A04
....................             printf(lcd_putc,"      Correcta      "); 
2716:  MOVLW  C4
2718:  MOVWF  FF6
271A:  MOVLW  05
271C:  MOVWF  FF7
271E:  CALL   0B12
....................             lcd_gotoxy(1,4); 
2722:  MOVLW  01
2724:  MOVWF  x63
2726:  MOVLW  04
2728:  MOVWF  x64
272A:  CALL   0A04
....................             printf(lcd_putc,"                    "); 
272E:  MOVLW  DA
2730:  MOVWF  FF6
2732:  MOVLW  05
2734:  MOVWF  FF7
2736:  CALL   0B12
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
273A:  MOVLW  02
273C:  MOVWF  55
273E:  MOVLW  FA
2740:  MOVWF  x68
2742:  CALL   0920
2746:  DECFSZ 55,F
2748:  BRA    273E
274A:  MOVLW  33
274C:  MOVWF  17
274E:  MOVLW  0B
2750:  MOVWF  1A
2752:  MOVLW  0C
2754:  MOVWF  x62
2756:  CALL   0A66
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
275A:  CLRF   3A
275C:  CLRF   3B
275E:  CLRF   3C
2760:  CLRF   3D
....................          else 
2762:  BRA    27DE
....................          {lcd_gotoxy(1,1); 
2764:  MOVLW  01
2766:  MOVWF  x63
2768:  MOVWF  x64
276A:  CALL   0A04
....................             printf(lcd_putc,"                    "); 
276E:  MOVLW  F0
2770:  MOVWF  FF6
2772:  MOVLW  05
2774:  MOVWF  FF7
2776:  CALL   0B12
....................             lcd_gotoxy(1,2); 
277A:  MOVLW  01
277C:  MOVWF  x63
277E:  MOVLW  02
2780:  MOVWF  x64
2782:  CALL   0A04
....................             printf(lcd_putc,"     Contraseña     "); 
2786:  MOVLW  06
2788:  MOVWF  FF6
278A:  MOVLW  06
278C:  MOVWF  FF7
278E:  CALL   0B12
....................             lcd_gotoxy(1,3); 
2792:  MOVLW  01
2794:  MOVWF  x63
2796:  MOVLW  03
2798:  MOVWF  x64
279A:  CALL   0A04
....................             printf(lcd_putc,"     Incorrecta     "); 
279E:  MOVLW  1C
27A0:  MOVWF  FF6
27A2:  MOVLW  06
27A4:  MOVWF  FF7
27A6:  CALL   0B12
....................             lcd_gotoxy(1,4); 
27AA:  MOVLW  01
27AC:  MOVWF  x63
27AE:  MOVLW  04
27B0:  MOVWF  x64
27B2:  CALL   0A04
....................             printf(lcd_putc,"                    "); 
27B6:  MOVLW  32
27B8:  MOVWF  FF6
27BA:  MOVLW  06
27BC:  MOVWF  FF7
27BE:  CALL   0B12
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
27C2:  MOVLW  02
27C4:  MOVWF  55
27C6:  MOVLW  FA
27C8:  MOVWF  x68
27CA:  CALL   0920
27CE:  DECFSZ 55,F
27D0:  BRA    27C6
27D2:  MOVLW  0B
27D4:  MOVWF  1A
27D6:  MOVLW  0C
27D8:  MOVWF  x62
27DA:  CALL   0A66
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
27DE:  BTFSC  1A.7
27E0:  BRA    280A
27E2:  MOVF   1A,W
27E4:  SUBLW  0B
27E6:  BC    280A
27E8:  BTFSC  1A.7
27EA:  BRA    27F2
27EC:  MOVF   1A,W
27EE:  SUBLW  0D
27F0:  BNC   280A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
27F2:  MOVLW  01
27F4:  SUBWF  1A,W
27F6:  MOVWF  55
27F8:  MOVWF  x63
27FA:  MOVLW  04
27FC:  MOVWF  x64
27FE:  CALL   0A04
....................             lcd_putc(t[1]); 
2802:  MOVFF  38,62
2806:  CALL   0A66
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
280A:  MOVF   17,W
280C:  SUBLW  33
280E:  BTFSS  FD8.2
2810:  BRA    2B30
....................    lcd_gotoxy(1,1); 
2812:  MOVLW  01
2814:  MOVWF  x63
2816:  MOVWF  x64
2818:  CALL   0A04
....................    printf(lcd_putc,"     Ingrese        "); 
281C:  MOVLW  48
281E:  MOVWF  FF6
2820:  MOVLW  06
2822:  MOVWF  FF7
2824:  CALL   0B12
....................    lcd_gotoxy(1,2); 
2828:  MOVLW  01
282A:  MOVWF  x63
282C:  MOVLW  02
282E:  MOVWF  x64
2830:  CALL   0A04
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2834:  MOVLW  5E
2836:  MOVWF  FF6
2838:  MOVLW  06
283A:  MOVWF  FF7
283C:  CALL   0B12
....................    lcd_gotoxy(1,3); 
2840:  MOVLW  01
2842:  MOVWF  x63
2844:  MOVLW  03
2846:  MOVWF  x64
2848:  CALL   0A04
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
284C:  MOVLW  74
284E:  MOVWF  FF6
2850:  MOVLW  06
2852:  MOVWF  FF7
2854:  MOVLW  0A
2856:  MOVWF  55
2858:  CALL   0B32
285C:  MOVFF  3A,55
2860:  MOVLW  1F
2862:  MOVWF  56
2864:  CALL   0B78
2868:  MOVFF  3B,55
286C:  MOVLW  1F
286E:  MOVWF  56
2870:  CALL   0B78
2874:  MOVFF  3C,55
2878:  MOVLW  1F
287A:  MOVWF  56
287C:  CALL   0B78
2880:  MOVFF  3D,55
2884:  MOVLW  1F
2886:  MOVWF  56
2888:  CALL   0B78
288C:  MOVLW  20
288E:  MOVWF  x62
2890:  CALL   0A66
2894:  MOVLW  20
2896:  MOVWF  x62
2898:  CALL   0A66
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
289C:  BSF    F92.5
289E:  BTFSS  F80.5
28A0:  BRA    28C4
....................       {  if(Flanco == 0)  
28A2:  BTFSC  34.3
28A4:  BRA    28C2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
28A6:  MOVLW  0B
28A8:  SUBWF  1A,W
28AA:  CLRF   03
28AC:  ADDLW  3A
28AE:  MOVWF  FE9
28B0:  MOVLW  00
28B2:  ADDWFC 03,W
28B4:  MOVWF  FEA
28B6:  INCF   FEF,F
28B8:  BSF    34.3
28BA:  MOVLW  1E
28BC:  MOVWF  x68
28BE:  CALL   0920
....................          else 
28C2:  BRA    28C6
....................             {Flanco = 0;} 
28C4:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
28C6:  BSF    F96.0
28C8:  BTFSS  F84.0
28CA:  BRA    28EE
....................       {  if(Flanco2 == 0)  
28CC:  BTFSC  34.5
28CE:  BRA    28EC
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
28D0:  MOVLW  0B
28D2:  SUBWF  1A,W
28D4:  CLRF   03
28D6:  ADDLW  3A
28D8:  MOVWF  FE9
28DA:  MOVLW  00
28DC:  ADDWFC 03,W
28DE:  MOVWF  FEA
28E0:  DECF   FEF,F
28E2:  BSF    34.5
28E4:  MOVLW  1E
28E6:  MOVWF  x68
28E8:  CALL   0920
....................          else 
28EC:  BRA    28F0
....................             {Flanco2 = 0;} 
28EE:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
28F0:  BSF    F96.1
28F2:  BTFSS  F84.1
28F4:  BRA    2910
....................       {  if(Flanco1 == 0)  
28F6:  BTFSC  34.4
28F8:  BRA    290E
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
28FA:  BSF    34.4
28FC:  INCF   1A,F
28FE:  MOVLW  1E
2900:  MOVWF  x68
2902:  CALL   0920
2906:  MOVLW  0C
2908:  MOVWF  x62
290A:  CALL   0A66
....................          else 
290E:  BRA    2912
....................             {Flanco1 = 0;}    
2910:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2912:  BSF    F96.2
2914:  BTFSS  F84.2
2916:  BRA    2932
....................       {  if(Flanco3 == 0)  
2918:  BTFSC  34.6
291A:  BRA    2930
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
291C:  BSF    34.6
291E:  DECF   1A,F
2920:  MOVLW  1E
2922:  MOVWF  x68
2924:  CALL   0920
2928:  MOVLW  0C
292A:  MOVWF  x62
292C:  CALL   0A66
....................          else 
2930:  BRA    2934
....................             {Flanco3 = 0;}     
2932:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2934:  MOVLW  0B
2936:  SUBWF  1A,W
2938:  CLRF   03
293A:  ADDLW  3A
293C:  MOVWF  FE9
293E:  MOVLW  00
2940:  ADDWFC 03,W
2942:  MOVWF  FEA
2944:  BTFSC  FEF.7
2946:  BRA    294A
2948:  BRA    295E
....................        {clave[unidad-11]=9;} 
294A:  MOVLW  0B
294C:  SUBWF  1A,W
294E:  CLRF   03
2950:  ADDLW  3A
2952:  MOVWF  FE9
2954:  MOVLW  00
2956:  ADDWFC 03,W
2958:  MOVWF  FEA
295A:  MOVLW  09
295C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
295E:  MOVLW  0B
2960:  SUBWF  1A,W
2962:  CLRF   03
2964:  ADDLW  3A
2966:  MOVWF  FE9
2968:  MOVLW  00
296A:  ADDWFC 03,W
296C:  MOVWF  FEA
296E:  BTFSC  FEF.7
2970:  BRA    298A
2972:  MOVF   FEF,W
2974:  SUBLW  09
2976:  BC    298A
....................        {clave[unidad-11]=0;} 
2978:  MOVLW  0B
297A:  SUBWF  1A,W
297C:  CLRF   03
297E:  ADDLW  3A
2980:  MOVWF  FE9
2982:  MOVLW  00
2984:  ADDWFC 03,W
2986:  MOVWF  FEA
2988:  CLRF   FEF
....................        if(unidad<11) 
298A:  BTFSC  1A.7
298C:  BRA    2994
298E:  MOVF   1A,W
2990:  SUBLW  0A
2992:  BNC   299C
....................        {Menu=5;unidad=11;} 
2994:  MOVLW  05
2996:  MOVWF  17
2998:  MOVLW  0B
299A:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
299C:  MOVFF  1A,63
29A0:  MOVLW  04
29A2:  MOVWF  x64
29A4:  CALL   0A04
....................        lcd_putc(t[2]); 
29A8:  MOVFF  39,62
29AC:  CALL   0A66
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
29B0:  BTFSC  1A.7
29B2:  BRA    2B04
29B4:  MOVF   1A,W
29B6:  SUBLW  0E
29B8:  BTFSC  FD8.0
29BA:  BRA    2B04
....................        { 
....................             lcd_gotoxy(1,1); 
29BC:  MOVLW  01
29BE:  MOVWF  x63
29C0:  MOVWF  x64
29C2:  CALL   0A04
....................             printf(lcd_putc,"                    "); 
29C6:  MOVLW  8A
29C8:  MOVWF  FF6
29CA:  MOVLW  06
29CC:  MOVWF  FF7
29CE:  CALL   0B12
....................             lcd_gotoxy(1,2); 
29D2:  MOVLW  01
29D4:  MOVWF  x63
29D6:  MOVLW  02
29D8:  MOVWF  x64
29DA:  CALL   0A04
....................             printf(lcd_putc,"     Contraseña     "); 
29DE:  MOVLW  A0
29E0:  MOVWF  FF6
29E2:  MOVLW  06
29E4:  MOVWF  FF7
29E6:  CALL   0B12
....................             lcd_gotoxy(1,3); 
29EA:  MOVLW  01
29EC:  MOVWF  x63
29EE:  MOVLW  03
29F0:  MOVWF  x64
29F2:  CALL   0A04
....................             printf(lcd_putc,"     Almacenada     "); 
29F6:  MOVLW  B6
29F8:  MOVWF  FF6
29FA:  MOVLW  06
29FC:  MOVWF  FF7
29FE:  CALL   0B12
....................             lcd_gotoxy(1,4); 
2A02:  MOVLW  01
2A04:  MOVWF  x63
2A06:  MOVLW  04
2A08:  MOVWF  x64
2A0A:  CALL   0A04
....................             printf(lcd_putc,"                    "); 
2A0E:  MOVLW  CC
2A10:  MOVWF  FF6
2A12:  MOVLW  06
2A14:  MOVWF  FF7
2A16:  CALL   0B12
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2A1A:  CLRF   FA9
2A1C:  MOVFF  3A,FA8
2A20:  BCF    FA6.6
2A22:  BCF    FA6.7
2A24:  BSF    FA6.2
2A26:  MOVF   FF2,W
2A28:  MOVWF  00
2A2A:  BCF    FF2.7
2A2C:  MOVLB  F
2A2E:  MOVLW  55
2A30:  MOVWF  FA7
2A32:  MOVLW  AA
2A34:  MOVWF  FA7
2A36:  BSF    FA6.1
2A38:  BTFSC  FA6.1
2A3A:  BRA    2A38
2A3C:  BCF    FA6.2
2A3E:  MOVF   00,W
2A40:  IORWF  FF2,F
2A42:  MOVLW  14
2A44:  MOVLB  0
2A46:  MOVWF  x68
2A48:  CALL   0920
2A4C:  MOVLW  01
2A4E:  MOVWF  FA9
2A50:  MOVFF  3B,FA8
2A54:  BCF    FA6.6
2A56:  BCF    FA6.7
2A58:  BSF    FA6.2
2A5A:  MOVF   FF2,W
2A5C:  MOVWF  00
2A5E:  BCF    FF2.7
2A60:  MOVLB  F
2A62:  MOVLW  55
2A64:  MOVWF  FA7
2A66:  MOVLW  AA
2A68:  MOVWF  FA7
2A6A:  BSF    FA6.1
2A6C:  BTFSC  FA6.1
2A6E:  BRA    2A6C
2A70:  BCF    FA6.2
2A72:  MOVF   00,W
2A74:  IORWF  FF2,F
2A76:  MOVLW  14
2A78:  MOVLB  0
2A7A:  MOVWF  x68
2A7C:  CALL   0920
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2A80:  MOVLW  02
2A82:  MOVWF  FA9
2A84:  MOVFF  3C,FA8
2A88:  BCF    FA6.6
2A8A:  BCF    FA6.7
2A8C:  BSF    FA6.2
2A8E:  MOVF   FF2,W
2A90:  MOVWF  00
2A92:  BCF    FF2.7
2A94:  MOVLB  F
2A96:  MOVLW  55
2A98:  MOVWF  FA7
2A9A:  MOVLW  AA
2A9C:  MOVWF  FA7
2A9E:  BSF    FA6.1
2AA0:  BTFSC  FA6.1
2AA2:  BRA    2AA0
2AA4:  BCF    FA6.2
2AA6:  MOVF   00,W
2AA8:  IORWF  FF2,F
2AAA:  MOVLW  14
2AAC:  MOVLB  0
2AAE:  MOVWF  x68
2AB0:  CALL   0920
2AB4:  MOVLW  03
2AB6:  MOVWF  FA9
2AB8:  MOVFF  3D,FA8
2ABC:  BCF    FA6.6
2ABE:  BCF    FA6.7
2AC0:  BSF    FA6.2
2AC2:  MOVF   FF2,W
2AC4:  MOVWF  00
2AC6:  BCF    FF2.7
2AC8:  MOVLB  F
2ACA:  MOVLW  55
2ACC:  MOVWF  FA7
2ACE:  MOVLW  AA
2AD0:  MOVWF  FA7
2AD2:  BSF    FA6.1
2AD4:  BTFSC  FA6.1
2AD6:  BRA    2AD4
2AD8:  BCF    FA6.2
2ADA:  MOVF   00,W
2ADC:  IORWF  FF2,F
2ADE:  MOVLW  14
2AE0:  MOVLB  0
2AE2:  MOVWF  x68
2AE4:  CALL   0920
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2AE8:  MOVLW  02
2AEA:  MOVWF  55
2AEC:  MOVLW  FA
2AEE:  MOVWF  x68
2AF0:  CALL   0920
2AF4:  DECFSZ 55,F
2AF6:  BRA    2AEC
2AF8:  MOVLW  01
2AFA:  MOVWF  17
2AFC:  CLRF   36
2AFE:  MOVLW  02
2B00:  MOVWF  1B
2B02:  MOVWF  1D
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2B04:  BTFSC  1A.7
2B06:  BRA    2B30
2B08:  MOVF   1A,W
2B0A:  SUBLW  0B
2B0C:  BC    2B30
2B0E:  BTFSC  1A.7
2B10:  BRA    2B18
2B12:  MOVF   1A,W
2B14:  SUBLW  0D
2B16:  BNC   2B30
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B18:  MOVLW  01
2B1A:  SUBWF  1A,W
2B1C:  MOVWF  55
2B1E:  MOVWF  x63
2B20:  MOVLW  04
2B22:  MOVWF  x64
2B24:  CALL   0A04
....................             lcd_putc(t[1]); 
2B28:  MOVFF  38,62
2B2C:  CALL   0A66
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de Tiempo de Purga 
2B30:  MOVF   17,W
2B32:  SUBLW  06
2B34:  BTFSS  FD8.2
2B36:  BRA    2D76
....................    { 
....................       lcd_gotoxy(1,1); 
2B38:  MOVLW  01
2B3A:  MOVWF  x63
2B3C:  MOVWF  x64
2B3E:  CALL   0A04
....................       printf(lcd_putc,"     Tiempo  de      "); 
2B42:  MOVLW  E2
2B44:  MOVWF  FF6
2B46:  MOVLW  06
2B48:  MOVWF  FF7
2B4A:  CALL   0B12
....................       lcd_gotoxy(1,2); 
2B4E:  MOVLW  01
2B50:  MOVWF  x63
2B52:  MOVLW  02
2B54:  MOVWF  x64
2B56:  CALL   0A04
....................       printf(lcd_putc,"       Purga         "); 
2B5A:  MOVLW  F8
2B5C:  MOVWF  FF6
2B5E:  MOVLW  06
2B60:  MOVWF  FF7
2B62:  CALL   0B12
....................       lcd_gotoxy(6,3); 
2B66:  MOVLW  06
2B68:  MOVWF  x63
2B6A:  MOVLW  03
2B6C:  MOVWF  x64
2B6E:  CALL   0A04
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
2B72:  MOVFF  23,55
2B76:  MOVLW  01
2B78:  MOVWF  56
2B7A:  CALL   0CF8
2B7E:  MOVLW  3A
2B80:  MOVWF  x62
2B82:  CALL   0A66
2B86:  MOVFF  2F,55
2B8A:  MOVLW  01
2B8C:  MOVWF  56
2B8E:  CALL   0CF8
2B92:  MOVLW  17
2B94:  MOVWF  FF6
2B96:  MOVLW  07
2B98:  MOVWF  FF7
2B9A:  MOVLW  08
2B9C:  MOVWF  55
2B9E:  CALL   0B32
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2BA2:  MOVLW  06
2BA4:  ADDWF  21,W
2BA6:  MOVWF  55
2BA8:  MOVWF  x63
2BAA:  MOVLW  04
2BAC:  MOVWF  x64
2BAE:  CALL   0A04
....................       lcd_putc(t[2]); 
2BB2:  MOVFF  39,62
2BB6:  CALL   0A66
....................        
....................       if(unidad2<1) 
2BBA:  BTFSC  21.7
2BBC:  BRA    2BC4
2BBE:  MOVF   21,W
2BC0:  SUBLW  00
2BC2:  BNC   2BC8
....................          unidad2=1; 
2BC4:  MOVLW  01
2BC6:  MOVWF  21
....................       if(unidad2>3) 
2BC8:  BTFSC  21.7
2BCA:  BRA    2BD6
2BCC:  MOVF   21,W
2BCE:  SUBLW  03
2BD0:  BC    2BD6
....................          unidad2=3;    
2BD2:  MOVLW  03
2BD4:  MOVWF  21
....................        
....................       if(UP) 
2BD6:  BSF    F92.5
2BD8:  BTFSS  F80.5
2BDA:  BRA    2C22
....................       { 
....................          if(unidad2==1) 
2BDC:  DECFSZ 21,W
2BDE:  BRA    2BFE
....................          { 
....................             purga_minutos_pro++; 
2BE0:  INCF   23,F
....................             if(purga_minutos_pro>59) 
2BE2:  BTFSC  23.7
2BE4:  BRA    2BEE
2BE6:  MOVF   23,W
2BE8:  SUBLW  3B
2BEA:  BC    2BEE
....................                purga_minutos_pro=0; 
2BEC:  CLRF   23
....................                 
....................             delay_ms(300); 
2BEE:  MOVLW  02
2BF0:  MOVWF  55
2BF2:  MOVLW  96
2BF4:  MOVWF  x68
2BF6:  CALL   0920
2BFA:  DECFSZ 55,F
2BFC:  BRA    2BF2
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2BFE:  MOVF   21,W
2C00:  SUBLW  03
2C02:  BNZ   2C22
....................          { 
....................             purga_segundos_pro++; 
2C04:  INCF   2F,F
....................             if(purga_segundos_pro>59) 
2C06:  BTFSC  2F.7
2C08:  BRA    2C12
2C0A:  MOVF   2F,W
2C0C:  SUBLW  3B
2C0E:  BC    2C12
....................                purga_segundos_pro=0; 
2C10:  CLRF   2F
....................                 
....................             delay_ms(300); 
2C12:  MOVLW  02
2C14:  MOVWF  55
2C16:  MOVLW  96
2C18:  MOVWF  x68
2C1A:  CALL   0920
2C1E:  DECFSZ 55,F
2C20:  BRA    2C16
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2C22:  BSF    F96.0
2C24:  BTFSS  F84.0
2C26:  BRA    2C6A
....................       { 
....................          if(unidad2==1) 
2C28:  DECFSZ 21,W
2C2A:  BRA    2C48
....................          { 
....................             purga_minutos_pro--; 
2C2C:  DECF   23,F
....................             if(purga_minutos_pro<0) 
2C2E:  BTFSC  23.7
2C30:  BRA    2C34
2C32:  BRA    2C38
....................                purga_minutos_pro=59; 
2C34:  MOVLW  3B
2C36:  MOVWF  23
....................                 
....................             delay_ms(300); 
2C38:  MOVLW  02
2C3A:  MOVWF  55
2C3C:  MOVLW  96
2C3E:  MOVWF  x68
2C40:  CALL   0920
2C44:  DECFSZ 55,F
2C46:  BRA    2C3C
....................          } 
....................           
....................          if(unidad2==3) 
2C48:  MOVF   21,W
2C4A:  SUBLW  03
2C4C:  BNZ   2C6A
....................          { 
....................             purga_segundos_pro--; 
2C4E:  DECF   2F,F
....................             if(purga_segundos_pro<0) 
2C50:  BTFSC  2F.7
2C52:  BRA    2C56
2C54:  BRA    2C5A
....................                purga_segundos_pro=59; 
2C56:  MOVLW  3B
2C58:  MOVWF  2F
....................                 
....................             delay_ms(300); 
2C5A:  MOVLW  02
2C5C:  MOVWF  55
2C5E:  MOVLW  96
2C60:  MOVWF  x68
2C62:  CALL   0920
2C66:  DECFSZ 55,F
2C68:  BRA    2C5E
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2C6A:  BSF    F96.1
2C6C:  BTFSS  F84.1
2C6E:  BRA    2CA2
....................       { 
....................          if(unidad2==1) 
2C70:  DECFSZ 21,W
2C72:  BRA    2C7A
....................          { 
....................             unidad2=3; 
2C74:  MOVLW  03
2C76:  MOVWF  21
....................          } 
....................          else 
2C78:  BRA    2C8A
....................          { 
....................             if(unidad2==3) 
2C7A:  MOVF   21,W
2C7C:  SUBLW  03
2C7E:  BNZ   2C86
....................             { 
....................                unidad2=1; 
2C80:  MOVLW  01
2C82:  MOVWF  21
....................             } 
....................             else 
2C84:  BRA    2C8A
....................             { 
....................                unidad2=3; 
2C86:  MOVLW  03
2C88:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
2C8A:  MOVLW  02
2C8C:  MOVWF  55
2C8E:  MOVLW  FA
2C90:  MOVWF  x68
2C92:  CALL   0920
2C96:  DECFSZ 55,F
2C98:  BRA    2C8E
....................          printf(lcd_putc,"\f"); 
2C9A:  MOVLW  0C
2C9C:  MOVWF  x62
2C9E:  CALL   0A66
....................       } 
....................        
....................       if(LEFT) 
2CA2:  BSF    F96.2
2CA4:  BTFSS  F84.2
2CA6:  BRA    2D76
....................       { 
....................          delay_ms(200); 
2CA8:  MOVLW  C8
2CAA:  MOVWF  x68
2CAC:  CALL   0920
....................          printf(lcd_putc,"\f"); 
2CB0:  MOVLW  0C
2CB2:  MOVWF  x62
2CB4:  CALL   0A66
....................          lcd_gotoxy(1,2); 
2CB8:  MOVLW  01
2CBA:  MOVWF  x63
2CBC:  MOVLW  02
2CBE:  MOVWF  x64
2CC0:  CALL   0A04
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2CC4:  MOVLW  20
2CC6:  MOVWF  FF6
2CC8:  MOVLW  07
2CCA:  MOVWF  FF7
2CCC:  CALL   0B12
....................          lcd_gotoxy(1,3); 
2CD0:  MOVLW  01
2CD2:  MOVWF  x63
2CD4:  MOVLW  03
2CD6:  MOVWF  x64
2CD8:  CALL   0A04
....................          printf(lcd_putc,"  Correctamente  "); 
2CDC:  MOVLW  32
2CDE:  MOVWF  FF6
2CE0:  MOVLW  07
2CE2:  MOVWF  FF7
2CE4:  CALL   0B12
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
2CE8:  MOVLW  14
2CEA:  MOVWF  FA9
2CEC:  MOVFF  23,FA8
2CF0:  BCF    FA6.6
2CF2:  BCF    FA6.7
2CF4:  BSF    FA6.2
2CF6:  MOVF   FF2,W
2CF8:  MOVWF  00
2CFA:  BCF    FF2.7
2CFC:  MOVLB  F
2CFE:  MOVLW  55
2D00:  MOVWF  FA7
2D02:  MOVLW  AA
2D04:  MOVWF  FA7
2D06:  BSF    FA6.1
2D08:  BTFSC  FA6.1
2D0A:  BRA    2D08
2D0C:  BCF    FA6.2
2D0E:  MOVF   00,W
2D10:  IORWF  FF2,F
2D12:  MOVLW  15
2D14:  MOVWF  FA9
2D16:  MOVFF  2F,FA8
2D1A:  BCF    FA6.6
2D1C:  BCF    FA6.7
2D1E:  BSF    FA6.2
2D20:  MOVF   FF2,W
2D22:  MOVWF  00
2D24:  BCF    FF2.7
2D26:  MOVLW  55
2D28:  MOVWF  FA7
2D2A:  MOVLW  AA
2D2C:  MOVWF  FA7
2D2E:  BSF    FA6.1
2D30:  BTFSC  FA6.1
2D32:  BRA    2D30
2D34:  BCF    FA6.2
2D36:  MOVF   00,W
2D38:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
2D3A:  MOVFF  23,22
2D3E:  MOVFF  2F,2E
....................          delay_ms(700); 
2D42:  MOVLW  04
2D44:  MOVWF  55
2D46:  MOVLW  AF
2D48:  MOVLB  0
2D4A:  MOVWF  x68
2D4C:  CALL   0920
2D50:  DECFSZ 55,F
2D52:  BRA    2D56
2D54:  BRA    2D5A
2D56:  MOVLB  F
2D58:  BRA    2D46
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2D5A:  MOVLW  1E
2D5C:  MOVWF  x68
2D5E:  CALL   0920
2D62:  MOVLW  01
2D64:  MOVWF  17
2D66:  CLRF   36
2D68:  MOVLW  02
2D6A:  MOVWF  1B
2D6C:  MOVWF  1D
2D6E:  MOVLW  0C
2D70:  MOVWF  x62
2D72:  CALL   0A66
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de Tiempo de Post-Purga 
2D76:  MOVF   17,W
2D78:  SUBLW  07
2D7A:  BTFSS  FD8.2
2D7C:  BRA    2FB6
....................    { 
....................       lcd_gotoxy(1,1); 
2D7E:  MOVLW  01
2D80:  MOVWF  x63
2D82:  MOVWF  x64
2D84:  CALL   0A04
....................       printf(lcd_putc,"     Tiempo  de      "); 
2D88:  MOVLW  44
2D8A:  MOVWF  FF6
2D8C:  MOVLW  07
2D8E:  MOVWF  FF7
2D90:  CALL   0B12
....................       lcd_gotoxy(1,2); 
2D94:  MOVLW  01
2D96:  MOVWF  x63
2D98:  MOVLW  02
2D9A:  MOVWF  x64
2D9C:  CALL   0A04
....................       printf(lcd_putc,"     Post-Purga      "); 
2DA0:  MOVLW  5A
2DA2:  MOVWF  FF6
2DA4:  MOVLW  07
2DA6:  MOVWF  FF7
2DA8:  CALL   0B12
....................       lcd_gotoxy(6,3); 
2DAC:  MOVLW  06
2DAE:  MOVWF  x63
2DB0:  MOVLW  03
2DB2:  MOVWF  x64
2DB4:  CALL   0A04
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
2DB8:  MOVFF  33,55
2DBC:  MOVLW  01
2DBE:  MOVWF  56
2DC0:  CALL   0CF8
2DC4:  MOVLW  3A
2DC6:  MOVWF  x62
2DC8:  CALL   0A66
2DCC:  MOVFF  31,55
2DD0:  MOVLW  01
2DD2:  MOVWF  56
2DD4:  CALL   0CF8
2DD8:  MOVLW  79
2DDA:  MOVWF  FF6
2DDC:  MOVLW  07
2DDE:  MOVWF  FF7
2DE0:  MOVLW  08
2DE2:  MOVWF  55
2DE4:  CALL   0B32
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2DE8:  MOVLW  06
2DEA:  ADDWF  21,W
2DEC:  MOVWF  55
2DEE:  MOVWF  x63
2DF0:  MOVLW  04
2DF2:  MOVWF  x64
2DF4:  CALL   0A04
....................       lcd_putc(t[2]); 
2DF8:  MOVFF  39,62
2DFC:  CALL   0A66
....................       if(unidad2<1) 
2E00:  BTFSC  21.7
2E02:  BRA    2E0A
2E04:  MOVF   21,W
2E06:  SUBLW  00
2E08:  BNC   2E0E
....................          unidad2=1; 
2E0A:  MOVLW  01
2E0C:  MOVWF  21
....................       if(unidad2>3) 
2E0E:  BTFSC  21.7
2E10:  BRA    2E1C
2E12:  MOVF   21,W
2E14:  SUBLW  03
2E16:  BC    2E1C
....................          unidad2=3;    
2E18:  MOVLW  03
2E1A:  MOVWF  21
....................        
....................       if(UP) 
2E1C:  BSF    F92.5
2E1E:  BTFSS  F80.5
2E20:  BRA    2E68
....................       { 
....................          if(unidad2==1) 
2E22:  DECFSZ 21,W
2E24:  BRA    2E44
....................          { 
....................             ppurga_minutos_pro++; 
2E26:  INCF   33,F
....................             if(ppurga_minutos_pro>59) 
2E28:  BTFSC  33.7
2E2A:  BRA    2E34
2E2C:  MOVF   33,W
2E2E:  SUBLW  3B
2E30:  BC    2E34
....................                ppurga_minutos_pro=0; 
2E32:  CLRF   33
....................                 
....................             delay_ms(300); 
2E34:  MOVLW  02
2E36:  MOVWF  55
2E38:  MOVLW  96
2E3A:  MOVWF  x68
2E3C:  CALL   0920
2E40:  DECFSZ 55,F
2E42:  BRA    2E38
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2E44:  MOVF   21,W
2E46:  SUBLW  03
2E48:  BNZ   2E68
....................          { 
....................             ppurga_segundos_pro++; 
2E4A:  INCF   31,F
....................             if(ppurga_segundos_pro>59) 
2E4C:  BTFSC  31.7
2E4E:  BRA    2E58
2E50:  MOVF   31,W
2E52:  SUBLW  3B
2E54:  BC    2E58
....................                ppurga_segundos_pro=0; 
2E56:  CLRF   31
....................                 
....................             delay_ms(300); 
2E58:  MOVLW  02
2E5A:  MOVWF  55
2E5C:  MOVLW  96
2E5E:  MOVWF  x68
2E60:  CALL   0920
2E64:  DECFSZ 55,F
2E66:  BRA    2E5C
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2E68:  BSF    F96.0
2E6A:  BTFSS  F84.0
2E6C:  BRA    2EB0
....................       { 
....................          if(unidad2==1) 
2E6E:  DECFSZ 21,W
2E70:  BRA    2E8E
....................          { 
....................             ppurga_minutos_pro--; 
2E72:  DECF   33,F
....................             if(ppurga_minutos_pro<0) 
2E74:  BTFSC  33.7
2E76:  BRA    2E7A
2E78:  BRA    2E7E
....................                ppurga_minutos_pro=59; 
2E7A:  MOVLW  3B
2E7C:  MOVWF  33
....................                 
....................             delay_ms(300); 
2E7E:  MOVLW  02
2E80:  MOVWF  55
2E82:  MOVLW  96
2E84:  MOVWF  x68
2E86:  CALL   0920
2E8A:  DECFSZ 55,F
2E8C:  BRA    2E82
....................          } 
....................           
....................          if(unidad2==3) 
2E8E:  MOVF   21,W
2E90:  SUBLW  03
2E92:  BNZ   2EB0
....................          { 
....................             ppurga_segundos_pro--; 
2E94:  DECF   31,F
....................             if(ppurga_segundos_pro<0) 
2E96:  BTFSC  31.7
2E98:  BRA    2E9C
2E9A:  BRA    2EA0
....................                ppurga_segundos_pro=59; 
2E9C:  MOVLW  3B
2E9E:  MOVWF  31
....................                 
....................             delay_ms(300); 
2EA0:  MOVLW  02
2EA2:  MOVWF  55
2EA4:  MOVLW  96
2EA6:  MOVWF  x68
2EA8:  CALL   0920
2EAC:  DECFSZ 55,F
2EAE:  BRA    2EA4
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2EB0:  BSF    F96.1
2EB2:  BTFSS  F84.1
2EB4:  BRA    2EE2
....................       { 
....................          if(unidad2==1) 
2EB6:  DECFSZ 21,W
2EB8:  BRA    2EC0
....................          { 
....................             unidad2=3; 
2EBA:  MOVLW  03
2EBC:  MOVWF  21
....................          } 
....................          else 
2EBE:  BRA    2ECA
....................          { 
....................             if(unidad2==3) 
2EC0:  MOVF   21,W
2EC2:  SUBLW  03
2EC4:  BNZ   2ECA
....................             { 
....................                unidad2=1; 
2EC6:  MOVLW  01
2EC8:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
2ECA:  MOVLW  02
2ECC:  MOVWF  55
2ECE:  MOVLW  FA
2ED0:  MOVWF  x68
2ED2:  CALL   0920
2ED6:  DECFSZ 55,F
2ED8:  BRA    2ECE
....................          printf(lcd_putc,"\f"); 
2EDA:  MOVLW  0C
2EDC:  MOVWF  x62
2EDE:  CALL   0A66
....................       } 
....................        
....................       if(LEFT) 
2EE2:  BSF    F96.2
2EE4:  BTFSS  F84.2
2EE6:  BRA    2FB6
....................       { 
....................          delay_ms(200); 
2EE8:  MOVLW  C8
2EEA:  MOVWF  x68
2EEC:  CALL   0920
....................          printf(lcd_putc,"\f"); 
2EF0:  MOVLW  0C
2EF2:  MOVWF  x62
2EF4:  CALL   0A66
....................          lcd_gotoxy(1,2); 
2EF8:  MOVLW  01
2EFA:  MOVWF  x63
2EFC:  MOVLW  02
2EFE:  MOVWF  x64
2F00:  CALL   0A04
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2F04:  MOVLW  82
2F06:  MOVWF  FF6
2F08:  MOVLW  07
2F0A:  MOVWF  FF7
2F0C:  CALL   0B12
....................          lcd_gotoxy(1,3); 
2F10:  MOVLW  01
2F12:  MOVWF  x63
2F14:  MOVLW  03
2F16:  MOVWF  x64
2F18:  CALL   0A04
....................          printf(lcd_putc,"  Correctamente  "); 
2F1C:  MOVLW  94
2F1E:  MOVWF  FF6
2F20:  MOVLW  07
2F22:  MOVWF  FF7
2F24:  CALL   0B12
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
2F28:  MOVLW  16
2F2A:  MOVWF  FA9
2F2C:  MOVFF  33,FA8
2F30:  BCF    FA6.6
2F32:  BCF    FA6.7
2F34:  BSF    FA6.2
2F36:  MOVF   FF2,W
2F38:  MOVWF  00
2F3A:  BCF    FF2.7
2F3C:  MOVLB  F
2F3E:  MOVLW  55
2F40:  MOVWF  FA7
2F42:  MOVLW  AA
2F44:  MOVWF  FA7
2F46:  BSF    FA6.1
2F48:  BTFSC  FA6.1
2F4A:  BRA    2F48
2F4C:  BCF    FA6.2
2F4E:  MOVF   00,W
2F50:  IORWF  FF2,F
2F52:  MOVLW  17
2F54:  MOVWF  FA9
2F56:  MOVFF  31,FA8
2F5A:  BCF    FA6.6
2F5C:  BCF    FA6.7
2F5E:  BSF    FA6.2
2F60:  MOVF   FF2,W
2F62:  MOVWF  00
2F64:  BCF    FF2.7
2F66:  MOVLW  55
2F68:  MOVWF  FA7
2F6A:  MOVLW  AA
2F6C:  MOVWF  FA7
2F6E:  BSF    FA6.1
2F70:  BTFSC  FA6.1
2F72:  BRA    2F70
2F74:  BCF    FA6.2
2F76:  MOVF   00,W
2F78:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
2F7A:  MOVFF  33,32
2F7E:  MOVFF  31,30
....................          delay_ms(700); 
2F82:  MOVLW  04
2F84:  MOVWF  55
2F86:  MOVLW  AF
2F88:  MOVLB  0
2F8A:  MOVWF  x68
2F8C:  CALL   0920
2F90:  DECFSZ 55,F
2F92:  BRA    2F96
2F94:  BRA    2F9A
2F96:  MOVLB  F
2F98:  BRA    2F86
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2F9A:  MOVLW  1E
2F9C:  MOVWF  x68
2F9E:  CALL   0920
2FA2:  MOVLW  01
2FA4:  MOVWF  17
2FA6:  CLRF   36
2FA8:  MOVLW  02
2FAA:  MOVWF  1B
2FAC:  MOVWF  1D
2FAE:  MOVLW  0C
2FB0:  MOVWF  x62
2FB2:  CALL   0A66
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
2FB6:  MOVF   17,W
2FB8:  SUBLW  14
2FBA:  BTFSS  FD8.2
2FBC:  BRA    31F6
....................    { 
....................       if(Lectura2==1) 
2FBE:  BTFSS  35.6
2FC0:  BRA    3022
....................       { 
....................       lcd_gotoxy(1,1);                      
2FC2:  MOVLW  01
2FC4:  MOVWF  x63
2FC6:  MOVWF  x64
2FC8:  CALL   0A04
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
2FCC:  MOVLW  A6
2FCE:  MOVWF  FF6
2FD0:  MOVLW  07
2FD2:  MOVWF  FF7
2FD4:  CALL   0B12
....................       lcd_gotoxy(1,2); 
2FD8:  MOVLW  01
2FDA:  MOVWF  x63
2FDC:  MOVLW  02
2FDE:  MOVWF  x64
2FE0:  CALL   0A04
....................       //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................       printf(lcd_putc,"Ext= ---"); 
2FE4:  MOVLW  B0
2FE6:  MOVWF  FF6
2FE8:  MOVLW  07
2FEA:  MOVWF  FF7
2FEC:  CALL   0B12
....................       lcd_gotoxy(1,3); 
2FF0:  MOVLW  01
2FF2:  MOVWF  x63
2FF4:  MOVLW  03
2FF6:  MOVWF  x64
2FF8:  CALL   0A04
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
2FFC:  MOVLW  BA
2FFE:  MOVWF  FF6
3000:  MOVLW  07
3002:  MOVWF  FF7
3004:  CALL   0B12
....................       lcd_gotoxy(11,2); 
3008:  MOVLW  0B
300A:  MOVWF  x63
300C:  MOVLW  02
300E:  MOVWF  x64
3010:  CALL   0A04
....................       printf(lcd_putc,"Flujo=--- ");   
3014:  MOVLW  CA
3016:  MOVWF  FF6
3018:  MOVLW  07
301A:  MOVWF  FF7
301C:  CALL   0B12
....................  
....................       Lectura2=0; 
3020:  BCF    35.6
....................       } 
....................        
....................       if(flag_filtro==1) 
3022:  BTFSS  35.1
3024:  BRA    3090
....................       { 
....................          if(horas>=setpoint) 
3026:  CLRF   57
3028:  MOVFF  2C,56
302C:  BTFSC  56.7
302E:  DECF   57,F
3030:  CALL   0ABA
3034:  MOVFF  45,5C
3038:  MOVFF  44,5B
303C:  MOVFF  43,5A
3040:  MOVFF  42,59
3044:  MOVFF  03,60
3048:  MOVFF  02,5F
304C:  MOVFF  01,5E
3050:  MOVFF  00,5D
3054:  CALL   108C
3058:  BC    305C
305A:  BNZ   3076
....................          { 
....................             lcd_gotoxy(10,1);                      
305C:  MOVLW  0A
305E:  MOVWF  x63
3060:  MOVLW  01
3062:  MOVWF  x64
3064:  CALL   0A04
....................             printf(lcd_putc,"Filtro:CAM"); 
3068:  MOVLW  D6
306A:  MOVWF  FF6
306C:  MOVLW  07
306E:  MOVWF  FF7
3070:  CALL   0B12
....................          } 
....................          else 
3074:  BRA    308E
....................          { 
....................             lcd_gotoxy(10,1);                      
3076:  MOVLW  0A
3078:  MOVWF  x63
307A:  MOVLW  01
307C:  MOVWF  x64
307E:  CALL   0A04
....................             printf(lcd_putc,"Filtro:OK "); 
3082:  MOVLW  E2
3084:  MOVWF  FF6
3086:  MOVLW  07
3088:  MOVWF  FF7
308A:  CALL   0B12
....................          } 
....................       } 
....................       else 
308E:  BRA    30A8
....................       { 
....................          lcd_gotoxy(10,1);                      
3090:  MOVLW  0A
3092:  MOVWF  x63
3094:  MOVLW  01
3096:  MOVWF  x64
3098:  CALL   0A04
....................          printf(lcd_putc,"Filtro:---"); 
309C:  MOVLW  EE
309E:  MOVWF  FF6
30A0:  MOVLW  07
30A2:  MOVWF  FF7
30A4:  CALL   0B12
....................       } 
....................           
....................             
....................       if(estadofl==1) 
30A8:  BTFSS  34.0
30AA:  BRA    30CA
....................       { 
....................          Luz_Blanca_on; 
30AC:  BSF    F8A.4
30AE:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
30B0:  MOVLW  01
30B2:  MOVWF  x63
30B4:  MOVLW  04
30B6:  MOVWF  x64
30B8:  CALL   0A04
....................          printf(lcd_putc,"Luz:ON "); 
30BC:  MOVLW  FA
30BE:  MOVWF  FF6
30C0:  MOVLW  07
30C2:  MOVWF  FF7
30C4:  CALL   0B12
....................       } 
....................       else 
30C8:  BRA    30E6
....................       { 
....................          Luz_Blanca_off; 
30CA:  BCF    F8A.4
30CC:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
30CE:  MOVLW  01
30D0:  MOVWF  x63
30D2:  MOVLW  04
30D4:  MOVWF  x64
30D6:  CALL   0A04
....................          printf(lcd_putc,"Luz:OFF "); 
30DA:  MOVLW  02
30DC:  MOVWF  FF6
30DE:  MOVLW  08
30E0:  MOVWF  FF7
30E2:  CALL   0B12
....................       } 
....................        
....................       if(estadomv==1) 
30E6:  BTFSS  34.1
30E8:  BRA    3104
....................       { 
....................          lcd_gotoxy(10,4); 
30EA:  MOVLW  0A
30EC:  MOVWF  x63
30EE:  MOVLW  04
30F0:  MOVWF  x64
30F2:  CALL   0A04
....................          printf(lcd_putc,"Motor:ON "); 
30F6:  MOVLW  0C
30F8:  MOVWF  FF6
30FA:  MOVLW  08
30FC:  MOVWF  FF7
30FE:  CALL   0B12
....................       } 
....................       else 
3102:  BRA    3128
....................       { 
....................          if(iniciodamper==1) 
3104:  BTFSS  4A.0
3106:  BRA    3110
....................          { 
....................             Motor_off;    
3108:  BCF    F8A.5
310A:  BCF    F93.5
....................             Rele_off; 
310C:  BCF    F8A.6
310E:  BCF    F93.6
....................          } 
....................          lcd_gotoxy(10,4); 
3110:  MOVLW  0A
3112:  MOVWF  x63
3114:  MOVLW  04
3116:  MOVWF  x64
3118:  CALL   0A04
....................          printf(lcd_putc,"Motor:OFF ");  
311C:  MOVLW  16
311E:  MOVWF  FF6
3120:  MOVLW  08
3122:  MOVWF  FF7
3124:  CALL   0B12
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
3128:  BSF    F96.0
312A:  BTFSS  F84.0
312C:  BRA    3140
....................       {  if(Flanco == 0)  
312E:  BTFSC  34.3
3130:  BRA    313E
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
3132:  BSF    34.3
3134:  MOVLW  C8
3136:  MOVWF  x68
3138:  CALL   0920
313C:  BTG    34.0
....................          else 
313E:  BRA    3142
....................             {Flanco = 0;} 
3140:  BCF    34.3
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
3142:  BSF    F96.2
3144:  BTFSS  F84.2
3146:  BRA    3194
....................       {   
....................          if(Flanco2 == 0) 
3148:  BTFSC  34.5
314A:  BRA    3192
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
314C:  BSF    34.5
314E:  MOVLW  C8
3150:  MOVWF  x68
3152:  CALL   0920
3156:  BTG    34.1
....................             if(estadomv==1) 
3158:  BTFSS  34.1
315A:  BRA    317E
....................             { 
....................                if(Scrubber==5) 
315C:  MOVF   53,W
315E:  SUBLW  05
3160:  BNZ   3168
....................                   Rele_on; 
3162:  BSF    F8A.6
3164:  BCF    F93.6
....................                else 
3166:  BRA    316C
....................                   Rele_off; 
3168:  BCF    F8A.6
316A:  BCF    F93.6
....................                Motor_on; 
316C:  BSF    F8A.5
316E:  BCF    F93.5
....................                delay_ms(150); 
3170:  MOVLW  96
3172:  MOVWF  x68
3174:  CALL   0920
....................                lcd_init(); 
3178:  CALL   09AC
....................             } 
....................             else 
317C:  BRA    3192
....................             { 
....................                Motor_off; 
317E:  BCF    F8A.5
3180:  BCF    F93.5
....................                Rele_off; 
3182:  BCF    F8A.6
3184:  BCF    F93.6
....................                delay_ms(150); 
3186:  MOVLW  96
3188:  MOVWF  x68
318A:  CALL   0920
....................                lcd_init(); 
318E:  CALL   09AC
....................             } 
....................          } 
....................       } 
....................       else 
3192:  BRA    3196
....................       { 
....................          Flanco2 = 0; 
3194:  BCF    34.5
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
3196:  BSF    F92.5
3198:  BTFSS  F80.5
319A:  BRA    31CA
....................       {  if(Flanco1 == 0)  
319C:  BTFSC  34.4
319E:  BRA    31C8
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
31A0:  MOVLW  02
31A2:  MOVWF  55
31A4:  MOVLW  FA
31A6:  MOVWF  x68
31A8:  CALL   0920
31AC:  DECFSZ 55,F
31AE:  BRA    31A4
31B0:  MOVLW  0C
31B2:  MOVWF  x62
31B4:  CALL   0A66
31B8:  MOVLW  01
31BA:  MOVWF  17
31BC:  CLRF   36
31BE:  MOVLW  02
31C0:  MOVWF  1B
31C2:  MOVWF  1D
31C4:  MOVLW  0B
31C6:  MOVWF  1A
....................          else 
31C8:  BRA    31CC
....................             {Flanco1 = 0;}    
31CA:  BCF    34.4
....................              
....................        if(RIGHT)// Si oprime Derecha 
31CC:  BSF    F96.1
31CE:  BTFSS  F84.1
31D0:  BRA    31F4
....................       {  if(Flanco3 == 0)  
31D2:  BTFSC  34.6
31D4:  BRA    31F2
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
31D6:  MOVLW  02
31D8:  MOVWF  55
31DA:  MOVLW  FA
31DC:  MOVWF  x68
31DE:  CALL   0920
31E2:  DECFSZ 55,F
31E4:  BRA    31DA
31E6:  MOVLW  0C
31E8:  MOVWF  x62
31EA:  CALL   0A66
31EE:  MOVLW  28
31F0:  MOVWF  17
....................          else 
31F2:  BRA    31F6
....................             {Flanco3 = 0;}     
31F4:  BCF    34.6
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
31F6:  MOVF   17,W
31F8:  SUBLW  1E
31FA:  BTFSS  FD8.2
31FC:  BRA    3394
....................       lcd_gotoxy(1,1); 
31FE:  MOVLW  01
3200:  MOVWF  x63
3202:  MOVWF  x64
3204:  CALL   0A04
....................       printf(lcd_putc,"    !Post-Purga!    "); 
3208:  MOVLW  22
320A:  MOVWF  FF6
320C:  MOVLW  08
320E:  MOVWF  FF7
3210:  CALL   0B12
....................       lcd_gotoxy(1,2); 
3214:  MOVLW  01
3216:  MOVWF  x63
3218:  MOVLW  02
321A:  MOVWF  x64
321C:  CALL   0A04
....................       printf(lcd_putc,"                    "); 
3220:  MOVLW  38
3222:  MOVWF  FF6
3224:  MOVLW  08
3226:  MOVWF  FF7
3228:  CALL   0B12
....................       lcd_gotoxy(1,3); 
322C:  MOVLW  01
322E:  MOVWF  x63
3230:  MOVLW  03
3232:  MOVWF  x64
3234:  CALL   0A04
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
3238:  MOVLW  4E
323A:  MOVWF  FF6
323C:  MOVLW  08
323E:  MOVWF  FF7
3240:  MOVLW  06
3242:  MOVWF  55
3244:  CALL   0B32
3248:  MOVFF  32,55
324C:  MOVLW  01
324E:  MOVWF  56
3250:  CALL   0CF8
3254:  MOVLW  3A
3256:  MOVWF  x62
3258:  CALL   0A66
325C:  MOVFF  30,55
3260:  MOVLW  01
3262:  MOVWF  56
3264:  CALL   0CF8
3268:  MOVLW  20
326A:  MOVWF  x62
326C:  CALL   0A66
3270:  MOVLW  20
3272:  MOVWF  x62
3274:  CALL   0A66
....................            
....................       if(Lectura==1) 
3278:  BTFSS  35.5
327A:  BRA    3392
....................       { 
....................          Luz_Blanca_off; 
327C:  BCF    F8A.4
327E:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
3280:  MOVLW  02
3282:  MOVWF  55
3284:  GOTO   13DE
3288:  MOVFF  00,55
328C:  MOVFF  01,56
3290:  MOVFF  02,57
3294:  MOVFF  03,58
3298:  MOVFF  03,5C
329C:  MOVFF  02,5B
32A0:  MOVFF  01,5A
32A4:  MOVFF  00,59
32A8:  CLRF   x60
32AA:  CLRF   5F
32AC:  MOVLW  40
32AE:  MOVWF  5E
32B0:  MOVLW  81
32B2:  MOVWF  5D
32B4:  CALL   108C
32B8:  BNC   3390
32BA:  MOVF   30,F
32BC:  BNZ   3390
32BE:  MOVF   32,F
32C0:  BNZ   3390
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
32C2:  MOVLW  46
32C4:  MOVWF  FA9
32C6:  MOVFF  2A,FA8
32CA:  BCF    FA6.6
32CC:  BCF    FA6.7
32CE:  BSF    FA6.2
32D0:  MOVF   FF2,W
32D2:  MOVWF  00
32D4:  BCF    FF2.7
32D6:  MOVLB  F
32D8:  MOVLW  55
32DA:  MOVWF  FA7
32DC:  MOVLW  AA
32DE:  MOVWF  FA7
32E0:  BSF    FA6.1
32E2:  BTFSC  FA6.1
32E4:  BRA    32E2
32E6:  BCF    FA6.2
32E8:  MOVF   00,W
32EA:  IORWF  FF2,F
32EC:  MOVLW  47
32EE:  MOVWF  FA9
32F0:  MOVFF  2B,FA8
32F4:  BCF    FA6.6
32F6:  BCF    FA6.7
32F8:  BSF    FA6.2
32FA:  MOVF   FF2,W
32FC:  MOVWF  00
32FE:  BCF    FF2.7
3300:  MOVLW  55
3302:  MOVWF  FA7
3304:  MOVLW  AA
3306:  MOVWF  FA7
3308:  BSF    FA6.1
330A:  BTFSC  FA6.1
330C:  BRA    330A
330E:  BCF    FA6.2
3310:  MOVF   00,W
3312:  IORWF  FF2,F
3314:  MOVLW  48
3316:  MOVWF  FA9
3318:  MOVFF  2C,FA8
331C:  BCF    FA6.6
331E:  BCF    FA6.7
3320:  BSF    FA6.2
3322:  MOVF   FF2,W
3324:  MOVWF  00
3326:  BCF    FF2.7
3328:  MOVLW  55
332A:  MOVWF  FA7
332C:  MOVLW  AA
332E:  MOVWF  FA7
3330:  BSF    FA6.1
3332:  BTFSC  FA6.1
3334:  BRA    3332
3336:  BCF    FA6.2
3338:  MOVF   00,W
333A:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
333C:  MOVLW  0C
333E:  MOVLB  0
3340:  MOVWF  x62
3342:  CALL   0A66
....................             lcd_gotoxy(1,2); 
3346:  MOVLW  01
3348:  MOVWF  x63
334A:  MOVLW  02
334C:  MOVWF  x64
334E:  CALL   0A04
....................             printf(lcd_putc,"     Proceso      "); 
3352:  MOVLW  60
3354:  MOVWF  FF6
3356:  MOVLW  08
3358:  MOVWF  FF7
335A:  CALL   0B12
....................             lcd_gotoxy(1,3); 
335E:  MOVLW  01
3360:  MOVWF  x63
3362:  MOVLW  03
3364:  MOVWF  x64
3366:  CALL   0A04
....................             printf(lcd_putc,"    Finalizado    "); 
336A:  MOVLW  74
336C:  MOVWF  FF6
336E:  MOVLW  08
3370:  MOVWF  FF7
3372:  CALL   0B12
....................             delay_ms(2000); 
3376:  MOVLW  08
3378:  MOVWF  55
337A:  MOVLW  FA
337C:  MOVWF  x68
337E:  CALL   0920
3382:  DECFSZ 55,F
3384:  BRA    337A
....................             printf(lcd_putc,"\f"); 
3386:  MOVLW  0C
3388:  MOVWF  x62
338A:  CALL   0A66
....................             reset_cpu(); 
338E:  RESET
....................          } 
....................          Lectura=0; 
3390:  BCF    35.5
....................       } 
....................        
....................    } 
3392:  BRA    31F6
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
3394:  MOVF   17,W
3396:  SUBLW  28
3398:  BNZ   345A
....................    lcd_gotoxy(1,1); 
339A:  MOVLW  01
339C:  MOVWF  x63
339E:  MOVWF  x64
33A0:  CALL   0A04
....................    printf(lcd_putc,"   Desea apagar     "); 
33A4:  MOVLW  88
33A6:  MOVWF  FF6
33A8:  MOVLW  08
33AA:  MOVWF  FF7
33AC:  CALL   0B12
....................    lcd_gotoxy(1,2); 
33B0:  MOVLW  01
33B2:  MOVWF  x63
33B4:  MOVLW  02
33B6:  MOVWF  x64
33B8:  CALL   0A04
....................    printf(lcd_putc,"     la cabina      "); 
33BC:  MOVLW  9E
33BE:  MOVWF  FF6
33C0:  MOVLW  08
33C2:  MOVWF  FF7
33C4:  CALL   0B12
....................    lcd_gotoxy(1,3); 
33C8:  MOVLW  01
33CA:  MOVWF  x63
33CC:  MOVLW  03
33CE:  MOVWF  x64
33D0:  CALL   0A04
....................    printf(lcd_putc,"   > Aceptar        "); 
33D4:  MOVLW  B4
33D6:  MOVWF  FF6
33D8:  MOVLW  08
33DA:  MOVWF  FF7
33DC:  CALL   0B12
....................    lcd_gotoxy(1,4); 
33E0:  MOVLW  01
33E2:  MOVWF  x63
33E4:  MOVLW  04
33E6:  MOVWF  x64
33E8:  CALL   0A04
....................    printf(lcd_putc,"   < Cancelar       "); 
33EC:  MOVLW  CA
33EE:  MOVWF  FF6
33F0:  MOVLW  08
33F2:  MOVWF  FF7
33F4:  CALL   0B12
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
33F8:  BSF    F96.1
33FA:  BTFSS  F84.1
33FC:  BRA    3420
....................       {  if(Flanco1 == 0)  
33FE:  BTFSC  34.4
3400:  BRA    341E
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
3402:  BSF    34.4
3404:  MOVLW  1E
3406:  MOVWF  17
3408:  MOVFF  20,55
340C:  CALL   0B02
3410:  BCF    F8A.7
3412:  BCF    F93.7
3414:  MOVLW  0C
3416:  MOVWF  x62
3418:  CALL   0A66
341C:  BSF    4A.2
....................             }} 
....................          else 
341E:  BRA    3422
....................             {Flanco1 = 0;}    
3420:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
3422:  BSF    F96.2
3424:  BTFSS  F84.2
3426:  BRA    3458
....................       {  if(Flanco3 == 0)  
3428:  BTFSC  34.6
342A:  BRA    3456
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
342C:  BSF    34.6
342E:  MOVLW  14
3430:  MOVWF  17
3432:  CLRF   36
3434:  MOVLW  02
3436:  MOVWF  1B
3438:  MOVWF  1D
343A:  MOVLW  0B
343C:  MOVWF  1A
343E:  MOVLW  02
3440:  MOVWF  55
3442:  MOVLW  FA
3444:  MOVWF  x68
3446:  CALL   0920
344A:  DECFSZ 55,F
344C:  BRA    3442
344E:  MOVLW  0C
3450:  MOVWF  x62
3452:  CALL   0A66
....................          else 
3456:  BRA    345A
....................             {Flanco3 = 0;}     
3458:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
345A:  MOVF   17,W
345C:  SUBLW  32
345E:  BNZ   3532
....................    lcd_gotoxy(1,1); 
3460:  MOVLW  01
3462:  MOVWF  x63
3464:  MOVWF  x64
3466:  CALL   0A04
....................    printf(lcd_putc,"      !Purga!       "); 
346A:  MOVLW  E0
346C:  MOVWF  FF6
346E:  MOVLW  08
3470:  MOVWF  FF7
3472:  CALL   0B12
....................    lcd_gotoxy(1,2); 
3476:  MOVLW  01
3478:  MOVWF  x63
347A:  MOVLW  02
347C:  MOVWF  x64
347E:  CALL   0A04
....................    printf(lcd_putc,"                    "); 
3482:  MOVLW  F6
3484:  MOVWF  FF6
3486:  MOVLW  08
3488:  MOVWF  FF7
348A:  CALL   0B12
....................    lcd_gotoxy(1,3); 
348E:  MOVLW  01
3490:  MOVWF  x63
3492:  MOVLW  03
3494:  MOVWF  x64
3496:  CALL   0A04
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
349A:  MOVLW  0C
349C:  MOVWF  FF6
349E:  MOVLW  09
34A0:  MOVWF  FF7
34A2:  MOVLW  06
34A4:  MOVWF  55
34A6:  CALL   0B32
34AA:  MOVFF  22,55
34AE:  MOVLW  01
34B0:  MOVWF  56
34B2:  CALL   0CF8
34B6:  MOVLW  3A
34B8:  MOVWF  x62
34BA:  CALL   0A66
34BE:  MOVFF  2E,55
34C2:  MOVLW  01
34C4:  MOVWF  56
34C6:  CALL   0CF8
34CA:  MOVLW  20
34CC:  MOVWF  x62
34CE:  CALL   0A66
34D2:  MOVLW  20
34D4:  MOVWF  x62
34D6:  CALL   0A66
34DA:  MOVLW  20
34DC:  MOVWF  x62
34DE:  CALL   0A66
....................        
....................    Motor_on; 
34E2:  BSF    F8A.5
34E4:  BCF    F93.5
....................    if(Scrubber==5) 
34E6:  MOVF   53,W
34E8:  SUBLW  05
34EA:  BNZ   34F2
....................       Rele_on; 
34EC:  BSF    F8A.6
34EE:  BCF    F93.6
....................    else 
34F0:  BRA    34F6
....................       Rele_off; 
34F2:  BCF    F8A.6
34F4:  BCF    F93.6
....................    Luz_Blanca_off; 
34F6:  BCF    F8A.4
34F8:  BCF    F93.4
....................        
....................    if(LEFT) 
34FA:  BSF    F96.2
34FC:  BTFSS  F84.2
34FE:  BRA    3532
....................    { 
....................       tiempo_purga=0;Motor_on;Luz_Blanca_on;estadomv=1;estadofl=1;Menu=20;delay_ms(1000); 
3500:  BCF    4A.1
3502:  BSF    F8A.5
3504:  BCF    F93.5
3506:  BSF    F8A.4
3508:  BCF    F93.4
350A:  BSF    34.1
350C:  BSF    34.0
350E:  MOVLW  14
3510:  MOVWF  17
3512:  MOVLW  04
3514:  MOVWF  55
3516:  MOVLW  FA
3518:  MOVWF  x68
351A:  CALL   0920
351E:  DECFSZ 55,F
3520:  BRA    3516
....................       if(Scrubber==5) 
3522:  MOVF   53,W
3524:  SUBLW  05
3526:  BNZ   352E
....................          Rele_on; 
3528:  BSF    F8A.6
352A:  BCF    F93.6
....................       else 
352C:  BRA    3532
....................          Rele_off; 
352E:  BCF    F8A.6
3530:  BCF    F93.6
....................    } 
....................        
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=20) 
3532:  BTFSC  2D.7
3534:  BRA    3542
3536:  MOVF   2D,W
3538:  SUBLW  13
353A:  BC    3542
....................    { 
....................       lcd_init(); 
353C:  CALL   09AC
....................       tiemporeset=0; 
3540:  CLRF   2D
....................    }  
....................  
....................    if(ModoSleep==1) 
3542:  BTFSS  35.3
3544:  BRA    354E
....................       {intensidadpantalla(0);sleep();} 
3546:  CLRF   55
3548:  CALL   0B02
354C:  SLEEP 
....................  
....................    if(Menu!=0 || Menu!=30) 
354E:  MOVF   17,F
3550:  BNZ   3558
3552:  MOVF   17,W
3554:  SUBLW  1E
3556:  BZ    35CE
....................    { 
....................       if(Lectura==1) 
3558:  BTFSS  35.5
355A:  BRA    35CA
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
355C:  CLRF   57
355E:  MOVFF  2C,56
3562:  BTFSC  56.7
3564:  DECF   57,F
3566:  CALL   0ABA
356A:  MOVFF  45,5C
356E:  MOVFF  44,5B
3572:  MOVFF  43,5A
3576:  MOVFF  42,59
357A:  MOVFF  03,60
357E:  MOVFF  02,5F
3582:  MOVFF  01,5E
3586:  MOVFF  00,5D
358A:  CALL   108C
358E:  BC    3592
3590:  BNZ   35BE
3592:  MOVF   17,W
3594:  SUBLW  14
3596:  BNZ   35BE
....................          { 
....................              if(estadoalarma==1) 
3598:  BTFSS  34.2
359A:  BRA    35A2
....................              { 
....................                 Alarma_on; 
359C:  BSF    F8A.7
359E:  BCF    F93.7
....................              } 
....................              else 
35A0:  BRA    35A6
....................              { 
....................                 Alarma_off; 
35A2:  BCF    F8A.7
35A4:  BCF    F93.7
....................              } 
....................              estadopantalla=!estadopantalla; 
35A6:  BTG    35.2
....................              if(estadopantalla==1) 
35A8:  BTFSS  35.2
35AA:  BRA    35B6
....................              {intensidadpantalla(contraste);} 
35AC:  MOVFF  20,55
35B0:  CALL   0B02
....................              else 
35B4:  BRA    35BC
....................              {intensidadpantalla(0);} 
35B6:  CLRF   55
35B8:  CALL   0B02
....................          } 
....................          else 
35BC:  BRA    35CA
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
35BE:  MOVFF  20,55
35C2:  CALL   0B02
35C6:  BCF    F8A.7
35C8:  BCF    F93.7
....................          } 
....................       } 
....................       Lectura=0; 
35CA:  BCF    35.5
....................    }    
....................    else 
35CC:  BRA    35DA
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
35CE:  MOVFF  20,55
35D2:  CALL   0B02
35D6:  BCF    F8A.7
35D8:  BCF    F93.7
....................    } 
....................  
....................    }        
35DA:  GOTO   17B8
.................... } 
....................  
35DE:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
