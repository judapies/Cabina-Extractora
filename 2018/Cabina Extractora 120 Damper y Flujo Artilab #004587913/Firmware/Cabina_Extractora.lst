CCS PCH C Compiler, Version 4.104, 5967               06-nov.-18 09:12

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2018\Cabina Extractora 120 Damper y Flujo Artilab #0045878XX\Firmware\Cabina_Extractora.lst

               ROM used: 23442 bytes (72%)
                         Largest free fragment is 9322
               RAM used: 216 (11%) at main() level
                         244 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   278E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   01E8
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////              JUDAPIES-dielecingenieria.com                         //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#define SIMU 1 
.................... #ifdef SIMU 
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=4000000) 
.................... #else 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0AC0:  CLRF   FEA
0AC2:  MOVLW  EB
0AC4:  MOVWF  FE9
0AC6:  MOVF   FEF,W
0AC8:  BZ    0AE6
0ACA:  MOVLW  0F
0ACC:  MOVWF  01
0ACE:  CLRF   00
0AD0:  DECFSZ 00,F
0AD2:  BRA    0AD0
0AD4:  DECFSZ 01,F
0AD6:  BRA    0ACE
0AD8:  MOVLW  8F
0ADA:  MOVWF  00
0ADC:  DECFSZ 00,F
0ADE:  BRA    0ADC
0AE0:  NOP   
0AE2:  DECFSZ FEF,F
0AE4:  BRA    0ACA
0AE6:  RETLW  00
.................... #define FAST 1 
.................... #endif 
.................... #define use_portd_lcd TRUE 
.................... #include <LCD420PIC18F.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //           LIBRERIA PARA CONTROL DE LCD 4X20 con PIC 18F4550                // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //      Se debe llamar a este archivo mediante #include <LCD420PIC18_RyP.c>   // 
.................... //                                                                            // 
.................... //      Es necesariodefinir el puerto a utilizar para el teclado mediante:    // 
.................... //      #define use_portb_lcd TRUE   //para el puerto B                       // 
.................... //      #define use_portd_lcd TRUE   //para el puerto D                       // 
.................... //                                                                            // 
.................... //      FUNCIONES:                                                            // 
.................... //      void lcd_init(void);         //Inicializa el lcd.                     // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //                            RobotyPic 2013                                  // 
.................... //                    http://robotypic.blogspot.com/                          // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... //Elección del puerto y pines 
....................  
.................... #ifdef use_portd_lcd 
....................  
.................... #define LCD_DB4  PIN_D4 
.................... #define LCD_DB5  PIN_D5 
.................... #define LCD_DB6  PIN_D6 
.................... #define LCD_DB7  PIN_D7 
.................... #define LCD_E    PIN_D2 
.................... #define LCD_RS   PIN_D0 
.................... #define LCD_RW   PIN_D1 
....................  
.................... #else 
....................  
.................... #define LCD_DB4  PIN_B4 
.................... #define LCD_DB5  PIN_B5 
.................... #define LCD_DB6  PIN_B6 
.................... #define LCD_DB7  PIN_B7 
.................... #define LCD_E    PIN_B2 
.................... #define LCD_RS   PIN_B0 
.................... #define LCD_RW   PIN_B1 
....................  
.................... #endif 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW  1     
....................  
.................... // If you use the PLL of Microcontroller to increase the 
.................... // clock to 48MHz use this define, else comment out the 
.................... // following line. 
....................  
.................... #define lcd_type 2 
.................... #define lcd_line_two 0x40 
....................  
.................... BYTE lcdline; 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                      // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0AE8:  BTFSC  xEC.0
0AEA:  BRA    0AF0
0AEC:  BCF    F8C.4
0AEE:  BRA    0AF2
0AF0:  BSF    F8C.4
0AF2:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0AF4:  BTFSC  xEC.1
0AF6:  BRA    0AFC
0AF8:  BCF    F8C.5
0AFA:  BRA    0AFE
0AFC:  BSF    F8C.5
0AFE:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4));   
0B00:  BTFSC  xEC.2
0B02:  BRA    0B08
0B04:  BCF    F8C.6
0B06:  BRA    0B0A
0B08:  BSF    F8C.6
0B0A:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8));   
0B0C:  BTFSC  xEC.3
0B0E:  BRA    0B14
0B10:  BCF    F8C.7
0B12:  BRA    0B16
0B14:  BSF    F8C.7
0B16:  BCF    F95.7
....................  
....................  #ifdef FAST 
....................  delay_cycles(25); 
0B18:  MOVLW  08
0B1A:  MOVWF  00
0B1C:  DECFSZ 00,F
0B1E:  BRA    0B1C
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  output_high(LCD_E); 
0B20:  BCF    F95.2
0B22:  BSF    F8C.2
....................  #ifdef FAST 
....................  delay_us(50); 
0B24:  MOVLW  C7
0B26:  MOVWF  00
0B28:  DECFSZ 00,F
0B2A:  BRA    0B28
0B2C:  BRA    0B2E
....................  #else 
....................  delay_us(2); 
....................  #endif 
....................  output_low(LCD_E); 
0B2E:  BCF    F95.2
0B30:  BCF    F8C.2
.................... } 
0B32:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................    
.................... output_high(LCD_E); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................   
.................... output_low(LCD_E); 
....................    
.................... return(retval);   
.................... }   
.................... #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0B34:  BCF    F95.0
0B36:  BCF    F8C.0
....................  
.................... //#ifdef USE_LCD_RW 
.................... //while(bit_test(lcd_read_byte(),7)) ; 
.................... //#else 
.................... #ifdef FAST 
.................... delay_ms(2);  
0B38:  MOVLW  02
0B3A:  MOVWF  xEB
0B3C:  RCALL  0AC0
.................... #else 
.................... delay_us(60); 
.................... #endif 
.................... //#endif 
....................  
.................... if(address) 
0B3E:  MOVF   xE9,F
0B40:  BZ    0B48
....................   output_high(LCD_RS); 
0B42:  BCF    F95.0
0B44:  BSF    F8C.0
.................... else 
0B46:  BRA    0B4C
....................   output_low(LCD_RS); 
0B48:  BCF    F95.0
0B4A:  BCF    F8C.0
....................   
....................  #ifdef FAST 
....................  delay_cycles(25); 
0B4C:  MOVLW  08
0B4E:  MOVWF  00
0B50:  DECFSZ 00,F
0B52:  BRA    0B50
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0B54:  BCF    F95.1
0B56:  BCF    F8C.1
.................... #ifdef FAST 
....................  delay_cycles(25); 
0B58:  MOVLW  08
0B5A:  MOVWF  00
0B5C:  DECFSZ 00,F
0B5E:  BRA    0B5C
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0B60:  BCF    F95.2
0B62:  BCF    F8C.2
....................  
.................... lcd_send_nibble(n >> 4); 
0B64:  SWAPF  xEA,W
0B66:  MOVWF  xEB
0B68:  MOVLW  0F
0B6A:  ANDWF  xEB,F
0B6C:  MOVFF  EB,EC
0B70:  RCALL  0AE8
.................... lcd_send_nibble(n & 0xf); 
0B72:  MOVF   xEA,W
0B74:  ANDLW  0F
0B76:  MOVWF  xEB
0B78:  MOVWF  xEC
0B7A:  RCALL  0AE8
.................... } 
0B7C:  RETLW  00
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0B7E:  BCF    F95.0
0B80:  BCF    F8C.0
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0B82:  BCF    F95.1
0B84:  BCF    F8C.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
0B86:  BCF    F95.2
0B88:  BCF    F8C.2
....................  
.................... delay_ms(15); 
0B8A:  MOVLW  0F
0B8C:  MOVWF  xEB
0B8E:  RCALL  0AC0
....................  
.................... for(i=0 ;i < 3; i++) 
0B90:  CLRF   xD0
0B92:  MOVF   xD0,W
0B94:  SUBLW  02
0B96:  BNC   0BA8
....................   { 
....................     lcd_send_nibble(0x03); 
0B98:  MOVLW  03
0B9A:  MOVWF  xEC
0B9C:  RCALL  0AE8
....................     delay_ms(5); 
0B9E:  MOVLW  05
0BA0:  MOVWF  xEB
0BA2:  RCALL  0AC0
....................   } 
0BA4:  INCF   xD0,F
0BA6:  BRA    0B92
....................  
.................... lcd_send_nibble(0x02); 
0BA8:  MOVLW  02
0BAA:  MOVWF  xEC
0BAC:  RCALL  0AE8
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0BAE:  CLRF   xD0
0BB0:  MOVF   xD0,W
0BB2:  SUBLW  03
0BB4:  BNC   0BD4
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0BB6:  CLRF   03
0BB8:  MOVF   xD0,W
0BBA:  MOVFF  FF2,D1
0BBE:  BCF    FF2.7
0BC0:  CALL   0096
0BC4:  BTFSC  xD1.7
0BC6:  BSF    FF2.7
0BC8:  MOVWF  xD1
0BCA:  CLRF   xE9
0BCC:  MOVWF  xEA
0BCE:  RCALL  0B34
....................    
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
....................     #endif 
....................   } 
0BD0:  INCF   xD0,F
0BD2:  BRA    0BB0
....................  
.................... } 
0BD4:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) 
.................... { 
....................   BYTE address; 
....................   
....................  
....................   switch(y) 
....................   { 
0BD6:  MOVLW  01
0BD8:  SUBWF  xE7,W
0BDA:  ADDLW  FC
0BDC:  BC    0C0C
0BDE:  ADDLW  04
0BE0:  GOTO   0C1C
....................     case 1 : address=0x80; 
0BE4:  MOVLW  80
0BE6:  MOVWF  xE8
....................     lcdline=1; 
0BE8:  MOVLW  01
0BEA:  MOVWF  16
....................     break; 
0BEC:  BRA    0C0C
....................     case 2 : address=0xc0; 
0BEE:  MOVLW  C0
0BF0:  MOVWF  xE8
....................     lcdline=2; 
0BF2:  MOVLW  02
0BF4:  MOVWF  16
....................     break; 
0BF6:  BRA    0C0C
....................     case 3 : address=0x94; 
0BF8:  MOVLW  94
0BFA:  MOVWF  xE8
....................     lcdline=3; 
0BFC:  MOVLW  03
0BFE:  MOVWF  16
....................     break; 
0C00:  BRA    0C0C
....................     case 4 : address=0xd4; 
0C02:  MOVLW  D4
0C04:  MOVWF  xE8
....................     lcdline=4; 
0C06:  MOVLW  04
0C08:  MOVWF  16
....................     break; 
0C0A:  BRA    0C0C
....................   } 
....................  
....................   address+=x-1; 
0C0C:  MOVLW  01
0C0E:  SUBWF  xE6,W
0C10:  ADDWF  xE8,F
....................   lcd_send_byte(0,address); 
0C12:  CLRF   xE9
0C14:  MOVFF  E8,EA
0C18:  RCALL  0B34
.................... } 
0C1A:  RETLW  00
....................  
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    if(c=='ñ') 
*
0C48:  MOVF   xE5,W
0C4A:  SUBLW  F1
0C4C:  BNZ   0C52
....................     c=238; 
0C4E:  MOVLW  EE
0C50:  MOVWF  xE5
....................  switch(c) 
....................   { 
0C52:  MOVF   xE5,W
0C54:  XORLW  0C
0C56:  BZ    0C62
0C58:  XORLW  06
0C5A:  BZ    0C76
0C5C:  XORLW  02
0C5E:  BZ    0C92
0C60:  BRA    0C9C
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0C62:  CLRF   xE9
0C64:  MOVLW  01
0C66:  MOVWF  xEA
0C68:  RCALL  0B34
....................       lcdline=1; 
0C6A:  MOVLW  01
0C6C:  MOVWF  16
....................       delay_ms(2); 
0C6E:  MOVLW  02
0C70:  MOVWF  xEB
0C72:  RCALL  0AC0
....................       break; 
0C74:  BRA    0CA8
....................    
....................     case '\n': 
....................       lcd_gotoxy(1,++lcdline); 
0C76:  INCF   16,F
0C78:  MOVLW  01
0C7A:  MOVWF  xE6
0C7C:  MOVFF  16,E7
0C80:  RCALL  0BD6
....................       if (lcdline>4) lcd_gotoxy(1,1); 
0C82:  MOVF   16,W
0C84:  SUBLW  04
0C86:  BC    0C90
0C88:  MOVLW  01
0C8A:  MOVWF  xE6
0C8C:  MOVWF  xE7
0C8E:  RCALL  0BD6
....................       break; 
0C90:  BRA    0CA8
....................    
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
0C92:  CLRF   xE9
0C94:  MOVLW  10
0C96:  MOVWF  xEA
0C98:  RCALL  0B34
....................       break; 
0C9A:  BRA    0CA8
....................    
....................     default: 
....................       lcd_send_byte(1,c); 
0C9C:  MOVLW  01
0C9E:  MOVWF  xE9
0CA0:  MOVFF  E5,EA
0CA4:  RCALL  0B34
....................       break; 
0CA6:  BRA    0CA8
....................   } 
.................... } 
0CA8:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... //while(bit_test(lcd_read_byte(),7));  
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... //#include <LCD420.c> 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NO 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   UP            input(PIN_A5) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=11,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 FeedbackDamper=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... short imprimio=0,Ruido=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero_fabrica=203.0; 
.................... short ModoSleep,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,Dif16=0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
.................... char letra;  
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... #include <Funciones.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
2228:  RLCF   xD4,W
222A:  MOVWF  00
222C:  RLCF   00,F
222E:  MOVLW  FC
2230:  ANDWF  00,F
2232:  MOVFF  00,01
2236:  MOVF   FC2,W
2238:  ANDLW  C3
223A:  IORWF  00,W
223C:  MOVWF  FC2
223E:  MOVLW  0A
2240:  MOVWF  xEB
2242:  CALL   0AC0
2246:  BSF    FC2.1
2248:  BTFSC  FC2.1
224A:  BRA    2248
224C:  MOVFF  FC4,03
2250:  MOVFF  FC3,D9
2254:  MOVFF  FC4,DA
2258:  CALL   0CF4
225C:  MOVFF  03,D8
2260:  MOVFF  02,D7
2264:  MOVFF  01,D6
2268:  MOVFF  00,D5
226C:  MOVFF  D5,00
2270:  MOVFF  D6,01
2274:  MOVFF  D7,02
2278:  MOVFF  D8,03
.................... } 
227C:  RETLW  00
....................  
.................... void intensidadpantalla(int x){ 
....................    if(x==0)    
*
0AB0:  MOVF   xD0,F
0AB2:  BNZ   0ABA
....................       Pantalla_off; 
0AB4:  BCF    F8B.1
0AB6:  BCF    F94.1
....................    else 
0AB8:  BRA    0ABE
....................       Pantalla_on; 
0ABA:  BSF    F8B.1
0ABC:  BCF    F94.1
.................... } 
0ABE:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media){ 
....................     //Voltaje0=sensores(0)*5/1023; 
....................     //Voltaje1=sensores(1)*5/1023; 
....................     //Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     //TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     //TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................      
....................     if(negativo==10) 
*
22C0:  MOVF   2C,W
22C2:  SUBLW  0A
22C4:  BNZ   2322
....................       x_uno=sensores(0)+Diferencia; 
22C6:  CLRF   xD4
22C8:  RCALL  2228
22CA:  MOVFF  00,D1
22CE:  MOVFF  01,D2
22D2:  MOVFF  02,D3
22D6:  MOVFF  03,D4
22DA:  MOVFF  FEA,D6
22DE:  MOVFF  FE9,D5
22E2:  BCF    FD8.1
22E4:  MOVFF  03,DA
22E8:  MOVFF  02,D9
22EC:  MOVFF  01,D8
22F0:  MOVFF  00,D7
22F4:  MOVFF  97,DE
22F8:  MOVFF  96,DD
22FC:  MOVFF  95,DC
2300:  MOVFF  94,DB
2304:  CALL   0E84
2308:  MOVFF  D6,FEA
230C:  MOVFF  D5,FE9
2310:  MOVFF  03,7B
2314:  MOVFF  02,7A
2318:  MOVFF  01,79
231C:  MOVFF  00,78
....................     else if(negativo==20) 
2320:  BRA    2382
2322:  MOVF   2C,W
2324:  SUBLW  14
2326:  BNZ   2382
....................       x_uno=sensores(0)-Diferencia; 
2328:  CLRF   xD4
232A:  RCALL  2228
232C:  MOVFF  00,D1
2330:  MOVFF  01,D2
2334:  MOVFF  02,D3
2338:  MOVFF  03,D4
233C:  MOVFF  FEA,D6
2340:  MOVFF  FE9,D5
2344:  BSF    FD8.1
2346:  MOVFF  03,DA
234A:  MOVFF  02,D9
234E:  MOVFF  01,D8
2352:  MOVFF  00,D7
2356:  MOVFF  97,DE
235A:  MOVFF  96,DD
235E:  MOVFF  95,DC
2362:  MOVFF  94,DB
2366:  CALL   0E84
236A:  MOVFF  D6,FEA
236E:  MOVFF  D5,FE9
2372:  MOVFF  03,7B
2376:  MOVFF  02,7A
237A:  MOVFF  01,79
237E:  MOVFF  00,78
....................      
....................     x_cuadrado=x_uno*x_uno; 
2382:  MOVFF  7B,E8
2386:  MOVFF  7A,E7
238A:  MOVFF  79,E6
238E:  MOVFF  78,E5
2392:  MOVFF  7B,EC
2396:  MOVFF  7A,EB
239A:  MOVFF  79,EA
239E:  MOVFF  78,E9
23A2:  RCALL  1E46
23A4:  MOVFF  03,7F
23A8:  MOVFF  02,7E
23AC:  MOVFF  01,7D
23B0:  MOVFF  00,7C
....................     x_cubo=x_uno*x_cuadrado; 
23B4:  MOVFF  7B,E8
23B8:  MOVFF  7A,E7
23BC:  MOVFF  79,E6
23C0:  MOVFF  78,E5
23C4:  MOVFF  7F,EC
23C8:  MOVFF  7E,EB
23CC:  MOVFF  7D,EA
23D0:  MOVFF  7C,E9
23D4:  RCALL  1E46
23D6:  MOVFF  03,83
23DA:  MOVFF  02,82
23DE:  MOVFF  01,81
23E2:  MOVFF  00,80
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
23E6:  MOVFF  83,E8
23EA:  MOVFF  82,E7
23EE:  MOVFF  81,E6
23F2:  MOVFF  80,E5
23F6:  MOVFF  5F,EC
23FA:  MOVFF  5E,EB
23FE:  MOVFF  5D,EA
2402:  MOVFF  5C,E9
2406:  RCALL  1E46
2408:  MOVFF  00,D1
240C:  MOVFF  01,D2
2410:  MOVFF  02,D3
2414:  MOVFF  03,D4
2418:  MOVFF  7F,E8
241C:  MOVFF  7E,E7
2420:  MOVFF  7D,E6
2424:  MOVFF  7C,E5
2428:  MOVFF  63,EC
242C:  MOVFF  62,EB
2430:  MOVFF  61,EA
2434:  MOVFF  60,E9
2438:  RCALL  1E46
243A:  BCF    FD8.1
243C:  MOVFF  D4,DA
2440:  MOVFF  D3,D9
2444:  MOVFF  D2,D8
2448:  MOVFF  D1,D7
244C:  MOVFF  03,DE
2450:  MOVFF  02,DD
2454:  MOVFF  01,DC
2458:  MOVFF  00,DB
245C:  CALL   0E84
2460:  MOVFF  00,D1
2464:  MOVFF  01,D2
2468:  MOVFF  02,D3
246C:  MOVFF  03,D4
2470:  MOVFF  7B,E8
2474:  MOVFF  7A,E7
2478:  MOVFF  79,E6
247C:  MOVFF  78,E5
2480:  MOVFF  67,EC
2484:  MOVFF  66,EB
2488:  MOVFF  65,EA
248C:  MOVFF  64,E9
2490:  RCALL  1E46
2492:  BCF    FD8.1
2494:  MOVFF  D4,DA
2498:  MOVFF  D3,D9
249C:  MOVFF  D2,D8
24A0:  MOVFF  D1,D7
24A4:  MOVFF  03,DE
24A8:  MOVFF  02,DD
24AC:  MOVFF  01,DC
24B0:  MOVFF  00,DB
24B4:  CALL   0E84
24B8:  MOVFF  00,D1
24BC:  MOVFF  01,D2
24C0:  MOVFF  02,D3
24C4:  MOVFF  03,D4
24C8:  BCF    FD8.1
24CA:  MOVFF  03,DA
24CE:  MOVFF  02,D9
24D2:  MOVFF  01,D8
24D6:  MOVFF  00,D7
24DA:  MOVFF  6B,DE
24DE:  MOVFF  6A,DD
24E2:  MOVFF  69,DC
24E6:  MOVFF  68,DB
24EA:  CALL   0E84
24EE:  MOVFF  03,8F
24F2:  MOVFF  02,8E
24F6:  MOVFF  01,8D
24FA:  MOVFF  00,8C
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
24FE:  BSF    FD8.1
2500:  MOVFF  8F,DA
2504:  MOVFF  8E,D9
2508:  MOVFF  8D,D8
250C:  MOVFF  8C,D7
2510:  MOVLW  0A
2512:  MOVWF  xDE
2514:  MOVLW  D7
2516:  MOVWF  xDD
2518:  MOVLW  23
251A:  MOVWF  xDC
251C:  MOVLW  7B
251E:  MOVWF  xDB
2520:  CALL   0E84
2524:  MOVFF  03,8F
2528:  MOVFF  02,8E
252C:  MOVFF  01,8D
2530:  MOVFF  00,8C
....................      
....................     if(Velocidad<0.0) 
2534:  MOVFF  8F,D7
2538:  MOVFF  8E,D6
253C:  MOVFF  8D,D5
2540:  MOVFF  8C,D4
2544:  CLRF   xDB
2546:  CLRF   xDA
2548:  CLRF   xD9
254A:  CLRF   xD8
254C:  CALL   1542
2550:  BNC   255A
....................       Velocidad=0.0; 
2552:  CLRF   x8F
2554:  CLRF   x8E
2556:  CLRF   x8D
2558:  CLRF   x8C
....................       
....................      if(l>=media) 
255A:  MOVF   xD0,W
255C:  SUBWF  28,W
255E:  BNC   2562
....................        l=0; 
2560:  CLRF   28
....................       
....................      promedio[l]=Velocidad;l++; 
2562:  MOVF   28,W
2564:  MULLW  04
2566:  MOVF   FF3,W
2568:  CLRF   03
256A:  ADDLW  A0
256C:  MOVWF  FE9
256E:  MOVLW  00
2570:  ADDWFC 03,W
2572:  MOVWF  FEA
2574:  MOVFF  8C,FEF
2578:  MOVFF  8D,FEC
257C:  MOVFF  8E,FEC
2580:  MOVFF  8F,FEC
2584:  INCF   28,F
....................      Flujo2=0; 
2586:  CLRF   x73
2588:  CLRF   x72
258A:  CLRF   x71
258C:  CLRF   x70
....................       
....................      for(h=0;h<=(media-1);h++){ 
258E:  CLRF   29
2590:  MOVLW  01
2592:  SUBWF  xD0,W
2594:  SUBWF  29,W
2596:  BZ    259A
2598:  BC    2606
....................         Flujo2+=promedio[h]; 
259A:  MOVF   29,W
259C:  MULLW  04
259E:  MOVF   FF3,W
25A0:  CLRF   03
25A2:  ADDLW  A0
25A4:  MOVWF  FE9
25A6:  MOVLW  00
25A8:  ADDWFC 03,W
25AA:  MOVWF  FEA
25AC:  MOVFF  FEF,00
25B0:  MOVFF  FEC,01
25B4:  MOVFF  FEC,02
25B8:  MOVFF  FEC,03
25BC:  MOVFF  FEA,D2
25C0:  MOVFF  FE9,D1
25C4:  BCF    FD8.1
25C6:  MOVFF  73,DA
25CA:  MOVFF  72,D9
25CE:  MOVFF  71,D8
25D2:  MOVFF  70,D7
25D6:  MOVFF  03,DE
25DA:  MOVFF  02,DD
25DE:  MOVFF  01,DC
25E2:  MOVFF  00,DB
25E6:  CALL   0E84
25EA:  MOVFF  D2,FEA
25EE:  MOVFF  D1,FE9
25F2:  MOVFF  03,73
25F6:  MOVFF  02,72
25FA:  MOVFF  01,71
25FE:  MOVFF  00,70
....................      }  
2602:  INCF   29,F
2604:  BRA    2590
....................    
....................      Flujo2=(Flujo2/media)*Ajuste1; 
2606:  CLRF   xDA
2608:  MOVFF  D0,D9
260C:  CALL   0CF4
2610:  MOVFF  73,D7
2614:  MOVFF  72,D6
2618:  MOVFF  71,D5
261C:  MOVFF  70,D4
2620:  MOVFF  03,DB
2624:  MOVFF  02,DA
2628:  MOVFF  01,D9
262C:  MOVFF  00,D8
2630:  CALL   0D2A
2634:  MOVFF  00,D1
2638:  MOVFF  01,D2
263C:  MOVFF  02,D3
2640:  MOVFF  03,D4
2644:  MOVFF  03,E8
2648:  MOVFF  02,E7
264C:  MOVFF  01,E6
2650:  MOVFF  00,E5
2654:  MOVFF  9B,EC
2658:  MOVFF  9A,EB
265C:  MOVFF  99,EA
2660:  MOVFF  98,E9
2664:  CALL   1E46
2668:  MOVFF  03,73
266C:  MOVFF  02,72
2670:  MOVFF  01,71
2674:  MOVFF  00,70
....................      return Flujo2; 
2678:  MOVFF  70,00
267C:  MOVFF  71,01
2680:  MOVFF  72,02
2684:  MOVFF  73,03
.................... } 
2688:  RETLW  00
....................  
.................... void controlar_flujo(void){ 
....................    if(Automa==20 && estadomv==1){ 
268A:  MOVF   2D,W
268C:  SUBLW  14
268E:  BTFSS  FD8.2
2690:  BRA    2774
2692:  BTFSS  3C.1
2694:  BRA    2774
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
2696:  BSF    FD8.1
2698:  MOVFF  4D,DA
269C:  MOVFF  4C,D9
26A0:  MOVFF  4B,D8
26A4:  MOVFF  4A,D7
26A8:  MOVFF  6F,DE
26AC:  MOVFF  6E,DD
26B0:  MOVFF  6D,DC
26B4:  MOVFF  6C,DB
26B8:  CALL   0E84
26BC:  MOVFF  03,9F
26C0:  MOVFF  02,9E
26C4:  MOVFF  01,9D
26C8:  MOVFF  00,9C
....................       if(error<0.2&&error>-0.2){ 
26CC:  MOVFF  9F,D7
26D0:  MOVFF  9E,D6
26D4:  MOVFF  9D,D5
26D8:  MOVFF  9C,D4
26DC:  MOVLW  CD
26DE:  MOVWF  xDB
26E0:  MOVLW  CC
26E2:  MOVWF  xDA
26E4:  MOVLW  4C
26E6:  MOVWF  xD9
26E8:  MOVLW  7C
26EA:  MOVWF  xD8
26EC:  CALL   1542
26F0:  BNC   2718
26F2:  MOVLW  CD
26F4:  MOVWF  xD7
26F6:  MOVLW  CC
26F8:  MOVWF  xD6
26FA:  MOVWF  xD5
26FC:  MOVLW  7C
26FE:  MOVWF  xD4
2700:  MOVFF  9F,DB
2704:  MOVFF  9E,DA
2708:  MOVFF  9D,D9
270C:  MOVFF  9C,D8
2710:  CALL   1542
2714:  BNC   2718
....................       }else{ 
2716:  BRA    275C
....................          if(error>0.0) 
2718:  CLRF   xD7
271A:  CLRF   xD6
271C:  CLRF   xD5
271E:  CLRF   xD4
2720:  MOVFF  9F,DB
2724:  MOVFF  9E,DA
2728:  MOVFF  9D,D9
272C:  MOVFF  9C,D8
2730:  CALL   1542
2734:  BNC   273A
....................             tmp+=1; 
2736:  MOVLW  01
2738:  ADDWF  2A,F
....................                 
....................          if(error<-0.0) 
273A:  MOVFF  9F,D7
273E:  MOVFF  9E,D6
2742:  MOVFF  9D,D5
2746:  MOVFF  9C,D4
274A:  CLRF   xDB
274C:  CLRF   xDA
274E:  CLRF   xD9
2750:  CLRF   xD8
2752:  CALL   1542
2756:  BNC   275C
....................             tmp-=1;   
2758:  MOVLW  01
275A:  SUBWF  2A,F
....................       } 
....................        
....................       if(tmp>251) 
275C:  MOVF   2A,W
275E:  SUBLW  FB
2760:  BC    2766
....................          tmp=251; 
2762:  MOVLW  FB
2764:  MOVWF  2A
....................       if(tmp<4)          
2766:  MOVF   2A,W
2768:  SUBLW  03
276A:  BNC   2770
....................          tmp=4;       
276C:  MOVLW  04
276E:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
2770:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Manual==20){ 
2774:  MOVF   2E,W
2776:  SUBLW  14
2778:  BNZ   2782
....................       tmp=251; 
277A:  MOVLW  FB
277C:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
277E:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Semi==20){ 
2782:  MOVF   2F,W
2784:  SUBLW  14
2786:  BNZ   278C
....................       set_pwm1_duty (ValorSemi); 
2788:  MOVFF  30,FBE
....................    } 
.................... } 
278C:  RETLW  00
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................      
....................    if(x==1) 
*
1CA4:  DECFSZ xD1,W
1CA6:  BRA    1CDC
....................    {if(estadoalarma==0) 
1CA8:  BTFSC  3C.2
1CAA:  BRA    1CC2
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1CAC:  MOVLW  02
1CAE:  MOVWF  xE6
1CB0:  MOVFF  D2,E7
1CB4:  CALL   0BD6
1CB8:  MOVLW  B4
1CBA:  MOVWF  FF6
1CBC:  MOVLW  00
1CBE:  MOVWF  FF7
1CC0:  RCALL  1B6A
....................    if(estadoalarma==1) 
1CC2:  BTFSS  3C.2
1CC4:  BRA    1CDC
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1CC6:  MOVLW  02
1CC8:  MOVWF  xE6
1CCA:  MOVFF  D2,E7
1CCE:  CALL   0BD6
1CD2:  MOVLW  C8
1CD4:  MOVWF  FF6
1CD6:  MOVLW  00
1CD8:  MOVWF  FF7
1CDA:  RCALL  1B6A
....................    } 
....................     
....................    if(x==2) 
1CDC:  MOVF   xD1,W
1CDE:  SUBLW  02
1CE0:  BNZ   1CF8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
1CE2:  MOVLW  02
1CE4:  MOVWF  xE6
1CE6:  MOVFF  D2,E7
1CEA:  CALL   0BD6
1CEE:  MOVLW  DC
1CF0:  MOVWF  FF6
1CF2:  MOVLW  00
1CF4:  MOVWF  FF7
1CF6:  RCALL  1B6A
....................     
....................    if(x==3) 
1CF8:  MOVF   xD1,W
1CFA:  SUBLW  03
1CFC:  BNZ   1D14
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
1CFE:  MOVLW  02
1D00:  MOVWF  xE6
1D02:  MOVFF  D2,E7
1D06:  CALL   0BD6
1D0A:  MOVLW  F0
1D0C:  MOVWF  FF6
1D0E:  MOVLW  00
1D10:  MOVWF  FF7
1D12:  RCALL  1B6A
....................     
....................    if(x==4) 
1D14:  MOVF   xD1,W
1D16:  SUBLW  04
1D18:  BNZ   1D30
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1D1A:  MOVLW  02
1D1C:  MOVWF  xE6
1D1E:  MOVFF  D2,E7
1D22:  CALL   0BD6
1D26:  MOVLW  04
1D28:  MOVWF  FF6
1D2A:  MOVLW  01
1D2C:  MOVWF  FF7
1D2E:  RCALL  1B6A
....................     
....................    if(x==5) 
1D30:  MOVF   xD1,W
1D32:  SUBLW  05
1D34:  BNZ   1D4C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
1D36:  MOVLW  02
1D38:  MOVWF  xE6
1D3A:  MOVFF  D2,E7
1D3E:  CALL   0BD6
1D42:  MOVLW  18
1D44:  MOVWF  FF6
1D46:  MOVLW  01
1D48:  MOVWF  FF7
1D4A:  RCALL  1B6A
....................     
....................    if(x==6) 
1D4C:  MOVF   xD1,W
1D4E:  SUBLW  06
1D50:  BNZ   1D68
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1D52:  MOVLW  02
1D54:  MOVWF  xE6
1D56:  MOVFF  D2,E7
1D5A:  CALL   0BD6
1D5E:  MOVLW  2C
1D60:  MOVWF  FF6
1D62:  MOVLW  01
1D64:  MOVWF  FF7
1D66:  RCALL  1B6A
....................     
....................    if(x==7) 
1D68:  MOVF   xD1,W
1D6A:  SUBLW  07
1D6C:  BNZ   1D84
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1D6E:  MOVLW  02
1D70:  MOVWF  xE6
1D72:  MOVFF  D2,E7
1D76:  CALL   0BD6
1D7A:  MOVLW  40
1D7C:  MOVWF  FF6
1D7E:  MOVLW  01
1D80:  MOVWF  FF7
1D82:  RCALL  1B6A
....................     
....................    if(x==8) 
1D84:  MOVF   xD1,W
1D86:  SUBLW  08
1D88:  BNZ   1DA0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
1D8A:  MOVLW  02
1D8C:  MOVWF  xE6
1D8E:  MOVFF  D2,E7
1D92:  CALL   0BD6
1D96:  MOVLW  54
1D98:  MOVWF  FF6
1D9A:  MOVLW  01
1D9C:  MOVWF  FF7
1D9E:  RCALL  1B6A
....................     
....................    if(x==9) 
1DA0:  MOVF   xD1,W
1DA2:  SUBLW  09
1DA4:  BNZ   1DBC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
1DA6:  MOVLW  02
1DA8:  MOVWF  xE6
1DAA:  MOVFF  D2,E7
1DAE:  CALL   0BD6
1DB2:  MOVLW  68
1DB4:  MOVWF  FF6
1DB6:  MOVLW  01
1DB8:  MOVWF  FF7
1DBA:  RCALL  1B6A
....................     
....................    if(x==10) 
1DBC:  MOVF   xD1,W
1DBE:  SUBLW  0A
1DC0:  BNZ   1DD8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
1DC2:  MOVLW  02
1DC4:  MOVWF  xE6
1DC6:  MOVFF  D2,E7
1DCA:  CALL   0BD6
1DCE:  MOVLW  7C
1DD0:  MOVWF  FF6
1DD2:  MOVLW  01
1DD4:  MOVWF  FF7
1DD6:  RCALL  1B6A
.................... } 
1DD8:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
227E:  MOVFF  D0,FBE
.................... } 
2282:  RETLW  00
....................  
.................... void SalidasOff(void){ 
....................    set_pwm1_duty(0); 
*
0A9C:  CLRF   FBE
....................    Luz_Blanca_off; 
0A9E:  BCF    F8A.4
0AA0:  BCF    F93.4
....................    Motor_off; 
0AA2:  BCF    F8A.5
0AA4:  BCF    F93.5
....................    Damper_off; 
0AA6:  BCF    F8A.7
0AA8:  BCF    F93.7
....................    Alarma_off; 
0AAA:  BCF    F8A.6
0AAC:  BCF    F93.6
.................... } 
0AAE:  RETLW  00
....................  
.................... void ConfigInicial(void){ 
....................    setup_adc_ports(AN0_TO_AN3); 
*
0CAA:  MOVF   FC1,W
0CAC:  ANDLW  C0
0CAE:  IORLW  0B
0CB0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0CB2:  BCF    FC0.0
0CB4:  BSF    FC0.1
0CB6:  BCF    FC0.2
0CB8:  BSF    FC0.7
0CBA:  BSF    FC2.0
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0CBC:  MOVLW  85
0CBE:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0CC0:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
0CC2:  MOVLW  00
0CC4:  IORLW  05
0CC6:  MOVWF  FCA
0CC8:  MOVLW  FF
0CCA:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
0CCC:  BCF    F94.2
0CCE:  BCF    F8B.2
0CD0:  BCF    F96.6
0CD2:  MOVLW  0C
0CD4:  MOVWF  FBD
0CD6:  CLRF   FB7
0CD8:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
0CDA:  MOVLW  C0
0CDC:  IORWF  FF2,F
....................    output_d(0); 
0CDE:  CLRF   F95
0CE0:  CLRF   F8C
....................    SalidasOff(); 
0CE2:  RCALL  0A9C
....................    intensidadpantalla(0); 
0CE4:  CLRF   xD0
0CE6:  RCALL  0AB0
....................    lcd_init(); 
0CE8:  RCALL  0B7E
....................    printf(lcd_putc,"\f"); 
0CEA:  MOVLW  0C
0CEC:  MOVWF  xE5
0CEE:  RCALL  0C48
.................... } 
0CF0:  GOTO   2980 (RETURN)
....................  
.................... void LeeEEPROM(void){ 
.................... // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20);  
*
10EE:  MOVFF  FF2,D0
10F2:  BCF    FF2.7
10F4:  CLRF   FA9
10F6:  BCF    FA6.6
10F8:  BCF    FA6.7
10FA:  BSF    FA6.0
10FC:  MOVF   FA8,W
10FE:  BTFSC  xD0.7
1100:  BSF    FF2.7
1102:  MOVWF  46
1104:  MOVLW  14
1106:  MOVWF  xEB
1108:  RCALL  0AC0
....................    contrasena[1]=read_eeprom(1);delay_ms(20); 
110A:  MOVFF  FF2,D0
110E:  BCF    FF2.7
1110:  MOVLW  01
1112:  MOVWF  FA9
1114:  BCF    FA6.6
1116:  BCF    FA6.7
1118:  BSF    FA6.0
111A:  MOVF   FA8,W
111C:  BTFSC  xD0.7
111E:  BSF    FF2.7
1120:  MOVWF  47
1122:  MOVLW  14
1124:  MOVWF  xEB
1126:  RCALL  0AC0
....................    contrasena[2]=read_eeprom(2);delay_ms(20);  
1128:  MOVFF  FF2,D0
112C:  BCF    FF2.7
112E:  MOVLW  02
1130:  MOVWF  FA9
1132:  BCF    FA6.6
1134:  BCF    FA6.7
1136:  BSF    FA6.0
1138:  MOVF   FA8,W
113A:  BTFSC  xD0.7
113C:  BSF    FF2.7
113E:  MOVWF  48
1140:  MOVLW  14
1142:  MOVWF  xEB
1144:  RCALL  0AC0
....................    contrasena[3]=read_eeprom(3);delay_ms(20); 
1146:  MOVFF  FF2,D0
114A:  BCF    FF2.7
114C:  MOVLW  03
114E:  MOVWF  FA9
1150:  BCF    FA6.6
1152:  BCF    FA6.7
1154:  BSF    FA6.0
1156:  MOVF   FA8,W
1158:  BTFSC  xD0.7
115A:  BSF    FF2.7
115C:  MOVWF  49
115E:  MOVLW  14
1160:  MOVWF  xEB
1162:  RCALL  0AC0
....................    estadoalarma=read_eeprom(5);delay_ms(20); 
1164:  MOVFF  FF2,D0
1168:  BCF    FF2.7
116A:  MOVLW  05
116C:  MOVWF  FA9
116E:  BCF    FA6.6
1170:  BCF    FA6.7
1172:  BSF    FA6.0
1174:  MOVF   FA8,W
1176:  BTFSC  xD0.7
1178:  BSF    FF2.7
117A:  MOVWF  01
117C:  BCF    3C.2
117E:  BTFSC  01.0
1180:  BSF    3C.2
1182:  MOVLW  14
1184:  MOVWF  xEB
1186:  RCALL  0AC0
....................    Manual=read_eeprom(10);delay_ms(20); 
1188:  MOVFF  FF2,D0
118C:  BCF    FF2.7
118E:  MOVLW  0A
1190:  MOVWF  FA9
1192:  BCF    FA6.6
1194:  BCF    FA6.7
1196:  BSF    FA6.0
1198:  MOVF   FA8,W
119A:  BTFSC  xD0.7
119C:  BSF    FF2.7
119E:  MOVWF  2E
11A0:  MOVLW  14
11A2:  MOVWF  xEB
11A4:  RCALL  0AC0
....................    Automa=read_eeprom(11);delay_ms(20); 
11A6:  MOVFF  FF2,D0
11AA:  BCF    FF2.7
11AC:  MOVLW  0B
11AE:  MOVWF  FA9
11B0:  BCF    FA6.6
11B2:  BCF    FA6.7
11B4:  BSF    FA6.0
11B6:  MOVF   FA8,W
11B8:  BTFSC  xD0.7
11BA:  BSF    FF2.7
11BC:  MOVWF  2D
11BE:  MOVLW  14
11C0:  MOVWF  xEB
11C2:  RCALL  0AC0
....................    Semi=read_eeprom(12);delay_ms(20); 
11C4:  MOVFF  FF2,D0
11C8:  BCF    FF2.7
11CA:  MOVLW  0C
11CC:  MOVWF  FA9
11CE:  BCF    FA6.6
11D0:  BCF    FA6.7
11D2:  BSF    FA6.0
11D4:  MOVF   FA8,W
11D6:  BTFSC  xD0.7
11D8:  BSF    FF2.7
11DA:  MOVWF  2F
11DC:  MOVLW  14
11DE:  MOVWF  xEB
11E0:  RCALL  0AC0
....................    ValorSemi=read_eeprom(13);delay_ms(20); 
11E2:  MOVFF  FF2,D0
11E6:  BCF    FF2.7
11E8:  MOVLW  0D
11EA:  MOVWF  FA9
11EC:  BCF    FA6.6
11EE:  BCF    FA6.7
11F0:  BSF    FA6.0
11F2:  MOVF   FA8,W
11F4:  BTFSC  xD0.7
11F6:  BSF    FF2.7
11F8:  MOVWF  30
11FA:  MOVLW  14
11FC:  MOVWF  xEB
11FE:  RCALL  0AC0
....................    tmp=ValorSemi; 
1200:  MOVFF  30,2A
....................  
....................    purga_minutos=read_eeprom(20);delay_ms(20); 
1204:  MOVFF  FF2,D0
1208:  BCF    FF2.7
120A:  MOVLW  14
120C:  MOVWF  FA9
120E:  BCF    FA6.6
1210:  BCF    FA6.7
1212:  BSF    FA6.0
1214:  MOVF   FA8,W
1216:  BTFSC  xD0.7
1218:  BSF    FF2.7
121A:  MOVWF  22
121C:  MOVLW  14
121E:  MOVWF  xEB
1220:  RCALL  0AC0
....................    purga_segundos=read_eeprom(21);delay_ms(20); 
1222:  MOVFF  FF2,D0
1226:  BCF    FF2.7
1228:  MOVLW  15
122A:  MOVWF  FA9
122C:  BCF    FA6.6
122E:  BCF    FA6.7
1230:  BSF    FA6.0
1232:  MOVF   FA8,W
1234:  BTFSC  xD0.7
1236:  BSF    FF2.7
1238:  MOVWF  35
123A:  MOVLW  14
123C:  MOVWF  xEB
123E:  RCALL  0AC0
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
1240:  MOVFF  22,23
1244:  MOVFF  35,36
....................    ppurga_minutos=read_eeprom(22);delay_ms(20); 
1248:  MOVFF  FF2,D0
124C:  BCF    FF2.7
124E:  MOVLW  16
1250:  MOVWF  FA9
1252:  BCF    FA6.6
1254:  BCF    FA6.7
1256:  BSF    FA6.0
1258:  MOVF   FA8,W
125A:  BTFSC  xD0.7
125C:  BSF    FF2.7
125E:  MOVWF  39
1260:  MOVLW  14
1262:  MOVWF  xEB
1264:  RCALL  0AC0
....................    ppurga_segundos=read_eeprom(23);delay_ms(20); 
1266:  MOVFF  FF2,D0
126A:  BCF    FF2.7
126C:  MOVLW  17
126E:  MOVWF  FA9
1270:  BCF    FA6.6
1272:  BCF    FA6.7
1274:  BSF    FA6.0
1276:  MOVF   FA8,W
1278:  BTFSC  xD0.7
127A:  BSF    FF2.7
127C:  MOVWF  37
127E:  MOVLW  14
1280:  MOVWF  xEB
1282:  RCALL  0AC0
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
1284:  MOVFF  39,3A
1288:  MOVFF  37,38
....................        
....................    Entero=read_eeprom(25);delay_ms(20);//Decimal1=read_eeprom(26); 
128C:  MOVFF  FF2,D0
1290:  BCF    FF2.7
1292:  MOVLW  19
1294:  MOVWF  FA9
1296:  BCF    FA6.6
1298:  BCF    FA6.7
129A:  BSF    FA6.0
129C:  MOVF   FA8,W
129E:  BTFSC  xD0.7
12A0:  BSF    FF2.7
12A2:  MOVWF  24
12A4:  MOVLW  14
12A6:  MOVWF  xEB
12A8:  RCALL  0AC0
....................    Temporal=read_eeprom(26);delay_ms(20); 
12AA:  MOVFF  FF2,D0
12AE:  BCF    FF2.7
12B0:  MOVLW  1A
12B2:  MOVWF  FA9
12B4:  BCF    FA6.6
12B6:  BCF    FA6.7
12B8:  BSF    FA6.0
12BA:  MOVF   FA8,W
12BC:  BTFSC  xD0.7
12BE:  BSF    FF2.7
12C0:  CLRF   xDA
12C2:  MOVWF  xD9
12C4:  RCALL  0CF4
12C6:  MOVFF  03,87
12CA:  MOVFF  02,86
12CE:  MOVFF  01,85
12D2:  MOVFF  00,84
12D6:  MOVLW  14
12D8:  MOVWF  xEB
12DA:  CALL   0AC0
....................    Temporal=Temporal/10.0; 
12DE:  MOVFF  87,D7
12E2:  MOVFF  86,D6
12E6:  MOVFF  85,D5
12EA:  MOVFF  84,D4
12EE:  CLRF   xDB
12F0:  CLRF   xDA
12F2:  MOVLW  20
12F4:  MOVWF  xD9
12F6:  MOVLW  82
12F8:  MOVWF  xD8
12FA:  RCALL  0D2A
12FC:  MOVFF  03,87
1300:  MOVFF  02,86
1304:  MOVFF  01,85
1308:  MOVFF  00,84
....................    Ajuste1=Entero+Temporal; 
130C:  CLRF   xDA
130E:  MOVFF  24,D9
1312:  RCALL  0CF4
1314:  BCF    FD8.1
1316:  MOVFF  03,DA
131A:  MOVFF  02,D9
131E:  MOVFF  01,D8
1322:  MOVFF  00,D7
1326:  MOVFF  87,DE
132A:  MOVFF  86,DD
132E:  MOVFF  85,DC
1332:  MOVFF  84,DB
1336:  RCALL  0E84
1338:  MOVFF  03,9B
133C:  MOVFF  02,9A
1340:  MOVFF  01,99
1344:  MOVFF  00,98
....................     
....................    Entero=read_eeprom(40);delay_ms(20);//Decimal2=read_eeprom(41); 
1348:  MOVFF  FF2,D0
134C:  BCF    FF2.7
134E:  MOVLW  28
1350:  MOVWF  FA9
1352:  BCF    FA6.6
1354:  BCF    FA6.7
1356:  BSF    FA6.0
1358:  MOVF   FA8,W
135A:  BTFSC  xD0.7
135C:  BSF    FF2.7
135E:  MOVWF  24
1360:  MOVLW  14
1362:  MOVWF  xEB
1364:  CALL   0AC0
....................    Temporal=read_eeprom(41);delay_ms(20); 
1368:  MOVFF  FF2,D0
136C:  BCF    FF2.7
136E:  MOVLW  29
1370:  MOVWF  FA9
1372:  BCF    FA6.6
1374:  BCF    FA6.7
1376:  BSF    FA6.0
1378:  MOVF   FA8,W
137A:  BTFSC  xD0.7
137C:  BSF    FF2.7
137E:  CLRF   xDA
1380:  MOVWF  xD9
1382:  RCALL  0CF4
1384:  MOVFF  03,87
1388:  MOVFF  02,86
138C:  MOVFF  01,85
1390:  MOVFF  00,84
1394:  MOVLW  14
1396:  MOVWF  xEB
1398:  CALL   0AC0
....................    Temporal=Temporal/10.0; 
139C:  MOVFF  87,D7
13A0:  MOVFF  86,D6
13A4:  MOVFF  85,D5
13A8:  MOVFF  84,D4
13AC:  CLRF   xDB
13AE:  CLRF   xDA
13B0:  MOVLW  20
13B2:  MOVWF  xD9
13B4:  MOVLW  82
13B6:  MOVWF  xD8
13B8:  RCALL  0D2A
13BA:  MOVFF  03,87
13BE:  MOVFF  02,86
13C2:  MOVFF  01,85
13C6:  MOVFF  00,84
....................    setpoint=Entero+Temporal; 
13CA:  CLRF   xDA
13CC:  MOVFF  24,D9
13D0:  RCALL  0CF4
13D2:  BCF    FD8.1
13D4:  MOVFF  03,DA
13D8:  MOVFF  02,D9
13DC:  MOVFF  01,D8
13E0:  MOVFF  00,D7
13E4:  MOVFF  87,DE
13E8:  MOVFF  86,DD
13EC:  MOVFF  85,DC
13F0:  MOVFF  84,DB
13F4:  RCALL  0E84
13F6:  MOVFF  03,4D
13FA:  MOVFF  02,4C
13FE:  MOVFF  01,4B
1402:  MOVFF  00,4A
....................    MediaMovil=read_eeprom(42);delay_ms(20); 
1406:  MOVFF  FF2,D0
140A:  BCF    FF2.7
140C:  MOVLW  2A
140E:  MOVWF  FA9
1410:  BCF    FA6.6
1412:  BCF    FA6.7
1414:  BSF    FA6.0
1416:  MOVF   FA8,W
1418:  BTFSC  xD0.7
141A:  BSF    FF2.7
141C:  MOVWF  2B
141E:  MOVLW  14
1420:  MOVWF  xEB
1422:  CALL   0AC0
....................    
....................    negativo=read_eeprom(50);delay_ms(20); 
1426:  MOVFF  FF2,D0
142A:  BCF    FF2.7
142C:  MOVLW  32
142E:  MOVWF  FA9
1430:  BCF    FA6.6
1432:  BCF    FA6.7
1434:  BSF    FA6.0
1436:  MOVF   FA8,W
1438:  BTFSC  xD0.7
143A:  BSF    FF2.7
143C:  MOVWF  2C
143E:  MOVLW  14
1440:  MOVWF  xEB
1442:  CALL   0AC0
....................     
....................    Entero1=read_eeprom(60);delay_ms(20);//Decimal2=read_eeprom(41); 
1446:  MOVFF  FF2,D0
144A:  BCF    FF2.7
144C:  MOVLW  3C
144E:  MOVWF  FA9
1450:  BCF    FA6.6
1452:  BCF    FA6.7
1454:  BSF    FA6.0
1456:  MOVF   FA8,W
1458:  BTFSC  xD0.7
145A:  BSF    FF2.7
145C:  MOVWF  27
145E:  MOVLW  14
1460:  MOVWF  xEB
1462:  CALL   0AC0
....................    Temporal1=read_eeprom(61);delay_ms(20); 
1466:  MOVFF  FF2,D0
146A:  BCF    FF2.7
146C:  MOVLW  3D
146E:  MOVWF  FA9
1470:  BCF    FA6.6
1472:  BCF    FA6.7
1474:  BSF    FA6.0
1476:  MOVF   FA8,W
1478:  BTFSC  xD0.7
147A:  BSF    FF2.7
147C:  CLRF   xDA
147E:  MOVWF  xD9
1480:  RCALL  0CF4
1482:  MOVFF  03,93
1486:  MOVFF  02,92
148A:  MOVFF  01,91
148E:  MOVFF  00,90
1492:  MOVLW  14
1494:  MOVWF  xEB
1496:  CALL   0AC0
....................    Diferencia=make16(Temporal1,Entero1); 
149A:  MOVFF  90,03
149E:  MOVFF  27,D9
14A2:  MOVFF  90,DA
14A6:  RCALL  0CF4
14A8:  MOVFF  03,97
14AC:  MOVFF  02,96
14B0:  MOVFF  01,95
14B4:  MOVFF  00,94
....................     
....................    segundos=read_eeprom(70);delay_ms(20); 
14B8:  MOVFF  FF2,D0
14BC:  BCF    FF2.7
14BE:  MOVLW  46
14C0:  MOVWF  FA9
14C2:  BCF    FA6.6
14C4:  BCF    FA6.7
14C6:  BSF    FA6.0
14C8:  MOVF   FA8,W
14CA:  BTFSC  xD0.7
14CC:  BSF    FF2.7
14CE:  MOVWF  31
14D0:  MOVLW  14
14D2:  MOVWF  xEB
14D4:  CALL   0AC0
....................    minutos=read_eeprom(71);delay_ms(20); 
14D8:  MOVFF  FF2,D0
14DC:  BCF    FF2.7
14DE:  MOVLW  47
14E0:  MOVWF  FA9
14E2:  BCF    FA6.6
14E4:  BCF    FA6.7
14E6:  BSF    FA6.0
14E8:  MOVF   FA8,W
14EA:  BTFSC  xD0.7
14EC:  BSF    FF2.7
14EE:  MOVWF  32
14F0:  MOVLW  14
14F2:  MOVWF  xEB
14F4:  CALL   0AC0
....................    horas=read_eeprom(72);delay_ms(20); 
14F8:  MOVFF  FF2,D0
14FC:  BCF    FF2.7
14FE:  MOVLW  48
1500:  MOVWF  FA9
1502:  BCF    FA6.6
1504:  BCF    FA6.7
1506:  BSF    FA6.0
1508:  MOVF   FA8,W
150A:  BTFSC  xD0.7
150C:  BSF    FF2.7
150E:  MOVWF  33
1510:  MOVLW  14
1512:  MOVWF  xEB
1514:  CALL   0AC0
....................    flag_filtro=read_eeprom(73);delay_ms(20); 
1518:  MOVFF  FF2,D0
151C:  BCF    FF2.7
151E:  MOVLW  49
1520:  MOVWF  FA9
1522:  BCF    FA6.6
1524:  BCF    FA6.7
1526:  BSF    FA6.0
1528:  MOVF   FA8,W
152A:  BTFSC  xD0.7
152C:  BSF    FF2.7
152E:  MOVWF  01
1530:  BCF    3D.2
1532:  BTFSC  01.0
1534:  BSF    3D.2
1536:  MOVLW  14
1538:  MOVWF  xEB
153A:  CALL   0AC0
.................... } 
153E:  GOTO   2984 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................    if(contrasena[0]>9){ 
*
15B8:  MOVF   46,W
15BA:  SUBLW  09
15BC:  BC    15F0
....................       contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
15BE:  CLRF   46
15C0:  CLRF   FA9
15C2:  CLRF   FA8
15C4:  BCF    FA6.6
15C6:  BCF    FA6.7
15C8:  BSF    FA6.2
15CA:  MOVF   FF2,W
15CC:  MOVWF  00
15CE:  BCF    FF2.7
15D0:  MOVLB  F
15D2:  MOVLW  55
15D4:  MOVWF  FA7
15D6:  MOVLW  AA
15D8:  MOVWF  FA7
15DA:  BSF    FA6.1
15DC:  BTFSC  FA6.1
15DE:  BRA    15DC
15E0:  BCF    FA6.2
15E2:  MOVF   00,W
15E4:  IORWF  FF2,F
15E6:  MOVLW  14
15E8:  MOVLB  0
15EA:  MOVWF  xEB
15EC:  CALL   0AC0
....................    } 
....................    if(contrasena[1]>9){ 
15F0:  MOVF   47,W
15F2:  SUBLW  09
15F4:  BC    162A
....................       contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
15F6:  CLRF   47
15F8:  MOVLW  01
15FA:  MOVWF  FA9
15FC:  CLRF   FA8
15FE:  BCF    FA6.6
1600:  BCF    FA6.7
1602:  BSF    FA6.2
1604:  MOVF   FF2,W
1606:  MOVWF  00
1608:  BCF    FF2.7
160A:  MOVLB  F
160C:  MOVLW  55
160E:  MOVWF  FA7
1610:  MOVLW  AA
1612:  MOVWF  FA7
1614:  BSF    FA6.1
1616:  BTFSC  FA6.1
1618:  BRA    1616
161A:  BCF    FA6.2
161C:  MOVF   00,W
161E:  IORWF  FF2,F
1620:  MOVLW  14
1622:  MOVLB  0
1624:  MOVWF  xEB
1626:  CALL   0AC0
....................    } 
....................    if(contrasena[2]>9){ 
162A:  MOVF   48,W
162C:  SUBLW  09
162E:  BC    1664
....................       contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
1630:  CLRF   48
1632:  MOVLW  02
1634:  MOVWF  FA9
1636:  CLRF   FA8
1638:  BCF    FA6.6
163A:  BCF    FA6.7
163C:  BSF    FA6.2
163E:  MOVF   FF2,W
1640:  MOVWF  00
1642:  BCF    FF2.7
1644:  MOVLB  F
1646:  MOVLW  55
1648:  MOVWF  FA7
164A:  MOVLW  AA
164C:  MOVWF  FA7
164E:  BSF    FA6.1
1650:  BTFSC  FA6.1
1652:  BRA    1650
1654:  BCF    FA6.2
1656:  MOVF   00,W
1658:  IORWF  FF2,F
165A:  MOVLW  14
165C:  MOVLB  0
165E:  MOVWF  xEB
1660:  CALL   0AC0
....................    } 
....................    if(contrasena[3]>9){ 
1664:  MOVF   49,W
1666:  SUBLW  09
1668:  BC    169E
....................       contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
166A:  CLRF   49
166C:  MOVLW  03
166E:  MOVWF  FA9
1670:  CLRF   FA8
1672:  BCF    FA6.6
1674:  BCF    FA6.7
1676:  BSF    FA6.2
1678:  MOVF   FF2,W
167A:  MOVWF  00
167C:  BCF    FF2.7
167E:  MOVLB  F
1680:  MOVLW  55
1682:  MOVWF  FA7
1684:  MOVLW  AA
1686:  MOVWF  FA7
1688:  BSF    FA6.1
168A:  BTFSC  FA6.1
168C:  BRA    168A
168E:  BCF    FA6.2
1690:  MOVF   00,W
1692:  IORWF  FF2,F
1694:  MOVLW  14
1696:  MOVLB  0
1698:  MOVWF  xEB
169A:  CALL   0AC0
....................    } 
....................    if(estadoalarma>1){ 
169E:  MOVLW  00
16A0:  BTFSC  3C.2
16A2:  MOVLW  01
16A4:  SUBLW  01
16A6:  BC    16DE
....................       estadoalarma=1;write_eeprom(5,1);delay_ms(20); 
16A8:  BSF    3C.2
16AA:  MOVLW  05
16AC:  MOVWF  FA9
16AE:  MOVLW  01
16B0:  MOVWF  FA8
16B2:  BCF    FA6.6
16B4:  BCF    FA6.7
16B6:  BSF    FA6.2
16B8:  MOVF   FF2,W
16BA:  MOVWF  00
16BC:  BCF    FF2.7
16BE:  MOVLB  F
16C0:  MOVLW  55
16C2:  MOVWF  FA7
16C4:  MOVLW  AA
16C6:  MOVWF  FA7
16C8:  BSF    FA6.1
16CA:  BTFSC  FA6.1
16CC:  BRA    16CA
16CE:  BCF    FA6.2
16D0:  MOVF   00,W
16D2:  IORWF  FF2,F
16D4:  MOVLW  14
16D6:  MOVLB  0
16D8:  MOVWF  xEB
16DA:  CALL   0AC0
....................    } 
....................    if(Manual>20){ 
16DE:  MOVF   2E,W
16E0:  SUBLW  14
16E2:  BC    171C
....................       Manual=20;write_eeprom(10,20);delay_ms(20); 
16E4:  MOVLW  14
16E6:  MOVWF  2E
16E8:  MOVLW  0A
16EA:  MOVWF  FA9
16EC:  MOVLW  14
16EE:  MOVWF  FA8
16F0:  BCF    FA6.6
16F2:  BCF    FA6.7
16F4:  BSF    FA6.2
16F6:  MOVF   FF2,W
16F8:  MOVWF  00
16FA:  BCF    FF2.7
16FC:  MOVLB  F
16FE:  MOVLW  55
1700:  MOVWF  FA7
1702:  MOVLW  AA
1704:  MOVWF  FA7
1706:  BSF    FA6.1
1708:  BTFSC  FA6.1
170A:  BRA    1708
170C:  BCF    FA6.2
170E:  MOVF   00,W
1710:  IORWF  FF2,F
1712:  MOVLW  14
1714:  MOVLB  0
1716:  MOVWF  xEB
1718:  CALL   0AC0
....................    } 
....................    if(Automa>20){ 
171C:  MOVF   2D,W
171E:  SUBLW  14
1720:  BC    175A
....................       Manual=10;write_eeprom(11,10);delay_ms(20); 
1722:  MOVLW  0A
1724:  MOVWF  2E
1726:  MOVLW  0B
1728:  MOVWF  FA9
172A:  MOVLW  0A
172C:  MOVWF  FA8
172E:  BCF    FA6.6
1730:  BCF    FA6.7
1732:  BSF    FA6.2
1734:  MOVF   FF2,W
1736:  MOVWF  00
1738:  BCF    FF2.7
173A:  MOVLB  F
173C:  MOVLW  55
173E:  MOVWF  FA7
1740:  MOVLW  AA
1742:  MOVWF  FA7
1744:  BSF    FA6.1
1746:  BTFSC  FA6.1
1748:  BRA    1746
174A:  BCF    FA6.2
174C:  MOVF   00,W
174E:  IORWF  FF2,F
1750:  MOVLW  14
1752:  MOVLB  0
1754:  MOVWF  xEB
1756:  CALL   0AC0
....................    } 
....................    if(Semi>20){ 
175A:  MOVF   2F,W
175C:  SUBLW  14
175E:  BC    1798
....................       Semi=10;write_eeprom(12,10);delay_ms(20); 
1760:  MOVLW  0A
1762:  MOVWF  2F
1764:  MOVLW  0C
1766:  MOVWF  FA9
1768:  MOVLW  0A
176A:  MOVWF  FA8
176C:  BCF    FA6.6
176E:  BCF    FA6.7
1770:  BSF    FA6.2
1772:  MOVF   FF2,W
1774:  MOVWF  00
1776:  BCF    FF2.7
1778:  MOVLB  F
177A:  MOVLW  55
177C:  MOVWF  FA7
177E:  MOVLW  AA
1780:  MOVWF  FA7
1782:  BSF    FA6.1
1784:  BTFSC  FA6.1
1786:  BRA    1784
1788:  BCF    FA6.2
178A:  MOVF   00,W
178C:  IORWF  FF2,F
178E:  MOVLW  14
1790:  MOVLB  0
1792:  MOVWF  xEB
1794:  CALL   0AC0
....................    } 
....................    if(purga_minutos>59){ 
1798:  MOVF   22,W
179A:  SUBLW  3B
179C:  BC    17D6
....................       purga_minutos=2;write_eeprom(20,2);delay_ms(20); 
179E:  MOVLW  02
17A0:  MOVWF  22
17A2:  MOVLW  14
17A4:  MOVWF  FA9
17A6:  MOVLW  02
17A8:  MOVWF  FA8
17AA:  BCF    FA6.6
17AC:  BCF    FA6.7
17AE:  BSF    FA6.2
17B0:  MOVF   FF2,W
17B2:  MOVWF  00
17B4:  BCF    FF2.7
17B6:  MOVLB  F
17B8:  MOVLW  55
17BA:  MOVWF  FA7
17BC:  MOVLW  AA
17BE:  MOVWF  FA7
17C0:  BSF    FA6.1
17C2:  BTFSC  FA6.1
17C4:  BRA    17C2
17C6:  BCF    FA6.2
17C8:  MOVF   00,W
17CA:  IORWF  FF2,F
17CC:  MOVLW  14
17CE:  MOVLB  0
17D0:  MOVWF  xEB
17D2:  CALL   0AC0
....................    } 
....................    if(purga_segundos>59){ 
17D6:  MOVF   35,W
17D8:  SUBLW  3B
17DA:  BC    1810
....................       purga_segundos=0;write_eeprom(21,0);delay_ms(20); 
17DC:  CLRF   35
17DE:  MOVLW  15
17E0:  MOVWF  FA9
17E2:  CLRF   FA8
17E4:  BCF    FA6.6
17E6:  BCF    FA6.7
17E8:  BSF    FA6.2
17EA:  MOVF   FF2,W
17EC:  MOVWF  00
17EE:  BCF    FF2.7
17F0:  MOVLB  F
17F2:  MOVLW  55
17F4:  MOVWF  FA7
17F6:  MOVLW  AA
17F8:  MOVWF  FA7
17FA:  BSF    FA6.1
17FC:  BTFSC  FA6.1
17FE:  BRA    17FC
1800:  BCF    FA6.2
1802:  MOVF   00,W
1804:  IORWF  FF2,F
1806:  MOVLW  14
1808:  MOVLB  0
180A:  MOVWF  xEB
180C:  CALL   0AC0
....................    } 
....................    if(ppurga_minutos>59){ 
1810:  MOVF   39,W
1812:  SUBLW  3B
1814:  BC    184E
....................       ppurga_minutos=2;write_eeprom(22,2);delay_ms(20); 
1816:  MOVLW  02
1818:  MOVWF  39
181A:  MOVLW  16
181C:  MOVWF  FA9
181E:  MOVLW  02
1820:  MOVWF  FA8
1822:  BCF    FA6.6
1824:  BCF    FA6.7
1826:  BSF    FA6.2
1828:  MOVF   FF2,W
182A:  MOVWF  00
182C:  BCF    FF2.7
182E:  MOVLB  F
1830:  MOVLW  55
1832:  MOVWF  FA7
1834:  MOVLW  AA
1836:  MOVWF  FA7
1838:  BSF    FA6.1
183A:  BTFSC  FA6.1
183C:  BRA    183A
183E:  BCF    FA6.2
1840:  MOVF   00,W
1842:  IORWF  FF2,F
1844:  MOVLW  14
1846:  MOVLB  0
1848:  MOVWF  xEB
184A:  CALL   0AC0
....................    } 
....................    if(ppurga_segundos>59){ 
184E:  MOVF   37,W
1850:  SUBLW  3B
1852:  BC    1888
....................       ppurga_segundos=0;write_eeprom(23,0);delay_ms(20); 
1854:  CLRF   37
1856:  MOVLW  17
1858:  MOVWF  FA9
185A:  CLRF   FA8
185C:  BCF    FA6.6
185E:  BCF    FA6.7
1860:  BSF    FA6.2
1862:  MOVF   FF2,W
1864:  MOVWF  00
1866:  BCF    FF2.7
1868:  MOVLB  F
186A:  MOVLW  55
186C:  MOVWF  FA7
186E:  MOVLW  AA
1870:  MOVWF  FA7
1872:  BSF    FA6.1
1874:  BTFSC  FA6.1
1876:  BRA    1874
1878:  BCF    FA6.2
187A:  MOVF   00,W
187C:  IORWF  FF2,F
187E:  MOVLW  14
1880:  MOVLB  0
1882:  MOVWF  xEB
1884:  CALL   0AC0
....................    } 
....................    if(Ajuste1>20.0){ 
1888:  CLRF   xD7
188A:  CLRF   xD6
188C:  MOVLW  20
188E:  MOVWF  xD5
1890:  MOVLW  83
1892:  MOVWF  xD4
1894:  MOVFF  9B,DB
1898:  MOVFF  9A,DA
189C:  MOVFF  99,D9
18A0:  MOVFF  98,D8
18A4:  RCALL  1542
18A6:  BNC   1918
....................       Ajuste1=1.0;write_eeprom(25,1);delay_ms(20);write_eeprom(26,0);delay_ms(20); 
18A8:  CLRF   x9B
18AA:  CLRF   x9A
18AC:  CLRF   x99
18AE:  MOVLW  7F
18B0:  MOVWF  x98
18B2:  MOVLW  19
18B4:  MOVWF  FA9
18B6:  MOVLW  01
18B8:  MOVWF  FA8
18BA:  BCF    FA6.6
18BC:  BCF    FA6.7
18BE:  BSF    FA6.2
18C0:  MOVF   FF2,W
18C2:  MOVWF  00
18C4:  BCF    FF2.7
18C6:  MOVLB  F
18C8:  MOVLW  55
18CA:  MOVWF  FA7
18CC:  MOVLW  AA
18CE:  MOVWF  FA7
18D0:  BSF    FA6.1
18D2:  BTFSC  FA6.1
18D4:  BRA    18D2
18D6:  BCF    FA6.2
18D8:  MOVF   00,W
18DA:  IORWF  FF2,F
18DC:  MOVLW  14
18DE:  MOVLB  0
18E0:  MOVWF  xEB
18E2:  CALL   0AC0
18E6:  MOVLW  1A
18E8:  MOVWF  FA9
18EA:  CLRF   FA8
18EC:  BCF    FA6.6
18EE:  BCF    FA6.7
18F0:  BSF    FA6.2
18F2:  MOVF   FF2,W
18F4:  MOVWF  00
18F6:  BCF    FF2.7
18F8:  MOVLB  F
18FA:  MOVLW  55
18FC:  MOVWF  FA7
18FE:  MOVLW  AA
1900:  MOVWF  FA7
1902:  BSF    FA6.1
1904:  BTFSC  FA6.1
1906:  BRA    1904
1908:  BCF    FA6.2
190A:  MOVF   00,W
190C:  IORWF  FF2,F
190E:  MOVLW  14
1910:  MOVLB  0
1912:  MOVWF  xEB
1914:  CALL   0AC0
....................    } 
....................    if(setpoint>2.0){ 
1918:  CLRF   xD7
191A:  CLRF   xD6
191C:  CLRF   xD5
191E:  MOVLW  80
1920:  MOVWF  xD4
1922:  MOVFF  4D,DB
1926:  MOVFF  4C,DA
192A:  MOVFF  4B,D9
192E:  MOVFF  4A,D8
1932:  RCALL  1542
1934:  BNC   19AC
....................       setpoint=0.6;write_eeprom(40,0);delay_ms(20);write_eeprom(41,6);delay_ms(20); 
1936:  MOVLW  9A
1938:  MOVWF  4D
193A:  MOVLW  99
193C:  MOVWF  4C
193E:  MOVLW  19
1940:  MOVWF  4B
1942:  MOVLW  7E
1944:  MOVWF  4A
1946:  MOVLW  28
1948:  MOVWF  FA9
194A:  CLRF   FA8
194C:  BCF    FA6.6
194E:  BCF    FA6.7
1950:  BSF    FA6.2
1952:  MOVF   FF2,W
1954:  MOVWF  00
1956:  BCF    FF2.7
1958:  MOVLB  F
195A:  MOVLW  55
195C:  MOVWF  FA7
195E:  MOVLW  AA
1960:  MOVWF  FA7
1962:  BSF    FA6.1
1964:  BTFSC  FA6.1
1966:  BRA    1964
1968:  BCF    FA6.2
196A:  MOVF   00,W
196C:  IORWF  FF2,F
196E:  MOVLW  14
1970:  MOVLB  0
1972:  MOVWF  xEB
1974:  CALL   0AC0
1978:  MOVLW  29
197A:  MOVWF  FA9
197C:  MOVLW  06
197E:  MOVWF  FA8
1980:  BCF    FA6.6
1982:  BCF    FA6.7
1984:  BSF    FA6.2
1986:  MOVF   FF2,W
1988:  MOVWF  00
198A:  BCF    FF2.7
198C:  MOVLB  F
198E:  MOVLW  55
1990:  MOVWF  FA7
1992:  MOVLW  AA
1994:  MOVWF  FA7
1996:  BSF    FA6.1
1998:  BTFSC  FA6.1
199A:  BRA    1998
199C:  BCF    FA6.2
199E:  MOVF   00,W
19A0:  IORWF  FF2,F
19A2:  MOVLW  14
19A4:  MOVLB  0
19A6:  MOVWF  xEB
19A8:  CALL   0AC0
....................    } 
....................    if(MediaMovil>12){ 
19AC:  MOVF   2B,W
19AE:  SUBLW  0C
19B0:  BC    19EA
....................       MediaMovil=10;write_eeprom(42,10);delay_ms(20); 
19B2:  MOVLW  0A
19B4:  MOVWF  2B
19B6:  MOVLW  2A
19B8:  MOVWF  FA9
19BA:  MOVLW  0A
19BC:  MOVWF  FA8
19BE:  BCF    FA6.6
19C0:  BCF    FA6.7
19C2:  BSF    FA6.2
19C4:  MOVF   FF2,W
19C6:  MOVWF  00
19C8:  BCF    FF2.7
19CA:  MOVLB  F
19CC:  MOVLW  55
19CE:  MOVWF  FA7
19D0:  MOVLW  AA
19D2:  MOVWF  FA7
19D4:  BSF    FA6.1
19D6:  BTFSC  FA6.1
19D8:  BRA    19D6
19DA:  BCF    FA6.2
19DC:  MOVF   00,W
19DE:  IORWF  FF2,F
19E0:  MOVLW  14
19E2:  MOVLB  0
19E4:  MOVWF  xEB
19E6:  CALL   0AC0
....................    } 
....................    if(negativo>20){ 
19EA:  MOVF   2C,W
19EC:  SUBLW  14
19EE:  BC    1A28
....................       negativo=10;write_eeprom(50,10);delay_ms(20); 
19F0:  MOVLW  0A
19F2:  MOVWF  2C
19F4:  MOVLW  32
19F6:  MOVWF  FA9
19F8:  MOVLW  0A
19FA:  MOVWF  FA8
19FC:  BCF    FA6.6
19FE:  BCF    FA6.7
1A00:  BSF    FA6.2
1A02:  MOVF   FF2,W
1A04:  MOVWF  00
1A06:  BCF    FF2.7
1A08:  MOVLB  F
1A0A:  MOVLW  55
1A0C:  MOVWF  FA7
1A0E:  MOVLW  AA
1A10:  MOVWF  FA7
1A12:  BSF    FA6.1
1A14:  BTFSC  FA6.1
1A16:  BRA    1A14
1A18:  BCF    FA6.2
1A1A:  MOVF   00,W
1A1C:  IORWF  FF2,F
1A1E:  MOVLW  14
1A20:  MOVLB  0
1A22:  MOVWF  xEB
1A24:  CALL   0AC0
....................    } 
....................    if(Diferencia>600){ 
1A28:  CLRF   xD7
1A2A:  CLRF   xD6
1A2C:  MOVLW  16
1A2E:  MOVWF  xD5
1A30:  MOVLW  88
1A32:  MOVWF  xD4
1A34:  MOVFF  97,DB
1A38:  MOVFF  96,DA
1A3C:  MOVFF  95,D9
1A40:  MOVFF  94,D8
1A44:  RCALL  1542
1A46:  BNC   1AB4
....................       Diferencia=0;write_eeprom(60,0);delay_ms(20);write_eeprom(61,0);delay_ms(20); 
1A48:  CLRF   x97
1A4A:  CLRF   x96
1A4C:  CLRF   x95
1A4E:  CLRF   x94
1A50:  MOVLW  3C
1A52:  MOVWF  FA9
1A54:  CLRF   FA8
1A56:  BCF    FA6.6
1A58:  BCF    FA6.7
1A5A:  BSF    FA6.2
1A5C:  MOVF   FF2,W
1A5E:  MOVWF  00
1A60:  BCF    FF2.7
1A62:  MOVLB  F
1A64:  MOVLW  55
1A66:  MOVWF  FA7
1A68:  MOVLW  AA
1A6A:  MOVWF  FA7
1A6C:  BSF    FA6.1
1A6E:  BTFSC  FA6.1
1A70:  BRA    1A6E
1A72:  BCF    FA6.2
1A74:  MOVF   00,W
1A76:  IORWF  FF2,F
1A78:  MOVLW  14
1A7A:  MOVLB  0
1A7C:  MOVWF  xEB
1A7E:  CALL   0AC0
1A82:  MOVLW  3D
1A84:  MOVWF  FA9
1A86:  CLRF   FA8
1A88:  BCF    FA6.6
1A8A:  BCF    FA6.7
1A8C:  BSF    FA6.2
1A8E:  MOVF   FF2,W
1A90:  MOVWF  00
1A92:  BCF    FF2.7
1A94:  MOVLB  F
1A96:  MOVLW  55
1A98:  MOVWF  FA7
1A9A:  MOVLW  AA
1A9C:  MOVWF  FA7
1A9E:  BSF    FA6.1
1AA0:  BTFSC  FA6.1
1AA2:  BRA    1AA0
1AA4:  BCF    FA6.2
1AA6:  MOVF   00,W
1AA8:  IORWF  FF2,F
1AAA:  MOVLW  14
1AAC:  MOVLB  0
1AAE:  MOVWF  xEB
1AB0:  CALL   0AC0
....................    } 
....................    if(segundos>60){ 
1AB4:  MOVF   31,W
1AB6:  SUBLW  3C
1AB8:  BC    1AEE
....................       segundos=0;write_eeprom(70,0);delay_ms(20); 
1ABA:  CLRF   31
1ABC:  MOVLW  46
1ABE:  MOVWF  FA9
1AC0:  CLRF   FA8
1AC2:  BCF    FA6.6
1AC4:  BCF    FA6.7
1AC6:  BSF    FA6.2
1AC8:  MOVF   FF2,W
1ACA:  MOVWF  00
1ACC:  BCF    FF2.7
1ACE:  MOVLB  F
1AD0:  MOVLW  55
1AD2:  MOVWF  FA7
1AD4:  MOVLW  AA
1AD6:  MOVWF  FA7
1AD8:  BSF    FA6.1
1ADA:  BTFSC  FA6.1
1ADC:  BRA    1ADA
1ADE:  BCF    FA6.2
1AE0:  MOVF   00,W
1AE2:  IORWF  FF2,F
1AE4:  MOVLW  14
1AE6:  MOVLB  0
1AE8:  MOVWF  xEB
1AEA:  CALL   0AC0
....................    } 
....................    if(minutos>60){ 
1AEE:  MOVF   32,W
1AF0:  SUBLW  3C
1AF2:  BC    1B28
....................       minutos=0;write_eeprom(71,0);delay_ms(20); 
1AF4:  CLRF   32
1AF6:  MOVLW  47
1AF8:  MOVWF  FA9
1AFA:  CLRF   FA8
1AFC:  BCF    FA6.6
1AFE:  BCF    FA6.7
1B00:  BSF    FA6.2
1B02:  MOVF   FF2,W
1B04:  MOVWF  00
1B06:  BCF    FF2.7
1B08:  MOVLB  F
1B0A:  MOVLW  55
1B0C:  MOVWF  FA7
1B0E:  MOVLW  AA
1B10:  MOVWF  FA7
1B12:  BSF    FA6.1
1B14:  BTFSC  FA6.1
1B16:  BRA    1B14
1B18:  BCF    FA6.2
1B1A:  MOVF   00,W
1B1C:  IORWF  FF2,F
1B1E:  MOVLW  14
1B20:  MOVLB  0
1B22:  MOVWF  xEB
1B24:  CALL   0AC0
....................    } 
....................    if(flag_filtro>1){ 
1B28:  MOVLW  00
1B2A:  BTFSC  3D.2
1B2C:  MOVLW  01
1B2E:  SUBLW  01
1B30:  BC    1B66
....................       flag_filtro=0;write_eeprom(73,0);delay_ms(20); 
1B32:  BCF    3D.2
1B34:  MOVLW  49
1B36:  MOVWF  FA9
1B38:  CLRF   FA8
1B3A:  BCF    FA6.6
1B3C:  BCF    FA6.7
1B3E:  BSF    FA6.2
1B40:  MOVF   FF2,W
1B42:  MOVWF  00
1B44:  BCF    FF2.7
1B46:  MOVLB  F
1B48:  MOVLW  55
1B4A:  MOVWF  FA7
1B4C:  MOVLW  AA
1B4E:  MOVWF  FA7
1B50:  BSF    FA6.1
1B52:  BTFSC  FA6.1
1B54:  BRA    1B52
1B56:  BCF    FA6.2
1B58:  MOVF   00,W
1B5A:  IORWF  FF2,F
1B5C:  MOVLW  14
1B5E:  MOVLB  0
1B60:  MOVWF  xEB
1B62:  CALL   0AC0
....................    } 
.................... } 
1B66:  GOTO   2988 (RETURN)
....................  
.................... void EnciendeMotor(void){ 
....................    if(!input_state(PIN_B5)){ 
*
22A2:  BTFSC  F81.5
22A4:  BRA    22BA
....................       delay_ms(100); 
22A6:  MOVLW  64
22A8:  MOVWF  xEB
22AA:  CALL   0AC0
....................       lcd_init(); 
22AE:  CALL   0B7E
....................       delay_ms(100); 
22B2:  MOVLW  64
22B4:  MOVWF  xEB
22B6:  CALL   0AC0
....................    } 
....................    Motor_on; 
22BA:  BSF    F8A.5
22BC:  BCF    F93.5
.................... } 
22BE:  RETLW  00
....................  
.................... void ApagaMotor(void){ 
....................    if(input_state(PIN_B5)){ 
*
2284:  BTFSS  F81.5
2286:  BRA    229C
....................       delay_ms(100); 
2288:  MOVLW  64
228A:  MOVWF  xEB
228C:  CALL   0AC0
....................       lcd_init(); 
2290:  CALL   0B7E
....................       delay_ms(100); 
2294:  MOVLW  64
2296:  MOVWF  xEB
2298:  CALL   0AC0
....................    } 
....................    Motor_off; 
229C:  BCF    F8A.5
229E:  BCF    F93.5
.................... } 
22A0:  RETLW  00
....................  
.................... void MensajeGuardado(void){ 
....................    printf(lcd_putc,"\f"); 
*
21B0:  MOVLW  0C
21B2:  MOVWF  xE5
21B4:  CALL   0C48
....................    lcd_gotoxy(1,2); 
21B8:  MOVLW  01
21BA:  MOVWF  xE6
21BC:  MOVLW  02
21BE:  MOVWF  xE7
21C0:  CALL   0BD6
....................    printf(lcd_putc," !Valor Almacenado  "); 
21C4:  MOVLW  90
21C6:  MOVWF  FF6
21C8:  MOVLW  01
21CA:  MOVWF  FF7
21CC:  RCALL  1B6A
....................    lcd_gotoxy(1,4); 
21CE:  MOVLW  01
21D0:  MOVWF  xE6
21D2:  MOVLW  04
21D4:  MOVWF  xE7
21D6:  CALL   0BD6
....................    printf(lcd_putc,"                    "); 
21DA:  MOVLW  A6
21DC:  MOVWF  FF6
21DE:  MOVLW  01
21E0:  MOVWF  FF7
21E2:  RCALL  1B6A
....................    lcd_gotoxy(1,3); 
21E4:  MOVLW  01
21E6:  MOVWF  xE6
21E8:  MOVLW  03
21EA:  MOVWF  xE7
21EC:  CALL   0BD6
....................    printf(lcd_putc,"    Correctamente!  "); 
21F0:  MOVLW  BC
21F2:  MOVWF  FF6
21F4:  MOVLW  01
21F6:  MOVWF  FF7
21F8:  RCALL  1B6A
....................    lcd_gotoxy(1,1); 
21FA:  MOVLW  01
21FC:  MOVWF  xE6
21FE:  MOVWF  xE7
2200:  CALL   0BD6
....................    printf(lcd_putc,"                    "); 
2204:  MOVLW  D2
2206:  MOVWF  FF6
2208:  MOVLW  01
220A:  MOVWF  FF7
220C:  RCALL  1B6A
....................    delay_ms(2000); 
220E:  MOVLW  08
2210:  MOVWF  xD0
2212:  MOVLW  FA
2214:  MOVWF  xEB
2216:  CALL   0AC0
221A:  DECFSZ xD0,F
221C:  BRA    2212
....................    printf(lcd_putc,"\f"); 
221E:  MOVLW  0C
2220:  MOVWF  xE5
2222:  CALL   0C48
.................... } 
2226:  RETLW  00
....................  
.................... void Refresco(void){ 
....................    delay_ms(100); 
....................    lcd_init(); 
....................    delay_ms(100); 
.................... } 
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    #ifdef SIMU 
....................    set_timer1(60536);  // 5  ms 
....................    #else 
....................    set_timer1(5536);  // 5  ms 
*
01E8:  MOVLW  15
01EA:  MOVWF  FCF
01EC:  MOVLW  A0
01EE:  MOVWF  FCE
....................    #endif 
....................    tiempos++; 
01F0:  INCF   53,F
01F2:  BTFSC  FD8.2
01F4:  INCF   54,F
....................    tiempos2++; 
01F6:  INCF   57,F
01F8:  BTFSC  FD8.2
01FA:  INCF   58,F
....................     
....................    if(t_latencia>=3000) 
01FC:  MOVF   56,W
01FE:  SUBLW  0A
0200:  BC    020E
0202:  XORLW  FF
0204:  BNZ   020C
0206:  MOVF   55,W
0208:  SUBLW  B7
020A:  BC    020E
....................       Latencia=1; 
020C:  BSF    3D.1
....................     
....................    if(flag_latencia==1) 
020E:  BTFSS  3D.0
0210:  BRA    0218
....................       t_latencia++;          
0212:  INCF   55,F
0214:  BTFSC  FD8.2
0216:  INCF   56,F
....................     
....................    if(tiempos2==200){ 
0218:  MOVF   57,W
021A:  SUBLW  C8
021C:  BNZ   0228
021E:  MOVF   58,F
0220:  BNZ   0228
....................       tiempos2=0;Lectura2=1; 
0222:  CLRF   58
0224:  CLRF   57
0226:  BSF    3D.7
....................    } 
....................     
....................    if(tiempos==200){   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
0228:  MOVF   53,W
022A:  SUBLW  C8
022C:  BNZ   0298
022E:  MOVF   54,F
0230:  BNZ   0298
....................       tiempos=0;tiemporeset++; 
0232:  CLRF   54
0234:  CLRF   53
0236:  INCF   34,F
....................       Lectura=1; 
0238:  BSF    3D.6
....................           
....................       if(estadomv==1 && flag_filtro==1){   
023A:  BTFSS  3C.1
023C:  BRA    0258
023E:  BTFSS  3D.2
0240:  BRA    0258
....................          segundos++; 
0242:  INCF   31,F
....................          if(segundos==60){ 
0244:  MOVF   31,W
0246:  SUBLW  3C
0248:  BNZ   024E
....................             segundos=0;minutos++; 
024A:  CLRF   31
024C:  INCF   32,F
....................          }  
....................          if(minutos==60){ 
024E:  MOVF   32,W
0250:  SUBLW  3C
0252:  BNZ   0258
....................             minutos=0;horas++; 
0254:  CLRF   32
0256:  INCF   33,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1){ 
0258:  BTFSS  52.5
025A:  BRA    027E
....................          if(purga_segundos>0){ 
025C:  MOVF   35,F
025E:  BZ    0264
....................             purga_segundos--; 
0260:  DECF   35,F
....................          }else{ 
0262:  BRA    027E
....................             if(purga_minutos>0){ 
0264:  MOVF   22,F
0266:  BZ    0270
....................                purga_minutos--; 
0268:  DECF   22,F
....................                purga_segundos=59; 
026A:  MOVLW  3B
026C:  MOVWF  35
....................             }else{ 
026E:  BRA    027E
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0; 
0270:  BCF    52.5
....................                //Motor_on; 
....................                //EnciendeMotor(); 
....................                Menu=20; 
0272:  MOVLW  14
0274:  MOVWF  17
....................                Luz_Blanca_on; 
0276:  BSF    F8A.4
0278:  BCF    F93.4
....................                estadomv=1; 
027A:  BSF    3C.1
....................                estadofl=1; 
027C:  BSF    3C.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1){ 
027E:  BTFSS  52.6
0280:  BRA    0298
....................          if(ppurga_segundos>0){ 
0282:  MOVF   37,F
0284:  BZ    028A
....................             ppurga_segundos--; 
0286:  DECF   37,F
....................          }else{ 
0288:  BRA    0298
....................             if(ppurga_minutos>0){ 
028A:  MOVF   39,F
028C:  BZ    0296
....................                ppurga_minutos--; 
028E:  DECF   39,F
....................                ppurga_segundos=59; 
0290:  MOVLW  3B
0292:  MOVWF  37
....................             }else{ 
0294:  BRA    0298
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0296:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0298:  BCF    F9E.0
029A:  GOTO   0054
.................... void main () 
.................... {   
*
278E:  CLRF   FF8
2790:  BCF    FD0.7
2792:  BSF    07.7
2794:  CLRF   FEA
2796:  CLRF   FE9
2798:  MOVLW  64
279A:  MOVWF  17
279C:  MOVLW  0B
279E:  MOVWF  18
27A0:  MOVLW  02
27A2:  MOVWF  19
27A4:  MOVLW  0B
27A6:  MOVWF  1A
27A8:  MOVLW  02
27AA:  MOVWF  1B
27AC:  MOVLW  03
27AE:  MOVWF  1C
27B0:  MOVLW  02
27B2:  MOVWF  1D
27B4:  MOVWF  1E
27B6:  MOVLW  04
27B8:  MOVWF  1F
27BA:  MOVLW  0A
27BC:  MOVWF  20
27BE:  MOVLW  01
27C0:  MOVWF  21
27C2:  CLRF   22
27C4:  CLRF   23
27C6:  CLRF   24
27C8:  CLRF   25
27CA:  CLRF   26
27CC:  CLRF   27
27CE:  CLRF   28
27D0:  CLRF   29
27D2:  MOVLW  0A
27D4:  MOVWF  2A
27D6:  CLRF   2B
27D8:  MOVWF  2C
27DA:  MOVWF  2D
27DC:  MOVWF  2E
27DE:  MOVWF  2F
27E0:  CLRF   30
27E2:  CLRF   31
27E4:  CLRF   32
27E6:  CLRF   33
27E8:  CLRF   34
27EA:  CLRF   35
27EC:  CLRF   36
27EE:  CLRF   37
27F0:  CLRF   38
27F2:  CLRF   39
27F4:  CLRF   3A
27F6:  CLRF   3B
27F8:  BCF    3C.0
27FA:  BCF    3C.1
27FC:  BCF    3C.2
27FE:  BCF    3C.3
2800:  BCF    3C.4
2802:  BCF    3C.5
2804:  BCF    3C.6
2806:  BCF    3C.7
2808:  BCF    3D.0
280A:  BCF    3D.1
280C:  BCF    3D.2
280E:  BCF    3D.3
2810:  BCF    3D.4
2812:  CLRF   3E
2814:  CLRF   4D
2816:  CLRF   4C
2818:  CLRF   4B
281A:  CLRF   4A
281C:  CLRF   51
281E:  CLRF   50
2820:  MOVLW  4B
2822:  MOVWF  4F
2824:  MOVLW  86
2826:  MOVWF  4E
2828:  BCF    3D.6
282A:  BCF    3D.7
282C:  BCF    52.0
282E:  BCF    52.1
2830:  BCF    52.2
2832:  BCF    52.3
2834:  BCF    52.4
2836:  BCF    52.5
2838:  BCF    52.6
283A:  CLRF   54
283C:  CLRF   53
283E:  CLRF   56
2840:  CLRF   55
2842:  CLRF   58
2844:  CLRF   57
2846:  CLRF   5A
2848:  CLRF   59
284A:  MOVLW  19
284C:  MOVWF  5F
284E:  MOVLW  53
2850:  MOVWF  5E
2852:  MOVLW  18
2854:  MOVWF  5D
2856:  MOVLW  68
2858:  MOVWF  5C
285A:  MOVLW  E9
285C:  MOVWF  x63
285E:  MOVLW  BD
2860:  MOVWF  x62
2862:  MOVLW  C6
2864:  MOVWF  x61
2866:  MOVLW  71
2868:  MOVWF  x60
286A:  MOVLW  BE
286C:  MOVWF  x67
286E:  MOVLW  96
2870:  MOVWF  x66
2872:  MOVLW  24
2874:  MOVWF  x65
2876:  MOVLW  7A
2878:  MOVWF  x64
287A:  MOVLW  F3
287C:  MOVWF  x6B
287E:  MOVLW  5A
2880:  MOVWF  x6A
2882:  MOVLW  AB
2884:  MOVWF  x69
2886:  MOVLW  81
2888:  MOVWF  x68
288A:  CLRF   x6F
288C:  CLRF   x6E
288E:  CLRF   x6D
2890:  CLRF   x6C
2892:  CLRF   x73
2894:  CLRF   x72
2896:  CLRF   x71
2898:  CLRF   x70
289A:  CLRF   x77
289C:  CLRF   x76
289E:  CLRF   x75
28A0:  CLRF   x74
28A2:  CLRF   x7B
28A4:  CLRF   x7A
28A6:  CLRF   x79
28A8:  CLRF   x78
28AA:  CLRF   x7F
28AC:  CLRF   x7E
28AE:  CLRF   x7D
28B0:  CLRF   x7C
28B2:  CLRF   x83
28B4:  CLRF   x82
28B6:  CLRF   x81
28B8:  CLRF   x80
28BA:  CLRF   x87
28BC:  CLRF   x86
28BE:  CLRF   x85
28C0:  CLRF   x84
28C2:  CLRF   x8B
28C4:  CLRF   x8A
28C6:  CLRF   x89
28C8:  CLRF   x88
28CA:  CLRF   x8F
28CC:  CLRF   x8E
28CE:  CLRF   x8D
28D0:  CLRF   x8C
28D2:  CLRF   x93
28D4:  CLRF   x92
28D6:  CLRF   x91
28D8:  CLRF   x90
28DA:  CLRF   x97
28DC:  CLRF   x96
28DE:  CLRF   x95
28E0:  CLRF   x94
28E2:  CLRF   x9B
28E4:  CLRF   x9A
28E6:  CLRF   x99
28E8:  MOVLW  7F
28EA:  MOVWF  x98
28EC:  CLRF   x9F
28EE:  CLRF   x9E
28F0:  CLRF   x9D
28F2:  CLRF   x9C
28F4:  MOVF   FC1,W
28F6:  ANDLW  C0
28F8:  IORLW  0F
28FA:  MOVWF  FC1
28FC:  MOVLW  07
28FE:  MOVWF  FB4
2900:  MOVLW  3E
2902:  MOVWF  3F
2904:  MOVLW  20
2906:  MOVWF  40
2908:  MOVLW  5E
290A:  MOVWF  41
290C:  CLRF   42
290E:  CLRF   43
2910:  CLRF   44
2912:  CLRF   45
2914:  CLRF   46
2916:  CLRF   47
2918:  CLRF   48
291A:  CLRF   49
291C:  CLRF   xA0
291E:  CLRF   xA1
2920:  CLRF   xA2
2922:  CLRF   xA3
2924:  CLRF   xA4
2926:  CLRF   xA5
2928:  CLRF   xA6
292A:  CLRF   xA7
292C:  CLRF   xA8
292E:  CLRF   xA9
2930:  CLRF   xAA
2932:  CLRF   xAB
2934:  CLRF   xAC
2936:  CLRF   xAD
2938:  CLRF   xAE
293A:  CLRF   xAF
293C:  CLRF   xB0
293E:  CLRF   xB1
2940:  CLRF   xB2
2942:  CLRF   xB3
2944:  CLRF   xB4
2946:  CLRF   xB5
2948:  CLRF   xB6
294A:  CLRF   xB7
294C:  CLRF   xB8
294E:  CLRF   xB9
2950:  CLRF   xBA
2952:  CLRF   xBB
2954:  CLRF   xBC
2956:  CLRF   xBD
2958:  CLRF   xBE
295A:  CLRF   xBF
295C:  CLRF   xC0
295E:  CLRF   xC1
2960:  CLRF   xC2
2962:  CLRF   xC3
2964:  CLRF   xC4
2966:  CLRF   xC5
2968:  CLRF   xC6
296A:  CLRF   xC7
296C:  CLRF   xC8
296E:  CLRF   xC9
2970:  CLRF   xCA
2972:  CLRF   xCB
2974:  CLRF   xCC
2976:  CLRF   xCD
2978:  CLRF   xCE
297A:  CLRF   xCF
....................    ConfigInicial(); 
297C:  GOTO   0CAA
....................    LeeEEPROM();             
2980:  GOTO   10EE
....................    LimitaValores();  
2984:  GOTO   15B8
....................    Menu=200; 
2988:  MOVLW  C8
298A:  MOVWF  17
....................    SalidasOff(); 
298C:  CALL   0A9C
....................    while(true){ 
....................  
....................    while(Menu==200){ 
2990:  MOVF   17,W
2992:  SUBLW  C8
2994:  BNZ   2A4C
....................       SalidasOff(); 
2996:  CALL   0A9C
....................       if(RIGHT){ 
299A:  BSF    F96.1
299C:  BTFSS  F84.1
299E:  BRA    2A4A
....................          delay_ms(1000); 
29A0:  MOVLW  04
29A2:  MOVWF  xD0
29A4:  MOVLW  FA
29A6:  MOVWF  xEB
29A8:  CALL   0AC0
29AC:  DECFSZ xD0,F
29AE:  BRA    29A4
....................          if(RIGHT){    
29B0:  BSF    F96.1
29B2:  BTFSS  F84.1
29B4:  BRA    2A4A
....................             lcd_init(); 
29B6:  CALL   0B7E
....................             intensidadpantalla(1); 
29BA:  MOVLW  01
29BC:  MOVWF  xD0
29BE:  CALL   0AB0
....................             lcd_gotoxy(1,1); 
29C2:  MOVLW  01
29C4:  MOVWF  xE6
29C6:  MOVWF  xE7
29C8:  CALL   0BD6
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
29CC:  MOVLW  9E
29CE:  MOVWF  FF6
29D0:  MOVLW  02
29D2:  MOVWF  FF7
29D4:  CALL   1B6A
....................             lcd_gotoxy(1,2); 
29D8:  MOVLW  01
29DA:  MOVWF  xE6
29DC:  MOVLW  02
29DE:  MOVWF  xE7
29E0:  CALL   0BD6
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
29E4:  MOVLW  B4
29E6:  MOVWF  FF6
29E8:  MOVLW  02
29EA:  MOVWF  FF7
29EC:  CALL   1B6A
....................             lcd_gotoxy(1,3); 
29F0:  MOVLW  01
29F2:  MOVWF  xE6
29F4:  MOVLW  03
29F6:  MOVWF  xE7
29F8:  CALL   0BD6
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
29FC:  MOVLW  CA
29FE:  MOVWF  FF6
2A00:  MOVLW  02
2A02:  MOVWF  FF7
2A04:  CALL   1B6A
....................             lcd_gotoxy(1,4); 
2A08:  MOVLW  01
2A0A:  MOVWF  xE6
2A0C:  MOVLW  04
2A0E:  MOVWF  xE7
2A10:  CALL   0BD6
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
2A14:  MOVLW  E0
2A16:  MOVWF  FF6
2A18:  MOVLW  02
2A1A:  MOVWF  FF7
2A1C:  CALL   1B6A
....................             delay_ms(2000); 
2A20:  MOVLW  08
2A22:  MOVWF  xD0
2A24:  MOVLW  FA
2A26:  MOVWF  xEB
2A28:  CALL   0AC0
2A2C:  DECFSZ xD0,F
2A2E:  BRA    2A24
....................             printf(lcd_putc,"\f"); 
2A30:  MOVLW  0C
2A32:  MOVWF  xE5
2A34:  CALL   0C48
....................             Menu=0; 
2A38:  CLRF   17
....................             delay_ms(500); 
2A3A:  MOVLW  02
2A3C:  MOVWF  xD0
2A3E:  MOVLW  FA
2A40:  MOVWF  xEB
2A42:  CALL   0AC0
2A46:  DECFSZ xD0,F
2A48:  BRA    2A3E
....................          } 
....................       } 
....................    } 
2A4A:  BRA    2990
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2A4C:  MOVF   17,F
2A4E:  BTFSS  FD8.2
2A50:  BRA    2E78
....................       flag_latencia=1; 
2A52:  BSF    3D.0
....................       SalidasOff(); 
2A54:  CALL   0A9C
....................       if(Latencia==1){ 
2A58:  BTFSS  3D.1
2A5A:  BRA    2A66
....................          printf(lcd_putc,"\f");reset_cpu(); 
2A5C:  MOVLW  0C
2A5E:  MOVWF  xE5
2A60:  CALL   0C48
2A64:  RESET
....................       } 
....................       lcd_gotoxy(1,1); 
2A66:  MOVLW  01
2A68:  MOVWF  xE6
2A6A:  MOVWF  xE7
2A6C:  CALL   0BD6
....................       printf(lcd_putc,"     Ingrese        "); 
2A70:  MOVLW  F6
2A72:  MOVWF  FF6
2A74:  MOVLW  02
2A76:  MOVWF  FF7
2A78:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
2A7C:  MOVLW  01
2A7E:  MOVWF  xE6
2A80:  MOVLW  02
2A82:  MOVWF  xE7
2A84:  CALL   0BD6
....................       printf(lcd_putc,"    Contraseña      "); 
2A88:  MOVLW  0C
2A8A:  MOVWF  FF6
2A8C:  MOVLW  03
2A8E:  MOVWF  FF7
2A90:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
2A94:  MOVLW  01
2A96:  MOVWF  xE6
2A98:  MOVLW  03
2A9A:  MOVWF  xE7
2A9C:  CALL   0BD6
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2AA0:  MOVLW  22
2AA2:  MOVWF  FF6
2AA4:  MOVLW  03
2AA6:  MOVWF  FF7
2AA8:  MOVLW  0A
2AAA:  MOVWF  xD8
2AAC:  CALL   1B8C
2AB0:  MOVFF  42,D0
2AB4:  MOVLW  1F
2AB6:  MOVWF  xD1
2AB8:  CALL   1BD4
2ABC:  MOVFF  43,D0
2AC0:  MOVLW  1F
2AC2:  MOVWF  xD1
2AC4:  CALL   1BD4
2AC8:  MOVFF  44,D0
2ACC:  MOVLW  1F
2ACE:  MOVWF  xD1
2AD0:  CALL   1BD4
2AD4:  MOVFF  45,D0
2AD8:  MOVLW  1F
2ADA:  MOVWF  xD1
2ADC:  CALL   1BD4
2AE0:  MOVLW  20
2AE2:  MOVWF  xE5
2AE4:  CALL   0C48
2AE8:  MOVLW  20
2AEA:  MOVWF  xE5
2AEC:  CALL   0C48
....................    
....................       //letra=lcd_getc(5,3); 
....................        
....................       if(UP){//Si oprime hacia arriba 
2AF0:  BSF    F92.5
2AF2:  BTFSS  F80.5
2AF4:  BRA    2B2A
....................          delay_ms(20); 
2AF6:  MOVLW  14
2AF8:  MOVWF  xEB
2AFA:  CALL   0AC0
....................          if(UP && Flanco == 0){ 
2AFE:  BSF    F92.5
2B00:  BTFSS  F80.5
2B02:  BRA    2B28
2B04:  BTFSC  3C.4
2B06:  BRA    2B28
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0; 
2B08:  MOVLW  0B
2B0A:  SUBWF  1A,W
2B0C:  CLRF   03
2B0E:  ADDLW  42
2B10:  MOVWF  FE9
2B12:  MOVLW  00
2B14:  ADDWFC 03,W
2B16:  MOVWF  FEA
2B18:  INCF   FEF,F
2B1A:  BSF    3C.4
2B1C:  MOVLW  1E
2B1E:  MOVWF  xEB
2B20:  CALL   0AC0
2B24:  CLRF   56
2B26:  CLRF   55
....................          } 
....................       }else{ 
2B28:  BRA    2B2C
....................          Flanco = 0; 
2B2A:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2B2C:  BSF    F96.0
2B2E:  BTFSS  F84.0
2B30:  BRA    2B66
....................          delay_ms(20); 
2B32:  MOVLW  14
2B34:  MOVWF  xEB
2B36:  CALL   0AC0
....................          if(DOWN && Flanco2 == 0){ 
2B3A:  BSF    F96.0
2B3C:  BTFSS  F84.0
2B3E:  BRA    2B64
2B40:  BTFSC  3C.6
2B42:  BRA    2B64
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0; 
2B44:  MOVLW  0B
2B46:  SUBWF  1A,W
2B48:  CLRF   03
2B4A:  ADDLW  42
2B4C:  MOVWF  FE9
2B4E:  MOVLW  00
2B50:  ADDWFC 03,W
2B52:  MOVWF  FEA
2B54:  DECF   FEF,F
2B56:  BSF    3C.6
2B58:  MOVLW  1E
2B5A:  MOVWF  xEB
2B5C:  CALL   0AC0
2B60:  CLRF   56
2B62:  CLRF   55
....................          } 
....................       }else{ 
2B64:  BRA    2B68
....................          Flanco2 = 0; 
2B66:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2B68:  BSF    F96.1
2B6A:  BTFSS  F84.1
2B6C:  BRA    2B9A
....................          delay_ms(20); 
2B6E:  MOVLW  14
2B70:  MOVWF  xEB
2B72:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0){ 
2B76:  BSF    F96.1
2B78:  BTFSS  F84.1
2B7A:  BRA    2B98
2B7C:  BTFSC  3C.5
2B7E:  BRA    2B98
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
2B80:  BSF    3C.5
2B82:  INCF   1A,F
2B84:  MOVLW  1E
2B86:  MOVWF  xEB
2B88:  CALL   0AC0
2B8C:  MOVLW  0C
2B8E:  MOVWF  xE5
2B90:  CALL   0C48
2B94:  CLRF   56
2B96:  CLRF   55
....................          } 
....................       }else{ 
2B98:  BRA    2B9C
....................          Flanco1 = 0; 
2B9A:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si Oprime izquierda 
2B9C:  BSF    F96.2
2B9E:  BTFSS  F84.2
2BA0:  BRA    2BCE
....................          delay_ms(20); 
2BA2:  MOVLW  14
2BA4:  MOVWF  xEB
2BA6:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0){ 
2BAA:  BSF    F96.2
2BAC:  BTFSS  F84.2
2BAE:  BRA    2BCC
2BB0:  BTFSC  3C.7
2BB2:  BRA    2BCC
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
2BB4:  BSF    3C.7
2BB6:  DECF   1A,F
2BB8:  MOVLW  1E
2BBA:  MOVWF  xEB
2BBC:  CALL   0AC0
2BC0:  MOVLW  0C
2BC2:  MOVWF  xE5
2BC4:  CALL   0C48
2BC8:  CLRF   56
2BCA:  CLRF   55
....................          } 
....................       }else{ 
2BCC:  BRA    2BD0
....................          Flanco3 = 0; 
2BCE:  BCF    3C.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2BD0:  MOVLW  0B
2BD2:  SUBWF  1A,W
2BD4:  CLRF   03
2BD6:  ADDLW  42
2BD8:  MOVWF  FE9
2BDA:  MOVLW  00
2BDC:  ADDWFC 03,W
2BDE:  MOVWF  FEA
2BE0:  BTFSC  FEF.7
2BE2:  BRA    2BE6
2BE4:  BRA    2BFA
....................          clave[unidad-11]=9; 
2BE6:  MOVLW  0B
2BE8:  SUBWF  1A,W
2BEA:  CLRF   03
2BEC:  ADDLW  42
2BEE:  MOVWF  FE9
2BF0:  MOVLW  00
2BF2:  ADDWFC 03,W
2BF4:  MOVWF  FEA
2BF6:  MOVLW  09
2BF8:  MOVWF  FEF
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2BFA:  MOVLW  0B
2BFC:  SUBWF  1A,W
2BFE:  CLRF   03
2C00:  ADDLW  42
2C02:  MOVWF  FE9
2C04:  MOVLW  00
2C06:  ADDWFC 03,W
2C08:  MOVWF  FEA
2C0A:  BTFSC  FEF.7
2C0C:  BRA    2C26
2C0E:  MOVF   FEF,W
2C10:  SUBLW  09
2C12:  BC    2C26
....................          clave[unidad-11]=0; 
2C14:  MOVLW  0B
2C16:  SUBWF  1A,W
2C18:  CLRF   03
2C1A:  ADDLW  42
2C1C:  MOVWF  FE9
2C1E:  MOVLW  00
2C20:  ADDWFC 03,W
2C22:  MOVWF  FEA
2C24:  CLRF   FEF
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2C26:  MOVF   1A,W
2C28:  SUBLW  0A
2C2A:  BNC   2C30
....................          unidad=11; 
2C2C:  MOVLW  0B
2C2E:  MOVWF  1A
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2C30:  MOVFF  1A,E6
2C34:  MOVLW  04
2C36:  MOVWF  xE7
2C38:  CALL   0BD6
....................       lcd_putc(t[2]); 
2C3C:  MOVFF  41,E5
2C40:  CALL   0C48
....................        
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2C44:  MOVF   1A,W
2C46:  SUBLW  0E
2C48:  BTFSC  FD8.0
2C4A:  BRA    2E52
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2C4C:  MOVF   42,W
2C4E:  SUBLW  03
2C50:  BNZ   2D2C
2C52:  MOVF   43,W
2C54:  SUBLW  08
2C56:  BNZ   2D2C
2C58:  MOVF   44,W
2C5A:  SUBLW  09
2C5C:  BNZ   2D2C
2C5E:  MOVF   45,W
2C60:  SUBLW  02
2C62:  BNZ   2D2C
....................              write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2C64:  CLRF   FA9
2C66:  CLRF   FA8
2C68:  BCF    FA6.6
2C6A:  BCF    FA6.7
2C6C:  BSF    FA6.2
2C6E:  MOVF   FF2,W
2C70:  MOVWF  00
2C72:  BCF    FF2.7
2C74:  MOVLB  F
2C76:  MOVLW  55
2C78:  MOVWF  FA7
2C7A:  MOVLW  AA
2C7C:  MOVWF  FA7
2C7E:  BSF    FA6.1
2C80:  BTFSC  FA6.1
2C82:  BRA    2C80
2C84:  BCF    FA6.2
2C86:  MOVF   00,W
2C88:  IORWF  FF2,F
2C8A:  MOVLW  14
2C8C:  MOVLB  0
2C8E:  MOVWF  xEB
2C90:  CALL   0AC0
2C94:  MOVLW  01
2C96:  MOVWF  FA9
2C98:  CLRF   FA8
2C9A:  BCF    FA6.6
2C9C:  BCF    FA6.7
2C9E:  BSF    FA6.2
2CA0:  MOVF   FF2,W
2CA2:  MOVWF  00
2CA4:  BCF    FF2.7
2CA6:  MOVLB  F
2CA8:  MOVLW  55
2CAA:  MOVWF  FA7
2CAC:  MOVLW  AA
2CAE:  MOVWF  FA7
2CB0:  BSF    FA6.1
2CB2:  BTFSC  FA6.1
2CB4:  BRA    2CB2
2CB6:  BCF    FA6.2
2CB8:  MOVF   00,W
2CBA:  IORWF  FF2,F
2CBC:  MOVLW  14
2CBE:  MOVLB  0
2CC0:  MOVWF  xEB
2CC2:  CALL   0AC0
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2CC6:  MOVLW  02
2CC8:  MOVWF  FA9
2CCA:  CLRF   FA8
2CCC:  BCF    FA6.6
2CCE:  BCF    FA6.7
2CD0:  BSF    FA6.2
2CD2:  MOVF   FF2,W
2CD4:  MOVWF  00
2CD6:  BCF    FF2.7
2CD8:  MOVLB  F
2CDA:  MOVLW  55
2CDC:  MOVWF  FA7
2CDE:  MOVLW  AA
2CE0:  MOVWF  FA7
2CE2:  BSF    FA6.1
2CE4:  BTFSC  FA6.1
2CE6:  BRA    2CE4
2CE8:  BCF    FA6.2
2CEA:  MOVF   00,W
2CEC:  IORWF  FF2,F
2CEE:  MOVLW  14
2CF0:  MOVLB  0
2CF2:  MOVWF  xEB
2CF4:  CALL   0AC0
2CF8:  MOVLW  03
2CFA:  MOVWF  FA9
2CFC:  CLRF   FA8
2CFE:  BCF    FA6.6
2D00:  BCF    FA6.7
2D02:  BSF    FA6.2
2D04:  MOVF   FF2,W
2D06:  MOVWF  00
2D08:  BCF    FF2.7
2D0A:  MOVLB  F
2D0C:  MOVLW  55
2D0E:  MOVWF  FA7
2D10:  MOVLW  AA
2D12:  MOVWF  FA7
2D14:  BSF    FA6.1
2D16:  BTFSC  FA6.1
2D18:  BRA    2D16
2D1A:  BCF    FA6.2
2D1C:  MOVF   00,W
2D1E:  IORWF  FF2,F
2D20:  MOVLW  14
2D22:  MOVLB  0
2D24:  MOVWF  xEB
2D26:  CALL   0AC0
....................              reset_cpu(); 
2D2A:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2D2C:  MOVF   46,W
2D2E:  SUBWF  42,W
2D30:  BNZ   2DDC
2D32:  MOVF   47,W
2D34:  SUBWF  43,W
2D36:  BNZ   2DDC
2D38:  MOVF   48,W
2D3A:  SUBWF  44,W
2D3C:  BNZ   2DDC
2D3E:  MOVF   49,W
2D40:  SUBWF  45,W
2D42:  BNZ   2DDC
....................             lcd_gotoxy(1,1); 
2D44:  MOVLW  01
2D46:  MOVWF  xE6
2D48:  MOVWF  xE7
2D4A:  CALL   0BD6
....................             printf(lcd_putc,"                   "); 
2D4E:  MOVLW  38
2D50:  MOVWF  FF6
2D52:  MOVLW  03
2D54:  MOVWF  FF7
2D56:  CALL   1B6A
....................             lcd_gotoxy(1,2); 
2D5A:  MOVLW  01
2D5C:  MOVWF  xE6
2D5E:  MOVLW  02
2D60:  MOVWF  xE7
2D62:  CALL   0BD6
....................             printf(lcd_putc,"     Contraseña    "); 
2D66:  MOVLW  4C
2D68:  MOVWF  FF6
2D6A:  MOVLW  03
2D6C:  MOVWF  FF7
2D6E:  CALL   1B6A
....................             lcd_gotoxy(1,3); 
2D72:  MOVLW  01
2D74:  MOVWF  xE6
2D76:  MOVLW  03
2D78:  MOVWF  xE7
2D7A:  CALL   0BD6
....................             printf(lcd_putc,"      Correcta     "); 
2D7E:  MOVLW  60
2D80:  MOVWF  FF6
2D82:  MOVLW  03
2D84:  MOVWF  FF7
2D86:  CALL   1B6A
....................             lcd_gotoxy(1,4); 
2D8A:  MOVLW  01
2D8C:  MOVWF  xE6
2D8E:  MOVLW  04
2D90:  MOVWF  xE7
2D92:  CALL   0BD6
....................             printf(lcd_putc,"                   "); 
2D96:  MOVLW  74
2D98:  MOVWF  FF6
2D9A:  MOVLW  03
2D9C:  MOVWF  FF7
2D9E:  CALL   1B6A
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
2DA2:  MOVLW  02
2DA4:  MOVWF  xD0
2DA6:  MOVLW  FA
2DA8:  MOVWF  xEB
2DAA:  CALL   0AC0
2DAE:  DECFSZ xD0,F
2DB0:  BRA    2DA6
2DB2:  MOVLW  32
2DB4:  MOVWF  17
2DB6:  MOVLW  0B
2DB8:  MOVWF  1A
2DBA:  MOVLW  0C
2DBC:  MOVWF  xE5
2DBE:  CALL   0C48
2DC2:  BSF    F8A.7
2DC4:  BCF    F93.7
2DC6:  BCF    3D.0
2DC8:  BCF    3D.1
2DCA:  BSF    52.5
....................             t_latencia=0;flag_iniciodamper=1; 
2DCC:  CLRF   56
2DCE:  CLRF   55
2DD0:  BSF    52.0
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2DD2:  CLRF   42
2DD4:  CLRF   43
2DD6:  CLRF   44
2DD8:  CLRF   45
....................          }else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2DDA:  BRA    2E52
....................             lcd_gotoxy(1,1); 
2DDC:  MOVLW  01
2DDE:  MOVWF  xE6
2DE0:  MOVWF  xE7
2DE2:  CALL   0BD6
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2DE6:  MOVLW  01
2DE8:  MOVWF  xE6
2DEA:  MOVLW  02
2DEC:  MOVWF  xE7
2DEE:  CALL   0BD6
....................             printf(lcd_putc,"     Contraseña    "); 
2DF2:  MOVLW  88
2DF4:  MOVWF  FF6
2DF6:  MOVLW  03
2DF8:  MOVWF  FF7
2DFA:  CALL   1B6A
....................             lcd_gotoxy(1,3); 
2DFE:  MOVLW  01
2E00:  MOVWF  xE6
2E02:  MOVLW  03
2E04:  MOVWF  xE7
2E06:  CALL   0BD6
....................             printf(lcd_putc,"     Incorrecta    "); 
2E0A:  MOVLW  9C
2E0C:  MOVWF  FF6
2E0E:  MOVLW  03
2E10:  MOVWF  FF7
2E12:  CALL   1B6A
....................             lcd_gotoxy(1,4); 
2E16:  MOVLW  01
2E18:  MOVWF  xE6
2E1A:  MOVLW  04
2E1C:  MOVWF  xE7
2E1E:  CALL   0BD6
....................             printf(lcd_putc,"                   "); 
2E22:  MOVLW  B0
2E24:  MOVWF  FF6
2E26:  MOVLW  03
2E28:  MOVWF  FF7
2E2A:  CALL   1B6A
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
2E2E:  MOVLW  02
2E30:  MOVWF  xD0
2E32:  MOVLW  FA
2E34:  MOVWF  xEB
2E36:  CALL   0AC0
2E3A:  DECFSZ xD0,F
2E3C:  BRA    2E32
2E3E:  MOVLW  0B
2E40:  MOVWF  1A
2E42:  MOVLW  0C
2E44:  MOVWF  xE5
2E46:  CALL   0C48
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2E4A:  CLRF   42
2E4C:  CLRF   43
2E4E:  CLRF   44
2E50:  CLRF   45
....................          } 
....................       } 
....................     
....................       if(unidad>11&&unidad<14){ 
2E52:  MOVF   1A,W
2E54:  SUBLW  0B
2E56:  BC    2E76
2E58:  MOVF   1A,W
2E5A:  SUBLW  0D
2E5C:  BNC   2E76
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2E5E:  MOVLW  01
2E60:  SUBWF  1A,W
2E62:  MOVWF  xD0
2E64:  MOVWF  xE6
2E66:  MOVLW  04
2E68:  MOVWF  xE7
2E6A:  CALL   0BD6
....................          lcd_putc(t[1]); 
2E6E:  MOVFF  40,E5
2E72:  CALL   0C48
....................       } 
....................  
....................    } 
2E76:  BRA    2A4C
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2E78:  DECFSZ 17,W
2E7A:  BRA    30AA
....................     
....................       lcd_gotoxy(1,1); 
2E7C:  MOVLW  01
2E7E:  MOVWF  xE6
2E80:  MOVWF  xE7
2E82:  CALL   0BD6
....................       printf(lcd_putc,"---MENU PRINCIPAL---"); 
2E86:  MOVLW  C4
2E88:  MOVWF  FF6
2E8A:  MOVLW  03
2E8C:  MOVWF  FF7
2E8E:  CALL   1B6A
....................     
....................       if(UP){//Si oprime hacia arriba 
2E92:  BSF    F92.5
2E94:  BTFSS  F80.5
2E96:  BRA    2EC0
....................          delay_ms(20); 
2E98:  MOVLW  14
2E9A:  MOVWF  xEB
2E9C:  CALL   0AC0
....................          if(UP && Flanco == 0){ 
2EA0:  BSF    F92.5
2EA2:  BTFSS  F80.5
2EA4:  BRA    2EBE
2EA6:  BTFSC  3C.4
2EA8:  BRA    2EBE
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2EAA:  DECF   1D,F
2EAC:  DECF   1B,F
2EAE:  MOVLW  01
2EB0:  ADDWF  1B,W
2EB2:  MOVWF  1C
2EB4:  BSF    3C.4
2EB6:  MOVLW  1E
2EB8:  MOVWF  xEB
2EBA:  CALL   0AC0
....................          } 
....................       }else{ 
2EBE:  BRA    2EC2
....................          Flanco = 0; 
2EC0:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2EC2:  BSF    F96.0
2EC4:  BTFSS  F84.0
2EC6:  BRA    2EF0
....................          delay_ms(20); 
2EC8:  MOVLW  14
2ECA:  MOVWF  xEB
2ECC:  CALL   0AC0
....................          if(DOWN && Flanco2 == 0){ 
2ED0:  BSF    F96.0
2ED2:  BTFSS  F84.0
2ED4:  BRA    2EEE
2ED6:  BTFSC  3C.6
2ED8:  BRA    2EEE
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
2EDA:  INCF   1D,F
2EDC:  INCF   1B,F
2EDE:  MOVLW  01
2EE0:  SUBWF  1B,W
2EE2:  MOVWF  1C
2EE4:  BSF    3C.6
2EE6:  MOVLW  1E
2EE8:  MOVWF  xEB
2EEA:  CALL   0AC0
....................          } 
....................       }else{ 
2EEE:  BRA    2EF2
....................          Flanco2 = 0; 
2EF0:  BCF    3C.6
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH) 
2EF2:  MOVF   1D,W
2EF4:  SUBWF  1F,W
2EF6:  BC    2F08
....................       {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2EF8:  INCF   3E,F
2EFA:  MOVFF  1D,1F
2EFE:  MOVLW  02
2F00:  SUBWF  1F,W
2F02:  MOVWF  1E
2F04:  MOVLW  04
2F06:  MOVWF  1B
....................          
....................       if(Flecha2<nMenuL) 
2F08:  MOVF   1E,W
2F0A:  SUBWF  1D,W
2F0C:  BC    2F1E
....................       {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2F0E:  DECF   3E,F
2F10:  MOVFF  1D,1E
2F14:  MOVLW  02
2F16:  ADDWF  1E,W
2F18:  MOVWF  1F
2F1A:  MOVLW  02
2F1C:  MOVWF  1B
....................          
....................       if(Flecha2>n_opcionH) 
2F1E:  MOVF   1D,W
2F20:  SUBWF  18,W
2F22:  BC    2F36
....................       {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2F24:  MOVFF  19,1D
2F28:  MOVLW  02
2F2A:  MOVWF  1B
2F2C:  CLRF   3E
2F2E:  MOVFF  1D,1E
2F32:  ADDWF  1E,W
2F34:  MOVWF  1F
....................        
....................       if(Flecha2<n_opcionL) 
2F36:  MOVF   19,W
2F38:  SUBWF  1D,W
2F3A:  BC    2F52
....................       {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
2F3C:  MOVFF  18,1D
2F40:  MOVLW  04
2F42:  MOVWF  1B
2F44:  SUBWF  18,W
2F46:  MOVWF  3E
2F48:  MOVFF  1D,1F
2F4C:  MOVLW  02
2F4E:  SUBWF  1F,W
2F50:  MOVWF  1E
....................           
....................       if(paso<0) 
2F52:  BTFSC  3E.7
2F54:  BRA    2F58
2F56:  BRA    2F5A
....................          paso=0; 
2F58:  CLRF   3E
....................        
....................       mensajes(1+paso,2); 
2F5A:  MOVLW  01
2F5C:  ADDWF  3E,W
2F5E:  MOVWF  xD0
2F60:  MOVWF  xD1
2F62:  MOVLW  02
2F64:  MOVWF  xD2
2F66:  CALL   1CA4
....................       mensajes(2+paso,3); 
2F6A:  MOVLW  02
2F6C:  ADDWF  3E,W
2F6E:  MOVWF  xD0
2F70:  MOVWF  xD1
2F72:  MOVLW  03
2F74:  MOVWF  xD2
2F76:  CALL   1CA4
....................       mensajes(3+paso,4); 
2F7A:  MOVLW  03
2F7C:  ADDWF  3E,W
2F7E:  MOVWF  xD0
2F80:  MOVWF  xD1
2F82:  MOVLW  04
2F84:  MOVWF  xD2
2F86:  CALL   1CA4
....................  
....................       lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2F8A:  MOVLW  01
2F8C:  MOVWF  xE6
2F8E:  MOVFF  1B,E7
2F92:  CALL   0BD6
....................       lcd_putc(t[0]); 
2F96:  MOVFF  3F,E5
2F9A:  CALL   0C48
....................  
....................       if(Flecha==2){ 
2F9E:  MOVF   1B,W
2FA0:  SUBLW  02
2FA2:  BNZ   2FCC
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2FA4:  MOVLW  01
2FA6:  MOVWF  xE6
2FA8:  MOVLW  04
2FAA:  MOVWF  xE7
2FAC:  CALL   0BD6
....................          lcd_putc(t[1]); 
2FB0:  MOVFF  40,E5
2FB4:  CALL   0C48
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2FB8:  MOVLW  01
2FBA:  MOVWF  xE6
2FBC:  MOVLW  03
2FBE:  MOVWF  xE7
2FC0:  CALL   0BD6
....................          lcd_putc(t[1]); 
2FC4:  MOVFF  40,E5
2FC8:  CALL   0C48
....................       } 
....................          
....................       if(Flecha==4){ 
2FCC:  MOVF   1B,W
2FCE:  SUBLW  04
2FD0:  BNZ   2FFA
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2FD2:  MOVLW  01
2FD4:  MOVWF  xE6
2FD6:  MOVLW  02
2FD8:  MOVWF  xE7
2FDA:  CALL   0BD6
....................          lcd_putc(t[1]); 
2FDE:  MOVFF  40,E5
2FE2:  CALL   0C48
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2FE6:  MOVLW  01
2FE8:  MOVWF  xE6
2FEA:  MOVLW  03
2FEC:  MOVWF  xE7
2FEE:  CALL   0BD6
....................          lcd_putc(t[1]); 
2FF2:  MOVFF  40,E5
2FF6:  CALL   0C48
....................       } 
....................          
....................       if(Flecha==3){ 
2FFA:  MOVF   1B,W
2FFC:  SUBLW  03
2FFE:  BNZ   3028
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3000:  MOVLW  01
3002:  MOVWF  xE6
3004:  MOVLW  04
3006:  MOVWF  xE7
3008:  CALL   0BD6
....................          lcd_putc(t[1]); 
300C:  MOVFF  40,E5
3010:  CALL   0C48
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3014:  MOVLW  01
3016:  MOVWF  xE6
3018:  MOVLW  02
301A:  MOVWF  xE7
301C:  CALL   0BD6
....................          lcd_putc(t[1]); 
3020:  MOVFF  40,E5
3024:  CALL   0C48
....................       } 
....................  
....................       if(RIGHT){// Si oprime derecha 
3028:  BSF    F96.1
302A:  BTFSS  F84.1
302C:  BRA    3070
....................          delay_ms(20); 
302E:  MOVLW  14
3030:  MOVWF  xEB
3032:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0) { 
3036:  BSF    F96.1
3038:  BTFSS  F84.1
303A:  BRA    306E
303C:  BTFSC  3C.5
303E:  BRA    306E
....................             /*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
3040:  MOVFF  1D,17
3044:  MOVLW  03
3046:  MOVWF  1B
3048:  MOVLW  02
304A:  MOVWF  xD0
304C:  MOVLW  FA
304E:  MOVWF  xEB
3050:  CALL   0AC0
3054:  DECFSZ xD0,F
3056:  BRA    304C
3058:  MOVLW  0C
305A:  MOVWF  xE5
305C:  CALL   0C48
....................             if(Menu==6){ 
3060:  MOVF   17,W
3062:  SUBLW  06
3064:  BNZ   306E
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3066:  CLRF   42
3068:  CLRF   43
306A:  CLRF   44
306C:  CLRF   45
....................             } 
....................          } 
....................       }else{ 
306E:  BRA    3072
....................          Flanco1 = 0; 
3070:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3072:  BSF    F96.2
3074:  BTFSS  F84.2
3076:  BRA    30A8
....................          delay_ms(20); 
3078:  MOVLW  14
307A:  MOVWF  xEB
307C:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
3080:  BSF    F96.2
3082:  BTFSS  F84.2
3084:  BRA    30A6
3086:  BTFSC  3C.7
3088:  BRA    30A6
....................             /*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f"); 
308A:  MOVLW  02
308C:  MOVWF  xD0
308E:  MOVLW  FA
3090:  MOVWF  xEB
3092:  CALL   0AC0
3096:  DECFSZ xD0,F
3098:  BRA    308E
309A:  MOVLW  14
309C:  MOVWF  17
309E:  MOVLW  0C
30A0:  MOVWF  xE5
30A2:  CALL   0C48
....................          } 
....................       }else{ 
30A6:  BRA    30AA
....................          Flanco3 = 0; 
30A8:  BCF    3C.7
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
30AA:  MOVF   17,W
30AC:  SUBLW  02
30AE:  BTFSS  FD8.2
30B0:  BRA    31D6
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
30B2:  BTG    3C.2
30B4:  BSF    3C.5
30B6:  MOVLW  01
30B8:  MOVWF  17
30BA:  CLRF   3E
....................                        
....................             if(estadoalarma==1){ 
30BC:  BTFSS  3C.2
30BE:  BRA    3120
....................                estadoalarma=1; 
30C0:  BSF    3C.2
....................                lcd_gotoxy(1,1); 
30C2:  MOVLW  01
30C4:  MOVWF  xE6
30C6:  MOVWF  xE7
30C8:  CALL   0BD6
....................                printf(lcd_putc,"                    "); 
30CC:  MOVLW  DA
30CE:  MOVWF  FF6
30D0:  MOVLW  03
30D2:  MOVWF  FF7
30D4:  CALL   1B6A
....................                lcd_gotoxy(1,2); 
30D8:  MOVLW  01
30DA:  MOVWF  xE6
30DC:  MOVLW  02
30DE:  MOVWF  xE7
30E0:  CALL   0BD6
....................                printf(lcd_putc,"        Activo      "); 
30E4:  MOVLW  F0
30E6:  MOVWF  FF6
30E8:  MOVLW  03
30EA:  MOVWF  FF7
30EC:  CALL   1B6A
....................                lcd_gotoxy(1,3); 
30F0:  MOVLW  01
30F2:  MOVWF  xE6
30F4:  MOVLW  03
30F6:  MOVWF  xE7
30F8:  CALL   0BD6
....................                printf(lcd_putc,"        Alarma      "); 
30FC:  MOVLW  06
30FE:  MOVWF  FF6
3100:  MOVLW  04
3102:  MOVWF  FF7
3104:  CALL   1B6A
....................                lcd_gotoxy(1,4); 
3108:  MOVLW  01
310A:  MOVWF  xE6
310C:  MOVLW  04
310E:  MOVWF  xE7
3110:  CALL   0BD6
....................                printf(lcd_putc,"                    "); 
3114:  MOVLW  1C
3116:  MOVWF  FF6
3118:  MOVLW  04
311A:  MOVWF  FF7
311C:  CALL   1B6A
....................             } 
....................                 
....................             if(estadoalarma==0){ 
3120:  BTFSC  3C.2
3122:  BRA    3184
....................                estadoalarma=0; 
3124:  BCF    3C.2
....................                lcd_gotoxy(1,1); 
3126:  MOVLW  01
3128:  MOVWF  xE6
312A:  MOVWF  xE7
312C:  CALL   0BD6
....................                printf(lcd_putc,"                    "); 
3130:  MOVLW  32
3132:  MOVWF  FF6
3134:  MOVLW  04
3136:  MOVWF  FF7
3138:  CALL   1B6A
....................                lcd_gotoxy(1,2); 
313C:  MOVLW  01
313E:  MOVWF  xE6
3140:  MOVLW  02
3142:  MOVWF  xE7
3144:  CALL   0BD6
....................                printf(lcd_putc,"      Desactivo     "); 
3148:  MOVLW  48
314A:  MOVWF  FF6
314C:  MOVLW  04
314E:  MOVWF  FF7
3150:  CALL   1B6A
....................                lcd_gotoxy(1,3); 
3154:  MOVLW  01
3156:  MOVWF  xE6
3158:  MOVLW  03
315A:  MOVWF  xE7
315C:  CALL   0BD6
....................                printf(lcd_putc,"       Alarma       "); 
3160:  MOVLW  5E
3162:  MOVWF  FF6
3164:  MOVLW  04
3166:  MOVWF  FF7
3168:  CALL   1B6A
....................                lcd_gotoxy(1,4); 
316C:  MOVLW  01
316E:  MOVWF  xE6
3170:  MOVLW  04
3172:  MOVWF  xE7
3174:  CALL   0BD6
....................                printf(lcd_putc,"                    "); 
3178:  MOVLW  74
317A:  MOVWF  FF6
317C:  MOVLW  04
317E:  MOVWF  FF7
3180:  CALL   1B6A
....................             } 
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3184:  MOVLW  00
3186:  BTFSC  3C.2
3188:  MOVLW  01
318A:  MOVWF  xD0
318C:  MOVLW  05
318E:  MOVWF  FA9
3190:  MOVFF  D0,FA8
3194:  BCF    FA6.6
3196:  BCF    FA6.7
3198:  BSF    FA6.2
319A:  MOVF   FF2,W
319C:  MOVWF  00
319E:  BCF    FF2.7
31A0:  MOVLB  F
31A2:  MOVLW  55
31A4:  MOVWF  FA7
31A6:  MOVLW  AA
31A8:  MOVWF  FA7
31AA:  BSF    FA6.1
31AC:  BTFSC  FA6.1
31AE:  BRA    31AC
31B0:  BCF    FA6.2
31B2:  MOVF   00,W
31B4:  IORWF  FF2,F
31B6:  MOVLW  04
31B8:  MOVLB  0
31BA:  MOVWF  xD0
31BC:  MOVLW  FA
31BE:  MOVWF  xEB
31C0:  CALL   0AC0
31C4:  DECFSZ xD0,F
31C6:  BRA    31BC
31C8:  MOVLW  02
31CA:  MOVWF  1B
31CC:  MOVWF  1D
31CE:  MOVLW  0C
31D0:  MOVWF  xE5
31D2:  CALL   0C48
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
31D6:  MOVF   17,W
31D8:  SUBLW  03
31DA:  BTFSS  FD8.2
31DC:  BRA    3466
....................     
....................       lcd_gotoxy(1,1); 
31DE:  MOVLW  01
31E0:  MOVWF  xE6
31E2:  MOVWF  xE7
31E4:  CALL   0BD6
....................       printf(lcd_putc,"  Duracion Actual   ");                           
31E8:  MOVLW  8A
31EA:  MOVWF  FF6
31EC:  MOVLW  04
31EE:  MOVWF  FF7
31F0:  CALL   1B6A
....................       lcd_gotoxy(1,2);                                                   
31F4:  MOVLW  01
31F6:  MOVWF  xE6
31F8:  MOVLW  02
31FA:  MOVWF  xE7
31FC:  CALL   0BD6
....................       printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
3200:  MOVLW  A0
3202:  MOVWF  FF6
3204:  MOVLW  04
3206:  MOVWF  FF7
3208:  MOVLW  09
320A:  MOVWF  xD8
320C:  CALL   1B8C
3210:  MOVFF  33,D0
3214:  MOVLW  01
3216:  MOVWF  xD1
3218:  CALL   1DDA
321C:  MOVLW  3A
321E:  MOVWF  xE5
3220:  CALL   0C48
3224:  MOVFF  32,D0
3228:  MOVLW  01
322A:  MOVWF  xD1
322C:  CALL   1DDA
3230:  MOVLW  3A
3232:  MOVWF  xE5
3234:  CALL   0C48
3238:  MOVFF  31,D0
323C:  MOVLW  01
323E:  MOVWF  xD1
3240:  CALL   1DDA
3244:  MOVLW  20
3246:  MOVWF  xE5
3248:  CALL   0C48
....................        
....................       if(flag_filtro==1){ 
324C:  BTFSS  3D.2
324E:  BRA    326A
....................          lcd_gotoxy(1,3);                                                  
3250:  MOVLW  01
3252:  MOVWF  xE6
3254:  MOVLW  03
3256:  MOVWF  xE7
3258:  CALL   0BD6
....................          printf(lcd_putc,"DESACTIVAR= Oprima >");                         
325C:  MOVLW  BA
325E:  MOVWF  FF6
3260:  MOVLW  04
3262:  MOVWF  FF7
3264:  CALL   1B6A
....................       }else{ 
3268:  BRA    3282
....................          lcd_gotoxy(1,3);                                                  
326A:  MOVLW  01
326C:  MOVWF  xE6
326E:  MOVLW  03
3270:  MOVWF  xE7
3272:  CALL   0BD6
....................          printf(lcd_putc," ACTIVAR= Oprima >  ");                         
3276:  MOVLW  D0
3278:  MOVWF  FF6
327A:  MOVLW  04
327C:  MOVWF  FF7
327E:  CALL   1B6A
....................       } 
....................     
....................       lcd_gotoxy(1,4);                                                  
3282:  MOVLW  01
3284:  MOVWF  xE6
3286:  MOVLW  04
3288:  MOVWF  xE7
328A:  CALL   0BD6
....................       printf(lcd_putc," RESET= Oprima ^    ");                                                                                    
328E:  MOVLW  E6
3290:  MOVWF  FF6
3292:  MOVLW  04
3294:  MOVWF  FF7
3296:  CALL   1B6A
....................     
....................       if(UP){//Si oprime hacia arriba 
329A:  BSF    F92.5
329C:  BTFSS  F80.5
329E:  BRA    33AE
....................          delay_ms(20); 
32A0:  MOVLW  14
32A2:  MOVWF  xEB
32A4:  CALL   0AC0
....................          if(UP){ 
32A8:  BSF    F92.5
32AA:  BTFSS  F80.5
32AC:  BRA    33AE
....................             printf(lcd_putc,"\f"); 
32AE:  MOVLW  0C
32B0:  MOVWF  xE5
32B2:  CALL   0C48
....................             lcd_gotoxy(1,2); 
32B6:  MOVLW  01
32B8:  MOVWF  xE6
32BA:  MOVLW  02
32BC:  MOVWF  xE7
32BE:  CALL   0BD6
....................             printf(lcd_putc," Reset de tiempo "); 
32C2:  MOVLW  FC
32C4:  MOVWF  FF6
32C6:  MOVLW  04
32C8:  MOVWF  FF7
32CA:  CALL   1B6A
....................             lcd_gotoxy(1,3); 
32CE:  MOVLW  01
32D0:  MOVWF  xE6
32D2:  MOVLW  03
32D4:  MOVWF  xE7
32D6:  CALL   0BD6
....................             printf(lcd_putc,"     Exitoso     "); 
32DA:  MOVLW  0E
32DC:  MOVWF  FF6
32DE:  MOVLW  05
32E0:  MOVWF  FF7
32E2:  CALL   1B6A
....................             write_eeprom(70,0);delay_ms(20); 
32E6:  MOVLW  46
32E8:  MOVWF  FA9
32EA:  CLRF   FA8
32EC:  BCF    FA6.6
32EE:  BCF    FA6.7
32F0:  BSF    FA6.2
32F2:  MOVF   FF2,W
32F4:  MOVWF  00
32F6:  BCF    FF2.7
32F8:  MOVLB  F
32FA:  MOVLW  55
32FC:  MOVWF  FA7
32FE:  MOVLW  AA
3300:  MOVWF  FA7
3302:  BSF    FA6.1
3304:  BTFSC  FA6.1
3306:  BRA    3304
3308:  BCF    FA6.2
330A:  MOVF   00,W
330C:  IORWF  FF2,F
330E:  MOVLW  14
3310:  MOVLB  0
3312:  MOVWF  xEB
3314:  CALL   0AC0
....................             write_eeprom(71,0);delay_ms(20); 
3318:  MOVLW  47
331A:  MOVWF  FA9
331C:  CLRF   FA8
331E:  BCF    FA6.6
3320:  BCF    FA6.7
3322:  BSF    FA6.2
3324:  MOVF   FF2,W
3326:  MOVWF  00
3328:  BCF    FF2.7
332A:  MOVLB  F
332C:  MOVLW  55
332E:  MOVWF  FA7
3330:  MOVLW  AA
3332:  MOVWF  FA7
3334:  BSF    FA6.1
3336:  BTFSC  FA6.1
3338:  BRA    3336
333A:  BCF    FA6.2
333C:  MOVF   00,W
333E:  IORWF  FF2,F
3340:  MOVLW  14
3342:  MOVLB  0
3344:  MOVWF  xEB
3346:  CALL   0AC0
....................             write_eeprom(72,0);delay_ms(20); 
334A:  MOVLW  48
334C:  MOVWF  FA9
334E:  CLRF   FA8
3350:  BCF    FA6.6
3352:  BCF    FA6.7
3354:  BSF    FA6.2
3356:  MOVF   FF2,W
3358:  MOVWF  00
335A:  BCF    FF2.7
335C:  MOVLB  F
335E:  MOVLW  55
3360:  MOVWF  FA7
3362:  MOVLW  AA
3364:  MOVWF  FA7
3366:  BSF    FA6.1
3368:  BTFSC  FA6.1
336A:  BRA    3368
336C:  BCF    FA6.2
336E:  MOVF   00,W
3370:  IORWF  FF2,F
3372:  MOVLW  14
3374:  MOVLB  0
3376:  MOVWF  xEB
3378:  CALL   0AC0
....................             delay_ms(700); 
337C:  MOVLW  04
337E:  MOVWF  xD0
3380:  MOVLW  AF
3382:  MOVWF  xEB
3384:  CALL   0AC0
3388:  DECFSZ xD0,F
338A:  BRA    3380
....................             segundos=0;minutos=0;horas=0; 
338C:  CLRF   31
338E:  CLRF   32
3390:  CLRF   33
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3392:  MOVLW  1E
3394:  MOVWF  xEB
3396:  CALL   0AC0
339A:  MOVLW  01
339C:  MOVWF  17
339E:  CLRF   3E
33A0:  MOVLW  02
33A2:  MOVWF  1B
33A4:  MOVWF  1D
33A6:  MOVLW  0C
33A8:  MOVWF  xE5
33AA:  CALL   0C48
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
33AE:  BSF    F96.1
33B0:  BTFSS  F84.1
33B2:  BRA    3424
....................          delay_ms(20); 
33B4:  MOVLW  14
33B6:  MOVWF  xEB
33B8:  CALL   0AC0
....................          if(RIGHT){ 
33BC:  BSF    F96.1
33BE:  BTFSS  F84.1
33C0:  BRA    3424
....................             flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro);delay_ms(20); 
33C2:  BTG    3D.2
33C4:  MOVLW  00
33C6:  BTFSC  3D.2
33C8:  MOVLW  01
33CA:  MOVWF  xD0
33CC:  MOVLW  49
33CE:  MOVWF  FA9
33D0:  MOVFF  D0,FA8
33D4:  BCF    FA6.6
33D6:  BCF    FA6.7
33D8:  BSF    FA6.2
33DA:  MOVF   FF2,W
33DC:  MOVWF  00
33DE:  BCF    FF2.7
33E0:  MOVLB  F
33E2:  MOVLW  55
33E4:  MOVWF  FA7
33E6:  MOVLW  AA
33E8:  MOVWF  FA7
33EA:  BSF    FA6.1
33EC:  BTFSC  FA6.1
33EE:  BRA    33EC
33F0:  BCF    FA6.2
33F2:  MOVF   00,W
33F4:  IORWF  FF2,F
33F6:  MOVLW  14
33F8:  MOVLB  0
33FA:  MOVWF  xEB
33FC:  CALL   0AC0
....................             delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3400:  MOVLW  02
3402:  MOVWF  xD0
3404:  MOVLW  FA
3406:  MOVWF  xEB
3408:  CALL   0AC0
340C:  DECFSZ xD0,F
340E:  BRA    3404
3410:  MOVLW  01
3412:  MOVWF  17
3414:  CLRF   3E
3416:  MOVLW  02
3418:  MOVWF  1B
341A:  MOVWF  1D
341C:  MOVLW  0C
341E:  MOVWF  xE5
3420:  CALL   0C48
....................          } 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3424:  BSF    F96.2
3426:  BTFSS  F84.2
3428:  BRA    3464
....................          delay_ms(20); 
342A:  MOVLW  14
342C:  MOVWF  xEB
342E:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
3432:  BSF    F96.2
3434:  BTFSS  F84.2
3436:  BRA    3462
3438:  BTFSC  3C.7
343A:  BRA    3462
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
343C:  BSF    3C.7
343E:  MOVLW  02
3440:  MOVWF  xD0
3442:  MOVLW  FA
3444:  MOVWF  xEB
3446:  CALL   0AC0
344A:  DECFSZ xD0,F
344C:  BRA    3442
344E:  MOVLW  01
3450:  MOVWF  17
3452:  CLRF   3E
3454:  MOVLW  02
3456:  MOVWF  1B
3458:  MOVWF  1D
345A:  MOVLW  0C
345C:  MOVWF  xE5
345E:  CALL   0C48
....................          } 
....................       }else{ 
3462:  BRA    3466
....................          Flanco3 = 0; 
3464:  BCF    3C.7
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
3466:  MOVF   17,W
3468:  SUBLW  04
346A:  BTFSS  FD8.2
346C:  BRA    3776
....................       lcd_gotoxy(1,2); 
346E:  MOVLW  01
3470:  MOVWF  xE6
3472:  MOVLW  02
3474:  MOVWF  xE7
3476:  CALL   0BD6
....................       printf(lcd_putc," Setpoint de  Flujo "); 
347A:  MOVLW  20
347C:  MOVWF  FF6
347E:  MOVLW  05
3480:  MOVWF  FF7
3482:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
3486:  MOVLW  01
3488:  MOVWF  xE6
348A:  MOVLW  03
348C:  MOVWF  xE7
348E:  CALL   0BD6
....................       printf(lcd_putc,"       %2.2f   ",setpoint); 
3492:  MOVLW  36
3494:  MOVWF  FF6
3496:  MOVLW  05
3498:  MOVWF  FF7
349A:  MOVLW  07
349C:  MOVWF  xD8
349E:  CALL   1B8C
34A2:  MOVLW  89
34A4:  MOVWF  FE9
34A6:  MOVFF  4D,DB
34AA:  MOVFF  4C,DA
34AE:  MOVFF  4B,D9
34B2:  MOVFF  4A,D8
34B6:  MOVLW  02
34B8:  MOVWF  xDC
34BA:  CALL   1FF2
34BE:  MOVLW  20
34C0:  MOVWF  xE5
34C2:  CALL   0C48
34C6:  MOVLW  20
34C8:  MOVWF  xE5
34CA:  CALL   0C48
34CE:  MOVLW  20
34D0:  MOVWF  xE5
34D2:  CALL   0C48
....................     
....................       if(setpoint>2.0) 
34D6:  CLRF   xD7
34D8:  CLRF   xD6
34DA:  CLRF   xD5
34DC:  MOVLW  80
34DE:  MOVWF  xD4
34E0:  MOVFF  4D,DB
34E4:  MOVFF  4C,DA
34E8:  MOVFF  4B,D9
34EC:  MOVFF  4A,D8
34F0:  CALL   1542
34F4:  BNC   3500
....................          setpoint=2.0; 
34F6:  CLRF   4D
34F8:  CLRF   4C
34FA:  CLRF   4B
34FC:  MOVLW  80
34FE:  MOVWF  4A
....................     
....................       if(setpoint<0.5) 
3500:  MOVFF  4D,D7
3504:  MOVFF  4C,D6
3508:  MOVFF  4B,D5
350C:  MOVFF  4A,D4
3510:  CLRF   xDB
3512:  CLRF   xDA
3514:  CLRF   xD9
3516:  MOVLW  7E
3518:  MOVWF  xD8
351A:  CALL   1542
351E:  BNC   352A
....................          setpoint=0.5; 
3520:  CLRF   4D
3522:  CLRF   4C
3524:  CLRF   4B
3526:  MOVLW  7E
3528:  MOVWF  4A
....................     
....................       if(UP){//Si oprime hacia arriba 
352A:  BSF    F92.5
352C:  BTFSS  F80.5
352E:  BRA    357C
....................          delay_ms(20); 
3530:  MOVLW  14
3532:  MOVWF  xEB
3534:  CALL   0AC0
....................          if(UP && Flanco == 0) { 
3538:  BSF    F92.5
353A:  BTFSS  F80.5
353C:  BRA    357A
353E:  BTFSC  3C.4
3540:  BRA    357A
....................             setpoint+=0.1;Flanco = 1; 
3542:  BCF    FD8.1
3544:  MOVFF  4D,DA
3548:  MOVFF  4C,D9
354C:  MOVFF  4B,D8
3550:  MOVFF  4A,D7
3554:  MOVLW  CD
3556:  MOVWF  xDE
3558:  MOVLW  CC
355A:  MOVWF  xDD
355C:  MOVLW  4C
355E:  MOVWF  xDC
3560:  MOVLW  7B
3562:  MOVWF  xDB
3564:  CALL   0E84
3568:  MOVFF  03,4D
356C:  MOVFF  02,4C
3570:  MOVFF  01,4B
3574:  MOVFF  00,4A
3578:  BSF    3C.4
....................          } 
....................       }else{ 
357A:  BRA    357E
....................          Flanco = 0; 
357C:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
357E:  BSF    F96.0
3580:  BTFSS  F84.0
3582:  BRA    35D0
....................          delay_ms(20); 
3584:  MOVLW  14
3586:  MOVWF  xEB
3588:  CALL   0AC0
....................          if(DOWN && Flanco2 == 0) { 
358C:  BSF    F96.0
358E:  BTFSS  F84.0
3590:  BRA    35CE
3592:  BTFSC  3C.6
3594:  BRA    35CE
....................             setpoint-=0.1;Flanco2 = 1; 
3596:  BSF    FD8.1
3598:  MOVFF  4D,DA
359C:  MOVFF  4C,D9
35A0:  MOVFF  4B,D8
35A4:  MOVFF  4A,D7
35A8:  MOVLW  CD
35AA:  MOVWF  xDE
35AC:  MOVLW  CC
35AE:  MOVWF  xDD
35B0:  MOVLW  4C
35B2:  MOVWF  xDC
35B4:  MOVLW  7B
35B6:  MOVWF  xDB
35B8:  CALL   0E84
35BC:  MOVFF  03,4D
35C0:  MOVFF  02,4C
35C4:  MOVFF  01,4B
35C8:  MOVFF  00,4A
35CC:  BSF    3C.6
....................          } 
....................       }else{ 
35CE:  BRA    35D2
....................          Flanco2 = 0; 
35D0:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
35D2:  BSF    F96.1
35D4:  BTFSS  F84.1
35D6:  BRA    3730
....................          delay_ms(20); 
35D8:  MOVLW  14
35DA:  MOVWF  xEB
35DC:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0){ 
35E0:  BSF    F96.1
35E2:  BTFSS  F84.1
35E4:  BRA    372E
35E6:  BTFSC  3C.5
35E8:  BRA    372E
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
35EA:  MOVLW  01
35EC:  MOVWF  17
35EE:  CLRF   3E
35F0:  MOVLW  02
35F2:  MOVWF  1B
35F4:  MOVWF  1D
35F6:  MOVLW  0B
35F8:  MOVWF  1A
35FA:  MOVLW  02
35FC:  MOVWF  xD0
35FE:  MOVLW  FA
3600:  MOVWF  xEB
3602:  CALL   0AC0
3606:  DECFSZ xD0,F
3608:  BRA    35FE
360A:  MOVLW  0C
360C:  MOVWF  xE5
360E:  CALL   0C48
....................             Temporal=setpoint; 
3612:  MOVFF  4D,87
3616:  MOVFF  4C,86
361A:  MOVFF  4B,85
361E:  MOVFF  4A,84
....................             Entero=(int)setpoint; 
3622:  MOVFF  4D,D3
3626:  MOVFF  4C,D2
362A:  MOVFF  4B,D1
362E:  MOVFF  4A,D0
3632:  CALL   2178
3636:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
363A:  CLRF   xDA
363C:  MOVFF  24,D9
3640:  CALL   0CF4
3644:  BSF    FD8.1
3646:  MOVFF  87,DA
364A:  MOVFF  86,D9
364E:  MOVFF  85,D8
3652:  MOVFF  84,D7
3656:  MOVFF  03,DE
365A:  MOVFF  02,DD
365E:  MOVFF  01,DC
3662:  MOVFF  00,DB
3666:  CALL   0E84
366A:  MOVFF  03,87
366E:  MOVFF  02,86
3672:  MOVFF  01,85
3676:  MOVFF  00,84
....................             Temporal2=Temporal*10.0; 
367A:  MOVFF  87,E8
367E:  MOVFF  86,E7
3682:  MOVFF  85,E6
3686:  MOVFF  84,E5
368A:  CLRF   xEC
368C:  CLRF   xEB
368E:  MOVLW  20
3690:  MOVWF  xEA
3692:  MOVLW  82
3694:  MOVWF  xE9
3696:  CALL   1E46
369A:  MOVFF  03,8B
369E:  MOVFF  02,8A
36A2:  MOVFF  01,89
36A6:  MOVFF  00,88
....................             Decimal2=(int8)Temporal2; 
36AA:  MOVFF  8B,D3
36AE:  MOVFF  8A,D2
36B2:  MOVFF  89,D1
36B6:  MOVFF  88,D0
36BA:  CALL   2178
36BE:  MOVFF  01,26
....................             write_eeprom(40,Entero);delay_ms(20); 
36C2:  MOVLW  28
36C4:  MOVWF  FA9
36C6:  MOVFF  24,FA8
36CA:  BCF    FA6.6
36CC:  BCF    FA6.7
36CE:  BSF    FA6.2
36D0:  MOVF   FF2,W
36D2:  MOVWF  00
36D4:  BCF    FF2.7
36D6:  MOVLB  F
36D8:  MOVLW  55
36DA:  MOVWF  FA7
36DC:  MOVLW  AA
36DE:  MOVWF  FA7
36E0:  BSF    FA6.1
36E2:  BTFSC  FA6.1
36E4:  BRA    36E2
36E6:  BCF    FA6.2
36E8:  MOVF   00,W
36EA:  IORWF  FF2,F
36EC:  MOVLW  14
36EE:  MOVLB  0
36F0:  MOVWF  xEB
36F2:  CALL   0AC0
....................             write_eeprom(41,Decimal2);delay_ms(20);//Guardar valor de Setpoint en eeprom 
36F6:  MOVLW  29
36F8:  MOVWF  FA9
36FA:  MOVFF  26,FA8
36FE:  BCF    FA6.6
3700:  BCF    FA6.7
3702:  BSF    FA6.2
3704:  MOVF   FF2,W
3706:  MOVWF  00
3708:  BCF    FF2.7
370A:  MOVLB  F
370C:  MOVLW  55
370E:  MOVWF  FA7
3710:  MOVLW  AA
3712:  MOVWF  FA7
3714:  BSF    FA6.1
3716:  BTFSC  FA6.1
3718:  BRA    3716
371A:  BCF    FA6.2
371C:  MOVF   00,W
371E:  IORWF  FF2,F
3720:  MOVLW  14
3722:  MOVLB  0
3724:  MOVWF  xEB
3726:  CALL   0AC0
....................             MensajeGuardado(); 
372A:  CALL   21B0
....................          } 
....................       }else{ 
372E:  BRA    3732
....................          Flanco1 = 0; 
3730:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3732:  BSF    F96.2
3734:  BTFSS  F84.2
3736:  BRA    3774
....................          delay_ms(20); 
3738:  MOVLW  14
373A:  MOVWF  xEB
373C:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
3740:  BSF    F96.2
3742:  BTFSS  F84.2
3744:  BRA    3772
3746:  BTFSC  3C.7
3748:  BRA    3772
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
374A:  MOVLW  01
374C:  MOVWF  17
374E:  CLRF   3E
3750:  MOVLW  02
3752:  MOVWF  1B
3754:  MOVWF  1D
3756:  MOVLW  0B
3758:  MOVWF  1A
375A:  MOVLW  02
375C:  MOVWF  xD0
375E:  MOVLW  FA
3760:  MOVWF  xEB
3762:  CALL   0AC0
3766:  DECFSZ xD0,F
3768:  BRA    375E
376A:  MOVLW  0C
376C:  MOVWF  xE5
376E:  CALL   0C48
....................          } 
....................       }else{ 
3772:  BRA    3776
....................          Flanco3 = 0; 
3774:  BCF    3C.7
....................       }              
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
3776:  MOVF   17,W
3778:  SUBLW  05
377A:  BTFSS  FD8.2
377C:  BRA    3ACA
....................       lcd_gotoxy(1,1); 
377E:  MOVLW  01
3780:  MOVWF  xE6
3782:  MOVWF  xE7
3784:  CALL   0BD6
....................       printf(lcd_putc,"      Ingrese       "); 
3788:  MOVLW  46
378A:  MOVWF  FF6
378C:  MOVLW  05
378E:  MOVWF  FF7
3790:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
3794:  MOVLW  01
3796:  MOVWF  xE6
3798:  MOVLW  02
379A:  MOVWF  xE7
379C:  CALL   0BD6
....................       printf(lcd_putc," Contraseña Actual  "); 
37A0:  MOVLW  5C
37A2:  MOVWF  FF6
37A4:  MOVLW  05
37A6:  MOVWF  FF7
37A8:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
37AC:  MOVLW  01
37AE:  MOVWF  xE6
37B0:  MOVLW  03
37B2:  MOVWF  xE7
37B4:  CALL   0BD6
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
37B8:  MOVLW  72
37BA:  MOVWF  FF6
37BC:  MOVLW  05
37BE:  MOVWF  FF7
37C0:  MOVLW  0A
37C2:  MOVWF  xD8
37C4:  CALL   1B8C
37C8:  MOVFF  42,D0
37CC:  MOVLW  1F
37CE:  MOVWF  xD1
37D0:  CALL   1BD4
37D4:  MOVFF  43,D0
37D8:  MOVLW  1F
37DA:  MOVWF  xD1
37DC:  CALL   1BD4
37E0:  MOVFF  44,D0
37E4:  MOVLW  1F
37E6:  MOVWF  xD1
37E8:  CALL   1BD4
37EC:  MOVFF  45,D0
37F0:  MOVLW  1F
37F2:  MOVWF  xD1
37F4:  CALL   1BD4
37F8:  MOVLW  20
37FA:  MOVWF  xE5
37FC:  CALL   0C48
3800:  MOVLW  20
3802:  MOVWF  xE5
3804:  CALL   0C48
....................     
....................        
....................       if(UP){//Si oprime hacia arriba 
3808:  BSF    F92.5
380A:  BTFSS  F80.5
380C:  BRA    383E
....................          delay_ms(20); 
380E:  MOVLW  14
3810:  MOVWF  xEB
3812:  CALL   0AC0
....................          if(UP && Flanco == 0) { 
3816:  BSF    F92.5
3818:  BTFSS  F80.5
381A:  BRA    383C
381C:  BTFSC  3C.4
381E:  BRA    383C
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
3820:  MOVLW  0B
3822:  SUBWF  1A,W
3824:  CLRF   03
3826:  ADDLW  42
3828:  MOVWF  FE9
382A:  MOVLW  00
382C:  ADDWFC 03,W
382E:  MOVWF  FEA
3830:  INCF   FEF,F
3832:  BSF    3C.4
3834:  MOVLW  1E
3836:  MOVWF  xEB
3838:  CALL   0AC0
....................          } 
....................       }else{ 
383C:  BRA    3840
....................          Flanco = 0; 
383E:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3840:  BSF    F96.0
3842:  BTFSS  F84.0
3844:  BRA    3876
....................          delay_ms(20); 
3846:  MOVLW  14
3848:  MOVWF  xEB
384A:  CALL   0AC0
....................          if(DOWN && Flanco2 == 0) { 
384E:  BSF    F96.0
3850:  BTFSS  F84.0
3852:  BRA    3874
3854:  BTFSC  3C.6
3856:  BRA    3874
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
3858:  MOVLW  0B
385A:  SUBWF  1A,W
385C:  CLRF   03
385E:  ADDLW  42
3860:  MOVWF  FE9
3862:  MOVLW  00
3864:  ADDWFC 03,W
3866:  MOVWF  FEA
3868:  DECF   FEF,F
386A:  BSF    3C.6
386C:  MOVLW  1E
386E:  MOVWF  xEB
3870:  CALL   0AC0
....................          } 
....................       }else{ 
3874:  BRA    3878
....................          Flanco2 = 0; 
3876:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
3878:  BSF    F96.1
387A:  BTFSS  F84.1
387C:  BRA    38A6
....................          delay_ms(20); 
387E:  MOVLW  14
3880:  MOVWF  xEB
3882:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0) { 
3886:  BSF    F96.1
3888:  BTFSS  F84.1
388A:  BRA    38A4
388C:  BTFSC  3C.5
388E:  BRA    38A4
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
3890:  BSF    3C.5
3892:  INCF   1A,F
3894:  MOVLW  1E
3896:  MOVWF  xEB
3898:  CALL   0AC0
389C:  MOVLW  0C
389E:  MOVWF  xE5
38A0:  CALL   0C48
....................          } 
....................       }else{ 
38A4:  BRA    38A8
....................          Flanco1 = 0; 
38A6:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
38A8:  BSF    F96.2
38AA:  BTFSS  F84.2
38AC:  BRA    38DE
....................          delay_ms(20); 
38AE:  MOVLW  14
38B0:  MOVWF  xEB
38B2:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
38B6:  BSF    F96.2
38B8:  BTFSS  F84.2
38BA:  BRA    38DC
38BC:  BTFSC  3C.7
38BE:  BRA    38DC
....................             Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f"); 
38C0:  BSF    3C.7
38C2:  DECF   1A,F
38C4:  MOVLW  02
38C6:  MOVWF  xD0
38C8:  MOVLW  FA
38CA:  MOVWF  xEB
38CC:  CALL   0AC0
38D0:  DECFSZ xD0,F
38D2:  BRA    38C8
38D4:  MOVLW  0C
38D6:  MOVWF  xE5
38D8:  CALL   0C48
....................          } 
....................       }else{ 
38DC:  BRA    38E0
....................          Flanco3 = 0; 
38DE:  BCF    3C.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
38E0:  MOVLW  0B
38E2:  SUBWF  1A,W
38E4:  CLRF   03
38E6:  ADDLW  42
38E8:  MOVWF  FE9
38EA:  MOVLW  00
38EC:  ADDWFC 03,W
38EE:  MOVWF  FEA
38F0:  BTFSC  FEF.7
38F2:  BRA    38F6
38F4:  BRA    390A
....................          clave[unidad-11]=9; 
38F6:  MOVLW  0B
38F8:  SUBWF  1A,W
38FA:  CLRF   03
38FC:  ADDLW  42
38FE:  MOVWF  FE9
3900:  MOVLW  00
3902:  ADDWFC 03,W
3904:  MOVWF  FEA
3906:  MOVLW  09
3908:  MOVWF  FEF
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
390A:  MOVLW  0B
390C:  SUBWF  1A,W
390E:  CLRF   03
3910:  ADDLW  42
3912:  MOVWF  FE9
3914:  MOVLW  00
3916:  ADDWFC 03,W
3918:  MOVWF  FEA
391A:  BTFSC  FEF.7
391C:  BRA    3936
391E:  MOVF   FEF,W
3920:  SUBLW  09
3922:  BC    3936
....................          clave[unidad-11]=0; 
3924:  MOVLW  0B
3926:  SUBWF  1A,W
3928:  CLRF   03
392A:  ADDLW  42
392C:  MOVWF  FE9
392E:  MOVLW  00
3930:  ADDWFC 03,W
3932:  MOVWF  FEA
3934:  CLRF   FEF
....................       if(unidad<11){ 
3936:  MOVF   1A,W
3938:  SUBLW  0A
393A:  BNC   3968
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
393C:  MOVLW  02
393E:  MOVWF  xD0
3940:  MOVLW  FA
3942:  MOVWF  xEB
3944:  CALL   0AC0
3948:  DECFSZ xD0,F
394A:  BRA    3940
394C:  MOVLW  01
394E:  MOVWF  17
3950:  CLRF   3E
3952:  MOVLW  02
3954:  MOVWF  1B
3956:  MOVWF  1D
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3958:  CLRF   42
395A:  CLRF   43
395C:  CLRF   44
395E:  CLRF   45
....................          printf(lcd_putc,"\f"); 
3960:  MOVLW  0C
3962:  MOVWF  xE5
3964:  CALL   0C48
....................       } 
....................       lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3968:  MOVFF  1A,E6
396C:  MOVLW  04
396E:  MOVWF  xE7
3970:  CALL   0BD6
....................       lcd_putc(t[2]); 
3974:  MOVFF  41,E5
3978:  CALL   0C48
....................        
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
397C:  MOVF   1A,W
397E:  SUBLW  0E
3980:  BTFSC  FD8.0
3982:  BRA    3AA6
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
3984:  MOVF   46,W
3986:  SUBWF  42,W
3988:  BNZ   3A24
398A:  MOVF   47,W
398C:  SUBWF  43,W
398E:  BNZ   3A24
3990:  MOVF   48,W
3992:  SUBWF  44,W
3994:  BNZ   3A24
3996:  MOVF   49,W
3998:  SUBWF  45,W
399A:  BNZ   3A24
....................             lcd_gotoxy(1,1); 
399C:  MOVLW  01
399E:  MOVWF  xE6
39A0:  MOVWF  xE7
39A2:  CALL   0BD6
....................             printf(lcd_putc,"                    "); 
39A6:  MOVLW  88
39A8:  MOVWF  FF6
39AA:  MOVLW  05
39AC:  MOVWF  FF7
39AE:  CALL   1B6A
....................             lcd_gotoxy(1,2); 
39B2:  MOVLW  01
39B4:  MOVWF  xE6
39B6:  MOVLW  02
39B8:  MOVWF  xE7
39BA:  CALL   0BD6
....................             printf(lcd_putc,"     Contraseña     "); 
39BE:  MOVLW  9E
39C0:  MOVWF  FF6
39C2:  MOVLW  05
39C4:  MOVWF  FF7
39C6:  CALL   1B6A
....................             lcd_gotoxy(1,3); 
39CA:  MOVLW  01
39CC:  MOVWF  xE6
39CE:  MOVLW  03
39D0:  MOVWF  xE7
39D2:  CALL   0BD6
....................             printf(lcd_putc,"      Correcta      "); 
39D6:  MOVLW  B4
39D8:  MOVWF  FF6
39DA:  MOVLW  05
39DC:  MOVWF  FF7
39DE:  CALL   1B6A
....................             lcd_gotoxy(1,4); 
39E2:  MOVLW  01
39E4:  MOVWF  xE6
39E6:  MOVLW  04
39E8:  MOVWF  xE7
39EA:  CALL   0BD6
....................             printf(lcd_putc,"                    "); 
39EE:  MOVLW  CA
39F0:  MOVWF  FF6
39F2:  MOVLW  05
39F4:  MOVWF  FF7
39F6:  CALL   1B6A
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
39FA:  MOVLW  02
39FC:  MOVWF  xD0
39FE:  MOVLW  FA
3A00:  MOVWF  xEB
3A02:  CALL   0AC0
3A06:  DECFSZ xD0,F
3A08:  BRA    39FE
3A0A:  MOVLW  33
3A0C:  MOVWF  17
3A0E:  MOVLW  0B
3A10:  MOVWF  1A
3A12:  MOVLW  0C
3A14:  MOVWF  xE5
3A16:  CALL   0C48
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3A1A:  CLRF   42
3A1C:  CLRF   43
3A1E:  CLRF   44
3A20:  CLRF   45
....................          }else{ 
3A22:  BRA    3AA6
....................             lcd_gotoxy(1,1); 
3A24:  MOVLW  01
3A26:  MOVWF  xE6
3A28:  MOVWF  xE7
3A2A:  CALL   0BD6
....................             printf(lcd_putc,"                    "); 
3A2E:  MOVLW  E0
3A30:  MOVWF  FF6
3A32:  MOVLW  05
3A34:  MOVWF  FF7
3A36:  CALL   1B6A
....................             lcd_gotoxy(1,2); 
3A3A:  MOVLW  01
3A3C:  MOVWF  xE6
3A3E:  MOVLW  02
3A40:  MOVWF  xE7
3A42:  CALL   0BD6
....................             printf(lcd_putc,"     Contraseña     "); 
3A46:  MOVLW  F6
3A48:  MOVWF  FF6
3A4A:  MOVLW  05
3A4C:  MOVWF  FF7
3A4E:  CALL   1B6A
....................             lcd_gotoxy(1,3); 
3A52:  MOVLW  01
3A54:  MOVWF  xE6
3A56:  MOVLW  03
3A58:  MOVWF  xE7
3A5A:  CALL   0BD6
....................             printf(lcd_putc,"     Incorrecta     "); 
3A5E:  MOVLW  0C
3A60:  MOVWF  FF6
3A62:  MOVLW  06
3A64:  MOVWF  FF7
3A66:  CALL   1B6A
....................             lcd_gotoxy(1,4); 
3A6A:  MOVLW  01
3A6C:  MOVWF  xE6
3A6E:  MOVLW  04
3A70:  MOVWF  xE7
3A72:  CALL   0BD6
....................             printf(lcd_putc,"                    "); 
3A76:  MOVLW  22
3A78:  MOVWF  FF6
3A7A:  MOVLW  06
3A7C:  MOVWF  FF7
3A7E:  CALL   1B6A
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
3A82:  MOVLW  02
3A84:  MOVWF  xD0
3A86:  MOVLW  FA
3A88:  MOVWF  xEB
3A8A:  CALL   0AC0
3A8E:  DECFSZ xD0,F
3A90:  BRA    3A86
3A92:  MOVLW  0B
3A94:  MOVWF  1A
3A96:  MOVLW  0C
3A98:  MOVWF  xE5
3A9A:  CALL   0C48
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3A9E:  CLRF   42
3AA0:  CLRF   43
3AA2:  CLRF   44
3AA4:  CLRF   45
....................          } 
....................       } 
....................                 
....................       if(unidad>11&&unidad<14){ 
3AA6:  MOVF   1A,W
3AA8:  SUBLW  0B
3AAA:  BC    3ACA
3AAC:  MOVF   1A,W
3AAE:  SUBLW  0D
3AB0:  BNC   3ACA
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3AB2:  MOVLW  01
3AB4:  SUBWF  1A,W
3AB6:  MOVWF  xD0
3AB8:  MOVWF  xE6
3ABA:  MOVLW  04
3ABC:  MOVWF  xE7
3ABE:  CALL   0BD6
....................          lcd_putc(t[1]); 
3AC2:  MOVFF  40,E5
3AC6:  CALL   0C48
....................       } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3ACA:  MOVF   17,W
3ACC:  SUBLW  33
3ACE:  BTFSS  FD8.2
3AD0:  BRA    3E5C
....................     
....................       lcd_gotoxy(1,1); 
3AD2:  MOVLW  01
3AD4:  MOVWF  xE6
3AD6:  MOVWF  xE7
3AD8:  CALL   0BD6
....................       printf(lcd_putc,"     Ingrese        "); 
3ADC:  MOVLW  38
3ADE:  MOVWF  FF6
3AE0:  MOVLW  06
3AE2:  MOVWF  FF7
3AE4:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
3AE8:  MOVLW  01
3AEA:  MOVWF  xE6
3AEC:  MOVLW  02
3AEE:  MOVWF  xE7
3AF0:  CALL   0BD6
....................       printf(lcd_putc,"  Contraseña Nueva  "); 
3AF4:  MOVLW  4E
3AF6:  MOVWF  FF6
3AF8:  MOVLW  06
3AFA:  MOVWF  FF7
3AFC:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
3B00:  MOVLW  01
3B02:  MOVWF  xE6
3B04:  MOVLW  03
3B06:  MOVWF  xE7
3B08:  CALL   0BD6
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3B0C:  MOVLW  64
3B0E:  MOVWF  FF6
3B10:  MOVLW  06
3B12:  MOVWF  FF7
3B14:  MOVLW  0A
3B16:  MOVWF  xD8
3B18:  CALL   1B8C
3B1C:  MOVFF  42,D0
3B20:  MOVLW  1F
3B22:  MOVWF  xD1
3B24:  CALL   1BD4
3B28:  MOVFF  43,D0
3B2C:  MOVLW  1F
3B2E:  MOVWF  xD1
3B30:  CALL   1BD4
3B34:  MOVFF  44,D0
3B38:  MOVLW  1F
3B3A:  MOVWF  xD1
3B3C:  CALL   1BD4
3B40:  MOVFF  45,D0
3B44:  MOVLW  1F
3B46:  MOVWF  xD1
3B48:  CALL   1BD4
3B4C:  MOVLW  20
3B4E:  MOVWF  xE5
3B50:  CALL   0C48
3B54:  MOVLW  20
3B56:  MOVWF  xE5
3B58:  CALL   0C48
....................     
....................        
....................       if(UP){//Si oprime hacia arriba 
3B5C:  BSF    F92.5
3B5E:  BTFSS  F80.5
3B60:  BRA    3B92
....................          delay_ms(20); 
3B62:  MOVLW  14
3B64:  MOVWF  xEB
3B66:  CALL   0AC0
....................          if(UP && Flanco == 0) { 
3B6A:  BSF    F92.5
3B6C:  BTFSS  F80.5
3B6E:  BRA    3B90
3B70:  BTFSC  3C.4
3B72:  BRA    3B90
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
3B74:  MOVLW  0B
3B76:  SUBWF  1A,W
3B78:  CLRF   03
3B7A:  ADDLW  42
3B7C:  MOVWF  FE9
3B7E:  MOVLW  00
3B80:  ADDWFC 03,W
3B82:  MOVWF  FEA
3B84:  INCF   FEF,F
3B86:  BSF    3C.4
3B88:  MOVLW  1E
3B8A:  MOVWF  xEB
3B8C:  CALL   0AC0
....................          } 
....................       }else{ 
3B90:  BRA    3B94
....................          Flanco = 0; 
3B92:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3B94:  BSF    F96.0
3B96:  BTFSS  F84.0
3B98:  BRA    3BCA
....................          delay_ms(20); 
3B9A:  MOVLW  14
3B9C:  MOVWF  xEB
3B9E:  CALL   0AC0
....................          if(DOWN && Flanco2 == 0) { 
3BA2:  BSF    F96.0
3BA4:  BTFSS  F84.0
3BA6:  BRA    3BC8
3BA8:  BTFSC  3C.6
3BAA:  BRA    3BC8
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
3BAC:  MOVLW  0B
3BAE:  SUBWF  1A,W
3BB0:  CLRF   03
3BB2:  ADDLW  42
3BB4:  MOVWF  FE9
3BB6:  MOVLW  00
3BB8:  ADDWFC 03,W
3BBA:  MOVWF  FEA
3BBC:  DECF   FEF,F
3BBE:  BSF    3C.6
3BC0:  MOVLW  1E
3BC2:  MOVWF  xEB
3BC4:  CALL   0AC0
....................          } 
....................       }else{ 
3BC8:  BRA    3BCC
....................          Flanco2 = 0; 
3BCA:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime Derecha 
3BCC:  BSF    F96.1
3BCE:  BTFSS  F84.1
3BD0:  BRA    3BFA
....................          delay_ms(20); 
3BD2:  MOVLW  14
3BD4:  MOVWF  xEB
3BD6:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0) { 
3BDA:  BSF    F96.1
3BDC:  BTFSS  F84.1
3BDE:  BRA    3BF8
3BE0:  BTFSC  3C.5
3BE2:  BRA    3BF8
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
3BE4:  BSF    3C.5
3BE6:  INCF   1A,F
3BE8:  MOVLW  1E
3BEA:  MOVWF  xEB
3BEC:  CALL   0AC0
3BF0:  MOVLW  0C
3BF2:  MOVWF  xE5
3BF4:  CALL   0C48
....................          } 
....................       }else{ 
3BF8:  BRA    3BFC
....................          Flanco1 = 0; 
3BFA:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3BFC:  BSF    F96.2
3BFE:  BTFSS  F84.2
3C00:  BRA    3C2A
....................          delay_ms(20); 
3C02:  MOVLW  14
3C04:  MOVWF  xEB
3C06:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
3C0A:  BSF    F96.2
3C0C:  BTFSS  F84.2
3C0E:  BRA    3C28
3C10:  BTFSC  3C.7
3C12:  BRA    3C28
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
3C14:  BSF    3C.7
3C16:  DECF   1A,F
3C18:  MOVLW  1E
3C1A:  MOVWF  xEB
3C1C:  CALL   0AC0
3C20:  MOVLW  0C
3C22:  MOVWF  xE5
3C24:  CALL   0C48
....................          } 
....................       }else{ 
3C28:  BRA    3C2C
....................          Flanco3 = 0; 
3C2A:  BCF    3C.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3C2C:  MOVLW  0B
3C2E:  SUBWF  1A,W
3C30:  CLRF   03
3C32:  ADDLW  42
3C34:  MOVWF  FE9
3C36:  MOVLW  00
3C38:  ADDWFC 03,W
3C3A:  MOVWF  FEA
3C3C:  BTFSC  FEF.7
3C3E:  BRA    3C42
3C40:  BRA    3C56
....................          clave[unidad-11]=9; 
3C42:  MOVLW  0B
3C44:  SUBWF  1A,W
3C46:  CLRF   03
3C48:  ADDLW  42
3C4A:  MOVWF  FE9
3C4C:  MOVLW  00
3C4E:  ADDWFC 03,W
3C50:  MOVWF  FEA
3C52:  MOVLW  09
3C54:  MOVWF  FEF
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3C56:  MOVLW  0B
3C58:  SUBWF  1A,W
3C5A:  CLRF   03
3C5C:  ADDLW  42
3C5E:  MOVWF  FE9
3C60:  MOVLW  00
3C62:  ADDWFC 03,W
3C64:  MOVWF  FEA
3C66:  BTFSC  FEF.7
3C68:  BRA    3C82
3C6A:  MOVF   FEF,W
3C6C:  SUBLW  09
3C6E:  BC    3C82
....................          clave[unidad-11]=0; 
3C70:  MOVLW  0B
3C72:  SUBWF  1A,W
3C74:  CLRF   03
3C76:  ADDLW  42
3C78:  MOVWF  FE9
3C7A:  MOVLW  00
3C7C:  ADDWFC 03,W
3C7E:  MOVWF  FEA
3C80:  CLRF   FEF
....................           
....................       if(unidad<11){ 
3C82:  MOVF   1A,W
3C84:  SUBLW  0A
3C86:  BNC   3CB8
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3C88:  MOVLW  02
3C8A:  MOVWF  xD0
3C8C:  MOVLW  FA
3C8E:  MOVWF  xEB
3C90:  CALL   0AC0
3C94:  DECFSZ xD0,F
3C96:  BRA    3C8C
3C98:  MOVLW  01
3C9A:  MOVWF  17
3C9C:  CLRF   3E
3C9E:  MOVLW  02
3CA0:  MOVWF  1B
3CA2:  MOVWF  1D
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3CA4:  CLRF   42
3CA6:  CLRF   43
3CA8:  CLRF   44
3CAA:  CLRF   45
....................          printf(lcd_putc,"\f");unidad=11; 
3CAC:  MOVLW  0C
3CAE:  MOVWF  xE5
3CB0:  CALL   0C48
3CB4:  MOVLW  0B
3CB6:  MOVWF  1A
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3CB8:  MOVFF  1A,E6
3CBC:  MOVLW  04
3CBE:  MOVWF  xE7
3CC0:  CALL   0BD6
....................       lcd_putc(t[2]); 
3CC4:  MOVFF  41,E5
3CC8:  CALL   0C48
....................       if(unidad>14){// Si ya ingreso la nueva contraseña. 
3CCC:  MOVF   1A,W
3CCE:  SUBLW  0E
3CD0:  BTFSC  FD8.0
3CD2:  BRA    3E38
....................          lcd_gotoxy(1,1); 
3CD4:  MOVLW  01
3CD6:  MOVWF  xE6
3CD8:  MOVWF  xE7
3CDA:  CALL   0BD6
....................          printf(lcd_putc,"                    "); 
3CDE:  MOVLW  7A
3CE0:  MOVWF  FF6
3CE2:  MOVLW  06
3CE4:  MOVWF  FF7
3CE6:  CALL   1B6A
....................          lcd_gotoxy(1,2); 
3CEA:  MOVLW  01
3CEC:  MOVWF  xE6
3CEE:  MOVLW  02
3CF0:  MOVWF  xE7
3CF2:  CALL   0BD6
....................          printf(lcd_putc,"     Contraseña     "); 
3CF6:  MOVLW  90
3CF8:  MOVWF  FF6
3CFA:  MOVLW  06
3CFC:  MOVWF  FF7
3CFE:  CALL   1B6A
....................          lcd_gotoxy(1,3); 
3D02:  MOVLW  01
3D04:  MOVWF  xE6
3D06:  MOVLW  03
3D08:  MOVWF  xE7
3D0A:  CALL   0BD6
....................          printf(lcd_putc,"     Almacenada     "); 
3D0E:  MOVLW  A6
3D10:  MOVWF  FF6
3D12:  MOVLW  06
3D14:  MOVWF  FF7
3D16:  CALL   1B6A
....................          lcd_gotoxy(1,4); 
3D1A:  MOVLW  01
3D1C:  MOVWF  xE6
3D1E:  MOVLW  04
3D20:  MOVWF  xE7
3D22:  CALL   0BD6
....................          printf(lcd_putc,"                    "); 
3D26:  MOVLW  BC
3D28:  MOVWF  FF6
3D2A:  MOVLW  06
3D2C:  MOVWF  FF7
3D2E:  CALL   1B6A
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3D32:  MOVFF  42,46
3D36:  MOVFF  43,47
3D3A:  MOVFF  44,48
3D3E:  MOVFF  45,49
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3D42:  CLRF   FA9
3D44:  MOVFF  42,FA8
3D48:  BCF    FA6.6
3D4A:  BCF    FA6.7
3D4C:  BSF    FA6.2
3D4E:  MOVF   FF2,W
3D50:  MOVWF  00
3D52:  BCF    FF2.7
3D54:  MOVLB  F
3D56:  MOVLW  55
3D58:  MOVWF  FA7
3D5A:  MOVLW  AA
3D5C:  MOVWF  FA7
3D5E:  BSF    FA6.1
3D60:  BTFSC  FA6.1
3D62:  BRA    3D60
3D64:  BCF    FA6.2
3D66:  MOVF   00,W
3D68:  IORWF  FF2,F
3D6A:  MOVLW  14
3D6C:  MOVLB  0
3D6E:  MOVWF  xEB
3D70:  CALL   0AC0
3D74:  MOVLW  01
3D76:  MOVWF  FA9
3D78:  MOVFF  43,FA8
3D7C:  BCF    FA6.6
3D7E:  BCF    FA6.7
3D80:  BSF    FA6.2
3D82:  MOVF   FF2,W
3D84:  MOVWF  00
3D86:  BCF    FF2.7
3D88:  MOVLB  F
3D8A:  MOVLW  55
3D8C:  MOVWF  FA7
3D8E:  MOVLW  AA
3D90:  MOVWF  FA7
3D92:  BSF    FA6.1
3D94:  BTFSC  FA6.1
3D96:  BRA    3D94
3D98:  BCF    FA6.2
3D9A:  MOVF   00,W
3D9C:  IORWF  FF2,F
3D9E:  MOVLW  14
3DA0:  MOVLB  0
3DA2:  MOVWF  xEB
3DA4:  CALL   0AC0
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3DA8:  MOVLW  02
3DAA:  MOVWF  FA9
3DAC:  MOVFF  44,FA8
3DB0:  BCF    FA6.6
3DB2:  BCF    FA6.7
3DB4:  BSF    FA6.2
3DB6:  MOVF   FF2,W
3DB8:  MOVWF  00
3DBA:  BCF    FF2.7
3DBC:  MOVLB  F
3DBE:  MOVLW  55
3DC0:  MOVWF  FA7
3DC2:  MOVLW  AA
3DC4:  MOVWF  FA7
3DC6:  BSF    FA6.1
3DC8:  BTFSC  FA6.1
3DCA:  BRA    3DC8
3DCC:  BCF    FA6.2
3DCE:  MOVF   00,W
3DD0:  IORWF  FF2,F
3DD2:  MOVLW  14
3DD4:  MOVLB  0
3DD6:  MOVWF  xEB
3DD8:  CALL   0AC0
3DDC:  MOVLW  03
3DDE:  MOVWF  FA9
3DE0:  MOVFF  45,FA8
3DE4:  BCF    FA6.6
3DE6:  BCF    FA6.7
3DE8:  BSF    FA6.2
3DEA:  MOVF   FF2,W
3DEC:  MOVWF  00
3DEE:  BCF    FF2.7
3DF0:  MOVLB  F
3DF2:  MOVLW  55
3DF4:  MOVWF  FA7
3DF6:  MOVLW  AA
3DF8:  MOVWF  FA7
3DFA:  BSF    FA6.1
3DFC:  BTFSC  FA6.1
3DFE:  BRA    3DFC
3E00:  BCF    FA6.2
3E02:  MOVF   00,W
3E04:  IORWF  FF2,F
3E06:  MOVLW  14
3E08:  MOVLB  0
3E0A:  MOVWF  xEB
3E0C:  CALL   0AC0
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3E10:  MOVLW  02
3E12:  MOVWF  xD0
3E14:  MOVLW  FA
3E16:  MOVWF  xEB
3E18:  CALL   0AC0
3E1C:  DECFSZ xD0,F
3E1E:  BRA    3E14
3E20:  MOVLW  01
3E22:  MOVWF  17
3E24:  CLRF   3E
3E26:  MOVLW  02
3E28:  MOVWF  1B
3E2A:  MOVWF  1D
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3E2C:  CLRF   42
3E2E:  CLRF   43
3E30:  CLRF   44
3E32:  CLRF   45
....................          unidad=11; 
3E34:  MOVLW  0B
3E36:  MOVWF  1A
....................       } 
....................        
....................       if(unidad>11&&unidad<14){ 
3E38:  MOVF   1A,W
3E3A:  SUBLW  0B
3E3C:  BC    3E5C
3E3E:  MOVF   1A,W
3E40:  SUBLW  0D
3E42:  BNC   3E5C
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3E44:  MOVLW  01
3E46:  SUBWF  1A,W
3E48:  MOVWF  xD0
3E4A:  MOVWF  xE6
3E4C:  MOVLW  04
3E4E:  MOVWF  xE7
3E50:  CALL   0BD6
....................          lcd_putc(t[1]); 
3E54:  MOVFF  40,E5
3E58:  CALL   0C48
....................       } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ 
3E5C:  MOVF   17,W
3E5E:  SUBLW  06
3E60:  BTFSS  FD8.2
3E62:  BRA    3FE2
....................       lcd_gotoxy(1,2); 
3E64:  MOVLW  01
3E66:  MOVWF  xE6
3E68:  MOVLW  02
3E6A:  MOVWF  xE7
3E6C:  CALL   0BD6
....................       printf(lcd_putc,"     Media Movil    "); 
3E70:  MOVLW  D2
3E72:  MOVWF  FF6
3E74:  MOVLW  06
3E76:  MOVWF  FF7
3E78:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
3E7C:  MOVLW  01
3E7E:  MOVWF  xE6
3E80:  MOVLW  03
3E82:  MOVWF  xE7
3E84:  CALL   0BD6
....................       printf(lcd_putc,"       %02i   ",MediaMovil); 
3E88:  MOVLW  E8
3E8A:  MOVWF  FF6
3E8C:  MOVLW  06
3E8E:  MOVWF  FF7
3E90:  MOVLW  07
3E92:  MOVWF  xD8
3E94:  CALL   1B8C
3E98:  MOVFF  2B,D0
3E9C:  MOVLW  01
3E9E:  MOVWF  xD1
3EA0:  CALL   1BD4
3EA4:  MOVLW  20
3EA6:  MOVWF  xE5
3EA8:  CALL   0C48
3EAC:  MOVLW  20
3EAE:  MOVWF  xE5
3EB0:  CALL   0C48
3EB4:  MOVLW  20
3EB6:  MOVWF  xE5
3EB8:  CALL   0C48
....................        
....................       if(MediaMovil>12) 
3EBC:  MOVF   2B,W
3EBE:  SUBLW  0C
3EC0:  BC    3EC6
....................          MediaMovil=12; 
3EC2:  MOVLW  0C
3EC4:  MOVWF  2B
....................     
....................       if(MediaMovil<1) 
3EC6:  MOVF   2B,F
3EC8:  BNZ   3ECE
....................          MediaMovil=1; 
3ECA:  MOVLW  01
3ECC:  MOVWF  2B
....................     
....................       if(UP){//Si oprime hacia arriba 
3ECE:  BSF    F92.5
3ED0:  BTFSS  F80.5
3ED2:  BRA    3EF6
....................          delay_ms(20); 
3ED4:  MOVLW  14
3ED6:  MOVWF  xEB
3ED8:  CALL   0AC0
....................          if(UP && Flanco == 0) { 
3EDC:  BSF    F92.5
3EDE:  BTFSS  F80.5
3EE0:  BRA    3EF4
3EE2:  BTFSC  3C.4
3EE4:  BRA    3EF4
....................             MediaMovil+=1;Flanco = 1;delay_ms(30); 
3EE6:  MOVLW  01
3EE8:  ADDWF  2B,F
3EEA:  BSF    3C.4
3EEC:  MOVLW  1E
3EEE:  MOVWF  xEB
3EF0:  CALL   0AC0
....................          } 
....................       }else{ 
3EF4:  BRA    3EF8
....................          Flanco = 0; 
3EF6:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3EF8:  BSF    F96.0
3EFA:  BTFSS  F84.0
3EFC:  BRA    3F20
....................          delay_ms(20); 
3EFE:  MOVLW  14
3F00:  MOVWF  xEB
3F02:  CALL   0AC0
....................          if(DOWN && Flanco2 == 0){ 
3F06:  BSF    F96.0
3F08:  BTFSS  F84.0
3F0A:  BRA    3F1E
3F0C:  BTFSC  3C.6
3F0E:  BRA    3F1E
....................             MediaMovil-=1;Flanco2 = 1;delay_ms(30); 
3F10:  MOVLW  01
3F12:  SUBWF  2B,F
3F14:  BSF    3C.6
3F16:  MOVLW  1E
3F18:  MOVWF  xEB
3F1A:  CALL   0AC0
....................          } 
....................       }else{ 
3F1E:  BRA    3F22
....................          Flanco2 = 0; 
3F20:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
3F22:  BSF    F96.1
3F24:  BTFSS  F84.1
3F26:  BRA    3F9C
....................          delay_ms(20); 
3F28:  MOVLW  14
3F2A:  MOVWF  xEB
3F2C:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0) { 
3F30:  BSF    F96.1
3F32:  BTFSS  F84.1
3F34:  BRA    3F9A
3F36:  BTFSC  3C.5
3F38:  BRA    3F9A
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3F3A:  MOVLW  01
3F3C:  MOVWF  17
3F3E:  CLRF   3E
3F40:  MOVLW  02
3F42:  MOVWF  1B
3F44:  MOVWF  1D
3F46:  MOVLW  0B
3F48:  MOVWF  1A
3F4A:  MOVLW  02
3F4C:  MOVWF  xD0
3F4E:  MOVLW  FA
3F50:  MOVWF  xEB
3F52:  CALL   0AC0
3F56:  DECFSZ xD0,F
3F58:  BRA    3F4E
3F5A:  MOVLW  0C
3F5C:  MOVWF  xE5
3F5E:  CALL   0C48
....................             write_eeprom(42,MediaMovil);delay_ms(20);//Guardar valor de Setpoint en eeprom 
3F62:  MOVLW  2A
3F64:  MOVWF  FA9
3F66:  MOVFF  2B,FA8
3F6A:  BCF    FA6.6
3F6C:  BCF    FA6.7
3F6E:  BSF    FA6.2
3F70:  MOVF   FF2,W
3F72:  MOVWF  00
3F74:  BCF    FF2.7
3F76:  MOVLB  F
3F78:  MOVLW  55
3F7A:  MOVWF  FA7
3F7C:  MOVLW  AA
3F7E:  MOVWF  FA7
3F80:  BSF    FA6.1
3F82:  BTFSC  FA6.1
3F84:  BRA    3F82
3F86:  BCF    FA6.2
3F88:  MOVF   00,W
3F8A:  IORWF  FF2,F
3F8C:  MOVLW  14
3F8E:  MOVLB  0
3F90:  MOVWF  xEB
3F92:  CALL   0AC0
....................             MensajeGuardado(); 
3F96:  CALL   21B0
....................          } 
....................       }else{ 
3F9A:  BRA    3F9E
....................          Flanco1 = 0; 
3F9C:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3F9E:  BSF    F96.2
3FA0:  BTFSS  F84.2
3FA2:  BRA    3FE0
....................          delay_ms(20); 
3FA4:  MOVLW  14
3FA6:  MOVWF  xEB
3FA8:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
3FAC:  BSF    F96.2
3FAE:  BTFSS  F84.2
3FB0:  BRA    3FDE
3FB2:  BTFSC  3C.7
3FB4:  BRA    3FDE
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3FB6:  MOVLW  01
3FB8:  MOVWF  17
3FBA:  CLRF   3E
3FBC:  MOVLW  02
3FBE:  MOVWF  1B
3FC0:  MOVWF  1D
3FC2:  MOVLW  0B
3FC4:  MOVWF  1A
3FC6:  MOVLW  02
3FC8:  MOVWF  xD0
3FCA:  MOVLW  FA
3FCC:  MOVWF  xEB
3FCE:  CALL   0AC0
3FD2:  DECFSZ xD0,F
3FD4:  BRA    3FCA
3FD6:  MOVLW  0C
3FD8:  MOVWF  xE5
3FDA:  CALL   0C48
....................          } 
....................       }else{ 
3FDE:  BRA    3FE2
....................          Flanco3 = 0; 
3FE0:  BCF    3C.7
....................       } 
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
3FE2:  MOVF   17,W
3FE4:  SUBLW  07
3FE6:  BTFSS  FD8.2
3FE8:  BRA    432E
....................    { 
....................       lcd_gotoxy(1,1); 
3FEA:  MOVLW  01
3FEC:  MOVWF  xE6
3FEE:  MOVWF  xE7
3FF0:  CALL   0BD6
....................       printf(lcd_putc,"  Zero Point Config "); 
3FF4:  MOVLW  F8
3FF6:  MOVWF  FF6
3FF8:  MOVLW  06
3FFA:  MOVWF  FF7
3FFC:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
4000:  MOVLW  01
4002:  MOVWF  xE6
4004:  MOVLW  02
4006:  MOVWF  xE7
4008:  CALL   0BD6
....................       printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
400C:  MOVLW  0E
400E:  MOVWF  FF6
4010:  MOVLW  07
4012:  MOVWF  FF7
4014:  MOVLW  08
4016:  MOVWF  xD8
4018:  CALL   1B8C
401C:  MOVLW  01
401E:  MOVWF  FE9
4020:  MOVFF  6F,DB
4024:  MOVFF  6E,DA
4028:  MOVFF  6D,D9
402C:  MOVFF  6C,D8
4030:  MOVWF  xDC
4032:  CALL   1FF2
4036:  MOVLW  1B
4038:  MOVWF  FF6
403A:  MOVLW  07
403C:  MOVWF  FF7
403E:  MOVLW  08
4040:  MOVWF  xD8
4042:  CALL   1B8C
....................       lcd_gotoxy(1,3); 
4046:  MOVLW  01
4048:  MOVWF  xE6
404A:  MOVLW  03
404C:  MOVWF  xE7
404E:  CALL   0BD6
....................       printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
4052:  CLRF   xD4
4054:  CALL   2228
4058:  MOVFF  00,D0
405C:  MOVFF  01,D1
4060:  MOVFF  02,D2
4064:  MOVFF  03,D3
4068:  MOVLW  5A
406A:  MOVWF  xE5
406C:  CALL   0C48
4070:  MOVLW  46
4072:  MOVWF  xE5
4074:  CALL   0C48
4078:  MOVLW  3D
407A:  MOVWF  xE5
407C:  CALL   0C48
4080:  MOVLW  01
4082:  MOVWF  FE9
4084:  MOVFF  51,DB
4088:  MOVFF  50,DA
408C:  MOVFF  4F,D9
4090:  MOVFF  4E,D8
4094:  CLRF   xDC
4096:  CALL   1FF2
409A:  MOVLW  2C
409C:  MOVWF  FF6
409E:  MOVLW  07
40A0:  MOVWF  FF7
40A2:  MOVLW  05
40A4:  MOVWF  xD8
40A6:  CALL   1B8C
40AA:  MOVLW  01
40AC:  MOVWF  FE9
40AE:  MOVFF  D3,DB
40B2:  MOVFF  D2,DA
40B6:  MOVFF  D1,D9
40BA:  MOVFF  D0,D8
40BE:  CLRF   xDC
40C0:  CALL   1FF2
....................       lcd_gotoxy(1,4); 
40C4:  MOVLW  01
40C6:  MOVWF  xE6
40C8:  MOVLW  04
40CA:  MOVWF  xE7
40CC:  CALL   0BD6
....................       printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
40D0:  MOVLW  38
40D2:  MOVWF  FF6
40D4:  MOVLW  07
40D6:  MOVWF  FF7
40D8:  MOVLW  0C
40DA:  MOVWF  xD8
40DC:  CALL   1B8C
40E0:  MOVLW  01
40E2:  MOVWF  FE9
40E4:  MOVFF  97,DB
40E8:  MOVFF  96,DA
40EC:  MOVFF  95,D9
40F0:  MOVFF  94,D8
40F4:  CLRF   xDC
40F6:  CALL   1FF2
....................      
....................       if(RIGHT){// Si oprime derecha 
40FA:  BSF    F96.1
40FC:  BTFSS  F84.1
40FE:  BRA    42E8
....................          delay_ms(20); 
4100:  MOVLW  14
4102:  MOVWF  xEB
4104:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0) { 
4108:  BSF    F96.1
410A:  BTFSS  F84.1
410C:  BRA    42E6
410E:  BTFSC  3C.5
4110:  BRA    42E6
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4112:  MOVLW  01
4114:  MOVWF  17
4116:  CLRF   3E
4118:  MOVLW  02
411A:  MOVWF  1B
411C:  MOVWF  1D
411E:  MOVLW  0B
4120:  MOVWF  1A
4122:  MOVLW  02
4124:  MOVWF  xD0
4126:  MOVLW  FA
4128:  MOVWF  xEB
412A:  CALL   0AC0
412E:  DECFSZ xD0,F
4130:  BRA    4126
4132:  MOVLW  0C
4134:  MOVWF  xE5
4136:  CALL   0C48
....................             Diferencia=zero_fabrica-sensores(0); 
413A:  CLRF   xD4
413C:  CALL   2228
4140:  MOVFF  FEA,D1
4144:  MOVFF  FE9,D0
4148:  BSF    FD8.1
414A:  MOVFF  51,DA
414E:  MOVFF  50,D9
4152:  MOVFF  4F,D8
4156:  MOVFF  4E,D7
415A:  MOVFF  03,DE
415E:  MOVFF  02,DD
4162:  MOVFF  01,DC
4166:  MOVFF  00,DB
416A:  CALL   0E84
416E:  MOVFF  D1,FEA
4172:  MOVFF  D0,FE9
4176:  MOVFF  03,97
417A:  MOVFF  02,96
417E:  MOVFF  01,95
4182:  MOVFF  00,94
....................              
....................             if(Diferencia>=0){ 
4186:  CLRF   xD7
4188:  CLRF   xD6
418A:  CLRF   xD5
418C:  CLRF   xD4
418E:  MOVFF  97,DB
4192:  MOVFF  96,DA
4196:  MOVFF  95,D9
419A:  MOVFF  94,D8
419E:  CALL   1542
41A2:  BC    41A6
41A4:  BNZ   41DE
....................                negativo=10;write_eeprom(50,negativo);delay_ms(20); 
41A6:  MOVLW  0A
41A8:  MOVWF  2C
41AA:  MOVLW  32
41AC:  MOVWF  FA9
41AE:  MOVFF  2C,FA8
41B2:  BCF    FA6.6
41B4:  BCF    FA6.7
41B6:  BSF    FA6.2
41B8:  MOVF   FF2,W
41BA:  MOVWF  00
41BC:  BCF    FF2.7
41BE:  MOVLB  F
41C0:  MOVLW  55
41C2:  MOVWF  FA7
41C4:  MOVLW  AA
41C6:  MOVWF  FA7
41C8:  BSF    FA6.1
41CA:  BTFSC  FA6.1
41CC:  BRA    41CA
41CE:  BCF    FA6.2
41D0:  MOVF   00,W
41D2:  IORWF  FF2,F
41D4:  MOVLW  14
41D6:  MOVLB  0
41D8:  MOVWF  xEB
41DA:  CALL   0AC0
....................             } 
....................             if(Diferencia<0){ 
41DE:  MOVFF  97,D7
41E2:  MOVFF  96,D6
41E6:  MOVFF  95,D5
41EA:  MOVFF  94,D4
41EE:  CLRF   xDB
41F0:  CLRF   xDA
41F2:  CLRF   xD9
41F4:  CLRF   xD8
41F6:  CALL   1542
41FA:  BNC   4234
....................                negativo=20;write_eeprom(50,negativo);delay_ms(20); 
41FC:  MOVLW  14
41FE:  MOVWF  2C
4200:  MOVLW  32
4202:  MOVWF  FA9
4204:  MOVFF  2C,FA8
4208:  BCF    FA6.6
420A:  BCF    FA6.7
420C:  BSF    FA6.2
420E:  MOVF   FF2,W
4210:  MOVWF  00
4212:  BCF    FF2.7
4214:  MOVLB  F
4216:  MOVLW  55
4218:  MOVWF  FA7
421A:  MOVLW  AA
421C:  MOVWF  FA7
421E:  BSF    FA6.1
4220:  BTFSC  FA6.1
4222:  BRA    4220
4224:  BCF    FA6.2
4226:  MOVF   00,W
4228:  IORWF  FF2,F
422A:  MOVLW  14
422C:  MOVLB  0
422E:  MOVWF  xEB
4230:  CALL   0AC0
....................             } 
....................             Diferencia=abs(Diferencia); 
4234:  MOVFF  94,00
4238:  MOVFF  95,01
423C:  MOVFF  96,02
4240:  MOVFF  97,03
4244:  BCF    01.7
4246:  MOVFF  97,97
424A:  MOVFF  96,96
424E:  MOVFF  01,95
4252:  MOVFF  94,94
....................             Dif16=(int16)Diferencia; 
4256:  MOVFF  97,D3
425A:  MOVFF  96,D2
425E:  MOVFF  95,D1
4262:  MOVFF  94,D0
4266:  CALL   2178
426A:  MOVFF  02,5A
426E:  MOVFF  01,59
....................              
....................             write_eeprom(60,make8(Dif16,0));delay_ms(20); 
4272:  MOVFF  59,D0
4276:  MOVLW  3C
4278:  MOVWF  FA9
427A:  MOVFF  D0,FA8
427E:  BCF    FA6.6
4280:  BCF    FA6.7
4282:  BSF    FA6.2
4284:  MOVF   FF2,W
4286:  MOVWF  00
4288:  BCF    FF2.7
428A:  MOVLB  F
428C:  MOVLW  55
428E:  MOVWF  FA7
4290:  MOVLW  AA
4292:  MOVWF  FA7
4294:  BSF    FA6.1
4296:  BTFSC  FA6.1
4298:  BRA    4296
429A:  BCF    FA6.2
429C:  MOVF   00,W
429E:  IORWF  FF2,F
42A0:  MOVLW  14
42A2:  MOVLB  0
42A4:  MOVWF  xEB
42A6:  CALL   0AC0
....................             write_eeprom(61,make8(Dif16,1));delay_ms(20);//Guardar valor de Setpoint en eeprom 
42AA:  MOVFF  5A,D0
42AE:  MOVLW  3D
42B0:  MOVWF  FA9
42B2:  MOVFF  D0,FA8
42B6:  BCF    FA6.6
42B8:  BCF    FA6.7
42BA:  BSF    FA6.2
42BC:  MOVF   FF2,W
42BE:  MOVWF  00
42C0:  BCF    FF2.7
42C2:  MOVLB  F
42C4:  MOVLW  55
42C6:  MOVWF  FA7
42C8:  MOVLW  AA
42CA:  MOVWF  FA7
42CC:  BSF    FA6.1
42CE:  BTFSC  FA6.1
42D0:  BRA    42CE
42D2:  BCF    FA6.2
42D4:  MOVF   00,W
42D6:  IORWF  FF2,F
42D8:  MOVLW  14
42DA:  MOVLB  0
42DC:  MOVWF  xEB
42DE:  CALL   0AC0
....................             MensajeGuardado(); 
42E2:  CALL   21B0
....................          } 
....................       }else{ 
42E6:  BRA    42EA
....................          Flanco1 = 0; 
42E8:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
42EA:  BSF    F96.2
42EC:  BTFSS  F84.2
42EE:  BRA    432C
....................          delay_ms(20); 
42F0:  MOVLW  14
42F2:  MOVWF  xEB
42F4:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
42F8:  BSF    F96.2
42FA:  BTFSS  F84.2
42FC:  BRA    432A
42FE:  BTFSC  3C.7
4300:  BRA    432A
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4302:  MOVLW  01
4304:  MOVWF  17
4306:  CLRF   3E
4308:  MOVLW  02
430A:  MOVWF  1B
430C:  MOVWF  1D
430E:  MOVLW  0B
4310:  MOVWF  1A
4312:  MOVLW  02
4314:  MOVWF  xD0
4316:  MOVLW  FA
4318:  MOVWF  xEB
431A:  CALL   0AC0
431E:  DECFSZ xD0,F
4320:  BRA    4316
4322:  MOVLW  0C
4324:  MOVWF  xE5
4326:  CALL   0C48
....................          } 
....................       }else{ 
432A:  BRA    432E
....................          Flanco3 = 0; 
432C:  BCF    3C.7
....................       } 
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
432E:  MOVF   17,W
4330:  SUBLW  08
4332:  BTFSS  FD8.2
4334:  BRA    480A
....................    { 
....................       lcd_gotoxy(1,1); 
4336:  MOVLW  01
4338:  MOVWF  xE6
433A:  MOVWF  xE7
433C:  CALL   0BD6
....................       printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4340:  CLRF   xD4
4342:  CALL   2228
4346:  MOVFF  00,D0
434A:  MOVFF  01,D1
434E:  MOVFF  02,D2
4352:  MOVFF  03,D3
4356:  MOVLW  4A
4358:  MOVWF  FF6
435A:  MOVLW  07
435C:  MOVWF  FF7
435E:  MOVLW  0A
4360:  MOVWF  xD8
4362:  CALL   1B8C
4366:  MOVLW  01
4368:  MOVWF  FE9
436A:  MOVFF  D3,DB
436E:  MOVFF  D2,DA
4372:  MOVFF  D1,D9
4376:  MOVFF  D0,D8
437A:  CLRF   xDC
437C:  CALL   1FF2
4380:  MOVLW  20
4382:  MOVWF  xE5
4384:  CALL   0C48
4388:  MOVLW  20
438A:  MOVWF  xE5
438C:  CALL   0C48
....................       lcd_gotoxy(1,2); 
4390:  MOVLW  01
4392:  MOVWF  xE6
4394:  MOVLW  02
4396:  MOVWF  xE7
4398:  CALL   0BD6
....................       printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
439C:  CLRF   xDA
439E:  MOVFF  2A,D9
43A2:  CALL   0CF4
43A6:  MOVFF  00,D0
43AA:  MOVFF  01,D1
43AE:  MOVFF  02,D2
43B2:  MOVFF  03,D3
43B6:  MOVFF  03,D7
43BA:  MOVFF  02,D6
43BE:  MOVFF  01,D5
43C2:  MOVFF  00,D4
43C6:  CLRF   xDB
43C8:  CLRF   xDA
43CA:  MOVLW  7F
43CC:  MOVWF  xD9
43CE:  MOVLW  86
43D0:  MOVWF  xD8
43D2:  CALL   0D2A
43D6:  CLRF   xE8
43D8:  CLRF   xE7
43DA:  MOVLW  48
43DC:  MOVWF  xE6
43DE:  MOVLW  85
43E0:  MOVWF  xE5
43E2:  MOVFF  03,EC
43E6:  MOVFF  02,EB
43EA:  MOVFF  01,EA
43EE:  MOVFF  00,E9
43F2:  CALL   1E46
43F6:  MOVFF  00,D0
43FA:  MOVFF  01,D1
43FE:  MOVFF  02,D2
4402:  MOVFF  03,D3
4406:  MOVLW  01
4408:  MOVWF  xD4
440A:  CALL   2228
440E:  MOVFF  00,D4
4412:  MOVFF  01,D5
4416:  MOVFF  02,D6
441A:  MOVFF  03,D7
441E:  MOVLW  5C
4420:  MOVWF  FF6
4422:  MOVLW  07
4424:  MOVWF  FF7
4426:  MOVLW  05
4428:  MOVWF  xD8
442A:  CALL   1B8C
442E:  MOVLW  01
4430:  MOVWF  FE9
4432:  MOVFF  D3,DB
4436:  MOVFF  D2,DA
443A:  MOVFF  D1,D9
443E:  MOVFF  D0,D8
4442:  CLRF   xDC
4444:  CALL   1FF2
4448:  MOVLW  25
444A:  MOVWF  xE5
444C:  CALL   0C48
4450:  MOVLW  68
4452:  MOVWF  FF6
4454:  MOVLW  07
4456:  MOVWF  FF7
4458:  MOVLW  04
445A:  MOVWF  xD8
445C:  CALL   1B8C
4460:  MOVLW  01
4462:  MOVWF  FE9
4464:  MOVFF  D7,DB
4468:  MOVFF  D6,DA
446C:  MOVFF  D5,D9
4470:  MOVFF  D4,D8
4474:  CLRF   xDC
4476:  CALL   1FF2
447A:  MOVLW  20
447C:  MOVWF  xE5
447E:  CALL   0C48
....................       lcd_gotoxy(1,3); 
4482:  MOVLW  01
4484:  MOVWF  xE6
4486:  MOVLW  03
4488:  MOVWF  xE7
448A:  CALL   0BD6
....................       printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
448E:  MOVLW  02
4490:  MOVWF  xD4
4492:  CALL   2228
4496:  MOVFF  00,D0
449A:  MOVFF  01,D1
449E:  MOVFF  02,D2
44A2:  MOVFF  03,D3
44A6:  MOVFF  03,D7
44AA:  MOVFF  02,D6
44AE:  MOVFF  01,D5
44B2:  MOVFF  00,D4
44B6:  CLRF   xDB
44B8:  MOVLW  C0
44BA:  MOVWF  xDA
44BC:  MOVLW  7F
44BE:  MOVWF  xD9
44C0:  MOVLW  88
44C2:  MOVWF  xD8
44C4:  CALL   0D2A
44C8:  CLRF   xE8
44CA:  CLRF   xE7
44CC:  MOVLW  48
44CE:  MOVWF  xE6
44D0:  MOVLW  85
44D2:  MOVWF  xE5
44D4:  MOVFF  03,EC
44D8:  MOVFF  02,EB
44DC:  MOVFF  01,EA
44E0:  MOVFF  00,E9
44E4:  CALL   1E46
44E8:  MOVFF  00,D0
44EC:  MOVFF  01,D1
44F0:  MOVFF  02,D2
44F4:  MOVFF  03,D3
44F8:  MOVLW  74
44FA:  MOVWF  FF6
44FC:  MOVLW  07
44FE:  MOVWF  FF7
4500:  MOVLW  04
4502:  MOVWF  xD8
4504:  CALL   1B8C
4508:  MOVLW  01
450A:  MOVWF  FE9
450C:  MOVFF  6F,DB
4510:  MOVFF  6E,DA
4514:  MOVFF  6D,D9
4518:  MOVFF  6C,D8
451C:  MOVWF  xDC
451E:  CALL   1FF2
4522:  MOVLW  7D
4524:  MOVWF  FF6
4526:  MOVLW  07
4528:  MOVWF  FF7
452A:  MOVLW  0A
452C:  MOVWF  xD8
452E:  CALL   1B8C
4532:  MOVLW  01
4534:  MOVWF  FE9
4536:  MOVFF  D3,DB
453A:  MOVFF  D2,DA
453E:  MOVFF  D1,D9
4542:  MOVFF  D0,D8
4546:  CLRF   xDC
4548:  CALL   1FF2
....................       lcd_gotoxy(1,4); 
454C:  MOVLW  01
454E:  MOVWF  xE6
4550:  MOVLW  04
4552:  MOVWF  xE7
4554:  CALL   0BD6
....................       printf(lcd_putc,"Ajuste1= %2.1f ",Ajuste1); 
4558:  MOVLW  8E
455A:  MOVWF  FF6
455C:  MOVLW  07
455E:  MOVWF  FF7
4560:  MOVLW  09
4562:  MOVWF  xD8
4564:  CALL   1B8C
4568:  MOVLW  01
456A:  MOVWF  FE9
456C:  MOVFF  9B,DB
4570:  MOVFF  9A,DA
4574:  MOVFF  99,D9
4578:  MOVFF  98,D8
457C:  MOVWF  xDC
457E:  CALL   1FF2
4582:  MOVLW  20
4584:  MOVWF  xE5
4586:  CALL   0C48
....................        
....................       if(Ajuste1>30.0) 
458A:  CLRF   xD7
458C:  CLRF   xD6
458E:  MOVLW  70
4590:  MOVWF  xD5
4592:  MOVLW  83
4594:  MOVWF  xD4
4596:  MOVFF  9B,DB
459A:  MOVFF  9A,DA
459E:  MOVFF  99,D9
45A2:  MOVFF  98,D8
45A6:  CALL   1542
45AA:  BNC   45B4
....................          Ajuste1=0.0; 
45AC:  CLRF   x9B
45AE:  CLRF   x9A
45B0:  CLRF   x99
45B2:  CLRF   x98
....................           
....................       if(Ajuste1<0.0) 
45B4:  MOVFF  9B,D7
45B8:  MOVFF  9A,D6
45BC:  MOVFF  99,D5
45C0:  MOVFF  98,D4
45C4:  CLRF   xDB
45C6:  CLRF   xDA
45C8:  CLRF   xD9
45CA:  CLRF   xD8
45CC:  CALL   1542
45D0:  BNC   45DA
....................          {Ajuste1=0.0;} 
45D2:  CLRF   x9B
45D4:  CLRF   x9A
45D6:  CLRF   x99
45D8:  CLRF   x98
....................        
....................       if(UP){//Si oprime hacia arriba 
45DA:  BSF    F92.5
45DC:  BTFSS  F80.5
45DE:  BRA    4624
....................          delay_ms(50); 
45E0:  MOVLW  32
45E2:  MOVWF  xEB
45E4:  CALL   0AC0
....................          if(UP){ 
45E8:  BSF    F92.5
45EA:  BTFSS  F80.5
45EC:  BRA    4624
....................             Ajuste1+=0.1; 
45EE:  BCF    FD8.1
45F0:  MOVFF  9B,DA
45F4:  MOVFF  9A,D9
45F8:  MOVFF  99,D8
45FC:  MOVFF  98,D7
4600:  MOVLW  CD
4602:  MOVWF  xDE
4604:  MOVLW  CC
4606:  MOVWF  xDD
4608:  MOVLW  4C
460A:  MOVWF  xDC
460C:  MOVLW  7B
460E:  MOVWF  xDB
4610:  CALL   0E84
4614:  MOVFF  03,9B
4618:  MOVFF  02,9A
461C:  MOVFF  01,99
4620:  MOVFF  00,98
....................          } 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
4624:  BSF    F96.0
4626:  BTFSS  F84.0
4628:  BRA    466E
....................          delay_ms(50); 
462A:  MOVLW  32
462C:  MOVWF  xEB
462E:  CALL   0AC0
....................          if(DOWN){ 
4632:  BSF    F96.0
4634:  BTFSS  F84.0
4636:  BRA    466E
....................             Ajuste1-=0.1; 
4638:  BSF    FD8.1
463A:  MOVFF  9B,DA
463E:  MOVFF  9A,D9
4642:  MOVFF  99,D8
4646:  MOVFF  98,D7
464A:  MOVLW  CD
464C:  MOVWF  xDE
464E:  MOVLW  CC
4650:  MOVWF  xDD
4652:  MOVLW  4C
4654:  MOVWF  xDC
4656:  MOVLW  7B
4658:  MOVWF  xDB
465A:  CALL   0E84
465E:  MOVFF  03,9B
4662:  MOVFF  02,9A
4666:  MOVFF  01,99
466A:  MOVFF  00,98
....................          } 
....................       } 
....................        
....................       if(RIGHT){// Si oprime derecha 
466E:  BSF    F96.1
4670:  BTFSS  F84.1
4672:  BRA    47C4
....................          delay_ms(20); 
4674:  MOVLW  14
4676:  MOVWF  xEB
4678:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0) { 
467C:  BSF    F96.1
467E:  BTFSS  F84.1
4680:  BRA    47C2
4682:  BTFSC  3C.5
4684:  BRA    47C2
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4686:  MOVLW  01
4688:  MOVWF  17
468A:  CLRF   3E
468C:  MOVLW  02
468E:  MOVWF  1B
4690:  MOVWF  1D
4692:  MOVLW  0B
4694:  MOVWF  1A
4696:  MOVLW  1E
4698:  MOVWF  xEB
469A:  CALL   0AC0
469E:  MOVLW  0C
46A0:  MOVWF  xE5
46A2:  CALL   0C48
....................             Temporal=Ajuste1; 
46A6:  MOVFF  9B,87
46AA:  MOVFF  9A,86
46AE:  MOVFF  99,85
46B2:  MOVFF  98,84
....................             Entero=(int)Ajuste1; 
46B6:  MOVFF  9B,D3
46BA:  MOVFF  9A,D2
46BE:  MOVFF  99,D1
46C2:  MOVFF  98,D0
46C6:  CALL   2178
46CA:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
46CE:  CLRF   xDA
46D0:  MOVFF  24,D9
46D4:  CALL   0CF4
46D8:  BSF    FD8.1
46DA:  MOVFF  87,DA
46DE:  MOVFF  86,D9
46E2:  MOVFF  85,D8
46E6:  MOVFF  84,D7
46EA:  MOVFF  03,DE
46EE:  MOVFF  02,DD
46F2:  MOVFF  01,DC
46F6:  MOVFF  00,DB
46FA:  CALL   0E84
46FE:  MOVFF  03,87
4702:  MOVFF  02,86
4706:  MOVFF  01,85
470A:  MOVFF  00,84
....................             Temporal2=Temporal*10.0; 
470E:  MOVFF  87,E8
4712:  MOVFF  86,E7
4716:  MOVFF  85,E6
471A:  MOVFF  84,E5
471E:  CLRF   xEC
4720:  CLRF   xEB
4722:  MOVLW  20
4724:  MOVWF  xEA
4726:  MOVLW  82
4728:  MOVWF  xE9
472A:  CALL   1E46
472E:  MOVFF  03,8B
4732:  MOVFF  02,8A
4736:  MOVFF  01,89
473A:  MOVFF  00,88
....................             Decimal1=(int8)Temporal2; 
473E:  MOVFF  8B,D3
4742:  MOVFF  8A,D2
4746:  MOVFF  89,D1
474A:  MOVFF  88,D0
474E:  CALL   2178
4752:  MOVFF  01,25
....................             write_eeprom(25,Entero);delay_ms(20); 
4756:  MOVLW  19
4758:  MOVWF  FA9
475A:  MOVFF  24,FA8
475E:  BCF    FA6.6
4760:  BCF    FA6.7
4762:  BSF    FA6.2
4764:  MOVF   FF2,W
4766:  MOVWF  00
4768:  BCF    FF2.7
476A:  MOVLB  F
476C:  MOVLW  55
476E:  MOVWF  FA7
4770:  MOVLW  AA
4772:  MOVWF  FA7
4774:  BSF    FA6.1
4776:  BTFSC  FA6.1
4778:  BRA    4776
477A:  BCF    FA6.2
477C:  MOVF   00,W
477E:  IORWF  FF2,F
4780:  MOVLW  14
4782:  MOVLB  0
4784:  MOVWF  xEB
4786:  CALL   0AC0
....................             write_eeprom(26,Decimal1);delay_ms(20); 
478A:  MOVLW  1A
478C:  MOVWF  FA9
478E:  MOVFF  25,FA8
4792:  BCF    FA6.6
4794:  BCF    FA6.7
4796:  BSF    FA6.2
4798:  MOVF   FF2,W
479A:  MOVWF  00
479C:  BCF    FF2.7
479E:  MOVLB  F
47A0:  MOVLW  55
47A2:  MOVWF  FA7
47A4:  MOVLW  AA
47A6:  MOVWF  FA7
47A8:  BSF    FA6.1
47AA:  BTFSC  FA6.1
47AC:  BRA    47AA
47AE:  BCF    FA6.2
47B0:  MOVF   00,W
47B2:  IORWF  FF2,F
47B4:  MOVLW  14
47B6:  MOVLB  0
47B8:  MOVWF  xEB
47BA:  CALL   0AC0
....................             MensajeGuardado(); 
47BE:  CALL   21B0
....................          } 
....................       }else{ 
47C2:  BRA    47C6
....................          Flanco1 = 0; 
47C4:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
47C6:  BSF    F96.2
47C8:  BTFSS  F84.2
47CA:  BRA    4808
....................          delay_ms(20); 
47CC:  MOVLW  14
47CE:  MOVWF  xEB
47D0:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0) { 
47D4:  BSF    F96.2
47D6:  BTFSS  F84.2
47D8:  BRA    4806
47DA:  BTFSC  3C.7
47DC:  BRA    4806
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
47DE:  MOVLW  01
47E0:  MOVWF  17
47E2:  CLRF   3E
47E4:  MOVLW  02
47E6:  MOVWF  1B
47E8:  MOVWF  1D
47EA:  MOVLW  0B
47EC:  MOVWF  1A
47EE:  MOVLW  02
47F0:  MOVWF  xD0
47F2:  MOVLW  FA
47F4:  MOVWF  xEB
47F6:  CALL   0AC0
47FA:  DECFSZ xD0,F
47FC:  BRA    47F2
47FE:  MOVLW  0C
4800:  MOVWF  xE5
4802:  CALL   0C48
....................          } 
....................       }else{ 
4806:  BRA    480A
....................          Flanco3 = 0; 
4808:  BCF    3C.7
....................       } 
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
480A:  MOVF   17,W
480C:  SUBLW  09
480E:  BTFSS  FD8.2
4810:  BRA    4E92
....................    { 
....................    lcd_gotoxy(1,1); 
4812:  MOVLW  01
4814:  MOVWF  xE6
4816:  MOVWF  xE7
4818:  CALL   0BD6
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
481C:  CLRF   xDA
481E:  MOVFF  2A,D9
4822:  CALL   0CF4
4826:  MOVFF  00,D0
482A:  MOVFF  01,D1
482E:  MOVFF  02,D2
4832:  MOVFF  03,D3
4836:  MOVFF  03,D7
483A:  MOVFF  02,D6
483E:  MOVFF  01,D5
4842:  MOVFF  00,D4
4846:  CLRF   xDB
4848:  CLRF   xDA
484A:  MOVLW  7F
484C:  MOVWF  xD9
484E:  MOVLW  86
4850:  MOVWF  xD8
4852:  CALL   0D2A
4856:  CLRF   xE8
4858:  CLRF   xE7
485A:  MOVLW  48
485C:  MOVWF  xE6
485E:  MOVLW  85
4860:  MOVWF  xE5
4862:  MOVFF  03,EC
4866:  MOVFF  02,EB
486A:  MOVFF  01,EA
486E:  MOVFF  00,E9
4872:  CALL   1E46
4876:  MOVFF  00,D0
487A:  MOVFF  01,D1
487E:  MOVFF  02,D2
4882:  MOVFF  03,D3
4886:  MOVLW  9E
4888:  MOVWF  FF6
488A:  MOVLW  07
488C:  MOVWF  FF7
488E:  MOVLW  0D
4890:  MOVWF  xD8
4892:  CALL   1B8C
4896:  MOVLW  01
4898:  MOVWF  FE9
489A:  MOVFF  D3,DB
489E:  MOVFF  D2,DA
48A2:  MOVFF  D1,D9
48A6:  MOVFF  D0,D8
48AA:  CLRF   xDC
48AC:  CALL   1FF2
48B0:  MOVLW  25
48B2:  MOVWF  xE5
48B4:  CALL   0C48
48B8:  MOVLW  20
48BA:  MOVWF  xE5
48BC:  CALL   0C48
....................  
....................    lcd_gotoxy(1,4); 
48C0:  MOVLW  01
48C2:  MOVWF  xE6
48C4:  MOVLW  04
48C6:  MOVWF  xE7
48C8:  CALL   0BD6
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
48CC:  MOVLW  02
48CE:  MOVWF  xD4
48D0:  CALL   2228
48D4:  MOVFF  00,D0
48D8:  MOVFF  01,D1
48DC:  MOVFF  02,D2
48E0:  MOVFF  03,D3
48E4:  MOVFF  03,D7
48E8:  MOVFF  02,D6
48EC:  MOVFF  01,D5
48F0:  MOVFF  00,D4
48F4:  CLRF   xDB
48F6:  MOVLW  C0
48F8:  MOVWF  xDA
48FA:  MOVLW  7F
48FC:  MOVWF  xD9
48FE:  MOVLW  88
4900:  MOVWF  xD8
4902:  CALL   0D2A
4906:  CLRF   xE8
4908:  CLRF   xE7
490A:  MOVLW  48
490C:  MOVWF  xE6
490E:  MOVLW  85
4910:  MOVWF  xE5
4912:  MOVFF  03,EC
4916:  MOVFF  02,EB
491A:  MOVFF  01,EA
491E:  MOVFF  00,E9
4922:  CALL   1E46
4926:  MOVFF  00,D0
492A:  MOVFF  01,D1
492E:  MOVFF  02,D2
4932:  MOVFF  03,D3
4936:  MOVLW  B4
4938:  MOVWF  FF6
493A:  MOVLW  07
493C:  MOVWF  FF7
493E:  MOVLW  04
4940:  MOVWF  xD8
4942:  CALL   1B8C
4946:  MOVLW  01
4948:  MOVWF  FE9
494A:  MOVFF  6F,DB
494E:  MOVFF  6E,DA
4952:  MOVFF  6D,D9
4956:  MOVFF  6C,D8
495A:  MOVWF  xDC
495C:  CALL   1FF2
4960:  MOVLW  BD
4962:  MOVWF  FF6
4964:  MOVLW  07
4966:  MOVWF  FF7
4968:  MOVLW  0A
496A:  MOVWF  xD8
496C:  CALL   1B8C
4970:  MOVLW  01
4972:  MOVWF  FE9
4974:  MOVFF  D3,DB
4978:  MOVFF  D2,DA
497C:  MOVFF  D1,D9
4980:  MOVFF  D0,D8
4984:  CLRF   xDC
4986:  CALL   1FF2
....................        
....................          if(UP && DOWN){ 
498A:  BSF    F92.5
498C:  BTFSS  F80.5
498E:  BRA    49BA
4990:  BSF    F96.0
4992:  BTFSS  F84.0
4994:  BRA    49BA
....................             delay_ms(20); 
4996:  MOVLW  14
4998:  MOVWF  xEB
499A:  CALL   0AC0
....................             if(UP && DOWN){ 
499E:  BSF    F92.5
49A0:  BTFSS  F80.5
49A2:  BRA    49BA
49A4:  BSF    F96.0
49A6:  BTFSS  F84.0
49A8:  BRA    49BA
....................                ModoAuto=0; 
49AA:  BCF    52.3
....................                ModoManual=1; 
49AC:  BSF    52.2
....................                ModoSemi=0; 
49AE:  BCF    52.4
....................                Automa=10; 
49B0:  MOVLW  0A
49B2:  MOVWF  2D
....................                Semi=10; 
49B4:  MOVWF  2F
....................                Manual=20; 
49B6:  MOVLW  14
49B8:  MOVWF  2E
....................             } 
....................          } 
....................           
....................          if(DOWN && RIGHT){ 
49BA:  BSF    F96.0
49BC:  BTFSS  F84.0
49BE:  BRA    49EA
49C0:  BSF    F96.1
49C2:  BTFSS  F84.1
49C4:  BRA    49EA
....................             delay_ms(20); 
49C6:  MOVLW  14
49C8:  MOVWF  xEB
49CA:  CALL   0AC0
....................             if(DOWN && RIGHT){ 
49CE:  BSF    F96.0
49D0:  BTFSS  F84.0
49D2:  BRA    49EA
49D4:  BSF    F96.1
49D6:  BTFSS  F84.1
49D8:  BRA    49EA
....................                ModoAuto=1; 
49DA:  BSF    52.3
....................                ModoManual=0; 
49DC:  BCF    52.2
....................                ModoSemi=0; 
49DE:  BCF    52.4
....................                Automa=20; 
49E0:  MOVLW  14
49E2:  MOVWF  2D
....................                Semi=10; 
49E4:  MOVLW  0A
49E6:  MOVWF  2F
....................                Manual=10; 
49E8:  MOVWF  2E
....................             } 
....................          } 
....................           
....................          if(UP && RIGHT){ 
49EA:  BSF    F92.5
49EC:  BTFSS  F80.5
49EE:  BRA    4A1C
49F0:  BSF    F96.1
49F2:  BTFSS  F84.1
49F4:  BRA    4A1C
....................             delay_ms(20); 
49F6:  MOVLW  14
49F8:  MOVWF  xEB
49FA:  CALL   0AC0
....................             if(UP && RIGHT){ 
49FE:  BSF    F92.5
4A00:  BTFSS  F80.5
4A02:  BRA    4A1C
4A04:  BSF    F96.1
4A06:  BTFSS  F84.1
4A08:  BRA    4A1C
....................                ModoAuto=0; 
4A0A:  BCF    52.3
....................                ModoManual=0; 
4A0C:  BCF    52.2
....................                ModoSemi=1; 
4A0E:  BSF    52.4
....................                Automa=10; 
4A10:  MOVLW  0A
4A12:  MOVWF  2D
....................                Semi=20; 
4A14:  MOVLW  14
4A16:  MOVWF  2F
....................                Manual=10; 
4A18:  MOVLW  0A
4A1A:  MOVWF  2E
....................             } 
....................          } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4A1C:  BTFSC  52.2
4A1E:  BRA    4A28
4A20:  MOVF   2E,W
4A22:  SUBLW  14
4A24:  BTFSS  FD8.2
4A26:  BRA    4B8E
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4A28:  BCF    52.3
4A2A:  BCF    52.4
4A2C:  MOVLW  0A
4A2E:  MOVWF  2D
4A30:  MOVWF  2F
....................          lcd_gotoxy(1,2); 
4A32:  MOVLW  01
4A34:  MOVWF  xE6
4A36:  MOVLW  02
4A38:  MOVWF  xE7
4A3A:  CALL   0BD6
....................          printf(lcd_putc,"   Modo Manual  "); 
4A3E:  MOVLW  CE
4A40:  MOVWF  FF6
4A42:  MOVLW  07
4A44:  MOVWF  FF7
4A46:  CALL   1B6A
....................          lcd_gotoxy(1,3); 
4A4A:  MOVLW  01
4A4C:  MOVWF  xE6
4A4E:  MOVLW  03
4A50:  MOVWF  xE7
4A52:  CALL   0BD6
....................          printf(lcd_putc,"    Seleccionado    "); 
4A56:  MOVLW  E0
4A58:  MOVWF  FF6
4A5A:  MOVLW  07
4A5C:  MOVWF  FF7
4A5E:  CALL   1B6A
....................          if(LEFT) 
4A62:  BSF    F96.2
4A64:  BTFSS  F84.2
4A66:  BRA    4B8E
....................          { 
....................             delay_ms(20); 
4A68:  MOVLW  14
4A6A:  MOVWF  xEB
4A6C:  CALL   0AC0
....................             if(LEFT){ 
4A70:  BSF    F96.2
4A72:  BTFSS  F84.2
4A74:  BRA    4B8E
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
4A76:  BCF    52.4
4A78:  BCF    52.3
4A7A:  BCF    52.2
4A7C:  MOVLW  14
4A7E:  MOVWF  2E
4A80:  MOVLW  0A
4A82:  MOVWF  2D
4A84:  MOVWF  2F
4A86:  MOVLW  02
4A88:  MOVWF  xD0
4A8A:  MOVLW  FA
4A8C:  MOVWF  xEB
4A8E:  CALL   0AC0
4A92:  DECFSZ xD0,F
4A94:  BRA    4A8A
4A96:  MOVLW  0C
4A98:  MOVWF  xE5
4A9A:  CALL   0C48
4A9E:  MOVLW  FE
4AA0:  MOVWF  xD0
4AA2:  CALL   227E
4AA6:  MOVLW  FE
4AA8:  MOVWF  2A
....................                write_eeprom(10,Manual);delay_ms(20); 
4AAA:  MOVLW  0A
4AAC:  MOVWF  FA9
4AAE:  MOVFF  2E,FA8
4AB2:  BCF    FA6.6
4AB4:  BCF    FA6.7
4AB6:  BSF    FA6.2
4AB8:  MOVF   FF2,W
4ABA:  MOVWF  00
4ABC:  BCF    FF2.7
4ABE:  MOVLB  F
4AC0:  MOVLW  55
4AC2:  MOVWF  FA7
4AC4:  MOVLW  AA
4AC6:  MOVWF  FA7
4AC8:  BSF    FA6.1
4ACA:  BTFSC  FA6.1
4ACC:  BRA    4ACA
4ACE:  BCF    FA6.2
4AD0:  MOVF   00,W
4AD2:  IORWF  FF2,F
4AD4:  MOVLW  14
4AD6:  MOVLB  0
4AD8:  MOVWF  xEB
4ADA:  CALL   0AC0
....................                write_eeprom(12,Semi);delay_ms(20); 
4ADE:  MOVLW  0C
4AE0:  MOVWF  FA9
4AE2:  MOVFF  2F,FA8
4AE6:  BCF    FA6.6
4AE8:  BCF    FA6.7
4AEA:  BSF    FA6.2
4AEC:  MOVF   FF2,W
4AEE:  MOVWF  00
4AF0:  BCF    FF2.7
4AF2:  MOVLB  F
4AF4:  MOVLW  55
4AF6:  MOVWF  FA7
4AF8:  MOVLW  AA
4AFA:  MOVWF  FA7
4AFC:  BSF    FA6.1
4AFE:  BTFSC  FA6.1
4B00:  BRA    4AFE
4B02:  BCF    FA6.2
4B04:  MOVF   00,W
4B06:  IORWF  FF2,F
4B08:  MOVLW  14
4B0A:  MOVLB  0
4B0C:  MOVWF  xEB
4B0E:  CALL   0AC0
....................                write_eeprom(11,Automa);delay_ms(20); 
4B12:  MOVLW  0B
4B14:  MOVWF  FA9
4B16:  MOVFF  2D,FA8
4B1A:  BCF    FA6.6
4B1C:  BCF    FA6.7
4B1E:  BSF    FA6.2
4B20:  MOVF   FF2,W
4B22:  MOVWF  00
4B24:  BCF    FF2.7
4B26:  MOVLB  F
4B28:  MOVLW  55
4B2A:  MOVWF  FA7
4B2C:  MOVLW  AA
4B2E:  MOVWF  FA7
4B30:  BSF    FA6.1
4B32:  BTFSC  FA6.1
4B34:  BRA    4B32
4B36:  BCF    FA6.2
4B38:  MOVF   00,W
4B3A:  IORWF  FF2,F
4B3C:  MOVLW  14
4B3E:  MOVLB  0
4B40:  MOVWF  xEB
4B42:  CALL   0AC0
....................                write_eeprom(13,tmp);delay_ms(20); 
4B46:  MOVLW  0D
4B48:  MOVWF  FA9
4B4A:  MOVFF  2A,FA8
4B4E:  BCF    FA6.6
4B50:  BCF    FA6.7
4B52:  BSF    FA6.2
4B54:  MOVF   FF2,W
4B56:  MOVWF  00
4B58:  BCF    FF2.7
4B5A:  MOVLB  F
4B5C:  MOVLW  55
4B5E:  MOVWF  FA7
4B60:  MOVLW  AA
4B62:  MOVWF  FA7
4B64:  BSF    FA6.1
4B66:  BTFSC  FA6.1
4B68:  BRA    4B66
4B6A:  BCF    FA6.2
4B6C:  MOVF   00,W
4B6E:  IORWF  FF2,F
4B70:  MOVLW  14
4B72:  MOVLB  0
4B74:  MOVWF  xEB
4B76:  CALL   0AC0
....................                MensajeGuardado(); 
4B7A:  CALL   21B0
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
4B7E:  MOVLW  01
4B80:  MOVWF  17
4B82:  CLRF   3E
4B84:  MOVLW  02
4B86:  MOVWF  1B
4B88:  MOVWF  1D
4B8A:  MOVLW  0B
4B8C:  MOVWF  1A
....................             } 
....................          }  
....................       } 
....................          
....................       if(ModoAuto == 1 || Automa==20) 
4B8E:  BTFSC  52.3
4B90:  BRA    4B9A
4B92:  MOVF   2D,W
4B94:  SUBLW  14
4B96:  BTFSS  FD8.2
4B98:  BRA    4CF4
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
4B9A:  BCF    52.2
4B9C:  BCF    52.4
4B9E:  MOVLW  0A
4BA0:  MOVWF  2F
4BA2:  MOVWF  2E
....................          lcd_gotoxy(1,2); 
4BA4:  MOVLW  01
4BA6:  MOVWF  xE6
4BA8:  MOVLW  02
4BAA:  MOVWF  xE7
4BAC:  CALL   0BD6
....................          printf(lcd_putc,"   Modo Auto   "); 
4BB0:  MOVLW  F6
4BB2:  MOVWF  FF6
4BB4:  MOVLW  07
4BB6:  MOVWF  FF7
4BB8:  CALL   1B6A
....................          lcd_gotoxy(1,3); 
4BBC:  MOVLW  01
4BBE:  MOVWF  xE6
4BC0:  MOVLW  03
4BC2:  MOVWF  xE7
4BC4:  CALL   0BD6
....................          printf(lcd_putc,"    Seleccionado    "); 
4BC8:  MOVLW  06
4BCA:  MOVWF  FF6
4BCC:  MOVLW  08
4BCE:  MOVWF  FF7
4BD0:  CALL   1B6A
....................          if(LEFT) 
4BD4:  BSF    F96.2
4BD6:  BTFSS  F84.2
4BD8:  BRA    4CF4
....................          { 
....................             delay_ms(20); 
4BDA:  MOVLW  14
4BDC:  MOVWF  xEB
4BDE:  CALL   0AC0
....................             if(LEFT){ 
4BE2:  BSF    F96.2
4BE4:  BTFSS  F84.2
4BE6:  BRA    4CF4
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
4BE8:  BCF    52.4
4BEA:  BCF    52.3
4BEC:  BCF    52.2
4BEE:  MOVLW  14
4BF0:  MOVWF  2D
4BF2:  MOVLW  0A
4BF4:  MOVWF  2F
4BF6:  MOVWF  2E
4BF8:  MOVLW  02
4BFA:  MOVWF  xD0
4BFC:  MOVLW  FA
4BFE:  MOVWF  xEB
4C00:  CALL   0AC0
4C04:  DECFSZ xD0,F
4C06:  BRA    4BFC
4C08:  MOVLW  0C
4C0A:  MOVWF  xE5
4C0C:  CALL   0C48
....................                write_eeprom(10,Manual);delay_ms(20); 
4C10:  MOVLW  0A
4C12:  MOVWF  FA9
4C14:  MOVFF  2E,FA8
4C18:  BCF    FA6.6
4C1A:  BCF    FA6.7
4C1C:  BSF    FA6.2
4C1E:  MOVF   FF2,W
4C20:  MOVWF  00
4C22:  BCF    FF2.7
4C24:  MOVLB  F
4C26:  MOVLW  55
4C28:  MOVWF  FA7
4C2A:  MOVLW  AA
4C2C:  MOVWF  FA7
4C2E:  BSF    FA6.1
4C30:  BTFSC  FA6.1
4C32:  BRA    4C30
4C34:  BCF    FA6.2
4C36:  MOVF   00,W
4C38:  IORWF  FF2,F
4C3A:  MOVLW  14
4C3C:  MOVLB  0
4C3E:  MOVWF  xEB
4C40:  CALL   0AC0
....................                write_eeprom(12,Semi);delay_ms(20); 
4C44:  MOVLW  0C
4C46:  MOVWF  FA9
4C48:  MOVFF  2F,FA8
4C4C:  BCF    FA6.6
4C4E:  BCF    FA6.7
4C50:  BSF    FA6.2
4C52:  MOVF   FF2,W
4C54:  MOVWF  00
4C56:  BCF    FF2.7
4C58:  MOVLB  F
4C5A:  MOVLW  55
4C5C:  MOVWF  FA7
4C5E:  MOVLW  AA
4C60:  MOVWF  FA7
4C62:  BSF    FA6.1
4C64:  BTFSC  FA6.1
4C66:  BRA    4C64
4C68:  BCF    FA6.2
4C6A:  MOVF   00,W
4C6C:  IORWF  FF2,F
4C6E:  MOVLW  14
4C70:  MOVLB  0
4C72:  MOVWF  xEB
4C74:  CALL   0AC0
....................                write_eeprom(11,Automa);delay_ms(20); 
4C78:  MOVLW  0B
4C7A:  MOVWF  FA9
4C7C:  MOVFF  2D,FA8
4C80:  BCF    FA6.6
4C82:  BCF    FA6.7
4C84:  BSF    FA6.2
4C86:  MOVF   FF2,W
4C88:  MOVWF  00
4C8A:  BCF    FF2.7
4C8C:  MOVLB  F
4C8E:  MOVLW  55
4C90:  MOVWF  FA7
4C92:  MOVLW  AA
4C94:  MOVWF  FA7
4C96:  BSF    FA6.1
4C98:  BTFSC  FA6.1
4C9A:  BRA    4C98
4C9C:  BCF    FA6.2
4C9E:  MOVF   00,W
4CA0:  IORWF  FF2,F
4CA2:  MOVLW  14
4CA4:  MOVLB  0
4CA6:  MOVWF  xEB
4CA8:  CALL   0AC0
....................                write_eeprom(13,tmp);delay_ms(20); 
4CAC:  MOVLW  0D
4CAE:  MOVWF  FA9
4CB0:  MOVFF  2A,FA8
4CB4:  BCF    FA6.6
4CB6:  BCF    FA6.7
4CB8:  BSF    FA6.2
4CBA:  MOVF   FF2,W
4CBC:  MOVWF  00
4CBE:  BCF    FF2.7
4CC0:  MOVLB  F
4CC2:  MOVLW  55
4CC4:  MOVWF  FA7
4CC6:  MOVLW  AA
4CC8:  MOVWF  FA7
4CCA:  BSF    FA6.1
4CCC:  BTFSC  FA6.1
4CCE:  BRA    4CCC
4CD0:  BCF    FA6.2
4CD2:  MOVF   00,W
4CD4:  IORWF  FF2,F
4CD6:  MOVLW  14
4CD8:  MOVLB  0
4CDA:  MOVWF  xEB
4CDC:  CALL   0AC0
....................                MensajeGuardado(); 
4CE0:  CALL   21B0
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
4CE4:  MOVLW  01
4CE6:  MOVWF  17
4CE8:  CLRF   3E
4CEA:  MOVLW  02
4CEC:  MOVWF  1B
4CEE:  MOVWF  1D
4CF0:  MOVLW  0B
4CF2:  MOVWF  1A
....................             } 
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
4CF4:  BTFSC  52.4
4CF6:  BRA    4D00
4CF8:  MOVF   2F,W
4CFA:  SUBLW  14
4CFC:  BTFSS  FD8.2
4CFE:  BRA    4E92
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4D00:  BCF    52.2
4D02:  BCF    52.3
4D04:  MOVLW  0A
4D06:  MOVWF  2D
4D08:  MOVWF  2E
....................          lcd_gotoxy(1,2); 
4D0A:  MOVLW  01
4D0C:  MOVWF  xE6
4D0E:  MOVLW  02
4D10:  MOVWF  xE7
4D12:  CALL   0BD6
....................          printf(lcd_putc,"   Modo Semi   "); 
4D16:  MOVLW  1C
4D18:  MOVWF  FF6
4D1A:  MOVLW  08
4D1C:  MOVWF  FF7
4D1E:  CALL   1B6A
....................          lcd_gotoxy(1,3); 
4D22:  MOVLW  01
4D24:  MOVWF  xE6
4D26:  MOVLW  03
4D28:  MOVWF  xE7
4D2A:  CALL   0BD6
....................          printf(lcd_putc,"  Ajuste Valor    "); 
4D2E:  MOVLW  2C
4D30:  MOVWF  FF6
4D32:  MOVLW  08
4D34:  MOVWF  FF7
4D36:  CALL   1B6A
....................          if(UP){ 
4D3A:  BSF    F92.5
4D3C:  BTFSS  F80.5
4D3E:  BRA    4D50
....................             delay_ms(20); 
4D40:  MOVLW  14
4D42:  MOVWF  xEB
4D44:  CALL   0AC0
....................             if(UP) 
4D48:  BSF    F92.5
4D4A:  BTFSS  F80.5
4D4C:  BRA    4D50
....................                tmp++; 
4D4E:  INCF   2A,F
....................          } 
....................           
....................          if(DOWN){ 
4D50:  BSF    F96.0
4D52:  BTFSS  F84.0
4D54:  BRA    4D66
....................             delay_ms(20); 
4D56:  MOVLW  14
4D58:  MOVWF  xEB
4D5A:  CALL   0AC0
....................             if(DOWN) 
4D5E:  BSF    F96.0
4D60:  BTFSS  F84.0
4D62:  BRA    4D66
....................                tmp--; 
4D64:  DECF   2A,F
....................          } 
....................           
....................          ValorSemi=tmp; 
4D66:  MOVFF  2A,30
....................          ajustar_damper(tmp); 
4D6A:  MOVFF  2A,D0
4D6E:  CALL   227E
....................          if(LEFT) 
4D72:  BSF    F96.2
4D74:  BTFSS  F84.2
4D76:  BRA    4E92
....................          { 
....................             delay_ms(20); 
4D78:  MOVLW  14
4D7A:  MOVWF  xEB
4D7C:  CALL   0AC0
....................             if(LEFT){ 
4D80:  BSF    F96.2
4D82:  BTFSS  F84.2
4D84:  BRA    4E92
....................                write_eeprom(13,tmp);delay_ms(20);ModoSemi=0;ModoAuto=0;ModoManual=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
4D86:  MOVLW  0D
4D88:  MOVWF  FA9
4D8A:  MOVFF  2A,FA8
4D8E:  BCF    FA6.6
4D90:  BCF    FA6.7
4D92:  BSF    FA6.2
4D94:  MOVF   FF2,W
4D96:  MOVWF  00
4D98:  BCF    FF2.7
4D9A:  MOVLB  F
4D9C:  MOVLW  55
4D9E:  MOVWF  FA7
4DA0:  MOVLW  AA
4DA2:  MOVWF  FA7
4DA4:  BSF    FA6.1
4DA6:  BTFSC  FA6.1
4DA8:  BRA    4DA6
4DAA:  BCF    FA6.2
4DAC:  MOVF   00,W
4DAE:  IORWF  FF2,F
4DB0:  MOVLW  14
4DB2:  MOVLB  0
4DB4:  MOVWF  xEB
4DB6:  CALL   0AC0
4DBA:  BCF    52.4
4DBC:  BCF    52.3
4DBE:  BCF    52.2
4DC0:  MOVLW  14
4DC2:  MOVWF  2F
4DC4:  MOVLW  0A
4DC6:  MOVWF  2D
4DC8:  MOVWF  2E
4DCA:  MOVLW  02
4DCC:  MOVWF  xD0
4DCE:  MOVLW  FA
4DD0:  MOVWF  xEB
4DD2:  CALL   0AC0
4DD6:  DECFSZ xD0,F
4DD8:  BRA    4DCE
4DDA:  MOVLW  0C
4DDC:  MOVWF  xE5
4DDE:  CALL   0C48
....................                write_eeprom(12,Semi);delay_ms(20); 
4DE2:  MOVLW  0C
4DE4:  MOVWF  FA9
4DE6:  MOVFF  2F,FA8
4DEA:  BCF    FA6.6
4DEC:  BCF    FA6.7
4DEE:  BSF    FA6.2
4DF0:  MOVF   FF2,W
4DF2:  MOVWF  00
4DF4:  BCF    FF2.7
4DF6:  MOVLB  F
4DF8:  MOVLW  55
4DFA:  MOVWF  FA7
4DFC:  MOVLW  AA
4DFE:  MOVWF  FA7
4E00:  BSF    FA6.1
4E02:  BTFSC  FA6.1
4E04:  BRA    4E02
4E06:  BCF    FA6.2
4E08:  MOVF   00,W
4E0A:  IORWF  FF2,F
4E0C:  MOVLW  14
4E0E:  MOVLB  0
4E10:  MOVWF  xEB
4E12:  CALL   0AC0
....................                write_eeprom(11,Automa);delay_ms(20); 
4E16:  MOVLW  0B
4E18:  MOVWF  FA9
4E1A:  MOVFF  2D,FA8
4E1E:  BCF    FA6.6
4E20:  BCF    FA6.7
4E22:  BSF    FA6.2
4E24:  MOVF   FF2,W
4E26:  MOVWF  00
4E28:  BCF    FF2.7
4E2A:  MOVLB  F
4E2C:  MOVLW  55
4E2E:  MOVWF  FA7
4E30:  MOVLW  AA
4E32:  MOVWF  FA7
4E34:  BSF    FA6.1
4E36:  BTFSC  FA6.1
4E38:  BRA    4E36
4E3A:  BCF    FA6.2
4E3C:  MOVF   00,W
4E3E:  IORWF  FF2,F
4E40:  MOVLW  14
4E42:  MOVLB  0
4E44:  MOVWF  xEB
4E46:  CALL   0AC0
....................                write_eeprom(10,Manual);delay_ms(20); 
4E4A:  MOVLW  0A
4E4C:  MOVWF  FA9
4E4E:  MOVFF  2E,FA8
4E52:  BCF    FA6.6
4E54:  BCF    FA6.7
4E56:  BSF    FA6.2
4E58:  MOVF   FF2,W
4E5A:  MOVWF  00
4E5C:  BCF    FF2.7
4E5E:  MOVLB  F
4E60:  MOVLW  55
4E62:  MOVWF  FA7
4E64:  MOVLW  AA
4E66:  MOVWF  FA7
4E68:  BSF    FA6.1
4E6A:  BTFSC  FA6.1
4E6C:  BRA    4E6A
4E6E:  BCF    FA6.2
4E70:  MOVF   00,W
4E72:  IORWF  FF2,F
4E74:  MOVLW  14
4E76:  MOVLB  0
4E78:  MOVWF  xEB
4E7A:  CALL   0AC0
....................                MensajeGuardado(); 
4E7E:  CALL   21B0
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
4E82:  MOVLW  01
4E84:  MOVWF  17
4E86:  CLRF   3E
4E88:  MOVLW  02
4E8A:  MOVWF  1B
4E8C:  MOVWF  1D
4E8E:  MOVLW  0B
4E90:  MOVWF  1A
....................             } 
....................          }  
....................       }  
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //----------------Menu10--------------------------------------------------------------- 
....................    if(Menu == 10)// Menu de Tiempo de Purga 
4E92:  MOVF   17,W
4E94:  SUBLW  0A
4E96:  BTFSS  FD8.2
4E98:  BRA    50FA
....................    { 
....................       lcd_gotoxy(1,1); 
4E9A:  MOVLW  01
4E9C:  MOVWF  xE6
4E9E:  MOVWF  xE7
4EA0:  CALL   0BD6
....................       printf(lcd_putc,"     Tiempo  de      "); 
4EA4:  MOVLW  40
4EA6:  MOVWF  FF6
4EA8:  MOVLW  08
4EAA:  MOVWF  FF7
4EAC:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
4EB0:  MOVLW  01
4EB2:  MOVWF  xE6
4EB4:  MOVLW  02
4EB6:  MOVWF  xE7
4EB8:  CALL   0BD6
....................       printf(lcd_putc,"       Purga         "); 
4EBC:  MOVLW  56
4EBE:  MOVWF  FF6
4EC0:  MOVLW  08
4EC2:  MOVWF  FF7
4EC4:  CALL   1B6A
....................       lcd_gotoxy(6,3); 
4EC8:  MOVLW  06
4ECA:  MOVWF  xE6
4ECC:  MOVLW  03
4ECE:  MOVWF  xE7
4ED0:  CALL   0BD6
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
4ED4:  MOVFF  23,D0
4ED8:  MOVLW  01
4EDA:  MOVWF  xD1
4EDC:  CALL   1DDA
4EE0:  MOVLW  3A
4EE2:  MOVWF  xE5
4EE4:  CALL   0C48
4EE8:  MOVFF  36,D0
4EEC:  MOVLW  01
4EEE:  MOVWF  xD1
4EF0:  CALL   1DDA
4EF4:  MOVLW  75
4EF6:  MOVWF  FF6
4EF8:  MOVLW  08
4EFA:  MOVWF  FF7
4EFC:  MOVLW  08
4EFE:  MOVWF  xD8
4F00:  CALL   1B8C
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
4F04:  MOVLW  06
4F06:  ADDWF  21,W
4F08:  MOVWF  xD0
4F0A:  MOVWF  xE6
4F0C:  MOVLW  04
4F0E:  MOVWF  xE7
4F10:  CALL   0BD6
....................       lcd_putc(t[2]); 
4F14:  MOVFF  41,E5
4F18:  CALL   0C48
....................        
....................       if(unidad2<1) 
4F1C:  MOVF   21,F
4F1E:  BNZ   4F24
....................          unidad2=1; 
4F20:  MOVLW  01
4F22:  MOVWF  21
....................       if(unidad2>3) 
4F24:  MOVF   21,W
4F26:  SUBLW  03
4F28:  BC    4F2E
....................          unidad2=3;    
4F2A:  MOVLW  03
4F2C:  MOVWF  21
....................        
....................       if(UP){ 
4F2E:  BSF    F92.5
4F30:  BTFSS  F80.5
4F32:  BRA    4F6E
....................          if(unidad2==1){ 
4F34:  DECFSZ 21,W
4F36:  BRA    4F50
....................             if(purga_minutos_pro<61){ 
4F38:  MOVF   23,W
4F3A:  SUBLW  3C
4F3C:  BNC   4F50
....................                purga_minutos_pro++;delay_ms(300); 
4F3E:  INCF   23,F
4F40:  MOVLW  02
4F42:  MOVWF  xD0
4F44:  MOVLW  96
4F46:  MOVWF  xEB
4F48:  CALL   0AC0
4F4C:  DECFSZ xD0,F
4F4E:  BRA    4F44
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
4F50:  MOVF   21,W
4F52:  SUBLW  03
4F54:  BNZ   4F6E
....................             if(purga_segundos_pro<60){ 
4F56:  MOVF   36,W
4F58:  SUBLW  3B
4F5A:  BNC   4F6E
....................                purga_segundos_pro++;delay_ms(300); 
4F5C:  INCF   36,F
4F5E:  MOVLW  02
4F60:  MOVWF  xD0
4F62:  MOVLW  96
4F64:  MOVWF  xEB
4F66:  CALL   0AC0
4F6A:  DECFSZ xD0,F
4F6C:  BRA    4F62
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
4F6E:  BSF    F96.0
4F70:  BTFSS  F84.0
4F72:  BRA    4FE0
....................          if(unidad2==1){ 
4F74:  DECFSZ 21,W
4F76:  BRA    4FAA
....................             if(purga_minutos_pro>1){ 
4F78:  MOVF   23,W
4F7A:  SUBLW  01
4F7C:  BC    4F90
....................                purga_minutos_pro--;delay_ms(300); 
4F7E:  DECF   23,F
4F80:  MOVLW  02
4F82:  MOVWF  xD0
4F84:  MOVLW  96
4F86:  MOVWF  xEB
4F88:  CALL   0AC0
4F8C:  DECFSZ xD0,F
4F8E:  BRA    4F84
....................             } 
....................              
....................             if(purga_minutos_pro>60){ 
4F90:  MOVF   23,W
4F92:  SUBLW  3C
4F94:  BC    4FAA
....................                purga_minutos_pro=60;delay_ms(300); 
4F96:  MOVLW  3C
4F98:  MOVWF  23
4F9A:  MOVLW  02
4F9C:  MOVWF  xD0
4F9E:  MOVLW  96
4FA0:  MOVWF  xEB
4FA2:  CALL   0AC0
4FA6:  DECFSZ xD0,F
4FA8:  BRA    4F9E
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
4FAA:  MOVF   21,W
4FAC:  SUBLW  03
4FAE:  BNZ   4FE0
....................             if(purga_segundos_pro>0){ 
4FB0:  MOVF   36,F
4FB2:  BZ    4FC6
....................                purga_segundos_pro--;delay_ms(300); 
4FB4:  DECF   36,F
4FB6:  MOVLW  02
4FB8:  MOVWF  xD0
4FBA:  MOVLW  96
4FBC:  MOVWF  xEB
4FBE:  CALL   0AC0
4FC2:  DECFSZ xD0,F
4FC4:  BRA    4FBA
....................             } 
....................              
....................             if(purga_segundos_pro>59){ 
4FC6:  MOVF   36,W
4FC8:  SUBLW  3B
4FCA:  BC    4FE0
....................                purga_segundos_pro=59;delay_ms(300); 
4FCC:  MOVLW  3B
4FCE:  MOVWF  36
4FD0:  MOVLW  02
4FD2:  MOVWF  xD0
4FD4:  MOVLW  96
4FD6:  MOVWF  xEB
4FD8:  CALL   0AC0
4FDC:  DECFSZ xD0,F
4FDE:  BRA    4FD4
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
4FE0:  BSF    F96.1
4FE2:  BTFSS  F84.1
4FE4:  BRA    5018
....................          if(unidad2==1){ 
4FE6:  DECFSZ 21,W
4FE8:  BRA    4FF0
....................             unidad2=3; 
4FEA:  MOVLW  03
4FEC:  MOVWF  21
....................          }else{ 
4FEE:  BRA    5000
....................             if(unidad2==3){ 
4FF0:  MOVF   21,W
4FF2:  SUBLW  03
4FF4:  BNZ   4FFC
....................                unidad2=1; 
4FF6:  MOVLW  01
4FF8:  MOVWF  21
....................             }else{ 
4FFA:  BRA    5000
....................                unidad2=3; 
4FFC:  MOVLW  03
4FFE:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
5000:  MOVLW  02
5002:  MOVWF  xD0
5004:  MOVLW  FA
5006:  MOVWF  xEB
5008:  CALL   0AC0
500C:  DECFSZ xD0,F
500E:  BRA    5004
....................          printf(lcd_putc,"\f"); 
5010:  MOVLW  0C
5012:  MOVWF  xE5
5014:  CALL   0C48
....................       } 
....................        
....................       if(LEFT) 
5018:  BSF    F96.2
501A:  BTFSS  F84.2
501C:  BRA    50FA
....................       { 
....................          delay_ms(200); 
501E:  MOVLW  C8
5020:  MOVWF  xEB
5022:  CALL   0AC0
....................          printf(lcd_putc,"\f"); 
5026:  MOVLW  0C
5028:  MOVWF  xE5
502A:  CALL   0C48
....................          lcd_gotoxy(1,2); 
502E:  MOVLW  01
5030:  MOVWF  xE6
5032:  MOVLW  02
5034:  MOVWF  xE7
5036:  CALL   0BD6
....................          printf(lcd_putc,"Tiempo Almacenado"); 
503A:  MOVLW  7E
503C:  MOVWF  FF6
503E:  MOVLW  08
5040:  MOVWF  FF7
5042:  CALL   1B6A
....................          lcd_gotoxy(1,3); 
5046:  MOVLW  01
5048:  MOVWF  xE6
504A:  MOVLW  03
504C:  MOVWF  xE7
504E:  CALL   0BD6
....................          printf(lcd_putc,"  Correctamente  "); 
5052:  MOVLW  90
5054:  MOVWF  FF6
5056:  MOVLW  08
5058:  MOVWF  FF7
505A:  CALL   1B6A
....................          write_eeprom(20,purga_minutos_pro);delay_ms(30); 
505E:  MOVLW  14
5060:  MOVWF  FA9
5062:  MOVFF  23,FA8
5066:  BCF    FA6.6
5068:  BCF    FA6.7
506A:  BSF    FA6.2
506C:  MOVF   FF2,W
506E:  MOVWF  00
5070:  BCF    FF2.7
5072:  MOVLB  F
5074:  MOVLW  55
5076:  MOVWF  FA7
5078:  MOVLW  AA
507A:  MOVWF  FA7
507C:  BSF    FA6.1
507E:  BTFSC  FA6.1
5080:  BRA    507E
5082:  BCF    FA6.2
5084:  MOVF   00,W
5086:  IORWF  FF2,F
5088:  MOVLW  1E
508A:  MOVLB  0
508C:  MOVWF  xEB
508E:  CALL   0AC0
....................          write_eeprom(21,purga_segundos_pro);delay_ms(30); 
5092:  MOVLW  15
5094:  MOVWF  FA9
5096:  MOVFF  36,FA8
509A:  BCF    FA6.6
509C:  BCF    FA6.7
509E:  BSF    FA6.2
50A0:  MOVF   FF2,W
50A2:  MOVWF  00
50A4:  BCF    FF2.7
50A6:  MOVLB  F
50A8:  MOVLW  55
50AA:  MOVWF  FA7
50AC:  MOVLW  AA
50AE:  MOVWF  FA7
50B0:  BSF    FA6.1
50B2:  BTFSC  FA6.1
50B4:  BRA    50B2
50B6:  BCF    FA6.2
50B8:  MOVF   00,W
50BA:  IORWF  FF2,F
50BC:  MOVLW  1E
50BE:  MOVLB  0
50C0:  MOVWF  xEB
50C2:  CALL   0AC0
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
50C6:  MOVFF  23,22
50CA:  MOVFF  36,35
....................          delay_ms(700); 
50CE:  MOVLW  04
50D0:  MOVWF  xD0
50D2:  MOVLW  AF
50D4:  MOVWF  xEB
50D6:  CALL   0AC0
50DA:  DECFSZ xD0,F
50DC:  BRA    50D2
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
50DE:  MOVLW  1E
50E0:  MOVWF  xEB
50E2:  CALL   0AC0
50E6:  MOVLW  01
50E8:  MOVWF  17
50EA:  CLRF   3E
50EC:  MOVLW  02
50EE:  MOVWF  1B
50F0:  MOVWF  1D
50F2:  MOVLW  0C
50F4:  MOVWF  xE5
50F6:  CALL   0C48
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu10--------------------------------------------------------------- 
....................  
.................... //----------------Menu11--------------------------------------------------------------- 
....................    if(Menu == 11)// Menu de Tiempo de Post-Purga 
50FA:  MOVF   17,W
50FC:  SUBLW  0B
50FE:  BTFSS  FD8.2
5100:  BRA    535C
....................    { 
....................       lcd_gotoxy(1,1); 
5102:  MOVLW  01
5104:  MOVWF  xE6
5106:  MOVWF  xE7
5108:  CALL   0BD6
....................       printf(lcd_putc,"     Tiempo  de      "); 
510C:  MOVLW  A2
510E:  MOVWF  FF6
5110:  MOVLW  08
5112:  MOVWF  FF7
5114:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
5118:  MOVLW  01
511A:  MOVWF  xE6
511C:  MOVLW  02
511E:  MOVWF  xE7
5120:  CALL   0BD6
....................       printf(lcd_putc,"     Post-Purga      "); 
5124:  MOVLW  B8
5126:  MOVWF  FF6
5128:  MOVLW  08
512A:  MOVWF  FF7
512C:  CALL   1B6A
....................       lcd_gotoxy(6,3); 
5130:  MOVLW  06
5132:  MOVWF  xE6
5134:  MOVLW  03
5136:  MOVWF  xE7
5138:  CALL   0BD6
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
513C:  MOVFF  3A,D0
5140:  MOVLW  01
5142:  MOVWF  xD1
5144:  CALL   1DDA
5148:  MOVLW  3A
514A:  MOVWF  xE5
514C:  CALL   0C48
5150:  MOVFF  38,D0
5154:  MOVLW  01
5156:  MOVWF  xD1
5158:  CALL   1DDA
515C:  MOVLW  D7
515E:  MOVWF  FF6
5160:  MOVLW  08
5162:  MOVWF  FF7
5164:  MOVLW  08
5166:  MOVWF  xD8
5168:  CALL   1B8C
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
516C:  MOVLW  06
516E:  ADDWF  21,W
5170:  MOVWF  xD0
5172:  MOVWF  xE6
5174:  MOVLW  04
5176:  MOVWF  xE7
5178:  CALL   0BD6
....................       lcd_putc(t[2]); 
517C:  MOVFF  41,E5
5180:  CALL   0C48
....................       if(unidad2<1) 
5184:  MOVF   21,F
5186:  BNZ   518C
....................          unidad2=1; 
5188:  MOVLW  01
518A:  MOVWF  21
....................       if(unidad2>3) 
518C:  MOVF   21,W
518E:  SUBLW  03
5190:  BC    5196
....................          unidad2=3;    
5192:  MOVLW  03
5194:  MOVWF  21
....................        
....................       if(UP) 
5196:  BSF    F92.5
5198:  BTFSS  F80.5
519A:  BRA    51D6
....................       { 
....................          if(unidad2==1) 
519C:  DECFSZ 21,W
519E:  BRA    51B8
....................          { 
....................             if(ppurga_minutos_pro<61) 
51A0:  MOVF   3A,W
51A2:  SUBLW  3C
51A4:  BNC   51B8
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
51A6:  INCF   3A,F
51A8:  MOVLW  02
51AA:  MOVWF  xD0
51AC:  MOVLW  96
51AE:  MOVWF  xEB
51B0:  CALL   0AC0
51B4:  DECFSZ xD0,F
51B6:  BRA    51AC
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
51B8:  MOVF   21,W
51BA:  SUBLW  03
51BC:  BNZ   51D6
....................          { 
....................             if(ppurga_segundos_pro<60) 
51BE:  MOVF   38,W
51C0:  SUBLW  3B
51C2:  BNC   51D6
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
51C4:  INCF   38,F
51C6:  MOVLW  02
51C8:  MOVWF  xD0
51CA:  MOVLW  96
51CC:  MOVWF  xEB
51CE:  CALL   0AC0
51D2:  DECFSZ xD0,F
51D4:  BRA    51CA
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
51D6:  BSF    F96.0
51D8:  BTFSS  F84.0
51DA:  BRA    5248
....................       { 
....................          if(unidad2==1) 
51DC:  DECFSZ 21,W
51DE:  BRA    5212
....................          { 
....................             if(ppurga_minutos_pro>1) 
51E0:  MOVF   3A,W
51E2:  SUBLW  01
51E4:  BC    51F8
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
51E6:  DECF   3A,F
51E8:  MOVLW  02
51EA:  MOVWF  xD0
51EC:  MOVLW  96
51EE:  MOVWF  xEB
51F0:  CALL   0AC0
51F4:  DECFSZ xD0,F
51F6:  BRA    51EC
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
51F8:  MOVF   3A,W
51FA:  SUBLW  3C
51FC:  BC    5212
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
51FE:  MOVLW  3C
5200:  MOVWF  3A
5202:  MOVLW  02
5204:  MOVWF  xD0
5206:  MOVLW  96
5208:  MOVWF  xEB
520A:  CALL   0AC0
520E:  DECFSZ xD0,F
5210:  BRA    5206
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
5212:  MOVF   21,W
5214:  SUBLW  03
5216:  BNZ   5248
....................          { 
....................             if(ppurga_segundos_pro>0) 
5218:  MOVF   38,F
521A:  BZ    522E
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
521C:  DECF   38,F
521E:  MOVLW  02
5220:  MOVWF  xD0
5222:  MOVLW  96
5224:  MOVWF  xEB
5226:  CALL   0AC0
522A:  DECFSZ xD0,F
522C:  BRA    5222
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
522E:  MOVF   38,W
5230:  SUBLW  3B
5232:  BC    5248
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
5234:  MOVLW  3B
5236:  MOVWF  38
5238:  MOVLW  02
523A:  MOVWF  xD0
523C:  MOVLW  96
523E:  MOVWF  xEB
5240:  CALL   0AC0
5244:  DECFSZ xD0,F
5246:  BRA    523C
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
5248:  BSF    F96.1
524A:  BTFSS  F84.1
524C:  BRA    527A
....................       { 
....................          if(unidad2==1) 
524E:  DECFSZ 21,W
5250:  BRA    5258
....................          { 
....................             unidad2=3; 
5252:  MOVLW  03
5254:  MOVWF  21
....................          } 
....................          else 
5256:  BRA    5262
....................          { 
....................             if(unidad2==3) 
5258:  MOVF   21,W
525A:  SUBLW  03
525C:  BNZ   5262
....................             { 
....................                unidad2=1; 
525E:  MOVLW  01
5260:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
5262:  MOVLW  02
5264:  MOVWF  xD0
5266:  MOVLW  FA
5268:  MOVWF  xEB
526A:  CALL   0AC0
526E:  DECFSZ xD0,F
5270:  BRA    5266
....................          printf(lcd_putc,"\f"); 
5272:  MOVLW  0C
5274:  MOVWF  xE5
5276:  CALL   0C48
....................       } 
....................        
....................       if(LEFT) 
527A:  BSF    F96.2
527C:  BTFSS  F84.2
527E:  BRA    535C
....................       { 
....................          delay_ms(200); 
5280:  MOVLW  C8
5282:  MOVWF  xEB
5284:  CALL   0AC0
....................          printf(lcd_putc,"\f"); 
5288:  MOVLW  0C
528A:  MOVWF  xE5
528C:  CALL   0C48
....................          lcd_gotoxy(1,2); 
5290:  MOVLW  01
5292:  MOVWF  xE6
5294:  MOVLW  02
5296:  MOVWF  xE7
5298:  CALL   0BD6
....................          printf(lcd_putc,"Tiempo Almacenado"); 
529C:  MOVLW  E0
529E:  MOVWF  FF6
52A0:  MOVLW  08
52A2:  MOVWF  FF7
52A4:  CALL   1B6A
....................          lcd_gotoxy(1,3); 
52A8:  MOVLW  01
52AA:  MOVWF  xE6
52AC:  MOVLW  03
52AE:  MOVWF  xE7
52B0:  CALL   0BD6
....................          printf(lcd_putc,"  Correctamente  "); 
52B4:  MOVLW  F2
52B6:  MOVWF  FF6
52B8:  MOVLW  08
52BA:  MOVWF  FF7
52BC:  CALL   1B6A
....................          write_eeprom(22,ppurga_minutos_pro);delay_ms(20); 
52C0:  MOVLW  16
52C2:  MOVWF  FA9
52C4:  MOVFF  3A,FA8
52C8:  BCF    FA6.6
52CA:  BCF    FA6.7
52CC:  BSF    FA6.2
52CE:  MOVF   FF2,W
52D0:  MOVWF  00
52D2:  BCF    FF2.7
52D4:  MOVLB  F
52D6:  MOVLW  55
52D8:  MOVWF  FA7
52DA:  MOVLW  AA
52DC:  MOVWF  FA7
52DE:  BSF    FA6.1
52E0:  BTFSC  FA6.1
52E2:  BRA    52E0
52E4:  BCF    FA6.2
52E6:  MOVF   00,W
52E8:  IORWF  FF2,F
52EA:  MOVLW  14
52EC:  MOVLB  0
52EE:  MOVWF  xEB
52F0:  CALL   0AC0
....................          write_eeprom(23,ppurga_segundos_pro);delay_ms(20); 
52F4:  MOVLW  17
52F6:  MOVWF  FA9
52F8:  MOVFF  38,FA8
52FC:  BCF    FA6.6
52FE:  BCF    FA6.7
5300:  BSF    FA6.2
5302:  MOVF   FF2,W
5304:  MOVWF  00
5306:  BCF    FF2.7
5308:  MOVLB  F
530A:  MOVLW  55
530C:  MOVWF  FA7
530E:  MOVLW  AA
5310:  MOVWF  FA7
5312:  BSF    FA6.1
5314:  BTFSC  FA6.1
5316:  BRA    5314
5318:  BCF    FA6.2
531A:  MOVF   00,W
531C:  IORWF  FF2,F
531E:  MOVLW  14
5320:  MOVLB  0
5322:  MOVWF  xEB
5324:  CALL   0AC0
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
5328:  MOVFF  3A,39
532C:  MOVFF  38,37
....................          delay_ms(700); 
5330:  MOVLW  04
5332:  MOVWF  xD0
5334:  MOVLW  AF
5336:  MOVWF  xEB
5338:  CALL   0AC0
533C:  DECFSZ xD0,F
533E:  BRA    5334
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
5340:  MOVLW  1E
5342:  MOVWF  xEB
5344:  CALL   0AC0
5348:  MOVLW  01
534A:  MOVWF  17
534C:  CLRF   3E
534E:  MOVLW  02
5350:  MOVWF  1B
5352:  MOVWF  1D
5354:  MOVLW  0C
5356:  MOVWF  xE5
5358:  CALL   0C48
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu11--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20){ 
535C:  MOVF   17,W
535E:  SUBLW  14
5360:  BTFSS  FD8.2
5362:  BRA    56C0
....................       if(Lectura2==1){ 
5364:  BTFSS  3D.7
5366:  BRA    5470
....................          /*if(imprimio){ 
....................             letra=lcd_getc(1,1); 
....................             delay_ms(1); 
....................             if(letra!='J') 
....................                Ruido=1; 
....................          }*/ 
....................        
....................          lcd_gotoxy(1,1);                      
5368:  MOVLW  01
536A:  MOVWF  xE6
536C:  MOVWF  xE7
536E:  CALL   0BD6
....................          printf(lcd_putc,"JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
5372:  MOVLW  04
5374:  MOVWF  FF6
5376:  MOVLW  09
5378:  MOVWF  FF7
537A:  CALL   1B6A
....................          lcd_gotoxy(1,2); 
537E:  MOVLW  01
5380:  MOVWF  xE6
5382:  MOVLW  02
5384:  MOVWF  xE7
5386:  CALL   0BD6
....................          printf(lcd_putc,"Ext=%2.0f%%",(100*((float)tmp/255))); 
538A:  CLRF   xDA
538C:  MOVFF  2A,D9
5390:  CALL   0CF4
5394:  MOVFF  00,D0
5398:  MOVFF  01,D1
539C:  MOVFF  02,D2
53A0:  MOVFF  03,D3
53A4:  MOVFF  03,D7
53A8:  MOVFF  02,D6
53AC:  MOVFF  01,D5
53B0:  MOVFF  00,D4
53B4:  CLRF   xDB
53B6:  CLRF   xDA
53B8:  MOVLW  7F
53BA:  MOVWF  xD9
53BC:  MOVLW  86
53BE:  MOVWF  xD8
53C0:  CALL   0D2A
53C4:  CLRF   xE8
53C6:  CLRF   xE7
53C8:  MOVLW  48
53CA:  MOVWF  xE6
53CC:  MOVLW  85
53CE:  MOVWF  xE5
53D0:  MOVFF  03,EC
53D4:  MOVFF  02,EB
53D8:  MOVFF  01,EA
53DC:  MOVFF  00,E9
53E0:  CALL   1E46
53E4:  MOVFF  00,D0
53E8:  MOVFF  01,D1
53EC:  MOVFF  02,D2
53F0:  MOVFF  03,D3
53F4:  MOVLW  0C
53F6:  MOVWF  FF6
53F8:  MOVLW  09
53FA:  MOVWF  FF7
53FC:  MOVLW  04
53FE:  MOVWF  xD8
5400:  CALL   1B8C
5404:  MOVLW  01
5406:  MOVWF  FE9
5408:  MOVFF  D3,DB
540C:  MOVFF  D2,DA
5410:  MOVFF  D1,D9
5414:  MOVFF  D0,D8
5418:  CLRF   xDC
541A:  CALL   1FF2
541E:  MOVLW  25
5420:  MOVWF  xE5
5422:  CALL   0C48
....................          //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................          lcd_gotoxy(1,3); 
5426:  MOVLW  01
5428:  MOVWF  xE6
542A:  MOVLW  03
542C:  MOVWF  xE7
542E:  CALL   0BD6
....................          printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
5432:  MOVLW  18
5434:  MOVWF  FF6
5436:  MOVLW  09
5438:  MOVWF  FF7
543A:  MOVLW  08
543C:  MOVWF  xD8
543E:  CALL   1B8C
5442:  MOVLW  01
5444:  MOVWF  FE9
5446:  MOVFF  6F,DB
544A:  MOVFF  6E,DA
544E:  MOVFF  6D,D9
5452:  MOVFF  6C,D8
5456:  MOVWF  xDC
5458:  CALL   1FF2
545C:  MOVLW  25
545E:  MOVWF  FF6
5460:  MOVLW  09
5462:  MOVWF  FF7
5464:  MOVLW  07
5466:  MOVWF  xD8
5468:  CALL   1B8C
....................          imprimio=1; 
546C:  BSF    3D.3
....................          Lectura2=0; 
546E:  BCF    3D.7
....................       } 
....................        
....................       if(flag_filtro==1){ 
5470:  BTFSS  3D.2
5472:  BRA    54AE
....................          if(horas>=60){ 
5474:  MOVF   33,W
5476:  SUBLW  3B
5478:  BC    5494
....................             lcd_gotoxy(10,1);                      
547A:  MOVLW  0A
547C:  MOVWF  xE6
547E:  MOVLW  01
5480:  MOVWF  xE7
5482:  CALL   0BD6
....................             printf(lcd_putc,"Filtro:CAM"); 
5486:  MOVLW  2E
5488:  MOVWF  FF6
548A:  MOVLW  09
548C:  MOVWF  FF7
548E:  CALL   1B6A
....................          }else{ 
5492:  BRA    54AC
....................             lcd_gotoxy(10,1);                      
5494:  MOVLW  0A
5496:  MOVWF  xE6
5498:  MOVLW  01
549A:  MOVWF  xE7
549C:  CALL   0BD6
....................             printf(lcd_putc,"Filtro:OK "); 
54A0:  MOVLW  3A
54A2:  MOVWF  FF6
54A4:  MOVLW  09
54A6:  MOVWF  FF7
54A8:  CALL   1B6A
....................          } 
....................       }else{ 
54AC:  BRA    54C6
....................          lcd_gotoxy(10,1);                      
54AE:  MOVLW  0A
54B0:  MOVWF  xE6
54B2:  MOVLW  01
54B4:  MOVWF  xE7
54B6:  CALL   0BD6
....................          printf(lcd_putc,"Filtro:---"); 
54BA:  MOVLW  46
54BC:  MOVWF  FF6
54BE:  MOVLW  09
54C0:  MOVWF  FF7
54C2:  CALL   1B6A
....................       } 
....................           
....................       if(Flujo<0.5){ 
54C6:  MOVFF  6F,D7
54CA:  MOVFF  6E,D6
54CE:  MOVFF  6D,D5
54D2:  MOVFF  6C,D4
54D6:  CLRF   xDB
54D8:  CLRF   xDA
54DA:  CLRF   xD9
54DC:  MOVLW  7E
54DE:  MOVWF  xD8
54E0:  CALL   1542
54E4:  BNC   5500
....................          lcd_gotoxy(11,2); 
54E6:  MOVLW  0B
54E8:  MOVWF  xE6
54EA:  MOVLW  02
54EC:  MOVWF  xE7
54EE:  CALL   0BD6
....................          printf(lcd_putc,"Flujo=Bajo");       
54F2:  MOVLW  52
54F4:  MOVWF  FF6
54F6:  MOVLW  09
54F8:  MOVWF  FF7
54FA:  CALL   1B6A
....................       }else{ 
54FE:  BRA    5552
....................          if(Flujo>2.0){ 
5500:  CLRF   xD7
5502:  CLRF   xD6
5504:  CLRF   xD5
5506:  MOVLW  80
5508:  MOVWF  xD4
550A:  MOVFF  6F,DB
550E:  MOVFF  6E,DA
5512:  MOVFF  6D,D9
5516:  MOVFF  6C,D8
551A:  CALL   1542
551E:  BNC   553A
....................             lcd_gotoxy(11,2); 
5520:  MOVLW  0B
5522:  MOVWF  xE6
5524:  MOVLW  02
5526:  MOVWF  xE7
5528:  CALL   0BD6
....................             printf(lcd_putc,"Flujo=Alto");                
552C:  MOVLW  5E
552E:  MOVWF  FF6
5530:  MOVLW  09
5532:  MOVWF  FF7
5534:  CALL   1B6A
....................          }else{ 
5538:  BRA    5552
....................             lcd_gotoxy(11,2); 
553A:  MOVLW  0B
553C:  MOVWF  xE6
553E:  MOVLW  02
5540:  MOVWF  xE7
5542:  CALL   0BD6
....................             printf(lcd_putc,"Flujo=OK  ");       
5546:  MOVLW  6A
5548:  MOVWF  FF6
554A:  MOVLW  09
554C:  MOVWF  FF7
554E:  CALL   1B6A
....................          } 
....................       } 
....................        
....................       if(estadofl==1){ 
5552:  BTFSS  3C.0
5554:  BRA    5574
....................          Luz_Blanca_on; 
5556:  BSF    F8A.4
5558:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
555A:  MOVLW  01
555C:  MOVWF  xE6
555E:  MOVLW  04
5560:  MOVWF  xE7
5562:  CALL   0BD6
....................          printf(lcd_putc,"Luz:ON "); 
5566:  MOVLW  76
5568:  MOVWF  FF6
556A:  MOVLW  09
556C:  MOVWF  FF7
556E:  CALL   1B6A
....................       }else{ 
5572:  BRA    5590
....................          Luz_Blanca_off; 
5574:  BCF    F8A.4
5576:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5578:  MOVLW  01
557A:  MOVWF  xE6
557C:  MOVLW  04
557E:  MOVWF  xE7
5580:  CALL   0BD6
....................          printf(lcd_putc,"Luz:OFF "); 
5584:  MOVLW  7E
5586:  MOVWF  FF6
5588:  MOVLW  09
558A:  MOVWF  FF7
558C:  CALL   1B6A
....................       } 
....................        
....................       if(estadomv==1){ 
5590:  BTFSS  3C.1
5592:  BRA    55AE
....................          lcd_gotoxy(10,4); 
5594:  MOVLW  0A
5596:  MOVWF  xE6
5598:  MOVLW  04
559A:  MOVWF  xE7
559C:  CALL   0BD6
....................          printf(lcd_putc,"Motor:ON "); 
55A0:  MOVLW  88
55A2:  MOVWF  FF6
55A4:  MOVLW  09
55A6:  MOVWF  FF7
55A8:  CALL   1B6A
....................       }else{ 
55AC:  BRA    55CE
....................          if(iniciodamper==1){ 
55AE:  BTFSS  52.1
55B0:  BRA    55B6
....................             //Motor_off;      
....................             ApagaMotor(); 
55B2:  CALL   2284
....................          } 
....................          lcd_gotoxy(10,4); 
55B6:  MOVLW  0A
55B8:  MOVWF  xE6
55BA:  MOVLW  04
55BC:  MOVWF  xE7
55BE:  CALL   0BD6
....................          printf(lcd_putc,"Motor:OFF ");  
55C2:  MOVLW  92
55C4:  MOVWF  FF6
55C6:  MOVLW  09
55C8:  MOVWF  FF7
55CA:  CALL   1B6A
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia Abajo 
55CE:  BSF    F96.0
55D0:  BTFSS  F84.0
55D2:  BRA    55F4
....................          delay_ms(20); 
55D4:  MOVLW  14
55D6:  MOVWF  xEB
55D8:  CALL   0AC0
....................          if(DOWN && Flanco == 0){ 
55DC:  BSF    F96.0
55DE:  BTFSS  F84.0
55E0:  BRA    55F2
55E2:  BTFSC  3C.4
55E4:  BRA    55F2
....................             Flanco = 1;delay_ms(200);estadofl=!estadofl; 
55E6:  BSF    3C.4
55E8:  MOVLW  C8
55EA:  MOVWF  xEB
55EC:  CALL   0AC0
55F0:  BTG    3C.0
....................          } 
....................       }else{ 
55F2:  BRA    55F6
....................          Flanco = 0; 
55F4:  BCF    3C.4
....................       } 
....................              
....................       if(LEFT){//Si oprime hacia Izquierda 
55F6:  BSF    F96.2
55F8:  BTFSS  F84.2
55FA:  BRA    5642
....................          delay_ms(20); 
55FC:  MOVLW  14
55FE:  MOVWF  xEB
5600:  CALL   0AC0
....................          if(LEFT && Flanco2 == 0){ 
5604:  BSF    F96.2
5606:  BTFSS  F84.2
5608:  BRA    5640
560A:  BTFSC  3C.6
560C:  BRA    5640
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
560E:  BSF    3C.6
5610:  MOVLW  C8
5612:  MOVWF  xEB
5614:  CALL   0AC0
5618:  BTG    3C.1
....................             if(estadomv==1){ 
561A:  BTFSS  3C.1
561C:  BRA    5630
....................                //Motor_on; 
....................                EnciendeMotor(); 
561E:  CALL   22A2
....................                delay_ms(150); 
5622:  MOVLW  96
5624:  MOVWF  xEB
5626:  CALL   0AC0
....................                lcd_init(); 
562A:  CALL   0B7E
....................             }else{ 
562E:  BRA    5640
....................                //Motor_off; 
....................                ApagaMotor(); 
5630:  CALL   2284
....................                delay_ms(150); 
5634:  MOVLW  96
5636:  MOVWF  xEB
5638:  CALL   0AC0
....................                lcd_init(); 
563C:  CALL   0B7E
....................             } 
....................          } 
....................       }else{ 
5640:  BRA    5644
....................          Flanco2 = 0; 
5642:  BCF    3C.6
....................       } 
....................     
....................       if(UP){// Si oprime Arriba 
5644:  BSF    F92.5
5646:  BTFSS  F80.5
5648:  BRA    5686
....................          delay_ms(20); 
564A:  MOVLW  14
564C:  MOVWF  xEB
564E:  CALL   0AC0
....................          if(UP && Flanco1 == 0) { 
5652:  BSF    F92.5
5654:  BTFSS  F80.5
5656:  BRA    5684
5658:  BTFSC  3C.5
565A:  BRA    5684
....................             /*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
565C:  MOVLW  02
565E:  MOVWF  xD0
5660:  MOVLW  FA
5662:  MOVWF  xEB
5664:  CALL   0AC0
5668:  DECFSZ xD0,F
566A:  BRA    5660
566C:  MOVLW  0C
566E:  MOVWF  xE5
5670:  CALL   0C48
5674:  MOVLW  01
5676:  MOVWF  17
5678:  CLRF   3E
567A:  MOVLW  02
567C:  MOVWF  1B
567E:  MOVWF  1D
5680:  MOVLW  0B
5682:  MOVWF  1A
....................          } 
....................       }else{ 
5684:  BRA    5688
....................          Flanco1 = 0; 
5686:  BCF    3C.5
....................       } 
....................              
....................       if(RIGHT){// Si oprime Derecha 
5688:  BSF    F96.1
568A:  BTFSS  F84.1
568C:  BRA    56BE
....................          delay_ms(20); 
568E:  MOVLW  14
5690:  MOVWF  xEB
5692:  CALL   0AC0
....................          if(RIGHT && Flanco3 == 0){ 
5696:  BSF    F96.1
5698:  BTFSS  F84.1
569A:  BRA    56BC
569C:  BTFSC  3C.7
569E:  BRA    56BC
....................             delay_ms(500);printf(lcd_putc,"\f");Menu=40; 
56A0:  MOVLW  02
56A2:  MOVWF  xD0
56A4:  MOVLW  FA
56A6:  MOVWF  xEB
56A8:  CALL   0AC0
56AC:  DECFSZ xD0,F
56AE:  BRA    56A4
56B0:  MOVLW  0C
56B2:  MOVWF  xE5
56B4:  CALL   0C48
56B8:  MOVLW  28
56BA:  MOVWF  17
....................          } 
....................       }else{ 
56BC:  BRA    56C0
....................          Flanco3 = 0; 
56BE:  BCF    3C.7
....................       } 
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
56C0:  MOVF   17,W
56C2:  SUBLW  1E
56C4:  BTFSS  FD8.2
56C6:  BRA    5888
....................       lcd_gotoxy(1,1); 
56C8:  MOVLW  01
56CA:  MOVWF  xE6
56CC:  MOVWF  xE7
56CE:  CALL   0BD6
....................       printf(lcd_putc,"    !Post-Purga!    "); 
56D2:  MOVLW  9E
56D4:  MOVWF  FF6
56D6:  MOVLW  09
56D8:  MOVWF  FF7
56DA:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
56DE:  MOVLW  01
56E0:  MOVWF  xE6
56E2:  MOVLW  02
56E4:  MOVWF  xE7
56E6:  CALL   0BD6
....................       printf(lcd_putc,"                    "); 
56EA:  MOVLW  B4
56EC:  MOVWF  FF6
56EE:  MOVLW  09
56F0:  MOVWF  FF7
56F2:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
56F6:  MOVLW  01
56F8:  MOVWF  xE6
56FA:  MOVLW  03
56FC:  MOVWF  xE7
56FE:  CALL   0BD6
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
5702:  MOVLW  CA
5704:  MOVWF  FF6
5706:  MOVLW  09
5708:  MOVWF  FF7
570A:  MOVLW  06
570C:  MOVWF  xD8
570E:  CALL   1B8C
5712:  MOVFF  39,D0
5716:  MOVLW  01
5718:  MOVWF  xD1
571A:  CALL   1DDA
571E:  MOVLW  3A
5720:  MOVWF  xE5
5722:  CALL   0C48
5726:  MOVFF  37,D0
572A:  MOVLW  01
572C:  MOVWF  xD1
572E:  CALL   1DDA
5732:  MOVLW  20
5734:  MOVWF  xE5
5736:  CALL   0C48
573A:  MOVLW  20
573C:  MOVWF  xE5
573E:  CALL   0C48
....................            
....................       if(Lectura==1) 
5742:  BTFSS  3D.6
5744:  BRA    5886
....................       { 
....................          Luz_Blanca_off; 
5746:  BCF    F8A.4
5748:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
574A:  MOVLW  02
574C:  MOVWF  xD4
574E:  CALL   2228
5752:  MOVFF  00,D0
5756:  MOVFF  01,D1
575A:  MOVFF  02,D2
575E:  MOVFF  03,D3
5762:  MOVFF  03,D7
5766:  MOVFF  02,D6
576A:  MOVFF  01,D5
576E:  MOVFF  00,D4
5772:  CLRF   xDB
5774:  CLRF   xDA
5776:  MOVLW  40
5778:  MOVWF  xD9
577A:  MOVLW  81
577C:  MOVWF  xD8
577E:  CALL   1542
5782:  BTFSS  FD8.0
5784:  BRA    5884
5786:  MOVF   37,F
5788:  BTFSS  FD8.2
578A:  BRA    5884
578C:  MOVF   39,F
578E:  BNZ   5884
....................          { 
....................             write_eeprom(70,segundos);delay_ms(20); 
5790:  MOVLW  46
5792:  MOVWF  FA9
5794:  MOVFF  31,FA8
5798:  BCF    FA6.6
579A:  BCF    FA6.7
579C:  BSF    FA6.2
579E:  MOVF   FF2,W
57A0:  MOVWF  00
57A2:  BCF    FF2.7
57A4:  MOVLB  F
57A6:  MOVLW  55
57A8:  MOVWF  FA7
57AA:  MOVLW  AA
57AC:  MOVWF  FA7
57AE:  BSF    FA6.1
57B0:  BTFSC  FA6.1
57B2:  BRA    57B0
57B4:  BCF    FA6.2
57B6:  MOVF   00,W
57B8:  IORWF  FF2,F
57BA:  MOVLW  14
57BC:  MOVLB  0
57BE:  MOVWF  xEB
57C0:  CALL   0AC0
....................             write_eeprom(71,minutos);delay_ms(20); 
57C4:  MOVLW  47
57C6:  MOVWF  FA9
57C8:  MOVFF  32,FA8
57CC:  BCF    FA6.6
57CE:  BCF    FA6.7
57D0:  BSF    FA6.2
57D2:  MOVF   FF2,W
57D4:  MOVWF  00
57D6:  BCF    FF2.7
57D8:  MOVLB  F
57DA:  MOVLW  55
57DC:  MOVWF  FA7
57DE:  MOVLW  AA
57E0:  MOVWF  FA7
57E2:  BSF    FA6.1
57E4:  BTFSC  FA6.1
57E6:  BRA    57E4
57E8:  BCF    FA6.2
57EA:  MOVF   00,W
57EC:  IORWF  FF2,F
57EE:  MOVLW  14
57F0:  MOVLB  0
57F2:  MOVWF  xEB
57F4:  CALL   0AC0
....................             write_eeprom(72,horas);delay_ms(20); 
57F8:  MOVLW  48
57FA:  MOVWF  FA9
57FC:  MOVFF  33,FA8
5800:  BCF    FA6.6
5802:  BCF    FA6.7
5804:  BSF    FA6.2
5806:  MOVF   FF2,W
5808:  MOVWF  00
580A:  BCF    FF2.7
580C:  MOVLB  F
580E:  MOVLW  55
5810:  MOVWF  FA7
5812:  MOVLW  AA
5814:  MOVWF  FA7
5816:  BSF    FA6.1
5818:  BTFSC  FA6.1
581A:  BRA    5818
581C:  BCF    FA6.2
581E:  MOVF   00,W
5820:  IORWF  FF2,F
5822:  MOVLW  14
5824:  MOVLB  0
5826:  MOVWF  xEB
5828:  CALL   0AC0
....................             printf(lcd_putc,"\f"); 
582C:  MOVLW  0C
582E:  MOVWF  xE5
5830:  CALL   0C48
....................             lcd_gotoxy(1,2); 
5834:  MOVLW  01
5836:  MOVWF  xE6
5838:  MOVLW  02
583A:  MOVWF  xE7
583C:  CALL   0BD6
....................             printf(lcd_putc,"     Proceso      "); 
5840:  MOVLW  DC
5842:  MOVWF  FF6
5844:  MOVLW  09
5846:  MOVWF  FF7
5848:  CALL   1B6A
....................             lcd_gotoxy(1,3); 
584C:  MOVLW  01
584E:  MOVWF  xE6
5850:  MOVLW  03
5852:  MOVWF  xE7
5854:  CALL   0BD6
....................             printf(lcd_putc,"    Finalizado    "); 
5858:  MOVLW  F0
585A:  MOVWF  FF6
585C:  MOVLW  09
585E:  MOVWF  FF7
5860:  CALL   1B6A
....................             delay_ms(2000); 
5864:  MOVLW  08
5866:  MOVWF  xD0
5868:  MOVLW  FA
586A:  MOVWF  xEB
586C:  CALL   0AC0
5870:  DECFSZ xD0,F
5872:  BRA    5868
....................             printf(lcd_putc,"\f"); 
5874:  MOVLW  0C
5876:  MOVWF  xE5
5878:  CALL   0C48
....................             ajustar_damper(0); 
587C:  CLRF   xD0
587E:  CALL   227E
....................             reset_cpu(); 
5882:  RESET
....................          } 
....................          Lectura=0; 
5884:  BCF    3D.6
....................       } 
....................        
....................    } 
5886:  BRA    56C0
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
5888:  MOVF   17,W
588A:  SUBLW  28
588C:  BNZ   596A
....................    lcd_gotoxy(1,1); 
588E:  MOVLW  01
5890:  MOVWF  xE6
5892:  MOVWF  xE7
5894:  CALL   0BD6
....................    printf(lcd_putc,"   Desea apagar     "); 
5898:  MOVLW  04
589A:  MOVWF  FF6
589C:  MOVLW  0A
589E:  MOVWF  FF7
58A0:  CALL   1B6A
....................    lcd_gotoxy(1,2); 
58A4:  MOVLW  01
58A6:  MOVWF  xE6
58A8:  MOVLW  02
58AA:  MOVWF  xE7
58AC:  CALL   0BD6
....................    printf(lcd_putc,"     la cabina      "); 
58B0:  MOVLW  1A
58B2:  MOVWF  FF6
58B4:  MOVLW  0A
58B6:  MOVWF  FF7
58B8:  CALL   1B6A
....................    lcd_gotoxy(1,3); 
58BC:  MOVLW  01
58BE:  MOVWF  xE6
58C0:  MOVLW  03
58C2:  MOVWF  xE7
58C4:  CALL   0BD6
....................    printf(lcd_putc,"   > Aceptar        "); 
58C8:  MOVLW  30
58CA:  MOVWF  FF6
58CC:  MOVLW  0A
58CE:  MOVWF  FF7
58D0:  CALL   1B6A
....................    lcd_gotoxy(1,4); 
58D4:  MOVLW  01
58D6:  MOVWF  xE6
58D8:  MOVLW  04
58DA:  MOVWF  xE7
58DC:  CALL   0BD6
....................    printf(lcd_putc,"   < Cancelar       "); 
58E0:  MOVLW  46
58E2:  MOVWF  FF6
58E4:  MOVLW  0A
58E6:  MOVWF  FF7
58E8:  CALL   1B6A
....................    
....................     
....................       if(RIGHT){// Si oprime derecha 
58EC:  BSF    F96.1
58EE:  BTFSS  F84.1
58F0:  BRA    5922
....................          delay_ms(20); 
58F2:  MOVLW  14
58F4:  MOVWF  xEB
58F6:  CALL   0AC0
....................          if(RIGHT && Flanco1 == 0){ 
58FA:  BSF    F96.1
58FC:  BTFSS  F84.1
58FE:  BRA    5920
5900:  BTFSC  3C.5
5902:  BRA    5920
....................             Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
5904:  BSF    3C.5
5906:  MOVLW  1E
5908:  MOVWF  17
590A:  MOVFF  20,D0
590E:  CALL   0AB0
5912:  BCF    F8A.6
5914:  BCF    F93.6
5916:  MOVLW  0C
5918:  MOVWF  xE5
591A:  CALL   0C48
591E:  BSF    52.6
....................          } 
....................       }else{ 
5920:  BRA    5924
....................          Flanco1 = 0; 
5922:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
5924:  BSF    F96.2
5926:  BTFSS  F84.2
5928:  BRA    5968
....................          delay_ms(20); 
592A:  MOVLW  14
592C:  MOVWF  xEB
592E:  CALL   0AC0
....................          if(LEFT && Flanco3 == 0){ 
5932:  BSF    F96.2
5934:  BTFSS  F84.2
5936:  BRA    5966
5938:  BTFSC  3C.7
593A:  BRA    5966
....................             Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
593C:  BSF    3C.7
593E:  MOVLW  14
5940:  MOVWF  17
5942:  CLRF   3E
5944:  MOVLW  02
5946:  MOVWF  1B
5948:  MOVWF  1D
594A:  MOVLW  0B
594C:  MOVWF  1A
594E:  MOVLW  02
5950:  MOVWF  xD0
5952:  MOVLW  FA
5954:  MOVWF  xEB
5956:  CALL   0AC0
595A:  DECFSZ xD0,F
595C:  BRA    5952
595E:  MOVLW  0C
5960:  MOVWF  xE5
5962:  CALL   0C48
....................          } 
....................       }else{ 
5966:  BRA    596A
....................          Flanco3 = 0; 
5968:  BCF    3C.7
....................       } 
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
596A:  MOVF   17,W
596C:  SUBLW  32
596E:  BNZ   5A40
....................       lcd_gotoxy(1,1); 
5970:  MOVLW  01
5972:  MOVWF  xE6
5974:  MOVWF  xE7
5976:  CALL   0BD6
....................       printf(lcd_putc,"      !Purga!       "); 
597A:  MOVLW  5C
597C:  MOVWF  FF6
597E:  MOVLW  0A
5980:  MOVWF  FF7
5982:  CALL   1B6A
....................       lcd_gotoxy(1,2); 
5986:  MOVLW  01
5988:  MOVWF  xE6
598A:  MOVLW  02
598C:  MOVWF  xE7
598E:  CALL   0BD6
....................       printf(lcd_putc,"                    "); 
5992:  MOVLW  72
5994:  MOVWF  FF6
5996:  MOVLW  0A
5998:  MOVWF  FF7
599A:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
599E:  MOVLW  01
59A0:  MOVWF  xE6
59A2:  MOVLW  03
59A4:  MOVWF  xE7
59A6:  CALL   0BD6
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
59AA:  MOVLW  88
59AC:  MOVWF  FF6
59AE:  MOVLW  0A
59B0:  MOVWF  FF7
59B2:  MOVLW  06
59B4:  MOVWF  xD8
59B6:  CALL   1B8C
59BA:  MOVFF  22,D0
59BE:  MOVLW  01
59C0:  MOVWF  xD1
59C2:  CALL   1DDA
59C6:  MOVLW  3A
59C8:  MOVWF  xE5
59CA:  CALL   0C48
59CE:  MOVFF  35,D0
59D2:  MOVLW  01
59D4:  MOVWF  xD1
59D6:  CALL   1DDA
59DA:  MOVLW  20
59DC:  MOVWF  xE5
59DE:  CALL   0C48
59E2:  MOVLW  20
59E4:  MOVWF  xE5
59E6:  CALL   0C48
59EA:  MOVLW  20
59EC:  MOVWF  xE5
59EE:  CALL   0C48
....................         
....................       if(LEFT){ 
59F2:  BSF    F96.2
59F4:  BTFSS  F84.2
59F6:  BRA    5A18
....................          delay_ms(1000); 
59F8:  MOVLW  04
59FA:  MOVWF  xD0
59FC:  MOVLW  FA
59FE:  MOVWF  xEB
5A00:  CALL   0AC0
5A04:  DECFSZ xD0,F
5A06:  BRA    59FC
....................          if(LEFT){ 
5A08:  BSF    F96.2
5A0A:  BTFSS  F84.2
5A0C:  BRA    5A18
....................             tiempo_purga=0; 
5A0E:  BCF    52.5
....................             EnciendeMotor();//Motor_on; 
5A10:  CALL   22A2
....................             Menu=20; 
5A14:  MOVLW  14
5A16:  MOVWF  17
....................          } 
....................       } 
....................       if(Lectura==1){ 
5A18:  BTFSS  3D.6
5A1A:  BRA    5A40
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
5A1C:  MOVFF  2B,D0
5A20:  CALL   22C0
5A24:  MOVFF  03,6F
5A28:  MOVFF  02,6E
5A2C:  MOVFF  01,6D
5A30:  MOVFF  00,6C
....................         controlar_flujo();     
5A34:  CALL   268A
....................         //Motor_on; 
....................         EnciendeMotor(); 
5A38:  CALL   22A2
....................         Luz_Blanca_off; 
5A3C:  BCF    F8A.4
5A3E:  BCF    F93.4
....................       } 
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=60) 
5A40:  MOVF   34,W
5A42:  SUBLW  3B
5A44:  BC    5A4C
....................    { 
....................       lcd_init(); 
5A46:  CALL   0B7E
....................       tiemporeset=0; 
5A4A:  CLRF   34
....................    }  
....................  
....................    if(Menu!=0 || Menu!=30) 
5A4C:  MOVF   17,F
5A4E:  BNZ   5A58
5A50:  MOVF   17,W
5A52:  SUBLW  1E
5A54:  BTFSC  FD8.2
5A56:  BRA    5B76
....................    { 
....................       if(Lectura==1) 
5A58:  BTFSS  3D.6
5A5A:  BRA    5B72
....................       { 
....................          FeedbackDamper=(int8)(100*(sensores(2)/1023)); 
5A5C:  MOVLW  02
5A5E:  MOVWF  xD4
5A60:  CALL   2228
5A64:  MOVFF  00,D0
5A68:  MOVFF  01,D1
5A6C:  MOVFF  02,D2
5A70:  MOVFF  03,D3
5A74:  MOVFF  03,D7
5A78:  MOVFF  02,D6
5A7C:  MOVFF  01,D5
5A80:  MOVFF  00,D4
5A84:  CLRF   xDB
5A86:  MOVLW  C0
5A88:  MOVWF  xDA
5A8A:  MOVLW  7F
5A8C:  MOVWF  xD9
5A8E:  MOVLW  88
5A90:  MOVWF  xD8
5A92:  CALL   0D2A
5A96:  CLRF   xE8
5A98:  CLRF   xE7
5A9A:  MOVLW  48
5A9C:  MOVWF  xE6
5A9E:  MOVLW  85
5AA0:  MOVWF  xE5
5AA2:  MOVFF  03,EC
5AA6:  MOVFF  02,EB
5AAA:  MOVFF  01,EA
5AAE:  MOVFF  00,E9
5AB2:  CALL   1E46
5AB6:  MOVFF  03,D3
5ABA:  MOVFF  02,D2
5ABE:  MOVFF  01,D1
5AC2:  MOVFF  00,D0
5AC6:  CALL   2178
5ACA:  MOVFF  01,3B
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
5ACE:  MOVFF  2B,D0
5AD2:  CALL   22C0
5AD6:  MOVFF  03,6F
5ADA:  MOVFF  02,6E
5ADE:  MOVFF  01,6D
5AE2:  MOVFF  00,6C
....................          controlar_flujo(); 
5AE6:  CALL   268A
....................           
....................          if(Flujo<0.5 && Menu==20) 
5AEA:  MOVFF  6F,D7
5AEE:  MOVFF  6E,D6
5AF2:  MOVFF  6D,D5
5AF6:  MOVFF  6C,D4
5AFA:  CLRF   xDB
5AFC:  CLRF   xDA
5AFE:  CLRF   xD9
5B00:  MOVLW  7E
5B02:  MOVWF  xD8
5B04:  CALL   1542
5B08:  BNC   5B3C
5B0A:  MOVF   17,W
5B0C:  SUBLW  14
5B0E:  BNZ   5B3C
....................          { 
....................               flag_latencia=1; 
5B10:  BSF    3D.0
....................                
....................               if(Latencia==1) 
5B12:  BTFSS  3D.1
5B14:  BRA    5B3A
....................               { 
....................                  if(estadoalarma==1) 
5B16:  BTFSS  3C.2
5B18:  BRA    5B20
....................                  { 
....................                     Alarma_on; 
5B1A:  BSF    F8A.6
5B1C:  BCF    F93.6
....................                  } 
....................                  else 
5B1E:  BRA    5B24
....................                  { 
....................                     Alarma_off; 
5B20:  BCF    F8A.6
5B22:  BCF    F93.6
....................                  } 
....................                  estadopantalla=!estadopantalla; 
5B24:  BTG    3C.3
....................                  if(estadopantalla==1) 
5B26:  BTFSS  3C.3
5B28:  BRA    5B34
....................                  {intensidadpantalla(contraste);} 
5B2A:  MOVFF  20,D0
5B2E:  CALL   0AB0
....................                  else 
5B32:  BRA    5B3A
....................                  {intensidadpantalla(0);} 
5B34:  CLRF   xD0
5B36:  CALL   0AB0
....................                } 
....................             } 
....................          else 
5B3A:  BRA    5B72
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
5B3C:  MOVFF  20,D0
5B40:  CALL   0AB0
5B44:  BCF    F8A.6
5B46:  BCF    F93.6
....................             if(Flujo>=0.5) 
5B48:  CLRF   xD7
5B4A:  CLRF   xD6
5B4C:  CLRF   xD5
5B4E:  MOVLW  7E
5B50:  MOVWF  xD4
5B52:  MOVFF  6F,DB
5B56:  MOVFF  6E,DA
5B5A:  MOVFF  6D,D9
5B5E:  MOVFF  6C,D8
5B62:  CALL   1542
5B66:  BC    5B6A
5B68:  BNZ   5B72
....................             { 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
5B6A:  BCF    3D.1
5B6C:  CLRF   56
5B6E:  CLRF   55
5B70:  BCF    3D.0
....................             } 
....................          } 
....................       } 
....................       Lectura=0; 
5B72:  BCF    3D.6
....................    }    
....................    else 
5B74:  BRA    5B8A
....................    { 
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
5B76:  MOVFF  20,D0
5B7A:  CALL   0AB0
5B7E:  BCF    F8A.6
5B80:  BCF    F93.6
5B82:  BCF    3D.1
5B84:  CLRF   56
5B86:  CLRF   55
5B88:  BCF    3D.0
....................    } 
....................     
....................    if(Ruido){ 
5B8A:  BTFSS  3D.4
5B8C:  BRA    5B90
.................... //      Refresco(); 
....................       imprimio=0; 
5B8E:  BCF    3D.3
....................    } 
....................  
....................    }        
5B90:  GOTO   2990
.................... } 
....................  
5B94:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
