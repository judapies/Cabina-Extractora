CCS PCH C Compiler, Version 4.104, 5967               02-ago.-18 13:26

               Filename: C:\Documentos de JEMV\Programas PICC\CEGH Modificada\Cabina_Extractora 5.lst

               ROM used: 14420 bytes (44%)
                         Largest free fragment is 18344
               RAM used: 77 (4%) at main() level
                         101 (5%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   17D4
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... // Lectura de sensor de vidrio. 
....................  
.................... // Esta version tiene la opcion de cargar los valores por defecto, cusndo el micro se pone a funcionar, despues de haber sido grabado 
.................... // Esto evita que los valores se reinicien con 255 en la EE 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
....................  
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0896:  CLRF   FEA
0898:  MOVLW  5C
089A:  MOVWF  FE9
089C:  MOVF   FEF,W
089E:  BZ    08BC
08A0:  MOVLW  0F
08A2:  MOVWF  01
08A4:  CLRF   00
08A6:  DECFSZ 00,F
08A8:  BRA    08A6
08AA:  DECFSZ 01,F
08AC:  BRA    08A4
08AE:  MOVLW  8F
08B0:  MOVWF  00
08B2:  DECFSZ 00,F
08B4:  BRA    08B2
08B6:  NOP   
08B8:  DECFSZ FEF,F
08BA:  BRA    08A0
08BC:  RETLW  00
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) // A5 
.................... #define   DOWN          input(PIN_E0) // E0 
.................... #define   RIGHT         input(PIN_E1) // E1 
.................... #define   LEFT          input(PIN_E2) // E2 
.................... #define   VIDRIOUP      !input(PIN_A4) 
.................... #define   VIDRIODN      !input(PIN_A3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Rele_on           output_bit(PIN_B7,1) 
.................... #define   Rele_off          output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
.................... #define   O1_on             output_bit(PIN_C6,1) 
.................... #define   O1_off            output_bit(PIN_C6,0) 
.................... #define   O2_on             output_bit(PIN_C7,1) 
.................... #define   O2_off            output_bit(PIN_C7,0) 
....................  
.................... signed int8 Menu=100, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... signed int8 Entero=0; 
.................... signed int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0,estadopantalla=0; 
.................... short pulsu=0,pulsr=0,pulsd=0,pulsl=0; 
.................... short flag_min=0,flag_hrs=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'}; 
.................... char tecla='N'; 
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Cambio=0; 
.................... float setpoint=0.0; 
.................... short ModoSleep,inicio=0,Lectura=0,flag_iniciodamper=0,tiempo_purga=0,tiempo_ppurga=0,ver_ddram=0; 
.................... int16 tiempos=0,t_latencia=0; 
.................... unsigned int8 ult_ddram=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
09DC:  MOVLW  F0
09DE:  MOVWF  F95
....................       lcd.rw = 1; 
09E0:  BSF    F83.1
....................       delay_cycles(25); 
09E2:  MOVLW  08
09E4:  MOVWF  00
09E6:  DECFSZ 00,F
09E8:  BRA    09E6
....................       lcd.enable = 1; 
09EA:  BSF    F83.2
....................       delay_cycles(25); 
09EC:  MOVLW  08
09EE:  MOVWF  00
09F0:  DECFSZ 00,F
09F2:  BRA    09F0
....................       high = lcd.data; 
09F4:  SWAPF  F83,W
09F6:  ANDLW  0F
09F8:  MOVWF  58
....................       lcd.enable = 0; 
09FA:  BCF    F83.2
....................       delay_cycles(25); 
09FC:  MOVLW  08
09FE:  MOVWF  00
0A00:  DECFSZ 00,F
0A02:  BRA    0A00
....................       lcd.enable = 1; 
0A04:  BSF    F83.2
....................       delay_us(25); 
0A06:  MOVLW  63
0A08:  MOVWF  00
0A0A:  DECFSZ 00,F
0A0C:  BRA    0A0A
0A0E:  BRA    0A10
....................       low = lcd.data; 
0A10:  SWAPF  F83,W
0A12:  ANDLW  0F
0A14:  MOVWF  57
....................       lcd.enable = 0; 
0A16:  BCF    F83.2
....................       set_tris_d(LCD_WRITE); 
0A18:  MOVLW  00
0A1A:  MOVWF  F95
....................       return( (high<<4) | low); 
0A1C:  SWAPF  58,W
0A1E:  MOVWF  00
0A20:  MOVLW  F0
0A22:  ANDWF  00,F
0A24:  MOVF   00,W
0A26:  IORWF  57,W
0A28:  MOVWF  01
.................... } 
0A2A:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
08BE:  SWAPF  5D,W
08C0:  ANDLW  F0
08C2:  MOVWF  00
08C4:  MOVLW  0F
08C6:  ANDWF  F83,W
08C8:  IORWF  00,W
08CA:  MOVWF  F83
....................       delay_cycles(25); 
08CC:  MOVLW  08
08CE:  MOVWF  00
08D0:  DECFSZ 00,F
08D2:  BRA    08D0
....................       lcd.enable = 1; 
08D4:  BSF    F83.2
....................       delay_us(55); 
08D6:  MOVLW  DB
08D8:  MOVWF  00
08DA:  DECFSZ 00,F
08DC:  BRA    08DA
08DE:  BRA    08E0
....................       lcd.enable = 0; 
08E0:  BCF    F83.2
.................... } 
08E2:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n )  
....................  { 
....................  
....................       lcd.rs = 0; 
08E4:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
08E6:  MOVLW  02
08E8:  MOVWF  5C
08EA:  RCALL  0896
....................       lcd.rs = address; 
08EC:  BTFSS  5A.0
08EE:  BCF    F83.0
08F0:  BTFSC  5A.0
08F2:  BSF    F83.0
....................       delay_cycles(25); 
08F4:  MOVLW  08
08F6:  MOVWF  00
08F8:  DECFSZ 00,F
08FA:  BRA    08F8
....................       lcd.rw = 0; 
08FC:  BCF    F83.1
....................       delay_cycles(25); 
08FE:  MOVLW  08
0900:  MOVWF  00
0902:  DECFSZ 00,F
0904:  BRA    0902
....................       lcd.enable = 0; 
0906:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0908:  SWAPF  5B,W
090A:  MOVWF  5C
090C:  MOVLW  0F
090E:  ANDWF  5C,F
0910:  MOVFF  5C,5D
0914:  RCALL  08BE
....................       lcd_send_nibble(n & 0xf); 
0916:  MOVF   5B,W
0918:  ANDLW  0F
091A:  MOVWF  5C
091C:  MOVWF  5D
091E:  RCALL  08BE
....................  } 
0920:  RETLW  00
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0922:  MOVLW  00
0924:  MOVWF  F95
....................     lcd.rs = 0; 
0926:  BCF    F83.0
....................     lcd.rw = 0; 
0928:  BCF    F83.1
....................     lcd.enable = 0; 
092A:  BCF    F83.2
....................     delay_ms(15); 
092C:  MOVLW  0F
092E:  MOVWF  5C
0930:  RCALL  0896
....................     for(i=1;i<=3;++i) { 
0932:  MOVLW  01
0934:  MOVWF  49
0936:  MOVF   49,W
0938:  SUBLW  03
093A:  BNC   094C
....................        lcd_send_nibble(3); 
093C:  MOVLW  03
093E:  MOVWF  5D
0940:  RCALL  08BE
....................        delay_ms(5); 
0942:  MOVLW  05
0944:  MOVWF  5C
0946:  RCALL  0896
....................     } 
0948:  INCF   49,F
094A:  BRA    0936
....................     lcd_send_nibble(2); 
094C:  MOVLW  02
094E:  MOVWF  5D
0950:  RCALL  08BE
....................     for(i=0;i<=3;++i) 
0952:  CLRF   49
0954:  MOVF   49,W
0956:  SUBLW  03
0958:  BNC   0978
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
095A:  CLRF   03
095C:  MOVF   49,W
095E:  MOVFF  FF2,4A
0962:  BCF    FF2.7
0964:  CALL   0096
0968:  BTFSC  4A.7
096A:  BSF    FF2.7
096C:  MOVWF  4A
096E:  CLRF   5A
0970:  MOVWF  5B
0972:  RCALL  08E4
0974:  INCF   49,F
0976:  BRA    0954
.................... } 
0978:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
097A:  MOVLW  01
097C:  SUBWF  58,W
097E:  ADDLW  FC
0980:  BC    09A0
0982:  ADDLW  04
0984:  GOTO   09B0
....................      case 1 : address=0x80;break; 
0988:  MOVLW  80
098A:  MOVWF  59
098C:  BRA    09A0
....................      case 2 : address=0xc0;break; 
098E:  MOVLW  C0
0990:  MOVWF  59
0992:  BRA    09A0
....................      case 3 : address=0x94;break; 
0994:  MOVLW  94
0996:  MOVWF  59
0998:  BRA    09A0
....................      case 4 : address=0xd4;break; 
099A:  MOVLW  D4
099C:  MOVWF  59
099E:  BRA    09A0
....................    } 
....................    address+=x-1; 
09A0:  MOVLW  01
09A2:  SUBWF  57,W
09A4:  ADDWF  59,F
....................    lcd_send_byte(0,address); 
09A6:  CLRF   5A
09A8:  MOVFF  59,5B
09AC:  RCALL  08E4
.................... } 
09AE:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A2C:  MOVF   56,W
0A2E:  SUBLW  F1
0A30:  BNZ   0A36
....................     c=238; 
0A32:  MOVLW  EE
0A34:  MOVWF  56
....................    switch (c) { 
0A36:  MOVF   56,W
0A38:  XORLW  0C
0A3A:  BZ    0A46
0A3C:  XORLW  06
0A3E:  BZ    0A5A
0A40:  XORLW  02
0A42:  BZ    0A68
0A44:  BRA    0A72
....................      case '\f'   : lcd_send_byte(0,1); 
0A46:  CLRF   5A
0A48:  MOVLW  01
0A4A:  MOVWF  5B
0A4C:  RCALL  08E4
....................                    lcdline=1; 
0A4E:  MOVLW  01
0A50:  MOVWF  48
....................                    delay_ms(2); 
0A52:  MOVLW  02
0A54:  MOVWF  5C
0A56:  RCALL  0896
....................                                            break; 
0A58:  BRA    0A7E
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A5A:  INCF   48,F
0A5C:  MOVLW  01
0A5E:  MOVWF  57
0A60:  MOVFF  48,58
0A64:  RCALL  097A
0A66:  BRA    0A7E
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0A68:  CLRF   5A
0A6A:  MOVLW  10
0A6C:  MOVWF  5B
0A6E:  RCALL  08E4
0A70:  BRA    0A7E
....................      default     : lcd_send_byte(1,c);     break; 
0A72:  MOVLW  01
0A74:  MOVWF  5A
0A76:  MOVFF  56,5B
0A7A:  RCALL  08E4
0A7C:  BRA    0A7E
....................    } 
.................... lcd.rs=0; 
0A7E:  BCF    F83.0
.................... ult_ddram = lcd_read_byte() & 0x7F; 
0A80:  RCALL  09DC
0A82:  MOVF   01,W
0A84:  ANDLW  7F
0A86:  MOVWF  47
.................... } 
0A88:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... BYTE lee_DDRAM() 
....................  { 
....................   BYTE vcursor; 
....................   lcd.rs=0; 
*
0D9C:  BCF    F83.0
....................   vcursor = lcd_read_byte() & 0x7F; 
0D9E:  RCALL  09DC
0DA0:  MOVF   01,W
0DA2:  ANDLW  7F
0DA4:  MOVWF  49
....................   return(vcursor); 
0DA6:  MOVFF  49,01
....................  } 
0DAA:  GOTO   1AE6 (RETURN)
....................          
....................  
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
177C:  RLCF   49,W
177E:  MOVWF  00
1780:  RLCF   00,F
1782:  MOVLW  FC
1784:  ANDWF  00,F
1786:  MOVFF  00,01
178A:  MOVF   FC2,W
178C:  ANDLW  C3
178E:  IORWF  00,W
1790:  MOVWF  FC2
1792:  MOVLW  0A
1794:  MOVWF  5C
1796:  CALL   0896
179A:  BSF    FC2.1
179C:  BTFSC  FC2.1
179E:  BRA    179C
17A0:  MOVFF  FC4,03
17A4:  MOVFF  FC3,4E
17A8:  MOVFF  FC4,4F
17AC:  CALL   0D66
17B0:  MOVFF  03,4D
17B4:  MOVFF  02,4C
17B8:  MOVFF  01,4B
17BC:  MOVFF  00,4A
17C0:  MOVFF  4A,00
17C4:  MOVFF  4B,01
17C8:  MOVFF  4C,02
17CC:  MOVFF  4D,03
.................... } 
17D0:  GOTO   34AC (RETURN)
....................  
.................... // Esta rutina hay que depurarla, pero sera despues, cuando lo haga la implementamos para ver si se escribio 
.................... // Algo raro en la pantalla por ruido y asi refrescar 
....................  
.................... /* void shw_vcursor() 
.................... { 
....................  posic=get_cursor();   // get_cursor() esta en LCD420.c 
....................  lcd_gotoxy(18,1); 
....................  printf(lcd_putc,"%3u",posic); //Imprime en hexadecimal 
....................  delay_ms(1000); 
....................  // printf(lcd_putc,"\f"); 
....................   
.................... } */ 
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0DAE:  MOVF   49,F
0DB0:  BNZ   0DB8
....................    { 
....................       Pantalla_off; 
0DB2:  BCF    F8B.1
0DB4:  BCF    F94.1
....................    } 
....................    else 
0DB6:  BRA    0DBC
....................    { 
....................       Pantalla_on; 
0DB8:  BSF    F8B.1
0DBA:  BCF    F94.1
....................    } 
.................... } 
0DBC:  RETLW  00
....................  
.................... // ************************** Rutina unica para leer las teclas ********************* 
....................  
.................... void lee_pulsad() 
....................  { 
....................    pulsu=0;pulsr=0;pulsd=0;pulsl=0;tecla='N'; 
*
0EEC:  BCF    2F.3
0EEE:  BCF    2F.4
0EF0:  BCF    2F.5
0EF2:  BCF    2F.6
0EF4:  MOVLW  4E
0EF6:  MOVWF  35
....................     
....................    if(UP)//Si oprime hacia arriba 
0EF8:  BSF    F92.5
0EFA:  BTFSS  F80.5
0EFC:  BRA    0F24
....................     { 
....................       delay_ms(25); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0EFE:  MOVLW  19
0F00:  MOVWF  5C
0F02:  RCALL  0896
....................       if(UP) 
0F04:  BSF    F92.5
0F06:  BTFSS  F80.5
0F08:  BRA    0F24
....................       { 
....................        if(Flanco == 0) 
0F0A:  BTFSC  2E.3
0F0C:  BRA    0F22
....................         { 
....................          pulsu=1;  //Bandera que indica que la tecla UP, fue pulsada validamente 
0F0E:  BSF    2F.3
....................          tecla='U'; 
0F10:  MOVLW  55
0F12:  MOVWF  35
....................          Flanco=1;   //Flag que indica el ultimo estado del pulsador  
0F14:  BSF    2E.3
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F16:  MOVLW  01
0F18:  MOVWF  3E
....................          delay_ms(75); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F1A:  MOVLW  4B
0F1C:  MOVWF  5C
0F1E:  RCALL  0896
....................         } 
....................        else 
0F20:  BRA    0F24
....................         { 
....................          Flanco=0; //Se reasigna el estado del pulsador en 0 
0F22:  BCF    2E.3
....................         } 
....................       } 
....................      } 
....................       
....................     if(RIGHT)//Si oprime hacia arriba 
0F24:  BSF    F96.1
0F26:  BTFSS  F84.1
0F28:  BRA    0F50
....................     { 
....................       delay_ms(25); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0F2A:  MOVLW  19
0F2C:  MOVWF  5C
0F2E:  RCALL  0896
....................       if(RIGHT) 
0F30:  BSF    F96.1
0F32:  BTFSS  F84.1
0F34:  BRA    0F50
....................       { 
....................        if(Flanco1 == 0) 
0F36:  BTFSC  2E.4
0F38:  BRA    0F4E
....................         { 
....................          pulsr=1;  //Bandera que indica que la tecla RIGHT, fue pulsada validamente 
0F3A:  BSF    2F.4
....................          tecla='R'; 
0F3C:  MOVLW  52
0F3E:  MOVWF  35
....................          Flanco1=1;   //Flag que indica el ultimo estado del pulsador  
0F40:  BSF    2E.4
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F42:  MOVLW  01
0F44:  MOVWF  3E
....................          delay_ms(75); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F46:  MOVLW  4B
0F48:  MOVWF  5C
0F4A:  RCALL  0896
....................         } 
....................        else 
0F4C:  BRA    0F50
....................         { 
....................          Flanco1=0; //Se reasigna el estado del pulsador en 0 
0F4E:  BCF    2E.4
....................         } 
....................       } 
....................      } 
....................       
....................      if(DOWN)//Si oprime hacia arriba 
0F50:  BSF    F96.0
0F52:  BTFSS  F84.0
0F54:  BRA    0F7C
....................     { 
....................       delay_ms(25); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0F56:  MOVLW  19
0F58:  MOVWF  5C
0F5A:  RCALL  0896
....................       if(DOWN) 
0F5C:  BSF    F96.0
0F5E:  BTFSS  F84.0
0F60:  BRA    0F7C
....................       { 
....................        if(Flanco2 == 0) 
0F62:  BTFSC  2E.5
0F64:  BRA    0F7A
....................         { 
....................          pulsd=1;  //Bandera que indica que la tecla DOWN, fue pulsada validamente 
0F66:  BSF    2F.5
....................          tecla='D'; 
0F68:  MOVLW  44
0F6A:  MOVWF  35
....................          Flanco2=1;   //Flag que indica el ultimo estado del pulsador  
0F6C:  BSF    2E.5
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F6E:  MOVLW  01
0F70:  MOVWF  3E
....................          delay_ms(75); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F72:  MOVLW  4B
0F74:  MOVWF  5C
0F76:  RCALL  0896
....................         } 
....................        else 
0F78:  BRA    0F7C
....................         { 
....................          Flanco2=0; //Se reasigna el estado del pulsador en 0 
0F7A:  BCF    2E.5
....................         } 
....................       } 
....................      } 
....................       
....................      if(LEFT)//Si oprime hacia arriba 
0F7C:  BSF    F96.2
0F7E:  BTFSS  F84.2
0F80:  BRA    0FA8
....................     { 
....................       delay_ms(25); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0F82:  MOVLW  19
0F84:  MOVWF  5C
0F86:  RCALL  0896
....................       if(LEFT) 
0F88:  BSF    F96.2
0F8A:  BTFSS  F84.2
0F8C:  BRA    0FA8
....................       { 
....................        if(Flanco3 == 0) 
0F8E:  BTFSC  2E.6
0F90:  BRA    0FA6
....................         { 
....................          pulsl=1;  //Bandera que indica que la tecla LEFT, fue pulsada validamente 
0F92:  BSF    2F.6
....................          tecla='L'; 
0F94:  MOVLW  4C
0F96:  MOVWF  35
....................          Flanco3=1;   //Flag que indica el ultimo estado del pulsador  
0F98:  BSF    2E.6
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F9A:  MOVLW  01
0F9C:  MOVWF  3E
....................          delay_ms(75); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F9E:  MOVLW  4B
0FA0:  MOVWF  5C
0FA2:  RCALL  0896
....................         } 
....................        else 
0FA4:  BRA    0FA8
....................         { 
....................          Flanco3=0; //Se reasigna el estado del pulsador en 0 
0FA6:  BCF    2E.6
....................         } 
....................       } 
....................      } 
....................       
....................  } 
0FA8:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   43,F
00BE:  BTFSC  FD8.2
00C0:  INCF   44,F
....................  
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   44,F
00C4:  BNZ   00CC
00C6:  MOVF   43,W
00C8:  SUBLW  C7
00CA:  BC    0160
....................    { 
....................       tiempos=0;tiemporeset++; 
00CC:  CLRF   44
00CE:  CLRF   43
00D0:  INCF   27,F
....................       Lectura=1; 
00D2:  BSF    30.3
....................       ver_ddram=1; 
00D4:  BSF    30.7
....................            
....................       if(estadomv==1 && flag_filtro==1) 
00D6:  BTFSS  2E.1
00D8:  BRA    0100
00DA:  BTFSS  2F.1
00DC:  BRA    0100
....................       {   
....................          segundos++; 
00DE:  INCF   24,F
....................          if(segundos>=60) 
00E0:  BTFSC  24.7
00E2:  BRA    00F0
00E4:  MOVF   24,W
00E6:  SUBLW  3B
00E8:  BC    00F0
....................          { 
....................             segundos=0;minutos++;flag_min=1; 
00EA:  CLRF   24
00EC:  INCF   25,F
00EE:  BSF    2F.7
....................          } 
....................           
....................          if(minutos>=60) 
00F0:  BTFSC  25.7
00F2:  BRA    0100
00F4:  MOVF   25,W
00F6:  SUBLW  3B
00F8:  BC    0100
....................          { 
....................             minutos=0;horas++;flag_hrs=1; 
00FA:  CLRF   25
00FC:  INCF   26,F
00FE:  BSF    30.0
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1)   // Aqui se decrementa el tiempo de purga, cargado de la eeprom 
0100:  BTFSS  30.5
0102:  BRA    013A
....................       { 
....................          if(purga_segundos>0) 
0104:  BTFSC  28.7
0106:  BRA    0112
0108:  MOVF   28,W
010A:  SUBLW  00
010C:  BC    0112
....................          { 
....................           
....................             purga_segundos--; 
010E:  DECF   28,F
....................          } 
....................          else 
0110:  BRA    013A
....................          { 
....................             if(purga_minutos>0) 
0112:  BTFSC  21.7
0114:  BRA    0124
0116:  MOVF   21,W
0118:  SUBLW  00
011A:  BC    0124
....................             { 
....................                purga_minutos--; 
011C:  DECF   21,F
....................                purga_segundos=59; 
011E:  MOVLW  3B
0120:  MOVWF  28
....................             } 
....................             else 
0122:  BRA    013A
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20;Cambio=1; // Aqui se sale al menu20 despues de la purga 
0124:  BCF    30.5
0126:  BSF    F8A.5
0128:  BCF    F93.5
012A:  MOVLW  14
012C:  MOVWF  16
012E:  MOVLW  01
0130:  MOVWF  3E
....................                Luz_Blanca_on; 
0132:  BSF    F8A.4
0134:  BCF    F93.4
....................                estadomv=1; 
0136:  BSF    2E.1
....................                estadofl=1; 
0138:  BSF    2E.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
013A:  BTFSS  30.6
013C:  BRA    0160
....................       { 
....................          if(ppurga_segundos>0) 
013E:  BTFSC  2A.7
0140:  BRA    014C
0142:  MOVF   2A,W
0144:  SUBLW  00
0146:  BC    014C
....................          { 
....................             ppurga_segundos--; 
0148:  DECF   2A,F
....................          } 
....................          else 
014A:  BRA    0160
....................          { 
....................             if(ppurga_minutos>0) 
014C:  BTFSC  2C.7
014E:  BRA    015E
0150:  MOVF   2C,W
0152:  SUBLW  00
0154:  BC    015E
....................             { 
....................                ppurga_minutos--; 
0156:  DECF   2C,F
....................                ppurga_segundos=59; 
0158:  MOVLW  3B
015A:  MOVWF  2A
....................             } 
....................             else 
015C:  BRA    0160
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
015E:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0160:  BCF    F9E.0
0162:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0FAA:  DECFSZ 4A,W
0FAC:  BRA    0FDE
....................    {if(estadoalarma==0) 
0FAE:  BTFSC  2E.2
0FB0:  BRA    0FC6
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0FB2:  MOVLW  02
0FB4:  MOVWF  57
0FB6:  MOVFF  4B,58
0FBA:  RCALL  097A
0FBC:  MOVLW  66
0FBE:  MOVWF  FF6
0FC0:  MOVLW  01
0FC2:  MOVWF  FF7
0FC4:  RCALL  0DBE
....................    if(estadoalarma==1) 
0FC6:  BTFSS  2E.2
0FC8:  BRA    0FDE
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0FCA:  MOVLW  02
0FCC:  MOVWF  57
0FCE:  MOVFF  4B,58
0FD2:  RCALL  097A
0FD4:  MOVLW  7A
0FD6:  MOVWF  FF6
0FD8:  MOVLW  01
0FDA:  MOVWF  FF7
0FDC:  RCALL  0DBE
....................    } 
....................    if(X==2) 
0FDE:  MOVF   4A,W
0FE0:  SUBLW  02
0FE2:  BNZ   1014
....................    {if(flag_filtro==0) 
0FE4:  BTFSC  2F.1
0FE6:  BRA    0FFC
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Cont  Filtro Desact");} 
0FE8:  MOVLW  02
0FEA:  MOVWF  57
0FEC:  MOVFF  4B,58
0FF0:  RCALL  097A
0FF2:  MOVLW  8E
0FF4:  MOVWF  FF6
0FF6:  MOVLW  01
0FF8:  MOVWF  FF7
0FFA:  RCALL  0DBE
....................     if(flag_filtro==1) 
0FFC:  BTFSS  2F.1
0FFE:  BRA    1014
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Cont  Filtro  Activ");} 
1000:  MOVLW  02
1002:  MOVWF  57
1004:  MOVFF  4B,58
1008:  RCALL  097A
100A:  MOVLW  A2
100C:  MOVWF  FF6
100E:  MOVLW  01
1010:  MOVWF  FF7
1012:  RCALL  0DBE
....................    } 
....................     
....................    //if(x==2) 
....................    //{lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
....................     
....................    if(x==3) 
1014:  MOVF   4A,W
1016:  SUBLW  03
1018:  BNZ   102E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
101A:  MOVLW  02
101C:  MOVWF  57
101E:  MOVFF  4B,58
1022:  RCALL  097A
1024:  MOVLW  B6
1026:  MOVWF  FF6
1028:  MOVLW  01
102A:  MOVWF  FF7
102C:  RCALL  0DBE
....................     
....................    if(x==4) 
102E:  MOVF   4A,W
1030:  SUBLW  04
1032:  BNZ   1048
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1034:  MOVLW  02
1036:  MOVWF  57
1038:  MOVFF  4B,58
103C:  RCALL  097A
103E:  MOVLW  CA
1040:  MOVWF  FF6
1042:  MOVLW  01
1044:  MOVWF  FF7
1046:  RCALL  0DBE
....................        
....................    if(x==5) 
1048:  MOVF   4A,W
104A:  SUBLW  05
104C:  BNZ   1062
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
104E:  MOVLW  02
1050:  MOVWF  57
1052:  MOVFF  4B,58
1056:  RCALL  097A
1058:  MOVLW  DE
105A:  MOVWF  FF6
105C:  MOVLW  01
105E:  MOVWF  FF7
1060:  RCALL  0DBE
....................     
....................    if(x==6) 
1062:  MOVF   4A,W
1064:  SUBLW  06
1066:  BNZ   107C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
1068:  MOVLW  02
106A:  MOVWF  57
106C:  MOVFF  4B,58
1070:  RCALL  097A
1072:  MOVLW  F2
1074:  MOVWF  FF6
1076:  MOVLW  01
1078:  MOVWF  FF7
107A:  RCALL  0DBE
.................... } 
107C:  RETLW  00
....................  
.................... void set_default() 
....................  { 
....................    write_eeprom(0,0);delay_ms(20);   // Contraseña 0 = 0 
*
0A8A:  CLRF   FA9
0A8C:  CLRF   FA8
0A8E:  BCF    FA6.6
0A90:  BCF    FA6.7
0A92:  BSF    FA6.2
0A94:  MOVF   FF2,W
0A96:  MOVWF  00
0A98:  BCF    FF2.7
0A9A:  MOVLB  F
0A9C:  MOVLW  55
0A9E:  MOVWF  FA7
0AA0:  MOVLW  AA
0AA2:  MOVWF  FA7
0AA4:  BSF    FA6.1
0AA6:  BTFSC  FA6.1
0AA8:  BRA    0AA6
0AAA:  BCF    FA6.2
0AAC:  MOVF   00,W
0AAE:  IORWF  FF2,F
0AB0:  MOVLW  14
0AB2:  MOVWF  5C
0AB4:  MOVLB  0
0AB6:  RCALL  0896
....................    write_eeprom(1,0);delay_ms(20);   // Contraseña 1 = 0 
0AB8:  MOVLW  01
0ABA:  MOVWF  FA9
0ABC:  CLRF   FA8
0ABE:  BCF    FA6.6
0AC0:  BCF    FA6.7
0AC2:  BSF    FA6.2
0AC4:  MOVF   FF2,W
0AC6:  MOVWF  00
0AC8:  BCF    FF2.7
0ACA:  MOVLB  F
0ACC:  MOVLW  55
0ACE:  MOVWF  FA7
0AD0:  MOVLW  AA
0AD2:  MOVWF  FA7
0AD4:  BSF    FA6.1
0AD6:  BTFSC  FA6.1
0AD8:  BRA    0AD6
0ADA:  BCF    FA6.2
0ADC:  MOVF   00,W
0ADE:  IORWF  FF2,F
0AE0:  MOVLW  14
0AE2:  MOVWF  5C
0AE4:  MOVLB  0
0AE6:  RCALL  0896
....................    write_eeprom(2,0);delay_ms(20);   // Contraseña 2 = 0 
0AE8:  MOVLW  02
0AEA:  MOVWF  FA9
0AEC:  CLRF   FA8
0AEE:  BCF    FA6.6
0AF0:  BCF    FA6.7
0AF2:  BSF    FA6.2
0AF4:  MOVF   FF2,W
0AF6:  MOVWF  00
0AF8:  BCF    FF2.7
0AFA:  MOVLB  F
0AFC:  MOVLW  55
0AFE:  MOVWF  FA7
0B00:  MOVLW  AA
0B02:  MOVWF  FA7
0B04:  BSF    FA6.1
0B06:  BTFSC  FA6.1
0B08:  BRA    0B06
0B0A:  BCF    FA6.2
0B0C:  MOVF   00,W
0B0E:  IORWF  FF2,F
0B10:  MOVLW  14
0B12:  MOVWF  5C
0B14:  MOVLB  0
0B16:  RCALL  0896
....................    write_eeprom(3,0);delay_ms(20);   // Contraseña 3 = 0 
0B18:  MOVLW  03
0B1A:  MOVWF  FA9
0B1C:  CLRF   FA8
0B1E:  BCF    FA6.6
0B20:  BCF    FA6.7
0B22:  BSF    FA6.2
0B24:  MOVF   FF2,W
0B26:  MOVWF  00
0B28:  BCF    FF2.7
0B2A:  MOVLB  F
0B2C:  MOVLW  55
0B2E:  MOVWF  FA7
0B30:  MOVLW  AA
0B32:  MOVWF  FA7
0B34:  BSF    FA6.1
0B36:  BTFSC  FA6.1
0B38:  BRA    0B36
0B3A:  BCF    FA6.2
0B3C:  MOVF   00,W
0B3E:  IORWF  FF2,F
0B40:  MOVLW  14
0B42:  MOVWF  5C
0B44:  MOVLB  0
0B46:  RCALL  0896
....................     
....................    write_eeprom(5,1);delay_ms(20);   // Estado de alarma = 1 
0B48:  MOVLW  05
0B4A:  MOVWF  FA9
0B4C:  MOVLW  01
0B4E:  MOVWF  FA8
0B50:  BCF    FA6.6
0B52:  BCF    FA6.7
0B54:  BSF    FA6.2
0B56:  MOVF   FF2,W
0B58:  MOVWF  00
0B5A:  BCF    FF2.7
0B5C:  MOVLB  F
0B5E:  MOVLW  55
0B60:  MOVWF  FA7
0B62:  MOVLW  AA
0B64:  MOVWF  FA7
0B66:  BSF    FA6.1
0B68:  BTFSC  FA6.1
0B6A:  BRA    0B68
0B6C:  BCF    FA6.2
0B6E:  MOVF   00,W
0B70:  IORWF  FF2,F
0B72:  MOVLW  14
0B74:  MOVWF  5C
0B76:  MOVLB  0
0B78:  RCALL  0896
....................     
....................    write_eeprom(20,1);delay_ms(20);  // Minutos de Tiempo de Purga = 1 
0B7A:  MOVLW  14
0B7C:  MOVWF  FA9
0B7E:  MOVLW  01
0B80:  MOVWF  FA8
0B82:  BCF    FA6.6
0B84:  BCF    FA6.7
0B86:  BSF    FA6.2
0B88:  MOVF   FF2,W
0B8A:  MOVWF  00
0B8C:  BCF    FF2.7
0B8E:  MOVLB  F
0B90:  MOVLW  55
0B92:  MOVWF  FA7
0B94:  MOVLW  AA
0B96:  MOVWF  FA7
0B98:  BSF    FA6.1
0B9A:  BTFSC  FA6.1
0B9C:  BRA    0B9A
0B9E:  BCF    FA6.2
0BA0:  MOVF   00,W
0BA2:  IORWF  FF2,F
0BA4:  MOVLW  14
0BA6:  MOVWF  5C
0BA8:  MOVLB  0
0BAA:  RCALL  0896
....................    write_eeprom(21,0);delay_ms(20);  // Segundos de Tiempo de Purga = 0 
0BAC:  MOVLW  15
0BAE:  MOVWF  FA9
0BB0:  CLRF   FA8
0BB2:  BCF    FA6.6
0BB4:  BCF    FA6.7
0BB6:  BSF    FA6.2
0BB8:  MOVF   FF2,W
0BBA:  MOVWF  00
0BBC:  BCF    FF2.7
0BBE:  MOVLB  F
0BC0:  MOVLW  55
0BC2:  MOVWF  FA7
0BC4:  MOVLW  AA
0BC6:  MOVWF  FA7
0BC8:  BSF    FA6.1
0BCA:  BTFSC  FA6.1
0BCC:  BRA    0BCA
0BCE:  BCF    FA6.2
0BD0:  MOVF   00,W
0BD2:  IORWF  FF2,F
0BD4:  MOVLW  14
0BD6:  MOVWF  5C
0BD8:  MOVLB  0
0BDA:  RCALL  0896
....................    write_eeprom(22,1);delay_ms(20);  // Minutos de Tiempo de PostPurga = 1 
0BDC:  MOVLW  16
0BDE:  MOVWF  FA9
0BE0:  MOVLW  01
0BE2:  MOVWF  FA8
0BE4:  BCF    FA6.6
0BE6:  BCF    FA6.7
0BE8:  BSF    FA6.2
0BEA:  MOVF   FF2,W
0BEC:  MOVWF  00
0BEE:  BCF    FF2.7
0BF0:  MOVLB  F
0BF2:  MOVLW  55
0BF4:  MOVWF  FA7
0BF6:  MOVLW  AA
0BF8:  MOVWF  FA7
0BFA:  BSF    FA6.1
0BFC:  BTFSC  FA6.1
0BFE:  BRA    0BFC
0C00:  BCF    FA6.2
0C02:  MOVF   00,W
0C04:  IORWF  FF2,F
0C06:  MOVLW  14
0C08:  MOVWF  5C
0C0A:  MOVLB  0
0C0C:  RCALL  0896
....................    write_eeprom(23,0);delay_ms(20);  // Segundos de Tiempo de PostPurga = 0 
0C0E:  MOVLW  17
0C10:  MOVWF  FA9
0C12:  CLRF   FA8
0C14:  BCF    FA6.6
0C16:  BCF    FA6.7
0C18:  BSF    FA6.2
0C1A:  MOVF   FF2,W
0C1C:  MOVWF  00
0C1E:  BCF    FF2.7
0C20:  MOVLB  F
0C22:  MOVLW  55
0C24:  MOVWF  FA7
0C26:  MOVLW  AA
0C28:  MOVWF  FA7
0C2A:  BSF    FA6.1
0C2C:  BTFSC  FA6.1
0C2E:  BRA    0C2C
0C30:  BCF    FA6.2
0C32:  MOVF   00,W
0C34:  IORWF  FF2,F
0C36:  MOVLW  14
0C38:  MOVWF  5C
0C3A:  MOVLB  0
0C3C:  RCALL  0896
....................     
....................    write_eeprom(40,60);delay_ms(20); // Setpoint de vida del filtro = 60 
0C3E:  MOVLW  28
0C40:  MOVWF  FA9
0C42:  MOVLW  3C
0C44:  MOVWF  FA8
0C46:  BCF    FA6.6
0C48:  BCF    FA6.7
0C4A:  BSF    FA6.2
0C4C:  MOVF   FF2,W
0C4E:  MOVWF  00
0C50:  BCF    FF2.7
0C52:  MOVLB  F
0C54:  MOVLW  55
0C56:  MOVWF  FA7
0C58:  MOVLW  AA
0C5A:  MOVWF  FA7
0C5C:  BSF    FA6.1
0C5E:  BTFSC  FA6.1
0C60:  BRA    0C5E
0C62:  BCF    FA6.2
0C64:  MOVF   00,W
0C66:  IORWF  FF2,F
0C68:  MOVLW  14
0C6A:  MOVWF  5C
0C6C:  MOVLB  0
0C6E:  RCALL  0896
....................     
....................    write_eeprom(70,0);delay_ms(20);  // Segundos de uso del filtro = 0 
0C70:  MOVLW  46
0C72:  MOVWF  FA9
0C74:  CLRF   FA8
0C76:  BCF    FA6.6
0C78:  BCF    FA6.7
0C7A:  BSF    FA6.2
0C7C:  MOVF   FF2,W
0C7E:  MOVWF  00
0C80:  BCF    FF2.7
0C82:  MOVLB  F
0C84:  MOVLW  55
0C86:  MOVWF  FA7
0C88:  MOVLW  AA
0C8A:  MOVWF  FA7
0C8C:  BSF    FA6.1
0C8E:  BTFSC  FA6.1
0C90:  BRA    0C8E
0C92:  BCF    FA6.2
0C94:  MOVF   00,W
0C96:  IORWF  FF2,F
0C98:  MOVLW  14
0C9A:  MOVWF  5C
0C9C:  MOVLB  0
0C9E:  RCALL  0896
....................    write_eeprom(71,0);delay_ms(20);  // Minutos de uso del filtro = 0 
0CA0:  MOVLW  47
0CA2:  MOVWF  FA9
0CA4:  CLRF   FA8
0CA6:  BCF    FA6.6
0CA8:  BCF    FA6.7
0CAA:  BSF    FA6.2
0CAC:  MOVF   FF2,W
0CAE:  MOVWF  00
0CB0:  BCF    FF2.7
0CB2:  MOVLB  F
0CB4:  MOVLW  55
0CB6:  MOVWF  FA7
0CB8:  MOVLW  AA
0CBA:  MOVWF  FA7
0CBC:  BSF    FA6.1
0CBE:  BTFSC  FA6.1
0CC0:  BRA    0CBE
0CC2:  BCF    FA6.2
0CC4:  MOVF   00,W
0CC6:  IORWF  FF2,F
0CC8:  MOVLW  14
0CCA:  MOVWF  5C
0CCC:  MOVLB  0
0CCE:  RCALL  0896
....................    write_eeprom(72,0);delay_ms(20);  // Horas de uso del filtro = 0 
0CD0:  MOVLW  48
0CD2:  MOVWF  FA9
0CD4:  CLRF   FA8
0CD6:  BCF    FA6.6
0CD8:  BCF    FA6.7
0CDA:  BSF    FA6.2
0CDC:  MOVF   FF2,W
0CDE:  MOVWF  00
0CE0:  BCF    FF2.7
0CE2:  MOVLB  F
0CE4:  MOVLW  55
0CE6:  MOVWF  FA7
0CE8:  MOVLW  AA
0CEA:  MOVWF  FA7
0CEC:  BSF    FA6.1
0CEE:  BTFSC  FA6.1
0CF0:  BRA    0CEE
0CF2:  BCF    FA6.2
0CF4:  MOVF   00,W
0CF6:  IORWF  FF2,F
0CF8:  MOVLW  14
0CFA:  MOVWF  5C
0CFC:  MOVLB  0
0CFE:  RCALL  0896
....................    write_eeprom(73,1);delay_ms(20);  // Flag de uso del filtro = 1 
0D00:  MOVLW  49
0D02:  MOVWF  FA9
0D04:  MOVLW  01
0D06:  MOVWF  FA8
0D08:  BCF    FA6.6
0D0A:  BCF    FA6.7
0D0C:  BSF    FA6.2
0D0E:  MOVF   FF2,W
0D10:  MOVWF  00
0D12:  BCF    FF2.7
0D14:  MOVLB  F
0D16:  MOVLW  55
0D18:  MOVWF  FA7
0D1A:  MOVLW  AA
0D1C:  MOVWF  FA7
0D1E:  BSF    FA6.1
0D20:  BTFSC  FA6.1
0D22:  BRA    0D20
0D24:  BCF    FA6.2
0D26:  MOVF   00,W
0D28:  IORWF  FF2,F
0D2A:  MOVLW  14
0D2C:  MOVWF  5C
0D2E:  MOVLB  0
0D30:  RCALL  0896
....................  
....................    write_eeprom(80,0x27);delay_ms(20); //Testigo de quer ya se grabaron los valores = 0x27 
0D32:  MOVLW  50
0D34:  MOVWF  FA9
0D36:  MOVLW  27
0D38:  MOVWF  FA8
0D3A:  BCF    FA6.6
0D3C:  BCF    FA6.7
0D3E:  BSF    FA6.2
0D40:  MOVF   FF2,W
0D42:  MOVWF  00
0D44:  BCF    FF2.7
0D46:  MOVLB  F
0D48:  MOVLW  55
0D4A:  MOVWF  FA7
0D4C:  MOVLW  AA
0D4E:  MOVWF  FA7
0D50:  BSF    FA6.1
0D52:  BTFSC  FA6.1
0D54:  BRA    0D52
0D56:  BCF    FA6.2
0D58:  MOVF   00,W
0D5A:  IORWF  FF2,F
0D5C:  MOVLW  14
0D5E:  MOVWF  5C
0D60:  MOVLB  0
0D62:  RCALL  0896
....................  } 
0D64:  RETLW  00
....................  
....................  
.................... void main () 
.................... { 
*
17D4:  CLRF   FF8
17D6:  BCF    FD0.7
17D8:  BSF    07.7
17DA:  CLRF   FEA
17DC:  CLRF   FE9
17DE:  MOVLW  64
17E0:  MOVWF  16
17E2:  MOVLW  07
17E4:  MOVWF  17
17E6:  MOVLW  02
17E8:  MOVWF  18
17EA:  MOVLW  0B
17EC:  MOVWF  19
17EE:  MOVLW  02
17F0:  MOVWF  1A
17F2:  MOVLW  03
17F4:  MOVWF  1B
17F6:  MOVLW  02
17F8:  MOVWF  1C
17FA:  MOVWF  1D
17FC:  MOVLW  04
17FE:  MOVWF  1E
1800:  MOVLW  0A
1802:  MOVWF  1F
1804:  MOVLW  01
1806:  MOVWF  20
1808:  CLRF   21
180A:  CLRF   22
180C:  CLRF   23
180E:  CLRF   24
1810:  CLRF   25
1812:  CLRF   26
1814:  CLRF   27
1816:  CLRF   28
1818:  CLRF   29
181A:  CLRF   2A
181C:  CLRF   2B
181E:  CLRF   2C
1820:  CLRF   2D
1822:  BCF    2E.0
1824:  BCF    2E.1
1826:  BCF    2E.2
1828:  BCF    2E.3
182A:  BCF    2E.4
182C:  BCF    2E.5
182E:  BCF    2E.6
1830:  BCF    2E.7
1832:  BCF    2F.0
1834:  BCF    2F.1
1836:  BCF    2F.2
1838:  BCF    2F.3
183A:  BCF    2F.4
183C:  BCF    2F.5
183E:  BCF    2F.6
1840:  BCF    2F.7
1842:  BCF    30.0
1844:  CLRF   31
1846:  MOVLW  4E
1848:  MOVWF  35
184A:  CLRF   3E
184C:  CLRF   42
184E:  CLRF   41
1850:  CLRF   40
1852:  CLRF   3F
1854:  BCF    30.2
1856:  BCF    30.3
1858:  BCF    30.4
185A:  BCF    30.5
185C:  BCF    30.6
185E:  BCF    30.7
1860:  CLRF   44
1862:  CLRF   43
1864:  CLRF   46
1866:  CLRF   45
1868:  CLRF   47
186A:  MOVF   FC1,W
186C:  ANDLW  C0
186E:  IORLW  0F
1870:  MOVWF  FC1
1872:  MOVLW  07
1874:  MOVWF  FB4
1876:  MOVLW  3E
1878:  MOVWF  32
187A:  MOVLW  20
187C:  MOVWF  33
187E:  MOVLW  5E
1880:  MOVWF  34
1882:  CLRF   36
1884:  CLRF   37
1886:  CLRF   38
1888:  CLRF   39
188A:  CLRF   3A
188C:  CLRF   3B
188E:  CLRF   3C
1890:  CLRF   3D
....................    setup_adc_ports(AN0_TO_AN3); 
1892:  MOVF   FC1,W
1894:  ANDLW  C0
1896:  IORLW  0B
1898:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
189A:  BCF    FC0.0
189C:  BSF    FC0.1
189E:  BCF    FC0.2
18A0:  BSF    FC0.7
18A2:  BSF    FC2.0
....................    output_d(0);  
18A4:  CLRF   F95
18A6:  CLRF   F8C
....................    ModoSleep=1; 
18A8:  BSF    30.1
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
18AA:  MOVLW  85
18AC:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
18AE:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
18B0:  MOVLW  00
18B2:  IORLW  05
18B4:  MOVWF  FCA
18B6:  MOVLW  FF
18B8:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
18BA:  BCF    F94.2
18BC:  BCF    F8B.2
18BE:  BCF    F96.6
18C0:  MOVLW  0C
18C2:  MOVWF  FBD
18C4:  CLRF   FB7
18C6:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
18C8:  MOVLW  C0
18CA:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
18CC:  CLRF   FBE
....................    lcd_init(); 
18CE:  CALL   0922
....................    printf(lcd_putc,"\f"); 
18D2:  MOVLW  0C
18D4:  MOVWF  56
18D6:  CALL   0A2C
....................     
....................    if(read_eeprom(80)!=0x27) 
18DA:  MOVFF  FF2,49
18DE:  BCF    FF2.7
18E0:  MOVLW  50
18E2:  MOVWF  FA9
18E4:  BCF    FA6.6
18E6:  BCF    FA6.7
18E8:  BSF    FA6.0
18EA:  MOVF   FA8,W
18EC:  BTFSC  49.7
18EE:  BSF    FF2.7
18F0:  SUBLW  27
18F2:  BZ    18F8
....................    set_default(); 
18F4:  CALL   0A8A
....................     
....................        
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
18F8:  MOVFF  FF2,49
18FC:  BCF    FF2.7
18FE:  CLRF   FA9
1900:  BCF    FA6.6
1902:  BCF    FA6.7
1904:  BSF    FA6.0
1906:  MOVF   FA8,W
1908:  BTFSC  49.7
190A:  BSF    FF2.7
190C:  MOVWF  3A
190E:  MOVLW  14
1910:  MOVWF  5C
1912:  CALL   0896
1916:  MOVFF  FF2,49
191A:  BCF    FF2.7
191C:  MOVLW  01
191E:  MOVWF  FA9
1920:  BCF    FA6.6
1922:  BCF    FA6.7
1924:  BSF    FA6.0
1926:  MOVF   FA8,W
1928:  BTFSC  49.7
192A:  BSF    FF2.7
192C:  MOVWF  3B
192E:  MOVLW  14
1930:  MOVWF  5C
1932:  CALL   0896
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1936:  MOVFF  FF2,49
193A:  BCF    FF2.7
193C:  MOVLW  02
193E:  MOVWF  FA9
1940:  BCF    FA6.6
1942:  BCF    FA6.7
1944:  BSF    FA6.0
1946:  MOVF   FA8,W
1948:  BTFSC  49.7
194A:  BSF    FF2.7
194C:  MOVWF  3C
194E:  MOVLW  14
1950:  MOVWF  5C
1952:  CALL   0896
1956:  MOVFF  FF2,49
195A:  BCF    FF2.7
195C:  MOVLW  03
195E:  MOVWF  FA9
1960:  BCF    FA6.6
1962:  BCF    FA6.7
1964:  BSF    FA6.0
1966:  MOVF   FA8,W
1968:  BTFSC  49.7
196A:  BSF    FF2.7
196C:  MOVWF  3D
196E:  MOVLW  14
1970:  MOVWF  5C
1972:  CALL   0896
....................    estadoalarma=read_eeprom(5); 
1976:  MOVFF  FF2,49
197A:  BCF    FF2.7
197C:  MOVLW  05
197E:  MOVWF  FA9
1980:  BCF    FA6.6
1982:  BCF    FA6.7
1984:  BSF    FA6.0
1986:  MOVF   FA8,W
1988:  BTFSC  49.7
198A:  BSF    FF2.7
198C:  MOVWF  01
198E:  BCF    2E.2
1990:  BTFSC  01.0
1992:  BSF    2E.2
....................    delay_ms(20); 
1994:  MOVLW  14
1996:  MOVWF  5C
1998:  CALL   0896
....................     
....................    /* Manual=read_eeprom(10); 
....................     
....................    delay_ms(20); 
....................    Automa=read_eeprom(11); 
....................    delay_ms(20); 
....................    Semi=read_eeprom(12); 
....................    delay_ms(20); 
....................    ValorSemi=read_eeprom(13); 
....................    delay_ms(20); 
....................    tmp=ValorSemi; */ 
....................  
....................    purga_minutos=read_eeprom(20); 
199C:  MOVFF  FF2,49
19A0:  BCF    FF2.7
19A2:  MOVLW  14
19A4:  MOVWF  FA9
19A6:  BCF    FA6.6
19A8:  BCF    FA6.7
19AA:  BSF    FA6.0
19AC:  MOVF   FA8,W
19AE:  BTFSC  49.7
19B0:  BSF    FF2.7
19B2:  MOVWF  21
....................    delay_ms(20); 
19B4:  MOVLW  14
19B6:  MOVWF  5C
19B8:  CALL   0896
....................    purga_segundos=read_eeprom(21); 
19BC:  MOVFF  FF2,49
19C0:  BCF    FF2.7
19C2:  MOVLW  15
19C4:  MOVWF  FA9
19C6:  BCF    FA6.6
19C8:  BCF    FA6.7
19CA:  BSF    FA6.0
19CC:  MOVF   FA8,W
19CE:  BTFSC  49.7
19D0:  BSF    FF2.7
19D2:  MOVWF  28
....................    delay_ms(20); 
19D4:  MOVLW  14
19D6:  MOVWF  5C
19D8:  CALL   0896
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
19DC:  MOVFF  21,22
19E0:  MOVFF  28,29
....................    ppurga_minutos=read_eeprom(22); 
19E4:  MOVFF  FF2,49
19E8:  BCF    FF2.7
19EA:  MOVLW  16
19EC:  MOVWF  FA9
19EE:  BCF    FA6.6
19F0:  BCF    FA6.7
19F2:  BSF    FA6.0
19F4:  MOVF   FA8,W
19F6:  BTFSC  49.7
19F8:  BSF    FF2.7
19FA:  MOVWF  2C
....................    delay_ms(20); 
19FC:  MOVLW  14
19FE:  MOVWF  5C
1A00:  CALL   0896
....................    ppurga_segundos=read_eeprom(23); 
1A04:  MOVFF  FF2,49
1A08:  BCF    FF2.7
1A0A:  MOVLW  17
1A0C:  MOVWF  FA9
1A0E:  BCF    FA6.6
1A10:  BCF    FA6.7
1A12:  BSF    FA6.0
1A14:  MOVF   FA8,W
1A16:  BTFSC  49.7
1A18:  BSF    FF2.7
1A1A:  MOVWF  2A
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
1A1C:  MOVFF  2C,2D
1A20:  MOVFF  2A,2B
....................           
....................    setpoint=read_eeprom(40);                                                                                                                                                                                                                                                
1A24:  MOVFF  FF2,49
1A28:  BCF    FF2.7
1A2A:  MOVLW  28
1A2C:  MOVWF  FA9
1A2E:  BCF    FA6.6
1A30:  BCF    FA6.7
1A32:  BSF    FA6.0
1A34:  MOVF   FA8,W
1A36:  BTFSC  49.7
1A38:  BSF    FF2.7
1A3A:  CLRF   4F
1A3C:  MOVWF  4E
1A3E:  CALL   0D66
1A42:  MOVFF  03,42
1A46:  MOVFF  02,41
1A4A:  MOVFF  01,40
1A4E:  MOVFF  00,3F
....................    delay_ms(20); 
1A52:  MOVLW  14
1A54:  MOVWF  5C
1A56:  CALL   0896
....................    segundos=read_eeprom(70); 
1A5A:  MOVFF  FF2,49
1A5E:  BCF    FF2.7
1A60:  MOVLW  46
1A62:  MOVWF  FA9
1A64:  BCF    FA6.6
1A66:  BCF    FA6.7
1A68:  BSF    FA6.0
1A6A:  MOVF   FA8,W
1A6C:  BTFSC  49.7
1A6E:  BSF    FF2.7
1A70:  MOVWF  24
....................    delay_ms(20); 
1A72:  MOVLW  14
1A74:  MOVWF  5C
1A76:  CALL   0896
....................    minutos=read_eeprom(71); 
1A7A:  MOVFF  FF2,49
1A7E:  BCF    FF2.7
1A80:  MOVLW  47
1A82:  MOVWF  FA9
1A84:  BCF    FA6.6
1A86:  BCF    FA6.7
1A88:  BSF    FA6.0
1A8A:  MOVF   FA8,W
1A8C:  BTFSC  49.7
1A8E:  BSF    FF2.7
1A90:  MOVWF  25
....................    delay_ms(20); 
1A92:  MOVLW  14
1A94:  MOVWF  5C
1A96:  CALL   0896
....................    horas=read_eeprom(72); 
1A9A:  MOVFF  FF2,49
1A9E:  BCF    FF2.7
1AA0:  MOVLW  48
1AA2:  MOVWF  FA9
1AA4:  BCF    FA6.6
1AA6:  BCF    FA6.7
1AA8:  BSF    FA6.0
1AAA:  MOVF   FA8,W
1AAC:  BTFSC  49.7
1AAE:  BSF    FF2.7
1AB0:  MOVWF  26
....................    delay_ms(20); 
1AB2:  MOVLW  14
1AB4:  MOVWF  5C
1AB6:  CALL   0896
....................    flag_filtro=read_eeprom(73); 
1ABA:  MOVFF  FF2,49
1ABE:  BCF    FF2.7
1AC0:  MOVLW  49
1AC2:  MOVWF  FA9
1AC4:  BCF    FA6.6
1AC6:  BCF    FA6.7
1AC8:  BSF    FA6.0
1ACA:  MOVF   FA8,W
1ACC:  BTFSC  49.7
1ACE:  BSF    FF2.7
1AD0:  MOVWF  01
1AD2:  BCF    2F.1
1AD4:  BTFSC  01.0
1AD6:  BSF    2F.1
....................    Menu=200; 
1AD8:  MOVLW  C8
1ADA:  MOVWF  16
....................    
....................    while(true){ 
....................     
....................    if(ver_ddram==1)                // Inicio de funcion que verifica si entraron ruidos a la pantalla .... 
1ADC:  BTFSS  30.7
1ADE:  BRA    1AF4
....................        { 
....................         ver_ddram=0; 
1AE0:  BCF    30.7
....................         if(lee_ddram()!=ult_ddram) 
1AE2:  GOTO   0D9C
1AE6:  MOVF   47,W
1AE8:  SUBWF  01,W
1AEA:  BZ    1AF4
....................          { 
....................           lcd_init(); 
1AEC:  CALL   0922
....................           cambio=1; 
1AF0:  MOVLW  01
1AF2:  MOVWF  3E
....................          } 
....................        }                          // Fin de funcion que verifica si entraron ruidos a la pantalla .... 
....................  
....................    while(Menu==200) 
....................    { 
1AF4:  MOVF   16,W
1AF6:  SUBLW  C8
1AF8:  BNZ   1BB2
....................      
....................       if(inicio==0) 
1AFA:  BTFSC  30.2
1AFC:  BRA    1BAC
....................       { 
....................       delay_ms(500); 
1AFE:  MOVLW  02
1B00:  MOVWF  49
1B02:  MOVLW  FA
1B04:  MOVWF  5C
1B06:  CALL   0896
1B0A:  DECFSZ 49,F
1B0C:  BRA    1B02
....................         if(RIGHT) 
1B0E:  BSF    F96.1
1B10:  BTFSS  F84.1
1B12:  BRA    1BAC
....................          { 
....................             lcd_init(); 
1B14:  CALL   0922
....................             intensidadpantalla(contraste); 
1B18:  MOVFF  1F,49
1B1C:  CALL   0DAE
....................             lcd_gotoxy(1,1); 
1B20:  MOVLW  01
1B22:  MOVWF  57
1B24:  MOVWF  58
1B26:  CALL   097A
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
1B2A:  MOVLW  06
1B2C:  MOVWF  FF6
1B2E:  MOVLW  02
1B30:  MOVWF  FF7
1B32:  CALL   0DBE
....................             lcd_gotoxy(1,2); 
1B36:  MOVLW  01
1B38:  MOVWF  57
1B3A:  MOVLW  02
1B3C:  MOVWF  58
1B3E:  CALL   097A
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1B42:  MOVLW  1C
1B44:  MOVWF  FF6
1B46:  MOVLW  02
1B48:  MOVWF  FF7
1B4A:  CALL   0DBE
....................             lcd_gotoxy(1,3); 
1B4E:  MOVLW  01
1B50:  MOVWF  57
1B52:  MOVLW  03
1B54:  MOVWF  58
1B56:  CALL   097A
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
1B5A:  MOVLW  32
1B5C:  MOVWF  FF6
1B5E:  MOVLW  02
1B60:  MOVWF  FF7
1B62:  CALL   0DBE
....................             lcd_gotoxy(1,4); 
1B66:  MOVLW  01
1B68:  MOVWF  57
1B6A:  MOVLW  04
1B6C:  MOVWF  58
1B6E:  CALL   097A
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1B72:  MOVLW  48
1B74:  MOVWF  FF6
1B76:  MOVLW  02
1B78:  MOVWF  FF7
1B7A:  CALL   0DBE
....................             delay_ms(2000); 
1B7E:  MOVLW  08
1B80:  MOVWF  49
1B82:  MOVLW  FA
1B84:  MOVWF  5C
1B86:  CALL   0896
1B8A:  DECFSZ 49,F
1B8C:  BRA    1B82
....................             printf(lcd_putc,"\f"); 
1B8E:  MOVLW  0C
1B90:  MOVWF  56
1B92:  CALL   0A2C
....................             inicio=1;               // Condicion Inicial de (inicio) 
1B96:  BSF    30.2
....................             Menu=0;                 // Condicion Inicial de Menu 
1B98:  CLRF   16
....................             ModoSleep=0; 
1B9A:  BCF    30.1
....................             delay_ms(500); 
1B9C:  MOVLW  02
1B9E:  MOVWF  49
1BA0:  MOVLW  FA
1BA2:  MOVWF  5C
1BA4:  CALL   0896
1BA8:  DECFSZ 49,F
1BAA:  BRA    1BA0
....................        } 
....................       } 
....................       Cambio=1; 
1BAC:  MOVLW  01
1BAE:  MOVWF  3E
....................   
....................    } 
1BB0:  BRA    1AF4
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1BB2:  MOVF   16,F
1BB4:  BTFSS  FD8.2
1BB6:  BRA    1EEA
....................    flag_latencia=1;set_pwm1_duty(0); 
1BB8:  BSF    2E.7
1BBA:  CLRF   FBE
....................       if(Latencia==1)  // Define que se acabo el tiempo de espera y borra la pantalla y hace un reset por firmware 
1BBC:  BTFSS  2F.0
1BBE:  BRA    1BCA
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1BC0:  MOVLW  0C
1BC2:  MOVWF  56
1BC4:  CALL   0A2C
1BC8:  RESET
....................          } 
....................     
....................    
....................    if(Cambio == 1) 
1BCA:  DECFSZ 3E,W
1BCC:  BRA    1C6E
....................    { 
....................       lcd_gotoxy(1,1); 
1BCE:  MOVLW  01
1BD0:  MOVWF  57
1BD2:  MOVWF  58
1BD4:  CALL   097A
....................       printf(lcd_putc,"     Ingrese        "); 
1BD8:  MOVLW  5E
1BDA:  MOVWF  FF6
1BDC:  MOVLW  02
1BDE:  MOVWF  FF7
1BE0:  CALL   0DBE
....................       lcd_gotoxy(1,2); 
1BE4:  MOVLW  01
1BE6:  MOVWF  57
1BE8:  MOVLW  02
1BEA:  MOVWF  58
1BEC:  CALL   097A
....................       printf(lcd_putc,"    Contraseña      "); 
1BF0:  MOVLW  74
1BF2:  MOVWF  FF6
1BF4:  MOVLW  02
1BF6:  MOVWF  FF7
1BF8:  CALL   0DBE
....................       lcd_gotoxy(1,3); 
1BFC:  MOVLW  01
1BFE:  MOVWF  57
1C00:  MOVLW  03
1C02:  MOVWF  58
1C04:  CALL   097A
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1C08:  MOVLW  8A
1C0A:  MOVWF  FF6
1C0C:  MOVLW  02
1C0E:  MOVWF  FF7
1C10:  MOVLW  0A
1C12:  MOVWF  49
1C14:  CALL   0DDE
1C18:  MOVFF  36,49
1C1C:  MOVLW  1F
1C1E:  MOVWF  4A
1C20:  CALL   0E24
1C24:  MOVFF  37,49
1C28:  MOVLW  1F
1C2A:  MOVWF  4A
1C2C:  CALL   0E24
1C30:  MOVFF  38,49
1C34:  MOVLW  1F
1C36:  MOVWF  4A
1C38:  CALL   0E24
1C3C:  MOVFF  39,49
1C40:  MOVLW  1F
1C42:  MOVWF  4A
1C44:  CALL   0E24
1C48:  MOVLW  20
1C4A:  MOVWF  56
1C4C:  CALL   0A2C
1C50:  MOVLW  20
1C52:  MOVWF  56
1C54:  CALL   0A2C
....................       lcd_gotoxy(unidad,4); // Para mostrar cursor. 
1C58:  MOVFF  19,57
1C5C:  MOVLW  04
1C5E:  MOVWF  58
1C60:  CALL   097A
....................      lcd_putc(t[2]); 
1C64:  MOVFF  34,56
1C68:  CALL   0A2C
....................      /* printf(lcd_putc,"%3u",ult_ddram); 
....................      delay_ms(10); 
....................      printf(lcd_putc,"%3u",lee_ddram()); */ 
....................      Cambio=0; 
1C6C:  CLRF   3E
....................     } 
....................    lee_pulsad(); 
1C6E:  CALL   0EEC
....................     
....................       Switch(tecla) 
....................       { 
1C72:  MOVF   35,W
1C74:  XORLW  55
1C76:  BZ    1C86
1C78:  XORLW  11
1C7A:  BZ    1C9E
1C7C:  XORLW  16
1C7E:  BZ    1CB6
1C80:  XORLW  1E
1C82:  BZ    1CCE
1C84:  BRA    1CE6
....................     
....................        Case 'U':       //Si se oprimio el pulsador de subir 
....................        {clave[unidad-11]++;t_latencia=0;} 
1C86:  MOVLW  0B
1C88:  SUBWF  19,W
1C8A:  CLRF   03
1C8C:  ADDLW  36
1C8E:  MOVWF  FE9
1C90:  MOVLW  00
1C92:  ADDWFC 03,W
1C94:  MOVWF  FEA
1C96:  INCF   FEF,F
1C98:  CLRF   46
1C9A:  CLRF   45
....................        break; 
1C9C:  BRA    1CE6
....................         
....................        Case 'D':       //Si se oprimio el pulsador de bajar 
....................        {clave[unidad-11]--;t_latencia=0;} 
1C9E:  MOVLW  0B
1CA0:  SUBWF  19,W
1CA2:  CLRF   03
1CA4:  ADDLW  36
1CA6:  MOVWF  FE9
1CA8:  MOVLW  00
1CAA:  ADDWFC 03,W
1CAC:  MOVWF  FEA
1CAE:  DECF   FEF,F
1CB0:  CLRF   46
1CB2:  CLRF   45
....................        break; 
1CB4:  BRA    1CE6
....................         
....................        Case 'R':       //Si se oprimio el pulsador de derecha 
....................        {unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;} 
1CB6:  INCF   19,F
1CB8:  MOVLW  1E
1CBA:  MOVWF  5C
1CBC:  CALL   0896
1CC0:  MOVLW  0C
1CC2:  MOVWF  56
1CC4:  CALL   0A2C
1CC8:  CLRF   46
1CCA:  CLRF   45
....................        break; 
1CCC:  BRA    1CE6
....................         
....................        Case 'L':       //Si se oprimio el pulsador de izquierda 
....................        {unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;} 
1CCE:  DECF   19,F
1CD0:  MOVLW  1E
1CD2:  MOVWF  5C
1CD4:  CALL   0896
1CD8:  MOVLW  0C
1CDA:  MOVWF  56
1CDC:  CALL   0A2C
1CE0:  CLRF   46
1CE2:  CLRF   45
....................        break; 
1CE4:  BRA    1CE6
....................            
....................       }       
....................              
....................        if(Cambio==1) 
1CE6:  DECFSZ 3E,W
1CE8:  BRA    1EE8
....................        { 
....................         if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1CEA:  MOVLW  0B
1CEC:  SUBWF  19,W
1CEE:  CLRF   03
1CF0:  ADDLW  36
1CF2:  MOVWF  FE9
1CF4:  MOVLW  00
1CF6:  ADDWFC 03,W
1CF8:  MOVWF  FEA
1CFA:  BTFSC  FEF.7
1CFC:  BRA    1D00
1CFE:  BRA    1D14
....................         {clave[unidad-11]=9;} 
1D00:  MOVLW  0B
1D02:  SUBWF  19,W
1D04:  CLRF   03
1D06:  ADDLW  36
1D08:  MOVWF  FE9
1D0A:  MOVLW  00
1D0C:  ADDWFC 03,W
1D0E:  MOVWF  FEA
1D10:  MOVLW  09
1D12:  MOVWF  FEF
....................         if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1D14:  MOVLW  0B
1D16:  SUBWF  19,W
1D18:  CLRF   03
1D1A:  ADDLW  36
1D1C:  MOVWF  FE9
1D1E:  MOVLW  00
1D20:  ADDWFC 03,W
1D22:  MOVWF  FEA
1D24:  BTFSC  FEF.7
1D26:  BRA    1D40
1D28:  MOVF   FEF,W
1D2A:  SUBLW  09
1D2C:  BC    1D40
....................         {clave[unidad-11]=0;} 
1D2E:  MOVLW  0B
1D30:  SUBWF  19,W
1D32:  CLRF   03
1D34:  ADDLW  36
1D36:  MOVWF  FE9
1D38:  MOVLW  00
1D3A:  ADDWFC 03,W
1D3C:  MOVWF  FEA
1D3E:  CLRF   FEF
....................         if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1D40:  BTFSC  19.7
1D42:  BRA    1D4A
1D44:  MOVF   19,W
1D46:  SUBLW  0A
1D48:  BNC   1D4E
....................         {unidad=11;} 
1D4A:  MOVLW  0B
1D4C:  MOVWF  19
....................         lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1D4E:  MOVFF  19,57
1D52:  MOVLW  04
1D54:  MOVWF  58
1D56:  CALL   097A
....................         lcd_putc(t[2]); 
1D5A:  MOVFF  34,56
1D5E:  CALL   0A2C
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1D62:  BTFSC  19.7
1D64:  BRA    1EA8
1D66:  MOVF   19,W
1D68:  SUBLW  0E
1D6A:  BTFSC  FD8.0
1D6C:  BRA    1EA8
....................         { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1D6E:  MOVF   36,W
1D70:  SUBLW  03
1D72:  BNZ   1D8C
1D74:  MOVF   37,W
1D76:  SUBLW  08
1D78:  BNZ   1D8C
1D7A:  MOVF   38,W
1D7C:  SUBLW  09
1D7E:  BNZ   1D8C
1D80:  MOVF   39,W
1D82:  SUBLW  02
1D84:  BNZ   1D8C
....................             {set_default(); 
1D86:  CALL   0A8A
....................              reset_cpu(); 
1D8A:  RESET
....................             } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1D8C:  MOVF   3A,W
1D8E:  SUBWF  36,W
1D90:  BNZ   1E36
1D92:  MOVF   3B,W
1D94:  SUBWF  37,W
1D96:  BNZ   1E36
1D98:  MOVF   3C,W
1D9A:  SUBWF  38,W
1D9C:  BNZ   1E36
1D9E:  MOVF   3D,W
1DA0:  SUBWF  39,W
1DA2:  BNZ   1E36
....................             {lcd_gotoxy(1,1); 
1DA4:  MOVLW  01
1DA6:  MOVWF  57
1DA8:  MOVWF  58
1DAA:  CALL   097A
....................             printf(lcd_putc,"                   "); 
1DAE:  MOVLW  A0
1DB0:  MOVWF  FF6
1DB2:  MOVLW  02
1DB4:  MOVWF  FF7
1DB6:  CALL   0DBE
....................             lcd_gotoxy(1,2); 
1DBA:  MOVLW  01
1DBC:  MOVWF  57
1DBE:  MOVLW  02
1DC0:  MOVWF  58
1DC2:  CALL   097A
....................             printf(lcd_putc,"     Contraseña    "); 
1DC6:  MOVLW  B4
1DC8:  MOVWF  FF6
1DCA:  MOVLW  02
1DCC:  MOVWF  FF7
1DCE:  CALL   0DBE
....................             lcd_gotoxy(1,3); 
1DD2:  MOVLW  01
1DD4:  MOVWF  57
1DD6:  MOVLW  03
1DD8:  MOVWF  58
1DDA:  CALL   097A
....................             printf(lcd_putc,"      Correcta     "); 
1DDE:  MOVLW  C8
1DE0:  MOVWF  FF6
1DE2:  MOVLW  02
1DE4:  MOVWF  FF7
1DE6:  CALL   0DBE
....................             lcd_gotoxy(1,4); 
1DEA:  MOVLW  01
1DEC:  MOVWF  57
1DEE:  MOVLW  04
1DF0:  MOVWF  58
1DF2:  CALL   097A
....................             printf(lcd_putc,"                   "); 
1DF6:  MOVLW  DC
1DF8:  MOVWF  FF6
1DFA:  MOVLW  02
1DFC:  MOVWF  FF7
1DFE:  CALL   0DBE
....................             delay_ms(500);Menu=50;Cambio=1;unidad=11;printf(lcd_putc,"\f");flag_latencia=0;Latencia=0;tiempo_purga=1;Lectura=1; 
1E02:  MOVLW  02
1E04:  MOVWF  49
1E06:  MOVLW  FA
1E08:  MOVWF  5C
1E0A:  CALL   0896
1E0E:  DECFSZ 49,F
1E10:  BRA    1E06
1E12:  MOVLW  32
1E14:  MOVWF  16
1E16:  MOVLW  01
1E18:  MOVWF  3E
1E1A:  MOVLW  0B
1E1C:  MOVWF  19
1E1E:  MOVLW  0C
1E20:  MOVWF  56
1E22:  CALL   0A2C
1E26:  BCF    2E.7
1E28:  BCF    2F.0
1E2A:  BSF    30.5
1E2C:  BSF    30.3
....................             t_latencia=0;flag_iniciodamper=1;} 
1E2E:  CLRF   46
1E30:  CLRF   45
1E32:  BSF    30.4
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1E34:  BRA    1EA8
....................          {lcd_gotoxy(1,1); 
1E36:  MOVLW  01
1E38:  MOVWF  57
1E3A:  MOVWF  58
1E3C:  CALL   097A
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1E40:  MOVLW  01
1E42:  MOVWF  57
1E44:  MOVLW  02
1E46:  MOVWF  58
1E48:  CALL   097A
....................             printf(lcd_putc,"     Contraseña    "); 
1E4C:  MOVLW  F0
1E4E:  MOVWF  FF6
1E50:  MOVLW  02
1E52:  MOVWF  FF7
1E54:  CALL   0DBE
....................             lcd_gotoxy(1,3); 
1E58:  MOVLW  01
1E5A:  MOVWF  57
1E5C:  MOVLW  03
1E5E:  MOVWF  58
1E60:  CALL   097A
....................             printf(lcd_putc,"     Incorrecta    "); 
1E64:  MOVLW  04
1E66:  MOVWF  FF6
1E68:  MOVLW  03
1E6A:  MOVWF  FF7
1E6C:  CALL   0DBE
....................             lcd_gotoxy(1,4); 
1E70:  MOVLW  01
1E72:  MOVWF  57
1E74:  MOVLW  04
1E76:  MOVWF  58
1E78:  CALL   097A
....................             printf(lcd_putc,"                   ");  
1E7C:  MOVLW  18
1E7E:  MOVWF  FF6
1E80:  MOVLW  03
1E82:  MOVWF  FF7
1E84:  CALL   0DBE
....................             Cambio=1;                              //Se activa el flag de pedir clave nuevamente, porque fue errada 
1E88:  MOVLW  01
1E8A:  MOVWF  3E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
1E8C:  MOVLW  02
1E8E:  MOVWF  49
1E90:  MOVLW  FA
1E92:  MOVWF  5C
1E94:  CALL   0896
1E98:  DECFSZ 49,F
1E9A:  BRA    1E90
1E9C:  MOVLW  0B
1E9E:  MOVWF  19
1EA0:  MOVLW  0C
1EA2:  MOVWF  56
1EA4:  CALL   0A2C
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1EA8:  BTFSC  19.7
1EAA:  BRA    1EE8
1EAC:  MOVF   19,W
1EAE:  SUBLW  0B
1EB0:  BC    1EE8
1EB2:  BTFSC  19.7
1EB4:  BRA    1EBC
1EB6:  MOVF   19,W
1EB8:  SUBLW  0D
1EBA:  BNC   1EE8
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1EBC:  MOVLW  01
1EBE:  SUBWF  19,W
1EC0:  MOVWF  49
1EC2:  MOVWF  57
1EC4:  MOVLW  04
1EC6:  MOVWF  58
1EC8:  CALL   097A
....................             lcd_putc(t[1]); 
1ECC:  MOVFF  33,56
1ED0:  CALL   0A2C
....................             lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1ED4:  MOVFF  19,57
1ED8:  MOVLW  04
1EDA:  MOVWF  58
1EDC:  CALL   097A
....................             lcd_putc(t[2]); 
1EE0:  MOVFF  34,56
1EE4:  CALL   0A2C
....................    
....................           } 
....................         
....................       } 
....................    } 
1EE8:  BRA    1BB2
.................... //----------------Fin-Menu0---------------------------------------------------------------     
....................  
....................   
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1)      // Menu de seleccion de lo que desea encender 
1EEA:  DECFSZ 16,W
1EEC:  BRA    20F4
....................     { 
....................        
....................     
....................    lee_pulsad(); 
1EEE:  CALL   0EEC
....................     
....................       if(tecla=='U')       //Si oprime hacia arriba 
1EF2:  MOVF   35,W
1EF4:  SUBLW  55
1EF6:  BNZ   1F0A
....................       {Flecha2--;Flecha--;Flecha1=Flecha+1;delay_ms(30);} 
1EF8:  DECF   1C,F
1EFA:  DECF   1A,F
1EFC:  MOVLW  01
1EFE:  ADDWF  1A,W
1F00:  MOVWF  1B
1F02:  MOVLW  1E
1F04:  MOVWF  5C
1F06:  CALL   0896
....................       if(tecla=='D')       //Si oprime hacia abajo 
1F0A:  MOVF   35,W
1F0C:  SUBLW  44
1F0E:  BNZ   1F22
....................       {Flecha2++;Flecha++;Flecha1=Flecha-1;delay_ms(30);} 
1F10:  INCF   1C,F
1F12:  INCF   1A,F
1F14:  MOVLW  01
1F16:  SUBWF  1A,W
1F18:  MOVWF  1B
1F1A:  MOVLW  1E
1F1C:  MOVWF  5C
1F1E:  CALL   0896
....................   
....................          
....................         if(Flecha2>nMenuH) 
1F22:  MOVF   1E,W
1F24:  XORLW  80
1F26:  MOVWF  00
1F28:  MOVF   1C,W
1F2A:  XORLW  80
1F2C:  SUBWF  00,W
1F2E:  BC    1F40
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1F30:  INCF   31,F
1F32:  MOVFF  1C,1E
1F36:  MOVLW  02
1F38:  SUBWF  1E,W
1F3A:  MOVWF  1D
1F3C:  MOVLW  04
1F3E:  MOVWF  1A
....................          
....................         if(Flecha2<nMenuL) 
1F40:  MOVF   1C,W
1F42:  XORLW  80
1F44:  MOVWF  00
1F46:  MOVF   1D,W
1F48:  XORLW  80
1F4A:  SUBWF  00,W
1F4C:  BC    1F5E
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1F4E:  DECF   31,F
1F50:  MOVFF  1C,1D
1F54:  MOVLW  02
1F56:  ADDWF  1D,W
1F58:  MOVWF  1E
1F5A:  MOVLW  02
1F5C:  MOVWF  1A
....................          
....................         if(Flecha2>n_opcionH) 
1F5E:  MOVF   17,W
1F60:  XORLW  80
1F62:  MOVWF  00
1F64:  MOVF   1C,W
1F66:  XORLW  80
1F68:  SUBWF  00,W
1F6A:  BC    1F7E
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1F6C:  MOVFF  18,1C
1F70:  MOVLW  02
1F72:  MOVWF  1A
1F74:  CLRF   31
1F76:  MOVFF  1C,1D
1F7A:  ADDWF  1D,W
1F7C:  MOVWF  1E
....................          
....................         if(Flecha2<n_opcionL) 
1F7E:  MOVF   1C,W
1F80:  XORLW  80
1F82:  MOVWF  00
1F84:  MOVF   18,W
1F86:  XORLW  80
1F88:  SUBWF  00,W
1F8A:  BC    1FA2
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
1F8C:  MOVFF  17,1C
1F90:  MOVLW  04
1F92:  MOVWF  1A
1F94:  SUBWF  17,W
1F96:  MOVWF  31
1F98:  MOVFF  1C,1E
1F9C:  MOVLW  02
1F9E:  SUBWF  1E,W
1FA0:  MOVWF  1D
....................          
....................         if(paso<0) 
1FA2:  BTFSC  31.7
1FA4:  BRA    1FA8
1FA6:  BRA    1FAA
....................         paso=0; 
1FA8:  CLRF   31
....................          
....................         if(Cambio==1) 
1FAA:  DECFSZ 3E,W
1FAC:  BRA    2094
....................         { 
....................         lcd_gotoxy(1,1); 
1FAE:  MOVLW  01
1FB0:  MOVWF  57
1FB2:  MOVWF  58
1FB4:  CALL   097A
....................         printf(lcd_putc,"---MENU PRINCIPAL---"); 
1FB8:  MOVLW  2C
1FBA:  MOVWF  FF6
1FBC:  MOVLW  03
1FBE:  MOVWF  FF7
1FC0:  CALL   0DBE
....................          
....................         mensajes(1+paso,2); 
1FC4:  MOVLW  01
1FC6:  ADDWF  31,W
1FC8:  MOVWF  49
1FCA:  MOVWF  4A
1FCC:  MOVLW  02
1FCE:  MOVWF  4B
1FD0:  CALL   0FAA
....................         mensajes(2+paso,3); 
1FD4:  MOVLW  02
1FD6:  ADDWF  31,W
1FD8:  MOVWF  49
1FDA:  MOVWF  4A
1FDC:  MOVLW  03
1FDE:  MOVWF  4B
1FE0:  CALL   0FAA
....................         mensajes(3+paso,4); 
1FE4:  MOVLW  03
1FE6:  ADDWF  31,W
1FE8:  MOVWF  49
1FEA:  MOVWF  4A
1FEC:  MOVLW  04
1FEE:  MOVWF  4B
1FF0:  CALL   0FAA
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1FF4:  MOVLW  01
1FF6:  MOVWF  57
1FF8:  MOVFF  1A,58
1FFC:  CALL   097A
....................         lcd_putc(t[0]); 
2000:  MOVFF  32,56
2004:  CALL   0A2C
....................  
....................         if(Flecha==2) 
2008:  MOVF   1A,W
200A:  SUBLW  02
200C:  BNZ   2036
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
200E:  MOVLW  01
2010:  MOVWF  57
2012:  MOVLW  04
2014:  MOVWF  58
2016:  CALL   097A
....................             lcd_putc(t[1]); 
201A:  MOVFF  33,56
201E:  CALL   0A2C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2022:  MOVLW  01
2024:  MOVWF  57
2026:  MOVLW  03
2028:  MOVWF  58
202A:  CALL   097A
....................             lcd_putc(t[1]); 
202E:  MOVFF  33,56
2032:  CALL   0A2C
....................           } 
....................          
....................         if(Flecha==4) 
2036:  MOVF   1A,W
2038:  SUBLW  04
203A:  BNZ   2064
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
203C:  MOVLW  01
203E:  MOVWF  57
2040:  MOVLW  02
2042:  MOVWF  58
2044:  CALL   097A
....................             lcd_putc(t[1]); 
2048:  MOVFF  33,56
204C:  CALL   0A2C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2050:  MOVLW  01
2052:  MOVWF  57
2054:  MOVLW  03
2056:  MOVWF  58
2058:  CALL   097A
....................             lcd_putc(t[1]); 
205C:  MOVFF  33,56
2060:  CALL   0A2C
....................           } 
....................          
....................         if(Flecha==3) 
2064:  MOVF   1A,W
2066:  SUBLW  03
2068:  BNZ   2092
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
206A:  MOVLW  01
206C:  MOVWF  57
206E:  MOVLW  04
2070:  MOVWF  58
2072:  CALL   097A
....................             lcd_putc(t[1]); 
2076:  MOVFF  33,56
207A:  CALL   0A2C
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
207E:  MOVLW  01
2080:  MOVWF  57
2082:  MOVLW  02
2084:  MOVWF  58
2086:  CALL   097A
....................             lcd_putc(t[1]); 
208A:  MOVFF  33,56
208E:  CALL   0A2C
....................           } 
....................           Cambio=0; 
2092:  CLRF   3E
....................         } 
....................  
....................         if(tecla=='R')        // Si oprime derecha 
2094:  MOVF   35,W
2096:  SUBLW  52
2098:  BNZ   20CC
....................         {/*Flanco1 = 1;*/Menu=Flecha2;Cambio=1;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
209A:  MOVFF  1C,16
209E:  MOVLW  01
20A0:  MOVWF  3E
20A2:  MOVLW  03
20A4:  MOVWF  1A
20A6:  MOVLW  02
20A8:  MOVWF  49
20AA:  MOVLW  FA
20AC:  MOVWF  5C
20AE:  CALL   0896
20B2:  DECFSZ 49,F
20B4:  BRA    20AA
20B6:  MOVLW  0C
20B8:  MOVWF  56
20BA:  CALL   0A2C
....................             if(Menu==6) 
20BE:  MOVF   16,W
20C0:  SUBLW  06
20C2:  BNZ   20CC
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}} 
20C4:  CLRF   36
20C6:  CLRF   37
20C8:  CLRF   38
20CA:  CLRF   39
....................               
....................         if(tecla=='L')        // Si oprime Izquierda 
20CC:  MOVF   35,W
20CE:  SUBLW  4C
20D0:  BNZ   20F4
....................         {/*Flanco3 = 1;*/delay_ms(500);Menu=20;Cambio=1;Cambio=1;printf(lcd_putc,"\f");} 
20D2:  MOVLW  02
20D4:  MOVWF  49
20D6:  MOVLW  FA
20D8:  MOVWF  5C
20DA:  CALL   0896
20DE:  DECFSZ 49,F
20E0:  BRA    20D6
20E2:  MOVLW  14
20E4:  MOVWF  16
20E6:  MOVLW  01
20E8:  MOVWF  3E
20EA:  MOVWF  3E
20EC:  MOVLW  0C
20EE:  MOVWF  56
20F0:  CALL   0A2C
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
20F4:  MOVF   16,W
20F6:  SUBLW  02
20F8:  BTFSS  FD8.2
20FA:  BRA    222A
....................    estadoalarma=!estadoalarma;Menu=1; paso=0; 
20FC:  BTG    2E.2
20FE:  MOVLW  01
2100:  MOVWF  16
2102:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
2104:  BTFSS  2E.2
2106:  BRA    2168
....................             {estadoalarma=1; 
2108:  BSF    2E.2
....................                lcd_gotoxy(1,1); 
210A:  MOVLW  01
210C:  MOVWF  57
210E:  MOVWF  58
2110:  CALL   097A
....................                printf(lcd_putc,"                    "); 
2114:  MOVLW  42
2116:  MOVWF  FF6
2118:  MOVLW  03
211A:  MOVWF  FF7
211C:  CALL   0DBE
....................                lcd_gotoxy(1,2); 
2120:  MOVLW  01
2122:  MOVWF  57
2124:  MOVLW  02
2126:  MOVWF  58
2128:  CALL   097A
....................                printf(lcd_putc,"        Activo      "); 
212C:  MOVLW  58
212E:  MOVWF  FF6
2130:  MOVLW  03
2132:  MOVWF  FF7
2134:  CALL   0DBE
....................                lcd_gotoxy(1,3); 
2138:  MOVLW  01
213A:  MOVWF  57
213C:  MOVLW  03
213E:  MOVWF  58
2140:  CALL   097A
....................                printf(lcd_putc,"        Alarma      "); 
2144:  MOVLW  6E
2146:  MOVWF  FF6
2148:  MOVLW  03
214A:  MOVWF  FF7
214C:  CALL   0DBE
....................                lcd_gotoxy(1,4); 
2150:  MOVLW  01
2152:  MOVWF  57
2154:  MOVLW  04
2156:  MOVWF  58
2158:  CALL   097A
....................                printf(lcd_putc,"                    ");} 
215C:  MOVLW  84
215E:  MOVWF  FF6
2160:  MOVLW  03
2162:  MOVWF  FF7
2164:  CALL   0DBE
....................                 
....................             if(estadoalarma==0) 
2168:  BTFSC  2E.2
216A:  BRA    21CC
....................             {estadoalarma=0; 
216C:  BCF    2E.2
....................                lcd_gotoxy(1,1); 
216E:  MOVLW  01
2170:  MOVWF  57
2172:  MOVWF  58
2174:  CALL   097A
....................                printf(lcd_putc,"                    "); 
2178:  MOVLW  9A
217A:  MOVWF  FF6
217C:  MOVLW  03
217E:  MOVWF  FF7
2180:  CALL   0DBE
....................                lcd_gotoxy(1,2); 
2184:  MOVLW  01
2186:  MOVWF  57
2188:  MOVLW  02
218A:  MOVWF  58
218C:  CALL   097A
....................                printf(lcd_putc,"      Desactivo     "); 
2190:  MOVLW  B0
2192:  MOVWF  FF6
2194:  MOVLW  03
2196:  MOVWF  FF7
2198:  CALL   0DBE
....................                lcd_gotoxy(1,3); 
219C:  MOVLW  01
219E:  MOVWF  57
21A0:  MOVLW  03
21A2:  MOVWF  58
21A4:  CALL   097A
....................                printf(lcd_putc,"       Alarma       "); 
21A8:  MOVLW  C6
21AA:  MOVWF  FF6
21AC:  MOVLW  03
21AE:  MOVWF  FF7
21B0:  CALL   0DBE
....................                lcd_gotoxy(1,4); 
21B4:  MOVLW  01
21B6:  MOVWF  57
21B8:  MOVLW  04
21BA:  MOVWF  58
21BC:  CALL   097A
....................                printf(lcd_putc,"                    ");} 
21C0:  MOVLW  DC
21C2:  MOVWF  FF6
21C4:  MOVLW  03
21C6:  MOVWF  FF7
21C8:  CALL   0DBE
....................               
....................             write_eeprom(5,estadoalarma);menu=1;Cambio=1;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
21CC:  MOVLW  00
21CE:  BTFSC  2E.2
21D0:  MOVLW  01
21D2:  MOVWF  49
21D4:  MOVLW  05
21D6:  MOVWF  FA9
21D8:  MOVFF  49,FA8
21DC:  BCF    FA6.6
21DE:  BCF    FA6.7
21E0:  BSF    FA6.2
21E2:  MOVF   FF2,W
21E4:  MOVWF  00
21E6:  BCF    FF2.7
21E8:  MOVLB  F
21EA:  MOVLW  55
21EC:  MOVWF  FA7
21EE:  MOVLW  AA
21F0:  MOVWF  FA7
21F2:  BSF    FA6.1
21F4:  BTFSC  FA6.1
21F6:  BRA    21F4
21F8:  BCF    FA6.2
21FA:  MOVF   00,W
21FC:  IORWF  FF2,F
21FE:  MOVLW  01
2200:  MOVWF  16
2202:  MOVWF  3E
2204:  MOVLW  04
2206:  MOVWF  49
2208:  MOVLW  FA
220A:  MOVWF  5C
220C:  MOVLB  0
220E:  CALL   0896
2212:  DECFSZ 49,F
2214:  BRA    2218
2216:  BRA    221C
2218:  MOVLB  F
221A:  BRA    2208
221C:  MOVLW  02
221E:  MOVWF  1A
2220:  MOVWF  1C
2222:  MOVLW  0C
2224:  MOVWF  56
2226:  CALL   0A2C
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................     
....................    while(Menu == 3){ // Menu de seleccion de SetPoint 
222A:  MOVF   16,W
222C:  SUBLW  03
222E:  BTFSS  FD8.2
2230:  BRA    249A
....................    while(Cambio==1) 
....................    { 
2232:  DECFSZ 3E,W
2234:  BRA    22F6
....................    lcd_gotoxy(1,1); 
2236:  MOVLW  01
2238:  MOVWF  57
223A:  MOVWF  58
223C:  CALL   097A
....................    Cambio=0; 
2240:  CLRF   3E
....................    printf(lcd_putc,"  Duracion Actual   ");                           
2242:  MOVLW  F2
2244:  MOVWF  FF6
2246:  MOVLW  03
2248:  MOVWF  FF7
224A:  CALL   0DBE
....................    lcd_gotoxy(1,2);                                                   
224E:  MOVLW  01
2250:  MOVWF  57
2252:  MOVLW  02
2254:  MOVWF  58
2256:  CALL   097A
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
225A:  MOVLW  08
225C:  MOVWF  FF6
225E:  MOVLW  04
2260:  MOVWF  FF7
2262:  MOVLW  09
2264:  MOVWF  49
2266:  CALL   0DDE
226A:  MOVFF  26,49
226E:  MOVLW  01
2270:  MOVWF  4A
2272:  CALL   107E
2276:  MOVLW  3A
2278:  MOVWF  56
227A:  CALL   0A2C
227E:  MOVFF  25,49
2282:  MOVLW  01
2284:  MOVWF  4A
2286:  CALL   107E
228A:  MOVLW  3A
228C:  MOVWF  56
228E:  CALL   0A2C
2292:  MOVFF  24,49
2296:  MOVLW  01
2298:  MOVWF  4A
229A:  CALL   107E
229E:  MOVLW  20
22A0:  MOVWF  56
22A2:  CALL   0A2C
....................     
....................    if(flag_filtro==1) 
22A6:  BTFSS  2F.1
22A8:  BRA    22C4
....................    { 
....................       lcd_gotoxy(1,3);                                                  
22AA:  MOVLW  01
22AC:  MOVWF  57
22AE:  MOVLW  03
22B0:  MOVWF  58
22B2:  CALL   097A
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
22B6:  MOVLW  22
22B8:  MOVWF  FF6
22BA:  MOVLW  04
22BC:  MOVWF  FF7
22BE:  CALL   0DBE
....................    } 
....................     
....................    else 
22C2:  BRA    22DC
....................    { 
....................       lcd_gotoxy(1,3);                                                  
22C4:  MOVLW  01
22C6:  MOVWF  57
22C8:  MOVLW  03
22CA:  MOVWF  58
22CC:  CALL   097A
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
22D0:  MOVLW  38
22D2:  MOVWF  FF6
22D4:  MOVLW  04
22D6:  MOVWF  FF7
22D8:  CALL   0DBE
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
22DC:  MOVLW  01
22DE:  MOVWF  57
22E0:  MOVLW  04
22E2:  MOVWF  58
22E4:  CALL   097A
....................    printf(lcd_putc," RESET= Oprima ^    "); 
22E8:  MOVLW  4E
22EA:  MOVWF  FF6
22EC:  MOVLW  04
22EE:  MOVWF  FF7
22F0:  CALL   0DBE
....................     
....................    } 
22F4:  BRA    2232
....................       
....................      lee_pulsad(); 
22F6:  CALL   0EEC
....................       
....................      Switch(tecla) 
....................       
....................      { 
22FA:  MOVF   35,W
22FC:  XORLW  55
22FE:  BZ    230E
2300:  XORLW  07
2302:  BTFSC  FD8.2
2304:  BRA    2402
2306:  XORLW  1E
2308:  BTFSC  FD8.2
230A:  BRA    246E
230C:  BRA    2498
....................     
....................       Case ('U'):       //Si oprime hacia arriba 
....................       {  delay_ms(200); 
230E:  MOVLW  C8
2310:  MOVWF  5C
2312:  CALL   0896
....................          printf(lcd_putc,"\f"); 
2316:  MOVLW  0C
2318:  MOVWF  56
231A:  CALL   0A2C
....................          lcd_gotoxy(1,2); 
231E:  MOVLW  01
2320:  MOVWF  57
2322:  MOVLW  02
2324:  MOVWF  58
2326:  CALL   097A
....................          printf(lcd_putc," Reset de tiempo "); 
232A:  MOVLW  64
232C:  MOVWF  FF6
232E:  MOVLW  04
2330:  MOVWF  FF7
2332:  CALL   0DBE
....................          lcd_gotoxy(1,3); 
2336:  MOVLW  01
2338:  MOVWF  57
233A:  MOVLW  03
233C:  MOVWF  58
233E:  CALL   097A
....................          printf(lcd_putc,"     Exitoso     "); 
2342:  MOVLW  76
2344:  MOVWF  FF6
2346:  MOVLW  04
2348:  MOVWF  FF7
234A:  CALL   0DBE
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
234E:  MOVLW  46
2350:  MOVWF  FA9
2352:  CLRF   FA8
2354:  BCF    FA6.6
2356:  BCF    FA6.7
2358:  BSF    FA6.2
235A:  MOVF   FF2,W
235C:  MOVWF  00
235E:  BCF    FF2.7
2360:  MOVLB  F
2362:  MOVLW  55
2364:  MOVWF  FA7
2366:  MOVLW  AA
2368:  MOVWF  FA7
236A:  BSF    FA6.1
236C:  BTFSC  FA6.1
236E:  BRA    236C
2370:  BCF    FA6.2
2372:  MOVF   00,W
2374:  IORWF  FF2,F
2376:  MOVLW  47
2378:  MOVWF  FA9
237A:  CLRF   FA8
237C:  BCF    FA6.6
237E:  BCF    FA6.7
2380:  BSF    FA6.2
2382:  MOVF   FF2,W
2384:  MOVWF  00
2386:  BCF    FF2.7
2388:  MOVLW  55
238A:  MOVWF  FA7
238C:  MOVLW  AA
238E:  MOVWF  FA7
2390:  BSF    FA6.1
2392:  BTFSC  FA6.1
2394:  BRA    2392
2396:  BCF    FA6.2
2398:  MOVF   00,W
239A:  IORWF  FF2,F
239C:  MOVLW  48
239E:  MOVWF  FA9
23A0:  CLRF   FA8
23A2:  BCF    FA6.6
23A4:  BCF    FA6.7
23A6:  BSF    FA6.2
23A8:  MOVF   FF2,W
23AA:  MOVWF  00
23AC:  BCF    FF2.7
23AE:  MOVLW  55
23B0:  MOVWF  FA7
23B2:  MOVLW  AA
23B4:  MOVWF  FA7
23B6:  BSF    FA6.1
23B8:  BTFSC  FA6.1
23BA:  BRA    23B8
23BC:  BCF    FA6.2
23BE:  MOVF   00,W
23C0:  IORWF  FF2,F
....................          delay_ms(700); 
23C2:  MOVLW  04
23C4:  MOVWF  49
23C6:  MOVLW  AF
23C8:  MOVWF  5C
23CA:  MOVLB  0
23CC:  CALL   0896
23D0:  DECFSZ 49,F
23D2:  BRA    23D6
23D4:  BRA    23DA
23D6:  MOVLB  F
23D8:  BRA    23C6
....................          segundos=0;minutos=0;horas=0; 
23DA:  CLRF   24
23DC:  CLRF   25
23DE:  CLRF   26
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
23E0:  MOVLW  1E
23E2:  MOVWF  5C
23E4:  CALL   0896
23E8:  MOVLW  01
23EA:  MOVWF  16
23EC:  CLRF   31
23EE:  MOVLW  02
23F0:  MOVWF  1A
23F2:  MOVWF  1C
23F4:  MOVLW  01
23F6:  MOVWF  3E
23F8:  MOVLW  0C
23FA:  MOVWF  56
23FC:  CALL   0A2C
....................       } 
....................       break; 
2400:  BRA    2498
....................        
....................       Case ('R'):       //Se oprimio el boton derecha 
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
2402:  BTG    2F.1
2404:  MOVLW  00
2406:  BTFSC  2F.1
2408:  MOVLW  01
240A:  MOVWF  49
240C:  MOVLW  49
240E:  MOVWF  FA9
2410:  MOVFF  49,FA8
2414:  BCF    FA6.6
2416:  BCF    FA6.7
2418:  BSF    FA6.2
241A:  MOVF   FF2,W
241C:  MOVWF  00
241E:  BCF    FF2.7
2420:  MOVLB  F
2422:  MOVLW  55
2424:  MOVWF  FA7
2426:  MOVLW  AA
2428:  MOVWF  FA7
242A:  BSF    FA6.1
242C:  BTFSC  FA6.1
242E:  BRA    242C
2430:  BCF    FA6.2
2432:  MOVF   00,W
2434:  IORWF  FF2,F
....................          if(flag_filtro==1) // Si se activa el filtro, se fuerza a leer el estado de una vez 
2436:  BTFSS  2F.1
2438:  BRA    243C
....................          { 
....................           flag_hrs=1; 
243A:  BSF    30.0
....................          } 
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
243C:  MOVLW  02
243E:  MOVWF  49
2440:  MOVLW  FA
2442:  MOVWF  5C
2444:  MOVLB  0
2446:  CALL   0896
244A:  DECFSZ 49,F
244C:  BRA    2450
244E:  BRA    2454
2450:  MOVLB  F
2452:  BRA    2440
2454:  MOVLW  01
2456:  MOVWF  16
2458:  CLRF   31
245A:  MOVLW  02
245C:  MOVWF  1A
245E:  MOVWF  1C
2460:  MOVLW  01
2462:  MOVWF  3E
2464:  MOVLW  0C
2466:  MOVWF  56
2468:  CALL   0A2C
....................       } 
....................       break; 
246C:  BRA    2498
....................              
....................        Case ('L'):       // Si oprime Izquierda 
....................       {   
....................         delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
246E:  MOVLW  02
2470:  MOVWF  49
2472:  MOVLW  FA
2474:  MOVWF  5C
2476:  CALL   0896
247A:  DECFSZ 49,F
247C:  BRA    2472
247E:  MOVLW  01
2480:  MOVWF  16
2482:  CLRF   31
2484:  MOVLW  02
2486:  MOVWF  1A
2488:  MOVWF  1C
248A:  MOVLW  01
248C:  MOVWF  3E
248E:  MOVLW  0C
2490:  MOVWF  56
2492:  CALL   0A2C
....................       } 
....................       break; 
2496:  BRA    2498
....................               
....................    } 
....................    } 
2498:  BRA    222A
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
249A:  MOVF   16,W
249C:  SUBLW  04
249E:  BTFSS  FD8.2
24A0:  BRA    26B0
....................    if(Cambio==1) 
24A2:  DECFSZ 3E,W
24A4:  BRA    2506
....................    { 
....................    lcd_gotoxy(1,2); 
24A6:  MOVLW  01
24A8:  MOVWF  57
24AA:  MOVLW  02
24AC:  MOVWF  58
24AE:  CALL   097A
....................    printf(lcd_putc,"    Vida Filtro     "); 
24B2:  MOVLW  88
24B4:  MOVWF  FF6
24B6:  MOVLW  04
24B8:  MOVWF  FF7
24BA:  CALL   0DBE
....................    lcd_gotoxy(1,3); 
24BE:  MOVLW  01
24C0:  MOVWF  57
24C2:  MOVLW  03
24C4:  MOVWF  58
24C6:  CALL   097A
....................    printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
24CA:  MOVLW  9E
24CC:  MOVWF  FF6
24CE:  MOVLW  04
24D0:  MOVWF  FF7
24D2:  MOVLW  06
24D4:  MOVWF  49
24D6:  CALL   0DDE
24DA:  MOVLW  42
24DC:  MOVWF  FE9
24DE:  MOVFF  42,4C
24E2:  MOVFF  41,4B
24E6:  MOVFF  40,4A
24EA:  MOVFF  3F,49
24EE:  CLRF   4D
24F0:  GOTO   1292
24F4:  MOVLW  AA
24F6:  MOVWF  FF6
24F8:  MOVLW  04
24FA:  MOVWF  FF7
24FC:  MOVLW  08
24FE:  MOVWF  49
2500:  CALL   0DDE
....................    Cambio=0; 
2504:  CLRF   3E
....................    } 
....................     
....................    if(setpoint<1.0) 
2506:  MOVFF  42,50
250A:  MOVFF  41,4F
250E:  MOVFF  40,4E
2512:  MOVFF  3F,4D
2516:  CLRF   54
2518:  CLRF   53
251A:  CLRF   52
251C:  MOVLW  7F
251E:  MOVWF  51
2520:  CALL   141A
2524:  BNC   2530
....................    {setpoint=1.0;} 
2526:  CLRF   42
2528:  CLRF   41
252A:  CLRF   40
252C:  MOVLW  7F
252E:  MOVWF  3F
....................     
....................    if(setpoint>255.0) 
2530:  CLRF   50
2532:  CLRF   4F
2534:  MOVLW  7F
2536:  MOVWF  4E
2538:  MOVLW  86
253A:  MOVWF  4D
253C:  MOVFF  42,54
2540:  MOVFF  41,53
2544:  MOVFF  40,52
2548:  MOVFF  3F,51
254C:  CALL   141A
2550:  BNC   255E
....................    {setpoint=255.0;} 
2552:  CLRF   42
2554:  CLRF   41
2556:  MOVLW  7F
2558:  MOVWF  40
255A:  MOVLW  86
255C:  MOVWF  3F
....................     
....................    lee_pulsad(); 
255E:  CALL   0EEC
....................     
....................    Switch(tecla) 
....................    { 
2562:  MOVF   35,W
2564:  XORLW  55
2566:  BZ    2576
2568:  XORLW  11
256A:  BZ    25B0
256C:  XORLW  16
256E:  BZ    25EA
2570:  XORLW  1E
2572:  BZ    2658
2574:  BRA    26B0
....................     
....................     Case 'U':     //Si oprime hacia arriba 
....................       {setpoint+=1.0;delay_ms(30);} 
2576:  BCF    FD8.1
2578:  MOVFF  42,4C
257C:  MOVFF  41,4B
2580:  MOVFF  40,4A
2584:  MOVFF  3F,49
2588:  CLRF   50
258A:  CLRF   4F
258C:  CLRF   4E
258E:  MOVLW  7F
2590:  MOVWF  4D
2592:  CALL   1490
2596:  MOVFF  03,42
259A:  MOVFF  02,41
259E:  MOVFF  01,40
25A2:  MOVFF  00,3F
25A6:  MOVLW  1E
25A8:  MOVWF  5C
25AA:  CALL   0896
....................     break; 
25AE:  BRA    26B0
....................       
....................              
....................     Case 'D':     //Si oprime hacia abajo 
....................       {setpoint-=1.0;delay_ms(30);} 
25B0:  BSF    FD8.1
25B2:  MOVFF  42,4C
25B6:  MOVFF  41,4B
25BA:  MOVFF  40,4A
25BE:  MOVFF  3F,49
25C2:  CLRF   50
25C4:  CLRF   4F
25C6:  CLRF   4E
25C8:  MOVLW  7F
25CA:  MOVWF  4D
25CC:  CALL   1490
25D0:  MOVFF  03,42
25D4:  MOVFF  02,41
25D8:  MOVFF  01,40
25DC:  MOVFF  00,3F
25E0:  MOVLW  1E
25E2:  MOVWF  5C
25E4:  CALL   0896
....................     break; 
25E8:  BRA    26B0
....................          
....................     
....................     Case 'R':    //Si se oprime derecha 
....................       { 
....................         Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
25EA:  MOVLW  01
25EC:  MOVWF  16
25EE:  CLRF   31
25F0:  MOVLW  02
25F2:  MOVWF  1A
25F4:  MOVWF  1C
25F6:  MOVLW  0B
25F8:  MOVWF  19
25FA:  MOVLW  02
25FC:  MOVWF  49
25FE:  MOVLW  FA
2600:  MOVWF  5C
2602:  CALL   0896
2606:  DECFSZ 49,F
2608:  BRA    25FE
260A:  MOVLW  0C
260C:  MOVWF  56
260E:  CALL   0A2C
....................         Entero=(int)setpoint; 
2612:  MOVFF  42,4C
2616:  MOVFF  41,4B
261A:  MOVFF  40,4A
261E:  MOVFF  3F,49
2622:  GOTO   16FA
2626:  MOVFF  01,23
....................         write_eeprom(40,Entero); 
262A:  MOVLW  28
262C:  MOVWF  FA9
262E:  MOVFF  23,FA8
2632:  BCF    FA6.6
2634:  BCF    FA6.7
2636:  BSF    FA6.2
2638:  MOVF   FF2,W
263A:  MOVWF  00
263C:  BCF    FF2.7
263E:  MOVLB  F
2640:  MOVLW  55
2642:  MOVWF  FA7
2644:  MOVLW  AA
2646:  MOVWF  FA7
2648:  BSF    FA6.1
264A:  BTFSC  FA6.1
264C:  BRA    264A
264E:  BCF    FA6.2
2650:  MOVF   00,W
2652:  IORWF  FF2,F
....................       } 
....................     break; 
2654:  MOVLB  0
2656:  BRA    26B0
....................           
....................     Case 'L':    // Si oprime Izquierda 
....................       {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");} 
2658:  MOVLW  01
265A:  MOVWF  16
265C:  CLRF   31
265E:  MOVLW  02
2660:  MOVWF  1A
2662:  MOVWF  1C
2664:  MOVLW  0B
2666:  MOVWF  19
2668:  MOVLW  02
266A:  MOVWF  49
266C:  MOVLW  FA
266E:  MOVWF  5C
2670:  CALL   0896
2674:  DECFSZ 49,F
2676:  BRA    266C
2678:  MOVLW  0C
267A:  MOVWF  56
267C:  CALL   0A2C
....................        setpoint=read_eeprom(40); 
2680:  MOVFF  FF2,49
2684:  BCF    FF2.7
2686:  MOVLW  28
2688:  MOVWF  FA9
268A:  BCF    FA6.6
268C:  BCF    FA6.7
268E:  BSF    FA6.0
2690:  MOVF   FA8,W
2692:  BTFSC  49.7
2694:  BSF    FF2.7
2696:  CLRF   4F
2698:  MOVWF  4E
269A:  CALL   0D66
269E:  MOVFF  03,42
26A2:  MOVFF  02,41
26A6:  MOVFF  01,40
26AA:  MOVFF  00,3F
....................     break; 
26AE:  BRA    26B0
....................           
....................       } 
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5)   // Menu para Cambio de Contraseña 
26B0:  MOVF   16,W
26B2:  SUBLW  05
26B4:  BTFSS  FD8.2
26B6:  BRA    29FC
....................     { 
....................     if(Cambio==1) 
26B8:  DECFSZ 3E,W
26BA:  BRA    275C
....................     { 
....................    lcd_gotoxy(1,1); 
26BC:  MOVLW  01
26BE:  MOVWF  57
26C0:  MOVWF  58
26C2:  CALL   097A
....................    printf(lcd_putc,"      Ingrese       "); 
26C6:  MOVLW  B4
26C8:  MOVWF  FF6
26CA:  MOVLW  04
26CC:  MOVWF  FF7
26CE:  CALL   0DBE
....................    lcd_gotoxy(1,2); 
26D2:  MOVLW  01
26D4:  MOVWF  57
26D6:  MOVLW  02
26D8:  MOVWF  58
26DA:  CALL   097A
....................    printf(lcd_putc," Contraseña Actual  "); 
26DE:  MOVLW  CA
26E0:  MOVWF  FF6
26E2:  MOVLW  04
26E4:  MOVWF  FF7
26E6:  CALL   0DBE
....................    lcd_gotoxy(1,3); 
26EA:  MOVLW  01
26EC:  MOVWF  57
26EE:  MOVLW  03
26F0:  MOVWF  58
26F2:  CALL   097A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
26F6:  MOVLW  E0
26F8:  MOVWF  FF6
26FA:  MOVLW  04
26FC:  MOVWF  FF7
26FE:  MOVLW  0A
2700:  MOVWF  49
2702:  CALL   0DDE
2706:  MOVFF  36,49
270A:  MOVLW  1F
270C:  MOVWF  4A
270E:  CALL   0E24
2712:  MOVFF  37,49
2716:  MOVLW  1F
2718:  MOVWF  4A
271A:  CALL   0E24
271E:  MOVFF  38,49
2722:  MOVLW  1F
2724:  MOVWF  4A
2726:  CALL   0E24
272A:  MOVFF  39,49
272E:  MOVLW  1F
2730:  MOVWF  4A
2732:  CALL   0E24
2736:  MOVLW  20
2738:  MOVWF  56
273A:  CALL   0A2C
273E:  MOVLW  20
2740:  MOVWF  56
2742:  CALL   0A2C
....................    lcd_gotoxy(unidad,4); // Para mostrar cursor. 
2746:  MOVFF  19,57
274A:  MOVLW  04
274C:  MOVWF  58
274E:  CALL   097A
....................    lcd_putc(t[2]); 
2752:  MOVFF  34,56
2756:  CALL   0A2C
....................    Cambio=0; 
275A:  CLRF   3E
....................     } 
....................     
....................    lee_pulsad(); 
275C:  CALL   0EEC
....................    Switch (tecla) 
....................    { 
2760:  MOVF   35,W
2762:  XORLW  55
2764:  BZ    2774
2766:  XORLW  11
2768:  BZ    2790
276A:  XORLW  16
276C:  BZ    27AE
276E:  XORLW  1E
2770:  BZ    27CA
2772:  BRA    27E6
....................     
....................    Case 'U':  //Si oprime hacia arriba 
....................       {clave[unidad-11]++;delay_ms(30);} 
2774:  MOVLW  0B
2776:  SUBWF  19,W
2778:  CLRF   03
277A:  ADDLW  36
277C:  MOVWF  FE9
277E:  MOVLW  00
2780:  ADDWFC 03,W
2782:  MOVWF  FEA
2784:  INCF   FEF,F
2786:  MOVLW  1E
2788:  MOVWF  5C
278A:  CALL   0896
....................       break; 
278E:  BRA    27E6
....................          
....................    Case 'D': //Si oprime hacia abajo 
....................       {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);} 
2790:  MOVLW  0B
2792:  SUBWF  19,W
2794:  CLRF   03
2796:  ADDLW  36
2798:  MOVWF  FE9
279A:  MOVLW  00
279C:  ADDWFC 03,W
279E:  MOVWF  FEA
27A0:  DECF   FEF,F
27A2:  BSF    2E.5
27A4:  MOVLW  1E
27A6:  MOVWF  5C
27A8:  CALL   0896
....................       break; 
27AC:  BRA    27E6
....................     
....................    Case 'R': // Si oprime derecha 
....................       {unidad++;delay_ms(500);printf(lcd_putc,"\f");} 
27AE:  INCF   19,F
27B0:  MOVLW  02
27B2:  MOVWF  49
27B4:  MOVLW  FA
27B6:  MOVWF  5C
27B8:  CALL   0896
27BC:  DECFSZ 49,F
27BE:  BRA    27B4
27C0:  MOVLW  0C
27C2:  MOVWF  56
27C4:  CALL   0A2C
....................       break; 
27C8:  BRA    27E6
....................          
....................    Case 'L': // Si oprime Izquierda 
....................       {unidad--;delay_ms(500);printf(lcd_putc,"\f");} 
27CA:  DECF   19,F
27CC:  MOVLW  02
27CE:  MOVWF  49
27D0:  MOVLW  FA
27D2:  MOVWF  5C
27D4:  CALL   0896
27D8:  DECFSZ 49,F
27DA:  BRA    27D0
27DC:  MOVLW  0C
27DE:  MOVWF  56
27E0:  CALL   0A2C
....................       break; 
27E4:  BRA    27E6
....................        
....................    } 
....................     
....................    if(Cambio==1) 
27E6:  DECFSZ 3E,W
27E8:  BRA    29FC
....................      
....................     { 
....................          
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
27EA:  MOVLW  0B
27EC:  SUBWF  19,W
27EE:  CLRF   03
27F0:  ADDLW  36
27F2:  MOVWF  FE9
27F4:  MOVLW  00
27F6:  ADDWFC 03,W
27F8:  MOVWF  FEA
27FA:  BTFSC  FEF.7
27FC:  BRA    2800
27FE:  BRA    2814
....................        {clave[unidad-11]=9;} 
2800:  MOVLW  0B
2802:  SUBWF  19,W
2804:  CLRF   03
2806:  ADDLW  36
2808:  MOVWF  FE9
280A:  MOVLW  00
280C:  ADDWFC 03,W
280E:  MOVWF  FEA
2810:  MOVLW  09
2812:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2814:  MOVLW  0B
2816:  SUBWF  19,W
2818:  CLRF   03
281A:  ADDLW  36
281C:  MOVWF  FE9
281E:  MOVLW  00
2820:  ADDWFC 03,W
2822:  MOVWF  FEA
2824:  BTFSC  FEF.7
2826:  BRA    2840
2828:  MOVF   FEF,W
282A:  SUBLW  09
282C:  BC    2840
....................        {clave[unidad-11]=0;} 
282E:  MOVLW  0B
2830:  SUBWF  19,W
2832:  CLRF   03
2834:  ADDLW  36
2836:  MOVWF  FE9
2838:  MOVLW  00
283A:  ADDWFC 03,W
283C:  MOVWF  FEA
283E:  CLRF   FEF
....................        if(unidad<11) 
2840:  BTFSC  19.7
2842:  BRA    284A
2844:  MOVF   19,W
2846:  SUBLW  0A
2848:  BNC   2882
....................        { 
....................         Menu=1;paso=1;Flecha=2;Flecha1=3;Flecha2=2;unidad=11; 
284A:  MOVLW  01
284C:  MOVWF  16
284E:  MOVWF  31
2850:  MOVLW  02
2852:  MOVWF  1A
2854:  MOVLW  03
2856:  MOVWF  1B
2858:  MOVLW  02
285A:  MOVWF  1C
285C:  MOVLW  0B
285E:  MOVWF  19
....................         lcd_gotoxy(unidad,4); 
2860:  MOVFF  19,57
2864:  MOVLW  04
2866:  MOVWF  58
2868:  CALL   097A
....................         printf(lcd_putc,"\f"); 
286C:  MOVLW  0C
286E:  MOVWF  56
2870:  CALL   0A2C
....................         unidad=11;clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2874:  MOVLW  0B
2876:  MOVWF  19
2878:  CLRF   36
287A:  CLRF   37
287C:  CLRF   38
287E:  CLRF   39
....................        } 
....................        else 
2880:  BRA    2896
....................        { 
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2882:  MOVFF  19,57
2886:  MOVLW  04
2888:  MOVWF  58
288A:  CALL   097A
....................        lcd_putc(t[2]); 
288E:  MOVFF  34,56
2892:  CALL   0A2C
....................        } 
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2896:  BTFSC  19.7
2898:  BRA    29BC
289A:  MOVF   19,W
289C:  SUBLW  0E
289E:  BTFSC  FD8.0
28A0:  BRA    29BC
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
28A2:  MOVF   3A,W
28A4:  SUBWF  36,W
28A6:  BNZ   2942
28A8:  MOVF   3B,W
28AA:  SUBWF  37,W
28AC:  BNZ   2942
28AE:  MOVF   3C,W
28B0:  SUBWF  38,W
28B2:  BNZ   2942
28B4:  MOVF   3D,W
28B6:  SUBWF  39,W
28B8:  BNZ   2942
....................             {lcd_gotoxy(1,1); 
28BA:  MOVLW  01
28BC:  MOVWF  57
28BE:  MOVWF  58
28C0:  CALL   097A
....................             printf(lcd_putc,"                    "); 
28C4:  MOVLW  F6
28C6:  MOVWF  FF6
28C8:  MOVLW  04
28CA:  MOVWF  FF7
28CC:  CALL   0DBE
....................             lcd_gotoxy(1,2); 
28D0:  MOVLW  01
28D2:  MOVWF  57
28D4:  MOVLW  02
28D6:  MOVWF  58
28D8:  CALL   097A
....................             printf(lcd_putc,"     Contraseña     "); 
28DC:  MOVLW  0C
28DE:  MOVWF  FF6
28E0:  MOVLW  05
28E2:  MOVWF  FF7
28E4:  CALL   0DBE
....................             lcd_gotoxy(1,3); 
28E8:  MOVLW  01
28EA:  MOVWF  57
28EC:  MOVLW  03
28EE:  MOVWF  58
28F0:  CALL   097A
....................             printf(lcd_putc,"      Correcta      "); 
28F4:  MOVLW  22
28F6:  MOVWF  FF6
28F8:  MOVLW  05
28FA:  MOVWF  FF7
28FC:  CALL   0DBE
....................             lcd_gotoxy(1,4); 
2900:  MOVLW  01
2902:  MOVWF  57
2904:  MOVLW  04
2906:  MOVWF  58
2908:  CALL   097A
....................             printf(lcd_putc,"                    "); 
290C:  MOVLW  38
290E:  MOVWF  FF6
2910:  MOVLW  05
2912:  MOVWF  FF7
2914:  CALL   0DBE
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
2918:  MOVLW  02
291A:  MOVWF  49
291C:  MOVLW  FA
291E:  MOVWF  5C
2920:  CALL   0896
2924:  DECFSZ 49,F
2926:  BRA    291C
2928:  MOVLW  33
292A:  MOVWF  16
292C:  MOVLW  0B
292E:  MOVWF  19
2930:  MOVLW  0C
2932:  MOVWF  56
2934:  CALL   0A2C
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2938:  CLRF   36
293A:  CLRF   37
293C:  CLRF   38
293E:  CLRF   39
....................          else 
2940:  BRA    29BC
....................          {lcd_gotoxy(1,1); 
2942:  MOVLW  01
2944:  MOVWF  57
2946:  MOVWF  58
2948:  CALL   097A
....................             printf(lcd_putc,"                    "); 
294C:  MOVLW  4E
294E:  MOVWF  FF6
2950:  MOVLW  05
2952:  MOVWF  FF7
2954:  CALL   0DBE
....................             lcd_gotoxy(1,2); 
2958:  MOVLW  01
295A:  MOVWF  57
295C:  MOVLW  02
295E:  MOVWF  58
2960:  CALL   097A
....................             printf(lcd_putc,"     Contraseña     "); 
2964:  MOVLW  64
2966:  MOVWF  FF6
2968:  MOVLW  05
296A:  MOVWF  FF7
296C:  CALL   0DBE
....................             lcd_gotoxy(1,3); 
2970:  MOVLW  01
2972:  MOVWF  57
2974:  MOVLW  03
2976:  MOVWF  58
2978:  CALL   097A
....................             printf(lcd_putc,"     Incorrecta     "); 
297C:  MOVLW  7A
297E:  MOVWF  FF6
2980:  MOVLW  05
2982:  MOVWF  FF7
2984:  CALL   0DBE
....................             lcd_gotoxy(1,4); 
2988:  MOVLW  01
298A:  MOVWF  57
298C:  MOVLW  04
298E:  MOVWF  58
2990:  CALL   097A
....................             printf(lcd_putc,"                    "); 
2994:  MOVLW  90
2996:  MOVWF  FF6
2998:  MOVLW  05
299A:  MOVWF  FF7
299C:  CALL   0DBE
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
29A0:  MOVLW  02
29A2:  MOVWF  49
29A4:  MOVLW  FA
29A6:  MOVWF  5C
29A8:  CALL   0896
29AC:  DECFSZ 49,F
29AE:  BRA    29A4
29B0:  MOVLW  0B
29B2:  MOVWF  19
29B4:  MOVLW  0C
29B6:  MOVWF  56
29B8:  CALL   0A2C
....................          } 
....................           if(unidad>11&&unidad<14) 
29BC:  BTFSC  19.7
29BE:  BRA    29FC
29C0:  MOVF   19,W
29C2:  SUBLW  0B
29C4:  BC    29FC
29C6:  BTFSC  19.7
29C8:  BRA    29D0
29CA:  MOVF   19,W
29CC:  SUBLW  0D
29CE:  BNC   29FC
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
29D0:  MOVLW  01
29D2:  SUBWF  19,W
29D4:  MOVWF  49
29D6:  MOVWF  57
29D8:  MOVLW  04
29DA:  MOVWF  58
29DC:  CALL   097A
....................             lcd_putc(t[1]); 
29E0:  MOVFF  33,56
29E4:  CALL   0A2C
....................             lcd_gotoxy(unidad,4);// Para mostrar cursor. 
29E8:  MOVFF  19,57
29EC:  MOVLW  04
29EE:  MOVWF  58
29F0:  CALL   097A
....................             lcd_putc(t[2]); 
29F4:  MOVFF  34,56
29F8:  CALL   0A2C
....................           } 
....................     } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51)   // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
29FC:  MOVF   16,W
29FE:  SUBLW  33
2A00:  BTFSS  FD8.2
2A02:  BRA    2D70
....................    { 
....................     if(Cambio==1) 
2A04:  DECFSZ 3E,W
2A06:  BRA    2AA8
....................     { 
....................    lcd_gotoxy(1,1); 
2A08:  MOVLW  01
2A0A:  MOVWF  57
2A0C:  MOVWF  58
2A0E:  CALL   097A
....................    printf(lcd_putc,"     Ingrese        "); 
2A12:  MOVLW  A6
2A14:  MOVWF  FF6
2A16:  MOVLW  05
2A18:  MOVWF  FF7
2A1A:  CALL   0DBE
....................    lcd_gotoxy(1,2); 
2A1E:  MOVLW  01
2A20:  MOVWF  57
2A22:  MOVLW  02
2A24:  MOVWF  58
2A26:  CALL   097A
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2A2A:  MOVLW  BC
2A2C:  MOVWF  FF6
2A2E:  MOVLW  05
2A30:  MOVWF  FF7
2A32:  CALL   0DBE
....................    lcd_gotoxy(1,3); 
2A36:  MOVLW  01
2A38:  MOVWF  57
2A3A:  MOVLW  03
2A3C:  MOVWF  58
2A3E:  CALL   097A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2A42:  MOVLW  D2
2A44:  MOVWF  FF6
2A46:  MOVLW  05
2A48:  MOVWF  FF7
2A4A:  MOVLW  0A
2A4C:  MOVWF  49
2A4E:  CALL   0DDE
2A52:  MOVFF  36,49
2A56:  MOVLW  1F
2A58:  MOVWF  4A
2A5A:  CALL   0E24
2A5E:  MOVFF  37,49
2A62:  MOVLW  1F
2A64:  MOVWF  4A
2A66:  CALL   0E24
2A6A:  MOVFF  38,49
2A6E:  MOVLW  1F
2A70:  MOVWF  4A
2A72:  CALL   0E24
2A76:  MOVFF  39,49
2A7A:  MOVLW  1F
2A7C:  MOVWF  4A
2A7E:  CALL   0E24
2A82:  MOVLW  20
2A84:  MOVWF  56
2A86:  CALL   0A2C
2A8A:  MOVLW  20
2A8C:  MOVWF  56
2A8E:  CALL   0A2C
....................    lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2A92:  MOVFF  19,57
2A96:  MOVLW  04
2A98:  MOVWF  58
2A9A:  CALL   097A
....................    lcd_putc(t[2]); 
2A9E:  MOVFF  34,56
2AA2:  CALL   0A2C
....................    Cambio=0; 
2AA6:  CLRF   3E
....................     } 
....................     
....................    lee_pulsad(); 
2AA8:  CALL   0EEC
....................    Switch (tecla) 
....................     { 
2AAC:  MOVF   35,W
2AAE:  XORLW  55
2AB0:  BZ    2AC0
2AB2:  XORLW  11
2AB4:  BZ    2ADC
2AB6:  XORLW  16
2AB8:  BZ    2AF8
2ABA:  XORLW  1E
2ABC:  BZ    2B0C
2ABE:  BRA    2B20
....................     Case 'U':  //Si oprime hacia arriba 
....................       {clave[unidad-11]++;delay_ms(30);} 
2AC0:  MOVLW  0B
2AC2:  SUBWF  19,W
2AC4:  CLRF   03
2AC6:  ADDLW  36
2AC8:  MOVWF  FE9
2ACA:  MOVLW  00
2ACC:  ADDWFC 03,W
2ACE:  MOVWF  FEA
2AD0:  INCF   FEF,F
2AD2:  MOVLW  1E
2AD4:  MOVWF  5C
2AD6:  CALL   0896
....................       break; 
2ADA:  BRA    2B20
....................        
....................     Case 'D':  //Si oprime hacia abajo 
....................       {clave[unidad-11]--;delay_ms(30);} 
2ADC:  MOVLW  0B
2ADE:  SUBWF  19,W
2AE0:  CLRF   03
2AE2:  ADDLW  36
2AE4:  MOVWF  FE9
2AE6:  MOVLW  00
2AE8:  ADDWFC 03,W
2AEA:  MOVWF  FEA
2AEC:  DECF   FEF,F
2AEE:  MOVLW  1E
2AF0:  MOVWF  5C
2AF2:  CALL   0896
....................       break; 
2AF6:  BRA    2B20
....................      
....................     Case 'R':  // Si oprime Derecha 
....................       {unidad++;delay_ms(30);printf(lcd_putc,"\f");} 
2AF8:  INCF   19,F
2AFA:  MOVLW  1E
2AFC:  MOVWF  5C
2AFE:  CALL   0896
2B02:  MOVLW  0C
2B04:  MOVWF  56
2B06:  CALL   0A2C
....................       break; 
2B0A:  BRA    2B20
....................      
....................     Case 'L':  // Si oprime Izquierda 
....................       {unidad--;delay_ms(30);printf(lcd_putc,"\f");} 
2B0C:  DECF   19,F
2B0E:  MOVLW  1E
2B10:  MOVWF  5C
2B12:  CALL   0896
2B16:  MOVLW  0C
2B18:  MOVWF  56
2B1A:  CALL   0A2C
....................       break; 
2B1E:  BRA    2B20
....................     } 
....................      
....................     if(Cambio==1) 
2B20:  DECFSZ 3E,W
2B22:  BRA    2D70
....................       {       
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2B24:  MOVLW  0B
2B26:  SUBWF  19,W
2B28:  CLRF   03
2B2A:  ADDLW  36
2B2C:  MOVWF  FE9
2B2E:  MOVLW  00
2B30:  ADDWFC 03,W
2B32:  MOVWF  FEA
2B34:  BTFSC  FEF.7
2B36:  BRA    2B3A
2B38:  BRA    2B4E
....................        {clave[unidad-11]=9;} 
2B3A:  MOVLW  0B
2B3C:  SUBWF  19,W
2B3E:  CLRF   03
2B40:  ADDLW  36
2B42:  MOVWF  FE9
2B44:  MOVLW  00
2B46:  ADDWFC 03,W
2B48:  MOVWF  FEA
2B4A:  MOVLW  09
2B4C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2B4E:  MOVLW  0B
2B50:  SUBWF  19,W
2B52:  CLRF   03
2B54:  ADDLW  36
2B56:  MOVWF  FE9
2B58:  MOVLW  00
2B5A:  ADDWFC 03,W
2B5C:  MOVWF  FEA
2B5E:  BTFSC  FEF.7
2B60:  BRA    2B7A
2B62:  MOVF   FEF,W
2B64:  SUBLW  09
2B66:  BC    2B7A
....................        {clave[unidad-11]=0;} 
2B68:  MOVLW  0B
2B6A:  SUBWF  19,W
2B6C:  CLRF   03
2B6E:  ADDLW  36
2B70:  MOVWF  FE9
2B72:  MOVLW  00
2B74:  ADDWFC 03,W
2B76:  MOVWF  FEA
2B78:  CLRF   FEF
....................        if(unidad<11) 
2B7A:  BTFSC  19.7
2B7C:  BRA    2B84
2B7E:  MOVF   19,W
2B80:  SUBLW  0A
2B82:  BNC   2BBA
....................        { 
....................        Menu=1;paso=1;Flecha=2;Flecha1=3;Flecha2=2;unidad=11; 
2B84:  MOVLW  01
2B86:  MOVWF  16
2B88:  MOVWF  31
2B8A:  MOVLW  02
2B8C:  MOVWF  1A
2B8E:  MOVLW  03
2B90:  MOVWF  1B
2B92:  MOVLW  02
2B94:  MOVWF  1C
2B96:  MOVLW  0B
2B98:  MOVWF  19
....................         lcd_gotoxy(unidad,4); 
2B9A:  MOVFF  19,57
2B9E:  MOVLW  04
2BA0:  MOVWF  58
2BA2:  CALL   097A
....................         printf(lcd_putc,"\f"); 
2BA6:  MOVLW  0C
2BA8:  MOVWF  56
2BAA:  CALL   0A2C
....................         unidad=11;clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2BAE:  MOVLW  0B
2BB0:  MOVWF  19
2BB2:  CLRF   36
2BB4:  CLRF   37
2BB6:  CLRF   38
2BB8:  CLRF   39
....................        } 
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2BBA:  MOVFF  19,57
2BBE:  MOVLW  04
2BC0:  MOVWF  58
2BC2:  CALL   097A
....................        lcd_putc(t[2]); 
2BC6:  MOVFF  34,56
2BCA:  CALL   0A2C
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2BCE:  BTFSC  19.7
2BD0:  BRA    2D44
2BD2:  MOVF   19,W
2BD4:  SUBLW  0E
2BD6:  BTFSC  FD8.0
2BD8:  BRA    2D44
....................        { 
....................             lcd_gotoxy(1,1); 
2BDA:  MOVLW  01
2BDC:  MOVWF  57
2BDE:  MOVWF  58
2BE0:  CALL   097A
....................             printf(lcd_putc,"                    "); 
2BE4:  MOVLW  E8
2BE6:  MOVWF  FF6
2BE8:  MOVLW  05
2BEA:  MOVWF  FF7
2BEC:  CALL   0DBE
....................             lcd_gotoxy(1,2); 
2BF0:  MOVLW  01
2BF2:  MOVWF  57
2BF4:  MOVLW  02
2BF6:  MOVWF  58
2BF8:  CALL   097A
....................             printf(lcd_putc,"     Contraseña     "); 
2BFC:  MOVLW  FE
2BFE:  MOVWF  FF6
2C00:  MOVLW  05
2C02:  MOVWF  FF7
2C04:  CALL   0DBE
....................             lcd_gotoxy(1,3); 
2C08:  MOVLW  01
2C0A:  MOVWF  57
2C0C:  MOVLW  03
2C0E:  MOVWF  58
2C10:  CALL   097A
....................             printf(lcd_putc,"     Almacenada     "); 
2C14:  MOVLW  14
2C16:  MOVWF  FF6
2C18:  MOVLW  06
2C1A:  MOVWF  FF7
2C1C:  CALL   0DBE
....................             lcd_gotoxy(1,4); 
2C20:  MOVLW  01
2C22:  MOVWF  57
2C24:  MOVLW  04
2C26:  MOVWF  58
2C28:  CALL   097A
....................             printf(lcd_putc,"                    "); 
2C2C:  MOVLW  2A
2C2E:  MOVWF  FF6
2C30:  MOVLW  06
2C32:  MOVWF  FF7
2C34:  CALL   0DBE
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2C38:  CLRF   FA9
2C3A:  MOVFF  36,FA8
2C3E:  BCF    FA6.6
2C40:  BCF    FA6.7
2C42:  BSF    FA6.2
2C44:  MOVF   FF2,W
2C46:  MOVWF  00
2C48:  BCF    FF2.7
2C4A:  MOVLB  F
2C4C:  MOVLW  55
2C4E:  MOVWF  FA7
2C50:  MOVLW  AA
2C52:  MOVWF  FA7
2C54:  BSF    FA6.1
2C56:  BTFSC  FA6.1
2C58:  BRA    2C56
2C5A:  BCF    FA6.2
2C5C:  MOVF   00,W
2C5E:  IORWF  FF2,F
2C60:  MOVLW  14
2C62:  MOVWF  5C
2C64:  MOVLB  0
2C66:  CALL   0896
2C6A:  MOVLW  01
2C6C:  MOVWF  FA9
2C6E:  MOVFF  37,FA8
2C72:  BCF    FA6.6
2C74:  BCF    FA6.7
2C76:  BSF    FA6.2
2C78:  MOVF   FF2,W
2C7A:  MOVWF  00
2C7C:  BCF    FF2.7
2C7E:  MOVLB  F
2C80:  MOVLW  55
2C82:  MOVWF  FA7
2C84:  MOVLW  AA
2C86:  MOVWF  FA7
2C88:  BSF    FA6.1
2C8A:  BTFSC  FA6.1
2C8C:  BRA    2C8A
2C8E:  BCF    FA6.2
2C90:  MOVF   00,W
2C92:  IORWF  FF2,F
2C94:  MOVLW  14
2C96:  MOVWF  5C
2C98:  MOVLB  0
2C9A:  CALL   0896
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2C9E:  MOVLW  02
2CA0:  MOVWF  FA9
2CA2:  MOVFF  38,FA8
2CA6:  BCF    FA6.6
2CA8:  BCF    FA6.7
2CAA:  BSF    FA6.2
2CAC:  MOVF   FF2,W
2CAE:  MOVWF  00
2CB0:  BCF    FF2.7
2CB2:  MOVLB  F
2CB4:  MOVLW  55
2CB6:  MOVWF  FA7
2CB8:  MOVLW  AA
2CBA:  MOVWF  FA7
2CBC:  BSF    FA6.1
2CBE:  BTFSC  FA6.1
2CC0:  BRA    2CBE
2CC2:  BCF    FA6.2
2CC4:  MOVF   00,W
2CC6:  IORWF  FF2,F
2CC8:  MOVLW  14
2CCA:  MOVWF  5C
2CCC:  MOVLB  0
2CCE:  CALL   0896
2CD2:  MOVLW  03
2CD4:  MOVWF  FA9
2CD6:  MOVFF  39,FA8
2CDA:  BCF    FA6.6
2CDC:  BCF    FA6.7
2CDE:  BSF    FA6.2
2CE0:  MOVF   FF2,W
2CE2:  MOVWF  00
2CE4:  BCF    FF2.7
2CE6:  MOVLB  F
2CE8:  MOVLW  55
2CEA:  MOVWF  FA7
2CEC:  MOVLW  AA
2CEE:  MOVWF  FA7
2CF0:  BSF    FA6.1
2CF2:  BTFSC  FA6.1
2CF4:  BRA    2CF2
2CF6:  BCF    FA6.2
2CF8:  MOVF   00,W
2CFA:  IORWF  FF2,F
2CFC:  MOVLW  14
2CFE:  MOVWF  5C
2D00:  MOVLB  0
2D02:  CALL   0896
....................             contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2D06:  MOVFF  36,3A
2D0A:  MOVFF  37,3B
2D0E:  MOVFF  38,3C
2D12:  MOVFF  39,3D
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2D16:  CLRF   36
2D18:  CLRF   37
2D1A:  CLRF   38
2D1C:  CLRF   39
....................             delay_ms(500);Menu=1;Flecha=2;Flecha2=2;unidad=11;printf(lcd_putc,"\f"); 
2D1E:  MOVLW  02
2D20:  MOVWF  49
2D22:  MOVLW  FA
2D24:  MOVWF  5C
2D26:  CALL   0896
2D2A:  DECFSZ 49,F
2D2C:  BRA    2D22
2D2E:  MOVLW  01
2D30:  MOVWF  16
2D32:  MOVLW  02
2D34:  MOVWF  1A
2D36:  MOVWF  1C
2D38:  MOVLW  0B
2D3A:  MOVWF  19
2D3C:  MOVLW  0C
2D3E:  MOVWF  56
2D40:  CALL   0A2C
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2D44:  BTFSC  19.7
2D46:  BRA    2D70
2D48:  MOVF   19,W
2D4A:  SUBLW  0B
2D4C:  BC    2D70
2D4E:  BTFSC  19.7
2D50:  BRA    2D58
2D52:  MOVF   19,W
2D54:  SUBLW  0D
2D56:  BNC   2D70
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2D58:  MOVLW  01
2D5A:  SUBWF  19,W
2D5C:  MOVWF  49
2D5E:  MOVWF  57
2D60:  MOVLW  04
2D62:  MOVWF  58
2D64:  CALL   097A
....................             lcd_putc(t[1]); 
2D68:  MOVFF  33,56
2D6C:  CALL   0A2C
....................           } 
....................       } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de Tiempo de Purga 
2D70:  MOVF   16,W
2D72:  SUBLW  06
2D74:  BTFSS  FD8.2
2D76:  BRA    2FA0
....................    { 
....................     if(Cambio==1) 
2D78:  DECFSZ 3E,W
2D7A:  BRA    2E00
....................      { 
....................       lcd_gotoxy(1,1); 
2D7C:  MOVLW  01
2D7E:  MOVWF  57
2D80:  MOVWF  58
2D82:  CALL   097A
....................       printf(lcd_putc,"     Tiempo  de      "); 
2D86:  MOVLW  40
2D88:  MOVWF  FF6
2D8A:  MOVLW  06
2D8C:  MOVWF  FF7
2D8E:  CALL   0DBE
....................       lcd_gotoxy(1,2); 
2D92:  MOVLW  01
2D94:  MOVWF  57
2D96:  MOVLW  02
2D98:  MOVWF  58
2D9A:  CALL   097A
....................       printf(lcd_putc,"       Purga         "); 
2D9E:  MOVLW  56
2DA0:  MOVWF  FF6
2DA2:  MOVLW  06
2DA4:  MOVWF  FF7
2DA6:  CALL   0DBE
....................       lcd_gotoxy(6,3); 
2DAA:  MOVLW  06
2DAC:  MOVWF  57
2DAE:  MOVLW  03
2DB0:  MOVWF  58
2DB2:  CALL   097A
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
2DB6:  MOVFF  22,49
2DBA:  MOVLW  01
2DBC:  MOVWF  4A
2DBE:  CALL   107E
2DC2:  MOVLW  3A
2DC4:  MOVWF  56
2DC6:  CALL   0A2C
2DCA:  MOVFF  29,49
2DCE:  MOVLW  01
2DD0:  MOVWF  4A
2DD2:  CALL   107E
2DD6:  MOVLW  75
2DD8:  MOVWF  FF6
2DDA:  MOVLW  06
2DDC:  MOVWF  FF7
2DDE:  MOVLW  08
2DE0:  MOVWF  49
2DE2:  CALL   0DDE
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2DE6:  MOVLW  06
2DE8:  ADDWF  20,W
2DEA:  MOVWF  49
2DEC:  MOVWF  57
2DEE:  MOVLW  04
2DF0:  MOVWF  58
2DF2:  CALL   097A
....................       lcd_putc(t[2]); 
2DF6:  MOVFF  34,56
2DFA:  CALL   0A2C
....................       Cambio=0; 
2DFE:  CLRF   3E
....................      } 
....................        
....................       if(unidad2<1) 
2E00:  BTFSC  20.7
2E02:  BRA    2E0A
2E04:  MOVF   20,W
2E06:  SUBLW  00
2E08:  BNC   2E0E
....................          unidad2=1; 
2E0A:  MOVLW  01
2E0C:  MOVWF  20
....................       if(unidad2>3) 
2E0E:  BTFSC  20.7
2E10:  BRA    2E1C
2E12:  MOVF   20,W
2E14:  SUBLW  03
2E16:  BC    2E1C
....................          unidad2=3;    
2E18:  MOVLW  03
2E1A:  MOVWF  20
....................       
....................      lee_pulsad(); 
2E1C:  CALL   0EEC
....................       
....................      Switch(tecla) 
....................         
....................       { 
2E20:  MOVF   35,W
2E22:  XORLW  55
2E24:  BZ    2E34
2E26:  XORLW  11
2E28:  BZ    2E6C
2E2A:  XORLW  16
2E2C:  BZ    2EA0
2E2E:  XORLW  1E
2E30:  BZ    2ED4
2E32:  BRA    2FA0
....................       Case 'U': 
....................       { 
....................          if(unidad2==1) 
2E34:  DECFSZ 20,W
2E36:  BRA    2E4E
....................          { 
....................             purga_minutos_pro++; 
2E38:  INCF   22,F
....................             if(purga_minutos_pro>59) 
2E3A:  BTFSC  22.7
2E3C:  BRA    2E46
2E3E:  MOVF   22,W
2E40:  SUBLW  3B
2E42:  BC    2E46
....................                purga_minutos_pro=0; 
2E44:  CLRF   22
....................                 
....................             delay_ms(200); 
2E46:  MOVLW  C8
2E48:  MOVWF  5C
2E4A:  CALL   0896
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2E4E:  MOVF   20,W
2E50:  SUBLW  03
2E52:  BNZ   2E6A
....................          { 
....................             purga_segundos_pro++; 
2E54:  INCF   29,F
....................             if(purga_segundos_pro>59) 
2E56:  BTFSC  29.7
2E58:  BRA    2E62
2E5A:  MOVF   29,W
2E5C:  SUBLW  3B
2E5E:  BC    2E62
....................                purga_segundos_pro=0; 
2E60:  CLRF   29
....................                 
....................             delay_ms(200); 
2E62:  MOVLW  C8
2E64:  MOVWF  5C
2E66:  CALL   0896
....................          } 
....................       } 
....................       break; 
2E6A:  BRA    2FA0
....................        
....................       Case 'D': 
....................       { 
....................          if(unidad2==1) 
2E6C:  DECFSZ 20,W
2E6E:  BRA    2E84
....................          { 
....................             purga_minutos_pro--; 
2E70:  DECF   22,F
....................             if(purga_minutos_pro<0) 
2E72:  BTFSC  22.7
2E74:  BRA    2E78
2E76:  BRA    2E7C
....................                purga_minutos_pro=59; 
2E78:  MOVLW  3B
2E7A:  MOVWF  22
....................                 
....................             delay_ms(200); 
2E7C:  MOVLW  C8
2E7E:  MOVWF  5C
2E80:  CALL   0896
....................          } 
....................           
....................          if(unidad2==3) 
2E84:  MOVF   20,W
2E86:  SUBLW  03
2E88:  BNZ   2E9E
....................          { 
....................             purga_segundos_pro--; 
2E8A:  DECF   29,F
....................             if(purga_segundos_pro<0) 
2E8C:  BTFSC  29.7
2E8E:  BRA    2E92
2E90:  BRA    2E96
....................                purga_segundos_pro=59; 
2E92:  MOVLW  3B
2E94:  MOVWF  29
....................                 
....................             delay_ms(200); 
2E96:  MOVLW  C8
2E98:  MOVWF  5C
2E9A:  CALL   0896
....................          } 
....................       } 
....................       break; 
2E9E:  BRA    2FA0
....................        
....................       Case 'R': 
....................       { 
....................          if(unidad2==1) 
2EA0:  DECFSZ 20,W
2EA2:  BRA    2EAA
....................          { 
....................             unidad2=3; 
2EA4:  MOVLW  03
2EA6:  MOVWF  20
....................          } 
....................          else 
2EA8:  BRA    2EBA
....................          { 
....................             if(unidad2==3) 
2EAA:  MOVF   20,W
2EAC:  SUBLW  03
2EAE:  BNZ   2EB6
....................             { 
....................                unidad2=1; 
2EB0:  MOVLW  01
2EB2:  MOVWF  20
....................             } 
....................             else 
2EB4:  BRA    2EBA
....................             { 
....................                unidad2=3; 
2EB6:  MOVLW  03
2EB8:  MOVWF  20
....................             } 
....................          } 
....................          delay_ms(400); 
2EBA:  MOVLW  02
2EBC:  MOVWF  49
2EBE:  MOVLW  C8
2EC0:  MOVWF  5C
2EC2:  CALL   0896
2EC6:  DECFSZ 49,F
2EC8:  BRA    2EBE
....................          printf(lcd_putc,"\f"); 
2ECA:  MOVLW  0C
2ECC:  MOVWF  56
2ECE:  CALL   0A2C
....................       } 
....................       break; 
2ED2:  BRA    2FA0
....................        
....................       Case 'L': 
....................       { 
....................          delay_ms(200); 
2ED4:  MOVLW  C8
2ED6:  MOVWF  5C
2ED8:  CALL   0896
....................          printf(lcd_putc,"\f"); 
2EDC:  MOVLW  0C
2EDE:  MOVWF  56
2EE0:  CALL   0A2C
....................          lcd_gotoxy(1,2); 
2EE4:  MOVLW  01
2EE6:  MOVWF  57
2EE8:  MOVLW  02
2EEA:  MOVWF  58
2EEC:  CALL   097A
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2EF0:  MOVLW  7E
2EF2:  MOVWF  FF6
2EF4:  MOVLW  06
2EF6:  MOVWF  FF7
2EF8:  CALL   0DBE
....................          lcd_gotoxy(1,3); 
2EFC:  MOVLW  01
2EFE:  MOVWF  57
2F00:  MOVLW  03
2F02:  MOVWF  58
2F04:  CALL   097A
....................          printf(lcd_putc,"  Correctamente  "); 
2F08:  MOVLW  90
2F0A:  MOVWF  FF6
2F0C:  MOVLW  06
2F0E:  MOVWF  FF7
2F10:  CALL   0DBE
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
2F14:  MOVLW  14
2F16:  MOVWF  FA9
2F18:  MOVFF  22,FA8
2F1C:  BCF    FA6.6
2F1E:  BCF    FA6.7
2F20:  BSF    FA6.2
2F22:  MOVF   FF2,W
2F24:  MOVWF  00
2F26:  BCF    FF2.7
2F28:  MOVLB  F
2F2A:  MOVLW  55
2F2C:  MOVWF  FA7
2F2E:  MOVLW  AA
2F30:  MOVWF  FA7
2F32:  BSF    FA6.1
2F34:  BTFSC  FA6.1
2F36:  BRA    2F34
2F38:  BCF    FA6.2
2F3A:  MOVF   00,W
2F3C:  IORWF  FF2,F
2F3E:  MOVLW  15
2F40:  MOVWF  FA9
2F42:  MOVFF  29,FA8
2F46:  BCF    FA6.6
2F48:  BCF    FA6.7
2F4A:  BSF    FA6.2
2F4C:  MOVF   FF2,W
2F4E:  MOVWF  00
2F50:  BCF    FF2.7
2F52:  MOVLW  55
2F54:  MOVWF  FA7
2F56:  MOVLW  AA
2F58:  MOVWF  FA7
2F5A:  BSF    FA6.1
2F5C:  BTFSC  FA6.1
2F5E:  BRA    2F5C
2F60:  BCF    FA6.2
2F62:  MOVF   00,W
2F64:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
2F66:  MOVFF  22,21
2F6A:  MOVFF  29,28
....................          delay_ms(700); 
2F6E:  MOVLW  04
2F70:  MOVWF  49
2F72:  MOVLW  AF
2F74:  MOVWF  5C
2F76:  MOVLB  0
2F78:  CALL   0896
2F7C:  DECFSZ 49,F
2F7E:  BRA    2F82
2F80:  BRA    2F86
2F82:  MOVLB  F
2F84:  BRA    2F72
....................          Menu=1;Flecha=2;Flecha2=2;Cambio=1;paso=0;printf(lcd_putc,"\f"); 
2F86:  MOVLW  01
2F88:  MOVWF  16
2F8A:  MOVLW  02
2F8C:  MOVWF  1A
2F8E:  MOVWF  1C
2F90:  MOVLW  01
2F92:  MOVWF  3E
2F94:  CLRF   31
2F96:  MOVLW  0C
2F98:  MOVWF  56
2F9A:  CALL   0A2C
....................       } 
....................       break; 
2F9E:  BRA    2FA0
....................      } 
....................          
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)   // Menu de Tiempo de Post-Purga 
2FA0:  MOVF   16,W
2FA2:  SUBLW  07
2FA4:  BTFSS  FD8.2
2FA6:  BRA    31F0
....................    { 
....................     if(Cambio==1) 
2FA8:  DECFSZ 3E,W
2FAA:  BRA    304C
....................      { 
....................       lcd_gotoxy(1,1); 
2FAC:  MOVLW  01
2FAE:  MOVWF  57
2FB0:  MOVWF  58
2FB2:  CALL   097A
....................       printf(lcd_putc,"     Tiempo  de      "); 
2FB6:  MOVLW  A2
2FB8:  MOVWF  FF6
2FBA:  MOVLW  06
2FBC:  MOVWF  FF7
2FBE:  CALL   0DBE
....................       lcd_gotoxy(1,2); 
2FC2:  MOVLW  01
2FC4:  MOVWF  57
2FC6:  MOVLW  02
2FC8:  MOVWF  58
2FCA:  CALL   097A
....................       printf(lcd_putc,"     Post-Purga      "); 
2FCE:  MOVLW  B8
2FD0:  MOVWF  FF6
2FD2:  MOVLW  06
2FD4:  MOVWF  FF7
2FD6:  CALL   0DBE
....................       lcd_gotoxy(6,3); 
2FDA:  MOVLW  06
2FDC:  MOVWF  57
2FDE:  MOVLW  03
2FE0:  MOVWF  58
2FE2:  CALL   097A
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
2FE6:  MOVFF  2D,49
2FEA:  MOVLW  01
2FEC:  MOVWF  4A
2FEE:  CALL   107E
2FF2:  MOVLW  3A
2FF4:  MOVWF  56
2FF6:  CALL   0A2C
2FFA:  MOVFF  2B,49
2FFE:  MOVLW  01
3000:  MOVWF  4A
3002:  CALL   107E
3006:  MOVLW  D7
3008:  MOVWF  FF6
300A:  MOVLW  06
300C:  MOVWF  FF7
300E:  MOVLW  08
3010:  MOVWF  49
3012:  CALL   0DDE
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
3016:  MOVLW  06
3018:  ADDWF  20,W
301A:  MOVWF  49
301C:  MOVWF  57
301E:  MOVLW  04
3020:  MOVWF  58
3022:  CALL   097A
....................       lcd_putc(t[2]); 
3026:  MOVFF  34,56
302A:  CALL   0A2C
....................       if(unidad2<1) 
302E:  BTFSC  20.7
3030:  BRA    3038
3032:  MOVF   20,W
3034:  SUBLW  00
3036:  BNC   303C
....................          unidad2=1; 
3038:  MOVLW  01
303A:  MOVWF  20
....................       if(unidad2>3) 
303C:  BTFSC  20.7
303E:  BRA    304A
3040:  MOVF   20,W
3042:  SUBLW  03
3044:  BC    304A
....................          unidad2=3; 
3046:  MOVLW  03
3048:  MOVWF  20
....................       Cambio=0; 
304A:  CLRF   3E
....................      } 
....................       
....................      lee_pulsad(); 
304C:  CALL   0EEC
....................       
....................      Switch(tecla) 
....................       { 
3050:  MOVF   35,W
3052:  XORLW  55
3054:  BZ    3064
3056:  XORLW  11
3058:  BZ    30AC
305A:  XORLW  16
305C:  BZ    30F0
305E:  XORLW  1E
3060:  BZ    311E
3062:  BRA    31F0
....................        
....................       Case 'U': 
....................       { 
....................          if(unidad2==1) 
3064:  DECFSZ 20,W
3066:  BRA    3086
....................          { 
....................             ppurga_minutos_pro++; 
3068:  INCF   2D,F
....................             if(ppurga_minutos_pro>59) 
306A:  BTFSC  2D.7
306C:  BRA    3076
306E:  MOVF   2D,W
3070:  SUBLW  3B
3072:  BC    3076
....................                ppurga_minutos_pro=0; 
3074:  CLRF   2D
....................                 
....................             delay_ms(300); 
3076:  MOVLW  02
3078:  MOVWF  49
307A:  MOVLW  96
307C:  MOVWF  5C
307E:  CALL   0896
3082:  DECFSZ 49,F
3084:  BRA    307A
....................              
....................          } 
....................           
....................          if(unidad2==3) 
3086:  MOVF   20,W
3088:  SUBLW  03
308A:  BNZ   30AA
....................          { 
....................             ppurga_segundos_pro++; 
308C:  INCF   2B,F
....................             if(ppurga_segundos_pro>59) 
308E:  BTFSC  2B.7
3090:  BRA    309A
3092:  MOVF   2B,W
3094:  SUBLW  3B
3096:  BC    309A
....................                ppurga_segundos_pro=0; 
3098:  CLRF   2B
....................                 
....................             delay_ms(300); 
309A:  MOVLW  02
309C:  MOVWF  49
309E:  MOVLW  96
30A0:  MOVWF  5C
30A2:  CALL   0896
30A6:  DECFSZ 49,F
30A8:  BRA    309E
....................          } 
....................       } 
....................       break; 
30AA:  BRA    31F0
....................        
....................       Case 'D': 
....................       { 
....................          if(unidad2==1) 
30AC:  DECFSZ 20,W
30AE:  BRA    30CC
....................          { 
....................             ppurga_minutos_pro--; 
30B0:  DECF   2D,F
....................             if(ppurga_minutos_pro<0) 
30B2:  BTFSC  2D.7
30B4:  BRA    30B8
30B6:  BRA    30BC
....................                ppurga_minutos_pro=59; 
30B8:  MOVLW  3B
30BA:  MOVWF  2D
....................                 
....................             delay_ms(300); 
30BC:  MOVLW  02
30BE:  MOVWF  49
30C0:  MOVLW  96
30C2:  MOVWF  5C
30C4:  CALL   0896
30C8:  DECFSZ 49,F
30CA:  BRA    30C0
....................          } 
....................           
....................          if(unidad2==3) 
30CC:  MOVF   20,W
30CE:  SUBLW  03
30D0:  BNZ   30EE
....................          { 
....................             ppurga_segundos_pro--; 
30D2:  DECF   2B,F
....................             if(ppurga_segundos_pro<0) 
30D4:  BTFSC  2B.7
30D6:  BRA    30DA
30D8:  BRA    30DE
....................                ppurga_segundos_pro=59; 
30DA:  MOVLW  3B
30DC:  MOVWF  2B
....................                 
....................             delay_ms(300); 
30DE:  MOVLW  02
30E0:  MOVWF  49
30E2:  MOVLW  96
30E4:  MOVWF  5C
30E6:  CALL   0896
30EA:  DECFSZ 49,F
30EC:  BRA    30E2
....................          } 
....................       } 
....................       break; 
30EE:  BRA    31F0
....................        
....................       Case 'R': 
....................       { 
....................          if(unidad2==1) 
30F0:  DECFSZ 20,W
30F2:  BRA    30FA
....................          { 
....................             unidad2=3; 
30F4:  MOVLW  03
30F6:  MOVWF  20
....................          } 
....................          else 
30F8:  BRA    3104
....................          { 
....................             if(unidad2==3) 
30FA:  MOVF   20,W
30FC:  SUBLW  03
30FE:  BNZ   3104
....................             { 
....................                unidad2=1; 
3100:  MOVLW  01
3102:  MOVWF  20
....................             } 
....................          } 
....................          delay_ms(500); 
3104:  MOVLW  02
3106:  MOVWF  49
3108:  MOVLW  FA
310A:  MOVWF  5C
310C:  CALL   0896
3110:  DECFSZ 49,F
3112:  BRA    3108
....................          printf(lcd_putc,"\f"); 
3114:  MOVLW  0C
3116:  MOVWF  56
3118:  CALL   0A2C
....................       } 
....................       break; 
311C:  BRA    31F0
....................        
....................       Case 'L': 
....................       { 
....................          delay_ms(200); 
311E:  MOVLW  C8
3120:  MOVWF  5C
3122:  CALL   0896
....................          printf(lcd_putc,"\f"); 
3126:  MOVLW  0C
3128:  MOVWF  56
312A:  CALL   0A2C
....................          lcd_gotoxy(1,2); 
312E:  MOVLW  01
3130:  MOVWF  57
3132:  MOVLW  02
3134:  MOVWF  58
3136:  CALL   097A
....................          printf(lcd_putc,"Tiempo Almacenado"); 
313A:  MOVLW  E0
313C:  MOVWF  FF6
313E:  MOVLW  06
3140:  MOVWF  FF7
3142:  CALL   0DBE
....................          lcd_gotoxy(1,3); 
3146:  MOVLW  01
3148:  MOVWF  57
314A:  MOVLW  03
314C:  MOVWF  58
314E:  CALL   097A
....................          printf(lcd_putc,"  Correctamente  "); 
3152:  MOVLW  F2
3154:  MOVWF  FF6
3156:  MOVLW  06
3158:  MOVWF  FF7
315A:  CALL   0DBE
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
315E:  MOVLW  16
3160:  MOVWF  FA9
3162:  MOVFF  2D,FA8
3166:  BCF    FA6.6
3168:  BCF    FA6.7
316A:  BSF    FA6.2
316C:  MOVF   FF2,W
316E:  MOVWF  00
3170:  BCF    FF2.7
3172:  MOVLB  F
3174:  MOVLW  55
3176:  MOVWF  FA7
3178:  MOVLW  AA
317A:  MOVWF  FA7
317C:  BSF    FA6.1
317E:  BTFSC  FA6.1
3180:  BRA    317E
3182:  BCF    FA6.2
3184:  MOVF   00,W
3186:  IORWF  FF2,F
3188:  MOVLW  17
318A:  MOVWF  FA9
318C:  MOVFF  2B,FA8
3190:  BCF    FA6.6
3192:  BCF    FA6.7
3194:  BSF    FA6.2
3196:  MOVF   FF2,W
3198:  MOVWF  00
319A:  BCF    FF2.7
319C:  MOVLW  55
319E:  MOVWF  FA7
31A0:  MOVLW  AA
31A2:  MOVWF  FA7
31A4:  BSF    FA6.1
31A6:  BTFSC  FA6.1
31A8:  BRA    31A6
31AA:  BCF    FA6.2
31AC:  MOVF   00,W
31AE:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
31B0:  MOVFF  2D,2C
31B4:  MOVFF  2B,2A
....................          delay_ms(700); 
31B8:  MOVLW  04
31BA:  MOVWF  49
31BC:  MOVLW  AF
31BE:  MOVWF  5C
31C0:  MOVLB  0
31C2:  CALL   0896
31C6:  DECFSZ 49,F
31C8:  BRA    31CC
31CA:  BRA    31D0
31CC:  MOVLB  F
31CE:  BRA    31BC
....................          delay_ms(30);Menu=1;Cambio=1;Flecha=2;Flecha2=2;paso=0;printf(lcd_putc,"\f"); 
31D0:  MOVLW  1E
31D2:  MOVWF  5C
31D4:  CALL   0896
31D8:  MOVLW  01
31DA:  MOVWF  16
31DC:  MOVWF  3E
31DE:  MOVLW  02
31E0:  MOVWF  1A
31E2:  MOVWF  1C
31E4:  CLRF   31
31E6:  MOVLW  0C
31E8:  MOVWF  56
31EA:  CALL   0A2C
....................       } 
....................       break; 
31EE:  BRA    31F0
....................       } 
....................         
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
31F0:  MOVF   16,W
31F2:  SUBLW  14
31F4:  BTFSS  FD8.2
31F6:  BRA    3414
....................    { 
....................        
....................       if(Cambio==1) 
31F8:  DECFSZ 3E,W
31FA:  BRA    32F6
....................       { 
....................       lcd_send_byte(0,1); //Borra la pantalla, si se entra por primera vez 
31FC:  CLRF   5A
31FE:  MOVLW  01
3200:  MOVWF  5B
3202:  CALL   08E4
....................       lcd_gotoxy(1,1);                      
3206:  MOVLW  01
3208:  MOVWF  57
320A:  MOVWF  58
320C:  CALL   097A
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
3210:  MOVLW  04
3212:  MOVWF  FF6
3214:  MOVLW  07
3216:  MOVWF  FF7
3218:  CALL   0DBE
....................       lcd_gotoxy(1,2); 
321C:  MOVLW  01
321E:  MOVWF  57
3220:  MOVLW  02
3222:  MOVWF  58
3224:  CALL   097A
....................       //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................       printf(lcd_putc,"Ext= ---"); 
3228:  MOVLW  0E
322A:  MOVWF  FF6
322C:  MOVLW  07
322E:  MOVWF  FF7
3230:  CALL   0DBE
....................       lcd_gotoxy(1,3); 
3234:  MOVLW  01
3236:  MOVWF  57
3238:  MOVLW  03
323A:  MOVWF  58
323C:  CALL   097A
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
3240:  MOVLW  18
3242:  MOVWF  FF6
3244:  MOVLW  07
3246:  MOVWF  FF7
3248:  CALL   0DBE
....................       lcd_gotoxy(11,2); 
324C:  MOVLW  0B
324E:  MOVWF  57
3250:  MOVLW  02
3252:  MOVWF  58
3254:  CALL   097A
....................       printf(lcd_putc,"Flujo=--- "); 
3258:  MOVLW  28
325A:  MOVWF  FF6
325C:  MOVLW  07
325E:  MOVWF  FF7
3260:  CALL   0DBE
....................       lcd_gotoxy(10,1);                      
3264:  MOVLW  0A
3266:  MOVWF  57
3268:  MOVLW  01
326A:  MOVWF  58
326C:  CALL   097A
....................       printf(lcd_putc,"Filtro:OK "); 
3270:  MOVLW  34
3272:  MOVWF  FF6
3274:  MOVLW  07
3276:  MOVWF  FF7
3278:  CALL   0DBE
....................        
....................       if(estadofl==1) 
327C:  BTFSS  2E.0
327E:  BRA    329E
....................       { 
....................          Luz_Blanca_on; 
3280:  BSF    F8A.4
3282:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
3284:  MOVLW  01
3286:  MOVWF  57
3288:  MOVLW  04
328A:  MOVWF  58
328C:  CALL   097A
....................          printf(lcd_putc,"Luz: On "); 
3290:  MOVLW  40
3292:  MOVWF  FF6
3294:  MOVLW  07
3296:  MOVWF  FF7
3298:  CALL   0DBE
....................       } 
....................       else 
329C:  BRA    32BA
....................       { 
....................          Luz_Blanca_off; 
329E:  BCF    F8A.4
32A0:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
32A2:  MOVLW  01
32A4:  MOVWF  57
32A6:  MOVLW  04
32A8:  MOVWF  58
32AA:  CALL   097A
....................          printf(lcd_putc,"Luz:Off "); 
32AE:  MOVLW  4A
32B0:  MOVWF  FF6
32B2:  MOVLW  07
32B4:  MOVWF  FF7
32B6:  CALL   0DBE
....................       } 
....................        
....................       if(estadomv==1) 
32BA:  BTFSS  2E.1
32BC:  BRA    32D8
....................       { 
....................          lcd_gotoxy(10,4); 
32BE:  MOVLW  0A
32C0:  MOVWF  57
32C2:  MOVLW  04
32C4:  MOVWF  58
32C6:  CALL   097A
....................          printf(lcd_putc,"Motor: On "); 
32CA:  MOVLW  54
32CC:  MOVWF  FF6
32CE:  MOVLW  07
32D0:  MOVWF  FF7
32D2:  CALL   0DBE
....................       } 
....................       else 
32D6:  BRA    32F4
....................       { 
....................          //if(iniciodamper==1) 
....................          // { 
....................             Motor_off;      
32D8:  BCF    F8A.5
32DA:  BCF    F93.5
....................          //} 
....................          lcd_gotoxy(10,4); 
32DC:  MOVLW  0A
32DE:  MOVWF  57
32E0:  MOVLW  04
32E2:  MOVWF  58
32E4:  CALL   097A
....................          printf(lcd_putc,"Motor:Off ");  
32E8:  MOVLW  60
32EA:  MOVWF  FF6
32EC:  MOVLW  07
32EE:  MOVWF  FF7
32F0:  CALL   0DBE
....................       } 
....................       Cambio=0; 
32F4:  CLRF   3E
....................       } 
....................    
....................       if(flag_filtro==1) 
32F6:  BTFSS  2F.1
32F8:  BRA    3368
....................       { 
....................         if(flag_hrs==1) 
32FA:  BTFSS  30.0
32FC:  BRA    3368
....................         { 
....................          if(horas>=setpoint) 
32FE:  CLRF   4B
3300:  MOVFF  26,4A
3304:  BTFSC  4A.7
3306:  DECF   4B,F
3308:  CALL   1734
330C:  MOVFF  42,50
3310:  MOVFF  41,4F
3314:  MOVFF  40,4E
3318:  MOVFF  3F,4D
331C:  MOVFF  03,54
3320:  MOVFF  02,53
3324:  MOVFF  01,52
3328:  MOVFF  00,51
332C:  CALL   141A
3330:  BC    3334
3332:  BNZ   334E
....................          { 
....................             lcd_gotoxy(10,1);                      
3334:  MOVLW  0A
3336:  MOVWF  57
3338:  MOVLW  01
333A:  MOVWF  58
333C:  CALL   097A
....................             printf(lcd_putc,"Filtro:CAM"); 
3340:  MOVLW  6C
3342:  MOVWF  FF6
3344:  MOVLW  07
3346:  MOVWF  FF7
3348:  CALL   0DBE
....................          } 
....................          else 
334C:  BRA    3366
....................          { 
....................             lcd_gotoxy(10,1);                      
334E:  MOVLW  0A
3350:  MOVWF  57
3352:  MOVLW  01
3354:  MOVWF  58
3356:  CALL   097A
....................             printf(lcd_putc,"Filtro:OK "); 
335A:  MOVLW  78
335C:  MOVWF  FF6
335E:  MOVLW  07
3360:  MOVWF  FF7
3362:  CALL   0DBE
....................          } 
....................          flag_hrs=0; 
3366:  BCF    30.0
....................         }   
....................       } 
....................           
....................   // ********* Aqui comienza el monitoreo de teclas y tiempos          
....................       
....................      lee_pulsad(); 
3368:  CALL   0EEC
....................       
....................       Switch (tecla) 
....................       { 
336C:  MOVF   35,W
336E:  XORLW  44
3370:  BZ    3380
3372:  XORLW  08
3374:  BZ    339A
3376:  XORLW  19
3378:  BZ    33CC
337A:  XORLW  07
337C:  BZ    33F6
337E:  BRA    3414
....................        Case 'D':       //Si oprime hacia Abajo 
....................        { 
....................          
....................         {delay_ms(200);estadofl=!estadofl;} 
3380:  MOVLW  C8
3382:  MOVWF  5C
3384:  CALL   0896
3388:  BTG    2E.0
....................           if(estadofl==1) 
338A:  BTFSS  2E.0
338C:  BRA    3394
....................             { 
....................                Luz_Blanca_on; 
338E:  BSF    F8A.4
3390:  BCF    F93.4
....................                //lcd_gotoxy(1,4); 
....................                //printf(lcd_putc,"Luz: On "); 
....................             } 
....................             else 
3392:  BRA    3398
....................             { 
....................                Luz_Blanca_off; 
3394:  BCF    F8A.4
3396:  BCF    F93.4
....................                //lcd_gotoxy(1,4); 
....................                //printf(lcd_putc,"Luz:Off "); 
....................             } 
....................         } 
....................        break; 
3398:  BRA    3414
....................        
....................              
....................        Case 'L':      //Si oprime hacia Izquierda 
....................       {   
....................           
....................          {delay_ms(200);estadomv=!estadomv;} 
339A:  MOVLW  C8
339C:  MOVWF  5C
339E:  CALL   0896
33A2:  BTG    2E.1
....................             if(estadomv==1) 
33A4:  BTFSS  2E.1
33A6:  BRA    33BA
....................             { 
....................                Motor_on; 
33A8:  BSF    F8A.5
33AA:  BCF    F93.5
....................                delay_ms(200); 
33AC:  MOVLW  C8
33AE:  MOVWF  5C
33B0:  CALL   0896
....................                lcd_init(); 
33B4:  CALL   0922
....................                //lcd_gotoxy(10,4); 
....................                //printf(lcd_putc,"Motor: On ");  
....................             } 
....................             else 
33B8:  BRA    33CA
....................             { 
....................                Motor_off; 
33BA:  BCF    F8A.5
33BC:  BCF    F93.5
....................                delay_ms(200); 
33BE:  MOVLW  C8
33C0:  MOVWF  5C
33C2:  CALL   0896
....................                lcd_init(); 
33C6:  CALL   0922
....................                //lcd_gotoxy(10,4); 
....................                //printf(lcd_putc,"Motor:Off ");  
....................             } 
....................          } 
....................        break; 
33CA:  BRA    3414
....................        
....................     
....................        Case 'U':      // Si oprime Arriba 
....................       {   
....................         {delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
33CC:  MOVLW  02
33CE:  MOVWF  49
33D0:  MOVLW  FA
33D2:  MOVWF  5C
33D4:  CALL   0896
33D8:  DECFSZ 49,F
33DA:  BRA    33D0
33DC:  MOVLW  0C
33DE:  MOVWF  56
33E0:  CALL   0A2C
33E4:  MOVLW  01
33E6:  MOVWF  16
33E8:  CLRF   31
33EA:  MOVLW  02
33EC:  MOVWF  1A
33EE:  MOVWF  1C
33F0:  MOVLW  0B
33F2:  MOVWF  19
....................       } 
....................       break; 
33F4:  BRA    3414
....................              
....................        Case 'R':      // Si oprime Derecha 
....................        {   
....................         {delay_ms(500);printf(lcd_putc,"\f");Menu=40;} 
33F6:  MOVLW  02
33F8:  MOVWF  49
33FA:  MOVLW  FA
33FC:  MOVWF  5C
33FE:  CALL   0896
3402:  DECFSZ 49,F
3404:  BRA    33FA
3406:  MOVLW  0C
3408:  MOVWF  56
340A:  CALL   0A2C
340E:  MOVLW  28
3410:  MOVWF  16
....................        } 
....................        break; 
3412:  BRA    3414
....................    } 
....................  } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
3414:  MOVF   16,W
3416:  SUBLW  1E
3418:  BTFSS  FD8.2
341A:  BRA    35B8
....................       if(Cambio==1) 
341C:  DECFSZ 3E,W
341E:  BRA    3450
....................       { 
....................       lcd_gotoxy(1,1); 
3420:  MOVLW  01
3422:  MOVWF  57
3424:  MOVWF  58
3426:  CALL   097A
....................       printf(lcd_putc,"    !Post-Purga!    "); 
342A:  MOVLW  84
342C:  MOVWF  FF6
342E:  MOVLW  07
3430:  MOVWF  FF7
3432:  CALL   0DBE
....................       lcd_gotoxy(1,2); 
3436:  MOVLW  01
3438:  MOVWF  57
343A:  MOVLW  02
343C:  MOVWF  58
343E:  CALL   097A
....................       printf(lcd_putc,"                    "); 
3442:  MOVLW  9A
3444:  MOVWF  FF6
3446:  MOVLW  07
3448:  MOVWF  FF7
344A:  CALL   0DBE
....................       Cambio=0; 
344E:  CLRF   3E
....................       } 
....................               
....................       if(Lectura==1) 
3450:  BTFSS  30.3
3452:  BRA    35B6
....................       { 
....................          Luz_Blanca_off; 
3454:  BCF    F8A.4
3456:  BCF    F93.4
....................          lcd_gotoxy(1,3); 
3458:  MOVLW  01
345A:  MOVWF  57
345C:  MOVLW  03
345E:  MOVWF  58
3460:  CALL   097A
....................          printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos); 
3464:  MOVLW  B0
3466:  MOVWF  FF6
3468:  MOVLW  07
346A:  MOVWF  FF7
346C:  MOVLW  06
346E:  MOVWF  49
3470:  CALL   0DDE
3474:  MOVFF  2C,49
3478:  MOVLW  01
347A:  MOVWF  4A
347C:  CALL   107E
3480:  MOVLW  3A
3482:  MOVWF  56
3484:  CALL   0A2C
3488:  MOVFF  2A,49
348C:  MOVLW  01
348E:  MOVWF  4A
3490:  CALL   107E
3494:  MOVLW  20
3496:  MOVWF  56
3498:  CALL   0A2C
349C:  MOVLW  20
349E:  MOVWF  56
34A0:  CALL   0A2C
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
34A4:  MOVLW  02
34A6:  MOVWF  49
34A8:  GOTO   177C
34AC:  MOVFF  00,49
34B0:  MOVFF  01,4A
34B4:  MOVFF  02,4B
34B8:  MOVFF  03,4C
34BC:  MOVFF  03,50
34C0:  MOVFF  02,4F
34C4:  MOVFF  01,4E
34C8:  MOVFF  00,4D
34CC:  CLRF   54
34CE:  CLRF   53
34D0:  MOVLW  40
34D2:  MOVWF  52
34D4:  MOVLW  81
34D6:  MOVWF  51
34D8:  CALL   141A
34DC:  BNC   35B4
34DE:  MOVF   2A,F
34E0:  BNZ   35B4
34E2:  MOVF   2C,F
34E4:  BNZ   35B4
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
34E6:  MOVLW  46
34E8:  MOVWF  FA9
34EA:  MOVFF  24,FA8
34EE:  BCF    FA6.6
34F0:  BCF    FA6.7
34F2:  BSF    FA6.2
34F4:  MOVF   FF2,W
34F6:  MOVWF  00
34F8:  BCF    FF2.7
34FA:  MOVLB  F
34FC:  MOVLW  55
34FE:  MOVWF  FA7
3500:  MOVLW  AA
3502:  MOVWF  FA7
3504:  BSF    FA6.1
3506:  BTFSC  FA6.1
3508:  BRA    3506
350A:  BCF    FA6.2
350C:  MOVF   00,W
350E:  IORWF  FF2,F
3510:  MOVLW  47
3512:  MOVWF  FA9
3514:  MOVFF  25,FA8
3518:  BCF    FA6.6
351A:  BCF    FA6.7
351C:  BSF    FA6.2
351E:  MOVF   FF2,W
3520:  MOVWF  00
3522:  BCF    FF2.7
3524:  MOVLW  55
3526:  MOVWF  FA7
3528:  MOVLW  AA
352A:  MOVWF  FA7
352C:  BSF    FA6.1
352E:  BTFSC  FA6.1
3530:  BRA    352E
3532:  BCF    FA6.2
3534:  MOVF   00,W
3536:  IORWF  FF2,F
3538:  MOVLW  48
353A:  MOVWF  FA9
353C:  MOVFF  26,FA8
3540:  BCF    FA6.6
3542:  BCF    FA6.7
3544:  BSF    FA6.2
3546:  MOVF   FF2,W
3548:  MOVWF  00
354A:  BCF    FF2.7
354C:  MOVLW  55
354E:  MOVWF  FA7
3550:  MOVLW  AA
3552:  MOVWF  FA7
3554:  BSF    FA6.1
3556:  BTFSC  FA6.1
3558:  BRA    3556
355A:  BCF    FA6.2
355C:  MOVF   00,W
355E:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
3560:  MOVLW  0C
3562:  MOVWF  56
3564:  MOVLB  0
3566:  CALL   0A2C
....................             lcd_gotoxy(1,2); 
356A:  MOVLW  01
356C:  MOVWF  57
356E:  MOVLW  02
3570:  MOVWF  58
3572:  CALL   097A
....................             printf(lcd_putc,"     Proceso      "); 
3576:  MOVLW  C2
3578:  MOVWF  FF6
357A:  MOVLW  07
357C:  MOVWF  FF7
357E:  CALL   0DBE
....................             lcd_gotoxy(1,3); 
3582:  MOVLW  01
3584:  MOVWF  57
3586:  MOVLW  03
3588:  MOVWF  58
358A:  CALL   097A
....................             printf(lcd_putc,"    Finalizado    "); 
358E:  MOVLW  D6
3590:  MOVWF  FF6
3592:  MOVLW  07
3594:  MOVWF  FF7
3596:  CALL   0DBE
....................             delay_ms(2000); 
359A:  MOVLW  08
359C:  MOVWF  49
359E:  MOVLW  FA
35A0:  MOVWF  5C
35A2:  CALL   0896
35A6:  DECFSZ 49,F
35A8:  BRA    359E
....................             printf(lcd_putc,"\f"); 
35AA:  MOVLW  0C
35AC:  MOVWF  56
35AE:  CALL   0A2C
....................             reset_cpu(); 
35B2:  RESET
....................          } 
....................          Lectura=0; 
35B4:  BCF    30.3
....................       } 
....................        
....................    } 
35B6:  BRA    3414
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    while(Menu == 40)   // Menu de apagado de cabina 
....................    { 
35B8:  MOVF   16,W
35BA:  SUBLW  28
35BC:  BNZ   3684
....................     while(Cambio==1) 
....................      { 
35BE:  DECFSZ 3E,W
35C0:  BRA    3624
....................    lcd_gotoxy(1,1); 
35C2:  MOVLW  01
35C4:  MOVWF  57
35C6:  MOVWF  58
35C8:  CALL   097A
....................    printf(lcd_putc,"   Desea apagar     "); 
35CC:  MOVLW  EA
35CE:  MOVWF  FF6
35D0:  MOVLW  07
35D2:  MOVWF  FF7
35D4:  CALL   0DBE
....................    lcd_gotoxy(1,2); 
35D8:  MOVLW  01
35DA:  MOVWF  57
35DC:  MOVLW  02
35DE:  MOVWF  58
35E0:  CALL   097A
....................    printf(lcd_putc,"     la cabina      "); 
35E4:  MOVLW  00
35E6:  MOVWF  FF6
35E8:  MOVLW  08
35EA:  MOVWF  FF7
35EC:  CALL   0DBE
....................    lcd_gotoxy(1,3); 
35F0:  MOVLW  01
35F2:  MOVWF  57
35F4:  MOVLW  03
35F6:  MOVWF  58
35F8:  CALL   097A
....................    printf(lcd_putc,"   > Aceptar        "); 
35FC:  MOVLW  16
35FE:  MOVWF  FF6
3600:  MOVLW  08
3602:  MOVWF  FF7
3604:  CALL   0DBE
....................    lcd_gotoxy(1,4); 
3608:  MOVLW  01
360A:  MOVWF  57
360C:  MOVLW  04
360E:  MOVWF  58
3610:  CALL   097A
....................    printf(lcd_putc,"   < Cancelar       "); 
3614:  MOVLW  2C
3616:  MOVWF  FF6
3618:  MOVLW  08
361A:  MOVWF  FF7
361C:  CALL   0DBE
....................    Cambio=0; 
3620:  CLRF   3E
....................       } 
3622:  BRA    35BE
....................    
....................    lee_pulsad(); 
3624:  CALL   0EEC
....................     
....................    Switch(tecla) 
....................     { 
3628:  MOVF   35,W
362A:  XORLW  52
362C:  BZ    3634
362E:  XORLW  1E
3630:  BZ    3656
3632:  BRA    3682
....................       Case 'R': // Si oprime derecha 
....................       {Lectura=1;Menu=30;Cambio=1;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1;} 
3634:  BSF    30.3
3636:  MOVLW  1E
3638:  MOVWF  16
363A:  MOVLW  01
363C:  MOVWF  3E
363E:  MOVFF  1F,49
3642:  CALL   0DAE
3646:  BCF    F8A.6
3648:  BCF    F93.6
364A:  MOVLW  0C
364C:  MOVWF  56
364E:  CALL   0A2C
3652:  BSF    30.6
....................       break; 
3654:  BRA    3682
....................             
....................              
....................       Case 'L': // Si oprime Izquierda 
....................       {Menu=20;Cambio=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");} 
3656:  MOVLW  14
3658:  MOVWF  16
365A:  MOVLW  01
365C:  MOVWF  3E
365E:  CLRF   31
3660:  MOVLW  02
3662:  MOVWF  1A
3664:  MOVWF  1C
3666:  MOVLW  0B
3668:  MOVWF  19
366A:  MOVLW  02
366C:  MOVWF  49
366E:  MOVLW  FA
3670:  MOVWF  5C
3672:  CALL   0896
3676:  DECFSZ 49,F
3678:  BRA    366E
367A:  MOVLW  0C
367C:  MOVWF  56
367E:  CALL   0A2C
....................     }        
....................    }       
3682:  BRA    35B8
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    While(Menu == 50) // Menu de Purga 
....................    { 
3684:  MOVF   16,W
3686:  SUBLW  32
3688:  BTFSS  FD8.2
368A:  BRA    37B4
....................     if(Cambio==1) 
368C:  DECFSZ 3E,W
368E:  BRA    371C
....................     { 
....................    lcd_gotoxy(1,1); 
3690:  MOVLW  01
3692:  MOVWF  57
3694:  MOVWF  58
3696:  CALL   097A
....................    printf(lcd_putc,"      !Purga!       "); 
369A:  MOVLW  42
369C:  MOVWF  FF6
369E:  MOVLW  08
36A0:  MOVWF  FF7
36A2:  CALL   0DBE
....................    lcd_gotoxy(1,2); 
36A6:  MOVLW  01
36A8:  MOVWF  57
36AA:  MOVLW  02
36AC:  MOVWF  58
36AE:  CALL   097A
....................    printf(lcd_putc,"                    "); 
36B2:  MOVLW  58
36B4:  MOVWF  FF6
36B6:  MOVLW  08
36B8:  MOVWF  FF7
36BA:  CALL   0DBE
....................    lcd_gotoxy(1,3); 
36BE:  MOVLW  01
36C0:  MOVWF  57
36C2:  MOVLW  03
36C4:  MOVWF  58
36C6:  CALL   097A
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos); 
36CA:  MOVLW  6E
36CC:  MOVWF  FF6
36CE:  MOVLW  08
36D0:  MOVWF  FF7
36D2:  MOVLW  06
36D4:  MOVWF  49
36D6:  CALL   0DDE
36DA:  MOVFF  21,49
36DE:  MOVLW  01
36E0:  MOVWF  4A
36E2:  CALL   107E
36E6:  MOVLW  3A
36E8:  MOVWF  56
36EA:  CALL   0A2C
36EE:  MOVFF  28,49
36F2:  MOVLW  01
36F4:  MOVWF  4A
36F6:  CALL   107E
36FA:  MOVLW  20
36FC:  MOVWF  56
36FE:  CALL   0A2C
3702:  MOVLW  20
3704:  MOVWF  56
3706:  CALL   0A2C
370A:  MOVLW  20
370C:  MOVWF  56
370E:  CALL   0A2C
....................    Cambio=0; 
3712:  CLRF   3E
....................    Motor_on; 
3714:  BSF    F8A.5
3716:  BCF    F93.5
....................    Luz_Blanca_off; 
3718:  BCF    F8A.4
371A:  BCF    F93.4
....................      } 
....................       
....................     if(Lectura==1) 
371C:  BTFSS  30.3
371E:  BRA    3776
....................      { 
....................       lcd_gotoxy(1,3); 
3720:  MOVLW  01
3722:  MOVWF  57
3724:  MOVLW  03
3726:  MOVWF  58
3728:  CALL   097A
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos); 
372C:  MOVLW  82
372E:  MOVWF  FF6
3730:  MOVLW  08
3732:  MOVWF  FF7
3734:  MOVLW  06
3736:  MOVWF  49
3738:  CALL   0DDE
373C:  MOVFF  21,49
3740:  MOVLW  01
3742:  MOVWF  4A
3744:  CALL   107E
3748:  MOVLW  3A
374A:  MOVWF  56
374C:  CALL   0A2C
3750:  MOVFF  28,49
3754:  MOVLW  01
3756:  MOVWF  4A
3758:  CALL   107E
375C:  MOVLW  20
375E:  MOVWF  56
3760:  CALL   0A2C
3764:  MOVLW  20
3766:  MOVWF  56
3768:  CALL   0A2C
376C:  MOVLW  20
376E:  MOVWF  56
3770:  CALL   0A2C
....................       Lectura=0; 
3774:  BCF    30.3
....................      } 
....................     lee_pulsad(); 
3776:  CALL   0EEC
....................     if(Cambio==1) 
377A:  DECFSZ 3E,W
377C:  BRA    37B2
....................      if((tecla=='L') || ((purga_minutos==0) && (purga_segundos==0))) 
377E:  MOVF   35,W
3780:  SUBLW  4C
3782:  BZ    378C
3784:  MOVF   21,F
3786:  BNZ   37B2
3788:  MOVF   28,F
378A:  BNZ   37B2
....................      {tiempo_purga=0;Motor_on;Luz_Blanca_on;estadomv=1;estadofl=1;Menu=20;Cambio=1;delay_ms(500);} 
378C:  BCF    30.5
378E:  BSF    F8A.5
3790:  BCF    F93.5
3792:  BSF    F8A.4
3794:  BCF    F93.4
3796:  BSF    2E.1
3798:  BSF    2E.0
379A:  MOVLW  14
379C:  MOVWF  16
379E:  MOVLW  01
37A0:  MOVWF  3E
37A2:  MOVLW  02
37A4:  MOVWF  49
37A6:  MOVLW  FA
37A8:  MOVWF  5C
37AA:  CALL   0896
37AE:  DECFSZ 49,F
37B0:  BRA    37A6
....................   
....................   }       
37B2:  BRA    3684
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................   /* if(tiemporeset>=20) 
....................    { 
....................       lcd_init(); 
....................       tiemporeset=0; 
....................    }*/  
....................  
....................    if(ModoSleep==1) 
37B4:  BTFSS  30.1
37B6:  BRA    37C0
....................       {intensidadpantalla(0);sleep();} 
37B8:  CLRF   49
37BA:  CALL   0DAE
37BE:  SLEEP 
....................  
....................    if(Menu!=0 || Menu!=30 || Menu!=50) 
37C0:  MOVF   16,F
37C2:  BNZ   37D0
37C4:  MOVF   16,W
37C6:  SUBLW  1E
37C8:  BNZ   37D0
37CA:  MOVF   16,W
37CC:  SUBLW  32
37CE:  BZ    3846
....................    { 
....................       if(Lectura==1) 
37D0:  BTFSS  30.3
37D2:  BRA    3844
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
37D4:  CLRF   4B
37D6:  MOVFF  26,4A
37DA:  BTFSC  4A.7
37DC:  DECF   4B,F
37DE:  CALL   1734
37E2:  MOVFF  42,50
37E6:  MOVFF  41,4F
37EA:  MOVFF  40,4E
37EE:  MOVFF  3F,4D
37F2:  MOVFF  03,54
37F6:  MOVFF  02,53
37FA:  MOVFF  01,52
37FE:  MOVFF  00,51
3802:  CALL   141A
3806:  BC    380A
3808:  BNZ   3836
380A:  MOVF   16,W
380C:  SUBLW  14
380E:  BNZ   3836
....................          { 
....................              if(estadoalarma==1) 
3810:  BTFSS  2E.2
3812:  BRA    381A
....................              { 
....................                 Alarma_on; 
3814:  BSF    F8A.6
3816:  BCF    F93.6
....................              } 
....................              else 
3818:  BRA    381E
....................              { 
....................                 Alarma_off; 
381A:  BCF    F8A.6
381C:  BCF    F93.6
....................              } 
....................              estadopantalla=!estadopantalla; 
381E:  BTG    2F.2
....................              if(estadopantalla==1) 
3820:  BTFSS  2F.2
3822:  BRA    382E
....................              {intensidadpantalla(contraste);} 
3824:  MOVFF  1F,49
3828:  CALL   0DAE
....................              else 
382C:  BRA    3834
....................              {intensidadpantalla(0);} 
382E:  CLRF   49
3830:  CALL   0DAE
....................          } 
....................          else 
3834:  BRA    3842
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
3836:  MOVFF  1F,49
383A:  CALL   0DAE
383E:  BCF    F8A.6
3840:  BCF    F93.6
....................          } 
....................          Lectura=0; 
3842:  BCF    30.3
....................       } 
....................       //Lectura=0; 
....................    }    
....................    else 
3844:  BRA    3852
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
3846:  MOVFF  1F,49
384A:  CALL   0DAE
384E:  BCF    F8A.6
3850:  BCF    F93.6
....................    } 
....................     } 
3852:  GOTO   1ADC
.................... } 
....................  
3856:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
