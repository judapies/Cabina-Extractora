CCS PCH C Compiler, Version 4.104, 5967               17-nov.-18 08:26

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2018\Cabina ExtractoraBajita 120 GrupoSala #0045878XX\Firmware\Cabina_Extractora.lst

               ROM used: 17658 bytes (54%)
                         Largest free fragment is 15106
               RAM used: 212 (10%) at main() level
                         236 (12%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2420
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0198
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////              JUDAPIES-dielecingenieria.com                         //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#define SIMU 1 
.................... #ifdef SIMU 
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=4000000) 
.................... #else 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
08EA:  CLRF   FEA
08EC:  MOVLW  E3
08EE:  MOVWF  FE9
08F0:  MOVF   FEF,W
08F2:  BZ    0910
08F4:  MOVLW  0F
08F6:  MOVWF  01
08F8:  CLRF   00
08FA:  DECFSZ 00,F
08FC:  BRA    08FA
08FE:  DECFSZ 01,F
0900:  BRA    08F8
0902:  MOVLW  8F
0904:  MOVWF  00
0906:  DECFSZ 00,F
0908:  BRA    0906
090A:  NOP   
090C:  DECFSZ FEF,F
090E:  BRA    08F4
0910:  RETLW  00
.................... #define FAST 1 
.................... #endif 
.................... #define use_portd_lcd TRUE 
.................... #include <LCD420PIC18F.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //           LIBRERIA PARA CONTROL DE LCD 4X20 con PIC 18F4550                // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //      Se debe llamar a este archivo mediante #include <LCD420PIC18_RyP.c>   // 
.................... //                                                                            // 
.................... //      Es necesariodefinir el puerto a utilizar para el teclado mediante:    // 
.................... //      #define use_portb_lcd TRUE   //para el puerto B                       // 
.................... //      #define use_portd_lcd TRUE   //para el puerto D                       // 
.................... //                                                                            // 
.................... //      FUNCIONES:                                                            // 
.................... //      void lcd_init(void);         //Inicializa el lcd.                     // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //                            RobotyPic 2013                                  // 
.................... //                    http://robotypic.blogspot.com/                          // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... //Elección del puerto y pines 
....................  
.................... #ifdef use_portd_lcd 
....................  
.................... #define LCD_DB4  PIN_D4 
.................... #define LCD_DB5  PIN_D5 
.................... #define LCD_DB6  PIN_D6 
.................... #define LCD_DB7  PIN_D7 
.................... #define LCD_E    PIN_D2 
.................... #define LCD_RS   PIN_D0 
.................... #define LCD_RW   PIN_D1 
....................  
.................... #else 
....................  
.................... #define LCD_DB4  PIN_B4 
.................... #define LCD_DB5  PIN_B5 
.................... #define LCD_DB6  PIN_B6 
.................... #define LCD_DB7  PIN_B7 
.................... #define LCD_E    PIN_B2 
.................... #define LCD_RS   PIN_B0 
.................... #define LCD_RW   PIN_B1 
....................  
.................... #endif 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW  1     
....................  
.................... // If you use the PLL of Microcontroller to increase the 
.................... // clock to 48MHz use this define, else comment out the 
.................... // following line. 
....................  
.................... #define lcd_type 2 
.................... #define lcd_line_two 0x40 
....................  
.................... BYTE lcdline; 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                      // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0912:  BTFSC  xE4.0
0914:  BRA    091A
0916:  BCF    F8C.4
0918:  BRA    091C
091A:  BSF    F8C.4
091C:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
091E:  BTFSC  xE4.1
0920:  BRA    0926
0922:  BCF    F8C.5
0924:  BRA    0928
0926:  BSF    F8C.5
0928:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4));   
092A:  BTFSC  xE4.2
092C:  BRA    0932
092E:  BCF    F8C.6
0930:  BRA    0934
0932:  BSF    F8C.6
0934:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8));   
0936:  BTFSC  xE4.3
0938:  BRA    093E
093A:  BCF    F8C.7
093C:  BRA    0940
093E:  BSF    F8C.7
0940:  BCF    F95.7
....................  
....................  #ifdef FAST 
....................  delay_cycles(25); 
0942:  MOVLW  08
0944:  MOVWF  00
0946:  DECFSZ 00,F
0948:  BRA    0946
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  output_high(LCD_E); 
094A:  BCF    F95.2
094C:  BSF    F8C.2
....................  #ifdef FAST 
....................  delay_us(50); 
094E:  MOVLW  C7
0950:  MOVWF  00
0952:  DECFSZ 00,F
0954:  BRA    0952
0956:  BRA    0958
....................  #else 
....................  delay_us(2); 
....................  #endif 
....................  output_low(LCD_E); 
0958:  BCF    F95.2
095A:  BCF    F8C.2
.................... } 
095C:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................    
.................... output_high(LCD_E); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................   
.................... output_low(LCD_E); 
....................    
.................... return(retval);   
.................... }   
.................... #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
095E:  BCF    F95.0
0960:  BCF    F8C.0
....................  
.................... //#ifdef USE_LCD_RW 
.................... //while(bit_test(lcd_read_byte(),7)) ; 
.................... //#else 
.................... #ifdef FAST 
.................... delay_ms(2);  
0962:  MOVLW  02
0964:  MOVWF  xE3
0966:  RCALL  08EA
.................... #else 
.................... delay_us(60); 
.................... #endif 
.................... //#endif 
....................  
.................... if(address) 
0968:  MOVF   xE1,F
096A:  BZ    0972
....................   output_high(LCD_RS); 
096C:  BCF    F95.0
096E:  BSF    F8C.0
.................... else 
0970:  BRA    0976
....................   output_low(LCD_RS); 
0972:  BCF    F95.0
0974:  BCF    F8C.0
....................   
....................  #ifdef FAST 
....................  delay_cycles(25); 
0976:  MOVLW  08
0978:  MOVWF  00
097A:  DECFSZ 00,F
097C:  BRA    097A
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
097E:  BCF    F95.1
0980:  BCF    F8C.1
.................... #ifdef FAST 
....................  delay_cycles(25); 
0982:  MOVLW  08
0984:  MOVWF  00
0986:  DECFSZ 00,F
0988:  BRA    0986
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
.................... #endif 
....................  
.................... output_low(LCD_E); 
098A:  BCF    F95.2
098C:  BCF    F8C.2
....................  
.................... lcd_send_nibble(n >> 4); 
098E:  SWAPF  xE2,W
0990:  MOVWF  xE3
0992:  MOVLW  0F
0994:  ANDWF  xE3,F
0996:  MOVFF  E3,E4
099A:  RCALL  0912
.................... lcd_send_nibble(n & 0xf); 
099C:  MOVF   xE2,W
099E:  ANDLW  0F
09A0:  MOVWF  xE3
09A2:  MOVWF  xE4
09A4:  RCALL  0912
.................... } 
09A6:  RETLW  00
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
09A8:  BCF    F95.0
09AA:  BCF    F8C.0
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
09AC:  BCF    F95.1
09AE:  BCF    F8C.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
09B0:  BCF    F95.2
09B2:  BCF    F8C.2
....................  
.................... delay_ms(15); 
09B4:  MOVLW  0F
09B6:  MOVWF  xE3
09B8:  RCALL  08EA
....................  
.................... for(i=0 ;i < 3; i++) 
09BA:  CLRF   xD0
09BC:  MOVF   xD0,W
09BE:  SUBLW  02
09C0:  BNC   09D2
....................   { 
....................     lcd_send_nibble(0x03); 
09C2:  MOVLW  03
09C4:  MOVWF  xE4
09C6:  RCALL  0912
....................     delay_ms(5); 
09C8:  MOVLW  05
09CA:  MOVWF  xE3
09CC:  RCALL  08EA
....................   } 
09CE:  INCF   xD0,F
09D0:  BRA    09BC
....................  
.................... lcd_send_nibble(0x02); 
09D2:  MOVLW  02
09D4:  MOVWF  xE4
09D6:  RCALL  0912
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
09D8:  CLRF   xD0
09DA:  MOVF   xD0,W
09DC:  SUBLW  03
09DE:  BNC   09FE
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
09E0:  CLRF   03
09E2:  MOVF   xD0,W
09E4:  MOVFF  FF2,D1
09E8:  BCF    FF2.7
09EA:  CALL   0096
09EE:  BTFSC  xD1.7
09F0:  BSF    FF2.7
09F2:  MOVWF  xD1
09F4:  CLRF   xE1
09F6:  MOVWF  xE2
09F8:  RCALL  095E
....................    
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
....................     #endif 
....................   } 
09FA:  INCF   xD0,F
09FC:  BRA    09DA
....................  
.................... } 
09FE:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) 
.................... { 
....................   BYTE address; 
....................   
....................  
....................   switch(y) 
....................   { 
0A00:  MOVLW  01
0A02:  SUBWF  xDF,W
0A04:  ADDLW  FC
0A06:  BC    0A36
0A08:  ADDLW  04
0A0A:  GOTO   0A46
....................     case 1 : address=0x80; 
0A0E:  MOVLW  80
0A10:  MOVWF  xE0
....................     lcdline=1; 
0A12:  MOVLW  01
0A14:  MOVWF  16
....................     break; 
0A16:  BRA    0A36
....................     case 2 : address=0xc0; 
0A18:  MOVLW  C0
0A1A:  MOVWF  xE0
....................     lcdline=2; 
0A1C:  MOVLW  02
0A1E:  MOVWF  16
....................     break; 
0A20:  BRA    0A36
....................     case 3 : address=0x94; 
0A22:  MOVLW  94
0A24:  MOVWF  xE0
....................     lcdline=3; 
0A26:  MOVLW  03
0A28:  MOVWF  16
....................     break; 
0A2A:  BRA    0A36
....................     case 4 : address=0xd4; 
0A2C:  MOVLW  D4
0A2E:  MOVWF  xE0
....................     lcdline=4; 
0A30:  MOVLW  04
0A32:  MOVWF  16
....................     break; 
0A34:  BRA    0A36
....................   } 
....................  
....................   address+=x-1; 
0A36:  MOVLW  01
0A38:  SUBWF  xDE,W
0A3A:  ADDWF  xE0,F
....................   lcd_send_byte(0,address); 
0A3C:  CLRF   xE1
0A3E:  MOVFF  E0,E2
0A42:  RCALL  095E
.................... } 
0A44:  RETLW  00
....................  
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    if(c=='ñ') 
*
0A72:  MOVF   xDD,W
0A74:  SUBLW  F1
0A76:  BNZ   0A7C
....................     c=238; 
0A78:  MOVLW  EE
0A7A:  MOVWF  xDD
....................  switch(c) 
....................   { 
0A7C:  MOVF   xDD,W
0A7E:  XORLW  0C
0A80:  BZ    0A8C
0A82:  XORLW  06
0A84:  BZ    0AA0
0A86:  XORLW  02
0A88:  BZ    0ABC
0A8A:  BRA    0AC6
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0A8C:  CLRF   xE1
0A8E:  MOVLW  01
0A90:  MOVWF  xE2
0A92:  RCALL  095E
....................       lcdline=1; 
0A94:  MOVLW  01
0A96:  MOVWF  16
....................       delay_ms(2); 
0A98:  MOVLW  02
0A9A:  MOVWF  xE3
0A9C:  RCALL  08EA
....................       break; 
0A9E:  BRA    0AD2
....................    
....................     case '\n': 
....................       lcd_gotoxy(1,++lcdline); 
0AA0:  INCF   16,F
0AA2:  MOVLW  01
0AA4:  MOVWF  xDE
0AA6:  MOVFF  16,DF
0AAA:  RCALL  0A00
....................       if (lcdline>4) lcd_gotoxy(1,1); 
0AAC:  MOVF   16,W
0AAE:  SUBLW  04
0AB0:  BC    0ABA
0AB2:  MOVLW  01
0AB4:  MOVWF  xDE
0AB6:  MOVWF  xDF
0AB8:  RCALL  0A00
....................       break; 
0ABA:  BRA    0AD2
....................    
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
0ABC:  CLRF   xE1
0ABE:  MOVLW  10
0AC0:  MOVWF  xE2
0AC2:  RCALL  095E
....................       break; 
0AC4:  BRA    0AD2
....................    
....................     default: 
....................       lcd_send_byte(1,c); 
0AC6:  MOVLW  01
0AC8:  MOVWF  xE1
0ACA:  MOVFF  DD,E2
0ACE:  RCALL  095E
....................       break; 
0AD0:  BRA    0AD2
....................   } 
.................... } 
0AD2:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... //while(bit_test(lcd_read_byte(),7));  
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... //#include <LCD420.c> 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... //#define DAMPER 1 
....................  
.................... // Definición de teclado - NO 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   UP            input(PIN_A5) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... #ifdef DAMPER 
.................... int8 n_opcionH=11; 
.................... #else 
.................... int8 n_opcionH=7; 
.................... #endif 
.................... int8 Menu=100,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 FeedbackDamper=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... short imprimio=0,Ruido=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero_fabrica=203.0; 
.................... short ModoSleep,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,Dif16=0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
.................... char letra;  
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... #include <Funciones.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1EF2:  RLCF   xD1,W
1EF4:  MOVWF  00
1EF6:  RLCF   00,F
1EF8:  MOVLW  FC
1EFA:  ANDWF  00,F
1EFC:  MOVFF  00,01
1F00:  MOVF   FC2,W
1F02:  ANDLW  C3
1F04:  IORWF  00,W
1F06:  MOVWF  FC2
1F08:  MOVLW  0A
1F0A:  MOVWF  xE3
1F0C:  CALL   08EA
1F10:  BSF    FC2.1
1F12:  BTFSC  FC2.1
1F14:  BRA    1F12
1F16:  MOVFF  FC4,03
1F1A:  MOVFF  FC3,D6
1F1E:  MOVFF  FC4,D7
1F22:  CALL   0B1E
1F26:  MOVFF  03,D5
1F2A:  MOVFF  02,D4
1F2E:  MOVFF  01,D3
1F32:  MOVFF  00,D2
1F36:  MOVFF  D2,00
1F3A:  MOVFF  D3,01
1F3E:  MOVFF  D4,02
1F42:  MOVFF  D5,03
.................... } 
1F46:  RETLW  00
....................  
.................... void intensidadpantalla(int x){ 
....................    if(x==0)    
*
08DA:  MOVF   xD0,F
08DC:  BNZ   08E4
....................       Pantalla_off; 
08DE:  BCF    F8B.1
08E0:  BCF    F94.1
....................    else 
08E2:  BRA    08E8
....................       Pantalla_on; 
08E4:  BSF    F8B.1
08E6:  BCF    F94.1
.................... } 
08E8:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media){ 
....................     //Voltaje0=sensores(0)*5/1023; 
....................     //Voltaje1=sensores(1)*5/1023; 
....................     //Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     //TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     //TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................      
....................     if(negativo==10) 
*
1F50:  MOVF   2C,W
1F52:  SUBLW  0A
1F54:  BNZ   1FB2
....................       x_uno=sensores(0)+Diferencia; 
1F56:  CLRF   xD1
1F58:  RCALL  1EF2
1F5A:  MOVFF  00,D1
1F5E:  MOVFF  01,D2
1F62:  MOVFF  02,D3
1F66:  MOVFF  03,D4
1F6A:  MOVFF  FEA,D6
1F6E:  MOVFF  FE9,D5
1F72:  BCF    FD8.1
1F74:  MOVFF  03,DA
1F78:  MOVFF  02,D9
1F7C:  MOVFF  01,D8
1F80:  MOVFF  00,D7
1F84:  MOVFF  97,DE
1F88:  MOVFF  96,DD
1F8C:  MOVFF  95,DC
1F90:  MOVFF  94,DB
1F94:  CALL   0CAE
1F98:  MOVFF  D6,FEA
1F9C:  MOVFF  D5,FE9
1FA0:  MOVFF  03,7B
1FA4:  MOVFF  02,7A
1FA8:  MOVFF  01,79
1FAC:  MOVFF  00,78
....................     else if(negativo==20) 
1FB0:  BRA    2012
1FB2:  MOVF   2C,W
1FB4:  SUBLW  14
1FB6:  BNZ   2012
....................       x_uno=sensores(0)-Diferencia; 
1FB8:  CLRF   xD1
1FBA:  RCALL  1EF2
1FBC:  MOVFF  00,D1
1FC0:  MOVFF  01,D2
1FC4:  MOVFF  02,D3
1FC8:  MOVFF  03,D4
1FCC:  MOVFF  FEA,D6
1FD0:  MOVFF  FE9,D5
1FD4:  BSF    FD8.1
1FD6:  MOVFF  03,DA
1FDA:  MOVFF  02,D9
1FDE:  MOVFF  01,D8
1FE2:  MOVFF  00,D7
1FE6:  MOVFF  97,DE
1FEA:  MOVFF  96,DD
1FEE:  MOVFF  95,DC
1FF2:  MOVFF  94,DB
1FF6:  CALL   0CAE
1FFA:  MOVFF  D6,FEA
1FFE:  MOVFF  D5,FE9
2002:  MOVFF  03,7B
2006:  MOVFF  02,7A
200A:  MOVFF  01,79
200E:  MOVFF  00,78
....................      
....................     x_cuadrado=x_uno*x_uno; 
2012:  MOVFF  7B,E0
2016:  MOVFF  7A,DF
201A:  MOVFF  79,DE
201E:  MOVFF  78,DD
2022:  MOVFF  7B,E4
2026:  MOVFF  7A,E3
202A:  MOVFF  79,E2
202E:  MOVFF  78,E1
2032:  RCALL  1B48
2034:  MOVFF  03,7F
2038:  MOVFF  02,7E
203C:  MOVFF  01,7D
2040:  MOVFF  00,7C
....................     x_cubo=x_uno*x_cuadrado; 
2044:  MOVFF  7B,E0
2048:  MOVFF  7A,DF
204C:  MOVFF  79,DE
2050:  MOVFF  78,DD
2054:  MOVFF  7F,E4
2058:  MOVFF  7E,E3
205C:  MOVFF  7D,E2
2060:  MOVFF  7C,E1
2064:  RCALL  1B48
2066:  MOVFF  03,83
206A:  MOVFF  02,82
206E:  MOVFF  01,81
2072:  MOVFF  00,80
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
2076:  MOVFF  83,E0
207A:  MOVFF  82,DF
207E:  MOVFF  81,DE
2082:  MOVFF  80,DD
2086:  MOVFF  5F,E4
208A:  MOVFF  5E,E3
208E:  MOVFF  5D,E2
2092:  MOVFF  5C,E1
2096:  RCALL  1B48
2098:  MOVFF  00,D1
209C:  MOVFF  01,D2
20A0:  MOVFF  02,D3
20A4:  MOVFF  03,D4
20A8:  MOVFF  7F,E0
20AC:  MOVFF  7E,DF
20B0:  MOVFF  7D,DE
20B4:  MOVFF  7C,DD
20B8:  MOVFF  63,E4
20BC:  MOVFF  62,E3
20C0:  MOVFF  61,E2
20C4:  MOVFF  60,E1
20C8:  RCALL  1B48
20CA:  BCF    FD8.1
20CC:  MOVFF  D4,DA
20D0:  MOVFF  D3,D9
20D4:  MOVFF  D2,D8
20D8:  MOVFF  D1,D7
20DC:  MOVFF  03,DE
20E0:  MOVFF  02,DD
20E4:  MOVFF  01,DC
20E8:  MOVFF  00,DB
20EC:  CALL   0CAE
20F0:  MOVFF  00,D1
20F4:  MOVFF  01,D2
20F8:  MOVFF  02,D3
20FC:  MOVFF  03,D4
2100:  MOVFF  7B,E0
2104:  MOVFF  7A,DF
2108:  MOVFF  79,DE
210C:  MOVFF  78,DD
2110:  MOVFF  67,E4
2114:  MOVFF  66,E3
2118:  MOVFF  65,E2
211C:  MOVFF  64,E1
2120:  RCALL  1B48
2122:  BCF    FD8.1
2124:  MOVFF  D4,DA
2128:  MOVFF  D3,D9
212C:  MOVFF  D2,D8
2130:  MOVFF  D1,D7
2134:  MOVFF  03,DE
2138:  MOVFF  02,DD
213C:  MOVFF  01,DC
2140:  MOVFF  00,DB
2144:  CALL   0CAE
2148:  MOVFF  00,D1
214C:  MOVFF  01,D2
2150:  MOVFF  02,D3
2154:  MOVFF  03,D4
2158:  BCF    FD8.1
215A:  MOVFF  03,DA
215E:  MOVFF  02,D9
2162:  MOVFF  01,D8
2166:  MOVFF  00,D7
216A:  MOVFF  6B,DE
216E:  MOVFF  6A,DD
2172:  MOVFF  69,DC
2176:  MOVFF  68,DB
217A:  CALL   0CAE
217E:  MOVFF  03,8F
2182:  MOVFF  02,8E
2186:  MOVFF  01,8D
218A:  MOVFF  00,8C
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
218E:  BSF    FD8.1
2190:  MOVFF  8F,DA
2194:  MOVFF  8E,D9
2198:  MOVFF  8D,D8
219C:  MOVFF  8C,D7
21A0:  MOVLW  0A
21A2:  MOVWF  xDE
21A4:  MOVLW  D7
21A6:  MOVWF  xDD
21A8:  MOVLW  23
21AA:  MOVWF  xDC
21AC:  MOVLW  7B
21AE:  MOVWF  xDB
21B0:  CALL   0CAE
21B4:  MOVFF  03,8F
21B8:  MOVFF  02,8E
21BC:  MOVFF  01,8D
21C0:  MOVFF  00,8C
....................      
....................     if(Velocidad<0.0) 
21C4:  MOVFF  8F,D7
21C8:  MOVFF  8E,D6
21CC:  MOVFF  8D,D5
21D0:  MOVFF  8C,D4
21D4:  CLRF   xDB
21D6:  CLRF   xDA
21D8:  CLRF   xD9
21DA:  CLRF   xD8
21DC:  CALL   1348
21E0:  BNC   21EA
....................       Velocidad=0.0; 
21E2:  CLRF   x8F
21E4:  CLRF   x8E
21E6:  CLRF   x8D
21E8:  CLRF   x8C
....................       
....................      if(l>=media) 
21EA:  MOVF   xD0,W
21EC:  SUBWF  28,W
21EE:  BNC   21F2
....................        l=0; 
21F0:  CLRF   28
....................       
....................      promedio[l]=Velocidad;l++; 
21F2:  MOVF   28,W
21F4:  MULLW  04
21F6:  MOVF   FF3,W
21F8:  CLRF   03
21FA:  ADDLW  A0
21FC:  MOVWF  FE9
21FE:  MOVLW  00
2200:  ADDWFC 03,W
2202:  MOVWF  FEA
2204:  MOVFF  8C,FEF
2208:  MOVFF  8D,FEC
220C:  MOVFF  8E,FEC
2210:  MOVFF  8F,FEC
2214:  INCF   28,F
....................      Flujo2=0; 
2216:  CLRF   x73
2218:  CLRF   x72
221A:  CLRF   x71
221C:  CLRF   x70
....................       
....................      for(h=0;h<=(media-1);h++){ 
221E:  CLRF   29
2220:  MOVLW  01
2222:  SUBWF  xD0,W
2224:  SUBWF  29,W
2226:  BZ    222A
2228:  BC    2296
....................         Flujo2+=promedio[h]; 
222A:  MOVF   29,W
222C:  MULLW  04
222E:  MOVF   FF3,W
2230:  CLRF   03
2232:  ADDLW  A0
2234:  MOVWF  FE9
2236:  MOVLW  00
2238:  ADDWFC 03,W
223A:  MOVWF  FEA
223C:  MOVFF  FEF,00
2240:  MOVFF  FEC,01
2244:  MOVFF  FEC,02
2248:  MOVFF  FEC,03
224C:  MOVFF  FEA,D2
2250:  MOVFF  FE9,D1
2254:  BCF    FD8.1
2256:  MOVFF  73,DA
225A:  MOVFF  72,D9
225E:  MOVFF  71,D8
2262:  MOVFF  70,D7
2266:  MOVFF  03,DE
226A:  MOVFF  02,DD
226E:  MOVFF  01,DC
2272:  MOVFF  00,DB
2276:  CALL   0CAE
227A:  MOVFF  D2,FEA
227E:  MOVFF  D1,FE9
2282:  MOVFF  03,73
2286:  MOVFF  02,72
228A:  MOVFF  01,71
228E:  MOVFF  00,70
....................      }  
2292:  INCF   29,F
2294:  BRA    2220
....................    
....................      Flujo2=(Flujo2/media)*Ajuste1; 
2296:  CLRF   xD7
2298:  MOVFF  D0,D6
229C:  CALL   0B1E
22A0:  MOVFF  73,D4
22A4:  MOVFF  72,D3
22A8:  MOVFF  71,D2
22AC:  MOVFF  70,D1
22B0:  MOVFF  03,D8
22B4:  MOVFF  02,D7
22B8:  MOVFF  01,D6
22BC:  MOVFF  00,D5
22C0:  CALL   0B54
22C4:  MOVFF  00,D1
22C8:  MOVFF  01,D2
22CC:  MOVFF  02,D3
22D0:  MOVFF  03,D4
22D4:  MOVFF  03,E0
22D8:  MOVFF  02,DF
22DC:  MOVFF  01,DE
22E0:  MOVFF  00,DD
22E4:  MOVFF  9B,E4
22E8:  MOVFF  9A,E3
22EC:  MOVFF  99,E2
22F0:  MOVFF  98,E1
22F4:  RCALL  1B48
22F6:  MOVFF  03,73
22FA:  MOVFF  02,72
22FE:  MOVFF  01,71
2302:  MOVFF  00,70
....................      return Flujo2; 
2306:  MOVFF  70,00
230A:  MOVFF  71,01
230E:  MOVFF  72,02
2312:  MOVFF  73,03
.................... } 
2316:  GOTO   443C (RETURN)
....................  
.................... void controlar_flujo(void){ 
....................    if(Automa==20 && estadomv==1){ 
231A:  MOVF   2D,W
231C:  SUBLW  14
231E:  BTFSS  FD8.2
2320:  BRA    2404
2322:  BTFSS  3C.1
2324:  BRA    2404
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
2326:  BSF    FD8.1
2328:  MOVFF  4D,DA
232C:  MOVFF  4C,D9
2330:  MOVFF  4B,D8
2334:  MOVFF  4A,D7
2338:  MOVFF  6F,DE
233C:  MOVFF  6E,DD
2340:  MOVFF  6D,DC
2344:  MOVFF  6C,DB
2348:  CALL   0CAE
234C:  MOVFF  03,9F
2350:  MOVFF  02,9E
2354:  MOVFF  01,9D
2358:  MOVFF  00,9C
....................       if(error<0.2&&error>-0.2){ 
235C:  MOVFF  9F,D7
2360:  MOVFF  9E,D6
2364:  MOVFF  9D,D5
2368:  MOVFF  9C,D4
236C:  MOVLW  CD
236E:  MOVWF  xDB
2370:  MOVLW  CC
2372:  MOVWF  xDA
2374:  MOVLW  4C
2376:  MOVWF  xD9
2378:  MOVLW  7C
237A:  MOVWF  xD8
237C:  CALL   1348
2380:  BNC   23A8
2382:  MOVLW  CD
2384:  MOVWF  xD7
2386:  MOVLW  CC
2388:  MOVWF  xD6
238A:  MOVWF  xD5
238C:  MOVLW  7C
238E:  MOVWF  xD4
2390:  MOVFF  9F,DB
2394:  MOVFF  9E,DA
2398:  MOVFF  9D,D9
239C:  MOVFF  9C,D8
23A0:  CALL   1348
23A4:  BNC   23A8
....................       }else{ 
23A6:  BRA    23EC
....................          if(error>0.0) 
23A8:  CLRF   xD7
23AA:  CLRF   xD6
23AC:  CLRF   xD5
23AE:  CLRF   xD4
23B0:  MOVFF  9F,DB
23B4:  MOVFF  9E,DA
23B8:  MOVFF  9D,D9
23BC:  MOVFF  9C,D8
23C0:  CALL   1348
23C4:  BNC   23CA
....................             tmp+=1; 
23C6:  MOVLW  01
23C8:  ADDWF  2A,F
....................                 
....................          if(error<-0.0) 
23CA:  MOVFF  9F,D7
23CE:  MOVFF  9E,D6
23D2:  MOVFF  9D,D5
23D6:  MOVFF  9C,D4
23DA:  CLRF   xDB
23DC:  CLRF   xDA
23DE:  CLRF   xD9
23E0:  CLRF   xD8
23E2:  CALL   1348
23E6:  BNC   23EC
....................             tmp-=1;   
23E8:  MOVLW  01
23EA:  SUBWF  2A,F
....................       } 
....................        
....................       if(tmp>251) 
23EC:  MOVF   2A,W
23EE:  SUBLW  FB
23F0:  BC    23F6
....................          tmp=251; 
23F2:  MOVLW  FB
23F4:  MOVWF  2A
....................       if(tmp<4)          
23F6:  MOVF   2A,W
23F8:  SUBLW  03
23FA:  BNC   2400
....................          tmp=4;       
23FC:  MOVLW  04
23FE:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
2400:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Manual==20){ 
2404:  MOVF   2E,W
2406:  SUBLW  14
2408:  BNZ   2412
....................       tmp=251; 
240A:  MOVLW  FB
240C:  MOVWF  2A
....................       set_pwm1_duty (tmp); 
240E:  MOVFF  2A,FBE
....................    } 
....................     
....................    if(Semi==20){ 
2412:  MOVF   2F,W
2414:  SUBLW  14
2416:  BNZ   241C
....................       set_pwm1_duty (ValorSemi); 
2418:  MOVFF  30,FBE
....................    } 
.................... } 
241C:  GOTO   4450 (RETURN)
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................    #ifdef DAMPER  
....................    if(x==1) 
....................    {if(estadoalarma==0) 
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
....................    if(estadoalarma==1) 
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
....................    } 
....................     
....................    if(x==2) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
....................     
....................    if(x==3) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
....................     
....................    if(x==4) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
....................     
....................    if(x==5) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
....................     
....................    if(x==6) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
....................     
....................    if(x==7) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
....................     
....................    if(x==8) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
....................     
....................    if(x==9) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
....................     
....................    if(x==10) 
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
....................    #else 
....................    if(x==1) 
*
1A16:  DECFSZ xD1,W
1A18:  BRA    1A4E
....................    {if(estadoalarma==0) 
1A1A:  BTFSC  3C.2
1A1C:  BRA    1A34
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1A1E:  MOVLW  02
1A20:  MOVWF  xDE
1A22:  MOVFF  D2,DF
1A26:  CALL   0A00
1A2A:  MOVLW  B4
1A2C:  MOVWF  FF6
1A2E:  MOVLW  00
1A30:  MOVWF  FF7
1A32:  RCALL  18DC
....................    if(estadoalarma==1) 
1A34:  BTFSS  3C.2
1A36:  BRA    1A4E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1A38:  MOVLW  02
1A3A:  MOVWF  xDE
1A3C:  MOVFF  D2,DF
1A40:  CALL   0A00
1A44:  MOVLW  C8
1A46:  MOVWF  FF6
1A48:  MOVLW  00
1A4A:  MOVWF  FF7
1A4C:  RCALL  18DC
....................    } 
....................     
....................    if(x==2) 
1A4E:  MOVF   xD1,W
1A50:  SUBLW  02
1A52:  BNZ   1A6A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
1A54:  MOVLW  02
1A56:  MOVWF  xDE
1A58:  MOVFF  D2,DF
1A5C:  CALL   0A00
1A60:  MOVLW  DC
1A62:  MOVWF  FF6
1A64:  MOVLW  00
1A66:  MOVWF  FF7
1A68:  RCALL  18DC
....................     
....................    if(x==3) 
1A6A:  MOVF   xD1,W
1A6C:  SUBLW  03
1A6E:  BNZ   1A86
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
1A70:  MOVLW  02
1A72:  MOVWF  xDE
1A74:  MOVFF  D2,DF
1A78:  CALL   0A00
1A7C:  MOVLW  F0
1A7E:  MOVWF  FF6
1A80:  MOVLW  00
1A82:  MOVWF  FF7
1A84:  RCALL  18DC
....................     
....................    if(x==4) 
1A86:  MOVF   xD1,W
1A88:  SUBLW  04
1A8A:  BNZ   1AA2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1A8C:  MOVLW  02
1A8E:  MOVWF  xDE
1A90:  MOVFF  D2,DF
1A94:  CALL   0A00
1A98:  MOVLW  04
1A9A:  MOVWF  FF6
1A9C:  MOVLW  01
1A9E:  MOVWF  FF7
1AA0:  RCALL  18DC
....................        
....................    if(x==5) 
1AA2:  MOVF   xD1,W
1AA4:  SUBLW  05
1AA6:  BNZ   1ABE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
1AA8:  MOVLW  02
1AAA:  MOVWF  xDE
1AAC:  MOVFF  D2,DF
1AB0:  CALL   0A00
1AB4:  MOVLW  18
1AB6:  MOVWF  FF6
1AB8:  MOVLW  01
1ABA:  MOVWF  FF7
1ABC:  RCALL  18DC
....................     
....................    if(x==6) 
1ABE:  MOVF   xD1,W
1AC0:  SUBLW  06
1AC2:  BNZ   1ADA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
1AC4:  MOVLW  02
1AC6:  MOVWF  xDE
1AC8:  MOVFF  D2,DF
1ACC:  CALL   0A00
1AD0:  MOVLW  2C
1AD2:  MOVWF  FF6
1AD4:  MOVLW  01
1AD6:  MOVWF  FF7
1AD8:  RCALL  18DC
....................    #endif 
.................... } 
1ADA:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1F48:  MOVFF  D0,FBE
.................... } 
1F4C:  GOTO   429A (RETURN)
....................  
.................... void SalidasOff(void){ 
....................    set_pwm1_duty(0); 
*
08C6:  CLRF   FBE
....................    Luz_Blanca_off; 
08C8:  BCF    F8A.4
08CA:  BCF    F93.4
....................    Motor_off; 
08CC:  BCF    F8A.5
08CE:  BCF    F93.5
....................    Damper_off; 
08D0:  BCF    F8A.7
08D2:  BCF    F93.7
....................    Alarma_off; 
08D4:  BCF    F8A.6
08D6:  BCF    F93.6
.................... } 
08D8:  RETLW  00
....................  
.................... void ConfigInicial(void){ 
....................    setup_adc_ports(AN0_TO_AN3); 
*
0AD4:  MOVF   FC1,W
0AD6:  ANDLW  C0
0AD8:  IORLW  0B
0ADA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0ADC:  BCF    FC0.0
0ADE:  BSF    FC0.1
0AE0:  BCF    FC0.2
0AE2:  BSF    FC0.7
0AE4:  BSF    FC2.0
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0AE6:  MOVLW  85
0AE8:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0AEA:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
0AEC:  MOVLW  00
0AEE:  IORLW  05
0AF0:  MOVWF  FCA
0AF2:  MOVLW  FF
0AF4:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
0AF6:  BCF    F94.2
0AF8:  BCF    F8B.2
0AFA:  BCF    F96.6
0AFC:  MOVLW  0C
0AFE:  MOVWF  FBD
0B00:  CLRF   FB7
0B02:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
0B04:  MOVLW  C0
0B06:  IORWF  FF2,F
....................    output_d(0); 
0B08:  CLRF   F95
0B0A:  CLRF   F8C
....................    SalidasOff(); 
0B0C:  RCALL  08C6
....................    intensidadpantalla(0); 
0B0E:  CLRF   xD0
0B10:  RCALL  08DA
....................    lcd_init(); 
0B12:  RCALL  09A8
....................    printf(lcd_putc,"\f"); 
0B14:  MOVLW  0C
0B16:  MOVWF  xDD
0B18:  RCALL  0A72
.................... } 
0B1A:  GOTO   2612 (RETURN)
....................  
.................... void LeeEEPROM(void){ 
.................... // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20);  
*
0F18:  MOVFF  FF2,D0
0F1C:  BCF    FF2.7
0F1E:  CLRF   FA9
0F20:  BCF    FA6.6
0F22:  BCF    FA6.7
0F24:  BSF    FA6.0
0F26:  MOVF   FA8,W
0F28:  BTFSC  xD0.7
0F2A:  BSF    FF2.7
0F2C:  MOVWF  46
0F2E:  MOVLW  14
0F30:  MOVWF  xE3
0F32:  RCALL  08EA
....................    contrasena[1]=read_eeprom(1);delay_ms(20); 
0F34:  MOVFF  FF2,D0
0F38:  BCF    FF2.7
0F3A:  MOVLW  01
0F3C:  MOVWF  FA9
0F3E:  BCF    FA6.6
0F40:  BCF    FA6.7
0F42:  BSF    FA6.0
0F44:  MOVF   FA8,W
0F46:  BTFSC  xD0.7
0F48:  BSF    FF2.7
0F4A:  MOVWF  47
0F4C:  MOVLW  14
0F4E:  MOVWF  xE3
0F50:  RCALL  08EA
....................    contrasena[2]=read_eeprom(2);delay_ms(20);  
0F52:  MOVFF  FF2,D0
0F56:  BCF    FF2.7
0F58:  MOVLW  02
0F5A:  MOVWF  FA9
0F5C:  BCF    FA6.6
0F5E:  BCF    FA6.7
0F60:  BSF    FA6.0
0F62:  MOVF   FA8,W
0F64:  BTFSC  xD0.7
0F66:  BSF    FF2.7
0F68:  MOVWF  48
0F6A:  MOVLW  14
0F6C:  MOVWF  xE3
0F6E:  RCALL  08EA
....................    contrasena[3]=read_eeprom(3);delay_ms(20); 
0F70:  MOVFF  FF2,D0
0F74:  BCF    FF2.7
0F76:  MOVLW  03
0F78:  MOVWF  FA9
0F7A:  BCF    FA6.6
0F7C:  BCF    FA6.7
0F7E:  BSF    FA6.0
0F80:  MOVF   FA8,W
0F82:  BTFSC  xD0.7
0F84:  BSF    FF2.7
0F86:  MOVWF  49
0F88:  MOVLW  14
0F8A:  MOVWF  xE3
0F8C:  RCALL  08EA
....................    estadoalarma=read_eeprom(5);delay_ms(20); 
0F8E:  MOVFF  FF2,D0
0F92:  BCF    FF2.7
0F94:  MOVLW  05
0F96:  MOVWF  FA9
0F98:  BCF    FA6.6
0F9A:  BCF    FA6.7
0F9C:  BSF    FA6.0
0F9E:  MOVF   FA8,W
0FA0:  BTFSC  xD0.7
0FA2:  BSF    FF2.7
0FA4:  MOVWF  01
0FA6:  BCF    3C.2
0FA8:  BTFSC  01.0
0FAA:  BSF    3C.2
0FAC:  MOVLW  14
0FAE:  MOVWF  xE3
0FB0:  RCALL  08EA
....................    Manual=read_eeprom(10);delay_ms(20); 
0FB2:  MOVFF  FF2,D0
0FB6:  BCF    FF2.7
0FB8:  MOVLW  0A
0FBA:  MOVWF  FA9
0FBC:  BCF    FA6.6
0FBE:  BCF    FA6.7
0FC0:  BSF    FA6.0
0FC2:  MOVF   FA8,W
0FC4:  BTFSC  xD0.7
0FC6:  BSF    FF2.7
0FC8:  MOVWF  2E
0FCA:  MOVLW  14
0FCC:  MOVWF  xE3
0FCE:  RCALL  08EA
....................    Automa=read_eeprom(11);delay_ms(20); 
0FD0:  MOVFF  FF2,D0
0FD4:  BCF    FF2.7
0FD6:  MOVLW  0B
0FD8:  MOVWF  FA9
0FDA:  BCF    FA6.6
0FDC:  BCF    FA6.7
0FDE:  BSF    FA6.0
0FE0:  MOVF   FA8,W
0FE2:  BTFSC  xD0.7
0FE4:  BSF    FF2.7
0FE6:  MOVWF  2D
0FE8:  MOVLW  14
0FEA:  MOVWF  xE3
0FEC:  RCALL  08EA
....................    Semi=read_eeprom(12);delay_ms(20); 
0FEE:  MOVFF  FF2,D0
0FF2:  BCF    FF2.7
0FF4:  MOVLW  0C
0FF6:  MOVWF  FA9
0FF8:  BCF    FA6.6
0FFA:  BCF    FA6.7
0FFC:  BSF    FA6.0
0FFE:  MOVF   FA8,W
1000:  BTFSC  xD0.7
1002:  BSF    FF2.7
1004:  MOVWF  2F
1006:  MOVLW  14
1008:  MOVWF  xE3
100A:  RCALL  08EA
....................    ValorSemi=read_eeprom(13);delay_ms(20); 
100C:  MOVFF  FF2,D0
1010:  BCF    FF2.7
1012:  MOVLW  0D
1014:  MOVWF  FA9
1016:  BCF    FA6.6
1018:  BCF    FA6.7
101A:  BSF    FA6.0
101C:  MOVF   FA8,W
101E:  BTFSC  xD0.7
1020:  BSF    FF2.7
1022:  MOVWF  30
1024:  MOVLW  14
1026:  MOVWF  xE3
1028:  RCALL  08EA
....................    tmp=ValorSemi; 
102A:  MOVFF  30,2A
....................  
....................    purga_minutos=read_eeprom(20);delay_ms(20); 
102E:  MOVFF  FF2,D0
1032:  BCF    FF2.7
1034:  MOVLW  14
1036:  MOVWF  FA9
1038:  BCF    FA6.6
103A:  BCF    FA6.7
103C:  BSF    FA6.0
103E:  MOVF   FA8,W
1040:  BTFSC  xD0.7
1042:  BSF    FF2.7
1044:  MOVWF  22
1046:  MOVLW  14
1048:  MOVWF  xE3
104A:  RCALL  08EA
....................    purga_segundos=read_eeprom(21);delay_ms(20); 
104C:  MOVFF  FF2,D0
1050:  BCF    FF2.7
1052:  MOVLW  15
1054:  MOVWF  FA9
1056:  BCF    FA6.6
1058:  BCF    FA6.7
105A:  BSF    FA6.0
105C:  MOVF   FA8,W
105E:  BTFSC  xD0.7
1060:  BSF    FF2.7
1062:  MOVWF  35
1064:  MOVLW  14
1066:  MOVWF  xE3
1068:  RCALL  08EA
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
106A:  MOVFF  22,23
106E:  MOVFF  35,36
....................    ppurga_minutos=read_eeprom(22);delay_ms(20); 
1072:  MOVFF  FF2,D0
1076:  BCF    FF2.7
1078:  MOVLW  16
107A:  MOVWF  FA9
107C:  BCF    FA6.6
107E:  BCF    FA6.7
1080:  BSF    FA6.0
1082:  MOVF   FA8,W
1084:  BTFSC  xD0.7
1086:  BSF    FF2.7
1088:  MOVWF  39
108A:  MOVLW  14
108C:  MOVWF  xE3
108E:  RCALL  08EA
....................    ppurga_segundos=read_eeprom(23);delay_ms(20); 
1090:  MOVFF  FF2,D0
1094:  BCF    FF2.7
1096:  MOVLW  17
1098:  MOVWF  FA9
109A:  BCF    FA6.6
109C:  BCF    FA6.7
109E:  BSF    FA6.0
10A0:  MOVF   FA8,W
10A2:  BTFSC  xD0.7
10A4:  BSF    FF2.7
10A6:  MOVWF  37
10A8:  MOVLW  14
10AA:  MOVWF  xE3
10AC:  RCALL  08EA
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
10AE:  MOVFF  39,3A
10B2:  MOVFF  37,38
....................        
....................    Entero=read_eeprom(25);delay_ms(20);//Decimal1=read_eeprom(26); 
10B6:  MOVFF  FF2,D0
10BA:  BCF    FF2.7
10BC:  MOVLW  19
10BE:  MOVWF  FA9
10C0:  BCF    FA6.6
10C2:  BCF    FA6.7
10C4:  BSF    FA6.0
10C6:  MOVF   FA8,W
10C8:  BTFSC  xD0.7
10CA:  BSF    FF2.7
10CC:  MOVWF  24
10CE:  MOVLW  14
10D0:  MOVWF  xE3
10D2:  RCALL  08EA
....................    Temporal=read_eeprom(26);delay_ms(20); 
10D4:  MOVFF  FF2,D0
10D8:  BCF    FF2.7
10DA:  MOVLW  1A
10DC:  MOVWF  FA9
10DE:  BCF    FA6.6
10E0:  BCF    FA6.7
10E2:  BSF    FA6.0
10E4:  MOVF   FA8,W
10E6:  BTFSC  xD0.7
10E8:  BSF    FF2.7
10EA:  CLRF   xD7
10EC:  MOVWF  xD6
10EE:  RCALL  0B1E
10F0:  MOVFF  03,87
10F4:  MOVFF  02,86
10F8:  MOVFF  01,85
10FC:  MOVFF  00,84
1100:  MOVLW  14
1102:  MOVWF  xE3
1104:  CALL   08EA
....................    Temporal=Temporal/10.0; 
1108:  MOVFF  87,D4
110C:  MOVFF  86,D3
1110:  MOVFF  85,D2
1114:  MOVFF  84,D1
1118:  CLRF   xD8
111A:  CLRF   xD7
111C:  MOVLW  20
111E:  MOVWF  xD6
1120:  MOVLW  82
1122:  MOVWF  xD5
1124:  RCALL  0B54
1126:  MOVFF  03,87
112A:  MOVFF  02,86
112E:  MOVFF  01,85
1132:  MOVFF  00,84
....................    Ajuste1=Entero+Temporal; 
1136:  CLRF   xD7
1138:  MOVFF  24,D6
113C:  RCALL  0B1E
113E:  BCF    FD8.1
1140:  MOVFF  03,DA
1144:  MOVFF  02,D9
1148:  MOVFF  01,D8
114C:  MOVFF  00,D7
1150:  MOVFF  87,DE
1154:  MOVFF  86,DD
1158:  MOVFF  85,DC
115C:  MOVFF  84,DB
1160:  RCALL  0CAE
1162:  MOVFF  03,9B
1166:  MOVFF  02,9A
116A:  MOVFF  01,99
116E:  MOVFF  00,98
....................     
....................    Entero=read_eeprom(40);delay_ms(20);//Decimal2=read_eeprom(41); 
1172:  MOVFF  FF2,D0
1176:  BCF    FF2.7
1178:  MOVLW  28
117A:  MOVWF  FA9
117C:  BCF    FA6.6
117E:  BCF    FA6.7
1180:  BSF    FA6.0
1182:  MOVF   FA8,W
1184:  BTFSC  xD0.7
1186:  BSF    FF2.7
1188:  MOVWF  24
118A:  MOVLW  14
118C:  MOVWF  xE3
118E:  CALL   08EA
....................    Temporal=read_eeprom(41);delay_ms(20); 
1192:  MOVFF  FF2,D0
1196:  BCF    FF2.7
1198:  MOVLW  29
119A:  MOVWF  FA9
119C:  BCF    FA6.6
119E:  BCF    FA6.7
11A0:  BSF    FA6.0
11A2:  MOVF   FA8,W
11A4:  BTFSC  xD0.7
11A6:  BSF    FF2.7
11A8:  CLRF   xD7
11AA:  MOVWF  xD6
11AC:  RCALL  0B1E
11AE:  MOVFF  03,87
11B2:  MOVFF  02,86
11B6:  MOVFF  01,85
11BA:  MOVFF  00,84
11BE:  MOVLW  14
11C0:  MOVWF  xE3
11C2:  CALL   08EA
....................    Temporal=Temporal/10.0; 
11C6:  MOVFF  87,D4
11CA:  MOVFF  86,D3
11CE:  MOVFF  85,D2
11D2:  MOVFF  84,D1
11D6:  CLRF   xD8
11D8:  CLRF   xD7
11DA:  MOVLW  20
11DC:  MOVWF  xD6
11DE:  MOVLW  82
11E0:  MOVWF  xD5
11E2:  RCALL  0B54
11E4:  MOVFF  03,87
11E8:  MOVFF  02,86
11EC:  MOVFF  01,85
11F0:  MOVFF  00,84
....................    #ifdef DAMPER 
....................    setpoint=Entero+Temporal; 
....................    #else 
....................    setpoint=Entero; 
11F4:  CLRF   xD7
11F6:  MOVFF  24,D6
11FA:  RCALL  0B1E
11FC:  MOVFF  03,4D
1200:  MOVFF  02,4C
1204:  MOVFF  01,4B
1208:  MOVFF  00,4A
....................    #endif 
....................    MediaMovil=read_eeprom(42);delay_ms(20); 
120C:  MOVFF  FF2,D0
1210:  BCF    FF2.7
1212:  MOVLW  2A
1214:  MOVWF  FA9
1216:  BCF    FA6.6
1218:  BCF    FA6.7
121A:  BSF    FA6.0
121C:  MOVF   FA8,W
121E:  BTFSC  xD0.7
1220:  BSF    FF2.7
1222:  MOVWF  2B
1224:  MOVLW  14
1226:  MOVWF  xE3
1228:  CALL   08EA
....................    
....................    negativo=read_eeprom(50);delay_ms(20); 
122C:  MOVFF  FF2,D0
1230:  BCF    FF2.7
1232:  MOVLW  32
1234:  MOVWF  FA9
1236:  BCF    FA6.6
1238:  BCF    FA6.7
123A:  BSF    FA6.0
123C:  MOVF   FA8,W
123E:  BTFSC  xD0.7
1240:  BSF    FF2.7
1242:  MOVWF  2C
1244:  MOVLW  14
1246:  MOVWF  xE3
1248:  CALL   08EA
....................     
....................    Entero1=read_eeprom(60);delay_ms(20);//Decimal2=read_eeprom(41); 
124C:  MOVFF  FF2,D0
1250:  BCF    FF2.7
1252:  MOVLW  3C
1254:  MOVWF  FA9
1256:  BCF    FA6.6
1258:  BCF    FA6.7
125A:  BSF    FA6.0
125C:  MOVF   FA8,W
125E:  BTFSC  xD0.7
1260:  BSF    FF2.7
1262:  MOVWF  27
1264:  MOVLW  14
1266:  MOVWF  xE3
1268:  CALL   08EA
....................    Temporal1=read_eeprom(61);delay_ms(20); 
126C:  MOVFF  FF2,D0
1270:  BCF    FF2.7
1272:  MOVLW  3D
1274:  MOVWF  FA9
1276:  BCF    FA6.6
1278:  BCF    FA6.7
127A:  BSF    FA6.0
127C:  MOVF   FA8,W
127E:  BTFSC  xD0.7
1280:  BSF    FF2.7
1282:  CLRF   xD7
1284:  MOVWF  xD6
1286:  RCALL  0B1E
1288:  MOVFF  03,93
128C:  MOVFF  02,92
1290:  MOVFF  01,91
1294:  MOVFF  00,90
1298:  MOVLW  14
129A:  MOVWF  xE3
129C:  CALL   08EA
....................    Diferencia=make16(Temporal1,Entero1); 
12A0:  MOVFF  90,03
12A4:  MOVFF  27,D6
12A8:  MOVFF  90,D7
12AC:  RCALL  0B1E
12AE:  MOVFF  03,97
12B2:  MOVFF  02,96
12B6:  MOVFF  01,95
12BA:  MOVFF  00,94
....................     
....................    segundos=read_eeprom(70);delay_ms(20); 
12BE:  MOVFF  FF2,D0
12C2:  BCF    FF2.7
12C4:  MOVLW  46
12C6:  MOVWF  FA9
12C8:  BCF    FA6.6
12CA:  BCF    FA6.7
12CC:  BSF    FA6.0
12CE:  MOVF   FA8,W
12D0:  BTFSC  xD0.7
12D2:  BSF    FF2.7
12D4:  MOVWF  31
12D6:  MOVLW  14
12D8:  MOVWF  xE3
12DA:  CALL   08EA
....................    minutos=read_eeprom(71);delay_ms(20); 
12DE:  MOVFF  FF2,D0
12E2:  BCF    FF2.7
12E4:  MOVLW  47
12E6:  MOVWF  FA9
12E8:  BCF    FA6.6
12EA:  BCF    FA6.7
12EC:  BSF    FA6.0
12EE:  MOVF   FA8,W
12F0:  BTFSC  xD0.7
12F2:  BSF    FF2.7
12F4:  MOVWF  32
12F6:  MOVLW  14
12F8:  MOVWF  xE3
12FA:  CALL   08EA
....................    horas=read_eeprom(72);delay_ms(20); 
12FE:  MOVFF  FF2,D0
1302:  BCF    FF2.7
1304:  MOVLW  48
1306:  MOVWF  FA9
1308:  BCF    FA6.6
130A:  BCF    FA6.7
130C:  BSF    FA6.0
130E:  MOVF   FA8,W
1310:  BTFSC  xD0.7
1312:  BSF    FF2.7
1314:  MOVWF  33
1316:  MOVLW  14
1318:  MOVWF  xE3
131A:  CALL   08EA
....................    flag_filtro=read_eeprom(73);delay_ms(20); 
131E:  MOVFF  FF2,D0
1322:  BCF    FF2.7
1324:  MOVLW  49
1326:  MOVWF  FA9
1328:  BCF    FA6.6
132A:  BCF    FA6.7
132C:  BSF    FA6.0
132E:  MOVF   FA8,W
1330:  BTFSC  xD0.7
1332:  BSF    FF2.7
1334:  MOVWF  01
1336:  BCF    3D.2
1338:  BTFSC  01.0
133A:  BSF    3D.2
133C:  MOVLW  14
133E:  MOVWF  xE3
1340:  CALL   08EA
.................... } 
1344:  GOTO   2616 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................    if(contrasena[0]>9){ 
*
13BE:  MOVF   46,W
13C0:  SUBLW  09
13C2:  BC    13F6
....................       contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
13C4:  CLRF   46
13C6:  CLRF   FA9
13C8:  CLRF   FA8
13CA:  BCF    FA6.6
13CC:  BCF    FA6.7
13CE:  BSF    FA6.2
13D0:  MOVF   FF2,W
13D2:  MOVWF  00
13D4:  BCF    FF2.7
13D6:  MOVLB  F
13D8:  MOVLW  55
13DA:  MOVWF  FA7
13DC:  MOVLW  AA
13DE:  MOVWF  FA7
13E0:  BSF    FA6.1
13E2:  BTFSC  FA6.1
13E4:  BRA    13E2
13E6:  BCF    FA6.2
13E8:  MOVF   00,W
13EA:  IORWF  FF2,F
13EC:  MOVLW  14
13EE:  MOVLB  0
13F0:  MOVWF  xE3
13F2:  CALL   08EA
....................    } 
....................    if(contrasena[1]>9){ 
13F6:  MOVF   47,W
13F8:  SUBLW  09
13FA:  BC    1430
....................       contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
13FC:  CLRF   47
13FE:  MOVLW  01
1400:  MOVWF  FA9
1402:  CLRF   FA8
1404:  BCF    FA6.6
1406:  BCF    FA6.7
1408:  BSF    FA6.2
140A:  MOVF   FF2,W
140C:  MOVWF  00
140E:  BCF    FF2.7
1410:  MOVLB  F
1412:  MOVLW  55
1414:  MOVWF  FA7
1416:  MOVLW  AA
1418:  MOVWF  FA7
141A:  BSF    FA6.1
141C:  BTFSC  FA6.1
141E:  BRA    141C
1420:  BCF    FA6.2
1422:  MOVF   00,W
1424:  IORWF  FF2,F
1426:  MOVLW  14
1428:  MOVLB  0
142A:  MOVWF  xE3
142C:  CALL   08EA
....................    } 
....................    if(contrasena[2]>9){ 
1430:  MOVF   48,W
1432:  SUBLW  09
1434:  BC    146A
....................       contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
1436:  CLRF   48
1438:  MOVLW  02
143A:  MOVWF  FA9
143C:  CLRF   FA8
143E:  BCF    FA6.6
1440:  BCF    FA6.7
1442:  BSF    FA6.2
1444:  MOVF   FF2,W
1446:  MOVWF  00
1448:  BCF    FF2.7
144A:  MOVLB  F
144C:  MOVLW  55
144E:  MOVWF  FA7
1450:  MOVLW  AA
1452:  MOVWF  FA7
1454:  BSF    FA6.1
1456:  BTFSC  FA6.1
1458:  BRA    1456
145A:  BCF    FA6.2
145C:  MOVF   00,W
145E:  IORWF  FF2,F
1460:  MOVLW  14
1462:  MOVLB  0
1464:  MOVWF  xE3
1466:  CALL   08EA
....................    } 
....................    if(contrasena[3]>9){ 
146A:  MOVF   49,W
146C:  SUBLW  09
146E:  BC    14A4
....................       contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1470:  CLRF   49
1472:  MOVLW  03
1474:  MOVWF  FA9
1476:  CLRF   FA8
1478:  BCF    FA6.6
147A:  BCF    FA6.7
147C:  BSF    FA6.2
147E:  MOVF   FF2,W
1480:  MOVWF  00
1482:  BCF    FF2.7
1484:  MOVLB  F
1486:  MOVLW  55
1488:  MOVWF  FA7
148A:  MOVLW  AA
148C:  MOVWF  FA7
148E:  BSF    FA6.1
1490:  BTFSC  FA6.1
1492:  BRA    1490
1494:  BCF    FA6.2
1496:  MOVF   00,W
1498:  IORWF  FF2,F
149A:  MOVLW  14
149C:  MOVLB  0
149E:  MOVWF  xE3
14A0:  CALL   08EA
....................    } 
....................    if(estadoalarma>1){ 
14A4:  MOVLW  00
14A6:  BTFSC  3C.2
14A8:  MOVLW  01
14AA:  SUBLW  01
14AC:  BC    14E4
....................       estadoalarma=1;write_eeprom(5,1);delay_ms(20); 
14AE:  BSF    3C.2
14B0:  MOVLW  05
14B2:  MOVWF  FA9
14B4:  MOVLW  01
14B6:  MOVWF  FA8
14B8:  BCF    FA6.6
14BA:  BCF    FA6.7
14BC:  BSF    FA6.2
14BE:  MOVF   FF2,W
14C0:  MOVWF  00
14C2:  BCF    FF2.7
14C4:  MOVLB  F
14C6:  MOVLW  55
14C8:  MOVWF  FA7
14CA:  MOVLW  AA
14CC:  MOVWF  FA7
14CE:  BSF    FA6.1
14D0:  BTFSC  FA6.1
14D2:  BRA    14D0
14D4:  BCF    FA6.2
14D6:  MOVF   00,W
14D8:  IORWF  FF2,F
14DA:  MOVLW  14
14DC:  MOVLB  0
14DE:  MOVWF  xE3
14E0:  CALL   08EA
....................    } 
....................    if(Manual>20){ 
14E4:  MOVF   2E,W
14E6:  SUBLW  14
14E8:  BC    1522
....................       Manual=20;write_eeprom(10,20);delay_ms(20); 
14EA:  MOVLW  14
14EC:  MOVWF  2E
14EE:  MOVLW  0A
14F0:  MOVWF  FA9
14F2:  MOVLW  14
14F4:  MOVWF  FA8
14F6:  BCF    FA6.6
14F8:  BCF    FA6.7
14FA:  BSF    FA6.2
14FC:  MOVF   FF2,W
14FE:  MOVWF  00
1500:  BCF    FF2.7
1502:  MOVLB  F
1504:  MOVLW  55
1506:  MOVWF  FA7
1508:  MOVLW  AA
150A:  MOVWF  FA7
150C:  BSF    FA6.1
150E:  BTFSC  FA6.1
1510:  BRA    150E
1512:  BCF    FA6.2
1514:  MOVF   00,W
1516:  IORWF  FF2,F
1518:  MOVLW  14
151A:  MOVLB  0
151C:  MOVWF  xE3
151E:  CALL   08EA
....................    } 
....................    if(Automa>20){ 
1522:  MOVF   2D,W
1524:  SUBLW  14
1526:  BC    1560
....................       Manual=10;write_eeprom(11,10);delay_ms(20); 
1528:  MOVLW  0A
152A:  MOVWF  2E
152C:  MOVLW  0B
152E:  MOVWF  FA9
1530:  MOVLW  0A
1532:  MOVWF  FA8
1534:  BCF    FA6.6
1536:  BCF    FA6.7
1538:  BSF    FA6.2
153A:  MOVF   FF2,W
153C:  MOVWF  00
153E:  BCF    FF2.7
1540:  MOVLB  F
1542:  MOVLW  55
1544:  MOVWF  FA7
1546:  MOVLW  AA
1548:  MOVWF  FA7
154A:  BSF    FA6.1
154C:  BTFSC  FA6.1
154E:  BRA    154C
1550:  BCF    FA6.2
1552:  MOVF   00,W
1554:  IORWF  FF2,F
1556:  MOVLW  14
1558:  MOVLB  0
155A:  MOVWF  xE3
155C:  CALL   08EA
....................    } 
....................    if(Semi>20){ 
1560:  MOVF   2F,W
1562:  SUBLW  14
1564:  BC    159E
....................       Semi=10;write_eeprom(12,10);delay_ms(20); 
1566:  MOVLW  0A
1568:  MOVWF  2F
156A:  MOVLW  0C
156C:  MOVWF  FA9
156E:  MOVLW  0A
1570:  MOVWF  FA8
1572:  BCF    FA6.6
1574:  BCF    FA6.7
1576:  BSF    FA6.2
1578:  MOVF   FF2,W
157A:  MOVWF  00
157C:  BCF    FF2.7
157E:  MOVLB  F
1580:  MOVLW  55
1582:  MOVWF  FA7
1584:  MOVLW  AA
1586:  MOVWF  FA7
1588:  BSF    FA6.1
158A:  BTFSC  FA6.1
158C:  BRA    158A
158E:  BCF    FA6.2
1590:  MOVF   00,W
1592:  IORWF  FF2,F
1594:  MOVLW  14
1596:  MOVLB  0
1598:  MOVWF  xE3
159A:  CALL   08EA
....................    } 
....................    if(purga_minutos>59){ 
159E:  MOVF   22,W
15A0:  SUBLW  3B
15A2:  BC    15DC
....................       purga_minutos=2;write_eeprom(20,2);delay_ms(20); 
15A4:  MOVLW  02
15A6:  MOVWF  22
15A8:  MOVLW  14
15AA:  MOVWF  FA9
15AC:  MOVLW  02
15AE:  MOVWF  FA8
15B0:  BCF    FA6.6
15B2:  BCF    FA6.7
15B4:  BSF    FA6.2
15B6:  MOVF   FF2,W
15B8:  MOVWF  00
15BA:  BCF    FF2.7
15BC:  MOVLB  F
15BE:  MOVLW  55
15C0:  MOVWF  FA7
15C2:  MOVLW  AA
15C4:  MOVWF  FA7
15C6:  BSF    FA6.1
15C8:  BTFSC  FA6.1
15CA:  BRA    15C8
15CC:  BCF    FA6.2
15CE:  MOVF   00,W
15D0:  IORWF  FF2,F
15D2:  MOVLW  14
15D4:  MOVLB  0
15D6:  MOVWF  xE3
15D8:  CALL   08EA
....................    } 
....................    if(purga_segundos>59){ 
15DC:  MOVF   35,W
15DE:  SUBLW  3B
15E0:  BC    1616
....................       purga_segundos=0;write_eeprom(21,0);delay_ms(20); 
15E2:  CLRF   35
15E4:  MOVLW  15
15E6:  MOVWF  FA9
15E8:  CLRF   FA8
15EA:  BCF    FA6.6
15EC:  BCF    FA6.7
15EE:  BSF    FA6.2
15F0:  MOVF   FF2,W
15F2:  MOVWF  00
15F4:  BCF    FF2.7
15F6:  MOVLB  F
15F8:  MOVLW  55
15FA:  MOVWF  FA7
15FC:  MOVLW  AA
15FE:  MOVWF  FA7
1600:  BSF    FA6.1
1602:  BTFSC  FA6.1
1604:  BRA    1602
1606:  BCF    FA6.2
1608:  MOVF   00,W
160A:  IORWF  FF2,F
160C:  MOVLW  14
160E:  MOVLB  0
1610:  MOVWF  xE3
1612:  CALL   08EA
....................    } 
....................    if(ppurga_minutos>59){ 
1616:  MOVF   39,W
1618:  SUBLW  3B
161A:  BC    1654
....................       ppurga_minutos=2;write_eeprom(22,2);delay_ms(20); 
161C:  MOVLW  02
161E:  MOVWF  39
1620:  MOVLW  16
1622:  MOVWF  FA9
1624:  MOVLW  02
1626:  MOVWF  FA8
1628:  BCF    FA6.6
162A:  BCF    FA6.7
162C:  BSF    FA6.2
162E:  MOVF   FF2,W
1630:  MOVWF  00
1632:  BCF    FF2.7
1634:  MOVLB  F
1636:  MOVLW  55
1638:  MOVWF  FA7
163A:  MOVLW  AA
163C:  MOVWF  FA7
163E:  BSF    FA6.1
1640:  BTFSC  FA6.1
1642:  BRA    1640
1644:  BCF    FA6.2
1646:  MOVF   00,W
1648:  IORWF  FF2,F
164A:  MOVLW  14
164C:  MOVLB  0
164E:  MOVWF  xE3
1650:  CALL   08EA
....................    } 
....................    if(ppurga_segundos>59){ 
1654:  MOVF   37,W
1656:  SUBLW  3B
1658:  BC    168E
....................       ppurga_segundos=0;write_eeprom(23,0);delay_ms(20); 
165A:  CLRF   37
165C:  MOVLW  17
165E:  MOVWF  FA9
1660:  CLRF   FA8
1662:  BCF    FA6.6
1664:  BCF    FA6.7
1666:  BSF    FA6.2
1668:  MOVF   FF2,W
166A:  MOVWF  00
166C:  BCF    FF2.7
166E:  MOVLB  F
1670:  MOVLW  55
1672:  MOVWF  FA7
1674:  MOVLW  AA
1676:  MOVWF  FA7
1678:  BSF    FA6.1
167A:  BTFSC  FA6.1
167C:  BRA    167A
167E:  BCF    FA6.2
1680:  MOVF   00,W
1682:  IORWF  FF2,F
1684:  MOVLW  14
1686:  MOVLB  0
1688:  MOVWF  xE3
168A:  CALL   08EA
....................    } 
....................    if(Ajuste1>20.0){ 
168E:  CLRF   xD7
1690:  CLRF   xD6
1692:  MOVLW  20
1694:  MOVWF  xD5
1696:  MOVLW  83
1698:  MOVWF  xD4
169A:  MOVFF  9B,DB
169E:  MOVFF  9A,DA
16A2:  MOVFF  99,D9
16A6:  MOVFF  98,D8
16AA:  RCALL  1348
16AC:  BNC   171E
....................       Ajuste1=1.0;write_eeprom(25,1);delay_ms(20);write_eeprom(26,0);delay_ms(20); 
16AE:  CLRF   x9B
16B0:  CLRF   x9A
16B2:  CLRF   x99
16B4:  MOVLW  7F
16B6:  MOVWF  x98
16B8:  MOVLW  19
16BA:  MOVWF  FA9
16BC:  MOVLW  01
16BE:  MOVWF  FA8
16C0:  BCF    FA6.6
16C2:  BCF    FA6.7
16C4:  BSF    FA6.2
16C6:  MOVF   FF2,W
16C8:  MOVWF  00
16CA:  BCF    FF2.7
16CC:  MOVLB  F
16CE:  MOVLW  55
16D0:  MOVWF  FA7
16D2:  MOVLW  AA
16D4:  MOVWF  FA7
16D6:  BSF    FA6.1
16D8:  BTFSC  FA6.1
16DA:  BRA    16D8
16DC:  BCF    FA6.2
16DE:  MOVF   00,W
16E0:  IORWF  FF2,F
16E2:  MOVLW  14
16E4:  MOVLB  0
16E6:  MOVWF  xE3
16E8:  CALL   08EA
16EC:  MOVLW  1A
16EE:  MOVWF  FA9
16F0:  CLRF   FA8
16F2:  BCF    FA6.6
16F4:  BCF    FA6.7
16F6:  BSF    FA6.2
16F8:  MOVF   FF2,W
16FA:  MOVWF  00
16FC:  BCF    FF2.7
16FE:  MOVLB  F
1700:  MOVLW  55
1702:  MOVWF  FA7
1704:  MOVLW  AA
1706:  MOVWF  FA7
1708:  BSF    FA6.1
170A:  BTFSC  FA6.1
170C:  BRA    170A
170E:  BCF    FA6.2
1710:  MOVF   00,W
1712:  IORWF  FF2,F
1714:  MOVLW  14
1716:  MOVLB  0
1718:  MOVWF  xE3
171A:  CALL   08EA
....................    } 
....................    #if DAMPER 
....................    if(setpoint>2.0){ 
....................       setpoint=0.6;write_eeprom(40,0);delay_ms(20);write_eeprom(41,6);delay_ms(20); 
....................    } 
....................    #endif  
....................    if(MediaMovil>12){ 
171E:  MOVF   2B,W
1720:  SUBLW  0C
1722:  BC    175C
....................       MediaMovil=10;write_eeprom(42,10);delay_ms(20); 
1724:  MOVLW  0A
1726:  MOVWF  2B
1728:  MOVLW  2A
172A:  MOVWF  FA9
172C:  MOVLW  0A
172E:  MOVWF  FA8
1730:  BCF    FA6.6
1732:  BCF    FA6.7
1734:  BSF    FA6.2
1736:  MOVF   FF2,W
1738:  MOVWF  00
173A:  BCF    FF2.7
173C:  MOVLB  F
173E:  MOVLW  55
1740:  MOVWF  FA7
1742:  MOVLW  AA
1744:  MOVWF  FA7
1746:  BSF    FA6.1
1748:  BTFSC  FA6.1
174A:  BRA    1748
174C:  BCF    FA6.2
174E:  MOVF   00,W
1750:  IORWF  FF2,F
1752:  MOVLW  14
1754:  MOVLB  0
1756:  MOVWF  xE3
1758:  CALL   08EA
....................    } 
....................    if(negativo>20){ 
175C:  MOVF   2C,W
175E:  SUBLW  14
1760:  BC    179A
....................       negativo=10;write_eeprom(50,10);delay_ms(20); 
1762:  MOVLW  0A
1764:  MOVWF  2C
1766:  MOVLW  32
1768:  MOVWF  FA9
176A:  MOVLW  0A
176C:  MOVWF  FA8
176E:  BCF    FA6.6
1770:  BCF    FA6.7
1772:  BSF    FA6.2
1774:  MOVF   FF2,W
1776:  MOVWF  00
1778:  BCF    FF2.7
177A:  MOVLB  F
177C:  MOVLW  55
177E:  MOVWF  FA7
1780:  MOVLW  AA
1782:  MOVWF  FA7
1784:  BSF    FA6.1
1786:  BTFSC  FA6.1
1788:  BRA    1786
178A:  BCF    FA6.2
178C:  MOVF   00,W
178E:  IORWF  FF2,F
1790:  MOVLW  14
1792:  MOVLB  0
1794:  MOVWF  xE3
1796:  CALL   08EA
....................    } 
....................    if(Diferencia>600){ 
179A:  CLRF   xD7
179C:  CLRF   xD6
179E:  MOVLW  16
17A0:  MOVWF  xD5
17A2:  MOVLW  88
17A4:  MOVWF  xD4
17A6:  MOVFF  97,DB
17AA:  MOVFF  96,DA
17AE:  MOVFF  95,D9
17B2:  MOVFF  94,D8
17B6:  RCALL  1348
17B8:  BNC   1826
....................       Diferencia=0;write_eeprom(60,0);delay_ms(20);write_eeprom(61,0);delay_ms(20); 
17BA:  CLRF   x97
17BC:  CLRF   x96
17BE:  CLRF   x95
17C0:  CLRF   x94
17C2:  MOVLW  3C
17C4:  MOVWF  FA9
17C6:  CLRF   FA8
17C8:  BCF    FA6.6
17CA:  BCF    FA6.7
17CC:  BSF    FA6.2
17CE:  MOVF   FF2,W
17D0:  MOVWF  00
17D2:  BCF    FF2.7
17D4:  MOVLB  F
17D6:  MOVLW  55
17D8:  MOVWF  FA7
17DA:  MOVLW  AA
17DC:  MOVWF  FA7
17DE:  BSF    FA6.1
17E0:  BTFSC  FA6.1
17E2:  BRA    17E0
17E4:  BCF    FA6.2
17E6:  MOVF   00,W
17E8:  IORWF  FF2,F
17EA:  MOVLW  14
17EC:  MOVLB  0
17EE:  MOVWF  xE3
17F0:  CALL   08EA
17F4:  MOVLW  3D
17F6:  MOVWF  FA9
17F8:  CLRF   FA8
17FA:  BCF    FA6.6
17FC:  BCF    FA6.7
17FE:  BSF    FA6.2
1800:  MOVF   FF2,W
1802:  MOVWF  00
1804:  BCF    FF2.7
1806:  MOVLB  F
1808:  MOVLW  55
180A:  MOVWF  FA7
180C:  MOVLW  AA
180E:  MOVWF  FA7
1810:  BSF    FA6.1
1812:  BTFSC  FA6.1
1814:  BRA    1812
1816:  BCF    FA6.2
1818:  MOVF   00,W
181A:  IORWF  FF2,F
181C:  MOVLW  14
181E:  MOVLB  0
1820:  MOVWF  xE3
1822:  CALL   08EA
....................    } 
....................    if(segundos>60){ 
1826:  MOVF   31,W
1828:  SUBLW  3C
182A:  BC    1860
....................       segundos=0;write_eeprom(70,0);delay_ms(20); 
182C:  CLRF   31
182E:  MOVLW  46
1830:  MOVWF  FA9
1832:  CLRF   FA8
1834:  BCF    FA6.6
1836:  BCF    FA6.7
1838:  BSF    FA6.2
183A:  MOVF   FF2,W
183C:  MOVWF  00
183E:  BCF    FF2.7
1840:  MOVLB  F
1842:  MOVLW  55
1844:  MOVWF  FA7
1846:  MOVLW  AA
1848:  MOVWF  FA7
184A:  BSF    FA6.1
184C:  BTFSC  FA6.1
184E:  BRA    184C
1850:  BCF    FA6.2
1852:  MOVF   00,W
1854:  IORWF  FF2,F
1856:  MOVLW  14
1858:  MOVLB  0
185A:  MOVWF  xE3
185C:  CALL   08EA
....................    } 
....................    if(minutos>60){ 
1860:  MOVF   32,W
1862:  SUBLW  3C
1864:  BC    189A
....................       minutos=0;write_eeprom(71,0);delay_ms(20); 
1866:  CLRF   32
1868:  MOVLW  47
186A:  MOVWF  FA9
186C:  CLRF   FA8
186E:  BCF    FA6.6
1870:  BCF    FA6.7
1872:  BSF    FA6.2
1874:  MOVF   FF2,W
1876:  MOVWF  00
1878:  BCF    FF2.7
187A:  MOVLB  F
187C:  MOVLW  55
187E:  MOVWF  FA7
1880:  MOVLW  AA
1882:  MOVWF  FA7
1884:  BSF    FA6.1
1886:  BTFSC  FA6.1
1888:  BRA    1886
188A:  BCF    FA6.2
188C:  MOVF   00,W
188E:  IORWF  FF2,F
1890:  MOVLW  14
1892:  MOVLB  0
1894:  MOVWF  xE3
1896:  CALL   08EA
....................    } 
....................    if(flag_filtro>1){ 
189A:  MOVLW  00
189C:  BTFSC  3D.2
189E:  MOVLW  01
18A0:  SUBLW  01
18A2:  BC    18D8
....................       flag_filtro=0;write_eeprom(73,0);delay_ms(20); 
18A4:  BCF    3D.2
18A6:  MOVLW  49
18A8:  MOVWF  FA9
18AA:  CLRF   FA8
18AC:  BCF    FA6.6
18AE:  BCF    FA6.7
18B0:  BSF    FA6.2
18B2:  MOVF   FF2,W
18B4:  MOVWF  00
18B6:  BCF    FF2.7
18B8:  MOVLB  F
18BA:  MOVLW  55
18BC:  MOVWF  FA7
18BE:  MOVLW  AA
18C0:  MOVWF  FA7
18C2:  BSF    FA6.1
18C4:  BTFSC  FA6.1
18C6:  BRA    18C4
18C8:  BCF    FA6.2
18CA:  MOVF   00,W
18CC:  IORWF  FF2,F
18CE:  MOVLW  14
18D0:  MOVLB  0
18D2:  MOVWF  xE3
18D4:  CALL   08EA
....................    } 
.................... } 
18D8:  GOTO   261A (RETURN)
....................  
.................... void EnciendeMotor(void){ 
....................    if(!input_state(PIN_B5)){ 
*
1ED4:  BTFSC  F81.5
1ED6:  BRA    1EEC
....................       delay_ms(100); 
1ED8:  MOVLW  64
1EDA:  MOVWF  xE3
1EDC:  CALL   08EA
....................       lcd_init(); 
1EE0:  CALL   09A8
....................       delay_ms(100); 
1EE4:  MOVLW  64
1EE6:  MOVWF  xE3
1EE8:  CALL   08EA
....................    } 
....................    Motor_on; 
1EEC:  BSF    F8A.5
1EEE:  BCF    F93.5
.................... } 
1EF0:  RETLW  00
....................  
.................... void ApagaMotor(void){ 
....................    if(input_state(PIN_B5)){ 
*
1EB6:  BTFSS  F81.5
1EB8:  BRA    1ECE
....................       delay_ms(100); 
1EBA:  MOVLW  64
1EBC:  MOVWF  xE3
1EBE:  CALL   08EA
....................       lcd_init(); 
1EC2:  CALL   09A8
....................       delay_ms(100); 
1EC6:  MOVLW  64
1EC8:  MOVWF  xE3
1ECA:  CALL   08EA
....................    } 
....................    Motor_off; 
1ECE:  BCF    F8A.5
1ED0:  BCF    F93.5
.................... } 
1ED2:  RETLW  00
....................  
.................... void MensajeGuardado(void){ 
....................    printf(lcd_putc,"\f"); 
....................    lcd_gotoxy(1,2); 
....................    printf(lcd_putc," !Valor Almacenado  "); 
....................    lcd_gotoxy(1,4); 
....................    printf(lcd_putc,"                    "); 
....................    lcd_gotoxy(1,3); 
....................    printf(lcd_putc,"    Correctamente!  "); 
....................    lcd_gotoxy(1,1); 
....................    printf(lcd_putc,"                    "); 
....................    delay_ms(2000); 
....................    printf(lcd_putc,"\f"); 
.................... } 
....................  
.................... void Refresco(void){ 
....................    delay_ms(100); 
....................    lcd_init(); 
....................    delay_ms(100); 
.................... } 
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    #ifdef SIMU 
....................    set_timer1(60536);  // 5  ms 
....................    #else 
....................    set_timer1(5536);  // 5  ms 
*
0198:  MOVLW  15
019A:  MOVWF  FCF
019C:  MOVLW  A0
019E:  MOVWF  FCE
....................    #endif 
....................    tiempos++; 
01A0:  INCF   53,F
01A2:  BTFSC  FD8.2
01A4:  INCF   54,F
....................    tiempos2++; 
01A6:  INCF   57,F
01A8:  BTFSC  FD8.2
01AA:  INCF   58,F
....................     
....................    if(t_latencia>=3000) 
01AC:  MOVF   56,W
01AE:  SUBLW  0A
01B0:  BC    01BE
01B2:  XORLW  FF
01B4:  BNZ   01BC
01B6:  MOVF   55,W
01B8:  SUBLW  B7
01BA:  BC    01BE
....................       Latencia=1; 
01BC:  BSF    3D.1
....................     
....................    if(flag_latencia==1) 
01BE:  BTFSS  3D.0
01C0:  BRA    01C8
....................       t_latencia++;          
01C2:  INCF   55,F
01C4:  BTFSC  FD8.2
01C6:  INCF   56,F
....................     
....................    if(tiempos2==200){ 
01C8:  MOVF   57,W
01CA:  SUBLW  C8
01CC:  BNZ   01D8
01CE:  MOVF   58,F
01D0:  BNZ   01D8
....................       tiempos2=0;Lectura2=1; 
01D2:  CLRF   58
01D4:  CLRF   57
01D6:  BSF    3D.7
....................    } 
....................     
....................    if(tiempos==200){   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
01D8:  MOVF   53,W
01DA:  SUBLW  C8
01DC:  BNZ   0248
01DE:  MOVF   54,F
01E0:  BNZ   0248
....................       tiempos=0;tiemporeset++; 
01E2:  CLRF   54
01E4:  CLRF   53
01E6:  INCF   34,F
....................       Lectura=1; 
01E8:  BSF    3D.6
....................           
....................       if(estadomv==1 && flag_filtro==1){   
01EA:  BTFSS  3C.1
01EC:  BRA    0208
01EE:  BTFSS  3D.2
01F0:  BRA    0208
....................          segundos++; 
01F2:  INCF   31,F
....................          if(segundos==60){ 
01F4:  MOVF   31,W
01F6:  SUBLW  3C
01F8:  BNZ   01FE
....................             segundos=0;minutos++; 
01FA:  CLRF   31
01FC:  INCF   32,F
....................          }  
....................          if(minutos==60){ 
01FE:  MOVF   32,W
0200:  SUBLW  3C
0202:  BNZ   0208
....................             minutos=0;horas++; 
0204:  CLRF   32
0206:  INCF   33,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1){ 
0208:  BTFSS  52.5
020A:  BRA    022E
....................          if(purga_segundos>0){ 
020C:  MOVF   35,F
020E:  BZ    0214
....................             purga_segundos--; 
0210:  DECF   35,F
....................          }else{ 
0212:  BRA    022E
....................             if(purga_minutos>0){ 
0214:  MOVF   22,F
0216:  BZ    0220
....................                purga_minutos--; 
0218:  DECF   22,F
....................                purga_segundos=59; 
021A:  MOVLW  3B
021C:  MOVWF  35
....................             }else{ 
021E:  BRA    022E
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0; 
0220:  BCF    52.5
....................                //Motor_on; 
....................                //EnciendeMotor(); 
....................                Menu=20; 
0222:  MOVLW  14
0224:  MOVWF  18
....................                Luz_Blanca_on; 
0226:  BSF    F8A.4
0228:  BCF    F93.4
....................                estadomv=1; 
022A:  BSF    3C.1
....................                estadofl=1; 
022C:  BSF    3C.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1){ 
022E:  BTFSS  52.6
0230:  BRA    0248
....................          if(ppurga_segundos>0){ 
0232:  MOVF   37,F
0234:  BZ    023A
....................             ppurga_segundos--; 
0236:  DECF   37,F
....................          }else{ 
0238:  BRA    0248
....................             if(ppurga_minutos>0){ 
023A:  MOVF   39,F
023C:  BZ    0246
....................                ppurga_minutos--; 
023E:  DECF   39,F
....................                ppurga_segundos=59; 
0240:  MOVLW  3B
0242:  MOVWF  37
....................             }else{ 
0244:  BRA    0248
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0246:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0248:  BCF    F9E.0
024A:  GOTO   0054
.................... void main () 
.................... {   
*
2420:  CLRF   FF8
2422:  BCF    FD0.7
2424:  BSF    07.7
2426:  CLRF   FEA
2428:  CLRF   FE9
242A:  MOVLW  07
242C:  MOVWF  17
242E:  MOVLW  64
2430:  MOVWF  18
2432:  MOVLW  02
2434:  MOVWF  19
2436:  MOVLW  0B
2438:  MOVWF  1A
243A:  MOVLW  02
243C:  MOVWF  1B
243E:  MOVLW  03
2440:  MOVWF  1C
2442:  MOVLW  02
2444:  MOVWF  1D
2446:  MOVWF  1E
2448:  MOVLW  04
244A:  MOVWF  1F
244C:  MOVLW  0A
244E:  MOVWF  20
2450:  MOVLW  01
2452:  MOVWF  21
2454:  CLRF   22
2456:  CLRF   23
2458:  CLRF   24
245A:  CLRF   25
245C:  CLRF   26
245E:  CLRF   27
2460:  CLRF   28
2462:  CLRF   29
2464:  MOVLW  0A
2466:  MOVWF  2A
2468:  CLRF   2B
246A:  MOVWF  2C
246C:  MOVWF  2D
246E:  MOVWF  2E
2470:  MOVWF  2F
2472:  CLRF   30
2474:  CLRF   31
2476:  CLRF   32
2478:  CLRF   33
247A:  CLRF   34
247C:  CLRF   35
247E:  CLRF   36
2480:  CLRF   37
2482:  CLRF   38
2484:  CLRF   39
2486:  CLRF   3A
2488:  CLRF   3B
248A:  BCF    3C.0
248C:  BCF    3C.1
248E:  BCF    3C.2
2490:  BCF    3C.3
2492:  BCF    3C.4
2494:  BCF    3C.5
2496:  BCF    3C.6
2498:  BCF    3C.7
249A:  BCF    3D.0
249C:  BCF    3D.1
249E:  BCF    3D.2
24A0:  BCF    3D.3
24A2:  BCF    3D.4
24A4:  CLRF   3E
24A6:  CLRF   4D
24A8:  CLRF   4C
24AA:  CLRF   4B
24AC:  CLRF   4A
24AE:  CLRF   51
24B0:  CLRF   50
24B2:  MOVLW  4B
24B4:  MOVWF  4F
24B6:  MOVLW  86
24B8:  MOVWF  4E
24BA:  BCF    3D.6
24BC:  BCF    3D.7
24BE:  BCF    52.0
24C0:  BCF    52.1
24C2:  BCF    52.2
24C4:  BCF    52.3
24C6:  BCF    52.4
24C8:  BCF    52.5
24CA:  BCF    52.6
24CC:  CLRF   54
24CE:  CLRF   53
24D0:  CLRF   56
24D2:  CLRF   55
24D4:  CLRF   58
24D6:  CLRF   57
24D8:  CLRF   5A
24DA:  CLRF   59
24DC:  MOVLW  19
24DE:  MOVWF  5F
24E0:  MOVLW  53
24E2:  MOVWF  5E
24E4:  MOVLW  18
24E6:  MOVWF  5D
24E8:  MOVLW  68
24EA:  MOVWF  5C
24EC:  MOVLW  E9
24EE:  MOVWF  x63
24F0:  MOVLW  BD
24F2:  MOVWF  x62
24F4:  MOVLW  C6
24F6:  MOVWF  x61
24F8:  MOVLW  71
24FA:  MOVWF  x60
24FC:  MOVLW  BE
24FE:  MOVWF  x67
2500:  MOVLW  96
2502:  MOVWF  x66
2504:  MOVLW  24
2506:  MOVWF  x65
2508:  MOVLW  7A
250A:  MOVWF  x64
250C:  MOVLW  F3
250E:  MOVWF  x6B
2510:  MOVLW  5A
2512:  MOVWF  x6A
2514:  MOVLW  AB
2516:  MOVWF  x69
2518:  MOVLW  81
251A:  MOVWF  x68
251C:  CLRF   x6F
251E:  CLRF   x6E
2520:  CLRF   x6D
2522:  CLRF   x6C
2524:  CLRF   x73
2526:  CLRF   x72
2528:  CLRF   x71
252A:  CLRF   x70
252C:  CLRF   x77
252E:  CLRF   x76
2530:  CLRF   x75
2532:  CLRF   x74
2534:  CLRF   x7B
2536:  CLRF   x7A
2538:  CLRF   x79
253A:  CLRF   x78
253C:  CLRF   x7F
253E:  CLRF   x7E
2540:  CLRF   x7D
2542:  CLRF   x7C
2544:  CLRF   x83
2546:  CLRF   x82
2548:  CLRF   x81
254A:  CLRF   x80
254C:  CLRF   x87
254E:  CLRF   x86
2550:  CLRF   x85
2552:  CLRF   x84
2554:  CLRF   x8B
2556:  CLRF   x8A
2558:  CLRF   x89
255A:  CLRF   x88
255C:  CLRF   x8F
255E:  CLRF   x8E
2560:  CLRF   x8D
2562:  CLRF   x8C
2564:  CLRF   x93
2566:  CLRF   x92
2568:  CLRF   x91
256A:  CLRF   x90
256C:  CLRF   x97
256E:  CLRF   x96
2570:  CLRF   x95
2572:  CLRF   x94
2574:  CLRF   x9B
2576:  CLRF   x9A
2578:  CLRF   x99
257A:  MOVLW  7F
257C:  MOVWF  x98
257E:  CLRF   x9F
2580:  CLRF   x9E
2582:  CLRF   x9D
2584:  CLRF   x9C
2586:  MOVF   FC1,W
2588:  ANDLW  C0
258A:  IORLW  0F
258C:  MOVWF  FC1
258E:  MOVLW  07
2590:  MOVWF  FB4
2592:  MOVLW  3E
2594:  MOVWF  3F
2596:  MOVLW  20
2598:  MOVWF  40
259A:  MOVLW  5E
259C:  MOVWF  41
259E:  CLRF   42
25A0:  CLRF   43
25A2:  CLRF   44
25A4:  CLRF   45
25A6:  CLRF   46
25A8:  CLRF   47
25AA:  CLRF   48
25AC:  CLRF   49
25AE:  CLRF   xA0
25B0:  CLRF   xA1
25B2:  CLRF   xA2
25B4:  CLRF   xA3
25B6:  CLRF   xA4
25B8:  CLRF   xA5
25BA:  CLRF   xA6
25BC:  CLRF   xA7
25BE:  CLRF   xA8
25C0:  CLRF   xA9
25C2:  CLRF   xAA
25C4:  CLRF   xAB
25C6:  CLRF   xAC
25C8:  CLRF   xAD
25CA:  CLRF   xAE
25CC:  CLRF   xAF
25CE:  CLRF   xB0
25D0:  CLRF   xB1
25D2:  CLRF   xB2
25D4:  CLRF   xB3
25D6:  CLRF   xB4
25D8:  CLRF   xB5
25DA:  CLRF   xB6
25DC:  CLRF   xB7
25DE:  CLRF   xB8
25E0:  CLRF   xB9
25E2:  CLRF   xBA
25E4:  CLRF   xBB
25E6:  CLRF   xBC
25E8:  CLRF   xBD
25EA:  CLRF   xBE
25EC:  CLRF   xBF
25EE:  CLRF   xC0
25F0:  CLRF   xC1
25F2:  CLRF   xC2
25F4:  CLRF   xC3
25F6:  CLRF   xC4
25F8:  CLRF   xC5
25FA:  CLRF   xC6
25FC:  CLRF   xC7
25FE:  CLRF   xC8
2600:  CLRF   xC9
2602:  CLRF   xCA
2604:  CLRF   xCB
2606:  CLRF   xCC
2608:  CLRF   xCD
260A:  CLRF   xCE
260C:  CLRF   xCF
....................    ConfigInicial(); 
260E:  GOTO   0AD4
....................    LeeEEPROM();             
2612:  GOTO   0F18
....................    LimitaValores();  
2616:  GOTO   13BE
....................    Menu=200; 
261A:  MOVLW  C8
261C:  MOVWF  18
....................    SalidasOff(); 
261E:  CALL   08C6
....................    while(true){ 
....................  
....................    while(Menu==200){ 
2622:  MOVF   18,W
2624:  SUBLW  C8
2626:  BNZ   26DE
....................       SalidasOff(); 
2628:  CALL   08C6
....................       if(RIGHT){ 
262C:  BSF    F96.1
262E:  BTFSS  F84.1
2630:  BRA    26DC
....................          delay_ms(1000); 
2632:  MOVLW  04
2634:  MOVWF  xD0
2636:  MOVLW  FA
2638:  MOVWF  xE3
263A:  CALL   08EA
263E:  DECFSZ xD0,F
2640:  BRA    2636
....................          if(RIGHT){    
2642:  BSF    F96.1
2644:  BTFSS  F84.1
2646:  BRA    26DC
....................             lcd_init(); 
2648:  CALL   09A8
....................             intensidadpantalla(1); 
264C:  MOVLW  01
264E:  MOVWF  xD0
2650:  CALL   08DA
....................             lcd_gotoxy(1,1); 
2654:  MOVLW  01
2656:  MOVWF  xDE
2658:  MOVWF  xDF
265A:  CALL   0A00
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
265E:  MOVLW  4E
2660:  MOVWF  FF6
2662:  MOVLW  02
2664:  MOVWF  FF7
2666:  CALL   18DC
....................             lcd_gotoxy(1,2); 
266A:  MOVLW  01
266C:  MOVWF  xDE
266E:  MOVLW  02
2670:  MOVWF  xDF
2672:  CALL   0A00
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
2676:  MOVLW  64
2678:  MOVWF  FF6
267A:  MOVLW  02
267C:  MOVWF  FF7
267E:  CALL   18DC
....................             lcd_gotoxy(1,3); 
2682:  MOVLW  01
2684:  MOVWF  xDE
2686:  MOVLW  03
2688:  MOVWF  xDF
268A:  CALL   0A00
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
268E:  MOVLW  7A
2690:  MOVWF  FF6
2692:  MOVLW  02
2694:  MOVWF  FF7
2696:  CALL   18DC
....................             lcd_gotoxy(1,4); 
269A:  MOVLW  01
269C:  MOVWF  xDE
269E:  MOVLW  04
26A0:  MOVWF  xDF
26A2:  CALL   0A00
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
26A6:  MOVLW  90
26A8:  MOVWF  FF6
26AA:  MOVLW  02
26AC:  MOVWF  FF7
26AE:  CALL   18DC
....................             delay_ms(2000); 
26B2:  MOVLW  08
26B4:  MOVWF  xD0
26B6:  MOVLW  FA
26B8:  MOVWF  xE3
26BA:  CALL   08EA
26BE:  DECFSZ xD0,F
26C0:  BRA    26B6
....................             printf(lcd_putc,"\f"); 
26C2:  MOVLW  0C
26C4:  MOVWF  xDD
26C6:  CALL   0A72
....................             Menu=0; 
26CA:  CLRF   18
....................             delay_ms(500); 
26CC:  MOVLW  02
26CE:  MOVWF  xD0
26D0:  MOVLW  FA
26D2:  MOVWF  xE3
26D4:  CALL   08EA
26D8:  DECFSZ xD0,F
26DA:  BRA    26D0
....................          } 
....................       } 
....................    } 
26DC:  BRA    2622
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
26DE:  MOVF   18,F
26E0:  BTFSS  FD8.2
26E2:  BRA    2B0A
....................       flag_latencia=1; 
26E4:  BSF    3D.0
....................       SalidasOff(); 
26E6:  CALL   08C6
....................       if(Latencia==1){ 
26EA:  BTFSS  3D.1
26EC:  BRA    26F8
....................          printf(lcd_putc,"\f");reset_cpu(); 
26EE:  MOVLW  0C
26F0:  MOVWF  xDD
26F2:  CALL   0A72
26F6:  RESET
....................       } 
....................       lcd_gotoxy(1,1); 
26F8:  MOVLW  01
26FA:  MOVWF  xDE
26FC:  MOVWF  xDF
26FE:  CALL   0A00
....................       printf(lcd_putc,"     Ingrese        "); 
2702:  MOVLW  A6
2704:  MOVWF  FF6
2706:  MOVLW  02
2708:  MOVWF  FF7
270A:  CALL   18DC
....................       lcd_gotoxy(1,2); 
270E:  MOVLW  01
2710:  MOVWF  xDE
2712:  MOVLW  02
2714:  MOVWF  xDF
2716:  CALL   0A00
....................       printf(lcd_putc,"    Contraseña      "); 
271A:  MOVLW  BC
271C:  MOVWF  FF6
271E:  MOVLW  02
2720:  MOVWF  FF7
2722:  CALL   18DC
....................       lcd_gotoxy(1,3); 
2726:  MOVLW  01
2728:  MOVWF  xDE
272A:  MOVLW  03
272C:  MOVWF  xDF
272E:  CALL   0A00
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2732:  MOVLW  D2
2734:  MOVWF  FF6
2736:  MOVLW  02
2738:  MOVWF  FF7
273A:  MOVLW  0A
273C:  MOVWF  xD0
273E:  CALL   18FE
2742:  MOVFF  42,D0
2746:  MOVLW  1F
2748:  MOVWF  xD1
274A:  CALL   1946
274E:  MOVFF  43,D0
2752:  MOVLW  1F
2754:  MOVWF  xD1
2756:  CALL   1946
275A:  MOVFF  44,D0
275E:  MOVLW  1F
2760:  MOVWF  xD1
2762:  CALL   1946
2766:  MOVFF  45,D0
276A:  MOVLW  1F
276C:  MOVWF  xD1
276E:  CALL   1946
2772:  MOVLW  20
2774:  MOVWF  xDD
2776:  CALL   0A72
277A:  MOVLW  20
277C:  MOVWF  xDD
277E:  CALL   0A72
....................    
....................       //letra=lcd_getc(5,3); 
....................        
....................       if(UP){//Si oprime hacia arriba 
2782:  BSF    F92.5
2784:  BTFSS  F80.5
2786:  BRA    27BC
....................          delay_ms(20); 
2788:  MOVLW  14
278A:  MOVWF  xE3
278C:  CALL   08EA
....................          if(UP && Flanco == 0){ 
2790:  BSF    F92.5
2792:  BTFSS  F80.5
2794:  BRA    27BA
2796:  BTFSC  3C.4
2798:  BRA    27BA
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0; 
279A:  MOVLW  0B
279C:  SUBWF  1A,W
279E:  CLRF   03
27A0:  ADDLW  42
27A2:  MOVWF  FE9
27A4:  MOVLW  00
27A6:  ADDWFC 03,W
27A8:  MOVWF  FEA
27AA:  INCF   FEF,F
27AC:  BSF    3C.4
27AE:  MOVLW  1E
27B0:  MOVWF  xE3
27B2:  CALL   08EA
27B6:  CLRF   56
27B8:  CLRF   55
....................          } 
....................       }else{ 
27BA:  BRA    27BE
....................          Flanco = 0; 
27BC:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
27BE:  BSF    F96.0
27C0:  BTFSS  F84.0
27C2:  BRA    27F8
....................          delay_ms(20); 
27C4:  MOVLW  14
27C6:  MOVWF  xE3
27C8:  CALL   08EA
....................          if(DOWN && Flanco2 == 0){ 
27CC:  BSF    F96.0
27CE:  BTFSS  F84.0
27D0:  BRA    27F6
27D2:  BTFSC  3C.6
27D4:  BRA    27F6
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0; 
27D6:  MOVLW  0B
27D8:  SUBWF  1A,W
27DA:  CLRF   03
27DC:  ADDLW  42
27DE:  MOVWF  FE9
27E0:  MOVLW  00
27E2:  ADDWFC 03,W
27E4:  MOVWF  FEA
27E6:  DECF   FEF,F
27E8:  BSF    3C.6
27EA:  MOVLW  1E
27EC:  MOVWF  xE3
27EE:  CALL   08EA
27F2:  CLRF   56
27F4:  CLRF   55
....................          } 
....................       }else{ 
27F6:  BRA    27FA
....................          Flanco2 = 0; 
27F8:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
27FA:  BSF    F96.1
27FC:  BTFSS  F84.1
27FE:  BRA    282C
....................          delay_ms(20); 
2800:  MOVLW  14
2802:  MOVWF  xE3
2804:  CALL   08EA
....................          if(RIGHT && Flanco1 == 0){ 
2808:  BSF    F96.1
280A:  BTFSS  F84.1
280C:  BRA    282A
280E:  BTFSC  3C.5
2810:  BRA    282A
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
2812:  BSF    3C.5
2814:  INCF   1A,F
2816:  MOVLW  1E
2818:  MOVWF  xE3
281A:  CALL   08EA
281E:  MOVLW  0C
2820:  MOVWF  xDD
2822:  CALL   0A72
2826:  CLRF   56
2828:  CLRF   55
....................          } 
....................       }else{ 
282A:  BRA    282E
....................          Flanco1 = 0; 
282C:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si Oprime izquierda 
282E:  BSF    F96.2
2830:  BTFSS  F84.2
2832:  BRA    2860
....................          delay_ms(20); 
2834:  MOVLW  14
2836:  MOVWF  xE3
2838:  CALL   08EA
....................          if(LEFT && Flanco3 == 0){ 
283C:  BSF    F96.2
283E:  BTFSS  F84.2
2840:  BRA    285E
2842:  BTFSC  3C.7
2844:  BRA    285E
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
2846:  BSF    3C.7
2848:  DECF   1A,F
284A:  MOVLW  1E
284C:  MOVWF  xE3
284E:  CALL   08EA
2852:  MOVLW  0C
2854:  MOVWF  xDD
2856:  CALL   0A72
285A:  CLRF   56
285C:  CLRF   55
....................          } 
....................       }else{ 
285E:  BRA    2862
....................          Flanco3 = 0; 
2860:  BCF    3C.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2862:  MOVLW  0B
2864:  SUBWF  1A,W
2866:  CLRF   03
2868:  ADDLW  42
286A:  MOVWF  FE9
286C:  MOVLW  00
286E:  ADDWFC 03,W
2870:  MOVWF  FEA
2872:  BTFSC  FEF.7
2874:  BRA    2878
2876:  BRA    288C
....................          clave[unidad-11]=9; 
2878:  MOVLW  0B
287A:  SUBWF  1A,W
287C:  CLRF   03
287E:  ADDLW  42
2880:  MOVWF  FE9
2882:  MOVLW  00
2884:  ADDWFC 03,W
2886:  MOVWF  FEA
2888:  MOVLW  09
288A:  MOVWF  FEF
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
288C:  MOVLW  0B
288E:  SUBWF  1A,W
2890:  CLRF   03
2892:  ADDLW  42
2894:  MOVWF  FE9
2896:  MOVLW  00
2898:  ADDWFC 03,W
289A:  MOVWF  FEA
289C:  BTFSC  FEF.7
289E:  BRA    28B8
28A0:  MOVF   FEF,W
28A2:  SUBLW  09
28A4:  BC    28B8
....................          clave[unidad-11]=0; 
28A6:  MOVLW  0B
28A8:  SUBWF  1A,W
28AA:  CLRF   03
28AC:  ADDLW  42
28AE:  MOVWF  FE9
28B0:  MOVLW  00
28B2:  ADDWFC 03,W
28B4:  MOVWF  FEA
28B6:  CLRF   FEF
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
28B8:  MOVF   1A,W
28BA:  SUBLW  0A
28BC:  BNC   28C2
....................          unidad=11; 
28BE:  MOVLW  0B
28C0:  MOVWF  1A
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar cursor. 
28C2:  MOVFF  1A,DE
28C6:  MOVLW  04
28C8:  MOVWF  xDF
28CA:  CALL   0A00
....................       lcd_putc(t[2]); 
28CE:  MOVFF  41,DD
28D2:  CALL   0A72
....................        
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
28D6:  MOVF   1A,W
28D8:  SUBLW  0E
28DA:  BTFSC  FD8.0
28DC:  BRA    2AE4
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
28DE:  MOVF   42,W
28E0:  SUBLW  03
28E2:  BNZ   29BE
28E4:  MOVF   43,W
28E6:  SUBLW  08
28E8:  BNZ   29BE
28EA:  MOVF   44,W
28EC:  SUBLW  09
28EE:  BNZ   29BE
28F0:  MOVF   45,W
28F2:  SUBLW  02
28F4:  BNZ   29BE
....................              write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
28F6:  CLRF   FA9
28F8:  CLRF   FA8
28FA:  BCF    FA6.6
28FC:  BCF    FA6.7
28FE:  BSF    FA6.2
2900:  MOVF   FF2,W
2902:  MOVWF  00
2904:  BCF    FF2.7
2906:  MOVLB  F
2908:  MOVLW  55
290A:  MOVWF  FA7
290C:  MOVLW  AA
290E:  MOVWF  FA7
2910:  BSF    FA6.1
2912:  BTFSC  FA6.1
2914:  BRA    2912
2916:  BCF    FA6.2
2918:  MOVF   00,W
291A:  IORWF  FF2,F
291C:  MOVLW  14
291E:  MOVLB  0
2920:  MOVWF  xE3
2922:  CALL   08EA
2926:  MOVLW  01
2928:  MOVWF  FA9
292A:  CLRF   FA8
292C:  BCF    FA6.6
292E:  BCF    FA6.7
2930:  BSF    FA6.2
2932:  MOVF   FF2,W
2934:  MOVWF  00
2936:  BCF    FF2.7
2938:  MOVLB  F
293A:  MOVLW  55
293C:  MOVWF  FA7
293E:  MOVLW  AA
2940:  MOVWF  FA7
2942:  BSF    FA6.1
2944:  BTFSC  FA6.1
2946:  BRA    2944
2948:  BCF    FA6.2
294A:  MOVF   00,W
294C:  IORWF  FF2,F
294E:  MOVLW  14
2950:  MOVLB  0
2952:  MOVWF  xE3
2954:  CALL   08EA
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2958:  MOVLW  02
295A:  MOVWF  FA9
295C:  CLRF   FA8
295E:  BCF    FA6.6
2960:  BCF    FA6.7
2962:  BSF    FA6.2
2964:  MOVF   FF2,W
2966:  MOVWF  00
2968:  BCF    FF2.7
296A:  MOVLB  F
296C:  MOVLW  55
296E:  MOVWF  FA7
2970:  MOVLW  AA
2972:  MOVWF  FA7
2974:  BSF    FA6.1
2976:  BTFSC  FA6.1
2978:  BRA    2976
297A:  BCF    FA6.2
297C:  MOVF   00,W
297E:  IORWF  FF2,F
2980:  MOVLW  14
2982:  MOVLB  0
2984:  MOVWF  xE3
2986:  CALL   08EA
298A:  MOVLW  03
298C:  MOVWF  FA9
298E:  CLRF   FA8
2990:  BCF    FA6.6
2992:  BCF    FA6.7
2994:  BSF    FA6.2
2996:  MOVF   FF2,W
2998:  MOVWF  00
299A:  BCF    FF2.7
299C:  MOVLB  F
299E:  MOVLW  55
29A0:  MOVWF  FA7
29A2:  MOVLW  AA
29A4:  MOVWF  FA7
29A6:  BSF    FA6.1
29A8:  BTFSC  FA6.1
29AA:  BRA    29A8
29AC:  BCF    FA6.2
29AE:  MOVF   00,W
29B0:  IORWF  FF2,F
29B2:  MOVLW  14
29B4:  MOVLB  0
29B6:  MOVWF  xE3
29B8:  CALL   08EA
....................              reset_cpu(); 
29BC:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
29BE:  MOVF   46,W
29C0:  SUBWF  42,W
29C2:  BNZ   2A6E
29C4:  MOVF   47,W
29C6:  SUBWF  43,W
29C8:  BNZ   2A6E
29CA:  MOVF   48,W
29CC:  SUBWF  44,W
29CE:  BNZ   2A6E
29D0:  MOVF   49,W
29D2:  SUBWF  45,W
29D4:  BNZ   2A6E
....................             lcd_gotoxy(1,1); 
29D6:  MOVLW  01
29D8:  MOVWF  xDE
29DA:  MOVWF  xDF
29DC:  CALL   0A00
....................             printf(lcd_putc,"                   "); 
29E0:  MOVLW  E8
29E2:  MOVWF  FF6
29E4:  MOVLW  02
29E6:  MOVWF  FF7
29E8:  CALL   18DC
....................             lcd_gotoxy(1,2); 
29EC:  MOVLW  01
29EE:  MOVWF  xDE
29F0:  MOVLW  02
29F2:  MOVWF  xDF
29F4:  CALL   0A00
....................             printf(lcd_putc,"     Contraseña    "); 
29F8:  MOVLW  FC
29FA:  MOVWF  FF6
29FC:  MOVLW  02
29FE:  MOVWF  FF7
2A00:  CALL   18DC
....................             lcd_gotoxy(1,3); 
2A04:  MOVLW  01
2A06:  MOVWF  xDE
2A08:  MOVLW  03
2A0A:  MOVWF  xDF
2A0C:  CALL   0A00
....................             printf(lcd_putc,"      Correcta     "); 
2A10:  MOVLW  10
2A12:  MOVWF  FF6
2A14:  MOVLW  03
2A16:  MOVWF  FF7
2A18:  CALL   18DC
....................             lcd_gotoxy(1,4); 
2A1C:  MOVLW  01
2A1E:  MOVWF  xDE
2A20:  MOVLW  04
2A22:  MOVWF  xDF
2A24:  CALL   0A00
....................             printf(lcd_putc,"                   "); 
2A28:  MOVLW  24
2A2A:  MOVWF  FF6
2A2C:  MOVLW  03
2A2E:  MOVWF  FF7
2A30:  CALL   18DC
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
2A34:  MOVLW  02
2A36:  MOVWF  xD0
2A38:  MOVLW  FA
2A3A:  MOVWF  xE3
2A3C:  CALL   08EA
2A40:  DECFSZ xD0,F
2A42:  BRA    2A38
2A44:  MOVLW  32
2A46:  MOVWF  18
2A48:  MOVLW  0B
2A4A:  MOVWF  1A
2A4C:  MOVLW  0C
2A4E:  MOVWF  xDD
2A50:  CALL   0A72
2A54:  BSF    F8A.7
2A56:  BCF    F93.7
2A58:  BCF    3D.0
2A5A:  BCF    3D.1
2A5C:  BSF    52.5
....................             t_latencia=0;flag_iniciodamper=1; 
2A5E:  CLRF   56
2A60:  CLRF   55
2A62:  BSF    52.0
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2A64:  CLRF   42
2A66:  CLRF   43
2A68:  CLRF   44
2A6A:  CLRF   45
....................          }else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2A6C:  BRA    2AE4
....................             lcd_gotoxy(1,1); 
2A6E:  MOVLW  01
2A70:  MOVWF  xDE
2A72:  MOVWF  xDF
2A74:  CALL   0A00
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2A78:  MOVLW  01
2A7A:  MOVWF  xDE
2A7C:  MOVLW  02
2A7E:  MOVWF  xDF
2A80:  CALL   0A00
....................             printf(lcd_putc,"     Contraseña    "); 
2A84:  MOVLW  38
2A86:  MOVWF  FF6
2A88:  MOVLW  03
2A8A:  MOVWF  FF7
2A8C:  CALL   18DC
....................             lcd_gotoxy(1,3); 
2A90:  MOVLW  01
2A92:  MOVWF  xDE
2A94:  MOVLW  03
2A96:  MOVWF  xDF
2A98:  CALL   0A00
....................             printf(lcd_putc,"     Incorrecta    "); 
2A9C:  MOVLW  4C
2A9E:  MOVWF  FF6
2AA0:  MOVLW  03
2AA2:  MOVWF  FF7
2AA4:  CALL   18DC
....................             lcd_gotoxy(1,4); 
2AA8:  MOVLW  01
2AAA:  MOVWF  xDE
2AAC:  MOVLW  04
2AAE:  MOVWF  xDF
2AB0:  CALL   0A00
....................             printf(lcd_putc,"                   "); 
2AB4:  MOVLW  60
2AB6:  MOVWF  FF6
2AB8:  MOVLW  03
2ABA:  MOVWF  FF7
2ABC:  CALL   18DC
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
2AC0:  MOVLW  02
2AC2:  MOVWF  xD0
2AC4:  MOVLW  FA
2AC6:  MOVWF  xE3
2AC8:  CALL   08EA
2ACC:  DECFSZ xD0,F
2ACE:  BRA    2AC4
2AD0:  MOVLW  0B
2AD2:  MOVWF  1A
2AD4:  MOVLW  0C
2AD6:  MOVWF  xDD
2AD8:  CALL   0A72
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2ADC:  CLRF   42
2ADE:  CLRF   43
2AE0:  CLRF   44
2AE2:  CLRF   45
....................          } 
....................       } 
....................     
....................       if(unidad>11&&unidad<14){ 
2AE4:  MOVF   1A,W
2AE6:  SUBLW  0B
2AE8:  BC    2B08
2AEA:  MOVF   1A,W
2AEC:  SUBLW  0D
2AEE:  BNC   2B08
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2AF0:  MOVLW  01
2AF2:  SUBWF  1A,W
2AF4:  MOVWF  xD0
2AF6:  MOVWF  xDE
2AF8:  MOVLW  04
2AFA:  MOVWF  xDF
2AFC:  CALL   0A00
....................          lcd_putc(t[1]); 
2B00:  MOVFF  40,DD
2B04:  CALL   0A72
....................       } 
....................  
....................    } 
2B08:  BRA    26DE
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2B0A:  DECFSZ 18,W
2B0C:  BRA    2D3C
....................     
....................       lcd_gotoxy(1,1); 
2B0E:  MOVLW  01
2B10:  MOVWF  xDE
2B12:  MOVWF  xDF
2B14:  CALL   0A00
....................       printf(lcd_putc,"---MENU PRINCIPAL---"); 
2B18:  MOVLW  74
2B1A:  MOVWF  FF6
2B1C:  MOVLW  03
2B1E:  MOVWF  FF7
2B20:  CALL   18DC
....................     
....................       if(UP){//Si oprime hacia arriba 
2B24:  BSF    F92.5
2B26:  BTFSS  F80.5
2B28:  BRA    2B52
....................          delay_ms(20); 
2B2A:  MOVLW  14
2B2C:  MOVWF  xE3
2B2E:  CALL   08EA
....................          if(UP && Flanco == 0){ 
2B32:  BSF    F92.5
2B34:  BTFSS  F80.5
2B36:  BRA    2B50
2B38:  BTFSC  3C.4
2B3A:  BRA    2B50
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2B3C:  DECF   1D,F
2B3E:  DECF   1B,F
2B40:  MOVLW  01
2B42:  ADDWF  1B,W
2B44:  MOVWF  1C
2B46:  BSF    3C.4
2B48:  MOVLW  1E
2B4A:  MOVWF  xE3
2B4C:  CALL   08EA
....................          } 
....................       }else{ 
2B50:  BRA    2B54
....................          Flanco = 0; 
2B52:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2B54:  BSF    F96.0
2B56:  BTFSS  F84.0
2B58:  BRA    2B82
....................          delay_ms(20); 
2B5A:  MOVLW  14
2B5C:  MOVWF  xE3
2B5E:  CALL   08EA
....................          if(DOWN && Flanco2 == 0){ 
2B62:  BSF    F96.0
2B64:  BTFSS  F84.0
2B66:  BRA    2B80
2B68:  BTFSC  3C.6
2B6A:  BRA    2B80
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
2B6C:  INCF   1D,F
2B6E:  INCF   1B,F
2B70:  MOVLW  01
2B72:  SUBWF  1B,W
2B74:  MOVWF  1C
2B76:  BSF    3C.6
2B78:  MOVLW  1E
2B7A:  MOVWF  xE3
2B7C:  CALL   08EA
....................          } 
....................       }else{ 
2B80:  BRA    2B84
....................          Flanco2 = 0; 
2B82:  BCF    3C.6
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH) 
2B84:  MOVF   1D,W
2B86:  SUBWF  1F,W
2B88:  BC    2B9A
....................       {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2B8A:  INCF   3E,F
2B8C:  MOVFF  1D,1F
2B90:  MOVLW  02
2B92:  SUBWF  1F,W
2B94:  MOVWF  1E
2B96:  MOVLW  04
2B98:  MOVWF  1B
....................          
....................       if(Flecha2<nMenuL) 
2B9A:  MOVF   1E,W
2B9C:  SUBWF  1D,W
2B9E:  BC    2BB0
....................       {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2BA0:  DECF   3E,F
2BA2:  MOVFF  1D,1E
2BA6:  MOVLW  02
2BA8:  ADDWF  1E,W
2BAA:  MOVWF  1F
2BAC:  MOVLW  02
2BAE:  MOVWF  1B
....................          
....................       if(Flecha2>n_opcionH) 
2BB0:  MOVF   1D,W
2BB2:  SUBWF  17,W
2BB4:  BC    2BC8
....................       {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2BB6:  MOVFF  19,1D
2BBA:  MOVLW  02
2BBC:  MOVWF  1B
2BBE:  CLRF   3E
2BC0:  MOVFF  1D,1E
2BC4:  ADDWF  1E,W
2BC6:  MOVWF  1F
....................        
....................       if(Flecha2<n_opcionL) 
2BC8:  MOVF   19,W
2BCA:  SUBWF  1D,W
2BCC:  BC    2BE4
....................       {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
2BCE:  MOVFF  17,1D
2BD2:  MOVLW  04
2BD4:  MOVWF  1B
2BD6:  SUBWF  17,W
2BD8:  MOVWF  3E
2BDA:  MOVFF  1D,1F
2BDE:  MOVLW  02
2BE0:  SUBWF  1F,W
2BE2:  MOVWF  1E
....................           
....................       if(paso<0) 
2BE4:  BTFSC  3E.7
2BE6:  BRA    2BEA
2BE8:  BRA    2BEC
....................          paso=0; 
2BEA:  CLRF   3E
....................        
....................       mensajes(1+paso,2); 
2BEC:  MOVLW  01
2BEE:  ADDWF  3E,W
2BF0:  MOVWF  xD0
2BF2:  MOVWF  xD1
2BF4:  MOVLW  02
2BF6:  MOVWF  xD2
2BF8:  CALL   1A16
....................       mensajes(2+paso,3); 
2BFC:  MOVLW  02
2BFE:  ADDWF  3E,W
2C00:  MOVWF  xD0
2C02:  MOVWF  xD1
2C04:  MOVLW  03
2C06:  MOVWF  xD2
2C08:  CALL   1A16
....................       mensajes(3+paso,4); 
2C0C:  MOVLW  03
2C0E:  ADDWF  3E,W
2C10:  MOVWF  xD0
2C12:  MOVWF  xD1
2C14:  MOVLW  04
2C16:  MOVWF  xD2
2C18:  CALL   1A16
....................  
....................       lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2C1C:  MOVLW  01
2C1E:  MOVWF  xDE
2C20:  MOVFF  1B,DF
2C24:  CALL   0A00
....................       lcd_putc(t[0]); 
2C28:  MOVFF  3F,DD
2C2C:  CALL   0A72
....................  
....................       if(Flecha==2){ 
2C30:  MOVF   1B,W
2C32:  SUBLW  02
2C34:  BNZ   2C5E
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2C36:  MOVLW  01
2C38:  MOVWF  xDE
2C3A:  MOVLW  04
2C3C:  MOVWF  xDF
2C3E:  CALL   0A00
....................          lcd_putc(t[1]); 
2C42:  MOVFF  40,DD
2C46:  CALL   0A72
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2C4A:  MOVLW  01
2C4C:  MOVWF  xDE
2C4E:  MOVLW  03
2C50:  MOVWF  xDF
2C52:  CALL   0A00
....................          lcd_putc(t[1]); 
2C56:  MOVFF  40,DD
2C5A:  CALL   0A72
....................       } 
....................          
....................       if(Flecha==4){ 
2C5E:  MOVF   1B,W
2C60:  SUBLW  04
2C62:  BNZ   2C8C
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2C64:  MOVLW  01
2C66:  MOVWF  xDE
2C68:  MOVLW  02
2C6A:  MOVWF  xDF
2C6C:  CALL   0A00
....................          lcd_putc(t[1]); 
2C70:  MOVFF  40,DD
2C74:  CALL   0A72
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2C78:  MOVLW  01
2C7A:  MOVWF  xDE
2C7C:  MOVLW  03
2C7E:  MOVWF  xDF
2C80:  CALL   0A00
....................          lcd_putc(t[1]); 
2C84:  MOVFF  40,DD
2C88:  CALL   0A72
....................       } 
....................          
....................       if(Flecha==3){ 
2C8C:  MOVF   1B,W
2C8E:  SUBLW  03
2C90:  BNZ   2CBA
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2C92:  MOVLW  01
2C94:  MOVWF  xDE
2C96:  MOVLW  04
2C98:  MOVWF  xDF
2C9A:  CALL   0A00
....................          lcd_putc(t[1]); 
2C9E:  MOVFF  40,DD
2CA2:  CALL   0A72
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2CA6:  MOVLW  01
2CA8:  MOVWF  xDE
2CAA:  MOVLW  02
2CAC:  MOVWF  xDF
2CAE:  CALL   0A00
....................          lcd_putc(t[1]); 
2CB2:  MOVFF  40,DD
2CB6:  CALL   0A72
....................       } 
....................  
....................       if(RIGHT){// Si oprime derecha 
2CBA:  BSF    F96.1
2CBC:  BTFSS  F84.1
2CBE:  BRA    2D02
....................          delay_ms(20); 
2CC0:  MOVLW  14
2CC2:  MOVWF  xE3
2CC4:  CALL   08EA
....................          if(RIGHT && Flanco1 == 0) { 
2CC8:  BSF    F96.1
2CCA:  BTFSS  F84.1
2CCC:  BRA    2D00
2CCE:  BTFSC  3C.5
2CD0:  BRA    2D00
....................             /*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
2CD2:  MOVFF  1D,18
2CD6:  MOVLW  03
2CD8:  MOVWF  1B
2CDA:  MOVLW  02
2CDC:  MOVWF  xD0
2CDE:  MOVLW  FA
2CE0:  MOVWF  xE3
2CE2:  CALL   08EA
2CE6:  DECFSZ xD0,F
2CE8:  BRA    2CDE
2CEA:  MOVLW  0C
2CEC:  MOVWF  xDD
2CEE:  CALL   0A72
....................             if(Menu==6){ 
2CF2:  MOVF   18,W
2CF4:  SUBLW  06
2CF6:  BNZ   2D00
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2CF8:  CLRF   42
2CFA:  CLRF   43
2CFC:  CLRF   44
2CFE:  CLRF   45
....................             } 
....................          } 
....................       }else{ 
2D00:  BRA    2D04
....................          Flanco1 = 0; 
2D02:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
2D04:  BSF    F96.2
2D06:  BTFSS  F84.2
2D08:  BRA    2D3A
....................          delay_ms(20); 
2D0A:  MOVLW  14
2D0C:  MOVWF  xE3
2D0E:  CALL   08EA
....................          if(LEFT && Flanco3 == 0) { 
2D12:  BSF    F96.2
2D14:  BTFSS  F84.2
2D16:  BRA    2D38
2D18:  BTFSC  3C.7
2D1A:  BRA    2D38
....................             /*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f"); 
2D1C:  MOVLW  02
2D1E:  MOVWF  xD0
2D20:  MOVLW  FA
2D22:  MOVWF  xE3
2D24:  CALL   08EA
2D28:  DECFSZ xD0,F
2D2A:  BRA    2D20
2D2C:  MOVLW  14
2D2E:  MOVWF  18
2D30:  MOVLW  0C
2D32:  MOVWF  xDD
2D34:  CALL   0A72
....................          } 
....................       }else{ 
2D38:  BRA    2D3C
....................          Flanco3 = 0; 
2D3A:  BCF    3C.7
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
2D3C:  MOVF   18,W
2D3E:  SUBLW  02
2D40:  BTFSS  FD8.2
2D42:  BRA    2E68
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
2D44:  BTG    3C.2
2D46:  BSF    3C.5
2D48:  MOVLW  01
2D4A:  MOVWF  18
2D4C:  CLRF   3E
....................                        
....................             if(estadoalarma==1){ 
2D4E:  BTFSS  3C.2
2D50:  BRA    2DB2
....................                estadoalarma=1; 
2D52:  BSF    3C.2
....................                lcd_gotoxy(1,1); 
2D54:  MOVLW  01
2D56:  MOVWF  xDE
2D58:  MOVWF  xDF
2D5A:  CALL   0A00
....................                printf(lcd_putc,"                    "); 
2D5E:  MOVLW  8A
2D60:  MOVWF  FF6
2D62:  MOVLW  03
2D64:  MOVWF  FF7
2D66:  CALL   18DC
....................                lcd_gotoxy(1,2); 
2D6A:  MOVLW  01
2D6C:  MOVWF  xDE
2D6E:  MOVLW  02
2D70:  MOVWF  xDF
2D72:  CALL   0A00
....................                printf(lcd_putc,"        Activo      "); 
2D76:  MOVLW  A0
2D78:  MOVWF  FF6
2D7A:  MOVLW  03
2D7C:  MOVWF  FF7
2D7E:  CALL   18DC
....................                lcd_gotoxy(1,3); 
2D82:  MOVLW  01
2D84:  MOVWF  xDE
2D86:  MOVLW  03
2D88:  MOVWF  xDF
2D8A:  CALL   0A00
....................                printf(lcd_putc,"        Alarma      "); 
2D8E:  MOVLW  B6
2D90:  MOVWF  FF6
2D92:  MOVLW  03
2D94:  MOVWF  FF7
2D96:  CALL   18DC
....................                lcd_gotoxy(1,4); 
2D9A:  MOVLW  01
2D9C:  MOVWF  xDE
2D9E:  MOVLW  04
2DA0:  MOVWF  xDF
2DA2:  CALL   0A00
....................                printf(lcd_putc,"                    "); 
2DA6:  MOVLW  CC
2DA8:  MOVWF  FF6
2DAA:  MOVLW  03
2DAC:  MOVWF  FF7
2DAE:  CALL   18DC
....................             } 
....................                 
....................             if(estadoalarma==0){ 
2DB2:  BTFSC  3C.2
2DB4:  BRA    2E16
....................                estadoalarma=0; 
2DB6:  BCF    3C.2
....................                lcd_gotoxy(1,1); 
2DB8:  MOVLW  01
2DBA:  MOVWF  xDE
2DBC:  MOVWF  xDF
2DBE:  CALL   0A00
....................                printf(lcd_putc,"                    "); 
2DC2:  MOVLW  E2
2DC4:  MOVWF  FF6
2DC6:  MOVLW  03
2DC8:  MOVWF  FF7
2DCA:  CALL   18DC
....................                lcd_gotoxy(1,2); 
2DCE:  MOVLW  01
2DD0:  MOVWF  xDE
2DD2:  MOVLW  02
2DD4:  MOVWF  xDF
2DD6:  CALL   0A00
....................                printf(lcd_putc,"      Desactivo     "); 
2DDA:  MOVLW  F8
2DDC:  MOVWF  FF6
2DDE:  MOVLW  03
2DE0:  MOVWF  FF7
2DE2:  CALL   18DC
....................                lcd_gotoxy(1,3); 
2DE6:  MOVLW  01
2DE8:  MOVWF  xDE
2DEA:  MOVLW  03
2DEC:  MOVWF  xDF
2DEE:  CALL   0A00
....................                printf(lcd_putc,"       Alarma       "); 
2DF2:  MOVLW  0E
2DF4:  MOVWF  FF6
2DF6:  MOVLW  04
2DF8:  MOVWF  FF7
2DFA:  CALL   18DC
....................                lcd_gotoxy(1,4); 
2DFE:  MOVLW  01
2E00:  MOVWF  xDE
2E02:  MOVLW  04
2E04:  MOVWF  xDF
2E06:  CALL   0A00
....................                printf(lcd_putc,"                    "); 
2E0A:  MOVLW  24
2E0C:  MOVWF  FF6
2E0E:  MOVLW  04
2E10:  MOVWF  FF7
2E12:  CALL   18DC
....................             } 
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E16:  MOVLW  00
2E18:  BTFSC  3C.2
2E1A:  MOVLW  01
2E1C:  MOVWF  xD0
2E1E:  MOVLW  05
2E20:  MOVWF  FA9
2E22:  MOVFF  D0,FA8
2E26:  BCF    FA6.6
2E28:  BCF    FA6.7
2E2A:  BSF    FA6.2
2E2C:  MOVF   FF2,W
2E2E:  MOVWF  00
2E30:  BCF    FF2.7
2E32:  MOVLB  F
2E34:  MOVLW  55
2E36:  MOVWF  FA7
2E38:  MOVLW  AA
2E3A:  MOVWF  FA7
2E3C:  BSF    FA6.1
2E3E:  BTFSC  FA6.1
2E40:  BRA    2E3E
2E42:  BCF    FA6.2
2E44:  MOVF   00,W
2E46:  IORWF  FF2,F
2E48:  MOVLW  04
2E4A:  MOVLB  0
2E4C:  MOVWF  xD0
2E4E:  MOVLW  FA
2E50:  MOVWF  xE3
2E52:  CALL   08EA
2E56:  DECFSZ xD0,F
2E58:  BRA    2E4E
2E5A:  MOVLW  02
2E5C:  MOVWF  1B
2E5E:  MOVWF  1D
2E60:  MOVLW  0C
2E62:  MOVWF  xDD
2E64:  CALL   0A72
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
2E68:  MOVF   18,W
2E6A:  SUBLW  03
2E6C:  BTFSS  FD8.2
2E6E:  BRA    30F8
....................     
....................       lcd_gotoxy(1,1); 
2E70:  MOVLW  01
2E72:  MOVWF  xDE
2E74:  MOVWF  xDF
2E76:  CALL   0A00
....................       printf(lcd_putc,"  Duracion Actual   ");                           
2E7A:  MOVLW  3A
2E7C:  MOVWF  FF6
2E7E:  MOVLW  04
2E80:  MOVWF  FF7
2E82:  CALL   18DC
....................       lcd_gotoxy(1,2);                                                   
2E86:  MOVLW  01
2E88:  MOVWF  xDE
2E8A:  MOVLW  02
2E8C:  MOVWF  xDF
2E8E:  CALL   0A00
....................       printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
2E92:  MOVLW  50
2E94:  MOVWF  FF6
2E96:  MOVLW  04
2E98:  MOVWF  FF7
2E9A:  MOVLW  09
2E9C:  MOVWF  xD0
2E9E:  CALL   18FE
2EA2:  MOVFF  33,D0
2EA6:  MOVLW  01
2EA8:  MOVWF  xD1
2EAA:  CALL   1ADC
2EAE:  MOVLW  3A
2EB0:  MOVWF  xDD
2EB2:  CALL   0A72
2EB6:  MOVFF  32,D0
2EBA:  MOVLW  01
2EBC:  MOVWF  xD1
2EBE:  CALL   1ADC
2EC2:  MOVLW  3A
2EC4:  MOVWF  xDD
2EC6:  CALL   0A72
2ECA:  MOVFF  31,D0
2ECE:  MOVLW  01
2ED0:  MOVWF  xD1
2ED2:  CALL   1ADC
2ED6:  MOVLW  20
2ED8:  MOVWF  xDD
2EDA:  CALL   0A72
....................        
....................       if(flag_filtro==1){ 
2EDE:  BTFSS  3D.2
2EE0:  BRA    2EFC
....................          lcd_gotoxy(1,3);                                                  
2EE2:  MOVLW  01
2EE4:  MOVWF  xDE
2EE6:  MOVLW  03
2EE8:  MOVWF  xDF
2EEA:  CALL   0A00
....................          printf(lcd_putc,"DESACTIVAR= Oprima >");                         
2EEE:  MOVLW  6A
2EF0:  MOVWF  FF6
2EF2:  MOVLW  04
2EF4:  MOVWF  FF7
2EF6:  CALL   18DC
....................       }else{ 
2EFA:  BRA    2F14
....................          lcd_gotoxy(1,3);                                                  
2EFC:  MOVLW  01
2EFE:  MOVWF  xDE
2F00:  MOVLW  03
2F02:  MOVWF  xDF
2F04:  CALL   0A00
....................          printf(lcd_putc," ACTIVAR= Oprima >  ");                         
2F08:  MOVLW  80
2F0A:  MOVWF  FF6
2F0C:  MOVLW  04
2F0E:  MOVWF  FF7
2F10:  CALL   18DC
....................       } 
....................     
....................       lcd_gotoxy(1,4);                                                  
2F14:  MOVLW  01
2F16:  MOVWF  xDE
2F18:  MOVLW  04
2F1A:  MOVWF  xDF
2F1C:  CALL   0A00
....................       printf(lcd_putc," RESET= Oprima ^    ");                                                                                    
2F20:  MOVLW  96
2F22:  MOVWF  FF6
2F24:  MOVLW  04
2F26:  MOVWF  FF7
2F28:  CALL   18DC
....................     
....................       if(UP){//Si oprime hacia arriba 
2F2C:  BSF    F92.5
2F2E:  BTFSS  F80.5
2F30:  BRA    3040
....................          delay_ms(20); 
2F32:  MOVLW  14
2F34:  MOVWF  xE3
2F36:  CALL   08EA
....................          if(UP){ 
2F3A:  BSF    F92.5
2F3C:  BTFSS  F80.5
2F3E:  BRA    3040
....................             printf(lcd_putc,"\f"); 
2F40:  MOVLW  0C
2F42:  MOVWF  xDD
2F44:  CALL   0A72
....................             lcd_gotoxy(1,2); 
2F48:  MOVLW  01
2F4A:  MOVWF  xDE
2F4C:  MOVLW  02
2F4E:  MOVWF  xDF
2F50:  CALL   0A00
....................             printf(lcd_putc," Reset de tiempo "); 
2F54:  MOVLW  AC
2F56:  MOVWF  FF6
2F58:  MOVLW  04
2F5A:  MOVWF  FF7
2F5C:  CALL   18DC
....................             lcd_gotoxy(1,3); 
2F60:  MOVLW  01
2F62:  MOVWF  xDE
2F64:  MOVLW  03
2F66:  MOVWF  xDF
2F68:  CALL   0A00
....................             printf(lcd_putc,"     Exitoso     "); 
2F6C:  MOVLW  BE
2F6E:  MOVWF  FF6
2F70:  MOVLW  04
2F72:  MOVWF  FF7
2F74:  CALL   18DC
....................             write_eeprom(70,0);delay_ms(20); 
2F78:  MOVLW  46
2F7A:  MOVWF  FA9
2F7C:  CLRF   FA8
2F7E:  BCF    FA6.6
2F80:  BCF    FA6.7
2F82:  BSF    FA6.2
2F84:  MOVF   FF2,W
2F86:  MOVWF  00
2F88:  BCF    FF2.7
2F8A:  MOVLB  F
2F8C:  MOVLW  55
2F8E:  MOVWF  FA7
2F90:  MOVLW  AA
2F92:  MOVWF  FA7
2F94:  BSF    FA6.1
2F96:  BTFSC  FA6.1
2F98:  BRA    2F96
2F9A:  BCF    FA6.2
2F9C:  MOVF   00,W
2F9E:  IORWF  FF2,F
2FA0:  MOVLW  14
2FA2:  MOVLB  0
2FA4:  MOVWF  xE3
2FA6:  CALL   08EA
....................             write_eeprom(71,0);delay_ms(20); 
2FAA:  MOVLW  47
2FAC:  MOVWF  FA9
2FAE:  CLRF   FA8
2FB0:  BCF    FA6.6
2FB2:  BCF    FA6.7
2FB4:  BSF    FA6.2
2FB6:  MOVF   FF2,W
2FB8:  MOVWF  00
2FBA:  BCF    FF2.7
2FBC:  MOVLB  F
2FBE:  MOVLW  55
2FC0:  MOVWF  FA7
2FC2:  MOVLW  AA
2FC4:  MOVWF  FA7
2FC6:  BSF    FA6.1
2FC8:  BTFSC  FA6.1
2FCA:  BRA    2FC8
2FCC:  BCF    FA6.2
2FCE:  MOVF   00,W
2FD0:  IORWF  FF2,F
2FD2:  MOVLW  14
2FD4:  MOVLB  0
2FD6:  MOVWF  xE3
2FD8:  CALL   08EA
....................             write_eeprom(72,0);delay_ms(20); 
2FDC:  MOVLW  48
2FDE:  MOVWF  FA9
2FE0:  CLRF   FA8
2FE2:  BCF    FA6.6
2FE4:  BCF    FA6.7
2FE6:  BSF    FA6.2
2FE8:  MOVF   FF2,W
2FEA:  MOVWF  00
2FEC:  BCF    FF2.7
2FEE:  MOVLB  F
2FF0:  MOVLW  55
2FF2:  MOVWF  FA7
2FF4:  MOVLW  AA
2FF6:  MOVWF  FA7
2FF8:  BSF    FA6.1
2FFA:  BTFSC  FA6.1
2FFC:  BRA    2FFA
2FFE:  BCF    FA6.2
3000:  MOVF   00,W
3002:  IORWF  FF2,F
3004:  MOVLW  14
3006:  MOVLB  0
3008:  MOVWF  xE3
300A:  CALL   08EA
....................             delay_ms(700); 
300E:  MOVLW  04
3010:  MOVWF  xD0
3012:  MOVLW  AF
3014:  MOVWF  xE3
3016:  CALL   08EA
301A:  DECFSZ xD0,F
301C:  BRA    3012
....................             segundos=0;minutos=0;horas=0; 
301E:  CLRF   31
3020:  CLRF   32
3022:  CLRF   33
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3024:  MOVLW  1E
3026:  MOVWF  xE3
3028:  CALL   08EA
302C:  MOVLW  01
302E:  MOVWF  18
3030:  CLRF   3E
3032:  MOVLW  02
3034:  MOVWF  1B
3036:  MOVWF  1D
3038:  MOVLW  0C
303A:  MOVWF  xDD
303C:  CALL   0A72
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
3040:  BSF    F96.1
3042:  BTFSS  F84.1
3044:  BRA    30B6
....................          delay_ms(20); 
3046:  MOVLW  14
3048:  MOVWF  xE3
304A:  CALL   08EA
....................          if(RIGHT){ 
304E:  BSF    F96.1
3050:  BTFSS  F84.1
3052:  BRA    30B6
....................             flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro);delay_ms(20); 
3054:  BTG    3D.2
3056:  MOVLW  00
3058:  BTFSC  3D.2
305A:  MOVLW  01
305C:  MOVWF  xD0
305E:  MOVLW  49
3060:  MOVWF  FA9
3062:  MOVFF  D0,FA8
3066:  BCF    FA6.6
3068:  BCF    FA6.7
306A:  BSF    FA6.2
306C:  MOVF   FF2,W
306E:  MOVWF  00
3070:  BCF    FF2.7
3072:  MOVLB  F
3074:  MOVLW  55
3076:  MOVWF  FA7
3078:  MOVLW  AA
307A:  MOVWF  FA7
307C:  BSF    FA6.1
307E:  BTFSC  FA6.1
3080:  BRA    307E
3082:  BCF    FA6.2
3084:  MOVF   00,W
3086:  IORWF  FF2,F
3088:  MOVLW  14
308A:  MOVLB  0
308C:  MOVWF  xE3
308E:  CALL   08EA
....................             delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3092:  MOVLW  02
3094:  MOVWF  xD0
3096:  MOVLW  FA
3098:  MOVWF  xE3
309A:  CALL   08EA
309E:  DECFSZ xD0,F
30A0:  BRA    3096
30A2:  MOVLW  01
30A4:  MOVWF  18
30A6:  CLRF   3E
30A8:  MOVLW  02
30AA:  MOVWF  1B
30AC:  MOVWF  1D
30AE:  MOVLW  0C
30B0:  MOVWF  xDD
30B2:  CALL   0A72
....................          } 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
30B6:  BSF    F96.2
30B8:  BTFSS  F84.2
30BA:  BRA    30F6
....................          delay_ms(20); 
30BC:  MOVLW  14
30BE:  MOVWF  xE3
30C0:  CALL   08EA
....................          if(LEFT && Flanco3 == 0) { 
30C4:  BSF    F96.2
30C6:  BTFSS  F84.2
30C8:  BRA    30F4
30CA:  BTFSC  3C.7
30CC:  BRA    30F4
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
30CE:  BSF    3C.7
30D0:  MOVLW  02
30D2:  MOVWF  xD0
30D4:  MOVLW  FA
30D6:  MOVWF  xE3
30D8:  CALL   08EA
30DC:  DECFSZ xD0,F
30DE:  BRA    30D4
30E0:  MOVLW  01
30E2:  MOVWF  18
30E4:  CLRF   3E
30E6:  MOVLW  02
30E8:  MOVWF  1B
30EA:  MOVWF  1D
30EC:  MOVLW  0C
30EE:  MOVWF  xDD
30F0:  CALL   0A72
....................          } 
....................       }else{ 
30F4:  BRA    30F8
....................          Flanco3 = 0; 
30F6:  BCF    3C.7
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... #ifdef DAMPER 
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
....................       lcd_gotoxy(1,2); 
....................       printf(lcd_putc," Setpoint de  Flujo "); 
....................       lcd_gotoxy(1,3); 
....................       printf(lcd_putc,"       %2.2f   ",setpoint); 
....................     
....................       if(setpoint>2.0) 
....................          setpoint=2.0; 
....................     
....................       if(setpoint<0.5) 
....................          setpoint=0.5; 
....................     
....................       if(UP){//Si oprime hacia arriba 
....................          delay_ms(20); 
....................          if(UP && Flanco == 0) { 
....................             setpoint+=0.1;Flanco = 1; 
....................          } 
....................       }else{ 
....................          Flanco = 0; 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
....................          delay_ms(20); 
....................          if(DOWN && Flanco2 == 0) { 
....................             setpoint-=0.1;Flanco2 = 1; 
....................          } 
....................       }else{ 
....................          Flanco2 = 0; 
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
....................          delay_ms(20); 
....................          if(RIGHT && Flanco1 == 0){ 
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................             Temporal=setpoint; 
....................             Entero=(int)setpoint; 
....................             Temporal=Temporal-Entero; 
....................             Temporal2=Temporal*10.0; 
....................             Decimal2=(int8)Temporal2; 
....................             write_eeprom(40,Entero);delay_ms(20); 
....................             write_eeprom(41,Decimal2);delay_ms(20);//Guardar valor de Setpoint en eeprom 
....................             MensajeGuardado(); 
....................          } 
....................       }else{ 
....................          Flanco1 = 0; 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
....................          delay_ms(20); 
....................          if(LEFT && Flanco3 == 0) { 
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................          } 
....................       }else{ 
....................          Flanco3 = 0; 
....................       }              
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
.................... #else 
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
30F8:  MOVF   18,W
30FA:  SUBLW  04
30FC:  BTFSS  FD8.2
30FE:  BRA    32F6
....................    lcd_gotoxy(1,2); 
3100:  MOVLW  01
3102:  MOVWF  xDE
3104:  MOVLW  02
3106:  MOVWF  xDF
3108:  CALL   0A00
....................    printf(lcd_putc,"    Vida Filtro     "); 
310C:  MOVLW  D0
310E:  MOVWF  FF6
3110:  MOVLW  04
3112:  MOVWF  FF7
3114:  CALL   18DC
....................    lcd_gotoxy(1,3); 
3118:  MOVLW  01
311A:  MOVWF  xDE
311C:  MOVLW  03
311E:  MOVWF  xDF
3120:  CALL   0A00
....................    printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
3124:  MOVLW  E6
3126:  MOVWF  FF6
3128:  MOVLW  04
312A:  MOVWF  FF7
312C:  MOVLW  06
312E:  MOVWF  xD0
3130:  CALL   18FE
3134:  MOVLW  42
3136:  MOVWF  FE9
3138:  MOVFF  4D,D3
313C:  MOVFF  4C,D2
3140:  MOVFF  4B,D1
3144:  MOVFF  4A,D0
3148:  CLRF   xD4
314A:  GOTO   1CF4
314E:  MOVLW  F2
3150:  MOVWF  FF6
3152:  MOVLW  04
3154:  MOVWF  FF7
3156:  MOVLW  08
3158:  MOVWF  xD0
315A:  CALL   18FE
....................     
....................    if(setpoint<1.0) 
315E:  MOVFF  4D,D7
3162:  MOVFF  4C,D6
3166:  MOVFF  4B,D5
316A:  MOVFF  4A,D4
316E:  CLRF   xDB
3170:  CLRF   xDA
3172:  CLRF   xD9
3174:  MOVLW  7F
3176:  MOVWF  xD8
3178:  CALL   1348
317C:  BNC   3188
....................    {setpoint=1.0;} 
317E:  CLRF   4D
3180:  CLRF   4C
3182:  CLRF   4B
3184:  MOVLW  7F
3186:  MOVWF  4A
....................     
....................    if(setpoint>255.0) 
3188:  CLRF   xD7
318A:  CLRF   xD6
318C:  MOVLW  7F
318E:  MOVWF  xD5
3190:  MOVLW  86
3192:  MOVWF  xD4
3194:  MOVFF  4D,DB
3198:  MOVFF  4C,DA
319C:  MOVFF  4B,D9
31A0:  MOVFF  4A,D8
31A4:  CALL   1348
31A8:  BNC   31B6
....................    {setpoint=255.0;} 
31AA:  CLRF   4D
31AC:  CLRF   4C
31AE:  MOVLW  7F
31B0:  MOVWF  4B
31B2:  MOVLW  86
31B4:  MOVWF  4A
....................     
....................       if(UP)//Si oprime hacia arriba 
31B6:  BSF    F92.5
31B8:  BTFSS  F80.5
31BA:  BRA    31F6
....................       {setpoint+=1.0;Flanco = 1;delay_ms(30);} 
31BC:  BCF    FD8.1
31BE:  MOVFF  4D,DA
31C2:  MOVFF  4C,D9
31C6:  MOVFF  4B,D8
31CA:  MOVFF  4A,D7
31CE:  CLRF   xDE
31D0:  CLRF   xDD
31D2:  CLRF   xDC
31D4:  MOVLW  7F
31D6:  MOVWF  xDB
31D8:  CALL   0CAE
31DC:  MOVFF  03,4D
31E0:  MOVFF  02,4C
31E4:  MOVFF  01,4B
31E8:  MOVFF  00,4A
31EC:  BSF    3C.4
31EE:  MOVLW  1E
31F0:  MOVWF  xE3
31F2:  CALL   08EA
....................       
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31F6:  BSF    F96.0
31F8:  BTFSS  F84.0
31FA:  BRA    3236
....................       {setpoint-=1.0;Flanco2 = 1;delay_ms(30);} 
31FC:  BSF    FD8.1
31FE:  MOVFF  4D,DA
3202:  MOVFF  4C,D9
3206:  MOVFF  4B,D8
320A:  MOVFF  4A,D7
320E:  CLRF   xDE
3210:  CLRF   xDD
3212:  CLRF   xDC
3214:  MOVLW  7F
3216:  MOVWF  xDB
3218:  CALL   0CAE
321C:  MOVFF  03,4D
3220:  MOVFF  02,4C
3224:  MOVFF  01,4B
3228:  MOVFF  00,4A
322C:  BSF    3C.6
322E:  MOVLW  1E
3230:  MOVWF  xE3
3232:  CALL   08EA
....................          
....................     
....................       if(RIGHT)// Si oprime derecha 
3236:  BSF    F96.1
3238:  BTFSS  F84.1
323A:  BRA    32BE
....................       {  if(Flanco1 == 0)  
323C:  BTFSC  3C.5
323E:  BRA    32BC
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3240:  MOVLW  01
3242:  MOVWF  18
3244:  CLRF   3E
3246:  MOVLW  02
3248:  MOVWF  1B
324A:  MOVWF  1D
324C:  MOVLW  0B
324E:  MOVWF  1A
3250:  MOVLW  02
3252:  MOVWF  xD0
3254:  MOVLW  FA
3256:  MOVWF  xE3
3258:  CALL   08EA
325C:  DECFSZ xD0,F
325E:  BRA    3254
3260:  MOVLW  0C
3262:  MOVWF  xDD
3264:  CALL   0A72
....................             Temporal=setpoint; 
3268:  MOVFF  4D,87
326C:  MOVFF  4C,86
3270:  MOVFF  4B,85
3274:  MOVFF  4A,84
....................             Entero=(int)setpoint; 
3278:  MOVFF  4D,D3
327C:  MOVFF  4C,D2
3280:  MOVFF  4B,D1
3284:  MOVFF  4A,D0
3288:  GOTO   1E7C
328C:  MOVFF  01,24
....................             write_eeprom(40,Entero); 
3290:  MOVLW  28
3292:  MOVWF  FA9
3294:  MOVFF  24,FA8
3298:  BCF    FA6.6
329A:  BCF    FA6.7
329C:  BSF    FA6.2
329E:  MOVF   FF2,W
32A0:  MOVWF  00
32A2:  BCF    FF2.7
32A4:  MOVLB  F
32A6:  MOVLW  55
32A8:  MOVWF  FA7
32AA:  MOVLW  AA
32AC:  MOVWF  FA7
32AE:  BSF    FA6.1
32B0:  BTFSC  FA6.1
32B2:  BRA    32B0
32B4:  BCF    FA6.2
32B6:  MOVF   00,W
32B8:  IORWF  FF2,F
32BA:  MOVLB  0
....................             }} 
....................          else 
32BC:  BRA    32C0
....................             {Flanco1 = 0;}    
32BE:  BCF    3C.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
32C0:  BSF    F96.2
32C2:  BTFSS  F84.2
32C4:  BRA    32F4
....................       {  if(Flanco3 == 0)  
32C6:  BTFSC  3C.7
32C8:  BRA    32F2
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
32CA:  MOVLW  01
32CC:  MOVWF  18
32CE:  CLRF   3E
32D0:  MOVLW  02
32D2:  MOVWF  1B
32D4:  MOVWF  1D
32D6:  MOVLW  0B
32D8:  MOVWF  1A
32DA:  MOVLW  02
32DC:  MOVWF  xD0
32DE:  MOVLW  FA
32E0:  MOVWF  xE3
32E2:  CALL   08EA
32E6:  DECFSZ xD0,F
32E8:  BRA    32DE
32EA:  MOVLW  0C
32EC:  MOVWF  xDD
32EE:  CALL   0A72
....................          else 
32F2:  BRA    32F6
....................             {Flanco3 = 0;}     
32F4:  BCF    3C.7
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
.................... #endif 
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
32F6:  MOVF   18,W
32F8:  SUBLW  05
32FA:  BTFSS  FD8.2
32FC:  BRA    364A
....................       lcd_gotoxy(1,1); 
32FE:  MOVLW  01
3300:  MOVWF  xDE
3302:  MOVWF  xDF
3304:  CALL   0A00
....................       printf(lcd_putc,"      Ingrese       "); 
3308:  MOVLW  FC
330A:  MOVWF  FF6
330C:  MOVLW  04
330E:  MOVWF  FF7
3310:  CALL   18DC
....................       lcd_gotoxy(1,2); 
3314:  MOVLW  01
3316:  MOVWF  xDE
3318:  MOVLW  02
331A:  MOVWF  xDF
331C:  CALL   0A00
....................       printf(lcd_putc," Contraseña Actual  "); 
3320:  MOVLW  12
3322:  MOVWF  FF6
3324:  MOVLW  05
3326:  MOVWF  FF7
3328:  CALL   18DC
....................       lcd_gotoxy(1,3); 
332C:  MOVLW  01
332E:  MOVWF  xDE
3330:  MOVLW  03
3332:  MOVWF  xDF
3334:  CALL   0A00
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3338:  MOVLW  28
333A:  MOVWF  FF6
333C:  MOVLW  05
333E:  MOVWF  FF7
3340:  MOVLW  0A
3342:  MOVWF  xD0
3344:  CALL   18FE
3348:  MOVFF  42,D0
334C:  MOVLW  1F
334E:  MOVWF  xD1
3350:  CALL   1946
3354:  MOVFF  43,D0
3358:  MOVLW  1F
335A:  MOVWF  xD1
335C:  CALL   1946
3360:  MOVFF  44,D0
3364:  MOVLW  1F
3366:  MOVWF  xD1
3368:  CALL   1946
336C:  MOVFF  45,D0
3370:  MOVLW  1F
3372:  MOVWF  xD1
3374:  CALL   1946
3378:  MOVLW  20
337A:  MOVWF  xDD
337C:  CALL   0A72
3380:  MOVLW  20
3382:  MOVWF  xDD
3384:  CALL   0A72
....................     
....................        
....................       if(UP){//Si oprime hacia arriba 
3388:  BSF    F92.5
338A:  BTFSS  F80.5
338C:  BRA    33BE
....................          delay_ms(20); 
338E:  MOVLW  14
3390:  MOVWF  xE3
3392:  CALL   08EA
....................          if(UP && Flanco == 0) { 
3396:  BSF    F92.5
3398:  BTFSS  F80.5
339A:  BRA    33BC
339C:  BTFSC  3C.4
339E:  BRA    33BC
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
33A0:  MOVLW  0B
33A2:  SUBWF  1A,W
33A4:  CLRF   03
33A6:  ADDLW  42
33A8:  MOVWF  FE9
33AA:  MOVLW  00
33AC:  ADDWFC 03,W
33AE:  MOVWF  FEA
33B0:  INCF   FEF,F
33B2:  BSF    3C.4
33B4:  MOVLW  1E
33B6:  MOVWF  xE3
33B8:  CALL   08EA
....................          } 
....................       }else{ 
33BC:  BRA    33C0
....................          Flanco = 0; 
33BE:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
33C0:  BSF    F96.0
33C2:  BTFSS  F84.0
33C4:  BRA    33F6
....................          delay_ms(20); 
33C6:  MOVLW  14
33C8:  MOVWF  xE3
33CA:  CALL   08EA
....................          if(DOWN && Flanco2 == 0) { 
33CE:  BSF    F96.0
33D0:  BTFSS  F84.0
33D2:  BRA    33F4
33D4:  BTFSC  3C.6
33D6:  BRA    33F4
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
33D8:  MOVLW  0B
33DA:  SUBWF  1A,W
33DC:  CLRF   03
33DE:  ADDLW  42
33E0:  MOVWF  FE9
33E2:  MOVLW  00
33E4:  ADDWFC 03,W
33E6:  MOVWF  FEA
33E8:  DECF   FEF,F
33EA:  BSF    3C.6
33EC:  MOVLW  1E
33EE:  MOVWF  xE3
33F0:  CALL   08EA
....................          } 
....................       }else{ 
33F4:  BRA    33F8
....................          Flanco2 = 0; 
33F6:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
33F8:  BSF    F96.1
33FA:  BTFSS  F84.1
33FC:  BRA    3426
....................          delay_ms(20); 
33FE:  MOVLW  14
3400:  MOVWF  xE3
3402:  CALL   08EA
....................          if(RIGHT && Flanco1 == 0) { 
3406:  BSF    F96.1
3408:  BTFSS  F84.1
340A:  BRA    3424
340C:  BTFSC  3C.5
340E:  BRA    3424
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
3410:  BSF    3C.5
3412:  INCF   1A,F
3414:  MOVLW  1E
3416:  MOVWF  xE3
3418:  CALL   08EA
341C:  MOVLW  0C
341E:  MOVWF  xDD
3420:  CALL   0A72
....................          } 
....................       }else{ 
3424:  BRA    3428
....................          Flanco1 = 0; 
3426:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3428:  BSF    F96.2
342A:  BTFSS  F84.2
342C:  BRA    345E
....................          delay_ms(20); 
342E:  MOVLW  14
3430:  MOVWF  xE3
3432:  CALL   08EA
....................          if(LEFT && Flanco3 == 0) { 
3436:  BSF    F96.2
3438:  BTFSS  F84.2
343A:  BRA    345C
343C:  BTFSC  3C.7
343E:  BRA    345C
....................             Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f"); 
3440:  BSF    3C.7
3442:  DECF   1A,F
3444:  MOVLW  02
3446:  MOVWF  xD0
3448:  MOVLW  FA
344A:  MOVWF  xE3
344C:  CALL   08EA
3450:  DECFSZ xD0,F
3452:  BRA    3448
3454:  MOVLW  0C
3456:  MOVWF  xDD
3458:  CALL   0A72
....................          } 
....................       }else{ 
345C:  BRA    3460
....................          Flanco3 = 0; 
345E:  BCF    3C.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3460:  MOVLW  0B
3462:  SUBWF  1A,W
3464:  CLRF   03
3466:  ADDLW  42
3468:  MOVWF  FE9
346A:  MOVLW  00
346C:  ADDWFC 03,W
346E:  MOVWF  FEA
3470:  BTFSC  FEF.7
3472:  BRA    3476
3474:  BRA    348A
....................          clave[unidad-11]=9; 
3476:  MOVLW  0B
3478:  SUBWF  1A,W
347A:  CLRF   03
347C:  ADDLW  42
347E:  MOVWF  FE9
3480:  MOVLW  00
3482:  ADDWFC 03,W
3484:  MOVWF  FEA
3486:  MOVLW  09
3488:  MOVWF  FEF
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
348A:  MOVLW  0B
348C:  SUBWF  1A,W
348E:  CLRF   03
3490:  ADDLW  42
3492:  MOVWF  FE9
3494:  MOVLW  00
3496:  ADDWFC 03,W
3498:  MOVWF  FEA
349A:  BTFSC  FEF.7
349C:  BRA    34B6
349E:  MOVF   FEF,W
34A0:  SUBLW  09
34A2:  BC    34B6
....................          clave[unidad-11]=0; 
34A4:  MOVLW  0B
34A6:  SUBWF  1A,W
34A8:  CLRF   03
34AA:  ADDLW  42
34AC:  MOVWF  FE9
34AE:  MOVLW  00
34B0:  ADDWFC 03,W
34B2:  MOVWF  FEA
34B4:  CLRF   FEF
....................       if(unidad<11){ 
34B6:  MOVF   1A,W
34B8:  SUBLW  0A
34BA:  BNC   34E8
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
34BC:  MOVLW  02
34BE:  MOVWF  xD0
34C0:  MOVLW  FA
34C2:  MOVWF  xE3
34C4:  CALL   08EA
34C8:  DECFSZ xD0,F
34CA:  BRA    34C0
34CC:  MOVLW  01
34CE:  MOVWF  18
34D0:  CLRF   3E
34D2:  MOVLW  02
34D4:  MOVWF  1B
34D6:  MOVWF  1D
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
34D8:  CLRF   42
34DA:  CLRF   43
34DC:  CLRF   44
34DE:  CLRF   45
....................          printf(lcd_putc,"\f"); 
34E0:  MOVLW  0C
34E2:  MOVWF  xDD
34E4:  CALL   0A72
....................       } 
....................       lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
34E8:  MOVFF  1A,DE
34EC:  MOVLW  04
34EE:  MOVWF  xDF
34F0:  CALL   0A00
....................       lcd_putc(t[2]); 
34F4:  MOVFF  41,DD
34F8:  CALL   0A72
....................        
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
34FC:  MOVF   1A,W
34FE:  SUBLW  0E
3500:  BTFSC  FD8.0
3502:  BRA    3626
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
3504:  MOVF   46,W
3506:  SUBWF  42,W
3508:  BNZ   35A4
350A:  MOVF   47,W
350C:  SUBWF  43,W
350E:  BNZ   35A4
3510:  MOVF   48,W
3512:  SUBWF  44,W
3514:  BNZ   35A4
3516:  MOVF   49,W
3518:  SUBWF  45,W
351A:  BNZ   35A4
....................             lcd_gotoxy(1,1); 
351C:  MOVLW  01
351E:  MOVWF  xDE
3520:  MOVWF  xDF
3522:  CALL   0A00
....................             printf(lcd_putc,"                    "); 
3526:  MOVLW  3E
3528:  MOVWF  FF6
352A:  MOVLW  05
352C:  MOVWF  FF7
352E:  CALL   18DC
....................             lcd_gotoxy(1,2); 
3532:  MOVLW  01
3534:  MOVWF  xDE
3536:  MOVLW  02
3538:  MOVWF  xDF
353A:  CALL   0A00
....................             printf(lcd_putc,"     Contraseña     "); 
353E:  MOVLW  54
3540:  MOVWF  FF6
3542:  MOVLW  05
3544:  MOVWF  FF7
3546:  CALL   18DC
....................             lcd_gotoxy(1,3); 
354A:  MOVLW  01
354C:  MOVWF  xDE
354E:  MOVLW  03
3550:  MOVWF  xDF
3552:  CALL   0A00
....................             printf(lcd_putc,"      Correcta      "); 
3556:  MOVLW  6A
3558:  MOVWF  FF6
355A:  MOVLW  05
355C:  MOVWF  FF7
355E:  CALL   18DC
....................             lcd_gotoxy(1,4); 
3562:  MOVLW  01
3564:  MOVWF  xDE
3566:  MOVLW  04
3568:  MOVWF  xDF
356A:  CALL   0A00
....................             printf(lcd_putc,"                    "); 
356E:  MOVLW  80
3570:  MOVWF  FF6
3572:  MOVLW  05
3574:  MOVWF  FF7
3576:  CALL   18DC
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
357A:  MOVLW  02
357C:  MOVWF  xD0
357E:  MOVLW  FA
3580:  MOVWF  xE3
3582:  CALL   08EA
3586:  DECFSZ xD0,F
3588:  BRA    357E
358A:  MOVLW  33
358C:  MOVWF  18
358E:  MOVLW  0B
3590:  MOVWF  1A
3592:  MOVLW  0C
3594:  MOVWF  xDD
3596:  CALL   0A72
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
359A:  CLRF   42
359C:  CLRF   43
359E:  CLRF   44
35A0:  CLRF   45
....................          }else{ 
35A2:  BRA    3626
....................             lcd_gotoxy(1,1); 
35A4:  MOVLW  01
35A6:  MOVWF  xDE
35A8:  MOVWF  xDF
35AA:  CALL   0A00
....................             printf(lcd_putc,"                    "); 
35AE:  MOVLW  96
35B0:  MOVWF  FF6
35B2:  MOVLW  05
35B4:  MOVWF  FF7
35B6:  CALL   18DC
....................             lcd_gotoxy(1,2); 
35BA:  MOVLW  01
35BC:  MOVWF  xDE
35BE:  MOVLW  02
35C0:  MOVWF  xDF
35C2:  CALL   0A00
....................             printf(lcd_putc,"     Contraseña     "); 
35C6:  MOVLW  AC
35C8:  MOVWF  FF6
35CA:  MOVLW  05
35CC:  MOVWF  FF7
35CE:  CALL   18DC
....................             lcd_gotoxy(1,3); 
35D2:  MOVLW  01
35D4:  MOVWF  xDE
35D6:  MOVLW  03
35D8:  MOVWF  xDF
35DA:  CALL   0A00
....................             printf(lcd_putc,"     Incorrecta     "); 
35DE:  MOVLW  C2
35E0:  MOVWF  FF6
35E2:  MOVLW  05
35E4:  MOVWF  FF7
35E6:  CALL   18DC
....................             lcd_gotoxy(1,4); 
35EA:  MOVLW  01
35EC:  MOVWF  xDE
35EE:  MOVLW  04
35F0:  MOVWF  xDF
35F2:  CALL   0A00
....................             printf(lcd_putc,"                    "); 
35F6:  MOVLW  D8
35F8:  MOVWF  FF6
35FA:  MOVLW  05
35FC:  MOVWF  FF7
35FE:  CALL   18DC
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
3602:  MOVLW  02
3604:  MOVWF  xD0
3606:  MOVLW  FA
3608:  MOVWF  xE3
360A:  CALL   08EA
360E:  DECFSZ xD0,F
3610:  BRA    3606
3612:  MOVLW  0B
3614:  MOVWF  1A
3616:  MOVLW  0C
3618:  MOVWF  xDD
361A:  CALL   0A72
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
361E:  CLRF   42
3620:  CLRF   43
3622:  CLRF   44
3624:  CLRF   45
....................          } 
....................       } 
....................                 
....................       if(unidad>11&&unidad<14){ 
3626:  MOVF   1A,W
3628:  SUBLW  0B
362A:  BC    364A
362C:  MOVF   1A,W
362E:  SUBLW  0D
3630:  BNC   364A
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3632:  MOVLW  01
3634:  SUBWF  1A,W
3636:  MOVWF  xD0
3638:  MOVWF  xDE
363A:  MOVLW  04
363C:  MOVWF  xDF
363E:  CALL   0A00
....................          lcd_putc(t[1]); 
3642:  MOVFF  40,DD
3646:  CALL   0A72
....................       } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
364A:  MOVF   18,W
364C:  SUBLW  33
364E:  BTFSS  FD8.2
3650:  BRA    39DC
....................     
....................       lcd_gotoxy(1,1); 
3652:  MOVLW  01
3654:  MOVWF  xDE
3656:  MOVWF  xDF
3658:  CALL   0A00
....................       printf(lcd_putc,"     Ingrese        "); 
365C:  MOVLW  EE
365E:  MOVWF  FF6
3660:  MOVLW  05
3662:  MOVWF  FF7
3664:  CALL   18DC
....................       lcd_gotoxy(1,2); 
3668:  MOVLW  01
366A:  MOVWF  xDE
366C:  MOVLW  02
366E:  MOVWF  xDF
3670:  CALL   0A00
....................       printf(lcd_putc,"  Contraseña Nueva  "); 
3674:  MOVLW  04
3676:  MOVWF  FF6
3678:  MOVLW  06
367A:  MOVWF  FF7
367C:  CALL   18DC
....................       lcd_gotoxy(1,3); 
3680:  MOVLW  01
3682:  MOVWF  xDE
3684:  MOVLW  03
3686:  MOVWF  xDF
3688:  CALL   0A00
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
368C:  MOVLW  1A
368E:  MOVWF  FF6
3690:  MOVLW  06
3692:  MOVWF  FF7
3694:  MOVLW  0A
3696:  MOVWF  xD0
3698:  CALL   18FE
369C:  MOVFF  42,D0
36A0:  MOVLW  1F
36A2:  MOVWF  xD1
36A4:  CALL   1946
36A8:  MOVFF  43,D0
36AC:  MOVLW  1F
36AE:  MOVWF  xD1
36B0:  CALL   1946
36B4:  MOVFF  44,D0
36B8:  MOVLW  1F
36BA:  MOVWF  xD1
36BC:  CALL   1946
36C0:  MOVFF  45,D0
36C4:  MOVLW  1F
36C6:  MOVWF  xD1
36C8:  CALL   1946
36CC:  MOVLW  20
36CE:  MOVWF  xDD
36D0:  CALL   0A72
36D4:  MOVLW  20
36D6:  MOVWF  xDD
36D8:  CALL   0A72
....................     
....................        
....................       if(UP){//Si oprime hacia arriba 
36DC:  BSF    F92.5
36DE:  BTFSS  F80.5
36E0:  BRA    3712
....................          delay_ms(20); 
36E2:  MOVLW  14
36E4:  MOVWF  xE3
36E6:  CALL   08EA
....................          if(UP && Flanco == 0) { 
36EA:  BSF    F92.5
36EC:  BTFSS  F80.5
36EE:  BRA    3710
36F0:  BTFSC  3C.4
36F2:  BRA    3710
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
36F4:  MOVLW  0B
36F6:  SUBWF  1A,W
36F8:  CLRF   03
36FA:  ADDLW  42
36FC:  MOVWF  FE9
36FE:  MOVLW  00
3700:  ADDWFC 03,W
3702:  MOVWF  FEA
3704:  INCF   FEF,F
3706:  BSF    3C.4
3708:  MOVLW  1E
370A:  MOVWF  xE3
370C:  CALL   08EA
....................          } 
....................       }else{ 
3710:  BRA    3714
....................          Flanco = 0; 
3712:  BCF    3C.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3714:  BSF    F96.0
3716:  BTFSS  F84.0
3718:  BRA    374A
....................          delay_ms(20); 
371A:  MOVLW  14
371C:  MOVWF  xE3
371E:  CALL   08EA
....................          if(DOWN && Flanco2 == 0) { 
3722:  BSF    F96.0
3724:  BTFSS  F84.0
3726:  BRA    3748
3728:  BTFSC  3C.6
372A:  BRA    3748
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
372C:  MOVLW  0B
372E:  SUBWF  1A,W
3730:  CLRF   03
3732:  ADDLW  42
3734:  MOVWF  FE9
3736:  MOVLW  00
3738:  ADDWFC 03,W
373A:  MOVWF  FEA
373C:  DECF   FEF,F
373E:  BSF    3C.6
3740:  MOVLW  1E
3742:  MOVWF  xE3
3744:  CALL   08EA
....................          } 
....................       }else{ 
3748:  BRA    374C
....................          Flanco2 = 0; 
374A:  BCF    3C.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime Derecha 
374C:  BSF    F96.1
374E:  BTFSS  F84.1
3750:  BRA    377A
....................          delay_ms(20); 
3752:  MOVLW  14
3754:  MOVWF  xE3
3756:  CALL   08EA
....................          if(RIGHT && Flanco1 == 0) { 
375A:  BSF    F96.1
375C:  BTFSS  F84.1
375E:  BRA    3778
3760:  BTFSC  3C.5
3762:  BRA    3778
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
3764:  BSF    3C.5
3766:  INCF   1A,F
3768:  MOVLW  1E
376A:  MOVWF  xE3
376C:  CALL   08EA
3770:  MOVLW  0C
3772:  MOVWF  xDD
3774:  CALL   0A72
....................          } 
....................       }else{ 
3778:  BRA    377C
....................          Flanco1 = 0; 
377A:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
377C:  BSF    F96.2
377E:  BTFSS  F84.2
3780:  BRA    37AA
....................          delay_ms(20); 
3782:  MOVLW  14
3784:  MOVWF  xE3
3786:  CALL   08EA
....................          if(LEFT && Flanco3 == 0) { 
378A:  BSF    F96.2
378C:  BTFSS  F84.2
378E:  BRA    37A8
3790:  BTFSC  3C.7
3792:  BRA    37A8
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
3794:  BSF    3C.7
3796:  DECF   1A,F
3798:  MOVLW  1E
379A:  MOVWF  xE3
379C:  CALL   08EA
37A0:  MOVLW  0C
37A2:  MOVWF  xDD
37A4:  CALL   0A72
....................          } 
....................       }else{ 
37A8:  BRA    37AC
....................          Flanco3 = 0; 
37AA:  BCF    3C.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
37AC:  MOVLW  0B
37AE:  SUBWF  1A,W
37B0:  CLRF   03
37B2:  ADDLW  42
37B4:  MOVWF  FE9
37B6:  MOVLW  00
37B8:  ADDWFC 03,W
37BA:  MOVWF  FEA
37BC:  BTFSC  FEF.7
37BE:  BRA    37C2
37C0:  BRA    37D6
....................          clave[unidad-11]=9; 
37C2:  MOVLW  0B
37C4:  SUBWF  1A,W
37C6:  CLRF   03
37C8:  ADDLW  42
37CA:  MOVWF  FE9
37CC:  MOVLW  00
37CE:  ADDWFC 03,W
37D0:  MOVWF  FEA
37D2:  MOVLW  09
37D4:  MOVWF  FEF
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
37D6:  MOVLW  0B
37D8:  SUBWF  1A,W
37DA:  CLRF   03
37DC:  ADDLW  42
37DE:  MOVWF  FE9
37E0:  MOVLW  00
37E2:  ADDWFC 03,W
37E4:  MOVWF  FEA
37E6:  BTFSC  FEF.7
37E8:  BRA    3802
37EA:  MOVF   FEF,W
37EC:  SUBLW  09
37EE:  BC    3802
....................          clave[unidad-11]=0; 
37F0:  MOVLW  0B
37F2:  SUBWF  1A,W
37F4:  CLRF   03
37F6:  ADDLW  42
37F8:  MOVWF  FE9
37FA:  MOVLW  00
37FC:  ADDWFC 03,W
37FE:  MOVWF  FEA
3800:  CLRF   FEF
....................           
....................       if(unidad<11){ 
3802:  MOVF   1A,W
3804:  SUBLW  0A
3806:  BNC   3838
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3808:  MOVLW  02
380A:  MOVWF  xD0
380C:  MOVLW  FA
380E:  MOVWF  xE3
3810:  CALL   08EA
3814:  DECFSZ xD0,F
3816:  BRA    380C
3818:  MOVLW  01
381A:  MOVWF  18
381C:  CLRF   3E
381E:  MOVLW  02
3820:  MOVWF  1B
3822:  MOVWF  1D
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3824:  CLRF   42
3826:  CLRF   43
3828:  CLRF   44
382A:  CLRF   45
....................          printf(lcd_putc,"\f");unidad=11; 
382C:  MOVLW  0C
382E:  MOVWF  xDD
3830:  CALL   0A72
3834:  MOVLW  0B
3836:  MOVWF  1A
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3838:  MOVFF  1A,DE
383C:  MOVLW  04
383E:  MOVWF  xDF
3840:  CALL   0A00
....................       lcd_putc(t[2]); 
3844:  MOVFF  41,DD
3848:  CALL   0A72
....................       if(unidad>14){// Si ya ingreso la nueva contraseña. 
384C:  MOVF   1A,W
384E:  SUBLW  0E
3850:  BTFSC  FD8.0
3852:  BRA    39B8
....................          lcd_gotoxy(1,1); 
3854:  MOVLW  01
3856:  MOVWF  xDE
3858:  MOVWF  xDF
385A:  CALL   0A00
....................          printf(lcd_putc,"                    "); 
385E:  MOVLW  30
3860:  MOVWF  FF6
3862:  MOVLW  06
3864:  MOVWF  FF7
3866:  CALL   18DC
....................          lcd_gotoxy(1,2); 
386A:  MOVLW  01
386C:  MOVWF  xDE
386E:  MOVLW  02
3870:  MOVWF  xDF
3872:  CALL   0A00
....................          printf(lcd_putc,"     Contraseña     "); 
3876:  MOVLW  46
3878:  MOVWF  FF6
387A:  MOVLW  06
387C:  MOVWF  FF7
387E:  CALL   18DC
....................          lcd_gotoxy(1,3); 
3882:  MOVLW  01
3884:  MOVWF  xDE
3886:  MOVLW  03
3888:  MOVWF  xDF
388A:  CALL   0A00
....................          printf(lcd_putc,"     Almacenada     "); 
388E:  MOVLW  5C
3890:  MOVWF  FF6
3892:  MOVLW  06
3894:  MOVWF  FF7
3896:  CALL   18DC
....................          lcd_gotoxy(1,4); 
389A:  MOVLW  01
389C:  MOVWF  xDE
389E:  MOVLW  04
38A0:  MOVWF  xDF
38A2:  CALL   0A00
....................          printf(lcd_putc,"                    "); 
38A6:  MOVLW  72
38A8:  MOVWF  FF6
38AA:  MOVLW  06
38AC:  MOVWF  FF7
38AE:  CALL   18DC
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
38B2:  MOVFF  42,46
38B6:  MOVFF  43,47
38BA:  MOVFF  44,48
38BE:  MOVFF  45,49
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
38C2:  CLRF   FA9
38C4:  MOVFF  42,FA8
38C8:  BCF    FA6.6
38CA:  BCF    FA6.7
38CC:  BSF    FA6.2
38CE:  MOVF   FF2,W
38D0:  MOVWF  00
38D2:  BCF    FF2.7
38D4:  MOVLB  F
38D6:  MOVLW  55
38D8:  MOVWF  FA7
38DA:  MOVLW  AA
38DC:  MOVWF  FA7
38DE:  BSF    FA6.1
38E0:  BTFSC  FA6.1
38E2:  BRA    38E0
38E4:  BCF    FA6.2
38E6:  MOVF   00,W
38E8:  IORWF  FF2,F
38EA:  MOVLW  14
38EC:  MOVLB  0
38EE:  MOVWF  xE3
38F0:  CALL   08EA
38F4:  MOVLW  01
38F6:  MOVWF  FA9
38F8:  MOVFF  43,FA8
38FC:  BCF    FA6.6
38FE:  BCF    FA6.7
3900:  BSF    FA6.2
3902:  MOVF   FF2,W
3904:  MOVWF  00
3906:  BCF    FF2.7
3908:  MOVLB  F
390A:  MOVLW  55
390C:  MOVWF  FA7
390E:  MOVLW  AA
3910:  MOVWF  FA7
3912:  BSF    FA6.1
3914:  BTFSC  FA6.1
3916:  BRA    3914
3918:  BCF    FA6.2
391A:  MOVF   00,W
391C:  IORWF  FF2,F
391E:  MOVLW  14
3920:  MOVLB  0
3922:  MOVWF  xE3
3924:  CALL   08EA
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3928:  MOVLW  02
392A:  MOVWF  FA9
392C:  MOVFF  44,FA8
3930:  BCF    FA6.6
3932:  BCF    FA6.7
3934:  BSF    FA6.2
3936:  MOVF   FF2,W
3938:  MOVWF  00
393A:  BCF    FF2.7
393C:  MOVLB  F
393E:  MOVLW  55
3940:  MOVWF  FA7
3942:  MOVLW  AA
3944:  MOVWF  FA7
3946:  BSF    FA6.1
3948:  BTFSC  FA6.1
394A:  BRA    3948
394C:  BCF    FA6.2
394E:  MOVF   00,W
3950:  IORWF  FF2,F
3952:  MOVLW  14
3954:  MOVLB  0
3956:  MOVWF  xE3
3958:  CALL   08EA
395C:  MOVLW  03
395E:  MOVWF  FA9
3960:  MOVFF  45,FA8
3964:  BCF    FA6.6
3966:  BCF    FA6.7
3968:  BSF    FA6.2
396A:  MOVF   FF2,W
396C:  MOVWF  00
396E:  BCF    FF2.7
3970:  MOVLB  F
3972:  MOVLW  55
3974:  MOVWF  FA7
3976:  MOVLW  AA
3978:  MOVWF  FA7
397A:  BSF    FA6.1
397C:  BTFSC  FA6.1
397E:  BRA    397C
3980:  BCF    FA6.2
3982:  MOVF   00,W
3984:  IORWF  FF2,F
3986:  MOVLW  14
3988:  MOVLB  0
398A:  MOVWF  xE3
398C:  CALL   08EA
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3990:  MOVLW  02
3992:  MOVWF  xD0
3994:  MOVLW  FA
3996:  MOVWF  xE3
3998:  CALL   08EA
399C:  DECFSZ xD0,F
399E:  BRA    3994
39A0:  MOVLW  01
39A2:  MOVWF  18
39A4:  CLRF   3E
39A6:  MOVLW  02
39A8:  MOVWF  1B
39AA:  MOVWF  1D
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
39AC:  CLRF   42
39AE:  CLRF   43
39B0:  CLRF   44
39B2:  CLRF   45
....................          unidad=11; 
39B4:  MOVLW  0B
39B6:  MOVWF  1A
....................       } 
....................        
....................       if(unidad>11&&unidad<14){ 
39B8:  MOVF   1A,W
39BA:  SUBLW  0B
39BC:  BC    39DC
39BE:  MOVF   1A,W
39C0:  SUBLW  0D
39C2:  BNC   39DC
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
39C4:  MOVLW  01
39C6:  SUBWF  1A,W
39C8:  MOVWF  xD0
39CA:  MOVWF  xDE
39CC:  MOVLW  04
39CE:  MOVWF  xDF
39D0:  CALL   0A00
....................          lcd_putc(t[1]); 
39D4:  MOVFF  40,DD
39D8:  CALL   0A72
....................       } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
.................... #ifdef DAMPER 
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ 
....................       lcd_gotoxy(1,2); 
....................       printf(lcd_putc,"     Media Movil    "); 
....................       lcd_gotoxy(1,3); 
....................       printf(lcd_putc,"       %02i   ",MediaMovil); 
....................        
....................       if(MediaMovil>12) 
....................          MediaMovil=12; 
....................     
....................       if(MediaMovil<1) 
....................          MediaMovil=1; 
....................     
....................       if(UP){//Si oprime hacia arriba 
....................          delay_ms(20); 
....................          if(UP && Flanco == 0) { 
....................             MediaMovil+=1;Flanco = 1;delay_ms(30); 
....................          } 
....................       }else{ 
....................          Flanco = 0; 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
....................          delay_ms(20); 
....................          if(DOWN && Flanco2 == 0){ 
....................             MediaMovil-=1;Flanco2 = 1;delay_ms(30); 
....................          } 
....................       }else{ 
....................          Flanco2 = 0; 
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
....................          delay_ms(20); 
....................          if(RIGHT && Flanco1 == 0) { 
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................             write_eeprom(42,MediaMovil);delay_ms(20);//Guardar valor de Setpoint en eeprom 
....................             MensajeGuardado(); 
....................          } 
....................       }else{ 
....................          Flanco1 = 0; 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
....................          delay_ms(20); 
....................          if(LEFT && Flanco3 == 0) { 
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................          } 
....................       }else{ 
....................          Flanco3 = 0; 
....................       } 
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
....................    { 
....................       lcd_gotoxy(1,1); 
....................       printf(lcd_putc,"  Zero Point Config "); 
....................       lcd_gotoxy(1,2); 
....................       printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
....................       lcd_gotoxy(1,3); 
....................       printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
....................       lcd_gotoxy(1,4); 
....................       printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
....................      
....................       if(RIGHT){// Si oprime derecha 
....................          delay_ms(20); 
....................          if(RIGHT && Flanco1 == 0) { 
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................             Diferencia=zero_fabrica-sensores(0); 
....................              
....................             if(Diferencia>=0){ 
....................                negativo=10;write_eeprom(50,negativo);delay_ms(20); 
....................             } 
....................             if(Diferencia<0){ 
....................                negativo=20;write_eeprom(50,negativo);delay_ms(20); 
....................             } 
....................             Diferencia=abs(Diferencia); 
....................             Dif16=(int16)Diferencia; 
....................              
....................             write_eeprom(60,make8(Dif16,0));delay_ms(20); 
....................             write_eeprom(61,make8(Dif16,1));delay_ms(20);//Guardar valor de Setpoint en eeprom 
....................             MensajeGuardado(); 
....................          } 
....................       }else{ 
....................          Flanco1 = 0; 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
....................          delay_ms(20); 
....................          if(LEFT && Flanco3 == 0) { 
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................          } 
....................       }else{ 
....................          Flanco3 = 0; 
....................       } 
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
....................    { 
....................       lcd_gotoxy(1,1); 
....................       printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       lcd_gotoxy(1,2); 
....................       printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
....................       lcd_gotoxy(1,3); 
....................       printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
....................       lcd_gotoxy(1,4); 
....................       printf(lcd_putc,"Ajuste1= %2.1f ",Ajuste1); 
....................        
....................       if(Ajuste1>30.0) 
....................          Ajuste1=0.0; 
....................           
....................       if(Ajuste1<0.0) 
....................          {Ajuste1=0.0;} 
....................        
....................       if(UP){//Si oprime hacia arriba 
....................          delay_ms(50); 
....................          if(UP){ 
....................             Ajuste1+=0.1; 
....................          } 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
....................          delay_ms(50); 
....................          if(DOWN){ 
....................             Ajuste1-=0.1; 
....................          } 
....................       } 
....................        
....................       if(RIGHT){// Si oprime derecha 
....................          delay_ms(20); 
....................          if(RIGHT && Flanco1 == 0) { 
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
....................             Temporal=Ajuste1; 
....................             Entero=(int)Ajuste1; 
....................             Temporal=Temporal-Entero; 
....................             Temporal2=Temporal*10.0; 
....................             Decimal1=(int8)Temporal2; 
....................             write_eeprom(25,Entero);delay_ms(20); 
....................             write_eeprom(26,Decimal1);delay_ms(20); 
....................             MensajeGuardado(); 
....................          } 
....................       }else{ 
....................          Flanco1 = 0; 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
....................          delay_ms(20); 
....................          if(LEFT && Flanco3 == 0) { 
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................          } 
....................       }else{ 
....................          Flanco3 = 0; 
....................       } 
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
....................    { 
....................    lcd_gotoxy(1,1); 
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
....................  
....................    lcd_gotoxy(1,4); 
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
....................        
....................          if(UP && DOWN){ 
....................             delay_ms(20); 
....................             if(UP && DOWN){ 
....................                ModoAuto=0; 
....................                ModoManual=1; 
....................                ModoSemi=0; 
....................                Automa=10; 
....................                Semi=10; 
....................                Manual=20; 
....................             } 
....................          } 
....................           
....................          if(DOWN && RIGHT){ 
....................             delay_ms(20); 
....................             if(DOWN && RIGHT){ 
....................                ModoAuto=1; 
....................                ModoManual=0; 
....................                ModoSemi=0; 
....................                Automa=20; 
....................                Semi=10; 
....................                Manual=10; 
....................             } 
....................          } 
....................           
....................          if(UP && RIGHT){ 
....................             delay_ms(20); 
....................             if(UP && RIGHT){ 
....................                ModoAuto=0; 
....................                ModoManual=0; 
....................                ModoSemi=1; 
....................                Automa=10; 
....................                Semi=20; 
....................                Manual=10; 
....................             } 
....................          } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Manual  "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................          
....................       if(ModoAuto == 1 || Automa==20) 
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Auto   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Semi   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"  Ajuste Valor    "); 
....................          if(UP){ 
....................             delay_ms(20); 
....................             if(UP) 
....................                tmp++; 
....................          } 
....................           
....................          if(DOWN){ 
....................             delay_ms(20); 
....................             if(DOWN) 
....................                tmp--; 
....................          } 
....................           
....................          ValorSemi=tmp; 
....................          ajustar_damper(tmp); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                write_eeprom(13,tmp);delay_ms(20);ModoSemi=0;ModoAuto=0;ModoManual=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       }  
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //----------------Menu10--------------------------------------------------------------- 
....................    if(Menu == 10)// Menu de Tiempo de Purga 
....................    { 
....................       lcd_gotoxy(1,1); 
....................       printf(lcd_putc,"     Tiempo  de      "); 
....................       lcd_gotoxy(1,2); 
....................       printf(lcd_putc,"       Purga         "); 
....................       lcd_gotoxy(6,3); 
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
....................       lcd_putc(t[2]); 
....................        
....................       if(unidad2<1) 
....................          unidad2=1; 
....................       if(unidad2>3) 
....................          unidad2=3;    
....................        
....................       if(UP){ 
....................          if(unidad2==1){ 
....................             if(purga_minutos_pro<61){ 
....................                purga_minutos_pro++;delay_ms(300); 
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
....................             if(purga_segundos_pro<60){ 
....................                purga_segundos_pro++;delay_ms(300); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
....................          if(unidad2==1){ 
....................             if(purga_minutos_pro>1){ 
....................                purga_minutos_pro--;delay_ms(300); 
....................             } 
....................              
....................             if(purga_minutos_pro>60){ 
....................                purga_minutos_pro=60;delay_ms(300); 
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
....................             if(purga_segundos_pro>0){ 
....................                purga_segundos_pro--;delay_ms(300); 
....................             } 
....................              
....................             if(purga_segundos_pro>59){ 
....................                purga_segundos_pro=59;delay_ms(300); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
....................          if(unidad2==1){ 
....................             unidad2=3; 
....................          }else{ 
....................             if(unidad2==3){ 
....................                unidad2=1; 
....................             }else{ 
....................                unidad2=3; 
....................             } 
....................          } 
....................          delay_ms(500); 
....................          printf(lcd_putc,"\f"); 
....................       } 
....................        
....................       if(LEFT) 
....................       { 
....................          delay_ms(200); 
....................          printf(lcd_putc,"\f"); 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"Tiempo Almacenado"); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"  Correctamente  "); 
....................          write_eeprom(20,purga_minutos_pro);delay_ms(30); 
....................          write_eeprom(21,purga_segundos_pro);delay_ms(30); 
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
....................          delay_ms(700); 
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu10--------------------------------------------------------------- 
....................  
.................... //----------------Menu11--------------------------------------------------------------- 
....................    if(Menu == 11)// Menu de Tiempo de Post-Purga 
....................    { 
....................       lcd_gotoxy(1,1); 
....................       printf(lcd_putc,"     Tiempo  de      "); 
....................       lcd_gotoxy(1,2); 
....................       printf(lcd_putc,"     Post-Purga      "); 
....................       lcd_gotoxy(6,3); 
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
....................       lcd_putc(t[2]); 
....................       if(unidad2<1) 
....................          unidad2=1; 
....................       if(unidad2>3) 
....................          unidad2=3;    
....................        
....................       if(UP) 
....................       { 
....................          if(unidad2==1) 
....................          { 
....................             if(ppurga_minutos_pro<61) 
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
....................          { 
....................             if(ppurga_segundos_pro<60) 
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
....................       { 
....................          if(unidad2==1) 
....................          { 
....................             if(ppurga_minutos_pro>1) 
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
....................          { 
....................             if(ppurga_segundos_pro>0) 
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
....................       { 
....................          if(unidad2==1) 
....................          { 
....................             unidad2=3; 
....................          } 
....................          else 
....................          { 
....................             if(unidad2==3) 
....................             { 
....................                unidad2=1; 
....................             } 
....................          } 
....................          delay_ms(500); 
....................          printf(lcd_putc,"\f"); 
....................       } 
....................        
....................       if(LEFT) 
....................       { 
....................          delay_ms(200); 
....................          printf(lcd_putc,"\f"); 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"Tiempo Almacenado"); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"  Correctamente  "); 
....................          write_eeprom(22,ppurga_minutos_pro);delay_ms(20); 
....................          write_eeprom(23,ppurga_segundos_pro);delay_ms(20); 
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
....................          delay_ms(700); 
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu11--------------------------------------------------------------- 
.................... #else 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de Tiempo de Purga 
39DC:  MOVF   18,W
39DE:  SUBLW  06
39E0:  BTFSS  FD8.2
39E2:  BRA    3C44
....................    { 
....................       lcd_gotoxy(1,1); 
39E4:  MOVLW  01
39E6:  MOVWF  xDE
39E8:  MOVWF  xDF
39EA:  CALL   0A00
....................       printf(lcd_putc,"     Tiempo  de      "); 
39EE:  MOVLW  88
39F0:  MOVWF  FF6
39F2:  MOVLW  06
39F4:  MOVWF  FF7
39F6:  CALL   18DC
....................       lcd_gotoxy(1,2); 
39FA:  MOVLW  01
39FC:  MOVWF  xDE
39FE:  MOVLW  02
3A00:  MOVWF  xDF
3A02:  CALL   0A00
....................       printf(lcd_putc,"       Purga         "); 
3A06:  MOVLW  9E
3A08:  MOVWF  FF6
3A0A:  MOVLW  06
3A0C:  MOVWF  FF7
3A0E:  CALL   18DC
....................       lcd_gotoxy(6,3); 
3A12:  MOVLW  06
3A14:  MOVWF  xDE
3A16:  MOVLW  03
3A18:  MOVWF  xDF
3A1A:  CALL   0A00
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
3A1E:  MOVFF  23,D0
3A22:  MOVLW  01
3A24:  MOVWF  xD1
3A26:  CALL   1ADC
3A2A:  MOVLW  3A
3A2C:  MOVWF  xDD
3A2E:  CALL   0A72
3A32:  MOVFF  36,D0
3A36:  MOVLW  01
3A38:  MOVWF  xD1
3A3A:  CALL   1ADC
3A3E:  MOVLW  BD
3A40:  MOVWF  FF6
3A42:  MOVLW  06
3A44:  MOVWF  FF7
3A46:  MOVLW  08
3A48:  MOVWF  xD0
3A4A:  CALL   18FE
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
3A4E:  MOVLW  06
3A50:  ADDWF  21,W
3A52:  MOVWF  xD0
3A54:  MOVWF  xDE
3A56:  MOVLW  04
3A58:  MOVWF  xDF
3A5A:  CALL   0A00
....................       lcd_putc(t[2]); 
3A5E:  MOVFF  41,DD
3A62:  CALL   0A72
....................        
....................       if(unidad2<1) 
3A66:  MOVF   21,F
3A68:  BNZ   3A6E
....................          unidad2=1; 
3A6A:  MOVLW  01
3A6C:  MOVWF  21
....................       if(unidad2>3) 
3A6E:  MOVF   21,W
3A70:  SUBLW  03
3A72:  BC    3A78
....................          unidad2=3;    
3A74:  MOVLW  03
3A76:  MOVWF  21
....................        
....................       if(UP){ 
3A78:  BSF    F92.5
3A7A:  BTFSS  F80.5
3A7C:  BRA    3AB8
....................          if(unidad2==1){ 
3A7E:  DECFSZ 21,W
3A80:  BRA    3A9A
....................             if(purga_minutos_pro<61){ 
3A82:  MOVF   23,W
3A84:  SUBLW  3C
3A86:  BNC   3A9A
....................                purga_minutos_pro++;delay_ms(300); 
3A88:  INCF   23,F
3A8A:  MOVLW  02
3A8C:  MOVWF  xD0
3A8E:  MOVLW  96
3A90:  MOVWF  xE3
3A92:  CALL   08EA
3A96:  DECFSZ xD0,F
3A98:  BRA    3A8E
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
3A9A:  MOVF   21,W
3A9C:  SUBLW  03
3A9E:  BNZ   3AB8
....................             if(purga_segundos_pro<60){ 
3AA0:  MOVF   36,W
3AA2:  SUBLW  3B
3AA4:  BNC   3AB8
....................                purga_segundos_pro++;delay_ms(300); 
3AA6:  INCF   36,F
3AA8:  MOVLW  02
3AAA:  MOVWF  xD0
3AAC:  MOVLW  96
3AAE:  MOVWF  xE3
3AB0:  CALL   08EA
3AB4:  DECFSZ xD0,F
3AB6:  BRA    3AAC
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
3AB8:  BSF    F96.0
3ABA:  BTFSS  F84.0
3ABC:  BRA    3B2A
....................          if(unidad2==1){ 
3ABE:  DECFSZ 21,W
3AC0:  BRA    3AF4
....................             if(purga_minutos_pro>1){ 
3AC2:  MOVF   23,W
3AC4:  SUBLW  01
3AC6:  BC    3ADA
....................                purga_minutos_pro--;delay_ms(300); 
3AC8:  DECF   23,F
3ACA:  MOVLW  02
3ACC:  MOVWF  xD0
3ACE:  MOVLW  96
3AD0:  MOVWF  xE3
3AD2:  CALL   08EA
3AD6:  DECFSZ xD0,F
3AD8:  BRA    3ACE
....................             } 
....................              
....................             if(purga_minutos_pro>60){ 
3ADA:  MOVF   23,W
3ADC:  SUBLW  3C
3ADE:  BC    3AF4
....................                purga_minutos_pro=60;delay_ms(300); 
3AE0:  MOVLW  3C
3AE2:  MOVWF  23
3AE4:  MOVLW  02
3AE6:  MOVWF  xD0
3AE8:  MOVLW  96
3AEA:  MOVWF  xE3
3AEC:  CALL   08EA
3AF0:  DECFSZ xD0,F
3AF2:  BRA    3AE8
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
3AF4:  MOVF   21,W
3AF6:  SUBLW  03
3AF8:  BNZ   3B2A
....................             if(purga_segundos_pro>0){ 
3AFA:  MOVF   36,F
3AFC:  BZ    3B10
....................                purga_segundos_pro--;delay_ms(300); 
3AFE:  DECF   36,F
3B00:  MOVLW  02
3B02:  MOVWF  xD0
3B04:  MOVLW  96
3B06:  MOVWF  xE3
3B08:  CALL   08EA
3B0C:  DECFSZ xD0,F
3B0E:  BRA    3B04
....................             } 
....................              
....................             if(purga_segundos_pro>59){ 
3B10:  MOVF   36,W
3B12:  SUBLW  3B
3B14:  BC    3B2A
....................                purga_segundos_pro=59;delay_ms(300); 
3B16:  MOVLW  3B
3B18:  MOVWF  36
3B1A:  MOVLW  02
3B1C:  MOVWF  xD0
3B1E:  MOVLW  96
3B20:  MOVWF  xE3
3B22:  CALL   08EA
3B26:  DECFSZ xD0,F
3B28:  BRA    3B1E
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
3B2A:  BSF    F96.1
3B2C:  BTFSS  F84.1
3B2E:  BRA    3B62
....................          if(unidad2==1){ 
3B30:  DECFSZ 21,W
3B32:  BRA    3B3A
....................             unidad2=3; 
3B34:  MOVLW  03
3B36:  MOVWF  21
....................          }else{ 
3B38:  BRA    3B4A
....................             if(unidad2==3){ 
3B3A:  MOVF   21,W
3B3C:  SUBLW  03
3B3E:  BNZ   3B46
....................                unidad2=1; 
3B40:  MOVLW  01
3B42:  MOVWF  21
....................             }else{ 
3B44:  BRA    3B4A
....................                unidad2=3; 
3B46:  MOVLW  03
3B48:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
3B4A:  MOVLW  02
3B4C:  MOVWF  xD0
3B4E:  MOVLW  FA
3B50:  MOVWF  xE3
3B52:  CALL   08EA
3B56:  DECFSZ xD0,F
3B58:  BRA    3B4E
....................          printf(lcd_putc,"\f"); 
3B5A:  MOVLW  0C
3B5C:  MOVWF  xDD
3B5E:  CALL   0A72
....................       } 
....................        
....................       if(LEFT) 
3B62:  BSF    F96.2
3B64:  BTFSS  F84.2
3B66:  BRA    3C44
....................       { 
....................          delay_ms(200); 
3B68:  MOVLW  C8
3B6A:  MOVWF  xE3
3B6C:  CALL   08EA
....................          printf(lcd_putc,"\f"); 
3B70:  MOVLW  0C
3B72:  MOVWF  xDD
3B74:  CALL   0A72
....................          lcd_gotoxy(1,2); 
3B78:  MOVLW  01
3B7A:  MOVWF  xDE
3B7C:  MOVLW  02
3B7E:  MOVWF  xDF
3B80:  CALL   0A00
....................          printf(lcd_putc,"Tiempo Almacenado"); 
3B84:  MOVLW  C6
3B86:  MOVWF  FF6
3B88:  MOVLW  06
3B8A:  MOVWF  FF7
3B8C:  CALL   18DC
....................          lcd_gotoxy(1,3); 
3B90:  MOVLW  01
3B92:  MOVWF  xDE
3B94:  MOVLW  03
3B96:  MOVWF  xDF
3B98:  CALL   0A00
....................          printf(lcd_putc,"  Correctamente  "); 
3B9C:  MOVLW  D8
3B9E:  MOVWF  FF6
3BA0:  MOVLW  06
3BA2:  MOVWF  FF7
3BA4:  CALL   18DC
....................          write_eeprom(20,purga_minutos_pro);delay_ms(30); 
3BA8:  MOVLW  14
3BAA:  MOVWF  FA9
3BAC:  MOVFF  23,FA8
3BB0:  BCF    FA6.6
3BB2:  BCF    FA6.7
3BB4:  BSF    FA6.2
3BB6:  MOVF   FF2,W
3BB8:  MOVWF  00
3BBA:  BCF    FF2.7
3BBC:  MOVLB  F
3BBE:  MOVLW  55
3BC0:  MOVWF  FA7
3BC2:  MOVLW  AA
3BC4:  MOVWF  FA7
3BC6:  BSF    FA6.1
3BC8:  BTFSC  FA6.1
3BCA:  BRA    3BC8
3BCC:  BCF    FA6.2
3BCE:  MOVF   00,W
3BD0:  IORWF  FF2,F
3BD2:  MOVLW  1E
3BD4:  MOVLB  0
3BD6:  MOVWF  xE3
3BD8:  CALL   08EA
....................          write_eeprom(21,purga_segundos_pro);delay_ms(30); 
3BDC:  MOVLW  15
3BDE:  MOVWF  FA9
3BE0:  MOVFF  36,FA8
3BE4:  BCF    FA6.6
3BE6:  BCF    FA6.7
3BE8:  BSF    FA6.2
3BEA:  MOVF   FF2,W
3BEC:  MOVWF  00
3BEE:  BCF    FF2.7
3BF0:  MOVLB  F
3BF2:  MOVLW  55
3BF4:  MOVWF  FA7
3BF6:  MOVLW  AA
3BF8:  MOVWF  FA7
3BFA:  BSF    FA6.1
3BFC:  BTFSC  FA6.1
3BFE:  BRA    3BFC
3C00:  BCF    FA6.2
3C02:  MOVF   00,W
3C04:  IORWF  FF2,F
3C06:  MOVLW  1E
3C08:  MOVLB  0
3C0A:  MOVWF  xE3
3C0C:  CALL   08EA
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
3C10:  MOVFF  23,22
3C14:  MOVFF  36,35
....................          delay_ms(700); 
3C18:  MOVLW  04
3C1A:  MOVWF  xD0
3C1C:  MOVLW  AF
3C1E:  MOVWF  xE3
3C20:  CALL   08EA
3C24:  DECFSZ xD0,F
3C26:  BRA    3C1C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3C28:  MOVLW  1E
3C2A:  MOVWF  xE3
3C2C:  CALL   08EA
3C30:  MOVLW  01
3C32:  MOVWF  18
3C34:  CLRF   3E
3C36:  MOVLW  02
3C38:  MOVWF  1B
3C3A:  MOVWF  1D
3C3C:  MOVLW  0C
3C3E:  MOVWF  xDD
3C40:  CALL   0A72
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de Tiempo de Post-Purga 
3C44:  MOVF   18,W
3C46:  SUBLW  07
3C48:  BTFSS  FD8.2
3C4A:  BRA    3EA6
....................    { 
....................       lcd_gotoxy(1,1); 
3C4C:  MOVLW  01
3C4E:  MOVWF  xDE
3C50:  MOVWF  xDF
3C52:  CALL   0A00
....................       printf(lcd_putc,"     Tiempo  de      "); 
3C56:  MOVLW  EA
3C58:  MOVWF  FF6
3C5A:  MOVLW  06
3C5C:  MOVWF  FF7
3C5E:  CALL   18DC
....................       lcd_gotoxy(1,2); 
3C62:  MOVLW  01
3C64:  MOVWF  xDE
3C66:  MOVLW  02
3C68:  MOVWF  xDF
3C6A:  CALL   0A00
....................       printf(lcd_putc,"     Post-Purga      "); 
3C6E:  MOVLW  00
3C70:  MOVWF  FF6
3C72:  MOVLW  07
3C74:  MOVWF  FF7
3C76:  CALL   18DC
....................       lcd_gotoxy(6,3); 
3C7A:  MOVLW  06
3C7C:  MOVWF  xDE
3C7E:  MOVLW  03
3C80:  MOVWF  xDF
3C82:  CALL   0A00
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
3C86:  MOVFF  3A,D0
3C8A:  MOVLW  01
3C8C:  MOVWF  xD1
3C8E:  CALL   1ADC
3C92:  MOVLW  3A
3C94:  MOVWF  xDD
3C96:  CALL   0A72
3C9A:  MOVFF  38,D0
3C9E:  MOVLW  01
3CA0:  MOVWF  xD1
3CA2:  CALL   1ADC
3CA6:  MOVLW  1F
3CA8:  MOVWF  FF6
3CAA:  MOVLW  07
3CAC:  MOVWF  FF7
3CAE:  MOVLW  08
3CB0:  MOVWF  xD0
3CB2:  CALL   18FE
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
3CB6:  MOVLW  06
3CB8:  ADDWF  21,W
3CBA:  MOVWF  xD0
3CBC:  MOVWF  xDE
3CBE:  MOVLW  04
3CC0:  MOVWF  xDF
3CC2:  CALL   0A00
....................       lcd_putc(t[2]); 
3CC6:  MOVFF  41,DD
3CCA:  CALL   0A72
....................       if(unidad2<1) 
3CCE:  MOVF   21,F
3CD0:  BNZ   3CD6
....................          unidad2=1; 
3CD2:  MOVLW  01
3CD4:  MOVWF  21
....................       if(unidad2>3) 
3CD6:  MOVF   21,W
3CD8:  SUBLW  03
3CDA:  BC    3CE0
....................          unidad2=3;    
3CDC:  MOVLW  03
3CDE:  MOVWF  21
....................        
....................       if(UP) 
3CE0:  BSF    F92.5
3CE2:  BTFSS  F80.5
3CE4:  BRA    3D20
....................       { 
....................          if(unidad2==1) 
3CE6:  DECFSZ 21,W
3CE8:  BRA    3D02
....................          { 
....................             if(ppurga_minutos_pro<61) 
3CEA:  MOVF   3A,W
3CEC:  SUBLW  3C
3CEE:  BNC   3D02
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
3CF0:  INCF   3A,F
3CF2:  MOVLW  02
3CF4:  MOVWF  xD0
3CF6:  MOVLW  96
3CF8:  MOVWF  xE3
3CFA:  CALL   08EA
3CFE:  DECFSZ xD0,F
3D00:  BRA    3CF6
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
3D02:  MOVF   21,W
3D04:  SUBLW  03
3D06:  BNZ   3D20
....................          { 
....................             if(ppurga_segundos_pro<60) 
3D08:  MOVF   38,W
3D0A:  SUBLW  3B
3D0C:  BNC   3D20
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
3D0E:  INCF   38,F
3D10:  MOVLW  02
3D12:  MOVWF  xD0
3D14:  MOVLW  96
3D16:  MOVWF  xE3
3D18:  CALL   08EA
3D1C:  DECFSZ xD0,F
3D1E:  BRA    3D14
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
3D20:  BSF    F96.0
3D22:  BTFSS  F84.0
3D24:  BRA    3D92
....................       { 
....................          if(unidad2==1) 
3D26:  DECFSZ 21,W
3D28:  BRA    3D5C
....................          { 
....................             if(ppurga_minutos_pro>1) 
3D2A:  MOVF   3A,W
3D2C:  SUBLW  01
3D2E:  BC    3D42
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
3D30:  DECF   3A,F
3D32:  MOVLW  02
3D34:  MOVWF  xD0
3D36:  MOVLW  96
3D38:  MOVWF  xE3
3D3A:  CALL   08EA
3D3E:  DECFSZ xD0,F
3D40:  BRA    3D36
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
3D42:  MOVF   3A,W
3D44:  SUBLW  3C
3D46:  BC    3D5C
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
3D48:  MOVLW  3C
3D4A:  MOVWF  3A
3D4C:  MOVLW  02
3D4E:  MOVWF  xD0
3D50:  MOVLW  96
3D52:  MOVWF  xE3
3D54:  CALL   08EA
3D58:  DECFSZ xD0,F
3D5A:  BRA    3D50
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
3D5C:  MOVF   21,W
3D5E:  SUBLW  03
3D60:  BNZ   3D92
....................          { 
....................             if(ppurga_segundos_pro>0) 
3D62:  MOVF   38,F
3D64:  BZ    3D78
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
3D66:  DECF   38,F
3D68:  MOVLW  02
3D6A:  MOVWF  xD0
3D6C:  MOVLW  96
3D6E:  MOVWF  xE3
3D70:  CALL   08EA
3D74:  DECFSZ xD0,F
3D76:  BRA    3D6C
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
3D78:  MOVF   38,W
3D7A:  SUBLW  3B
3D7C:  BC    3D92
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
3D7E:  MOVLW  3B
3D80:  MOVWF  38
3D82:  MOVLW  02
3D84:  MOVWF  xD0
3D86:  MOVLW  96
3D88:  MOVWF  xE3
3D8A:  CALL   08EA
3D8E:  DECFSZ xD0,F
3D90:  BRA    3D86
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
3D92:  BSF    F96.1
3D94:  BTFSS  F84.1
3D96:  BRA    3DC4
....................       { 
....................          if(unidad2==1) 
3D98:  DECFSZ 21,W
3D9A:  BRA    3DA2
....................          { 
....................             unidad2=3; 
3D9C:  MOVLW  03
3D9E:  MOVWF  21
....................          } 
....................          else 
3DA0:  BRA    3DAC
....................          { 
....................             if(unidad2==3) 
3DA2:  MOVF   21,W
3DA4:  SUBLW  03
3DA6:  BNZ   3DAC
....................             { 
....................                unidad2=1; 
3DA8:  MOVLW  01
3DAA:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
3DAC:  MOVLW  02
3DAE:  MOVWF  xD0
3DB0:  MOVLW  FA
3DB2:  MOVWF  xE3
3DB4:  CALL   08EA
3DB8:  DECFSZ xD0,F
3DBA:  BRA    3DB0
....................          printf(lcd_putc,"\f"); 
3DBC:  MOVLW  0C
3DBE:  MOVWF  xDD
3DC0:  CALL   0A72
....................       } 
....................        
....................       if(LEFT) 
3DC4:  BSF    F96.2
3DC6:  BTFSS  F84.2
3DC8:  BRA    3EA6
....................       { 
....................          delay_ms(200); 
3DCA:  MOVLW  C8
3DCC:  MOVWF  xE3
3DCE:  CALL   08EA
....................          printf(lcd_putc,"\f"); 
3DD2:  MOVLW  0C
3DD4:  MOVWF  xDD
3DD6:  CALL   0A72
....................          lcd_gotoxy(1,2); 
3DDA:  MOVLW  01
3DDC:  MOVWF  xDE
3DDE:  MOVLW  02
3DE0:  MOVWF  xDF
3DE2:  CALL   0A00
....................          printf(lcd_putc,"Tiempo Almacenado"); 
3DE6:  MOVLW  28
3DE8:  MOVWF  FF6
3DEA:  MOVLW  07
3DEC:  MOVWF  FF7
3DEE:  CALL   18DC
....................          lcd_gotoxy(1,3); 
3DF2:  MOVLW  01
3DF4:  MOVWF  xDE
3DF6:  MOVLW  03
3DF8:  MOVWF  xDF
3DFA:  CALL   0A00
....................          printf(lcd_putc,"  Correctamente  "); 
3DFE:  MOVLW  3A
3E00:  MOVWF  FF6
3E02:  MOVLW  07
3E04:  MOVWF  FF7
3E06:  CALL   18DC
....................          write_eeprom(22,ppurga_minutos_pro);delay_ms(20); 
3E0A:  MOVLW  16
3E0C:  MOVWF  FA9
3E0E:  MOVFF  3A,FA8
3E12:  BCF    FA6.6
3E14:  BCF    FA6.7
3E16:  BSF    FA6.2
3E18:  MOVF   FF2,W
3E1A:  MOVWF  00
3E1C:  BCF    FF2.7
3E1E:  MOVLB  F
3E20:  MOVLW  55
3E22:  MOVWF  FA7
3E24:  MOVLW  AA
3E26:  MOVWF  FA7
3E28:  BSF    FA6.1
3E2A:  BTFSC  FA6.1
3E2C:  BRA    3E2A
3E2E:  BCF    FA6.2
3E30:  MOVF   00,W
3E32:  IORWF  FF2,F
3E34:  MOVLW  14
3E36:  MOVLB  0
3E38:  MOVWF  xE3
3E3A:  CALL   08EA
....................          write_eeprom(23,ppurga_segundos_pro);delay_ms(20); 
3E3E:  MOVLW  17
3E40:  MOVWF  FA9
3E42:  MOVFF  38,FA8
3E46:  BCF    FA6.6
3E48:  BCF    FA6.7
3E4A:  BSF    FA6.2
3E4C:  MOVF   FF2,W
3E4E:  MOVWF  00
3E50:  BCF    FF2.7
3E52:  MOVLB  F
3E54:  MOVLW  55
3E56:  MOVWF  FA7
3E58:  MOVLW  AA
3E5A:  MOVWF  FA7
3E5C:  BSF    FA6.1
3E5E:  BTFSC  FA6.1
3E60:  BRA    3E5E
3E62:  BCF    FA6.2
3E64:  MOVF   00,W
3E66:  IORWF  FF2,F
3E68:  MOVLW  14
3E6A:  MOVLB  0
3E6C:  MOVWF  xE3
3E6E:  CALL   08EA
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
3E72:  MOVFF  3A,39
3E76:  MOVFF  38,37
....................          delay_ms(700); 
3E7A:  MOVLW  04
3E7C:  MOVWF  xD0
3E7E:  MOVLW  AF
3E80:  MOVWF  xE3
3E82:  CALL   08EA
3E86:  DECFSZ xD0,F
3E88:  BRA    3E7E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3E8A:  MOVLW  1E
3E8C:  MOVWF  xE3
3E8E:  CALL   08EA
3E92:  MOVLW  01
3E94:  MOVWF  18
3E96:  CLRF   3E
3E98:  MOVLW  02
3E9A:  MOVWF  1B
3E9C:  MOVWF  1D
3E9E:  MOVLW  0C
3EA0:  MOVWF  xDD
3EA2:  CALL   0A72
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
.................... #endif 
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20){ 
3EA6:  MOVF   18,W
3EA8:  SUBLW  14
3EAA:  BTFSS  FD8.2
3EAC:  BRA    40D8
....................       if(Lectura2==1){ 
3EAE:  BTFSS  3D.7
3EB0:  BRA    3F14
....................          /*if(imprimio){ 
....................             letra=lcd_getc(1,1); 
....................             delay_ms(1); 
....................             if(letra!='J') 
....................                Ruido=1; 
....................          }*/ 
....................          lcd_gotoxy(1,1);                      
3EB2:  MOVLW  01
3EB4:  MOVWF  xDE
3EB6:  MOVWF  xDF
3EB8:  CALL   0A00
....................          printf(lcd_putc," JP CEGH ");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
3EBC:  MOVLW  4C
3EBE:  MOVWF  FF6
3EC0:  MOVLW  07
3EC2:  MOVWF  FF7
3EC4:  CALL   18DC
....................           
....................          #ifdef DAMPER 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"Ext=%2.0f%%",(100*((float)tmp/255))); 
....................          //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................          if(Flujo<0.5){ 
....................             lcd_gotoxy(11,2); 
....................             printf(lcd_putc,"Flujo=Bajo");       
....................          }else{ 
....................             if(Flujo>2.0){ 
....................                lcd_gotoxy(11,2); 
....................                printf(lcd_putc,"Flujo=Alto");                
....................             }else{ 
....................                lcd_gotoxy(11,2); 
....................                printf(lcd_putc,"Flujo=OK  ");       
....................             } 
....................          }  
....................          #else 
....................          lcd_gotoxy(1,2); 
3EC8:  MOVLW  01
3ECA:  MOVWF  xDE
3ECC:  MOVLW  02
3ECE:  MOVWF  xDF
3ED0:  CALL   0A00
....................          printf(lcd_putc,"Ext= ---"); 
3ED4:  MOVLW  56
3ED6:  MOVWF  FF6
3ED8:  MOVLW  07
3EDA:  MOVWF  FF7
3EDC:  CALL   18DC
....................          lcd_gotoxy(1,3); 
3EE0:  MOVLW  01
3EE2:  MOVWF  xDE
3EE4:  MOVLW  03
3EE6:  MOVWF  xDF
3EE8:  CALL   0A00
....................          printf(lcd_putc,"InFlow= ---   "); 
3EEC:  MOVLW  60
3EEE:  MOVWF  FF6
3EF0:  MOVLW  07
3EF2:  MOVWF  FF7
3EF4:  CALL   18DC
....................          lcd_gotoxy(11,2); 
3EF8:  MOVLW  0B
3EFA:  MOVWF  xDE
3EFC:  MOVLW  02
3EFE:  MOVWF  xDF
3F00:  CALL   0A00
....................          printf(lcd_putc,"Flujo=--- "); 
3F04:  MOVLW  70
3F06:  MOVWF  FF6
3F08:  MOVLW  07
3F0A:  MOVWF  FF7
3F0C:  CALL   18DC
....................          #endif 
....................          imprimio=1; 
3F10:  BSF    3D.3
....................          Lectura2=0; 
3F12:  BCF    3D.7
....................       } 
....................        
....................       if(flag_filtro==1){ 
3F14:  BTFSS  3D.2
3F16:  BRA    3F52
....................          if(horas>=60){ 
3F18:  MOVF   33,W
3F1A:  SUBLW  3B
3F1C:  BC    3F38
....................             lcd_gotoxy(10,1);                      
3F1E:  MOVLW  0A
3F20:  MOVWF  xDE
3F22:  MOVLW  01
3F24:  MOVWF  xDF
3F26:  CALL   0A00
....................             printf(lcd_putc,"Filtro:CAM"); 
3F2A:  MOVLW  7C
3F2C:  MOVWF  FF6
3F2E:  MOVLW  07
3F30:  MOVWF  FF7
3F32:  CALL   18DC
....................          }else{ 
3F36:  BRA    3F50
....................             lcd_gotoxy(10,1);                      
3F38:  MOVLW  0A
3F3A:  MOVWF  xDE
3F3C:  MOVLW  01
3F3E:  MOVWF  xDF
3F40:  CALL   0A00
....................             printf(lcd_putc,"Filtro:OK "); 
3F44:  MOVLW  88
3F46:  MOVWF  FF6
3F48:  MOVLW  07
3F4A:  MOVWF  FF7
3F4C:  CALL   18DC
....................          } 
....................       }else{ 
3F50:  BRA    3F6A
....................          lcd_gotoxy(10,1);                      
3F52:  MOVLW  0A
3F54:  MOVWF  xDE
3F56:  MOVLW  01
3F58:  MOVWF  xDF
3F5A:  CALL   0A00
....................          printf(lcd_putc,"Filtro:---"); 
3F5E:  MOVLW  94
3F60:  MOVWF  FF6
3F62:  MOVLW  07
3F64:  MOVWF  FF7
3F66:  CALL   18DC
....................       } 
....................        
....................       if(estadofl==1){ 
3F6A:  BTFSS  3C.0
3F6C:  BRA    3F8C
....................          Luz_Blanca_on; 
3F6E:  BSF    F8A.4
3F70:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
3F72:  MOVLW  01
3F74:  MOVWF  xDE
3F76:  MOVLW  04
3F78:  MOVWF  xDF
3F7A:  CALL   0A00
....................          printf(lcd_putc,"Luz:ON "); 
3F7E:  MOVLW  A0
3F80:  MOVWF  FF6
3F82:  MOVLW  07
3F84:  MOVWF  FF7
3F86:  CALL   18DC
....................       }else{ 
3F8A:  BRA    3FA8
....................          Luz_Blanca_off; 
3F8C:  BCF    F8A.4
3F8E:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
3F90:  MOVLW  01
3F92:  MOVWF  xDE
3F94:  MOVLW  04
3F96:  MOVWF  xDF
3F98:  CALL   0A00
....................          printf(lcd_putc,"Luz:OFF "); 
3F9C:  MOVLW  A8
3F9E:  MOVWF  FF6
3FA0:  MOVLW  07
3FA2:  MOVWF  FF7
3FA4:  CALL   18DC
....................       } 
....................        
....................       if(estadomv==1){ 
3FA8:  BTFSS  3C.1
3FAA:  BRA    3FC6
....................          lcd_gotoxy(10,4); 
3FAC:  MOVLW  0A
3FAE:  MOVWF  xDE
3FB0:  MOVLW  04
3FB2:  MOVWF  xDF
3FB4:  CALL   0A00
....................          printf(lcd_putc,"Motor:ON "); 
3FB8:  MOVLW  B2
3FBA:  MOVWF  FF6
3FBC:  MOVLW  07
3FBE:  MOVWF  FF7
3FC0:  CALL   18DC
....................       }else{ 
3FC4:  BRA    3FE6
....................          if(iniciodamper==1){ 
3FC6:  BTFSS  52.1
3FC8:  BRA    3FCE
....................             //Motor_off;      
....................             ApagaMotor(); 
3FCA:  CALL   1EB6
....................          } 
....................          lcd_gotoxy(10,4); 
3FCE:  MOVLW  0A
3FD0:  MOVWF  xDE
3FD2:  MOVLW  04
3FD4:  MOVWF  xDF
3FD6:  CALL   0A00
....................          printf(lcd_putc,"Motor:OFF ");  
3FDA:  MOVLW  BC
3FDC:  MOVWF  FF6
3FDE:  MOVLW  07
3FE0:  MOVWF  FF7
3FE2:  CALL   18DC
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia Abajo 
3FE6:  BSF    F96.0
3FE8:  BTFSS  F84.0
3FEA:  BRA    400C
....................          delay_ms(20); 
3FEC:  MOVLW  14
3FEE:  MOVWF  xE3
3FF0:  CALL   08EA
....................          if(DOWN && Flanco == 0){ 
3FF4:  BSF    F96.0
3FF6:  BTFSS  F84.0
3FF8:  BRA    400A
3FFA:  BTFSC  3C.4
3FFC:  BRA    400A
....................             Flanco = 1;delay_ms(200);estadofl=!estadofl; 
3FFE:  BSF    3C.4
4000:  MOVLW  C8
4002:  MOVWF  xE3
4004:  CALL   08EA
4008:  BTG    3C.0
....................          } 
....................       }else{ 
400A:  BRA    400E
....................          Flanco = 0; 
400C:  BCF    3C.4
....................       } 
....................              
....................       if(LEFT){//Si oprime hacia Izquierda 
400E:  BSF    F96.2
4010:  BTFSS  F84.2
4012:  BRA    405A
....................          delay_ms(20); 
4014:  MOVLW  14
4016:  MOVWF  xE3
4018:  CALL   08EA
....................          if(LEFT && Flanco2 == 0){ 
401C:  BSF    F96.2
401E:  BTFSS  F84.2
4020:  BRA    4058
4022:  BTFSC  3C.6
4024:  BRA    4058
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
4026:  BSF    3C.6
4028:  MOVLW  C8
402A:  MOVWF  xE3
402C:  CALL   08EA
4030:  BTG    3C.1
....................             if(estadomv==1){ 
4032:  BTFSS  3C.1
4034:  BRA    4048
....................                //Motor_on; 
....................                EnciendeMotor(); 
4036:  CALL   1ED4
....................                delay_ms(150); 
403A:  MOVLW  96
403C:  MOVWF  xE3
403E:  CALL   08EA
....................                lcd_init(); 
4042:  CALL   09A8
....................             }else{ 
4046:  BRA    4058
....................                //Motor_off; 
....................                ApagaMotor(); 
4048:  CALL   1EB6
....................                delay_ms(150); 
404C:  MOVLW  96
404E:  MOVWF  xE3
4050:  CALL   08EA
....................                lcd_init(); 
4054:  CALL   09A8
....................             } 
....................          } 
....................       }else{ 
4058:  BRA    405C
....................          Flanco2 = 0; 
405A:  BCF    3C.6
....................       } 
....................     
....................       if(UP){// Si oprime Arriba 
405C:  BSF    F92.5
405E:  BTFSS  F80.5
4060:  BRA    409E
....................          delay_ms(20); 
4062:  MOVLW  14
4064:  MOVWF  xE3
4066:  CALL   08EA
....................          if(UP && Flanco1 == 0) { 
406A:  BSF    F92.5
406C:  BTFSS  F80.5
406E:  BRA    409C
4070:  BTFSC  3C.5
4072:  BRA    409C
....................             /*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
4074:  MOVLW  02
4076:  MOVWF  xD0
4078:  MOVLW  FA
407A:  MOVWF  xE3
407C:  CALL   08EA
4080:  DECFSZ xD0,F
4082:  BRA    4078
4084:  MOVLW  0C
4086:  MOVWF  xDD
4088:  CALL   0A72
408C:  MOVLW  01
408E:  MOVWF  18
4090:  CLRF   3E
4092:  MOVLW  02
4094:  MOVWF  1B
4096:  MOVWF  1D
4098:  MOVLW  0B
409A:  MOVWF  1A
....................          } 
....................       }else{ 
409C:  BRA    40A0
....................          Flanco1 = 0; 
409E:  BCF    3C.5
....................       } 
....................              
....................       if(RIGHT){// Si oprime Derecha 
40A0:  BSF    F96.1
40A2:  BTFSS  F84.1
40A4:  BRA    40D6
....................          delay_ms(20); 
40A6:  MOVLW  14
40A8:  MOVWF  xE3
40AA:  CALL   08EA
....................          if(RIGHT && Flanco3 == 0){ 
40AE:  BSF    F96.1
40B0:  BTFSS  F84.1
40B2:  BRA    40D4
40B4:  BTFSC  3C.7
40B6:  BRA    40D4
....................             delay_ms(500);printf(lcd_putc,"\f");Menu=40; 
40B8:  MOVLW  02
40BA:  MOVWF  xD0
40BC:  MOVLW  FA
40BE:  MOVWF  xE3
40C0:  CALL   08EA
40C4:  DECFSZ xD0,F
40C6:  BRA    40BC
40C8:  MOVLW  0C
40CA:  MOVWF  xDD
40CC:  CALL   0A72
40D0:  MOVLW  28
40D2:  MOVWF  18
....................          } 
....................       }else{ 
40D4:  BRA    40D8
....................          Flanco3 = 0; 
40D6:  BCF    3C.7
....................       } 
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
40D8:  MOVF   18,W
40DA:  SUBLW  1E
40DC:  BTFSS  FD8.2
40DE:  BRA    42A0
....................       lcd_gotoxy(1,1); 
40E0:  MOVLW  01
40E2:  MOVWF  xDE
40E4:  MOVWF  xDF
40E6:  CALL   0A00
....................       printf(lcd_putc,"    !Post-Purga!    "); 
40EA:  MOVLW  C8
40EC:  MOVWF  FF6
40EE:  MOVLW  07
40F0:  MOVWF  FF7
40F2:  CALL   18DC
....................       lcd_gotoxy(1,2); 
40F6:  MOVLW  01
40F8:  MOVWF  xDE
40FA:  MOVLW  02
40FC:  MOVWF  xDF
40FE:  CALL   0A00
....................       printf(lcd_putc,"                    "); 
4102:  MOVLW  DE
4104:  MOVWF  FF6
4106:  MOVLW  07
4108:  MOVWF  FF7
410A:  CALL   18DC
....................       lcd_gotoxy(1,3); 
410E:  MOVLW  01
4110:  MOVWF  xDE
4112:  MOVLW  03
4114:  MOVWF  xDF
4116:  CALL   0A00
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
411A:  MOVLW  F4
411C:  MOVWF  FF6
411E:  MOVLW  07
4120:  MOVWF  FF7
4122:  MOVLW  06
4124:  MOVWF  xD0
4126:  CALL   18FE
412A:  MOVFF  39,D0
412E:  MOVLW  01
4130:  MOVWF  xD1
4132:  CALL   1ADC
4136:  MOVLW  3A
4138:  MOVWF  xDD
413A:  CALL   0A72
413E:  MOVFF  37,D0
4142:  MOVLW  01
4144:  MOVWF  xD1
4146:  CALL   1ADC
414A:  MOVLW  20
414C:  MOVWF  xDD
414E:  CALL   0A72
4152:  MOVLW  20
4154:  MOVWF  xDD
4156:  CALL   0A72
....................            
....................       if(Lectura==1) 
415A:  BTFSS  3D.6
415C:  BRA    429E
....................       { 
....................          Luz_Blanca_off; 
415E:  BCF    F8A.4
4160:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
4162:  MOVLW  02
4164:  MOVWF  xD1
4166:  CALL   1EF2
416A:  MOVFF  00,D0
416E:  MOVFF  01,D1
4172:  MOVFF  02,D2
4176:  MOVFF  03,D3
417A:  MOVFF  03,D7
417E:  MOVFF  02,D6
4182:  MOVFF  01,D5
4186:  MOVFF  00,D4
418A:  CLRF   xDB
418C:  CLRF   xDA
418E:  MOVLW  40
4190:  MOVWF  xD9
4192:  MOVLW  81
4194:  MOVWF  xD8
4196:  CALL   1348
419A:  BTFSS  FD8.0
419C:  BRA    429C
419E:  MOVF   37,F
41A0:  BTFSS  FD8.2
41A2:  BRA    429C
41A4:  MOVF   39,F
41A6:  BNZ   429C
....................          { 
....................             write_eeprom(70,segundos);delay_ms(20); 
41A8:  MOVLW  46
41AA:  MOVWF  FA9
41AC:  MOVFF  31,FA8
41B0:  BCF    FA6.6
41B2:  BCF    FA6.7
41B4:  BSF    FA6.2
41B6:  MOVF   FF2,W
41B8:  MOVWF  00
41BA:  BCF    FF2.7
41BC:  MOVLB  F
41BE:  MOVLW  55
41C0:  MOVWF  FA7
41C2:  MOVLW  AA
41C4:  MOVWF  FA7
41C6:  BSF    FA6.1
41C8:  BTFSC  FA6.1
41CA:  BRA    41C8
41CC:  BCF    FA6.2
41CE:  MOVF   00,W
41D0:  IORWF  FF2,F
41D2:  MOVLW  14
41D4:  MOVLB  0
41D6:  MOVWF  xE3
41D8:  CALL   08EA
....................             write_eeprom(71,minutos);delay_ms(20); 
41DC:  MOVLW  47
41DE:  MOVWF  FA9
41E0:  MOVFF  32,FA8
41E4:  BCF    FA6.6
41E6:  BCF    FA6.7
41E8:  BSF    FA6.2
41EA:  MOVF   FF2,W
41EC:  MOVWF  00
41EE:  BCF    FF2.7
41F0:  MOVLB  F
41F2:  MOVLW  55
41F4:  MOVWF  FA7
41F6:  MOVLW  AA
41F8:  MOVWF  FA7
41FA:  BSF    FA6.1
41FC:  BTFSC  FA6.1
41FE:  BRA    41FC
4200:  BCF    FA6.2
4202:  MOVF   00,W
4204:  IORWF  FF2,F
4206:  MOVLW  14
4208:  MOVLB  0
420A:  MOVWF  xE3
420C:  CALL   08EA
....................             write_eeprom(72,horas);delay_ms(20); 
4210:  MOVLW  48
4212:  MOVWF  FA9
4214:  MOVFF  33,FA8
4218:  BCF    FA6.6
421A:  BCF    FA6.7
421C:  BSF    FA6.2
421E:  MOVF   FF2,W
4220:  MOVWF  00
4222:  BCF    FF2.7
4224:  MOVLB  F
4226:  MOVLW  55
4228:  MOVWF  FA7
422A:  MOVLW  AA
422C:  MOVWF  FA7
422E:  BSF    FA6.1
4230:  BTFSC  FA6.1
4232:  BRA    4230
4234:  BCF    FA6.2
4236:  MOVF   00,W
4238:  IORWF  FF2,F
423A:  MOVLW  14
423C:  MOVLB  0
423E:  MOVWF  xE3
4240:  CALL   08EA
....................             printf(lcd_putc,"\f"); 
4244:  MOVLW  0C
4246:  MOVWF  xDD
4248:  CALL   0A72
....................             lcd_gotoxy(1,2); 
424C:  MOVLW  01
424E:  MOVWF  xDE
4250:  MOVLW  02
4252:  MOVWF  xDF
4254:  CALL   0A00
....................             printf(lcd_putc,"     Proceso      "); 
4258:  MOVLW  06
425A:  MOVWF  FF6
425C:  MOVLW  08
425E:  MOVWF  FF7
4260:  CALL   18DC
....................             lcd_gotoxy(1,3); 
4264:  MOVLW  01
4266:  MOVWF  xDE
4268:  MOVLW  03
426A:  MOVWF  xDF
426C:  CALL   0A00
....................             printf(lcd_putc,"    Finalizado    "); 
4270:  MOVLW  1A
4272:  MOVWF  FF6
4274:  MOVLW  08
4276:  MOVWF  FF7
4278:  CALL   18DC
....................             delay_ms(2000); 
427C:  MOVLW  08
427E:  MOVWF  xD0
4280:  MOVLW  FA
4282:  MOVWF  xE3
4284:  CALL   08EA
4288:  DECFSZ xD0,F
428A:  BRA    4280
....................             printf(lcd_putc,"\f"); 
428C:  MOVLW  0C
428E:  MOVWF  xDD
4290:  CALL   0A72
....................             ajustar_damper(0); 
4294:  CLRF   xD0
4296:  GOTO   1F48
....................             reset_cpu(); 
429A:  RESET
....................          } 
....................          Lectura=0; 
429C:  BCF    3D.6
....................       } 
....................        
....................    } 
429E:  BRA    40D8
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
42A0:  MOVF   18,W
42A2:  SUBLW  28
42A4:  BNZ   4382
....................    lcd_gotoxy(1,1); 
42A6:  MOVLW  01
42A8:  MOVWF  xDE
42AA:  MOVWF  xDF
42AC:  CALL   0A00
....................    printf(lcd_putc,"   Desea apagar     "); 
42B0:  MOVLW  2E
42B2:  MOVWF  FF6
42B4:  MOVLW  08
42B6:  MOVWF  FF7
42B8:  CALL   18DC
....................    lcd_gotoxy(1,2); 
42BC:  MOVLW  01
42BE:  MOVWF  xDE
42C0:  MOVLW  02
42C2:  MOVWF  xDF
42C4:  CALL   0A00
....................    printf(lcd_putc,"     la cabina      "); 
42C8:  MOVLW  44
42CA:  MOVWF  FF6
42CC:  MOVLW  08
42CE:  MOVWF  FF7
42D0:  CALL   18DC
....................    lcd_gotoxy(1,3); 
42D4:  MOVLW  01
42D6:  MOVWF  xDE
42D8:  MOVLW  03
42DA:  MOVWF  xDF
42DC:  CALL   0A00
....................    printf(lcd_putc,"   > Aceptar        "); 
42E0:  MOVLW  5A
42E2:  MOVWF  FF6
42E4:  MOVLW  08
42E6:  MOVWF  FF7
42E8:  CALL   18DC
....................    lcd_gotoxy(1,4); 
42EC:  MOVLW  01
42EE:  MOVWF  xDE
42F0:  MOVLW  04
42F2:  MOVWF  xDF
42F4:  CALL   0A00
....................    printf(lcd_putc,"   < Cancelar       "); 
42F8:  MOVLW  70
42FA:  MOVWF  FF6
42FC:  MOVLW  08
42FE:  MOVWF  FF7
4300:  CALL   18DC
....................    
....................     
....................       if(RIGHT){// Si oprime derecha 
4304:  BSF    F96.1
4306:  BTFSS  F84.1
4308:  BRA    433A
....................          delay_ms(20); 
430A:  MOVLW  14
430C:  MOVWF  xE3
430E:  CALL   08EA
....................          if(RIGHT && Flanco1 == 0){ 
4312:  BSF    F96.1
4314:  BTFSS  F84.1
4316:  BRA    4338
4318:  BTFSC  3C.5
431A:  BRA    4338
....................             Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
431C:  BSF    3C.5
431E:  MOVLW  1E
4320:  MOVWF  18
4322:  MOVFF  20,D0
4326:  CALL   08DA
432A:  BCF    F8A.6
432C:  BCF    F93.6
432E:  MOVLW  0C
4330:  MOVWF  xDD
4332:  CALL   0A72
4336:  BSF    52.6
....................          } 
....................       }else{ 
4338:  BRA    433C
....................          Flanco1 = 0; 
433A:  BCF    3C.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
433C:  BSF    F96.2
433E:  BTFSS  F84.2
4340:  BRA    4380
....................          delay_ms(20); 
4342:  MOVLW  14
4344:  MOVWF  xE3
4346:  CALL   08EA
....................          if(LEFT && Flanco3 == 0){ 
434A:  BSF    F96.2
434C:  BTFSS  F84.2
434E:  BRA    437E
4350:  BTFSC  3C.7
4352:  BRA    437E
....................             Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4354:  BSF    3C.7
4356:  MOVLW  14
4358:  MOVWF  18
435A:  CLRF   3E
435C:  MOVLW  02
435E:  MOVWF  1B
4360:  MOVWF  1D
4362:  MOVLW  0B
4364:  MOVWF  1A
4366:  MOVLW  02
4368:  MOVWF  xD0
436A:  MOVLW  FA
436C:  MOVWF  xE3
436E:  CALL   08EA
4372:  DECFSZ xD0,F
4374:  BRA    436A
4376:  MOVLW  0C
4378:  MOVWF  xDD
437A:  CALL   0A72
....................          } 
....................       }else{ 
437E:  BRA    4382
....................          Flanco3 = 0; 
4380:  BCF    3C.7
....................       } 
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
4382:  MOVF   18,W
4384:  SUBLW  32
4386:  BNZ   4458
....................       lcd_gotoxy(1,1); 
4388:  MOVLW  01
438A:  MOVWF  xDE
438C:  MOVWF  xDF
438E:  CALL   0A00
....................       printf(lcd_putc,"      !Purga!       "); 
4392:  MOVLW  86
4394:  MOVWF  FF6
4396:  MOVLW  08
4398:  MOVWF  FF7
439A:  CALL   18DC
....................       lcd_gotoxy(1,2); 
439E:  MOVLW  01
43A0:  MOVWF  xDE
43A2:  MOVLW  02
43A4:  MOVWF  xDF
43A6:  CALL   0A00
....................       printf(lcd_putc,"                    "); 
43AA:  MOVLW  9C
43AC:  MOVWF  FF6
43AE:  MOVLW  08
43B0:  MOVWF  FF7
43B2:  CALL   18DC
....................       lcd_gotoxy(1,3); 
43B6:  MOVLW  01
43B8:  MOVWF  xDE
43BA:  MOVLW  03
43BC:  MOVWF  xDF
43BE:  CALL   0A00
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
43C2:  MOVLW  B2
43C4:  MOVWF  FF6
43C6:  MOVLW  08
43C8:  MOVWF  FF7
43CA:  MOVLW  06
43CC:  MOVWF  xD0
43CE:  CALL   18FE
43D2:  MOVFF  22,D0
43D6:  MOVLW  01
43D8:  MOVWF  xD1
43DA:  CALL   1ADC
43DE:  MOVLW  3A
43E0:  MOVWF  xDD
43E2:  CALL   0A72
43E6:  MOVFF  35,D0
43EA:  MOVLW  01
43EC:  MOVWF  xD1
43EE:  CALL   1ADC
43F2:  MOVLW  20
43F4:  MOVWF  xDD
43F6:  CALL   0A72
43FA:  MOVLW  20
43FC:  MOVWF  xDD
43FE:  CALL   0A72
4402:  MOVLW  20
4404:  MOVWF  xDD
4406:  CALL   0A72
....................         
....................       if(LEFT){ 
440A:  BSF    F96.2
440C:  BTFSS  F84.2
440E:  BRA    4430
....................          delay_ms(1000); 
4410:  MOVLW  04
4412:  MOVWF  xD0
4414:  MOVLW  FA
4416:  MOVWF  xE3
4418:  CALL   08EA
441C:  DECFSZ xD0,F
441E:  BRA    4414
....................          if(LEFT){ 
4420:  BSF    F96.2
4422:  BTFSS  F84.2
4424:  BRA    4430
....................             tiempo_purga=0; 
4426:  BCF    52.5
....................             EnciendeMotor();//Motor_on; 
4428:  CALL   1ED4
....................             Menu=20; 
442C:  MOVLW  14
442E:  MOVWF  18
....................          } 
....................       } 
....................       if(Lectura==1){ 
4430:  BTFSS  3D.6
4432:  BRA    4458
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
4434:  MOVFF  2B,D0
4438:  GOTO   1F50
443C:  MOVFF  03,6F
4440:  MOVFF  02,6E
4444:  MOVFF  01,6D
4448:  MOVFF  00,6C
....................         controlar_flujo();     
444C:  GOTO   231A
....................         //Motor_on; 
....................         EnciendeMotor(); 
4450:  CALL   1ED4
....................         Luz_Blanca_off; 
4454:  BCF    F8A.4
4456:  BCF    F93.4
....................       } 
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=60) 
4458:  MOVF   34,W
445A:  SUBLW  3B
445C:  BC    4464
....................    { 
....................       lcd_init(); 
445E:  CALL   09A8
....................       tiemporeset=0; 
4462:  CLRF   34
....................    }  
....................  
....................    #ifdef DAMPER 
....................    if(Menu!=0 || Menu!=30) 
....................    { 
....................       if(Lectura==1) 
....................       { 
....................          FeedbackDamper=(int8)(100*(sensores(2)/1023)); 
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
....................          controlar_flujo(); 
....................           
....................          if(Flujo<0.5 && Menu==20) 
....................          { 
....................               flag_latencia=1; 
....................                
....................               if(Latencia==1) 
....................               { 
....................                  if(estadoalarma==1) 
....................                  { 
....................                     Alarma_on; 
....................                  } 
....................                  else 
....................                  { 
....................                     Alarma_off; 
....................                  } 
....................                  estadopantalla=!estadopantalla; 
....................                  if(estadopantalla==1) 
....................                  {intensidadpantalla(contraste);} 
....................                  else 
....................                  {intensidadpantalla(0);} 
....................                } 
....................             } 
....................          else 
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
....................             if(Flujo>=0.5) 
....................             { 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
....................             } 
....................          } 
....................       } 
....................       Lectura=0; 
....................    }    
....................    else 
....................    { 
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
....................    } 
....................    #else 
....................    if(Menu!=0 || Menu!=30 || Menu!=50) 
4464:  MOVF   18,F
4466:  BNZ   4474
4468:  MOVF   18,W
446A:  SUBLW  1E
446C:  BNZ   4474
446E:  MOVF   18,W
4470:  SUBLW  32
4472:  BZ    44E6
....................    { 
....................       if(Lectura==1) 
4474:  BTFSS  3D.6
4476:  BRA    44E4
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
4478:  CLRF   xD7
447A:  MOVFF  33,D6
447E:  CALL   0B1E
4482:  MOVFF  4D,D7
4486:  MOVFF  4C,D6
448A:  MOVFF  4B,D5
448E:  MOVFF  4A,D4
4492:  MOVFF  03,DB
4496:  MOVFF  02,DA
449A:  MOVFF  01,D9
449E:  MOVFF  00,D8
44A2:  CALL   1348
44A6:  BC    44AA
44A8:  BNZ   44D6
44AA:  MOVF   18,W
44AC:  SUBLW  14
44AE:  BNZ   44D6
....................          { 
....................              if(estadoalarma==1) 
44B0:  BTFSS  3C.2
44B2:  BRA    44BA
....................              { 
....................                 Alarma_on; 
44B4:  BSF    F8A.6
44B6:  BCF    F93.6
....................              } 
....................              else 
44B8:  BRA    44BE
....................              { 
....................                 Alarma_off; 
44BA:  BCF    F8A.6
44BC:  BCF    F93.6
....................              } 
....................              estadopantalla=!estadopantalla; 
44BE:  BTG    3C.3
....................              if(estadopantalla==1) 
44C0:  BTFSS  3C.3
44C2:  BRA    44CE
....................              {intensidadpantalla(contraste);} 
44C4:  MOVFF  20,D0
44C8:  CALL   08DA
....................              else 
44CC:  BRA    44D4
....................              {intensidadpantalla(0);} 
44CE:  CLRF   xD0
44D0:  CALL   08DA
....................          } 
....................          else 
44D4:  BRA    44E2
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
44D6:  MOVFF  20,D0
44DA:  CALL   08DA
44DE:  BCF    F8A.6
44E0:  BCF    F93.6
....................          } 
....................          Lectura=0; 
44E2:  BCF    3D.6
....................       } 
....................       //Lectura=0; 
....................    }    
....................    else 
44E4:  BRA    44F2
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
44E6:  MOVFF  20,D0
44EA:  CALL   08DA
44EE:  BCF    F8A.6
44F0:  BCF    F93.6
....................    } 
....................    #endif 
....................    if(Ruido){ 
44F2:  BTFSS  3D.4
44F4:  BRA    44F8
.................... //      Refresco(); 
....................       imprimio=0; 
44F6:  BCF    3D.3
....................    } 
....................  
....................    }        
44F8:  GOTO   2622
.................... } 
....................  
44FC:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
