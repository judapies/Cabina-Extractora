CCS PCH C Compiler, Version 4.104, 5967               13-abr.-18 10:58

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2018\Cabina Extractora 120 Sin Ductos Medida Presion #004587768\Firmware\CabinaCFLH.lst

               ROM used: 16192 bytes (49%)
                         Largest free fragment is 16572
               RAM used: 195 (10%) at main() level
                         233 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1A38
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
08CE:  CLRF   FEA
08D0:  MOVLW  D6
08D2:  MOVWF  FE9
08D4:  MOVF   FEF,W
08D6:  BZ    08F4
08D8:  MOVLW  0F
08DA:  MOVWF  01
08DC:  CLRF   00
08DE:  DECFSZ 00,F
08E0:  BRA    08DE
08E2:  DECFSZ 01,F
08E4:  BRA    08DC
08E6:  MOVLW  8F
08E8:  MOVWF  00
08EA:  DECFSZ 00,F
08EC:  BRA    08EA
08EE:  NOP   
08F0:  DECFSZ FEF,F
08F2:  BRA    08D8
08F4:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
08F6:  SWAPF  xD7,W
08F8:  ANDLW  F0
08FA:  MOVWF  00
08FC:  MOVLW  0F
08FE:  ANDWF  F81,W
0900:  IORWF  00,W
0902:  MOVWF  F81
....................       delay_cycles(30); 
0904:  MOVLW  09
0906:  MOVWF  00
0908:  DECFSZ 00,F
090A:  BRA    0908
090C:  BRA    090E
....................       lcd.enable = 1; 
090E:  BSF    F81.3
....................       delay_us(55); 
0910:  MOVLW  DB
0912:  MOVWF  00
0914:  DECFSZ 00,F
0916:  BRA    0914
0918:  BRA    091A
....................       lcd.enable = 0; 
091A:  BCF    F81.3
.................... } 
091C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
091E:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0920:  MOVLW  01
0922:  MOVWF  xD6
0924:  RCALL  08CE
....................       lcd.rs = address; 
0926:  BTFSS  xD4.0
0928:  BCF    F81.1
092A:  BTFSC  xD4.0
092C:  BSF    F81.1
....................       delay_cycles(30); 
092E:  MOVLW  09
0930:  MOVWF  00
0932:  DECFSZ 00,F
0934:  BRA    0932
0936:  BRA    0938
....................       lcd.rw = 0; 
0938:  BCF    F81.2
....................       delay_cycles(30); 
093A:  MOVLW  09
093C:  MOVWF  00
093E:  DECFSZ 00,F
0940:  BRA    093E
0942:  BRA    0944
....................       lcd.enable = 0; 
0944:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0946:  SWAPF  xD5,W
0948:  MOVWF  xD6
094A:  MOVLW  0F
094C:  ANDWF  xD6,F
094E:  MOVFF  D6,D7
0952:  RCALL  08F6
....................       lcd_send_nibble(n & 0xf); 
0954:  MOVF   xD5,W
0956:  ANDLW  0F
0958:  MOVWF  xD6
095A:  MOVWF  xD7
095C:  RCALL  08F6
.................... } 
095E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0960:  MOVLW  00
0962:  MOVWF  F93
....................     lcd.rs = 0; 
0964:  BCF    F81.1
....................     lcd.rw = 0; 
0966:  BCF    F81.2
....................     lcd.enable = 0; 
0968:  BCF    F81.3
....................     delay_ms(15); 
096A:  MOVLW  0F
096C:  MOVWF  xD6
096E:  RCALL  08CE
....................     for(i=1;i<=3;++i) { 
0970:  MOVLW  01
0972:  MOVWF  xBF
0974:  MOVF   xBF,W
0976:  SUBLW  03
0978:  BNC   098A
....................        lcd_send_nibble(3); 
097A:  MOVLW  03
097C:  MOVWF  xD7
097E:  RCALL  08F6
....................        delay_ms(5); 
0980:  MOVLW  05
0982:  MOVWF  xD6
0984:  RCALL  08CE
....................     } 
0986:  INCF   xBF,F
0988:  BRA    0974
....................     lcd_send_nibble(2); 
098A:  MOVLW  02
098C:  MOVWF  xD7
098E:  RCALL  08F6
....................     for(i=0;i<=3;++i) 
0990:  CLRF   xBF
0992:  MOVF   xBF,W
0994:  SUBLW  03
0996:  BNC   09B6
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0998:  CLRF   03
099A:  MOVF   xBF,W
099C:  MOVFF  FF2,C0
09A0:  BCF    FF2.7
09A2:  CALL   0096
09A6:  BTFSC  xC0.7
09A8:  BSF    FF2.7
09AA:  MOVWF  xC0
09AC:  CLRF   xD4
09AE:  MOVWF  xD5
09B0:  RCALL  091E
09B2:  INCF   xBF,F
09B4:  BRA    0992
.................... } 
09B6:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
09B8:  MOVLW  01
09BA:  SUBWF  xD2,W
09BC:  ADDLW  FC
09BE:  BC    09DE
09C0:  ADDLW  04
09C2:  GOTO   09EE
....................      case 1 : address=0x80;break; 
09C6:  MOVLW  80
09C8:  MOVWF  xD3
09CA:  BRA    09DE
....................      case 2 : address=0xc0;break; 
09CC:  MOVLW  C0
09CE:  MOVWF  xD3
09D0:  BRA    09DE
....................      case 3 : address=0x94;break; 
09D2:  MOVLW  94
09D4:  MOVWF  xD3
09D6:  BRA    09DE
....................      case 4 : address=0xd4;break; 
09D8:  MOVLW  D4
09DA:  MOVWF  xD3
09DC:  BRA    09DE
....................    } 
....................    address+=x-1; 
09DE:  MOVLW  01
09E0:  SUBWF  xD1,W
09E2:  ADDWF  xD3,F
....................    lcd_send_byte(0,address); 
09E4:  CLRF   xD4
09E6:  MOVFF  D3,D5
09EA:  RCALL  091E
.................... } 
09EC:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0A1A:  MOVF   xD0,W
0A1C:  SUBLW  F1
0A1E:  BNZ   0A24
....................    { 
....................       c=238; 
0A20:  MOVLW  EE
0A22:  MOVWF  xD0
....................    } 
....................    if(c=='Ñ') 
0A24:  MOVF   xD0,W
0A26:  SUBLW  D1
0A28:  BNZ   0A2E
....................    { 
....................       c=255; 
0A2A:  MOVLW  FF
0A2C:  MOVWF  xD0
....................    } 
....................     
....................    switch (c) { 
0A2E:  MOVF   xD0,W
0A30:  XORLW  0C
0A32:  BZ    0A3E
0A34:  XORLW  06
0A36:  BZ    0A52
0A38:  XORLW  02
0A3A:  BZ    0A60
0A3C:  BRA    0A6A
....................      case '\f'   : lcd_send_byte(0,1); 
0A3E:  CLRF   xD4
0A40:  MOVLW  01
0A42:  MOVWF  xD5
0A44:  RCALL  091E
....................                    lcdline=1; 
0A46:  MOVLW  01
0A48:  MOVWF  16
....................                    delay_ms(2); 
0A4A:  MOVLW  02
0A4C:  MOVWF  xD6
0A4E:  RCALL  08CE
....................                                            break; 
0A50:  BRA    0A76
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A52:  INCF   16,F
0A54:  MOVLW  01
0A56:  MOVWF  xD1
0A58:  MOVFF  16,D2
0A5C:  RCALL  09B8
0A5E:  BRA    0A76
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0A60:  CLRF   xD4
0A62:  MOVLW  10
0A64:  MOVWF  xD5
0A66:  RCALL  091E
0A68:  BRA    0A76
....................      default     : lcd_send_byte(1,c);     break; 
0A6A:  MOVLW  01
0A6C:  MOVWF  xD4
0A6E:  MOVFF  D0,D5
0A72:  RCALL  091E
0A74:  BRA    0A76
....................    } 
.................... } 
0A76:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
16AA:  BCF    xD2.0
....................    y = x; 
16AC:  MOVFF  C6,CB
16B0:  MOVFF  C5,CA
16B4:  MOVFF  C4,C9
16B8:  MOVFF  C3,C8
....................  
....................    if (x < 0) 
16BC:  MOVFF  C6,D6
16C0:  MOVFF  C5,D5
16C4:  MOVFF  C4,D4
16C8:  MOVFF  C3,D3
16CC:  CLRF   xDA
16CE:  CLRF   xD9
16D0:  CLRF   xD8
16D2:  CLRF   xD7
16D4:  RCALL  104E
16D6:  BNC   16E0
....................    { 
....................       s = 1; 
16D8:  BSF    xD2.0
....................       y = -y; 
16DA:  MOVF   xC9,W
16DC:  XORLW  80
16DE:  MOVWF  xC9
....................    } 
....................  
....................    if (y <= 32768.0) 
16E0:  MOVFF  CB,D6
16E4:  MOVFF  CA,D5
16E8:  MOVFF  C9,D4
16EC:  MOVFF  C8,D3
16F0:  CLRF   xDA
16F2:  CLRF   xD9
16F4:  CLRF   xD8
16F6:  MOVLW  8E
16F8:  MOVWF  xD7
16FA:  RCALL  104E
16FC:  BC    1700
16FE:  BNZ   1730
....................   res = (float32)(unsigned int16)y; 
1700:  MOVFF  CB,D6
1704:  MOVFF  CA,D5
1708:  MOVFF  C9,D4
170C:  MOVFF  C8,D3
1710:  RCALL  132E
1712:  MOVFF  02,D8
1716:  MOVFF  01,D7
171A:  CALL   0A78
171E:  MOVFF  03,CF
1722:  MOVFF  02,CE
1726:  MOVFF  01,CD
172A:  MOVFF  00,CC
....................  
....................  else if (y < 10000000.0) 
172E:  BRA    18B4
1730:  MOVFF  CB,D6
1734:  MOVFF  CA,D5
1738:  MOVFF  C9,D4
173C:  MOVFF  C8,D3
1740:  MOVLW  80
1742:  MOVWF  xDA
1744:  MOVLW  96
1746:  MOVWF  xD9
1748:  MOVLW  18
174A:  MOVWF  xD8
174C:  MOVLW  96
174E:  MOVWF  xD7
1750:  RCALL  104E
1752:  BTFSS  FD8.0
1754:  BRA    18A4
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1756:  MOVFF  CB,D6
175A:  MOVFF  CA,D5
175E:  MOVFF  C9,D4
1762:  MOVFF  C8,D3
1766:  CLRF   xDA
1768:  CLRF   xD9
176A:  CLRF   xD8
176C:  MOVLW  8E
176E:  MOVWF  xD7
1770:  RCALL  13BC
1772:  MOVFF  03,D6
1776:  MOVFF  02,D5
177A:  MOVFF  01,D4
177E:  MOVFF  00,D3
1782:  RCALL  132E
1784:  MOVFF  02,D1
1788:  MOVFF  01,D0
....................       y = 32768.0*(y/32768.0 - (float32)l); 
178C:  MOVFF  CB,D6
1790:  MOVFF  CA,D5
1794:  MOVFF  C9,D4
1798:  MOVFF  C8,D3
179C:  CLRF   xDA
179E:  CLRF   xD9
17A0:  CLRF   xD8
17A2:  MOVLW  8E
17A4:  MOVWF  xD7
17A6:  RCALL  13BC
17A8:  MOVFF  00,D3
17AC:  MOVFF  01,D4
17B0:  MOVFF  02,D5
17B4:  MOVFF  03,D6
17B8:  MOVFF  D1,D8
17BC:  MOVFF  D0,D7
17C0:  CALL   0A78
17C4:  BSF    FD8.1
17C6:  MOVFF  D6,DA
17CA:  MOVFF  D5,D9
17CE:  MOVFF  D4,D8
17D2:  MOVFF  D3,D7
17D6:  MOVFF  03,DE
17DA:  MOVFF  02,DD
17DE:  MOVFF  01,DC
17E2:  MOVFF  00,DB
17E6:  RCALL  10C4
17E8:  CLRF   xD6
17EA:  CLRF   xD5
17EC:  CLRF   xD4
17EE:  MOVLW  8E
17F0:  MOVWF  xD3
17F2:  MOVFF  03,DA
17F6:  MOVFF  02,D9
17FA:  MOVFF  01,D8
17FE:  MOVFF  00,D7
1802:  CALL   0D24
1806:  MOVFF  03,CB
180A:  MOVFF  02,CA
180E:  MOVFF  01,C9
1812:  MOVFF  00,C8
....................   res = 32768.0*(float32)l; 
1816:  MOVFF  D1,D8
181A:  MOVFF  D0,D7
181E:  CALL   0A78
1822:  CLRF   xD6
1824:  CLRF   xD5
1826:  CLRF   xD4
1828:  MOVLW  8E
182A:  MOVWF  xD3
182C:  MOVFF  03,DA
1830:  MOVFF  02,D9
1834:  MOVFF  01,D8
1838:  MOVFF  00,D7
183C:  CALL   0D24
1840:  MOVFF  03,CF
1844:  MOVFF  02,CE
1848:  MOVFF  01,CD
184C:  MOVFF  00,CC
....................   res += (float32)(unsigned int16)y; 
1850:  MOVFF  CB,D6
1854:  MOVFF  CA,D5
1858:  MOVFF  C9,D4
185C:  MOVFF  C8,D3
1860:  RCALL  132E
1862:  MOVFF  02,D8
1866:  MOVFF  01,D7
186A:  CALL   0A78
186E:  BCF    FD8.1
1870:  MOVFF  CF,DA
1874:  MOVFF  CE,D9
1878:  MOVFF  CD,D8
187C:  MOVFF  CC,D7
1880:  MOVFF  03,DE
1884:  MOVFF  02,DD
1888:  MOVFF  01,DC
188C:  MOVFF  00,DB
1890:  RCALL  10C4
1892:  MOVFF  03,CF
1896:  MOVFF  02,CE
189A:  MOVFF  01,CD
189E:  MOVFF  00,CC
....................  } 
....................  
....................  else 
18A2:  BRA    18B4
....................   res = y; 
18A4:  MOVFF  CB,CF
18A8:  MOVFF  CA,CE
18AC:  MOVFF  C9,CD
18B0:  MOVFF  C8,CC
....................  
....................  y = y - (float32)(unsigned int16)y; 
18B4:  MOVFF  CB,D6
18B8:  MOVFF  CA,D5
18BC:  MOVFF  C9,D4
18C0:  MOVFF  C8,D3
18C4:  RCALL  132E
18C6:  MOVFF  02,D8
18CA:  MOVFF  01,D7
18CE:  CALL   0A78
18D2:  BSF    FD8.1
18D4:  MOVFF  CB,DA
18D8:  MOVFF  CA,D9
18DC:  MOVFF  C9,D8
18E0:  MOVFF  C8,D7
18E4:  MOVFF  03,DE
18E8:  MOVFF  02,DD
18EC:  MOVFF  01,DC
18F0:  MOVFF  00,DB
18F4:  CALL   10C4
18F8:  MOVFF  03,CB
18FC:  MOVFF  02,CA
1900:  MOVFF  01,C9
1904:  MOVFF  00,C8
....................  
....................  if (s) 
1908:  BTFSS  xD2.0
190A:  BRA    1912
....................   res = -res; 
190C:  MOVF   xCD,W
190E:  XORLW  80
1910:  MOVWF  xCD
....................  
....................  if (y != 0) 
1912:  MOVFF  CB,D6
1916:  MOVFF  CA,D5
191A:  MOVFF  C9,D4
191E:  MOVFF  C8,D3
1922:  CLRF   xDA
1924:  CLRF   xD9
1926:  CLRF   xD8
1928:  CLRF   xD7
192A:  CALL   104E
192E:  BZ    19A0
....................  { 
....................   if (s == 1 && n == 0) 
1930:  BTFSS  xD2.0
1932:  BRA    1968
1934:  MOVF   xC7,F
1936:  BNZ   1968
....................    res -= 1.0; 
1938:  BSF    FD8.1
193A:  MOVFF  CF,DA
193E:  MOVFF  CE,D9
1942:  MOVFF  CD,D8
1946:  MOVFF  CC,D7
194A:  CLRF   xDE
194C:  CLRF   xDD
194E:  CLRF   xDC
1950:  MOVLW  7F
1952:  MOVWF  xDB
1954:  CALL   10C4
1958:  MOVFF  03,CF
195C:  MOVFF  02,CE
1960:  MOVFF  01,CD
1964:  MOVFF  00,CC
....................  
....................   if (s == 0 && n == 1) 
1968:  BTFSC  xD2.0
196A:  BRA    19A0
196C:  DECFSZ xC7,W
196E:  BRA    19A0
....................    res += 1.0; 
1970:  BCF    FD8.1
1972:  MOVFF  CF,DA
1976:  MOVFF  CE,D9
197A:  MOVFF  CD,D8
197E:  MOVFF  CC,D7
1982:  CLRF   xDE
1984:  CLRF   xDD
1986:  CLRF   xDC
1988:  MOVLW  7F
198A:  MOVWF  xDB
198C:  CALL   10C4
1990:  MOVFF  03,CF
1994:  MOVFF  02,CE
1998:  MOVFF  01,CD
199C:  MOVFF  00,CC
....................  } 
....................  if (x == 0) 
19A0:  MOVFF  C6,D6
19A4:  MOVFF  C5,D5
19A8:  MOVFF  C4,D4
19AC:  MOVFF  C3,D3
19B0:  CLRF   xDA
19B2:  CLRF   xD9
19B4:  CLRF   xD8
19B6:  CLRF   xD7
19B8:  CALL   104E
19BC:  BNZ   19C6
....................     res = 0; 
19BE:  CLRF   xCF
19C0:  CLRF   xCE
19C2:  CLRF   xCD
19C4:  CLRF   xCC
....................  
....................  return (res); 
19C6:  MOVFF  CC,00
19CA:  MOVFF  CD,01
19CE:  MOVFF  CE,02
19D2:  MOVFF  CF,03
.................... } 
19D6:  GOTO   19EE (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
19DA:  MOVFF  C2,C6
19DE:  MOVFF  C1,C5
19E2:  MOVFF  C0,C4
19E6:  MOVFF  BF,C3
19EA:  CLRF   xC7
19EC:  BRA    16AA
.................... } 
19EE:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RESET         input(PIN_A2) 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_on          output_bit(PIN_D3,1) 
.................... #define   Motor_off         output_bit(PIN_D3,0) 
.................... #define   Alarma_on         output_bit(PIN_D0,1) 
.................... #define   Alarma_off        output_bit(PIN_D0,0) 
.................... #define   Pantalla_on       output_bit(PIN_A3,1) 
.................... #define   Pantalla_off      output_bit(PIN_A3,0) 
....................  
.................... signed int8 Menu=100, n_opcionH=8,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... signed int8 Entero=0,tmp=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... signed int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0,estadopantalla=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 r=0,q=0,i=0,G_l=0,G_h=0,flancoreset=0; 
.................... float setpoint=0.0,Temporal=0.0,V1=0.0,Presion=0.0,G=0.0,CaidaPresion=0.0,Saturacion=0.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,G16=0,tiempos3=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1366:  RLCF   xC4,W
1368:  MOVWF  00
136A:  RLCF   00,F
136C:  MOVLW  FC
136E:  ANDWF  00,F
1370:  MOVFF  00,01
1374:  MOVF   FC2,W
1376:  ANDLW  C3
1378:  IORWF  00,W
137A:  MOVWF  FC2
137C:  MOVLW  0A
137E:  MOVWF  xD6
1380:  CALL   08CE
1384:  BSF    FC2.1
1386:  BTFSC  FC2.1
1388:  BRA    1386
138A:  MOVFF  FC4,03
138E:  MOVFF  FC3,D7
1392:  MOVFF  FC4,D8
1396:  CALL   0A78
139A:  MOVFF  03,C8
139E:  MOVFF  02,C7
13A2:  MOVFF  01,C6
13A6:  MOVFF  00,C5
13AA:  MOVFF  C5,00
13AE:  MOVFF  C6,01
13B2:  MOVFF  C7,02
13B6:  MOVFF  C8,03
.................... } 
13BA:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0AAE:  MOVF   xBF,F
0AB0:  BNZ   0AB8
....................    { 
....................       Pantalla_off; 
0AB2:  BCF    F89.3
0AB4:  BCF    F92.3
....................    } 
....................    else 
0AB6:  BRA    0ABC
....................    { 
....................       Pantalla_on; 
0AB8:  BSF    F89.3
0ABA:  BCF    F92.3
....................    } 
.................... } 
0ABC:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1516:  CLRF   xC3
1518:  CLRF   xC2
151A:  CLRF   xC1
151C:  CLRF   xC0
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
151E:  CLRF   xC4
1520:  RCALL  1366
1522:  MOVFF  03,53
1526:  MOVFF  02,52
152A:  MOVFF  01,51
152E:  MOVFF  00,50
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1532:  MOVFF  53,D6
1536:  MOVFF  52,D5
153A:  MOVFF  51,D4
153E:  MOVFF  50,D3
1542:  MOVFF  5B,DA
1546:  MOVFF  5A,D9
154A:  MOVFF  59,D8
154E:  MOVFF  58,D7
1552:  RCALL  13BC
1554:  MOVFF  00,C4
1558:  MOVFF  01,C5
155C:  MOVFF  02,C6
1560:  MOVFF  03,C7
1564:  BSF    FD8.1
1566:  MOVFF  03,DA
156A:  MOVFF  02,D9
156E:  MOVFF  01,D8
1572:  MOVFF  00,D7
1576:  CLRF   xDE
1578:  CLRF   xDD
157A:  CLRF   xDC
157C:  MOVLW  7F
157E:  MOVWF  xDB
1580:  RCALL  10C4
1582:  MOVFF  03,57
1586:  MOVFF  02,56
158A:  MOVFF  01,55
158E:  MOVFF  00,54
....................     
....................    if(Presion<0.0) 
1592:  MOVFF  57,D6
1596:  MOVFF  56,D5
159A:  MOVFF  55,D4
159E:  MOVFF  54,D3
15A2:  CLRF   xDA
15A4:  CLRF   xD9
15A6:  CLRF   xD8
15A8:  CLRF   xD7
15AA:  RCALL  104E
15AC:  BNC   15B6
....................    { 
....................       Presion=0.0; 
15AE:  CLRF   57
15B0:  CLRF   56
15B2:  CLRF   55
15B4:  CLRF   54
....................    } 
....................  
....................    if(r>media-1) 
15B6:  MOVLW  01
15B8:  SUBWF  xBF,W
15BA:  SUBWF  42,W
15BC:  BZ    15C2
15BE:  BNC   15C2
....................    {r=0;} 
15C0:  CLRF   42
....................    PromPresion[r]=Presion;r++; 
15C2:  MOVF   42,W
15C4:  MULLW  04
15C6:  MOVF   FF3,W
15C8:  CLRF   03
15CA:  ADDLW  6F
15CC:  MOVWF  FE9
15CE:  MOVLW  00
15D0:  ADDWFC 03,W
15D2:  MOVWF  FEA
15D4:  MOVFF  54,FEF
15D8:  MOVFF  55,FEC
15DC:  MOVFF  56,FEC
15E0:  MOVFF  57,FEC
15E4:  INCF   42,F
....................           
....................    for(q=0;q<=(media-1);q++) 
15E6:  CLRF   43
15E8:  MOVLW  01
15EA:  SUBWF  xBF,W
15EC:  SUBWF  43,W
15EE:  BZ    15F2
15F0:  BC    165C
....................    { 
....................       promediopresion+=PromPresion[q]; 
15F2:  MOVF   43,W
15F4:  MULLW  04
15F6:  MOVF   FF3,W
15F8:  CLRF   03
15FA:  ADDLW  6F
15FC:  MOVWF  FE9
15FE:  MOVLW  00
1600:  ADDWFC 03,W
1602:  MOVWF  FEA
1604:  MOVFF  FEF,00
1608:  MOVFF  FEC,01
160C:  MOVFF  FEC,02
1610:  MOVFF  FEC,03
1614:  MOVFF  FEA,C5
1618:  MOVFF  FE9,C4
161C:  BCF    FD8.1
161E:  MOVFF  C3,DA
1622:  MOVFF  C2,D9
1626:  MOVFF  C1,D8
162A:  MOVFF  C0,D7
162E:  MOVFF  03,DE
1632:  MOVFF  02,DD
1636:  MOVFF  01,DC
163A:  MOVFF  00,DB
163E:  RCALL  10C4
1640:  MOVFF  C5,FEA
1644:  MOVFF  C4,FE9
1648:  MOVFF  03,C3
164C:  MOVFF  02,C2
1650:  MOVFF  01,C1
1654:  MOVFF  00,C0
....................    }  
1658:  INCF   43,F
165A:  BRA    15E8
....................    promediopresion=promediopresion/media;    
165C:  CLRF   xD8
165E:  MOVFF  BF,D7
1662:  CALL   0A78
1666:  MOVFF  C3,D6
166A:  MOVFF  C2,D5
166E:  MOVFF  C1,D4
1672:  MOVFF  C0,D3
1676:  MOVFF  03,DA
167A:  MOVFF  02,D9
167E:  MOVFF  01,D8
1682:  MOVFF  00,D7
1686:  RCALL  13BC
1688:  MOVFF  03,C3
168C:  MOVFF  02,C2
1690:  MOVFF  01,C1
1694:  MOVFF  00,C0
....................     
....................    return promediopresion; 
1698:  MOVFF  C0,00
169C:  MOVFF  C1,01
16A0:  MOVFF  C2,02
16A4:  MOVFF  C3,03
.................... } 
16A8:  RETLW  00
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   x65,F
00BE:  BTFSC  FD8.2
00C0:  INCF   x66,F
....................    tiempos2++; 
00C2:  INCF   x69,F
00C4:  BTFSC  FD8.2
00C6:  INCF   x6A,F
....................     
....................    if(flancoreset==1){ 
00C8:  DECFSZ 47,W
00CA:  BRA    00D2
....................       tiempos3++; 
00CC:  INCF   x6D,F
00CE:  BTFSC  FD8.2
00D0:  INCF   x6E,F
....................    } 
....................      
....................    if(tiempos2>=20) 
00D2:  MOVF   x6A,F
00D4:  BNZ   00DC
00D6:  MOVF   x69,W
00D8:  SUBLW  13
00DA:  BC    00E2
....................    {tiempos2=0;Lectura2=1;} 
00DC:  CLRF   x6A
00DE:  CLRF   x69
00E0:  BSF    35.6
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00E2:  MOVF   x66,F
00E4:  BNZ   00EC
00E6:  MOVF   x65,W
00E8:  SUBLW  C7
00EA:  BC    0176
....................    { 
....................       tiempos=0;tiemporeset++; 
00EC:  CLRF   x66
00EE:  CLRF   x65
00F0:  INCF   2D,F
....................       Lectura=1; 
00F2:  BSF    35.5
....................           
....................       if(estadomv==1 && flag_filtro==1) 
00F4:  BTFSS  34.1
00F6:  BRA    011A
00F8:  BTFSS  35.1
00FA:  BRA    011A
....................       {   
....................          segundos++; 
00FC:  INCF   2A,F
....................          if(segundos>=60) 
00FE:  BTFSC  2A.7
0100:  BRA    010C
0102:  MOVF   2A,W
0104:  SUBLW  3B
0106:  BC    010C
....................          { 
....................             segundos=0;minutos++; 
0108:  CLRF   2A
010A:  INCF   2B,F
....................          } 
....................           
....................          if(minutos>=60) 
010C:  BTFSC  2B.7
010E:  BRA    011A
0110:  MOVF   2B,W
0112:  SUBLW  3B
0114:  BC    011A
....................          { 
....................             minutos=0;horas++; 
0116:  CLRF   2B
0118:  INCF   2C,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1) 
011A:  BTFSS  x64.1
011C:  BRA    0150
....................       { 
....................          if(purga_segundos>0) 
011E:  BTFSC  2E.7
0120:  BRA    012C
0122:  MOVF   2E,W
0124:  SUBLW  00
0126:  BC    012C
....................          { 
....................             purga_segundos--; 
0128:  DECF   2E,F
....................          } 
....................          else 
012A:  BRA    0150
....................          { 
....................             if(purga_minutos>0) 
012C:  BTFSC  22.7
012E:  BRA    013E
0130:  MOVF   22,W
0132:  SUBLW  00
0134:  BC    013E
....................             { 
....................                purga_minutos--; 
0136:  DECF   22,F
....................                purga_segundos=59; 
0138:  MOVLW  3B
013A:  MOVWF  2E
....................             } 
....................             else 
013C:  BRA    0150
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20; 
013E:  BCF    x64.1
0140:  BSF    F8C.3
0142:  BCF    F95.3
0144:  MOVLW  14
0146:  MOVWF  17
....................                Luz_Blanca_on; 
0148:  BSF    F8C.2
014A:  BCF    F95.2
....................                estadomv=1; 
014C:  BSF    34.1
....................                estadofl=1; 
014E:  BSF    34.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
0150:  BTFSS  x64.2
0152:  BRA    0176
....................       { 
....................          if(ppurga_segundos>0) 
0154:  BTFSC  30.7
0156:  BRA    0162
0158:  MOVF   30,W
015A:  SUBLW  00
015C:  BC    0162
....................          { 
....................             ppurga_segundos--; 
015E:  DECF   30,F
....................          } 
....................          else 
0160:  BRA    0176
....................          { 
....................             if(ppurga_minutos>0) 
0162:  BTFSC  32.7
0164:  BRA    0174
0166:  MOVF   32,W
0168:  SUBLW  00
016A:  BC    0174
....................             { 
....................                ppurga_minutos--; 
016C:  DECF   32,F
....................                ppurga_segundos=59; 
016E:  MOVLW  3B
0170:  MOVWF  30
....................             } 
....................             else 
0172:  BRA    0176
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0174:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0176:  BCF    F9E.0
0178:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0BEC:  DECFSZ xC0,W
0BEE:  BRA    0C20
....................    {if(estadoalarma==0) 
0BF0:  BTFSC  34.2
0BF2:  BRA    0C08
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0BF4:  MOVLW  02
0BF6:  MOVWF  xD1
0BF8:  MOVFF  C1,D2
0BFC:  RCALL  09B8
0BFE:  MOVLW  7C
0C00:  MOVWF  FF6
0C02:  MOVLW  01
0C04:  MOVWF  FF7
0C06:  RCALL  0ABE
....................    if(estadoalarma==1) 
0C08:  BTFSS  34.2
0C0A:  BRA    0C20
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0C0C:  MOVLW  02
0C0E:  MOVWF  xD1
0C10:  MOVFF  C1,D2
0C14:  RCALL  09B8
0C16:  MOVLW  90
0C18:  MOVWF  FF6
0C1A:  MOVLW  01
0C1C:  MOVWF  FF7
0C1E:  RCALL  0ABE
....................    } 
....................     
....................    if(x==2) 
0C20:  MOVF   xC0,W
0C22:  SUBLW  02
0C24:  BNZ   0C3A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
0C26:  MOVLW  02
0C28:  MOVWF  xD1
0C2A:  MOVFF  C1,D2
0C2E:  RCALL  09B8
0C30:  MOVLW  A4
0C32:  MOVWF  FF6
0C34:  MOVLW  01
0C36:  MOVWF  FF7
0C38:  RCALL  0ABE
....................     
....................    if(x==3) 
0C3A:  MOVF   xC0,W
0C3C:  SUBLW  03
0C3E:  BNZ   0C54
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
0C40:  MOVLW  02
0C42:  MOVWF  xD1
0C44:  MOVFF  C1,D2
0C48:  RCALL  09B8
0C4A:  MOVLW  B8
0C4C:  MOVWF  FF6
0C4E:  MOVLW  01
0C50:  MOVWF  FF7
0C52:  RCALL  0ABE
....................     
....................    if(x==4) 
0C54:  MOVF   xC0,W
0C56:  SUBLW  04
0C58:  BNZ   0C6E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0C5A:  MOVLW  02
0C5C:  MOVWF  xD1
0C5E:  MOVFF  C1,D2
0C62:  RCALL  09B8
0C64:  MOVLW  CC
0C66:  MOVWF  FF6
0C68:  MOVLW  01
0C6A:  MOVWF  FF7
0C6C:  RCALL  0ABE
....................        
....................    if(x==5) 
0C6E:  MOVF   xC0,W
0C70:  SUBLW  05
0C72:  BNZ   0C88
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
0C74:  MOVLW  02
0C76:  MOVWF  xD1
0C78:  MOVFF  C1,D2
0C7C:  RCALL  09B8
0C7E:  MOVLW  E0
0C80:  MOVWF  FF6
0C82:  MOVLW  01
0C84:  MOVWF  FF7
0C86:  RCALL  0ABE
....................     
....................    if(x==6) 
0C88:  MOVF   xC0,W
0C8A:  SUBLW  06
0C8C:  BNZ   0CA2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
0C8E:  MOVLW  02
0C90:  MOVWF  xD1
0C92:  MOVFF  C1,D2
0C96:  RCALL  09B8
0C98:  MOVLW  F4
0C9A:  MOVWF  FF6
0C9C:  MOVLW  01
0C9E:  MOVWF  FF7
0CA0:  RCALL  0ABE
....................     
....................    if(x==7) 
0CA2:  MOVF   xC0,W
0CA4:  SUBLW  07
0CA6:  BNZ   0CBC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0CA8:  MOVLW  02
0CAA:  MOVWF  xD1
0CAC:  MOVFF  C1,D2
0CB0:  RCALL  09B8
0CB2:  MOVLW  08
0CB4:  MOVWF  FF6
0CB6:  MOVLW  02
0CB8:  MOVWF  FF7
0CBA:  RCALL  0ABE
.................... } 
0CBC:  RETLW  00
....................  
....................  
.................... void main () 
.................... { 
*
1A38:  CLRF   FF8
1A3A:  BCF    FD0.7
1A3C:  BSF    07.7
1A3E:  CLRF   FEA
1A40:  CLRF   FE9
1A42:  MOVLW  64
1A44:  MOVWF  17
1A46:  MOVLW  08
1A48:  MOVWF  18
1A4A:  MOVLW  02
1A4C:  MOVWF  19
1A4E:  MOVLW  0B
1A50:  MOVWF  1A
1A52:  MOVLW  02
1A54:  MOVWF  1B
1A56:  MOVLW  03
1A58:  MOVWF  1C
1A5A:  MOVLW  02
1A5C:  MOVWF  1D
1A5E:  MOVWF  1E
1A60:  MOVLW  04
1A62:  MOVWF  1F
1A64:  MOVLW  0A
1A66:  MOVWF  20
1A68:  MOVLW  01
1A6A:  MOVWF  21
1A6C:  CLRF   22
1A6E:  CLRF   23
1A70:  CLRF   24
1A72:  MOVLW  0A
1A74:  MOVWF  25
1A76:  MOVWF  26
1A78:  MOVWF  27
1A7A:  MOVWF  28
1A7C:  CLRF   29
1A7E:  CLRF   2A
1A80:  CLRF   2B
1A82:  CLRF   2C
1A84:  CLRF   2D
1A86:  CLRF   2E
1A88:  CLRF   2F
1A8A:  CLRF   30
1A8C:  CLRF   31
1A8E:  CLRF   32
1A90:  CLRF   33
1A92:  BCF    34.0
1A94:  BCF    34.1
1A96:  BCF    34.2
1A98:  BCF    34.3
1A9A:  BCF    34.4
1A9C:  BCF    34.5
1A9E:  BCF    34.6
1AA0:  BCF    34.7
1AA2:  BCF    35.0
1AA4:  BCF    35.1
1AA6:  BCF    35.2
1AA8:  CLRF   36
1AAA:  CLRF   42
1AAC:  CLRF   43
1AAE:  CLRF   44
1AB0:  CLRF   45
1AB2:  CLRF   46
1AB4:  CLRF   47
1AB6:  CLRF   4B
1AB8:  CLRF   4A
1ABA:  CLRF   49
1ABC:  CLRF   48
1ABE:  CLRF   4F
1AC0:  CLRF   4E
1AC2:  CLRF   4D
1AC4:  CLRF   4C
1AC6:  CLRF   53
1AC8:  CLRF   52
1ACA:  CLRF   51
1ACC:  CLRF   50
1ACE:  CLRF   57
1AD0:  CLRF   56
1AD2:  CLRF   55
1AD4:  CLRF   54
1AD6:  CLRF   5B
1AD8:  CLRF   5A
1ADA:  CLRF   59
1ADC:  CLRF   58
1ADE:  CLRF   5F
1AE0:  CLRF   5E
1AE2:  CLRF   5D
1AE4:  CLRF   5C
1AE6:  CLRF   x63
1AE8:  CLRF   x62
1AEA:  CLRF   x61
1AEC:  CLRF   x60
1AEE:  BCF    35.4
1AF0:  BCF    35.5
1AF2:  BCF    35.6
1AF4:  BCF    35.7
1AF6:  BCF    x64.0
1AF8:  BCF    x64.1
1AFA:  BCF    x64.2
1AFC:  CLRF   x66
1AFE:  CLRF   x65
1B00:  CLRF   x68
1B02:  CLRF   x67
1B04:  CLRF   x6A
1B06:  CLRF   x69
1B08:  CLRF   x6C
1B0A:  CLRF   x6B
1B0C:  CLRF   x6E
1B0E:  CLRF   x6D
1B10:  MOVF   FC1,W
1B12:  ANDLW  C0
1B14:  IORLW  0F
1B16:  MOVWF  FC1
1B18:  MOVLW  07
1B1A:  MOVWF  FB4
1B1C:  MOVLW  3E
1B1E:  MOVWF  37
1B20:  MOVLW  20
1B22:  MOVWF  38
1B24:  MOVLW  5E
1B26:  MOVWF  39
1B28:  CLRF   3A
1B2A:  CLRF   3B
1B2C:  CLRF   3C
1B2E:  CLRF   3D
1B30:  CLRF   3E
1B32:  CLRF   3F
1B34:  CLRF   40
1B36:  CLRF   41
1B38:  CLRF   x6F
1B3A:  CLRF   x70
1B3C:  CLRF   x71
1B3E:  CLRF   x72
1B40:  CLRF   x73
1B42:  CLRF   x74
1B44:  CLRF   x75
1B46:  CLRF   x76
1B48:  CLRF   x77
1B4A:  CLRF   x78
1B4C:  CLRF   x79
1B4E:  CLRF   x7A
1B50:  CLRF   x7B
1B52:  CLRF   x7C
1B54:  CLRF   x7D
1B56:  CLRF   x7E
1B58:  CLRF   x7F
1B5A:  CLRF   x80
1B5C:  CLRF   x81
1B5E:  CLRF   x82
1B60:  CLRF   x83
1B62:  CLRF   x84
1B64:  CLRF   x85
1B66:  CLRF   x86
1B68:  CLRF   x87
1B6A:  CLRF   x88
1B6C:  CLRF   x89
1B6E:  CLRF   x8A
1B70:  CLRF   x8B
1B72:  CLRF   x8C
1B74:  CLRF   x8D
1B76:  CLRF   x8E
1B78:  CLRF   x8F
1B7A:  CLRF   x90
1B7C:  CLRF   x91
1B7E:  CLRF   x92
1B80:  CLRF   x93
1B82:  CLRF   x94
1B84:  CLRF   x95
1B86:  CLRF   x96
1B88:  CLRF   x97
1B8A:  CLRF   x98
1B8C:  CLRF   x99
1B8E:  CLRF   x9A
1B90:  CLRF   x9B
1B92:  CLRF   x9C
1B94:  CLRF   x9D
1B96:  CLRF   x9E
1B98:  CLRF   x9F
1B9A:  CLRF   xA0
1B9C:  CLRF   xA1
1B9E:  CLRF   xA2
1BA0:  CLRF   xA3
1BA2:  CLRF   xA4
1BA4:  CLRF   xA5
1BA6:  CLRF   xA6
1BA8:  CLRF   xA7
1BAA:  CLRF   xA8
1BAC:  CLRF   xA9
1BAE:  CLRF   xAA
1BB0:  CLRF   xAB
1BB2:  CLRF   xAC
1BB4:  CLRF   xAD
1BB6:  CLRF   xAE
1BB8:  CLRF   xAF
1BBA:  CLRF   xB0
1BBC:  CLRF   xB1
1BBE:  CLRF   xB2
1BC0:  CLRF   xB3
1BC2:  CLRF   xB4
1BC4:  CLRF   xB5
1BC6:  CLRF   xB6
1BC8:  CLRF   xB7
1BCA:  CLRF   xB8
1BCC:  CLRF   xB9
1BCE:  CLRF   xBA
1BD0:  CLRF   xBB
1BD2:  CLRF   xBC
1BD4:  CLRF   xBD
1BD6:  CLRF   xBE
....................    setup_adc_ports(AN0_TO_AN1); 
1BD8:  MOVF   FC1,W
1BDA:  ANDLW  C0
1BDC:  IORLW  0D
1BDE:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1BE0:  BCF    FC0.0
1BE2:  BSF    FC0.1
1BE4:  BCF    FC0.2
1BE6:  BSF    FC0.7
1BE8:  BSF    FC2.0
....................    output_d(0);  
1BEA:  CLRF   F95
1BEC:  CLRF   F8C
....................    ModoSleep=1; 
1BEE:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1BF0:  MOVLW  85
1BF2:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1BF4:  BSF    F9D.0
....................    enable_interrupts(GLOBAL); 
1BF6:  MOVLW  C0
1BF8:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
1BFA:  CLRF   FBE
....................    lcd_init(); 
1BFC:  CALL   0960
....................    printf(lcd_putc,"\f"); 
1C00:  MOVLW  0C
1C02:  MOVWF  xD0
1C04:  CALL   0A1A
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1C08:  MOVFF  FF2,BF
1C0C:  BCF    FF2.7
1C0E:  CLRF   FA9
1C10:  BCF    FA6.6
1C12:  BCF    FA6.7
1C14:  BSF    FA6.0
1C16:  MOVF   FA8,W
1C18:  BTFSC  xBF.7
1C1A:  BSF    FF2.7
1C1C:  MOVWF  3E
1C1E:  MOVLW  14
1C20:  MOVWF  xD6
1C22:  CALL   08CE
1C26:  MOVFF  FF2,BF
1C2A:  BCF    FF2.7
1C2C:  MOVLW  01
1C2E:  MOVWF  FA9
1C30:  BCF    FA6.6
1C32:  BCF    FA6.7
1C34:  BSF    FA6.0
1C36:  MOVF   FA8,W
1C38:  BTFSC  xBF.7
1C3A:  BSF    FF2.7
1C3C:  MOVWF  3F
1C3E:  MOVLW  14
1C40:  MOVWF  xD6
1C42:  CALL   08CE
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1C46:  MOVFF  FF2,BF
1C4A:  BCF    FF2.7
1C4C:  MOVLW  02
1C4E:  MOVWF  FA9
1C50:  BCF    FA6.6
1C52:  BCF    FA6.7
1C54:  BSF    FA6.0
1C56:  MOVF   FA8,W
1C58:  BTFSC  xBF.7
1C5A:  BSF    FF2.7
1C5C:  MOVWF  40
1C5E:  MOVLW  14
1C60:  MOVWF  xD6
1C62:  CALL   08CE
1C66:  MOVFF  FF2,BF
1C6A:  BCF    FF2.7
1C6C:  MOVLW  03
1C6E:  MOVWF  FA9
1C70:  BCF    FA6.6
1C72:  BCF    FA6.7
1C74:  BSF    FA6.0
1C76:  MOVF   FA8,W
1C78:  BTFSC  xBF.7
1C7A:  BSF    FF2.7
1C7C:  MOVWF  41
1C7E:  MOVLW  14
1C80:  MOVWF  xD6
1C82:  CALL   08CE
....................    estadoalarma=read_eeprom(5); 
1C86:  MOVFF  FF2,BF
1C8A:  BCF    FF2.7
1C8C:  MOVLW  05
1C8E:  MOVWF  FA9
1C90:  BCF    FA6.6
1C92:  BCF    FA6.7
1C94:  BSF    FA6.0
1C96:  MOVF   FA8,W
1C98:  BTFSC  xBF.7
1C9A:  BSF    FF2.7
1C9C:  MOVWF  01
1C9E:  BCF    34.2
1CA0:  BTFSC  01.0
1CA2:  BSF    34.2
....................    delay_ms(20); 
1CA4:  MOVLW  14
1CA6:  MOVWF  xD6
1CA8:  CALL   08CE
....................    Manual=read_eeprom(10); 
1CAC:  MOVFF  FF2,BF
1CB0:  BCF    FF2.7
1CB2:  MOVLW  0A
1CB4:  MOVWF  FA9
1CB6:  BCF    FA6.6
1CB8:  BCF    FA6.7
1CBA:  BSF    FA6.0
1CBC:  MOVF   FA8,W
1CBE:  BTFSC  xBF.7
1CC0:  BSF    FF2.7
1CC2:  MOVWF  27
....................    delay_ms(20); 
1CC4:  MOVLW  14
1CC6:  MOVWF  xD6
1CC8:  CALL   08CE
....................    Automa=read_eeprom(11); 
1CCC:  MOVFF  FF2,BF
1CD0:  BCF    FF2.7
1CD2:  MOVLW  0B
1CD4:  MOVWF  FA9
1CD6:  BCF    FA6.6
1CD8:  BCF    FA6.7
1CDA:  BSF    FA6.0
1CDC:  MOVF   FA8,W
1CDE:  BTFSC  xBF.7
1CE0:  BSF    FF2.7
1CE2:  MOVWF  26
....................    delay_ms(20); 
1CE4:  MOVLW  14
1CE6:  MOVWF  xD6
1CE8:  CALL   08CE
....................    Semi=read_eeprom(12); 
1CEC:  MOVFF  FF2,BF
1CF0:  BCF    FF2.7
1CF2:  MOVLW  0C
1CF4:  MOVWF  FA9
1CF6:  BCF    FA6.6
1CF8:  BCF    FA6.7
1CFA:  BSF    FA6.0
1CFC:  MOVF   FA8,W
1CFE:  BTFSC  xBF.7
1D00:  BSF    FF2.7
1D02:  MOVWF  28
....................    delay_ms(20); 
1D04:  MOVLW  14
1D06:  MOVWF  xD6
1D08:  CALL   08CE
....................    ValorSemi=read_eeprom(13); 
1D0C:  MOVFF  FF2,BF
1D10:  BCF    FF2.7
1D12:  MOVLW  0D
1D14:  MOVWF  FA9
1D16:  BCF    FA6.6
1D18:  BCF    FA6.7
1D1A:  BSF    FA6.0
1D1C:  MOVF   FA8,W
1D1E:  BTFSC  xBF.7
1D20:  BSF    FF2.7
1D22:  MOVWF  29
....................    delay_ms(20); 
1D24:  MOVLW  14
1D26:  MOVWF  xD6
1D28:  CALL   08CE
....................    tmp=ValorSemi; 
1D2C:  MOVFF  29,25
....................  
....................    purga_minutos=read_eeprom(20); 
1D30:  MOVFF  FF2,BF
1D34:  BCF    FF2.7
1D36:  MOVLW  14
1D38:  MOVWF  FA9
1D3A:  BCF    FA6.6
1D3C:  BCF    FA6.7
1D3E:  BSF    FA6.0
1D40:  MOVF   FA8,W
1D42:  BTFSC  xBF.7
1D44:  BSF    FF2.7
1D46:  MOVWF  22
....................    delay_ms(20); 
1D48:  MOVLW  14
1D4A:  MOVWF  xD6
1D4C:  CALL   08CE
....................    purga_segundos=read_eeprom(21); 
1D50:  MOVFF  FF2,BF
1D54:  BCF    FF2.7
1D56:  MOVLW  15
1D58:  MOVWF  FA9
1D5A:  BCF    FA6.6
1D5C:  BCF    FA6.7
1D5E:  BSF    FA6.0
1D60:  MOVF   FA8,W
1D62:  BTFSC  xBF.7
1D64:  BSF    FF2.7
1D66:  MOVWF  2E
....................    delay_ms(20); 
1D68:  MOVLW  14
1D6A:  MOVWF  xD6
1D6C:  CALL   08CE
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
1D70:  MOVFF  22,23
1D74:  MOVFF  2E,2F
....................    ppurga_minutos=read_eeprom(22); 
1D78:  MOVFF  FF2,BF
1D7C:  BCF    FF2.7
1D7E:  MOVLW  16
1D80:  MOVWF  FA9
1D82:  BCF    FA6.6
1D84:  BCF    FA6.7
1D86:  BSF    FA6.0
1D88:  MOVF   FA8,W
1D8A:  BTFSC  xBF.7
1D8C:  BSF    FF2.7
1D8E:  MOVWF  32
....................    delay_ms(20); 
1D90:  MOVLW  14
1D92:  MOVWF  xD6
1D94:  CALL   08CE
....................    ppurga_segundos=read_eeprom(23); 
1D98:  MOVFF  FF2,BF
1D9C:  BCF    FF2.7
1D9E:  MOVLW  17
1DA0:  MOVWF  FA9
1DA2:  BCF    FA6.6
1DA4:  BCF    FA6.7
1DA6:  BSF    FA6.0
1DA8:  MOVF   FA8,W
1DAA:  BTFSC  xBF.7
1DAC:  BSF    FF2.7
1DAE:  MOVWF  30
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
1DB0:  MOVFF  32,33
1DB4:  MOVFF  30,31
....................           
....................    setpoint=read_eeprom(40); 
1DB8:  MOVFF  FF2,BF
1DBC:  BCF    FF2.7
1DBE:  MOVLW  28
1DC0:  MOVWF  FA9
1DC2:  BCF    FA6.6
1DC4:  BCF    FA6.7
1DC6:  BSF    FA6.0
1DC8:  MOVF   FA8,W
1DCA:  BTFSC  xBF.7
1DCC:  BSF    FF2.7
1DCE:  CLRF   xD8
1DD0:  MOVWF  xD7
1DD2:  CALL   0A78
1DD6:  MOVFF  03,4B
1DDA:  MOVFF  02,4A
1DDE:  MOVFF  01,49
1DE2:  MOVFF  00,48
....................    delay_ms(20); 
1DE6:  MOVLW  14
1DE8:  MOVWF  xD6
1DEA:  CALL   08CE
....................    segundos=read_eeprom(70); 
1DEE:  MOVFF  FF2,BF
1DF2:  BCF    FF2.7
1DF4:  MOVLW  46
1DF6:  MOVWF  FA9
1DF8:  BCF    FA6.6
1DFA:  BCF    FA6.7
1DFC:  BSF    FA6.0
1DFE:  MOVF   FA8,W
1E00:  BTFSC  xBF.7
1E02:  BSF    FF2.7
1E04:  MOVWF  2A
....................    delay_ms(20); 
1E06:  MOVLW  14
1E08:  MOVWF  xD6
1E0A:  CALL   08CE
....................    minutos=read_eeprom(71); 
1E0E:  MOVFF  FF2,BF
1E12:  BCF    FF2.7
1E14:  MOVLW  47
1E16:  MOVWF  FA9
1E18:  BCF    FA6.6
1E1A:  BCF    FA6.7
1E1C:  BSF    FA6.0
1E1E:  MOVF   FA8,W
1E20:  BTFSC  xBF.7
1E22:  BSF    FF2.7
1E24:  MOVWF  2B
....................    delay_ms(20); 
1E26:  MOVLW  14
1E28:  MOVWF  xD6
1E2A:  CALL   08CE
....................    horas=read_eeprom(72); 
1E2E:  MOVFF  FF2,BF
1E32:  BCF    FF2.7
1E34:  MOVLW  48
1E36:  MOVWF  FA9
1E38:  BCF    FA6.6
1E3A:  BCF    FA6.7
1E3C:  BSF    FA6.0
1E3E:  MOVF   FA8,W
1E40:  BTFSC  xBF.7
1E42:  BSF    FF2.7
1E44:  MOVWF  2C
....................    delay_ms(20); 
1E46:  MOVLW  14
1E48:  MOVWF  xD6
1E4A:  CALL   08CE
....................    flag_filtro=read_eeprom(73); 
1E4E:  MOVFF  FF2,BF
1E52:  BCF    FF2.7
1E54:  MOVLW  49
1E56:  MOVWF  FA9
1E58:  BCF    FA6.6
1E5A:  BCF    FA6.7
1E5C:  BSF    FA6.0
1E5E:  MOVF   FA8,W
1E60:  BTFSC  xBF.7
1E62:  BSF    FF2.7
1E64:  MOVWF  01
1E66:  BCF    35.1
1E68:  BTFSC  01.0
1E6A:  BSF    35.1
....................    G_l=read_eeprom(60); 
1E6C:  MOVFF  FF2,BF
1E70:  BCF    FF2.7
1E72:  MOVLW  3C
1E74:  MOVWF  FA9
1E76:  BCF    FA6.6
1E78:  BCF    FA6.7
1E7A:  BSF    FA6.0
1E7C:  MOVF   FA8,W
1E7E:  BTFSC  xBF.7
1E80:  BSF    FF2.7
1E82:  MOVWF  45
....................    G_h=read_eeprom(61); 
1E84:  MOVFF  FF2,BF
1E88:  BCF    FF2.7
1E8A:  MOVLW  3D
1E8C:  MOVWF  FA9
1E8E:  BCF    FA6.6
1E90:  BCF    FA6.7
1E92:  BSF    FA6.0
1E94:  MOVF   FA8,W
1E96:  BTFSC  xBF.7
1E98:  BSF    FF2.7
1E9A:  MOVWF  46
....................    G16=make16(G_h,G_l); 
1E9C:  MOVFF  46,6C
1EA0:  MOVFF  45,6B
....................    G=G16; 
1EA4:  MOVFF  6C,D8
1EA8:  MOVFF  6B,D7
1EAC:  CALL   0A78
1EB0:  MOVFF  03,5B
1EB4:  MOVFF  02,5A
1EB8:  MOVFF  01,59
1EBC:  MOVFF  00,58
....................    Menu=200; 
1EC0:  MOVLW  C8
1EC2:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
1EC4:  MOVF   17,W
1EC6:  SUBLW  C8
1EC8:  BNZ   1F7E
....................       if(inicio==0) 
1ECA:  BTFSC  35.4
1ECC:  BRA    1F7C
....................       { 
....................       delay_ms(500); 
1ECE:  MOVLW  02
1ED0:  MOVWF  xBF
1ED2:  MOVLW  FA
1ED4:  MOVWF  xD6
1ED6:  CALL   08CE
1EDA:  DECFSZ xBF,F
1EDC:  BRA    1ED2
....................          if(RIGHT) 
1EDE:  BSF    F96.1
1EE0:  BTFSS  F84.1
1EE2:  BRA    1F7C
....................          { 
....................             lcd_init(); 
1EE4:  CALL   0960
....................             intensidadpantalla(contraste); 
1EE8:  MOVFF  20,BF
1EEC:  CALL   0AAE
....................             lcd_gotoxy(1,1); 
1EF0:  MOVLW  01
1EF2:  MOVWF  xD1
1EF4:  MOVWF  xD2
1EF6:  CALL   09B8
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
1EFA:  MOVLW  1C
1EFC:  MOVWF  FF6
1EFE:  MOVLW  02
1F00:  MOVWF  FF7
1F02:  CALL   0ABE
....................             lcd_gotoxy(1,2); 
1F06:  MOVLW  01
1F08:  MOVWF  xD1
1F0A:  MOVLW  02
1F0C:  MOVWF  xD2
1F0E:  CALL   09B8
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1F12:  MOVLW  32
1F14:  MOVWF  FF6
1F16:  MOVLW  02
1F18:  MOVWF  FF7
1F1A:  CALL   0ABE
....................             lcd_gotoxy(1,3); 
1F1E:  MOVLW  01
1F20:  MOVWF  xD1
1F22:  MOVLW  03
1F24:  MOVWF  xD2
1F26:  CALL   09B8
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
1F2A:  MOVLW  48
1F2C:  MOVWF  FF6
1F2E:  MOVLW  02
1F30:  MOVWF  FF7
1F32:  CALL   0ABE
....................             lcd_gotoxy(1,4); 
1F36:  MOVLW  01
1F38:  MOVWF  xD1
1F3A:  MOVLW  04
1F3C:  MOVWF  xD2
1F3E:  CALL   09B8
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1F42:  MOVLW  5E
1F44:  MOVWF  FF6
1F46:  MOVLW  02
1F48:  MOVWF  FF7
1F4A:  CALL   0ABE
....................             delay_ms(2000); 
1F4E:  MOVLW  08
1F50:  MOVWF  xBF
1F52:  MOVLW  FA
1F54:  MOVWF  xD6
1F56:  CALL   08CE
1F5A:  DECFSZ xBF,F
1F5C:  BRA    1F52
....................             printf(lcd_putc,"\f"); 
1F5E:  MOVLW  0C
1F60:  MOVWF  xD0
1F62:  CALL   0A1A
....................             inicio=1; 
1F66:  BSF    35.4
....................             Menu=0; 
1F68:  CLRF   17
....................             ModoSleep=0; 
1F6A:  BCF    35.3
....................             delay_ms(500); 
1F6C:  MOVLW  02
1F6E:  MOVWF  xBF
1F70:  MOVLW  FA
1F72:  MOVWF  xD6
1F74:  CALL   08CE
1F78:  DECFSZ xBF,F
1F7A:  BRA    1F70
....................          } 
....................       } 
....................    } 
1F7C:  BRA    1EC4
....................     
....................    if(tiempos3>400){ 
1F7E:  MOVF   x6E,W
1F80:  SUBLW  00
1F82:  BC    1F98
1F84:  XORLW  FF
1F86:  BNZ   1F8E
1F88:  MOVF   x6D,W
1F8A:  SUBLW  90
1F8C:  BC    1F98
....................       printf(lcd_putc,"\f"); 
1F8E:  MOVLW  0C
1F90:  MOVWF  xD0
1F92:  CALL   0A1A
....................       reset_cpu(); 
1F96:  RESET
....................    } 
....................    if(!RESET){ 
1F98:  BSF    F92.2
1F9A:  BTFSC  F80.2
1F9C:  BRA    1FA8
....................       if(flancoreset==0) 
1F9E:  MOVF   47,F
1FA0:  BNZ   1FA6
....................          flancoreset=1; 
1FA2:  MOVLW  01
1FA4:  MOVWF  47
....................        
....................    } 
....................    else{ 
1FA6:  BRA    1FAE
....................       flancoreset=0; 
1FA8:  CLRF   47
....................       tiempos3=0; 
1FAA:  CLRF   x6E
1FAC:  CLRF   x6D
....................    } 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1FAE:  MOVF   17,F
1FB0:  BTFSS  FD8.2
1FB2:  BRA    239C
....................    flag_latencia=1;set_pwm1_duty(0); 
1FB4:  BSF    34.7
1FB6:  CLRF   FBE
....................       if(Latencia==1) 
1FB8:  BTFSS  35.0
1FBA:  BRA    1FC6
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1FBC:  MOVLW  0C
1FBE:  MOVWF  xD0
1FC0:  CALL   0A1A
1FC4:  RESET
....................          } 
....................    lcd_gotoxy(1,1); 
1FC6:  MOVLW  01
1FC8:  MOVWF  xD1
1FCA:  MOVWF  xD2
1FCC:  CALL   09B8
....................    printf(lcd_putc,"     Ingrese        "); 
1FD0:  MOVLW  74
1FD2:  MOVWF  FF6
1FD4:  MOVLW  02
1FD6:  MOVWF  FF7
1FD8:  CALL   0ABE
....................    lcd_gotoxy(1,2); 
1FDC:  MOVLW  01
1FDE:  MOVWF  xD1
1FE0:  MOVLW  02
1FE2:  MOVWF  xD2
1FE4:  CALL   09B8
....................    printf(lcd_putc,"    Contraseña      "); 
1FE8:  MOVLW  8A
1FEA:  MOVWF  FF6
1FEC:  MOVLW  02
1FEE:  MOVWF  FF7
1FF0:  CALL   0ABE
....................    lcd_gotoxy(1,3); 
1FF4:  MOVLW  01
1FF6:  MOVWF  xD1
1FF8:  MOVLW  03
1FFA:  MOVWF  xD2
1FFC:  CALL   09B8
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2000:  MOVLW  A0
2002:  MOVWF  FF6
2004:  MOVLW  02
2006:  MOVWF  FF7
2008:  MOVLW  0A
200A:  MOVWF  xC3
200C:  CALL   0ADE
2010:  MOVFF  3A,BF
2014:  MOVLW  1F
2016:  MOVWF  xC0
2018:  CALL   0B24
201C:  MOVFF  3B,BF
2020:  MOVLW  1F
2022:  MOVWF  xC0
2024:  CALL   0B24
2028:  MOVFF  3C,BF
202C:  MOVLW  1F
202E:  MOVWF  xC0
2030:  CALL   0B24
2034:  MOVFF  3D,BF
2038:  MOVLW  1F
203A:  MOVWF  xC0
203C:  CALL   0B24
2040:  MOVLW  20
2042:  MOVWF  xD0
2044:  CALL   0A1A
2048:  MOVLW  20
204A:  MOVWF  xD0
204C:  CALL   0A1A
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2050:  BSF    F92.5
2052:  BTFSS  F80.5
2054:  BRA    207C
....................       {  if(Flanco == 0)  
2056:  BTFSC  34.3
2058:  BRA    207A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
205A:  MOVLW  0B
205C:  SUBWF  1A,W
205E:  CLRF   03
2060:  ADDLW  3A
2062:  MOVWF  FE9
2064:  MOVLW  00
2066:  ADDWFC 03,W
2068:  MOVWF  FEA
206A:  INCF   FEF,F
206C:  BSF    34.3
206E:  MOVLW  1E
2070:  MOVWF  xD6
2072:  CALL   08CE
2076:  CLRF   x68
2078:  CLRF   x67
....................          else 
207A:  BRA    207E
....................             {Flanco = 0;} 
207C:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
207E:  BSF    F96.0
2080:  BTFSS  F84.0
2082:  BRA    20AA
....................       {  if(Flanco2 == 0)  
2084:  BTFSC  34.5
2086:  BRA    20A8
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2088:  MOVLW  0B
208A:  SUBWF  1A,W
208C:  CLRF   03
208E:  ADDLW  3A
2090:  MOVWF  FE9
2092:  MOVLW  00
2094:  ADDWFC 03,W
2096:  MOVWF  FEA
2098:  DECF   FEF,F
209A:  BSF    34.5
209C:  MOVLW  1E
209E:  MOVWF  xD6
20A0:  CALL   08CE
20A4:  CLRF   x68
20A6:  CLRF   x67
....................          else 
20A8:  BRA    20AC
....................             {Flanco2 = 0;} 
20AA:  BCF    34.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
20AC:  BSF    F96.1
20AE:  BTFSS  F84.1
20B0:  BRA    20D0
....................       {  if(Flanco1 == 0)  
20B2:  BTFSC  34.4
20B4:  BRA    20CE
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
20B6:  BSF    34.4
20B8:  INCF   1A,F
20BA:  MOVLW  1E
20BC:  MOVWF  xD6
20BE:  CALL   08CE
20C2:  MOVLW  0C
20C4:  MOVWF  xD0
20C6:  CALL   0A1A
20CA:  CLRF   x68
20CC:  CLRF   x67
....................          else 
20CE:  BRA    20D2
....................             {Flanco1 = 0;}    
20D0:  BCF    34.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
20D2:  BSF    F96.2
20D4:  BTFSS  F84.2
20D6:  BRA    20F6
....................       {  if(Flanco3 == 0)  
20D8:  BTFSC  34.6
20DA:  BRA    20F4
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
20DC:  BSF    34.6
20DE:  DECF   1A,F
20E0:  MOVLW  1E
20E2:  MOVWF  xD6
20E4:  CALL   08CE
20E8:  MOVLW  0C
20EA:  MOVWF  xD0
20EC:  CALL   0A1A
20F0:  CLRF   x68
20F2:  CLRF   x67
....................          else 
20F4:  BRA    20F8
....................             {Flanco3 = 0;}     
20F6:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
20F8:  MOVLW  0B
20FA:  SUBWF  1A,W
20FC:  CLRF   03
20FE:  ADDLW  3A
2100:  MOVWF  FE9
2102:  MOVLW  00
2104:  ADDWFC 03,W
2106:  MOVWF  FEA
2108:  BTFSC  FEF.7
210A:  BRA    210E
210C:  BRA    2122
....................        {clave[unidad-11]=9;} 
210E:  MOVLW  0B
2110:  SUBWF  1A,W
2112:  CLRF   03
2114:  ADDLW  3A
2116:  MOVWF  FE9
2118:  MOVLW  00
211A:  ADDWFC 03,W
211C:  MOVWF  FEA
211E:  MOVLW  09
2120:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2122:  MOVLW  0B
2124:  SUBWF  1A,W
2126:  CLRF   03
2128:  ADDLW  3A
212A:  MOVWF  FE9
212C:  MOVLW  00
212E:  ADDWFC 03,W
2130:  MOVWF  FEA
2132:  BTFSC  FEF.7
2134:  BRA    214E
2136:  MOVF   FEF,W
2138:  SUBLW  09
213A:  BC    214E
....................        {clave[unidad-11]=0;} 
213C:  MOVLW  0B
213E:  SUBWF  1A,W
2140:  CLRF   03
2142:  ADDLW  3A
2144:  MOVWF  FE9
2146:  MOVLW  00
2148:  ADDWFC 03,W
214A:  MOVWF  FEA
214C:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
214E:  BTFSC  1A.7
2150:  BRA    2158
2152:  MOVF   1A,W
2154:  SUBLW  0A
2156:  BNC   215C
....................        {unidad=11;} 
2158:  MOVLW  0B
215A:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
215C:  MOVFF  1A,D1
2160:  MOVLW  04
2162:  MOVWF  xD2
2164:  CALL   09B8
....................        lcd_putc(t[2]); 
2168:  MOVFF  39,D0
216C:  CALL   0A1A
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2170:  BTFSC  1A.7
2172:  BRA    236E
2174:  MOVF   1A,W
2176:  SUBLW  0E
2178:  BTFSC  FD8.0
217A:  BRA    236E
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
217C:  MOVF   3A,W
217E:  SUBLW  03
2180:  BNZ   225C
2182:  MOVF   3B,W
2184:  SUBLW  08
2186:  BNZ   225C
2188:  MOVF   3C,W
218A:  SUBLW  09
218C:  BNZ   225C
218E:  MOVF   3D,W
2190:  SUBLW  02
2192:  BNZ   225C
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2194:  CLRF   FA9
2196:  CLRF   FA8
2198:  BCF    FA6.6
219A:  BCF    FA6.7
219C:  BSF    FA6.2
219E:  MOVF   FF2,W
21A0:  MOVWF  00
21A2:  BCF    FF2.7
21A4:  MOVLB  F
21A6:  MOVLW  55
21A8:  MOVWF  FA7
21AA:  MOVLW  AA
21AC:  MOVWF  FA7
21AE:  BSF    FA6.1
21B0:  BTFSC  FA6.1
21B2:  BRA    21B0
21B4:  BCF    FA6.2
21B6:  MOVF   00,W
21B8:  IORWF  FF2,F
21BA:  MOVLW  14
21BC:  MOVLB  0
21BE:  MOVWF  xD6
21C0:  CALL   08CE
21C4:  MOVLW  01
21C6:  MOVWF  FA9
21C8:  CLRF   FA8
21CA:  BCF    FA6.6
21CC:  BCF    FA6.7
21CE:  BSF    FA6.2
21D0:  MOVF   FF2,W
21D2:  MOVWF  00
21D4:  BCF    FF2.7
21D6:  MOVLB  F
21D8:  MOVLW  55
21DA:  MOVWF  FA7
21DC:  MOVLW  AA
21DE:  MOVWF  FA7
21E0:  BSF    FA6.1
21E2:  BTFSC  FA6.1
21E4:  BRA    21E2
21E6:  BCF    FA6.2
21E8:  MOVF   00,W
21EA:  IORWF  FF2,F
21EC:  MOVLW  14
21EE:  MOVLB  0
21F0:  MOVWF  xD6
21F2:  CALL   08CE
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
21F6:  MOVLW  02
21F8:  MOVWF  FA9
21FA:  CLRF   FA8
21FC:  BCF    FA6.6
21FE:  BCF    FA6.7
2200:  BSF    FA6.2
2202:  MOVF   FF2,W
2204:  MOVWF  00
2206:  BCF    FF2.7
2208:  MOVLB  F
220A:  MOVLW  55
220C:  MOVWF  FA7
220E:  MOVLW  AA
2210:  MOVWF  FA7
2212:  BSF    FA6.1
2214:  BTFSC  FA6.1
2216:  BRA    2214
2218:  BCF    FA6.2
221A:  MOVF   00,W
221C:  IORWF  FF2,F
221E:  MOVLW  14
2220:  MOVLB  0
2222:  MOVWF  xD6
2224:  CALL   08CE
2228:  MOVLW  03
222A:  MOVWF  FA9
222C:  CLRF   FA8
222E:  BCF    FA6.6
2230:  BCF    FA6.7
2232:  BSF    FA6.2
2234:  MOVF   FF2,W
2236:  MOVWF  00
2238:  BCF    FF2.7
223A:  MOVLB  F
223C:  MOVLW  55
223E:  MOVWF  FA7
2240:  MOVLW  AA
2242:  MOVWF  FA7
2244:  BSF    FA6.1
2246:  BTFSC  FA6.1
2248:  BRA    2246
224A:  BCF    FA6.2
224C:  MOVF   00,W
224E:  IORWF  FF2,F
2250:  MOVLW  14
2252:  MOVLB  0
2254:  MOVWF  xD6
2256:  CALL   08CE
....................              reset_cpu();} 
225A:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
225C:  MOVF   3E,W
225E:  SUBWF  3A,W
2260:  BNZ   2300
2262:  MOVF   3F,W
2264:  SUBWF  3B,W
2266:  BNZ   2300
2268:  MOVF   40,W
226A:  SUBWF  3C,W
226C:  BNZ   2300
226E:  MOVF   41,W
2270:  SUBWF  3D,W
2272:  BNZ   2300
....................             {lcd_gotoxy(1,1); 
2274:  MOVLW  01
2276:  MOVWF  xD1
2278:  MOVWF  xD2
227A:  CALL   09B8
....................             printf(lcd_putc,"                   "); 
227E:  MOVLW  B6
2280:  MOVWF  FF6
2282:  MOVLW  02
2284:  MOVWF  FF7
2286:  CALL   0ABE
....................             lcd_gotoxy(1,2); 
228A:  MOVLW  01
228C:  MOVWF  xD1
228E:  MOVLW  02
2290:  MOVWF  xD2
2292:  CALL   09B8
....................             printf(lcd_putc,"     Contraseña    "); 
2296:  MOVLW  CA
2298:  MOVWF  FF6
229A:  MOVLW  02
229C:  MOVWF  FF7
229E:  CALL   0ABE
....................             lcd_gotoxy(1,3); 
22A2:  MOVLW  01
22A4:  MOVWF  xD1
22A6:  MOVLW  03
22A8:  MOVWF  xD2
22AA:  CALL   09B8
....................             printf(lcd_putc,"      Correcta     "); 
22AE:  MOVLW  DE
22B0:  MOVWF  FF6
22B2:  MOVLW  02
22B4:  MOVWF  FF7
22B6:  CALL   0ABE
....................             lcd_gotoxy(1,4); 
22BA:  MOVLW  01
22BC:  MOVWF  xD1
22BE:  MOVLW  04
22C0:  MOVWF  xD2
22C2:  CALL   09B8
....................             printf(lcd_putc,"                   "); 
22C6:  MOVLW  F2
22C8:  MOVWF  FF6
22CA:  MOVLW  02
22CC:  MOVWF  FF7
22CE:  CALL   0ABE
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");flag_latencia=0;Latencia=0;tiempo_purga=1; 
22D2:  MOVLW  02
22D4:  MOVWF  xBF
22D6:  MOVLW  FA
22D8:  MOVWF  xD6
22DA:  CALL   08CE
22DE:  DECFSZ xBF,F
22E0:  BRA    22D6
22E2:  MOVLW  32
22E4:  MOVWF  17
22E6:  MOVLW  0B
22E8:  MOVWF  1A
22EA:  MOVLW  0C
22EC:  MOVWF  xD0
22EE:  CALL   0A1A
22F2:  BCF    34.7
22F4:  BCF    35.0
22F6:  BSF    x64.1
....................             t_latencia=0;flag_iniciodamper=1;} 
22F8:  CLRF   x68
22FA:  CLRF   x67
22FC:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
22FE:  BRA    236E
....................          {lcd_gotoxy(1,1); 
2300:  MOVLW  01
2302:  MOVWF  xD1
2304:  MOVWF  xD2
2306:  CALL   09B8
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
230A:  MOVLW  01
230C:  MOVWF  xD1
230E:  MOVLW  02
2310:  MOVWF  xD2
2312:  CALL   09B8
....................             printf(lcd_putc,"     Contraseña    "); 
2316:  MOVLW  06
2318:  MOVWF  FF6
231A:  MOVLW  03
231C:  MOVWF  FF7
231E:  CALL   0ABE
....................             lcd_gotoxy(1,3); 
2322:  MOVLW  01
2324:  MOVWF  xD1
2326:  MOVLW  03
2328:  MOVWF  xD2
232A:  CALL   09B8
....................             printf(lcd_putc,"     Incorrecta    "); 
232E:  MOVLW  1A
2330:  MOVWF  FF6
2332:  MOVLW  03
2334:  MOVWF  FF7
2336:  CALL   0ABE
....................             lcd_gotoxy(1,4); 
233A:  MOVLW  01
233C:  MOVWF  xD1
233E:  MOVLW  04
2340:  MOVWF  xD2
2342:  CALL   09B8
....................             printf(lcd_putc,"                   "); 
2346:  MOVLW  2E
2348:  MOVWF  FF6
234A:  MOVLW  03
234C:  MOVWF  FF7
234E:  CALL   0ABE
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2352:  MOVLW  02
2354:  MOVWF  xBF
2356:  MOVLW  FA
2358:  MOVWF  xD6
235A:  CALL   08CE
235E:  DECFSZ xBF,F
2360:  BRA    2356
2362:  MOVLW  0B
2364:  MOVWF  1A
2366:  MOVLW  0C
2368:  MOVWF  xD0
236A:  CALL   0A1A
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
236E:  BTFSC  1A.7
2370:  BRA    239A
2372:  MOVF   1A,W
2374:  SUBLW  0B
2376:  BC    239A
2378:  BTFSC  1A.7
237A:  BRA    2382
237C:  MOVF   1A,W
237E:  SUBLW  0D
2380:  BNC   239A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2382:  MOVLW  01
2384:  SUBWF  1A,W
2386:  MOVWF  xBF
2388:  MOVWF  xD1
238A:  MOVLW  04
238C:  MOVWF  xD2
238E:  CALL   09B8
....................             lcd_putc(t[1]); 
2392:  MOVFF  38,D0
2396:  CALL   0A1A
....................           } 
....................  
....................    } 
239A:  BRA    1FAE
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
239C:  DECFSZ 17,W
239E:  BRA    25B6
....................       if(paso<0) 
23A0:  BTFSC  36.7
23A2:  BRA    23A6
23A4:  BRA    23A8
....................         {paso=0;} 
23A6:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
23A8:  MOVLW  01
23AA:  MOVWF  xD1
23AC:  MOVWF  xD2
23AE:  CALL   09B8
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
23B2:  MOVLW  42
23B4:  MOVWF  FF6
23B6:  MOVLW  03
23B8:  MOVWF  FF7
23BA:  CALL   0ABE
....................     
....................       if(UP)//Si oprime hacia arriba 
23BE:  BSF    F92.5
23C0:  BTFSS  F80.5
23C2:  BRA    23DE
....................       {  if(Flanco == 0)  
23C4:  BTFSC  34.3
23C6:  BRA    23DC
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
23C8:  DECF   1D,F
23CA:  DECF   1B,F
23CC:  MOVLW  01
23CE:  ADDWF  1B,W
23D0:  MOVWF  1C
23D2:  BSF    34.3
23D4:  MOVLW  1E
23D6:  MOVWF  xD6
23D8:  CALL   08CE
....................          else 
23DC:  BRA    23E0
....................             {Flanco = 0;} 
23DE:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
23E0:  BSF    F96.0
23E2:  BTFSS  F84.0
23E4:  BRA    2400
....................       {  if(Flanco2 == 0)  
23E6:  BTFSC  34.5
23E8:  BRA    23FE
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
23EA:  INCF   1D,F
23EC:  INCF   1B,F
23EE:  MOVLW  01
23F0:  SUBWF  1B,W
23F2:  MOVWF  1C
23F4:  BSF    34.5
23F6:  MOVLW  1E
23F8:  MOVWF  xD6
23FA:  CALL   08CE
....................          else 
23FE:  BRA    2402
....................             {Flanco2 = 0;} 
2400:  BCF    34.5
....................     
....................          
....................         if(Flecha2>nMenuH) 
2402:  MOVF   1F,W
2404:  XORLW  80
2406:  MOVWF  00
2408:  MOVF   1D,W
240A:  XORLW  80
240C:  SUBWF  00,W
240E:  BC    2420
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2410:  INCF   36,F
2412:  MOVFF  1D,1F
2416:  MOVLW  02
2418:  SUBWF  1F,W
241A:  MOVWF  1E
241C:  MOVLW  04
241E:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
2420:  MOVF   1D,W
2422:  XORLW  80
2424:  MOVWF  00
2426:  MOVF   1E,W
2428:  XORLW  80
242A:  SUBWF  00,W
242C:  BC    243E
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
242E:  DECF   36,F
2430:  MOVFF  1D,1E
2434:  MOVLW  02
2436:  ADDWF  1E,W
2438:  MOVWF  1F
243A:  MOVLW  02
243C:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
243E:  MOVF   18,W
2440:  XORLW  80
2442:  MOVWF  00
2444:  MOVF   1D,W
2446:  XORLW  80
2448:  SUBWF  00,W
244A:  BC    245E
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
244C:  MOVFF  19,1D
2450:  MOVLW  02
2452:  MOVWF  1B
2454:  CLRF   36
2456:  MOVFF  1D,1E
245A:  ADDWF  1E,W
245C:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
245E:  MOVF   1D,W
2460:  XORLW  80
2462:  MOVWF  00
2464:  MOVF   19,W
2466:  XORLW  80
2468:  SUBWF  00,W
246A:  BC    2482
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
246C:  MOVFF  18,1D
2470:  MOVLW  04
2472:  MOVWF  1B
2474:  SUBWF  18,W
2476:  MOVWF  36
2478:  MOVFF  1D,1F
247C:  MOVLW  02
247E:  SUBWF  1F,W
2480:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
2482:  MOVLW  01
2484:  ADDWF  36,W
2486:  MOVWF  xBF
2488:  MOVWF  xC0
248A:  MOVLW  02
248C:  MOVWF  xC1
248E:  CALL   0BEC
....................         mensajes(2+paso,3); 
2492:  MOVLW  02
2494:  ADDWF  36,W
2496:  MOVWF  xBF
2498:  MOVWF  xC0
249A:  MOVLW  03
249C:  MOVWF  xC1
249E:  CALL   0BEC
....................         mensajes(3+paso,4); 
24A2:  MOVLW  03
24A4:  ADDWF  36,W
24A6:  MOVWF  xBF
24A8:  MOVWF  xC0
24AA:  MOVLW  04
24AC:  MOVWF  xC1
24AE:  CALL   0BEC
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
24B2:  MOVLW  01
24B4:  MOVWF  xD1
24B6:  MOVFF  1B,D2
24BA:  CALL   09B8
....................         lcd_putc(t[0]); 
24BE:  MOVFF  37,D0
24C2:  CALL   0A1A
....................  
....................         if(Flecha==2) 
24C6:  MOVF   1B,W
24C8:  SUBLW  02
24CA:  BNZ   24F4
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
24CC:  MOVLW  01
24CE:  MOVWF  xD1
24D0:  MOVLW  04
24D2:  MOVWF  xD2
24D4:  CALL   09B8
....................             lcd_putc(t[1]); 
24D8:  MOVFF  38,D0
24DC:  CALL   0A1A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
24E0:  MOVLW  01
24E2:  MOVWF  xD1
24E4:  MOVLW  03
24E6:  MOVWF  xD2
24E8:  CALL   09B8
....................             lcd_putc(t[1]); 
24EC:  MOVFF  38,D0
24F0:  CALL   0A1A
....................           } 
....................          
....................         if(Flecha==4) 
24F4:  MOVF   1B,W
24F6:  SUBLW  04
24F8:  BNZ   2522
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
24FA:  MOVLW  01
24FC:  MOVWF  xD1
24FE:  MOVLW  02
2500:  MOVWF  xD2
2502:  CALL   09B8
....................             lcd_putc(t[1]); 
2506:  MOVFF  38,D0
250A:  CALL   0A1A
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
250E:  MOVLW  01
2510:  MOVWF  xD1
2512:  MOVLW  03
2514:  MOVWF  xD2
2516:  CALL   09B8
....................             lcd_putc(t[1]); 
251A:  MOVFF  38,D0
251E:  CALL   0A1A
....................           } 
....................          
....................         if(Flecha==3) 
2522:  MOVF   1B,W
2524:  SUBLW  03
2526:  BNZ   2550
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2528:  MOVLW  01
252A:  MOVWF  xD1
252C:  MOVLW  04
252E:  MOVWF  xD2
2530:  CALL   09B8
....................             lcd_putc(t[1]); 
2534:  MOVFF  38,D0
2538:  CALL   0A1A
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
253C:  MOVLW  01
253E:  MOVWF  xD1
2540:  MOVLW  02
2542:  MOVWF  xD2
2544:  CALL   09B8
....................             lcd_putc(t[1]); 
2548:  MOVFF  38,D0
254C:  CALL   0A1A
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
2550:  BSF    F96.1
2552:  BTFSS  F84.1
2554:  BRA    258A
....................       {  if(Flanco1 == 0)  
2556:  BTFSC  34.4
2558:  BRA    2588
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
255A:  MOVFF  1D,17
255E:  MOVLW  03
2560:  MOVWF  1B
2562:  MOVLW  02
2564:  MOVWF  xBF
2566:  MOVLW  FA
2568:  MOVWF  xD6
256A:  CALL   08CE
256E:  DECFSZ xBF,F
2570:  BRA    2566
2572:  MOVLW  0C
2574:  MOVWF  xD0
2576:  CALL   0A1A
....................             if(Menu==6) 
257A:  MOVF   17,W
257C:  SUBLW  06
257E:  BNZ   2588
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
2580:  CLRF   3A
2582:  CLRF   3B
2584:  CLRF   3C
2586:  CLRF   3D
....................          else 
2588:  BRA    258C
....................             {Flanco1 = 0;}   
258A:  BCF    34.4
....................              
....................       if(LEFT)// Si oprime Izquierda 
258C:  BSF    F96.2
258E:  BTFSS  F84.2
2590:  BRA    25B4
....................       {  if(Flanco3 == 0)  
2592:  BTFSC  34.6
2594:  BRA    25B2
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
2596:  MOVLW  02
2598:  MOVWF  xBF
259A:  MOVLW  FA
259C:  MOVWF  xD6
259E:  CALL   08CE
25A2:  DECFSZ xBF,F
25A4:  BRA    259A
25A6:  MOVLW  14
25A8:  MOVWF  17
25AA:  MOVLW  0C
25AC:  MOVWF  xD0
25AE:  CALL   0A1A
....................          else 
25B2:  BRA    25B6
....................             {Flanco3 = 0;}                
25B4:  BCF    34.6
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
25B6:  MOVF   17,W
25B8:  SUBLW  02
25BA:  BTFSS  FD8.2
25BC:  BRA    26E2
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
25BE:  BTG    34.2
25C0:  BSF    34.4
25C2:  MOVLW  01
25C4:  MOVWF  17
25C6:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
25C8:  BTFSS  34.2
25CA:  BRA    262C
....................             {estadoalarma=1; 
25CC:  BSF    34.2
....................                lcd_gotoxy(1,1); 
25CE:  MOVLW  01
25D0:  MOVWF  xD1
25D2:  MOVWF  xD2
25D4:  CALL   09B8
....................                printf(lcd_putc,"                    "); 
25D8:  MOVLW  58
25DA:  MOVWF  FF6
25DC:  MOVLW  03
25DE:  MOVWF  FF7
25E0:  CALL   0ABE
....................                lcd_gotoxy(1,2); 
25E4:  MOVLW  01
25E6:  MOVWF  xD1
25E8:  MOVLW  02
25EA:  MOVWF  xD2
25EC:  CALL   09B8
....................                printf(lcd_putc,"        Activo      "); 
25F0:  MOVLW  6E
25F2:  MOVWF  FF6
25F4:  MOVLW  03
25F6:  MOVWF  FF7
25F8:  CALL   0ABE
....................                lcd_gotoxy(1,3); 
25FC:  MOVLW  01
25FE:  MOVWF  xD1
2600:  MOVLW  03
2602:  MOVWF  xD2
2604:  CALL   09B8
....................                printf(lcd_putc,"        Alarma      "); 
2608:  MOVLW  84
260A:  MOVWF  FF6
260C:  MOVLW  03
260E:  MOVWF  FF7
2610:  CALL   0ABE
....................                lcd_gotoxy(1,4); 
2614:  MOVLW  01
2616:  MOVWF  xD1
2618:  MOVLW  04
261A:  MOVWF  xD2
261C:  CALL   09B8
....................                printf(lcd_putc,"                    ");} 
2620:  MOVLW  9A
2622:  MOVWF  FF6
2624:  MOVLW  03
2626:  MOVWF  FF7
2628:  CALL   0ABE
....................                 
....................             if(estadoalarma==0) 
262C:  BTFSC  34.2
262E:  BRA    2690
....................             {estadoalarma=0; 
2630:  BCF    34.2
....................                lcd_gotoxy(1,1); 
2632:  MOVLW  01
2634:  MOVWF  xD1
2636:  MOVWF  xD2
2638:  CALL   09B8
....................                printf(lcd_putc,"                    "); 
263C:  MOVLW  B0
263E:  MOVWF  FF6
2640:  MOVLW  03
2642:  MOVWF  FF7
2644:  CALL   0ABE
....................                lcd_gotoxy(1,2); 
2648:  MOVLW  01
264A:  MOVWF  xD1
264C:  MOVLW  02
264E:  MOVWF  xD2
2650:  CALL   09B8
....................                printf(lcd_putc,"      Desactivo     "); 
2654:  MOVLW  C6
2656:  MOVWF  FF6
2658:  MOVLW  03
265A:  MOVWF  FF7
265C:  CALL   0ABE
....................                lcd_gotoxy(1,3); 
2660:  MOVLW  01
2662:  MOVWF  xD1
2664:  MOVLW  03
2666:  MOVWF  xD2
2668:  CALL   09B8
....................                printf(lcd_putc,"       Alarma       "); 
266C:  MOVLW  DC
266E:  MOVWF  FF6
2670:  MOVLW  03
2672:  MOVWF  FF7
2674:  CALL   0ABE
....................                lcd_gotoxy(1,4); 
2678:  MOVLW  01
267A:  MOVWF  xD1
267C:  MOVLW  04
267E:  MOVWF  xD2
2680:  CALL   09B8
....................                printf(lcd_putc,"                    ");} 
2684:  MOVLW  F2
2686:  MOVWF  FF6
2688:  MOVLW  03
268A:  MOVWF  FF7
268C:  CALL   0ABE
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2690:  MOVLW  00
2692:  BTFSC  34.2
2694:  MOVLW  01
2696:  MOVWF  xBF
2698:  MOVLW  05
269A:  MOVWF  FA9
269C:  MOVFF  BF,FA8
26A0:  BCF    FA6.6
26A2:  BCF    FA6.7
26A4:  BSF    FA6.2
26A6:  MOVF   FF2,W
26A8:  MOVWF  00
26AA:  BCF    FF2.7
26AC:  MOVLB  F
26AE:  MOVLW  55
26B0:  MOVWF  FA7
26B2:  MOVLW  AA
26B4:  MOVWF  FA7
26B6:  BSF    FA6.1
26B8:  BTFSC  FA6.1
26BA:  BRA    26B8
26BC:  BCF    FA6.2
26BE:  MOVF   00,W
26C0:  IORWF  FF2,F
26C2:  MOVLW  04
26C4:  MOVLB  0
26C6:  MOVWF  xBF
26C8:  MOVLW  FA
26CA:  MOVWF  xD6
26CC:  CALL   08CE
26D0:  DECFSZ xBF,F
26D2:  BRA    26C8
26D4:  MOVLW  02
26D6:  MOVWF  1B
26D8:  MOVWF  1D
26DA:  MOVLW  0C
26DC:  MOVWF  xD0
26DE:  CALL   0A1A
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
26E2:  MOVF   17,W
26E4:  SUBLW  03
26E6:  BTFSS  FD8.2
26E8:  BRA    2928
....................    lcd_gotoxy(1,1); 
26EA:  MOVLW  01
26EC:  MOVWF  xD1
26EE:  MOVWF  xD2
26F0:  CALL   09B8
....................    printf(lcd_putc,"  Duracion Actual   ");                           
26F4:  MOVLW  08
26F6:  MOVWF  FF6
26F8:  MOVLW  04
26FA:  MOVWF  FF7
26FC:  CALL   0ABE
....................    lcd_gotoxy(1,2);                                                   
2700:  MOVLW  01
2702:  MOVWF  xD1
2704:  MOVLW  02
2706:  MOVWF  xD2
2708:  CALL   09B8
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
270C:  MOVLW  1E
270E:  MOVWF  FF6
2710:  MOVLW  04
2712:  MOVWF  FF7
2714:  MOVLW  09
2716:  MOVWF  xC3
2718:  CALL   0ADE
271C:  MOVFF  2C,BF
2720:  MOVLW  01
2722:  MOVWF  xC0
2724:  CALL   0CBE
2728:  MOVLW  3A
272A:  MOVWF  xD0
272C:  CALL   0A1A
2730:  MOVFF  2B,BF
2734:  MOVLW  01
2736:  MOVWF  xC0
2738:  CALL   0CBE
273C:  MOVLW  3A
273E:  MOVWF  xD0
2740:  CALL   0A1A
2744:  MOVFF  2A,BF
2748:  MOVLW  01
274A:  MOVWF  xC0
274C:  CALL   0CBE
2750:  MOVLW  20
2752:  MOVWF  xD0
2754:  CALL   0A1A
....................     
....................    if(flag_filtro==1) 
2758:  BTFSS  35.1
275A:  BRA    2776
....................    { 
....................       lcd_gotoxy(1,3);                                                  
275C:  MOVLW  01
275E:  MOVWF  xD1
2760:  MOVLW  03
2762:  MOVWF  xD2
2764:  CALL   09B8
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
2768:  MOVLW  38
276A:  MOVWF  FF6
276C:  MOVLW  04
276E:  MOVWF  FF7
2770:  CALL   0ABE
....................    } 
....................    else 
2774:  BRA    278E
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2776:  MOVLW  01
2778:  MOVWF  xD1
277A:  MOVLW  03
277C:  MOVWF  xD2
277E:  CALL   09B8
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
2782:  MOVLW  4E
2784:  MOVWF  FF6
2786:  MOVLW  04
2788:  MOVWF  FF7
278A:  CALL   0ABE
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
278E:  MOVLW  01
2790:  MOVWF  xD1
2792:  MOVLW  04
2794:  MOVWF  xD2
2796:  CALL   09B8
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
279A:  MOVLW  64
279C:  MOVWF  FF6
279E:  MOVLW  04
27A0:  MOVWF  FF7
27A2:  CALL   0ABE
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
27A6:  BSF    F92.5
27A8:  BTFSS  F80.5
27AA:  BRA    2894
....................       {  delay_ms(200); 
27AC:  MOVLW  C8
27AE:  MOVWF  xD6
27B0:  CALL   08CE
....................          printf(lcd_putc,"\f"); 
27B4:  MOVLW  0C
27B6:  MOVWF  xD0
27B8:  CALL   0A1A
....................          lcd_gotoxy(1,2); 
27BC:  MOVLW  01
27BE:  MOVWF  xD1
27C0:  MOVLW  02
27C2:  MOVWF  xD2
27C4:  CALL   09B8
....................          printf(lcd_putc," Reset de tiempo "); 
27C8:  MOVLW  7A
27CA:  MOVWF  FF6
27CC:  MOVLW  04
27CE:  MOVWF  FF7
27D0:  CALL   0ABE
....................          lcd_gotoxy(1,3); 
27D4:  MOVLW  01
27D6:  MOVWF  xD1
27D8:  MOVLW  03
27DA:  MOVWF  xD2
27DC:  CALL   09B8
....................          printf(lcd_putc,"     Exitoso     "); 
27E0:  MOVLW  8C
27E2:  MOVWF  FF6
27E4:  MOVLW  04
27E6:  MOVWF  FF7
27E8:  CALL   0ABE
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
27EC:  MOVLW  46
27EE:  MOVWF  FA9
27F0:  CLRF   FA8
27F2:  BCF    FA6.6
27F4:  BCF    FA6.7
27F6:  BSF    FA6.2
27F8:  MOVF   FF2,W
27FA:  MOVWF  00
27FC:  BCF    FF2.7
27FE:  MOVLB  F
2800:  MOVLW  55
2802:  MOVWF  FA7
2804:  MOVLW  AA
2806:  MOVWF  FA7
2808:  BSF    FA6.1
280A:  BTFSC  FA6.1
280C:  BRA    280A
280E:  BCF    FA6.2
2810:  MOVF   00,W
2812:  IORWF  FF2,F
2814:  MOVLW  47
2816:  MOVWF  FA9
2818:  CLRF   FA8
281A:  BCF    FA6.6
281C:  BCF    FA6.7
281E:  BSF    FA6.2
2820:  MOVF   FF2,W
2822:  MOVWF  00
2824:  BCF    FF2.7
2826:  MOVLW  55
2828:  MOVWF  FA7
282A:  MOVLW  AA
282C:  MOVWF  FA7
282E:  BSF    FA6.1
2830:  BTFSC  FA6.1
2832:  BRA    2830
2834:  BCF    FA6.2
2836:  MOVF   00,W
2838:  IORWF  FF2,F
283A:  MOVLW  48
283C:  MOVWF  FA9
283E:  CLRF   FA8
2840:  BCF    FA6.6
2842:  BCF    FA6.7
2844:  BSF    FA6.2
2846:  MOVF   FF2,W
2848:  MOVWF  00
284A:  BCF    FF2.7
284C:  MOVLW  55
284E:  MOVWF  FA7
2850:  MOVLW  AA
2852:  MOVWF  FA7
2854:  BSF    FA6.1
2856:  BTFSC  FA6.1
2858:  BRA    2856
285A:  BCF    FA6.2
285C:  MOVF   00,W
285E:  IORWF  FF2,F
....................          delay_ms(700); 
2860:  MOVLW  04
2862:  MOVLB  0
2864:  MOVWF  xBF
2866:  MOVLW  AF
2868:  MOVWF  xD6
286A:  CALL   08CE
286E:  DECFSZ xBF,F
2870:  BRA    2866
....................          segundos=0;minutos=0;horas=0; 
2872:  CLRF   2A
2874:  CLRF   2B
2876:  CLRF   2C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2878:  MOVLW  1E
287A:  MOVWF  xD6
287C:  CALL   08CE
2880:  MOVLW  01
2882:  MOVWF  17
2884:  CLRF   36
2886:  MOVLW  02
2888:  MOVWF  1B
288A:  MOVWF  1D
288C:  MOVLW  0C
288E:  MOVWF  xD0
2890:  CALL   0A1A
....................       } 
....................        
....................       if(RIGHT) 
2894:  BSF    F96.1
2896:  BTFSS  F84.1
2898:  BRA    28F4
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
289A:  BTG    35.1
289C:  MOVLW  00
289E:  BTFSC  35.1
28A0:  MOVLW  01
28A2:  MOVWF  xBF
28A4:  MOVLW  49
28A6:  MOVWF  FA9
28A8:  MOVFF  BF,FA8
28AC:  BCF    FA6.6
28AE:  BCF    FA6.7
28B0:  BSF    FA6.2
28B2:  MOVF   FF2,W
28B4:  MOVWF  00
28B6:  BCF    FF2.7
28B8:  MOVLB  F
28BA:  MOVLW  55
28BC:  MOVWF  FA7
28BE:  MOVLW  AA
28C0:  MOVWF  FA7
28C2:  BSF    FA6.1
28C4:  BTFSC  FA6.1
28C6:  BRA    28C4
28C8:  BCF    FA6.2
28CA:  MOVF   00,W
28CC:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
28CE:  MOVLW  02
28D0:  MOVLB  0
28D2:  MOVWF  xBF
28D4:  MOVLW  FA
28D6:  MOVWF  xD6
28D8:  CALL   08CE
28DC:  DECFSZ xBF,F
28DE:  BRA    28D4
28E0:  MOVLW  01
28E2:  MOVWF  17
28E4:  CLRF   36
28E6:  MOVLW  02
28E8:  MOVWF  1B
28EA:  MOVWF  1D
28EC:  MOVLW  0C
28EE:  MOVWF  xD0
28F0:  CALL   0A1A
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
28F4:  BSF    F96.2
28F6:  BTFSS  F84.2
28F8:  BRA    2926
....................       {  if(Flanco3 == 0)  
28FA:  BTFSC  34.6
28FC:  BRA    2924
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
28FE:  BSF    34.6
2900:  MOVLW  02
2902:  MOVWF  xBF
2904:  MOVLW  FA
2906:  MOVWF  xD6
2908:  CALL   08CE
290C:  DECFSZ xBF,F
290E:  BRA    2904
2910:  MOVLW  01
2912:  MOVWF  17
2914:  CLRF   36
2916:  MOVLW  02
2918:  MOVWF  1B
291A:  MOVWF  1D
291C:  MOVLW  0C
291E:  MOVWF  xD0
2920:  CALL   0A1A
....................          else 
2924:  BRA    2928
....................             {Flanco3 = 0;}       
2926:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
2928:  MOVF   17,W
292A:  SUBLW  04
292C:  BTFSS  FD8.2
292E:  BRA    2B26
....................    lcd_gotoxy(1,2); 
2930:  MOVLW  01
2932:  MOVWF  xD1
2934:  MOVLW  02
2936:  MOVWF  xD2
2938:  CALL   09B8
....................    printf(lcd_putc,"    Vida Filtro     "); 
293C:  MOVLW  9E
293E:  MOVWF  FF6
2940:  MOVLW  04
2942:  MOVWF  FF7
2944:  CALL   0ABE
....................    lcd_gotoxy(1,3); 
2948:  MOVLW  01
294A:  MOVWF  xD1
294C:  MOVLW  03
294E:  MOVWF  xD2
2950:  CALL   09B8
....................    printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
2954:  MOVLW  B4
2956:  MOVWF  FF6
2958:  MOVLW  04
295A:  MOVWF  FF7
295C:  MOVLW  06
295E:  MOVWF  xC3
2960:  CALL   0ADE
2964:  MOVLW  42
2966:  MOVWF  FE9
2968:  MOVFF  4B,C6
296C:  MOVFF  4A,C5
2970:  MOVFF  49,C4
2974:  MOVFF  48,C3
2978:  CLRF   xC7
297A:  CALL   0ED0
297E:  MOVLW  C0
2980:  MOVWF  FF6
2982:  MOVLW  04
2984:  MOVWF  FF7
2986:  MOVLW  08
2988:  MOVWF  xC3
298A:  CALL   0ADE
....................     
....................    if(setpoint<1.0) 
298E:  MOVFF  4B,D6
2992:  MOVFF  4A,D5
2996:  MOVFF  49,D4
299A:  MOVFF  48,D3
299E:  CLRF   xDA
29A0:  CLRF   xD9
29A2:  CLRF   xD8
29A4:  MOVLW  7F
29A6:  MOVWF  xD7
29A8:  CALL   104E
29AC:  BNC   29B8
....................    {setpoint=1.0;} 
29AE:  CLRF   4B
29B0:  CLRF   4A
29B2:  CLRF   49
29B4:  MOVLW  7F
29B6:  MOVWF  48
....................     
....................    if(setpoint>255.0) 
29B8:  CLRF   xD6
29BA:  CLRF   xD5
29BC:  MOVLW  7F
29BE:  MOVWF  xD4
29C0:  MOVLW  86
29C2:  MOVWF  xD3
29C4:  MOVFF  4B,DA
29C8:  MOVFF  4A,D9
29CC:  MOVFF  49,D8
29D0:  MOVFF  48,D7
29D4:  CALL   104E
29D8:  BNC   29E6
....................    {setpoint=255.0;} 
29DA:  CLRF   4B
29DC:  CLRF   4A
29DE:  MOVLW  7F
29E0:  MOVWF  49
29E2:  MOVLW  86
29E4:  MOVWF  48
....................     
....................       if(UP)//Si oprime hacia arriba 
29E6:  BSF    F92.5
29E8:  BTFSS  F80.5
29EA:  BRA    2A26
....................       {setpoint+=1.0;Flanco = 1;delay_ms(30);} 
29EC:  BCF    FD8.1
29EE:  MOVFF  4B,DA
29F2:  MOVFF  4A,D9
29F6:  MOVFF  49,D8
29FA:  MOVFF  48,D7
29FE:  CLRF   xDE
2A00:  CLRF   xDD
2A02:  CLRF   xDC
2A04:  MOVLW  7F
2A06:  MOVWF  xDB
2A08:  CALL   10C4
2A0C:  MOVFF  03,4B
2A10:  MOVFF  02,4A
2A14:  MOVFF  01,49
2A18:  MOVFF  00,48
2A1C:  BSF    34.3
2A1E:  MOVLW  1E
2A20:  MOVWF  xD6
2A22:  CALL   08CE
....................       
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2A26:  BSF    F96.0
2A28:  BTFSS  F84.0
2A2A:  BRA    2A66
....................       {setpoint-=1.0;Flanco2 = 1;delay_ms(30);} 
2A2C:  BSF    FD8.1
2A2E:  MOVFF  4B,DA
2A32:  MOVFF  4A,D9
2A36:  MOVFF  49,D8
2A3A:  MOVFF  48,D7
2A3E:  CLRF   xDE
2A40:  CLRF   xDD
2A42:  CLRF   xDC
2A44:  MOVLW  7F
2A46:  MOVWF  xDB
2A48:  CALL   10C4
2A4C:  MOVFF  03,4B
2A50:  MOVFF  02,4A
2A54:  MOVFF  01,49
2A58:  MOVFF  00,48
2A5C:  BSF    34.5
2A5E:  MOVLW  1E
2A60:  MOVWF  xD6
2A62:  CALL   08CE
....................          
....................     
....................       if(RIGHT)// Si oprime derecha 
2A66:  BSF    F96.1
2A68:  BTFSS  F84.1
2A6A:  BRA    2AEE
....................       {  if(Flanco1 == 0)  
2A6C:  BTFSC  34.4
2A6E:  BRA    2AEC
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2A70:  MOVLW  01
2A72:  MOVWF  17
2A74:  CLRF   36
2A76:  MOVLW  02
2A78:  MOVWF  1B
2A7A:  MOVWF  1D
2A7C:  MOVLW  0B
2A7E:  MOVWF  1A
2A80:  MOVLW  02
2A82:  MOVWF  xBF
2A84:  MOVLW  FA
2A86:  MOVWF  xD6
2A88:  CALL   08CE
2A8C:  DECFSZ xBF,F
2A8E:  BRA    2A84
2A90:  MOVLW  0C
2A92:  MOVWF  xD0
2A94:  CALL   0A1A
....................             Temporal=setpoint; 
2A98:  MOVFF  4B,4F
2A9C:  MOVFF  4A,4E
2AA0:  MOVFF  49,4D
2AA4:  MOVFF  48,4C
....................             Entero=(int)setpoint; 
2AA8:  MOVFF  4B,D6
2AAC:  MOVFF  4A,D5
2AB0:  MOVFF  49,D4
2AB4:  MOVFF  48,D3
2AB8:  CALL   132E
2ABC:  MOVFF  01,24
....................             write_eeprom(40,Entero); 
2AC0:  MOVLW  28
2AC2:  MOVWF  FA9
2AC4:  MOVFF  24,FA8
2AC8:  BCF    FA6.6
2ACA:  BCF    FA6.7
2ACC:  BSF    FA6.2
2ACE:  MOVF   FF2,W
2AD0:  MOVWF  00
2AD2:  BCF    FF2.7
2AD4:  MOVLB  F
2AD6:  MOVLW  55
2AD8:  MOVWF  FA7
2ADA:  MOVLW  AA
2ADC:  MOVWF  FA7
2ADE:  BSF    FA6.1
2AE0:  BTFSC  FA6.1
2AE2:  BRA    2AE0
2AE4:  BCF    FA6.2
2AE6:  MOVF   00,W
2AE8:  IORWF  FF2,F
2AEA:  MOVLB  0
....................             }} 
....................          else 
2AEC:  BRA    2AF0
....................             {Flanco1 = 0;}    
2AEE:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2AF0:  BSF    F96.2
2AF2:  BTFSS  F84.2
2AF4:  BRA    2B24
....................       {  if(Flanco3 == 0)  
2AF6:  BTFSC  34.6
2AF8:  BRA    2B22
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
2AFA:  MOVLW  01
2AFC:  MOVWF  17
2AFE:  CLRF   36
2B00:  MOVLW  02
2B02:  MOVWF  1B
2B04:  MOVWF  1D
2B06:  MOVLW  0B
2B08:  MOVWF  1A
2B0A:  MOVLW  02
2B0C:  MOVWF  xBF
2B0E:  MOVLW  FA
2B10:  MOVWF  xD6
2B12:  CALL   08CE
2B16:  DECFSZ xBF,F
2B18:  BRA    2B0E
2B1A:  MOVLW  0C
2B1C:  MOVWF  xD0
2B1E:  CALL   0A1A
....................          else 
2B22:  BRA    2B26
....................             {Flanco3 = 0;}     
2B24:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
2B26:  MOVF   17,W
2B28:  SUBLW  05
2B2A:  BTFSS  FD8.2
2B2C:  BRA    2E36
....................    lcd_gotoxy(1,1); 
2B2E:  MOVLW  01
2B30:  MOVWF  xD1
2B32:  MOVWF  xD2
2B34:  CALL   09B8
....................    printf(lcd_putc,"      Ingrese       "); 
2B38:  MOVLW  CA
2B3A:  MOVWF  FF6
2B3C:  MOVLW  04
2B3E:  MOVWF  FF7
2B40:  CALL   0ABE
....................    lcd_gotoxy(1,2); 
2B44:  MOVLW  01
2B46:  MOVWF  xD1
2B48:  MOVLW  02
2B4A:  MOVWF  xD2
2B4C:  CALL   09B8
....................    printf(lcd_putc," Contraseña Actual  "); 
2B50:  MOVLW  E0
2B52:  MOVWF  FF6
2B54:  MOVLW  04
2B56:  MOVWF  FF7
2B58:  CALL   0ABE
....................    lcd_gotoxy(1,3); 
2B5C:  MOVLW  01
2B5E:  MOVWF  xD1
2B60:  MOVLW  03
2B62:  MOVWF  xD2
2B64:  CALL   09B8
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2B68:  MOVLW  F6
2B6A:  MOVWF  FF6
2B6C:  MOVLW  04
2B6E:  MOVWF  FF7
2B70:  MOVLW  0A
2B72:  MOVWF  xC3
2B74:  CALL   0ADE
2B78:  MOVFF  3A,BF
2B7C:  MOVLW  1F
2B7E:  MOVWF  xC0
2B80:  CALL   0B24
2B84:  MOVFF  3B,BF
2B88:  MOVLW  1F
2B8A:  MOVWF  xC0
2B8C:  CALL   0B24
2B90:  MOVFF  3C,BF
2B94:  MOVLW  1F
2B96:  MOVWF  xC0
2B98:  CALL   0B24
2B9C:  MOVFF  3D,BF
2BA0:  MOVLW  1F
2BA2:  MOVWF  xC0
2BA4:  CALL   0B24
2BA8:  MOVLW  20
2BAA:  MOVWF  xD0
2BAC:  CALL   0A1A
2BB0:  MOVLW  20
2BB2:  MOVWF  xD0
2BB4:  CALL   0A1A
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2BB8:  BSF    F92.5
2BBA:  BTFSS  F80.5
2BBC:  BRA    2BE0
....................       {  if(Flanco == 0)  
2BBE:  BTFSC  34.3
2BC0:  BRA    2BDE
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2BC2:  MOVLW  0B
2BC4:  SUBWF  1A,W
2BC6:  CLRF   03
2BC8:  ADDLW  3A
2BCA:  MOVWF  FE9
2BCC:  MOVLW  00
2BCE:  ADDWFC 03,W
2BD0:  MOVWF  FEA
2BD2:  INCF   FEF,F
2BD4:  BSF    34.3
2BD6:  MOVLW  1E
2BD8:  MOVWF  xD6
2BDA:  CALL   08CE
....................          else 
2BDE:  BRA    2BE2
....................             {Flanco = 0;} 
2BE0:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2BE2:  BSF    F96.0
2BE4:  BTFSS  F84.0
2BE6:  BRA    2C0A
....................       {  if(Flanco2 == 0)  
2BE8:  BTFSC  34.5
2BEA:  BRA    2C08
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2BEC:  MOVLW  0B
2BEE:  SUBWF  1A,W
2BF0:  CLRF   03
2BF2:  ADDLW  3A
2BF4:  MOVWF  FE9
2BF6:  MOVLW  00
2BF8:  ADDWFC 03,W
2BFA:  MOVWF  FEA
2BFC:  DECF   FEF,F
2BFE:  BSF    34.5
2C00:  MOVLW  1E
2C02:  MOVWF  xD6
2C04:  CALL   08CE
....................          else 
2C08:  BRA    2C0C
....................             {Flanco2 = 0;} 
2C0A:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime derecha 
2C0C:  BSF    F96.1
2C0E:  BTFSS  F84.1
2C10:  BRA    2C34
....................       {  if(Flanco1 == 0)  
2C12:  BTFSC  34.4
2C14:  BRA    2C32
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
2C16:  BSF    34.4
2C18:  INCF   1A,F
2C1A:  MOVLW  02
2C1C:  MOVWF  xBF
2C1E:  MOVLW  FA
2C20:  MOVWF  xD6
2C22:  CALL   08CE
2C26:  DECFSZ xBF,F
2C28:  BRA    2C1E
2C2A:  MOVLW  0C
2C2C:  MOVWF  xD0
2C2E:  CALL   0A1A
....................          else 
2C32:  BRA    2C36
....................             {Flanco1 = 0;}    
2C34:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2C36:  BSF    F96.2
2C38:  BTFSS  F84.2
2C3A:  BRA    2C5E
....................       {  if(Flanco3 == 0)  
2C3C:  BTFSC  34.6
2C3E:  BRA    2C5C
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
2C40:  BSF    34.6
2C42:  DECF   1A,F
2C44:  MOVLW  02
2C46:  MOVWF  xBF
2C48:  MOVLW  FA
2C4A:  MOVWF  xD6
2C4C:  CALL   08CE
2C50:  DECFSZ xBF,F
2C52:  BRA    2C48
2C54:  MOVLW  0C
2C56:  MOVWF  xD0
2C58:  CALL   0A1A
....................          else 
2C5C:  BRA    2C60
....................             {Flanco3 = 0;}     
2C5E:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2C60:  MOVLW  0B
2C62:  SUBWF  1A,W
2C64:  CLRF   03
2C66:  ADDLW  3A
2C68:  MOVWF  FE9
2C6A:  MOVLW  00
2C6C:  ADDWFC 03,W
2C6E:  MOVWF  FEA
2C70:  BTFSC  FEF.7
2C72:  BRA    2C76
2C74:  BRA    2C8A
....................        {clave[unidad-11]=9;} 
2C76:  MOVLW  0B
2C78:  SUBWF  1A,W
2C7A:  CLRF   03
2C7C:  ADDLW  3A
2C7E:  MOVWF  FE9
2C80:  MOVLW  00
2C82:  ADDWFC 03,W
2C84:  MOVWF  FEA
2C86:  MOVLW  09
2C88:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2C8A:  MOVLW  0B
2C8C:  SUBWF  1A,W
2C8E:  CLRF   03
2C90:  ADDLW  3A
2C92:  MOVWF  FE9
2C94:  MOVLW  00
2C96:  ADDWFC 03,W
2C98:  MOVWF  FEA
2C9A:  BTFSC  FEF.7
2C9C:  BRA    2CB6
2C9E:  MOVF   FEF,W
2CA0:  SUBLW  09
2CA2:  BC    2CB6
....................        {clave[unidad-11]=0;} 
2CA4:  MOVLW  0B
2CA6:  SUBWF  1A,W
2CA8:  CLRF   03
2CAA:  ADDLW  3A
2CAC:  MOVWF  FE9
2CAE:  MOVLW  00
2CB0:  ADDWFC 03,W
2CB2:  MOVWF  FEA
2CB4:  CLRF   FEF
....................        if(unidad<11) 
2CB6:  BTFSC  1A.7
2CB8:  BRA    2CC0
2CBA:  MOVF   1A,W
2CBC:  SUBLW  0A
2CBE:  BNC   2CD0
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
2CC0:  MOVLW  01
2CC2:  MOVWF  17
2CC4:  CLRF   36
2CC6:  MOVLW  02
2CC8:  MOVWF  1B
2CCA:  MOVWF  1D
2CCC:  MOVLW  0B
2CCE:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2CD0:  MOVFF  1A,D1
2CD4:  MOVLW  04
2CD6:  MOVWF  xD2
2CD8:  CALL   09B8
....................        lcd_putc(t[2]); 
2CDC:  MOVFF  39,D0
2CE0:  CALL   0A1A
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2CE4:  BTFSC  1A.7
2CE6:  BRA    2E0A
2CE8:  MOVF   1A,W
2CEA:  SUBLW  0E
2CEC:  BTFSC  FD8.0
2CEE:  BRA    2E0A
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2CF0:  MOVF   3E,W
2CF2:  SUBWF  3A,W
2CF4:  BNZ   2D90
2CF6:  MOVF   3F,W
2CF8:  SUBWF  3B,W
2CFA:  BNZ   2D90
2CFC:  MOVF   40,W
2CFE:  SUBWF  3C,W
2D00:  BNZ   2D90
2D02:  MOVF   41,W
2D04:  SUBWF  3D,W
2D06:  BNZ   2D90
....................             {lcd_gotoxy(1,1); 
2D08:  MOVLW  01
2D0A:  MOVWF  xD1
2D0C:  MOVWF  xD2
2D0E:  CALL   09B8
....................             printf(lcd_putc,"                    "); 
2D12:  MOVLW  0C
2D14:  MOVWF  FF6
2D16:  MOVLW  05
2D18:  MOVWF  FF7
2D1A:  CALL   0ABE
....................             lcd_gotoxy(1,2); 
2D1E:  MOVLW  01
2D20:  MOVWF  xD1
2D22:  MOVLW  02
2D24:  MOVWF  xD2
2D26:  CALL   09B8
....................             printf(lcd_putc,"     Contraseña     "); 
2D2A:  MOVLW  22
2D2C:  MOVWF  FF6
2D2E:  MOVLW  05
2D30:  MOVWF  FF7
2D32:  CALL   0ABE
....................             lcd_gotoxy(1,3); 
2D36:  MOVLW  01
2D38:  MOVWF  xD1
2D3A:  MOVLW  03
2D3C:  MOVWF  xD2
2D3E:  CALL   09B8
....................             printf(lcd_putc,"      Correcta      "); 
2D42:  MOVLW  38
2D44:  MOVWF  FF6
2D46:  MOVLW  05
2D48:  MOVWF  FF7
2D4A:  CALL   0ABE
....................             lcd_gotoxy(1,4); 
2D4E:  MOVLW  01
2D50:  MOVWF  xD1
2D52:  MOVLW  04
2D54:  MOVWF  xD2
2D56:  CALL   09B8
....................             printf(lcd_putc,"                    "); 
2D5A:  MOVLW  4E
2D5C:  MOVWF  FF6
2D5E:  MOVLW  05
2D60:  MOVWF  FF7
2D62:  CALL   0ABE
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
2D66:  MOVLW  02
2D68:  MOVWF  xBF
2D6A:  MOVLW  FA
2D6C:  MOVWF  xD6
2D6E:  CALL   08CE
2D72:  DECFSZ xBF,F
2D74:  BRA    2D6A
2D76:  MOVLW  33
2D78:  MOVWF  17
2D7A:  MOVLW  0B
2D7C:  MOVWF  1A
2D7E:  MOVLW  0C
2D80:  MOVWF  xD0
2D82:  CALL   0A1A
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2D86:  CLRF   3A
2D88:  CLRF   3B
2D8A:  CLRF   3C
2D8C:  CLRF   3D
....................          else 
2D8E:  BRA    2E0A
....................          {lcd_gotoxy(1,1); 
2D90:  MOVLW  01
2D92:  MOVWF  xD1
2D94:  MOVWF  xD2
2D96:  CALL   09B8
....................             printf(lcd_putc,"                    "); 
2D9A:  MOVLW  64
2D9C:  MOVWF  FF6
2D9E:  MOVLW  05
2DA0:  MOVWF  FF7
2DA2:  CALL   0ABE
....................             lcd_gotoxy(1,2); 
2DA6:  MOVLW  01
2DA8:  MOVWF  xD1
2DAA:  MOVLW  02
2DAC:  MOVWF  xD2
2DAE:  CALL   09B8
....................             printf(lcd_putc,"     Contraseña     "); 
2DB2:  MOVLW  7A
2DB4:  MOVWF  FF6
2DB6:  MOVLW  05
2DB8:  MOVWF  FF7
2DBA:  CALL   0ABE
....................             lcd_gotoxy(1,3); 
2DBE:  MOVLW  01
2DC0:  MOVWF  xD1
2DC2:  MOVLW  03
2DC4:  MOVWF  xD2
2DC6:  CALL   09B8
....................             printf(lcd_putc,"     Incorrecta     "); 
2DCA:  MOVLW  90
2DCC:  MOVWF  FF6
2DCE:  MOVLW  05
2DD0:  MOVWF  FF7
2DD2:  CALL   0ABE
....................             lcd_gotoxy(1,4); 
2DD6:  MOVLW  01
2DD8:  MOVWF  xD1
2DDA:  MOVLW  04
2DDC:  MOVWF  xD2
2DDE:  CALL   09B8
....................             printf(lcd_putc,"                    "); 
2DE2:  MOVLW  A6
2DE4:  MOVWF  FF6
2DE6:  MOVLW  05
2DE8:  MOVWF  FF7
2DEA:  CALL   0ABE
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2DEE:  MOVLW  02
2DF0:  MOVWF  xBF
2DF2:  MOVLW  FA
2DF4:  MOVWF  xD6
2DF6:  CALL   08CE
2DFA:  DECFSZ xBF,F
2DFC:  BRA    2DF2
2DFE:  MOVLW  0B
2E00:  MOVWF  1A
2E02:  MOVLW  0C
2E04:  MOVWF  xD0
2E06:  CALL   0A1A
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2E0A:  BTFSC  1A.7
2E0C:  BRA    2E36
2E0E:  MOVF   1A,W
2E10:  SUBLW  0B
2E12:  BC    2E36
2E14:  BTFSC  1A.7
2E16:  BRA    2E1E
2E18:  MOVF   1A,W
2E1A:  SUBLW  0D
2E1C:  BNC   2E36
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2E1E:  MOVLW  01
2E20:  SUBWF  1A,W
2E22:  MOVWF  xBF
2E24:  MOVWF  xD1
2E26:  MOVLW  04
2E28:  MOVWF  xD2
2E2A:  CALL   09B8
....................             lcd_putc(t[1]); 
2E2E:  MOVFF  38,D0
2E32:  CALL   0A1A
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2E36:  MOVF   17,W
2E38:  SUBLW  33
2E3A:  BTFSS  FD8.2
2E3C:  BRA    315C
....................    lcd_gotoxy(1,1); 
2E3E:  MOVLW  01
2E40:  MOVWF  xD1
2E42:  MOVWF  xD2
2E44:  CALL   09B8
....................    printf(lcd_putc,"     Ingrese        "); 
2E48:  MOVLW  BC
2E4A:  MOVWF  FF6
2E4C:  MOVLW  05
2E4E:  MOVWF  FF7
2E50:  CALL   0ABE
....................    lcd_gotoxy(1,2); 
2E54:  MOVLW  01
2E56:  MOVWF  xD1
2E58:  MOVLW  02
2E5A:  MOVWF  xD2
2E5C:  CALL   09B8
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2E60:  MOVLW  D2
2E62:  MOVWF  FF6
2E64:  MOVLW  05
2E66:  MOVWF  FF7
2E68:  CALL   0ABE
....................    lcd_gotoxy(1,3); 
2E6C:  MOVLW  01
2E6E:  MOVWF  xD1
2E70:  MOVLW  03
2E72:  MOVWF  xD2
2E74:  CALL   09B8
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E78:  MOVLW  E8
2E7A:  MOVWF  FF6
2E7C:  MOVLW  05
2E7E:  MOVWF  FF7
2E80:  MOVLW  0A
2E82:  MOVWF  xC3
2E84:  CALL   0ADE
2E88:  MOVFF  3A,BF
2E8C:  MOVLW  1F
2E8E:  MOVWF  xC0
2E90:  CALL   0B24
2E94:  MOVFF  3B,BF
2E98:  MOVLW  1F
2E9A:  MOVWF  xC0
2E9C:  CALL   0B24
2EA0:  MOVFF  3C,BF
2EA4:  MOVLW  1F
2EA6:  MOVWF  xC0
2EA8:  CALL   0B24
2EAC:  MOVFF  3D,BF
2EB0:  MOVLW  1F
2EB2:  MOVWF  xC0
2EB4:  CALL   0B24
2EB8:  MOVLW  20
2EBA:  MOVWF  xD0
2EBC:  CALL   0A1A
2EC0:  MOVLW  20
2EC2:  MOVWF  xD0
2EC4:  CALL   0A1A
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
2EC8:  BSF    F92.5
2ECA:  BTFSS  F80.5
2ECC:  BRA    2EF0
....................       {  if(Flanco == 0)  
2ECE:  BTFSC  34.3
2ED0:  BRA    2EEE
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2ED2:  MOVLW  0B
2ED4:  SUBWF  1A,W
2ED6:  CLRF   03
2ED8:  ADDLW  3A
2EDA:  MOVWF  FE9
2EDC:  MOVLW  00
2EDE:  ADDWFC 03,W
2EE0:  MOVWF  FEA
2EE2:  INCF   FEF,F
2EE4:  BSF    34.3
2EE6:  MOVLW  1E
2EE8:  MOVWF  xD6
2EEA:  CALL   08CE
....................          else 
2EEE:  BRA    2EF2
....................             {Flanco = 0;} 
2EF0:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2EF2:  BSF    F96.0
2EF4:  BTFSS  F84.0
2EF6:  BRA    2F1A
....................       {  if(Flanco2 == 0)  
2EF8:  BTFSC  34.5
2EFA:  BRA    2F18
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2EFC:  MOVLW  0B
2EFE:  SUBWF  1A,W
2F00:  CLRF   03
2F02:  ADDLW  3A
2F04:  MOVWF  FE9
2F06:  MOVLW  00
2F08:  ADDWFC 03,W
2F0A:  MOVWF  FEA
2F0C:  DECF   FEF,F
2F0E:  BSF    34.5
2F10:  MOVLW  1E
2F12:  MOVWF  xD6
2F14:  CALL   08CE
....................          else 
2F18:  BRA    2F1C
....................             {Flanco2 = 0;} 
2F1A:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2F1C:  BSF    F96.1
2F1E:  BTFSS  F84.1
2F20:  BRA    2F3C
....................       {  if(Flanco1 == 0)  
2F22:  BTFSC  34.4
2F24:  BRA    2F3A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2F26:  BSF    34.4
2F28:  INCF   1A,F
2F2A:  MOVLW  1E
2F2C:  MOVWF  xD6
2F2E:  CALL   08CE
2F32:  MOVLW  0C
2F34:  MOVWF  xD0
2F36:  CALL   0A1A
....................          else 
2F3A:  BRA    2F3E
....................             {Flanco1 = 0;}    
2F3C:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2F3E:  BSF    F96.2
2F40:  BTFSS  F84.2
2F42:  BRA    2F5E
....................       {  if(Flanco3 == 0)  
2F44:  BTFSC  34.6
2F46:  BRA    2F5C
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2F48:  BSF    34.6
2F4A:  DECF   1A,F
2F4C:  MOVLW  1E
2F4E:  MOVWF  xD6
2F50:  CALL   08CE
2F54:  MOVLW  0C
2F56:  MOVWF  xD0
2F58:  CALL   0A1A
....................          else 
2F5C:  BRA    2F60
....................             {Flanco3 = 0;}     
2F5E:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2F60:  MOVLW  0B
2F62:  SUBWF  1A,W
2F64:  CLRF   03
2F66:  ADDLW  3A
2F68:  MOVWF  FE9
2F6A:  MOVLW  00
2F6C:  ADDWFC 03,W
2F6E:  MOVWF  FEA
2F70:  BTFSC  FEF.7
2F72:  BRA    2F76
2F74:  BRA    2F8A
....................        {clave[unidad-11]=9;} 
2F76:  MOVLW  0B
2F78:  SUBWF  1A,W
2F7A:  CLRF   03
2F7C:  ADDLW  3A
2F7E:  MOVWF  FE9
2F80:  MOVLW  00
2F82:  ADDWFC 03,W
2F84:  MOVWF  FEA
2F86:  MOVLW  09
2F88:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2F8A:  MOVLW  0B
2F8C:  SUBWF  1A,W
2F8E:  CLRF   03
2F90:  ADDLW  3A
2F92:  MOVWF  FE9
2F94:  MOVLW  00
2F96:  ADDWFC 03,W
2F98:  MOVWF  FEA
2F9A:  BTFSC  FEF.7
2F9C:  BRA    2FB6
2F9E:  MOVF   FEF,W
2FA0:  SUBLW  09
2FA2:  BC    2FB6
....................        {clave[unidad-11]=0;} 
2FA4:  MOVLW  0B
2FA6:  SUBWF  1A,W
2FA8:  CLRF   03
2FAA:  ADDLW  3A
2FAC:  MOVWF  FE9
2FAE:  MOVLW  00
2FB0:  ADDWFC 03,W
2FB2:  MOVWF  FEA
2FB4:  CLRF   FEF
....................        if(unidad<11) 
2FB6:  BTFSC  1A.7
2FB8:  BRA    2FC0
2FBA:  MOVF   1A,W
2FBC:  SUBLW  0A
2FBE:  BNC   2FC8
....................        {Menu=5;unidad=11;} 
2FC0:  MOVLW  05
2FC2:  MOVWF  17
2FC4:  MOVLW  0B
2FC6:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2FC8:  MOVFF  1A,D1
2FCC:  MOVLW  04
2FCE:  MOVWF  xD2
2FD0:  CALL   09B8
....................        lcd_putc(t[2]); 
2FD4:  MOVFF  39,D0
2FD8:  CALL   0A1A
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2FDC:  BTFSC  1A.7
2FDE:  BRA    3130
2FE0:  MOVF   1A,W
2FE2:  SUBLW  0E
2FE4:  BTFSC  FD8.0
2FE6:  BRA    3130
....................        { 
....................             lcd_gotoxy(1,1); 
2FE8:  MOVLW  01
2FEA:  MOVWF  xD1
2FEC:  MOVWF  xD2
2FEE:  CALL   09B8
....................             printf(lcd_putc,"                    "); 
2FF2:  MOVLW  FE
2FF4:  MOVWF  FF6
2FF6:  MOVLW  05
2FF8:  MOVWF  FF7
2FFA:  CALL   0ABE
....................             lcd_gotoxy(1,2); 
2FFE:  MOVLW  01
3000:  MOVWF  xD1
3002:  MOVLW  02
3004:  MOVWF  xD2
3006:  CALL   09B8
....................             printf(lcd_putc,"     Contraseña     "); 
300A:  MOVLW  14
300C:  MOVWF  FF6
300E:  MOVLW  06
3010:  MOVWF  FF7
3012:  CALL   0ABE
....................             lcd_gotoxy(1,3); 
3016:  MOVLW  01
3018:  MOVWF  xD1
301A:  MOVLW  03
301C:  MOVWF  xD2
301E:  CALL   09B8
....................             printf(lcd_putc,"     Almacenada     "); 
3022:  MOVLW  2A
3024:  MOVWF  FF6
3026:  MOVLW  06
3028:  MOVWF  FF7
302A:  CALL   0ABE
....................             lcd_gotoxy(1,4); 
302E:  MOVLW  01
3030:  MOVWF  xD1
3032:  MOVLW  04
3034:  MOVWF  xD2
3036:  CALL   09B8
....................             printf(lcd_putc,"                    "); 
303A:  MOVLW  40
303C:  MOVWF  FF6
303E:  MOVLW  06
3040:  MOVWF  FF7
3042:  CALL   0ABE
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3046:  CLRF   FA9
3048:  MOVFF  3A,FA8
304C:  BCF    FA6.6
304E:  BCF    FA6.7
3050:  BSF    FA6.2
3052:  MOVF   FF2,W
3054:  MOVWF  00
3056:  BCF    FF2.7
3058:  MOVLB  F
305A:  MOVLW  55
305C:  MOVWF  FA7
305E:  MOVLW  AA
3060:  MOVWF  FA7
3062:  BSF    FA6.1
3064:  BTFSC  FA6.1
3066:  BRA    3064
3068:  BCF    FA6.2
306A:  MOVF   00,W
306C:  IORWF  FF2,F
306E:  MOVLW  14
3070:  MOVLB  0
3072:  MOVWF  xD6
3074:  CALL   08CE
3078:  MOVLW  01
307A:  MOVWF  FA9
307C:  MOVFF  3B,FA8
3080:  BCF    FA6.6
3082:  BCF    FA6.7
3084:  BSF    FA6.2
3086:  MOVF   FF2,W
3088:  MOVWF  00
308A:  BCF    FF2.7
308C:  MOVLB  F
308E:  MOVLW  55
3090:  MOVWF  FA7
3092:  MOVLW  AA
3094:  MOVWF  FA7
3096:  BSF    FA6.1
3098:  BTFSC  FA6.1
309A:  BRA    3098
309C:  BCF    FA6.2
309E:  MOVF   00,W
30A0:  IORWF  FF2,F
30A2:  MOVLW  14
30A4:  MOVLB  0
30A6:  MOVWF  xD6
30A8:  CALL   08CE
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
30AC:  MOVLW  02
30AE:  MOVWF  FA9
30B0:  MOVFF  3C,FA8
30B4:  BCF    FA6.6
30B6:  BCF    FA6.7
30B8:  BSF    FA6.2
30BA:  MOVF   FF2,W
30BC:  MOVWF  00
30BE:  BCF    FF2.7
30C0:  MOVLB  F
30C2:  MOVLW  55
30C4:  MOVWF  FA7
30C6:  MOVLW  AA
30C8:  MOVWF  FA7
30CA:  BSF    FA6.1
30CC:  BTFSC  FA6.1
30CE:  BRA    30CC
30D0:  BCF    FA6.2
30D2:  MOVF   00,W
30D4:  IORWF  FF2,F
30D6:  MOVLW  14
30D8:  MOVLB  0
30DA:  MOVWF  xD6
30DC:  CALL   08CE
30E0:  MOVLW  03
30E2:  MOVWF  FA9
30E4:  MOVFF  3D,FA8
30E8:  BCF    FA6.6
30EA:  BCF    FA6.7
30EC:  BSF    FA6.2
30EE:  MOVF   FF2,W
30F0:  MOVWF  00
30F2:  BCF    FF2.7
30F4:  MOVLB  F
30F6:  MOVLW  55
30F8:  MOVWF  FA7
30FA:  MOVLW  AA
30FC:  MOVWF  FA7
30FE:  BSF    FA6.1
3100:  BTFSC  FA6.1
3102:  BRA    3100
3104:  BCF    FA6.2
3106:  MOVF   00,W
3108:  IORWF  FF2,F
310A:  MOVLW  14
310C:  MOVLB  0
310E:  MOVWF  xD6
3110:  CALL   08CE
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3114:  MOVLW  02
3116:  MOVWF  xBF
3118:  MOVLW  FA
311A:  MOVWF  xD6
311C:  CALL   08CE
3120:  DECFSZ xBF,F
3122:  BRA    3118
3124:  MOVLW  01
3126:  MOVWF  17
3128:  CLRF   36
312A:  MOVLW  02
312C:  MOVWF  1B
312E:  MOVWF  1D
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
3130:  BTFSC  1A.7
3132:  BRA    315C
3134:  MOVF   1A,W
3136:  SUBLW  0B
3138:  BC    315C
313A:  BTFSC  1A.7
313C:  BRA    3144
313E:  MOVF   1A,W
3140:  SUBLW  0D
3142:  BNC   315C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3144:  MOVLW  01
3146:  SUBWF  1A,W
3148:  MOVWF  xBF
314A:  MOVWF  xD1
314C:  MOVLW  04
314E:  MOVWF  xD2
3150:  CALL   09B8
....................             lcd_putc(t[1]); 
3154:  MOVFF  38,D0
3158:  CALL   0A1A
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de Tiempo de Purga 
315C:  MOVF   17,W
315E:  SUBLW  06
3160:  BTFSS  FD8.2
3162:  BRA    339C
....................    { 
....................       lcd_gotoxy(1,1); 
3164:  MOVLW  01
3166:  MOVWF  xD1
3168:  MOVWF  xD2
316A:  CALL   09B8
....................       printf(lcd_putc,"     Tiempo  de      "); 
316E:  MOVLW  56
3170:  MOVWF  FF6
3172:  MOVLW  06
3174:  MOVWF  FF7
3176:  CALL   0ABE
....................       lcd_gotoxy(1,2); 
317A:  MOVLW  01
317C:  MOVWF  xD1
317E:  MOVLW  02
3180:  MOVWF  xD2
3182:  CALL   09B8
....................       printf(lcd_putc,"       Purga         "); 
3186:  MOVLW  6C
3188:  MOVWF  FF6
318A:  MOVLW  06
318C:  MOVWF  FF7
318E:  CALL   0ABE
....................       lcd_gotoxy(6,3); 
3192:  MOVLW  06
3194:  MOVWF  xD1
3196:  MOVLW  03
3198:  MOVWF  xD2
319A:  CALL   09B8
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
319E:  MOVFF  23,BF
31A2:  MOVLW  01
31A4:  MOVWF  xC0
31A6:  CALL   0CBE
31AA:  MOVLW  3A
31AC:  MOVWF  xD0
31AE:  CALL   0A1A
31B2:  MOVFF  2F,BF
31B6:  MOVLW  01
31B8:  MOVWF  xC0
31BA:  CALL   0CBE
31BE:  MOVLW  8B
31C0:  MOVWF  FF6
31C2:  MOVLW  06
31C4:  MOVWF  FF7
31C6:  MOVLW  08
31C8:  MOVWF  xC3
31CA:  CALL   0ADE
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
31CE:  MOVLW  06
31D0:  ADDWF  21,W
31D2:  MOVWF  xBF
31D4:  MOVWF  xD1
31D6:  MOVLW  04
31D8:  MOVWF  xD2
31DA:  CALL   09B8
....................       lcd_putc(t[2]); 
31DE:  MOVFF  39,D0
31E2:  CALL   0A1A
....................        
....................       if(unidad2<1) 
31E6:  BTFSC  21.7
31E8:  BRA    31F0
31EA:  MOVF   21,W
31EC:  SUBLW  00
31EE:  BNC   31F4
....................          unidad2=1; 
31F0:  MOVLW  01
31F2:  MOVWF  21
....................       if(unidad2>3) 
31F4:  BTFSC  21.7
31F6:  BRA    3202
31F8:  MOVF   21,W
31FA:  SUBLW  03
31FC:  BC    3202
....................          unidad2=3;    
31FE:  MOVLW  03
3200:  MOVWF  21
....................        
....................       if(UP) 
3202:  BSF    F92.5
3204:  BTFSS  F80.5
3206:  BRA    324E
....................       { 
....................          if(unidad2==1) 
3208:  DECFSZ 21,W
320A:  BRA    322A
....................          { 
....................             purga_minutos_pro++; 
320C:  INCF   23,F
....................             if(purga_minutos_pro>59) 
320E:  BTFSC  23.7
3210:  BRA    321A
3212:  MOVF   23,W
3214:  SUBLW  3B
3216:  BC    321A
....................                purga_minutos_pro=0; 
3218:  CLRF   23
....................                 
....................             delay_ms(300); 
321A:  MOVLW  02
321C:  MOVWF  xBF
321E:  MOVLW  96
3220:  MOVWF  xD6
3222:  CALL   08CE
3226:  DECFSZ xBF,F
3228:  BRA    321E
....................              
....................          } 
....................           
....................          if(unidad2==3) 
322A:  MOVF   21,W
322C:  SUBLW  03
322E:  BNZ   324E
....................          { 
....................             purga_segundos_pro++; 
3230:  INCF   2F,F
....................             if(purga_segundos_pro>59) 
3232:  BTFSC  2F.7
3234:  BRA    323E
3236:  MOVF   2F,W
3238:  SUBLW  3B
323A:  BC    323E
....................                purga_segundos_pro=0; 
323C:  CLRF   2F
....................                 
....................             delay_ms(300); 
323E:  MOVLW  02
3240:  MOVWF  xBF
3242:  MOVLW  96
3244:  MOVWF  xD6
3246:  CALL   08CE
324A:  DECFSZ xBF,F
324C:  BRA    3242
....................          } 
....................       } 
....................        
....................       if(DOWN) 
324E:  BSF    F96.0
3250:  BTFSS  F84.0
3252:  BRA    3296
....................       { 
....................          if(unidad2==1) 
3254:  DECFSZ 21,W
3256:  BRA    3274
....................          { 
....................             purga_minutos_pro--; 
3258:  DECF   23,F
....................             if(purga_minutos_pro<0) 
325A:  BTFSC  23.7
325C:  BRA    3260
325E:  BRA    3264
....................                purga_minutos_pro=59; 
3260:  MOVLW  3B
3262:  MOVWF  23
....................                 
....................             delay_ms(300); 
3264:  MOVLW  02
3266:  MOVWF  xBF
3268:  MOVLW  96
326A:  MOVWF  xD6
326C:  CALL   08CE
3270:  DECFSZ xBF,F
3272:  BRA    3268
....................          } 
....................           
....................          if(unidad2==3) 
3274:  MOVF   21,W
3276:  SUBLW  03
3278:  BNZ   3296
....................          { 
....................             purga_segundos_pro--; 
327A:  DECF   2F,F
....................             if(purga_segundos_pro<0) 
327C:  BTFSC  2F.7
327E:  BRA    3282
3280:  BRA    3286
....................                purga_segundos_pro=59; 
3282:  MOVLW  3B
3284:  MOVWF  2F
....................                 
....................             delay_ms(300); 
3286:  MOVLW  02
3288:  MOVWF  xBF
328A:  MOVLW  96
328C:  MOVWF  xD6
328E:  CALL   08CE
3292:  DECFSZ xBF,F
3294:  BRA    328A
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
3296:  BSF    F96.1
3298:  BTFSS  F84.1
329A:  BRA    32CE
....................       { 
....................          if(unidad2==1) 
329C:  DECFSZ 21,W
329E:  BRA    32A6
....................          { 
....................             unidad2=3; 
32A0:  MOVLW  03
32A2:  MOVWF  21
....................          } 
....................          else 
32A4:  BRA    32B6
....................          { 
....................             if(unidad2==3) 
32A6:  MOVF   21,W
32A8:  SUBLW  03
32AA:  BNZ   32B2
....................             { 
....................                unidad2=1; 
32AC:  MOVLW  01
32AE:  MOVWF  21
....................             } 
....................             else 
32B0:  BRA    32B6
....................             { 
....................                unidad2=3; 
32B2:  MOVLW  03
32B4:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
32B6:  MOVLW  02
32B8:  MOVWF  xBF
32BA:  MOVLW  FA
32BC:  MOVWF  xD6
32BE:  CALL   08CE
32C2:  DECFSZ xBF,F
32C4:  BRA    32BA
....................          printf(lcd_putc,"\f"); 
32C6:  MOVLW  0C
32C8:  MOVWF  xD0
32CA:  CALL   0A1A
....................       } 
....................        
....................       if(LEFT) 
32CE:  BSF    F96.2
32D0:  BTFSS  F84.2
32D2:  BRA    339C
....................       { 
....................          delay_ms(200); 
32D4:  MOVLW  C8
32D6:  MOVWF  xD6
32D8:  CALL   08CE
....................          printf(lcd_putc,"\f"); 
32DC:  MOVLW  0C
32DE:  MOVWF  xD0
32E0:  CALL   0A1A
....................          lcd_gotoxy(1,2); 
32E4:  MOVLW  01
32E6:  MOVWF  xD1
32E8:  MOVLW  02
32EA:  MOVWF  xD2
32EC:  CALL   09B8
....................          printf(lcd_putc,"Tiempo Almacenado"); 
32F0:  MOVLW  94
32F2:  MOVWF  FF6
32F4:  MOVLW  06
32F6:  MOVWF  FF7
32F8:  CALL   0ABE
....................          lcd_gotoxy(1,3); 
32FC:  MOVLW  01
32FE:  MOVWF  xD1
3300:  MOVLW  03
3302:  MOVWF  xD2
3304:  CALL   09B8
....................          printf(lcd_putc,"  Correctamente  "); 
3308:  MOVLW  A6
330A:  MOVWF  FF6
330C:  MOVLW  06
330E:  MOVWF  FF7
3310:  CALL   0ABE
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
3314:  MOVLW  14
3316:  MOVWF  FA9
3318:  MOVFF  23,FA8
331C:  BCF    FA6.6
331E:  BCF    FA6.7
3320:  BSF    FA6.2
3322:  MOVF   FF2,W
3324:  MOVWF  00
3326:  BCF    FF2.7
3328:  MOVLB  F
332A:  MOVLW  55
332C:  MOVWF  FA7
332E:  MOVLW  AA
3330:  MOVWF  FA7
3332:  BSF    FA6.1
3334:  BTFSC  FA6.1
3336:  BRA    3334
3338:  BCF    FA6.2
333A:  MOVF   00,W
333C:  IORWF  FF2,F
333E:  MOVLW  15
3340:  MOVWF  FA9
3342:  MOVFF  2F,FA8
3346:  BCF    FA6.6
3348:  BCF    FA6.7
334A:  BSF    FA6.2
334C:  MOVF   FF2,W
334E:  MOVWF  00
3350:  BCF    FF2.7
3352:  MOVLW  55
3354:  MOVWF  FA7
3356:  MOVLW  AA
3358:  MOVWF  FA7
335A:  BSF    FA6.1
335C:  BTFSC  FA6.1
335E:  BRA    335C
3360:  BCF    FA6.2
3362:  MOVF   00,W
3364:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
3366:  MOVFF  23,22
336A:  MOVFF  2F,2E
....................          delay_ms(700); 
336E:  MOVLW  04
3370:  MOVLB  0
3372:  MOVWF  xBF
3374:  MOVLW  AF
3376:  MOVWF  xD6
3378:  CALL   08CE
337C:  DECFSZ xBF,F
337E:  BRA    3374
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3380:  MOVLW  1E
3382:  MOVWF  xD6
3384:  CALL   08CE
3388:  MOVLW  01
338A:  MOVWF  17
338C:  CLRF   36
338E:  MOVLW  02
3390:  MOVWF  1B
3392:  MOVWF  1D
3394:  MOVLW  0C
3396:  MOVWF  xD0
3398:  CALL   0A1A
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de Tiempo de Post-Purga 
339C:  MOVF   17,W
339E:  SUBLW  07
33A0:  BTFSS  FD8.2
33A2:  BRA    35D6
....................    { 
....................       lcd_gotoxy(1,1); 
33A4:  MOVLW  01
33A6:  MOVWF  xD1
33A8:  MOVWF  xD2
33AA:  CALL   09B8
....................       printf(lcd_putc,"     Tiempo  de      "); 
33AE:  MOVLW  B8
33B0:  MOVWF  FF6
33B2:  MOVLW  06
33B4:  MOVWF  FF7
33B6:  CALL   0ABE
....................       lcd_gotoxy(1,2); 
33BA:  MOVLW  01
33BC:  MOVWF  xD1
33BE:  MOVLW  02
33C0:  MOVWF  xD2
33C2:  CALL   09B8
....................       printf(lcd_putc,"     Post-Purga      "); 
33C6:  MOVLW  CE
33C8:  MOVWF  FF6
33CA:  MOVLW  06
33CC:  MOVWF  FF7
33CE:  CALL   0ABE
....................       lcd_gotoxy(6,3); 
33D2:  MOVLW  06
33D4:  MOVWF  xD1
33D6:  MOVLW  03
33D8:  MOVWF  xD2
33DA:  CALL   09B8
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
33DE:  MOVFF  33,BF
33E2:  MOVLW  01
33E4:  MOVWF  xC0
33E6:  CALL   0CBE
33EA:  MOVLW  3A
33EC:  MOVWF  xD0
33EE:  CALL   0A1A
33F2:  MOVFF  31,BF
33F6:  MOVLW  01
33F8:  MOVWF  xC0
33FA:  CALL   0CBE
33FE:  MOVLW  ED
3400:  MOVWF  FF6
3402:  MOVLW  06
3404:  MOVWF  FF7
3406:  MOVLW  08
3408:  MOVWF  xC3
340A:  CALL   0ADE
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
340E:  MOVLW  06
3410:  ADDWF  21,W
3412:  MOVWF  xBF
3414:  MOVWF  xD1
3416:  MOVLW  04
3418:  MOVWF  xD2
341A:  CALL   09B8
....................       lcd_putc(t[2]); 
341E:  MOVFF  39,D0
3422:  CALL   0A1A
....................       if(unidad2<1) 
3426:  BTFSC  21.7
3428:  BRA    3430
342A:  MOVF   21,W
342C:  SUBLW  00
342E:  BNC   3434
....................          unidad2=1; 
3430:  MOVLW  01
3432:  MOVWF  21
....................       if(unidad2>3) 
3434:  BTFSC  21.7
3436:  BRA    3442
3438:  MOVF   21,W
343A:  SUBLW  03
343C:  BC    3442
....................          unidad2=3;    
343E:  MOVLW  03
3440:  MOVWF  21
....................        
....................       if(UP) 
3442:  BSF    F92.5
3444:  BTFSS  F80.5
3446:  BRA    348E
....................       { 
....................          if(unidad2==1) 
3448:  DECFSZ 21,W
344A:  BRA    346A
....................          { 
....................             ppurga_minutos_pro++; 
344C:  INCF   33,F
....................             if(ppurga_minutos_pro>59) 
344E:  BTFSC  33.7
3450:  BRA    345A
3452:  MOVF   33,W
3454:  SUBLW  3B
3456:  BC    345A
....................                ppurga_minutos_pro=0; 
3458:  CLRF   33
....................                 
....................             delay_ms(300); 
345A:  MOVLW  02
345C:  MOVWF  xBF
345E:  MOVLW  96
3460:  MOVWF  xD6
3462:  CALL   08CE
3466:  DECFSZ xBF,F
3468:  BRA    345E
....................              
....................          } 
....................           
....................          if(unidad2==3) 
346A:  MOVF   21,W
346C:  SUBLW  03
346E:  BNZ   348E
....................          { 
....................             ppurga_segundos_pro++; 
3470:  INCF   31,F
....................             if(ppurga_segundos_pro>59) 
3472:  BTFSC  31.7
3474:  BRA    347E
3476:  MOVF   31,W
3478:  SUBLW  3B
347A:  BC    347E
....................                ppurga_segundos_pro=0; 
347C:  CLRF   31
....................                 
....................             delay_ms(300); 
347E:  MOVLW  02
3480:  MOVWF  xBF
3482:  MOVLW  96
3484:  MOVWF  xD6
3486:  CALL   08CE
348A:  DECFSZ xBF,F
348C:  BRA    3482
....................          } 
....................       } 
....................        
....................       if(DOWN) 
348E:  BSF    F96.0
3490:  BTFSS  F84.0
3492:  BRA    34D6
....................       { 
....................          if(unidad2==1) 
3494:  DECFSZ 21,W
3496:  BRA    34B4
....................          { 
....................             ppurga_minutos_pro--; 
3498:  DECF   33,F
....................             if(ppurga_minutos_pro<0) 
349A:  BTFSC  33.7
349C:  BRA    34A0
349E:  BRA    34A4
....................                ppurga_minutos_pro=59; 
34A0:  MOVLW  3B
34A2:  MOVWF  33
....................                 
....................             delay_ms(300); 
34A4:  MOVLW  02
34A6:  MOVWF  xBF
34A8:  MOVLW  96
34AA:  MOVWF  xD6
34AC:  CALL   08CE
34B0:  DECFSZ xBF,F
34B2:  BRA    34A8
....................          } 
....................           
....................          if(unidad2==3) 
34B4:  MOVF   21,W
34B6:  SUBLW  03
34B8:  BNZ   34D6
....................          { 
....................             ppurga_segundos_pro--; 
34BA:  DECF   31,F
....................             if(ppurga_segundos_pro<0) 
34BC:  BTFSC  31.7
34BE:  BRA    34C2
34C0:  BRA    34C6
....................                ppurga_segundos_pro=59; 
34C2:  MOVLW  3B
34C4:  MOVWF  31
....................                 
....................             delay_ms(300); 
34C6:  MOVLW  02
34C8:  MOVWF  xBF
34CA:  MOVLW  96
34CC:  MOVWF  xD6
34CE:  CALL   08CE
34D2:  DECFSZ xBF,F
34D4:  BRA    34CA
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
34D6:  BSF    F96.1
34D8:  BTFSS  F84.1
34DA:  BRA    3508
....................       { 
....................          if(unidad2==1) 
34DC:  DECFSZ 21,W
34DE:  BRA    34E6
....................          { 
....................             unidad2=3; 
34E0:  MOVLW  03
34E2:  MOVWF  21
....................          } 
....................          else 
34E4:  BRA    34F0
....................          { 
....................             if(unidad2==3) 
34E6:  MOVF   21,W
34E8:  SUBLW  03
34EA:  BNZ   34F0
....................             { 
....................                unidad2=1; 
34EC:  MOVLW  01
34EE:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
34F0:  MOVLW  02
34F2:  MOVWF  xBF
34F4:  MOVLW  FA
34F6:  MOVWF  xD6
34F8:  CALL   08CE
34FC:  DECFSZ xBF,F
34FE:  BRA    34F4
....................          printf(lcd_putc,"\f"); 
3500:  MOVLW  0C
3502:  MOVWF  xD0
3504:  CALL   0A1A
....................       } 
....................        
....................       if(LEFT) 
3508:  BSF    F96.2
350A:  BTFSS  F84.2
350C:  BRA    35D6
....................       { 
....................          delay_ms(200); 
350E:  MOVLW  C8
3510:  MOVWF  xD6
3512:  CALL   08CE
....................          printf(lcd_putc,"\f"); 
3516:  MOVLW  0C
3518:  MOVWF  xD0
351A:  CALL   0A1A
....................          lcd_gotoxy(1,2); 
351E:  MOVLW  01
3520:  MOVWF  xD1
3522:  MOVLW  02
3524:  MOVWF  xD2
3526:  CALL   09B8
....................          printf(lcd_putc,"Tiempo Almacenado"); 
352A:  MOVLW  F6
352C:  MOVWF  FF6
352E:  MOVLW  06
3530:  MOVWF  FF7
3532:  CALL   0ABE
....................          lcd_gotoxy(1,3); 
3536:  MOVLW  01
3538:  MOVWF  xD1
353A:  MOVLW  03
353C:  MOVWF  xD2
353E:  CALL   09B8
....................          printf(lcd_putc,"  Correctamente  "); 
3542:  MOVLW  08
3544:  MOVWF  FF6
3546:  MOVLW  07
3548:  MOVWF  FF7
354A:  CALL   0ABE
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
354E:  MOVLW  16
3550:  MOVWF  FA9
3552:  MOVFF  33,FA8
3556:  BCF    FA6.6
3558:  BCF    FA6.7
355A:  BSF    FA6.2
355C:  MOVF   FF2,W
355E:  MOVWF  00
3560:  BCF    FF2.7
3562:  MOVLB  F
3564:  MOVLW  55
3566:  MOVWF  FA7
3568:  MOVLW  AA
356A:  MOVWF  FA7
356C:  BSF    FA6.1
356E:  BTFSC  FA6.1
3570:  BRA    356E
3572:  BCF    FA6.2
3574:  MOVF   00,W
3576:  IORWF  FF2,F
3578:  MOVLW  17
357A:  MOVWF  FA9
357C:  MOVFF  31,FA8
3580:  BCF    FA6.6
3582:  BCF    FA6.7
3584:  BSF    FA6.2
3586:  MOVF   FF2,W
3588:  MOVWF  00
358A:  BCF    FF2.7
358C:  MOVLW  55
358E:  MOVWF  FA7
3590:  MOVLW  AA
3592:  MOVWF  FA7
3594:  BSF    FA6.1
3596:  BTFSC  FA6.1
3598:  BRA    3596
359A:  BCF    FA6.2
359C:  MOVF   00,W
359E:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
35A0:  MOVFF  33,32
35A4:  MOVFF  31,30
....................          delay_ms(700); 
35A8:  MOVLW  04
35AA:  MOVLB  0
35AC:  MOVWF  xBF
35AE:  MOVLW  AF
35B0:  MOVWF  xD6
35B2:  CALL   08CE
35B6:  DECFSZ xBF,F
35B8:  BRA    35AE
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
35BA:  MOVLW  1E
35BC:  MOVWF  xD6
35BE:  CALL   08CE
35C2:  MOVLW  01
35C4:  MOVWF  17
35C6:  CLRF   36
35C8:  MOVLW  02
35CA:  MOVWF  1B
35CC:  MOVWF  1D
35CE:  MOVLW  0C
35D0:  MOVWF  xD0
35D2:  CALL   0A1A
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8){ // Menu de Punto Cero 
35D6:  MOVF   17,W
35D8:  SUBLW  08
35DA:  BTFSS  FD8.2
35DC:  BRA    37F8
....................       lcd_gotoxy(1,1); 
35DE:  MOVLW  01
35E0:  MOVWF  xD1
35E2:  MOVWF  xD2
35E4:  CALL   09B8
....................       printf(lcd_putc,"  Zero Point Config "); 
35E8:  MOVLW  1A
35EA:  MOVWF  FF6
35EC:  MOVLW  07
35EE:  MOVWF  FF7
35F0:  CALL   0ABE
....................       lcd_gotoxy(1,2); 
35F4:  MOVLW  01
35F6:  MOVWF  xD1
35F8:  MOVLW  02
35FA:  MOVWF  xD2
35FC:  CALL   09B8
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3600:  MOVLW  05
3602:  MOVWF  xBF
3604:  CALL   1516
3608:  MOVFF  00,BF
360C:  MOVFF  01,C0
3610:  MOVFF  02,C1
3614:  MOVFF  03,C2
3618:  MOVFF  03,D6
361C:  MOVFF  02,D5
3620:  MOVFF  01,D4
3624:  MOVFF  00,D3
3628:  MOVLW  D7
362A:  MOVWF  xDA
362C:  MOVLW  A3
362E:  MOVWF  xD9
3630:  CLRF   xD8
3632:  MOVLW  81
3634:  MOVWF  xD7
3636:  CALL   0D24
363A:  MOVFF  00,BF
363E:  MOVFF  01,C0
3642:  MOVFF  02,C1
3646:  MOVFF  03,C2
364A:  MOVLW  30
364C:  MOVWF  FF6
364E:  MOVLW  07
3650:  MOVWF  FF7
3652:  MOVLW  09
3654:  MOVWF  xC3
3656:  CALL   0ADE
365A:  MOVLW  02
365C:  MOVWF  FE9
365E:  MOVFF  C2,C6
3662:  MOVFF  C1,C5
3666:  MOVFF  C0,C4
366A:  MOVFF  BF,C3
366E:  MOVWF  xC7
3670:  CALL   0ED0
3674:  MOVLW  3E
3676:  MOVWF  FF6
3678:  MOVLW  07
367A:  MOVWF  FF7
367C:  MOVLW  07
367E:  MOVWF  xC3
3680:  CALL   0ADE
....................       lcd_gotoxy(1,3); 
3684:  MOVLW  01
3686:  MOVWF  xD1
3688:  MOVLW  03
368A:  MOVWF  xD2
368C:  CALL   09B8
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3690:  CLRF   xC4
3692:  CALL   1366
3696:  MOVFF  00,BF
369A:  MOVFF  01,C0
369E:  MOVFF  02,C1
36A2:  MOVFF  03,C2
36A6:  MOVLW  46
36A8:  MOVWF  FF6
36AA:  MOVLW  07
36AC:  MOVWF  FF7
36AE:  MOVLW  08
36B0:  MOVWF  xC3
36B2:  CALL   0ADE
36B6:  MOVLW  01
36B8:  MOVWF  FE9
36BA:  MOVFF  C2,C6
36BE:  MOVFF  C1,C5
36C2:  MOVFF  C0,C4
36C6:  MOVFF  BF,C3
36CA:  CLRF   xC7
36CC:  CALL   0ED0
....................       lcd_gotoxy(1,4); 
36D0:  MOVLW  01
36D2:  MOVWF  xD1
36D4:  MOVLW  04
36D6:  MOVWF  xD2
36D8:  CALL   09B8
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
36DC:  MOVLW  54
36DE:  MOVWF  FF6
36E0:  MOVLW  07
36E2:  MOVWF  FF7
36E4:  MOVLW  07
36E6:  MOVWF  xC3
36E8:  CALL   0ADE
36EC:  MOVLW  01
36EE:  MOVWF  FE9
36F0:  MOVFF  5B,C6
36F4:  MOVFF  5A,C5
36F8:  MOVFF  59,C4
36FC:  MOVFF  58,C3
3700:  CLRF   xC7
3702:  CALL   0ED0
....................      
....................       if(RIGHT)// Si oprime derecha 
3706:  BSF    F96.1
3708:  BTFSS  F84.1
370A:  BRA    37C8
....................       {  if(Flanco1 == 0)  
370C:  BTFSC  34.4
370E:  BRA    37C6
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3710:  MOVLW  01
3712:  MOVWF  17
3714:  CLRF   36
3716:  MOVLW  02
3718:  MOVWF  1B
371A:  MOVWF  1D
371C:  MOVLW  0B
371E:  MOVWF  1A
3720:  MOVLW  02
3722:  MOVWF  xBF
3724:  MOVLW  FA
3726:  MOVWF  xD6
3728:  CALL   08CE
372C:  DECFSZ xBF,F
372E:  BRA    3724
3730:  MOVLW  0C
3732:  MOVWF  xD0
3734:  CALL   0A1A
....................             G=sensores(0); 
3738:  CLRF   xC4
373A:  CALL   1366
373E:  MOVFF  03,5B
3742:  MOVFF  02,5A
3746:  MOVFF  01,59
374A:  MOVFF  00,58
....................             G16=(int16)G; 
374E:  MOVFF  5B,D6
3752:  MOVFF  5A,D5
3756:  MOVFF  59,D4
375A:  MOVFF  58,D3
375E:  CALL   132E
3762:  MOVFF  02,6C
3766:  MOVFF  01,6B
....................             G_l=G16; G_h=(G16>>8); 
376A:  MOVFF  6B,45
376E:  MOVFF  6C,46
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
3772:  MOVLW  3C
3774:  MOVWF  FA9
3776:  MOVFF  45,FA8
377A:  BCF    FA6.6
377C:  BCF    FA6.7
377E:  BSF    FA6.2
3780:  MOVF   FF2,W
3782:  MOVWF  00
3784:  BCF    FF2.7
3786:  MOVLB  F
3788:  MOVLW  55
378A:  MOVWF  FA7
378C:  MOVLW  AA
378E:  MOVWF  FA7
3790:  BSF    FA6.1
3792:  BTFSC  FA6.1
3794:  BRA    3792
3796:  BCF    FA6.2
3798:  MOVF   00,W
379A:  IORWF  FF2,F
379C:  MOVLW  3D
379E:  MOVWF  FA9
37A0:  MOVFF  46,FA8
37A4:  BCF    FA6.6
37A6:  BCF    FA6.7
37A8:  BSF    FA6.2
37AA:  MOVF   FF2,W
37AC:  MOVWF  00
37AE:  BCF    FF2.7
37B0:  MOVLW  55
37B2:  MOVWF  FA7
37B4:  MOVLW  AA
37B6:  MOVWF  FA7
37B8:  BSF    FA6.1
37BA:  BTFSC  FA6.1
37BC:  BRA    37BA
37BE:  BCF    FA6.2
37C0:  MOVF   00,W
37C2:  IORWF  FF2,F
37C4:  MOVLB  0
....................             }} 
....................          else 
37C6:  BRA    37CA
....................             {Flanco1 = 0;}    
37C8:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
37CA:  BSF    F96.2
37CC:  BTFSS  F84.2
37CE:  BRA    37F6
....................       {  if(Flanco3 == 0)  
37D0:  BTFSC  34.6
37D2:  BRA    37F4
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
37D4:  MOVLW  01
37D6:  MOVWF  17
37D8:  CLRF   36
37DA:  MOVLW  02
37DC:  MOVWF  1B
37DE:  MOVWF  1D
37E0:  MOVLW  0B
37E2:  MOVWF  1A
37E4:  MOVLW  1E
37E6:  MOVWF  xD6
37E8:  CALL   08CE
37EC:  MOVLW  0C
37EE:  MOVWF  xD0
37F0:  CALL   0A1A
....................          else 
37F4:  BRA    37F8
....................             {Flanco3 = 0;}   
37F6:  BCF    34.6
....................       } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
37F8:  MOVF   17,W
37FA:  SUBLW  14
37FC:  BTFSS  FD8.2
37FE:  BRA    3B72
....................    { 
....................       if(Lectura2==1) 
3800:  BTFSS  35.6
3802:  BRA    384C
....................       { 
....................       lcd_gotoxy(1,1);                      
3804:  MOVLW  01
3806:  MOVWF  xD1
3808:  MOVWF  xD2
380A:  CALL   09B8
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
380E:  MOVLW  62
3810:  MOVWF  FF6
3812:  MOVLW  07
3814:  MOVWF  FF7
3816:  CALL   0ABE
....................       lcd_gotoxy(1,3); 
381A:  MOVLW  01
381C:  MOVWF  xD1
381E:  MOVLW  03
3820:  MOVWF  xD2
3822:  CALL   09B8
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
3826:  MOVLW  6C
3828:  MOVWF  FF6
382A:  MOVLW  07
382C:  MOVWF  FF7
382E:  CALL   0ABE
....................       CaidaPresion=Leer_Sensor_Presion(5); 
3832:  MOVLW  05
3834:  MOVWF  xBF
3836:  CALL   1516
383A:  MOVFF  03,5F
383E:  MOVFF  02,5E
3842:  MOVFF  01,5D
3846:  MOVFF  00,5C
....................       Lectura2=0; 
384A:  BCF    35.6
....................       } 
....................       lcd_gotoxy(1,2); 
384C:  MOVLW  01
384E:  MOVWF  xD1
3850:  MOVLW  02
3852:  MOVWF  xD2
3854:  CALL   09B8
....................       printf(lcd_putc,"Satura:"); 
3858:  MOVLW  7C
385A:  MOVWF  FF6
385C:  MOVLW  07
385E:  MOVWF  FF7
3860:  CALL   0ABE
....................       Saturacion=(CaidaPresion/0.37)*11; 
3864:  MOVFF  5F,D6
3868:  MOVFF  5E,D5
386C:  MOVFF  5D,D4
3870:  MOVFF  5C,D3
3874:  MOVLW  A4
3876:  MOVWF  xDA
3878:  MOVLW  70
387A:  MOVWF  xD9
387C:  MOVLW  3D
387E:  MOVWF  xD8
3880:  MOVLW  7D
3882:  MOVWF  xD7
3884:  CALL   13BC
3888:  MOVFF  00,BF
388C:  MOVFF  01,C0
3890:  MOVFF  02,C1
3894:  MOVFF  03,C2
3898:  MOVFF  03,D6
389C:  MOVFF  02,D5
38A0:  MOVFF  01,D4
38A4:  MOVFF  00,D3
38A8:  CLRF   xDA
38AA:  CLRF   xD9
38AC:  MOVLW  30
38AE:  MOVWF  xD8
38B0:  MOVLW  82
38B2:  MOVWF  xD7
38B4:  CALL   0D24
38B8:  MOVFF  03,63
38BC:  MOVFF  02,62
38C0:  MOVFF  01,61
38C4:  MOVFF  00,60
....................       if(Saturacion>11) 
38C8:  CLRF   xD6
38CA:  CLRF   xD5
38CC:  MOVLW  30
38CE:  MOVWF  xD4
38D0:  MOVLW  82
38D2:  MOVWF  xD3
38D4:  MOVFF  63,DA
38D8:  MOVFF  62,D9
38DC:  MOVFF  61,D8
38E0:  MOVFF  60,D7
38E4:  CALL   104E
38E8:  BNC   38F6
....................       { 
....................          Saturacion=11; 
38EA:  CLRF   x63
38EC:  CLRF   x62
38EE:  MOVLW  30
38F0:  MOVWF  x61
38F2:  MOVLW  82
38F4:  MOVWF  x60
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
38F6:  CLRF   44
38F8:  MOVFF  63,C2
38FC:  MOVFF  62,C1
3900:  MOVFF  61,C0
3904:  MOVFF  60,BF
3908:  CALL   19DA
390C:  MOVFF  00,BF
3910:  MOVFF  01,C0
3914:  MOVFF  02,C1
3918:  MOVFF  03,C2
391C:  CLRF   xD8
391E:  MOVFF  44,D7
3922:  CALL   0A78
3926:  MOVFF  03,D6
392A:  MOVFF  02,D5
392E:  MOVFF  01,D4
3932:  MOVFF  00,D3
3936:  MOVFF  C2,DA
393A:  MOVFF  C1,D9
393E:  MOVFF  C0,D8
3942:  MOVFF  BF,D7
3946:  CALL   104E
394A:  BNC   3968
....................       { 
....................          lcd_gotoxy(i+8,2); 
394C:  MOVLW  08
394E:  ADDWF  44,W
3950:  MOVWF  xBF
3952:  MOVWF  xD1
3954:  MOVLW  02
3956:  MOVWF  xD2
3958:  CALL   09B8
....................          printf(lcd_putc,"Ñ"); 
395C:  MOVLW  D1
395E:  MOVWF  xD0
3960:  CALL   0A1A
....................       } 
3964:  INCF   44,F
3966:  BRA    38F8
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3968:  MOVFF  63,C2
396C:  MOVFF  62,C1
3970:  MOVFF  61,C0
3974:  MOVFF  60,BF
3978:  CALL   19DA
397C:  MOVFF  03,D6
3980:  MOVFF  02,D5
3984:  MOVFF  01,D4
3988:  MOVFF  00,D3
398C:  CALL   132E
3990:  MOVFF  01,44
3994:  MOVF   44,W
3996:  SUBLW  0A
3998:  BNC   39B6
....................       { 
....................          lcd_gotoxy(i+8,2); 
399A:  MOVLW  08
399C:  ADDWF  44,W
399E:  MOVWF  xBF
39A0:  MOVWF  xD1
39A2:  MOVLW  02
39A4:  MOVWF  xD2
39A6:  CALL   09B8
....................          printf(lcd_putc," "); 
39AA:  MOVLW  20
39AC:  MOVWF  xD0
39AE:  CALL   0A1A
....................       } 
39B2:  INCF   44,F
39B4:  BRA    3994
....................        
....................       if(flag_filtro==1) 
39B6:  BTFSS  35.1
39B8:  BRA    3A24
....................       { 
....................          if(horas>=setpoint) 
39BA:  CLRF   xC1
39BC:  MOVFF  2C,C0
39C0:  BTFSC  xC0.7
39C2:  DECF   xC1,F
39C4:  CALL   19F0
39C8:  MOVFF  4B,D6
39CC:  MOVFF  4A,D5
39D0:  MOVFF  49,D4
39D4:  MOVFF  48,D3
39D8:  MOVFF  03,DA
39DC:  MOVFF  02,D9
39E0:  MOVFF  01,D8
39E4:  MOVFF  00,D7
39E8:  CALL   104E
39EC:  BC    39F0
39EE:  BNZ   3A0A
....................          { 
....................             lcd_gotoxy(10,1);                      
39F0:  MOVLW  0A
39F2:  MOVWF  xD1
39F4:  MOVLW  01
39F6:  MOVWF  xD2
39F8:  CALL   09B8
....................             printf(lcd_putc,"Filtro:CAM"); 
39FC:  MOVLW  84
39FE:  MOVWF  FF6
3A00:  MOVLW  07
3A02:  MOVWF  FF7
3A04:  CALL   0ABE
....................          } 
....................          else 
3A08:  BRA    3A22
....................          { 
....................             lcd_gotoxy(10,1);                      
3A0A:  MOVLW  0A
3A0C:  MOVWF  xD1
3A0E:  MOVLW  01
3A10:  MOVWF  xD2
3A12:  CALL   09B8
....................             printf(lcd_putc,"Filtro:OK "); 
3A16:  MOVLW  90
3A18:  MOVWF  FF6
3A1A:  MOVLW  07
3A1C:  MOVWF  FF7
3A1E:  CALL   0ABE
....................          } 
....................       } 
....................       else 
3A22:  BRA    3A3C
....................       { 
....................          lcd_gotoxy(10,1);                      
3A24:  MOVLW  0A
3A26:  MOVWF  xD1
3A28:  MOVLW  01
3A2A:  MOVWF  xD2
3A2C:  CALL   09B8
....................          printf(lcd_putc,"Filtro:---"); 
3A30:  MOVLW  9C
3A32:  MOVWF  FF6
3A34:  MOVLW  07
3A36:  MOVWF  FF7
3A38:  CALL   0ABE
....................       } 
....................           
....................             
....................       if(estadofl==1) 
3A3C:  BTFSS  34.0
3A3E:  BRA    3A5E
....................       { 
....................          Luz_Blanca_on; 
3A40:  BSF    F8C.2
3A42:  BCF    F95.2
....................          lcd_gotoxy(1,4); 
3A44:  MOVLW  01
3A46:  MOVWF  xD1
3A48:  MOVLW  04
3A4A:  MOVWF  xD2
3A4C:  CALL   09B8
....................          printf(lcd_putc,"Luz:ON "); 
3A50:  MOVLW  A8
3A52:  MOVWF  FF6
3A54:  MOVLW  07
3A56:  MOVWF  FF7
3A58:  CALL   0ABE
....................       } 
....................       else 
3A5C:  BRA    3A7A
....................       { 
....................          Luz_Blanca_off; 
3A5E:  BCF    F8C.2
3A60:  BCF    F95.2
....................          lcd_gotoxy(1,4); 
3A62:  MOVLW  01
3A64:  MOVWF  xD1
3A66:  MOVLW  04
3A68:  MOVWF  xD2
3A6A:  CALL   09B8
....................          printf(lcd_putc,"Luz:OFF "); 
3A6E:  MOVLW  B0
3A70:  MOVWF  FF6
3A72:  MOVLW  07
3A74:  MOVWF  FF7
3A76:  CALL   0ABE
....................       } 
....................        
....................       if(estadomv==1) 
3A7A:  BTFSS  34.1
3A7C:  BRA    3A98
....................       { 
....................          lcd_gotoxy(10,4); 
3A7E:  MOVLW  0A
3A80:  MOVWF  xD1
3A82:  MOVLW  04
3A84:  MOVWF  xD2
3A86:  CALL   09B8
....................          printf(lcd_putc,"Motor:ON "); 
3A8A:  MOVLW  BA
3A8C:  MOVWF  FF6
3A8E:  MOVLW  07
3A90:  MOVWF  FF7
3A92:  CALL   0ABE
....................       } 
....................       else 
3A96:  BRA    3AB8
....................       { 
....................          if(iniciodamper==1) 
3A98:  BTFSS  x64.0
3A9A:  BRA    3AA0
....................          { 
....................             Motor_off;      
3A9C:  BCF    F8C.3
3A9E:  BCF    F95.3
....................          } 
....................          lcd_gotoxy(10,4); 
3AA0:  MOVLW  0A
3AA2:  MOVWF  xD1
3AA4:  MOVLW  04
3AA6:  MOVWF  xD2
3AA8:  CALL   09B8
....................          printf(lcd_putc,"Motor:OFF ");  
3AAC:  MOVLW  C4
3AAE:  MOVWF  FF6
3AB0:  MOVLW  07
3AB2:  MOVWF  FF7
3AB4:  CALL   0ABE
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
3AB8:  BSF    F96.0
3ABA:  BTFSS  F84.0
3ABC:  BRA    3AD0
....................       {  if(Flanco == 0)  
3ABE:  BTFSC  34.3
3AC0:  BRA    3ACE
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
3AC2:  BSF    34.3
3AC4:  MOVLW  C8
3AC6:  MOVWF  xD6
3AC8:  CALL   08CE
3ACC:  BTG    34.0
....................          else 
3ACE:  BRA    3AD2
....................             {Flanco = 0;} 
3AD0:  BCF    34.3
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
3AD2:  BSF    F96.2
3AD4:  BTFSS  F84.2
3AD6:  BRA    3B10
....................       {   
....................          if(Flanco2 == 0) 
3AD8:  BTFSC  34.5
3ADA:  BRA    3B0E
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
3ADC:  BSF    34.5
3ADE:  MOVLW  C8
3AE0:  MOVWF  xD6
3AE2:  CALL   08CE
3AE6:  BTG    34.1
....................             if(estadomv==1) 
3AE8:  BTFSS  34.1
3AEA:  BRA    3AFE
....................             { 
....................                Motor_on; 
3AEC:  BSF    F8C.3
3AEE:  BCF    F95.3
....................                delay_ms(150); 
3AF0:  MOVLW  96
3AF2:  MOVWF  xD6
3AF4:  CALL   08CE
....................                lcd_init(); 
3AF8:  CALL   0960
....................             } 
....................             else 
3AFC:  BRA    3B0E
....................             { 
....................                Motor_off; 
3AFE:  BCF    F8C.3
3B00:  BCF    F95.3
....................                delay_ms(150); 
3B02:  MOVLW  96
3B04:  MOVWF  xD6
3B06:  CALL   08CE
....................                lcd_init(); 
3B0A:  CALL   0960
....................             } 
....................          } 
....................       } 
....................       else 
3B0E:  BRA    3B12
....................       { 
....................          Flanco2 = 0; 
3B10:  BCF    34.5
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
3B12:  BSF    F92.5
3B14:  BTFSS  F80.5
3B16:  BRA    3B46
....................       {  if(Flanco1 == 0)  
3B18:  BTFSC  34.4
3B1A:  BRA    3B44
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
3B1C:  MOVLW  02
3B1E:  MOVWF  xBF
3B20:  MOVLW  FA
3B22:  MOVWF  xD6
3B24:  CALL   08CE
3B28:  DECFSZ xBF,F
3B2A:  BRA    3B20
3B2C:  MOVLW  0C
3B2E:  MOVWF  xD0
3B30:  CALL   0A1A
3B34:  MOVLW  01
3B36:  MOVWF  17
3B38:  CLRF   36
3B3A:  MOVLW  02
3B3C:  MOVWF  1B
3B3E:  MOVWF  1D
3B40:  MOVLW  0B
3B42:  MOVWF  1A
....................          else 
3B44:  BRA    3B48
....................             {Flanco1 = 0;}    
3B46:  BCF    34.4
....................              
....................        if(RIGHT)// Si oprime Derecha 
3B48:  BSF    F96.1
3B4A:  BTFSS  F84.1
3B4C:  BRA    3B70
....................       {  if(Flanco3 == 0)  
3B4E:  BTFSC  34.6
3B50:  BRA    3B6E
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
3B52:  MOVLW  02
3B54:  MOVWF  xBF
3B56:  MOVLW  FA
3B58:  MOVWF  xD6
3B5A:  CALL   08CE
3B5E:  DECFSZ xBF,F
3B60:  BRA    3B56
3B62:  MOVLW  0C
3B64:  MOVWF  xD0
3B66:  CALL   0A1A
3B6A:  MOVLW  28
3B6C:  MOVWF  17
....................          else 
3B6E:  BRA    3B72
....................             {Flanco3 = 0;}     
3B70:  BCF    34.6
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
3B72:  MOVF   17,W
3B74:  SUBLW  1E
3B76:  BTFSS  FD8.2
3B78:  BRA    3D10
....................       lcd_gotoxy(1,1); 
3B7A:  MOVLW  01
3B7C:  MOVWF  xD1
3B7E:  MOVWF  xD2
3B80:  CALL   09B8
....................       printf(lcd_putc,"    !Post-Purga!    "); 
3B84:  MOVLW  D0
3B86:  MOVWF  FF6
3B88:  MOVLW  07
3B8A:  MOVWF  FF7
3B8C:  CALL   0ABE
....................       lcd_gotoxy(1,2); 
3B90:  MOVLW  01
3B92:  MOVWF  xD1
3B94:  MOVLW  02
3B96:  MOVWF  xD2
3B98:  CALL   09B8
....................       printf(lcd_putc,"                    "); 
3B9C:  MOVLW  E6
3B9E:  MOVWF  FF6
3BA0:  MOVLW  07
3BA2:  MOVWF  FF7
3BA4:  CALL   0ABE
....................       lcd_gotoxy(1,3); 
3BA8:  MOVLW  01
3BAA:  MOVWF  xD1
3BAC:  MOVLW  03
3BAE:  MOVWF  xD2
3BB0:  CALL   09B8
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
3BB4:  MOVLW  FC
3BB6:  MOVWF  FF6
3BB8:  MOVLW  07
3BBA:  MOVWF  FF7
3BBC:  MOVLW  06
3BBE:  MOVWF  xC3
3BC0:  CALL   0ADE
3BC4:  MOVFF  32,BF
3BC8:  MOVLW  01
3BCA:  MOVWF  xC0
3BCC:  CALL   0CBE
3BD0:  MOVLW  3A
3BD2:  MOVWF  xD0
3BD4:  CALL   0A1A
3BD8:  MOVFF  30,BF
3BDC:  MOVLW  01
3BDE:  MOVWF  xC0
3BE0:  CALL   0CBE
3BE4:  MOVLW  20
3BE6:  MOVWF  xD0
3BE8:  CALL   0A1A
3BEC:  MOVLW  20
3BEE:  MOVWF  xD0
3BF0:  CALL   0A1A
....................            
....................       if(Lectura==1) 
3BF4:  BTFSS  35.5
3BF6:  BRA    3D0E
....................       { 
....................          Luz_Blanca_off; 
3BF8:  BCF    F8C.2
3BFA:  BCF    F95.2
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
3BFC:  MOVLW  02
3BFE:  MOVWF  xC4
3C00:  CALL   1366
3C04:  MOVFF  00,BF
3C08:  MOVFF  01,C0
3C0C:  MOVFF  02,C1
3C10:  MOVFF  03,C2
3C14:  MOVFF  03,D6
3C18:  MOVFF  02,D5
3C1C:  MOVFF  01,D4
3C20:  MOVFF  00,D3
3C24:  CLRF   xDA
3C26:  CLRF   xD9
3C28:  MOVLW  40
3C2A:  MOVWF  xD8
3C2C:  MOVLW  81
3C2E:  MOVWF  xD7
3C30:  CALL   104E
3C34:  BNC   3D0C
3C36:  MOVF   30,F
3C38:  BNZ   3D0C
3C3A:  MOVF   32,F
3C3C:  BNZ   3D0C
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
3C3E:  MOVLW  46
3C40:  MOVWF  FA9
3C42:  MOVFF  2A,FA8
3C46:  BCF    FA6.6
3C48:  BCF    FA6.7
3C4A:  BSF    FA6.2
3C4C:  MOVF   FF2,W
3C4E:  MOVWF  00
3C50:  BCF    FF2.7
3C52:  MOVLB  F
3C54:  MOVLW  55
3C56:  MOVWF  FA7
3C58:  MOVLW  AA
3C5A:  MOVWF  FA7
3C5C:  BSF    FA6.1
3C5E:  BTFSC  FA6.1
3C60:  BRA    3C5E
3C62:  BCF    FA6.2
3C64:  MOVF   00,W
3C66:  IORWF  FF2,F
3C68:  MOVLW  47
3C6A:  MOVWF  FA9
3C6C:  MOVFF  2B,FA8
3C70:  BCF    FA6.6
3C72:  BCF    FA6.7
3C74:  BSF    FA6.2
3C76:  MOVF   FF2,W
3C78:  MOVWF  00
3C7A:  BCF    FF2.7
3C7C:  MOVLW  55
3C7E:  MOVWF  FA7
3C80:  MOVLW  AA
3C82:  MOVWF  FA7
3C84:  BSF    FA6.1
3C86:  BTFSC  FA6.1
3C88:  BRA    3C86
3C8A:  BCF    FA6.2
3C8C:  MOVF   00,W
3C8E:  IORWF  FF2,F
3C90:  MOVLW  48
3C92:  MOVWF  FA9
3C94:  MOVFF  2C,FA8
3C98:  BCF    FA6.6
3C9A:  BCF    FA6.7
3C9C:  BSF    FA6.2
3C9E:  MOVF   FF2,W
3CA0:  MOVWF  00
3CA2:  BCF    FF2.7
3CA4:  MOVLW  55
3CA6:  MOVWF  FA7
3CA8:  MOVLW  AA
3CAA:  MOVWF  FA7
3CAC:  BSF    FA6.1
3CAE:  BTFSC  FA6.1
3CB0:  BRA    3CAE
3CB2:  BCF    FA6.2
3CB4:  MOVF   00,W
3CB6:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
3CB8:  MOVLW  0C
3CBA:  MOVLB  0
3CBC:  MOVWF  xD0
3CBE:  CALL   0A1A
....................             lcd_gotoxy(1,2); 
3CC2:  MOVLW  01
3CC4:  MOVWF  xD1
3CC6:  MOVLW  02
3CC8:  MOVWF  xD2
3CCA:  CALL   09B8
....................             printf(lcd_putc,"     Proceso      "); 
3CCE:  MOVLW  0E
3CD0:  MOVWF  FF6
3CD2:  MOVLW  08
3CD4:  MOVWF  FF7
3CD6:  CALL   0ABE
....................             lcd_gotoxy(1,3); 
3CDA:  MOVLW  01
3CDC:  MOVWF  xD1
3CDE:  MOVLW  03
3CE0:  MOVWF  xD2
3CE2:  CALL   09B8
....................             printf(lcd_putc,"    Finalizado    "); 
3CE6:  MOVLW  22
3CE8:  MOVWF  FF6
3CEA:  MOVLW  08
3CEC:  MOVWF  FF7
3CEE:  CALL   0ABE
....................             delay_ms(2000); 
3CF2:  MOVLW  08
3CF4:  MOVWF  xBF
3CF6:  MOVLW  FA
3CF8:  MOVWF  xD6
3CFA:  CALL   08CE
3CFE:  DECFSZ xBF,F
3D00:  BRA    3CF6
....................             printf(lcd_putc,"\f"); 
3D02:  MOVLW  0C
3D04:  MOVWF  xD0
3D06:  CALL   0A1A
....................             reset_cpu(); 
3D0A:  RESET
....................          } 
....................          Lectura=0; 
3D0C:  BCF    35.5
....................       } 
....................        
....................    } 
3D0E:  BRA    3B72
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
3D10:  MOVF   17,W
3D12:  SUBLW  28
3D14:  BNZ   3DD6
....................    lcd_gotoxy(1,1); 
3D16:  MOVLW  01
3D18:  MOVWF  xD1
3D1A:  MOVWF  xD2
3D1C:  CALL   09B8
....................    printf(lcd_putc,"   Desea apagar     "); 
3D20:  MOVLW  36
3D22:  MOVWF  FF6
3D24:  MOVLW  08
3D26:  MOVWF  FF7
3D28:  CALL   0ABE
....................    lcd_gotoxy(1,2); 
3D2C:  MOVLW  01
3D2E:  MOVWF  xD1
3D30:  MOVLW  02
3D32:  MOVWF  xD2
3D34:  CALL   09B8
....................    printf(lcd_putc,"     la cabina      "); 
3D38:  MOVLW  4C
3D3A:  MOVWF  FF6
3D3C:  MOVLW  08
3D3E:  MOVWF  FF7
3D40:  CALL   0ABE
....................    lcd_gotoxy(1,3); 
3D44:  MOVLW  01
3D46:  MOVWF  xD1
3D48:  MOVLW  03
3D4A:  MOVWF  xD2
3D4C:  CALL   09B8
....................    printf(lcd_putc,"   > Aceptar        "); 
3D50:  MOVLW  62
3D52:  MOVWF  FF6
3D54:  MOVLW  08
3D56:  MOVWF  FF7
3D58:  CALL   0ABE
....................    lcd_gotoxy(1,4); 
3D5C:  MOVLW  01
3D5E:  MOVWF  xD1
3D60:  MOVLW  04
3D62:  MOVWF  xD2
3D64:  CALL   09B8
....................    printf(lcd_putc,"   < Cancelar       "); 
3D68:  MOVLW  78
3D6A:  MOVWF  FF6
3D6C:  MOVLW  08
3D6E:  MOVWF  FF7
3D70:  CALL   0ABE
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
3D74:  BSF    F96.1
3D76:  BTFSS  F84.1
3D78:  BRA    3D9C
....................       {  if(Flanco1 == 0)  
3D7A:  BTFSC  34.4
3D7C:  BRA    3D9A
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
3D7E:  BSF    34.4
3D80:  MOVLW  1E
3D82:  MOVWF  17
3D84:  MOVFF  20,BF
3D88:  CALL   0AAE
3D8C:  BCF    F8C.0
3D8E:  BCF    F95.0
3D90:  MOVLW  0C
3D92:  MOVWF  xD0
3D94:  CALL   0A1A
3D98:  BSF    x64.2
....................             }} 
....................          else 
3D9A:  BRA    3D9E
....................             {Flanco1 = 0;}    
3D9C:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
3D9E:  BSF    F96.2
3DA0:  BTFSS  F84.2
3DA2:  BRA    3DD4
....................       {  if(Flanco3 == 0)  
3DA4:  BTFSC  34.6
3DA6:  BRA    3DD2
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3DA8:  BSF    34.6
3DAA:  MOVLW  14
3DAC:  MOVWF  17
3DAE:  CLRF   36
3DB0:  MOVLW  02
3DB2:  MOVWF  1B
3DB4:  MOVWF  1D
3DB6:  MOVLW  0B
3DB8:  MOVWF  1A
3DBA:  MOVLW  02
3DBC:  MOVWF  xBF
3DBE:  MOVLW  FA
3DC0:  MOVWF  xD6
3DC2:  CALL   08CE
3DC6:  DECFSZ xBF,F
3DC8:  BRA    3DBE
3DCA:  MOVLW  0C
3DCC:  MOVWF  xD0
3DCE:  CALL   0A1A
....................          else 
3DD2:  BRA    3DD6
....................             {Flanco3 = 0;}     
3DD4:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
3DD6:  MOVF   17,W
3DD8:  SUBLW  32
3DDA:  BNZ   3E8E
....................    lcd_gotoxy(1,1); 
3DDC:  MOVLW  01
3DDE:  MOVWF  xD1
3DE0:  MOVWF  xD2
3DE2:  CALL   09B8
....................    printf(lcd_putc,"      !Purga!       "); 
3DE6:  MOVLW  8E
3DE8:  MOVWF  FF6
3DEA:  MOVLW  08
3DEC:  MOVWF  FF7
3DEE:  CALL   0ABE
....................    lcd_gotoxy(1,2); 
3DF2:  MOVLW  01
3DF4:  MOVWF  xD1
3DF6:  MOVLW  02
3DF8:  MOVWF  xD2
3DFA:  CALL   09B8
....................    printf(lcd_putc,"                    "); 
3DFE:  MOVLW  A4
3E00:  MOVWF  FF6
3E02:  MOVLW  08
3E04:  MOVWF  FF7
3E06:  CALL   0ABE
....................    lcd_gotoxy(1,3); 
3E0A:  MOVLW  01
3E0C:  MOVWF  xD1
3E0E:  MOVLW  03
3E10:  MOVWF  xD2
3E12:  CALL   09B8
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
3E16:  MOVLW  BA
3E18:  MOVWF  FF6
3E1A:  MOVLW  08
3E1C:  MOVWF  FF7
3E1E:  MOVLW  06
3E20:  MOVWF  xC3
3E22:  CALL   0ADE
3E26:  MOVFF  22,BF
3E2A:  MOVLW  01
3E2C:  MOVWF  xC0
3E2E:  CALL   0CBE
3E32:  MOVLW  3A
3E34:  MOVWF  xD0
3E36:  CALL   0A1A
3E3A:  MOVFF  2E,BF
3E3E:  MOVLW  01
3E40:  MOVWF  xC0
3E42:  CALL   0CBE
3E46:  MOVLW  20
3E48:  MOVWF  xD0
3E4A:  CALL   0A1A
3E4E:  MOVLW  20
3E50:  MOVWF  xD0
3E52:  CALL   0A1A
3E56:  MOVLW  20
3E58:  MOVWF  xD0
3E5A:  CALL   0A1A
....................        
....................    Motor_on; 
3E5E:  BSF    F8C.3
3E60:  BCF    F95.3
....................    Luz_Blanca_off; 
3E62:  BCF    F8C.2
3E64:  BCF    F95.2
....................        
....................    if(LEFT) 
3E66:  BSF    F96.2
3E68:  BTFSS  F84.2
3E6A:  BRA    3E8E
....................    { 
....................       tiempo_purga=0;Motor_on;Luz_Blanca_on;estadomv=1;estadofl=1;Menu=20;delay_ms(1000); 
3E6C:  BCF    x64.1
3E6E:  BSF    F8C.3
3E70:  BCF    F95.3
3E72:  BSF    F8C.2
3E74:  BCF    F95.2
3E76:  BSF    34.1
3E78:  BSF    34.0
3E7A:  MOVLW  14
3E7C:  MOVWF  17
3E7E:  MOVLW  04
3E80:  MOVWF  xBF
3E82:  MOVLW  FA
3E84:  MOVWF  xD6
3E86:  CALL   08CE
3E8A:  DECFSZ xBF,F
3E8C:  BRA    3E82
....................    } 
....................        
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=20) 
3E8E:  BTFSC  2D.7
3E90:  BRA    3E9E
3E92:  MOVF   2D,W
3E94:  SUBLW  13
3E96:  BC    3E9E
....................    { 
....................       lcd_init(); 
3E98:  CALL   0960
....................       tiemporeset=0; 
3E9C:  CLRF   2D
....................    }  
....................  
....................    if(ModoSleep==1) 
3E9E:  BTFSS  35.3
3EA0:  BRA    3EAA
....................       {intensidadpantalla(0);sleep();} 
3EA2:  CLRF   xBF
3EA4:  CALL   0AAE
3EA8:  SLEEP 
....................  
....................    if(Menu!=0 || Menu!=30) 
3EAA:  MOVF   17,F
3EAC:  BNZ   3EB4
3EAE:  MOVF   17,W
3EB0:  SUBLW  1E
3EB2:  BZ    3F32
....................    { 
....................       if(Lectura==1) 
3EB4:  BTFSS  35.5
3EB6:  BRA    3F2E
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
3EB8:  CLRF   xC1
3EBA:  MOVFF  2C,C0
3EBE:  BTFSC  xC0.7
3EC0:  DECF   xC1,F
3EC2:  CALL   19F0
3EC6:  MOVFF  4B,D6
3ECA:  MOVFF  4A,D5
3ECE:  MOVFF  49,D4
3ED2:  MOVFF  48,D3
3ED6:  MOVFF  03,DA
3EDA:  MOVFF  02,D9
3EDE:  MOVFF  01,D8
3EE2:  MOVFF  00,D7
3EE6:  CALL   104E
3EEA:  BC    3EEE
3EEC:  BNZ   3F22
3EEE:  MOVF   17,W
3EF0:  SUBLW  14
3EF2:  BNZ   3F22
....................          { 
....................              if(estadoalarma==1) 
3EF4:  BTFSS  34.2
3EF6:  BRA    3EFE
....................              { 
....................                 Alarma_on; 
3EF8:  BSF    F8C.0
3EFA:  BCF    F95.0
....................              } 
....................              else 
3EFC:  BRA    3F02
....................              { 
....................                 Alarma_off; 
3EFE:  BCF    F8C.0
3F00:  BCF    F95.0
....................              } 
....................              estadopantalla=!estadopantalla; 
3F02:  BTG    35.2
....................              if(estadopantalla==1) 
3F04:  BTFSS  35.2
3F06:  BRA    3F16
....................              {intensidadpantalla(contraste);Alarma_on;} 
3F08:  MOVFF  20,BF
3F0C:  CALL   0AAE
3F10:  BSF    F8C.0
3F12:  BCF    F95.0
....................              else 
3F14:  BRA    3F20
....................              {intensidadpantalla(0);Alarma_off;} 
3F16:  CLRF   xBF
3F18:  CALL   0AAE
3F1C:  BCF    F8C.0
3F1E:  BCF    F95.0
....................          } 
....................          else 
3F20:  BRA    3F2E
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
3F22:  MOVFF  20,BF
3F26:  CALL   0AAE
3F2A:  BCF    F8C.0
3F2C:  BCF    F95.0
....................          } 
....................       } 
....................       Lectura=0; 
3F2E:  BCF    35.5
....................    }    
....................    else 
3F30:  BRA    3F3E
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
3F32:  MOVFF  20,BF
3F36:  CALL   0AAE
3F3A:  BCF    F8C.0
3F3C:  BCF    F95.0
....................    } 
....................  
....................    }        
3F3E:  GOTO   1EC4
.................... } 
....................  
3F42:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
