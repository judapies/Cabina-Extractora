CCS PCH C Compiler, Version 4.104, 5967               13-dic.-17 15:41

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2017\120\Cabina Extractora 120 Alfa&Omega #0045876XX\Firmware\Cabina_Extractora.lst

               ROM used: 13300 bytes (41%)
                         Largest free fragment is 19464
               RAM used: 85 (4%) at main() level
                         109 (5%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   138A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0876:  CLRF   FEA
0878:  MOVLW  64
087A:  MOVWF  FE9
087C:  MOVF   FEF,W
087E:  BZ    089C
0880:  MOVLW  0F
0882:  MOVWF  01
0884:  CLRF   00
0886:  DECFSZ 00,F
0888:  BRA    0886
088A:  DECFSZ 01,F
088C:  BRA    0884
088E:  MOVLW  8F
0890:  MOVWF  00
0892:  DECFSZ 00,F
0894:  BRA    0892
0896:  NOP   
0898:  DECFSZ FEF,F
089A:  BRA    0880
089C:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
089E:  SWAPF  x65,W
08A0:  ANDLW  F0
08A2:  MOVWF  00
08A4:  MOVLW  0F
08A6:  ANDWF  F83,W
08A8:  IORWF  00,W
08AA:  MOVWF  F83
....................       delay_cycles(25); 
08AC:  MOVLW  08
08AE:  MOVWF  00
08B0:  DECFSZ 00,F
08B2:  BRA    08B0
....................       lcd.enable = 1; 
08B4:  BSF    F83.2
....................       delay_us(55); 
08B6:  MOVLW  DB
08B8:  MOVWF  00
08BA:  DECFSZ 00,F
08BC:  BRA    08BA
08BE:  BRA    08C0
....................       lcd.enable = 0; 
08C0:  BCF    F83.2
.................... } 
08C2:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
08C4:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
08C6:  MOVLW  02
08C8:  MOVWF  x64
08CA:  RCALL  0876
....................       lcd.rs = address; 
08CC:  BTFSS  x62.0
08CE:  BCF    F83.0
08D0:  BTFSC  x62.0
08D2:  BSF    F83.0
....................       delay_cycles(25); 
08D4:  MOVLW  08
08D6:  MOVWF  00
08D8:  DECFSZ 00,F
08DA:  BRA    08D8
....................       lcd.rw = 0; 
08DC:  BCF    F83.1
....................       delay_cycles(25); 
08DE:  MOVLW  08
08E0:  MOVWF  00
08E2:  DECFSZ 00,F
08E4:  BRA    08E2
....................       lcd.enable = 0; 
08E6:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
08E8:  SWAPF  x63,W
08EA:  MOVWF  x64
08EC:  MOVLW  0F
08EE:  ANDWF  x64,F
08F0:  MOVFF  64,65
08F4:  RCALL  089E
....................       lcd_send_nibble(n & 0xf); 
08F6:  MOVF   x63,W
08F8:  ANDLW  0F
08FA:  MOVWF  x64
08FC:  MOVWF  x65
08FE:  RCALL  089E
.................... } 
0900:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0902:  MOVLW  00
0904:  MOVWF  F95
....................     lcd.rs = 0; 
0906:  BCF    F83.0
....................     lcd.rw = 0; 
0908:  BCF    F83.1
....................     lcd.enable = 0; 
090A:  BCF    F83.2
....................     delay_ms(15); 
090C:  MOVLW  0F
090E:  MOVWF  x64
0910:  RCALL  0876
....................     for(i=1;i<=3;++i) { 
0912:  MOVLW  01
0914:  MOVWF  51
0916:  MOVF   51,W
0918:  SUBLW  03
091A:  BNC   092C
....................        lcd_send_nibble(3); 
091C:  MOVLW  03
091E:  MOVWF  x65
0920:  RCALL  089E
....................        delay_ms(5); 
0922:  MOVLW  05
0924:  MOVWF  x64
0926:  RCALL  0876
....................     } 
0928:  INCF   51,F
092A:  BRA    0916
....................     lcd_send_nibble(2); 
092C:  MOVLW  02
092E:  MOVWF  x65
0930:  RCALL  089E
....................     for(i=0;i<=3;++i) 
0932:  CLRF   51
0934:  MOVF   51,W
0936:  SUBLW  03
0938:  BNC   0958
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
093A:  CLRF   03
093C:  MOVF   51,W
093E:  MOVFF  FF2,52
0942:  BCF    FF2.7
0944:  CALL   0096
0948:  BTFSC  52.7
094A:  BSF    FF2.7
094C:  MOVWF  52
094E:  CLRF   x62
0950:  MOVWF  x63
0952:  RCALL  08C4
0954:  INCF   51,F
0956:  BRA    0934
.................... } 
0958:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
095A:  MOVLW  01
095C:  SUBWF  x60,W
095E:  ADDLW  FC
0960:  BC    0980
0962:  ADDLW  04
0964:  GOTO   0990
....................      case 1 : address=0x80;break; 
0968:  MOVLW  80
096A:  MOVWF  x61
096C:  BRA    0980
....................      case 2 : address=0xc0;break; 
096E:  MOVLW  C0
0970:  MOVWF  x61
0972:  BRA    0980
....................      case 3 : address=0x94;break; 
0974:  MOVLW  94
0976:  MOVWF  x61
0978:  BRA    0980
....................      case 4 : address=0xd4;break; 
097A:  MOVLW  D4
097C:  MOVWF  x61
097E:  BRA    0980
....................    } 
....................    address+=x-1; 
0980:  MOVLW  01
0982:  SUBWF  5F,W
0984:  ADDWF  x61,F
....................    lcd_send_byte(0,address); 
0986:  CLRF   x62
0988:  MOVFF  61,63
098C:  RCALL  08C4
.................... } 
098E:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
09BC:  MOVF   5E,W
09BE:  SUBLW  F1
09C0:  BNZ   09C6
....................     c=238; 
09C2:  MOVLW  EE
09C4:  MOVWF  5E
....................    switch (c) { 
09C6:  MOVF   5E,W
09C8:  XORLW  0C
09CA:  BZ    09D6
09CC:  XORLW  06
09CE:  BZ    09EA
09D0:  XORLW  02
09D2:  BZ    09F8
09D4:  BRA    0A02
....................      case '\f'   : lcd_send_byte(0,1); 
09D6:  CLRF   x62
09D8:  MOVLW  01
09DA:  MOVWF  x63
09DC:  RCALL  08C4
....................                    lcdline=1; 
09DE:  MOVLW  01
09E0:  MOVWF  16
....................                    delay_ms(2); 
09E2:  MOVLW  02
09E4:  MOVWF  x64
09E6:  RCALL  0876
....................                                            break; 
09E8:  BRA    0A0E
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
09EA:  INCF   16,F
09EC:  MOVLW  01
09EE:  MOVWF  5F
09F0:  MOVFF  16,60
09F4:  RCALL  095A
09F6:  BRA    0A0E
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
09F8:  CLRF   x62
09FA:  MOVLW  10
09FC:  MOVWF  x63
09FE:  RCALL  08C4
0A00:  BRA    0A0E
....................      default     : lcd_send_byte(1,c);     break; 
0A02:  MOVLW  01
0A04:  MOVWF  x62
0A06:  MOVFF  5E,63
0A0A:  RCALL  08C4
0A0C:  BRA    0A0E
....................    } 
.................... } 
0A0E:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_A5) 
.................... #define   LEFT          input(PIN_E0) 
.................... #define   DOWN          input(PIN_E1) 
.................... #define   UP            input(PIN_E2) 
.................... #define   VIDRIOUP      !input(PIN_A4) 
.................... #define   VIDRIODN      !input(PIN_A3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Rele_on           output_bit(PIN_B7,1) 
.................... #define   Rele_off          output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
.................... #define   O1_on             output_bit(PIN_C6,1) 
.................... #define   O1_off            output_bit(PIN_C6,0) 
.................... #define   O2_on             output_bit(PIN_C7,1) 
.................... #define   O2_off            output_bit(PIN_C7,0) 
....................  
.................... signed int8 Menu=100, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... signed int8 Entero=0,tmp=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... signed int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0,estadopantalla=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,Temporal=0.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0; 
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1334:  RLCF   51,W
1336:  MOVWF  00
1338:  RLCF   00,F
133A:  MOVLW  FC
133C:  ANDWF  00,F
133E:  MOVFF  00,01
1342:  MOVF   FC2,W
1344:  ANDLW  C3
1346:  IORWF  00,W
1348:  MOVWF  FC2
134A:  MOVLW  0A
134C:  MOVWF  x64
134E:  CALL   0876
1352:  BSF    FC2.1
1354:  BTFSC  FC2.1
1356:  BRA    1354
1358:  MOVFF  FC4,03
135C:  MOVFF  FC3,56
1360:  MOVFF  FC4,57
1364:  BRA    12FC
1366:  MOVFF  03,55
136A:  MOVFF  02,54
136E:  MOVFF  01,53
1372:  MOVFF  00,52
1376:  MOVFF  52,00
137A:  MOVFF  53,01
137E:  MOVFF  54,02
1382:  MOVFF  55,03
.................... } 
1386:  GOTO   30C0 (RETURN)
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0A58:  MOVF   51,F
0A5A:  BNZ   0A62
....................    { 
....................       Pantalla_off; 
0A5C:  BCF    F8B.1
0A5E:  BCF    F94.1
....................    } 
....................    else 
0A60:  BRA    0A66
....................    { 
....................       Pantalla_on; 
0A62:  BSF    F8B.1
0A64:  BCF    F94.1
....................    } 
.................... } 
0A66:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4B,F
00BE:  BTFSC  FD8.2
00C0:  INCF   4C,F
....................    tiempos2++; 
00C2:  INCF   4F,F
00C4:  BTFSC  FD8.2
00C6:  INCF   50,F
....................      
....................    if(tiempos2>=20) 
00C8:  MOVF   50,F
00CA:  BNZ   00D2
00CC:  MOVF   4F,W
00CE:  SUBLW  13
00D0:  BC    00D8
....................    {tiempos2=0;Lectura2=1;} 
00D2:  CLRF   50
00D4:  CLRF   4F
00D6:  BSF    35.6
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00D8:  MOVF   4C,F
00DA:  BNZ   00E2
00DC:  MOVF   4B,W
00DE:  SUBLW  C7
00E0:  BC    016C
....................    { 
....................       tiempos=0;tiemporeset++; 
00E2:  CLRF   4C
00E4:  CLRF   4B
00E6:  INCF   2D,F
....................       Lectura=1; 
00E8:  BSF    35.5
....................           
....................       if(estadomv==1 && flag_filtro==1) 
00EA:  BTFSS  34.1
00EC:  BRA    0110
00EE:  BTFSS  35.1
00F0:  BRA    0110
....................       {   
....................          segundos++; 
00F2:  INCF   2A,F
....................          if(segundos>=60) 
00F4:  BTFSC  2A.7
00F6:  BRA    0102
00F8:  MOVF   2A,W
00FA:  SUBLW  3B
00FC:  BC    0102
....................          { 
....................             segundos=0;minutos++; 
00FE:  CLRF   2A
0100:  INCF   2B,F
....................          } 
....................           
....................          if(minutos>=60) 
0102:  BTFSC  2B.7
0104:  BRA    0110
0106:  MOVF   2B,W
0108:  SUBLW  3B
010A:  BC    0110
....................          { 
....................             minutos=0;horas++; 
010C:  CLRF   2B
010E:  INCF   2C,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1) 
0110:  BTFSS  4A.1
0112:  BRA    0146
....................       { 
....................          if(purga_segundos>0) 
0114:  BTFSC  2E.7
0116:  BRA    0122
0118:  MOVF   2E,W
011A:  SUBLW  00
011C:  BC    0122
....................          { 
....................             purga_segundos--; 
011E:  DECF   2E,F
....................          } 
....................          else 
0120:  BRA    0146
....................          { 
....................             if(purga_minutos>0) 
0122:  BTFSC  22.7
0124:  BRA    0134
0126:  MOVF   22,W
0128:  SUBLW  00
012A:  BC    0134
....................             { 
....................                purga_minutos--; 
012C:  DECF   22,F
....................                purga_segundos=59; 
012E:  MOVLW  3B
0130:  MOVWF  2E
....................             } 
....................             else 
0132:  BRA    0146
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20; 
0134:  BCF    4A.1
0136:  BSF    F8A.5
0138:  BCF    F93.5
013A:  MOVLW  14
013C:  MOVWF  17
....................                Luz_Blanca_on; 
013E:  BSF    F8A.4
0140:  BCF    F93.4
....................                estadomv=1; 
0142:  BSF    34.1
....................                estadofl=1; 
0144:  BSF    34.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
0146:  BTFSS  4A.2
0148:  BRA    016C
....................       { 
....................          if(ppurga_segundos>0) 
014A:  BTFSC  30.7
014C:  BRA    0158
014E:  MOVF   30,W
0150:  SUBLW  00
0152:  BC    0158
....................          { 
....................             ppurga_segundos--; 
0154:  DECF   30,F
....................          } 
....................          else 
0156:  BRA    016C
....................          { 
....................             if(ppurga_minutos>0) 
0158:  BTFSC  32.7
015A:  BRA    016A
015C:  MOVF   32,W
015E:  SUBLW  00
0160:  BC    016A
....................             { 
....................                ppurga_minutos--; 
0162:  DECF   32,F
....................                ppurga_segundos=59; 
0164:  MOVLW  3B
0166:  MOVWF  30
....................             } 
....................             else 
0168:  BRA    016C
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
016A:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
016C:  BCF    F9E.0
016E:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0B96:  DECFSZ 52,W
0B98:  BRA    0BCA
....................    {if(estadoalarma==0) 
0B9A:  BTFSC  34.2
0B9C:  BRA    0BB2
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0B9E:  MOVLW  02
0BA0:  MOVWF  5F
0BA2:  MOVFF  53,60
0BA6:  RCALL  095A
0BA8:  MOVLW  72
0BAA:  MOVWF  FF6
0BAC:  MOVLW  01
0BAE:  MOVWF  FF7
0BB0:  RCALL  0A68
....................    if(estadoalarma==1) 
0BB2:  BTFSS  34.2
0BB4:  BRA    0BCA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0BB6:  MOVLW  02
0BB8:  MOVWF  5F
0BBA:  MOVFF  53,60
0BBE:  RCALL  095A
0BC0:  MOVLW  86
0BC2:  MOVWF  FF6
0BC4:  MOVLW  01
0BC6:  MOVWF  FF7
0BC8:  RCALL  0A68
....................    } 
....................     
....................    if(x==2) 
0BCA:  MOVF   52,W
0BCC:  SUBLW  02
0BCE:  BNZ   0BE4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
0BD0:  MOVLW  02
0BD2:  MOVWF  5F
0BD4:  MOVFF  53,60
0BD8:  RCALL  095A
0BDA:  MOVLW  9A
0BDC:  MOVWF  FF6
0BDE:  MOVLW  01
0BE0:  MOVWF  FF7
0BE2:  RCALL  0A68
....................     
....................    if(x==3) 
0BE4:  MOVF   52,W
0BE6:  SUBLW  03
0BE8:  BNZ   0BFE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
0BEA:  MOVLW  02
0BEC:  MOVWF  5F
0BEE:  MOVFF  53,60
0BF2:  RCALL  095A
0BF4:  MOVLW  AE
0BF6:  MOVWF  FF6
0BF8:  MOVLW  01
0BFA:  MOVWF  FF7
0BFC:  RCALL  0A68
....................     
....................    if(x==4) 
0BFE:  MOVF   52,W
0C00:  SUBLW  04
0C02:  BNZ   0C18
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0C04:  MOVLW  02
0C06:  MOVWF  5F
0C08:  MOVFF  53,60
0C0C:  RCALL  095A
0C0E:  MOVLW  C2
0C10:  MOVWF  FF6
0C12:  MOVLW  01
0C14:  MOVWF  FF7
0C16:  RCALL  0A68
....................        
....................    if(x==5) 
0C18:  MOVF   52,W
0C1A:  SUBLW  05
0C1C:  BNZ   0C32
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
0C1E:  MOVLW  02
0C20:  MOVWF  5F
0C22:  MOVFF  53,60
0C26:  RCALL  095A
0C28:  MOVLW  D6
0C2A:  MOVWF  FF6
0C2C:  MOVLW  01
0C2E:  MOVWF  FF7
0C30:  RCALL  0A68
....................     
....................    if(x==6) 
0C32:  MOVF   52,W
0C34:  SUBLW  06
0C36:  BNZ   0C4C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
0C38:  MOVLW  02
0C3A:  MOVWF  5F
0C3C:  MOVFF  53,60
0C40:  RCALL  095A
0C42:  MOVLW  EA
0C44:  MOVWF  FF6
0C46:  MOVLW  01
0C48:  MOVWF  FF7
0C4A:  RCALL  0A68
.................... } 
0C4C:  RETLW  00
....................  
....................  
.................... void main () 
.................... { 
*
138A:  CLRF   FF8
138C:  BCF    FD0.7
138E:  BSF    07.7
1390:  CLRF   FEA
1392:  CLRF   FE9
1394:  MOVLW  64
1396:  MOVWF  17
1398:  MOVLW  07
139A:  MOVWF  18
139C:  MOVLW  02
139E:  MOVWF  19
13A0:  MOVLW  0B
13A2:  MOVWF  1A
13A4:  MOVLW  02
13A6:  MOVWF  1B
13A8:  MOVLW  03
13AA:  MOVWF  1C
13AC:  MOVLW  02
13AE:  MOVWF  1D
13B0:  MOVWF  1E
13B2:  MOVLW  04
13B4:  MOVWF  1F
13B6:  MOVLW  0A
13B8:  MOVWF  20
13BA:  MOVLW  01
13BC:  MOVWF  21
13BE:  CLRF   22
13C0:  CLRF   23
13C2:  CLRF   24
13C4:  MOVLW  0A
13C6:  MOVWF  25
13C8:  MOVWF  26
13CA:  MOVWF  27
13CC:  MOVWF  28
13CE:  CLRF   29
13D0:  CLRF   2A
13D2:  CLRF   2B
13D4:  CLRF   2C
13D6:  CLRF   2D
13D8:  CLRF   2E
13DA:  CLRF   2F
13DC:  CLRF   30
13DE:  CLRF   31
13E0:  CLRF   32
13E2:  CLRF   33
13E4:  BCF    34.0
13E6:  BCF    34.1
13E8:  BCF    34.2
13EA:  BCF    34.3
13EC:  BCF    34.4
13EE:  BCF    34.5
13F0:  BCF    34.6
13F2:  BCF    34.7
13F4:  BCF    35.0
13F6:  BCF    35.1
13F8:  BCF    35.2
13FA:  CLRF   36
13FC:  CLRF   45
13FE:  CLRF   44
1400:  CLRF   43
1402:  CLRF   42
1404:  CLRF   49
1406:  CLRF   48
1408:  CLRF   47
140A:  CLRF   46
140C:  BCF    35.4
140E:  BCF    35.5
1410:  BCF    35.6
1412:  BCF    35.7
1414:  BCF    4A.0
1416:  BCF    4A.1
1418:  BCF    4A.2
141A:  CLRF   4C
141C:  CLRF   4B
141E:  CLRF   4E
1420:  CLRF   4D
1422:  CLRF   50
1424:  CLRF   4F
1426:  MOVF   FC1,W
1428:  ANDLW  C0
142A:  IORLW  0F
142C:  MOVWF  FC1
142E:  MOVLW  07
1430:  MOVWF  FB4
1432:  MOVLW  3E
1434:  MOVWF  37
1436:  MOVLW  20
1438:  MOVWF  38
143A:  MOVLW  5E
143C:  MOVWF  39
143E:  CLRF   3A
1440:  CLRF   3B
1442:  CLRF   3C
1444:  CLRF   3D
1446:  CLRF   3E
1448:  CLRF   3F
144A:  CLRF   40
144C:  CLRF   41
....................    setup_adc_ports(AN0_TO_AN3); 
144E:  MOVF   FC1,W
1450:  ANDLW  C0
1452:  IORLW  0B
1454:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1456:  BCF    FC0.0
1458:  BSF    FC0.1
145A:  BCF    FC0.2
145C:  BSF    FC0.7
145E:  BSF    FC2.0
....................    output_d(0);  
1460:  CLRF   F95
1462:  CLRF   F8C
....................    ModoSleep=1; 
1464:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1466:  MOVLW  85
1468:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
146A:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
146C:  MOVLW  00
146E:  IORLW  05
1470:  MOVWF  FCA
1472:  MOVLW  FF
1474:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
1476:  BCF    F94.2
1478:  BCF    F8B.2
147A:  BCF    F96.6
147C:  MOVLW  0C
147E:  MOVWF  FBD
1480:  CLRF   FB7
1482:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
1484:  MOVLW  C0
1486:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
1488:  CLRF   FBE
....................    lcd_init(); 
148A:  CALL   0902
....................    printf(lcd_putc,"\f"); 
148E:  MOVLW  0C
1490:  MOVWF  5E
1492:  CALL   09BC
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1496:  MOVFF  FF2,51
149A:  BCF    FF2.7
149C:  CLRF   FA9
149E:  BCF    FA6.6
14A0:  BCF    FA6.7
14A2:  BSF    FA6.0
14A4:  MOVF   FA8,W
14A6:  BTFSC  51.7
14A8:  BSF    FF2.7
14AA:  MOVWF  3E
14AC:  MOVLW  14
14AE:  MOVWF  x64
14B0:  CALL   0876
14B4:  MOVFF  FF2,51
14B8:  BCF    FF2.7
14BA:  MOVLW  01
14BC:  MOVWF  FA9
14BE:  BCF    FA6.6
14C0:  BCF    FA6.7
14C2:  BSF    FA6.0
14C4:  MOVF   FA8,W
14C6:  BTFSC  51.7
14C8:  BSF    FF2.7
14CA:  MOVWF  3F
14CC:  MOVLW  14
14CE:  MOVWF  x64
14D0:  CALL   0876
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
14D4:  MOVFF  FF2,51
14D8:  BCF    FF2.7
14DA:  MOVLW  02
14DC:  MOVWF  FA9
14DE:  BCF    FA6.6
14E0:  BCF    FA6.7
14E2:  BSF    FA6.0
14E4:  MOVF   FA8,W
14E6:  BTFSC  51.7
14E8:  BSF    FF2.7
14EA:  MOVWF  40
14EC:  MOVLW  14
14EE:  MOVWF  x64
14F0:  CALL   0876
14F4:  MOVFF  FF2,51
14F8:  BCF    FF2.7
14FA:  MOVLW  03
14FC:  MOVWF  FA9
14FE:  BCF    FA6.6
1500:  BCF    FA6.7
1502:  BSF    FA6.0
1504:  MOVF   FA8,W
1506:  BTFSC  51.7
1508:  BSF    FF2.7
150A:  MOVWF  41
150C:  MOVLW  14
150E:  MOVWF  x64
1510:  CALL   0876
....................    estadoalarma=read_eeprom(5); 
1514:  MOVFF  FF2,51
1518:  BCF    FF2.7
151A:  MOVLW  05
151C:  MOVWF  FA9
151E:  BCF    FA6.6
1520:  BCF    FA6.7
1522:  BSF    FA6.0
1524:  MOVF   FA8,W
1526:  BTFSC  51.7
1528:  BSF    FF2.7
152A:  MOVWF  01
152C:  BCF    34.2
152E:  BTFSC  01.0
1530:  BSF    34.2
....................    delay_ms(20); 
1532:  MOVLW  14
1534:  MOVWF  x64
1536:  CALL   0876
....................    Manual=read_eeprom(10); 
153A:  MOVFF  FF2,51
153E:  BCF    FF2.7
1540:  MOVLW  0A
1542:  MOVWF  FA9
1544:  BCF    FA6.6
1546:  BCF    FA6.7
1548:  BSF    FA6.0
154A:  MOVF   FA8,W
154C:  BTFSC  51.7
154E:  BSF    FF2.7
1550:  MOVWF  27
....................    delay_ms(20); 
1552:  MOVLW  14
1554:  MOVWF  x64
1556:  CALL   0876
....................    Automa=read_eeprom(11); 
155A:  MOVFF  FF2,51
155E:  BCF    FF2.7
1560:  MOVLW  0B
1562:  MOVWF  FA9
1564:  BCF    FA6.6
1566:  BCF    FA6.7
1568:  BSF    FA6.0
156A:  MOVF   FA8,W
156C:  BTFSC  51.7
156E:  BSF    FF2.7
1570:  MOVWF  26
....................    delay_ms(20); 
1572:  MOVLW  14
1574:  MOVWF  x64
1576:  CALL   0876
....................    Semi=read_eeprom(12); 
157A:  MOVFF  FF2,51
157E:  BCF    FF2.7
1580:  MOVLW  0C
1582:  MOVWF  FA9
1584:  BCF    FA6.6
1586:  BCF    FA6.7
1588:  BSF    FA6.0
158A:  MOVF   FA8,W
158C:  BTFSC  51.7
158E:  BSF    FF2.7
1590:  MOVWF  28
....................    delay_ms(20); 
1592:  MOVLW  14
1594:  MOVWF  x64
1596:  CALL   0876
....................    ValorSemi=read_eeprom(13); 
159A:  MOVFF  FF2,51
159E:  BCF    FF2.7
15A0:  MOVLW  0D
15A2:  MOVWF  FA9
15A4:  BCF    FA6.6
15A6:  BCF    FA6.7
15A8:  BSF    FA6.0
15AA:  MOVF   FA8,W
15AC:  BTFSC  51.7
15AE:  BSF    FF2.7
15B0:  MOVWF  29
....................    delay_ms(20); 
15B2:  MOVLW  14
15B4:  MOVWF  x64
15B6:  CALL   0876
....................    tmp=ValorSemi; 
15BA:  MOVFF  29,25
....................  
....................    purga_minutos=read_eeprom(20); 
15BE:  MOVFF  FF2,51
15C2:  BCF    FF2.7
15C4:  MOVLW  14
15C6:  MOVWF  FA9
15C8:  BCF    FA6.6
15CA:  BCF    FA6.7
15CC:  BSF    FA6.0
15CE:  MOVF   FA8,W
15D0:  BTFSC  51.7
15D2:  BSF    FF2.7
15D4:  MOVWF  22
....................    delay_ms(20); 
15D6:  MOVLW  14
15D8:  MOVWF  x64
15DA:  CALL   0876
....................    purga_segundos=read_eeprom(21); 
15DE:  MOVFF  FF2,51
15E2:  BCF    FF2.7
15E4:  MOVLW  15
15E6:  MOVWF  FA9
15E8:  BCF    FA6.6
15EA:  BCF    FA6.7
15EC:  BSF    FA6.0
15EE:  MOVF   FA8,W
15F0:  BTFSC  51.7
15F2:  BSF    FF2.7
15F4:  MOVWF  2E
....................    delay_ms(20); 
15F6:  MOVLW  14
15F8:  MOVWF  x64
15FA:  CALL   0876
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
15FE:  MOVFF  22,23
1602:  MOVFF  2E,2F
....................    ppurga_minutos=read_eeprom(22); 
1606:  MOVFF  FF2,51
160A:  BCF    FF2.7
160C:  MOVLW  16
160E:  MOVWF  FA9
1610:  BCF    FA6.6
1612:  BCF    FA6.7
1614:  BSF    FA6.0
1616:  MOVF   FA8,W
1618:  BTFSC  51.7
161A:  BSF    FF2.7
161C:  MOVWF  32
....................    delay_ms(20); 
161E:  MOVLW  14
1620:  MOVWF  x64
1622:  CALL   0876
....................    ppurga_segundos=read_eeprom(23); 
1626:  MOVFF  FF2,51
162A:  BCF    FF2.7
162C:  MOVLW  17
162E:  MOVWF  FA9
1630:  BCF    FA6.6
1632:  BCF    FA6.7
1634:  BSF    FA6.0
1636:  MOVF   FA8,W
1638:  BTFSC  51.7
163A:  BSF    FF2.7
163C:  MOVWF  30
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
163E:  MOVFF  32,33
1642:  MOVFF  30,31
....................           
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
1646:  MOVFF  FF2,51
164A:  BCF    FF2.7
164C:  MOVLW  28
164E:  MOVWF  FA9
1650:  BCF    FA6.6
1652:  BCF    FA6.7
1654:  BSF    FA6.0
1656:  MOVF   FA8,W
1658:  BTFSC  51.7
165A:  BSF    FF2.7
165C:  MOVWF  24
....................    setpoint=Entero; 
165E:  CLRF   53
1660:  MOVFF  24,52
1664:  BTFSC  52.7
1666:  DECF   53,F
1668:  CALL   0A10
166C:  MOVFF  03,45
1670:  MOVFF  02,44
1674:  MOVFF  01,43
1678:  MOVFF  00,42
....................    delay_ms(20); 
167C:  MOVLW  14
167E:  MOVWF  x64
1680:  CALL   0876
....................    segundos=read_eeprom(70); 
1684:  MOVFF  FF2,51
1688:  BCF    FF2.7
168A:  MOVLW  46
168C:  MOVWF  FA9
168E:  BCF    FA6.6
1690:  BCF    FA6.7
1692:  BSF    FA6.0
1694:  MOVF   FA8,W
1696:  BTFSC  51.7
1698:  BSF    FF2.7
169A:  MOVWF  2A
....................    delay_ms(20); 
169C:  MOVLW  14
169E:  MOVWF  x64
16A0:  CALL   0876
....................    minutos=read_eeprom(71); 
16A4:  MOVFF  FF2,51
16A8:  BCF    FF2.7
16AA:  MOVLW  47
16AC:  MOVWF  FA9
16AE:  BCF    FA6.6
16B0:  BCF    FA6.7
16B2:  BSF    FA6.0
16B4:  MOVF   FA8,W
16B6:  BTFSC  51.7
16B8:  BSF    FF2.7
16BA:  MOVWF  2B
....................    delay_ms(20); 
16BC:  MOVLW  14
16BE:  MOVWF  x64
16C0:  CALL   0876
....................    horas=read_eeprom(72); 
16C4:  MOVFF  FF2,51
16C8:  BCF    FF2.7
16CA:  MOVLW  48
16CC:  MOVWF  FA9
16CE:  BCF    FA6.6
16D0:  BCF    FA6.7
16D2:  BSF    FA6.0
16D4:  MOVF   FA8,W
16D6:  BTFSC  51.7
16D8:  BSF    FF2.7
16DA:  MOVWF  2C
....................    delay_ms(20); 
16DC:  MOVLW  14
16DE:  MOVWF  x64
16E0:  CALL   0876
....................    flag_filtro=read_eeprom(73); 
16E4:  MOVFF  FF2,51
16E8:  BCF    FF2.7
16EA:  MOVLW  49
16EC:  MOVWF  FA9
16EE:  BCF    FA6.6
16F0:  BCF    FA6.7
16F2:  BSF    FA6.0
16F4:  MOVF   FA8,W
16F6:  BTFSC  51.7
16F8:  BSF    FF2.7
16FA:  MOVWF  01
16FC:  BCF    35.1
16FE:  BTFSC  01.0
1700:  BSF    35.1
....................    Menu=200; 
1702:  MOVLW  C8
1704:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
1706:  MOVF   17,W
1708:  SUBLW  C8
170A:  BNZ   17C0
....................       if(inicio==0) 
170C:  BTFSC  35.4
170E:  BRA    17BE
....................       { 
....................       delay_ms(500); 
1710:  MOVLW  02
1712:  MOVWF  51
1714:  MOVLW  FA
1716:  MOVWF  x64
1718:  CALL   0876
171C:  DECFSZ 51,F
171E:  BRA    1714
....................          if(RIGHT) 
1720:  BSF    F92.5
1722:  BTFSS  F80.5
1724:  BRA    17BE
....................          { 
....................             lcd_init(); 
1726:  CALL   0902
....................             intensidadpantalla(contraste); 
172A:  MOVFF  20,51
172E:  CALL   0A58
....................             lcd_gotoxy(1,1); 
1732:  MOVLW  01
1734:  MOVWF  5F
1736:  MOVWF  x60
1738:  CALL   095A
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
173C:  MOVLW  FE
173E:  MOVWF  FF6
1740:  MOVLW  01
1742:  MOVWF  FF7
1744:  CALL   0A68
....................             lcd_gotoxy(1,2); 
1748:  MOVLW  01
174A:  MOVWF  5F
174C:  MOVLW  02
174E:  MOVWF  x60
1750:  CALL   095A
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1754:  MOVLW  14
1756:  MOVWF  FF6
1758:  MOVLW  02
175A:  MOVWF  FF7
175C:  CALL   0A68
....................             lcd_gotoxy(1,3); 
1760:  MOVLW  01
1762:  MOVWF  5F
1764:  MOVLW  03
1766:  MOVWF  x60
1768:  CALL   095A
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
176C:  MOVLW  2A
176E:  MOVWF  FF6
1770:  MOVLW  02
1772:  MOVWF  FF7
1774:  CALL   0A68
....................             lcd_gotoxy(1,4); 
1778:  MOVLW  01
177A:  MOVWF  5F
177C:  MOVLW  04
177E:  MOVWF  x60
1780:  CALL   095A
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1784:  MOVLW  40
1786:  MOVWF  FF6
1788:  MOVLW  02
178A:  MOVWF  FF7
178C:  CALL   0A68
....................             delay_ms(2000); 
1790:  MOVLW  08
1792:  MOVWF  51
1794:  MOVLW  FA
1796:  MOVWF  x64
1798:  CALL   0876
179C:  DECFSZ 51,F
179E:  BRA    1794
....................             printf(lcd_putc,"\f"); 
17A0:  MOVLW  0C
17A2:  MOVWF  5E
17A4:  CALL   09BC
....................             inicio=1; 
17A8:  BSF    35.4
....................             Menu=0; 
17AA:  CLRF   17
....................             ModoSleep=0; 
17AC:  BCF    35.3
....................             delay_ms(500); 
17AE:  MOVLW  02
17B0:  MOVWF  51
17B2:  MOVLW  FA
17B4:  MOVWF  x64
17B6:  CALL   0876
17BA:  DECFSZ 51,F
17BC:  BRA    17B2
....................          } 
....................       } 
....................    } 
17BE:  BRA    1706
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
17C0:  MOVF   17,F
17C2:  BTFSS  FD8.2
17C4:  BRA    1BAE
....................    flag_latencia=1;set_pwm1_duty(0); 
17C6:  BSF    34.7
17C8:  CLRF   FBE
....................       if(Latencia==1) 
17CA:  BTFSS  35.0
17CC:  BRA    17D8
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
17CE:  MOVLW  0C
17D0:  MOVWF  5E
17D2:  CALL   09BC
17D6:  RESET
....................          } 
....................    lcd_gotoxy(1,1); 
17D8:  MOVLW  01
17DA:  MOVWF  5F
17DC:  MOVWF  x60
17DE:  CALL   095A
....................    printf(lcd_putc,"     Ingrese        "); 
17E2:  MOVLW  56
17E4:  MOVWF  FF6
17E6:  MOVLW  02
17E8:  MOVWF  FF7
17EA:  CALL   0A68
....................    lcd_gotoxy(1,2); 
17EE:  MOVLW  01
17F0:  MOVWF  5F
17F2:  MOVLW  02
17F4:  MOVWF  x60
17F6:  CALL   095A
....................    printf(lcd_putc,"    Contraseña      "); 
17FA:  MOVLW  6C
17FC:  MOVWF  FF6
17FE:  MOVLW  02
1800:  MOVWF  FF7
1802:  CALL   0A68
....................    lcd_gotoxy(1,3); 
1806:  MOVLW  01
1808:  MOVWF  5F
180A:  MOVLW  03
180C:  MOVWF  x60
180E:  CALL   095A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1812:  MOVLW  82
1814:  MOVWF  FF6
1816:  MOVLW  02
1818:  MOVWF  FF7
181A:  MOVLW  0A
181C:  MOVWF  51
181E:  CALL   0A88
1822:  MOVFF  3A,51
1826:  MOVLW  1F
1828:  MOVWF  52
182A:  CALL   0ACE
182E:  MOVFF  3B,51
1832:  MOVLW  1F
1834:  MOVWF  52
1836:  CALL   0ACE
183A:  MOVFF  3C,51
183E:  MOVLW  1F
1840:  MOVWF  52
1842:  CALL   0ACE
1846:  MOVFF  3D,51
184A:  MOVLW  1F
184C:  MOVWF  52
184E:  CALL   0ACE
1852:  MOVLW  20
1854:  MOVWF  5E
1856:  CALL   09BC
185A:  MOVLW  20
185C:  MOVWF  5E
185E:  CALL   09BC
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1862:  BSF    F96.2
1864:  BTFSS  F84.2
1866:  BRA    188E
....................       {  if(Flanco == 0)  
1868:  BTFSC  34.3
186A:  BRA    188C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
186C:  MOVLW  0B
186E:  SUBWF  1A,W
1870:  CLRF   03
1872:  ADDLW  3A
1874:  MOVWF  FE9
1876:  MOVLW  00
1878:  ADDWFC 03,W
187A:  MOVWF  FEA
187C:  INCF   FEF,F
187E:  BSF    34.3
1880:  MOVLW  1E
1882:  MOVWF  x64
1884:  CALL   0876
1888:  CLRF   4E
188A:  CLRF   4D
....................          else 
188C:  BRA    1890
....................             {Flanco = 0;} 
188E:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1890:  BSF    F96.1
1892:  BTFSS  F84.1
1894:  BRA    18BC
....................       {  if(Flanco2 == 0)  
1896:  BTFSC  34.5
1898:  BRA    18BA
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
189A:  MOVLW  0B
189C:  SUBWF  1A,W
189E:  CLRF   03
18A0:  ADDLW  3A
18A2:  MOVWF  FE9
18A4:  MOVLW  00
18A6:  ADDWFC 03,W
18A8:  MOVWF  FEA
18AA:  DECF   FEF,F
18AC:  BSF    34.5
18AE:  MOVLW  1E
18B0:  MOVWF  x64
18B2:  CALL   0876
18B6:  CLRF   4E
18B8:  CLRF   4D
....................          else 
18BA:  BRA    18BE
....................             {Flanco2 = 0;} 
18BC:  BCF    34.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
18BE:  BSF    F92.5
18C0:  BTFSS  F80.5
18C2:  BRA    18E2
....................       {  if(Flanco1 == 0)  
18C4:  BTFSC  34.4
18C6:  BRA    18E0
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
18C8:  BSF    34.4
18CA:  INCF   1A,F
18CC:  MOVLW  1E
18CE:  MOVWF  x64
18D0:  CALL   0876
18D4:  MOVLW  0C
18D6:  MOVWF  5E
18D8:  CALL   09BC
18DC:  CLRF   4E
18DE:  CLRF   4D
....................          else 
18E0:  BRA    18E4
....................             {Flanco1 = 0;}    
18E2:  BCF    34.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
18E4:  BSF    F96.0
18E6:  BTFSS  F84.0
18E8:  BRA    1908
....................       {  if(Flanco3 == 0)  
18EA:  BTFSC  34.6
18EC:  BRA    1906
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
18EE:  BSF    34.6
18F0:  DECF   1A,F
18F2:  MOVLW  1E
18F4:  MOVWF  x64
18F6:  CALL   0876
18FA:  MOVLW  0C
18FC:  MOVWF  5E
18FE:  CALL   09BC
1902:  CLRF   4E
1904:  CLRF   4D
....................          else 
1906:  BRA    190A
....................             {Flanco3 = 0;}     
1908:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
190A:  MOVLW  0B
190C:  SUBWF  1A,W
190E:  CLRF   03
1910:  ADDLW  3A
1912:  MOVWF  FE9
1914:  MOVLW  00
1916:  ADDWFC 03,W
1918:  MOVWF  FEA
191A:  BTFSC  FEF.7
191C:  BRA    1920
191E:  BRA    1934
....................        {clave[unidad-11]=9;} 
1920:  MOVLW  0B
1922:  SUBWF  1A,W
1924:  CLRF   03
1926:  ADDLW  3A
1928:  MOVWF  FE9
192A:  MOVLW  00
192C:  ADDWFC 03,W
192E:  MOVWF  FEA
1930:  MOVLW  09
1932:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1934:  MOVLW  0B
1936:  SUBWF  1A,W
1938:  CLRF   03
193A:  ADDLW  3A
193C:  MOVWF  FE9
193E:  MOVLW  00
1940:  ADDWFC 03,W
1942:  MOVWF  FEA
1944:  BTFSC  FEF.7
1946:  BRA    1960
1948:  MOVF   FEF,W
194A:  SUBLW  09
194C:  BC    1960
....................        {clave[unidad-11]=0;} 
194E:  MOVLW  0B
1950:  SUBWF  1A,W
1952:  CLRF   03
1954:  ADDLW  3A
1956:  MOVWF  FE9
1958:  MOVLW  00
195A:  ADDWFC 03,W
195C:  MOVWF  FEA
195E:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1960:  BTFSC  1A.7
1962:  BRA    196A
1964:  MOVF   1A,W
1966:  SUBLW  0A
1968:  BNC   196E
....................        {unidad=11;} 
196A:  MOVLW  0B
196C:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
196E:  MOVFF  1A,5F
1972:  MOVLW  04
1974:  MOVWF  x60
1976:  CALL   095A
....................        lcd_putc(t[2]); 
197A:  MOVFF  39,5E
197E:  CALL   09BC
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1982:  BTFSC  1A.7
1984:  BRA    1B80
1986:  MOVF   1A,W
1988:  SUBLW  0E
198A:  BTFSC  FD8.0
198C:  BRA    1B80
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
198E:  MOVF   3A,W
1990:  SUBLW  03
1992:  BNZ   1A6E
1994:  MOVF   3B,W
1996:  SUBLW  08
1998:  BNZ   1A6E
199A:  MOVF   3C,W
199C:  SUBLW  09
199E:  BNZ   1A6E
19A0:  MOVF   3D,W
19A2:  SUBLW  02
19A4:  BNZ   1A6E
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
19A6:  CLRF   FA9
19A8:  CLRF   FA8
19AA:  BCF    FA6.6
19AC:  BCF    FA6.7
19AE:  BSF    FA6.2
19B0:  MOVF   FF2,W
19B2:  MOVWF  00
19B4:  BCF    FF2.7
19B6:  MOVLB  F
19B8:  MOVLW  55
19BA:  MOVWF  FA7
19BC:  MOVLW  AA
19BE:  MOVWF  FA7
19C0:  BSF    FA6.1
19C2:  BTFSC  FA6.1
19C4:  BRA    19C2
19C6:  BCF    FA6.2
19C8:  MOVF   00,W
19CA:  IORWF  FF2,F
19CC:  MOVLW  14
19CE:  MOVLB  0
19D0:  MOVWF  x64
19D2:  CALL   0876
19D6:  MOVLW  01
19D8:  MOVWF  FA9
19DA:  CLRF   FA8
19DC:  BCF    FA6.6
19DE:  BCF    FA6.7
19E0:  BSF    FA6.2
19E2:  MOVF   FF2,W
19E4:  MOVWF  00
19E6:  BCF    FF2.7
19E8:  MOVLB  F
19EA:  MOVLW  55
19EC:  MOVWF  FA7
19EE:  MOVLW  AA
19F0:  MOVWF  FA7
19F2:  BSF    FA6.1
19F4:  BTFSC  FA6.1
19F6:  BRA    19F4
19F8:  BCF    FA6.2
19FA:  MOVF   00,W
19FC:  IORWF  FF2,F
19FE:  MOVLW  14
1A00:  MOVLB  0
1A02:  MOVWF  x64
1A04:  CALL   0876
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1A08:  MOVLW  02
1A0A:  MOVWF  FA9
1A0C:  CLRF   FA8
1A0E:  BCF    FA6.6
1A10:  BCF    FA6.7
1A12:  BSF    FA6.2
1A14:  MOVF   FF2,W
1A16:  MOVWF  00
1A18:  BCF    FF2.7
1A1A:  MOVLB  F
1A1C:  MOVLW  55
1A1E:  MOVWF  FA7
1A20:  MOVLW  AA
1A22:  MOVWF  FA7
1A24:  BSF    FA6.1
1A26:  BTFSC  FA6.1
1A28:  BRA    1A26
1A2A:  BCF    FA6.2
1A2C:  MOVF   00,W
1A2E:  IORWF  FF2,F
1A30:  MOVLW  14
1A32:  MOVLB  0
1A34:  MOVWF  x64
1A36:  CALL   0876
1A3A:  MOVLW  03
1A3C:  MOVWF  FA9
1A3E:  CLRF   FA8
1A40:  BCF    FA6.6
1A42:  BCF    FA6.7
1A44:  BSF    FA6.2
1A46:  MOVF   FF2,W
1A48:  MOVWF  00
1A4A:  BCF    FF2.7
1A4C:  MOVLB  F
1A4E:  MOVLW  55
1A50:  MOVWF  FA7
1A52:  MOVLW  AA
1A54:  MOVWF  FA7
1A56:  BSF    FA6.1
1A58:  BTFSC  FA6.1
1A5A:  BRA    1A58
1A5C:  BCF    FA6.2
1A5E:  MOVF   00,W
1A60:  IORWF  FF2,F
1A62:  MOVLW  14
1A64:  MOVLB  0
1A66:  MOVWF  x64
1A68:  CALL   0876
....................              reset_cpu();} 
1A6C:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1A6E:  MOVF   3E,W
1A70:  SUBWF  3A,W
1A72:  BNZ   1B12
1A74:  MOVF   3F,W
1A76:  SUBWF  3B,W
1A78:  BNZ   1B12
1A7A:  MOVF   40,W
1A7C:  SUBWF  3C,W
1A7E:  BNZ   1B12
1A80:  MOVF   41,W
1A82:  SUBWF  3D,W
1A84:  BNZ   1B12
....................             {lcd_gotoxy(1,1); 
1A86:  MOVLW  01
1A88:  MOVWF  5F
1A8A:  MOVWF  x60
1A8C:  CALL   095A
....................             printf(lcd_putc,"                   "); 
1A90:  MOVLW  98
1A92:  MOVWF  FF6
1A94:  MOVLW  02
1A96:  MOVWF  FF7
1A98:  CALL   0A68
....................             lcd_gotoxy(1,2); 
1A9C:  MOVLW  01
1A9E:  MOVWF  5F
1AA0:  MOVLW  02
1AA2:  MOVWF  x60
1AA4:  CALL   095A
....................             printf(lcd_putc,"     Contraseña    "); 
1AA8:  MOVLW  AC
1AAA:  MOVWF  FF6
1AAC:  MOVLW  02
1AAE:  MOVWF  FF7
1AB0:  CALL   0A68
....................             lcd_gotoxy(1,3); 
1AB4:  MOVLW  01
1AB6:  MOVWF  5F
1AB8:  MOVLW  03
1ABA:  MOVWF  x60
1ABC:  CALL   095A
....................             printf(lcd_putc,"      Correcta     "); 
1AC0:  MOVLW  C0
1AC2:  MOVWF  FF6
1AC4:  MOVLW  02
1AC6:  MOVWF  FF7
1AC8:  CALL   0A68
....................             lcd_gotoxy(1,4); 
1ACC:  MOVLW  01
1ACE:  MOVWF  5F
1AD0:  MOVLW  04
1AD2:  MOVWF  x60
1AD4:  CALL   095A
....................             printf(lcd_putc,"                   "); 
1AD8:  MOVLW  D4
1ADA:  MOVWF  FF6
1ADC:  MOVLW  02
1ADE:  MOVWF  FF7
1AE0:  CALL   0A68
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");flag_latencia=0;Latencia=0;tiempo_purga=1; 
1AE4:  MOVLW  02
1AE6:  MOVWF  51
1AE8:  MOVLW  FA
1AEA:  MOVWF  x64
1AEC:  CALL   0876
1AF0:  DECFSZ 51,F
1AF2:  BRA    1AE8
1AF4:  MOVLW  32
1AF6:  MOVWF  17
1AF8:  MOVLW  0B
1AFA:  MOVWF  1A
1AFC:  MOVLW  0C
1AFE:  MOVWF  5E
1B00:  CALL   09BC
1B04:  BCF    34.7
1B06:  BCF    35.0
1B08:  BSF    4A.1
....................             t_latencia=0;flag_iniciodamper=1;} 
1B0A:  CLRF   4E
1B0C:  CLRF   4D
1B0E:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1B10:  BRA    1B80
....................          {lcd_gotoxy(1,1); 
1B12:  MOVLW  01
1B14:  MOVWF  5F
1B16:  MOVWF  x60
1B18:  CALL   095A
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1B1C:  MOVLW  01
1B1E:  MOVWF  5F
1B20:  MOVLW  02
1B22:  MOVWF  x60
1B24:  CALL   095A
....................             printf(lcd_putc,"     Contraseña    "); 
1B28:  MOVLW  E8
1B2A:  MOVWF  FF6
1B2C:  MOVLW  02
1B2E:  MOVWF  FF7
1B30:  CALL   0A68
....................             lcd_gotoxy(1,3); 
1B34:  MOVLW  01
1B36:  MOVWF  5F
1B38:  MOVLW  03
1B3A:  MOVWF  x60
1B3C:  CALL   095A
....................             printf(lcd_putc,"     Incorrecta    "); 
1B40:  MOVLW  FC
1B42:  MOVWF  FF6
1B44:  MOVLW  02
1B46:  MOVWF  FF7
1B48:  CALL   0A68
....................             lcd_gotoxy(1,4); 
1B4C:  MOVLW  01
1B4E:  MOVWF  5F
1B50:  MOVLW  04
1B52:  MOVWF  x60
1B54:  CALL   095A
....................             printf(lcd_putc,"                   "); 
1B58:  MOVLW  10
1B5A:  MOVWF  FF6
1B5C:  MOVLW  03
1B5E:  MOVWF  FF7
1B60:  CALL   0A68
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
1B64:  MOVLW  02
1B66:  MOVWF  51
1B68:  MOVLW  FA
1B6A:  MOVWF  x64
1B6C:  CALL   0876
1B70:  DECFSZ 51,F
1B72:  BRA    1B68
1B74:  MOVLW  0B
1B76:  MOVWF  1A
1B78:  MOVLW  0C
1B7A:  MOVWF  5E
1B7C:  CALL   09BC
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1B80:  BTFSC  1A.7
1B82:  BRA    1BAC
1B84:  MOVF   1A,W
1B86:  SUBLW  0B
1B88:  BC    1BAC
1B8A:  BTFSC  1A.7
1B8C:  BRA    1B94
1B8E:  MOVF   1A,W
1B90:  SUBLW  0D
1B92:  BNC   1BAC
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1B94:  MOVLW  01
1B96:  SUBWF  1A,W
1B98:  MOVWF  51
1B9A:  MOVWF  5F
1B9C:  MOVLW  04
1B9E:  MOVWF  x60
1BA0:  CALL   095A
....................             lcd_putc(t[1]); 
1BA4:  MOVFF  38,5E
1BA8:  CALL   09BC
....................           } 
....................  
....................    } 
1BAC:  BRA    17C0
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1BAE:  DECFSZ 17,W
1BB0:  BRA    1DC8
....................       if(paso<0) 
1BB2:  BTFSC  36.7
1BB4:  BRA    1BB8
1BB6:  BRA    1BBA
....................         {paso=0;} 
1BB8:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
1BBA:  MOVLW  01
1BBC:  MOVWF  5F
1BBE:  MOVWF  x60
1BC0:  CALL   095A
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1BC4:  MOVLW  24
1BC6:  MOVWF  FF6
1BC8:  MOVLW  03
1BCA:  MOVWF  FF7
1BCC:  CALL   0A68
....................     
....................       if(UP)//Si oprime hacia arriba 
1BD0:  BSF    F96.2
1BD2:  BTFSS  F84.2
1BD4:  BRA    1BF0
....................       {  if(Flanco == 0)  
1BD6:  BTFSC  34.3
1BD8:  BRA    1BEE
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
1BDA:  DECF   1D,F
1BDC:  DECF   1B,F
1BDE:  MOVLW  01
1BE0:  ADDWF  1B,W
1BE2:  MOVWF  1C
1BE4:  BSF    34.3
1BE6:  MOVLW  1E
1BE8:  MOVWF  x64
1BEA:  CALL   0876
....................          else 
1BEE:  BRA    1BF2
....................             {Flanco = 0;} 
1BF0:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1BF2:  BSF    F96.1
1BF4:  BTFSS  F84.1
1BF6:  BRA    1C12
....................       {  if(Flanco2 == 0)  
1BF8:  BTFSC  34.5
1BFA:  BRA    1C10
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
1BFC:  INCF   1D,F
1BFE:  INCF   1B,F
1C00:  MOVLW  01
1C02:  SUBWF  1B,W
1C04:  MOVWF  1C
1C06:  BSF    34.5
1C08:  MOVLW  1E
1C0A:  MOVWF  x64
1C0C:  CALL   0876
....................          else 
1C10:  BRA    1C14
....................             {Flanco2 = 0;} 
1C12:  BCF    34.5
....................     
....................          
....................         if(Flecha2>nMenuH) 
1C14:  MOVF   1F,W
1C16:  XORLW  80
1C18:  MOVWF  00
1C1A:  MOVF   1D,W
1C1C:  XORLW  80
1C1E:  SUBWF  00,W
1C20:  BC    1C32
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1C22:  INCF   36,F
1C24:  MOVFF  1D,1F
1C28:  MOVLW  02
1C2A:  SUBWF  1F,W
1C2C:  MOVWF  1E
1C2E:  MOVLW  04
1C30:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
1C32:  MOVF   1D,W
1C34:  XORLW  80
1C36:  MOVWF  00
1C38:  MOVF   1E,W
1C3A:  XORLW  80
1C3C:  SUBWF  00,W
1C3E:  BC    1C50
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1C40:  DECF   36,F
1C42:  MOVFF  1D,1E
1C46:  MOVLW  02
1C48:  ADDWF  1E,W
1C4A:  MOVWF  1F
1C4C:  MOVLW  02
1C4E:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
1C50:  MOVF   18,W
1C52:  XORLW  80
1C54:  MOVWF  00
1C56:  MOVF   1D,W
1C58:  XORLW  80
1C5A:  SUBWF  00,W
1C5C:  BC    1C70
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1C5E:  MOVFF  19,1D
1C62:  MOVLW  02
1C64:  MOVWF  1B
1C66:  CLRF   36
1C68:  MOVFF  1D,1E
1C6C:  ADDWF  1E,W
1C6E:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
1C70:  MOVF   1D,W
1C72:  XORLW  80
1C74:  MOVWF  00
1C76:  MOVF   19,W
1C78:  XORLW  80
1C7A:  SUBWF  00,W
1C7C:  BC    1C94
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
1C7E:  MOVFF  18,1D
1C82:  MOVLW  04
1C84:  MOVWF  1B
1C86:  SUBWF  18,W
1C88:  MOVWF  36
1C8A:  MOVFF  1D,1F
1C8E:  MOVLW  02
1C90:  SUBWF  1F,W
1C92:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
1C94:  MOVLW  01
1C96:  ADDWF  36,W
1C98:  MOVWF  51
1C9A:  MOVWF  52
1C9C:  MOVLW  02
1C9E:  MOVWF  53
1CA0:  CALL   0B96
....................         mensajes(2+paso,3); 
1CA4:  MOVLW  02
1CA6:  ADDWF  36,W
1CA8:  MOVWF  51
1CAA:  MOVWF  52
1CAC:  MOVLW  03
1CAE:  MOVWF  53
1CB0:  CALL   0B96
....................         mensajes(3+paso,4); 
1CB4:  MOVLW  03
1CB6:  ADDWF  36,W
1CB8:  MOVWF  51
1CBA:  MOVWF  52
1CBC:  MOVLW  04
1CBE:  MOVWF  53
1CC0:  CALL   0B96
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1CC4:  MOVLW  01
1CC6:  MOVWF  5F
1CC8:  MOVFF  1B,60
1CCC:  CALL   095A
....................         lcd_putc(t[0]); 
1CD0:  MOVFF  37,5E
1CD4:  CALL   09BC
....................  
....................         if(Flecha==2) 
1CD8:  MOVF   1B,W
1CDA:  SUBLW  02
1CDC:  BNZ   1D06
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1CDE:  MOVLW  01
1CE0:  MOVWF  5F
1CE2:  MOVLW  04
1CE4:  MOVWF  x60
1CE6:  CALL   095A
....................             lcd_putc(t[1]); 
1CEA:  MOVFF  38,5E
1CEE:  CALL   09BC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1CF2:  MOVLW  01
1CF4:  MOVWF  5F
1CF6:  MOVLW  03
1CF8:  MOVWF  x60
1CFA:  CALL   095A
....................             lcd_putc(t[1]); 
1CFE:  MOVFF  38,5E
1D02:  CALL   09BC
....................           } 
....................          
....................         if(Flecha==4) 
1D06:  MOVF   1B,W
1D08:  SUBLW  04
1D0A:  BNZ   1D34
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1D0C:  MOVLW  01
1D0E:  MOVWF  5F
1D10:  MOVLW  02
1D12:  MOVWF  x60
1D14:  CALL   095A
....................             lcd_putc(t[1]); 
1D18:  MOVFF  38,5E
1D1C:  CALL   09BC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1D20:  MOVLW  01
1D22:  MOVWF  5F
1D24:  MOVLW  03
1D26:  MOVWF  x60
1D28:  CALL   095A
....................             lcd_putc(t[1]); 
1D2C:  MOVFF  38,5E
1D30:  CALL   09BC
....................           } 
....................          
....................         if(Flecha==3) 
1D34:  MOVF   1B,W
1D36:  SUBLW  03
1D38:  BNZ   1D62
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1D3A:  MOVLW  01
1D3C:  MOVWF  5F
1D3E:  MOVLW  04
1D40:  MOVWF  x60
1D42:  CALL   095A
....................             lcd_putc(t[1]); 
1D46:  MOVFF  38,5E
1D4A:  CALL   09BC
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1D4E:  MOVLW  01
1D50:  MOVWF  5F
1D52:  MOVLW  02
1D54:  MOVWF  x60
1D56:  CALL   095A
....................             lcd_putc(t[1]); 
1D5A:  MOVFF  38,5E
1D5E:  CALL   09BC
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
1D62:  BSF    F92.5
1D64:  BTFSS  F80.5
1D66:  BRA    1D9C
....................       {  if(Flanco1 == 0)  
1D68:  BTFSC  34.4
1D6A:  BRA    1D9A
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
1D6C:  MOVFF  1D,17
1D70:  MOVLW  03
1D72:  MOVWF  1B
1D74:  MOVLW  02
1D76:  MOVWF  51
1D78:  MOVLW  FA
1D7A:  MOVWF  x64
1D7C:  CALL   0876
1D80:  DECFSZ 51,F
1D82:  BRA    1D78
1D84:  MOVLW  0C
1D86:  MOVWF  5E
1D88:  CALL   09BC
....................             if(Menu==6) 
1D8C:  MOVF   17,W
1D8E:  SUBLW  06
1D90:  BNZ   1D9A
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
1D92:  CLRF   3A
1D94:  CLRF   3B
1D96:  CLRF   3C
1D98:  CLRF   3D
....................          else 
1D9A:  BRA    1D9E
....................             {Flanco1 = 0;}   
1D9C:  BCF    34.4
....................              
....................       if(LEFT)// Si oprime Izquierda 
1D9E:  BSF    F96.0
1DA0:  BTFSS  F84.0
1DA2:  BRA    1DC6
....................       {  if(Flanco3 == 0)  
1DA4:  BTFSC  34.6
1DA6:  BRA    1DC4
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
1DA8:  MOVLW  02
1DAA:  MOVWF  51
1DAC:  MOVLW  FA
1DAE:  MOVWF  x64
1DB0:  CALL   0876
1DB4:  DECFSZ 51,F
1DB6:  BRA    1DAC
1DB8:  MOVLW  14
1DBA:  MOVWF  17
1DBC:  MOVLW  0C
1DBE:  MOVWF  5E
1DC0:  CALL   09BC
....................          else 
1DC4:  BRA    1DC8
....................             {Flanco3 = 0;}                
1DC6:  BCF    34.6
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
1DC8:  MOVF   17,W
1DCA:  SUBLW  02
1DCC:  BTFSS  FD8.2
1DCE:  BRA    1EFA
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
1DD0:  BTG    34.2
1DD2:  BSF    34.4
1DD4:  MOVLW  01
1DD6:  MOVWF  17
1DD8:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
1DDA:  BTFSS  34.2
1DDC:  BRA    1E3E
....................             {estadoalarma=1; 
1DDE:  BSF    34.2
....................                lcd_gotoxy(1,1); 
1DE0:  MOVLW  01
1DE2:  MOVWF  5F
1DE4:  MOVWF  x60
1DE6:  CALL   095A
....................                printf(lcd_putc,"                    "); 
1DEA:  MOVLW  3A
1DEC:  MOVWF  FF6
1DEE:  MOVLW  03
1DF0:  MOVWF  FF7
1DF2:  CALL   0A68
....................                lcd_gotoxy(1,2); 
1DF6:  MOVLW  01
1DF8:  MOVWF  5F
1DFA:  MOVLW  02
1DFC:  MOVWF  x60
1DFE:  CALL   095A
....................                printf(lcd_putc,"        Activo      "); 
1E02:  MOVLW  50
1E04:  MOVWF  FF6
1E06:  MOVLW  03
1E08:  MOVWF  FF7
1E0A:  CALL   0A68
....................                lcd_gotoxy(1,3); 
1E0E:  MOVLW  01
1E10:  MOVWF  5F
1E12:  MOVLW  03
1E14:  MOVWF  x60
1E16:  CALL   095A
....................                printf(lcd_putc,"        Alarma      "); 
1E1A:  MOVLW  66
1E1C:  MOVWF  FF6
1E1E:  MOVLW  03
1E20:  MOVWF  FF7
1E22:  CALL   0A68
....................                lcd_gotoxy(1,4); 
1E26:  MOVLW  01
1E28:  MOVWF  5F
1E2A:  MOVLW  04
1E2C:  MOVWF  x60
1E2E:  CALL   095A
....................                printf(lcd_putc,"                    ");} 
1E32:  MOVLW  7C
1E34:  MOVWF  FF6
1E36:  MOVLW  03
1E38:  MOVWF  FF7
1E3A:  CALL   0A68
....................                 
....................             if(estadoalarma==0) 
1E3E:  BTFSC  34.2
1E40:  BRA    1EA2
....................             {estadoalarma=0; 
1E42:  BCF    34.2
....................                lcd_gotoxy(1,1); 
1E44:  MOVLW  01
1E46:  MOVWF  5F
1E48:  MOVWF  x60
1E4A:  CALL   095A
....................                printf(lcd_putc,"                    "); 
1E4E:  MOVLW  92
1E50:  MOVWF  FF6
1E52:  MOVLW  03
1E54:  MOVWF  FF7
1E56:  CALL   0A68
....................                lcd_gotoxy(1,2); 
1E5A:  MOVLW  01
1E5C:  MOVWF  5F
1E5E:  MOVLW  02
1E60:  MOVWF  x60
1E62:  CALL   095A
....................                printf(lcd_putc,"      Desactivo     "); 
1E66:  MOVLW  A8
1E68:  MOVWF  FF6
1E6A:  MOVLW  03
1E6C:  MOVWF  FF7
1E6E:  CALL   0A68
....................                lcd_gotoxy(1,3); 
1E72:  MOVLW  01
1E74:  MOVWF  5F
1E76:  MOVLW  03
1E78:  MOVWF  x60
1E7A:  CALL   095A
....................                printf(lcd_putc,"       Alarma       "); 
1E7E:  MOVLW  BE
1E80:  MOVWF  FF6
1E82:  MOVLW  03
1E84:  MOVWF  FF7
1E86:  CALL   0A68
....................                lcd_gotoxy(1,4); 
1E8A:  MOVLW  01
1E8C:  MOVWF  5F
1E8E:  MOVLW  04
1E90:  MOVWF  x60
1E92:  CALL   095A
....................                printf(lcd_putc,"                    ");} 
1E96:  MOVLW  D4
1E98:  MOVWF  FF6
1E9A:  MOVLW  03
1E9C:  MOVWF  FF7
1E9E:  CALL   0A68
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
1EA2:  MOVLW  00
1EA4:  BTFSC  34.2
1EA6:  MOVLW  01
1EA8:  MOVWF  51
1EAA:  MOVLW  05
1EAC:  MOVWF  FA9
1EAE:  MOVFF  51,FA8
1EB2:  BCF    FA6.6
1EB4:  BCF    FA6.7
1EB6:  BSF    FA6.2
1EB8:  MOVF   FF2,W
1EBA:  MOVWF  00
1EBC:  BCF    FF2.7
1EBE:  MOVLB  F
1EC0:  MOVLW  55
1EC2:  MOVWF  FA7
1EC4:  MOVLW  AA
1EC6:  MOVWF  FA7
1EC8:  BSF    FA6.1
1ECA:  BTFSC  FA6.1
1ECC:  BRA    1ECA
1ECE:  BCF    FA6.2
1ED0:  MOVF   00,W
1ED2:  IORWF  FF2,F
1ED4:  MOVLW  04
1ED6:  MOVWF  51
1ED8:  MOVLW  FA
1EDA:  MOVLB  0
1EDC:  MOVWF  x64
1EDE:  CALL   0876
1EE2:  DECFSZ 51,F
1EE4:  BRA    1EE8
1EE6:  BRA    1EEC
1EE8:  MOVLB  F
1EEA:  BRA    1ED8
1EEC:  MOVLW  02
1EEE:  MOVWF  1B
1EF0:  MOVWF  1D
1EF2:  MOVLW  0C
1EF4:  MOVWF  5E
1EF6:  CALL   09BC
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
1EFA:  MOVF   17,W
1EFC:  SUBLW  03
1EFE:  BTFSS  FD8.2
1F00:  BRA    214C
....................    lcd_gotoxy(1,1); 
1F02:  MOVLW  01
1F04:  MOVWF  5F
1F06:  MOVWF  x60
1F08:  CALL   095A
....................    printf(lcd_putc,"  Duracion Actual   ");                           
1F0C:  MOVLW  EA
1F0E:  MOVWF  FF6
1F10:  MOVLW  03
1F12:  MOVWF  FF7
1F14:  CALL   0A68
....................    lcd_gotoxy(1,2);                                                   
1F18:  MOVLW  01
1F1A:  MOVWF  5F
1F1C:  MOVLW  02
1F1E:  MOVWF  x60
1F20:  CALL   095A
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
1F24:  MOVLW  00
1F26:  MOVWF  FF6
1F28:  MOVLW  04
1F2A:  MOVWF  FF7
1F2C:  MOVLW  09
1F2E:  MOVWF  51
1F30:  CALL   0A88
1F34:  MOVFF  2C,51
1F38:  MOVLW  01
1F3A:  MOVWF  52
1F3C:  CALL   0C4E
1F40:  MOVLW  3A
1F42:  MOVWF  5E
1F44:  CALL   09BC
1F48:  MOVFF  2B,51
1F4C:  MOVLW  01
1F4E:  MOVWF  52
1F50:  CALL   0C4E
1F54:  MOVLW  3A
1F56:  MOVWF  5E
1F58:  CALL   09BC
1F5C:  MOVFF  2A,51
1F60:  MOVLW  01
1F62:  MOVWF  52
1F64:  CALL   0C4E
1F68:  MOVLW  20
1F6A:  MOVWF  5E
1F6C:  CALL   09BC
....................     
....................    if(flag_filtro==1) 
1F70:  BTFSS  35.1
1F72:  BRA    1F8E
....................    { 
....................       lcd_gotoxy(1,3);                                                  
1F74:  MOVLW  01
1F76:  MOVWF  5F
1F78:  MOVLW  03
1F7A:  MOVWF  x60
1F7C:  CALL   095A
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
1F80:  MOVLW  1A
1F82:  MOVWF  FF6
1F84:  MOVLW  04
1F86:  MOVWF  FF7
1F88:  CALL   0A68
....................    } 
....................    else 
1F8C:  BRA    1FA6
....................    { 
....................       lcd_gotoxy(1,3);                                                  
1F8E:  MOVLW  01
1F90:  MOVWF  5F
1F92:  MOVLW  03
1F94:  MOVWF  x60
1F96:  CALL   095A
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
1F9A:  MOVLW  30
1F9C:  MOVWF  FF6
1F9E:  MOVLW  04
1FA0:  MOVWF  FF7
1FA2:  CALL   0A68
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
1FA6:  MOVLW  01
1FA8:  MOVWF  5F
1FAA:  MOVLW  04
1FAC:  MOVWF  x60
1FAE:  CALL   095A
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
1FB2:  MOVLW  46
1FB4:  MOVWF  FF6
1FB6:  MOVLW  04
1FB8:  MOVWF  FF7
1FBA:  CALL   0A68
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
1FBE:  BSF    F96.2
1FC0:  BTFSS  F84.2
1FC2:  BRA    20B2
....................       {  delay_ms(200); 
1FC4:  MOVLW  C8
1FC6:  MOVWF  x64
1FC8:  CALL   0876
....................          printf(lcd_putc,"\f"); 
1FCC:  MOVLW  0C
1FCE:  MOVWF  5E
1FD0:  CALL   09BC
....................          lcd_gotoxy(1,2); 
1FD4:  MOVLW  01
1FD6:  MOVWF  5F
1FD8:  MOVLW  02
1FDA:  MOVWF  x60
1FDC:  CALL   095A
....................          printf(lcd_putc," Reset de tiempo "); 
1FE0:  MOVLW  5C
1FE2:  MOVWF  FF6
1FE4:  MOVLW  04
1FE6:  MOVWF  FF7
1FE8:  CALL   0A68
....................          lcd_gotoxy(1,3); 
1FEC:  MOVLW  01
1FEE:  MOVWF  5F
1FF0:  MOVLW  03
1FF2:  MOVWF  x60
1FF4:  CALL   095A
....................          printf(lcd_putc,"     Exitoso     "); 
1FF8:  MOVLW  6E
1FFA:  MOVWF  FF6
1FFC:  MOVLW  04
1FFE:  MOVWF  FF7
2000:  CALL   0A68
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
2004:  MOVLW  46
2006:  MOVWF  FA9
2008:  CLRF   FA8
200A:  BCF    FA6.6
200C:  BCF    FA6.7
200E:  BSF    FA6.2
2010:  MOVF   FF2,W
2012:  MOVWF  00
2014:  BCF    FF2.7
2016:  MOVLB  F
2018:  MOVLW  55
201A:  MOVWF  FA7
201C:  MOVLW  AA
201E:  MOVWF  FA7
2020:  BSF    FA6.1
2022:  BTFSC  FA6.1
2024:  BRA    2022
2026:  BCF    FA6.2
2028:  MOVF   00,W
202A:  IORWF  FF2,F
202C:  MOVLW  47
202E:  MOVWF  FA9
2030:  CLRF   FA8
2032:  BCF    FA6.6
2034:  BCF    FA6.7
2036:  BSF    FA6.2
2038:  MOVF   FF2,W
203A:  MOVWF  00
203C:  BCF    FF2.7
203E:  MOVLW  55
2040:  MOVWF  FA7
2042:  MOVLW  AA
2044:  MOVWF  FA7
2046:  BSF    FA6.1
2048:  BTFSC  FA6.1
204A:  BRA    2048
204C:  BCF    FA6.2
204E:  MOVF   00,W
2050:  IORWF  FF2,F
2052:  MOVLW  48
2054:  MOVWF  FA9
2056:  CLRF   FA8
2058:  BCF    FA6.6
205A:  BCF    FA6.7
205C:  BSF    FA6.2
205E:  MOVF   FF2,W
2060:  MOVWF  00
2062:  BCF    FF2.7
2064:  MOVLW  55
2066:  MOVWF  FA7
2068:  MOVLW  AA
206A:  MOVWF  FA7
206C:  BSF    FA6.1
206E:  BTFSC  FA6.1
2070:  BRA    206E
2072:  BCF    FA6.2
2074:  MOVF   00,W
2076:  IORWF  FF2,F
....................          delay_ms(700); 
2078:  MOVLW  04
207A:  MOVWF  51
207C:  MOVLW  AF
207E:  MOVLB  0
2080:  MOVWF  x64
2082:  CALL   0876
2086:  DECFSZ 51,F
2088:  BRA    208C
208A:  BRA    2090
208C:  MOVLB  F
208E:  BRA    207C
....................          segundos=0;minutos=0;horas=0; 
2090:  CLRF   2A
2092:  CLRF   2B
2094:  CLRF   2C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2096:  MOVLW  1E
2098:  MOVWF  x64
209A:  CALL   0876
209E:  MOVLW  01
20A0:  MOVWF  17
20A2:  CLRF   36
20A4:  MOVLW  02
20A6:  MOVWF  1B
20A8:  MOVWF  1D
20AA:  MOVLW  0C
20AC:  MOVWF  5E
20AE:  CALL   09BC
....................       } 
....................        
....................       if(RIGHT) 
20B2:  BSF    F92.5
20B4:  BTFSS  F80.5
20B6:  BRA    2118
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
20B8:  BTG    35.1
20BA:  MOVLW  00
20BC:  BTFSC  35.1
20BE:  MOVLW  01
20C0:  MOVWF  51
20C2:  MOVLW  49
20C4:  MOVWF  FA9
20C6:  MOVFF  51,FA8
20CA:  BCF    FA6.6
20CC:  BCF    FA6.7
20CE:  BSF    FA6.2
20D0:  MOVF   FF2,W
20D2:  MOVWF  00
20D4:  BCF    FF2.7
20D6:  MOVLB  F
20D8:  MOVLW  55
20DA:  MOVWF  FA7
20DC:  MOVLW  AA
20DE:  MOVWF  FA7
20E0:  BSF    FA6.1
20E2:  BTFSC  FA6.1
20E4:  BRA    20E2
20E6:  BCF    FA6.2
20E8:  MOVF   00,W
20EA:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
20EC:  MOVLW  02
20EE:  MOVWF  51
20F0:  MOVLW  FA
20F2:  MOVLB  0
20F4:  MOVWF  x64
20F6:  CALL   0876
20FA:  DECFSZ 51,F
20FC:  BRA    2100
20FE:  BRA    2104
2100:  MOVLB  F
2102:  BRA    20F0
2104:  MOVLW  01
2106:  MOVWF  17
2108:  CLRF   36
210A:  MOVLW  02
210C:  MOVWF  1B
210E:  MOVWF  1D
2110:  MOVLW  0C
2112:  MOVWF  5E
2114:  CALL   09BC
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
2118:  BSF    F96.0
211A:  BTFSS  F84.0
211C:  BRA    214A
....................       {  if(Flanco3 == 0)  
211E:  BTFSC  34.6
2120:  BRA    2148
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
2122:  BSF    34.6
2124:  MOVLW  02
2126:  MOVWF  51
2128:  MOVLW  FA
212A:  MOVWF  x64
212C:  CALL   0876
2130:  DECFSZ 51,F
2132:  BRA    2128
2134:  MOVLW  01
2136:  MOVWF  17
2138:  CLRF   36
213A:  MOVLW  02
213C:  MOVWF  1B
213E:  MOVWF  1D
2140:  MOVLW  0C
2142:  MOVWF  5E
2144:  CALL   09BC
....................          else 
2148:  BRA    214C
....................             {Flanco3 = 0;}       
214A:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
214C:  MOVF   17,W
214E:  SUBLW  04
2150:  BTFSS  FD8.2
2152:  BRA    234A
....................    lcd_gotoxy(1,2); 
2154:  MOVLW  01
2156:  MOVWF  5F
2158:  MOVLW  02
215A:  MOVWF  x60
215C:  CALL   095A
....................    printf(lcd_putc,"    Vida Filtro     "); 
2160:  MOVLW  80
2162:  MOVWF  FF6
2164:  MOVLW  04
2166:  MOVWF  FF7
2168:  CALL   0A68
....................    lcd_gotoxy(1,3); 
216C:  MOVLW  01
216E:  MOVWF  5F
2170:  MOVLW  03
2172:  MOVWF  x60
2174:  CALL   095A
....................    printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
2178:  MOVLW  96
217A:  MOVWF  FF6
217C:  MOVLW  04
217E:  MOVWF  FF7
2180:  MOVLW  06
2182:  MOVWF  51
2184:  CALL   0A88
2188:  MOVLW  42
218A:  MOVWF  FE9
218C:  MOVFF  45,54
2190:  MOVFF  44,53
2194:  MOVFF  43,52
2198:  MOVFF  42,51
219C:  CLRF   55
219E:  GOTO   0E62
21A2:  MOVLW  A2
21A4:  MOVWF  FF6
21A6:  MOVLW  04
21A8:  MOVWF  FF7
21AA:  MOVLW  08
21AC:  MOVWF  51
21AE:  CALL   0A88
....................     
....................    if(setpoint<1.0) 
21B2:  MOVFF  45,58
21B6:  MOVFF  44,57
21BA:  MOVFF  43,56
21BE:  MOVFF  42,55
21C2:  CLRF   5C
21C4:  CLRF   5B
21C6:  CLRF   5A
21C8:  MOVLW  7F
21CA:  MOVWF  59
21CC:  CALL   0FE2
21D0:  BNC   21DC
....................    {setpoint=1.0;} 
21D2:  CLRF   45
21D4:  CLRF   44
21D6:  CLRF   43
21D8:  MOVLW  7F
21DA:  MOVWF  42
....................     
....................    if(setpoint>255.0) 
21DC:  CLRF   58
21DE:  CLRF   57
21E0:  MOVLW  7F
21E2:  MOVWF  56
21E4:  MOVLW  86
21E6:  MOVWF  55
21E8:  MOVFF  45,5C
21EC:  MOVFF  44,5B
21F0:  MOVFF  43,5A
21F4:  MOVFF  42,59
21F8:  CALL   0FE2
21FC:  BNC   220A
....................    {setpoint=255.0;} 
21FE:  CLRF   45
2200:  CLRF   44
2202:  MOVLW  7F
2204:  MOVWF  43
2206:  MOVLW  86
2208:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
220A:  BSF    F96.2
220C:  BTFSS  F84.2
220E:  BRA    224A
....................       {setpoint+=1.0;Flanco = 1;delay_ms(30);} 
2210:  BCF    FD8.1
2212:  MOVFF  45,54
2216:  MOVFF  44,53
221A:  MOVFF  43,52
221E:  MOVFF  42,51
2222:  CLRF   58
2224:  CLRF   57
2226:  CLRF   56
2228:  MOVLW  7F
222A:  MOVWF  55
222C:  CALL   1058
2230:  MOVFF  03,45
2234:  MOVFF  02,44
2238:  MOVFF  01,43
223C:  MOVFF  00,42
2240:  BSF    34.3
2242:  MOVLW  1E
2244:  MOVWF  x64
2246:  CALL   0876
....................       
....................              
....................       if(DOWN)//Si oprime hacia abajo 
224A:  BSF    F96.1
224C:  BTFSS  F84.1
224E:  BRA    228A
....................       {setpoint-=1.0;Flanco2 = 1;delay_ms(30);} 
2250:  BSF    FD8.1
2252:  MOVFF  45,54
2256:  MOVFF  44,53
225A:  MOVFF  43,52
225E:  MOVFF  42,51
2262:  CLRF   58
2264:  CLRF   57
2266:  CLRF   56
2268:  MOVLW  7F
226A:  MOVWF  55
226C:  CALL   1058
2270:  MOVFF  03,45
2274:  MOVFF  02,44
2278:  MOVFF  01,43
227C:  MOVFF  00,42
2280:  BSF    34.5
2282:  MOVLW  1E
2284:  MOVWF  x64
2286:  CALL   0876
....................          
....................     
....................       if(RIGHT)// Si oprime derecha 
228A:  BSF    F92.5
228C:  BTFSS  F80.5
228E:  BRA    2312
....................       {  if(Flanco1 == 0)  
2290:  BTFSC  34.4
2292:  BRA    2310
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2294:  MOVLW  01
2296:  MOVWF  17
2298:  CLRF   36
229A:  MOVLW  02
229C:  MOVWF  1B
229E:  MOVWF  1D
22A0:  MOVLW  0B
22A2:  MOVWF  1A
22A4:  MOVLW  02
22A6:  MOVWF  51
22A8:  MOVLW  FA
22AA:  MOVWF  x64
22AC:  CALL   0876
22B0:  DECFSZ 51,F
22B2:  BRA    22A8
22B4:  MOVLW  0C
22B6:  MOVWF  5E
22B8:  CALL   09BC
....................             Temporal=setpoint; 
22BC:  MOVFF  45,49
22C0:  MOVFF  44,48
22C4:  MOVFF  43,47
22C8:  MOVFF  42,46
....................             Entero=(int)setpoint; 
22CC:  MOVFF  45,54
22D0:  MOVFF  44,53
22D4:  MOVFF  43,52
22D8:  MOVFF  42,51
22DC:  GOTO   12C2
22E0:  MOVFF  01,24
....................             write_eeprom(40,Entero); 
22E4:  MOVLW  28
22E6:  MOVWF  FA9
22E8:  MOVFF  24,FA8
22EC:  BCF    FA6.6
22EE:  BCF    FA6.7
22F0:  BSF    FA6.2
22F2:  MOVF   FF2,W
22F4:  MOVWF  00
22F6:  BCF    FF2.7
22F8:  MOVLB  F
22FA:  MOVLW  55
22FC:  MOVWF  FA7
22FE:  MOVLW  AA
2300:  MOVWF  FA7
2302:  BSF    FA6.1
2304:  BTFSC  FA6.1
2306:  BRA    2304
2308:  BCF    FA6.2
230A:  MOVF   00,W
230C:  IORWF  FF2,F
230E:  MOVLB  0
....................             }} 
....................          else 
2310:  BRA    2314
....................             {Flanco1 = 0;}    
2312:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2314:  BSF    F96.0
2316:  BTFSS  F84.0
2318:  BRA    2348
....................       {  if(Flanco3 == 0)  
231A:  BTFSC  34.6
231C:  BRA    2346
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
231E:  MOVLW  01
2320:  MOVWF  17
2322:  CLRF   36
2324:  MOVLW  02
2326:  MOVWF  1B
2328:  MOVWF  1D
232A:  MOVLW  0B
232C:  MOVWF  1A
232E:  MOVLW  02
2330:  MOVWF  51
2332:  MOVLW  FA
2334:  MOVWF  x64
2336:  CALL   0876
233A:  DECFSZ 51,F
233C:  BRA    2332
233E:  MOVLW  0C
2340:  MOVWF  5E
2342:  CALL   09BC
....................          else 
2346:  BRA    234A
....................             {Flanco3 = 0;}     
2348:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
234A:  MOVF   17,W
234C:  SUBLW  05
234E:  BTFSS  FD8.2
2350:  BRA    265A
....................    lcd_gotoxy(1,1); 
2352:  MOVLW  01
2354:  MOVWF  5F
2356:  MOVWF  x60
2358:  CALL   095A
....................    printf(lcd_putc,"      Ingrese       "); 
235C:  MOVLW  AC
235E:  MOVWF  FF6
2360:  MOVLW  04
2362:  MOVWF  FF7
2364:  CALL   0A68
....................    lcd_gotoxy(1,2); 
2368:  MOVLW  01
236A:  MOVWF  5F
236C:  MOVLW  02
236E:  MOVWF  x60
2370:  CALL   095A
....................    printf(lcd_putc," Contraseña Actual  "); 
2374:  MOVLW  C2
2376:  MOVWF  FF6
2378:  MOVLW  04
237A:  MOVWF  FF7
237C:  CALL   0A68
....................    lcd_gotoxy(1,3); 
2380:  MOVLW  01
2382:  MOVWF  5F
2384:  MOVLW  03
2386:  MOVWF  x60
2388:  CALL   095A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
238C:  MOVLW  D8
238E:  MOVWF  FF6
2390:  MOVLW  04
2392:  MOVWF  FF7
2394:  MOVLW  0A
2396:  MOVWF  51
2398:  CALL   0A88
239C:  MOVFF  3A,51
23A0:  MOVLW  1F
23A2:  MOVWF  52
23A4:  CALL   0ACE
23A8:  MOVFF  3B,51
23AC:  MOVLW  1F
23AE:  MOVWF  52
23B0:  CALL   0ACE
23B4:  MOVFF  3C,51
23B8:  MOVLW  1F
23BA:  MOVWF  52
23BC:  CALL   0ACE
23C0:  MOVFF  3D,51
23C4:  MOVLW  1F
23C6:  MOVWF  52
23C8:  CALL   0ACE
23CC:  MOVLW  20
23CE:  MOVWF  5E
23D0:  CALL   09BC
23D4:  MOVLW  20
23D6:  MOVWF  5E
23D8:  CALL   09BC
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
23DC:  BSF    F96.2
23DE:  BTFSS  F84.2
23E0:  BRA    2404
....................       {  if(Flanco == 0)  
23E2:  BTFSC  34.3
23E4:  BRA    2402
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
23E6:  MOVLW  0B
23E8:  SUBWF  1A,W
23EA:  CLRF   03
23EC:  ADDLW  3A
23EE:  MOVWF  FE9
23F0:  MOVLW  00
23F2:  ADDWFC 03,W
23F4:  MOVWF  FEA
23F6:  INCF   FEF,F
23F8:  BSF    34.3
23FA:  MOVLW  1E
23FC:  MOVWF  x64
23FE:  CALL   0876
....................          else 
2402:  BRA    2406
....................             {Flanco = 0;} 
2404:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2406:  BSF    F96.1
2408:  BTFSS  F84.1
240A:  BRA    242E
....................       {  if(Flanco2 == 0)  
240C:  BTFSC  34.5
240E:  BRA    242C
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2410:  MOVLW  0B
2412:  SUBWF  1A,W
2414:  CLRF   03
2416:  ADDLW  3A
2418:  MOVWF  FE9
241A:  MOVLW  00
241C:  ADDWFC 03,W
241E:  MOVWF  FEA
2420:  DECF   FEF,F
2422:  BSF    34.5
2424:  MOVLW  1E
2426:  MOVWF  x64
2428:  CALL   0876
....................          else 
242C:  BRA    2430
....................             {Flanco2 = 0;} 
242E:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime derecha 
2430:  BSF    F92.5
2432:  BTFSS  F80.5
2434:  BRA    2458
....................       {  if(Flanco1 == 0)  
2436:  BTFSC  34.4
2438:  BRA    2456
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
243A:  BSF    34.4
243C:  INCF   1A,F
243E:  MOVLW  02
2440:  MOVWF  51
2442:  MOVLW  FA
2444:  MOVWF  x64
2446:  CALL   0876
244A:  DECFSZ 51,F
244C:  BRA    2442
244E:  MOVLW  0C
2450:  MOVWF  5E
2452:  CALL   09BC
....................          else 
2456:  BRA    245A
....................             {Flanco1 = 0;}    
2458:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
245A:  BSF    F96.0
245C:  BTFSS  F84.0
245E:  BRA    2482
....................       {  if(Flanco3 == 0)  
2460:  BTFSC  34.6
2462:  BRA    2480
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
2464:  BSF    34.6
2466:  DECF   1A,F
2468:  MOVLW  02
246A:  MOVWF  51
246C:  MOVLW  FA
246E:  MOVWF  x64
2470:  CALL   0876
2474:  DECFSZ 51,F
2476:  BRA    246C
2478:  MOVLW  0C
247A:  MOVWF  5E
247C:  CALL   09BC
....................          else 
2480:  BRA    2484
....................             {Flanco3 = 0;}     
2482:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2484:  MOVLW  0B
2486:  SUBWF  1A,W
2488:  CLRF   03
248A:  ADDLW  3A
248C:  MOVWF  FE9
248E:  MOVLW  00
2490:  ADDWFC 03,W
2492:  MOVWF  FEA
2494:  BTFSC  FEF.7
2496:  BRA    249A
2498:  BRA    24AE
....................        {clave[unidad-11]=9;} 
249A:  MOVLW  0B
249C:  SUBWF  1A,W
249E:  CLRF   03
24A0:  ADDLW  3A
24A2:  MOVWF  FE9
24A4:  MOVLW  00
24A6:  ADDWFC 03,W
24A8:  MOVWF  FEA
24AA:  MOVLW  09
24AC:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
24AE:  MOVLW  0B
24B0:  SUBWF  1A,W
24B2:  CLRF   03
24B4:  ADDLW  3A
24B6:  MOVWF  FE9
24B8:  MOVLW  00
24BA:  ADDWFC 03,W
24BC:  MOVWF  FEA
24BE:  BTFSC  FEF.7
24C0:  BRA    24DA
24C2:  MOVF   FEF,W
24C4:  SUBLW  09
24C6:  BC    24DA
....................        {clave[unidad-11]=0;} 
24C8:  MOVLW  0B
24CA:  SUBWF  1A,W
24CC:  CLRF   03
24CE:  ADDLW  3A
24D0:  MOVWF  FE9
24D2:  MOVLW  00
24D4:  ADDWFC 03,W
24D6:  MOVWF  FEA
24D8:  CLRF   FEF
....................        if(unidad<11) 
24DA:  BTFSC  1A.7
24DC:  BRA    24E4
24DE:  MOVF   1A,W
24E0:  SUBLW  0A
24E2:  BNC   24F4
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
24E4:  MOVLW  01
24E6:  MOVWF  17
24E8:  CLRF   36
24EA:  MOVLW  02
24EC:  MOVWF  1B
24EE:  MOVWF  1D
24F0:  MOVLW  0B
24F2:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
24F4:  MOVFF  1A,5F
24F8:  MOVLW  04
24FA:  MOVWF  x60
24FC:  CALL   095A
....................        lcd_putc(t[2]); 
2500:  MOVFF  39,5E
2504:  CALL   09BC
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2508:  BTFSC  1A.7
250A:  BRA    262E
250C:  MOVF   1A,W
250E:  SUBLW  0E
2510:  BTFSC  FD8.0
2512:  BRA    262E
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2514:  MOVF   3E,W
2516:  SUBWF  3A,W
2518:  BNZ   25B4
251A:  MOVF   3F,W
251C:  SUBWF  3B,W
251E:  BNZ   25B4
2520:  MOVF   40,W
2522:  SUBWF  3C,W
2524:  BNZ   25B4
2526:  MOVF   41,W
2528:  SUBWF  3D,W
252A:  BNZ   25B4
....................             {lcd_gotoxy(1,1); 
252C:  MOVLW  01
252E:  MOVWF  5F
2530:  MOVWF  x60
2532:  CALL   095A
....................             printf(lcd_putc,"                    "); 
2536:  MOVLW  EE
2538:  MOVWF  FF6
253A:  MOVLW  04
253C:  MOVWF  FF7
253E:  CALL   0A68
....................             lcd_gotoxy(1,2); 
2542:  MOVLW  01
2544:  MOVWF  5F
2546:  MOVLW  02
2548:  MOVWF  x60
254A:  CALL   095A
....................             printf(lcd_putc,"     Contraseña     "); 
254E:  MOVLW  04
2550:  MOVWF  FF6
2552:  MOVLW  05
2554:  MOVWF  FF7
2556:  CALL   0A68
....................             lcd_gotoxy(1,3); 
255A:  MOVLW  01
255C:  MOVWF  5F
255E:  MOVLW  03
2560:  MOVWF  x60
2562:  CALL   095A
....................             printf(lcd_putc,"      Correcta      "); 
2566:  MOVLW  1A
2568:  MOVWF  FF6
256A:  MOVLW  05
256C:  MOVWF  FF7
256E:  CALL   0A68
....................             lcd_gotoxy(1,4); 
2572:  MOVLW  01
2574:  MOVWF  5F
2576:  MOVLW  04
2578:  MOVWF  x60
257A:  CALL   095A
....................             printf(lcd_putc,"                    "); 
257E:  MOVLW  30
2580:  MOVWF  FF6
2582:  MOVLW  05
2584:  MOVWF  FF7
2586:  CALL   0A68
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
258A:  MOVLW  02
258C:  MOVWF  51
258E:  MOVLW  FA
2590:  MOVWF  x64
2592:  CALL   0876
2596:  DECFSZ 51,F
2598:  BRA    258E
259A:  MOVLW  33
259C:  MOVWF  17
259E:  MOVLW  0B
25A0:  MOVWF  1A
25A2:  MOVLW  0C
25A4:  MOVWF  5E
25A6:  CALL   09BC
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
25AA:  CLRF   3A
25AC:  CLRF   3B
25AE:  CLRF   3C
25B0:  CLRF   3D
....................          else 
25B2:  BRA    262E
....................          {lcd_gotoxy(1,1); 
25B4:  MOVLW  01
25B6:  MOVWF  5F
25B8:  MOVWF  x60
25BA:  CALL   095A
....................             printf(lcd_putc,"                    "); 
25BE:  MOVLW  46
25C0:  MOVWF  FF6
25C2:  MOVLW  05
25C4:  MOVWF  FF7
25C6:  CALL   0A68
....................             lcd_gotoxy(1,2); 
25CA:  MOVLW  01
25CC:  MOVWF  5F
25CE:  MOVLW  02
25D0:  MOVWF  x60
25D2:  CALL   095A
....................             printf(lcd_putc,"     Contraseña     "); 
25D6:  MOVLW  5C
25D8:  MOVWF  FF6
25DA:  MOVLW  05
25DC:  MOVWF  FF7
25DE:  CALL   0A68
....................             lcd_gotoxy(1,3); 
25E2:  MOVLW  01
25E4:  MOVWF  5F
25E6:  MOVLW  03
25E8:  MOVWF  x60
25EA:  CALL   095A
....................             printf(lcd_putc,"     Incorrecta     "); 
25EE:  MOVLW  72
25F0:  MOVWF  FF6
25F2:  MOVLW  05
25F4:  MOVWF  FF7
25F6:  CALL   0A68
....................             lcd_gotoxy(1,4); 
25FA:  MOVLW  01
25FC:  MOVWF  5F
25FE:  MOVLW  04
2600:  MOVWF  x60
2602:  CALL   095A
....................             printf(lcd_putc,"                    "); 
2606:  MOVLW  88
2608:  MOVWF  FF6
260A:  MOVLW  05
260C:  MOVWF  FF7
260E:  CALL   0A68
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2612:  MOVLW  02
2614:  MOVWF  51
2616:  MOVLW  FA
2618:  MOVWF  x64
261A:  CALL   0876
261E:  DECFSZ 51,F
2620:  BRA    2616
2622:  MOVLW  0B
2624:  MOVWF  1A
2626:  MOVLW  0C
2628:  MOVWF  5E
262A:  CALL   09BC
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
262E:  BTFSC  1A.7
2630:  BRA    265A
2632:  MOVF   1A,W
2634:  SUBLW  0B
2636:  BC    265A
2638:  BTFSC  1A.7
263A:  BRA    2642
263C:  MOVF   1A,W
263E:  SUBLW  0D
2640:  BNC   265A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2642:  MOVLW  01
2644:  SUBWF  1A,W
2646:  MOVWF  51
2648:  MOVWF  5F
264A:  MOVLW  04
264C:  MOVWF  x60
264E:  CALL   095A
....................             lcd_putc(t[1]); 
2652:  MOVFF  38,5E
2656:  CALL   09BC
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
265A:  MOVF   17,W
265C:  SUBLW  33
265E:  BTFSS  FD8.2
2660:  BRA    2980
....................    lcd_gotoxy(1,1); 
2662:  MOVLW  01
2664:  MOVWF  5F
2666:  MOVWF  x60
2668:  CALL   095A
....................    printf(lcd_putc,"     Ingrese        "); 
266C:  MOVLW  9E
266E:  MOVWF  FF6
2670:  MOVLW  05
2672:  MOVWF  FF7
2674:  CALL   0A68
....................    lcd_gotoxy(1,2); 
2678:  MOVLW  01
267A:  MOVWF  5F
267C:  MOVLW  02
267E:  MOVWF  x60
2680:  CALL   095A
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2684:  MOVLW  B4
2686:  MOVWF  FF6
2688:  MOVLW  05
268A:  MOVWF  FF7
268C:  CALL   0A68
....................    lcd_gotoxy(1,3); 
2690:  MOVLW  01
2692:  MOVWF  5F
2694:  MOVLW  03
2696:  MOVWF  x60
2698:  CALL   095A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
269C:  MOVLW  CA
269E:  MOVWF  FF6
26A0:  MOVLW  05
26A2:  MOVWF  FF7
26A4:  MOVLW  0A
26A6:  MOVWF  51
26A8:  CALL   0A88
26AC:  MOVFF  3A,51
26B0:  MOVLW  1F
26B2:  MOVWF  52
26B4:  CALL   0ACE
26B8:  MOVFF  3B,51
26BC:  MOVLW  1F
26BE:  MOVWF  52
26C0:  CALL   0ACE
26C4:  MOVFF  3C,51
26C8:  MOVLW  1F
26CA:  MOVWF  52
26CC:  CALL   0ACE
26D0:  MOVFF  3D,51
26D4:  MOVLW  1F
26D6:  MOVWF  52
26D8:  CALL   0ACE
26DC:  MOVLW  20
26DE:  MOVWF  5E
26E0:  CALL   09BC
26E4:  MOVLW  20
26E6:  MOVWF  5E
26E8:  CALL   09BC
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
26EC:  BSF    F96.2
26EE:  BTFSS  F84.2
26F0:  BRA    2714
....................       {  if(Flanco == 0)  
26F2:  BTFSC  34.3
26F4:  BRA    2712
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
26F6:  MOVLW  0B
26F8:  SUBWF  1A,W
26FA:  CLRF   03
26FC:  ADDLW  3A
26FE:  MOVWF  FE9
2700:  MOVLW  00
2702:  ADDWFC 03,W
2704:  MOVWF  FEA
2706:  INCF   FEF,F
2708:  BSF    34.3
270A:  MOVLW  1E
270C:  MOVWF  x64
270E:  CALL   0876
....................          else 
2712:  BRA    2716
....................             {Flanco = 0;} 
2714:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2716:  BSF    F96.1
2718:  BTFSS  F84.1
271A:  BRA    273E
....................       {  if(Flanco2 == 0)  
271C:  BTFSC  34.5
271E:  BRA    273C
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2720:  MOVLW  0B
2722:  SUBWF  1A,W
2724:  CLRF   03
2726:  ADDLW  3A
2728:  MOVWF  FE9
272A:  MOVLW  00
272C:  ADDWFC 03,W
272E:  MOVWF  FEA
2730:  DECF   FEF,F
2732:  BSF    34.5
2734:  MOVLW  1E
2736:  MOVWF  x64
2738:  CALL   0876
....................          else 
273C:  BRA    2740
....................             {Flanco2 = 0;} 
273E:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2740:  BSF    F92.5
2742:  BTFSS  F80.5
2744:  BRA    2760
....................       {  if(Flanco1 == 0)  
2746:  BTFSC  34.4
2748:  BRA    275E
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
274A:  BSF    34.4
274C:  INCF   1A,F
274E:  MOVLW  1E
2750:  MOVWF  x64
2752:  CALL   0876
2756:  MOVLW  0C
2758:  MOVWF  5E
275A:  CALL   09BC
....................          else 
275E:  BRA    2762
....................             {Flanco1 = 0;}    
2760:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2762:  BSF    F96.0
2764:  BTFSS  F84.0
2766:  BRA    2782
....................       {  if(Flanco3 == 0)  
2768:  BTFSC  34.6
276A:  BRA    2780
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
276C:  BSF    34.6
276E:  DECF   1A,F
2770:  MOVLW  1E
2772:  MOVWF  x64
2774:  CALL   0876
2778:  MOVLW  0C
277A:  MOVWF  5E
277C:  CALL   09BC
....................          else 
2780:  BRA    2784
....................             {Flanco3 = 0;}     
2782:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2784:  MOVLW  0B
2786:  SUBWF  1A,W
2788:  CLRF   03
278A:  ADDLW  3A
278C:  MOVWF  FE9
278E:  MOVLW  00
2790:  ADDWFC 03,W
2792:  MOVWF  FEA
2794:  BTFSC  FEF.7
2796:  BRA    279A
2798:  BRA    27AE
....................        {clave[unidad-11]=9;} 
279A:  MOVLW  0B
279C:  SUBWF  1A,W
279E:  CLRF   03
27A0:  ADDLW  3A
27A2:  MOVWF  FE9
27A4:  MOVLW  00
27A6:  ADDWFC 03,W
27A8:  MOVWF  FEA
27AA:  MOVLW  09
27AC:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
27AE:  MOVLW  0B
27B0:  SUBWF  1A,W
27B2:  CLRF   03
27B4:  ADDLW  3A
27B6:  MOVWF  FE9
27B8:  MOVLW  00
27BA:  ADDWFC 03,W
27BC:  MOVWF  FEA
27BE:  BTFSC  FEF.7
27C0:  BRA    27DA
27C2:  MOVF   FEF,W
27C4:  SUBLW  09
27C6:  BC    27DA
....................        {clave[unidad-11]=0;} 
27C8:  MOVLW  0B
27CA:  SUBWF  1A,W
27CC:  CLRF   03
27CE:  ADDLW  3A
27D0:  MOVWF  FE9
27D2:  MOVLW  00
27D4:  ADDWFC 03,W
27D6:  MOVWF  FEA
27D8:  CLRF   FEF
....................        if(unidad<11) 
27DA:  BTFSC  1A.7
27DC:  BRA    27E4
27DE:  MOVF   1A,W
27E0:  SUBLW  0A
27E2:  BNC   27EC
....................        {Menu=5;unidad=11;} 
27E4:  MOVLW  05
27E6:  MOVWF  17
27E8:  MOVLW  0B
27EA:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
27EC:  MOVFF  1A,5F
27F0:  MOVLW  04
27F2:  MOVWF  x60
27F4:  CALL   095A
....................        lcd_putc(t[2]); 
27F8:  MOVFF  39,5E
27FC:  CALL   09BC
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2800:  BTFSC  1A.7
2802:  BRA    2954
2804:  MOVF   1A,W
2806:  SUBLW  0E
2808:  BTFSC  FD8.0
280A:  BRA    2954
....................        { 
....................             lcd_gotoxy(1,1); 
280C:  MOVLW  01
280E:  MOVWF  5F
2810:  MOVWF  x60
2812:  CALL   095A
....................             printf(lcd_putc,"                    "); 
2816:  MOVLW  E0
2818:  MOVWF  FF6
281A:  MOVLW  05
281C:  MOVWF  FF7
281E:  CALL   0A68
....................             lcd_gotoxy(1,2); 
2822:  MOVLW  01
2824:  MOVWF  5F
2826:  MOVLW  02
2828:  MOVWF  x60
282A:  CALL   095A
....................             printf(lcd_putc,"     Contraseña     "); 
282E:  MOVLW  F6
2830:  MOVWF  FF6
2832:  MOVLW  05
2834:  MOVWF  FF7
2836:  CALL   0A68
....................             lcd_gotoxy(1,3); 
283A:  MOVLW  01
283C:  MOVWF  5F
283E:  MOVLW  03
2840:  MOVWF  x60
2842:  CALL   095A
....................             printf(lcd_putc,"     Almacenada     "); 
2846:  MOVLW  0C
2848:  MOVWF  FF6
284A:  MOVLW  06
284C:  MOVWF  FF7
284E:  CALL   0A68
....................             lcd_gotoxy(1,4); 
2852:  MOVLW  01
2854:  MOVWF  5F
2856:  MOVLW  04
2858:  MOVWF  x60
285A:  CALL   095A
....................             printf(lcd_putc,"                    "); 
285E:  MOVLW  22
2860:  MOVWF  FF6
2862:  MOVLW  06
2864:  MOVWF  FF7
2866:  CALL   0A68
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
286A:  CLRF   FA9
286C:  MOVFF  3A,FA8
2870:  BCF    FA6.6
2872:  BCF    FA6.7
2874:  BSF    FA6.2
2876:  MOVF   FF2,W
2878:  MOVWF  00
287A:  BCF    FF2.7
287C:  MOVLB  F
287E:  MOVLW  55
2880:  MOVWF  FA7
2882:  MOVLW  AA
2884:  MOVWF  FA7
2886:  BSF    FA6.1
2888:  BTFSC  FA6.1
288A:  BRA    2888
288C:  BCF    FA6.2
288E:  MOVF   00,W
2890:  IORWF  FF2,F
2892:  MOVLW  14
2894:  MOVLB  0
2896:  MOVWF  x64
2898:  CALL   0876
289C:  MOVLW  01
289E:  MOVWF  FA9
28A0:  MOVFF  3B,FA8
28A4:  BCF    FA6.6
28A6:  BCF    FA6.7
28A8:  BSF    FA6.2
28AA:  MOVF   FF2,W
28AC:  MOVWF  00
28AE:  BCF    FF2.7
28B0:  MOVLB  F
28B2:  MOVLW  55
28B4:  MOVWF  FA7
28B6:  MOVLW  AA
28B8:  MOVWF  FA7
28BA:  BSF    FA6.1
28BC:  BTFSC  FA6.1
28BE:  BRA    28BC
28C0:  BCF    FA6.2
28C2:  MOVF   00,W
28C4:  IORWF  FF2,F
28C6:  MOVLW  14
28C8:  MOVLB  0
28CA:  MOVWF  x64
28CC:  CALL   0876
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
28D0:  MOVLW  02
28D2:  MOVWF  FA9
28D4:  MOVFF  3C,FA8
28D8:  BCF    FA6.6
28DA:  BCF    FA6.7
28DC:  BSF    FA6.2
28DE:  MOVF   FF2,W
28E0:  MOVWF  00
28E2:  BCF    FF2.7
28E4:  MOVLB  F
28E6:  MOVLW  55
28E8:  MOVWF  FA7
28EA:  MOVLW  AA
28EC:  MOVWF  FA7
28EE:  BSF    FA6.1
28F0:  BTFSC  FA6.1
28F2:  BRA    28F0
28F4:  BCF    FA6.2
28F6:  MOVF   00,W
28F8:  IORWF  FF2,F
28FA:  MOVLW  14
28FC:  MOVLB  0
28FE:  MOVWF  x64
2900:  CALL   0876
2904:  MOVLW  03
2906:  MOVWF  FA9
2908:  MOVFF  3D,FA8
290C:  BCF    FA6.6
290E:  BCF    FA6.7
2910:  BSF    FA6.2
2912:  MOVF   FF2,W
2914:  MOVWF  00
2916:  BCF    FF2.7
2918:  MOVLB  F
291A:  MOVLW  55
291C:  MOVWF  FA7
291E:  MOVLW  AA
2920:  MOVWF  FA7
2922:  BSF    FA6.1
2924:  BTFSC  FA6.1
2926:  BRA    2924
2928:  BCF    FA6.2
292A:  MOVF   00,W
292C:  IORWF  FF2,F
292E:  MOVLW  14
2930:  MOVLB  0
2932:  MOVWF  x64
2934:  CALL   0876
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2938:  MOVLW  02
293A:  MOVWF  51
293C:  MOVLW  FA
293E:  MOVWF  x64
2940:  CALL   0876
2944:  DECFSZ 51,F
2946:  BRA    293C
2948:  MOVLW  01
294A:  MOVWF  17
294C:  CLRF   36
294E:  MOVLW  02
2950:  MOVWF  1B
2952:  MOVWF  1D
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2954:  BTFSC  1A.7
2956:  BRA    2980
2958:  MOVF   1A,W
295A:  SUBLW  0B
295C:  BC    2980
295E:  BTFSC  1A.7
2960:  BRA    2968
2962:  MOVF   1A,W
2964:  SUBLW  0D
2966:  BNC   2980
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2968:  MOVLW  01
296A:  SUBWF  1A,W
296C:  MOVWF  51
296E:  MOVWF  5F
2970:  MOVLW  04
2972:  MOVWF  x60
2974:  CALL   095A
....................             lcd_putc(t[1]); 
2978:  MOVFF  38,5E
297C:  CALL   09BC
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de Tiempo de Purga 
2980:  MOVF   17,W
2982:  SUBLW  06
2984:  BTFSS  FD8.2
2986:  BRA    2BC6
....................    { 
....................       lcd_gotoxy(1,1); 
2988:  MOVLW  01
298A:  MOVWF  5F
298C:  MOVWF  x60
298E:  CALL   095A
....................       printf(lcd_putc,"     Tiempo  de      "); 
2992:  MOVLW  38
2994:  MOVWF  FF6
2996:  MOVLW  06
2998:  MOVWF  FF7
299A:  CALL   0A68
....................       lcd_gotoxy(1,2); 
299E:  MOVLW  01
29A0:  MOVWF  5F
29A2:  MOVLW  02
29A4:  MOVWF  x60
29A6:  CALL   095A
....................       printf(lcd_putc,"       Purga         "); 
29AA:  MOVLW  4E
29AC:  MOVWF  FF6
29AE:  MOVLW  06
29B0:  MOVWF  FF7
29B2:  CALL   0A68
....................       lcd_gotoxy(6,3); 
29B6:  MOVLW  06
29B8:  MOVWF  5F
29BA:  MOVLW  03
29BC:  MOVWF  x60
29BE:  CALL   095A
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
29C2:  MOVFF  23,51
29C6:  MOVLW  01
29C8:  MOVWF  52
29CA:  CALL   0C4E
29CE:  MOVLW  3A
29D0:  MOVWF  5E
29D2:  CALL   09BC
29D6:  MOVFF  2F,51
29DA:  MOVLW  01
29DC:  MOVWF  52
29DE:  CALL   0C4E
29E2:  MOVLW  6D
29E4:  MOVWF  FF6
29E6:  MOVLW  06
29E8:  MOVWF  FF7
29EA:  MOVLW  08
29EC:  MOVWF  51
29EE:  CALL   0A88
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
29F2:  MOVLW  06
29F4:  ADDWF  21,W
29F6:  MOVWF  51
29F8:  MOVWF  5F
29FA:  MOVLW  04
29FC:  MOVWF  x60
29FE:  CALL   095A
....................       lcd_putc(t[2]); 
2A02:  MOVFF  39,5E
2A06:  CALL   09BC
....................        
....................       if(unidad2<1) 
2A0A:  BTFSC  21.7
2A0C:  BRA    2A14
2A0E:  MOVF   21,W
2A10:  SUBLW  00
2A12:  BNC   2A18
....................          unidad2=1; 
2A14:  MOVLW  01
2A16:  MOVWF  21
....................       if(unidad2>3) 
2A18:  BTFSC  21.7
2A1A:  BRA    2A26
2A1C:  MOVF   21,W
2A1E:  SUBLW  03
2A20:  BC    2A26
....................          unidad2=3;    
2A22:  MOVLW  03
2A24:  MOVWF  21
....................        
....................       if(UP) 
2A26:  BSF    F96.2
2A28:  BTFSS  F84.2
2A2A:  BRA    2A72
....................       { 
....................          if(unidad2==1) 
2A2C:  DECFSZ 21,W
2A2E:  BRA    2A4E
....................          { 
....................             purga_minutos_pro++; 
2A30:  INCF   23,F
....................             if(purga_minutos_pro>59) 
2A32:  BTFSC  23.7
2A34:  BRA    2A3E
2A36:  MOVF   23,W
2A38:  SUBLW  3B
2A3A:  BC    2A3E
....................                purga_minutos_pro=0; 
2A3C:  CLRF   23
....................                 
....................             delay_ms(300); 
2A3E:  MOVLW  02
2A40:  MOVWF  51
2A42:  MOVLW  96
2A44:  MOVWF  x64
2A46:  CALL   0876
2A4A:  DECFSZ 51,F
2A4C:  BRA    2A42
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2A4E:  MOVF   21,W
2A50:  SUBLW  03
2A52:  BNZ   2A72
....................          { 
....................             purga_segundos_pro++; 
2A54:  INCF   2F,F
....................             if(purga_segundos_pro>59) 
2A56:  BTFSC  2F.7
2A58:  BRA    2A62
2A5A:  MOVF   2F,W
2A5C:  SUBLW  3B
2A5E:  BC    2A62
....................                purga_segundos_pro=0; 
2A60:  CLRF   2F
....................                 
....................             delay_ms(300); 
2A62:  MOVLW  02
2A64:  MOVWF  51
2A66:  MOVLW  96
2A68:  MOVWF  x64
2A6A:  CALL   0876
2A6E:  DECFSZ 51,F
2A70:  BRA    2A66
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2A72:  BSF    F96.1
2A74:  BTFSS  F84.1
2A76:  BRA    2ABA
....................       { 
....................          if(unidad2==1) 
2A78:  DECFSZ 21,W
2A7A:  BRA    2A98
....................          { 
....................             purga_minutos_pro--; 
2A7C:  DECF   23,F
....................             if(purga_minutos_pro<0) 
2A7E:  BTFSC  23.7
2A80:  BRA    2A84
2A82:  BRA    2A88
....................                purga_minutos_pro=59; 
2A84:  MOVLW  3B
2A86:  MOVWF  23
....................                 
....................             delay_ms(300); 
2A88:  MOVLW  02
2A8A:  MOVWF  51
2A8C:  MOVLW  96
2A8E:  MOVWF  x64
2A90:  CALL   0876
2A94:  DECFSZ 51,F
2A96:  BRA    2A8C
....................          } 
....................           
....................          if(unidad2==3) 
2A98:  MOVF   21,W
2A9A:  SUBLW  03
2A9C:  BNZ   2ABA
....................          { 
....................             purga_segundos_pro--; 
2A9E:  DECF   2F,F
....................             if(purga_segundos_pro<0) 
2AA0:  BTFSC  2F.7
2AA2:  BRA    2AA6
2AA4:  BRA    2AAA
....................                purga_segundos_pro=59; 
2AA6:  MOVLW  3B
2AA8:  MOVWF  2F
....................                 
....................             delay_ms(300); 
2AAA:  MOVLW  02
2AAC:  MOVWF  51
2AAE:  MOVLW  96
2AB0:  MOVWF  x64
2AB2:  CALL   0876
2AB6:  DECFSZ 51,F
2AB8:  BRA    2AAE
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2ABA:  BSF    F92.5
2ABC:  BTFSS  F80.5
2ABE:  BRA    2AF2
....................       { 
....................          if(unidad2==1) 
2AC0:  DECFSZ 21,W
2AC2:  BRA    2ACA
....................          { 
....................             unidad2=3; 
2AC4:  MOVLW  03
2AC6:  MOVWF  21
....................          } 
....................          else 
2AC8:  BRA    2ADA
....................          { 
....................             if(unidad2==3) 
2ACA:  MOVF   21,W
2ACC:  SUBLW  03
2ACE:  BNZ   2AD6
....................             { 
....................                unidad2=1; 
2AD0:  MOVLW  01
2AD2:  MOVWF  21
....................             } 
....................             else 
2AD4:  BRA    2ADA
....................             { 
....................                unidad2=3; 
2AD6:  MOVLW  03
2AD8:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
2ADA:  MOVLW  02
2ADC:  MOVWF  51
2ADE:  MOVLW  FA
2AE0:  MOVWF  x64
2AE2:  CALL   0876
2AE6:  DECFSZ 51,F
2AE8:  BRA    2ADE
....................          printf(lcd_putc,"\f"); 
2AEA:  MOVLW  0C
2AEC:  MOVWF  5E
2AEE:  CALL   09BC
....................       } 
....................        
....................       if(LEFT) 
2AF2:  BSF    F96.0
2AF4:  BTFSS  F84.0
2AF6:  BRA    2BC6
....................       { 
....................          delay_ms(200); 
2AF8:  MOVLW  C8
2AFA:  MOVWF  x64
2AFC:  CALL   0876
....................          printf(lcd_putc,"\f"); 
2B00:  MOVLW  0C
2B02:  MOVWF  5E
2B04:  CALL   09BC
....................          lcd_gotoxy(1,2); 
2B08:  MOVLW  01
2B0A:  MOVWF  5F
2B0C:  MOVLW  02
2B0E:  MOVWF  x60
2B10:  CALL   095A
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2B14:  MOVLW  76
2B16:  MOVWF  FF6
2B18:  MOVLW  06
2B1A:  MOVWF  FF7
2B1C:  CALL   0A68
....................          lcd_gotoxy(1,3); 
2B20:  MOVLW  01
2B22:  MOVWF  5F
2B24:  MOVLW  03
2B26:  MOVWF  x60
2B28:  CALL   095A
....................          printf(lcd_putc,"  Correctamente  "); 
2B2C:  MOVLW  88
2B2E:  MOVWF  FF6
2B30:  MOVLW  06
2B32:  MOVWF  FF7
2B34:  CALL   0A68
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
2B38:  MOVLW  14
2B3A:  MOVWF  FA9
2B3C:  MOVFF  23,FA8
2B40:  BCF    FA6.6
2B42:  BCF    FA6.7
2B44:  BSF    FA6.2
2B46:  MOVF   FF2,W
2B48:  MOVWF  00
2B4A:  BCF    FF2.7
2B4C:  MOVLB  F
2B4E:  MOVLW  55
2B50:  MOVWF  FA7
2B52:  MOVLW  AA
2B54:  MOVWF  FA7
2B56:  BSF    FA6.1
2B58:  BTFSC  FA6.1
2B5A:  BRA    2B58
2B5C:  BCF    FA6.2
2B5E:  MOVF   00,W
2B60:  IORWF  FF2,F
2B62:  MOVLW  15
2B64:  MOVWF  FA9
2B66:  MOVFF  2F,FA8
2B6A:  BCF    FA6.6
2B6C:  BCF    FA6.7
2B6E:  BSF    FA6.2
2B70:  MOVF   FF2,W
2B72:  MOVWF  00
2B74:  BCF    FF2.7
2B76:  MOVLW  55
2B78:  MOVWF  FA7
2B7A:  MOVLW  AA
2B7C:  MOVWF  FA7
2B7E:  BSF    FA6.1
2B80:  BTFSC  FA6.1
2B82:  BRA    2B80
2B84:  BCF    FA6.2
2B86:  MOVF   00,W
2B88:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
2B8A:  MOVFF  23,22
2B8E:  MOVFF  2F,2E
....................          delay_ms(700); 
2B92:  MOVLW  04
2B94:  MOVWF  51
2B96:  MOVLW  AF
2B98:  MOVLB  0
2B9A:  MOVWF  x64
2B9C:  CALL   0876
2BA0:  DECFSZ 51,F
2BA2:  BRA    2BA6
2BA4:  BRA    2BAA
2BA6:  MOVLB  F
2BA8:  BRA    2B96
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2BAA:  MOVLW  1E
2BAC:  MOVWF  x64
2BAE:  CALL   0876
2BB2:  MOVLW  01
2BB4:  MOVWF  17
2BB6:  CLRF   36
2BB8:  MOVLW  02
2BBA:  MOVWF  1B
2BBC:  MOVWF  1D
2BBE:  MOVLW  0C
2BC0:  MOVWF  5E
2BC2:  CALL   09BC
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de Tiempo de Post-Purga 
2BC6:  MOVF   17,W
2BC8:  SUBLW  07
2BCA:  BTFSS  FD8.2
2BCC:  BRA    2E06
....................    { 
....................       lcd_gotoxy(1,1); 
2BCE:  MOVLW  01
2BD0:  MOVWF  5F
2BD2:  MOVWF  x60
2BD4:  CALL   095A
....................       printf(lcd_putc,"     Tiempo  de      "); 
2BD8:  MOVLW  9A
2BDA:  MOVWF  FF6
2BDC:  MOVLW  06
2BDE:  MOVWF  FF7
2BE0:  CALL   0A68
....................       lcd_gotoxy(1,2); 
2BE4:  MOVLW  01
2BE6:  MOVWF  5F
2BE8:  MOVLW  02
2BEA:  MOVWF  x60
2BEC:  CALL   095A
....................       printf(lcd_putc,"     Post-Purga      "); 
2BF0:  MOVLW  B0
2BF2:  MOVWF  FF6
2BF4:  MOVLW  06
2BF6:  MOVWF  FF7
2BF8:  CALL   0A68
....................       lcd_gotoxy(6,3); 
2BFC:  MOVLW  06
2BFE:  MOVWF  5F
2C00:  MOVLW  03
2C02:  MOVWF  x60
2C04:  CALL   095A
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
2C08:  MOVFF  33,51
2C0C:  MOVLW  01
2C0E:  MOVWF  52
2C10:  CALL   0C4E
2C14:  MOVLW  3A
2C16:  MOVWF  5E
2C18:  CALL   09BC
2C1C:  MOVFF  31,51
2C20:  MOVLW  01
2C22:  MOVWF  52
2C24:  CALL   0C4E
2C28:  MOVLW  CF
2C2A:  MOVWF  FF6
2C2C:  MOVLW  06
2C2E:  MOVWF  FF7
2C30:  MOVLW  08
2C32:  MOVWF  51
2C34:  CALL   0A88
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2C38:  MOVLW  06
2C3A:  ADDWF  21,W
2C3C:  MOVWF  51
2C3E:  MOVWF  5F
2C40:  MOVLW  04
2C42:  MOVWF  x60
2C44:  CALL   095A
....................       lcd_putc(t[2]); 
2C48:  MOVFF  39,5E
2C4C:  CALL   09BC
....................       if(unidad2<1) 
2C50:  BTFSC  21.7
2C52:  BRA    2C5A
2C54:  MOVF   21,W
2C56:  SUBLW  00
2C58:  BNC   2C5E
....................          unidad2=1; 
2C5A:  MOVLW  01
2C5C:  MOVWF  21
....................       if(unidad2>3) 
2C5E:  BTFSC  21.7
2C60:  BRA    2C6C
2C62:  MOVF   21,W
2C64:  SUBLW  03
2C66:  BC    2C6C
....................          unidad2=3;    
2C68:  MOVLW  03
2C6A:  MOVWF  21
....................        
....................       if(UP) 
2C6C:  BSF    F96.2
2C6E:  BTFSS  F84.2
2C70:  BRA    2CB8
....................       { 
....................          if(unidad2==1) 
2C72:  DECFSZ 21,W
2C74:  BRA    2C94
....................          { 
....................             ppurga_minutos_pro++; 
2C76:  INCF   33,F
....................             if(ppurga_minutos_pro>59) 
2C78:  BTFSC  33.7
2C7A:  BRA    2C84
2C7C:  MOVF   33,W
2C7E:  SUBLW  3B
2C80:  BC    2C84
....................                ppurga_minutos_pro=0; 
2C82:  CLRF   33
....................                 
....................             delay_ms(300); 
2C84:  MOVLW  02
2C86:  MOVWF  51
2C88:  MOVLW  96
2C8A:  MOVWF  x64
2C8C:  CALL   0876
2C90:  DECFSZ 51,F
2C92:  BRA    2C88
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2C94:  MOVF   21,W
2C96:  SUBLW  03
2C98:  BNZ   2CB8
....................          { 
....................             ppurga_segundos_pro++; 
2C9A:  INCF   31,F
....................             if(ppurga_segundos_pro>59) 
2C9C:  BTFSC  31.7
2C9E:  BRA    2CA8
2CA0:  MOVF   31,W
2CA2:  SUBLW  3B
2CA4:  BC    2CA8
....................                ppurga_segundos_pro=0; 
2CA6:  CLRF   31
....................                 
....................             delay_ms(300); 
2CA8:  MOVLW  02
2CAA:  MOVWF  51
2CAC:  MOVLW  96
2CAE:  MOVWF  x64
2CB0:  CALL   0876
2CB4:  DECFSZ 51,F
2CB6:  BRA    2CAC
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2CB8:  BSF    F96.1
2CBA:  BTFSS  F84.1
2CBC:  BRA    2D00
....................       { 
....................          if(unidad2==1) 
2CBE:  DECFSZ 21,W
2CC0:  BRA    2CDE
....................          { 
....................             ppurga_minutos_pro--; 
2CC2:  DECF   33,F
....................             if(ppurga_minutos_pro<0) 
2CC4:  BTFSC  33.7
2CC6:  BRA    2CCA
2CC8:  BRA    2CCE
....................                ppurga_minutos_pro=59; 
2CCA:  MOVLW  3B
2CCC:  MOVWF  33
....................                 
....................             delay_ms(300); 
2CCE:  MOVLW  02
2CD0:  MOVWF  51
2CD2:  MOVLW  96
2CD4:  MOVWF  x64
2CD6:  CALL   0876
2CDA:  DECFSZ 51,F
2CDC:  BRA    2CD2
....................          } 
....................           
....................          if(unidad2==3) 
2CDE:  MOVF   21,W
2CE0:  SUBLW  03
2CE2:  BNZ   2D00
....................          { 
....................             ppurga_segundos_pro--; 
2CE4:  DECF   31,F
....................             if(ppurga_segundos_pro<0) 
2CE6:  BTFSC  31.7
2CE8:  BRA    2CEC
2CEA:  BRA    2CF0
....................                ppurga_segundos_pro=59; 
2CEC:  MOVLW  3B
2CEE:  MOVWF  31
....................                 
....................             delay_ms(300); 
2CF0:  MOVLW  02
2CF2:  MOVWF  51
2CF4:  MOVLW  96
2CF6:  MOVWF  x64
2CF8:  CALL   0876
2CFC:  DECFSZ 51,F
2CFE:  BRA    2CF4
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2D00:  BSF    F92.5
2D02:  BTFSS  F80.5
2D04:  BRA    2D32
....................       { 
....................          if(unidad2==1) 
2D06:  DECFSZ 21,W
2D08:  BRA    2D10
....................          { 
....................             unidad2=3; 
2D0A:  MOVLW  03
2D0C:  MOVWF  21
....................          } 
....................          else 
2D0E:  BRA    2D1A
....................          { 
....................             if(unidad2==3) 
2D10:  MOVF   21,W
2D12:  SUBLW  03
2D14:  BNZ   2D1A
....................             { 
....................                unidad2=1; 
2D16:  MOVLW  01
2D18:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
2D1A:  MOVLW  02
2D1C:  MOVWF  51
2D1E:  MOVLW  FA
2D20:  MOVWF  x64
2D22:  CALL   0876
2D26:  DECFSZ 51,F
2D28:  BRA    2D1E
....................          printf(lcd_putc,"\f"); 
2D2A:  MOVLW  0C
2D2C:  MOVWF  5E
2D2E:  CALL   09BC
....................       } 
....................        
....................       if(LEFT) 
2D32:  BSF    F96.0
2D34:  BTFSS  F84.0
2D36:  BRA    2E06
....................       { 
....................          delay_ms(200); 
2D38:  MOVLW  C8
2D3A:  MOVWF  x64
2D3C:  CALL   0876
....................          printf(lcd_putc,"\f"); 
2D40:  MOVLW  0C
2D42:  MOVWF  5E
2D44:  CALL   09BC
....................          lcd_gotoxy(1,2); 
2D48:  MOVLW  01
2D4A:  MOVWF  5F
2D4C:  MOVLW  02
2D4E:  MOVWF  x60
2D50:  CALL   095A
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2D54:  MOVLW  D8
2D56:  MOVWF  FF6
2D58:  MOVLW  06
2D5A:  MOVWF  FF7
2D5C:  CALL   0A68
....................          lcd_gotoxy(1,3); 
2D60:  MOVLW  01
2D62:  MOVWF  5F
2D64:  MOVLW  03
2D66:  MOVWF  x60
2D68:  CALL   095A
....................          printf(lcd_putc,"  Correctamente  "); 
2D6C:  MOVLW  EA
2D6E:  MOVWF  FF6
2D70:  MOVLW  06
2D72:  MOVWF  FF7
2D74:  CALL   0A68
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
2D78:  MOVLW  16
2D7A:  MOVWF  FA9
2D7C:  MOVFF  33,FA8
2D80:  BCF    FA6.6
2D82:  BCF    FA6.7
2D84:  BSF    FA6.2
2D86:  MOVF   FF2,W
2D88:  MOVWF  00
2D8A:  BCF    FF2.7
2D8C:  MOVLB  F
2D8E:  MOVLW  55
2D90:  MOVWF  FA7
2D92:  MOVLW  AA
2D94:  MOVWF  FA7
2D96:  BSF    FA6.1
2D98:  BTFSC  FA6.1
2D9A:  BRA    2D98
2D9C:  BCF    FA6.2
2D9E:  MOVF   00,W
2DA0:  IORWF  FF2,F
2DA2:  MOVLW  17
2DA4:  MOVWF  FA9
2DA6:  MOVFF  31,FA8
2DAA:  BCF    FA6.6
2DAC:  BCF    FA6.7
2DAE:  BSF    FA6.2
2DB0:  MOVF   FF2,W
2DB2:  MOVWF  00
2DB4:  BCF    FF2.7
2DB6:  MOVLW  55
2DB8:  MOVWF  FA7
2DBA:  MOVLW  AA
2DBC:  MOVWF  FA7
2DBE:  BSF    FA6.1
2DC0:  BTFSC  FA6.1
2DC2:  BRA    2DC0
2DC4:  BCF    FA6.2
2DC6:  MOVF   00,W
2DC8:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
2DCA:  MOVFF  33,32
2DCE:  MOVFF  31,30
....................          delay_ms(700); 
2DD2:  MOVLW  04
2DD4:  MOVWF  51
2DD6:  MOVLW  AF
2DD8:  MOVLB  0
2DDA:  MOVWF  x64
2DDC:  CALL   0876
2DE0:  DECFSZ 51,F
2DE2:  BRA    2DE6
2DE4:  BRA    2DEA
2DE6:  MOVLB  F
2DE8:  BRA    2DD6
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2DEA:  MOVLW  1E
2DEC:  MOVWF  x64
2DEE:  CALL   0876
2DF2:  MOVLW  01
2DF4:  MOVWF  17
2DF6:  CLRF   36
2DF8:  MOVLW  02
2DFA:  MOVWF  1B
2DFC:  MOVWF  1D
2DFE:  MOVLW  0C
2E00:  MOVWF  5E
2E02:  CALL   09BC
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
2E06:  MOVF   17,W
2E08:  SUBLW  14
2E0A:  BTFSS  FD8.2
2E0C:  BRA    302E
....................    { 
....................       if(Lectura2==1) 
2E0E:  BTFSS  35.6
2E10:  BRA    2E72
....................       { 
....................       lcd_gotoxy(1,1);                      
2E12:  MOVLW  01
2E14:  MOVWF  5F
2E16:  MOVWF  x60
2E18:  CALL   095A
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
2E1C:  MOVLW  FC
2E1E:  MOVWF  FF6
2E20:  MOVLW  06
2E22:  MOVWF  FF7
2E24:  CALL   0A68
....................       lcd_gotoxy(1,2); 
2E28:  MOVLW  01
2E2A:  MOVWF  5F
2E2C:  MOVLW  02
2E2E:  MOVWF  x60
2E30:  CALL   095A
....................       //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................       printf(lcd_putc,"Ext= ---"); 
2E34:  MOVLW  06
2E36:  MOVWF  FF6
2E38:  MOVLW  07
2E3A:  MOVWF  FF7
2E3C:  CALL   0A68
....................       lcd_gotoxy(1,3); 
2E40:  MOVLW  01
2E42:  MOVWF  5F
2E44:  MOVLW  03
2E46:  MOVWF  x60
2E48:  CALL   095A
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
2E4C:  MOVLW  10
2E4E:  MOVWF  FF6
2E50:  MOVLW  07
2E52:  MOVWF  FF7
2E54:  CALL   0A68
....................       lcd_gotoxy(11,2); 
2E58:  MOVLW  0B
2E5A:  MOVWF  5F
2E5C:  MOVLW  02
2E5E:  MOVWF  x60
2E60:  CALL   095A
....................       printf(lcd_putc,"Flujo=--- ");   
2E64:  MOVLW  20
2E66:  MOVWF  FF6
2E68:  MOVLW  07
2E6A:  MOVWF  FF7
2E6C:  CALL   0A68
....................  
....................       Lectura2=0; 
2E70:  BCF    35.6
....................       } 
....................        
....................       if(flag_filtro==1) 
2E72:  BTFSS  35.1
2E74:  BRA    2EE0
....................       { 
....................          if(horas>=setpoint) 
2E76:  CLRF   53
2E78:  MOVFF  2C,52
2E7C:  BTFSC  52.7
2E7E:  DECF   53,F
2E80:  CALL   0A10
2E84:  MOVFF  45,58
2E88:  MOVFF  44,57
2E8C:  MOVFF  43,56
2E90:  MOVFF  42,55
2E94:  MOVFF  03,5C
2E98:  MOVFF  02,5B
2E9C:  MOVFF  01,5A
2EA0:  MOVFF  00,59
2EA4:  CALL   0FE2
2EA8:  BC    2EAC
2EAA:  BNZ   2EC6
....................          { 
....................             lcd_gotoxy(10,1);                      
2EAC:  MOVLW  0A
2EAE:  MOVWF  5F
2EB0:  MOVLW  01
2EB2:  MOVWF  x60
2EB4:  CALL   095A
....................             printf(lcd_putc,"Filtro:CAM"); 
2EB8:  MOVLW  2C
2EBA:  MOVWF  FF6
2EBC:  MOVLW  07
2EBE:  MOVWF  FF7
2EC0:  CALL   0A68
....................          } 
....................          else 
2EC4:  BRA    2EDE
....................          { 
....................             lcd_gotoxy(10,1);                      
2EC6:  MOVLW  0A
2EC8:  MOVWF  5F
2ECA:  MOVLW  01
2ECC:  MOVWF  x60
2ECE:  CALL   095A
....................             printf(lcd_putc,"Filtro:OK "); 
2ED2:  MOVLW  38
2ED4:  MOVWF  FF6
2ED6:  MOVLW  07
2ED8:  MOVWF  FF7
2EDA:  CALL   0A68
....................          } 
....................       } 
....................       else 
2EDE:  BRA    2EF8
....................       { 
....................          lcd_gotoxy(10,1);                      
2EE0:  MOVLW  0A
2EE2:  MOVWF  5F
2EE4:  MOVLW  01
2EE6:  MOVWF  x60
2EE8:  CALL   095A
....................          printf(lcd_putc,"Filtro:---"); 
2EEC:  MOVLW  44
2EEE:  MOVWF  FF6
2EF0:  MOVLW  07
2EF2:  MOVWF  FF7
2EF4:  CALL   0A68
....................       } 
....................           
....................             
....................       if(estadofl==1) 
2EF8:  BTFSS  34.0
2EFA:  BRA    2F1A
....................       { 
....................          Luz_Blanca_on; 
2EFC:  BSF    F8A.4
2EFE:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
2F00:  MOVLW  01
2F02:  MOVWF  5F
2F04:  MOVLW  04
2F06:  MOVWF  x60
2F08:  CALL   095A
....................          printf(lcd_putc,"Luz:ON "); 
2F0C:  MOVLW  50
2F0E:  MOVWF  FF6
2F10:  MOVLW  07
2F12:  MOVWF  FF7
2F14:  CALL   0A68
....................       } 
....................       else 
2F18:  BRA    2F36
....................       { 
....................          Luz_Blanca_off; 
2F1A:  BCF    F8A.4
2F1C:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
2F1E:  MOVLW  01
2F20:  MOVWF  5F
2F22:  MOVLW  04
2F24:  MOVWF  x60
2F26:  CALL   095A
....................          printf(lcd_putc,"Luz:OFF "); 
2F2A:  MOVLW  58
2F2C:  MOVWF  FF6
2F2E:  MOVLW  07
2F30:  MOVWF  FF7
2F32:  CALL   0A68
....................       } 
....................        
....................       if(estadomv==1) 
2F36:  BTFSS  34.1
2F38:  BRA    2F54
....................       { 
....................          lcd_gotoxy(10,4); 
2F3A:  MOVLW  0A
2F3C:  MOVWF  5F
2F3E:  MOVLW  04
2F40:  MOVWF  x60
2F42:  CALL   095A
....................          printf(lcd_putc,"Motor:ON "); 
2F46:  MOVLW  62
2F48:  MOVWF  FF6
2F4A:  MOVLW  07
2F4C:  MOVWF  FF7
2F4E:  CALL   0A68
....................       } 
....................       else 
2F52:  BRA    2F74
....................       { 
....................          if(iniciodamper==1) 
2F54:  BTFSS  4A.0
2F56:  BRA    2F5C
....................          { 
....................             Motor_off;      
2F58:  BCF    F8A.5
2F5A:  BCF    F93.5
....................          } 
....................          lcd_gotoxy(10,4); 
2F5C:  MOVLW  0A
2F5E:  MOVWF  5F
2F60:  MOVLW  04
2F62:  MOVWF  x60
2F64:  CALL   095A
....................          printf(lcd_putc,"Motor:OFF ");  
2F68:  MOVLW  6C
2F6A:  MOVWF  FF6
2F6C:  MOVLW  07
2F6E:  MOVWF  FF7
2F70:  CALL   0A68
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
2F74:  BSF    F96.1
2F76:  BTFSS  F84.1
2F78:  BRA    2F8C
....................       {  if(Flanco == 0)  
2F7A:  BTFSC  34.3
2F7C:  BRA    2F8A
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
2F7E:  BSF    34.3
2F80:  MOVLW  C8
2F82:  MOVWF  x64
2F84:  CALL   0876
2F88:  BTG    34.0
....................          else 
2F8A:  BRA    2F8E
....................             {Flanco = 0;} 
2F8C:  BCF    34.3
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
2F8E:  BSF    F96.0
2F90:  BTFSS  F84.0
2F92:  BRA    2FCC
....................       {   
....................          if(Flanco2 == 0) 
2F94:  BTFSC  34.5
2F96:  BRA    2FCA
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
2F98:  BSF    34.5
2F9A:  MOVLW  C8
2F9C:  MOVWF  x64
2F9E:  CALL   0876
2FA2:  BTG    34.1
....................             if(estadomv==1) 
2FA4:  BTFSS  34.1
2FA6:  BRA    2FBA
....................             { 
....................                Motor_on; 
2FA8:  BSF    F8A.5
2FAA:  BCF    F93.5
....................                delay_ms(150); 
2FAC:  MOVLW  96
2FAE:  MOVWF  x64
2FB0:  CALL   0876
....................                lcd_init(); 
2FB4:  CALL   0902
....................             } 
....................             else 
2FB8:  BRA    2FCA
....................             { 
....................                Motor_off; 
2FBA:  BCF    F8A.5
2FBC:  BCF    F93.5
....................                delay_ms(150); 
2FBE:  MOVLW  96
2FC0:  MOVWF  x64
2FC2:  CALL   0876
....................                lcd_init(); 
2FC6:  CALL   0902
....................             } 
....................          } 
....................       } 
....................       else 
2FCA:  BRA    2FCE
....................       { 
....................          Flanco2 = 0; 
2FCC:  BCF    34.5
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
2FCE:  BSF    F96.2
2FD0:  BTFSS  F84.2
2FD2:  BRA    3002
....................       {  if(Flanco1 == 0)  
2FD4:  BTFSC  34.4
2FD6:  BRA    3000
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
2FD8:  MOVLW  02
2FDA:  MOVWF  51
2FDC:  MOVLW  FA
2FDE:  MOVWF  x64
2FE0:  CALL   0876
2FE4:  DECFSZ 51,F
2FE6:  BRA    2FDC
2FE8:  MOVLW  0C
2FEA:  MOVWF  5E
2FEC:  CALL   09BC
2FF0:  MOVLW  01
2FF2:  MOVWF  17
2FF4:  CLRF   36
2FF6:  MOVLW  02
2FF8:  MOVWF  1B
2FFA:  MOVWF  1D
2FFC:  MOVLW  0B
2FFE:  MOVWF  1A
....................          else 
3000:  BRA    3004
....................             {Flanco1 = 0;}    
3002:  BCF    34.4
....................              
....................        if(RIGHT)// Si oprime Derecha 
3004:  BSF    F92.5
3006:  BTFSS  F80.5
3008:  BRA    302C
....................       {  if(Flanco3 == 0)  
300A:  BTFSC  34.6
300C:  BRA    302A
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
300E:  MOVLW  02
3010:  MOVWF  51
3012:  MOVLW  FA
3014:  MOVWF  x64
3016:  CALL   0876
301A:  DECFSZ 51,F
301C:  BRA    3012
301E:  MOVLW  0C
3020:  MOVWF  5E
3022:  CALL   09BC
3026:  MOVLW  28
3028:  MOVWF  17
....................          else 
302A:  BRA    302E
....................             {Flanco3 = 0;}     
302C:  BCF    34.6
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
302E:  MOVF   17,W
3030:  SUBLW  1E
3032:  BTFSS  FD8.2
3034:  BRA    31CC
....................       lcd_gotoxy(1,1); 
3036:  MOVLW  01
3038:  MOVWF  5F
303A:  MOVWF  x60
303C:  CALL   095A
....................       printf(lcd_putc,"    !Post-Purga!    "); 
3040:  MOVLW  78
3042:  MOVWF  FF6
3044:  MOVLW  07
3046:  MOVWF  FF7
3048:  CALL   0A68
....................       lcd_gotoxy(1,2); 
304C:  MOVLW  01
304E:  MOVWF  5F
3050:  MOVLW  02
3052:  MOVWF  x60
3054:  CALL   095A
....................       printf(lcd_putc,"                    "); 
3058:  MOVLW  8E
305A:  MOVWF  FF6
305C:  MOVLW  07
305E:  MOVWF  FF7
3060:  CALL   0A68
....................       lcd_gotoxy(1,3); 
3064:  MOVLW  01
3066:  MOVWF  5F
3068:  MOVLW  03
306A:  MOVWF  x60
306C:  CALL   095A
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
3070:  MOVLW  A4
3072:  MOVWF  FF6
3074:  MOVLW  07
3076:  MOVWF  FF7
3078:  MOVLW  06
307A:  MOVWF  51
307C:  CALL   0A88
3080:  MOVFF  32,51
3084:  MOVLW  01
3086:  MOVWF  52
3088:  CALL   0C4E
308C:  MOVLW  3A
308E:  MOVWF  5E
3090:  CALL   09BC
3094:  MOVFF  30,51
3098:  MOVLW  01
309A:  MOVWF  52
309C:  CALL   0C4E
30A0:  MOVLW  20
30A2:  MOVWF  5E
30A4:  CALL   09BC
30A8:  MOVLW  20
30AA:  MOVWF  5E
30AC:  CALL   09BC
....................            
....................       if(Lectura==1) 
30B0:  BTFSS  35.5
30B2:  BRA    31CA
....................       { 
....................          Luz_Blanca_off; 
30B4:  BCF    F8A.4
30B6:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
30B8:  MOVLW  02
30BA:  MOVWF  51
30BC:  GOTO   1334
30C0:  MOVFF  00,51
30C4:  MOVFF  01,52
30C8:  MOVFF  02,53
30CC:  MOVFF  03,54
30D0:  MOVFF  03,58
30D4:  MOVFF  02,57
30D8:  MOVFF  01,56
30DC:  MOVFF  00,55
30E0:  CLRF   5C
30E2:  CLRF   5B
30E4:  MOVLW  40
30E6:  MOVWF  5A
30E8:  MOVLW  81
30EA:  MOVWF  59
30EC:  CALL   0FE2
30F0:  BNC   31C8
30F2:  MOVF   30,F
30F4:  BNZ   31C8
30F6:  MOVF   32,F
30F8:  BNZ   31C8
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
30FA:  MOVLW  46
30FC:  MOVWF  FA9
30FE:  MOVFF  2A,FA8
3102:  BCF    FA6.6
3104:  BCF    FA6.7
3106:  BSF    FA6.2
3108:  MOVF   FF2,W
310A:  MOVWF  00
310C:  BCF    FF2.7
310E:  MOVLB  F
3110:  MOVLW  55
3112:  MOVWF  FA7
3114:  MOVLW  AA
3116:  MOVWF  FA7
3118:  BSF    FA6.1
311A:  BTFSC  FA6.1
311C:  BRA    311A
311E:  BCF    FA6.2
3120:  MOVF   00,W
3122:  IORWF  FF2,F
3124:  MOVLW  47
3126:  MOVWF  FA9
3128:  MOVFF  2B,FA8
312C:  BCF    FA6.6
312E:  BCF    FA6.7
3130:  BSF    FA6.2
3132:  MOVF   FF2,W
3134:  MOVWF  00
3136:  BCF    FF2.7
3138:  MOVLW  55
313A:  MOVWF  FA7
313C:  MOVLW  AA
313E:  MOVWF  FA7
3140:  BSF    FA6.1
3142:  BTFSC  FA6.1
3144:  BRA    3142
3146:  BCF    FA6.2
3148:  MOVF   00,W
314A:  IORWF  FF2,F
314C:  MOVLW  48
314E:  MOVWF  FA9
3150:  MOVFF  2C,FA8
3154:  BCF    FA6.6
3156:  BCF    FA6.7
3158:  BSF    FA6.2
315A:  MOVF   FF2,W
315C:  MOVWF  00
315E:  BCF    FF2.7
3160:  MOVLW  55
3162:  MOVWF  FA7
3164:  MOVLW  AA
3166:  MOVWF  FA7
3168:  BSF    FA6.1
316A:  BTFSC  FA6.1
316C:  BRA    316A
316E:  BCF    FA6.2
3170:  MOVF   00,W
3172:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
3174:  MOVLW  0C
3176:  MOVWF  5E
3178:  MOVLB  0
317A:  CALL   09BC
....................             lcd_gotoxy(1,2); 
317E:  MOVLW  01
3180:  MOVWF  5F
3182:  MOVLW  02
3184:  MOVWF  x60
3186:  CALL   095A
....................             printf(lcd_putc,"     Proceso      "); 
318A:  MOVLW  B6
318C:  MOVWF  FF6
318E:  MOVLW  07
3190:  MOVWF  FF7
3192:  CALL   0A68
....................             lcd_gotoxy(1,3); 
3196:  MOVLW  01
3198:  MOVWF  5F
319A:  MOVLW  03
319C:  MOVWF  x60
319E:  CALL   095A
....................             printf(lcd_putc,"    Finalizado    "); 
31A2:  MOVLW  CA
31A4:  MOVWF  FF6
31A6:  MOVLW  07
31A8:  MOVWF  FF7
31AA:  CALL   0A68
....................             delay_ms(2000); 
31AE:  MOVLW  08
31B0:  MOVWF  51
31B2:  MOVLW  FA
31B4:  MOVWF  x64
31B6:  CALL   0876
31BA:  DECFSZ 51,F
31BC:  BRA    31B2
....................             printf(lcd_putc,"\f"); 
31BE:  MOVLW  0C
31C0:  MOVWF  5E
31C2:  CALL   09BC
....................             reset_cpu(); 
31C6:  RESET
....................          } 
....................          Lectura=0; 
31C8:  BCF    35.5
....................       } 
....................        
....................    } 
31CA:  BRA    302E
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
31CC:  MOVF   17,W
31CE:  SUBLW  28
31D0:  BNZ   3292
....................    lcd_gotoxy(1,1); 
31D2:  MOVLW  01
31D4:  MOVWF  5F
31D6:  MOVWF  x60
31D8:  CALL   095A
....................    printf(lcd_putc,"   Desea apagar     "); 
31DC:  MOVLW  DE
31DE:  MOVWF  FF6
31E0:  MOVLW  07
31E2:  MOVWF  FF7
31E4:  CALL   0A68
....................    lcd_gotoxy(1,2); 
31E8:  MOVLW  01
31EA:  MOVWF  5F
31EC:  MOVLW  02
31EE:  MOVWF  x60
31F0:  CALL   095A
....................    printf(lcd_putc,"     la cabina      "); 
31F4:  MOVLW  F4
31F6:  MOVWF  FF6
31F8:  MOVLW  07
31FA:  MOVWF  FF7
31FC:  CALL   0A68
....................    lcd_gotoxy(1,3); 
3200:  MOVLW  01
3202:  MOVWF  5F
3204:  MOVLW  03
3206:  MOVWF  x60
3208:  CALL   095A
....................    printf(lcd_putc,"   > Aceptar        "); 
320C:  MOVLW  0A
320E:  MOVWF  FF6
3210:  MOVLW  08
3212:  MOVWF  FF7
3214:  CALL   0A68
....................    lcd_gotoxy(1,4); 
3218:  MOVLW  01
321A:  MOVWF  5F
321C:  MOVLW  04
321E:  MOVWF  x60
3220:  CALL   095A
....................    printf(lcd_putc,"   < Cancelar       "); 
3224:  MOVLW  20
3226:  MOVWF  FF6
3228:  MOVLW  08
322A:  MOVWF  FF7
322C:  CALL   0A68
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
3230:  BSF    F92.5
3232:  BTFSS  F80.5
3234:  BRA    3258
....................       {  if(Flanco1 == 0)  
3236:  BTFSC  34.4
3238:  BRA    3256
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
323A:  BSF    34.4
323C:  MOVLW  1E
323E:  MOVWF  17
3240:  MOVFF  20,51
3244:  CALL   0A58
3248:  BCF    F8A.6
324A:  BCF    F93.6
324C:  MOVLW  0C
324E:  MOVWF  5E
3250:  CALL   09BC
3254:  BSF    4A.2
....................             }} 
....................          else 
3256:  BRA    325A
....................             {Flanco1 = 0;}    
3258:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
325A:  BSF    F96.0
325C:  BTFSS  F84.0
325E:  BRA    3290
....................       {  if(Flanco3 == 0)  
3260:  BTFSC  34.6
3262:  BRA    328E
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3264:  BSF    34.6
3266:  MOVLW  14
3268:  MOVWF  17
326A:  CLRF   36
326C:  MOVLW  02
326E:  MOVWF  1B
3270:  MOVWF  1D
3272:  MOVLW  0B
3274:  MOVWF  1A
3276:  MOVLW  02
3278:  MOVWF  51
327A:  MOVLW  FA
327C:  MOVWF  x64
327E:  CALL   0876
3282:  DECFSZ 51,F
3284:  BRA    327A
3286:  MOVLW  0C
3288:  MOVWF  5E
328A:  CALL   09BC
....................          else 
328E:  BRA    3292
....................             {Flanco3 = 0;}     
3290:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
3292:  MOVF   17,W
3294:  SUBLW  32
3296:  BNZ   334A
....................    lcd_gotoxy(1,1); 
3298:  MOVLW  01
329A:  MOVWF  5F
329C:  MOVWF  x60
329E:  CALL   095A
....................    printf(lcd_putc,"      !Purga!       "); 
32A2:  MOVLW  36
32A4:  MOVWF  FF6
32A6:  MOVLW  08
32A8:  MOVWF  FF7
32AA:  CALL   0A68
....................    lcd_gotoxy(1,2); 
32AE:  MOVLW  01
32B0:  MOVWF  5F
32B2:  MOVLW  02
32B4:  MOVWF  x60
32B6:  CALL   095A
....................    printf(lcd_putc,"                    "); 
32BA:  MOVLW  4C
32BC:  MOVWF  FF6
32BE:  MOVLW  08
32C0:  MOVWF  FF7
32C2:  CALL   0A68
....................    lcd_gotoxy(1,3); 
32C6:  MOVLW  01
32C8:  MOVWF  5F
32CA:  MOVLW  03
32CC:  MOVWF  x60
32CE:  CALL   095A
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
32D2:  MOVLW  62
32D4:  MOVWF  FF6
32D6:  MOVLW  08
32D8:  MOVWF  FF7
32DA:  MOVLW  06
32DC:  MOVWF  51
32DE:  CALL   0A88
32E2:  MOVFF  22,51
32E6:  MOVLW  01
32E8:  MOVWF  52
32EA:  CALL   0C4E
32EE:  MOVLW  3A
32F0:  MOVWF  5E
32F2:  CALL   09BC
32F6:  MOVFF  2E,51
32FA:  MOVLW  01
32FC:  MOVWF  52
32FE:  CALL   0C4E
3302:  MOVLW  20
3304:  MOVWF  5E
3306:  CALL   09BC
330A:  MOVLW  20
330C:  MOVWF  5E
330E:  CALL   09BC
3312:  MOVLW  20
3314:  MOVWF  5E
3316:  CALL   09BC
....................        
....................    Motor_on; 
331A:  BSF    F8A.5
331C:  BCF    F93.5
....................    Luz_Blanca_off; 
331E:  BCF    F8A.4
3320:  BCF    F93.4
....................        
....................    if(LEFT) 
3322:  BSF    F96.0
3324:  BTFSS  F84.0
3326:  BRA    334A
....................    { 
....................       tiempo_purga=0;Motor_on;Luz_Blanca_on;estadomv=1;estadofl=1;Menu=20;delay_ms(1000); 
3328:  BCF    4A.1
332A:  BSF    F8A.5
332C:  BCF    F93.5
332E:  BSF    F8A.4
3330:  BCF    F93.4
3332:  BSF    34.1
3334:  BSF    34.0
3336:  MOVLW  14
3338:  MOVWF  17
333A:  MOVLW  04
333C:  MOVWF  51
333E:  MOVLW  FA
3340:  MOVWF  x64
3342:  CALL   0876
3346:  DECFSZ 51,F
3348:  BRA    333E
....................    } 
....................        
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=20) 
334A:  BTFSC  2D.7
334C:  BRA    335A
334E:  MOVF   2D,W
3350:  SUBLW  13
3352:  BC    335A
....................    { 
....................       lcd_init(); 
3354:  CALL   0902
....................       tiemporeset=0; 
3358:  CLRF   2D
....................    }  
....................  
....................    if(ModoSleep==1) 
335A:  BTFSS  35.3
335C:  BRA    3366
....................       {intensidadpantalla(0);sleep();} 
335E:  CLRF   51
3360:  CALL   0A58
3364:  SLEEP 
....................  
....................    if(Menu!=0 || Menu!=30) 
3366:  MOVF   17,F
3368:  BNZ   3370
336A:  MOVF   17,W
336C:  SUBLW  1E
336E:  BZ    33E6
....................    { 
....................       if(Lectura==1) 
3370:  BTFSS  35.5
3372:  BRA    33E2
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
3374:  CLRF   53
3376:  MOVFF  2C,52
337A:  BTFSC  52.7
337C:  DECF   53,F
337E:  CALL   0A10
3382:  MOVFF  45,58
3386:  MOVFF  44,57
338A:  MOVFF  43,56
338E:  MOVFF  42,55
3392:  MOVFF  03,5C
3396:  MOVFF  02,5B
339A:  MOVFF  01,5A
339E:  MOVFF  00,59
33A2:  CALL   0FE2
33A6:  BC    33AA
33A8:  BNZ   33D6
33AA:  MOVF   17,W
33AC:  SUBLW  14
33AE:  BNZ   33D6
....................          { 
....................              if(estadoalarma==1) 
33B0:  BTFSS  34.2
33B2:  BRA    33BA
....................              { 
....................                 Alarma_on; 
33B4:  BSF    F8A.6
33B6:  BCF    F93.6
....................              } 
....................              else 
33B8:  BRA    33BE
....................              { 
....................                 Alarma_off; 
33BA:  BCF    F8A.6
33BC:  BCF    F93.6
....................              } 
....................              estadopantalla=!estadopantalla; 
33BE:  BTG    35.2
....................              if(estadopantalla==1) 
33C0:  BTFSS  35.2
33C2:  BRA    33CE
....................              {intensidadpantalla(contraste);} 
33C4:  MOVFF  20,51
33C8:  CALL   0A58
....................              else 
33CC:  BRA    33D4
....................              {intensidadpantalla(0);} 
33CE:  CLRF   51
33D0:  CALL   0A58
....................          } 
....................          else 
33D4:  BRA    33E2
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
33D6:  MOVFF  20,51
33DA:  CALL   0A58
33DE:  BCF    F8A.6
33E0:  BCF    F93.6
....................          } 
....................       } 
....................       Lectura=0; 
33E2:  BCF    35.5
....................    }    
....................    else 
33E4:  BRA    33F2
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
33E6:  MOVFF  20,51
33EA:  CALL   0A58
33EE:  BCF    F8A.6
33F0:  BCF    F93.6
....................    } 
....................  
....................    }        
33F2:  GOTO   1706
.................... } 
....................  
33F6:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
