CCS PCH C Compiler, Version 4.104, 5967               13-feb.-18 12:22

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2018\Cabina Extractora 120 Sin Ductos Avantika #004587719\Firmware\Cabina_Extractora.lst

               ROM used: 13292 bytes (41%)
                         Largest free fragment is 19472
               RAM used: 85 (4%) at main() level
                         109 (5%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   138A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0876:  CLRF   FEA
0878:  MOVLW  64
087A:  MOVWF  FE9
087C:  MOVF   FEF,W
087E:  BZ    089C
0880:  MOVLW  0F
0882:  MOVWF  01
0884:  CLRF   00
0886:  DECFSZ 00,F
0888:  BRA    0886
088A:  DECFSZ 01,F
088C:  BRA    0884
088E:  MOVLW  8F
0890:  MOVWF  00
0892:  DECFSZ 00,F
0894:  BRA    0892
0896:  NOP   
0898:  DECFSZ FEF,F
089A:  BRA    0880
089C:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
089E:  SWAPF  x65,W
08A0:  ANDLW  F0
08A2:  MOVWF  00
08A4:  MOVLW  0F
08A6:  ANDWF  F83,W
08A8:  IORWF  00,W
08AA:  MOVWF  F83
....................       delay_cycles(25); 
08AC:  MOVLW  08
08AE:  MOVWF  00
08B0:  DECFSZ 00,F
08B2:  BRA    08B0
....................       lcd.enable = 1; 
08B4:  BSF    F83.2
....................       delay_us(55); 
08B6:  MOVLW  DB
08B8:  MOVWF  00
08BA:  DECFSZ 00,F
08BC:  BRA    08BA
08BE:  BRA    08C0
....................       lcd.enable = 0; 
08C0:  BCF    F83.2
.................... } 
08C2:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
08C4:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
08C6:  MOVLW  02
08C8:  MOVWF  x64
08CA:  RCALL  0876
....................       lcd.rs = address; 
08CC:  BTFSS  x62.0
08CE:  BCF    F83.0
08D0:  BTFSC  x62.0
08D2:  BSF    F83.0
....................       delay_cycles(25); 
08D4:  MOVLW  08
08D6:  MOVWF  00
08D8:  DECFSZ 00,F
08DA:  BRA    08D8
....................       lcd.rw = 0; 
08DC:  BCF    F83.1
....................       delay_cycles(25); 
08DE:  MOVLW  08
08E0:  MOVWF  00
08E2:  DECFSZ 00,F
08E4:  BRA    08E2
....................       lcd.enable = 0; 
08E6:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
08E8:  SWAPF  x63,W
08EA:  MOVWF  x64
08EC:  MOVLW  0F
08EE:  ANDWF  x64,F
08F0:  MOVFF  64,65
08F4:  RCALL  089E
....................       lcd_send_nibble(n & 0xf); 
08F6:  MOVF   x63,W
08F8:  ANDLW  0F
08FA:  MOVWF  x64
08FC:  MOVWF  x65
08FE:  RCALL  089E
.................... } 
0900:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0902:  MOVLW  00
0904:  MOVWF  F95
....................     lcd.rs = 0; 
0906:  BCF    F83.0
....................     lcd.rw = 0; 
0908:  BCF    F83.1
....................     lcd.enable = 0; 
090A:  BCF    F83.2
....................     delay_ms(15); 
090C:  MOVLW  0F
090E:  MOVWF  x64
0910:  RCALL  0876
....................     for(i=1;i<=3;++i) { 
0912:  MOVLW  01
0914:  MOVWF  51
0916:  MOVF   51,W
0918:  SUBLW  03
091A:  BNC   092C
....................        lcd_send_nibble(3); 
091C:  MOVLW  03
091E:  MOVWF  x65
0920:  RCALL  089E
....................        delay_ms(5); 
0922:  MOVLW  05
0924:  MOVWF  x64
0926:  RCALL  0876
....................     } 
0928:  INCF   51,F
092A:  BRA    0916
....................     lcd_send_nibble(2); 
092C:  MOVLW  02
092E:  MOVWF  x65
0930:  RCALL  089E
....................     for(i=0;i<=3;++i) 
0932:  CLRF   51
0934:  MOVF   51,W
0936:  SUBLW  03
0938:  BNC   0958
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
093A:  CLRF   03
093C:  MOVF   51,W
093E:  MOVFF  FF2,52
0942:  BCF    FF2.7
0944:  CALL   0096
0948:  BTFSC  52.7
094A:  BSF    FF2.7
094C:  MOVWF  52
094E:  CLRF   x62
0950:  MOVWF  x63
0952:  RCALL  08C4
0954:  INCF   51,F
0956:  BRA    0934
.................... } 
0958:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
095A:  MOVLW  01
095C:  SUBWF  x60,W
095E:  ADDLW  FC
0960:  BC    0980
0962:  ADDLW  04
0964:  GOTO   0990
....................      case 1 : address=0x80;break; 
0968:  MOVLW  80
096A:  MOVWF  x61
096C:  BRA    0980
....................      case 2 : address=0xc0;break; 
096E:  MOVLW  C0
0970:  MOVWF  x61
0972:  BRA    0980
....................      case 3 : address=0x94;break; 
0974:  MOVLW  94
0976:  MOVWF  x61
0978:  BRA    0980
....................      case 4 : address=0xd4;break; 
097A:  MOVLW  D4
097C:  MOVWF  x61
097E:  BRA    0980
....................    } 
....................    address+=x-1; 
0980:  MOVLW  01
0982:  SUBWF  5F,W
0984:  ADDWF  x61,F
....................    lcd_send_byte(0,address); 
0986:  CLRF   x62
0988:  MOVFF  61,63
098C:  RCALL  08C4
.................... } 
098E:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
09BC:  MOVF   5E,W
09BE:  SUBLW  F1
09C0:  BNZ   09C6
....................     c=238; 
09C2:  MOVLW  EE
09C4:  MOVWF  5E
....................    switch (c) { 
09C6:  MOVF   5E,W
09C8:  XORLW  0C
09CA:  BZ    09D6
09CC:  XORLW  06
09CE:  BZ    09EA
09D0:  XORLW  02
09D2:  BZ    09F8
09D4:  BRA    0A02
....................      case '\f'   : lcd_send_byte(0,1); 
09D6:  CLRF   x62
09D8:  MOVLW  01
09DA:  MOVWF  x63
09DC:  RCALL  08C4
....................                    lcdline=1; 
09DE:  MOVLW  01
09E0:  MOVWF  16
....................                    delay_ms(2); 
09E2:  MOVLW  02
09E4:  MOVWF  x64
09E6:  RCALL  0876
....................                                            break; 
09E8:  BRA    0A0E
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
09EA:  INCF   16,F
09EC:  MOVLW  01
09EE:  MOVWF  5F
09F0:  MOVFF  16,60
09F4:  RCALL  095A
09F6:  BRA    0A0E
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
09F8:  CLRF   x62
09FA:  MOVLW  10
09FC:  MOVWF  x63
09FE:  RCALL  08C4
0A00:  BRA    0A0E
....................      default     : lcd_send_byte(1,c);     break; 
0A02:  MOVLW  01
0A04:  MOVWF  x62
0A06:  MOVFF  5E,63
0A0A:  RCALL  08C4
0A0C:  BRA    0A0E
....................    } 
.................... } 
0A0E:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_A5) 
.................... #define   LEFT          input(PIN_E0) 
.................... #define   DOWN          input(PIN_E1) 
.................... #define   UP            input(PIN_E2) 
.................... #define   VIDRIOUP      !input(PIN_A4) 
.................... #define   VIDRIODN      !input(PIN_A3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Rele_on           output_bit(PIN_B7,1) 
.................... #define   Rele_off          output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
.................... #define   O1_on             output_bit(PIN_C6,1) 
.................... #define   O1_off            output_bit(PIN_C6,0) 
.................... #define   O2_on             output_bit(PIN_C7,1) 
.................... #define   O2_off            output_bit(PIN_C7,0) 
....................  
.................... signed int8 Menu=100, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... signed int8 Entero=0,tmp=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... signed int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0,estadopantalla=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,Temporal=0.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0; 
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1332:  RLCF   51,W
1334:  MOVWF  00
1336:  RLCF   00,F
1338:  MOVLW  FC
133A:  ANDWF  00,F
133C:  MOVFF  00,01
1340:  MOVF   FC2,W
1342:  ANDLW  C3
1344:  IORWF  00,W
1346:  MOVWF  FC2
1348:  MOVLW  0A
134A:  MOVWF  x64
134C:  CALL   0876
1350:  BSF    FC2.1
1352:  BTFSC  FC2.1
1354:  BRA    1352
1356:  MOVFF  FC4,03
135A:  MOVFF  FC3,56
135E:  MOVFF  FC4,57
1362:  CALL   0A10
1366:  MOVFF  03,55
136A:  MOVFF  02,54
136E:  MOVFF  01,53
1372:  MOVFF  00,52
1376:  MOVFF  52,00
137A:  MOVFF  53,01
137E:  MOVFF  54,02
1382:  MOVFF  55,03
.................... } 
1386:  GOTO   30B8 (RETURN)
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0A46:  MOVF   51,F
0A48:  BNZ   0A50
....................    { 
....................       Pantalla_off; 
0A4A:  BCF    F8B.1
0A4C:  BCF    F94.1
....................    } 
....................    else 
0A4E:  BRA    0A54
....................    { 
....................       Pantalla_on; 
0A50:  BSF    F8B.1
0A52:  BCF    F94.1
....................    } 
.................... } 
0A54:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4B,F
00BE:  BTFSC  FD8.2
00C0:  INCF   4C,F
....................    tiempos2++; 
00C2:  INCF   4F,F
00C4:  BTFSC  FD8.2
00C6:  INCF   50,F
....................      
....................    if(tiempos2>=20) 
00C8:  MOVF   50,F
00CA:  BNZ   00D2
00CC:  MOVF   4F,W
00CE:  SUBLW  13
00D0:  BC    00D8
....................    {tiempos2=0;Lectura2=1;} 
00D2:  CLRF   50
00D4:  CLRF   4F
00D6:  BSF    35.6
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00D8:  MOVF   4C,F
00DA:  BNZ   00E2
00DC:  MOVF   4B,W
00DE:  SUBLW  C7
00E0:  BC    016C
....................    { 
....................       tiempos=0;tiemporeset++; 
00E2:  CLRF   4C
00E4:  CLRF   4B
00E6:  INCF   2D,F
....................       Lectura=1; 
00E8:  BSF    35.5
....................           
....................       if(estadomv==1 && flag_filtro==1) 
00EA:  BTFSS  34.1
00EC:  BRA    0110
00EE:  BTFSS  35.1
00F0:  BRA    0110
....................       {   
....................          segundos++; 
00F2:  INCF   2A,F
....................          if(segundos>=60) 
00F4:  BTFSC  2A.7
00F6:  BRA    0102
00F8:  MOVF   2A,W
00FA:  SUBLW  3B
00FC:  BC    0102
....................          { 
....................             segundos=0;minutos++; 
00FE:  CLRF   2A
0100:  INCF   2B,F
....................          } 
....................           
....................          if(minutos>=60) 
0102:  BTFSC  2B.7
0104:  BRA    0110
0106:  MOVF   2B,W
0108:  SUBLW  3B
010A:  BC    0110
....................          { 
....................             minutos=0;horas++; 
010C:  CLRF   2B
010E:  INCF   2C,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1) 
0110:  BTFSS  4A.1
0112:  BRA    0146
....................       { 
....................          if(purga_segundos>0) 
0114:  BTFSC  2E.7
0116:  BRA    0122
0118:  MOVF   2E,W
011A:  SUBLW  00
011C:  BC    0122
....................          { 
....................             purga_segundos--; 
011E:  DECF   2E,F
....................          } 
....................          else 
0120:  BRA    0146
....................          { 
....................             if(purga_minutos>0) 
0122:  BTFSC  22.7
0124:  BRA    0134
0126:  MOVF   22,W
0128:  SUBLW  00
012A:  BC    0134
....................             { 
....................                purga_minutos--; 
012C:  DECF   22,F
....................                purga_segundos=59; 
012E:  MOVLW  3B
0130:  MOVWF  2E
....................             } 
....................             else 
0132:  BRA    0146
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20; 
0134:  BCF    4A.1
0136:  BSF    F8A.5
0138:  BCF    F93.5
013A:  MOVLW  14
013C:  MOVWF  17
....................                Luz_Blanca_on; 
013E:  BSF    F8A.4
0140:  BCF    F93.4
....................                estadomv=1; 
0142:  BSF    34.1
....................                estadofl=1; 
0144:  BSF    34.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
0146:  BTFSS  4A.2
0148:  BRA    016C
....................       { 
....................          if(ppurga_segundos>0) 
014A:  BTFSC  30.7
014C:  BRA    0158
014E:  MOVF   30,W
0150:  SUBLW  00
0152:  BC    0158
....................          { 
....................             ppurga_segundos--; 
0154:  DECF   30,F
....................          } 
....................          else 
0156:  BRA    016C
....................          { 
....................             if(ppurga_minutos>0) 
0158:  BTFSC  32.7
015A:  BRA    016A
015C:  MOVF   32,W
015E:  SUBLW  00
0160:  BC    016A
....................             { 
....................                ppurga_minutos--; 
0162:  DECF   32,F
....................                ppurga_segundos=59; 
0164:  MOVLW  3B
0166:  MOVWF  30
....................             } 
....................             else 
0168:  BRA    016C
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
016A:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
016C:  BCF    F9E.0
016E:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0B84:  DECFSZ 52,W
0B86:  BRA    0BB8
....................    {if(estadoalarma==0) 
0B88:  BTFSC  34.2
0B8A:  BRA    0BA0
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0B8C:  MOVLW  02
0B8E:  MOVWF  5F
0B90:  MOVFF  53,60
0B94:  RCALL  095A
0B96:  MOVLW  72
0B98:  MOVWF  FF6
0B9A:  MOVLW  01
0B9C:  MOVWF  FF7
0B9E:  RCALL  0A56
....................    if(estadoalarma==1) 
0BA0:  BTFSS  34.2
0BA2:  BRA    0BB8
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0BA4:  MOVLW  02
0BA6:  MOVWF  5F
0BA8:  MOVFF  53,60
0BAC:  RCALL  095A
0BAE:  MOVLW  86
0BB0:  MOVWF  FF6
0BB2:  MOVLW  01
0BB4:  MOVWF  FF7
0BB6:  RCALL  0A56
....................    } 
....................     
....................    if(x==2) 
0BB8:  MOVF   52,W
0BBA:  SUBLW  02
0BBC:  BNZ   0BD2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
0BBE:  MOVLW  02
0BC0:  MOVWF  5F
0BC2:  MOVFF  53,60
0BC6:  RCALL  095A
0BC8:  MOVLW  9A
0BCA:  MOVWF  FF6
0BCC:  MOVLW  01
0BCE:  MOVWF  FF7
0BD0:  RCALL  0A56
....................     
....................    if(x==3) 
0BD2:  MOVF   52,W
0BD4:  SUBLW  03
0BD6:  BNZ   0BEC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
0BD8:  MOVLW  02
0BDA:  MOVWF  5F
0BDC:  MOVFF  53,60
0BE0:  RCALL  095A
0BE2:  MOVLW  AE
0BE4:  MOVWF  FF6
0BE6:  MOVLW  01
0BE8:  MOVWF  FF7
0BEA:  RCALL  0A56
....................     
....................    if(x==4) 
0BEC:  MOVF   52,W
0BEE:  SUBLW  04
0BF0:  BNZ   0C06
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0BF2:  MOVLW  02
0BF4:  MOVWF  5F
0BF6:  MOVFF  53,60
0BFA:  RCALL  095A
0BFC:  MOVLW  C2
0BFE:  MOVWF  FF6
0C00:  MOVLW  01
0C02:  MOVWF  FF7
0C04:  RCALL  0A56
....................        
....................    if(x==5) 
0C06:  MOVF   52,W
0C08:  SUBLW  05
0C0A:  BNZ   0C20
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
0C0C:  MOVLW  02
0C0E:  MOVWF  5F
0C10:  MOVFF  53,60
0C14:  RCALL  095A
0C16:  MOVLW  D6
0C18:  MOVWF  FF6
0C1A:  MOVLW  01
0C1C:  MOVWF  FF7
0C1E:  RCALL  0A56
....................     
....................    if(x==6) 
0C20:  MOVF   52,W
0C22:  SUBLW  06
0C24:  BNZ   0C3A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
0C26:  MOVLW  02
0C28:  MOVWF  5F
0C2A:  MOVFF  53,60
0C2E:  RCALL  095A
0C30:  MOVLW  EA
0C32:  MOVWF  FF6
0C34:  MOVLW  01
0C36:  MOVWF  FF7
0C38:  RCALL  0A56
.................... } 
0C3A:  RETLW  00
....................  
....................  
.................... void main () 
.................... { 
*
138A:  CLRF   FF8
138C:  BCF    FD0.7
138E:  BSF    07.7
1390:  CLRF   FEA
1392:  CLRF   FE9
1394:  MOVLW  64
1396:  MOVWF  17
1398:  MOVLW  07
139A:  MOVWF  18
139C:  MOVLW  02
139E:  MOVWF  19
13A0:  MOVLW  0B
13A2:  MOVWF  1A
13A4:  MOVLW  02
13A6:  MOVWF  1B
13A8:  MOVLW  03
13AA:  MOVWF  1C
13AC:  MOVLW  02
13AE:  MOVWF  1D
13B0:  MOVWF  1E
13B2:  MOVLW  04
13B4:  MOVWF  1F
13B6:  MOVLW  0A
13B8:  MOVWF  20
13BA:  MOVLW  01
13BC:  MOVWF  21
13BE:  CLRF   22
13C0:  CLRF   23
13C2:  CLRF   24
13C4:  MOVLW  0A
13C6:  MOVWF  25
13C8:  MOVWF  26
13CA:  MOVWF  27
13CC:  MOVWF  28
13CE:  CLRF   29
13D0:  CLRF   2A
13D2:  CLRF   2B
13D4:  CLRF   2C
13D6:  CLRF   2D
13D8:  CLRF   2E
13DA:  CLRF   2F
13DC:  CLRF   30
13DE:  CLRF   31
13E0:  CLRF   32
13E2:  CLRF   33
13E4:  BCF    34.0
13E6:  BCF    34.1
13E8:  BCF    34.2
13EA:  BCF    34.3
13EC:  BCF    34.4
13EE:  BCF    34.5
13F0:  BCF    34.6
13F2:  BCF    34.7
13F4:  BCF    35.0
13F6:  BCF    35.1
13F8:  BCF    35.2
13FA:  CLRF   36
13FC:  CLRF   45
13FE:  CLRF   44
1400:  CLRF   43
1402:  CLRF   42
1404:  CLRF   49
1406:  CLRF   48
1408:  CLRF   47
140A:  CLRF   46
140C:  BCF    35.4
140E:  BCF    35.5
1410:  BCF    35.6
1412:  BCF    35.7
1414:  BCF    4A.0
1416:  BCF    4A.1
1418:  BCF    4A.2
141A:  CLRF   4C
141C:  CLRF   4B
141E:  CLRF   4E
1420:  CLRF   4D
1422:  CLRF   50
1424:  CLRF   4F
1426:  MOVF   FC1,W
1428:  ANDLW  C0
142A:  IORLW  0F
142C:  MOVWF  FC1
142E:  MOVLW  07
1430:  MOVWF  FB4
1432:  MOVLW  3E
1434:  MOVWF  37
1436:  MOVLW  20
1438:  MOVWF  38
143A:  MOVLW  5E
143C:  MOVWF  39
143E:  CLRF   3A
1440:  CLRF   3B
1442:  CLRF   3C
1444:  CLRF   3D
1446:  CLRF   3E
1448:  CLRF   3F
144A:  CLRF   40
144C:  CLRF   41
....................    setup_adc_ports(AN0_TO_AN3); 
144E:  MOVF   FC1,W
1450:  ANDLW  C0
1452:  IORLW  0B
1454:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1456:  BCF    FC0.0
1458:  BSF    FC0.1
145A:  BCF    FC0.2
145C:  BSF    FC0.7
145E:  BSF    FC2.0
....................    output_d(0);  
1460:  CLRF   F95
1462:  CLRF   F8C
....................    ModoSleep=1; 
1464:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1466:  MOVLW  85
1468:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
146A:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
146C:  MOVLW  00
146E:  IORLW  05
1470:  MOVWF  FCA
1472:  MOVLW  FF
1474:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
1476:  BCF    F94.2
1478:  BCF    F8B.2
147A:  BCF    F96.6
147C:  MOVLW  0C
147E:  MOVWF  FBD
1480:  CLRF   FB7
1482:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
1484:  MOVLW  C0
1486:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
1488:  CLRF   FBE
....................    lcd_init(); 
148A:  CALL   0902
....................    printf(lcd_putc,"\f"); 
148E:  MOVLW  0C
1490:  MOVWF  5E
1492:  CALL   09BC
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1496:  MOVFF  FF2,51
149A:  BCF    FF2.7
149C:  CLRF   FA9
149E:  BCF    FA6.6
14A0:  BCF    FA6.7
14A2:  BSF    FA6.0
14A4:  MOVF   FA8,W
14A6:  BTFSC  51.7
14A8:  BSF    FF2.7
14AA:  MOVWF  3E
14AC:  MOVLW  14
14AE:  MOVWF  x64
14B0:  CALL   0876
14B4:  MOVFF  FF2,51
14B8:  BCF    FF2.7
14BA:  MOVLW  01
14BC:  MOVWF  FA9
14BE:  BCF    FA6.6
14C0:  BCF    FA6.7
14C2:  BSF    FA6.0
14C4:  MOVF   FA8,W
14C6:  BTFSC  51.7
14C8:  BSF    FF2.7
14CA:  MOVWF  3F
14CC:  MOVLW  14
14CE:  MOVWF  x64
14D0:  CALL   0876
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
14D4:  MOVFF  FF2,51
14D8:  BCF    FF2.7
14DA:  MOVLW  02
14DC:  MOVWF  FA9
14DE:  BCF    FA6.6
14E0:  BCF    FA6.7
14E2:  BSF    FA6.0
14E4:  MOVF   FA8,W
14E6:  BTFSC  51.7
14E8:  BSF    FF2.7
14EA:  MOVWF  40
14EC:  MOVLW  14
14EE:  MOVWF  x64
14F0:  CALL   0876
14F4:  MOVFF  FF2,51
14F8:  BCF    FF2.7
14FA:  MOVLW  03
14FC:  MOVWF  FA9
14FE:  BCF    FA6.6
1500:  BCF    FA6.7
1502:  BSF    FA6.0
1504:  MOVF   FA8,W
1506:  BTFSC  51.7
1508:  BSF    FF2.7
150A:  MOVWF  41
150C:  MOVLW  14
150E:  MOVWF  x64
1510:  CALL   0876
....................    estadoalarma=read_eeprom(5); 
1514:  MOVFF  FF2,51
1518:  BCF    FF2.7
151A:  MOVLW  05
151C:  MOVWF  FA9
151E:  BCF    FA6.6
1520:  BCF    FA6.7
1522:  BSF    FA6.0
1524:  MOVF   FA8,W
1526:  BTFSC  51.7
1528:  BSF    FF2.7
152A:  MOVWF  01
152C:  BCF    34.2
152E:  BTFSC  01.0
1530:  BSF    34.2
....................    delay_ms(20); 
1532:  MOVLW  14
1534:  MOVWF  x64
1536:  CALL   0876
....................    Manual=read_eeprom(10); 
153A:  MOVFF  FF2,51
153E:  BCF    FF2.7
1540:  MOVLW  0A
1542:  MOVWF  FA9
1544:  BCF    FA6.6
1546:  BCF    FA6.7
1548:  BSF    FA6.0
154A:  MOVF   FA8,W
154C:  BTFSC  51.7
154E:  BSF    FF2.7
1550:  MOVWF  27
....................    delay_ms(20); 
1552:  MOVLW  14
1554:  MOVWF  x64
1556:  CALL   0876
....................    Automa=read_eeprom(11); 
155A:  MOVFF  FF2,51
155E:  BCF    FF2.7
1560:  MOVLW  0B
1562:  MOVWF  FA9
1564:  BCF    FA6.6
1566:  BCF    FA6.7
1568:  BSF    FA6.0
156A:  MOVF   FA8,W
156C:  BTFSC  51.7
156E:  BSF    FF2.7
1570:  MOVWF  26
....................    delay_ms(20); 
1572:  MOVLW  14
1574:  MOVWF  x64
1576:  CALL   0876
....................    Semi=read_eeprom(12); 
157A:  MOVFF  FF2,51
157E:  BCF    FF2.7
1580:  MOVLW  0C
1582:  MOVWF  FA9
1584:  BCF    FA6.6
1586:  BCF    FA6.7
1588:  BSF    FA6.0
158A:  MOVF   FA8,W
158C:  BTFSC  51.7
158E:  BSF    FF2.7
1590:  MOVWF  28
....................    delay_ms(20); 
1592:  MOVLW  14
1594:  MOVWF  x64
1596:  CALL   0876
....................    ValorSemi=read_eeprom(13); 
159A:  MOVFF  FF2,51
159E:  BCF    FF2.7
15A0:  MOVLW  0D
15A2:  MOVWF  FA9
15A4:  BCF    FA6.6
15A6:  BCF    FA6.7
15A8:  BSF    FA6.0
15AA:  MOVF   FA8,W
15AC:  BTFSC  51.7
15AE:  BSF    FF2.7
15B0:  MOVWF  29
....................    delay_ms(20); 
15B2:  MOVLW  14
15B4:  MOVWF  x64
15B6:  CALL   0876
....................    tmp=ValorSemi; 
15BA:  MOVFF  29,25
....................  
....................    purga_minutos=read_eeprom(20); 
15BE:  MOVFF  FF2,51
15C2:  BCF    FF2.7
15C4:  MOVLW  14
15C6:  MOVWF  FA9
15C8:  BCF    FA6.6
15CA:  BCF    FA6.7
15CC:  BSF    FA6.0
15CE:  MOVF   FA8,W
15D0:  BTFSC  51.7
15D2:  BSF    FF2.7
15D4:  MOVWF  22
....................    delay_ms(20); 
15D6:  MOVLW  14
15D8:  MOVWF  x64
15DA:  CALL   0876
....................    purga_segundos=read_eeprom(21); 
15DE:  MOVFF  FF2,51
15E2:  BCF    FF2.7
15E4:  MOVLW  15
15E6:  MOVWF  FA9
15E8:  BCF    FA6.6
15EA:  BCF    FA6.7
15EC:  BSF    FA6.0
15EE:  MOVF   FA8,W
15F0:  BTFSC  51.7
15F2:  BSF    FF2.7
15F4:  MOVWF  2E
....................    delay_ms(20); 
15F6:  MOVLW  14
15F8:  MOVWF  x64
15FA:  CALL   0876
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
15FE:  MOVFF  22,23
1602:  MOVFF  2E,2F
....................    ppurga_minutos=read_eeprom(22); 
1606:  MOVFF  FF2,51
160A:  BCF    FF2.7
160C:  MOVLW  16
160E:  MOVWF  FA9
1610:  BCF    FA6.6
1612:  BCF    FA6.7
1614:  BSF    FA6.0
1616:  MOVF   FA8,W
1618:  BTFSC  51.7
161A:  BSF    FF2.7
161C:  MOVWF  32
....................    delay_ms(20); 
161E:  MOVLW  14
1620:  MOVWF  x64
1622:  CALL   0876
....................    ppurga_segundos=read_eeprom(23); 
1626:  MOVFF  FF2,51
162A:  BCF    FF2.7
162C:  MOVLW  17
162E:  MOVWF  FA9
1630:  BCF    FA6.6
1632:  BCF    FA6.7
1634:  BSF    FA6.0
1636:  MOVF   FA8,W
1638:  BTFSC  51.7
163A:  BSF    FF2.7
163C:  MOVWF  30
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
163E:  MOVFF  32,33
1642:  MOVFF  30,31
....................           
....................    setpoint=read_eeprom(40); 
1646:  MOVFF  FF2,51
164A:  BCF    FF2.7
164C:  MOVLW  28
164E:  MOVWF  FA9
1650:  BCF    FA6.6
1652:  BCF    FA6.7
1654:  BSF    FA6.0
1656:  MOVF   FA8,W
1658:  BTFSC  51.7
165A:  BSF    FF2.7
165C:  CLRF   57
165E:  MOVWF  56
1660:  CALL   0A10
1664:  MOVFF  03,45
1668:  MOVFF  02,44
166C:  MOVFF  01,43
1670:  MOVFF  00,42
....................    delay_ms(20); 
1674:  MOVLW  14
1676:  MOVWF  x64
1678:  CALL   0876
....................    segundos=read_eeprom(70); 
167C:  MOVFF  FF2,51
1680:  BCF    FF2.7
1682:  MOVLW  46
1684:  MOVWF  FA9
1686:  BCF    FA6.6
1688:  BCF    FA6.7
168A:  BSF    FA6.0
168C:  MOVF   FA8,W
168E:  BTFSC  51.7
1690:  BSF    FF2.7
1692:  MOVWF  2A
....................    delay_ms(20); 
1694:  MOVLW  14
1696:  MOVWF  x64
1698:  CALL   0876
....................    minutos=read_eeprom(71); 
169C:  MOVFF  FF2,51
16A0:  BCF    FF2.7
16A2:  MOVLW  47
16A4:  MOVWF  FA9
16A6:  BCF    FA6.6
16A8:  BCF    FA6.7
16AA:  BSF    FA6.0
16AC:  MOVF   FA8,W
16AE:  BTFSC  51.7
16B0:  BSF    FF2.7
16B2:  MOVWF  2B
....................    delay_ms(20); 
16B4:  MOVLW  14
16B6:  MOVWF  x64
16B8:  CALL   0876
....................    horas=read_eeprom(72); 
16BC:  MOVFF  FF2,51
16C0:  BCF    FF2.7
16C2:  MOVLW  48
16C4:  MOVWF  FA9
16C6:  BCF    FA6.6
16C8:  BCF    FA6.7
16CA:  BSF    FA6.0
16CC:  MOVF   FA8,W
16CE:  BTFSC  51.7
16D0:  BSF    FF2.7
16D2:  MOVWF  2C
....................    delay_ms(20); 
16D4:  MOVLW  14
16D6:  MOVWF  x64
16D8:  CALL   0876
....................    flag_filtro=read_eeprom(73); 
16DC:  MOVFF  FF2,51
16E0:  BCF    FF2.7
16E2:  MOVLW  49
16E4:  MOVWF  FA9
16E6:  BCF    FA6.6
16E8:  BCF    FA6.7
16EA:  BSF    FA6.0
16EC:  MOVF   FA8,W
16EE:  BTFSC  51.7
16F0:  BSF    FF2.7
16F2:  MOVWF  01
16F4:  BCF    35.1
16F6:  BTFSC  01.0
16F8:  BSF    35.1
....................    Menu=200; 
16FA:  MOVLW  C8
16FC:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
16FE:  MOVF   17,W
1700:  SUBLW  C8
1702:  BNZ   17B8
....................       if(inicio==0) 
1704:  BTFSC  35.4
1706:  BRA    17B6
....................       { 
....................       delay_ms(500); 
1708:  MOVLW  02
170A:  MOVWF  51
170C:  MOVLW  FA
170E:  MOVWF  x64
1710:  CALL   0876
1714:  DECFSZ 51,F
1716:  BRA    170C
....................          if(RIGHT) 
1718:  BSF    F92.5
171A:  BTFSS  F80.5
171C:  BRA    17B6
....................          { 
....................             lcd_init(); 
171E:  CALL   0902
....................             intensidadpantalla(contraste); 
1722:  MOVFF  20,51
1726:  CALL   0A46
....................             lcd_gotoxy(1,1); 
172A:  MOVLW  01
172C:  MOVWF  5F
172E:  MOVWF  x60
1730:  CALL   095A
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
1734:  MOVLW  FE
1736:  MOVWF  FF6
1738:  MOVLW  01
173A:  MOVWF  FF7
173C:  CALL   0A56
....................             lcd_gotoxy(1,2); 
1740:  MOVLW  01
1742:  MOVWF  5F
1744:  MOVLW  02
1746:  MOVWF  x60
1748:  CALL   095A
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
174C:  MOVLW  14
174E:  MOVWF  FF6
1750:  MOVLW  02
1752:  MOVWF  FF7
1754:  CALL   0A56
....................             lcd_gotoxy(1,3); 
1758:  MOVLW  01
175A:  MOVWF  5F
175C:  MOVLW  03
175E:  MOVWF  x60
1760:  CALL   095A
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
1764:  MOVLW  2A
1766:  MOVWF  FF6
1768:  MOVLW  02
176A:  MOVWF  FF7
176C:  CALL   0A56
....................             lcd_gotoxy(1,4); 
1770:  MOVLW  01
1772:  MOVWF  5F
1774:  MOVLW  04
1776:  MOVWF  x60
1778:  CALL   095A
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
177C:  MOVLW  40
177E:  MOVWF  FF6
1780:  MOVLW  02
1782:  MOVWF  FF7
1784:  CALL   0A56
....................             delay_ms(2000); 
1788:  MOVLW  08
178A:  MOVWF  51
178C:  MOVLW  FA
178E:  MOVWF  x64
1790:  CALL   0876
1794:  DECFSZ 51,F
1796:  BRA    178C
....................             printf(lcd_putc,"\f"); 
1798:  MOVLW  0C
179A:  MOVWF  5E
179C:  CALL   09BC
....................             inicio=1; 
17A0:  BSF    35.4
....................             Menu=0; 
17A2:  CLRF   17
....................             ModoSleep=0; 
17A4:  BCF    35.3
....................             delay_ms(500); 
17A6:  MOVLW  02
17A8:  MOVWF  51
17AA:  MOVLW  FA
17AC:  MOVWF  x64
17AE:  CALL   0876
17B2:  DECFSZ 51,F
17B4:  BRA    17AA
....................          } 
....................       } 
....................    } 
17B6:  BRA    16FE
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
17B8:  MOVF   17,F
17BA:  BTFSS  FD8.2
17BC:  BRA    1BA6
....................    flag_latencia=1;set_pwm1_duty(0); 
17BE:  BSF    34.7
17C0:  CLRF   FBE
....................       if(Latencia==1) 
17C2:  BTFSS  35.0
17C4:  BRA    17D0
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
17C6:  MOVLW  0C
17C8:  MOVWF  5E
17CA:  CALL   09BC
17CE:  RESET
....................          } 
....................    lcd_gotoxy(1,1); 
17D0:  MOVLW  01
17D2:  MOVWF  5F
17D4:  MOVWF  x60
17D6:  CALL   095A
....................    printf(lcd_putc,"     Ingrese        "); 
17DA:  MOVLW  56
17DC:  MOVWF  FF6
17DE:  MOVLW  02
17E0:  MOVWF  FF7
17E2:  CALL   0A56
....................    lcd_gotoxy(1,2); 
17E6:  MOVLW  01
17E8:  MOVWF  5F
17EA:  MOVLW  02
17EC:  MOVWF  x60
17EE:  CALL   095A
....................    printf(lcd_putc,"    Contraseña      "); 
17F2:  MOVLW  6C
17F4:  MOVWF  FF6
17F6:  MOVLW  02
17F8:  MOVWF  FF7
17FA:  CALL   0A56
....................    lcd_gotoxy(1,3); 
17FE:  MOVLW  01
1800:  MOVWF  5F
1802:  MOVLW  03
1804:  MOVWF  x60
1806:  CALL   095A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
180A:  MOVLW  82
180C:  MOVWF  FF6
180E:  MOVLW  02
1810:  MOVWF  FF7
1812:  MOVLW  0A
1814:  MOVWF  51
1816:  CALL   0A76
181A:  MOVFF  3A,51
181E:  MOVLW  1F
1820:  MOVWF  52
1822:  CALL   0ABC
1826:  MOVFF  3B,51
182A:  MOVLW  1F
182C:  MOVWF  52
182E:  CALL   0ABC
1832:  MOVFF  3C,51
1836:  MOVLW  1F
1838:  MOVWF  52
183A:  CALL   0ABC
183E:  MOVFF  3D,51
1842:  MOVLW  1F
1844:  MOVWF  52
1846:  CALL   0ABC
184A:  MOVLW  20
184C:  MOVWF  5E
184E:  CALL   09BC
1852:  MOVLW  20
1854:  MOVWF  5E
1856:  CALL   09BC
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
185A:  BSF    F96.2
185C:  BTFSS  F84.2
185E:  BRA    1886
....................       {  if(Flanco == 0)  
1860:  BTFSC  34.3
1862:  BRA    1884
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
1864:  MOVLW  0B
1866:  SUBWF  1A,W
1868:  CLRF   03
186A:  ADDLW  3A
186C:  MOVWF  FE9
186E:  MOVLW  00
1870:  ADDWFC 03,W
1872:  MOVWF  FEA
1874:  INCF   FEF,F
1876:  BSF    34.3
1878:  MOVLW  1E
187A:  MOVWF  x64
187C:  CALL   0876
1880:  CLRF   4E
1882:  CLRF   4D
....................          else 
1884:  BRA    1888
....................             {Flanco = 0;} 
1886:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1888:  BSF    F96.1
188A:  BTFSS  F84.1
188C:  BRA    18B4
....................       {  if(Flanco2 == 0)  
188E:  BTFSC  34.5
1890:  BRA    18B2
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
1892:  MOVLW  0B
1894:  SUBWF  1A,W
1896:  CLRF   03
1898:  ADDLW  3A
189A:  MOVWF  FE9
189C:  MOVLW  00
189E:  ADDWFC 03,W
18A0:  MOVWF  FEA
18A2:  DECF   FEF,F
18A4:  BSF    34.5
18A6:  MOVLW  1E
18A8:  MOVWF  x64
18AA:  CALL   0876
18AE:  CLRF   4E
18B0:  CLRF   4D
....................          else 
18B2:  BRA    18B6
....................             {Flanco2 = 0;} 
18B4:  BCF    34.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
18B6:  BSF    F92.5
18B8:  BTFSS  F80.5
18BA:  BRA    18DA
....................       {  if(Flanco1 == 0)  
18BC:  BTFSC  34.4
18BE:  BRA    18D8
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
18C0:  BSF    34.4
18C2:  INCF   1A,F
18C4:  MOVLW  1E
18C6:  MOVWF  x64
18C8:  CALL   0876
18CC:  MOVLW  0C
18CE:  MOVWF  5E
18D0:  CALL   09BC
18D4:  CLRF   4E
18D6:  CLRF   4D
....................          else 
18D8:  BRA    18DC
....................             {Flanco1 = 0;}    
18DA:  BCF    34.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
18DC:  BSF    F96.0
18DE:  BTFSS  F84.0
18E0:  BRA    1900
....................       {  if(Flanco3 == 0)  
18E2:  BTFSC  34.6
18E4:  BRA    18FE
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
18E6:  BSF    34.6
18E8:  DECF   1A,F
18EA:  MOVLW  1E
18EC:  MOVWF  x64
18EE:  CALL   0876
18F2:  MOVLW  0C
18F4:  MOVWF  5E
18F6:  CALL   09BC
18FA:  CLRF   4E
18FC:  CLRF   4D
....................          else 
18FE:  BRA    1902
....................             {Flanco3 = 0;}     
1900:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1902:  MOVLW  0B
1904:  SUBWF  1A,W
1906:  CLRF   03
1908:  ADDLW  3A
190A:  MOVWF  FE9
190C:  MOVLW  00
190E:  ADDWFC 03,W
1910:  MOVWF  FEA
1912:  BTFSC  FEF.7
1914:  BRA    1918
1916:  BRA    192C
....................        {clave[unidad-11]=9;} 
1918:  MOVLW  0B
191A:  SUBWF  1A,W
191C:  CLRF   03
191E:  ADDLW  3A
1920:  MOVWF  FE9
1922:  MOVLW  00
1924:  ADDWFC 03,W
1926:  MOVWF  FEA
1928:  MOVLW  09
192A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
192C:  MOVLW  0B
192E:  SUBWF  1A,W
1930:  CLRF   03
1932:  ADDLW  3A
1934:  MOVWF  FE9
1936:  MOVLW  00
1938:  ADDWFC 03,W
193A:  MOVWF  FEA
193C:  BTFSC  FEF.7
193E:  BRA    1958
1940:  MOVF   FEF,W
1942:  SUBLW  09
1944:  BC    1958
....................        {clave[unidad-11]=0;} 
1946:  MOVLW  0B
1948:  SUBWF  1A,W
194A:  CLRF   03
194C:  ADDLW  3A
194E:  MOVWF  FE9
1950:  MOVLW  00
1952:  ADDWFC 03,W
1954:  MOVWF  FEA
1956:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1958:  BTFSC  1A.7
195A:  BRA    1962
195C:  MOVF   1A,W
195E:  SUBLW  0A
1960:  BNC   1966
....................        {unidad=11;} 
1962:  MOVLW  0B
1964:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1966:  MOVFF  1A,5F
196A:  MOVLW  04
196C:  MOVWF  x60
196E:  CALL   095A
....................        lcd_putc(t[2]); 
1972:  MOVFF  39,5E
1976:  CALL   09BC
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
197A:  BTFSC  1A.7
197C:  BRA    1B78
197E:  MOVF   1A,W
1980:  SUBLW  0E
1982:  BTFSC  FD8.0
1984:  BRA    1B78
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1986:  MOVF   3A,W
1988:  SUBLW  03
198A:  BNZ   1A66
198C:  MOVF   3B,W
198E:  SUBLW  08
1990:  BNZ   1A66
1992:  MOVF   3C,W
1994:  SUBLW  09
1996:  BNZ   1A66
1998:  MOVF   3D,W
199A:  SUBLW  02
199C:  BNZ   1A66
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
199E:  CLRF   FA9
19A0:  CLRF   FA8
19A2:  BCF    FA6.6
19A4:  BCF    FA6.7
19A6:  BSF    FA6.2
19A8:  MOVF   FF2,W
19AA:  MOVWF  00
19AC:  BCF    FF2.7
19AE:  MOVLB  F
19B0:  MOVLW  55
19B2:  MOVWF  FA7
19B4:  MOVLW  AA
19B6:  MOVWF  FA7
19B8:  BSF    FA6.1
19BA:  BTFSC  FA6.1
19BC:  BRA    19BA
19BE:  BCF    FA6.2
19C0:  MOVF   00,W
19C2:  IORWF  FF2,F
19C4:  MOVLW  14
19C6:  MOVLB  0
19C8:  MOVWF  x64
19CA:  CALL   0876
19CE:  MOVLW  01
19D0:  MOVWF  FA9
19D2:  CLRF   FA8
19D4:  BCF    FA6.6
19D6:  BCF    FA6.7
19D8:  BSF    FA6.2
19DA:  MOVF   FF2,W
19DC:  MOVWF  00
19DE:  BCF    FF2.7
19E0:  MOVLB  F
19E2:  MOVLW  55
19E4:  MOVWF  FA7
19E6:  MOVLW  AA
19E8:  MOVWF  FA7
19EA:  BSF    FA6.1
19EC:  BTFSC  FA6.1
19EE:  BRA    19EC
19F0:  BCF    FA6.2
19F2:  MOVF   00,W
19F4:  IORWF  FF2,F
19F6:  MOVLW  14
19F8:  MOVLB  0
19FA:  MOVWF  x64
19FC:  CALL   0876
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1A00:  MOVLW  02
1A02:  MOVWF  FA9
1A04:  CLRF   FA8
1A06:  BCF    FA6.6
1A08:  BCF    FA6.7
1A0A:  BSF    FA6.2
1A0C:  MOVF   FF2,W
1A0E:  MOVWF  00
1A10:  BCF    FF2.7
1A12:  MOVLB  F
1A14:  MOVLW  55
1A16:  MOVWF  FA7
1A18:  MOVLW  AA
1A1A:  MOVWF  FA7
1A1C:  BSF    FA6.1
1A1E:  BTFSC  FA6.1
1A20:  BRA    1A1E
1A22:  BCF    FA6.2
1A24:  MOVF   00,W
1A26:  IORWF  FF2,F
1A28:  MOVLW  14
1A2A:  MOVLB  0
1A2C:  MOVWF  x64
1A2E:  CALL   0876
1A32:  MOVLW  03
1A34:  MOVWF  FA9
1A36:  CLRF   FA8
1A38:  BCF    FA6.6
1A3A:  BCF    FA6.7
1A3C:  BSF    FA6.2
1A3E:  MOVF   FF2,W
1A40:  MOVWF  00
1A42:  BCF    FF2.7
1A44:  MOVLB  F
1A46:  MOVLW  55
1A48:  MOVWF  FA7
1A4A:  MOVLW  AA
1A4C:  MOVWF  FA7
1A4E:  BSF    FA6.1
1A50:  BTFSC  FA6.1
1A52:  BRA    1A50
1A54:  BCF    FA6.2
1A56:  MOVF   00,W
1A58:  IORWF  FF2,F
1A5A:  MOVLW  14
1A5C:  MOVLB  0
1A5E:  MOVWF  x64
1A60:  CALL   0876
....................              reset_cpu();} 
1A64:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1A66:  MOVF   3E,W
1A68:  SUBWF  3A,W
1A6A:  BNZ   1B0A
1A6C:  MOVF   3F,W
1A6E:  SUBWF  3B,W
1A70:  BNZ   1B0A
1A72:  MOVF   40,W
1A74:  SUBWF  3C,W
1A76:  BNZ   1B0A
1A78:  MOVF   41,W
1A7A:  SUBWF  3D,W
1A7C:  BNZ   1B0A
....................             {lcd_gotoxy(1,1); 
1A7E:  MOVLW  01
1A80:  MOVWF  5F
1A82:  MOVWF  x60
1A84:  CALL   095A
....................             printf(lcd_putc,"                   "); 
1A88:  MOVLW  98
1A8A:  MOVWF  FF6
1A8C:  MOVLW  02
1A8E:  MOVWF  FF7
1A90:  CALL   0A56
....................             lcd_gotoxy(1,2); 
1A94:  MOVLW  01
1A96:  MOVWF  5F
1A98:  MOVLW  02
1A9A:  MOVWF  x60
1A9C:  CALL   095A
....................             printf(lcd_putc,"     Contraseña    "); 
1AA0:  MOVLW  AC
1AA2:  MOVWF  FF6
1AA4:  MOVLW  02
1AA6:  MOVWF  FF7
1AA8:  CALL   0A56
....................             lcd_gotoxy(1,3); 
1AAC:  MOVLW  01
1AAE:  MOVWF  5F
1AB0:  MOVLW  03
1AB2:  MOVWF  x60
1AB4:  CALL   095A
....................             printf(lcd_putc,"      Correcta     "); 
1AB8:  MOVLW  C0
1ABA:  MOVWF  FF6
1ABC:  MOVLW  02
1ABE:  MOVWF  FF7
1AC0:  CALL   0A56
....................             lcd_gotoxy(1,4); 
1AC4:  MOVLW  01
1AC6:  MOVWF  5F
1AC8:  MOVLW  04
1ACA:  MOVWF  x60
1ACC:  CALL   095A
....................             printf(lcd_putc,"                   "); 
1AD0:  MOVLW  D4
1AD2:  MOVWF  FF6
1AD4:  MOVLW  02
1AD6:  MOVWF  FF7
1AD8:  CALL   0A56
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");flag_latencia=0;Latencia=0;tiempo_purga=1; 
1ADC:  MOVLW  02
1ADE:  MOVWF  51
1AE0:  MOVLW  FA
1AE2:  MOVWF  x64
1AE4:  CALL   0876
1AE8:  DECFSZ 51,F
1AEA:  BRA    1AE0
1AEC:  MOVLW  32
1AEE:  MOVWF  17
1AF0:  MOVLW  0B
1AF2:  MOVWF  1A
1AF4:  MOVLW  0C
1AF6:  MOVWF  5E
1AF8:  CALL   09BC
1AFC:  BCF    34.7
1AFE:  BCF    35.0
1B00:  BSF    4A.1
....................             t_latencia=0;flag_iniciodamper=1;} 
1B02:  CLRF   4E
1B04:  CLRF   4D
1B06:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1B08:  BRA    1B78
....................          {lcd_gotoxy(1,1); 
1B0A:  MOVLW  01
1B0C:  MOVWF  5F
1B0E:  MOVWF  x60
1B10:  CALL   095A
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1B14:  MOVLW  01
1B16:  MOVWF  5F
1B18:  MOVLW  02
1B1A:  MOVWF  x60
1B1C:  CALL   095A
....................             printf(lcd_putc,"     Contraseña    "); 
1B20:  MOVLW  E8
1B22:  MOVWF  FF6
1B24:  MOVLW  02
1B26:  MOVWF  FF7
1B28:  CALL   0A56
....................             lcd_gotoxy(1,3); 
1B2C:  MOVLW  01
1B2E:  MOVWF  5F
1B30:  MOVLW  03
1B32:  MOVWF  x60
1B34:  CALL   095A
....................             printf(lcd_putc,"     Incorrecta    "); 
1B38:  MOVLW  FC
1B3A:  MOVWF  FF6
1B3C:  MOVLW  02
1B3E:  MOVWF  FF7
1B40:  CALL   0A56
....................             lcd_gotoxy(1,4); 
1B44:  MOVLW  01
1B46:  MOVWF  5F
1B48:  MOVLW  04
1B4A:  MOVWF  x60
1B4C:  CALL   095A
....................             printf(lcd_putc,"                   "); 
1B50:  MOVLW  10
1B52:  MOVWF  FF6
1B54:  MOVLW  03
1B56:  MOVWF  FF7
1B58:  CALL   0A56
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
1B5C:  MOVLW  02
1B5E:  MOVWF  51
1B60:  MOVLW  FA
1B62:  MOVWF  x64
1B64:  CALL   0876
1B68:  DECFSZ 51,F
1B6A:  BRA    1B60
1B6C:  MOVLW  0B
1B6E:  MOVWF  1A
1B70:  MOVLW  0C
1B72:  MOVWF  5E
1B74:  CALL   09BC
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1B78:  BTFSC  1A.7
1B7A:  BRA    1BA4
1B7C:  MOVF   1A,W
1B7E:  SUBLW  0B
1B80:  BC    1BA4
1B82:  BTFSC  1A.7
1B84:  BRA    1B8C
1B86:  MOVF   1A,W
1B88:  SUBLW  0D
1B8A:  BNC   1BA4
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1B8C:  MOVLW  01
1B8E:  SUBWF  1A,W
1B90:  MOVWF  51
1B92:  MOVWF  5F
1B94:  MOVLW  04
1B96:  MOVWF  x60
1B98:  CALL   095A
....................             lcd_putc(t[1]); 
1B9C:  MOVFF  38,5E
1BA0:  CALL   09BC
....................           } 
....................  
....................    } 
1BA4:  BRA    17B8
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1BA6:  DECFSZ 17,W
1BA8:  BRA    1DC0
....................       if(paso<0) 
1BAA:  BTFSC  36.7
1BAC:  BRA    1BB0
1BAE:  BRA    1BB2
....................         {paso=0;} 
1BB0:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
1BB2:  MOVLW  01
1BB4:  MOVWF  5F
1BB6:  MOVWF  x60
1BB8:  CALL   095A
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1BBC:  MOVLW  24
1BBE:  MOVWF  FF6
1BC0:  MOVLW  03
1BC2:  MOVWF  FF7
1BC4:  CALL   0A56
....................     
....................       if(UP)//Si oprime hacia arriba 
1BC8:  BSF    F96.2
1BCA:  BTFSS  F84.2
1BCC:  BRA    1BE8
....................       {  if(Flanco == 0)  
1BCE:  BTFSC  34.3
1BD0:  BRA    1BE6
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
1BD2:  DECF   1D,F
1BD4:  DECF   1B,F
1BD6:  MOVLW  01
1BD8:  ADDWF  1B,W
1BDA:  MOVWF  1C
1BDC:  BSF    34.3
1BDE:  MOVLW  1E
1BE0:  MOVWF  x64
1BE2:  CALL   0876
....................          else 
1BE6:  BRA    1BEA
....................             {Flanco = 0;} 
1BE8:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1BEA:  BSF    F96.1
1BEC:  BTFSS  F84.1
1BEE:  BRA    1C0A
....................       {  if(Flanco2 == 0)  
1BF0:  BTFSC  34.5
1BF2:  BRA    1C08
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
1BF4:  INCF   1D,F
1BF6:  INCF   1B,F
1BF8:  MOVLW  01
1BFA:  SUBWF  1B,W
1BFC:  MOVWF  1C
1BFE:  BSF    34.5
1C00:  MOVLW  1E
1C02:  MOVWF  x64
1C04:  CALL   0876
....................          else 
1C08:  BRA    1C0C
....................             {Flanco2 = 0;} 
1C0A:  BCF    34.5
....................     
....................          
....................         if(Flecha2>nMenuH) 
1C0C:  MOVF   1F,W
1C0E:  XORLW  80
1C10:  MOVWF  00
1C12:  MOVF   1D,W
1C14:  XORLW  80
1C16:  SUBWF  00,W
1C18:  BC    1C2A
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1C1A:  INCF   36,F
1C1C:  MOVFF  1D,1F
1C20:  MOVLW  02
1C22:  SUBWF  1F,W
1C24:  MOVWF  1E
1C26:  MOVLW  04
1C28:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
1C2A:  MOVF   1D,W
1C2C:  XORLW  80
1C2E:  MOVWF  00
1C30:  MOVF   1E,W
1C32:  XORLW  80
1C34:  SUBWF  00,W
1C36:  BC    1C48
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1C38:  DECF   36,F
1C3A:  MOVFF  1D,1E
1C3E:  MOVLW  02
1C40:  ADDWF  1E,W
1C42:  MOVWF  1F
1C44:  MOVLW  02
1C46:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
1C48:  MOVF   18,W
1C4A:  XORLW  80
1C4C:  MOVWF  00
1C4E:  MOVF   1D,W
1C50:  XORLW  80
1C52:  SUBWF  00,W
1C54:  BC    1C68
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1C56:  MOVFF  19,1D
1C5A:  MOVLW  02
1C5C:  MOVWF  1B
1C5E:  CLRF   36
1C60:  MOVFF  1D,1E
1C64:  ADDWF  1E,W
1C66:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
1C68:  MOVF   1D,W
1C6A:  XORLW  80
1C6C:  MOVWF  00
1C6E:  MOVF   19,W
1C70:  XORLW  80
1C72:  SUBWF  00,W
1C74:  BC    1C8C
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
1C76:  MOVFF  18,1D
1C7A:  MOVLW  04
1C7C:  MOVWF  1B
1C7E:  SUBWF  18,W
1C80:  MOVWF  36
1C82:  MOVFF  1D,1F
1C86:  MOVLW  02
1C88:  SUBWF  1F,W
1C8A:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
1C8C:  MOVLW  01
1C8E:  ADDWF  36,W
1C90:  MOVWF  51
1C92:  MOVWF  52
1C94:  MOVLW  02
1C96:  MOVWF  53
1C98:  CALL   0B84
....................         mensajes(2+paso,3); 
1C9C:  MOVLW  02
1C9E:  ADDWF  36,W
1CA0:  MOVWF  51
1CA2:  MOVWF  52
1CA4:  MOVLW  03
1CA6:  MOVWF  53
1CA8:  CALL   0B84
....................         mensajes(3+paso,4); 
1CAC:  MOVLW  03
1CAE:  ADDWF  36,W
1CB0:  MOVWF  51
1CB2:  MOVWF  52
1CB4:  MOVLW  04
1CB6:  MOVWF  53
1CB8:  CALL   0B84
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1CBC:  MOVLW  01
1CBE:  MOVWF  5F
1CC0:  MOVFF  1B,60
1CC4:  CALL   095A
....................         lcd_putc(t[0]); 
1CC8:  MOVFF  37,5E
1CCC:  CALL   09BC
....................  
....................         if(Flecha==2) 
1CD0:  MOVF   1B,W
1CD2:  SUBLW  02
1CD4:  BNZ   1CFE
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1CD6:  MOVLW  01
1CD8:  MOVWF  5F
1CDA:  MOVLW  04
1CDC:  MOVWF  x60
1CDE:  CALL   095A
....................             lcd_putc(t[1]); 
1CE2:  MOVFF  38,5E
1CE6:  CALL   09BC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1CEA:  MOVLW  01
1CEC:  MOVWF  5F
1CEE:  MOVLW  03
1CF0:  MOVWF  x60
1CF2:  CALL   095A
....................             lcd_putc(t[1]); 
1CF6:  MOVFF  38,5E
1CFA:  CALL   09BC
....................           } 
....................          
....................         if(Flecha==4) 
1CFE:  MOVF   1B,W
1D00:  SUBLW  04
1D02:  BNZ   1D2C
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1D04:  MOVLW  01
1D06:  MOVWF  5F
1D08:  MOVLW  02
1D0A:  MOVWF  x60
1D0C:  CALL   095A
....................             lcd_putc(t[1]); 
1D10:  MOVFF  38,5E
1D14:  CALL   09BC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1D18:  MOVLW  01
1D1A:  MOVWF  5F
1D1C:  MOVLW  03
1D1E:  MOVWF  x60
1D20:  CALL   095A
....................             lcd_putc(t[1]); 
1D24:  MOVFF  38,5E
1D28:  CALL   09BC
....................           } 
....................          
....................         if(Flecha==3) 
1D2C:  MOVF   1B,W
1D2E:  SUBLW  03
1D30:  BNZ   1D5A
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1D32:  MOVLW  01
1D34:  MOVWF  5F
1D36:  MOVLW  04
1D38:  MOVWF  x60
1D3A:  CALL   095A
....................             lcd_putc(t[1]); 
1D3E:  MOVFF  38,5E
1D42:  CALL   09BC
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1D46:  MOVLW  01
1D48:  MOVWF  5F
1D4A:  MOVLW  02
1D4C:  MOVWF  x60
1D4E:  CALL   095A
....................             lcd_putc(t[1]); 
1D52:  MOVFF  38,5E
1D56:  CALL   09BC
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
1D5A:  BSF    F92.5
1D5C:  BTFSS  F80.5
1D5E:  BRA    1D94
....................       {  if(Flanco1 == 0)  
1D60:  BTFSC  34.4
1D62:  BRA    1D92
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
1D64:  MOVFF  1D,17
1D68:  MOVLW  03
1D6A:  MOVWF  1B
1D6C:  MOVLW  02
1D6E:  MOVWF  51
1D70:  MOVLW  FA
1D72:  MOVWF  x64
1D74:  CALL   0876
1D78:  DECFSZ 51,F
1D7A:  BRA    1D70
1D7C:  MOVLW  0C
1D7E:  MOVWF  5E
1D80:  CALL   09BC
....................             if(Menu==6) 
1D84:  MOVF   17,W
1D86:  SUBLW  06
1D88:  BNZ   1D92
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
1D8A:  CLRF   3A
1D8C:  CLRF   3B
1D8E:  CLRF   3C
1D90:  CLRF   3D
....................          else 
1D92:  BRA    1D96
....................             {Flanco1 = 0;}   
1D94:  BCF    34.4
....................              
....................       if(LEFT)// Si oprime Izquierda 
1D96:  BSF    F96.0
1D98:  BTFSS  F84.0
1D9A:  BRA    1DBE
....................       {  if(Flanco3 == 0)  
1D9C:  BTFSC  34.6
1D9E:  BRA    1DBC
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
1DA0:  MOVLW  02
1DA2:  MOVWF  51
1DA4:  MOVLW  FA
1DA6:  MOVWF  x64
1DA8:  CALL   0876
1DAC:  DECFSZ 51,F
1DAE:  BRA    1DA4
1DB0:  MOVLW  14
1DB2:  MOVWF  17
1DB4:  MOVLW  0C
1DB6:  MOVWF  5E
1DB8:  CALL   09BC
....................          else 
1DBC:  BRA    1DC0
....................             {Flanco3 = 0;}                
1DBE:  BCF    34.6
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
1DC0:  MOVF   17,W
1DC2:  SUBLW  02
1DC4:  BTFSS  FD8.2
1DC6:  BRA    1EF2
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
1DC8:  BTG    34.2
1DCA:  BSF    34.4
1DCC:  MOVLW  01
1DCE:  MOVWF  17
1DD0:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
1DD2:  BTFSS  34.2
1DD4:  BRA    1E36
....................             {estadoalarma=1; 
1DD6:  BSF    34.2
....................                lcd_gotoxy(1,1); 
1DD8:  MOVLW  01
1DDA:  MOVWF  5F
1DDC:  MOVWF  x60
1DDE:  CALL   095A
....................                printf(lcd_putc,"                    "); 
1DE2:  MOVLW  3A
1DE4:  MOVWF  FF6
1DE6:  MOVLW  03
1DE8:  MOVWF  FF7
1DEA:  CALL   0A56
....................                lcd_gotoxy(1,2); 
1DEE:  MOVLW  01
1DF0:  MOVWF  5F
1DF2:  MOVLW  02
1DF4:  MOVWF  x60
1DF6:  CALL   095A
....................                printf(lcd_putc,"        Activo      "); 
1DFA:  MOVLW  50
1DFC:  MOVWF  FF6
1DFE:  MOVLW  03
1E00:  MOVWF  FF7
1E02:  CALL   0A56
....................                lcd_gotoxy(1,3); 
1E06:  MOVLW  01
1E08:  MOVWF  5F
1E0A:  MOVLW  03
1E0C:  MOVWF  x60
1E0E:  CALL   095A
....................                printf(lcd_putc,"        Alarma      "); 
1E12:  MOVLW  66
1E14:  MOVWF  FF6
1E16:  MOVLW  03
1E18:  MOVWF  FF7
1E1A:  CALL   0A56
....................                lcd_gotoxy(1,4); 
1E1E:  MOVLW  01
1E20:  MOVWF  5F
1E22:  MOVLW  04
1E24:  MOVWF  x60
1E26:  CALL   095A
....................                printf(lcd_putc,"                    ");} 
1E2A:  MOVLW  7C
1E2C:  MOVWF  FF6
1E2E:  MOVLW  03
1E30:  MOVWF  FF7
1E32:  CALL   0A56
....................                 
....................             if(estadoalarma==0) 
1E36:  BTFSC  34.2
1E38:  BRA    1E9A
....................             {estadoalarma=0; 
1E3A:  BCF    34.2
....................                lcd_gotoxy(1,1); 
1E3C:  MOVLW  01
1E3E:  MOVWF  5F
1E40:  MOVWF  x60
1E42:  CALL   095A
....................                printf(lcd_putc,"                    "); 
1E46:  MOVLW  92
1E48:  MOVWF  FF6
1E4A:  MOVLW  03
1E4C:  MOVWF  FF7
1E4E:  CALL   0A56
....................                lcd_gotoxy(1,2); 
1E52:  MOVLW  01
1E54:  MOVWF  5F
1E56:  MOVLW  02
1E58:  MOVWF  x60
1E5A:  CALL   095A
....................                printf(lcd_putc,"      Desactivo     "); 
1E5E:  MOVLW  A8
1E60:  MOVWF  FF6
1E62:  MOVLW  03
1E64:  MOVWF  FF7
1E66:  CALL   0A56
....................                lcd_gotoxy(1,3); 
1E6A:  MOVLW  01
1E6C:  MOVWF  5F
1E6E:  MOVLW  03
1E70:  MOVWF  x60
1E72:  CALL   095A
....................                printf(lcd_putc,"       Alarma       "); 
1E76:  MOVLW  BE
1E78:  MOVWF  FF6
1E7A:  MOVLW  03
1E7C:  MOVWF  FF7
1E7E:  CALL   0A56
....................                lcd_gotoxy(1,4); 
1E82:  MOVLW  01
1E84:  MOVWF  5F
1E86:  MOVLW  04
1E88:  MOVWF  x60
1E8A:  CALL   095A
....................                printf(lcd_putc,"                    ");} 
1E8E:  MOVLW  D4
1E90:  MOVWF  FF6
1E92:  MOVLW  03
1E94:  MOVWF  FF7
1E96:  CALL   0A56
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
1E9A:  MOVLW  00
1E9C:  BTFSC  34.2
1E9E:  MOVLW  01
1EA0:  MOVWF  51
1EA2:  MOVLW  05
1EA4:  MOVWF  FA9
1EA6:  MOVFF  51,FA8
1EAA:  BCF    FA6.6
1EAC:  BCF    FA6.7
1EAE:  BSF    FA6.2
1EB0:  MOVF   FF2,W
1EB2:  MOVWF  00
1EB4:  BCF    FF2.7
1EB6:  MOVLB  F
1EB8:  MOVLW  55
1EBA:  MOVWF  FA7
1EBC:  MOVLW  AA
1EBE:  MOVWF  FA7
1EC0:  BSF    FA6.1
1EC2:  BTFSC  FA6.1
1EC4:  BRA    1EC2
1EC6:  BCF    FA6.2
1EC8:  MOVF   00,W
1ECA:  IORWF  FF2,F
1ECC:  MOVLW  04
1ECE:  MOVWF  51
1ED0:  MOVLW  FA
1ED2:  MOVLB  0
1ED4:  MOVWF  x64
1ED6:  CALL   0876
1EDA:  DECFSZ 51,F
1EDC:  BRA    1EE0
1EDE:  BRA    1EE4
1EE0:  MOVLB  F
1EE2:  BRA    1ED0
1EE4:  MOVLW  02
1EE6:  MOVWF  1B
1EE8:  MOVWF  1D
1EEA:  MOVLW  0C
1EEC:  MOVWF  5E
1EEE:  CALL   09BC
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
1EF2:  MOVF   17,W
1EF4:  SUBLW  03
1EF6:  BTFSS  FD8.2
1EF8:  BRA    2144
....................    lcd_gotoxy(1,1); 
1EFA:  MOVLW  01
1EFC:  MOVWF  5F
1EFE:  MOVWF  x60
1F00:  CALL   095A
....................    printf(lcd_putc,"  Duracion Actual   ");                           
1F04:  MOVLW  EA
1F06:  MOVWF  FF6
1F08:  MOVLW  03
1F0A:  MOVWF  FF7
1F0C:  CALL   0A56
....................    lcd_gotoxy(1,2);                                                   
1F10:  MOVLW  01
1F12:  MOVWF  5F
1F14:  MOVLW  02
1F16:  MOVWF  x60
1F18:  CALL   095A
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
1F1C:  MOVLW  00
1F1E:  MOVWF  FF6
1F20:  MOVLW  04
1F22:  MOVWF  FF7
1F24:  MOVLW  09
1F26:  MOVWF  51
1F28:  CALL   0A76
1F2C:  MOVFF  2C,51
1F30:  MOVLW  01
1F32:  MOVWF  52
1F34:  CALL   0C3C
1F38:  MOVLW  3A
1F3A:  MOVWF  5E
1F3C:  CALL   09BC
1F40:  MOVFF  2B,51
1F44:  MOVLW  01
1F46:  MOVWF  52
1F48:  CALL   0C3C
1F4C:  MOVLW  3A
1F4E:  MOVWF  5E
1F50:  CALL   09BC
1F54:  MOVFF  2A,51
1F58:  MOVLW  01
1F5A:  MOVWF  52
1F5C:  CALL   0C3C
1F60:  MOVLW  20
1F62:  MOVWF  5E
1F64:  CALL   09BC
....................     
....................    if(flag_filtro==1) 
1F68:  BTFSS  35.1
1F6A:  BRA    1F86
....................    { 
....................       lcd_gotoxy(1,3);                                                  
1F6C:  MOVLW  01
1F6E:  MOVWF  5F
1F70:  MOVLW  03
1F72:  MOVWF  x60
1F74:  CALL   095A
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
1F78:  MOVLW  1A
1F7A:  MOVWF  FF6
1F7C:  MOVLW  04
1F7E:  MOVWF  FF7
1F80:  CALL   0A56
....................    } 
....................    else 
1F84:  BRA    1F9E
....................    { 
....................       lcd_gotoxy(1,3);                                                  
1F86:  MOVLW  01
1F88:  MOVWF  5F
1F8A:  MOVLW  03
1F8C:  MOVWF  x60
1F8E:  CALL   095A
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
1F92:  MOVLW  30
1F94:  MOVWF  FF6
1F96:  MOVLW  04
1F98:  MOVWF  FF7
1F9A:  CALL   0A56
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
1F9E:  MOVLW  01
1FA0:  MOVWF  5F
1FA2:  MOVLW  04
1FA4:  MOVWF  x60
1FA6:  CALL   095A
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
1FAA:  MOVLW  46
1FAC:  MOVWF  FF6
1FAE:  MOVLW  04
1FB0:  MOVWF  FF7
1FB2:  CALL   0A56
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
1FB6:  BSF    F96.2
1FB8:  BTFSS  F84.2
1FBA:  BRA    20AA
....................       {  delay_ms(200); 
1FBC:  MOVLW  C8
1FBE:  MOVWF  x64
1FC0:  CALL   0876
....................          printf(lcd_putc,"\f"); 
1FC4:  MOVLW  0C
1FC6:  MOVWF  5E
1FC8:  CALL   09BC
....................          lcd_gotoxy(1,2); 
1FCC:  MOVLW  01
1FCE:  MOVWF  5F
1FD0:  MOVLW  02
1FD2:  MOVWF  x60
1FD4:  CALL   095A
....................          printf(lcd_putc," Reset de tiempo "); 
1FD8:  MOVLW  5C
1FDA:  MOVWF  FF6
1FDC:  MOVLW  04
1FDE:  MOVWF  FF7
1FE0:  CALL   0A56
....................          lcd_gotoxy(1,3); 
1FE4:  MOVLW  01
1FE6:  MOVWF  5F
1FE8:  MOVLW  03
1FEA:  MOVWF  x60
1FEC:  CALL   095A
....................          printf(lcd_putc,"     Exitoso     "); 
1FF0:  MOVLW  6E
1FF2:  MOVWF  FF6
1FF4:  MOVLW  04
1FF6:  MOVWF  FF7
1FF8:  CALL   0A56
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
1FFC:  MOVLW  46
1FFE:  MOVWF  FA9
2000:  CLRF   FA8
2002:  BCF    FA6.6
2004:  BCF    FA6.7
2006:  BSF    FA6.2
2008:  MOVF   FF2,W
200A:  MOVWF  00
200C:  BCF    FF2.7
200E:  MOVLB  F
2010:  MOVLW  55
2012:  MOVWF  FA7
2014:  MOVLW  AA
2016:  MOVWF  FA7
2018:  BSF    FA6.1
201A:  BTFSC  FA6.1
201C:  BRA    201A
201E:  BCF    FA6.2
2020:  MOVF   00,W
2022:  IORWF  FF2,F
2024:  MOVLW  47
2026:  MOVWF  FA9
2028:  CLRF   FA8
202A:  BCF    FA6.6
202C:  BCF    FA6.7
202E:  BSF    FA6.2
2030:  MOVF   FF2,W
2032:  MOVWF  00
2034:  BCF    FF2.7
2036:  MOVLW  55
2038:  MOVWF  FA7
203A:  MOVLW  AA
203C:  MOVWF  FA7
203E:  BSF    FA6.1
2040:  BTFSC  FA6.1
2042:  BRA    2040
2044:  BCF    FA6.2
2046:  MOVF   00,W
2048:  IORWF  FF2,F
204A:  MOVLW  48
204C:  MOVWF  FA9
204E:  CLRF   FA8
2050:  BCF    FA6.6
2052:  BCF    FA6.7
2054:  BSF    FA6.2
2056:  MOVF   FF2,W
2058:  MOVWF  00
205A:  BCF    FF2.7
205C:  MOVLW  55
205E:  MOVWF  FA7
2060:  MOVLW  AA
2062:  MOVWF  FA7
2064:  BSF    FA6.1
2066:  BTFSC  FA6.1
2068:  BRA    2066
206A:  BCF    FA6.2
206C:  MOVF   00,W
206E:  IORWF  FF2,F
....................          delay_ms(700); 
2070:  MOVLW  04
2072:  MOVWF  51
2074:  MOVLW  AF
2076:  MOVLB  0
2078:  MOVWF  x64
207A:  CALL   0876
207E:  DECFSZ 51,F
2080:  BRA    2084
2082:  BRA    2088
2084:  MOVLB  F
2086:  BRA    2074
....................          segundos=0;minutos=0;horas=0; 
2088:  CLRF   2A
208A:  CLRF   2B
208C:  CLRF   2C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
208E:  MOVLW  1E
2090:  MOVWF  x64
2092:  CALL   0876
2096:  MOVLW  01
2098:  MOVWF  17
209A:  CLRF   36
209C:  MOVLW  02
209E:  MOVWF  1B
20A0:  MOVWF  1D
20A2:  MOVLW  0C
20A4:  MOVWF  5E
20A6:  CALL   09BC
....................       } 
....................        
....................       if(RIGHT) 
20AA:  BSF    F92.5
20AC:  BTFSS  F80.5
20AE:  BRA    2110
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
20B0:  BTG    35.1
20B2:  MOVLW  00
20B4:  BTFSC  35.1
20B6:  MOVLW  01
20B8:  MOVWF  51
20BA:  MOVLW  49
20BC:  MOVWF  FA9
20BE:  MOVFF  51,FA8
20C2:  BCF    FA6.6
20C4:  BCF    FA6.7
20C6:  BSF    FA6.2
20C8:  MOVF   FF2,W
20CA:  MOVWF  00
20CC:  BCF    FF2.7
20CE:  MOVLB  F
20D0:  MOVLW  55
20D2:  MOVWF  FA7
20D4:  MOVLW  AA
20D6:  MOVWF  FA7
20D8:  BSF    FA6.1
20DA:  BTFSC  FA6.1
20DC:  BRA    20DA
20DE:  BCF    FA6.2
20E0:  MOVF   00,W
20E2:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
20E4:  MOVLW  02
20E6:  MOVWF  51
20E8:  MOVLW  FA
20EA:  MOVLB  0
20EC:  MOVWF  x64
20EE:  CALL   0876
20F2:  DECFSZ 51,F
20F4:  BRA    20F8
20F6:  BRA    20FC
20F8:  MOVLB  F
20FA:  BRA    20E8
20FC:  MOVLW  01
20FE:  MOVWF  17
2100:  CLRF   36
2102:  MOVLW  02
2104:  MOVWF  1B
2106:  MOVWF  1D
2108:  MOVLW  0C
210A:  MOVWF  5E
210C:  CALL   09BC
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
2110:  BSF    F96.0
2112:  BTFSS  F84.0
2114:  BRA    2142
....................       {  if(Flanco3 == 0)  
2116:  BTFSC  34.6
2118:  BRA    2140
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
211A:  BSF    34.6
211C:  MOVLW  02
211E:  MOVWF  51
2120:  MOVLW  FA
2122:  MOVWF  x64
2124:  CALL   0876
2128:  DECFSZ 51,F
212A:  BRA    2120
212C:  MOVLW  01
212E:  MOVWF  17
2130:  CLRF   36
2132:  MOVLW  02
2134:  MOVWF  1B
2136:  MOVWF  1D
2138:  MOVLW  0C
213A:  MOVWF  5E
213C:  CALL   09BC
....................          else 
2140:  BRA    2144
....................             {Flanco3 = 0;}       
2142:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
2144:  MOVF   17,W
2146:  SUBLW  04
2148:  BTFSS  FD8.2
214A:  BRA    2342
....................    lcd_gotoxy(1,2); 
214C:  MOVLW  01
214E:  MOVWF  5F
2150:  MOVLW  02
2152:  MOVWF  x60
2154:  CALL   095A
....................    printf(lcd_putc,"    Vida Filtro     "); 
2158:  MOVLW  80
215A:  MOVWF  FF6
215C:  MOVLW  04
215E:  MOVWF  FF7
2160:  CALL   0A56
....................    lcd_gotoxy(1,3); 
2164:  MOVLW  01
2166:  MOVWF  5F
2168:  MOVLW  03
216A:  MOVWF  x60
216C:  CALL   095A
....................    printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
2170:  MOVLW  96
2172:  MOVWF  FF6
2174:  MOVLW  04
2176:  MOVWF  FF7
2178:  MOVLW  06
217A:  MOVWF  51
217C:  CALL   0A76
2180:  MOVLW  42
2182:  MOVWF  FE9
2184:  MOVFF  45,54
2188:  MOVFF  44,53
218C:  MOVFF  43,52
2190:  MOVFF  42,51
2194:  CLRF   55
2196:  GOTO   0E50
219A:  MOVLW  A2
219C:  MOVWF  FF6
219E:  MOVLW  04
21A0:  MOVWF  FF7
21A2:  MOVLW  08
21A4:  MOVWF  51
21A6:  CALL   0A76
....................     
....................    if(setpoint<1.0) 
21AA:  MOVFF  45,58
21AE:  MOVFF  44,57
21B2:  MOVFF  43,56
21B6:  MOVFF  42,55
21BA:  CLRF   5C
21BC:  CLRF   5B
21BE:  CLRF   5A
21C0:  MOVLW  7F
21C2:  MOVWF  59
21C4:  CALL   0FD0
21C8:  BNC   21D4
....................    {setpoint=1.0;} 
21CA:  CLRF   45
21CC:  CLRF   44
21CE:  CLRF   43
21D0:  MOVLW  7F
21D2:  MOVWF  42
....................     
....................    if(setpoint>255.0) 
21D4:  CLRF   58
21D6:  CLRF   57
21D8:  MOVLW  7F
21DA:  MOVWF  56
21DC:  MOVLW  86
21DE:  MOVWF  55
21E0:  MOVFF  45,5C
21E4:  MOVFF  44,5B
21E8:  MOVFF  43,5A
21EC:  MOVFF  42,59
21F0:  CALL   0FD0
21F4:  BNC   2202
....................    {setpoint=255.0;} 
21F6:  CLRF   45
21F8:  CLRF   44
21FA:  MOVLW  7F
21FC:  MOVWF  43
21FE:  MOVLW  86
2200:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
2202:  BSF    F96.2
2204:  BTFSS  F84.2
2206:  BRA    2242
....................       {setpoint+=1.0;Flanco = 1;delay_ms(30);} 
2208:  BCF    FD8.1
220A:  MOVFF  45,54
220E:  MOVFF  44,53
2212:  MOVFF  43,52
2216:  MOVFF  42,51
221A:  CLRF   58
221C:  CLRF   57
221E:  CLRF   56
2220:  MOVLW  7F
2222:  MOVWF  55
2224:  CALL   1046
2228:  MOVFF  03,45
222C:  MOVFF  02,44
2230:  MOVFF  01,43
2234:  MOVFF  00,42
2238:  BSF    34.3
223A:  MOVLW  1E
223C:  MOVWF  x64
223E:  CALL   0876
....................       
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2242:  BSF    F96.1
2244:  BTFSS  F84.1
2246:  BRA    2282
....................       {setpoint-=1.0;Flanco2 = 1;delay_ms(30);} 
2248:  BSF    FD8.1
224A:  MOVFF  45,54
224E:  MOVFF  44,53
2252:  MOVFF  43,52
2256:  MOVFF  42,51
225A:  CLRF   58
225C:  CLRF   57
225E:  CLRF   56
2260:  MOVLW  7F
2262:  MOVWF  55
2264:  CALL   1046
2268:  MOVFF  03,45
226C:  MOVFF  02,44
2270:  MOVFF  01,43
2274:  MOVFF  00,42
2278:  BSF    34.5
227A:  MOVLW  1E
227C:  MOVWF  x64
227E:  CALL   0876
....................          
....................     
....................       if(RIGHT)// Si oprime derecha 
2282:  BSF    F92.5
2284:  BTFSS  F80.5
2286:  BRA    230A
....................       {  if(Flanco1 == 0)  
2288:  BTFSC  34.4
228A:  BRA    2308
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
228C:  MOVLW  01
228E:  MOVWF  17
2290:  CLRF   36
2292:  MOVLW  02
2294:  MOVWF  1B
2296:  MOVWF  1D
2298:  MOVLW  0B
229A:  MOVWF  1A
229C:  MOVLW  02
229E:  MOVWF  51
22A0:  MOVLW  FA
22A2:  MOVWF  x64
22A4:  CALL   0876
22A8:  DECFSZ 51,F
22AA:  BRA    22A0
22AC:  MOVLW  0C
22AE:  MOVWF  5E
22B0:  CALL   09BC
....................             Temporal=setpoint; 
22B4:  MOVFF  45,49
22B8:  MOVFF  44,48
22BC:  MOVFF  43,47
22C0:  MOVFF  42,46
....................             Entero=(int)setpoint; 
22C4:  MOVFF  45,54
22C8:  MOVFF  44,53
22CC:  MOVFF  43,52
22D0:  MOVFF  42,51
22D4:  GOTO   12B0
22D8:  MOVFF  01,24
....................             write_eeprom(40,Entero); 
22DC:  MOVLW  28
22DE:  MOVWF  FA9
22E0:  MOVFF  24,FA8
22E4:  BCF    FA6.6
22E6:  BCF    FA6.7
22E8:  BSF    FA6.2
22EA:  MOVF   FF2,W
22EC:  MOVWF  00
22EE:  BCF    FF2.7
22F0:  MOVLB  F
22F2:  MOVLW  55
22F4:  MOVWF  FA7
22F6:  MOVLW  AA
22F8:  MOVWF  FA7
22FA:  BSF    FA6.1
22FC:  BTFSC  FA6.1
22FE:  BRA    22FC
2300:  BCF    FA6.2
2302:  MOVF   00,W
2304:  IORWF  FF2,F
2306:  MOVLB  0
....................             }} 
....................          else 
2308:  BRA    230C
....................             {Flanco1 = 0;}    
230A:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
230C:  BSF    F96.0
230E:  BTFSS  F84.0
2310:  BRA    2340
....................       {  if(Flanco3 == 0)  
2312:  BTFSC  34.6
2314:  BRA    233E
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
2316:  MOVLW  01
2318:  MOVWF  17
231A:  CLRF   36
231C:  MOVLW  02
231E:  MOVWF  1B
2320:  MOVWF  1D
2322:  MOVLW  0B
2324:  MOVWF  1A
2326:  MOVLW  02
2328:  MOVWF  51
232A:  MOVLW  FA
232C:  MOVWF  x64
232E:  CALL   0876
2332:  DECFSZ 51,F
2334:  BRA    232A
2336:  MOVLW  0C
2338:  MOVWF  5E
233A:  CALL   09BC
....................          else 
233E:  BRA    2342
....................             {Flanco3 = 0;}     
2340:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
2342:  MOVF   17,W
2344:  SUBLW  05
2346:  BTFSS  FD8.2
2348:  BRA    2652
....................    lcd_gotoxy(1,1); 
234A:  MOVLW  01
234C:  MOVWF  5F
234E:  MOVWF  x60
2350:  CALL   095A
....................    printf(lcd_putc,"      Ingrese       "); 
2354:  MOVLW  AC
2356:  MOVWF  FF6
2358:  MOVLW  04
235A:  MOVWF  FF7
235C:  CALL   0A56
....................    lcd_gotoxy(1,2); 
2360:  MOVLW  01
2362:  MOVWF  5F
2364:  MOVLW  02
2366:  MOVWF  x60
2368:  CALL   095A
....................    printf(lcd_putc," Contraseña Actual  "); 
236C:  MOVLW  C2
236E:  MOVWF  FF6
2370:  MOVLW  04
2372:  MOVWF  FF7
2374:  CALL   0A56
....................    lcd_gotoxy(1,3); 
2378:  MOVLW  01
237A:  MOVWF  5F
237C:  MOVLW  03
237E:  MOVWF  x60
2380:  CALL   095A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2384:  MOVLW  D8
2386:  MOVWF  FF6
2388:  MOVLW  04
238A:  MOVWF  FF7
238C:  MOVLW  0A
238E:  MOVWF  51
2390:  CALL   0A76
2394:  MOVFF  3A,51
2398:  MOVLW  1F
239A:  MOVWF  52
239C:  CALL   0ABC
23A0:  MOVFF  3B,51
23A4:  MOVLW  1F
23A6:  MOVWF  52
23A8:  CALL   0ABC
23AC:  MOVFF  3C,51
23B0:  MOVLW  1F
23B2:  MOVWF  52
23B4:  CALL   0ABC
23B8:  MOVFF  3D,51
23BC:  MOVLW  1F
23BE:  MOVWF  52
23C0:  CALL   0ABC
23C4:  MOVLW  20
23C6:  MOVWF  5E
23C8:  CALL   09BC
23CC:  MOVLW  20
23CE:  MOVWF  5E
23D0:  CALL   09BC
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
23D4:  BSF    F96.2
23D6:  BTFSS  F84.2
23D8:  BRA    23FC
....................       {  if(Flanco == 0)  
23DA:  BTFSC  34.3
23DC:  BRA    23FA
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
23DE:  MOVLW  0B
23E0:  SUBWF  1A,W
23E2:  CLRF   03
23E4:  ADDLW  3A
23E6:  MOVWF  FE9
23E8:  MOVLW  00
23EA:  ADDWFC 03,W
23EC:  MOVWF  FEA
23EE:  INCF   FEF,F
23F0:  BSF    34.3
23F2:  MOVLW  1E
23F4:  MOVWF  x64
23F6:  CALL   0876
....................          else 
23FA:  BRA    23FE
....................             {Flanco = 0;} 
23FC:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
23FE:  BSF    F96.1
2400:  BTFSS  F84.1
2402:  BRA    2426
....................       {  if(Flanco2 == 0)  
2404:  BTFSC  34.5
2406:  BRA    2424
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2408:  MOVLW  0B
240A:  SUBWF  1A,W
240C:  CLRF   03
240E:  ADDLW  3A
2410:  MOVWF  FE9
2412:  MOVLW  00
2414:  ADDWFC 03,W
2416:  MOVWF  FEA
2418:  DECF   FEF,F
241A:  BSF    34.5
241C:  MOVLW  1E
241E:  MOVWF  x64
2420:  CALL   0876
....................          else 
2424:  BRA    2428
....................             {Flanco2 = 0;} 
2426:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime derecha 
2428:  BSF    F92.5
242A:  BTFSS  F80.5
242C:  BRA    2450
....................       {  if(Flanco1 == 0)  
242E:  BTFSC  34.4
2430:  BRA    244E
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
2432:  BSF    34.4
2434:  INCF   1A,F
2436:  MOVLW  02
2438:  MOVWF  51
243A:  MOVLW  FA
243C:  MOVWF  x64
243E:  CALL   0876
2442:  DECFSZ 51,F
2444:  BRA    243A
2446:  MOVLW  0C
2448:  MOVWF  5E
244A:  CALL   09BC
....................          else 
244E:  BRA    2452
....................             {Flanco1 = 0;}    
2450:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2452:  BSF    F96.0
2454:  BTFSS  F84.0
2456:  BRA    247A
....................       {  if(Flanco3 == 0)  
2458:  BTFSC  34.6
245A:  BRA    2478
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
245C:  BSF    34.6
245E:  DECF   1A,F
2460:  MOVLW  02
2462:  MOVWF  51
2464:  MOVLW  FA
2466:  MOVWF  x64
2468:  CALL   0876
246C:  DECFSZ 51,F
246E:  BRA    2464
2470:  MOVLW  0C
2472:  MOVWF  5E
2474:  CALL   09BC
....................          else 
2478:  BRA    247C
....................             {Flanco3 = 0;}     
247A:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
247C:  MOVLW  0B
247E:  SUBWF  1A,W
2480:  CLRF   03
2482:  ADDLW  3A
2484:  MOVWF  FE9
2486:  MOVLW  00
2488:  ADDWFC 03,W
248A:  MOVWF  FEA
248C:  BTFSC  FEF.7
248E:  BRA    2492
2490:  BRA    24A6
....................        {clave[unidad-11]=9;} 
2492:  MOVLW  0B
2494:  SUBWF  1A,W
2496:  CLRF   03
2498:  ADDLW  3A
249A:  MOVWF  FE9
249C:  MOVLW  00
249E:  ADDWFC 03,W
24A0:  MOVWF  FEA
24A2:  MOVLW  09
24A4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
24A6:  MOVLW  0B
24A8:  SUBWF  1A,W
24AA:  CLRF   03
24AC:  ADDLW  3A
24AE:  MOVWF  FE9
24B0:  MOVLW  00
24B2:  ADDWFC 03,W
24B4:  MOVWF  FEA
24B6:  BTFSC  FEF.7
24B8:  BRA    24D2
24BA:  MOVF   FEF,W
24BC:  SUBLW  09
24BE:  BC    24D2
....................        {clave[unidad-11]=0;} 
24C0:  MOVLW  0B
24C2:  SUBWF  1A,W
24C4:  CLRF   03
24C6:  ADDLW  3A
24C8:  MOVWF  FE9
24CA:  MOVLW  00
24CC:  ADDWFC 03,W
24CE:  MOVWF  FEA
24D0:  CLRF   FEF
....................        if(unidad<11) 
24D2:  BTFSC  1A.7
24D4:  BRA    24DC
24D6:  MOVF   1A,W
24D8:  SUBLW  0A
24DA:  BNC   24EC
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
24DC:  MOVLW  01
24DE:  MOVWF  17
24E0:  CLRF   36
24E2:  MOVLW  02
24E4:  MOVWF  1B
24E6:  MOVWF  1D
24E8:  MOVLW  0B
24EA:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
24EC:  MOVFF  1A,5F
24F0:  MOVLW  04
24F2:  MOVWF  x60
24F4:  CALL   095A
....................        lcd_putc(t[2]); 
24F8:  MOVFF  39,5E
24FC:  CALL   09BC
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2500:  BTFSC  1A.7
2502:  BRA    2626
2504:  MOVF   1A,W
2506:  SUBLW  0E
2508:  BTFSC  FD8.0
250A:  BRA    2626
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
250C:  MOVF   3E,W
250E:  SUBWF  3A,W
2510:  BNZ   25AC
2512:  MOVF   3F,W
2514:  SUBWF  3B,W
2516:  BNZ   25AC
2518:  MOVF   40,W
251A:  SUBWF  3C,W
251C:  BNZ   25AC
251E:  MOVF   41,W
2520:  SUBWF  3D,W
2522:  BNZ   25AC
....................             {lcd_gotoxy(1,1); 
2524:  MOVLW  01
2526:  MOVWF  5F
2528:  MOVWF  x60
252A:  CALL   095A
....................             printf(lcd_putc,"                    "); 
252E:  MOVLW  EE
2530:  MOVWF  FF6
2532:  MOVLW  04
2534:  MOVWF  FF7
2536:  CALL   0A56
....................             lcd_gotoxy(1,2); 
253A:  MOVLW  01
253C:  MOVWF  5F
253E:  MOVLW  02
2540:  MOVWF  x60
2542:  CALL   095A
....................             printf(lcd_putc,"     Contraseña     "); 
2546:  MOVLW  04
2548:  MOVWF  FF6
254A:  MOVLW  05
254C:  MOVWF  FF7
254E:  CALL   0A56
....................             lcd_gotoxy(1,3); 
2552:  MOVLW  01
2554:  MOVWF  5F
2556:  MOVLW  03
2558:  MOVWF  x60
255A:  CALL   095A
....................             printf(lcd_putc,"      Correcta      "); 
255E:  MOVLW  1A
2560:  MOVWF  FF6
2562:  MOVLW  05
2564:  MOVWF  FF7
2566:  CALL   0A56
....................             lcd_gotoxy(1,4); 
256A:  MOVLW  01
256C:  MOVWF  5F
256E:  MOVLW  04
2570:  MOVWF  x60
2572:  CALL   095A
....................             printf(lcd_putc,"                    "); 
2576:  MOVLW  30
2578:  MOVWF  FF6
257A:  MOVLW  05
257C:  MOVWF  FF7
257E:  CALL   0A56
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
2582:  MOVLW  02
2584:  MOVWF  51
2586:  MOVLW  FA
2588:  MOVWF  x64
258A:  CALL   0876
258E:  DECFSZ 51,F
2590:  BRA    2586
2592:  MOVLW  33
2594:  MOVWF  17
2596:  MOVLW  0B
2598:  MOVWF  1A
259A:  MOVLW  0C
259C:  MOVWF  5E
259E:  CALL   09BC
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
25A2:  CLRF   3A
25A4:  CLRF   3B
25A6:  CLRF   3C
25A8:  CLRF   3D
....................          else 
25AA:  BRA    2626
....................          {lcd_gotoxy(1,1); 
25AC:  MOVLW  01
25AE:  MOVWF  5F
25B0:  MOVWF  x60
25B2:  CALL   095A
....................             printf(lcd_putc,"                    "); 
25B6:  MOVLW  46
25B8:  MOVWF  FF6
25BA:  MOVLW  05
25BC:  MOVWF  FF7
25BE:  CALL   0A56
....................             lcd_gotoxy(1,2); 
25C2:  MOVLW  01
25C4:  MOVWF  5F
25C6:  MOVLW  02
25C8:  MOVWF  x60
25CA:  CALL   095A
....................             printf(lcd_putc,"     Contraseña     "); 
25CE:  MOVLW  5C
25D0:  MOVWF  FF6
25D2:  MOVLW  05
25D4:  MOVWF  FF7
25D6:  CALL   0A56
....................             lcd_gotoxy(1,3); 
25DA:  MOVLW  01
25DC:  MOVWF  5F
25DE:  MOVLW  03
25E0:  MOVWF  x60
25E2:  CALL   095A
....................             printf(lcd_putc,"     Incorrecta     "); 
25E6:  MOVLW  72
25E8:  MOVWF  FF6
25EA:  MOVLW  05
25EC:  MOVWF  FF7
25EE:  CALL   0A56
....................             lcd_gotoxy(1,4); 
25F2:  MOVLW  01
25F4:  MOVWF  5F
25F6:  MOVLW  04
25F8:  MOVWF  x60
25FA:  CALL   095A
....................             printf(lcd_putc,"                    "); 
25FE:  MOVLW  88
2600:  MOVWF  FF6
2602:  MOVLW  05
2604:  MOVWF  FF7
2606:  CALL   0A56
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
260A:  MOVLW  02
260C:  MOVWF  51
260E:  MOVLW  FA
2610:  MOVWF  x64
2612:  CALL   0876
2616:  DECFSZ 51,F
2618:  BRA    260E
261A:  MOVLW  0B
261C:  MOVWF  1A
261E:  MOVLW  0C
2620:  MOVWF  5E
2622:  CALL   09BC
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2626:  BTFSC  1A.7
2628:  BRA    2652
262A:  MOVF   1A,W
262C:  SUBLW  0B
262E:  BC    2652
2630:  BTFSC  1A.7
2632:  BRA    263A
2634:  MOVF   1A,W
2636:  SUBLW  0D
2638:  BNC   2652
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
263A:  MOVLW  01
263C:  SUBWF  1A,W
263E:  MOVWF  51
2640:  MOVWF  5F
2642:  MOVLW  04
2644:  MOVWF  x60
2646:  CALL   095A
....................             lcd_putc(t[1]); 
264A:  MOVFF  38,5E
264E:  CALL   09BC
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2652:  MOVF   17,W
2654:  SUBLW  33
2656:  BTFSS  FD8.2
2658:  BRA    2978
....................    lcd_gotoxy(1,1); 
265A:  MOVLW  01
265C:  MOVWF  5F
265E:  MOVWF  x60
2660:  CALL   095A
....................    printf(lcd_putc,"     Ingrese        "); 
2664:  MOVLW  9E
2666:  MOVWF  FF6
2668:  MOVLW  05
266A:  MOVWF  FF7
266C:  CALL   0A56
....................    lcd_gotoxy(1,2); 
2670:  MOVLW  01
2672:  MOVWF  5F
2674:  MOVLW  02
2676:  MOVWF  x60
2678:  CALL   095A
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
267C:  MOVLW  B4
267E:  MOVWF  FF6
2680:  MOVLW  05
2682:  MOVWF  FF7
2684:  CALL   0A56
....................    lcd_gotoxy(1,3); 
2688:  MOVLW  01
268A:  MOVWF  5F
268C:  MOVLW  03
268E:  MOVWF  x60
2690:  CALL   095A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2694:  MOVLW  CA
2696:  MOVWF  FF6
2698:  MOVLW  05
269A:  MOVWF  FF7
269C:  MOVLW  0A
269E:  MOVWF  51
26A0:  CALL   0A76
26A4:  MOVFF  3A,51
26A8:  MOVLW  1F
26AA:  MOVWF  52
26AC:  CALL   0ABC
26B0:  MOVFF  3B,51
26B4:  MOVLW  1F
26B6:  MOVWF  52
26B8:  CALL   0ABC
26BC:  MOVFF  3C,51
26C0:  MOVLW  1F
26C2:  MOVWF  52
26C4:  CALL   0ABC
26C8:  MOVFF  3D,51
26CC:  MOVLW  1F
26CE:  MOVWF  52
26D0:  CALL   0ABC
26D4:  MOVLW  20
26D6:  MOVWF  5E
26D8:  CALL   09BC
26DC:  MOVLW  20
26DE:  MOVWF  5E
26E0:  CALL   09BC
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
26E4:  BSF    F96.2
26E6:  BTFSS  F84.2
26E8:  BRA    270C
....................       {  if(Flanco == 0)  
26EA:  BTFSC  34.3
26EC:  BRA    270A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
26EE:  MOVLW  0B
26F0:  SUBWF  1A,W
26F2:  CLRF   03
26F4:  ADDLW  3A
26F6:  MOVWF  FE9
26F8:  MOVLW  00
26FA:  ADDWFC 03,W
26FC:  MOVWF  FEA
26FE:  INCF   FEF,F
2700:  BSF    34.3
2702:  MOVLW  1E
2704:  MOVWF  x64
2706:  CALL   0876
....................          else 
270A:  BRA    270E
....................             {Flanco = 0;} 
270C:  BCF    34.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
270E:  BSF    F96.1
2710:  BTFSS  F84.1
2712:  BRA    2736
....................       {  if(Flanco2 == 0)  
2714:  BTFSC  34.5
2716:  BRA    2734
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2718:  MOVLW  0B
271A:  SUBWF  1A,W
271C:  CLRF   03
271E:  ADDLW  3A
2720:  MOVWF  FE9
2722:  MOVLW  00
2724:  ADDWFC 03,W
2726:  MOVWF  FEA
2728:  DECF   FEF,F
272A:  BSF    34.5
272C:  MOVLW  1E
272E:  MOVWF  x64
2730:  CALL   0876
....................          else 
2734:  BRA    2738
....................             {Flanco2 = 0;} 
2736:  BCF    34.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2738:  BSF    F92.5
273A:  BTFSS  F80.5
273C:  BRA    2758
....................       {  if(Flanco1 == 0)  
273E:  BTFSC  34.4
2740:  BRA    2756
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2742:  BSF    34.4
2744:  INCF   1A,F
2746:  MOVLW  1E
2748:  MOVWF  x64
274A:  CALL   0876
274E:  MOVLW  0C
2750:  MOVWF  5E
2752:  CALL   09BC
....................          else 
2756:  BRA    275A
....................             {Flanco1 = 0;}    
2758:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
275A:  BSF    F96.0
275C:  BTFSS  F84.0
275E:  BRA    277A
....................       {  if(Flanco3 == 0)  
2760:  BTFSC  34.6
2762:  BRA    2778
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2764:  BSF    34.6
2766:  DECF   1A,F
2768:  MOVLW  1E
276A:  MOVWF  x64
276C:  CALL   0876
2770:  MOVLW  0C
2772:  MOVWF  5E
2774:  CALL   09BC
....................          else 
2778:  BRA    277C
....................             {Flanco3 = 0;}     
277A:  BCF    34.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
277C:  MOVLW  0B
277E:  SUBWF  1A,W
2780:  CLRF   03
2782:  ADDLW  3A
2784:  MOVWF  FE9
2786:  MOVLW  00
2788:  ADDWFC 03,W
278A:  MOVWF  FEA
278C:  BTFSC  FEF.7
278E:  BRA    2792
2790:  BRA    27A6
....................        {clave[unidad-11]=9;} 
2792:  MOVLW  0B
2794:  SUBWF  1A,W
2796:  CLRF   03
2798:  ADDLW  3A
279A:  MOVWF  FE9
279C:  MOVLW  00
279E:  ADDWFC 03,W
27A0:  MOVWF  FEA
27A2:  MOVLW  09
27A4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
27A6:  MOVLW  0B
27A8:  SUBWF  1A,W
27AA:  CLRF   03
27AC:  ADDLW  3A
27AE:  MOVWF  FE9
27B0:  MOVLW  00
27B2:  ADDWFC 03,W
27B4:  MOVWF  FEA
27B6:  BTFSC  FEF.7
27B8:  BRA    27D2
27BA:  MOVF   FEF,W
27BC:  SUBLW  09
27BE:  BC    27D2
....................        {clave[unidad-11]=0;} 
27C0:  MOVLW  0B
27C2:  SUBWF  1A,W
27C4:  CLRF   03
27C6:  ADDLW  3A
27C8:  MOVWF  FE9
27CA:  MOVLW  00
27CC:  ADDWFC 03,W
27CE:  MOVWF  FEA
27D0:  CLRF   FEF
....................        if(unidad<11) 
27D2:  BTFSC  1A.7
27D4:  BRA    27DC
27D6:  MOVF   1A,W
27D8:  SUBLW  0A
27DA:  BNC   27E4
....................        {Menu=5;unidad=11;} 
27DC:  MOVLW  05
27DE:  MOVWF  17
27E0:  MOVLW  0B
27E2:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
27E4:  MOVFF  1A,5F
27E8:  MOVLW  04
27EA:  MOVWF  x60
27EC:  CALL   095A
....................        lcd_putc(t[2]); 
27F0:  MOVFF  39,5E
27F4:  CALL   09BC
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
27F8:  BTFSC  1A.7
27FA:  BRA    294C
27FC:  MOVF   1A,W
27FE:  SUBLW  0E
2800:  BTFSC  FD8.0
2802:  BRA    294C
....................        { 
....................             lcd_gotoxy(1,1); 
2804:  MOVLW  01
2806:  MOVWF  5F
2808:  MOVWF  x60
280A:  CALL   095A
....................             printf(lcd_putc,"                    "); 
280E:  MOVLW  E0
2810:  MOVWF  FF6
2812:  MOVLW  05
2814:  MOVWF  FF7
2816:  CALL   0A56
....................             lcd_gotoxy(1,2); 
281A:  MOVLW  01
281C:  MOVWF  5F
281E:  MOVLW  02
2820:  MOVWF  x60
2822:  CALL   095A
....................             printf(lcd_putc,"     Contraseña     "); 
2826:  MOVLW  F6
2828:  MOVWF  FF6
282A:  MOVLW  05
282C:  MOVWF  FF7
282E:  CALL   0A56
....................             lcd_gotoxy(1,3); 
2832:  MOVLW  01
2834:  MOVWF  5F
2836:  MOVLW  03
2838:  MOVWF  x60
283A:  CALL   095A
....................             printf(lcd_putc,"     Almacenada     "); 
283E:  MOVLW  0C
2840:  MOVWF  FF6
2842:  MOVLW  06
2844:  MOVWF  FF7
2846:  CALL   0A56
....................             lcd_gotoxy(1,4); 
284A:  MOVLW  01
284C:  MOVWF  5F
284E:  MOVLW  04
2850:  MOVWF  x60
2852:  CALL   095A
....................             printf(lcd_putc,"                    "); 
2856:  MOVLW  22
2858:  MOVWF  FF6
285A:  MOVLW  06
285C:  MOVWF  FF7
285E:  CALL   0A56
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2862:  CLRF   FA9
2864:  MOVFF  3A,FA8
2868:  BCF    FA6.6
286A:  BCF    FA6.7
286C:  BSF    FA6.2
286E:  MOVF   FF2,W
2870:  MOVWF  00
2872:  BCF    FF2.7
2874:  MOVLB  F
2876:  MOVLW  55
2878:  MOVWF  FA7
287A:  MOVLW  AA
287C:  MOVWF  FA7
287E:  BSF    FA6.1
2880:  BTFSC  FA6.1
2882:  BRA    2880
2884:  BCF    FA6.2
2886:  MOVF   00,W
2888:  IORWF  FF2,F
288A:  MOVLW  14
288C:  MOVLB  0
288E:  MOVWF  x64
2890:  CALL   0876
2894:  MOVLW  01
2896:  MOVWF  FA9
2898:  MOVFF  3B,FA8
289C:  BCF    FA6.6
289E:  BCF    FA6.7
28A0:  BSF    FA6.2
28A2:  MOVF   FF2,W
28A4:  MOVWF  00
28A6:  BCF    FF2.7
28A8:  MOVLB  F
28AA:  MOVLW  55
28AC:  MOVWF  FA7
28AE:  MOVLW  AA
28B0:  MOVWF  FA7
28B2:  BSF    FA6.1
28B4:  BTFSC  FA6.1
28B6:  BRA    28B4
28B8:  BCF    FA6.2
28BA:  MOVF   00,W
28BC:  IORWF  FF2,F
28BE:  MOVLW  14
28C0:  MOVLB  0
28C2:  MOVWF  x64
28C4:  CALL   0876
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
28C8:  MOVLW  02
28CA:  MOVWF  FA9
28CC:  MOVFF  3C,FA8
28D0:  BCF    FA6.6
28D2:  BCF    FA6.7
28D4:  BSF    FA6.2
28D6:  MOVF   FF2,W
28D8:  MOVWF  00
28DA:  BCF    FF2.7
28DC:  MOVLB  F
28DE:  MOVLW  55
28E0:  MOVWF  FA7
28E2:  MOVLW  AA
28E4:  MOVWF  FA7
28E6:  BSF    FA6.1
28E8:  BTFSC  FA6.1
28EA:  BRA    28E8
28EC:  BCF    FA6.2
28EE:  MOVF   00,W
28F0:  IORWF  FF2,F
28F2:  MOVLW  14
28F4:  MOVLB  0
28F6:  MOVWF  x64
28F8:  CALL   0876
28FC:  MOVLW  03
28FE:  MOVWF  FA9
2900:  MOVFF  3D,FA8
2904:  BCF    FA6.6
2906:  BCF    FA6.7
2908:  BSF    FA6.2
290A:  MOVF   FF2,W
290C:  MOVWF  00
290E:  BCF    FF2.7
2910:  MOVLB  F
2912:  MOVLW  55
2914:  MOVWF  FA7
2916:  MOVLW  AA
2918:  MOVWF  FA7
291A:  BSF    FA6.1
291C:  BTFSC  FA6.1
291E:  BRA    291C
2920:  BCF    FA6.2
2922:  MOVF   00,W
2924:  IORWF  FF2,F
2926:  MOVLW  14
2928:  MOVLB  0
292A:  MOVWF  x64
292C:  CALL   0876
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2930:  MOVLW  02
2932:  MOVWF  51
2934:  MOVLW  FA
2936:  MOVWF  x64
2938:  CALL   0876
293C:  DECFSZ 51,F
293E:  BRA    2934
2940:  MOVLW  01
2942:  MOVWF  17
2944:  CLRF   36
2946:  MOVLW  02
2948:  MOVWF  1B
294A:  MOVWF  1D
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
294C:  BTFSC  1A.7
294E:  BRA    2978
2950:  MOVF   1A,W
2952:  SUBLW  0B
2954:  BC    2978
2956:  BTFSC  1A.7
2958:  BRA    2960
295A:  MOVF   1A,W
295C:  SUBLW  0D
295E:  BNC   2978
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2960:  MOVLW  01
2962:  SUBWF  1A,W
2964:  MOVWF  51
2966:  MOVWF  5F
2968:  MOVLW  04
296A:  MOVWF  x60
296C:  CALL   095A
....................             lcd_putc(t[1]); 
2970:  MOVFF  38,5E
2974:  CALL   09BC
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6)// Menu de Tiempo de Purga 
2978:  MOVF   17,W
297A:  SUBLW  06
297C:  BTFSS  FD8.2
297E:  BRA    2BBE
....................    { 
....................       lcd_gotoxy(1,1); 
2980:  MOVLW  01
2982:  MOVWF  5F
2984:  MOVWF  x60
2986:  CALL   095A
....................       printf(lcd_putc,"     Tiempo  de      "); 
298A:  MOVLW  38
298C:  MOVWF  FF6
298E:  MOVLW  06
2990:  MOVWF  FF7
2992:  CALL   0A56
....................       lcd_gotoxy(1,2); 
2996:  MOVLW  01
2998:  MOVWF  5F
299A:  MOVLW  02
299C:  MOVWF  x60
299E:  CALL   095A
....................       printf(lcd_putc,"       Purga         "); 
29A2:  MOVLW  4E
29A4:  MOVWF  FF6
29A6:  MOVLW  06
29A8:  MOVWF  FF7
29AA:  CALL   0A56
....................       lcd_gotoxy(6,3); 
29AE:  MOVLW  06
29B0:  MOVWF  5F
29B2:  MOVLW  03
29B4:  MOVWF  x60
29B6:  CALL   095A
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
29BA:  MOVFF  23,51
29BE:  MOVLW  01
29C0:  MOVWF  52
29C2:  CALL   0C3C
29C6:  MOVLW  3A
29C8:  MOVWF  5E
29CA:  CALL   09BC
29CE:  MOVFF  2F,51
29D2:  MOVLW  01
29D4:  MOVWF  52
29D6:  CALL   0C3C
29DA:  MOVLW  6D
29DC:  MOVWF  FF6
29DE:  MOVLW  06
29E0:  MOVWF  FF7
29E2:  MOVLW  08
29E4:  MOVWF  51
29E6:  CALL   0A76
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
29EA:  MOVLW  06
29EC:  ADDWF  21,W
29EE:  MOVWF  51
29F0:  MOVWF  5F
29F2:  MOVLW  04
29F4:  MOVWF  x60
29F6:  CALL   095A
....................       lcd_putc(t[2]); 
29FA:  MOVFF  39,5E
29FE:  CALL   09BC
....................        
....................       if(unidad2<1) 
2A02:  BTFSC  21.7
2A04:  BRA    2A0C
2A06:  MOVF   21,W
2A08:  SUBLW  00
2A0A:  BNC   2A10
....................          unidad2=1; 
2A0C:  MOVLW  01
2A0E:  MOVWF  21
....................       if(unidad2>3) 
2A10:  BTFSC  21.7
2A12:  BRA    2A1E
2A14:  MOVF   21,W
2A16:  SUBLW  03
2A18:  BC    2A1E
....................          unidad2=3;    
2A1A:  MOVLW  03
2A1C:  MOVWF  21
....................        
....................       if(UP) 
2A1E:  BSF    F96.2
2A20:  BTFSS  F84.2
2A22:  BRA    2A6A
....................       { 
....................          if(unidad2==1) 
2A24:  DECFSZ 21,W
2A26:  BRA    2A46
....................          { 
....................             purga_minutos_pro++; 
2A28:  INCF   23,F
....................             if(purga_minutos_pro>59) 
2A2A:  BTFSC  23.7
2A2C:  BRA    2A36
2A2E:  MOVF   23,W
2A30:  SUBLW  3B
2A32:  BC    2A36
....................                purga_minutos_pro=0; 
2A34:  CLRF   23
....................                 
....................             delay_ms(300); 
2A36:  MOVLW  02
2A38:  MOVWF  51
2A3A:  MOVLW  96
2A3C:  MOVWF  x64
2A3E:  CALL   0876
2A42:  DECFSZ 51,F
2A44:  BRA    2A3A
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2A46:  MOVF   21,W
2A48:  SUBLW  03
2A4A:  BNZ   2A6A
....................          { 
....................             purga_segundos_pro++; 
2A4C:  INCF   2F,F
....................             if(purga_segundos_pro>59) 
2A4E:  BTFSC  2F.7
2A50:  BRA    2A5A
2A52:  MOVF   2F,W
2A54:  SUBLW  3B
2A56:  BC    2A5A
....................                purga_segundos_pro=0; 
2A58:  CLRF   2F
....................                 
....................             delay_ms(300); 
2A5A:  MOVLW  02
2A5C:  MOVWF  51
2A5E:  MOVLW  96
2A60:  MOVWF  x64
2A62:  CALL   0876
2A66:  DECFSZ 51,F
2A68:  BRA    2A5E
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2A6A:  BSF    F96.1
2A6C:  BTFSS  F84.1
2A6E:  BRA    2AB2
....................       { 
....................          if(unidad2==1) 
2A70:  DECFSZ 21,W
2A72:  BRA    2A90
....................          { 
....................             purga_minutos_pro--; 
2A74:  DECF   23,F
....................             if(purga_minutos_pro<0) 
2A76:  BTFSC  23.7
2A78:  BRA    2A7C
2A7A:  BRA    2A80
....................                purga_minutos_pro=59; 
2A7C:  MOVLW  3B
2A7E:  MOVWF  23
....................                 
....................             delay_ms(300); 
2A80:  MOVLW  02
2A82:  MOVWF  51
2A84:  MOVLW  96
2A86:  MOVWF  x64
2A88:  CALL   0876
2A8C:  DECFSZ 51,F
2A8E:  BRA    2A84
....................          } 
....................           
....................          if(unidad2==3) 
2A90:  MOVF   21,W
2A92:  SUBLW  03
2A94:  BNZ   2AB2
....................          { 
....................             purga_segundos_pro--; 
2A96:  DECF   2F,F
....................             if(purga_segundos_pro<0) 
2A98:  BTFSC  2F.7
2A9A:  BRA    2A9E
2A9C:  BRA    2AA2
....................                purga_segundos_pro=59; 
2A9E:  MOVLW  3B
2AA0:  MOVWF  2F
....................                 
....................             delay_ms(300); 
2AA2:  MOVLW  02
2AA4:  MOVWF  51
2AA6:  MOVLW  96
2AA8:  MOVWF  x64
2AAA:  CALL   0876
2AAE:  DECFSZ 51,F
2AB0:  BRA    2AA6
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2AB2:  BSF    F92.5
2AB4:  BTFSS  F80.5
2AB6:  BRA    2AEA
....................       { 
....................          if(unidad2==1) 
2AB8:  DECFSZ 21,W
2ABA:  BRA    2AC2
....................          { 
....................             unidad2=3; 
2ABC:  MOVLW  03
2ABE:  MOVWF  21
....................          } 
....................          else 
2AC0:  BRA    2AD2
....................          { 
....................             if(unidad2==3) 
2AC2:  MOVF   21,W
2AC4:  SUBLW  03
2AC6:  BNZ   2ACE
....................             { 
....................                unidad2=1; 
2AC8:  MOVLW  01
2ACA:  MOVWF  21
....................             } 
....................             else 
2ACC:  BRA    2AD2
....................             { 
....................                unidad2=3; 
2ACE:  MOVLW  03
2AD0:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
2AD2:  MOVLW  02
2AD4:  MOVWF  51
2AD6:  MOVLW  FA
2AD8:  MOVWF  x64
2ADA:  CALL   0876
2ADE:  DECFSZ 51,F
2AE0:  BRA    2AD6
....................          printf(lcd_putc,"\f"); 
2AE2:  MOVLW  0C
2AE4:  MOVWF  5E
2AE6:  CALL   09BC
....................       } 
....................        
....................       if(LEFT) 
2AEA:  BSF    F96.0
2AEC:  BTFSS  F84.0
2AEE:  BRA    2BBE
....................       { 
....................          delay_ms(200); 
2AF0:  MOVLW  C8
2AF2:  MOVWF  x64
2AF4:  CALL   0876
....................          printf(lcd_putc,"\f"); 
2AF8:  MOVLW  0C
2AFA:  MOVWF  5E
2AFC:  CALL   09BC
....................          lcd_gotoxy(1,2); 
2B00:  MOVLW  01
2B02:  MOVWF  5F
2B04:  MOVLW  02
2B06:  MOVWF  x60
2B08:  CALL   095A
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2B0C:  MOVLW  76
2B0E:  MOVWF  FF6
2B10:  MOVLW  06
2B12:  MOVWF  FF7
2B14:  CALL   0A56
....................          lcd_gotoxy(1,3); 
2B18:  MOVLW  01
2B1A:  MOVWF  5F
2B1C:  MOVLW  03
2B1E:  MOVWF  x60
2B20:  CALL   095A
....................          printf(lcd_putc,"  Correctamente  "); 
2B24:  MOVLW  88
2B26:  MOVWF  FF6
2B28:  MOVLW  06
2B2A:  MOVWF  FF7
2B2C:  CALL   0A56
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
2B30:  MOVLW  14
2B32:  MOVWF  FA9
2B34:  MOVFF  23,FA8
2B38:  BCF    FA6.6
2B3A:  BCF    FA6.7
2B3C:  BSF    FA6.2
2B3E:  MOVF   FF2,W
2B40:  MOVWF  00
2B42:  BCF    FF2.7
2B44:  MOVLB  F
2B46:  MOVLW  55
2B48:  MOVWF  FA7
2B4A:  MOVLW  AA
2B4C:  MOVWF  FA7
2B4E:  BSF    FA6.1
2B50:  BTFSC  FA6.1
2B52:  BRA    2B50
2B54:  BCF    FA6.2
2B56:  MOVF   00,W
2B58:  IORWF  FF2,F
2B5A:  MOVLW  15
2B5C:  MOVWF  FA9
2B5E:  MOVFF  2F,FA8
2B62:  BCF    FA6.6
2B64:  BCF    FA6.7
2B66:  BSF    FA6.2
2B68:  MOVF   FF2,W
2B6A:  MOVWF  00
2B6C:  BCF    FF2.7
2B6E:  MOVLW  55
2B70:  MOVWF  FA7
2B72:  MOVLW  AA
2B74:  MOVWF  FA7
2B76:  BSF    FA6.1
2B78:  BTFSC  FA6.1
2B7A:  BRA    2B78
2B7C:  BCF    FA6.2
2B7E:  MOVF   00,W
2B80:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
2B82:  MOVFF  23,22
2B86:  MOVFF  2F,2E
....................          delay_ms(700); 
2B8A:  MOVLW  04
2B8C:  MOVWF  51
2B8E:  MOVLW  AF
2B90:  MOVLB  0
2B92:  MOVWF  x64
2B94:  CALL   0876
2B98:  DECFSZ 51,F
2B9A:  BRA    2B9E
2B9C:  BRA    2BA2
2B9E:  MOVLB  F
2BA0:  BRA    2B8E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2BA2:  MOVLW  1E
2BA4:  MOVWF  x64
2BA6:  CALL   0876
2BAA:  MOVLW  01
2BAC:  MOVWF  17
2BAE:  CLRF   36
2BB0:  MOVLW  02
2BB2:  MOVWF  1B
2BB4:  MOVWF  1D
2BB6:  MOVLW  0C
2BB8:  MOVWF  5E
2BBA:  CALL   09BC
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de Tiempo de Post-Purga 
2BBE:  MOVF   17,W
2BC0:  SUBLW  07
2BC2:  BTFSS  FD8.2
2BC4:  BRA    2DFE
....................    { 
....................       lcd_gotoxy(1,1); 
2BC6:  MOVLW  01
2BC8:  MOVWF  5F
2BCA:  MOVWF  x60
2BCC:  CALL   095A
....................       printf(lcd_putc,"     Tiempo  de      "); 
2BD0:  MOVLW  9A
2BD2:  MOVWF  FF6
2BD4:  MOVLW  06
2BD6:  MOVWF  FF7
2BD8:  CALL   0A56
....................       lcd_gotoxy(1,2); 
2BDC:  MOVLW  01
2BDE:  MOVWF  5F
2BE0:  MOVLW  02
2BE2:  MOVWF  x60
2BE4:  CALL   095A
....................       printf(lcd_putc,"     Post-Purga      "); 
2BE8:  MOVLW  B0
2BEA:  MOVWF  FF6
2BEC:  MOVLW  06
2BEE:  MOVWF  FF7
2BF0:  CALL   0A56
....................       lcd_gotoxy(6,3); 
2BF4:  MOVLW  06
2BF6:  MOVWF  5F
2BF8:  MOVLW  03
2BFA:  MOVWF  x60
2BFC:  CALL   095A
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
2C00:  MOVFF  33,51
2C04:  MOVLW  01
2C06:  MOVWF  52
2C08:  CALL   0C3C
2C0C:  MOVLW  3A
2C0E:  MOVWF  5E
2C10:  CALL   09BC
2C14:  MOVFF  31,51
2C18:  MOVLW  01
2C1A:  MOVWF  52
2C1C:  CALL   0C3C
2C20:  MOVLW  CF
2C22:  MOVWF  FF6
2C24:  MOVLW  06
2C26:  MOVWF  FF7
2C28:  MOVLW  08
2C2A:  MOVWF  51
2C2C:  CALL   0A76
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2C30:  MOVLW  06
2C32:  ADDWF  21,W
2C34:  MOVWF  51
2C36:  MOVWF  5F
2C38:  MOVLW  04
2C3A:  MOVWF  x60
2C3C:  CALL   095A
....................       lcd_putc(t[2]); 
2C40:  MOVFF  39,5E
2C44:  CALL   09BC
....................       if(unidad2<1) 
2C48:  BTFSC  21.7
2C4A:  BRA    2C52
2C4C:  MOVF   21,W
2C4E:  SUBLW  00
2C50:  BNC   2C56
....................          unidad2=1; 
2C52:  MOVLW  01
2C54:  MOVWF  21
....................       if(unidad2>3) 
2C56:  BTFSC  21.7
2C58:  BRA    2C64
2C5A:  MOVF   21,W
2C5C:  SUBLW  03
2C5E:  BC    2C64
....................          unidad2=3;    
2C60:  MOVLW  03
2C62:  MOVWF  21
....................        
....................       if(UP) 
2C64:  BSF    F96.2
2C66:  BTFSS  F84.2
2C68:  BRA    2CB0
....................       { 
....................          if(unidad2==1) 
2C6A:  DECFSZ 21,W
2C6C:  BRA    2C8C
....................          { 
....................             ppurga_minutos_pro++; 
2C6E:  INCF   33,F
....................             if(ppurga_minutos_pro>59) 
2C70:  BTFSC  33.7
2C72:  BRA    2C7C
2C74:  MOVF   33,W
2C76:  SUBLW  3B
2C78:  BC    2C7C
....................                ppurga_minutos_pro=0; 
2C7A:  CLRF   33
....................                 
....................             delay_ms(300); 
2C7C:  MOVLW  02
2C7E:  MOVWF  51
2C80:  MOVLW  96
2C82:  MOVWF  x64
2C84:  CALL   0876
2C88:  DECFSZ 51,F
2C8A:  BRA    2C80
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2C8C:  MOVF   21,W
2C8E:  SUBLW  03
2C90:  BNZ   2CB0
....................          { 
....................             ppurga_segundos_pro++; 
2C92:  INCF   31,F
....................             if(ppurga_segundos_pro>59) 
2C94:  BTFSC  31.7
2C96:  BRA    2CA0
2C98:  MOVF   31,W
2C9A:  SUBLW  3B
2C9C:  BC    2CA0
....................                ppurga_segundos_pro=0; 
2C9E:  CLRF   31
....................                 
....................             delay_ms(300); 
2CA0:  MOVLW  02
2CA2:  MOVWF  51
2CA4:  MOVLW  96
2CA6:  MOVWF  x64
2CA8:  CALL   0876
2CAC:  DECFSZ 51,F
2CAE:  BRA    2CA4
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2CB0:  BSF    F96.1
2CB2:  BTFSS  F84.1
2CB4:  BRA    2CF8
....................       { 
....................          if(unidad2==1) 
2CB6:  DECFSZ 21,W
2CB8:  BRA    2CD6
....................          { 
....................             ppurga_minutos_pro--; 
2CBA:  DECF   33,F
....................             if(ppurga_minutos_pro<0) 
2CBC:  BTFSC  33.7
2CBE:  BRA    2CC2
2CC0:  BRA    2CC6
....................                ppurga_minutos_pro=59; 
2CC2:  MOVLW  3B
2CC4:  MOVWF  33
....................                 
....................             delay_ms(300); 
2CC6:  MOVLW  02
2CC8:  MOVWF  51
2CCA:  MOVLW  96
2CCC:  MOVWF  x64
2CCE:  CALL   0876
2CD2:  DECFSZ 51,F
2CD4:  BRA    2CCA
....................          } 
....................           
....................          if(unidad2==3) 
2CD6:  MOVF   21,W
2CD8:  SUBLW  03
2CDA:  BNZ   2CF8
....................          { 
....................             ppurga_segundos_pro--; 
2CDC:  DECF   31,F
....................             if(ppurga_segundos_pro<0) 
2CDE:  BTFSC  31.7
2CE0:  BRA    2CE4
2CE2:  BRA    2CE8
....................                ppurga_segundos_pro=59; 
2CE4:  MOVLW  3B
2CE6:  MOVWF  31
....................                 
....................             delay_ms(300); 
2CE8:  MOVLW  02
2CEA:  MOVWF  51
2CEC:  MOVLW  96
2CEE:  MOVWF  x64
2CF0:  CALL   0876
2CF4:  DECFSZ 51,F
2CF6:  BRA    2CEC
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2CF8:  BSF    F92.5
2CFA:  BTFSS  F80.5
2CFC:  BRA    2D2A
....................       { 
....................          if(unidad2==1) 
2CFE:  DECFSZ 21,W
2D00:  BRA    2D08
....................          { 
....................             unidad2=3; 
2D02:  MOVLW  03
2D04:  MOVWF  21
....................          } 
....................          else 
2D06:  BRA    2D12
....................          { 
....................             if(unidad2==3) 
2D08:  MOVF   21,W
2D0A:  SUBLW  03
2D0C:  BNZ   2D12
....................             { 
....................                unidad2=1; 
2D0E:  MOVLW  01
2D10:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
2D12:  MOVLW  02
2D14:  MOVWF  51
2D16:  MOVLW  FA
2D18:  MOVWF  x64
2D1A:  CALL   0876
2D1E:  DECFSZ 51,F
2D20:  BRA    2D16
....................          printf(lcd_putc,"\f"); 
2D22:  MOVLW  0C
2D24:  MOVWF  5E
2D26:  CALL   09BC
....................       } 
....................        
....................       if(LEFT) 
2D2A:  BSF    F96.0
2D2C:  BTFSS  F84.0
2D2E:  BRA    2DFE
....................       { 
....................          delay_ms(200); 
2D30:  MOVLW  C8
2D32:  MOVWF  x64
2D34:  CALL   0876
....................          printf(lcd_putc,"\f"); 
2D38:  MOVLW  0C
2D3A:  MOVWF  5E
2D3C:  CALL   09BC
....................          lcd_gotoxy(1,2); 
2D40:  MOVLW  01
2D42:  MOVWF  5F
2D44:  MOVLW  02
2D46:  MOVWF  x60
2D48:  CALL   095A
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2D4C:  MOVLW  D8
2D4E:  MOVWF  FF6
2D50:  MOVLW  06
2D52:  MOVWF  FF7
2D54:  CALL   0A56
....................          lcd_gotoxy(1,3); 
2D58:  MOVLW  01
2D5A:  MOVWF  5F
2D5C:  MOVLW  03
2D5E:  MOVWF  x60
2D60:  CALL   095A
....................          printf(lcd_putc,"  Correctamente  "); 
2D64:  MOVLW  EA
2D66:  MOVWF  FF6
2D68:  MOVLW  06
2D6A:  MOVWF  FF7
2D6C:  CALL   0A56
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
2D70:  MOVLW  16
2D72:  MOVWF  FA9
2D74:  MOVFF  33,FA8
2D78:  BCF    FA6.6
2D7A:  BCF    FA6.7
2D7C:  BSF    FA6.2
2D7E:  MOVF   FF2,W
2D80:  MOVWF  00
2D82:  BCF    FF2.7
2D84:  MOVLB  F
2D86:  MOVLW  55
2D88:  MOVWF  FA7
2D8A:  MOVLW  AA
2D8C:  MOVWF  FA7
2D8E:  BSF    FA6.1
2D90:  BTFSC  FA6.1
2D92:  BRA    2D90
2D94:  BCF    FA6.2
2D96:  MOVF   00,W
2D98:  IORWF  FF2,F
2D9A:  MOVLW  17
2D9C:  MOVWF  FA9
2D9E:  MOVFF  31,FA8
2DA2:  BCF    FA6.6
2DA4:  BCF    FA6.7
2DA6:  BSF    FA6.2
2DA8:  MOVF   FF2,W
2DAA:  MOVWF  00
2DAC:  BCF    FF2.7
2DAE:  MOVLW  55
2DB0:  MOVWF  FA7
2DB2:  MOVLW  AA
2DB4:  MOVWF  FA7
2DB6:  BSF    FA6.1
2DB8:  BTFSC  FA6.1
2DBA:  BRA    2DB8
2DBC:  BCF    FA6.2
2DBE:  MOVF   00,W
2DC0:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
2DC2:  MOVFF  33,32
2DC6:  MOVFF  31,30
....................          delay_ms(700); 
2DCA:  MOVLW  04
2DCC:  MOVWF  51
2DCE:  MOVLW  AF
2DD0:  MOVLB  0
2DD2:  MOVWF  x64
2DD4:  CALL   0876
2DD8:  DECFSZ 51,F
2DDA:  BRA    2DDE
2DDC:  BRA    2DE2
2DDE:  MOVLB  F
2DE0:  BRA    2DCE
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2DE2:  MOVLW  1E
2DE4:  MOVWF  x64
2DE6:  CALL   0876
2DEA:  MOVLW  01
2DEC:  MOVWF  17
2DEE:  CLRF   36
2DF0:  MOVLW  02
2DF2:  MOVWF  1B
2DF4:  MOVWF  1D
2DF6:  MOVLW  0C
2DF8:  MOVWF  5E
2DFA:  CALL   09BC
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
2DFE:  MOVF   17,W
2E00:  SUBLW  14
2E02:  BTFSS  FD8.2
2E04:  BRA    3026
....................    { 
....................       if(Lectura2==1) 
2E06:  BTFSS  35.6
2E08:  BRA    2E6A
....................       { 
....................       lcd_gotoxy(1,1);                      
2E0A:  MOVLW  01
2E0C:  MOVWF  5F
2E0E:  MOVWF  x60
2E10:  CALL   095A
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
2E14:  MOVLW  FC
2E16:  MOVWF  FF6
2E18:  MOVLW  06
2E1A:  MOVWF  FF7
2E1C:  CALL   0A56
....................       lcd_gotoxy(1,2); 
2E20:  MOVLW  01
2E22:  MOVWF  5F
2E24:  MOVLW  02
2E26:  MOVWF  x60
2E28:  CALL   095A
....................       //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................       printf(lcd_putc,"Ext= ---"); 
2E2C:  MOVLW  06
2E2E:  MOVWF  FF6
2E30:  MOVLW  07
2E32:  MOVWF  FF7
2E34:  CALL   0A56
....................       lcd_gotoxy(1,3); 
2E38:  MOVLW  01
2E3A:  MOVWF  5F
2E3C:  MOVLW  03
2E3E:  MOVWF  x60
2E40:  CALL   095A
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
2E44:  MOVLW  10
2E46:  MOVWF  FF6
2E48:  MOVLW  07
2E4A:  MOVWF  FF7
2E4C:  CALL   0A56
....................       lcd_gotoxy(11,2); 
2E50:  MOVLW  0B
2E52:  MOVWF  5F
2E54:  MOVLW  02
2E56:  MOVWF  x60
2E58:  CALL   095A
....................       printf(lcd_putc,"Flujo=--- ");   
2E5C:  MOVLW  20
2E5E:  MOVWF  FF6
2E60:  MOVLW  07
2E62:  MOVWF  FF7
2E64:  CALL   0A56
....................  
....................       Lectura2=0; 
2E68:  BCF    35.6
....................       } 
....................        
....................       if(flag_filtro==1) 
2E6A:  BTFSS  35.1
2E6C:  BRA    2ED8
....................       { 
....................          if(horas>=setpoint) 
2E6E:  CLRF   53
2E70:  MOVFF  2C,52
2E74:  BTFSC  52.7
2E76:  DECF   53,F
2E78:  CALL   12EA
2E7C:  MOVFF  45,58
2E80:  MOVFF  44,57
2E84:  MOVFF  43,56
2E88:  MOVFF  42,55
2E8C:  MOVFF  03,5C
2E90:  MOVFF  02,5B
2E94:  MOVFF  01,5A
2E98:  MOVFF  00,59
2E9C:  CALL   0FD0
2EA0:  BC    2EA4
2EA2:  BNZ   2EBE
....................          { 
....................             lcd_gotoxy(10,1);                      
2EA4:  MOVLW  0A
2EA6:  MOVWF  5F
2EA8:  MOVLW  01
2EAA:  MOVWF  x60
2EAC:  CALL   095A
....................             printf(lcd_putc,"Filtro:CAM"); 
2EB0:  MOVLW  2C
2EB2:  MOVWF  FF6
2EB4:  MOVLW  07
2EB6:  MOVWF  FF7
2EB8:  CALL   0A56
....................          } 
....................          else 
2EBC:  BRA    2ED6
....................          { 
....................             lcd_gotoxy(10,1);                      
2EBE:  MOVLW  0A
2EC0:  MOVWF  5F
2EC2:  MOVLW  01
2EC4:  MOVWF  x60
2EC6:  CALL   095A
....................             printf(lcd_putc,"Filtro:OK "); 
2ECA:  MOVLW  38
2ECC:  MOVWF  FF6
2ECE:  MOVLW  07
2ED0:  MOVWF  FF7
2ED2:  CALL   0A56
....................          } 
....................       } 
....................       else 
2ED6:  BRA    2EF0
....................       { 
....................          lcd_gotoxy(10,1);                      
2ED8:  MOVLW  0A
2EDA:  MOVWF  5F
2EDC:  MOVLW  01
2EDE:  MOVWF  x60
2EE0:  CALL   095A
....................          printf(lcd_putc,"Filtro:---"); 
2EE4:  MOVLW  44
2EE6:  MOVWF  FF6
2EE8:  MOVLW  07
2EEA:  MOVWF  FF7
2EEC:  CALL   0A56
....................       } 
....................           
....................             
....................       if(estadofl==1) 
2EF0:  BTFSS  34.0
2EF2:  BRA    2F12
....................       { 
....................          Luz_Blanca_on; 
2EF4:  BSF    F8A.4
2EF6:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
2EF8:  MOVLW  01
2EFA:  MOVWF  5F
2EFC:  MOVLW  04
2EFE:  MOVWF  x60
2F00:  CALL   095A
....................          printf(lcd_putc,"Luz:ON "); 
2F04:  MOVLW  50
2F06:  MOVWF  FF6
2F08:  MOVLW  07
2F0A:  MOVWF  FF7
2F0C:  CALL   0A56
....................       } 
....................       else 
2F10:  BRA    2F2E
....................       { 
....................          Luz_Blanca_off; 
2F12:  BCF    F8A.4
2F14:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
2F16:  MOVLW  01
2F18:  MOVWF  5F
2F1A:  MOVLW  04
2F1C:  MOVWF  x60
2F1E:  CALL   095A
....................          printf(lcd_putc,"Luz:OFF "); 
2F22:  MOVLW  58
2F24:  MOVWF  FF6
2F26:  MOVLW  07
2F28:  MOVWF  FF7
2F2A:  CALL   0A56
....................       } 
....................        
....................       if(estadomv==1) 
2F2E:  BTFSS  34.1
2F30:  BRA    2F4C
....................       { 
....................          lcd_gotoxy(10,4); 
2F32:  MOVLW  0A
2F34:  MOVWF  5F
2F36:  MOVLW  04
2F38:  MOVWF  x60
2F3A:  CALL   095A
....................          printf(lcd_putc,"Motor:ON "); 
2F3E:  MOVLW  62
2F40:  MOVWF  FF6
2F42:  MOVLW  07
2F44:  MOVWF  FF7
2F46:  CALL   0A56
....................       } 
....................       else 
2F4A:  BRA    2F6C
....................       { 
....................          if(iniciodamper==1) 
2F4C:  BTFSS  4A.0
2F4E:  BRA    2F54
....................          { 
....................             Motor_off;      
2F50:  BCF    F8A.5
2F52:  BCF    F93.5
....................          } 
....................          lcd_gotoxy(10,4); 
2F54:  MOVLW  0A
2F56:  MOVWF  5F
2F58:  MOVLW  04
2F5A:  MOVWF  x60
2F5C:  CALL   095A
....................          printf(lcd_putc,"Motor:OFF ");  
2F60:  MOVLW  6C
2F62:  MOVWF  FF6
2F64:  MOVLW  07
2F66:  MOVWF  FF7
2F68:  CALL   0A56
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
2F6C:  BSF    F96.1
2F6E:  BTFSS  F84.1
2F70:  BRA    2F84
....................       {  if(Flanco == 0)  
2F72:  BTFSC  34.3
2F74:  BRA    2F82
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
2F76:  BSF    34.3
2F78:  MOVLW  C8
2F7A:  MOVWF  x64
2F7C:  CALL   0876
2F80:  BTG    34.0
....................          else 
2F82:  BRA    2F86
....................             {Flanco = 0;} 
2F84:  BCF    34.3
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
2F86:  BSF    F96.0
2F88:  BTFSS  F84.0
2F8A:  BRA    2FC4
....................       {   
....................          if(Flanco2 == 0) 
2F8C:  BTFSC  34.5
2F8E:  BRA    2FC2
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
2F90:  BSF    34.5
2F92:  MOVLW  C8
2F94:  MOVWF  x64
2F96:  CALL   0876
2F9A:  BTG    34.1
....................             if(estadomv==1) 
2F9C:  BTFSS  34.1
2F9E:  BRA    2FB2
....................             { 
....................                Motor_on; 
2FA0:  BSF    F8A.5
2FA2:  BCF    F93.5
....................                delay_ms(150); 
2FA4:  MOVLW  96
2FA6:  MOVWF  x64
2FA8:  CALL   0876
....................                lcd_init(); 
2FAC:  CALL   0902
....................             } 
....................             else 
2FB0:  BRA    2FC2
....................             { 
....................                Motor_off; 
2FB2:  BCF    F8A.5
2FB4:  BCF    F93.5
....................                delay_ms(150); 
2FB6:  MOVLW  96
2FB8:  MOVWF  x64
2FBA:  CALL   0876
....................                lcd_init(); 
2FBE:  CALL   0902
....................             } 
....................          } 
....................       } 
....................       else 
2FC2:  BRA    2FC6
....................       { 
....................          Flanco2 = 0; 
2FC4:  BCF    34.5
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
2FC6:  BSF    F96.2
2FC8:  BTFSS  F84.2
2FCA:  BRA    2FFA
....................       {  if(Flanco1 == 0)  
2FCC:  BTFSC  34.4
2FCE:  BRA    2FF8
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
2FD0:  MOVLW  02
2FD2:  MOVWF  51
2FD4:  MOVLW  FA
2FD6:  MOVWF  x64
2FD8:  CALL   0876
2FDC:  DECFSZ 51,F
2FDE:  BRA    2FD4
2FE0:  MOVLW  0C
2FE2:  MOVWF  5E
2FE4:  CALL   09BC
2FE8:  MOVLW  01
2FEA:  MOVWF  17
2FEC:  CLRF   36
2FEE:  MOVLW  02
2FF0:  MOVWF  1B
2FF2:  MOVWF  1D
2FF4:  MOVLW  0B
2FF6:  MOVWF  1A
....................          else 
2FF8:  BRA    2FFC
....................             {Flanco1 = 0;}    
2FFA:  BCF    34.4
....................              
....................        if(RIGHT)// Si oprime Derecha 
2FFC:  BSF    F92.5
2FFE:  BTFSS  F80.5
3000:  BRA    3024
....................       {  if(Flanco3 == 0)  
3002:  BTFSC  34.6
3004:  BRA    3022
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
3006:  MOVLW  02
3008:  MOVWF  51
300A:  MOVLW  FA
300C:  MOVWF  x64
300E:  CALL   0876
3012:  DECFSZ 51,F
3014:  BRA    300A
3016:  MOVLW  0C
3018:  MOVWF  5E
301A:  CALL   09BC
301E:  MOVLW  28
3020:  MOVWF  17
....................          else 
3022:  BRA    3026
....................             {Flanco3 = 0;}     
3024:  BCF    34.6
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
3026:  MOVF   17,W
3028:  SUBLW  1E
302A:  BTFSS  FD8.2
302C:  BRA    31C4
....................       lcd_gotoxy(1,1); 
302E:  MOVLW  01
3030:  MOVWF  5F
3032:  MOVWF  x60
3034:  CALL   095A
....................       printf(lcd_putc,"    !Post-Purga!    "); 
3038:  MOVLW  78
303A:  MOVWF  FF6
303C:  MOVLW  07
303E:  MOVWF  FF7
3040:  CALL   0A56
....................       lcd_gotoxy(1,2); 
3044:  MOVLW  01
3046:  MOVWF  5F
3048:  MOVLW  02
304A:  MOVWF  x60
304C:  CALL   095A
....................       printf(lcd_putc,"                    "); 
3050:  MOVLW  8E
3052:  MOVWF  FF6
3054:  MOVLW  07
3056:  MOVWF  FF7
3058:  CALL   0A56
....................       lcd_gotoxy(1,3); 
305C:  MOVLW  01
305E:  MOVWF  5F
3060:  MOVLW  03
3062:  MOVWF  x60
3064:  CALL   095A
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
3068:  MOVLW  A4
306A:  MOVWF  FF6
306C:  MOVLW  07
306E:  MOVWF  FF7
3070:  MOVLW  06
3072:  MOVWF  51
3074:  CALL   0A76
3078:  MOVFF  32,51
307C:  MOVLW  01
307E:  MOVWF  52
3080:  CALL   0C3C
3084:  MOVLW  3A
3086:  MOVWF  5E
3088:  CALL   09BC
308C:  MOVFF  30,51
3090:  MOVLW  01
3092:  MOVWF  52
3094:  CALL   0C3C
3098:  MOVLW  20
309A:  MOVWF  5E
309C:  CALL   09BC
30A0:  MOVLW  20
30A2:  MOVWF  5E
30A4:  CALL   09BC
....................            
....................       if(Lectura==1) 
30A8:  BTFSS  35.5
30AA:  BRA    31C2
....................       { 
....................          Luz_Blanca_off; 
30AC:  BCF    F8A.4
30AE:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
30B0:  MOVLW  02
30B2:  MOVWF  51
30B4:  GOTO   1332
30B8:  MOVFF  00,51
30BC:  MOVFF  01,52
30C0:  MOVFF  02,53
30C4:  MOVFF  03,54
30C8:  MOVFF  03,58
30CC:  MOVFF  02,57
30D0:  MOVFF  01,56
30D4:  MOVFF  00,55
30D8:  CLRF   5C
30DA:  CLRF   5B
30DC:  MOVLW  40
30DE:  MOVWF  5A
30E0:  MOVLW  81
30E2:  MOVWF  59
30E4:  CALL   0FD0
30E8:  BNC   31C0
30EA:  MOVF   30,F
30EC:  BNZ   31C0
30EE:  MOVF   32,F
30F0:  BNZ   31C0
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
30F2:  MOVLW  46
30F4:  MOVWF  FA9
30F6:  MOVFF  2A,FA8
30FA:  BCF    FA6.6
30FC:  BCF    FA6.7
30FE:  BSF    FA6.2
3100:  MOVF   FF2,W
3102:  MOVWF  00
3104:  BCF    FF2.7
3106:  MOVLB  F
3108:  MOVLW  55
310A:  MOVWF  FA7
310C:  MOVLW  AA
310E:  MOVWF  FA7
3110:  BSF    FA6.1
3112:  BTFSC  FA6.1
3114:  BRA    3112
3116:  BCF    FA6.2
3118:  MOVF   00,W
311A:  IORWF  FF2,F
311C:  MOVLW  47
311E:  MOVWF  FA9
3120:  MOVFF  2B,FA8
3124:  BCF    FA6.6
3126:  BCF    FA6.7
3128:  BSF    FA6.2
312A:  MOVF   FF2,W
312C:  MOVWF  00
312E:  BCF    FF2.7
3130:  MOVLW  55
3132:  MOVWF  FA7
3134:  MOVLW  AA
3136:  MOVWF  FA7
3138:  BSF    FA6.1
313A:  BTFSC  FA6.1
313C:  BRA    313A
313E:  BCF    FA6.2
3140:  MOVF   00,W
3142:  IORWF  FF2,F
3144:  MOVLW  48
3146:  MOVWF  FA9
3148:  MOVFF  2C,FA8
314C:  BCF    FA6.6
314E:  BCF    FA6.7
3150:  BSF    FA6.2
3152:  MOVF   FF2,W
3154:  MOVWF  00
3156:  BCF    FF2.7
3158:  MOVLW  55
315A:  MOVWF  FA7
315C:  MOVLW  AA
315E:  MOVWF  FA7
3160:  BSF    FA6.1
3162:  BTFSC  FA6.1
3164:  BRA    3162
3166:  BCF    FA6.2
3168:  MOVF   00,W
316A:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
316C:  MOVLW  0C
316E:  MOVWF  5E
3170:  MOVLB  0
3172:  CALL   09BC
....................             lcd_gotoxy(1,2); 
3176:  MOVLW  01
3178:  MOVWF  5F
317A:  MOVLW  02
317C:  MOVWF  x60
317E:  CALL   095A
....................             printf(lcd_putc,"     Proceso      "); 
3182:  MOVLW  B6
3184:  MOVWF  FF6
3186:  MOVLW  07
3188:  MOVWF  FF7
318A:  CALL   0A56
....................             lcd_gotoxy(1,3); 
318E:  MOVLW  01
3190:  MOVWF  5F
3192:  MOVLW  03
3194:  MOVWF  x60
3196:  CALL   095A
....................             printf(lcd_putc,"    Finalizado    "); 
319A:  MOVLW  CA
319C:  MOVWF  FF6
319E:  MOVLW  07
31A0:  MOVWF  FF7
31A2:  CALL   0A56
....................             delay_ms(2000); 
31A6:  MOVLW  08
31A8:  MOVWF  51
31AA:  MOVLW  FA
31AC:  MOVWF  x64
31AE:  CALL   0876
31B2:  DECFSZ 51,F
31B4:  BRA    31AA
....................             printf(lcd_putc,"\f"); 
31B6:  MOVLW  0C
31B8:  MOVWF  5E
31BA:  CALL   09BC
....................             reset_cpu(); 
31BE:  RESET
....................          } 
....................          Lectura=0; 
31C0:  BCF    35.5
....................       } 
....................        
....................    } 
31C2:  BRA    3026
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
31C4:  MOVF   17,W
31C6:  SUBLW  28
31C8:  BNZ   328A
....................    lcd_gotoxy(1,1); 
31CA:  MOVLW  01
31CC:  MOVWF  5F
31CE:  MOVWF  x60
31D0:  CALL   095A
....................    printf(lcd_putc,"   Desea apagar     "); 
31D4:  MOVLW  DE
31D6:  MOVWF  FF6
31D8:  MOVLW  07
31DA:  MOVWF  FF7
31DC:  CALL   0A56
....................    lcd_gotoxy(1,2); 
31E0:  MOVLW  01
31E2:  MOVWF  5F
31E4:  MOVLW  02
31E6:  MOVWF  x60
31E8:  CALL   095A
....................    printf(lcd_putc,"     la cabina      "); 
31EC:  MOVLW  F4
31EE:  MOVWF  FF6
31F0:  MOVLW  07
31F2:  MOVWF  FF7
31F4:  CALL   0A56
....................    lcd_gotoxy(1,3); 
31F8:  MOVLW  01
31FA:  MOVWF  5F
31FC:  MOVLW  03
31FE:  MOVWF  x60
3200:  CALL   095A
....................    printf(lcd_putc,"   > Aceptar        "); 
3204:  MOVLW  0A
3206:  MOVWF  FF6
3208:  MOVLW  08
320A:  MOVWF  FF7
320C:  CALL   0A56
....................    lcd_gotoxy(1,4); 
3210:  MOVLW  01
3212:  MOVWF  5F
3214:  MOVLW  04
3216:  MOVWF  x60
3218:  CALL   095A
....................    printf(lcd_putc,"   < Cancelar       "); 
321C:  MOVLW  20
321E:  MOVWF  FF6
3220:  MOVLW  08
3222:  MOVWF  FF7
3224:  CALL   0A56
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
3228:  BSF    F92.5
322A:  BTFSS  F80.5
322C:  BRA    3250
....................       {  if(Flanco1 == 0)  
322E:  BTFSC  34.4
3230:  BRA    324E
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
3232:  BSF    34.4
3234:  MOVLW  1E
3236:  MOVWF  17
3238:  MOVFF  20,51
323C:  CALL   0A46
3240:  BCF    F8A.6
3242:  BCF    F93.6
3244:  MOVLW  0C
3246:  MOVWF  5E
3248:  CALL   09BC
324C:  BSF    4A.2
....................             }} 
....................          else 
324E:  BRA    3252
....................             {Flanco1 = 0;}    
3250:  BCF    34.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
3252:  BSF    F96.0
3254:  BTFSS  F84.0
3256:  BRA    3288
....................       {  if(Flanco3 == 0)  
3258:  BTFSC  34.6
325A:  BRA    3286
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
325C:  BSF    34.6
325E:  MOVLW  14
3260:  MOVWF  17
3262:  CLRF   36
3264:  MOVLW  02
3266:  MOVWF  1B
3268:  MOVWF  1D
326A:  MOVLW  0B
326C:  MOVWF  1A
326E:  MOVLW  02
3270:  MOVWF  51
3272:  MOVLW  FA
3274:  MOVWF  x64
3276:  CALL   0876
327A:  DECFSZ 51,F
327C:  BRA    3272
327E:  MOVLW  0C
3280:  MOVWF  5E
3282:  CALL   09BC
....................          else 
3286:  BRA    328A
....................             {Flanco3 = 0;}     
3288:  BCF    34.6
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
328A:  MOVF   17,W
328C:  SUBLW  32
328E:  BNZ   3342
....................    lcd_gotoxy(1,1); 
3290:  MOVLW  01
3292:  MOVWF  5F
3294:  MOVWF  x60
3296:  CALL   095A
....................    printf(lcd_putc,"      !Purga!       "); 
329A:  MOVLW  36
329C:  MOVWF  FF6
329E:  MOVLW  08
32A0:  MOVWF  FF7
32A2:  CALL   0A56
....................    lcd_gotoxy(1,2); 
32A6:  MOVLW  01
32A8:  MOVWF  5F
32AA:  MOVLW  02
32AC:  MOVWF  x60
32AE:  CALL   095A
....................    printf(lcd_putc,"                    "); 
32B2:  MOVLW  4C
32B4:  MOVWF  FF6
32B6:  MOVLW  08
32B8:  MOVWF  FF7
32BA:  CALL   0A56
....................    lcd_gotoxy(1,3); 
32BE:  MOVLW  01
32C0:  MOVWF  5F
32C2:  MOVLW  03
32C4:  MOVWF  x60
32C6:  CALL   095A
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
32CA:  MOVLW  62
32CC:  MOVWF  FF6
32CE:  MOVLW  08
32D0:  MOVWF  FF7
32D2:  MOVLW  06
32D4:  MOVWF  51
32D6:  CALL   0A76
32DA:  MOVFF  22,51
32DE:  MOVLW  01
32E0:  MOVWF  52
32E2:  CALL   0C3C
32E6:  MOVLW  3A
32E8:  MOVWF  5E
32EA:  CALL   09BC
32EE:  MOVFF  2E,51
32F2:  MOVLW  01
32F4:  MOVWF  52
32F6:  CALL   0C3C
32FA:  MOVLW  20
32FC:  MOVWF  5E
32FE:  CALL   09BC
3302:  MOVLW  20
3304:  MOVWF  5E
3306:  CALL   09BC
330A:  MOVLW  20
330C:  MOVWF  5E
330E:  CALL   09BC
....................        
....................    Motor_on; 
3312:  BSF    F8A.5
3314:  BCF    F93.5
....................    Luz_Blanca_off; 
3316:  BCF    F8A.4
3318:  BCF    F93.4
....................        
....................    if(LEFT) 
331A:  BSF    F96.0
331C:  BTFSS  F84.0
331E:  BRA    3342
....................    { 
....................       tiempo_purga=0;Motor_on;Luz_Blanca_on;estadomv=1;estadofl=1;Menu=20;delay_ms(1000); 
3320:  BCF    4A.1
3322:  BSF    F8A.5
3324:  BCF    F93.5
3326:  BSF    F8A.4
3328:  BCF    F93.4
332A:  BSF    34.1
332C:  BSF    34.0
332E:  MOVLW  14
3330:  MOVWF  17
3332:  MOVLW  04
3334:  MOVWF  51
3336:  MOVLW  FA
3338:  MOVWF  x64
333A:  CALL   0876
333E:  DECFSZ 51,F
3340:  BRA    3336
....................    } 
....................        
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=20) 
3342:  BTFSC  2D.7
3344:  BRA    3352
3346:  MOVF   2D,W
3348:  SUBLW  13
334A:  BC    3352
....................    { 
....................       lcd_init(); 
334C:  CALL   0902
....................       tiemporeset=0; 
3350:  CLRF   2D
....................    }  
....................  
....................    if(ModoSleep==1) 
3352:  BTFSS  35.3
3354:  BRA    335E
....................       {intensidadpantalla(0);sleep();} 
3356:  CLRF   51
3358:  CALL   0A46
335C:  SLEEP 
....................  
....................    if(Menu!=0 || Menu!=30) 
335E:  MOVF   17,F
3360:  BNZ   3368
3362:  MOVF   17,W
3364:  SUBLW  1E
3366:  BZ    33DE
....................    { 
....................       if(Lectura==1) 
3368:  BTFSS  35.5
336A:  BRA    33DA
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
336C:  CLRF   53
336E:  MOVFF  2C,52
3372:  BTFSC  52.7
3374:  DECF   53,F
3376:  CALL   12EA
337A:  MOVFF  45,58
337E:  MOVFF  44,57
3382:  MOVFF  43,56
3386:  MOVFF  42,55
338A:  MOVFF  03,5C
338E:  MOVFF  02,5B
3392:  MOVFF  01,5A
3396:  MOVFF  00,59
339A:  CALL   0FD0
339E:  BC    33A2
33A0:  BNZ   33CE
33A2:  MOVF   17,W
33A4:  SUBLW  14
33A6:  BNZ   33CE
....................          { 
....................              if(estadoalarma==1) 
33A8:  BTFSS  34.2
33AA:  BRA    33B2
....................              { 
....................                 Alarma_on; 
33AC:  BSF    F8A.6
33AE:  BCF    F93.6
....................              } 
....................              else 
33B0:  BRA    33B6
....................              { 
....................                 Alarma_off; 
33B2:  BCF    F8A.6
33B4:  BCF    F93.6
....................              } 
....................              estadopantalla=!estadopantalla; 
33B6:  BTG    35.2
....................              if(estadopantalla==1) 
33B8:  BTFSS  35.2
33BA:  BRA    33C6
....................              {intensidadpantalla(contraste);} 
33BC:  MOVFF  20,51
33C0:  CALL   0A46
....................              else 
33C4:  BRA    33CC
....................              {intensidadpantalla(0);} 
33C6:  CLRF   51
33C8:  CALL   0A46
....................          } 
....................          else 
33CC:  BRA    33DA
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
33CE:  MOVFF  20,51
33D2:  CALL   0A46
33D6:  BCF    F8A.6
33D8:  BCF    F93.6
....................          } 
....................       } 
....................       Lectura=0; 
33DA:  BCF    35.5
....................    }    
....................    else 
33DC:  BRA    33EA
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
33DE:  MOVFF  20,51
33E2:  CALL   0A46
33E6:  BCF    F8A.6
33E8:  BCF    F93.6
....................    } 
....................  
....................    }        
33EA:  GOTO   16FE
.................... } 
....................  
33EE:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
