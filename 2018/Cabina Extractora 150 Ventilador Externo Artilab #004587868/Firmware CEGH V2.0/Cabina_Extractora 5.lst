CCS PCH C Compiler, Version 4.104, 5967               05-feb.-19 13:32

               Filename: C:\Users\maria consuelo\Desktop\Firmware CEGH V2.0\Cabina_Extractora 5.lst

               ROM used: 13450 bytes (41%)
                         Largest free fragment is 19314
               RAM used: 84 (4%) at main() level
                         108 (5%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   17A0
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... // Lectura de sensor de vidrio. 
....................  
.................... // Esta version tiene la opcion de cargar los valores por defecto, cusndo el micro se pone a funcionar, despues de haber sido grabado 
.................... // Esto evita que los valores se reinicien con 255 en la EE 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
....................  
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
075A:  CLRF   FEA
075C:  MOVLW  63
075E:  MOVWF  FE9
0760:  MOVF   FEF,W
0762:  BZ    0780
0764:  MOVLW  0F
0766:  MOVWF  01
0768:  CLRF   00
076A:  DECFSZ 00,F
076C:  BRA    076A
076E:  DECFSZ 01,F
0770:  BRA    0768
0772:  MOVLW  8F
0774:  MOVWF  00
0776:  DECFSZ 00,F
0778:  BRA    0776
077A:  NOP   
077C:  DECFSZ FEF,F
077E:  BRA    0764
0780:  RETLW  00
....................   
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #priority TIMER1 
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) // A5 
.................... #define   DOWN          input(PIN_E0) // E0 
.................... #define   RIGHT         input(PIN_E1) // E1 
.................... #define   LEFT          input(PIN_E2) // E2 
.................... #define   VIDRIOUP      !input(PIN_A4) 
.................... #define   VIDRIODN      !input(PIN_A3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Rele_on           output_bit(PIN_B7,1) 
.................... #define   Rele_off          output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
.................... #define   O1_on             output_bit(PIN_C6,1) 
.................... #define   O1_off            output_bit(PIN_C6,0) 
.................... #define   O2_on             output_bit(PIN_C7,1) 
.................... #define   O2_off            output_bit(PIN_C7,0) 
....................  
.................... int8 v=0; 
.................... float vel=0.0; 
.................... unsigned int8 tmp; 
.................... signed int8 Menu=100, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... signed int8 Entero=0; 
.................... signed int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0,estadopantalla=0; 
.................... short pulsu=0,pulsr=0,pulsd=0,pulsl=0; 
.................... short flag_min=0,flag_hrs=0,lee_cursor=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'}; 
.................... char tecla='N'; 
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Cambio=0; 
.................... float setpoint=0.0; 
.................... short ModoSleep,inicio=0,Lectura=0,flag_iniciodamper=0,tiempo_purga=0,tiempo_ppurga=0,ver_ddram=0; 
.................... int16 tiempos=0,t_latencia=0; 
.................... unsigned int8 ult_ddram=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                       \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
089E:  MOVLW  F0
08A0:  MOVWF  F95
....................       lcd.rw = 1; 
08A2:  BSF    F83.1
....................       delay_cycles(25); 
08A4:  MOVLW  08
08A6:  MOVWF  00
08A8:  DECFSZ 00,F
08AA:  BRA    08A8
....................       lcd.enable = 1; 
08AC:  BSF    F83.2
....................       delay_cycles(25); 
08AE:  MOVLW  08
08B0:  MOVWF  00
08B2:  DECFSZ 00,F
08B4:  BRA    08B2
....................       high = lcd.data; 
08B6:  SWAPF  F83,W
08B8:  ANDLW  0F
08BA:  MOVWF  5F
....................       lcd.enable = 0; 
08BC:  BCF    F83.2
....................       delay_cycles(25); 
08BE:  MOVLW  08
08C0:  MOVWF  00
08C2:  DECFSZ 00,F
08C4:  BRA    08C2
....................       lcd.enable = 1; 
08C6:  BSF    F83.2
....................       delay_us(25); 
08C8:  MOVLW  63
08CA:  MOVWF  00
08CC:  DECFSZ 00,F
08CE:  BRA    08CC
08D0:  BRA    08D2
....................       low = lcd.data; 
08D2:  SWAPF  F83,W
08D4:  ANDLW  0F
08D6:  MOVWF  5E
....................       lcd.enable = 0; 
08D8:  BCF    F83.2
....................       set_tris_d(LCD_WRITE); 
08DA:  MOVLW  00
08DC:  MOVWF  F95
....................       return( (high<<4) | low); 
08DE:  SWAPF  5F,W
08E0:  MOVWF  00
08E2:  MOVLW  F0
08E4:  ANDWF  00,F
08E6:  MOVF   00,W
08E8:  IORWF  5E,W
08EA:  MOVWF  01
.................... } 
08EC:  GOTO   0946 (RETURN)
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0782:  SWAPF  x64,W
0784:  ANDLW  F0
0786:  MOVWF  00
0788:  MOVLW  0F
078A:  ANDWF  F83,W
078C:  IORWF  00,W
078E:  MOVWF  F83
....................       delay_cycles(25); 
0790:  MOVLW  08
0792:  MOVWF  00
0794:  DECFSZ 00,F
0796:  BRA    0794
....................       lcd.enable = 1; 
0798:  BSF    F83.2
....................       delay_us(55); 
079A:  MOVLW  DB
079C:  MOVWF  00
079E:  DECFSZ 00,F
07A0:  BRA    079E
07A2:  BRA    07A4
....................       lcd.enable = 0; 
07A4:  BCF    F83.2
.................... } 
07A6:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n )  
....................  { 
....................  
....................       lcd.rs = 0; 
07A8:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
07AA:  MOVLW  02
07AC:  MOVWF  x63
07AE:  RCALL  075A
....................       lcd.rs = address; 
07B0:  BTFSS  x61.0
07B2:  BCF    F83.0
07B4:  BTFSC  x61.0
07B6:  BSF    F83.0
....................       delay_cycles(25); 
07B8:  MOVLW  08
07BA:  MOVWF  00
07BC:  DECFSZ 00,F
07BE:  BRA    07BC
....................       lcd.rw = 0; 
07C0:  BCF    F83.1
....................       delay_cycles(25); 
07C2:  MOVLW  08
07C4:  MOVWF  00
07C6:  DECFSZ 00,F
07C8:  BRA    07C6
....................       lcd.enable = 0; 
07CA:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
07CC:  SWAPF  x62,W
07CE:  MOVWF  x63
07D0:  MOVLW  0F
07D2:  ANDWF  x63,F
07D4:  MOVFF  63,64
07D8:  RCALL  0782
....................       lcd_send_nibble(n & 0xf); 
07DA:  MOVF   x62,W
07DC:  ANDLW  0F
07DE:  MOVWF  x63
07E0:  MOVWF  x64
07E2:  RCALL  0782
....................  } 
07E4:  RETLW  00
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
07E6:  MOVLW  00
07E8:  MOVWF  F95
....................     lcd.rs = 0; 
07EA:  BCF    F83.0
....................     lcd.rw = 0; 
07EC:  BCF    F83.1
....................     lcd.enable = 0; 
07EE:  BCF    F83.2
....................     delay_ms(15); 
07F0:  MOVLW  0F
07F2:  MOVWF  x63
07F4:  RCALL  075A
....................     for(i=1;i<=3;++i) { 
07F6:  MOVLW  01
07F8:  MOVWF  50
07FA:  MOVF   50,W
07FC:  SUBLW  03
07FE:  BNC   0810
....................        lcd_send_nibble(3); 
0800:  MOVLW  03
0802:  MOVWF  x64
0804:  RCALL  0782
....................        delay_ms(5); 
0806:  MOVLW  05
0808:  MOVWF  x63
080A:  RCALL  075A
....................     } 
080C:  INCF   50,F
080E:  BRA    07FA
....................     lcd_send_nibble(2); 
0810:  MOVLW  02
0812:  MOVWF  x64
0814:  RCALL  0782
....................     for(i=0;i<=3;++i) 
0816:  CLRF   50
0818:  MOVF   50,W
081A:  SUBLW  03
081C:  BNC   083A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
081E:  CLRF   03
0820:  MOVF   50,W
0822:  MOVFF  FF2,51
0826:  BCF    FF2.7
0828:  RCALL  0096
082A:  BTFSC  51.7
082C:  BSF    FF2.7
082E:  MOVWF  51
0830:  CLRF   x61
0832:  MOVWF  x62
0834:  RCALL  07A8
0836:  INCF   50,F
0838:  BRA    0818
.................... } 
083A:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
083C:  MOVLW  01
083E:  SUBWF  5F,W
0840:  ADDLW  FC
0842:  BC    0862
0844:  ADDLW  04
0846:  GOTO   0872
....................      case 1 : address=0x80;break; 
084A:  MOVLW  80
084C:  MOVWF  x60
084E:  BRA    0862
....................      case 2 : address=0xc0;break; 
0850:  MOVLW  C0
0852:  MOVWF  x60
0854:  BRA    0862
....................      case 3 : address=0x94;break; 
0856:  MOVLW  94
0858:  MOVWF  x60
085A:  BRA    0862
....................      case 4 : address=0xd4;break; 
085C:  MOVLW  D4
085E:  MOVWF  x60
0860:  BRA    0862
....................    } 
....................    address+=x-1; 
0862:  MOVLW  01
0864:  SUBWF  5E,W
0866:  ADDWF  x60,F
....................    lcd_send_byte(0,address); 
0868:  CLRF   x61
086A:  MOVFF  60,62
086E:  RCALL  07A8
.................... } 
0870:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
08F0:  MOVF   5D,W
08F2:  SUBLW  F1
08F4:  BNZ   08FA
....................     c=238; 
08F6:  MOVLW  EE
08F8:  MOVWF  5D
....................    switch (c) { 
08FA:  MOVF   5D,W
08FC:  XORLW  0C
08FE:  BZ    090A
0900:  XORLW  06
0902:  BZ    091E
0904:  XORLW  02
0906:  BZ    092C
0908:  BRA    0936
....................      case '\f'   : lcd_send_byte(0,1); 
090A:  CLRF   x61
090C:  MOVLW  01
090E:  MOVWF  x62
0910:  RCALL  07A8
....................                    lcdline=1; 
0912:  MOVLW  01
0914:  MOVWF  4F
....................                    delay_ms(2); 
0916:  MOVLW  02
0918:  MOVWF  x63
091A:  RCALL  075A
....................                                            break; 
091C:  BRA    0942
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
091E:  INCF   4F,F
0920:  MOVLW  01
0922:  MOVWF  5E
0924:  MOVFF  4F,5F
0928:  RCALL  083C
092A:  BRA    0942
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
092C:  CLRF   x61
092E:  MOVLW  10
0930:  MOVWF  x62
0932:  RCALL  07A8
0934:  BRA    0942
....................      default     : lcd_send_byte(1,c);     break; 
0936:  MOVLW  01
0938:  MOVWF  x61
093A:  MOVFF  5D,62
093E:  RCALL  07A8
0940:  BRA    0942
....................    } 
.................... lcd.rs=0; 
0942:  BCF    F83.0
.................... ult_ddram = lcd_read_byte() & 0x7F; 
0944:  BRA    089E
0946:  MOVF   01,W
0948:  ANDLW  7F
094A:  MOVWF  4E
.................... } 
094C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... BYTE lee_DDRAM() 
....................  { 
....................   BYTE vcursor; 
....................   lcd.rs=0; 
....................   vcursor = lcd_read_byte() & 0x7F; 
....................   return(vcursor); 
....................  } 
....................          
....................  
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
.................... } 
....................  
.................... // Esta rutina hay que depurarla, pero sera despues, cuando lo haga la implementamos para ver si se escribio 
.................... // Algo raro en la pantalla por ruido y asi refrescar 
....................  
.................... /* void shw_vcursor() 
.................... { 
....................  posic=get_cursor();   // get_cursor() esta en LCD420.c 
....................  lcd_gotoxy(18,1); 
....................  printf(lcd_putc,"%3u",posic); //Imprime en hexadecimal 
....................  delay_ms(1000); 
....................  // printf(lcd_putc,"\f"); 
....................   
.................... } */ 
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0C92:  MOVF   50,F
0C94:  BNZ   0C9C
....................    { 
....................       Pantalla_off; 
0C96:  BCF    F8B.1
0C98:  BCF    F94.1
....................    } 
....................    else 
0C9A:  BRA    0CA0
....................    { 
....................       Pantalla_on; 
0C9C:  BSF    F8B.1
0C9E:  BCF    F94.1
....................    } 
.................... } 
0CA0:  RETLW  00
....................  
.................... // ************************** Rutina unica para leer las teclas ********************* 
....................  
.................... void lee_pulsad() 
....................  { 
....................    pulsu=0;pulsr=0;pulsd=0;pulsl=0;tecla='N'; 
*
0DD0:  BCF    35.3
0DD2:  BCF    35.4
0DD4:  BCF    35.5
0DD6:  BCF    35.6
0DD8:  MOVLW  4E
0DDA:  MOVWF  3B
....................     
....................    if(UP)//Si oprime hacia arriba 
0DDC:  BSF    F92.5
0DDE:  BTFSS  F80.5
0DE0:  BRA    0E06
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0DE2:  MOVLW  14
0DE4:  MOVWF  x63
0DE6:  RCALL  075A
....................       if(UP) 
0DE8:  BSF    F92.5
0DEA:  BTFSS  F80.5
0DEC:  BRA    0E04
....................       { 
....................        if(Flanco == 0) 
0DEE:  BTFSC  34.3
0DF0:  BRA    0E04
....................         { 
....................          pulsu=1;  //Bandera que indica que la tecla UP, fue pulsada validamente 
0DF2:  BSF    35.3
....................          tecla='U'; 
0DF4:  MOVLW  55
0DF6:  MOVWF  3B
....................          Flanco=1;   //Flag que indica el ultimo estado del pulsador  
0DF8:  BSF    34.3
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0DFA:  MOVLW  01
0DFC:  MOVWF  44
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0DFE:  MOVLW  1E
0E00:  MOVWF  x63
0E02:  RCALL  075A
....................         } 
....................       } 
....................      }else{ 
0E04:  BRA    0E08
....................          Flanco=0; //Se reasigna el estado del pulsador en 0 
0E06:  BCF    34.3
....................       } 
....................       
....................     if(RIGHT)//Si oprime hacia arriba 
0E08:  BSF    F96.1
0E0A:  BTFSS  F84.1
0E0C:  BRA    0E32
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0E0E:  MOVLW  14
0E10:  MOVWF  x63
0E12:  RCALL  075A
....................       if(RIGHT) 
0E14:  BSF    F96.1
0E16:  BTFSS  F84.1
0E18:  BRA    0E30
....................       { 
....................        if(Flanco1 == 0) 
0E1A:  BTFSC  34.4
0E1C:  BRA    0E30
....................         { 
....................          pulsr=1;  //Bandera que indica que la tecla RIGHT, fue pulsada validamente 
0E1E:  BSF    35.4
....................          tecla='R'; 
0E20:  MOVLW  52
0E22:  MOVWF  3B
....................          Flanco1=1;   //Flag que indica el ultimo estado del pulsador  
0E24:  BSF    34.4
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0E26:  MOVLW  01
0E28:  MOVWF  44
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0E2A:  MOVLW  1E
0E2C:  MOVWF  x63
0E2E:  RCALL  075A
....................         } 
....................       } 
....................      }else{ 
0E30:  BRA    0E34
....................          Flanco1=0; //Se reasigna el estado del pulsador en 0 
0E32:  BCF    34.4
....................       } 
....................       
....................      if(DOWN)//Si oprime hacia arriba 
0E34:  BSF    F96.0
0E36:  BTFSS  F84.0
0E38:  BRA    0E5E
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0E3A:  MOVLW  14
0E3C:  MOVWF  x63
0E3E:  RCALL  075A
....................       if(DOWN) 
0E40:  BSF    F96.0
0E42:  BTFSS  F84.0
0E44:  BRA    0E5C
....................       { 
....................        if(Flanco2 == 0) 
0E46:  BTFSC  34.5
0E48:  BRA    0E5C
....................         { 
....................          pulsd=1;  //Bandera que indica que la tecla DOWN, fue pulsada validamente 
0E4A:  BSF    35.5
....................          tecla='D'; 
0E4C:  MOVLW  44
0E4E:  MOVWF  3B
....................          Flanco2=1;   //Flag que indica el ultimo estado del pulsador  
0E50:  BSF    34.5
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0E52:  MOVLW  01
0E54:  MOVWF  44
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0E56:  MOVLW  1E
0E58:  MOVWF  x63
0E5A:  RCALL  075A
....................         } 
....................       } 
....................      }else{ 
0E5C:  BRA    0E60
....................          Flanco2=0; //Se reasigna el estado del pulsador en 0 
0E5E:  BCF    34.5
....................       } 
....................       
....................     if(LEFT)//Si oprime hacia arriba 
0E60:  BSF    F96.2
0E62:  BTFSS  F84.2
0E64:  BRA    0E8A
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0E66:  MOVLW  14
0E68:  MOVWF  x63
0E6A:  RCALL  075A
....................       if(LEFT) 
0E6C:  BSF    F96.2
0E6E:  BTFSS  F84.2
0E70:  BRA    0E88
....................       { 
....................        if(Flanco3 == 0) 
0E72:  BTFSC  34.6
0E74:  BRA    0E88
....................         { 
....................          pulsl=1;  //Bandera que indica que la tecla LEFT, fue pulsada validamente 
0E76:  BSF    35.6
....................          tecla='L'; 
0E78:  MOVLW  4C
0E7A:  MOVWF  3B
....................          Flanco3=1;   //Flag que indica el ultimo estado del pulsador  
0E7C:  BSF    34.6
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0E7E:  MOVLW  01
0E80:  MOVWF  44
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0E82:  MOVLW  1E
0E84:  MOVWF  x63
0E86:  RCALL  075A
....................         } 
....................       } 
....................      }else{ 
0E88:  BRA    0E8C
....................          Flanco3=0; //Se reasigna el estado del pulsador en 0 
0E8A:  BCF    34.6
....................       } 
....................       
....................  } 
0E8C:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4A,F
00BE:  BTFSC  FD8.2
00C0:  INCF   4B,F
....................  
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   4B,F
00C4:  BNZ   00CC
00C6:  MOVF   4A,W
00C8:  SUBLW  C7
00CA:  BC    016C
....................    { 
....................       tiempos=0;tiemporeset++; 
00CC:  CLRF   4B
00CE:  CLRF   4A
00D0:  INCF   2D,F
....................       Lectura=1; 
00D2:  BSF    36.4
....................       ver_ddram=1; 
00D4:  BSF    49.0
....................       lee_cursor=1; 
00D6:  BSF    36.1
....................        
....................       if(flag_latencia){ 
00D8:  BTFSS  34.7
00DA:  BRA    00E2
....................          t_latencia++; 
00DC:  INCF   4C,F
00DE:  BTFSC  FD8.2
00E0:  INCF   4D,F
....................       } 
....................           
....................       if(estadomv==1 && flag_filtro==1) 
00E2:  BTFSS  34.1
00E4:  BRA    010C
00E6:  BTFSS  35.1
00E8:  BRA    010C
....................       {   
....................          segundos++; 
00EA:  INCF   2A,F
....................          if(segundos>=60) 
00EC:  BTFSC  2A.7
00EE:  BRA    00FC
00F0:  MOVF   2A,W
00F2:  SUBLW  3B
00F4:  BC    00FC
....................          { 
....................             segundos=0;minutos++;flag_min=1; 
00F6:  CLRF   2A
00F8:  INCF   2B,F
00FA:  BSF    35.7
....................          } 
....................           
....................          if(minutos>=60) 
00FC:  BTFSC  2B.7
00FE:  BRA    010C
0100:  MOVF   2B,W
0102:  SUBLW  3B
0104:  BC    010C
....................          { 
....................             minutos=0;horas++;flag_hrs=1; 
0106:  CLRF   2B
0108:  INCF   2C,F
010A:  BSF    36.0
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1)   // Aqui se decrementa el tiempo de purga, cargado de la eeprom 
010C:  BTFSS  36.6
010E:  BRA    0146
....................       { 
....................          if(purga_segundos>0) 
0110:  BTFSC  2E.7
0112:  BRA    011E
0114:  MOVF   2E,W
0116:  SUBLW  00
0118:  BC    011E
....................          { 
....................           
....................             purga_segundos--; 
011A:  DECF   2E,F
....................          } 
....................          else 
011C:  BRA    0146
....................          { 
....................             if(purga_minutos>0) 
011E:  BTFSC  27.7
0120:  BRA    0130
0122:  MOVF   27,W
0124:  SUBLW  00
0126:  BC    0130
....................             { 
....................                purga_minutos--; 
0128:  DECF   27,F
....................                purga_segundos=59; 
012A:  MOVLW  3B
012C:  MOVWF  2E
....................             } 
....................             else 
012E:  BRA    0146
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20;Cambio=1; // Aqui se sale al menu20 despues de la purga 
0130:  BCF    36.6
0132:  BSF    F8A.5
0134:  BCF    F93.5
0136:  MOVLW  14
0138:  MOVWF  1C
013A:  MOVLW  01
013C:  MOVWF  44
....................                Luz_Blanca_on; 
013E:  BSF    F8A.4
0140:  BCF    F93.4
....................                estadomv=1; 
0142:  BSF    34.1
....................                estadofl=1; 
0144:  BSF    34.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
0146:  BTFSS  36.7
0148:  BRA    016C
....................       { 
....................          if(ppurga_segundos>0) 
014A:  BTFSC  30.7
014C:  BRA    0158
014E:  MOVF   30,W
0150:  SUBLW  00
0152:  BC    0158
....................          { 
....................             ppurga_segundos--; 
0154:  DECF   30,F
....................          } 
....................          else 
0156:  BRA    016C
....................          { 
....................             if(ppurga_minutos>0) 
0158:  BTFSC  32.7
015A:  BRA    016A
015C:  MOVF   32,W
015E:  SUBLW  00
0160:  BC    016A
....................             { 
....................                ppurga_minutos--; 
0162:  DECF   32,F
....................                ppurga_segundos=59; 
0164:  MOVLW  3B
0166:  MOVWF  30
....................             } 
....................             else 
0168:  BRA    016C
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
016A:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
016C:  BCF    F9E.0
016E:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0E8E:  DECFSZ 51,W
0E90:  BRA    0EC2
....................    {if(estadoalarma==0) 
0E92:  BTFSC  34.2
0E94:  BRA    0EAA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0E96:  MOVLW  02
0E98:  MOVWF  5E
0E9A:  MOVFF  52,5F
0E9E:  RCALL  083C
0EA0:  MOVLW  72
0EA2:  MOVWF  FF6
0EA4:  MOVLW  01
0EA6:  MOVWF  FF7
0EA8:  RCALL  0CA2
....................    if(estadoalarma==1) 
0EAA:  BTFSS  34.2
0EAC:  BRA    0EC2
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0EAE:  MOVLW  02
0EB0:  MOVWF  5E
0EB2:  MOVFF  52,5F
0EB6:  RCALL  083C
0EB8:  MOVLW  86
0EBA:  MOVWF  FF6
0EBC:  MOVLW  01
0EBE:  MOVWF  FF7
0EC0:  RCALL  0CA2
....................    } 
....................     
....................    if(x==2) 
0EC2:  MOVF   51,W
0EC4:  SUBLW  02
0EC6:  BNZ   0EDC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
0EC8:  MOVLW  02
0ECA:  MOVWF  5E
0ECC:  MOVFF  52,5F
0ED0:  RCALL  083C
0ED2:  MOVLW  9A
0ED4:  MOVWF  FF6
0ED6:  MOVLW  01
0ED8:  MOVWF  FF7
0EDA:  RCALL  0CA2
....................     
....................    if(x==3) 
0EDC:  MOVF   51,W
0EDE:  SUBLW  03
0EE0:  BNZ   0EF6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
0EE2:  MOVLW  02
0EE4:  MOVWF  5E
0EE6:  MOVFF  52,5F
0EEA:  RCALL  083C
0EEC:  MOVLW  AE
0EEE:  MOVWF  FF6
0EF0:  MOVLW  01
0EF2:  MOVWF  FF7
0EF4:  RCALL  0CA2
....................     
....................    //if(x==4) 
....................    //{lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
....................        
....................    if(x==4) 
0EF6:  MOVF   51,W
0EF8:  SUBLW  04
0EFA:  BNZ   0F10
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
0EFC:  MOVLW  02
0EFE:  MOVWF  5E
0F00:  MOVFF  52,5F
0F04:  RCALL  083C
0F06:  MOVLW  C2
0F08:  MOVWF  FF6
0F0A:  MOVLW  01
0F0C:  MOVWF  FF7
0F0E:  RCALL  0CA2
....................     
....................    if(x==5) 
0F10:  MOVF   51,W
0F12:  SUBLW  05
0F14:  BNZ   0F2A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
0F16:  MOVLW  02
0F18:  MOVWF  5E
0F1A:  MOVFF  52,5F
0F1E:  RCALL  083C
0F20:  MOVLW  D6
0F22:  MOVWF  FF6
0F24:  MOVLW  01
0F26:  MOVWF  FF7
0F28:  RCALL  0CA2
....................     
....................    if(x==6) 
0F2A:  MOVF   51,W
0F2C:  SUBLW  06
0F2E:  BNZ   0F44
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad del Motor  ");} 
0F30:  MOVLW  02
0F32:  MOVWF  5E
0F34:  MOVFF  52,5F
0F38:  RCALL  083C
0F3A:  MOVLW  EA
0F3C:  MOVWF  FF6
0F3E:  MOVLW  01
0F40:  MOVWF  FF7
0F42:  RCALL  0CA2
.................... } 
0F44:  RETLW  00
....................  
.................... void set_default() 
....................  { 
....................    write_eeprom(0,0);delay_ms(20);   // Contraseña 0 = 0 
*
094E:  CLRF   FA9
0950:  CLRF   FA8
0952:  BCF    FA6.6
0954:  BCF    FA6.7
0956:  BSF    FA6.2
0958:  MOVF   FF2,W
095A:  MOVWF  00
095C:  BCF    FF2.7
095E:  MOVLB  F
0960:  MOVLW  55
0962:  MOVWF  FA7
0964:  MOVLW  AA
0966:  MOVWF  FA7
0968:  BSF    FA6.1
096A:  BTFSC  FA6.1
096C:  BRA    096A
096E:  BCF    FA6.2
0970:  MOVF   00,W
0972:  IORWF  FF2,F
0974:  MOVLW  14
0976:  MOVLB  0
0978:  MOVWF  x63
097A:  RCALL  075A
....................    write_eeprom(1,0);delay_ms(20);   // Contraseña 1 = 0 
097C:  MOVLW  01
097E:  MOVWF  FA9
0980:  CLRF   FA8
0982:  BCF    FA6.6
0984:  BCF    FA6.7
0986:  BSF    FA6.2
0988:  MOVF   FF2,W
098A:  MOVWF  00
098C:  BCF    FF2.7
098E:  MOVLB  F
0990:  MOVLW  55
0992:  MOVWF  FA7
0994:  MOVLW  AA
0996:  MOVWF  FA7
0998:  BSF    FA6.1
099A:  BTFSC  FA6.1
099C:  BRA    099A
099E:  BCF    FA6.2
09A0:  MOVF   00,W
09A2:  IORWF  FF2,F
09A4:  MOVLW  14
09A6:  MOVLB  0
09A8:  MOVWF  x63
09AA:  RCALL  075A
....................    write_eeprom(2,0);delay_ms(20);   // Contraseña 2 = 0 
09AC:  MOVLW  02
09AE:  MOVWF  FA9
09B0:  CLRF   FA8
09B2:  BCF    FA6.6
09B4:  BCF    FA6.7
09B6:  BSF    FA6.2
09B8:  MOVF   FF2,W
09BA:  MOVWF  00
09BC:  BCF    FF2.7
09BE:  MOVLB  F
09C0:  MOVLW  55
09C2:  MOVWF  FA7
09C4:  MOVLW  AA
09C6:  MOVWF  FA7
09C8:  BSF    FA6.1
09CA:  BTFSC  FA6.1
09CC:  BRA    09CA
09CE:  BCF    FA6.2
09D0:  MOVF   00,W
09D2:  IORWF  FF2,F
09D4:  MOVLW  14
09D6:  MOVLB  0
09D8:  MOVWF  x63
09DA:  RCALL  075A
....................    write_eeprom(3,0);delay_ms(20);   // Contraseña 3 = 0 
09DC:  MOVLW  03
09DE:  MOVWF  FA9
09E0:  CLRF   FA8
09E2:  BCF    FA6.6
09E4:  BCF    FA6.7
09E6:  BSF    FA6.2
09E8:  MOVF   FF2,W
09EA:  MOVWF  00
09EC:  BCF    FF2.7
09EE:  MOVLB  F
09F0:  MOVLW  55
09F2:  MOVWF  FA7
09F4:  MOVLW  AA
09F6:  MOVWF  FA7
09F8:  BSF    FA6.1
09FA:  BTFSC  FA6.1
09FC:  BRA    09FA
09FE:  BCF    FA6.2
0A00:  MOVF   00,W
0A02:  IORWF  FF2,F
0A04:  MOVLW  14
0A06:  MOVLB  0
0A08:  MOVWF  x63
0A0A:  RCALL  075A
....................     
....................    write_eeprom(5,1);delay_ms(20);   // Estado de alarma = 1 
0A0C:  MOVLW  05
0A0E:  MOVWF  FA9
0A10:  MOVLW  01
0A12:  MOVWF  FA8
0A14:  BCF    FA6.6
0A16:  BCF    FA6.7
0A18:  BSF    FA6.2
0A1A:  MOVF   FF2,W
0A1C:  MOVWF  00
0A1E:  BCF    FF2.7
0A20:  MOVLB  F
0A22:  MOVLW  55
0A24:  MOVWF  FA7
0A26:  MOVLW  AA
0A28:  MOVWF  FA7
0A2A:  BSF    FA6.1
0A2C:  BTFSC  FA6.1
0A2E:  BRA    0A2C
0A30:  BCF    FA6.2
0A32:  MOVF   00,W
0A34:  IORWF  FF2,F
0A36:  MOVLW  14
0A38:  MOVLB  0
0A3A:  MOVWF  x63
0A3C:  RCALL  075A
....................     
....................    write_eeprom(20,1);delay_ms(20);  // Minutos de Tiempo de Purga = 1 
0A3E:  MOVLW  14
0A40:  MOVWF  FA9
0A42:  MOVLW  01
0A44:  MOVWF  FA8
0A46:  BCF    FA6.6
0A48:  BCF    FA6.7
0A4A:  BSF    FA6.2
0A4C:  MOVF   FF2,W
0A4E:  MOVWF  00
0A50:  BCF    FF2.7
0A52:  MOVLB  F
0A54:  MOVLW  55
0A56:  MOVWF  FA7
0A58:  MOVLW  AA
0A5A:  MOVWF  FA7
0A5C:  BSF    FA6.1
0A5E:  BTFSC  FA6.1
0A60:  BRA    0A5E
0A62:  BCF    FA6.2
0A64:  MOVF   00,W
0A66:  IORWF  FF2,F
0A68:  MOVLW  14
0A6A:  MOVLB  0
0A6C:  MOVWF  x63
0A6E:  RCALL  075A
....................    write_eeprom(21,0);delay_ms(20);  // Segundos de Tiempo de Purga = 0 
0A70:  MOVLW  15
0A72:  MOVWF  FA9
0A74:  CLRF   FA8
0A76:  BCF    FA6.6
0A78:  BCF    FA6.7
0A7A:  BSF    FA6.2
0A7C:  MOVF   FF2,W
0A7E:  MOVWF  00
0A80:  BCF    FF2.7
0A82:  MOVLB  F
0A84:  MOVLW  55
0A86:  MOVWF  FA7
0A88:  MOVLW  AA
0A8A:  MOVWF  FA7
0A8C:  BSF    FA6.1
0A8E:  BTFSC  FA6.1
0A90:  BRA    0A8E
0A92:  BCF    FA6.2
0A94:  MOVF   00,W
0A96:  IORWF  FF2,F
0A98:  MOVLW  14
0A9A:  MOVLB  0
0A9C:  MOVWF  x63
0A9E:  RCALL  075A
....................    write_eeprom(22,1);delay_ms(20);  // Minutos de Tiempo de PostPurga = 1 
0AA0:  MOVLW  16
0AA2:  MOVWF  FA9
0AA4:  MOVLW  01
0AA6:  MOVWF  FA8
0AA8:  BCF    FA6.6
0AAA:  BCF    FA6.7
0AAC:  BSF    FA6.2
0AAE:  MOVF   FF2,W
0AB0:  MOVWF  00
0AB2:  BCF    FF2.7
0AB4:  MOVLB  F
0AB6:  MOVLW  55
0AB8:  MOVWF  FA7
0ABA:  MOVLW  AA
0ABC:  MOVWF  FA7
0ABE:  BSF    FA6.1
0AC0:  BTFSC  FA6.1
0AC2:  BRA    0AC0
0AC4:  BCF    FA6.2
0AC6:  MOVF   00,W
0AC8:  IORWF  FF2,F
0ACA:  MOVLW  14
0ACC:  MOVLB  0
0ACE:  MOVWF  x63
0AD0:  RCALL  075A
....................    write_eeprom(23,0);delay_ms(20);  // Segundos de Tiempo de PostPurga = 0 
0AD2:  MOVLW  17
0AD4:  MOVWF  FA9
0AD6:  CLRF   FA8
0AD8:  BCF    FA6.6
0ADA:  BCF    FA6.7
0ADC:  BSF    FA6.2
0ADE:  MOVF   FF2,W
0AE0:  MOVWF  00
0AE2:  BCF    FF2.7
0AE4:  MOVLB  F
0AE6:  MOVLW  55
0AE8:  MOVWF  FA7
0AEA:  MOVLW  AA
0AEC:  MOVWF  FA7
0AEE:  BSF    FA6.1
0AF0:  BTFSC  FA6.1
0AF2:  BRA    0AF0
0AF4:  BCF    FA6.2
0AF6:  MOVF   00,W
0AF8:  IORWF  FF2,F
0AFA:  MOVLW  14
0AFC:  MOVLB  0
0AFE:  MOVWF  x63
0B00:  RCALL  075A
....................     
....................    write_eeprom(40,60);delay_ms(20); // Setpoint de vida del filtro = 60 
0B02:  MOVLW  28
0B04:  MOVWF  FA9
0B06:  MOVLW  3C
0B08:  MOVWF  FA8
0B0A:  BCF    FA6.6
0B0C:  BCF    FA6.7
0B0E:  BSF    FA6.2
0B10:  MOVF   FF2,W
0B12:  MOVWF  00
0B14:  BCF    FF2.7
0B16:  MOVLB  F
0B18:  MOVLW  55
0B1A:  MOVWF  FA7
0B1C:  MOVLW  AA
0B1E:  MOVWF  FA7
0B20:  BSF    FA6.1
0B22:  BTFSC  FA6.1
0B24:  BRA    0B22
0B26:  BCF    FA6.2
0B28:  MOVF   00,W
0B2A:  IORWF  FF2,F
0B2C:  MOVLW  14
0B2E:  MOVLB  0
0B30:  MOVWF  x63
0B32:  RCALL  075A
....................     
....................    write_eeprom(13,127);delay_ms(20); // Setpoint de motor = 50% 
0B34:  MOVLW  0D
0B36:  MOVWF  FA9
0B38:  MOVLW  7F
0B3A:  MOVWF  FA8
0B3C:  BCF    FA6.6
0B3E:  BCF    FA6.7
0B40:  BSF    FA6.2
0B42:  MOVF   FF2,W
0B44:  MOVWF  00
0B46:  BCF    FF2.7
0B48:  MOVLB  F
0B4A:  MOVLW  55
0B4C:  MOVWF  FA7
0B4E:  MOVLW  AA
0B50:  MOVWF  FA7
0B52:  BSF    FA6.1
0B54:  BTFSC  FA6.1
0B56:  BRA    0B54
0B58:  BCF    FA6.2
0B5A:  MOVF   00,W
0B5C:  IORWF  FF2,F
0B5E:  MOVLW  14
0B60:  MOVLB  0
0B62:  MOVWF  x63
0B64:  RCALL  075A
....................     
....................    write_eeprom(70,0);delay_ms(20);  // Segundos de uso del filtro = 0 
0B66:  MOVLW  46
0B68:  MOVWF  FA9
0B6A:  CLRF   FA8
0B6C:  BCF    FA6.6
0B6E:  BCF    FA6.7
0B70:  BSF    FA6.2
0B72:  MOVF   FF2,W
0B74:  MOVWF  00
0B76:  BCF    FF2.7
0B78:  MOVLB  F
0B7A:  MOVLW  55
0B7C:  MOVWF  FA7
0B7E:  MOVLW  AA
0B80:  MOVWF  FA7
0B82:  BSF    FA6.1
0B84:  BTFSC  FA6.1
0B86:  BRA    0B84
0B88:  BCF    FA6.2
0B8A:  MOVF   00,W
0B8C:  IORWF  FF2,F
0B8E:  MOVLW  14
0B90:  MOVLB  0
0B92:  MOVWF  x63
0B94:  RCALL  075A
....................    write_eeprom(71,0);delay_ms(20);  // Minutos de uso del filtro = 0 
0B96:  MOVLW  47
0B98:  MOVWF  FA9
0B9A:  CLRF   FA8
0B9C:  BCF    FA6.6
0B9E:  BCF    FA6.7
0BA0:  BSF    FA6.2
0BA2:  MOVF   FF2,W
0BA4:  MOVWF  00
0BA6:  BCF    FF2.7
0BA8:  MOVLB  F
0BAA:  MOVLW  55
0BAC:  MOVWF  FA7
0BAE:  MOVLW  AA
0BB0:  MOVWF  FA7
0BB2:  BSF    FA6.1
0BB4:  BTFSC  FA6.1
0BB6:  BRA    0BB4
0BB8:  BCF    FA6.2
0BBA:  MOVF   00,W
0BBC:  IORWF  FF2,F
0BBE:  MOVLW  14
0BC0:  MOVLB  0
0BC2:  MOVWF  x63
0BC4:  RCALL  075A
....................    write_eeprom(72,0);delay_ms(20);  // Horas de uso del filtro = 0 
0BC6:  MOVLW  48
0BC8:  MOVWF  FA9
0BCA:  CLRF   FA8
0BCC:  BCF    FA6.6
0BCE:  BCF    FA6.7
0BD0:  BSF    FA6.2
0BD2:  MOVF   FF2,W
0BD4:  MOVWF  00
0BD6:  BCF    FF2.7
0BD8:  MOVLB  F
0BDA:  MOVLW  55
0BDC:  MOVWF  FA7
0BDE:  MOVLW  AA
0BE0:  MOVWF  FA7
0BE2:  BSF    FA6.1
0BE4:  BTFSC  FA6.1
0BE6:  BRA    0BE4
0BE8:  BCF    FA6.2
0BEA:  MOVF   00,W
0BEC:  IORWF  FF2,F
0BEE:  MOVLW  14
0BF0:  MOVLB  0
0BF2:  MOVWF  x63
0BF4:  RCALL  075A
....................    write_eeprom(73,1);delay_ms(20);  // Flag de uso del filtro = 1 
0BF6:  MOVLW  49
0BF8:  MOVWF  FA9
0BFA:  MOVLW  01
0BFC:  MOVWF  FA8
0BFE:  BCF    FA6.6
0C00:  BCF    FA6.7
0C02:  BSF    FA6.2
0C04:  MOVF   FF2,W
0C06:  MOVWF  00
0C08:  BCF    FF2.7
0C0A:  MOVLB  F
0C0C:  MOVLW  55
0C0E:  MOVWF  FA7
0C10:  MOVLW  AA
0C12:  MOVWF  FA7
0C14:  BSF    FA6.1
0C16:  BTFSC  FA6.1
0C18:  BRA    0C16
0C1A:  BCF    FA6.2
0C1C:  MOVF   00,W
0C1E:  IORWF  FF2,F
0C20:  MOVLW  14
0C22:  MOVLB  0
0C24:  MOVWF  x63
0C26:  RCALL  075A
....................  
....................    write_eeprom(80,0x27);delay_ms(20); //Testigo de quer ya se grabaron los valores = 0x27 
0C28:  MOVLW  50
0C2A:  MOVWF  FA9
0C2C:  MOVLW  27
0C2E:  MOVWF  FA8
0C30:  BCF    FA6.6
0C32:  BCF    FA6.7
0C34:  BSF    FA6.2
0C36:  MOVF   FF2,W
0C38:  MOVWF  00
0C3A:  BCF    FF2.7
0C3C:  MOVLB  F
0C3E:  MOVLW  55
0C40:  MOVWF  FA7
0C42:  MOVLW  AA
0C44:  MOVWF  FA7
0C46:  BSF    FA6.1
0C48:  BTFSC  FA6.1
0C4A:  BRA    0C48
0C4C:  BCF    FA6.2
0C4E:  MOVF   00,W
0C50:  IORWF  FF2,F
0C52:  MOVLW  14
0C54:  MOVLB  0
0C56:  MOVWF  x63
0C58:  RCALL  075A
....................  } 
0C5A:  RETLW  00
....................  
.................... void ajuste_vel(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1752:  MOVFF  50,FBE
.................... } 
1756:  RETLW  00
....................  
....................  
.................... void main () 
.................... { 
*
17A0:  CLRF   FF8
17A2:  BCF    FD0.7
17A4:  BSF    07.7
17A6:  CLRF   FEA
17A8:  CLRF   FE9
17AA:  CLRF   16
17AC:  CLRF   1A
17AE:  CLRF   19
17B0:  CLRF   18
17B2:  CLRF   17
17B4:  MOVLW  64
17B6:  MOVWF  1C
17B8:  MOVLW  07
17BA:  MOVWF  1D
17BC:  MOVLW  02
17BE:  MOVWF  1E
17C0:  MOVLW  0B
17C2:  MOVWF  1F
17C4:  MOVLW  02
17C6:  MOVWF  20
17C8:  MOVLW  03
17CA:  MOVWF  21
17CC:  MOVLW  02
17CE:  MOVWF  22
17D0:  MOVWF  23
17D2:  MOVLW  04
17D4:  MOVWF  24
17D6:  MOVLW  0A
17D8:  MOVWF  25
17DA:  MOVLW  01
17DC:  MOVWF  26
17DE:  CLRF   27
17E0:  CLRF   28
17E2:  CLRF   29
17E4:  CLRF   2A
17E6:  CLRF   2B
17E8:  CLRF   2C
17EA:  CLRF   2D
17EC:  CLRF   2E
17EE:  CLRF   2F
17F0:  CLRF   30
17F2:  CLRF   31
17F4:  CLRF   32
17F6:  CLRF   33
17F8:  BCF    34.0
17FA:  BCF    34.1
17FC:  BCF    34.2
17FE:  BCF    34.3
1800:  BCF    34.4
1802:  BCF    34.5
1804:  BCF    34.6
1806:  BCF    34.7
1808:  BCF    35.0
180A:  BCF    35.1
180C:  BCF    35.2
180E:  BCF    35.3
1810:  BCF    35.4
1812:  BCF    35.5
1814:  BCF    35.6
1816:  BCF    35.7
1818:  BCF    36.0
181A:  BCF    36.1
181C:  CLRF   37
181E:  MOVLW  4E
1820:  MOVWF  3B
1822:  CLRF   44
1824:  CLRF   48
1826:  CLRF   47
1828:  CLRF   46
182A:  CLRF   45
182C:  BCF    36.3
182E:  BCF    36.4
1830:  BCF    36.5
1832:  BCF    36.6
1834:  BCF    36.7
1836:  BCF    49.0
1838:  CLRF   4B
183A:  CLRF   4A
183C:  CLRF   4D
183E:  CLRF   4C
1840:  CLRF   4E
1842:  MOVF   FC1,W
1844:  ANDLW  C0
1846:  IORLW  0F
1848:  MOVWF  FC1
184A:  MOVLW  07
184C:  MOVWF  FB4
184E:  MOVLW  3E
1850:  MOVWF  38
1852:  MOVLW  20
1854:  MOVWF  39
1856:  MOVLW  5E
1858:  MOVWF  3A
185A:  CLRF   3C
185C:  CLRF   3D
185E:  CLRF   3E
1860:  CLRF   3F
1862:  CLRF   40
1864:  CLRF   41
1866:  CLRF   42
1868:  CLRF   43
....................    setup_adc_ports(AN0_TO_AN3); 
186A:  MOVF   FC1,W
186C:  ANDLW  C0
186E:  IORLW  0B
1870:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1872:  BCF    FC0.0
1874:  BSF    FC0.1
1876:  BCF    FC0.2
1878:  BSF    FC0.7
187A:  BSF    FC2.0
....................    output_d(0);  
187C:  CLRF   F95
187E:  CLRF   F8C
....................    ModoSleep=1; 
1880:  BSF    36.2
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1882:  MOVLW  85
1884:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1886:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
1888:  MOVLW  00
188A:  IORLW  05
188C:  MOVWF  FCA
188E:  MOVLW  FF
1890:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
1892:  BCF    F94.2
1894:  BCF    F8B.2
1896:  BCF    F96.6
1898:  MOVLW  0C
189A:  MOVWF  FBD
189C:  CLRF   FB7
189E:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
18A0:  MOVLW  C0
18A2:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
18A4:  CLRF   FBE
....................    lcd_init(); 
18A6:  CALL   07E6
....................    printf(lcd_putc,"\f"); 
18AA:  MOVLW  0C
18AC:  MOVWF  5D
18AE:  CALL   08F0
....................     
....................     
....................    if(read_eeprom(80)!=0x27) 
18B2:  MOVFF  FF2,50
18B6:  BCF    FF2.7
18B8:  MOVLW  50
18BA:  MOVWF  FA9
18BC:  BCF    FA6.6
18BE:  BCF    FA6.7
18C0:  BSF    FA6.0
18C2:  MOVF   FA8,W
18C4:  BTFSC  50.7
18C6:  BSF    FF2.7
18C8:  SUBLW  27
18CA:  BZ    18D0
....................    set_default(); 
18CC:  CALL   094E
....................     
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
18D0:  MOVFF  FF2,50
18D4:  BCF    FF2.7
18D6:  CLRF   FA9
18D8:  BCF    FA6.6
18DA:  BCF    FA6.7
18DC:  BSF    FA6.0
18DE:  MOVF   FA8,W
18E0:  BTFSC  50.7
18E2:  BSF    FF2.7
18E4:  MOVWF  40
18E6:  MOVLW  14
18E8:  MOVWF  x63
18EA:  CALL   075A
18EE:  MOVFF  FF2,50
18F2:  BCF    FF2.7
18F4:  MOVLW  01
18F6:  MOVWF  FA9
18F8:  BCF    FA6.6
18FA:  BCF    FA6.7
18FC:  BSF    FA6.0
18FE:  MOVF   FA8,W
1900:  BTFSC  50.7
1902:  BSF    FF2.7
1904:  MOVWF  41
1906:  MOVLW  14
1908:  MOVWF  x63
190A:  CALL   075A
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
190E:  MOVFF  FF2,50
1912:  BCF    FF2.7
1914:  MOVLW  02
1916:  MOVWF  FA9
1918:  BCF    FA6.6
191A:  BCF    FA6.7
191C:  BSF    FA6.0
191E:  MOVF   FA8,W
1920:  BTFSC  50.7
1922:  BSF    FF2.7
1924:  MOVWF  42
1926:  MOVLW  14
1928:  MOVWF  x63
192A:  CALL   075A
192E:  MOVFF  FF2,50
1932:  BCF    FF2.7
1934:  MOVLW  03
1936:  MOVWF  FA9
1938:  BCF    FA6.6
193A:  BCF    FA6.7
193C:  BSF    FA6.0
193E:  MOVF   FA8,W
1940:  BTFSC  50.7
1942:  BSF    FF2.7
1944:  MOVWF  43
1946:  MOVLW  14
1948:  MOVWF  x63
194A:  CALL   075A
....................    estadoalarma=read_eeprom(5); 
194E:  MOVFF  FF2,50
1952:  BCF    FF2.7
1954:  MOVLW  05
1956:  MOVWF  FA9
1958:  BCF    FA6.6
195A:  BCF    FA6.7
195C:  BSF    FA6.0
195E:  MOVF   FA8,W
1960:  BTFSC  50.7
1962:  BSF    FF2.7
1964:  MOVWF  01
1966:  BCF    34.2
1968:  BTFSC  01.0
196A:  BSF    34.2
....................    delay_ms(20); 
196C:  MOVLW  14
196E:  MOVWF  x63
1970:  CALL   075A
....................  
....................    purga_minutos=read_eeprom(20); 
1974:  MOVFF  FF2,50
1978:  BCF    FF2.7
197A:  MOVLW  14
197C:  MOVWF  FA9
197E:  BCF    FA6.6
1980:  BCF    FA6.7
1982:  BSF    FA6.0
1984:  MOVF   FA8,W
1986:  BTFSC  50.7
1988:  BSF    FF2.7
198A:  MOVWF  27
....................    delay_ms(20); 
198C:  MOVLW  14
198E:  MOVWF  x63
1990:  CALL   075A
....................    purga_segundos=read_eeprom(21); 
1994:  MOVFF  FF2,50
1998:  BCF    FF2.7
199A:  MOVLW  15
199C:  MOVWF  FA9
199E:  BCF    FA6.6
19A0:  BCF    FA6.7
19A2:  BSF    FA6.0
19A4:  MOVF   FA8,W
19A6:  BTFSC  50.7
19A8:  BSF    FF2.7
19AA:  MOVWF  2E
....................    delay_ms(20); 
19AC:  MOVLW  14
19AE:  MOVWF  x63
19B0:  CALL   075A
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
19B4:  MOVFF  27,28
19B8:  MOVFF  2E,2F
....................    ppurga_minutos=read_eeprom(22); 
19BC:  MOVFF  FF2,50
19C0:  BCF    FF2.7
19C2:  MOVLW  16
19C4:  MOVWF  FA9
19C6:  BCF    FA6.6
19C8:  BCF    FA6.7
19CA:  BSF    FA6.0
19CC:  MOVF   FA8,W
19CE:  BTFSC  50.7
19D0:  BSF    FF2.7
19D2:  MOVWF  32
....................    delay_ms(20); 
19D4:  MOVLW  14
19D6:  MOVWF  x63
19D8:  CALL   075A
....................    ppurga_segundos=read_eeprom(23); 
19DC:  MOVFF  FF2,50
19E0:  BCF    FF2.7
19E2:  MOVLW  17
19E4:  MOVWF  FA9
19E6:  BCF    FA6.6
19E8:  BCF    FA6.7
19EA:  BSF    FA6.0
19EC:  MOVF   FA8,W
19EE:  BTFSC  50.7
19F0:  BSF    FF2.7
19F2:  MOVWF  30
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
19F4:  MOVFF  32,33
19F8:  MOVFF  30,31
....................     
....................    tmp=read_eeprom(13); 
19FC:  MOVFF  FF2,50
1A00:  BCF    FF2.7
1A02:  MOVLW  0D
1A04:  MOVWF  FA9
1A06:  BCF    FA6.6
1A08:  BCF    FA6.7
1A0A:  BSF    FA6.0
1A0C:  MOVF   FA8,W
1A0E:  BTFSC  50.7
1A10:  BSF    FF2.7
1A12:  MOVWF  1B
....................    delay_ms(20); 
1A14:  MOVLW  14
1A16:  MOVWF  x63
1A18:  CALL   075A
....................    setpoint=read_eeprom(40);                                                                                                                                                                                                                                                
1A1C:  MOVFF  FF2,50
1A20:  BCF    FF2.7
1A22:  MOVLW  28
1A24:  MOVWF  FA9
1A26:  BCF    FA6.6
1A28:  BCF    FA6.7
1A2A:  BSF    FA6.0
1A2C:  MOVF   FA8,W
1A2E:  BTFSC  50.7
1A30:  BSF    FF2.7
1A32:  CLRF   52
1A34:  MOVWF  51
1A36:  CALL   0C5C
1A3A:  MOVFF  03,48
1A3E:  MOVFF  02,47
1A42:  MOVFF  01,46
1A46:  MOVFF  00,45
....................    delay_ms(20); 
1A4A:  MOVLW  14
1A4C:  MOVWF  x63
1A4E:  CALL   075A
....................    segundos=read_eeprom(70); 
1A52:  MOVFF  FF2,50
1A56:  BCF    FF2.7
1A58:  MOVLW  46
1A5A:  MOVWF  FA9
1A5C:  BCF    FA6.6
1A5E:  BCF    FA6.7
1A60:  BSF    FA6.0
1A62:  MOVF   FA8,W
1A64:  BTFSC  50.7
1A66:  BSF    FF2.7
1A68:  MOVWF  2A
....................    delay_ms(20); 
1A6A:  MOVLW  14
1A6C:  MOVWF  x63
1A6E:  CALL   075A
....................    minutos=read_eeprom(71); 
1A72:  MOVFF  FF2,50
1A76:  BCF    FF2.7
1A78:  MOVLW  47
1A7A:  MOVWF  FA9
1A7C:  BCF    FA6.6
1A7E:  BCF    FA6.7
1A80:  BSF    FA6.0
1A82:  MOVF   FA8,W
1A84:  BTFSC  50.7
1A86:  BSF    FF2.7
1A88:  MOVWF  2B
....................    delay_ms(20); 
1A8A:  MOVLW  14
1A8C:  MOVWF  x63
1A8E:  CALL   075A
....................    horas=read_eeprom(72); 
1A92:  MOVFF  FF2,50
1A96:  BCF    FF2.7
1A98:  MOVLW  48
1A9A:  MOVWF  FA9
1A9C:  BCF    FA6.6
1A9E:  BCF    FA6.7
1AA0:  BSF    FA6.0
1AA2:  MOVF   FA8,W
1AA4:  BTFSC  50.7
1AA6:  BSF    FF2.7
1AA8:  MOVWF  2C
....................    delay_ms(20); 
1AAA:  MOVLW  14
1AAC:  MOVWF  x63
1AAE:  CALL   075A
....................    flag_filtro=read_eeprom(73); 
1AB2:  MOVFF  FF2,50
1AB6:  BCF    FF2.7
1AB8:  MOVLW  49
1ABA:  MOVWF  FA9
1ABC:  BCF    FA6.6
1ABE:  BCF    FA6.7
1AC0:  BSF    FA6.0
1AC2:  MOVF   FA8,W
1AC4:  BTFSC  50.7
1AC6:  BSF    FF2.7
1AC8:  MOVWF  01
1ACA:  BCF    35.1
1ACC:  BTFSC  01.0
1ACE:  BSF    35.1
....................    Menu=200; 
1AD0:  MOVLW  C8
1AD2:  MOVWF  1C
....................    
....................    while(true){ 
....................     
....................    /*if(ver_ddram==1)                // Inicio de funcion que verifica si entraron ruidos a la pantalla .... 
....................        { 
....................         ver_ddram=0; 
....................         if(lee_ddram()!=ult_ddram) 
....................          { 
....................           lcd_init(); 
....................           cambio=1; 
....................          } 
....................        } */ 
....................         
....................    while(Menu==200) 
....................    {                        // Fin de funcion que verifica si entraron ruidos a la pantalla ....    
1AD4:  MOVF   1C,W
1AD6:  SUBLW  C8
1AD8:  BNZ   1BA4
....................       if(inicio==0) 
1ADA:  BTFSC  36.3
1ADC:  BRA    1BA2
....................       { 
....................          if(RIGHT) 
1ADE:  BSF    F96.1
1AE0:  BTFSS  F84.1
1AE2:  BRA    1BA2
....................          { 
....................             delay_ms(1000); 
1AE4:  MOVLW  04
1AE6:  MOVWF  50
1AE8:  MOVLW  FA
1AEA:  MOVWF  x63
1AEC:  CALL   075A
1AF0:  DECFSZ 50,F
1AF2:  BRA    1AE8
....................             if(RIGHT) 
1AF4:  BSF    F96.1
1AF6:  BTFSS  F84.1
1AF8:  BRA    1BA2
....................             { 
....................                lcd_init(); 
1AFA:  CALL   07E6
....................                intensidadpantalla(contraste); 
1AFE:  MOVFF  25,50
1B02:  CALL   0C92
....................                lcd_gotoxy(1,1); 
1B06:  MOVLW  01
1B08:  MOVWF  5E
1B0A:  MOVWF  5F
1B0C:  CALL   083C
....................                printf(lcd_putc," CABINA  EXTRACTORA "); 
1B10:  MOVLW  00
1B12:  MOVWF  FF6
1B14:  MOVLW  02
1B16:  MOVWF  FF7
1B18:  CALL   0CA2
....................                lcd_gotoxy(1,2); 
1B1C:  MOVLW  01
1B1E:  MOVWF  5E
1B20:  MOVLW  02
1B22:  MOVWF  5F
1B24:  CALL   083C
....................                printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1B28:  MOVLW  16
1B2A:  MOVWF  FF6
1B2C:  MOVLW  02
1B2E:  MOVWF  FF7
1B30:  CALL   0CA2
....................                lcd_gotoxy(1,3); 
1B34:  MOVLW  01
1B36:  MOVWF  5E
1B38:  MOVLW  03
1B3A:  MOVWF  5F
1B3C:  CALL   083C
....................                printf(lcd_putc,"    JP INGLOBAL     "); 
1B40:  MOVLW  2C
1B42:  MOVWF  FF6
1B44:  MOVLW  02
1B46:  MOVWF  FF7
1B48:  CALL   0CA2
....................                lcd_gotoxy(1,4); 
1B4C:  MOVLW  01
1B4E:  MOVWF  5E
1B50:  MOVLW  04
1B52:  MOVWF  5F
1B54:  CALL   083C
....................                printf(lcd_putc," REF: PANEL JPCEH15 "); 
1B58:  MOVLW  42
1B5A:  MOVWF  FF6
1B5C:  MOVLW  02
1B5E:  MOVWF  FF7
1B60:  CALL   0CA2
....................                delay_ms(2000); 
1B64:  MOVLW  08
1B66:  MOVWF  50
1B68:  MOVLW  FA
1B6A:  MOVWF  x63
1B6C:  CALL   075A
1B70:  DECFSZ 50,F
1B72:  BRA    1B68
....................                printf(lcd_putc,"\f"); 
1B74:  MOVLW  0C
1B76:  MOVWF  5D
1B78:  CALL   08F0
....................                inicio=1;               // Condicion Inicial de (inicio) 
1B7C:  BSF    36.3
....................                Menu=50;                 // Condicion Inicial de Menu 
1B7E:  MOVLW  32
1B80:  MOVWF  1C
....................                ModoSleep=0; 
1B82:  BCF    36.2
....................                delay_ms(500); 
1B84:  MOVLW  02
1B86:  MOVWF  50
1B88:  MOVLW  FA
1B8A:  MOVWF  x63
1B8C:  CALL   075A
1B90:  DECFSZ 50,F
1B92:  BRA    1B88
....................                Cambio=1; 
1B94:  MOVLW  01
1B96:  MOVWF  44
....................                tiempo_purga=1;Lectura=1; 
1B98:  BSF    36.6
1B9A:  BSF    36.4
....................                t_latencia=0;flag_iniciodamper=1; 
1B9C:  CLRF   4D
1B9E:  CLRF   4C
1BA0:  BSF    36.5
....................              } 
....................          } 
....................       }  
....................    } 
1BA2:  BRA    1AD4
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1BA4:  MOVF   1C,F
1BA6:  BTFSS  FD8.2
1BA8:  BRA    1EEE
....................     
....................    flag_latencia=1;//set_pwm1_duty(0); 
1BAA:  BSF    34.7
....................       if(t_latencia>15)  // Define que se acabo el tiempo de espera y borra la pantalla y hace un reset por firmware 
1BAC:  MOVF   4D,F
1BAE:  BNZ   1BB6
1BB0:  MOVF   4C,W
1BB2:  SUBLW  0F
1BB4:  BC    1BC0
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1BB6:  MOVLW  0C
1BB8:  MOVWF  5D
1BBA:  CALL   08F0
1BBE:  RESET
....................          } 
....................     
....................    
....................    if(Cambio == 1) 
1BC0:  DECFSZ 44,W
1BC2:  BRA    1C64
....................    { 
....................       lcd_gotoxy(1,1); 
1BC4:  MOVLW  01
1BC6:  MOVWF  5E
1BC8:  MOVWF  5F
1BCA:  CALL   083C
....................       printf(lcd_putc,"     Ingrese        "); 
1BCE:  MOVLW  58
1BD0:  MOVWF  FF6
1BD2:  MOVLW  02
1BD4:  MOVWF  FF7
1BD6:  CALL   0CA2
....................       lcd_gotoxy(1,2); 
1BDA:  MOVLW  01
1BDC:  MOVWF  5E
1BDE:  MOVLW  02
1BE0:  MOVWF  5F
1BE2:  CALL   083C
....................       printf(lcd_putc,"    Contraseña      "); 
1BE6:  MOVLW  6E
1BE8:  MOVWF  FF6
1BEA:  MOVLW  02
1BEC:  MOVWF  FF7
1BEE:  CALL   0CA2
....................       lcd_gotoxy(1,3); 
1BF2:  MOVLW  01
1BF4:  MOVWF  5E
1BF6:  MOVLW  03
1BF8:  MOVWF  5F
1BFA:  CALL   083C
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1BFE:  MOVLW  84
1C00:  MOVWF  FF6
1C02:  MOVLW  02
1C04:  MOVWF  FF7
1C06:  MOVLW  0A
1C08:  MOVWF  50
1C0A:  CALL   0CC2
1C0E:  MOVFF  3C,50
1C12:  MOVLW  1F
1C14:  MOVWF  51
1C16:  CALL   0D08
1C1A:  MOVFF  3D,50
1C1E:  MOVLW  1F
1C20:  MOVWF  51
1C22:  CALL   0D08
1C26:  MOVFF  3E,50
1C2A:  MOVLW  1F
1C2C:  MOVWF  51
1C2E:  CALL   0D08
1C32:  MOVFF  3F,50
1C36:  MOVLW  1F
1C38:  MOVWF  51
1C3A:  CALL   0D08
1C3E:  MOVLW  20
1C40:  MOVWF  5D
1C42:  CALL   08F0
1C46:  MOVLW  20
1C48:  MOVWF  5D
1C4A:  CALL   08F0
....................       lcd_gotoxy(unidad,4); // Para mostrar cursor. 
1C4E:  MOVFF  1F,5E
1C52:  MOVLW  04
1C54:  MOVWF  5F
1C56:  CALL   083C
....................      lcd_putc(t[2]); 
1C5A:  MOVFF  3A,5D
1C5E:  CALL   08F0
....................      //printf(lcd_putc,"%3u",ult_ddram); 
....................      //delay_ms(10); 
....................      //printf(lcd_putc,"%3u",lee_ddram());  
....................      Cambio=0; 
1C62:  CLRF   44
....................    } 
....................    lee_pulsad(); 
1C64:  CALL   0DD0
....................     
....................       Switch(tecla) 
....................       { 
1C68:  MOVF   3B,W
1C6A:  XORLW  55
1C6C:  BZ    1C7C
1C6E:  XORLW  11
1C70:  BZ    1C94
1C72:  XORLW  16
1C74:  BZ    1CAC
1C76:  XORLW  1E
1C78:  BZ    1CC4
1C7A:  BRA    1CDC
....................     
....................        Case 'U':       //Si se oprimio el pulsador de subir 
....................        {clave[unidad-11]++;t_latencia=0;} 
1C7C:  MOVLW  0B
1C7E:  SUBWF  1F,W
1C80:  CLRF   03
1C82:  ADDLW  3C
1C84:  MOVWF  FE9
1C86:  MOVLW  00
1C88:  ADDWFC 03,W
1C8A:  MOVWF  FEA
1C8C:  INCF   FEF,F
1C8E:  CLRF   4D
1C90:  CLRF   4C
....................        break; 
1C92:  BRA    1CDC
....................         
....................        Case 'D':       //Si se oprimio el pulsador de bajar 
....................        {clave[unidad-11]--;t_latencia=0;} 
1C94:  MOVLW  0B
1C96:  SUBWF  1F,W
1C98:  CLRF   03
1C9A:  ADDLW  3C
1C9C:  MOVWF  FE9
1C9E:  MOVLW  00
1CA0:  ADDWFC 03,W
1CA2:  MOVWF  FEA
1CA4:  DECF   FEF,F
1CA6:  CLRF   4D
1CA8:  CLRF   4C
....................        break; 
1CAA:  BRA    1CDC
....................         
....................        Case 'R':       //Si se oprimio el pulsador de derecha 
....................        {unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;} 
1CAC:  INCF   1F,F
1CAE:  MOVLW  1E
1CB0:  MOVWF  x63
1CB2:  CALL   075A
1CB6:  MOVLW  0C
1CB8:  MOVWF  5D
1CBA:  CALL   08F0
1CBE:  CLRF   4D
1CC0:  CLRF   4C
....................        break; 
1CC2:  BRA    1CDC
....................         
....................        Case 'L':       //Si se oprimio el pulsador de izquierda 
....................        {unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;} 
1CC4:  DECF   1F,F
1CC6:  MOVLW  1E
1CC8:  MOVWF  x63
1CCA:  CALL   075A
1CCE:  MOVLW  0C
1CD0:  MOVWF  5D
1CD2:  CALL   08F0
1CD6:  CLRF   4D
1CD8:  CLRF   4C
....................        break; 
1CDA:  BRA    1CDC
....................            
....................       }       
....................              
....................        if(Cambio==1) 
1CDC:  DECFSZ 44,W
1CDE:  BRA    1EEE
....................        { 
....................         if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1CE0:  MOVLW  0B
1CE2:  SUBWF  1F,W
1CE4:  CLRF   03
1CE6:  ADDLW  3C
1CE8:  MOVWF  FE9
1CEA:  MOVLW  00
1CEC:  ADDWFC 03,W
1CEE:  MOVWF  FEA
1CF0:  BTFSC  FEF.7
1CF2:  BRA    1CF6
1CF4:  BRA    1D0A
....................         {clave[unidad-11]=9;} 
1CF6:  MOVLW  0B
1CF8:  SUBWF  1F,W
1CFA:  CLRF   03
1CFC:  ADDLW  3C
1CFE:  MOVWF  FE9
1D00:  MOVLW  00
1D02:  ADDWFC 03,W
1D04:  MOVWF  FEA
1D06:  MOVLW  09
1D08:  MOVWF  FEF
....................         if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1D0A:  MOVLW  0B
1D0C:  SUBWF  1F,W
1D0E:  CLRF   03
1D10:  ADDLW  3C
1D12:  MOVWF  FE9
1D14:  MOVLW  00
1D16:  ADDWFC 03,W
1D18:  MOVWF  FEA
1D1A:  BTFSC  FEF.7
1D1C:  BRA    1D36
1D1E:  MOVF   FEF,W
1D20:  SUBLW  09
1D22:  BC    1D36
....................         {clave[unidad-11]=0;} 
1D24:  MOVLW  0B
1D26:  SUBWF  1F,W
1D28:  CLRF   03
1D2A:  ADDLW  3C
1D2C:  MOVWF  FE9
1D2E:  MOVLW  00
1D30:  ADDWFC 03,W
1D32:  MOVWF  FEA
1D34:  CLRF   FEF
....................         if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1D36:  BTFSC  1F.7
1D38:  BRA    1D40
1D3A:  MOVF   1F,W
1D3C:  SUBLW  0A
1D3E:  BNC   1D44
....................         {unidad=11;} 
1D40:  MOVLW  0B
1D42:  MOVWF  1F
....................         lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1D44:  MOVFF  1F,5E
1D48:  MOVLW  04
1D4A:  MOVWF  5F
1D4C:  CALL   083C
....................         lcd_putc(t[2]); 
1D50:  MOVFF  3A,5D
1D54:  CALL   08F0
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1D58:  BTFSC  1F.7
1D5A:  BRA    1EAE
1D5C:  MOVF   1F,W
1D5E:  SUBLW  0E
1D60:  BTFSC  FD8.0
1D62:  BRA    1EAE
....................         { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1D64:  MOVF   3C,W
1D66:  SUBLW  03
1D68:  BNZ   1D82
1D6A:  MOVF   3D,W
1D6C:  SUBLW  08
1D6E:  BNZ   1D82
1D70:  MOVF   3E,W
1D72:  SUBLW  09
1D74:  BNZ   1D82
1D76:  MOVF   3F,W
1D78:  SUBLW  02
1D7A:  BNZ   1D82
....................             {set_default(); 
1D7C:  CALL   094E
....................              reset_cpu(); 
1D80:  RESET
....................             } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1D82:  MOVF   40,W
1D84:  SUBWF  3C,W
1D86:  BNZ   1E3C
1D88:  MOVF   41,W
1D8A:  SUBWF  3D,W
1D8C:  BNZ   1E3C
1D8E:  MOVF   42,W
1D90:  SUBWF  3E,W
1D92:  BNZ   1E3C
1D94:  MOVF   43,W
1D96:  SUBWF  3F,W
1D98:  BNZ   1E3C
....................             {lcd_gotoxy(1,1); 
1D9A:  MOVLW  01
1D9C:  MOVWF  5E
1D9E:  MOVWF  5F
1DA0:  CALL   083C
....................             printf(lcd_putc,"                   "); 
1DA4:  MOVLW  9A
1DA6:  MOVWF  FF6
1DA8:  MOVLW  02
1DAA:  MOVWF  FF7
1DAC:  CALL   0CA2
....................             lcd_gotoxy(1,2); 
1DB0:  MOVLW  01
1DB2:  MOVWF  5E
1DB4:  MOVLW  02
1DB6:  MOVWF  5F
1DB8:  CALL   083C
....................             printf(lcd_putc,"     Contraseña    "); 
1DBC:  MOVLW  AE
1DBE:  MOVWF  FF6
1DC0:  MOVLW  02
1DC2:  MOVWF  FF7
1DC4:  CALL   0CA2
....................             lcd_gotoxy(1,3); 
1DC8:  MOVLW  01
1DCA:  MOVWF  5E
1DCC:  MOVLW  03
1DCE:  MOVWF  5F
1DD0:  CALL   083C
....................             printf(lcd_putc,"      Correcta     "); 
1DD4:  MOVLW  C2
1DD6:  MOVWF  FF6
1DD8:  MOVLW  02
1DDA:  MOVWF  FF7
1DDC:  CALL   0CA2
....................             lcd_gotoxy(1,4); 
1DE0:  MOVLW  01
1DE2:  MOVWF  5E
1DE4:  MOVLW  04
1DE6:  MOVWF  5F
1DE8:  CALL   083C
....................             printf(lcd_putc,"                   "); 
1DEC:  MOVLW  D6
1DEE:  MOVWF  FF6
1DF0:  MOVLW  02
1DF2:  MOVWF  FF7
1DF4:  CALL   0CA2
....................             delay_ms(200); 
1DF8:  MOVLW  C8
1DFA:  MOVWF  x63
1DFC:  CALL   075A
....................             Motor_on; 
1E00:  BSF    F8A.5
1E02:  BCF    F93.5
....................             delay_ms(100); 
1E04:  MOVLW  64
1E06:  MOVWF  x63
1E08:  CALL   075A
....................             lcd_init(); 
1E0C:  CALL   07E6
....................             delay_ms(100); 
1E10:  MOVLW  64
1E12:  MOVWF  x63
1E14:  CALL   075A
....................             Menu=50;Cambio=1;unidad=11;printf(lcd_putc,"\f");flag_latencia=0;Latencia=0;tiempo_purga=1;Lectura=1; 
1E18:  MOVLW  32
1E1A:  MOVWF  1C
1E1C:  MOVLW  01
1E1E:  MOVWF  44
1E20:  MOVLW  0B
1E22:  MOVWF  1F
1E24:  MOVLW  0C
1E26:  MOVWF  5D
1E28:  CALL   08F0
1E2C:  BCF    34.7
1E2E:  BCF    35.0
1E30:  BSF    36.6
1E32:  BSF    36.4
....................             t_latencia=0;flag_iniciodamper=1;} 
1E34:  CLRF   4D
1E36:  CLRF   4C
1E38:  BSF    36.5
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1E3A:  BRA    1EAE
....................          {lcd_gotoxy(1,1); 
1E3C:  MOVLW  01
1E3E:  MOVWF  5E
1E40:  MOVWF  5F
1E42:  CALL   083C
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1E46:  MOVLW  01
1E48:  MOVWF  5E
1E4A:  MOVLW  02
1E4C:  MOVWF  5F
1E4E:  CALL   083C
....................             printf(lcd_putc,"     Contraseña    "); 
1E52:  MOVLW  EA
1E54:  MOVWF  FF6
1E56:  MOVLW  02
1E58:  MOVWF  FF7
1E5A:  CALL   0CA2
....................             lcd_gotoxy(1,3); 
1E5E:  MOVLW  01
1E60:  MOVWF  5E
1E62:  MOVLW  03
1E64:  MOVWF  5F
1E66:  CALL   083C
....................             printf(lcd_putc,"     Incorrecta    "); 
1E6A:  MOVLW  FE
1E6C:  MOVWF  FF6
1E6E:  MOVLW  02
1E70:  MOVWF  FF7
1E72:  CALL   0CA2
....................             lcd_gotoxy(1,4); 
1E76:  MOVLW  01
1E78:  MOVWF  5E
1E7A:  MOVLW  04
1E7C:  MOVWF  5F
1E7E:  CALL   083C
....................             printf(lcd_putc,"                   ");  
1E82:  MOVLW  12
1E84:  MOVWF  FF6
1E86:  MOVLW  03
1E88:  MOVWF  FF7
1E8A:  CALL   0CA2
....................             Cambio=1;                              //Se activa el flag de pedir clave nuevamente, porque fue errada 
1E8E:  MOVLW  01
1E90:  MOVWF  44
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
1E92:  MOVLW  02
1E94:  MOVWF  50
1E96:  MOVLW  FA
1E98:  MOVWF  x63
1E9A:  CALL   075A
1E9E:  DECFSZ 50,F
1EA0:  BRA    1E96
1EA2:  MOVLW  0B
1EA4:  MOVWF  1F
1EA6:  MOVLW  0C
1EA8:  MOVWF  5D
1EAA:  CALL   08F0
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1EAE:  BTFSC  1F.7
1EB0:  BRA    1EEE
1EB2:  MOVF   1F,W
1EB4:  SUBLW  0B
1EB6:  BC    1EEE
1EB8:  BTFSC  1F.7
1EBA:  BRA    1EC2
1EBC:  MOVF   1F,W
1EBE:  SUBLW  0D
1EC0:  BNC   1EEE
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1EC2:  MOVLW  01
1EC4:  SUBWF  1F,W
1EC6:  MOVWF  50
1EC8:  MOVWF  5E
1ECA:  MOVLW  04
1ECC:  MOVWF  5F
1ECE:  CALL   083C
....................             lcd_putc(t[1]); 
1ED2:  MOVFF  39,5D
1ED6:  CALL   08F0
....................             lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1EDA:  MOVFF  1F,5E
1EDE:  MOVLW  04
1EE0:  MOVWF  5F
1EE2:  CALL   083C
....................             lcd_putc(t[2]); 
1EE6:  MOVFF  3A,5D
1EEA:  CALL   08F0
....................    
....................           } 
....................         
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------     
....................  
....................   
.................... //------------Menu1------------------------------------------------------------------    
....................    while(Menu == 1)      // Menu de seleccion de lo que desea encender 
....................    { 
1EEE:  DECFSZ 1C,W
1EF0:  BRA    20DA
....................    lee_pulsad(); 
1EF2:  CALL   0DD0
....................     
....................       if(tecla=='U')       //Si oprime hacia arriba 
1EF6:  MOVF   3B,W
1EF8:  SUBLW  55
1EFA:  BNZ   1F0E
....................       {Flecha2--;Flecha--;Flecha1=Flecha+1;delay_ms(30);} 
1EFC:  DECF   22,F
1EFE:  DECF   20,F
1F00:  MOVLW  01
1F02:  ADDWF  20,W
1F04:  MOVWF  21
1F06:  MOVLW  1E
1F08:  MOVWF  x63
1F0A:  CALL   075A
....................       if(tecla=='D')       //Si oprime hacia abajo 
1F0E:  MOVF   3B,W
1F10:  SUBLW  44
1F12:  BNZ   1F26
....................       {Flecha2++;Flecha++;Flecha1=Flecha-1;delay_ms(30);} 
1F14:  INCF   22,F
1F16:  INCF   20,F
1F18:  MOVLW  01
1F1A:  SUBWF  20,W
1F1C:  MOVWF  21
1F1E:  MOVLW  1E
1F20:  MOVWF  x63
1F22:  CALL   075A
....................   
....................          
....................         if(Flecha2>nMenuH) 
1F26:  MOVF   24,W
1F28:  XORLW  80
1F2A:  MOVWF  00
1F2C:  MOVF   22,W
1F2E:  XORLW  80
1F30:  SUBWF  00,W
1F32:  BC    1F44
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1F34:  INCF   37,F
1F36:  MOVFF  22,24
1F3A:  MOVLW  02
1F3C:  SUBWF  24,W
1F3E:  MOVWF  23
1F40:  MOVLW  04
1F42:  MOVWF  20
....................          
....................         if(Flecha2<nMenuL) 
1F44:  MOVF   22,W
1F46:  XORLW  80
1F48:  MOVWF  00
1F4A:  MOVF   23,W
1F4C:  XORLW  80
1F4E:  SUBWF  00,W
1F50:  BC    1F62
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1F52:  DECF   37,F
1F54:  MOVFF  22,23
1F58:  MOVLW  02
1F5A:  ADDWF  23,W
1F5C:  MOVWF  24
1F5E:  MOVLW  02
1F60:  MOVWF  20
....................          
....................         if(Flecha2>n_opcionH) 
1F62:  MOVF   1D,W
1F64:  XORLW  80
1F66:  MOVWF  00
1F68:  MOVF   22,W
1F6A:  XORLW  80
1F6C:  SUBWF  00,W
1F6E:  BC    1F82
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1F70:  MOVFF  1E,22
1F74:  MOVLW  02
1F76:  MOVWF  20
1F78:  CLRF   37
1F7A:  MOVFF  22,23
1F7E:  ADDWF  23,W
1F80:  MOVWF  24
....................          
....................         if(Flecha2<n_opcionL) 
1F82:  MOVF   22,W
1F84:  XORLW  80
1F86:  MOVWF  00
1F88:  MOVF   1E,W
1F8A:  XORLW  80
1F8C:  SUBWF  00,W
1F8E:  BC    1FA6
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
1F90:  MOVFF  1D,22
1F94:  MOVLW  04
1F96:  MOVWF  20
1F98:  SUBWF  1D,W
1F9A:  MOVWF  37
1F9C:  MOVFF  22,24
1FA0:  MOVLW  02
1FA2:  SUBWF  24,W
1FA4:  MOVWF  23
....................          
....................         if(paso<0) 
1FA6:  BTFSC  37.7
1FA8:  BRA    1FAC
1FAA:  BRA    1FAE
....................         paso=0; 
1FAC:  CLRF   37
....................          
....................         if(Cambio==1) 
1FAE:  DECFSZ 44,W
1FB0:  BRA    2098
....................         { 
....................         lcd_gotoxy(1,1); 
1FB2:  MOVLW  01
1FB4:  MOVWF  5E
1FB6:  MOVWF  5F
1FB8:  CALL   083C
....................         printf(lcd_putc,"---MENU PRINCIPAL---"); 
1FBC:  MOVLW  26
1FBE:  MOVWF  FF6
1FC0:  MOVLW  03
1FC2:  MOVWF  FF7
1FC4:  CALL   0CA2
....................          
....................         mensajes(1+paso,2); 
1FC8:  MOVLW  01
1FCA:  ADDWF  37,W
1FCC:  MOVWF  50
1FCE:  MOVWF  51
1FD0:  MOVLW  02
1FD2:  MOVWF  52
1FD4:  CALL   0E8E
....................         mensajes(2+paso,3); 
1FD8:  MOVLW  02
1FDA:  ADDWF  37,W
1FDC:  MOVWF  50
1FDE:  MOVWF  51
1FE0:  MOVLW  03
1FE2:  MOVWF  52
1FE4:  CALL   0E8E
....................         mensajes(3+paso,4); 
1FE8:  MOVLW  03
1FEA:  ADDWF  37,W
1FEC:  MOVWF  50
1FEE:  MOVWF  51
1FF0:  MOVLW  04
1FF2:  MOVWF  52
1FF4:  CALL   0E8E
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1FF8:  MOVLW  01
1FFA:  MOVWF  5E
1FFC:  MOVFF  20,5F
2000:  CALL   083C
....................         lcd_putc(t[0]); 
2004:  MOVFF  38,5D
2008:  CALL   08F0
....................  
....................         if(Flecha==2) 
200C:  MOVF   20,W
200E:  SUBLW  02
2010:  BNZ   203A
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2012:  MOVLW  01
2014:  MOVWF  5E
2016:  MOVLW  04
2018:  MOVWF  5F
201A:  CALL   083C
....................             lcd_putc(t[1]); 
201E:  MOVFF  39,5D
2022:  CALL   08F0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2026:  MOVLW  01
2028:  MOVWF  5E
202A:  MOVLW  03
202C:  MOVWF  5F
202E:  CALL   083C
....................             lcd_putc(t[1]); 
2032:  MOVFF  39,5D
2036:  CALL   08F0
....................           } 
....................          
....................         if(Flecha==4) 
203A:  MOVF   20,W
203C:  SUBLW  04
203E:  BNZ   2068
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2040:  MOVLW  01
2042:  MOVWF  5E
2044:  MOVLW  02
2046:  MOVWF  5F
2048:  CALL   083C
....................             lcd_putc(t[1]); 
204C:  MOVFF  39,5D
2050:  CALL   08F0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2054:  MOVLW  01
2056:  MOVWF  5E
2058:  MOVLW  03
205A:  MOVWF  5F
205C:  CALL   083C
....................             lcd_putc(t[1]); 
2060:  MOVFF  39,5D
2064:  CALL   08F0
....................           } 
....................          
....................         if(Flecha==3) 
2068:  MOVF   20,W
206A:  SUBLW  03
206C:  BNZ   2096
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
206E:  MOVLW  01
2070:  MOVWF  5E
2072:  MOVLW  04
2074:  MOVWF  5F
2076:  CALL   083C
....................             lcd_putc(t[1]); 
207A:  MOVFF  39,5D
207E:  CALL   08F0
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2082:  MOVLW  01
2084:  MOVWF  5E
2086:  MOVLW  02
2088:  MOVWF  5F
208A:  CALL   083C
....................             lcd_putc(t[1]); 
208E:  MOVFF  39,5D
2092:  CALL   08F0
....................           } 
....................           Cambio=0; 
2096:  CLRF   44
....................         } 
....................  
....................         if(tecla=='R')        // Si oprime derecha 
2098:  MOVF   3B,W
209A:  SUBLW  52
209C:  BNZ   20C0
....................         {Menu=Flecha2;Cambio=1;Flecha=3;printf(lcd_putc,"\f"); 
209E:  MOVFF  22,1C
20A2:  MOVLW  01
20A4:  MOVWF  44
20A6:  MOVLW  03
20A8:  MOVWF  20
20AA:  MOVLW  0C
20AC:  MOVWF  5D
20AE:  CALL   08F0
....................             if(Menu==6) 
20B2:  MOVF   1C,W
20B4:  SUBLW  06
20B6:  BNZ   20C0
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}} 
20B8:  CLRF   3C
20BA:  CLRF   3D
20BC:  CLRF   3E
20BE:  CLRF   3F
....................               
....................         if(tecla=='L')        // Si oprime Izquierda 
20C0:  MOVF   3B,W
20C2:  SUBLW  4C
20C4:  BNZ   20D8
....................         {Menu=20;Cambio=1;Cambio=1;printf(lcd_putc,"\f");} 
20C6:  MOVLW  14
20C8:  MOVWF  1C
20CA:  MOVLW  01
20CC:  MOVWF  44
20CE:  MOVWF  44
20D0:  MOVLW  0C
20D2:  MOVWF  5D
20D4:  CALL   08F0
....................  
....................    } 
20D8:  BRA    1EEE
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
20DA:  MOVF   1C,W
20DC:  SUBLW  02
20DE:  BTFSS  FD8.2
20E0:  BRA    2210
....................    estadoalarma=!estadoalarma;Menu=1; paso=0; 
20E2:  BTG    34.2
20E4:  MOVLW  01
20E6:  MOVWF  1C
20E8:  CLRF   37
....................                        
....................             if(estadoalarma==1) 
20EA:  BTFSS  34.2
20EC:  BRA    214E
....................             {estadoalarma=1; 
20EE:  BSF    34.2
....................                lcd_gotoxy(1,1); 
20F0:  MOVLW  01
20F2:  MOVWF  5E
20F4:  MOVWF  5F
20F6:  CALL   083C
....................                printf(lcd_putc,"                    "); 
20FA:  MOVLW  3C
20FC:  MOVWF  FF6
20FE:  MOVLW  03
2100:  MOVWF  FF7
2102:  CALL   0CA2
....................                lcd_gotoxy(1,2); 
2106:  MOVLW  01
2108:  MOVWF  5E
210A:  MOVLW  02
210C:  MOVWF  5F
210E:  CALL   083C
....................                printf(lcd_putc,"        Activo      "); 
2112:  MOVLW  52
2114:  MOVWF  FF6
2116:  MOVLW  03
2118:  MOVWF  FF7
211A:  CALL   0CA2
....................                lcd_gotoxy(1,3); 
211E:  MOVLW  01
2120:  MOVWF  5E
2122:  MOVLW  03
2124:  MOVWF  5F
2126:  CALL   083C
....................                printf(lcd_putc,"        Alarma      "); 
212A:  MOVLW  68
212C:  MOVWF  FF6
212E:  MOVLW  03
2130:  MOVWF  FF7
2132:  CALL   0CA2
....................                lcd_gotoxy(1,4); 
2136:  MOVLW  01
2138:  MOVWF  5E
213A:  MOVLW  04
213C:  MOVWF  5F
213E:  CALL   083C
....................                printf(lcd_putc,"                    ");} 
2142:  MOVLW  7E
2144:  MOVWF  FF6
2146:  MOVLW  03
2148:  MOVWF  FF7
214A:  CALL   0CA2
....................                 
....................             if(estadoalarma==0) 
214E:  BTFSC  34.2
2150:  BRA    21B2
....................             {estadoalarma=0; 
2152:  BCF    34.2
....................                lcd_gotoxy(1,1); 
2154:  MOVLW  01
2156:  MOVWF  5E
2158:  MOVWF  5F
215A:  CALL   083C
....................                printf(lcd_putc,"                    "); 
215E:  MOVLW  94
2160:  MOVWF  FF6
2162:  MOVLW  03
2164:  MOVWF  FF7
2166:  CALL   0CA2
....................                lcd_gotoxy(1,2); 
216A:  MOVLW  01
216C:  MOVWF  5E
216E:  MOVLW  02
2170:  MOVWF  5F
2172:  CALL   083C
....................                printf(lcd_putc,"      Desactivo     "); 
2176:  MOVLW  AA
2178:  MOVWF  FF6
217A:  MOVLW  03
217C:  MOVWF  FF7
217E:  CALL   0CA2
....................                lcd_gotoxy(1,3); 
2182:  MOVLW  01
2184:  MOVWF  5E
2186:  MOVLW  03
2188:  MOVWF  5F
218A:  CALL   083C
....................                printf(lcd_putc,"       Alarma       "); 
218E:  MOVLW  C0
2190:  MOVWF  FF6
2192:  MOVLW  03
2194:  MOVWF  FF7
2196:  CALL   0CA2
....................                lcd_gotoxy(1,4); 
219A:  MOVLW  01
219C:  MOVWF  5E
219E:  MOVLW  04
21A0:  MOVWF  5F
21A2:  CALL   083C
....................                printf(lcd_putc,"                    ");} 
21A6:  MOVLW  D6
21A8:  MOVWF  FF6
21AA:  MOVLW  03
21AC:  MOVWF  FF7
21AE:  CALL   0CA2
....................               
....................             write_eeprom(5,estadoalarma);menu=1;Cambio=1;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
21B2:  MOVLW  00
21B4:  BTFSC  34.2
21B6:  MOVLW  01
21B8:  MOVWF  50
21BA:  MOVLW  05
21BC:  MOVWF  FA9
21BE:  MOVFF  50,FA8
21C2:  BCF    FA6.6
21C4:  BCF    FA6.7
21C6:  BSF    FA6.2
21C8:  MOVF   FF2,W
21CA:  MOVWF  00
21CC:  BCF    FF2.7
21CE:  MOVLB  F
21D0:  MOVLW  55
21D2:  MOVWF  FA7
21D4:  MOVLW  AA
21D6:  MOVWF  FA7
21D8:  BSF    FA6.1
21DA:  BTFSC  FA6.1
21DC:  BRA    21DA
21DE:  BCF    FA6.2
21E0:  MOVF   00,W
21E2:  IORWF  FF2,F
21E4:  MOVLW  01
21E6:  MOVWF  1C
21E8:  MOVWF  44
21EA:  MOVLW  04
21EC:  MOVWF  50
21EE:  MOVLW  FA
21F0:  MOVLB  0
21F2:  MOVWF  x63
21F4:  CALL   075A
21F8:  DECFSZ 50,F
21FA:  BRA    21FE
21FC:  BRA    2202
21FE:  MOVLB  F
2200:  BRA    21EE
2202:  MOVLW  02
2204:  MOVWF  20
2206:  MOVWF  22
2208:  MOVLW  0C
220A:  MOVWF  5D
220C:  CALL   08F0
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................     
....................    while(Menu == 3){ // Menu de seleccion de SetPoint 
2210:  MOVF   1C,W
2212:  SUBLW  03
2214:  BTFSS  FD8.2
2216:  BRA    2496
....................    if(Cambio==1) 
2218:  DECFSZ 44,W
221A:  BRA    22DA
....................    { 
....................       lcd_gotoxy(1,1); 
221C:  MOVLW  01
221E:  MOVWF  5E
2220:  MOVWF  5F
2222:  CALL   083C
....................       Cambio=0; 
2226:  CLRF   44
....................       printf(lcd_putc,"  Duracion Actual   ");                           
2228:  MOVLW  EC
222A:  MOVWF  FF6
222C:  MOVLW  03
222E:  MOVWF  FF7
2230:  CALL   0CA2
....................       lcd_gotoxy(1,2);                                                   
2234:  MOVLW  01
2236:  MOVWF  5E
2238:  MOVLW  02
223A:  MOVWF  5F
223C:  CALL   083C
....................       printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
2240:  MOVLW  02
2242:  MOVWF  FF6
2244:  MOVLW  04
2246:  MOVWF  FF7
2248:  MOVLW  09
224A:  MOVWF  50
224C:  CALL   0CC2
2250:  MOVFF  2C,50
2254:  MOVLW  01
2256:  MOVWF  51
2258:  CALL   0F46
225C:  MOVLW  3A
225E:  MOVWF  5D
2260:  CALL   08F0
2264:  MOVFF  2B,50
2268:  MOVLW  01
226A:  MOVWF  51
226C:  CALL   0F46
2270:  MOVLW  3A
2272:  MOVWF  5D
2274:  CALL   08F0
2278:  MOVFF  2A,50
227C:  MOVLW  01
227E:  MOVWF  51
2280:  CALL   0F46
2284:  MOVLW  20
2286:  MOVWF  5D
2288:  CALL   08F0
....................        
....................       if(flag_filtro==1) 
228C:  BTFSS  35.1
228E:  BRA    22AA
....................       { 
....................          lcd_gotoxy(1,3);                                                  
2290:  MOVLW  01
2292:  MOVWF  5E
2294:  MOVLW  03
2296:  MOVWF  5F
2298:  CALL   083C
....................          printf(lcd_putc,"DESACTIVAR= Oprima >");                         
229C:  MOVLW  1C
229E:  MOVWF  FF6
22A0:  MOVLW  04
22A2:  MOVWF  FF7
22A4:  CALL   0CA2
....................       } 
....................       else 
22A8:  BRA    22C2
....................       { 
....................          lcd_gotoxy(1,3);                                                  
22AA:  MOVLW  01
22AC:  MOVWF  5E
22AE:  MOVLW  03
22B0:  MOVWF  5F
22B2:  CALL   083C
....................          printf(lcd_putc," ACTIVAR= Oprima >  ");                         
22B6:  MOVLW  32
22B8:  MOVWF  FF6
22BA:  MOVLW  04
22BC:  MOVWF  FF7
22BE:  CALL   0CA2
....................       } 
....................        
....................       lcd_gotoxy(1,4);                                                  
22C2:  MOVLW  01
22C4:  MOVWF  5E
22C6:  MOVLW  04
22C8:  MOVWF  5F
22CA:  CALL   083C
....................       printf(lcd_putc," RESET= Oprima ^    ");    
22CE:  MOVLW  48
22D0:  MOVWF  FF6
22D2:  MOVLW  04
22D4:  MOVWF  FF7
22D6:  CALL   0CA2
....................    } 
....................       
....................      lee_pulsad(); 
22DA:  CALL   0DD0
....................       
....................      Switch(tecla) 
....................       
....................      { 
22DE:  MOVF   3B,W
22E0:  XORLW  55
22E2:  BZ    22F2
22E4:  XORLW  07
22E6:  BTFSC  FD8.2
22E8:  BRA    23FE
22EA:  XORLW  1E
22EC:  BTFSC  FD8.2
22EE:  BRA    246A
22F0:  BRA    2494
....................     
....................       Case ('U'):       //Si oprime hacia arriba 
....................       {  delay_ms(200); 
22F2:  MOVLW  C8
22F4:  MOVWF  x63
22F6:  CALL   075A
....................          printf(lcd_putc,"\f"); 
22FA:  MOVLW  0C
22FC:  MOVWF  5D
22FE:  CALL   08F0
....................          lcd_gotoxy(1,2); 
2302:  MOVLW  01
2304:  MOVWF  5E
2306:  MOVLW  02
2308:  MOVWF  5F
230A:  CALL   083C
....................          printf(lcd_putc," Reset de tiempo "); 
230E:  MOVLW  5E
2310:  MOVWF  FF6
2312:  MOVLW  04
2314:  MOVWF  FF7
2316:  CALL   0CA2
....................          lcd_gotoxy(1,3); 
231A:  MOVLW  01
231C:  MOVWF  5E
231E:  MOVLW  03
2320:  MOVWF  5F
2322:  CALL   083C
....................          printf(lcd_putc,"     Exitoso     "); 
2326:  MOVLW  70
2328:  MOVWF  FF6
232A:  MOVLW  04
232C:  MOVWF  FF7
232E:  CALL   0CA2
....................          write_eeprom(70,0); 
2332:  MOVLW  46
2334:  MOVWF  FA9
2336:  CLRF   FA8
2338:  BCF    FA6.6
233A:  BCF    FA6.7
233C:  BSF    FA6.2
233E:  MOVF   FF2,W
2340:  MOVWF  00
2342:  BCF    FF2.7
2344:  MOVLB  F
2346:  MOVLW  55
2348:  MOVWF  FA7
234A:  MOVLW  AA
234C:  MOVWF  FA7
234E:  BSF    FA6.1
2350:  BTFSC  FA6.1
2352:  BRA    2350
2354:  BCF    FA6.2
2356:  MOVF   00,W
2358:  IORWF  FF2,F
....................          delay_ms(20); 
235A:  MOVLW  14
235C:  MOVLB  0
235E:  MOVWF  x63
2360:  CALL   075A
....................          write_eeprom(71,0); 
2364:  MOVLW  47
2366:  MOVWF  FA9
2368:  CLRF   FA8
236A:  BCF    FA6.6
236C:  BCF    FA6.7
236E:  BSF    FA6.2
2370:  MOVF   FF2,W
2372:  MOVWF  00
2374:  BCF    FF2.7
2376:  MOVLB  F
2378:  MOVLW  55
237A:  MOVWF  FA7
237C:  MOVLW  AA
237E:  MOVWF  FA7
2380:  BSF    FA6.1
2382:  BTFSC  FA6.1
2384:  BRA    2382
2386:  BCF    FA6.2
2388:  MOVF   00,W
238A:  IORWF  FF2,F
....................          delay_ms(20); 
238C:  MOVLW  14
238E:  MOVLB  0
2390:  MOVWF  x63
2392:  CALL   075A
....................          write_eeprom(72,0); 
2396:  MOVLW  48
2398:  MOVWF  FA9
239A:  CLRF   FA8
239C:  BCF    FA6.6
239E:  BCF    FA6.7
23A0:  BSF    FA6.2
23A2:  MOVF   FF2,W
23A4:  MOVWF  00
23A6:  BCF    FF2.7
23A8:  MOVLB  F
23AA:  MOVLW  55
23AC:  MOVWF  FA7
23AE:  MOVLW  AA
23B0:  MOVWF  FA7
23B2:  BSF    FA6.1
23B4:  BTFSC  FA6.1
23B6:  BRA    23B4
23B8:  BCF    FA6.2
23BA:  MOVF   00,W
23BC:  IORWF  FF2,F
....................          delay_ms(700); 
23BE:  MOVLW  04
23C0:  MOVWF  50
23C2:  MOVLW  AF
23C4:  MOVLB  0
23C6:  MOVWF  x63
23C8:  CALL   075A
23CC:  DECFSZ 50,F
23CE:  BRA    23D2
23D0:  BRA    23D6
23D2:  MOVLB  F
23D4:  BRA    23C2
....................          segundos=0;minutos=0;horas=0; 
23D6:  CLRF   2A
23D8:  CLRF   2B
23DA:  CLRF   2C
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
23DC:  MOVLW  1E
23DE:  MOVWF  x63
23E0:  CALL   075A
23E4:  MOVLW  01
23E6:  MOVWF  1C
23E8:  CLRF   37
23EA:  MOVLW  02
23EC:  MOVWF  20
23EE:  MOVWF  22
23F0:  MOVLW  01
23F2:  MOVWF  44
23F4:  MOVLW  0C
23F6:  MOVWF  5D
23F8:  CALL   08F0
....................       } 
....................       break; 
23FC:  BRA    2494
....................        
....................       Case ('R'):       //Se oprimio el boton derecha 
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
23FE:  BTG    35.1
2400:  MOVLW  00
2402:  BTFSC  35.1
2404:  MOVLW  01
2406:  MOVWF  50
2408:  MOVLW  49
240A:  MOVWF  FA9
240C:  MOVFF  50,FA8
2410:  BCF    FA6.6
2412:  BCF    FA6.7
2414:  BSF    FA6.2
2416:  MOVF   FF2,W
2418:  MOVWF  00
241A:  BCF    FF2.7
241C:  MOVLB  F
241E:  MOVLW  55
2420:  MOVWF  FA7
2422:  MOVLW  AA
2424:  MOVWF  FA7
2426:  BSF    FA6.1
2428:  BTFSC  FA6.1
242A:  BRA    2428
242C:  BCF    FA6.2
242E:  MOVF   00,W
2430:  IORWF  FF2,F
....................          if(flag_filtro==1) // Si se activa el filtro, se fuerza a leer el estado de una vez 
2432:  BTFSS  35.1
2434:  BRA    2438
....................          { 
....................           flag_hrs=1; 
2436:  BSF    36.0
....................          } 
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
2438:  MOVLW  02
243A:  MOVWF  50
243C:  MOVLW  FA
243E:  MOVLB  0
2440:  MOVWF  x63
2442:  CALL   075A
2446:  DECFSZ 50,F
2448:  BRA    244C
244A:  BRA    2450
244C:  MOVLB  F
244E:  BRA    243C
2450:  MOVLW  01
2452:  MOVWF  1C
2454:  CLRF   37
2456:  MOVLW  02
2458:  MOVWF  20
245A:  MOVWF  22
245C:  MOVLW  01
245E:  MOVWF  44
2460:  MOVLW  0C
2462:  MOVWF  5D
2464:  CALL   08F0
....................       } 
....................       break; 
2468:  BRA    2494
....................              
....................        Case ('L'):       // Si oprime Izquierda 
....................       {   
....................         delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
246A:  MOVLW  02
246C:  MOVWF  50
246E:  MOVLW  FA
2470:  MOVWF  x63
2472:  CALL   075A
2476:  DECFSZ 50,F
2478:  BRA    246E
247A:  MOVLW  01
247C:  MOVWF  1C
247E:  CLRF   37
2480:  MOVLW  02
2482:  MOVWF  20
2484:  MOVWF  22
2486:  MOVLW  01
2488:  MOVWF  44
248A:  MOVLW  0C
248C:  MOVWF  5D
248E:  CALL   08F0
....................       } 
....................       break; 
2492:  BRA    2494
....................               
....................    } 
....................    } 
2494:  BRA    2210
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    while(Menu == 4){ // Menu de seleccion de SetPoint 
2496:  MOVF   1C,W
2498:  SUBLW  04
249A:  BTFSS  FD8.2
249C:  BRA    26AE
....................    if(Cambio==1) 
249E:  DECFSZ 44,W
24A0:  BRA    2502
....................    { 
....................       lcd_gotoxy(1,2); 
24A2:  MOVLW  01
24A4:  MOVWF  5E
24A6:  MOVLW  02
24A8:  MOVWF  5F
24AA:  CALL   083C
....................       printf(lcd_putc,"    Vida Filtro     "); 
24AE:  MOVLW  82
24B0:  MOVWF  FF6
24B2:  MOVLW  04
24B4:  MOVWF  FF7
24B6:  CALL   0CA2
....................       lcd_gotoxy(1,3); 
24BA:  MOVLW  01
24BC:  MOVWF  5E
24BE:  MOVLW  03
24C0:  MOVWF  5F
24C2:  CALL   083C
....................       printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
24C6:  MOVLW  98
24C8:  MOVWF  FF6
24CA:  MOVLW  04
24CC:  MOVWF  FF7
24CE:  MOVLW  06
24D0:  MOVWF  50
24D2:  CALL   0CC2
24D6:  MOVLW  42
24D8:  MOVWF  FE9
24DA:  MOVFF  48,53
24DE:  MOVFF  47,52
24E2:  MOVFF  46,51
24E6:  MOVFF  45,50
24EA:  CLRF   54
24EC:  GOTO   1158
24F0:  MOVLW  A4
24F2:  MOVWF  FF6
24F4:  MOVLW  04
24F6:  MOVWF  FF7
24F8:  MOVLW  08
24FA:  MOVWF  50
24FC:  CALL   0CC2
....................       Cambio=0; 
2500:  CLRF   44
....................    } 
....................     
....................    if(setpoint<1.0) 
2502:  MOVFF  48,54
2506:  MOVFF  47,53
250A:  MOVFF  46,52
250E:  MOVFF  45,51
2512:  CLRF   58
2514:  CLRF   57
2516:  CLRF   56
2518:  MOVLW  7F
251A:  MOVWF  55
251C:  CALL   12E0
2520:  BNC   252C
....................    {setpoint=1.0;} 
2522:  CLRF   48
2524:  CLRF   47
2526:  CLRF   46
2528:  MOVLW  7F
252A:  MOVWF  45
....................     
....................    if(setpoint>255.0) 
252C:  CLRF   54
252E:  CLRF   53
2530:  MOVLW  7F
2532:  MOVWF  52
2534:  MOVLW  86
2536:  MOVWF  51
2538:  MOVFF  48,58
253C:  MOVFF  47,57
2540:  MOVFF  46,56
2544:  MOVFF  45,55
2548:  CALL   12E0
254C:  BNC   255A
....................    {setpoint=255.0;} 
254E:  CLRF   48
2550:  CLRF   47
2552:  MOVLW  7F
2554:  MOVWF  46
2556:  MOVLW  86
2558:  MOVWF  45
....................     
....................    lee_pulsad(); 
255A:  CALL   0DD0
....................     
....................    Switch(tecla) 
....................    { 
255E:  MOVF   3B,W
2560:  XORLW  55
2562:  BZ    2572
2564:  XORLW  11
2566:  BZ    25AC
2568:  XORLW  16
256A:  BZ    25E6
256C:  XORLW  1E
256E:  BZ    2654
2570:  BRA    26AC
....................     
....................     Case 'U':     //Si oprime hacia arriba 
....................       {setpoint+=1.0;delay_ms(30);} 
2572:  BCF    FD8.1
2574:  MOVFF  48,53
2578:  MOVFF  47,52
257C:  MOVFF  46,51
2580:  MOVFF  45,50
2584:  CLRF   57
2586:  CLRF   56
2588:  CLRF   55
258A:  MOVLW  7F
258C:  MOVWF  54
258E:  CALL   1356
2592:  MOVFF  03,48
2596:  MOVFF  02,47
259A:  MOVFF  01,46
259E:  MOVFF  00,45
25A2:  MOVLW  1E
25A4:  MOVWF  x63
25A6:  CALL   075A
....................     break; 
25AA:  BRA    26AC
....................       
....................              
....................     Case 'D':     //Si oprime hacia abajo 
....................       {setpoint-=1.0;delay_ms(30);} 
25AC:  BSF    FD8.1
25AE:  MOVFF  48,53
25B2:  MOVFF  47,52
25B6:  MOVFF  46,51
25BA:  MOVFF  45,50
25BE:  CLRF   57
25C0:  CLRF   56
25C2:  CLRF   55
25C4:  MOVLW  7F
25C6:  MOVWF  54
25C8:  CALL   1356
25CC:  MOVFF  03,48
25D0:  MOVFF  02,47
25D4:  MOVFF  01,46
25D8:  MOVFF  00,45
25DC:  MOVLW  1E
25DE:  MOVWF  x63
25E0:  CALL   075A
....................     break; 
25E4:  BRA    26AC
....................          
....................   
....................     Case 'R':    //Si se oprime derecha 
....................       { 
....................         Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
25E6:  MOVLW  01
25E8:  MOVWF  1C
25EA:  CLRF   37
25EC:  MOVLW  02
25EE:  MOVWF  20
25F0:  MOVWF  22
25F2:  MOVLW  0B
25F4:  MOVWF  1F
25F6:  MOVLW  02
25F8:  MOVWF  50
25FA:  MOVLW  FA
25FC:  MOVWF  x63
25FE:  CALL   075A
2602:  DECFSZ 50,F
2604:  BRA    25FA
2606:  MOVLW  0C
2608:  MOVWF  5D
260A:  CALL   08F0
....................         Entero=(int)setpoint; 
260E:  MOVFF  48,53
2612:  MOVFF  47,52
2616:  MOVFF  46,51
261A:  MOVFF  45,50
261E:  CALL   15C0
2622:  MOVFF  01,29
....................         write_eeprom(40,Entero); 
2626:  MOVLW  28
2628:  MOVWF  FA9
262A:  MOVFF  29,FA8
262E:  BCF    FA6.6
2630:  BCF    FA6.7
2632:  BSF    FA6.2
2634:  MOVF   FF2,W
2636:  MOVWF  00
2638:  BCF    FF2.7
263A:  MOVLB  F
263C:  MOVLW  55
263E:  MOVWF  FA7
2640:  MOVLW  AA
2642:  MOVWF  FA7
2644:  BSF    FA6.1
2646:  BTFSC  FA6.1
2648:  BRA    2646
264A:  BCF    FA6.2
264C:  MOVF   00,W
264E:  IORWF  FF2,F
....................       } 
....................     break; 
2650:  MOVLB  0
2652:  BRA    26AC
....................           
....................     Case 'L':    // Si oprime Izquierda 
....................       {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");} 
2654:  MOVLW  01
2656:  MOVWF  1C
2658:  CLRF   37
265A:  MOVLW  02
265C:  MOVWF  20
265E:  MOVWF  22
2660:  MOVLW  0B
2662:  MOVWF  1F
2664:  MOVLW  02
2666:  MOVWF  50
2668:  MOVLW  FA
266A:  MOVWF  x63
266C:  CALL   075A
2670:  DECFSZ 50,F
2672:  BRA    2668
2674:  MOVLW  0C
2676:  MOVWF  5D
2678:  CALL   08F0
....................        setpoint=read_eeprom(40); 
267C:  MOVFF  FF2,50
2680:  BCF    FF2.7
2682:  MOVLW  28
2684:  MOVWF  FA9
2686:  BCF    FA6.6
2688:  BCF    FA6.7
268A:  BSF    FA6.0
268C:  MOVF   FA8,W
268E:  BTFSC  50.7
2690:  BSF    FF2.7
2692:  CLRF   52
2694:  MOVWF  51
2696:  CALL   0C5C
269A:  MOVFF  03,48
269E:  MOVFF  02,47
26A2:  MOVFF  01,46
26A6:  MOVFF  00,45
....................     break; 
26AA:  BRA    26AC
....................           
....................       } 
....................               
....................    }       
26AC:  BRA    2496
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    while(Menu == 5)// Menu de Tiempo de Purga 
....................    { 
26AE:  MOVF   1C,W
26B0:  SUBLW  05
26B2:  BTFSS  FD8.2
26B4:  BRA    28F6
....................     if(Cambio==1) 
26B6:  DECFSZ 44,W
26B8:  BRA    273E
....................      { 
....................       lcd_gotoxy(1,1); 
26BA:  MOVLW  01
26BC:  MOVWF  5E
26BE:  MOVWF  5F
26C0:  CALL   083C
....................       printf(lcd_putc,"     Tiempo  de      "); 
26C4:  MOVLW  AE
26C6:  MOVWF  FF6
26C8:  MOVLW  04
26CA:  MOVWF  FF7
26CC:  CALL   0CA2
....................       lcd_gotoxy(1,2); 
26D0:  MOVLW  01
26D2:  MOVWF  5E
26D4:  MOVLW  02
26D6:  MOVWF  5F
26D8:  CALL   083C
....................       printf(lcd_putc,"       Purga         "); 
26DC:  MOVLW  C4
26DE:  MOVWF  FF6
26E0:  MOVLW  04
26E2:  MOVWF  FF7
26E4:  CALL   0CA2
....................       lcd_gotoxy(6,3); 
26E8:  MOVLW  06
26EA:  MOVWF  5E
26EC:  MOVLW  03
26EE:  MOVWF  5F
26F0:  CALL   083C
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
26F4:  MOVFF  28,50
26F8:  MOVLW  01
26FA:  MOVWF  51
26FC:  CALL   0F46
2700:  MOVLW  3A
2702:  MOVWF  5D
2704:  CALL   08F0
2708:  MOVFF  2F,50
270C:  MOVLW  01
270E:  MOVWF  51
2710:  CALL   0F46
2714:  MOVLW  E3
2716:  MOVWF  FF6
2718:  MOVLW  04
271A:  MOVWF  FF7
271C:  MOVLW  08
271E:  MOVWF  50
2720:  CALL   0CC2
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2724:  MOVLW  06
2726:  ADDWF  26,W
2728:  MOVWF  50
272A:  MOVWF  5E
272C:  MOVLW  04
272E:  MOVWF  5F
2730:  CALL   083C
....................       lcd_putc(t[2]); 
2734:  MOVFF  3A,5D
2738:  CALL   08F0
....................       Cambio=0; 
273C:  CLRF   44
....................      } 
....................        
....................       if(unidad2<1) 
273E:  BTFSC  26.7
2740:  BRA    2748
2742:  MOVF   26,W
2744:  SUBLW  00
2746:  BNC   274C
....................          unidad2=1; 
2748:  MOVLW  01
274A:  MOVWF  26
....................       if(unidad2>3) 
274C:  BTFSC  26.7
274E:  BRA    275A
2750:  MOVF   26,W
2752:  SUBLW  03
2754:  BC    275A
....................          unidad2=3;    
2756:  MOVLW  03
2758:  MOVWF  26
....................       
....................      lee_pulsad(); 
275A:  CALL   0DD0
....................       
....................      Switch(tecla) 
....................         
....................       { 
275E:  MOVF   3B,W
2760:  XORLW  55
2762:  BZ    2772
2764:  XORLW  11
2766:  BZ    27AA
2768:  XORLW  16
276A:  BZ    27DE
276C:  XORLW  1E
276E:  BZ    2812
2770:  BRA    28F4
....................       Case 'U': 
....................       { 
....................          if(unidad2==1) 
2772:  DECFSZ 26,W
2774:  BRA    278C
....................          { 
....................             purga_minutos_pro++; 
2776:  INCF   28,F
....................             if(purga_minutos_pro>59) 
2778:  BTFSC  28.7
277A:  BRA    2784
277C:  MOVF   28,W
277E:  SUBLW  3B
2780:  BC    2784
....................                purga_minutos_pro=0; 
2782:  CLRF   28
....................                 
....................             delay_ms(200); 
2784:  MOVLW  C8
2786:  MOVWF  x63
2788:  CALL   075A
....................              
....................          } 
....................           
....................          if(unidad2==3) 
278C:  MOVF   26,W
278E:  SUBLW  03
2790:  BNZ   27A8
....................          { 
....................             purga_segundos_pro++; 
2792:  INCF   2F,F
....................             if(purga_segundos_pro>59) 
2794:  BTFSC  2F.7
2796:  BRA    27A0
2798:  MOVF   2F,W
279A:  SUBLW  3B
279C:  BC    27A0
....................                purga_segundos_pro=0; 
279E:  CLRF   2F
....................                 
....................             delay_ms(200); 
27A0:  MOVLW  C8
27A2:  MOVWF  x63
27A4:  CALL   075A
....................          } 
....................       } 
....................       break; 
27A8:  BRA    28F4
....................        
....................       Case 'D': 
....................       { 
....................          if(unidad2==1) 
27AA:  DECFSZ 26,W
27AC:  BRA    27C2
....................          { 
....................             purga_minutos_pro--; 
27AE:  DECF   28,F
....................             if(purga_minutos_pro<0) 
27B0:  BTFSC  28.7
27B2:  BRA    27B6
27B4:  BRA    27BA
....................                purga_minutos_pro=59; 
27B6:  MOVLW  3B
27B8:  MOVWF  28
....................                 
....................             delay_ms(200); 
27BA:  MOVLW  C8
27BC:  MOVWF  x63
27BE:  CALL   075A
....................          } 
....................           
....................          if(unidad2==3) 
27C2:  MOVF   26,W
27C4:  SUBLW  03
27C6:  BNZ   27DC
....................          { 
....................             purga_segundos_pro--; 
27C8:  DECF   2F,F
....................             if(purga_segundos_pro<0) 
27CA:  BTFSC  2F.7
27CC:  BRA    27D0
27CE:  BRA    27D4
....................                purga_segundos_pro=59; 
27D0:  MOVLW  3B
27D2:  MOVWF  2F
....................                 
....................             delay_ms(200); 
27D4:  MOVLW  C8
27D6:  MOVWF  x63
27D8:  CALL   075A
....................          } 
....................       } 
....................       break; 
27DC:  BRA    28F4
....................        
....................       Case 'R': 
....................       { 
....................          if(unidad2==1) 
27DE:  DECFSZ 26,W
27E0:  BRA    27E8
....................          { 
....................             unidad2=3; 
27E2:  MOVLW  03
27E4:  MOVWF  26
....................          } 
....................          else 
27E6:  BRA    27F8
....................          { 
....................             if(unidad2==3) 
27E8:  MOVF   26,W
27EA:  SUBLW  03
27EC:  BNZ   27F4
....................             { 
....................                unidad2=1; 
27EE:  MOVLW  01
27F0:  MOVWF  26
....................             } 
....................             else 
27F2:  BRA    27F8
....................             { 
....................                unidad2=3; 
27F4:  MOVLW  03
27F6:  MOVWF  26
....................             } 
....................          } 
....................          delay_ms(400); 
27F8:  MOVLW  02
27FA:  MOVWF  50
27FC:  MOVLW  C8
27FE:  MOVWF  x63
2800:  CALL   075A
2804:  DECFSZ 50,F
2806:  BRA    27FC
....................          printf(lcd_putc,"\f"); 
2808:  MOVLW  0C
280A:  MOVWF  5D
280C:  CALL   08F0
....................       } 
....................       break; 
2810:  BRA    28F4
....................        
....................       Case 'L': 
....................       { 
....................          delay_ms(200); 
2812:  MOVLW  C8
2814:  MOVWF  x63
2816:  CALL   075A
....................          printf(lcd_putc,"\f"); 
281A:  MOVLW  0C
281C:  MOVWF  5D
281E:  CALL   08F0
....................          lcd_gotoxy(1,2); 
2822:  MOVLW  01
2824:  MOVWF  5E
2826:  MOVLW  02
2828:  MOVWF  5F
282A:  CALL   083C
....................          printf(lcd_putc,"Tiempo Almacenado"); 
282E:  MOVLW  EC
2830:  MOVWF  FF6
2832:  MOVLW  04
2834:  MOVWF  FF7
2836:  CALL   0CA2
....................          lcd_gotoxy(1,3); 
283A:  MOVLW  01
283C:  MOVWF  5E
283E:  MOVLW  03
2840:  MOVWF  5F
2842:  CALL   083C
....................          printf(lcd_putc,"  Correctamente  "); 
2846:  MOVLW  FE
2848:  MOVWF  FF6
284A:  MOVLW  04
284C:  MOVWF  FF7
284E:  CALL   0CA2
....................          write_eeprom(20,purga_minutos_pro); 
2852:  MOVLW  14
2854:  MOVWF  FA9
2856:  MOVFF  28,FA8
285A:  BCF    FA6.6
285C:  BCF    FA6.7
285E:  BSF    FA6.2
2860:  MOVF   FF2,W
2862:  MOVWF  00
2864:  BCF    FF2.7
2866:  MOVLB  F
2868:  MOVLW  55
286A:  MOVWF  FA7
286C:  MOVLW  AA
286E:  MOVWF  FA7
2870:  BSF    FA6.1
2872:  BTFSC  FA6.1
2874:  BRA    2872
2876:  BCF    FA6.2
2878:  MOVF   00,W
287A:  IORWF  FF2,F
....................          delay_ms(20); 
287C:  MOVLW  14
287E:  MOVLB  0
2880:  MOVWF  x63
2882:  CALL   075A
....................          write_eeprom(21,purga_segundos_pro); 
2886:  MOVLW  15
2888:  MOVWF  FA9
288A:  MOVFF  2F,FA8
288E:  BCF    FA6.6
2890:  BCF    FA6.7
2892:  BSF    FA6.2
2894:  MOVF   FF2,W
2896:  MOVWF  00
2898:  BCF    FF2.7
289A:  MOVLB  F
289C:  MOVLW  55
289E:  MOVWF  FA7
28A0:  MOVLW  AA
28A2:  MOVWF  FA7
28A4:  BSF    FA6.1
28A6:  BTFSC  FA6.1
28A8:  BRA    28A6
28AA:  BCF    FA6.2
28AC:  MOVF   00,W
28AE:  IORWF  FF2,F
....................          delay_ms(20); 
28B0:  MOVLW  14
28B2:  MOVLB  0
28B4:  MOVWF  x63
28B6:  CALL   075A
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
28BA:  CLRF   3C
28BC:  CLRF   3D
28BE:  CLRF   3E
28C0:  CLRF   3F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
28C2:  MOVFF  28,27
28C6:  MOVFF  2F,2E
....................          delay_ms(700); 
28CA:  MOVLW  04
28CC:  MOVWF  50
28CE:  MOVLW  AF
28D0:  MOVWF  x63
28D2:  CALL   075A
28D6:  DECFSZ 50,F
28D8:  BRA    28CE
....................          Menu=1;Flecha=2;Flecha2=2;Cambio=1;paso=0;printf(lcd_putc,"\f"); 
28DA:  MOVLW  01
28DC:  MOVWF  1C
28DE:  MOVLW  02
28E0:  MOVWF  20
28E2:  MOVWF  22
28E4:  MOVLW  01
28E6:  MOVWF  44
28E8:  CLRF   37
28EA:  MOVLW  0C
28EC:  MOVWF  5D
28EE:  CALL   08F0
....................       } 
....................       break; 
28F2:  BRA    28F4
....................      } 
....................          
....................    } 
28F4:  BRA    26AE
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    while(Menu == 6)   // Menu de Tiempo de Post-Purga 
....................    { 
28F6:  MOVF   1C,W
28F8:  SUBLW  06
28FA:  BTFSS  FD8.2
28FC:  BRA    2B56
....................     if(Cambio==1) 
28FE:  DECFSZ 44,W
2900:  BRA    29A2
....................      { 
....................       lcd_gotoxy(1,1); 
2902:  MOVLW  01
2904:  MOVWF  5E
2906:  MOVWF  5F
2908:  CALL   083C
....................       printf(lcd_putc,"     Tiempo  de      "); 
290C:  MOVLW  10
290E:  MOVWF  FF6
2910:  MOVLW  05
2912:  MOVWF  FF7
2914:  CALL   0CA2
....................       lcd_gotoxy(1,2); 
2918:  MOVLW  01
291A:  MOVWF  5E
291C:  MOVLW  02
291E:  MOVWF  5F
2920:  CALL   083C
....................       printf(lcd_putc,"     Post-Purga      "); 
2924:  MOVLW  26
2926:  MOVWF  FF6
2928:  MOVLW  05
292A:  MOVWF  FF7
292C:  CALL   0CA2
....................       lcd_gotoxy(6,3); 
2930:  MOVLW  06
2932:  MOVWF  5E
2934:  MOVLW  03
2936:  MOVWF  5F
2938:  CALL   083C
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
293C:  MOVFF  33,50
2940:  MOVLW  01
2942:  MOVWF  51
2944:  CALL   0F46
2948:  MOVLW  3A
294A:  MOVWF  5D
294C:  CALL   08F0
2950:  MOVFF  31,50
2954:  MOVLW  01
2956:  MOVWF  51
2958:  CALL   0F46
295C:  MOVLW  45
295E:  MOVWF  FF6
2960:  MOVLW  05
2962:  MOVWF  FF7
2964:  MOVLW  08
2966:  MOVWF  50
2968:  CALL   0CC2
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
296C:  MOVLW  06
296E:  ADDWF  26,W
2970:  MOVWF  50
2972:  MOVWF  5E
2974:  MOVLW  04
2976:  MOVWF  5F
2978:  CALL   083C
....................       lcd_putc(t[2]); 
297C:  MOVFF  3A,5D
2980:  CALL   08F0
....................       if(unidad2<1) 
2984:  BTFSC  26.7
2986:  BRA    298E
2988:  MOVF   26,W
298A:  SUBLW  00
298C:  BNC   2992
....................          unidad2=1; 
298E:  MOVLW  01
2990:  MOVWF  26
....................       if(unidad2>3) 
2992:  BTFSC  26.7
2994:  BRA    29A0
2996:  MOVF   26,W
2998:  SUBLW  03
299A:  BC    29A0
....................          unidad2=3; 
299C:  MOVLW  03
299E:  MOVWF  26
....................       Cambio=0; 
29A0:  CLRF   44
....................      } 
....................       
....................      lee_pulsad(); 
29A2:  CALL   0DD0
....................       
....................      Switch(tecla) 
....................       { 
29A6:  MOVF   3B,W
29A8:  XORLW  55
29AA:  BZ    29BA
29AC:  XORLW  11
29AE:  BZ    2A02
29B0:  XORLW  16
29B2:  BZ    2A46
29B4:  XORLW  1E
29B6:  BZ    2A74
29B8:  BRA    2B54
....................        
....................       Case 'U': 
....................       { 
....................          if(unidad2==1) 
29BA:  DECFSZ 26,W
29BC:  BRA    29DC
....................          { 
....................             ppurga_minutos_pro++; 
29BE:  INCF   33,F
....................             if(ppurga_minutos_pro>59) 
29C0:  BTFSC  33.7
29C2:  BRA    29CC
29C4:  MOVF   33,W
29C6:  SUBLW  3B
29C8:  BC    29CC
....................                ppurga_minutos_pro=0; 
29CA:  CLRF   33
....................                 
....................             delay_ms(300); 
29CC:  MOVLW  02
29CE:  MOVWF  50
29D0:  MOVLW  96
29D2:  MOVWF  x63
29D4:  CALL   075A
29D8:  DECFSZ 50,F
29DA:  BRA    29D0
....................              
....................          } 
....................           
....................          if(unidad2==3) 
29DC:  MOVF   26,W
29DE:  SUBLW  03
29E0:  BNZ   2A00
....................          { 
....................             ppurga_segundos_pro++; 
29E2:  INCF   31,F
....................             if(ppurga_segundos_pro>59) 
29E4:  BTFSC  31.7
29E6:  BRA    29F0
29E8:  MOVF   31,W
29EA:  SUBLW  3B
29EC:  BC    29F0
....................                ppurga_segundos_pro=0; 
29EE:  CLRF   31
....................                 
....................             delay_ms(300); 
29F0:  MOVLW  02
29F2:  MOVWF  50
29F4:  MOVLW  96
29F6:  MOVWF  x63
29F8:  CALL   075A
29FC:  DECFSZ 50,F
29FE:  BRA    29F4
....................          } 
....................       } 
....................       break; 
2A00:  BRA    2B54
....................        
....................       Case 'D': 
....................       { 
....................          if(unidad2==1) 
2A02:  DECFSZ 26,W
2A04:  BRA    2A22
....................          { 
....................             ppurga_minutos_pro--; 
2A06:  DECF   33,F
....................             if(ppurga_minutos_pro<0) 
2A08:  BTFSC  33.7
2A0A:  BRA    2A0E
2A0C:  BRA    2A12
....................                ppurga_minutos_pro=59; 
2A0E:  MOVLW  3B
2A10:  MOVWF  33
....................                 
....................             delay_ms(300); 
2A12:  MOVLW  02
2A14:  MOVWF  50
2A16:  MOVLW  96
2A18:  MOVWF  x63
2A1A:  CALL   075A
2A1E:  DECFSZ 50,F
2A20:  BRA    2A16
....................          } 
....................           
....................          if(unidad2==3) 
2A22:  MOVF   26,W
2A24:  SUBLW  03
2A26:  BNZ   2A44
....................          { 
....................             ppurga_segundos_pro--; 
2A28:  DECF   31,F
....................             if(ppurga_segundos_pro<0) 
2A2A:  BTFSC  31.7
2A2C:  BRA    2A30
2A2E:  BRA    2A34
....................                ppurga_segundos_pro=59; 
2A30:  MOVLW  3B
2A32:  MOVWF  31
....................                 
....................             delay_ms(300); 
2A34:  MOVLW  02
2A36:  MOVWF  50
2A38:  MOVLW  96
2A3A:  MOVWF  x63
2A3C:  CALL   075A
2A40:  DECFSZ 50,F
2A42:  BRA    2A38
....................          } 
....................       } 
....................       break; 
2A44:  BRA    2B54
....................        
....................       Case 'R': 
....................       { 
....................          if(unidad2==1) 
2A46:  DECFSZ 26,W
2A48:  BRA    2A50
....................          { 
....................             unidad2=3; 
2A4A:  MOVLW  03
2A4C:  MOVWF  26
....................          } 
....................          else 
2A4E:  BRA    2A5A
....................          { 
....................             if(unidad2==3) 
2A50:  MOVF   26,W
2A52:  SUBLW  03
2A54:  BNZ   2A5A
....................             { 
....................                unidad2=1; 
2A56:  MOVLW  01
2A58:  MOVWF  26
....................             } 
....................          } 
....................          delay_ms(500); 
2A5A:  MOVLW  02
2A5C:  MOVWF  50
2A5E:  MOVLW  FA
2A60:  MOVWF  x63
2A62:  CALL   075A
2A66:  DECFSZ 50,F
2A68:  BRA    2A5E
....................          printf(lcd_putc,"\f"); 
2A6A:  MOVLW  0C
2A6C:  MOVWF  5D
2A6E:  CALL   08F0
....................       } 
....................       break; 
2A72:  BRA    2B54
....................        
....................       Case 'L': 
....................       { 
....................          delay_ms(200); 
2A74:  MOVLW  C8
2A76:  MOVWF  x63
2A78:  CALL   075A
....................          printf(lcd_putc,"\f"); 
2A7C:  MOVLW  0C
2A7E:  MOVWF  5D
2A80:  CALL   08F0
....................          lcd_gotoxy(1,2); 
2A84:  MOVLW  01
2A86:  MOVWF  5E
2A88:  MOVLW  02
2A8A:  MOVWF  5F
2A8C:  CALL   083C
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2A90:  MOVLW  4E
2A92:  MOVWF  FF6
2A94:  MOVLW  05
2A96:  MOVWF  FF7
2A98:  CALL   0CA2
....................          lcd_gotoxy(1,3); 
2A9C:  MOVLW  01
2A9E:  MOVWF  5E
2AA0:  MOVLW  03
2AA2:  MOVWF  5F
2AA4:  CALL   083C
....................          printf(lcd_putc,"  Correctamente  "); 
2AA8:  MOVLW  60
2AAA:  MOVWF  FF6
2AAC:  MOVLW  05
2AAE:  MOVWF  FF7
2AB0:  CALL   0CA2
....................          write_eeprom(22,ppurga_minutos_pro); 
2AB4:  MOVLW  16
2AB6:  MOVWF  FA9
2AB8:  MOVFF  33,FA8
2ABC:  BCF    FA6.6
2ABE:  BCF    FA6.7
2AC0:  BSF    FA6.2
2AC2:  MOVF   FF2,W
2AC4:  MOVWF  00
2AC6:  BCF    FF2.7
2AC8:  MOVLB  F
2ACA:  MOVLW  55
2ACC:  MOVWF  FA7
2ACE:  MOVLW  AA
2AD0:  MOVWF  FA7
2AD2:  BSF    FA6.1
2AD4:  BTFSC  FA6.1
2AD6:  BRA    2AD4
2AD8:  BCF    FA6.2
2ADA:  MOVF   00,W
2ADC:  IORWF  FF2,F
....................          delay_ms(20); 
2ADE:  MOVLW  14
2AE0:  MOVLB  0
2AE2:  MOVWF  x63
2AE4:  CALL   075A
....................          write_eeprom(23,ppurga_segundos_pro); 
2AE8:  MOVLW  17
2AEA:  MOVWF  FA9
2AEC:  MOVFF  31,FA8
2AF0:  BCF    FA6.6
2AF2:  BCF    FA6.7
2AF4:  BSF    FA6.2
2AF6:  MOVF   FF2,W
2AF8:  MOVWF  00
2AFA:  BCF    FF2.7
2AFC:  MOVLB  F
2AFE:  MOVLW  55
2B00:  MOVWF  FA7
2B02:  MOVLW  AA
2B04:  MOVWF  FA7
2B06:  BSF    FA6.1
2B08:  BTFSC  FA6.1
2B0A:  BRA    2B08
2B0C:  BCF    FA6.2
2B0E:  MOVF   00,W
2B10:  IORWF  FF2,F
....................          delay_ms(20); 
2B12:  MOVLW  14
2B14:  MOVLB  0
2B16:  MOVWF  x63
2B18:  CALL   075A
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
2B1C:  MOVFF  33,32
2B20:  MOVFF  31,30
....................          delay_ms(700); 
2B24:  MOVLW  04
2B26:  MOVWF  50
2B28:  MOVLW  AF
2B2A:  MOVWF  x63
2B2C:  CALL   075A
2B30:  DECFSZ 50,F
2B32:  BRA    2B28
....................          delay_ms(30);Menu=1;Cambio=1;Flecha=2;Flecha2=2;paso=0;printf(lcd_putc,"\f"); 
2B34:  MOVLW  1E
2B36:  MOVWF  x63
2B38:  CALL   075A
2B3C:  MOVLW  01
2B3E:  MOVWF  1C
2B40:  MOVWF  44
2B42:  MOVLW  02
2B44:  MOVWF  20
2B46:  MOVWF  22
2B48:  CLRF   37
2B4A:  MOVLW  0C
2B4C:  MOVWF  5D
2B4E:  CALL   08F0
....................       } 
....................       break; 
2B52:  BRA    2B54
....................       } 
....................         
....................    } 
2B54:  BRA    28F6
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................  
....................    while(Menu == 7)   // Menu de Velocidad de motor 
....................    { 
2B56:  MOVF   1C,W
2B58:  SUBLW  07
2B5A:  BTFSS  FD8.2
2B5C:  BRA    2DB0
....................        
....................       lcd_gotoxy(1,2); 
2B5E:  MOVLW  01
2B60:  MOVWF  5E
2B62:  MOVLW  02
2B64:  MOVWF  5F
2B66:  CALL   083C
....................       printf(lcd_putc,"  Velocidad Motor=  "); 
2B6A:  MOVLW  72
2B6C:  MOVWF  FF6
2B6E:  MOVLW  05
2B70:  MOVWF  FF7
2B72:  CALL   0CA2
....................        
....................       vel=((float)tmp/254)*100; 
2B76:  CLRF   52
2B78:  MOVFF  1B,51
2B7C:  CALL   0C5C
2B80:  MOVFF  00,50
2B84:  MOVFF  01,51
2B88:  MOVFF  02,52
2B8C:  MOVFF  03,53
2B90:  MOVFF  03,57
2B94:  MOVFF  02,56
2B98:  MOVFF  01,55
2B9C:  MOVFF  00,54
2BA0:  CLRF   5B
2BA2:  CLRF   5A
2BA4:  MOVLW  7E
2BA6:  MOVWF  59
2BA8:  MOVLW  86
2BAA:  MOVWF  58
2BAC:  CALL   15F8
2BB0:  MOVFF  00,50
2BB4:  MOVFF  01,51
2BB8:  MOVFF  02,52
2BBC:  MOVFF  03,53
2BC0:  MOVFF  03,60
2BC4:  MOVFF  02,5F
2BC8:  MOVFF  01,5E
2BCC:  MOVFF  00,5D
2BD0:  CLRF   x64
2BD2:  CLRF   x63
2BD4:  MOVLW  48
2BD6:  MOVWF  x62
2BD8:  MOVLW  85
2BDA:  MOVWF  x61
2BDC:  CALL   0FAC
2BE0:  MOVFF  03,1A
2BE4:  MOVFF  02,19
2BE8:  MOVFF  01,18
2BEC:  MOVFF  00,17
....................       v=(int8)vel; 
2BF0:  MOVFF  1A,53
2BF4:  MOVFF  19,52
2BF8:  MOVFF  18,51
2BFC:  MOVFF  17,50
2C00:  CALL   15C0
2C04:  MOVFF  01,16
....................       lcd_gotoxy(1,3); 
2C08:  MOVLW  01
2C0A:  MOVWF  5E
2C0C:  MOVLW  03
2C0E:  MOVWF  5F
2C10:  CALL   083C
....................       printf(lcd_putc,"        %i%%        ",v); 
2C14:  MOVLW  88
2C16:  MOVWF  FF6
2C18:  MOVLW  05
2C1A:  MOVWF  FF7
2C1C:  MOVLW  08
2C1E:  MOVWF  50
2C20:  CALL   0CC2
2C24:  MOVFF  16,50
2C28:  MOVLW  1F
2C2A:  MOVWF  51
2C2C:  CALL   0D08
2C30:  MOVLW  25
2C32:  MOVWF  5D
2C34:  CALL   08F0
2C38:  MOVLW  94
2C3A:  MOVWF  FF6
2C3C:  MOVLW  05
2C3E:  MOVWF  FF7
2C40:  MOVLW  08
2C42:  MOVWF  50
2C44:  CALL   0CC2
....................        
....................        
....................        
....................        
....................       if(tmp<1) 
2C48:  MOVF   1B,F
2C4A:  BNZ   2C50
....................       {tmp=1;} 
2C4C:  MOVLW  01
2C4E:  MOVWF  1B
....................     
....................       if(tmp>254) 
2C50:  MOVF   1B,W
2C52:  SUBLW  FE
2C54:  BC    2C5A
....................       {tmp=254;} 
2C56:  MOVLW  FE
2C58:  MOVWF  1B
....................        
....................       lee_pulsad(); 
2C5A:  CALL   0DD0
....................     
....................      Switch(tecla) 
....................       { 
2C5E:  MOVF   3B,W
2C60:  XORLW  55
2C62:  BZ    2C74
2C64:  XORLW  11
2C66:  BZ    2C8C
2C68:  XORLW  16
2C6A:  BZ    2CA4
2C6C:  XORLW  1E
2C6E:  BTFSC  FD8.2
2C70:  BRA    2D64
2C72:  BRA    2DAE
....................             
....................       Case 'U': 
....................       { 
....................        
....................         tmp+=1;delay_ms(30); 
2C74:  MOVLW  01
2C76:  ADDWF  1B,F
2C78:  MOVLW  1E
2C7A:  MOVWF  x63
2C7C:  CALL   075A
....................         ajuste_vel(tmp); 
2C80:  MOVFF  1B,50
2C84:  CALL   1752
....................         Flanco=0; 
2C88:  BCF    34.3
....................          
....................       } 
....................       break; 
2C8A:  BRA    2DAE
....................        
....................       Case 'D': 
....................       { 
....................         tmp-=1;delay_ms(30); 
2C8C:  MOVLW  01
2C8E:  SUBWF  1B,F
2C90:  MOVLW  1E
2C92:  MOVWF  x63
2C94:  CALL   075A
....................         ajuste_vel(tmp); 
2C98:  MOVFF  1B,50
2C9C:  CALL   1752
....................         Flanco2=0; 
2CA0:  BCF    34.5
....................       } 
....................       break; 
2CA2:  BRA    2DAE
....................        
....................       Case 'R': 
....................       { 
....................         ajuste_vel(tmp); 
2CA4:  MOVFF  1B,50
2CA8:  CALL   1752
....................         write_eeprom(13,tmp);delay_ms(500); 
2CAC:  MOVLW  0D
2CAE:  MOVWF  FA9
2CB0:  MOVFF  1B,FA8
2CB4:  BCF    FA6.6
2CB6:  BCF    FA6.7
2CB8:  BSF    FA6.2
2CBA:  MOVF   FF2,W
2CBC:  MOVWF  00
2CBE:  BCF    FF2.7
2CC0:  MOVLB  F
2CC2:  MOVLW  55
2CC4:  MOVWF  FA7
2CC6:  MOVLW  AA
2CC8:  MOVWF  FA7
2CCA:  BSF    FA6.1
2CCC:  BTFSC  FA6.1
2CCE:  BRA    2CCC
2CD0:  BCF    FA6.2
2CD2:  MOVF   00,W
2CD4:  IORWF  FF2,F
2CD6:  MOVLW  02
2CD8:  MOVWF  50
2CDA:  MOVLW  FA
2CDC:  MOVLB  0
2CDE:  MOVWF  x63
2CE0:  CALL   075A
2CE4:  DECFSZ 50,F
2CE6:  BRA    2CEA
2CE8:  BRA    2CEE
2CEA:  MOVLB  F
2CEC:  BRA    2CDA
....................         lcd_gotoxy(1,2); 
2CEE:  MOVLW  01
2CF0:  MOVWF  5E
2CF2:  MOVLW  02
2CF4:  MOVWF  5F
2CF6:  CALL   083C
....................         delay_ms(500); 
2CFA:  MOVLW  02
2CFC:  MOVWF  50
2CFE:  MOVLW  FA
2D00:  MOVWF  x63
2D02:  CALL   075A
2D06:  DECFSZ 50,F
2D08:  BRA    2CFE
....................          printf(lcd_putc,"\f"); 
2D0A:  MOVLW  0C
2D0C:  MOVWF  5D
2D0E:  CALL   08F0
....................          lcd_gotoxy(1,2); 
2D12:  MOVLW  01
2D14:  MOVWF  5E
2D16:  MOVLW  02
2D18:  MOVWF  5F
2D1A:  CALL   083C
....................          printf(lcd_putc,"  Valor almacenado  "); 
2D1E:  MOVLW  9E
2D20:  MOVWF  FF6
2D22:  MOVLW  05
2D24:  MOVWF  FF7
2D26:  CALL   0CA2
....................          lcd_gotoxy(1,3); 
2D2A:  MOVLW  01
2D2C:  MOVWF  5E
2D2E:  MOVLW  03
2D30:  MOVWF  5F
2D32:  CALL   083C
....................          printf(lcd_putc,"   Correctamente   "); 
2D36:  MOVLW  B4
2D38:  MOVWF  FF6
2D3A:  MOVLW  05
2D3C:  MOVWF  FF7
2D3E:  CALL   0CA2
....................         Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500); 
2D42:  MOVLW  01
2D44:  MOVWF  1C
2D46:  CLRF   37
2D48:  MOVLW  02
2D4A:  MOVWF  20
2D4C:  MOVWF  22
2D4E:  MOVLW  0B
2D50:  MOVWF  1F
2D52:  MOVLW  02
2D54:  MOVWF  50
2D56:  MOVLW  FA
2D58:  MOVWF  x63
2D5A:  CALL   075A
2D5E:  DECFSZ 50,F
2D60:  BRA    2D56
....................       } 
....................       break; 
2D62:  BRA    2DAE
....................        
....................       Case 'L': 
....................       { 
....................         Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2D64:  MOVLW  01
2D66:  MOVWF  1C
2D68:  CLRF   37
2D6A:  MOVLW  02
2D6C:  MOVWF  20
2D6E:  MOVWF  22
2D70:  MOVLW  0B
2D72:  MOVWF  1F
2D74:  MOVLW  02
2D76:  MOVWF  50
2D78:  MOVLW  FA
2D7A:  MOVWF  x63
2D7C:  CALL   075A
2D80:  DECFSZ 50,F
2D82:  BRA    2D78
2D84:  MOVLW  0C
2D86:  MOVWF  5D
2D88:  CALL   08F0
....................         tmp=read_eeprom(13); 
2D8C:  MOVFF  FF2,50
2D90:  BCF    FF2.7
2D92:  MOVLW  0D
2D94:  MOVWF  FA9
2D96:  BCF    FA6.6
2D98:  BCF    FA6.7
2D9A:  BSF    FA6.0
2D9C:  MOVF   FA8,W
2D9E:  BTFSC  50.7
2DA0:  BSF    FF2.7
2DA2:  MOVWF  1B
....................         ajuste_vel(tmp); 
2DA4:  MOVFF  1B,50
2DA8:  CALL   1752
....................          
....................       }   
....................       break; 
2DAC:  BRA    2DAE
....................       } 
....................        
....................    } 
2DAE:  BRA    2B56
....................  
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
2DB0:  MOVF   1C,W
2DB2:  SUBLW  14
2DB4:  BTFSS  FD8.2
2DB6:  BRA    304A
....................    { 
....................       if(Cambio==1) 
2DB8:  DECFSZ 44,W
2DBA:  BRA    2F6A
....................       { 
....................       lcd_send_byte(0,1); //Borra la pantalla, si se entra por primera vez 
2DBC:  CLRF   x61
2DBE:  MOVLW  01
2DC0:  MOVWF  x62
2DC2:  CALL   07A8
....................       lcd_gotoxy(1,1);                      
2DC6:  MOVLW  01
2DC8:  MOVWF  5E
2DCA:  MOVWF  5F
2DCC:  CALL   083C
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
2DD0:  MOVLW  C8
2DD2:  MOVWF  FF6
2DD4:  MOVLW  05
2DD6:  MOVWF  FF7
2DD8:  CALL   0CA2
....................       lcd_gotoxy(1,2); 
2DDC:  MOVLW  01
2DDE:  MOVWF  5E
2DE0:  MOVLW  02
2DE2:  MOVWF  5F
2DE4:  CALL   083C
....................       //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................       vel=((float)tmp/254)*100; 
2DE8:  CLRF   52
2DEA:  MOVFF  1B,51
2DEE:  CALL   0C5C
2DF2:  MOVFF  00,50
2DF6:  MOVFF  01,51
2DFA:  MOVFF  02,52
2DFE:  MOVFF  03,53
2E02:  MOVFF  03,57
2E06:  MOVFF  02,56
2E0A:  MOVFF  01,55
2E0E:  MOVFF  00,54
2E12:  CLRF   5B
2E14:  CLRF   5A
2E16:  MOVLW  7E
2E18:  MOVWF  59
2E1A:  MOVLW  86
2E1C:  MOVWF  58
2E1E:  CALL   15F8
2E22:  MOVFF  00,50
2E26:  MOVFF  01,51
2E2A:  MOVFF  02,52
2E2E:  MOVFF  03,53
2E32:  MOVFF  03,60
2E36:  MOVFF  02,5F
2E3A:  MOVFF  01,5E
2E3E:  MOVFF  00,5D
2E42:  CLRF   x64
2E44:  CLRF   x63
2E46:  MOVLW  48
2E48:  MOVWF  x62
2E4A:  MOVLW  85
2E4C:  MOVWF  x61
2E4E:  CALL   0FAC
2E52:  MOVFF  03,1A
2E56:  MOVFF  02,19
2E5A:  MOVFF  01,18
2E5E:  MOVFF  00,17
....................       v=(int8)vel; 
2E62:  MOVFF  1A,53
2E66:  MOVFF  19,52
2E6A:  MOVFF  18,51
2E6E:  MOVFF  17,50
2E72:  CALL   15C0
2E76:  MOVFF  01,16
....................       printf(lcd_putc,"Ext=%i%%",v); 
2E7A:  MOVLW  D2
2E7C:  MOVWF  FF6
2E7E:  MOVLW  05
2E80:  MOVWF  FF7
2E82:  MOVLW  04
2E84:  MOVWF  50
2E86:  CALL   0CC2
2E8A:  MOVFF  16,50
2E8E:  MOVLW  1F
2E90:  MOVWF  51
2E92:  CALL   0D08
2E96:  MOVLW  25
2E98:  MOVWF  5D
2E9A:  CALL   08F0
....................       lcd_gotoxy(1,3); 
2E9E:  MOVLW  01
2EA0:  MOVWF  5E
2EA2:  MOVLW  03
2EA4:  MOVWF  5F
2EA6:  CALL   083C
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
2EAA:  MOVLW  DC
2EAC:  MOVWF  FF6
2EAE:  MOVLW  05
2EB0:  MOVWF  FF7
2EB2:  CALL   0CA2
....................       lcd_gotoxy(11,2); 
2EB6:  MOVLW  0B
2EB8:  MOVWF  5E
2EBA:  MOVLW  02
2EBC:  MOVWF  5F
2EBE:  CALL   083C
....................       printf(lcd_putc,"Flujo=--- "); 
2EC2:  MOVLW  EC
2EC4:  MOVWF  FF6
2EC6:  MOVLW  05
2EC8:  MOVWF  FF7
2ECA:  CALL   0CA2
....................       lcd_gotoxy(10,1);                      
2ECE:  MOVLW  0A
2ED0:  MOVWF  5E
2ED2:  MOVLW  01
2ED4:  MOVWF  5F
2ED6:  CALL   083C
....................       printf(lcd_putc,"Filtro:OK "); 
2EDA:  MOVLW  F8
2EDC:  MOVWF  FF6
2EDE:  MOVLW  05
2EE0:  MOVWF  FF7
2EE2:  CALL   0CA2
....................        
....................       if(estadofl==1) 
2EE6:  BTFSS  34.0
2EE8:  BRA    2F08
....................       { 
....................          Luz_Blanca_on; 
2EEA:  BSF    F8A.4
2EEC:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
2EEE:  MOVLW  01
2EF0:  MOVWF  5E
2EF2:  MOVLW  04
2EF4:  MOVWF  5F
2EF6:  CALL   083C
....................          printf(lcd_putc,"Luz: ON "); 
2EFA:  MOVLW  04
2EFC:  MOVWF  FF6
2EFE:  MOVLW  06
2F00:  MOVWF  FF7
2F02:  CALL   0CA2
....................       } 
....................       else 
2F06:  BRA    2F24
....................       { 
....................          Luz_Blanca_off; 
2F08:  BCF    F8A.4
2F0A:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
2F0C:  MOVLW  01
2F0E:  MOVWF  5E
2F10:  MOVLW  04
2F12:  MOVWF  5F
2F14:  CALL   083C
....................          printf(lcd_putc,"Luz:OFF "); 
2F18:  MOVLW  0E
2F1A:  MOVWF  FF6
2F1C:  MOVLW  06
2F1E:  MOVWF  FF7
2F20:  CALL   0CA2
....................       } 
....................        
....................       if(estadomv==1) 
2F24:  BTFSS  34.1
2F26:  BRA    2F4A
....................       { 
....................          lcd_gotoxy(10,4); 
2F28:  MOVLW  0A
2F2A:  MOVWF  5E
2F2C:  MOVLW  04
2F2E:  MOVWF  5F
2F30:  CALL   083C
....................          printf(lcd_putc,"Motor: ON "); 
2F34:  MOVLW  18
2F36:  MOVWF  FF6
2F38:  MOVLW  06
2F3A:  MOVWF  FF7
2F3C:  CALL   0CA2
....................          ajuste_vel(tmp); 
2F40:  MOVFF  1B,50
2F44:  CALL   1752
....................           
....................       } 
....................       else 
2F48:  BRA    2F68
....................       {    
....................          lcd_gotoxy(10,4); 
2F4A:  MOVLW  0A
2F4C:  MOVWF  5E
2F4E:  MOVLW  04
2F50:  MOVWF  5F
2F52:  CALL   083C
....................          printf(lcd_putc,"Motor:OFF ");  
2F56:  MOVLW  24
2F58:  MOVWF  FF6
2F5A:  MOVLW  06
2F5C:  MOVWF  FF7
2F5E:  CALL   0CA2
....................          ajuste_vel(0); 
2F62:  CLRF   50
2F64:  CALL   1752
....................       } 
....................       Cambio=0; 
2F68:  CLRF   44
....................       } 
....................    
....................       if(flag_filtro==1) 
2F6A:  BTFSS  35.1
2F6C:  BRA    2FDC
....................       { 
....................         if(flag_hrs==1) 
2F6E:  BTFSS  36.0
2F70:  BRA    2FDC
....................         { 
....................          if(horas>=setpoint) 
2F72:  CLRF   52
2F74:  MOVFF  2C,51
2F78:  BTFSC  51.7
2F7A:  DECF   52,F
2F7C:  CALL   1758
2F80:  MOVFF  48,54
2F84:  MOVFF  47,53
2F88:  MOVFF  46,52
2F8C:  MOVFF  45,51
2F90:  MOVFF  03,58
2F94:  MOVFF  02,57
2F98:  MOVFF  01,56
2F9C:  MOVFF  00,55
2FA0:  CALL   12E0
2FA4:  BC    2FA8
2FA6:  BNZ   2FC2
....................          { 
....................             lcd_gotoxy(10,1);                      
2FA8:  MOVLW  0A
2FAA:  MOVWF  5E
2FAC:  MOVLW  01
2FAE:  MOVWF  5F
2FB0:  CALL   083C
....................             printf(lcd_putc,"Filtro:CAM"); 
2FB4:  MOVLW  30
2FB6:  MOVWF  FF6
2FB8:  MOVLW  06
2FBA:  MOVWF  FF7
2FBC:  CALL   0CA2
....................          } 
....................          else 
2FC0:  BRA    2FDA
....................          { 
....................             lcd_gotoxy(10,1);                      
2FC2:  MOVLW  0A
2FC4:  MOVWF  5E
2FC6:  MOVLW  01
2FC8:  MOVWF  5F
2FCA:  CALL   083C
....................             printf(lcd_putc,"Filtro:OK "); 
2FCE:  MOVLW  3C
2FD0:  MOVWF  FF6
2FD2:  MOVLW  06
2FD4:  MOVWF  FF7
2FD6:  CALL   0CA2
....................          } 
....................          flag_hrs=0; 
2FDA:  BCF    36.0
....................         }   
....................       } 
....................           
....................   // ********* Aqui comienza el monitoreo de teclas y tiempos          
....................       
....................      lee_pulsad(); 
2FDC:  CALL   0DD0
....................       
....................       Switch (tecla) 
....................       { 
2FE0:  MOVF   3B,W
2FE2:  XORLW  44
2FE4:  BZ    2FF4
2FE6:  XORLW  08
2FE8:  BZ    2FF8
2FEA:  XORLW  19
2FEC:  BZ    3022
2FEE:  XORLW  07
2FF0:  BZ    303C
2FF2:  BRA    304A
....................        Case 'D':       //Si oprime hacia Abajo 
....................        {  
....................         estadofl=!estadofl; 
2FF4:  BTG    34.0
....................        } 
....................        break; 
2FF6:  BRA    304A
....................        
....................              
....................       Case 'L':      //Si oprime hacia Izquierda 
....................       {   
....................          estadomv=!estadomv; 
2FF8:  BTG    34.1
....................          if(estadomv){ 
2FFA:  BTFSS  34.1
2FFC:  BRA    3004
....................             Motor_on; 
2FFE:  BSF    F8A.5
3000:  BCF    F93.5
....................          }else{ 
3002:  BRA    3008
....................             Motor_off; 
3004:  BCF    F8A.5
3006:  BCF    F93.5
....................          } 
....................          delay_ms(100); 
3008:  MOVLW  64
300A:  MOVWF  x63
300C:  CALL   075A
....................          lcd_init(); 
3010:  CALL   07E6
....................          delay_ms(100); 
3014:  MOVLW  64
3016:  MOVWF  x63
3018:  CALL   075A
....................          Cambio=1; 
301C:  MOVLW  01
301E:  MOVWF  44
....................       } 
....................       break; 
3020:  BRA    304A
....................        
....................     
....................        Case 'U':      // Si oprime Arriba 
....................       {   
....................         printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
3022:  MOVLW  0C
3024:  MOVWF  5D
3026:  CALL   08F0
302A:  MOVLW  01
302C:  MOVWF  1C
302E:  CLRF   37
3030:  MOVLW  02
3032:  MOVWF  20
3034:  MOVWF  22
3036:  MOVLW  0B
3038:  MOVWF  1F
....................       } 
....................       break; 
303A:  BRA    304A
....................              
....................        Case 'R':      // Si oprime Derecha 
....................        {   
....................         printf(lcd_putc,"\f");Menu=40; 
303C:  MOVLW  0C
303E:  MOVWF  5D
3040:  CALL   08F0
3044:  MOVLW  28
3046:  MOVWF  1C
....................        } 
....................        break; 
3048:  BRA    304A
....................    } 
....................  } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
304A:  MOVF   1C,W
304C:  SUBLW  1E
304E:  BTFSS  FD8.2
3050:  BRA    31DE
....................       if(Cambio==1) 
3052:  DECFSZ 44,W
3054:  BRA    3086
....................       { 
....................       lcd_gotoxy(1,1); 
3056:  MOVLW  01
3058:  MOVWF  5E
305A:  MOVWF  5F
305C:  CALL   083C
....................       printf(lcd_putc,"    !Post-Purga!    "); 
3060:  MOVLW  48
3062:  MOVWF  FF6
3064:  MOVLW  06
3066:  MOVWF  FF7
3068:  CALL   0CA2
....................       lcd_gotoxy(1,2); 
306C:  MOVLW  01
306E:  MOVWF  5E
3070:  MOVLW  02
3072:  MOVWF  5F
3074:  CALL   083C
....................       printf(lcd_putc,"                    "); 
3078:  MOVLW  5E
307A:  MOVWF  FF6
307C:  MOVLW  06
307E:  MOVWF  FF7
3080:  CALL   0CA2
....................       Cambio=0; 
3084:  CLRF   44
....................       } 
....................               
....................       if(Lectura==1) 
3086:  BTFSS  36.4
3088:  BRA    31DC
....................       { 
....................          ajuste_vel(tmp); 
308A:  MOVFF  1B,50
308E:  CALL   1752
....................          Luz_Blanca_off; 
3092:  BCF    F8A.4
3094:  BCF    F93.4
....................          lcd_gotoxy(1,3); 
3096:  MOVLW  01
3098:  MOVWF  5E
309A:  MOVLW  03
309C:  MOVWF  5F
309E:  CALL   083C
....................          printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos); 
30A2:  MOVLW  74
30A4:  MOVWF  FF6
30A6:  MOVLW  06
30A8:  MOVWF  FF7
30AA:  MOVLW  06
30AC:  MOVWF  50
30AE:  CALL   0CC2
30B2:  MOVFF  32,50
30B6:  MOVLW  01
30B8:  MOVWF  51
30BA:  CALL   0F46
30BE:  MOVLW  3A
30C0:  MOVWF  5D
30C2:  CALL   08F0
30C6:  MOVFF  30,50
30CA:  MOVLW  01
30CC:  MOVWF  51
30CE:  CALL   0F46
30D2:  MOVLW  20
30D4:  MOVWF  5D
30D6:  CALL   08F0
30DA:  MOVLW  20
30DC:  MOVWF  5D
30DE:  CALL   08F0
....................           
....................          if(ppurga_segundos==0 && ppurga_minutos==0) 
30E2:  MOVF   30,F
30E4:  BTFSS  FD8.2
30E6:  BRA    31DA
30E8:  MOVF   32,F
30EA:  BNZ   31DA
....................          { 
....................             write_eeprom(70,segundos); 
30EC:  MOVLW  46
30EE:  MOVWF  FA9
30F0:  MOVFF  2A,FA8
30F4:  BCF    FA6.6
30F6:  BCF    FA6.7
30F8:  BSF    FA6.2
30FA:  MOVF   FF2,W
30FC:  MOVWF  00
30FE:  BCF    FF2.7
3100:  MOVLB  F
3102:  MOVLW  55
3104:  MOVWF  FA7
3106:  MOVLW  AA
3108:  MOVWF  FA7
310A:  BSF    FA6.1
310C:  BTFSC  FA6.1
310E:  BRA    310C
3110:  BCF    FA6.2
3112:  MOVF   00,W
3114:  IORWF  FF2,F
....................             delay_ms(20); 
3116:  MOVLW  14
3118:  MOVLB  0
311A:  MOVWF  x63
311C:  CALL   075A
....................             write_eeprom(71,minutos); 
3120:  MOVLW  47
3122:  MOVWF  FA9
3124:  MOVFF  2B,FA8
3128:  BCF    FA6.6
312A:  BCF    FA6.7
312C:  BSF    FA6.2
312E:  MOVF   FF2,W
3130:  MOVWF  00
3132:  BCF    FF2.7
3134:  MOVLB  F
3136:  MOVLW  55
3138:  MOVWF  FA7
313A:  MOVLW  AA
313C:  MOVWF  FA7
313E:  BSF    FA6.1
3140:  BTFSC  FA6.1
3142:  BRA    3140
3144:  BCF    FA6.2
3146:  MOVF   00,W
3148:  IORWF  FF2,F
....................             delay_ms(20); 
314A:  MOVLW  14
314C:  MOVLB  0
314E:  MOVWF  x63
3150:  CALL   075A
....................             write_eeprom(72,horas); 
3154:  MOVLW  48
3156:  MOVWF  FA9
3158:  MOVFF  2C,FA8
315C:  BCF    FA6.6
315E:  BCF    FA6.7
3160:  BSF    FA6.2
3162:  MOVF   FF2,W
3164:  MOVWF  00
3166:  BCF    FF2.7
3168:  MOVLB  F
316A:  MOVLW  55
316C:  MOVWF  FA7
316E:  MOVLW  AA
3170:  MOVWF  FA7
3172:  BSF    FA6.1
3174:  BTFSC  FA6.1
3176:  BRA    3174
3178:  BCF    FA6.2
317A:  MOVF   00,W
317C:  IORWF  FF2,F
....................             delay_ms(20); 
317E:  MOVLW  14
3180:  MOVLB  0
3182:  MOVWF  x63
3184:  CALL   075A
....................             printf(lcd_putc,"\f"); 
3188:  MOVLW  0C
318A:  MOVWF  5D
318C:  CALL   08F0
....................             lcd_gotoxy(1,2); 
3190:  MOVLW  01
3192:  MOVWF  5E
3194:  MOVLW  02
3196:  MOVWF  5F
3198:  CALL   083C
....................             printf(lcd_putc,"     Proceso      "); 
319C:  MOVLW  86
319E:  MOVWF  FF6
31A0:  MOVLW  06
31A2:  MOVWF  FF7
31A4:  CALL   0CA2
....................             lcd_gotoxy(1,3); 
31A8:  MOVLW  01
31AA:  MOVWF  5E
31AC:  MOVLW  03
31AE:  MOVWF  5F
31B0:  CALL   083C
....................             printf(lcd_putc,"    Finalizado    "); 
31B4:  MOVLW  9A
31B6:  MOVWF  FF6
31B8:  MOVLW  06
31BA:  MOVWF  FF7
31BC:  CALL   0CA2
....................             delay_ms(2000); 
31C0:  MOVLW  08
31C2:  MOVWF  50
31C4:  MOVLW  FA
31C6:  MOVWF  x63
31C8:  CALL   075A
31CC:  DECFSZ 50,F
31CE:  BRA    31C4
....................             printf(lcd_putc,"\f"); 
31D0:  MOVLW  0C
31D2:  MOVWF  5D
31D4:  CALL   08F0
....................             reset_cpu(); 
31D8:  RESET
....................          } 
....................          Lectura=0; 
31DA:  BCF    36.4
....................       } 
....................        
....................    } 
31DC:  BRA    304A
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40)   // Menu de apagado de cabina 
31DE:  MOVF   1C,W
31E0:  SUBLW  28
31E2:  BNZ   32A4
....................    { 
....................     if(Cambio==1) 
31E4:  DECFSZ 44,W
31E6:  BRA    3248
....................      { 
....................    lcd_gotoxy(1,1); 
31E8:  MOVLW  01
31EA:  MOVWF  5E
31EC:  MOVWF  5F
31EE:  CALL   083C
....................    printf(lcd_putc,"   Desea apagar     "); 
31F2:  MOVLW  AE
31F4:  MOVWF  FF6
31F6:  MOVLW  06
31F8:  MOVWF  FF7
31FA:  CALL   0CA2
....................    lcd_gotoxy(1,2); 
31FE:  MOVLW  01
3200:  MOVWF  5E
3202:  MOVLW  02
3204:  MOVWF  5F
3206:  CALL   083C
....................    printf(lcd_putc,"     la cabina      "); 
320A:  MOVLW  C4
320C:  MOVWF  FF6
320E:  MOVLW  06
3210:  MOVWF  FF7
3212:  CALL   0CA2
....................    lcd_gotoxy(1,3); 
3216:  MOVLW  01
3218:  MOVWF  5E
321A:  MOVLW  03
321C:  MOVWF  5F
321E:  CALL   083C
....................    printf(lcd_putc,"   > Aceptar        "); 
3222:  MOVLW  DA
3224:  MOVWF  FF6
3226:  MOVLW  06
3228:  MOVWF  FF7
322A:  CALL   0CA2
....................    lcd_gotoxy(1,4); 
322E:  MOVLW  01
3230:  MOVWF  5E
3232:  MOVLW  04
3234:  MOVWF  5F
3236:  CALL   083C
....................    printf(lcd_putc,"   < Cancelar       "); 
323A:  MOVLW  F0
323C:  MOVWF  FF6
323E:  MOVLW  06
3240:  MOVWF  FF7
3242:  CALL   0CA2
....................    Cambio=0; 
3246:  CLRF   44
....................       } 
....................    
....................    lee_pulsad(); 
3248:  CALL   0DD0
....................     
....................    Switch(tecla) 
....................     { 
324C:  MOVF   3B,W
324E:  XORLW  52
3250:  BZ    3258
3252:  XORLW  1E
3254:  BZ    3278
3256:  BRA    32A4
....................       Case 'R': // Si oprime derecha 
....................       {Menu=30;Cambio=1;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1;} 
3258:  MOVLW  1E
325A:  MOVWF  1C
325C:  MOVLW  01
325E:  MOVWF  44
3260:  MOVFF  25,50
3264:  CALL   0C92
3268:  BCF    F8A.6
326A:  BCF    F93.6
326C:  MOVLW  0C
326E:  MOVWF  5D
3270:  CALL   08F0
3274:  BSF    36.7
....................       break; 
3276:  BRA    32A4
....................             
....................              
....................       Case 'L': // Si oprime Izquierda 
....................       {Menu=20;Cambio=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");} 
3278:  MOVLW  14
327A:  MOVWF  1C
327C:  MOVLW  01
327E:  MOVWF  44
3280:  CLRF   37
3282:  MOVLW  02
3284:  MOVWF  20
3286:  MOVWF  22
3288:  MOVLW  0B
328A:  MOVWF  1F
328C:  MOVLW  02
328E:  MOVWF  50
3290:  MOVLW  FA
3292:  MOVWF  x63
3294:  CALL   075A
3298:  DECFSZ 50,F
329A:  BRA    3290
329C:  MOVLW  0C
329E:  MOVWF  5D
32A0:  CALL   08F0
....................     }        
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    While(Menu == 50) // Menu de Purga 
....................    { 
32A4:  MOVF   1C,W
32A6:  SUBLW  32
32A8:  BTFSS  FD8.2
32AA:  BRA    33EA
....................     if(Cambio==1) 
32AC:  DECFSZ 44,W
32AE:  BRA    3344
....................     { 
....................       lcd_gotoxy(1,1); 
32B0:  MOVLW  01
32B2:  MOVWF  5E
32B4:  MOVWF  5F
32B6:  CALL   083C
....................       printf(lcd_putc,"      !Purga!       "); 
32BA:  MOVLW  06
32BC:  MOVWF  FF6
32BE:  MOVLW  07
32C0:  MOVWF  FF7
32C2:  CALL   0CA2
....................       lcd_gotoxy(1,2); 
32C6:  MOVLW  01
32C8:  MOVWF  5E
32CA:  MOVLW  02
32CC:  MOVWF  5F
32CE:  CALL   083C
....................       printf(lcd_putc,"                    "); 
32D2:  MOVLW  1C
32D4:  MOVWF  FF6
32D6:  MOVLW  07
32D8:  MOVWF  FF7
32DA:  CALL   0CA2
....................       lcd_gotoxy(1,3); 
32DE:  MOVLW  01
32E0:  MOVWF  5E
32E2:  MOVLW  03
32E4:  MOVWF  5F
32E6:  CALL   083C
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos); 
32EA:  MOVLW  32
32EC:  MOVWF  FF6
32EE:  MOVLW  07
32F0:  MOVWF  FF7
32F2:  MOVLW  06
32F4:  MOVWF  50
32F6:  CALL   0CC2
32FA:  MOVFF  27,50
32FE:  MOVLW  01
3300:  MOVWF  51
3302:  CALL   0F46
3306:  MOVLW  3A
3308:  MOVWF  5D
330A:  CALL   08F0
330E:  MOVFF  2E,50
3312:  MOVLW  01
3314:  MOVWF  51
3316:  CALL   0F46
331A:  MOVLW  20
331C:  MOVWF  5D
331E:  CALL   08F0
3322:  MOVLW  20
3324:  MOVWF  5D
3326:  CALL   08F0
332A:  MOVLW  20
332C:  MOVWF  5D
332E:  CALL   08F0
....................       Cambio=0; 
3332:  CLRF   44
....................       Motor_on; 
3334:  BSF    F8A.5
3336:  BCF    F93.5
....................       ajuste_vel(tmp); 
3338:  MOVFF  1B,50
333C:  CALL   1752
....................       Luz_Blanca_off; 
3340:  BCF    F8A.4
3342:  BCF    F93.4
....................     } 
....................       
....................     if(Lectura==1) 
3344:  BTFSS  36.4
3346:  BRA    339E
....................      { 
....................       lcd_gotoxy(1,3); 
3348:  MOVLW  01
334A:  MOVWF  5E
334C:  MOVLW  03
334E:  MOVWF  5F
3350:  CALL   083C
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos); 
3354:  MOVLW  46
3356:  MOVWF  FF6
3358:  MOVLW  07
335A:  MOVWF  FF7
335C:  MOVLW  06
335E:  MOVWF  50
3360:  CALL   0CC2
3364:  MOVFF  27,50
3368:  MOVLW  01
336A:  MOVWF  51
336C:  CALL   0F46
3370:  MOVLW  3A
3372:  MOVWF  5D
3374:  CALL   08F0
3378:  MOVFF  2E,50
337C:  MOVLW  01
337E:  MOVWF  51
3380:  CALL   0F46
3384:  MOVLW  20
3386:  MOVWF  5D
3388:  CALL   08F0
338C:  MOVLW  20
338E:  MOVWF  5D
3390:  CALL   08F0
3394:  MOVLW  20
3396:  MOVWF  5D
3398:  CALL   08F0
....................       Lectura=0; 
339C:  BCF    36.4
....................      } 
....................       
....................     if((LEFT) || ((purga_minutos==0) && (purga_segundos==0))) 
339E:  BSF    F96.2
33A0:  BTFSC  F84.2
33A2:  BRA    33AC
33A4:  MOVF   27,F
33A6:  BNZ   33E8
33A8:  MOVF   2E,F
33AA:  BNZ   33E8
....................     { 
....................       delay_ms(100); 
33AC:  MOVLW  64
33AE:  MOVWF  x63
33B0:  CALL   075A
....................       if(LEFT || ((purga_minutos==0) && (purga_segundos==0))){ 
33B4:  BSF    F96.2
33B6:  BTFSC  F84.2
33B8:  BRA    33C2
33BA:  MOVF   27,F
33BC:  BNZ   33E8
33BE:  MOVF   2E,F
33C0:  BNZ   33E8
....................          tiempo_purga=0;Motor_on;Luz_Blanca_on;estadomv=1;estadofl=1;Menu=20;Cambio=1;delay_ms(500); 
33C2:  BCF    36.6
33C4:  BSF    F8A.5
33C6:  BCF    F93.5
33C8:  BSF    F8A.4
33CA:  BCF    F93.4
33CC:  BSF    34.1
33CE:  BSF    34.0
33D0:  MOVLW  14
33D2:  MOVWF  1C
33D4:  MOVLW  01
33D6:  MOVWF  44
33D8:  MOVLW  02
33DA:  MOVWF  50
33DC:  MOVLW  FA
33DE:  MOVWF  x63
33E0:  CALL   075A
33E4:  DECFSZ 50,F
33E6:  BRA    33DC
....................       } 
....................     } 
....................   
....................   }       
33E8:  BRA    32A4
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................   /* if(tiemporeset>=20) 
....................    { 
....................       lcd_init(); 
....................       tiemporeset=0; 
....................    }*/  
....................  
....................    if(ModoSleep==1) 
33EA:  BTFSS  36.2
33EC:  BRA    33F6
....................       {intensidadpantalla(0);sleep();} 
33EE:  CLRF   50
33F0:  CALL   0C92
33F4:  SLEEP 
....................  
....................    if(Menu!=0 || Menu!=30 || Menu!=50) 
33F6:  MOVF   1C,F
33F8:  BNZ   3406
33FA:  MOVF   1C,W
33FC:  SUBLW  1E
33FE:  BNZ   3406
3400:  MOVF   1C,W
3402:  SUBLW  32
3404:  BZ    347C
....................    { 
....................       if(Lectura==1) 
3406:  BTFSS  36.4
3408:  BRA    347A
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
340A:  CLRF   52
340C:  MOVFF  2C,51
3410:  BTFSC  51.7
3412:  DECF   52,F
3414:  CALL   1758
3418:  MOVFF  48,54
341C:  MOVFF  47,53
3420:  MOVFF  46,52
3424:  MOVFF  45,51
3428:  MOVFF  03,58
342C:  MOVFF  02,57
3430:  MOVFF  01,56
3434:  MOVFF  00,55
3438:  CALL   12E0
343C:  BC    3440
343E:  BNZ   346C
3440:  MOVF   1C,W
3442:  SUBLW  14
3444:  BNZ   346C
....................          { 
....................              if(estadoalarma==1) 
3446:  BTFSS  34.2
3448:  BRA    3450
....................              { 
....................                 Alarma_on; 
344A:  BSF    F8A.6
344C:  BCF    F93.6
....................              } 
....................              else 
344E:  BRA    3454
....................              { 
....................                 Alarma_off; 
3450:  BCF    F8A.6
3452:  BCF    F93.6
....................              } 
....................              estadopantalla=!estadopantalla; 
3454:  BTG    35.2
....................              if(estadopantalla==1) 
3456:  BTFSS  35.2
3458:  BRA    3464
....................              {intensidadpantalla(contraste);} 
345A:  MOVFF  25,50
345E:  CALL   0C92
....................              else 
3462:  BRA    346A
....................              {intensidadpantalla(0);} 
3464:  CLRF   50
3466:  CALL   0C92
....................          } 
....................          else 
346A:  BRA    3478
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
346C:  MOVFF  25,50
3470:  CALL   0C92
3474:  BCF    F8A.6
3476:  BCF    F93.6
....................          } 
....................          Lectura=0; 
3478:  BCF    36.4
....................       } 
....................       //Lectura=0; 
....................    }    
....................    else 
347A:  BRA    3488
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
347C:  MOVFF  25,50
3480:  CALL   0C92
3484:  BCF    F8A.6
3486:  BCF    F93.6
....................    } 
....................     } 
3488:  GOTO   1AD4
.................... } 
....................  
348C:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
