CCS PCH C Compiler, Version 4.104, 5967               04-may.-17 10:10

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2017\Cabina Extractora 120 Bioelectronica #004587606\Firmware\Cabina_Extractora.lst

               ROM used: 24850 bytes (76%)
                         Largest free fragment is 7914
               RAM used: 273 (13%) at main() level
                         313 (15%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   251E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0A66:  MOVLW  01
0A68:  MOVWF  FEA
0A6A:  MOVLW  24
0A6C:  MOVWF  FE9
0A6E:  MOVF   FEF,W
0A70:  BZ    0A8E
0A72:  MOVLW  0F
0A74:  MOVWF  01
0A76:  CLRF   00
0A78:  DECFSZ 00,F
0A7A:  BRA    0A78
0A7C:  DECFSZ 01,F
0A7E:  BRA    0A76
0A80:  MOVLW  8F
0A82:  MOVWF  00
0A84:  DECFSZ 00,F
0A86:  BRA    0A84
0A88:  NOP   
0A8A:  DECFSZ FEF,F
0A8C:  BRA    0A72
0A8E:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0A90:  MOVLB  1
0A92:  SWAPF  x25,W
0A94:  ANDLW  F0
0A96:  MOVWF  00
0A98:  MOVLW  0F
0A9A:  ANDWF  F83,W
0A9C:  IORWF  00,W
0A9E:  MOVWF  F83
....................       delay_cycles(25); 
0AA0:  MOVLW  08
0AA2:  MOVWF  00
0AA4:  DECFSZ 00,F
0AA6:  BRA    0AA4
....................       lcd.enable = 1; 
0AA8:  BSF    F83.2
....................       delay_us(55); 
0AAA:  MOVLW  DB
0AAC:  MOVWF  00
0AAE:  DECFSZ 00,F
0AB0:  BRA    0AAE
0AB2:  BRA    0AB4
....................       lcd.enable = 0; 
0AB4:  BCF    F83.2
.................... } 
0AB6:  MOVLB  0
0AB8:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0ABA:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
0ABC:  MOVLW  02
0ABE:  MOVLB  1
0AC0:  MOVWF  x24
0AC2:  MOVLB  0
0AC4:  RCALL  0A66
....................       lcd.rs = address; 
0AC6:  MOVLB  1
0AC8:  BTFSS  x22.0
0ACA:  BCF    F83.0
0ACC:  BTFSC  x22.0
0ACE:  BSF    F83.0
....................       delay_cycles(25); 
0AD0:  MOVLW  08
0AD2:  MOVWF  00
0AD4:  DECFSZ 00,F
0AD6:  BRA    0AD4
....................       lcd.rw = 0; 
0AD8:  BCF    F83.1
....................       delay_cycles(25); 
0ADA:  MOVLW  08
0ADC:  MOVWF  00
0ADE:  DECFSZ 00,F
0AE0:  BRA    0ADE
....................       lcd.enable = 0; 
0AE2:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0AE4:  SWAPF  x23,W
0AE6:  MOVWF  x24
0AE8:  MOVLW  0F
0AEA:  ANDWF  x24,F
0AEC:  MOVFF  124,125
0AF0:  MOVLB  0
0AF2:  RCALL  0A90
....................       lcd_send_nibble(n & 0xf); 
0AF4:  MOVLB  1
0AF6:  MOVF   x23,W
0AF8:  ANDLW  0F
0AFA:  MOVWF  x24
0AFC:  MOVWF  x25
0AFE:  MOVLB  0
0B00:  RCALL  0A90
.................... } 
0B02:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0B04:  MOVLW  00
0B06:  MOVWF  F95
....................     lcd.rs = 0; 
0B08:  BCF    F83.0
....................     lcd.rw = 0; 
0B0A:  BCF    F83.1
....................     lcd.enable = 0; 
0B0C:  BCF    F83.2
....................     delay_ms(15); 
0B0E:  MOVLW  0F
0B10:  MOVLB  1
0B12:  MOVWF  x24
0B14:  MOVLB  0
0B16:  RCALL  0A66
....................     for(i=1;i<=3;++i) { 
0B18:  MOVLW  01
0B1A:  MOVLB  1
0B1C:  MOVWF  x09
0B1E:  MOVF   x09,W
0B20:  SUBLW  03
0B22:  BNC   0B3C
....................        lcd_send_nibble(3); 
0B24:  MOVLW  03
0B26:  MOVWF  x25
0B28:  MOVLB  0
0B2A:  RCALL  0A90
....................        delay_ms(5); 
0B2C:  MOVLW  05
0B2E:  MOVLB  1
0B30:  MOVWF  x24
0B32:  MOVLB  0
0B34:  RCALL  0A66
....................     } 
0B36:  MOVLB  1
0B38:  INCF   x09,F
0B3A:  BRA    0B1E
....................     lcd_send_nibble(2); 
0B3C:  MOVLW  02
0B3E:  MOVWF  x25
0B40:  MOVLB  0
0B42:  RCALL  0A90
....................     for(i=0;i<=3;++i) 
0B44:  MOVLB  1
0B46:  CLRF   x09
0B48:  MOVF   x09,W
0B4A:  SUBLW  03
0B4C:  BNC   0B74
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0B4E:  CLRF   03
0B50:  MOVF   x09,W
0B52:  MOVFF  FF2,10A
0B56:  BCF    FF2.7
0B58:  MOVLB  0
0B5A:  CALL   0096
0B5E:  MOVLB  1
0B60:  BTFSC  x0A.7
0B62:  BSF    FF2.7
0B64:  MOVWF  x0A
0B66:  CLRF   x22
0B68:  MOVWF  x23
0B6A:  MOVLB  0
0B6C:  RCALL  0ABA
0B6E:  MOVLB  1
0B70:  INCF   x09,F
0B72:  BRA    0B48
.................... } 
0B74:  MOVLB  0
0B76:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0B78:  MOVLW  01
0B7A:  MOVLB  1
0B7C:  SUBWF  x20,W
0B7E:  ADDLW  FC
0B80:  BC    0BAC
0B82:  ADDLW  04
0B84:  MOVLB  0
0B86:  GOTO   0BBE
....................      case 1 : address=0x80;break; 
0B8A:  MOVLW  80
0B8C:  MOVLB  1
0B8E:  MOVWF  x21
0B90:  BRA    0BAC
....................      case 2 : address=0xc0;break; 
0B92:  MOVLW  C0
0B94:  MOVLB  1
0B96:  MOVWF  x21
0B98:  BRA    0BAC
....................      case 3 : address=0x94;break; 
0B9A:  MOVLW  94
0B9C:  MOVLB  1
0B9E:  MOVWF  x21
0BA0:  BRA    0BAC
....................      case 4 : address=0xd4;break; 
0BA2:  MOVLW  D4
0BA4:  MOVLB  1
0BA6:  MOVWF  x21
0BA8:  BRA    0BAC
0BAA:  MOVLB  1
....................    } 
....................    address+=x-1; 
0BAC:  MOVLW  01
0BAE:  SUBWF  x1F,W
0BB0:  ADDWF  x21,F
....................    lcd_send_byte(0,address); 
0BB2:  CLRF   x22
0BB4:  MOVFF  121,123
0BB8:  MOVLB  0
0BBA:  RCALL  0ABA
.................... } 
0BBC:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0BEA:  MOVLB  1
0BEC:  MOVF   x1E,W
0BEE:  SUBLW  F1
0BF0:  BNZ   0BF6
....................     c=238; 
0BF2:  MOVLW  EE
0BF4:  MOVWF  x1E
....................    switch (c) { 
0BF6:  MOVF   x1E,W
0BF8:  XORLW  0C
0BFA:  MOVLB  0
0BFC:  BZ    0C08
0BFE:  XORLW  06
0C00:  BZ    0C24
0C02:  XORLW  02
0C04:  BZ    0C36
0C06:  BRA    0C44
....................      case '\f'   : lcd_send_byte(0,1); 
0C08:  MOVLB  1
0C0A:  CLRF   x22
0C0C:  MOVLW  01
0C0E:  MOVWF  x23
0C10:  MOVLB  0
0C12:  RCALL  0ABA
....................                    lcdline=1; 
0C14:  MOVLW  01
0C16:  MOVWF  16
....................                    delay_ms(2); 
0C18:  MOVLW  02
0C1A:  MOVLB  1
0C1C:  MOVWF  x24
0C1E:  MOVLB  0
0C20:  RCALL  0A66
....................                                            break; 
0C22:  BRA    0C54
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0C24:  INCF   16,F
0C26:  MOVLW  01
0C28:  MOVLB  1
0C2A:  MOVWF  x1F
0C2C:  MOVFF  16,120
0C30:  MOVLB  0
0C32:  RCALL  0B78
0C34:  BRA    0C54
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0C36:  MOVLB  1
0C38:  CLRF   x22
0C3A:  MOVLW  10
0C3C:  MOVWF  x23
0C3E:  MOVLB  0
0C40:  RCALL  0ABA
0C42:  BRA    0C54
....................      default     : lcd_send_byte(1,c);     break; 
0C44:  MOVLW  01
0C46:  MOVLB  1
0C48:  MOVWF  x22
0C4A:  MOVFF  11E,123
0C4E:  MOVLB  0
0C50:  RCALL  0ABA
0C52:  BRA    0C54
....................    } 
.................... } 
0C54:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1864:  MOVFF  111,115
1868:  MOVFF  110,114
186C:  MOVFF  10F,113
1870:  MOVFF  10E,112
....................  
....................    if (y != 1.0) 
1874:  MOVFF  115,126
1878:  MOVFF  114,125
187C:  MOVFF  113,124
1880:  MOVFF  112,123
1884:  MOVLB  1
1886:  CLRF   x2A
1888:  CLRF   x29
188A:  CLRF   x28
188C:  MOVLW  7F
188E:  MOVWF  x27
1890:  MOVLB  0
1892:  RCALL  1700
1894:  BTFSC  FD8.2
1896:  BRA    1D18
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1898:  MOVLW  01
189A:  MOVLB  1
189C:  MOVWF  x24
189E:  MOVLW  12
18A0:  MOVWF  FE9
18A2:  MOVFF  124,FEA
18A6:  MOVLW  7E
18A8:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
18AA:  BSF    FD8.1
18AC:  MOVFF  115,12A
18B0:  MOVFF  114,129
18B4:  MOVFF  113,128
18B8:  MOVFF  112,127
18BC:  CLRF   x2E
18BE:  CLRF   x2D
18C0:  CLRF   x2C
18C2:  MOVLW  7F
18C4:  MOVWF  x2B
18C6:  MOVLB  0
18C8:  CALL   0DEA
18CC:  MOVFF  00,123
18D0:  MOVFF  01,124
18D4:  MOVFF  02,125
18D8:  MOVFF  03,126
18DC:  BCF    FD8.1
18DE:  MOVFF  115,12A
18E2:  MOVFF  114,129
18E6:  MOVFF  113,128
18EA:  MOVFF  112,127
18EE:  MOVLB  1
18F0:  CLRF   x2E
18F2:  CLRF   x2D
18F4:  CLRF   x2C
18F6:  MOVLW  7F
18F8:  MOVWF  x2B
18FA:  MOVLB  0
18FC:  CALL   0DEA
1900:  MOVFF  126,12A
1904:  MOVFF  125,129
1908:  MOVFF  124,128
190C:  MOVFF  123,127
1910:  MOVFF  03,12E
1914:  MOVFF  02,12D
1918:  MOVFF  01,12C
191C:  MOVFF  00,12B
1920:  CALL   0C8C
1924:  MOVFF  03,115
1928:  MOVFF  02,114
192C:  MOVFF  01,113
1930:  MOVFF  00,112
....................  
....................       y2=y*y; 
1934:  MOVFF  115,126
1938:  MOVFF  114,125
193C:  MOVFF  113,124
1940:  MOVFF  112,123
1944:  MOVFF  115,12A
1948:  MOVFF  114,129
194C:  MOVFF  113,128
1950:  MOVFF  112,127
1954:  RCALL  1394
1956:  MOVFF  03,121
195A:  MOVFF  02,120
195E:  MOVFF  01,11F
1962:  MOVFF  00,11E
....................  
....................       res = pl[0]*y2 + pl[1]; 
1966:  MOVLW  BC
1968:  MOVLB  1
196A:  MOVWF  x26
196C:  MOVLW  24
196E:  MOVWF  x25
1970:  MOVLW  67
1972:  MOVWF  x24
1974:  MOVLW  7D
1976:  MOVWF  x23
1978:  MOVFF  121,12A
197C:  MOVFF  120,129
1980:  MOVFF  11F,128
1984:  MOVFF  11E,127
1988:  MOVLB  0
198A:  RCALL  1394
198C:  MOVFF  00,123
1990:  MOVFF  01,124
1994:  MOVFF  02,125
1998:  MOVFF  03,126
199C:  BCF    FD8.1
199E:  MOVFF  03,12A
19A2:  MOVFF  02,129
19A6:  MOVFF  01,128
19AA:  MOVFF  00,127
19AE:  MOVLW  E3
19B0:  MOVLB  1
19B2:  MOVWF  x2E
19B4:  MOVLW  E4
19B6:  MOVWF  x2D
19B8:  MOVLW  90
19BA:  MOVWF  x2C
19BC:  MOVLW  82
19BE:  MOVWF  x2B
19C0:  MOVLB  0
19C2:  CALL   0DEA
19C6:  MOVFF  03,119
19CA:  MOVFF  02,118
19CE:  MOVFF  01,117
19D2:  MOVFF  00,116
....................       res = res*y2 + pl[2]; 
19D6:  MOVFF  119,126
19DA:  MOVFF  118,125
19DE:  MOVFF  117,124
19E2:  MOVFF  116,123
19E6:  MOVFF  121,12A
19EA:  MOVFF  120,129
19EE:  MOVFF  11F,128
19F2:  MOVFF  11E,127
19F6:  RCALL  1394
19F8:  MOVFF  00,123
19FC:  MOVFF  01,124
1A00:  MOVFF  02,125
1A04:  MOVFF  03,126
1A08:  BCF    FD8.1
1A0A:  MOVFF  03,12A
1A0E:  MOVFF  02,129
1A12:  MOVFF  01,128
1A16:  MOVFF  00,127
1A1A:  MOVLW  1C
1A1C:  MOVLB  1
1A1E:  MOVWF  x2E
1A20:  MOVLW  87
1A22:  MOVWF  x2D
1A24:  MOVLW  57
1A26:  MOVWF  x2C
1A28:  MOVLW  83
1A2A:  MOVWF  x2B
1A2C:  MOVLB  0
1A2E:  CALL   0DEA
1A32:  MOVFF  03,119
1A36:  MOVFF  02,118
1A3A:  MOVFF  01,117
1A3E:  MOVFF  00,116
....................       res = res*y2 + pl[3]; 
1A42:  MOVFF  119,126
1A46:  MOVFF  118,125
1A4A:  MOVFF  117,124
1A4E:  MOVFF  116,123
1A52:  MOVFF  121,12A
1A56:  MOVFF  120,129
1A5A:  MOVFF  11F,128
1A5E:  MOVFF  11E,127
1A62:  RCALL  1394
1A64:  MOVFF  00,123
1A68:  MOVFF  01,124
1A6C:  MOVFF  02,125
1A70:  MOVFF  03,126
1A74:  BCF    FD8.1
1A76:  MOVFF  03,12A
1A7A:  MOVFF  02,129
1A7E:  MOVFF  01,128
1A82:  MOVFF  00,127
1A86:  MOVLW  AB
1A88:  MOVLB  1
1A8A:  MOVWF  x2E
1A8C:  MOVLW  E1
1A8E:  MOVWF  x2D
1A90:  MOVLW  9E
1A92:  MOVWF  x2C
1A94:  MOVLW  83
1A96:  MOVWF  x2B
1A98:  MOVLB  0
1A9A:  CALL   0DEA
1A9E:  MOVFF  03,119
1AA2:  MOVFF  02,118
1AA6:  MOVFF  01,117
1AAA:  MOVFF  00,116
....................  
....................       r = ql[0]*y2 + ql[1]; 
1AAE:  MOVLB  1
1AB0:  CLRF   x26
1AB2:  CLRF   x25
1AB4:  CLRF   x24
1AB6:  MOVLW  7F
1AB8:  MOVWF  x23
1ABA:  MOVFF  121,12A
1ABE:  MOVFF  120,129
1AC2:  MOVFF  11F,128
1AC6:  MOVFF  11E,127
1ACA:  MOVLB  0
1ACC:  RCALL  1394
1ACE:  MOVFF  00,123
1AD2:  MOVFF  01,124
1AD6:  MOVFF  02,125
1ADA:  MOVFF  03,126
1ADE:  BCF    FD8.1
1AE0:  MOVFF  03,12A
1AE4:  MOVFF  02,129
1AE8:  MOVFF  01,128
1AEC:  MOVFF  00,127
1AF0:  MOVLW  B4
1AF2:  MOVLB  1
1AF4:  MOVWF  x2E
1AF6:  MOVLW  2A
1AF8:  MOVWF  x2D
1AFA:  MOVLW  82
1AFC:  MOVWF  x2C
1AFE:  MOVWF  x2B
1B00:  MOVLB  0
1B02:  CALL   0DEA
1B06:  MOVFF  03,11D
1B0A:  MOVFF  02,11C
1B0E:  MOVFF  01,11B
1B12:  MOVFF  00,11A
....................       r = r*y2 + ql[2]; 
1B16:  MOVFF  11D,126
1B1A:  MOVFF  11C,125
1B1E:  MOVFF  11B,124
1B22:  MOVFF  11A,123
1B26:  MOVFF  121,12A
1B2A:  MOVFF  120,129
1B2E:  MOVFF  11F,128
1B32:  MOVFF  11E,127
1B36:  RCALL  1394
1B38:  MOVFF  00,123
1B3C:  MOVFF  01,124
1B40:  MOVFF  02,125
1B44:  MOVFF  03,126
1B48:  BCF    FD8.1
1B4A:  MOVFF  03,12A
1B4E:  MOVFF  02,129
1B52:  MOVFF  01,128
1B56:  MOVFF  00,127
1B5A:  MOVLW  80
1B5C:  MOVLB  1
1B5E:  MOVWF  x2E
1B60:  MOVLW  3E
1B62:  MOVWF  x2D
1B64:  MOVLW  06
1B66:  MOVWF  x2C
1B68:  MOVLW  83
1B6A:  MOVWF  x2B
1B6C:  MOVLB  0
1B6E:  CALL   0DEA
1B72:  MOVFF  03,11D
1B76:  MOVFF  02,11C
1B7A:  MOVFF  01,11B
1B7E:  MOVFF  00,11A
....................       r = r*y2 + ql[3]; 
1B82:  MOVFF  11D,126
1B86:  MOVFF  11C,125
1B8A:  MOVFF  11B,124
1B8E:  MOVFF  11A,123
1B92:  MOVFF  121,12A
1B96:  MOVFF  120,129
1B9A:  MOVFF  11F,128
1B9E:  MOVFF  11E,127
1BA2:  CALL   1394
1BA6:  MOVFF  00,123
1BAA:  MOVFF  01,124
1BAE:  MOVFF  02,125
1BB2:  MOVFF  03,126
1BB6:  BCF    FD8.1
1BB8:  MOVFF  03,12A
1BBC:  MOVFF  02,129
1BC0:  MOVFF  01,128
1BC4:  MOVFF  00,127
1BC8:  MOVLW  AB
1BCA:  MOVLB  1
1BCC:  MOVWF  x2E
1BCE:  MOVLW  E1
1BD0:  MOVWF  x2D
1BD2:  MOVLW  9E
1BD4:  MOVWF  x2C
1BD6:  MOVLW  82
1BD8:  MOVWF  x2B
1BDA:  MOVLB  0
1BDC:  CALL   0DEA
1BE0:  MOVFF  03,11D
1BE4:  MOVFF  02,11C
1BE8:  MOVFF  01,11B
1BEC:  MOVFF  00,11A
....................  
....................       res = y*res/r; 
1BF0:  MOVFF  115,126
1BF4:  MOVFF  114,125
1BF8:  MOVFF  113,124
1BFC:  MOVFF  112,123
1C00:  MOVFF  119,12A
1C04:  MOVFF  118,129
1C08:  MOVFF  117,128
1C0C:  MOVFF  116,127
1C10:  CALL   1394
1C14:  MOVFF  00,123
1C18:  MOVFF  01,124
1C1C:  MOVFF  02,125
1C20:  MOVFF  03,126
1C24:  MOVFF  03,12A
1C28:  MOVFF  02,129
1C2C:  MOVFF  01,128
1C30:  MOVFF  00,127
1C34:  MOVFF  11D,12E
1C38:  MOVFF  11C,12D
1C3C:  MOVFF  11B,12C
1C40:  MOVFF  11A,12B
1C44:  CALL   0C8C
1C48:  MOVFF  03,119
1C4C:  MOVFF  02,118
1C50:  MOVFF  01,117
1C54:  MOVFF  00,116
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1C58:  MOVLW  01
1C5A:  MOVLB  1
1C5C:  MOVWF  x24
1C5E:  MOVLW  0E
1C60:  MOVWF  FE9
1C62:  MOVFF  124,FEA
1C66:  MOVLW  7E
1C68:  SUBWF  FEF,W
1C6A:  MOVWF  x22
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1C6C:  BTFSC  x22.7
1C6E:  BRA    1C72
1C70:  BRA    1C9A
....................          r = -(float32)-n; 
1C72:  MOVLW  00
1C74:  BSF    FD8.0
1C76:  SUBFWB x22,W
1C78:  CLRF   x24
1C7A:  MOVWF  x23
1C7C:  BTFSC  x23.7
1C7E:  DECF   x24,F
1C80:  MOVLB  0
1C82:  RCALL  1814
1C84:  MOVFF  00,11A
1C88:  MOVF   01,W
1C8A:  XORLW  80
1C8C:  MOVLB  1
1C8E:  MOVWF  x1B
1C90:  MOVFF  02,11C
1C94:  MOVFF  03,11D
....................       else 
1C98:  BRA    1CBA
....................          r = (float32)n; 
1C9A:  CLRF   x24
1C9C:  MOVFF  122,123
1CA0:  BTFSC  x23.7
1CA2:  DECF   x24,F
1CA4:  MOVLB  0
1CA6:  RCALL  1814
1CA8:  MOVFF  03,11D
1CAC:  MOVFF  02,11C
1CB0:  MOVFF  01,11B
1CB4:  MOVFF  00,11A
1CB8:  MOVLB  1
....................  
....................       res += r*LN2; 
1CBA:  MOVFF  11D,126
1CBE:  MOVFF  11C,125
1CC2:  MOVFF  11B,124
1CC6:  MOVFF  11A,123
1CCA:  MOVLW  18
1CCC:  MOVWF  x2A
1CCE:  MOVLW  72
1CD0:  MOVWF  x29
1CD2:  MOVLW  31
1CD4:  MOVWF  x28
1CD6:  MOVLW  7E
1CD8:  MOVWF  x27
1CDA:  MOVLB  0
1CDC:  CALL   1394
1CE0:  BCF    FD8.1
1CE2:  MOVFF  119,12A
1CE6:  MOVFF  118,129
1CEA:  MOVFF  117,128
1CEE:  MOVFF  116,127
1CF2:  MOVFF  03,12E
1CF6:  MOVFF  02,12D
1CFA:  MOVFF  01,12C
1CFE:  MOVFF  00,12B
1D02:  CALL   0DEA
1D06:  MOVFF  03,119
1D0A:  MOVFF  02,118
1D0E:  MOVFF  01,117
1D12:  MOVFF  00,116
....................    } 
....................  
....................    else 
1D16:  BRA    1D24
....................       res = 0.0; 
1D18:  MOVLB  1
1D1A:  CLRF   x19
1D1C:  CLRF   x18
1D1E:  CLRF   x17
1D20:  CLRF   x16
1D22:  MOVLB  0
....................  
....................    return(res); 
1D24:  MOVFF  116,00
1D28:  MOVFF  117,01
1D2C:  MOVFF  118,02
1D30:  MOVFF  119,03
.................... } 
1D34:  GOTO   1F10 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=11,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 FeedbackDamper=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
17B6:  MOVLB  1
17B8:  RLCF   x0D,W
17BA:  MOVWF  00
17BC:  RLCF   00,F
17BE:  MOVLW  FC
17C0:  ANDWF  00,F
17C2:  MOVFF  00,01
17C6:  MOVF   FC2,W
17C8:  ANDLW  C3
17CA:  IORWF  00,W
17CC:  MOVWF  FC2
17CE:  MOVLW  0A
17D0:  MOVWF  x24
17D2:  MOVLB  0
17D4:  CALL   0A66
17D8:  BSF    FC2.1
17DA:  BTFSC  FC2.1
17DC:  BRA    17DA
17DE:  MOVFF  FC4,113
17E2:  MOVFF  FC3,112
17E6:  MOVLB  0
17E8:  CALL   0C56
17EC:  MOVFF  03,111
17F0:  MOVFF  02,110
17F4:  MOVFF  01,10F
17F8:  MOVFF  00,10E
17FC:  MOVFF  10E,00
1800:  MOVFF  10F,01
1804:  MOVFF  110,02
1808:  MOVFF  111,03
.................... } 
180C:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
1062:  MOVLB  1
1064:  MOVF   x09,F
1066:  BNZ   106E
....................    { 
....................       Pantalla_off; 
1068:  BCF    F8B.1
106A:  BCF    F94.1
....................    } 
....................    else 
106C:  BRA    1072
....................    { 
....................       Pantalla_on; 
106E:  BSF    F8B.1
1070:  BCF    F94.1
....................    } 
.................... } 
1072:  MOVLB  0
1074:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1D38:  MOVLB  1
1D3A:  CLRF   x0D
1D3C:  MOVLB  0
1D3E:  RCALL  17B6
1D40:  MOVFF  00,10A
1D44:  MOVFF  01,10B
1D48:  MOVFF  02,10C
1D4C:  MOVFF  03,10D
1D50:  MOVFF  03,126
1D54:  MOVFF  02,125
1D58:  MOVFF  01,124
1D5C:  MOVFF  00,123
1D60:  MOVLB  1
1D62:  CLRF   x2A
1D64:  CLRF   x29
1D66:  MOVLW  20
1D68:  MOVWF  x28
1D6A:  MOVLW  81
1D6C:  MOVWF  x27
1D6E:  MOVLB  0
1D70:  CALL   1394
1D74:  MOVFF  00,10A
1D78:  MOVFF  01,10B
1D7C:  MOVFF  02,10C
1D80:  MOVFF  03,10D
1D84:  MOVFF  03,12A
1D88:  MOVFF  02,129
1D8C:  MOVFF  01,128
1D90:  MOVFF  00,127
1D94:  MOVLB  1
1D96:  CLRF   x2E
1D98:  MOVLW  C0
1D9A:  MOVWF  x2D
1D9C:  MOVLW  7F
1D9E:  MOVWF  x2C
1DA0:  MOVLW  88
1DA2:  MOVWF  x2B
1DA4:  MOVLB  0
1DA6:  CALL   0C8C
1DAA:  MOVFF  03,80
1DAE:  MOVFF  02,7F
1DB2:  MOVFF  01,7E
1DB6:  MOVFF  00,7D
....................     Voltaje1=sensores(1)*5/1023; 
1DBA:  MOVLW  01
1DBC:  MOVLB  1
1DBE:  MOVWF  x0D
1DC0:  MOVLB  0
1DC2:  RCALL  17B6
1DC4:  MOVFF  00,10A
1DC8:  MOVFF  01,10B
1DCC:  MOVFF  02,10C
1DD0:  MOVFF  03,10D
1DD4:  MOVFF  03,126
1DD8:  MOVFF  02,125
1DDC:  MOVFF  01,124
1DE0:  MOVFF  00,123
1DE4:  MOVLB  1
1DE6:  CLRF   x2A
1DE8:  CLRF   x29
1DEA:  MOVLW  20
1DEC:  MOVWF  x28
1DEE:  MOVLW  81
1DF0:  MOVWF  x27
1DF2:  MOVLB  0
1DF4:  CALL   1394
1DF8:  MOVFF  00,10A
1DFC:  MOVFF  01,10B
1E00:  MOVFF  02,10C
1E04:  MOVFF  03,10D
1E08:  MOVFF  03,12A
1E0C:  MOVFF  02,129
1E10:  MOVFF  01,128
1E14:  MOVFF  00,127
1E18:  MOVLB  1
1E1A:  CLRF   x2E
1E1C:  MOVLW  C0
1E1E:  MOVWF  x2D
1E20:  MOVLW  7F
1E22:  MOVWF  x2C
1E24:  MOVLW  88
1E26:  MOVWF  x2B
1E28:  MOVLB  0
1E2A:  CALL   0C8C
1E2E:  MOVFF  03,84
1E32:  MOVFF  02,83
1E36:  MOVFF  01,82
1E3A:  MOVFF  00,81
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1E3E:  MOVLB  1
1E40:  CLRF   x2A
1E42:  CLRF   x29
1E44:  MOVLW  20
1E46:  MOVWF  x28
1E48:  MOVLW  81
1E4A:  MOVWF  x27
1E4C:  MOVFF  84,12E
1E50:  MOVFF  83,12D
1E54:  MOVFF  82,12C
1E58:  MOVFF  81,12B
1E5C:  MOVLB  0
1E5E:  CALL   0C8C
1E62:  MOVFF  00,10A
1E66:  MOVFF  01,10B
1E6A:  MOVFF  02,10C
1E6E:  MOVFF  03,10D
1E72:  BSF    FD8.1
1E74:  MOVFF  03,12A
1E78:  MOVFF  02,129
1E7C:  MOVFF  01,128
1E80:  MOVFF  00,127
1E84:  MOVLB  1
1E86:  CLRF   x2E
1E88:  CLRF   x2D
1E8A:  CLRF   x2C
1E8C:  MOVLW  7F
1E8E:  MOVWF  x2B
1E90:  MOVLB  0
1E92:  CALL   0DEA
1E96:  MOVFF  78,12A
1E9A:  MOVFF  77,129
1E9E:  MOVFF  76,128
1EA2:  MOVFF  75,127
1EA6:  MOVFF  03,12E
1EAA:  MOVFF  02,12D
1EAE:  MOVFF  01,12C
1EB2:  MOVFF  00,12B
1EB6:  CALL   0C8C
1EBA:  MOVFF  03,7C
1EBE:  MOVFF  02,7B
1EC2:  MOVFF  01,7A
1EC6:  MOVFF  00,79
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
1ECA:  MOVFF  7C,12A
1ECE:  MOVFF  7B,129
1ED2:  MOVFF  7A,128
1ED6:  MOVFF  79,127
1EDA:  MOVFF  68,12E
1EDE:  MOVFF  67,12D
1EE2:  MOVFF  66,12C
1EE6:  MOVFF  65,12B
1EEA:  CALL   0C8C
1EEE:  MOVFF  00,10A
1EF2:  MOVFF  01,10B
1EF6:  MOVFF  02,10C
1EFA:  MOVFF  03,10D
1EFE:  MOVFF  03,111
1F02:  MOVFF  02,110
1F06:  MOVFF  01,10F
1F0A:  MOVFF  00,10E
1F0E:  BRA    1864
1F10:  MOVFF  00,10A
1F14:  MOVFF  01,10B
1F18:  MOVFF  02,10C
1F1C:  MOVFF  03,10D
1F20:  MOVFF  03,12A
1F24:  MOVFF  02,129
1F28:  MOVFF  01,128
1F2C:  MOVFF  00,127
1F30:  MOVFF  64,12E
1F34:  MOVFF  63,12D
1F38:  MOVFF  62,12C
1F3C:  MOVFF  61,12B
1F40:  CALL   0C8C
1F44:  MOVFF  00,10A
1F48:  MOVFF  01,10B
1F4C:  MOVFF  02,10C
1F50:  MOVFF  03,10D
1F54:  MOVLB  1
1F56:  CLRF   x2A
1F58:  CLRF   x29
1F5A:  CLRF   x28
1F5C:  MOVLW  7F
1F5E:  MOVWF  x27
1F60:  MOVFF  6C,12E
1F64:  MOVFF  6B,12D
1F68:  MOVFF  6A,12C
1F6C:  MOVFF  69,12B
1F70:  MOVLB  0
1F72:  CALL   0C8C
1F76:  MOVFF  FEA,10F
1F7A:  MOVFF  FE9,10E
1F7E:  BCF    FD8.1
1F80:  MOVFF  10D,12A
1F84:  MOVFF  10C,129
1F88:  MOVFF  10B,128
1F8C:  MOVFF  10A,127
1F90:  MOVFF  03,12E
1F94:  MOVFF  02,12D
1F98:  MOVFF  01,12C
1F9C:  MOVFF  00,12B
1FA0:  CALL   0DEA
1FA4:  MOVFF  10F,FEA
1FA8:  MOVFF  10E,FE9
1FAC:  MOVLB  1
1FAE:  CLRF   x2A
1FB0:  CLRF   x29
1FB2:  CLRF   x28
1FB4:  MOVLW  7F
1FB6:  MOVWF  x27
1FB8:  MOVFF  03,12E
1FBC:  MOVFF  02,12D
1FC0:  MOVFF  01,12C
1FC4:  MOVFF  00,12B
1FC8:  MOVLB  0
1FCA:  CALL   0C8C
1FCE:  MOVFF  03,70
1FD2:  MOVFF  02,6F
1FD6:  MOVFF  01,6E
1FDA:  MOVFF  00,6D
....................     TC=TK-273.15; 
1FDE:  BSF    FD8.1
1FE0:  MOVFF  70,12A
1FE4:  MOVFF  6F,129
1FE8:  MOVFF  6E,128
1FEC:  MOVFF  6D,127
1FF0:  MOVLW  33
1FF2:  MOVLB  1
1FF4:  MOVWF  x2E
1FF6:  MOVLW  93
1FF8:  MOVWF  x2D
1FFA:  MOVLW  08
1FFC:  MOVWF  x2C
1FFE:  MOVLW  87
2000:  MOVWF  x2B
2002:  MOVLB  0
2004:  CALL   0DEA
2008:  MOVFF  03,74
200C:  MOVFF  02,73
2010:  MOVFF  01,72
2014:  MOVFF  00,71
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
2018:  MOVF   2E,W
201A:  SUBLW  0A
201C:  BNZ   207E
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
201E:  MOVLB  1
2020:  CLRF   x0D
2022:  MOVLB  0
2024:  CALL   17B6
2028:  MOVFF  00,10A
202C:  MOVFF  01,10B
2030:  MOVFF  02,10C
2034:  MOVFF  03,10D
2038:  MOVFF  FEA,10F
203C:  MOVFF  FE9,10E
2040:  BCF    FD8.1
2042:  MOVFF  03,12A
2046:  MOVFF  02,129
204A:  MOVFF  01,128
204E:  MOVFF  00,127
2052:  MOVFF  C8,12E
2056:  MOVFF  C7,12D
205A:  MOVFF  C6,12C
205E:  MOVFF  C5,12B
2062:  CALL   0DEA
2066:  MOVFF  10F,FEA
206A:  MOVFF  10E,FE9
206E:  MOVFF  03,A4
2072:  MOVFF  02,A3
2076:  MOVFF  01,A2
207A:  MOVFF  00,A1
....................     } 
....................     if(negativo==20) 
207E:  MOVF   2E,W
2080:  SUBLW  14
2082:  BNZ   20E4
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
2084:  MOVLB  1
2086:  CLRF   x0D
2088:  MOVLB  0
208A:  CALL   17B6
208E:  MOVFF  00,10A
2092:  MOVFF  01,10B
2096:  MOVFF  02,10C
209A:  MOVFF  03,10D
209E:  MOVFF  FEA,10F
20A2:  MOVFF  FE9,10E
20A6:  BSF    FD8.1
20A8:  MOVFF  03,12A
20AC:  MOVFF  02,129
20B0:  MOVFF  01,128
20B4:  MOVFF  00,127
20B8:  MOVFF  C8,12E
20BC:  MOVFF  C7,12D
20C0:  MOVFF  C6,12C
20C4:  MOVFF  C5,12B
20C8:  CALL   0DEA
20CC:  MOVFF  10F,FEA
20D0:  MOVFF  10E,FE9
20D4:  MOVFF  03,A4
20D8:  MOVFF  02,A3
20DC:  MOVFF  01,A2
20E0:  MOVFF  00,A1
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
20E4:  MOVFF  A4,126
20E8:  MOVFF  A3,125
20EC:  MOVFF  A2,124
20F0:  MOVFF  A1,123
20F4:  MOVFF  A4,12A
20F8:  MOVFF  A3,129
20FC:  MOVFF  A2,128
2100:  MOVFF  A1,127
2104:  CALL   1394
2108:  MOVFF  03,A8
210C:  MOVFF  02,A7
2110:  MOVFF  01,A6
2114:  MOVFF  00,A5
....................     x_cubo=x_uno*x_cuadrado; 
2118:  MOVFF  A4,126
211C:  MOVFF  A3,125
2120:  MOVFF  A2,124
2124:  MOVFF  A1,123
2128:  MOVFF  A8,12A
212C:  MOVFF  A7,129
2130:  MOVFF  A6,128
2134:  MOVFF  A5,127
2138:  CALL   1394
213C:  MOVFF  03,AC
2140:  MOVFF  02,AB
2144:  MOVFF  01,AA
2148:  MOVFF  00,A9
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
214C:  MOVFF  AC,126
2150:  MOVFF  AB,125
2154:  MOVFF  AA,124
2158:  MOVFF  A9,123
215C:  MOVFF  88,12A
2160:  MOVFF  87,129
2164:  MOVFF  86,128
2168:  MOVFF  85,127
216C:  CALL   1394
2170:  MOVFF  00,10A
2174:  MOVFF  01,10B
2178:  MOVFF  02,10C
217C:  MOVFF  03,10D
2180:  MOVFF  A8,126
2184:  MOVFF  A7,125
2188:  MOVFF  A6,124
218C:  MOVFF  A5,123
2190:  MOVFF  8C,12A
2194:  MOVFF  8B,129
2198:  MOVFF  8A,128
219C:  MOVFF  89,127
21A0:  CALL   1394
21A4:  BCF    FD8.1
21A6:  MOVFF  10D,12A
21AA:  MOVFF  10C,129
21AE:  MOVFF  10B,128
21B2:  MOVFF  10A,127
21B6:  MOVFF  03,12E
21BA:  MOVFF  02,12D
21BE:  MOVFF  01,12C
21C2:  MOVFF  00,12B
21C6:  CALL   0DEA
21CA:  MOVFF  00,10A
21CE:  MOVFF  01,10B
21D2:  MOVFF  02,10C
21D6:  MOVFF  03,10D
21DA:  MOVFF  A4,126
21DE:  MOVFF  A3,125
21E2:  MOVFF  A2,124
21E6:  MOVFF  A1,123
21EA:  MOVFF  90,12A
21EE:  MOVFF  8F,129
21F2:  MOVFF  8E,128
21F6:  MOVFF  8D,127
21FA:  CALL   1394
21FE:  BCF    FD8.1
2200:  MOVFF  10D,12A
2204:  MOVFF  10C,129
2208:  MOVFF  10B,128
220C:  MOVFF  10A,127
2210:  MOVFF  03,12E
2214:  MOVFF  02,12D
2218:  MOVFF  01,12C
221C:  MOVFF  00,12B
2220:  CALL   0DEA
2224:  MOVFF  00,10A
2228:  MOVFF  01,10B
222C:  MOVFF  02,10C
2230:  MOVFF  03,10D
2234:  BCF    FD8.1
2236:  MOVFF  03,12A
223A:  MOVFF  02,129
223E:  MOVFF  01,128
2242:  MOVFF  00,127
2246:  MOVFF  94,12E
224A:  MOVFF  93,12D
224E:  MOVFF  92,12C
2252:  MOVFF  91,12B
2256:  CALL   0DEA
225A:  MOVFF  03,BC
225E:  MOVFF  02,BB
2262:  MOVFF  01,BA
2266:  MOVFF  00,B9
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
226A:  BSF    FD8.1
226C:  MOVFF  BC,12A
2270:  MOVFF  BB,129
2274:  MOVFF  BA,128
2278:  MOVFF  B9,127
227C:  MOVLW  0A
227E:  MOVLB  1
2280:  MOVWF  x2E
2282:  MOVLW  D7
2284:  MOVWF  x2D
2286:  MOVLW  23
2288:  MOVWF  x2C
228A:  MOVLW  7B
228C:  MOVWF  x2B
228E:  MOVLB  0
2290:  CALL   0DEA
2294:  MOVFF  03,BC
2298:  MOVFF  02,BB
229C:  MOVFF  01,BA
22A0:  MOVFF  00,B9
....................     if(Velocidad<0.0) 
22A4:  MOVFF  BC,126
22A8:  MOVFF  BB,125
22AC:  MOVFF  BA,124
22B0:  MOVFF  B9,123
22B4:  MOVLB  1
22B6:  CLRF   x2A
22B8:  CLRF   x29
22BA:  CLRF   x28
22BC:  CLRF   x27
22BE:  MOVLB  0
22C0:  CALL   1700
22C4:  BNC   22CE
....................      {Velocidad=0.0;} 
22C6:  CLRF   xBC
22C8:  CLRF   xBB
22CA:  CLRF   xBA
22CC:  CLRF   xB9
....................       
....................      if(l>=media) 
22CE:  MOVLB  1
22D0:  MOVF   x09,W
22D2:  SUBWF  2A,W
22D4:  BNC   22D8
....................        {l=0;} 
22D6:  CLRF   2A
....................       
....................      promedio[l]=Velocidad;l++; 
22D8:  MOVF   2A,W
22DA:  MULLW  04
22DC:  MOVF   FF3,W
22DE:  CLRF   03
22E0:  ADDLW  D9
22E2:  MOVWF  FE9
22E4:  MOVLW  00
22E6:  ADDWFC 03,W
22E8:  MOVWF  FEA
22EA:  MOVFF  B9,FEF
22EE:  MOVFF  BA,FEC
22F2:  MOVFF  BB,FEC
22F6:  MOVFF  BC,FEC
22FA:  INCF   2A,F
....................      Flujo2=0; 
22FC:  MOVLB  0
22FE:  CLRF   x9C
2300:  CLRF   x9B
2302:  CLRF   x9A
2304:  CLRF   x99
....................         for(h=0;h<=(media-1);h++) 
2306:  CLRF   2B
2308:  MOVLW  01
230A:  MOVLB  1
230C:  SUBWF  x09,W
230E:  SUBWF  2B,W
2310:  BZ    2314
2312:  BC    2384
....................         { 
....................            Flujo2+=promedio[h]; 
2314:  MOVF   2B,W
2316:  MULLW  04
2318:  MOVF   FF3,W
231A:  CLRF   03
231C:  ADDLW  D9
231E:  MOVWF  FE9
2320:  MOVLW  00
2322:  ADDWFC 03,W
2324:  MOVWF  FEA
2326:  MOVFF  FEF,00
232A:  MOVFF  FEC,01
232E:  MOVFF  FEC,02
2332:  MOVFF  FEC,03
2336:  MOVFF  FEA,10B
233A:  MOVFF  FE9,10A
233E:  BCF    FD8.1
2340:  MOVFF  9C,12A
2344:  MOVFF  9B,129
2348:  MOVFF  9A,128
234C:  MOVFF  99,127
2350:  MOVFF  03,12E
2354:  MOVFF  02,12D
2358:  MOVFF  01,12C
235C:  MOVFF  00,12B
2360:  MOVLB  0
2362:  CALL   0DEA
2366:  MOVFF  10B,FEA
236A:  MOVFF  10A,FE9
236E:  MOVFF  03,9C
2372:  MOVFF  02,9B
2376:  MOVFF  01,9A
237A:  MOVFF  00,99
....................         }  
237E:  INCF   2B,F
2380:  BRA    2308
2382:  MOVLB  1
....................            Flujo2=(Flujo2/media)*Ajuste1;  
2384:  CLRF   x13
2386:  MOVFF  109,112
238A:  MOVLB  0
238C:  CALL   0C56
2390:  MOVFF  9C,12A
2394:  MOVFF  9B,129
2398:  MOVFF  9A,128
239C:  MOVFF  99,127
23A0:  MOVFF  03,12E
23A4:  MOVFF  02,12D
23A8:  MOVFF  01,12C
23AC:  MOVFF  00,12B
23B0:  CALL   0C8C
23B4:  MOVFF  00,10A
23B8:  MOVFF  01,10B
23BC:  MOVFF  02,10C
23C0:  MOVFF  03,10D
23C4:  MOVFF  03,126
23C8:  MOVFF  02,125
23CC:  MOVFF  01,124
23D0:  MOVFF  00,123
23D4:  MOVFF  CC,12A
23D8:  MOVFF  CB,129
23DC:  MOVFF  CA,128
23E0:  MOVFF  C9,127
23E4:  CALL   1394
23E8:  MOVFF  03,9C
23EC:  MOVFF  02,9B
23F0:  MOVFF  01,9A
23F4:  MOVFF  00,99
....................            return Flujo2; 
23F8:  MOVFF  99,00
23FC:  MOVFF  9A,01
2400:  MOVFF  9B,02
2404:  MOVFF  9C,03
.................... } 
2408:  RETLW  00
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
240A:  MOVF   2F,W
240C:  SUBLW  14
240E:  BTFSS  FD8.2
2410:  BRA    2504
2412:  BTFSS  3E.1
2414:  BRA    2504
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
2416:  BSF    FD8.1
2418:  MOVFF  4F,12A
241C:  MOVFF  4E,129
2420:  MOVFF  4D,128
2424:  MOVFF  4C,127
2428:  MOVFF  98,12E
242C:  MOVFF  97,12D
2430:  MOVFF  96,12C
2434:  MOVFF  95,12B
2438:  CALL   0DEA
243C:  MOVFF  03,D8
2440:  MOVFF  02,D7
2444:  MOVFF  01,D6
2448:  MOVFF  00,D5
....................       if(error<0.2&&error>-0.2) 
244C:  MOVFF  D8,126
2450:  MOVFF  D7,125
2454:  MOVFF  D6,124
2458:  MOVFF  D5,123
245C:  MOVLW  CD
245E:  MOVLB  1
2460:  MOVWF  x2A
2462:  MOVLW  CC
2464:  MOVWF  x29
2466:  MOVLW  4C
2468:  MOVWF  x28
246A:  MOVLW  7C
246C:  MOVWF  x27
246E:  MOVLB  0
2470:  CALL   1700
2474:  BNC   24A0
2476:  MOVLW  CD
2478:  MOVLB  1
247A:  MOVWF  x26
247C:  MOVLW  CC
247E:  MOVWF  x25
2480:  MOVWF  x24
2482:  MOVLW  7C
2484:  MOVWF  x23
2486:  MOVFF  D8,12A
248A:  MOVFF  D7,129
248E:  MOVFF  D6,128
2492:  MOVFF  D5,127
2496:  MOVLB  0
2498:  CALL   1700
249C:  BNC   24A0
....................       {} 
....................       else 
249E:  BRA    24EC
....................       { 
....................          if(error>0.0) 
24A0:  MOVLB  1
24A2:  CLRF   x26
24A4:  CLRF   x25
24A6:  CLRF   x24
24A8:  CLRF   x23
24AA:  MOVFF  D8,12A
24AE:  MOVFF  D7,129
24B2:  MOVFF  D6,128
24B6:  MOVFF  D5,127
24BA:  MOVLB  0
24BC:  CALL   1700
24C0:  BNC   24C6
....................          {tmp+=1;} 
24C2:  MOVLW  01
24C4:  ADDWF  2C,F
....................                 
....................          if(error<-0.0) 
24C6:  MOVFF  D8,126
24CA:  MOVFF  D7,125
24CE:  MOVFF  D6,124
24D2:  MOVFF  D5,123
24D6:  MOVLB  1
24D8:  CLRF   x2A
24DA:  CLRF   x29
24DC:  CLRF   x28
24DE:  CLRF   x27
24E0:  MOVLB  0
24E2:  CALL   1700
24E6:  BNC   24EC
....................          {tmp-=1;}   
24E8:  MOVLW  01
24EA:  SUBWF  2C,F
....................       } 
....................        
....................       if(tmp>251) 
24EC:  MOVF   2C,W
24EE:  SUBLW  FB
24F0:  BC    24F6
....................       {tmp=251;} 
24F2:  MOVLW  FB
24F4:  MOVWF  2C
....................       if(tmp<4)          
24F6:  MOVF   2C,W
24F8:  SUBLW  03
24FA:  BNC   2500
....................       {tmp=4;}       
24FC:  MOVLW  04
24FE:  MOVWF  2C
....................       set_pwm1_duty (tmp); 
2500:  MOVFF  2C,FBE
....................    } 
....................     
....................    if(Manual==20) 
2504:  MOVF   30,W
2506:  SUBLW  14
2508:  BNZ   2512
....................    { 
....................       tmp=251; 
250A:  MOVLW  FB
250C:  MOVWF  2C
....................       set_pwm1_duty (tmp); 
250E:  MOVFF  2C,FBE
....................    } 
....................     
....................    if(Semi==20) 
2512:  MOVF   31,W
2514:  SUBLW  14
2516:  BNZ   251C
....................    { 
....................       set_pwm1_duty (ValorSemi); 
2518:  MOVFF  32,FBE
....................    } 
.................... } 
251C:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   59,F
00BE:  BTFSC  FD8.2
00C0:  INCF   5A,F
....................    tiempos2++; 
00C2:  INCF   5D,F
00C4:  BTFSC  FD8.2
00C6:  INCF   5E,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   5C,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   5B,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    3F.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  3F.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   5B,F
00E0:  BTFSC  FD8.2
00E2:  INCF   5C,F
....................    } 
....................     
....................    if(tiempos2==20) 
00E4:  MOVF   5D,W
00E6:  SUBLW  14
00E8:  BNZ   00F4
00EA:  MOVF   5E,F
00EC:  BNZ   00F4
....................    {tiempos2=0;Lectura2=1;} 
00EE:  CLRF   5E
00F0:  CLRF   5D
00F2:  BSF    3F.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00F4:  MOVF   59,W
00F6:  SUBLW  C8
00F8:  BNZ   0166
00FA:  MOVF   5A,F
00FC:  BNZ   0166
....................    { 
....................       tiempos=0;tiemporeset++; 
00FE:  CLRF   5A
0100:  CLRF   59
0102:  INCF   36,F
....................       Lectura=1; 
0104:  BSF    3F.5
....................           
....................       if(estadomv==1 && flag_filtro==1) 
0106:  BTFSS  3E.1
0108:  BRA    0122
010A:  BTFSS  3F.2
010C:  BRA    0122
....................       {   
....................          if(segundos==60) 
010E:  MOVF   33,W
0110:  SUBLW  3C
0112:  BNZ   0118
....................          { 
....................             segundos=0;minutos++; 
0114:  CLRF   33
0116:  INCF   34,F
....................          } 
....................           
....................          if(minutos==60) 
0118:  MOVF   34,W
011A:  SUBLW  3C
011C:  BNZ   0122
....................          { 
....................             minutos=0;horas++; 
011E:  CLRF   34
0120:  INCF   35,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1) 
0122:  BTFSS  58.4
0124:  BRA    014C
....................       { 
....................          if(purga_segundos>0) 
0126:  MOVF   37,F
0128:  BZ    012E
....................          { 
....................             purga_segundos--; 
012A:  DECF   37,F
....................          } 
....................          else 
012C:  BRA    014C
....................          { 
....................             if(purga_minutos>0) 
012E:  MOVF   22,F
0130:  BZ    013A
....................             { 
....................                purga_minutos--; 
0132:  DECF   22,F
....................                purga_segundos=59; 
0134:  MOVLW  3B
0136:  MOVWF  37
....................             } 
....................             else 
0138:  BRA    014C
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20; 
013A:  BCF    58.4
013C:  BSF    F8A.5
013E:  BCF    F93.5
0140:  MOVLW  14
0142:  MOVWF  17
....................                Luz_Blanca_on; 
0144:  BSF    F8A.4
0146:  BCF    F93.4
....................                estadomv=1; 
0148:  BSF    3E.1
....................                estadofl=1; 
014A:  BSF    3E.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
014C:  BTFSS  58.5
014E:  BRA    0166
....................       { 
....................          if(ppurga_segundos>0) 
0150:  MOVF   39,F
0152:  BZ    0158
....................          { 
....................             ppurga_segundos--; 
0154:  DECF   39,F
....................          } 
....................          else 
0156:  BRA    0166
....................          { 
....................             if(ppurga_minutos>0) 
0158:  MOVF   3B,F
015A:  BZ    0164
....................             { 
....................                ppurga_minutos--; 
015C:  DECF   3B,F
....................                ppurga_segundos=59; 
015E:  MOVLW  3B
0160:  MOVWF  39
....................             } 
....................             else 
0162:  BRA    0166
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0164:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0166:  BCF    F9E.0
0168:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
11C8:  MOVLB  1
11CA:  DECFSZ x0A,W
11CC:  BRA    1206
....................    {if(estadoalarma==0) 
11CE:  BTFSC  3E.2
11D0:  BRA    11EA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
11D2:  MOVLW  02
11D4:  MOVWF  x1F
11D6:  MOVFF  10B,120
11DA:  MOVLB  0
11DC:  RCALL  0B78
11DE:  MOVLW  6C
11E0:  MOVWF  FF6
11E2:  MOVLW  01
11E4:  MOVWF  FF7
11E6:  RCALL  1076
11E8:  MOVLB  1
....................    if(estadoalarma==1) 
11EA:  BTFSS  3E.2
11EC:  BRA    1206
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
11EE:  MOVLW  02
11F0:  MOVWF  x1F
11F2:  MOVFF  10B,120
11F6:  MOVLB  0
11F8:  RCALL  0B78
11FA:  MOVLW  80
11FC:  MOVWF  FF6
11FE:  MOVLW  01
1200:  MOVWF  FF7
1202:  RCALL  1076
1204:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
1206:  MOVF   x0A,W
1208:  SUBLW  02
120A:  BNZ   1224
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
120C:  MOVLW  02
120E:  MOVWF  x1F
1210:  MOVFF  10B,120
1214:  MOVLB  0
1216:  RCALL  0B78
1218:  MOVLW  94
121A:  MOVWF  FF6
121C:  MOVLW  01
121E:  MOVWF  FF7
1220:  RCALL  1076
1222:  MOVLB  1
....................     
....................    if(x==3) 
1224:  MOVF   x0A,W
1226:  SUBLW  03
1228:  BNZ   1242
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
122A:  MOVLW  02
122C:  MOVWF  x1F
122E:  MOVFF  10B,120
1232:  MOVLB  0
1234:  RCALL  0B78
1236:  MOVLW  A8
1238:  MOVWF  FF6
123A:  MOVLW  01
123C:  MOVWF  FF7
123E:  RCALL  1076
1240:  MOVLB  1
....................     
....................    if(x==4) 
1242:  MOVF   x0A,W
1244:  SUBLW  04
1246:  BNZ   1260
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1248:  MOVLW  02
124A:  MOVWF  x1F
124C:  MOVFF  10B,120
1250:  MOVLB  0
1252:  RCALL  0B78
1254:  MOVLW  BC
1256:  MOVWF  FF6
1258:  MOVLW  01
125A:  MOVWF  FF7
125C:  RCALL  1076
125E:  MOVLB  1
....................     
....................    if(x==5) 
1260:  MOVF   x0A,W
1262:  SUBLW  05
1264:  BNZ   127E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
1266:  MOVLW  02
1268:  MOVWF  x1F
126A:  MOVFF  10B,120
126E:  MOVLB  0
1270:  RCALL  0B78
1272:  MOVLW  D0
1274:  MOVWF  FF6
1276:  MOVLW  01
1278:  MOVWF  FF7
127A:  RCALL  1076
127C:  MOVLB  1
....................     
....................    if(x==6) 
127E:  MOVF   x0A,W
1280:  SUBLW  06
1282:  BNZ   129C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1284:  MOVLW  02
1286:  MOVWF  x1F
1288:  MOVFF  10B,120
128C:  MOVLB  0
128E:  RCALL  0B78
1290:  MOVLW  E4
1292:  MOVWF  FF6
1294:  MOVLW  01
1296:  MOVWF  FF7
1298:  RCALL  1076
129A:  MOVLB  1
....................     
....................    if(x==7) 
129C:  MOVF   x0A,W
129E:  SUBLW  07
12A0:  BNZ   12BA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
12A2:  MOVLW  02
12A4:  MOVWF  x1F
12A6:  MOVFF  10B,120
12AA:  MOVLB  0
12AC:  RCALL  0B78
12AE:  MOVLW  F8
12B0:  MOVWF  FF6
12B2:  MOVLW  01
12B4:  MOVWF  FF7
12B6:  RCALL  1076
12B8:  MOVLB  1
....................     
....................    if(x==8) 
12BA:  MOVF   x0A,W
12BC:  SUBLW  08
12BE:  BNZ   12D8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
12C0:  MOVLW  02
12C2:  MOVWF  x1F
12C4:  MOVFF  10B,120
12C8:  MOVLB  0
12CA:  RCALL  0B78
12CC:  MOVLW  0C
12CE:  MOVWF  FF6
12D0:  MOVLW  02
12D2:  MOVWF  FF7
12D4:  RCALL  1076
12D6:  MOVLB  1
....................     
....................    if(x==9) 
12D8:  MOVF   x0A,W
12DA:  SUBLW  09
12DC:  BNZ   12F6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
12DE:  MOVLW  02
12E0:  MOVWF  x1F
12E2:  MOVFF  10B,120
12E6:  MOVLB  0
12E8:  RCALL  0B78
12EA:  MOVLW  20
12EC:  MOVWF  FF6
12EE:  MOVLW  02
12F0:  MOVWF  FF7
12F2:  RCALL  1076
12F4:  MOVLB  1
....................     
....................    if(x==10) 
12F6:  MOVF   x0A,W
12F8:  SUBLW  0A
12FA:  BNZ   1314
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
12FC:  MOVLW  02
12FE:  MOVWF  x1F
1300:  MOVFF  10B,120
1304:  MOVLB  0
1306:  RCALL  0B78
1308:  MOVLW  34
130A:  MOVWF  FF6
130C:  MOVLW  02
130E:  MOVWF  FF7
1310:  RCALL  1076
1312:  MOVLB  1
.................... } 
1314:  MOVLB  0
1316:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
180E:  MOVFF  109,FBE
.................... } 
1812:  RETLW  00
....................  
.................... void main () 
.................... { 
*
251E:  CLRF   FF8
2520:  BCF    FD0.7
2522:  BSF    07.7
2524:  CLRF   FEA
2526:  CLRF   FE9
2528:  MOVLW  64
252A:  MOVWF  17
252C:  MOVLW  0B
252E:  MOVWF  18
2530:  MOVLW  02
2532:  MOVWF  19
2534:  MOVLW  0B
2536:  MOVWF  1A
2538:  MOVLW  02
253A:  MOVWF  1B
253C:  MOVLW  03
253E:  MOVWF  1C
2540:  MOVLW  02
2542:  MOVWF  1D
2544:  MOVWF  1E
2546:  MOVLW  04
2548:  MOVWF  1F
254A:  MOVLW  0A
254C:  MOVWF  20
254E:  MOVLW  01
2550:  MOVWF  21
2552:  CLRF   22
2554:  CLRF   23
2556:  CLRF   24
2558:  CLRF   25
255A:  CLRF   26
255C:  CLRF   27
255E:  CLRF   28
2560:  CLRF   29
2562:  CLRF   2A
2564:  CLRF   2B
2566:  MOVLW  0A
2568:  MOVWF  2C
256A:  CLRF   2D
256C:  MOVWF  2E
256E:  MOVWF  2F
2570:  MOVWF  30
2572:  MOVWF  31
2574:  CLRF   32
2576:  CLRF   33
2578:  CLRF   34
257A:  CLRF   35
257C:  CLRF   36
257E:  CLRF   37
2580:  CLRF   38
2582:  CLRF   39
2584:  CLRF   3A
2586:  CLRF   3B
2588:  CLRF   3C
258A:  CLRF   3D
258C:  BCF    3E.0
258E:  BCF    3E.1
2590:  BCF    3E.2
2592:  BCF    3E.3
2594:  BCF    3E.4
2596:  BCF    3E.5
2598:  BCF    3E.6
259A:  BCF    3E.7
259C:  BCF    3F.0
259E:  BCF    3F.1
25A0:  BCF    3F.2
25A2:  CLRF   40
25A4:  CLRF   4F
25A6:  CLRF   4E
25A8:  CLRF   4D
25AA:  CLRF   4C
25AC:  CLRF   53
25AE:  CLRF   52
25B0:  CLRF   51
25B2:  CLRF   50
25B4:  CLRF   57
25B6:  CLRF   56
25B8:  MOVLW  4B
25BA:  MOVWF  55
25BC:  MOVLW  86
25BE:  MOVWF  54
25C0:  BCF    3F.4
25C2:  BCF    3F.5
25C4:  BCF    3F.6
25C6:  BCF    3F.7
25C8:  BCF    58.0
25CA:  BCF    58.1
25CC:  BCF    58.2
25CE:  BCF    58.3
25D0:  BCF    58.4
25D2:  BCF    58.5
25D4:  CLRF   5A
25D6:  CLRF   59
25D8:  CLRF   5C
25DA:  CLRF   5B
25DC:  CLRF   5E
25DE:  CLRF   5D
25E0:  CLRF   x60
25E2:  CLRF   5F
25E4:  CLRF   x64
25E6:  MOVLW  E0
25E8:  MOVWF  x63
25EA:  MOVLW  5D
25EC:  MOVWF  x62
25EE:  MOVLW  8A
25F0:  MOVWF  x61
25F2:  CLRF   x68
25F4:  MOVLW  C0
25F6:  MOVWF  x67
25F8:  MOVLW  28
25FA:  MOVWF  x66
25FC:  MOVLW  89
25FE:  MOVWF  x65
2600:  MOVLW  33
2602:  MOVWF  x6C
2604:  MOVLW  13
2606:  MOVWF  x6B
2608:  MOVLW  15
260A:  MOVWF  x6A
260C:  MOVLW  87
260E:  MOVWF  x69
2610:  CLRF   x70
2612:  CLRF   x6F
2614:  CLRF   x6E
2616:  CLRF   x6D
2618:  CLRF   x74
261A:  CLRF   x73
261C:  CLRF   x72
261E:  CLRF   x71
2620:  CLRF   x78
2622:  CLRF   x77
2624:  MOVLW  7A
2626:  MOVWF  x76
2628:  MOVLW  88
262A:  MOVWF  x75
262C:  CLRF   x7C
262E:  CLRF   x7B
2630:  CLRF   x7A
2632:  CLRF   x79
2634:  CLRF   x80
2636:  CLRF   x7F
2638:  CLRF   x7E
263A:  CLRF   x7D
263C:  CLRF   x84
263E:  CLRF   x83
2640:  CLRF   x82
2642:  CLRF   x81
2644:  MOVLW  19
2646:  MOVWF  x88
2648:  MOVLW  53
264A:  MOVWF  x87
264C:  MOVLW  18
264E:  MOVWF  x86
2650:  MOVLW  68
2652:  MOVWF  x85
2654:  MOVLW  E9
2656:  MOVWF  x8C
2658:  MOVLW  BD
265A:  MOVWF  x8B
265C:  MOVLW  C6
265E:  MOVWF  x8A
2660:  MOVLW  71
2662:  MOVWF  x89
2664:  MOVLW  BE
2666:  MOVWF  x90
2668:  MOVLW  96
266A:  MOVWF  x8F
266C:  MOVLW  24
266E:  MOVWF  x8E
2670:  MOVLW  7A
2672:  MOVWF  x8D
2674:  MOVLW  F3
2676:  MOVWF  x94
2678:  MOVLW  5A
267A:  MOVWF  x93
267C:  MOVLW  AB
267E:  MOVWF  x92
2680:  MOVLW  81
2682:  MOVWF  x91
2684:  CLRF   x98
2686:  CLRF   x97
2688:  CLRF   x96
268A:  CLRF   x95
268C:  CLRF   x9C
268E:  CLRF   x9B
2690:  CLRF   x9A
2692:  CLRF   x99
2694:  CLRF   xA0
2696:  CLRF   x9F
2698:  CLRF   x9E
269A:  CLRF   x9D
269C:  CLRF   xA4
269E:  CLRF   xA3
26A0:  CLRF   xA2
26A2:  CLRF   xA1
26A4:  CLRF   xA8
26A6:  CLRF   xA7
26A8:  CLRF   xA6
26AA:  CLRF   xA5
26AC:  CLRF   xAC
26AE:  CLRF   xAB
26B0:  CLRF   xAA
26B2:  CLRF   xA9
26B4:  MOVLW  8B
26B6:  MOVWF  xB0
26B8:  MOVLW  FD
26BA:  MOVWF  xAF
26BC:  MOVLW  65
26BE:  MOVWF  xAE
26C0:  MOVLW  7C
26C2:  MOVWF  xAD
26C4:  CLRF   xB4
26C6:  CLRF   xB3
26C8:  CLRF   xB2
26CA:  CLRF   xB1
26CC:  CLRF   xB8
26CE:  CLRF   xB7
26D0:  CLRF   xB6
26D2:  CLRF   xB5
26D4:  CLRF   xBC
26D6:  CLRF   xBB
26D8:  CLRF   xBA
26DA:  CLRF   xB9
26DC:  CLRF   xC0
26DE:  CLRF   xBF
26E0:  CLRF   xBE
26E2:  CLRF   xBD
26E4:  CLRF   xC4
26E6:  CLRF   xC3
26E8:  CLRF   xC2
26EA:  CLRF   xC1
26EC:  CLRF   xC8
26EE:  CLRF   xC7
26F0:  CLRF   xC6
26F2:  CLRF   xC5
26F4:  CLRF   xCC
26F6:  CLRF   xCB
26F8:  CLRF   xCA
26FA:  MOVLW  7F
26FC:  MOVWF  xC9
26FE:  CLRF   xD0
2700:  CLRF   xCF
2702:  MOVLW  24
2704:  MOVWF  xCE
2706:  MOVLW  88
2708:  MOVWF  xCD
270A:  CLRF   xD4
270C:  CLRF   xD3
270E:  CLRF   xD2
2710:  CLRF   xD1
2712:  CLRF   xD8
2714:  CLRF   xD7
2716:  CLRF   xD6
2718:  CLRF   xD5
271A:  MOVF   FC1,W
271C:  ANDLW  C0
271E:  IORLW  0F
2720:  MOVWF  FC1
2722:  MOVLW  07
2724:  MOVWF  FB4
2726:  MOVLW  3E
2728:  MOVWF  41
272A:  MOVLW  20
272C:  MOVWF  42
272E:  MOVLW  5E
2730:  MOVWF  43
2732:  CLRF   44
2734:  CLRF   45
2736:  CLRF   46
2738:  CLRF   47
273A:  CLRF   48
273C:  CLRF   49
273E:  CLRF   4A
2740:  CLRF   4B
2742:  CLRF   xD9
2744:  CLRF   xDA
2746:  CLRF   xDB
2748:  CLRF   xDC
274A:  CLRF   xDD
274C:  CLRF   xDE
274E:  CLRF   xDF
2750:  CLRF   xE0
2752:  CLRF   xE1
2754:  CLRF   xE2
2756:  CLRF   xE3
2758:  CLRF   xE4
275A:  CLRF   xE5
275C:  CLRF   xE6
275E:  CLRF   xE7
2760:  CLRF   xE8
2762:  CLRF   xE9
2764:  CLRF   xEA
2766:  CLRF   xEB
2768:  CLRF   xEC
276A:  CLRF   xED
276C:  CLRF   xEE
276E:  CLRF   xEF
2770:  CLRF   xF0
2772:  CLRF   xF1
2774:  CLRF   xF2
2776:  CLRF   xF3
2778:  CLRF   xF4
277A:  CLRF   xF5
277C:  CLRF   xF6
277E:  CLRF   xF7
2780:  CLRF   xF8
2782:  CLRF   xF9
2784:  CLRF   xFA
2786:  CLRF   xFB
2788:  CLRF   xFC
278A:  CLRF   xFD
278C:  CLRF   xFE
278E:  CLRF   xFF
2790:  MOVLB  1
2792:  CLRF   x00
2794:  CLRF   x01
2796:  CLRF   x02
2798:  CLRF   x03
279A:  CLRF   x04
279C:  CLRF   x05
279E:  CLRF   x06
27A0:  CLRF   x07
27A2:  CLRF   x08
....................    setup_adc_ports(AN0_TO_AN3); 
27A4:  MOVF   FC1,W
27A6:  ANDLW  C0
27A8:  IORLW  0B
27AA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
27AC:  BCF    FC0.0
27AE:  BSF    FC0.1
27B0:  BCF    FC0.2
27B2:  BSF    FC0.7
27B4:  BSF    FC2.0
....................    output_d(0);  
27B6:  CLRF   F95
27B8:  CLRF   F8C
....................    ModoSleep=1; 
27BA:  BSF    3F.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
27BC:  MOVLW  85
27BE:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
27C0:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
27C2:  MOVLW  00
27C4:  IORLW  05
27C6:  MOVWF  FCA
27C8:  MOVLW  FF
27CA:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
27CC:  BCF    F94.2
27CE:  BCF    F8B.2
27D0:  BCF    F96.6
27D2:  MOVLW  0C
27D4:  MOVWF  FBD
27D6:  CLRF   FB7
27D8:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
27DA:  MOVLW  C0
27DC:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
27DE:  CLRF   FBE
....................    lcd_init(); 
27E0:  MOVLB  0
27E2:  CALL   0B04
....................    printf(lcd_putc,"\f"); 
27E6:  MOVLW  0C
27E8:  MOVLB  1
27EA:  MOVWF  x1E
27EC:  MOVLB  0
27EE:  CALL   0BEA
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
27F2:  MOVFF  FF2,109
27F6:  BCF    FF2.7
27F8:  CLRF   FA9
27FA:  BCF    FA6.6
27FC:  BCF    FA6.7
27FE:  BSF    FA6.0
2800:  MOVF   FA8,W
2802:  MOVLB  1
2804:  BTFSC  x09.7
2806:  BSF    FF2.7
2808:  MOVWF  48
280A:  MOVLW  14
280C:  MOVWF  x24
280E:  MOVLB  0
2810:  CALL   0A66
2814:  MOVFF  FF2,109
2818:  BCF    FF2.7
281A:  MOVLW  01
281C:  MOVWF  FA9
281E:  BCF    FA6.6
2820:  BCF    FA6.7
2822:  BSF    FA6.0
2824:  MOVF   FA8,W
2826:  MOVLB  1
2828:  BTFSC  x09.7
282A:  BSF    FF2.7
282C:  MOVWF  49
282E:  MOVLW  14
2830:  MOVWF  x24
2832:  MOVLB  0
2834:  CALL   0A66
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
2838:  MOVFF  FF2,109
283C:  BCF    FF2.7
283E:  MOVLW  02
2840:  MOVWF  FA9
2842:  BCF    FA6.6
2844:  BCF    FA6.7
2846:  BSF    FA6.0
2848:  MOVF   FA8,W
284A:  MOVLB  1
284C:  BTFSC  x09.7
284E:  BSF    FF2.7
2850:  MOVWF  4A
2852:  MOVLW  14
2854:  MOVWF  x24
2856:  MOVLB  0
2858:  CALL   0A66
285C:  MOVFF  FF2,109
2860:  BCF    FF2.7
2862:  MOVLW  03
2864:  MOVWF  FA9
2866:  BCF    FA6.6
2868:  BCF    FA6.7
286A:  BSF    FA6.0
286C:  MOVF   FA8,W
286E:  MOVLB  1
2870:  BTFSC  x09.7
2872:  BSF    FF2.7
2874:  MOVWF  4B
2876:  MOVLW  14
2878:  MOVWF  x24
287A:  MOVLB  0
287C:  CALL   0A66
....................    estadoalarma=read_eeprom(5); 
2880:  MOVFF  FF2,109
2884:  BCF    FF2.7
2886:  MOVLW  05
2888:  MOVWF  FA9
288A:  BCF    FA6.6
288C:  BCF    FA6.7
288E:  BSF    FA6.0
2890:  MOVF   FA8,W
2892:  MOVLB  1
2894:  BTFSC  x09.7
2896:  BSF    FF2.7
2898:  MOVWF  01
289A:  BCF    3E.2
289C:  BTFSC  01.0
289E:  BSF    3E.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
28A0:  MOVFF  FF2,109
28A4:  BCF    FF2.7
28A6:  MOVLW  0A
28A8:  MOVWF  FA9
28AA:  BCF    FA6.6
28AC:  BCF    FA6.7
28AE:  BSF    FA6.0
28B0:  MOVF   FA8,W
28B2:  BTFSC  x09.7
28B4:  BSF    FF2.7
28B6:  MOVWF  30
28B8:  MOVFF  FF2,109
28BC:  BCF    FF2.7
28BE:  MOVLW  0B
28C0:  MOVWF  FA9
28C2:  BCF    FA6.6
28C4:  BCF    FA6.7
28C6:  BSF    FA6.0
28C8:  MOVF   FA8,W
28CA:  BTFSC  x09.7
28CC:  BSF    FF2.7
28CE:  MOVWF  2F
28D0:  MOVFF  FF2,109
28D4:  BCF    FF2.7
28D6:  MOVLW  0C
28D8:  MOVWF  FA9
28DA:  BCF    FA6.6
28DC:  BCF    FA6.7
28DE:  BSF    FA6.0
28E0:  MOVF   FA8,W
28E2:  BTFSC  x09.7
28E4:  BSF    FF2.7
28E6:  MOVWF  31
28E8:  MOVFF  FF2,109
28EC:  BCF    FF2.7
28EE:  MOVLW  0D
28F0:  MOVWF  FA9
28F2:  BCF    FA6.6
28F4:  BCF    FA6.7
28F6:  BSF    FA6.0
28F8:  MOVF   FA8,W
28FA:  BTFSC  x09.7
28FC:  BSF    FF2.7
28FE:  MOVWF  32
2900:  MOVFF  32,2C
....................  
....................    purga_minutos=read_eeprom(20);purga_segundos=read_eeprom(21); 
2904:  MOVFF  FF2,109
2908:  BCF    FF2.7
290A:  MOVLW  14
290C:  MOVWF  FA9
290E:  BCF    FA6.6
2910:  BCF    FA6.7
2912:  BSF    FA6.0
2914:  MOVF   FA8,W
2916:  BTFSC  x09.7
2918:  BSF    FF2.7
291A:  MOVWF  22
291C:  MOVFF  FF2,109
2920:  BCF    FF2.7
2922:  MOVLW  15
2924:  MOVWF  FA9
2926:  BCF    FA6.6
2928:  BCF    FA6.7
292A:  BSF    FA6.0
292C:  MOVF   FA8,W
292E:  BTFSC  x09.7
2930:  BSF    FF2.7
2932:  MOVWF  37
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
2934:  MOVFF  22,23
2938:  MOVFF  37,38
....................    ppurga_minutos=read_eeprom(22);ppurga_segundos=read_eeprom(23); 
293C:  MOVFF  FF2,109
2940:  BCF    FF2.7
2942:  MOVLW  16
2944:  MOVWF  FA9
2946:  BCF    FA6.6
2948:  BCF    FA6.7
294A:  BSF    FA6.0
294C:  MOVF   FA8,W
294E:  BTFSC  x09.7
2950:  BSF    FF2.7
2952:  MOVWF  3B
2954:  MOVFF  FF2,109
2958:  BCF    FF2.7
295A:  MOVLW  17
295C:  MOVWF  FA9
295E:  BCF    FA6.6
2960:  BCF    FA6.7
2962:  BSF    FA6.0
2964:  MOVF   FA8,W
2966:  BTFSC  x09.7
2968:  BSF    FF2.7
296A:  MOVWF  39
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
296C:  MOVFF  3B,3C
2970:  MOVFF  39,3A
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
2974:  MOVFF  FF2,109
2978:  BCF    FF2.7
297A:  MOVLW  19
297C:  MOVWF  FA9
297E:  BCF    FA6.6
2980:  BCF    FA6.7
2982:  BSF    FA6.0
2984:  MOVF   FA8,W
2986:  BTFSC  x09.7
2988:  BSF    FF2.7
298A:  MOVWF  24
....................    Temporal=read_eeprom(26); 
298C:  MOVFF  FF2,109
2990:  BCF    FF2.7
2992:  MOVLW  1A
2994:  MOVWF  FA9
2996:  BCF    FA6.6
2998:  BCF    FA6.7
299A:  BSF    FA6.0
299C:  MOVF   FA8,W
299E:  BTFSC  x09.7
29A0:  BSF    FF2.7
29A2:  CLRF   x13
29A4:  MOVWF  x12
29A6:  MOVLB  0
29A8:  CALL   0C56
29AC:  MOVFF  03,B4
29B0:  MOVFF  02,B3
29B4:  MOVFF  01,B2
29B8:  MOVFF  00,B1
....................    Temporal=Temporal/100.0; 
29BC:  MOVFF  B4,12A
29C0:  MOVFF  B3,129
29C4:  MOVFF  B2,128
29C8:  MOVFF  B1,127
29CC:  MOVLB  1
29CE:  CLRF   x2E
29D0:  CLRF   x2D
29D2:  MOVLW  48
29D4:  MOVWF  x2C
29D6:  MOVLW  85
29D8:  MOVWF  x2B
29DA:  MOVLB  0
29DC:  CALL   0C8C
29E0:  MOVFF  03,B4
29E4:  MOVFF  02,B3
29E8:  MOVFF  01,B2
29EC:  MOVFF  00,B1
....................    Ajuste1=Entero+Temporal; 
29F0:  MOVLB  1
29F2:  CLRF   x13
29F4:  MOVFF  24,112
29F8:  MOVLB  0
29FA:  CALL   0C56
29FE:  BCF    FD8.1
2A00:  MOVFF  03,12A
2A04:  MOVFF  02,129
2A08:  MOVFF  01,128
2A0C:  MOVFF  00,127
2A10:  MOVFF  B4,12E
2A14:  MOVFF  B3,12D
2A18:  MOVFF  B2,12C
2A1C:  MOVFF  B1,12B
2A20:  CALL   0DEA
2A24:  MOVFF  03,CC
2A28:  MOVFF  02,CB
2A2C:  MOVFF  01,CA
2A30:  MOVFF  00,C9
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
2A34:  MOVFF  FF2,109
2A38:  BCF    FF2.7
2A3A:  MOVLW  28
2A3C:  MOVWF  FA9
2A3E:  BCF    FA6.6
2A40:  BCF    FA6.7
2A42:  BSF    FA6.0
2A44:  MOVF   FA8,W
2A46:  MOVLB  1
2A48:  BTFSC  x09.7
2A4A:  BSF    FF2.7
2A4C:  MOVWF  24
....................    Temporal=read_eeprom(41); 
2A4E:  MOVFF  FF2,109
2A52:  BCF    FF2.7
2A54:  MOVLW  29
2A56:  MOVWF  FA9
2A58:  BCF    FA6.6
2A5A:  BCF    FA6.7
2A5C:  BSF    FA6.0
2A5E:  MOVF   FA8,W
2A60:  BTFSC  x09.7
2A62:  BSF    FF2.7
2A64:  CLRF   x13
2A66:  MOVWF  x12
2A68:  MOVLB  0
2A6A:  CALL   0C56
2A6E:  MOVFF  03,B4
2A72:  MOVFF  02,B3
2A76:  MOVFF  01,B2
2A7A:  MOVFF  00,B1
....................    Temporal=Temporal/100.0; 
2A7E:  MOVFF  B4,12A
2A82:  MOVFF  B3,129
2A86:  MOVFF  B2,128
2A8A:  MOVFF  B1,127
2A8E:  MOVLB  1
2A90:  CLRF   x2E
2A92:  CLRF   x2D
2A94:  MOVLW  48
2A96:  MOVWF  x2C
2A98:  MOVLW  85
2A9A:  MOVWF  x2B
2A9C:  MOVLB  0
2A9E:  CALL   0C8C
2AA2:  MOVFF  03,B4
2AA6:  MOVFF  02,B3
2AAA:  MOVFF  01,B2
2AAE:  MOVFF  00,B1
....................    setpoint=Entero+Temporal; 
2AB2:  MOVLB  1
2AB4:  CLRF   x13
2AB6:  MOVFF  24,112
2ABA:  MOVLB  0
2ABC:  CALL   0C56
2AC0:  BCF    FD8.1
2AC2:  MOVFF  03,12A
2AC6:  MOVFF  02,129
2ACA:  MOVFF  01,128
2ACE:  MOVFF  00,127
2AD2:  MOVFF  B4,12E
2AD6:  MOVFF  B3,12D
2ADA:  MOVFF  B2,12C
2ADE:  MOVFF  B1,12B
2AE2:  CALL   0DEA
2AE6:  MOVFF  03,4F
2AEA:  MOVFF  02,4E
2AEE:  MOVFF  01,4D
2AF2:  MOVFF  00,4C
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
2AF6:  MOVFF  FF2,109
2AFA:  BCF    FF2.7
2AFC:  MOVLW  3C
2AFE:  MOVWF  FA9
2B00:  BCF    FA6.6
2B02:  BCF    FA6.7
2B04:  BSF    FA6.0
2B06:  MOVF   FA8,W
2B08:  MOVLB  1
2B0A:  BTFSC  x09.7
2B0C:  BSF    FF2.7
2B0E:  MOVWF  27
....................    Temporal1=read_eeprom(61); 
2B10:  MOVFF  FF2,109
2B14:  BCF    FF2.7
2B16:  MOVLW  3D
2B18:  MOVWF  FA9
2B1A:  BCF    FA6.6
2B1C:  BCF    FA6.7
2B1E:  BSF    FA6.0
2B20:  MOVF   FA8,W
2B22:  BTFSC  x09.7
2B24:  BSF    FF2.7
2B26:  CLRF   x13
2B28:  MOVWF  x12
2B2A:  MOVLB  0
2B2C:  CALL   0C56
2B30:  MOVFF  03,C0
2B34:  MOVFF  02,BF
2B38:  MOVFF  01,BE
2B3C:  MOVFF  00,BD
....................    Temporal1=Temporal1/100.0; 
2B40:  MOVFF  C0,12A
2B44:  MOVFF  BF,129
2B48:  MOVFF  BE,128
2B4C:  MOVFF  BD,127
2B50:  MOVLB  1
2B52:  CLRF   x2E
2B54:  CLRF   x2D
2B56:  MOVLW  48
2B58:  MOVWF  x2C
2B5A:  MOVLW  85
2B5C:  MOVWF  x2B
2B5E:  MOVLB  0
2B60:  CALL   0C8C
2B64:  MOVFF  03,C0
2B68:  MOVFF  02,BF
2B6C:  MOVFF  01,BE
2B70:  MOVFF  00,BD
....................    Diferencia=Entero1+Temporal1; 
2B74:  MOVLB  1
2B76:  CLRF   x13
2B78:  MOVFF  27,112
2B7C:  MOVLB  0
2B7E:  CALL   0C56
2B82:  BCF    FD8.1
2B84:  MOVFF  03,12A
2B88:  MOVFF  02,129
2B8C:  MOVFF  01,128
2B90:  MOVFF  00,127
2B94:  MOVFF  C0,12E
2B98:  MOVFF  BF,12D
2B9C:  MOVFF  BE,12C
2BA0:  MOVFF  BD,12B
2BA4:  CALL   0DEA
2BA8:  MOVFF  03,C8
2BAC:  MOVFF  02,C7
2BB0:  MOVFF  01,C6
2BB4:  MOVFF  00,C5
....................     
....................    negativo=read_eeprom(50); 
2BB8:  MOVFF  FF2,109
2BBC:  BCF    FF2.7
2BBE:  MOVLW  32
2BC0:  MOVWF  FA9
2BC2:  BCF    FA6.6
2BC4:  BCF    FA6.7
2BC6:  BSF    FA6.0
2BC8:  MOVF   FA8,W
2BCA:  MOVLB  1
2BCC:  BTFSC  x09.7
2BCE:  BSF    FF2.7
2BD0:  MOVWF  2E
....................  
....................    MediaMovil=read_eeprom(42); 
2BD2:  MOVFF  FF2,109
2BD6:  BCF    FF2.7
2BD8:  MOVLW  2A
2BDA:  MOVWF  FA9
2BDC:  BCF    FA6.6
2BDE:  BCF    FA6.7
2BE0:  BSF    FA6.0
2BE2:  MOVF   FA8,W
2BE4:  BTFSC  x09.7
2BE6:  BSF    FF2.7
2BE8:  MOVWF  2D
....................    if(MediaMovil>12) 
2BEA:  MOVF   2D,W
2BEC:  SUBLW  0C
2BEE:  BC    2BF4
....................    {MediaMovil=12;} 
2BF0:  MOVLW  0C
2BF2:  MOVWF  2D
....................     
....................    if(MediaMovil<1) 
2BF4:  MOVF   2D,F
2BF6:  BNZ   2BFC
....................    {MediaMovil=1;} 
2BF8:  MOVLW  01
2BFA:  MOVWF  2D
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
2BFC:  MOVFF  FF2,109
2C00:  BCF    FF2.7
2C02:  MOVLW  46
2C04:  MOVWF  FA9
2C06:  BCF    FA6.6
2C08:  BCF    FA6.7
2C0A:  BSF    FA6.0
2C0C:  MOVF   FA8,W
2C0E:  BTFSC  x09.7
2C10:  BSF    FF2.7
2C12:  MOVWF  33
2C14:  MOVFF  FF2,109
2C18:  BCF    FF2.7
2C1A:  MOVLW  47
2C1C:  MOVWF  FA9
2C1E:  BCF    FA6.6
2C20:  BCF    FA6.7
2C22:  BSF    FA6.0
2C24:  MOVF   FA8,W
2C26:  BTFSC  x09.7
2C28:  BSF    FF2.7
2C2A:  MOVWF  34
2C2C:  MOVFF  FF2,109
2C30:  BCF    FF2.7
2C32:  MOVLW  48
2C34:  MOVWF  FA9
2C36:  BCF    FA6.6
2C38:  BCF    FA6.7
2C3A:  BSF    FA6.0
2C3C:  MOVF   FA8,W
2C3E:  BTFSC  x09.7
2C40:  BSF    FF2.7
2C42:  MOVWF  35
2C44:  MOVFF  FF2,109
2C48:  BCF    FF2.7
2C4A:  MOVLW  49
2C4C:  MOVWF  FA9
2C4E:  BCF    FA6.6
2C50:  BCF    FA6.7
2C52:  BSF    FA6.0
2C54:  MOVF   FA8,W
2C56:  BTFSC  x09.7
2C58:  BSF    FF2.7
2C5A:  MOVWF  01
2C5C:  BCF    3F.2
2C5E:  BTFSC  01.0
2C60:  BSF    3F.2
....................    Menu=200; 
2C62:  MOVLW  C8
2C64:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
2C66:  MOVF   17,W
2C68:  SUBLW  C8
2C6A:  BNZ   2D44
....................       if(inicio==0) 
2C6C:  BTFSC  3F.4
2C6E:  BRA    2D42
....................       { 
....................       delay_ms(500); 
2C70:  MOVLW  02
2C72:  MOVWF  x09
2C74:  MOVLW  FA
2C76:  MOVWF  x24
2C78:  MOVLB  0
2C7A:  CALL   0A66
2C7E:  MOVLB  1
2C80:  DECFSZ x09,F
2C82:  BRA    2C74
....................          if(input(PIN_B0)) 
2C84:  BSF    F93.0
2C86:  BTFSS  F81.0
2C88:  BRA    2D42
....................          { 
....................             lcd_init(); 
2C8A:  MOVLB  0
2C8C:  CALL   0B04
....................             intensidadpantalla(contraste); 
2C90:  MOVFF  20,109
2C94:  CALL   1062
....................             lcd_gotoxy(1,1); 
2C98:  MOVLW  01
2C9A:  MOVLB  1
2C9C:  MOVWF  x1F
2C9E:  MOVWF  x20
2CA0:  MOVLB  0
2CA2:  CALL   0B78
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
2CA6:  MOVLW  48
2CA8:  MOVWF  FF6
2CAA:  MOVLW  02
2CAC:  MOVWF  FF7
2CAE:  CALL   1076
....................             lcd_gotoxy(1,2); 
2CB2:  MOVLW  01
2CB4:  MOVLB  1
2CB6:  MOVWF  x1F
2CB8:  MOVLW  02
2CBA:  MOVWF  x20
2CBC:  MOVLB  0
2CBE:  CALL   0B78
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
2CC2:  MOVLW  5E
2CC4:  MOVWF  FF6
2CC6:  MOVLW  02
2CC8:  MOVWF  FF7
2CCA:  CALL   1076
....................             lcd_gotoxy(1,3); 
2CCE:  MOVLW  01
2CD0:  MOVLB  1
2CD2:  MOVWF  x1F
2CD4:  MOVLW  03
2CD6:  MOVWF  x20
2CD8:  MOVLB  0
2CDA:  CALL   0B78
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
2CDE:  MOVLW  74
2CE0:  MOVWF  FF6
2CE2:  MOVLW  02
2CE4:  MOVWF  FF7
2CE6:  CALL   1076
....................             lcd_gotoxy(1,4); 
2CEA:  MOVLW  01
2CEC:  MOVLB  1
2CEE:  MOVWF  x1F
2CF0:  MOVLW  04
2CF2:  MOVWF  x20
2CF4:  MOVLB  0
2CF6:  CALL   0B78
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
2CFA:  MOVLW  8A
2CFC:  MOVWF  FF6
2CFE:  MOVLW  02
2D00:  MOVWF  FF7
2D02:  CALL   1076
....................             delay_ms(2000); 
2D06:  MOVLW  08
2D08:  MOVLB  1
2D0A:  MOVWF  x09
2D0C:  MOVLW  FA
2D0E:  MOVWF  x24
2D10:  MOVLB  0
2D12:  CALL   0A66
2D16:  MOVLB  1
2D18:  DECFSZ x09,F
2D1A:  BRA    2D0C
....................             printf(lcd_putc,"\f"); 
2D1C:  MOVLW  0C
2D1E:  MOVWF  x1E
2D20:  MOVLB  0
2D22:  CALL   0BEA
....................             inicio=1; 
2D26:  BSF    3F.4
....................             Menu=0; 
2D28:  CLRF   17
....................             ModoSleep=0; 
2D2A:  BCF    3F.3
....................             delay_ms(500); 
2D2C:  MOVLW  02
2D2E:  MOVLB  1
2D30:  MOVWF  x09
2D32:  MOVLW  FA
2D34:  MOVWF  x24
2D36:  MOVLB  0
2D38:  CALL   0A66
2D3C:  MOVLB  1
2D3E:  DECFSZ x09,F
2D40:  BRA    2D32
....................          } 
....................       } 
....................    } 
2D42:  BRA    2C66
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2D44:  MOVF   17,F
2D46:  BTFSS  FD8.2
2D48:  BRA    31AA
....................    flag_latencia=1;set_pwm1_duty(0); 
2D4A:  BSF    3F.0
2D4C:  CLRF   FBE
....................       if(Latencia==1) 
2D4E:  BTFSS  3F.1
2D50:  BRA    2D60
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2D52:  MOVLW  0C
2D54:  MOVWF  x1E
2D56:  MOVLB  0
2D58:  CALL   0BEA
2D5C:  RESET
2D5E:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
2D60:  MOVLW  01
2D62:  MOVWF  x1F
2D64:  MOVWF  x20
2D66:  MOVLB  0
2D68:  CALL   0B78
....................    printf(lcd_putc,"     Ingrese        "); 
2D6C:  MOVLW  A0
2D6E:  MOVWF  FF6
2D70:  MOVLW  02
2D72:  MOVWF  FF7
2D74:  CALL   1076
....................    lcd_gotoxy(1,2); 
2D78:  MOVLW  01
2D7A:  MOVLB  1
2D7C:  MOVWF  x1F
2D7E:  MOVLW  02
2D80:  MOVWF  x20
2D82:  MOVLB  0
2D84:  CALL   0B78
....................    printf(lcd_putc,"    Contraseña      "); 
2D88:  MOVLW  B6
2D8A:  MOVWF  FF6
2D8C:  MOVLW  02
2D8E:  MOVWF  FF7
2D90:  CALL   1076
....................    lcd_gotoxy(1,3); 
2D94:  MOVLW  01
2D96:  MOVLB  1
2D98:  MOVWF  x1F
2D9A:  MOVLW  03
2D9C:  MOVWF  x20
2D9E:  MOVLB  0
2DA0:  CALL   0B78
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2DA4:  MOVLW  CC
2DA6:  MOVWF  FF6
2DA8:  MOVLW  02
2DAA:  MOVWF  FF7
2DAC:  MOVLW  0A
2DAE:  MOVLB  1
2DB0:  MOVWF  x11
2DB2:  MOVLB  0
2DB4:  CALL   1096
2DB8:  MOVFF  44,109
2DBC:  MOVLW  1F
2DBE:  MOVLB  1
2DC0:  MOVWF  x0A
2DC2:  MOVLB  0
2DC4:  CALL   10EA
2DC8:  MOVFF  45,109
2DCC:  MOVLW  1F
2DCE:  MOVLB  1
2DD0:  MOVWF  x0A
2DD2:  MOVLB  0
2DD4:  CALL   10EA
2DD8:  MOVFF  46,109
2DDC:  MOVLW  1F
2DDE:  MOVLB  1
2DE0:  MOVWF  x0A
2DE2:  MOVLB  0
2DE4:  CALL   10EA
2DE8:  MOVFF  47,109
2DEC:  MOVLW  1F
2DEE:  MOVLB  1
2DF0:  MOVWF  x0A
2DF2:  MOVLB  0
2DF4:  CALL   10EA
2DF8:  MOVLW  20
2DFA:  MOVLB  1
2DFC:  MOVWF  x1E
2DFE:  MOVLB  0
2E00:  CALL   0BEA
2E04:  MOVLW  20
2E06:  MOVLB  1
2E08:  MOVWF  x1E
2E0A:  MOVLB  0
2E0C:  CALL   0BEA
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2E10:  BSF    F93.3
2E12:  BTFSS  F81.3
2E14:  BRA    2E40
....................       {  if(Flanco == 0)  
2E16:  BTFSC  3E.4
2E18:  BRA    2E3E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2E1A:  MOVLW  0B
2E1C:  SUBWF  1A,W
2E1E:  CLRF   03
2E20:  ADDLW  44
2E22:  MOVWF  FE9
2E24:  MOVLW  00
2E26:  ADDWFC 03,W
2E28:  MOVWF  FEA
2E2A:  INCF   FEF,F
2E2C:  BSF    3E.4
2E2E:  MOVLW  1E
2E30:  MOVLB  1
2E32:  MOVWF  x24
2E34:  MOVLB  0
2E36:  CALL   0A66
2E3A:  CLRF   5C
2E3C:  CLRF   5B
....................          else 
2E3E:  BRA    2E42
....................             {Flanco = 0;} 
2E40:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2E42:  BSF    F93.2
2E44:  BTFSS  F81.2
2E46:  BRA    2E72
....................       {  if(Flanco2 == 0)  
2E48:  BTFSC  3E.6
2E4A:  BRA    2E70
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2E4C:  MOVLW  0B
2E4E:  SUBWF  1A,W
2E50:  CLRF   03
2E52:  ADDLW  44
2E54:  MOVWF  FE9
2E56:  MOVLW  00
2E58:  ADDWFC 03,W
2E5A:  MOVWF  FEA
2E5C:  DECF   FEF,F
2E5E:  BSF    3E.6
2E60:  MOVLW  1E
2E62:  MOVLB  1
2E64:  MOVWF  x24
2E66:  MOVLB  0
2E68:  CALL   0A66
2E6C:  CLRF   5C
2E6E:  CLRF   5B
....................          else 
2E70:  BRA    2E74
....................             {Flanco2 = 0;} 
2E72:  BCF    3E.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2E74:  BSF    F93.0
2E76:  BTFSS  F81.0
2E78:  BRA    2EA0
....................       {  if(Flanco1 == 0)  
2E7A:  BTFSC  3E.5
2E7C:  BRA    2E9E
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2E7E:  BSF    3E.5
2E80:  INCF   1A,F
2E82:  MOVLW  1E
2E84:  MOVLB  1
2E86:  MOVWF  x24
2E88:  MOVLB  0
2E8A:  CALL   0A66
2E8E:  MOVLW  0C
2E90:  MOVLB  1
2E92:  MOVWF  x1E
2E94:  MOVLB  0
2E96:  CALL   0BEA
2E9A:  CLRF   5C
2E9C:  CLRF   5B
....................          else 
2E9E:  BRA    2EA2
....................             {Flanco1 = 0;}    
2EA0:  BCF    3E.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2EA2:  BSF    F93.1
2EA4:  BTFSS  F81.1
2EA6:  BRA    2ECE
....................       {  if(Flanco3 == 0)  
2EA8:  BTFSC  3E.7
2EAA:  BRA    2ECC
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2EAC:  BSF    3E.7
2EAE:  DECF   1A,F
2EB0:  MOVLW  1E
2EB2:  MOVLB  1
2EB4:  MOVWF  x24
2EB6:  MOVLB  0
2EB8:  CALL   0A66
2EBC:  MOVLW  0C
2EBE:  MOVLB  1
2EC0:  MOVWF  x1E
2EC2:  MOVLB  0
2EC4:  CALL   0BEA
2EC8:  CLRF   5C
2ECA:  CLRF   5B
....................          else 
2ECC:  BRA    2ED0
....................             {Flanco3 = 0;}     
2ECE:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2ED0:  MOVLW  0B
2ED2:  SUBWF  1A,W
2ED4:  CLRF   03
2ED6:  ADDLW  44
2ED8:  MOVWF  FE9
2EDA:  MOVLW  00
2EDC:  ADDWFC 03,W
2EDE:  MOVWF  FEA
2EE0:  BTFSC  FEF.7
2EE2:  BRA    2EE6
2EE4:  BRA    2EFA
....................        {clave[unidad-11]=9;} 
2EE6:  MOVLW  0B
2EE8:  SUBWF  1A,W
2EEA:  CLRF   03
2EEC:  ADDLW  44
2EEE:  MOVWF  FE9
2EF0:  MOVLW  00
2EF2:  ADDWFC 03,W
2EF4:  MOVWF  FEA
2EF6:  MOVLW  09
2EF8:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2EFA:  MOVLW  0B
2EFC:  SUBWF  1A,W
2EFE:  CLRF   03
2F00:  ADDLW  44
2F02:  MOVWF  FE9
2F04:  MOVLW  00
2F06:  ADDWFC 03,W
2F08:  MOVWF  FEA
2F0A:  BTFSC  FEF.7
2F0C:  BRA    2F26
2F0E:  MOVF   FEF,W
2F10:  SUBLW  09
2F12:  BC    2F26
....................        {clave[unidad-11]=0;} 
2F14:  MOVLW  0B
2F16:  SUBWF  1A,W
2F18:  CLRF   03
2F1A:  ADDLW  44
2F1C:  MOVWF  FE9
2F1E:  MOVLW  00
2F20:  ADDWFC 03,W
2F22:  MOVWF  FEA
2F24:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2F26:  MOVF   1A,W
2F28:  SUBLW  0A
2F2A:  BNC   2F30
....................        {unidad=11;} 
2F2C:  MOVLW  0B
2F2E:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2F30:  MOVFF  1A,11F
2F34:  MOVLW  04
2F36:  MOVLB  1
2F38:  MOVWF  x20
2F3A:  MOVLB  0
2F3C:  CALL   0B78
....................        lcd_putc(t[2]); 
2F40:  MOVFF  43,11E
2F44:  CALL   0BEA
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2F48:  MOVF   1A,W
2F4A:  SUBLW  0E
2F4C:  BTFSC  FD8.0
2F4E:  BRA    317E
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2F50:  MOVF   44,W
2F52:  SUBLW  03
2F54:  BNZ   3038
2F56:  MOVF   45,W
2F58:  SUBLW  08
2F5A:  BNZ   3038
2F5C:  MOVF   46,W
2F5E:  SUBLW  09
2F60:  BNZ   3038
2F62:  MOVF   47,W
2F64:  SUBLW  02
2F66:  BNZ   3038
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2F68:  CLRF   FA9
2F6A:  CLRF   FA8
2F6C:  BCF    FA6.6
2F6E:  BCF    FA6.7
2F70:  BSF    FA6.2
2F72:  MOVF   FF2,W
2F74:  MOVWF  00
2F76:  BCF    FF2.7
2F78:  MOVLB  F
2F7A:  MOVLW  55
2F7C:  MOVWF  FA7
2F7E:  MOVLW  AA
2F80:  MOVWF  FA7
2F82:  BSF    FA6.1
2F84:  BTFSC  FA6.1
2F86:  BRA    2F84
2F88:  BCF    FA6.2
2F8A:  MOVF   00,W
2F8C:  IORWF  FF2,F
2F8E:  MOVLW  14
2F90:  MOVLB  1
2F92:  MOVWF  x24
2F94:  MOVLB  0
2F96:  CALL   0A66
2F9A:  MOVLW  01
2F9C:  MOVWF  FA9
2F9E:  CLRF   FA8
2FA0:  BCF    FA6.6
2FA2:  BCF    FA6.7
2FA4:  BSF    FA6.2
2FA6:  MOVF   FF2,W
2FA8:  MOVWF  00
2FAA:  BCF    FF2.7
2FAC:  MOVLB  F
2FAE:  MOVLW  55
2FB0:  MOVWF  FA7
2FB2:  MOVLW  AA
2FB4:  MOVWF  FA7
2FB6:  BSF    FA6.1
2FB8:  BTFSC  FA6.1
2FBA:  BRA    2FB8
2FBC:  BCF    FA6.2
2FBE:  MOVF   00,W
2FC0:  IORWF  FF2,F
2FC2:  MOVLW  14
2FC4:  MOVLB  1
2FC6:  MOVWF  x24
2FC8:  MOVLB  0
2FCA:  CALL   0A66
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2FCE:  MOVLW  02
2FD0:  MOVWF  FA9
2FD2:  CLRF   FA8
2FD4:  BCF    FA6.6
2FD6:  BCF    FA6.7
2FD8:  BSF    FA6.2
2FDA:  MOVF   FF2,W
2FDC:  MOVWF  00
2FDE:  BCF    FF2.7
2FE0:  MOVLB  F
2FE2:  MOVLW  55
2FE4:  MOVWF  FA7
2FE6:  MOVLW  AA
2FE8:  MOVWF  FA7
2FEA:  BSF    FA6.1
2FEC:  BTFSC  FA6.1
2FEE:  BRA    2FEC
2FF0:  BCF    FA6.2
2FF2:  MOVF   00,W
2FF4:  IORWF  FF2,F
2FF6:  MOVLW  14
2FF8:  MOVLB  1
2FFA:  MOVWF  x24
2FFC:  MOVLB  0
2FFE:  CALL   0A66
3002:  MOVLW  03
3004:  MOVWF  FA9
3006:  CLRF   FA8
3008:  BCF    FA6.6
300A:  BCF    FA6.7
300C:  BSF    FA6.2
300E:  MOVF   FF2,W
3010:  MOVWF  00
3012:  BCF    FF2.7
3014:  MOVLB  F
3016:  MOVLW  55
3018:  MOVWF  FA7
301A:  MOVLW  AA
301C:  MOVWF  FA7
301E:  BSF    FA6.1
3020:  BTFSC  FA6.1
3022:  BRA    3020
3024:  BCF    FA6.2
3026:  MOVF   00,W
3028:  IORWF  FF2,F
302A:  MOVLW  14
302C:  MOVLB  1
302E:  MOVWF  x24
3030:  MOVLB  0
3032:  CALL   0A66
....................              reset_cpu();} 
3036:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
3038:  MOVF   48,W
303A:  SUBWF  44,W
303C:  BNZ   30F8
303E:  MOVF   49,W
3040:  SUBWF  45,W
3042:  BNZ   30F8
3044:  MOVF   4A,W
3046:  SUBWF  46,W
3048:  BNZ   30F8
304A:  MOVF   4B,W
304C:  SUBWF  47,W
304E:  BNZ   30F8
....................             {lcd_gotoxy(1,1); 
3050:  MOVLW  01
3052:  MOVLB  1
3054:  MOVWF  x1F
3056:  MOVWF  x20
3058:  MOVLB  0
305A:  CALL   0B78
....................             printf(lcd_putc,"                   "); 
305E:  MOVLW  E2
3060:  MOVWF  FF6
3062:  MOVLW  02
3064:  MOVWF  FF7
3066:  CALL   1076
....................             lcd_gotoxy(1,2); 
306A:  MOVLW  01
306C:  MOVLB  1
306E:  MOVWF  x1F
3070:  MOVLW  02
3072:  MOVWF  x20
3074:  MOVLB  0
3076:  CALL   0B78
....................             printf(lcd_putc,"     Contraseña    "); 
307A:  MOVLW  F6
307C:  MOVWF  FF6
307E:  MOVLW  02
3080:  MOVWF  FF7
3082:  CALL   1076
....................             lcd_gotoxy(1,3); 
3086:  MOVLW  01
3088:  MOVLB  1
308A:  MOVWF  x1F
308C:  MOVLW  03
308E:  MOVWF  x20
3090:  MOVLB  0
3092:  CALL   0B78
....................             printf(lcd_putc,"      Correcta     "); 
3096:  MOVLW  0A
3098:  MOVWF  FF6
309A:  MOVLW  03
309C:  MOVWF  FF7
309E:  CALL   1076
....................             lcd_gotoxy(1,4); 
30A2:  MOVLW  01
30A4:  MOVLB  1
30A6:  MOVWF  x1F
30A8:  MOVLW  04
30AA:  MOVWF  x20
30AC:  MOVLB  0
30AE:  CALL   0B78
....................             printf(lcd_putc,"                   "); 
30B2:  MOVLW  1E
30B4:  MOVWF  FF6
30B6:  MOVLW  03
30B8:  MOVWF  FF7
30BA:  CALL   1076
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
30BE:  MOVLW  02
30C0:  MOVLB  1
30C2:  MOVWF  x09
30C4:  MOVLW  FA
30C6:  MOVWF  x24
30C8:  MOVLB  0
30CA:  CALL   0A66
30CE:  MOVLB  1
30D0:  DECFSZ x09,F
30D2:  BRA    30C4
30D4:  MOVLW  32
30D6:  MOVWF  17
30D8:  MOVLW  0B
30DA:  MOVWF  1A
30DC:  MOVLW  0C
30DE:  MOVWF  x1E
30E0:  MOVLB  0
30E2:  CALL   0BEA
30E6:  BSF    F8A.7
30E8:  BCF    F93.7
30EA:  BCF    3F.0
30EC:  BCF    3F.1
30EE:  BSF    58.4
....................             t_latencia=0;flag_iniciodamper=1;} 
30F0:  CLRF   5C
30F2:  CLRF   5B
30F4:  BSF    3F.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
30F6:  BRA    317E
....................          {lcd_gotoxy(1,1); 
30F8:  MOVLW  01
30FA:  MOVLB  1
30FC:  MOVWF  x1F
30FE:  MOVWF  x20
3100:  MOVLB  0
3102:  CALL   0B78
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
3106:  MOVLW  01
3108:  MOVLB  1
310A:  MOVWF  x1F
310C:  MOVLW  02
310E:  MOVWF  x20
3110:  MOVLB  0
3112:  CALL   0B78
....................             printf(lcd_putc,"     Contraseña    "); 
3116:  MOVLW  32
3118:  MOVWF  FF6
311A:  MOVLW  03
311C:  MOVWF  FF7
311E:  CALL   1076
....................             lcd_gotoxy(1,3); 
3122:  MOVLW  01
3124:  MOVLB  1
3126:  MOVWF  x1F
3128:  MOVLW  03
312A:  MOVWF  x20
312C:  MOVLB  0
312E:  CALL   0B78
....................             printf(lcd_putc,"     Incorrecta    "); 
3132:  MOVLW  46
3134:  MOVWF  FF6
3136:  MOVLW  03
3138:  MOVWF  FF7
313A:  CALL   1076
....................             lcd_gotoxy(1,4); 
313E:  MOVLW  01
3140:  MOVLB  1
3142:  MOVWF  x1F
3144:  MOVLW  04
3146:  MOVWF  x20
3148:  MOVLB  0
314A:  CALL   0B78
....................             printf(lcd_putc,"                   "); 
314E:  MOVLW  5A
3150:  MOVWF  FF6
3152:  MOVLW  03
3154:  MOVWF  FF7
3156:  CALL   1076
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
315A:  MOVLW  02
315C:  MOVLB  1
315E:  MOVWF  x09
3160:  MOVLW  FA
3162:  MOVWF  x24
3164:  MOVLB  0
3166:  CALL   0A66
316A:  MOVLB  1
316C:  DECFSZ x09,F
316E:  BRA    3160
3170:  MOVLW  0B
3172:  MOVWF  1A
3174:  MOVLW  0C
3176:  MOVWF  x1E
3178:  MOVLB  0
317A:  CALL   0BEA
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
317E:  MOVF   1A,W
3180:  SUBLW  0B
3182:  BC    31A6
3184:  MOVF   1A,W
3186:  SUBLW  0D
3188:  BNC   31A6
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
318A:  MOVLW  01
318C:  SUBWF  1A,W
318E:  MOVLB  1
3190:  MOVWF  x09
3192:  MOVWF  x1F
3194:  MOVLW  04
3196:  MOVWF  x20
3198:  MOVLB  0
319A:  CALL   0B78
....................             lcd_putc(t[1]); 
319E:  MOVFF  42,11E
31A2:  CALL   0BEA
....................           } 
....................  
....................    } 
31A6:  MOVLB  1
31A8:  BRA    2D44
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
31AA:  DECFSZ 17,W
31AC:  BRA    33E8
....................       if(paso<0) 
31AE:  BTFSC  40.7
31B0:  BRA    31B4
31B2:  BRA    31B6
....................         {paso=0;} 
31B4:  CLRF   40
....................     
....................    lcd_gotoxy(1,1); 
31B6:  MOVLW  01
31B8:  MOVWF  x1F
31BA:  MOVWF  x20
31BC:  MOVLB  0
31BE:  CALL   0B78
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
31C2:  MOVLW  6E
31C4:  MOVWF  FF6
31C6:  MOVLW  03
31C8:  MOVWF  FF7
31CA:  CALL   1076
....................     
....................       if(UP)//Si oprime hacia arriba 
31CE:  BSF    F93.3
31D0:  BTFSS  F81.3
31D2:  BRA    31F2
....................       {  if(Flanco == 0)  
31D4:  BTFSC  3E.4
31D6:  BRA    31F0
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
31D8:  DECF   1D,F
31DA:  DECF   1B,F
31DC:  MOVLW  01
31DE:  ADDWF  1B,W
31E0:  MOVWF  1C
31E2:  BSF    3E.4
31E4:  MOVLW  1E
31E6:  MOVLB  1
31E8:  MOVWF  x24
31EA:  MOVLB  0
31EC:  CALL   0A66
....................          else 
31F0:  BRA    31F4
....................             {Flanco = 0;} 
31F2:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31F4:  BSF    F93.2
31F6:  BTFSS  F81.2
31F8:  BRA    3218
....................       {  if(Flanco2 == 0)  
31FA:  BTFSC  3E.6
31FC:  BRA    3216
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
31FE:  INCF   1D,F
3200:  INCF   1B,F
3202:  MOVLW  01
3204:  SUBWF  1B,W
3206:  MOVWF  1C
3208:  BSF    3E.6
320A:  MOVLW  1E
320C:  MOVLB  1
320E:  MOVWF  x24
3210:  MOVLB  0
3212:  CALL   0A66
....................          else 
3216:  BRA    321A
....................             {Flanco2 = 0;} 
3218:  BCF    3E.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
321A:  MOVF   1D,W
321C:  SUBWF  1F,W
321E:  BC    3230
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
3220:  INCF   40,F
3222:  MOVFF  1D,1F
3226:  MOVLW  02
3228:  SUBWF  1F,W
322A:  MOVWF  1E
322C:  MOVLW  04
322E:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
3230:  MOVF   1E,W
3232:  SUBWF  1D,W
3234:  BC    3246
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
3236:  DECF   40,F
3238:  MOVFF  1D,1E
323C:  MOVLW  02
323E:  ADDWF  1E,W
3240:  MOVWF  1F
3242:  MOVLW  02
3244:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
3246:  MOVF   1D,W
3248:  SUBWF  18,W
324A:  BC    325E
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
324C:  MOVFF  19,1D
3250:  MOVLW  02
3252:  MOVWF  1B
3254:  CLRF   40
3256:  MOVFF  1D,1E
325A:  ADDWF  1E,W
325C:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
325E:  MOVF   19,W
3260:  SUBWF  1D,W
3262:  BC    327A
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
3264:  MOVFF  18,1D
3268:  MOVLW  04
326A:  MOVWF  1B
326C:  SUBWF  18,W
326E:  MOVWF  40
3270:  MOVFF  1D,1F
3274:  MOVLW  02
3276:  SUBWF  1F,W
3278:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
327A:  MOVLW  01
327C:  ADDWF  40,W
327E:  MOVLB  1
3280:  MOVWF  x09
3282:  MOVWF  x0A
3284:  MOVLW  02
3286:  MOVWF  x0B
3288:  MOVLB  0
328A:  CALL   11C8
....................         mensajes(2+paso,3); 
328E:  MOVLW  02
3290:  ADDWF  40,W
3292:  MOVLB  1
3294:  MOVWF  x09
3296:  MOVWF  x0A
3298:  MOVLW  03
329A:  MOVWF  x0B
329C:  MOVLB  0
329E:  CALL   11C8
....................         mensajes(3+paso,4); 
32A2:  MOVLW  03
32A4:  ADDWF  40,W
32A6:  MOVLB  1
32A8:  MOVWF  x09
32AA:  MOVWF  x0A
32AC:  MOVLW  04
32AE:  MOVWF  x0B
32B0:  MOVLB  0
32B2:  CALL   11C8
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
32B6:  MOVLW  01
32B8:  MOVLB  1
32BA:  MOVWF  x1F
32BC:  MOVFF  1B,120
32C0:  MOVLB  0
32C2:  CALL   0B78
....................         lcd_putc(t[0]); 
32C6:  MOVFF  41,11E
32CA:  CALL   0BEA
....................  
....................         if(Flecha==2) 
32CE:  MOVF   1B,W
32D0:  SUBLW  02
32D2:  BNZ   3304
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
32D4:  MOVLW  01
32D6:  MOVLB  1
32D8:  MOVWF  x1F
32DA:  MOVLW  04
32DC:  MOVWF  x20
32DE:  MOVLB  0
32E0:  CALL   0B78
....................             lcd_putc(t[1]); 
32E4:  MOVFF  42,11E
32E8:  CALL   0BEA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
32EC:  MOVLW  01
32EE:  MOVLB  1
32F0:  MOVWF  x1F
32F2:  MOVLW  03
32F4:  MOVWF  x20
32F6:  MOVLB  0
32F8:  CALL   0B78
....................             lcd_putc(t[1]); 
32FC:  MOVFF  42,11E
3300:  CALL   0BEA
....................           } 
....................          
....................         if(Flecha==4) 
3304:  MOVF   1B,W
3306:  SUBLW  04
3308:  BNZ   333A
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
330A:  MOVLW  01
330C:  MOVLB  1
330E:  MOVWF  x1F
3310:  MOVLW  02
3312:  MOVWF  x20
3314:  MOVLB  0
3316:  CALL   0B78
....................             lcd_putc(t[1]); 
331A:  MOVFF  42,11E
331E:  CALL   0BEA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
3322:  MOVLW  01
3324:  MOVLB  1
3326:  MOVWF  x1F
3328:  MOVLW  03
332A:  MOVWF  x20
332C:  MOVLB  0
332E:  CALL   0B78
....................             lcd_putc(t[1]); 
3332:  MOVFF  42,11E
3336:  CALL   0BEA
....................           } 
....................          
....................         if(Flecha==3) 
333A:  MOVF   1B,W
333C:  SUBLW  03
333E:  BNZ   3370
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3340:  MOVLW  01
3342:  MOVLB  1
3344:  MOVWF  x1F
3346:  MOVLW  04
3348:  MOVWF  x20
334A:  MOVLB  0
334C:  CALL   0B78
....................             lcd_putc(t[1]); 
3350:  MOVFF  42,11E
3354:  CALL   0BEA
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3358:  MOVLW  01
335A:  MOVLB  1
335C:  MOVWF  x1F
335E:  MOVLW  02
3360:  MOVWF  x20
3362:  MOVLB  0
3364:  CALL   0B78
....................             lcd_putc(t[1]); 
3368:  MOVFF  42,11E
336C:  CALL   0BEA
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
3370:  BSF    F93.0
3372:  BTFSS  F81.0
3374:  BRA    33B2
....................       {  if(Flanco1 == 0)  
3376:  BTFSC  3E.5
3378:  BRA    33B0
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
337A:  MOVFF  1D,17
337E:  MOVLW  03
3380:  MOVWF  1B
3382:  MOVLW  02
3384:  MOVLB  1
3386:  MOVWF  x09
3388:  MOVLW  FA
338A:  MOVWF  x24
338C:  MOVLB  0
338E:  CALL   0A66
3392:  MOVLB  1
3394:  DECFSZ x09,F
3396:  BRA    3388
3398:  MOVLW  0C
339A:  MOVWF  x1E
339C:  MOVLB  0
339E:  CALL   0BEA
....................             if(Menu==6) 
33A2:  MOVF   17,W
33A4:  SUBLW  06
33A6:  BNZ   33B0
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
33A8:  CLRF   44
33AA:  CLRF   45
33AC:  CLRF   46
33AE:  CLRF   47
....................          else 
33B0:  BRA    33B4
....................             {Flanco1 = 0;}   
33B2:  BCF    3E.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
33B4:  BSF    F93.1
33B6:  BTFSS  F81.1
33B8:  BRA    33E4
....................       {  if(Flanco3 == 0)  
33BA:  BTFSC  3E.7
33BC:  BRA    33E2
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
33BE:  MOVLW  02
33C0:  MOVLB  1
33C2:  MOVWF  x09
33C4:  MOVLW  FA
33C6:  MOVWF  x24
33C8:  MOVLB  0
33CA:  CALL   0A66
33CE:  MOVLB  1
33D0:  DECFSZ x09,F
33D2:  BRA    33C4
33D4:  MOVLW  14
33D6:  MOVWF  17
33D8:  MOVLW  0C
33DA:  MOVWF  x1E
33DC:  MOVLB  0
33DE:  CALL   0BEA
....................          else 
33E2:  BRA    33E6
....................             {Flanco3 = 0;}                
33E4:  BCF    3E.7
33E6:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
33E8:  MOVF   17,W
33EA:  SUBLW  02
33EC:  BTFSS  FD8.2
33EE:  BRA    353C
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
33F0:  BTG    3E.2
33F2:  BSF    3E.5
33F4:  MOVLW  01
33F6:  MOVWF  17
33F8:  CLRF   40
....................                        
....................             if(estadoalarma==1) 
33FA:  BTFSS  3E.2
33FC:  BRA    346E
....................             {estadoalarma=1; 
33FE:  BSF    3E.2
....................                lcd_gotoxy(1,1); 
3400:  MOVLW  01
3402:  MOVWF  x1F
3404:  MOVWF  x20
3406:  MOVLB  0
3408:  CALL   0B78
....................                printf(lcd_putc,"                    "); 
340C:  MOVLW  84
340E:  MOVWF  FF6
3410:  MOVLW  03
3412:  MOVWF  FF7
3414:  CALL   1076
....................                lcd_gotoxy(1,2); 
3418:  MOVLW  01
341A:  MOVLB  1
341C:  MOVWF  x1F
341E:  MOVLW  02
3420:  MOVWF  x20
3422:  MOVLB  0
3424:  CALL   0B78
....................                printf(lcd_putc,"        Activo      "); 
3428:  MOVLW  9A
342A:  MOVWF  FF6
342C:  MOVLW  03
342E:  MOVWF  FF7
3430:  CALL   1076
....................                lcd_gotoxy(1,3); 
3434:  MOVLW  01
3436:  MOVLB  1
3438:  MOVWF  x1F
343A:  MOVLW  03
343C:  MOVWF  x20
343E:  MOVLB  0
3440:  CALL   0B78
....................                printf(lcd_putc,"        Alarma      "); 
3444:  MOVLW  B0
3446:  MOVWF  FF6
3448:  MOVLW  03
344A:  MOVWF  FF7
344C:  CALL   1076
....................                lcd_gotoxy(1,4); 
3450:  MOVLW  01
3452:  MOVLB  1
3454:  MOVWF  x1F
3456:  MOVLW  04
3458:  MOVWF  x20
345A:  MOVLB  0
345C:  CALL   0B78
....................                printf(lcd_putc,"                    ");} 
3460:  MOVLW  C6
3462:  MOVWF  FF6
3464:  MOVLW  03
3466:  MOVWF  FF7
3468:  CALL   1076
346C:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
346E:  BTFSC  3E.2
3470:  BRA    34E2
....................             {estadoalarma=0; 
3472:  BCF    3E.2
....................                lcd_gotoxy(1,1); 
3474:  MOVLW  01
3476:  MOVWF  x1F
3478:  MOVWF  x20
347A:  MOVLB  0
347C:  CALL   0B78
....................                printf(lcd_putc,"                    "); 
3480:  MOVLW  DC
3482:  MOVWF  FF6
3484:  MOVLW  03
3486:  MOVWF  FF7
3488:  CALL   1076
....................                lcd_gotoxy(1,2); 
348C:  MOVLW  01
348E:  MOVLB  1
3490:  MOVWF  x1F
3492:  MOVLW  02
3494:  MOVWF  x20
3496:  MOVLB  0
3498:  CALL   0B78
....................                printf(lcd_putc,"      Desactivo     "); 
349C:  MOVLW  F2
349E:  MOVWF  FF6
34A0:  MOVLW  03
34A2:  MOVWF  FF7
34A4:  CALL   1076
....................                lcd_gotoxy(1,3); 
34A8:  MOVLW  01
34AA:  MOVLB  1
34AC:  MOVWF  x1F
34AE:  MOVLW  03
34B0:  MOVWF  x20
34B2:  MOVLB  0
34B4:  CALL   0B78
....................                printf(lcd_putc,"       Alarma       "); 
34B8:  MOVLW  08
34BA:  MOVWF  FF6
34BC:  MOVLW  04
34BE:  MOVWF  FF7
34C0:  CALL   1076
....................                lcd_gotoxy(1,4); 
34C4:  MOVLW  01
34C6:  MOVLB  1
34C8:  MOVWF  x1F
34CA:  MOVLW  04
34CC:  MOVWF  x20
34CE:  MOVLB  0
34D0:  CALL   0B78
....................                printf(lcd_putc,"                    ");} 
34D4:  MOVLW  1E
34D6:  MOVWF  FF6
34D8:  MOVLW  04
34DA:  MOVWF  FF7
34DC:  CALL   1076
34E0:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
34E2:  MOVLW  00
34E4:  BTFSC  3E.2
34E6:  MOVLW  01
34E8:  MOVWF  x09
34EA:  MOVLW  05
34EC:  MOVWF  FA9
34EE:  MOVFF  109,FA8
34F2:  BCF    FA6.6
34F4:  BCF    FA6.7
34F6:  BSF    FA6.2
34F8:  MOVF   FF2,W
34FA:  MOVWF  00
34FC:  BCF    FF2.7
34FE:  MOVLB  F
3500:  MOVLW  55
3502:  MOVWF  FA7
3504:  MOVLW  AA
3506:  MOVWF  FA7
3508:  BSF    FA6.1
350A:  BTFSC  FA6.1
350C:  BRA    350A
350E:  BCF    FA6.2
3510:  MOVF   00,W
3512:  IORWF  FF2,F
3514:  MOVLW  04
3516:  MOVLB  1
3518:  MOVWF  x09
351A:  MOVLW  FA
351C:  MOVWF  x24
351E:  MOVLB  0
3520:  CALL   0A66
3524:  MOVLB  1
3526:  DECFSZ x09,F
3528:  BRA    351A
352A:  MOVLW  02
352C:  MOVWF  1B
352E:  MOVWF  1D
3530:  MOVLW  0C
3532:  MOVWF  x1E
3534:  MOVLB  0
3536:  CALL   0BEA
353A:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
353C:  MOVF   17,W
353E:  SUBLW  03
3540:  BTFSS  FD8.2
3542:  BRA    37DC
....................    lcd_gotoxy(1,1); 
3544:  MOVLW  01
3546:  MOVWF  x1F
3548:  MOVWF  x20
354A:  MOVLB  0
354C:  CALL   0B78
....................    printf(lcd_putc,"  Duracion Actual   ");                           
3550:  MOVLW  34
3552:  MOVWF  FF6
3554:  MOVLW  04
3556:  MOVWF  FF7
3558:  CALL   1076
....................    lcd_gotoxy(1,2);                                                   
355C:  MOVLW  01
355E:  MOVLB  1
3560:  MOVWF  x1F
3562:  MOVLW  02
3564:  MOVWF  x20
3566:  MOVLB  0
3568:  CALL   0B78
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
356C:  MOVLW  4A
356E:  MOVWF  FF6
3570:  MOVLW  04
3572:  MOVWF  FF7
3574:  MOVLW  09
3576:  MOVLB  1
3578:  MOVWF  x11
357A:  MOVLB  0
357C:  CALL   1096
3580:  MOVFF  35,109
3584:  MOVLW  01
3586:  MOVLB  1
3588:  MOVWF  x0A
358A:  MOVLB  0
358C:  CALL   1318
3590:  MOVLW  3A
3592:  MOVLB  1
3594:  MOVWF  x1E
3596:  MOVLB  0
3598:  CALL   0BEA
359C:  MOVFF  34,109
35A0:  MOVLW  01
35A2:  MOVLB  1
35A4:  MOVWF  x0A
35A6:  MOVLB  0
35A8:  CALL   1318
35AC:  MOVLW  3A
35AE:  MOVLB  1
35B0:  MOVWF  x1E
35B2:  MOVLB  0
35B4:  CALL   0BEA
35B8:  MOVFF  33,109
35BC:  MOVLW  01
35BE:  MOVLB  1
35C0:  MOVWF  x0A
35C2:  MOVLB  0
35C4:  CALL   1318
35C8:  MOVLW  20
35CA:  MOVLB  1
35CC:  MOVWF  x1E
35CE:  MOVLB  0
35D0:  CALL   0BEA
....................     
....................    if(flag_filtro==1) 
35D4:  BTFSS  3F.2
35D6:  BRA    35F6
....................    { 
....................       lcd_gotoxy(1,3);                                                  
35D8:  MOVLW  01
35DA:  MOVLB  1
35DC:  MOVWF  x1F
35DE:  MOVLW  03
35E0:  MOVWF  x20
35E2:  MOVLB  0
35E4:  CALL   0B78
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
35E8:  MOVLW  64
35EA:  MOVWF  FF6
35EC:  MOVLW  04
35EE:  MOVWF  FF7
35F0:  CALL   1076
....................    } 
....................    else 
35F4:  BRA    3612
....................    { 
....................       lcd_gotoxy(1,3);                                                  
35F6:  MOVLW  01
35F8:  MOVLB  1
35FA:  MOVWF  x1F
35FC:  MOVLW  03
35FE:  MOVWF  x20
3600:  MOVLB  0
3602:  CALL   0B78
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
3606:  MOVLW  7A
3608:  MOVWF  FF6
360A:  MOVLW  04
360C:  MOVWF  FF7
360E:  CALL   1076
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
3612:  MOVLW  01
3614:  MOVLB  1
3616:  MOVWF  x1F
3618:  MOVLW  04
361A:  MOVWF  x20
361C:  MOVLB  0
361E:  CALL   0B78
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
3622:  MOVLW  90
3624:  MOVWF  FF6
3626:  MOVLW  04
3628:  MOVWF  FF7
362A:  CALL   1076
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
362E:  BSF    F93.3
3630:  BTFSS  F81.3
3632:  BRA    3736
....................       {  delay_ms(200); 
3634:  MOVLW  C8
3636:  MOVLB  1
3638:  MOVWF  x24
363A:  MOVLB  0
363C:  CALL   0A66
....................          printf(lcd_putc,"\f"); 
3640:  MOVLW  0C
3642:  MOVLB  1
3644:  MOVWF  x1E
3646:  MOVLB  0
3648:  CALL   0BEA
....................          lcd_gotoxy(1,2); 
364C:  MOVLW  01
364E:  MOVLB  1
3650:  MOVWF  x1F
3652:  MOVLW  02
3654:  MOVWF  x20
3656:  MOVLB  0
3658:  CALL   0B78
....................          printf(lcd_putc," Reset de tiempo "); 
365C:  MOVLW  A6
365E:  MOVWF  FF6
3660:  MOVLW  04
3662:  MOVWF  FF7
3664:  CALL   1076
....................          lcd_gotoxy(1,3); 
3668:  MOVLW  01
366A:  MOVLB  1
366C:  MOVWF  x1F
366E:  MOVLW  03
3670:  MOVWF  x20
3672:  MOVLB  0
3674:  CALL   0B78
....................          printf(lcd_putc,"     Exitoso     "); 
3678:  MOVLW  B8
367A:  MOVWF  FF6
367C:  MOVLW  04
367E:  MOVWF  FF7
3680:  CALL   1076
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
3684:  MOVLW  46
3686:  MOVWF  FA9
3688:  CLRF   FA8
368A:  BCF    FA6.6
368C:  BCF    FA6.7
368E:  BSF    FA6.2
3690:  MOVF   FF2,W
3692:  MOVWF  00
3694:  BCF    FF2.7
3696:  MOVLB  F
3698:  MOVLW  55
369A:  MOVWF  FA7
369C:  MOVLW  AA
369E:  MOVWF  FA7
36A0:  BSF    FA6.1
36A2:  BTFSC  FA6.1
36A4:  BRA    36A2
36A6:  BCF    FA6.2
36A8:  MOVF   00,W
36AA:  IORWF  FF2,F
36AC:  MOVLW  47
36AE:  MOVWF  FA9
36B0:  CLRF   FA8
36B2:  BCF    FA6.6
36B4:  BCF    FA6.7
36B6:  BSF    FA6.2
36B8:  MOVF   FF2,W
36BA:  MOVWF  00
36BC:  BCF    FF2.7
36BE:  MOVLW  55
36C0:  MOVWF  FA7
36C2:  MOVLW  AA
36C4:  MOVWF  FA7
36C6:  BSF    FA6.1
36C8:  BTFSC  FA6.1
36CA:  BRA    36C8
36CC:  BCF    FA6.2
36CE:  MOVF   00,W
36D0:  IORWF  FF2,F
36D2:  MOVLW  48
36D4:  MOVWF  FA9
36D6:  CLRF   FA8
36D8:  BCF    FA6.6
36DA:  BCF    FA6.7
36DC:  BSF    FA6.2
36DE:  MOVF   FF2,W
36E0:  MOVWF  00
36E2:  BCF    FF2.7
36E4:  MOVLW  55
36E6:  MOVWF  FA7
36E8:  MOVLW  AA
36EA:  MOVWF  FA7
36EC:  BSF    FA6.1
36EE:  BTFSC  FA6.1
36F0:  BRA    36EE
36F2:  BCF    FA6.2
36F4:  MOVF   00,W
36F6:  IORWF  FF2,F
....................          delay_ms(700); 
36F8:  MOVLW  04
36FA:  MOVLB  1
36FC:  MOVWF  x09
36FE:  MOVLW  AF
3700:  MOVWF  x24
3702:  MOVLB  0
3704:  CALL   0A66
3708:  MOVLB  1
370A:  DECFSZ x09,F
370C:  BRA    36FE
....................          segundos=0;minutos=0;horas=0; 
370E:  CLRF   33
3710:  CLRF   34
3712:  CLRF   35
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3714:  MOVLW  1E
3716:  MOVWF  x24
3718:  MOVLB  0
371A:  CALL   0A66
371E:  MOVLW  01
3720:  MOVWF  17
3722:  CLRF   40
3724:  MOVLW  02
3726:  MOVWF  1B
3728:  MOVWF  1D
372A:  MOVLW  0C
372C:  MOVLB  1
372E:  MOVWF  x1E
3730:  MOVLB  0
3732:  CALL   0BEA
....................       } 
....................        
....................       if(RIGHT) 
3736:  BSF    F93.0
3738:  BTFSS  F81.0
373A:  BRA    379E
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
373C:  BTG    3F.2
373E:  MOVLW  00
3740:  BTFSC  3F.2
3742:  MOVLW  01
3744:  MOVLB  1
3746:  MOVWF  x09
3748:  MOVLW  49
374A:  MOVWF  FA9
374C:  MOVFF  109,FA8
3750:  BCF    FA6.6
3752:  BCF    FA6.7
3754:  BSF    FA6.2
3756:  MOVF   FF2,W
3758:  MOVWF  00
375A:  BCF    FF2.7
375C:  MOVLB  F
375E:  MOVLW  55
3760:  MOVWF  FA7
3762:  MOVLW  AA
3764:  MOVWF  FA7
3766:  BSF    FA6.1
3768:  BTFSC  FA6.1
376A:  BRA    3768
376C:  BCF    FA6.2
376E:  MOVF   00,W
3770:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3772:  MOVLW  02
3774:  MOVLB  1
3776:  MOVWF  x09
3778:  MOVLW  FA
377A:  MOVWF  x24
377C:  MOVLB  0
377E:  CALL   0A66
3782:  MOVLB  1
3784:  DECFSZ x09,F
3786:  BRA    3778
3788:  MOVLW  01
378A:  MOVWF  17
378C:  CLRF   40
378E:  MOVLW  02
3790:  MOVWF  1B
3792:  MOVWF  1D
3794:  MOVLW  0C
3796:  MOVWF  x1E
3798:  MOVLB  0
379A:  CALL   0BEA
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
379E:  BSF    F93.1
37A0:  BTFSS  F81.1
37A2:  BRA    37D8
....................       {  if(Flanco3 == 0)  
37A4:  BTFSC  3E.7
37A6:  BRA    37D6
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
37A8:  BSF    3E.7
37AA:  MOVLW  02
37AC:  MOVLB  1
37AE:  MOVWF  x09
37B0:  MOVLW  FA
37B2:  MOVWF  x24
37B4:  MOVLB  0
37B6:  CALL   0A66
37BA:  MOVLB  1
37BC:  DECFSZ x09,F
37BE:  BRA    37B0
37C0:  MOVLW  01
37C2:  MOVWF  17
37C4:  CLRF   40
37C6:  MOVLW  02
37C8:  MOVWF  1B
37CA:  MOVWF  1D
37CC:  MOVLW  0C
37CE:  MOVWF  x1E
37D0:  MOVLB  0
37D2:  CALL   0BEA
....................          else 
37D6:  BRA    37DA
....................             {Flanco3 = 0;}       
37D8:  BCF    3E.7
37DA:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
37DC:  MOVF   17,W
37DE:  SUBLW  04
37E0:  BTFSS  FD8.2
37E2:  BRA    3AF8
....................    lcd_gotoxy(1,2); 
37E4:  MOVLW  01
37E6:  MOVWF  x1F
37E8:  MOVLW  02
37EA:  MOVWF  x20
37EC:  MOVLB  0
37EE:  CALL   0B78
....................    printf(lcd_putc,"      Setpoint      "); 
37F2:  MOVLW  CA
37F4:  MOVWF  FF6
37F6:  MOVLW  04
37F8:  MOVWF  FF7
37FA:  CALL   1076
....................    lcd_gotoxy(1,3); 
37FE:  MOVLW  01
3800:  MOVLB  1
3802:  MOVWF  x1F
3804:  MOVLW  03
3806:  MOVWF  x20
3808:  MOVLB  0
380A:  CALL   0B78
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
380E:  MOVLW  E0
3810:  MOVWF  FF6
3812:  MOVLW  04
3814:  MOVWF  FF7
3816:  MOVLW  07
3818:  MOVLB  1
381A:  MOVWF  x11
381C:  MOVLB  0
381E:  CALL   1096
3822:  MOVLW  89
3824:  MOVWF  FE9
3826:  MOVFF  4F,114
382A:  MOVFF  4E,113
382E:  MOVFF  4D,112
3832:  MOVFF  4C,111
3836:  MOVLW  02
3838:  MOVLB  1
383A:  MOVWF  x15
383C:  MOVLB  0
383E:  CALL   154E
3842:  MOVLW  20
3844:  MOVLB  1
3846:  MOVWF  x1E
3848:  MOVLB  0
384A:  CALL   0BEA
384E:  MOVLW  20
3850:  MOVLB  1
3852:  MOVWF  x1E
3854:  MOVLB  0
3856:  CALL   0BEA
385A:  MOVLW  20
385C:  MOVLB  1
385E:  MOVWF  x1E
3860:  MOVLB  0
3862:  CALL   0BEA
....................     
....................    if(setpoint>2.0) 
3866:  MOVLB  1
3868:  CLRF   x26
386A:  CLRF   x25
386C:  CLRF   x24
386E:  MOVLW  80
3870:  MOVWF  x23
3872:  MOVFF  4F,12A
3876:  MOVFF  4E,129
387A:  MOVFF  4D,128
387E:  MOVFF  4C,127
3882:  MOVLB  0
3884:  CALL   1700
3888:  BNC   3894
....................    {setpoint=2.0;} 
388A:  CLRF   4F
388C:  CLRF   4E
388E:  CLRF   4D
3890:  MOVLW  80
3892:  MOVWF  4C
....................     
....................    if(setpoint<0.5) 
3894:  MOVFF  4F,126
3898:  MOVFF  4E,125
389C:  MOVFF  4D,124
38A0:  MOVFF  4C,123
38A4:  MOVLB  1
38A6:  CLRF   x2A
38A8:  CLRF   x29
38AA:  CLRF   x28
38AC:  MOVLW  7E
38AE:  MOVWF  x27
38B0:  MOVLB  0
38B2:  CALL   1700
38B6:  BNC   38C2
....................    {setpoint=0.5;} 
38B8:  CLRF   4F
38BA:  CLRF   4E
38BC:  CLRF   4D
38BE:  MOVLW  7E
38C0:  MOVWF  4C
....................     
....................       if(UP)//Si oprime hacia arriba 
38C2:  BSF    F93.3
38C4:  BTFSS  F81.3
38C6:  BRA    3916
....................       {  if(Flanco == 0)  
38C8:  BTFSC  3E.4
38CA:  BRA    3914
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
38CC:  BCF    FD8.1
38CE:  MOVFF  4F,12A
38D2:  MOVFF  4E,129
38D6:  MOVFF  4D,128
38DA:  MOVFF  4C,127
38DE:  MOVLW  CD
38E0:  MOVLB  1
38E2:  MOVWF  x2E
38E4:  MOVLW  CC
38E6:  MOVWF  x2D
38E8:  MOVLW  4C
38EA:  MOVWF  x2C
38EC:  MOVLW  7B
38EE:  MOVWF  x2B
38F0:  MOVLB  0
38F2:  CALL   0DEA
38F6:  MOVFF  03,4F
38FA:  MOVFF  02,4E
38FE:  MOVFF  01,4D
3902:  MOVFF  00,4C
3906:  BSF    3E.4
3908:  MOVLW  1E
390A:  MOVLB  1
390C:  MOVWF  x24
390E:  MOVLB  0
3910:  CALL   0A66
....................          else 
3914:  BRA    3918
....................             {Flanco = 0;} 
3916:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3918:  BSF    F93.2
391A:  BTFSS  F81.2
391C:  BRA    396C
....................       {  if(Flanco2 == 0)  
391E:  BTFSC  3E.6
3920:  BRA    396A
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
3922:  BSF    FD8.1
3924:  MOVFF  4F,12A
3928:  MOVFF  4E,129
392C:  MOVFF  4D,128
3930:  MOVFF  4C,127
3934:  MOVLW  CD
3936:  MOVLB  1
3938:  MOVWF  x2E
393A:  MOVLW  CC
393C:  MOVWF  x2D
393E:  MOVLW  4C
3940:  MOVWF  x2C
3942:  MOVLW  7B
3944:  MOVWF  x2B
3946:  MOVLB  0
3948:  CALL   0DEA
394C:  MOVFF  03,4F
3950:  MOVFF  02,4E
3954:  MOVFF  01,4D
3958:  MOVFF  00,4C
395C:  BSF    3E.6
395E:  MOVLW  1E
3960:  MOVLB  1
3962:  MOVWF  x24
3964:  MOVLB  0
3966:  CALL   0A66
....................          else 
396A:  BRA    396E
....................             {Flanco2 = 0;} 
396C:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
396E:  BSF    F93.0
3970:  BTFSS  F81.0
3972:  BRA    3AB6
....................       {  if(Flanco1 == 0)  
3974:  BTFSC  3E.5
3976:  BRA    3AB4
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3978:  MOVLW  01
397A:  MOVWF  17
397C:  CLRF   40
397E:  MOVLW  02
3980:  MOVWF  1B
3982:  MOVWF  1D
3984:  MOVLW  0B
3986:  MOVWF  1A
3988:  MOVLW  02
398A:  MOVLB  1
398C:  MOVWF  x09
398E:  MOVLW  FA
3990:  MOVWF  x24
3992:  MOVLB  0
3994:  CALL   0A66
3998:  MOVLB  1
399A:  DECFSZ x09,F
399C:  BRA    398E
399E:  MOVLW  0C
39A0:  MOVWF  x1E
39A2:  MOVLB  0
39A4:  CALL   0BEA
....................             Temporal=setpoint; 
39A8:  MOVFF  4F,B4
39AC:  MOVFF  4E,B3
39B0:  MOVFF  4D,B2
39B4:  MOVFF  4C,B1
....................             Entero=(int)setpoint; 
39B8:  MOVFF  4F,10C
39BC:  MOVFF  4E,10B
39C0:  MOVFF  4D,10A
39C4:  MOVFF  4C,109
39C8:  CALL   177A
39CC:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
39D0:  MOVLB  1
39D2:  CLRF   x13
39D4:  MOVFF  24,112
39D8:  MOVLB  0
39DA:  CALL   0C56
39DE:  BSF    FD8.1
39E0:  MOVFF  B4,12A
39E4:  MOVFF  B3,129
39E8:  MOVFF  B2,128
39EC:  MOVFF  B1,127
39F0:  MOVFF  03,12E
39F4:  MOVFF  02,12D
39F8:  MOVFF  01,12C
39FC:  MOVFF  00,12B
3A00:  CALL   0DEA
3A04:  MOVFF  03,B4
3A08:  MOVFF  02,B3
3A0C:  MOVFF  01,B2
3A10:  MOVFF  00,B1
....................             Temporal2=Temporal*100.0; 
3A14:  MOVFF  B4,126
3A18:  MOVFF  B3,125
3A1C:  MOVFF  B2,124
3A20:  MOVFF  B1,123
3A24:  MOVLB  1
3A26:  CLRF   x2A
3A28:  CLRF   x29
3A2A:  MOVLW  48
3A2C:  MOVWF  x28
3A2E:  MOVLW  85
3A30:  MOVWF  x27
3A32:  MOVLB  0
3A34:  CALL   1394
3A38:  MOVFF  03,B8
3A3C:  MOVFF  02,B7
3A40:  MOVFF  01,B6
3A44:  MOVFF  00,B5
....................             Decimal2=(int8)Temporal2; 
3A48:  MOVFF  B8,10C
3A4C:  MOVFF  B7,10B
3A50:  MOVFF  B6,10A
3A54:  MOVFF  B5,109
3A58:  CALL   177A
3A5C:  MOVFF  01,26
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
3A60:  MOVLW  28
3A62:  MOVWF  FA9
3A64:  MOVFF  24,FA8
3A68:  BCF    FA6.6
3A6A:  BCF    FA6.7
3A6C:  BSF    FA6.2
3A6E:  MOVF   FF2,W
3A70:  MOVWF  00
3A72:  BCF    FF2.7
3A74:  MOVLB  F
3A76:  MOVLW  55
3A78:  MOVWF  FA7
3A7A:  MOVLW  AA
3A7C:  MOVWF  FA7
3A7E:  BSF    FA6.1
3A80:  BTFSC  FA6.1
3A82:  BRA    3A80
3A84:  BCF    FA6.2
3A86:  MOVF   00,W
3A88:  IORWF  FF2,F
3A8A:  MOVLW  29
3A8C:  MOVWF  FA9
3A8E:  MOVFF  26,FA8
3A92:  BCF    FA6.6
3A94:  BCF    FA6.7
3A96:  BSF    FA6.2
3A98:  MOVF   FF2,W
3A9A:  MOVWF  00
3A9C:  BCF    FF2.7
3A9E:  MOVLW  55
3AA0:  MOVWF  FA7
3AA2:  MOVLW  AA
3AA4:  MOVWF  FA7
3AA6:  BSF    FA6.1
3AA8:  BTFSC  FA6.1
3AAA:  BRA    3AA8
3AAC:  BCF    FA6.2
3AAE:  MOVF   00,W
3AB0:  IORWF  FF2,F
3AB2:  MOVLB  0
....................             }} 
....................          else 
3AB4:  BRA    3AB8
....................             {Flanco1 = 0;}    
3AB6:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3AB8:  BSF    F93.1
3ABA:  BTFSS  F81.1
3ABC:  BRA    3AF4
....................       {  if(Flanco3 == 0)  
3ABE:  BTFSC  3E.7
3AC0:  BRA    3AF2
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3AC2:  MOVLW  01
3AC4:  MOVWF  17
3AC6:  CLRF   40
3AC8:  MOVLW  02
3ACA:  MOVWF  1B
3ACC:  MOVWF  1D
3ACE:  MOVLW  0B
3AD0:  MOVWF  1A
3AD2:  MOVLW  02
3AD4:  MOVLB  1
3AD6:  MOVWF  x09
3AD8:  MOVLW  FA
3ADA:  MOVWF  x24
3ADC:  MOVLB  0
3ADE:  CALL   0A66
3AE2:  MOVLB  1
3AE4:  DECFSZ x09,F
3AE6:  BRA    3AD8
3AE8:  MOVLW  0C
3AEA:  MOVWF  x1E
3AEC:  MOVLB  0
3AEE:  CALL   0BEA
....................          else 
3AF2:  BRA    3AF6
....................             {Flanco3 = 0;}     
3AF4:  BCF    3E.7
3AF6:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
3AF8:  MOVF   17,W
3AFA:  SUBLW  05
3AFC:  BTFSS  FD8.2
3AFE:  BRA    3E70
....................    lcd_gotoxy(1,1); 
3B00:  MOVLW  01
3B02:  MOVWF  x1F
3B04:  MOVWF  x20
3B06:  MOVLB  0
3B08:  CALL   0B78
....................    printf(lcd_putc,"      Ingrese       "); 
3B0C:  MOVLW  F0
3B0E:  MOVWF  FF6
3B10:  MOVLW  04
3B12:  MOVWF  FF7
3B14:  CALL   1076
....................    lcd_gotoxy(1,2); 
3B18:  MOVLW  01
3B1A:  MOVLB  1
3B1C:  MOVWF  x1F
3B1E:  MOVLW  02
3B20:  MOVWF  x20
3B22:  MOVLB  0
3B24:  CALL   0B78
....................    printf(lcd_putc," Contraseña Actual  "); 
3B28:  MOVLW  06
3B2A:  MOVWF  FF6
3B2C:  MOVLW  05
3B2E:  MOVWF  FF7
3B30:  CALL   1076
....................    lcd_gotoxy(1,3); 
3B34:  MOVLW  01
3B36:  MOVLB  1
3B38:  MOVWF  x1F
3B3A:  MOVLW  03
3B3C:  MOVWF  x20
3B3E:  MOVLB  0
3B40:  CALL   0B78
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3B44:  MOVLW  1C
3B46:  MOVWF  FF6
3B48:  MOVLW  05
3B4A:  MOVWF  FF7
3B4C:  MOVLW  0A
3B4E:  MOVLB  1
3B50:  MOVWF  x11
3B52:  MOVLB  0
3B54:  CALL   1096
3B58:  MOVFF  44,109
3B5C:  MOVLW  1F
3B5E:  MOVLB  1
3B60:  MOVWF  x0A
3B62:  MOVLB  0
3B64:  CALL   10EA
3B68:  MOVFF  45,109
3B6C:  MOVLW  1F
3B6E:  MOVLB  1
3B70:  MOVWF  x0A
3B72:  MOVLB  0
3B74:  CALL   10EA
3B78:  MOVFF  46,109
3B7C:  MOVLW  1F
3B7E:  MOVLB  1
3B80:  MOVWF  x0A
3B82:  MOVLB  0
3B84:  CALL   10EA
3B88:  MOVFF  47,109
3B8C:  MOVLW  1F
3B8E:  MOVLB  1
3B90:  MOVWF  x0A
3B92:  MOVLB  0
3B94:  CALL   10EA
3B98:  MOVLW  20
3B9A:  MOVLB  1
3B9C:  MOVWF  x1E
3B9E:  MOVLB  0
3BA0:  CALL   0BEA
3BA4:  MOVLW  20
3BA6:  MOVLB  1
3BA8:  MOVWF  x1E
3BAA:  MOVLB  0
3BAC:  CALL   0BEA
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3BB0:  BSF    F93.3
3BB2:  BTFSS  F81.3
3BB4:  BRA    3BDC
....................       {  if(Flanco == 0)  
3BB6:  BTFSC  3E.4
3BB8:  BRA    3BDA
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3BBA:  MOVLW  0B
3BBC:  SUBWF  1A,W
3BBE:  CLRF   03
3BC0:  ADDLW  44
3BC2:  MOVWF  FE9
3BC4:  MOVLW  00
3BC6:  ADDWFC 03,W
3BC8:  MOVWF  FEA
3BCA:  INCF   FEF,F
3BCC:  BSF    3E.4
3BCE:  MOVLW  1E
3BD0:  MOVLB  1
3BD2:  MOVWF  x24
3BD4:  MOVLB  0
3BD6:  CALL   0A66
....................          else 
3BDA:  BRA    3BDE
....................             {Flanco = 0;} 
3BDC:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3BDE:  BSF    F93.2
3BE0:  BTFSS  F81.2
3BE2:  BRA    3C0A
....................       {  if(Flanco2 == 0)  
3BE4:  BTFSC  3E.6
3BE6:  BRA    3C08
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3BE8:  MOVLW  0B
3BEA:  SUBWF  1A,W
3BEC:  CLRF   03
3BEE:  ADDLW  44
3BF0:  MOVWF  FE9
3BF2:  MOVLW  00
3BF4:  ADDWFC 03,W
3BF6:  MOVWF  FEA
3BF8:  DECF   FEF,F
3BFA:  BSF    3E.6
3BFC:  MOVLW  1E
3BFE:  MOVLB  1
3C00:  MOVWF  x24
3C02:  MOVLB  0
3C04:  CALL   0A66
....................          else 
3C08:  BRA    3C0C
....................             {Flanco2 = 0;} 
3C0A:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3C0C:  BSF    F93.0
3C0E:  BTFSS  F81.0
3C10:  BRA    3C3C
....................       {  if(Flanco1 == 0)  
3C12:  BTFSC  3E.5
3C14:  BRA    3C3A
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
3C16:  BSF    3E.5
3C18:  INCF   1A,F
3C1A:  MOVLW  02
3C1C:  MOVLB  1
3C1E:  MOVWF  x09
3C20:  MOVLW  FA
3C22:  MOVWF  x24
3C24:  MOVLB  0
3C26:  CALL   0A66
3C2A:  MOVLB  1
3C2C:  DECFSZ x09,F
3C2E:  BRA    3C20
3C30:  MOVLW  0C
3C32:  MOVWF  x1E
3C34:  MOVLB  0
3C36:  CALL   0BEA
....................          else 
3C3A:  BRA    3C3E
....................             {Flanco1 = 0;}    
3C3C:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3C3E:  BSF    F93.1
3C40:  BTFSS  F81.1
3C42:  BRA    3C6E
....................       {  if(Flanco3 == 0)  
3C44:  BTFSC  3E.7
3C46:  BRA    3C6C
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
3C48:  BSF    3E.7
3C4A:  DECF   1A,F
3C4C:  MOVLW  02
3C4E:  MOVLB  1
3C50:  MOVWF  x09
3C52:  MOVLW  FA
3C54:  MOVWF  x24
3C56:  MOVLB  0
3C58:  CALL   0A66
3C5C:  MOVLB  1
3C5E:  DECFSZ x09,F
3C60:  BRA    3C52
3C62:  MOVLW  0C
3C64:  MOVWF  x1E
3C66:  MOVLB  0
3C68:  CALL   0BEA
....................          else 
3C6C:  BRA    3C70
....................             {Flanco3 = 0;}     
3C6E:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3C70:  MOVLW  0B
3C72:  SUBWF  1A,W
3C74:  CLRF   03
3C76:  ADDLW  44
3C78:  MOVWF  FE9
3C7A:  MOVLW  00
3C7C:  ADDWFC 03,W
3C7E:  MOVWF  FEA
3C80:  BTFSC  FEF.7
3C82:  BRA    3C86
3C84:  BRA    3C9A
....................        {clave[unidad-11]=9;} 
3C86:  MOVLW  0B
3C88:  SUBWF  1A,W
3C8A:  CLRF   03
3C8C:  ADDLW  44
3C8E:  MOVWF  FE9
3C90:  MOVLW  00
3C92:  ADDWFC 03,W
3C94:  MOVWF  FEA
3C96:  MOVLW  09
3C98:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3C9A:  MOVLW  0B
3C9C:  SUBWF  1A,W
3C9E:  CLRF   03
3CA0:  ADDLW  44
3CA2:  MOVWF  FE9
3CA4:  MOVLW  00
3CA6:  ADDWFC 03,W
3CA8:  MOVWF  FEA
3CAA:  BTFSC  FEF.7
3CAC:  BRA    3CC6
3CAE:  MOVF   FEF,W
3CB0:  SUBLW  09
3CB2:  BC    3CC6
....................        {clave[unidad-11]=0;} 
3CB4:  MOVLW  0B
3CB6:  SUBWF  1A,W
3CB8:  CLRF   03
3CBA:  ADDLW  44
3CBC:  MOVWF  FE9
3CBE:  MOVLW  00
3CC0:  ADDWFC 03,W
3CC2:  MOVWF  FEA
3CC4:  CLRF   FEF
....................        if(unidad<11) 
3CC6:  MOVF   1A,W
3CC8:  SUBLW  0A
3CCA:  BNC   3CDC
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
3CCC:  MOVLW  01
3CCE:  MOVWF  17
3CD0:  CLRF   40
3CD2:  MOVLW  02
3CD4:  MOVWF  1B
3CD6:  MOVWF  1D
3CD8:  MOVLW  0B
3CDA:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3CDC:  MOVFF  1A,11F
3CE0:  MOVLW  04
3CE2:  MOVLB  1
3CE4:  MOVWF  x20
3CE6:  MOVLB  0
3CE8:  CALL   0B78
....................        lcd_putc(t[2]); 
3CEC:  MOVFF  43,11E
3CF0:  CALL   0BEA
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3CF4:  MOVF   1A,W
3CF6:  SUBLW  0E
3CF8:  BTFSC  FD8.0
3CFA:  BRA    3E46
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3CFC:  MOVF   48,W
3CFE:  SUBWF  44,W
3D00:  BNZ   3DB4
3D02:  MOVF   49,W
3D04:  SUBWF  45,W
3D06:  BNZ   3DB4
3D08:  MOVF   4A,W
3D0A:  SUBWF  46,W
3D0C:  BNZ   3DB4
3D0E:  MOVF   4B,W
3D10:  SUBWF  47,W
3D12:  BNZ   3DB4
....................             {lcd_gotoxy(1,1); 
3D14:  MOVLW  01
3D16:  MOVLB  1
3D18:  MOVWF  x1F
3D1A:  MOVWF  x20
3D1C:  MOVLB  0
3D1E:  CALL   0B78
....................             printf(lcd_putc,"                    "); 
3D22:  MOVLW  32
3D24:  MOVWF  FF6
3D26:  MOVLW  05
3D28:  MOVWF  FF7
3D2A:  CALL   1076
....................             lcd_gotoxy(1,2); 
3D2E:  MOVLW  01
3D30:  MOVLB  1
3D32:  MOVWF  x1F
3D34:  MOVLW  02
3D36:  MOVWF  x20
3D38:  MOVLB  0
3D3A:  CALL   0B78
....................             printf(lcd_putc,"     Contraseña     "); 
3D3E:  MOVLW  48
3D40:  MOVWF  FF6
3D42:  MOVLW  05
3D44:  MOVWF  FF7
3D46:  CALL   1076
....................             lcd_gotoxy(1,3); 
3D4A:  MOVLW  01
3D4C:  MOVLB  1
3D4E:  MOVWF  x1F
3D50:  MOVLW  03
3D52:  MOVWF  x20
3D54:  MOVLB  0
3D56:  CALL   0B78
....................             printf(lcd_putc,"      Correcta      "); 
3D5A:  MOVLW  5E
3D5C:  MOVWF  FF6
3D5E:  MOVLW  05
3D60:  MOVWF  FF7
3D62:  CALL   1076
....................             lcd_gotoxy(1,4); 
3D66:  MOVLW  01
3D68:  MOVLB  1
3D6A:  MOVWF  x1F
3D6C:  MOVLW  04
3D6E:  MOVWF  x20
3D70:  MOVLB  0
3D72:  CALL   0B78
....................             printf(lcd_putc,"                    "); 
3D76:  MOVLW  74
3D78:  MOVWF  FF6
3D7A:  MOVLW  05
3D7C:  MOVWF  FF7
3D7E:  CALL   1076
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
3D82:  MOVLW  02
3D84:  MOVLB  1
3D86:  MOVWF  x09
3D88:  MOVLW  FA
3D8A:  MOVWF  x24
3D8C:  MOVLB  0
3D8E:  CALL   0A66
3D92:  MOVLB  1
3D94:  DECFSZ x09,F
3D96:  BRA    3D88
3D98:  MOVLW  33
3D9A:  MOVWF  17
3D9C:  MOVLW  0B
3D9E:  MOVWF  1A
3DA0:  MOVLW  0C
3DA2:  MOVWF  x1E
3DA4:  MOVLB  0
3DA6:  CALL   0BEA
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3DAA:  CLRF   44
3DAC:  CLRF   45
3DAE:  CLRF   46
3DB0:  CLRF   47
....................          else 
3DB2:  BRA    3E46
....................          {lcd_gotoxy(1,1); 
3DB4:  MOVLW  01
3DB6:  MOVLB  1
3DB8:  MOVWF  x1F
3DBA:  MOVWF  x20
3DBC:  MOVLB  0
3DBE:  CALL   0B78
....................             printf(lcd_putc,"                    "); 
3DC2:  MOVLW  8A
3DC4:  MOVWF  FF6
3DC6:  MOVLW  05
3DC8:  MOVWF  FF7
3DCA:  CALL   1076
....................             lcd_gotoxy(1,2); 
3DCE:  MOVLW  01
3DD0:  MOVLB  1
3DD2:  MOVWF  x1F
3DD4:  MOVLW  02
3DD6:  MOVWF  x20
3DD8:  MOVLB  0
3DDA:  CALL   0B78
....................             printf(lcd_putc,"     Contraseña     "); 
3DDE:  MOVLW  A0
3DE0:  MOVWF  FF6
3DE2:  MOVLW  05
3DE4:  MOVWF  FF7
3DE6:  CALL   1076
....................             lcd_gotoxy(1,3); 
3DEA:  MOVLW  01
3DEC:  MOVLB  1
3DEE:  MOVWF  x1F
3DF0:  MOVLW  03
3DF2:  MOVWF  x20
3DF4:  MOVLB  0
3DF6:  CALL   0B78
....................             printf(lcd_putc,"     Incorrecta     "); 
3DFA:  MOVLW  B6
3DFC:  MOVWF  FF6
3DFE:  MOVLW  05
3E00:  MOVWF  FF7
3E02:  CALL   1076
....................             lcd_gotoxy(1,4); 
3E06:  MOVLW  01
3E08:  MOVLB  1
3E0A:  MOVWF  x1F
3E0C:  MOVLW  04
3E0E:  MOVWF  x20
3E10:  MOVLB  0
3E12:  CALL   0B78
....................             printf(lcd_putc,"                    "); 
3E16:  MOVLW  CC
3E18:  MOVWF  FF6
3E1A:  MOVLW  05
3E1C:  MOVWF  FF7
3E1E:  CALL   1076
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3E22:  MOVLW  02
3E24:  MOVLB  1
3E26:  MOVWF  x09
3E28:  MOVLW  FA
3E2A:  MOVWF  x24
3E2C:  MOVLB  0
3E2E:  CALL   0A66
3E32:  MOVLB  1
3E34:  DECFSZ x09,F
3E36:  BRA    3E28
3E38:  MOVLW  0B
3E3A:  MOVWF  1A
3E3C:  MOVLW  0C
3E3E:  MOVWF  x1E
3E40:  MOVLB  0
3E42:  CALL   0BEA
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
3E46:  MOVF   1A,W
3E48:  SUBLW  0B
3E4A:  BC    3E6E
3E4C:  MOVF   1A,W
3E4E:  SUBLW  0D
3E50:  BNC   3E6E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3E52:  MOVLW  01
3E54:  SUBWF  1A,W
3E56:  MOVLB  1
3E58:  MOVWF  x09
3E5A:  MOVWF  x1F
3E5C:  MOVLW  04
3E5E:  MOVWF  x20
3E60:  MOVLB  0
3E62:  CALL   0B78
....................             lcd_putc(t[1]); 
3E66:  MOVFF  42,11E
3E6A:  CALL   0BEA
3E6E:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3E70:  MOVF   17,W
3E72:  SUBLW  33
3E74:  BTFSS  FD8.2
3E76:  BRA    41EE
....................    lcd_gotoxy(1,1); 
3E78:  MOVLW  01
3E7A:  MOVWF  x1F
3E7C:  MOVWF  x20
3E7E:  MOVLB  0
3E80:  CALL   0B78
....................    printf(lcd_putc,"     Ingrese        "); 
3E84:  MOVLW  E2
3E86:  MOVWF  FF6
3E88:  MOVLW  05
3E8A:  MOVWF  FF7
3E8C:  CALL   1076
....................    lcd_gotoxy(1,2); 
3E90:  MOVLW  01
3E92:  MOVLB  1
3E94:  MOVWF  x1F
3E96:  MOVLW  02
3E98:  MOVWF  x20
3E9A:  MOVLB  0
3E9C:  CALL   0B78
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
3EA0:  MOVLW  F8
3EA2:  MOVWF  FF6
3EA4:  MOVLW  05
3EA6:  MOVWF  FF7
3EA8:  CALL   1076
....................    lcd_gotoxy(1,3); 
3EAC:  MOVLW  01
3EAE:  MOVLB  1
3EB0:  MOVWF  x1F
3EB2:  MOVLW  03
3EB4:  MOVWF  x20
3EB6:  MOVLB  0
3EB8:  CALL   0B78
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3EBC:  MOVLW  0E
3EBE:  MOVWF  FF6
3EC0:  MOVLW  06
3EC2:  MOVWF  FF7
3EC4:  MOVLW  0A
3EC6:  MOVLB  1
3EC8:  MOVWF  x11
3ECA:  MOVLB  0
3ECC:  CALL   1096
3ED0:  MOVFF  44,109
3ED4:  MOVLW  1F
3ED6:  MOVLB  1
3ED8:  MOVWF  x0A
3EDA:  MOVLB  0
3EDC:  CALL   10EA
3EE0:  MOVFF  45,109
3EE4:  MOVLW  1F
3EE6:  MOVLB  1
3EE8:  MOVWF  x0A
3EEA:  MOVLB  0
3EEC:  CALL   10EA
3EF0:  MOVFF  46,109
3EF4:  MOVLW  1F
3EF6:  MOVLB  1
3EF8:  MOVWF  x0A
3EFA:  MOVLB  0
3EFC:  CALL   10EA
3F00:  MOVFF  47,109
3F04:  MOVLW  1F
3F06:  MOVLB  1
3F08:  MOVWF  x0A
3F0A:  MOVLB  0
3F0C:  CALL   10EA
3F10:  MOVLW  20
3F12:  MOVLB  1
3F14:  MOVWF  x1E
3F16:  MOVLB  0
3F18:  CALL   0BEA
3F1C:  MOVLW  20
3F1E:  MOVLB  1
3F20:  MOVWF  x1E
3F22:  MOVLB  0
3F24:  CALL   0BEA
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
3F28:  BSF    F93.3
3F2A:  BTFSS  F81.3
3F2C:  BRA    3F54
....................       {  if(Flanco == 0)  
3F2E:  BTFSC  3E.4
3F30:  BRA    3F52
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3F32:  MOVLW  0B
3F34:  SUBWF  1A,W
3F36:  CLRF   03
3F38:  ADDLW  44
3F3A:  MOVWF  FE9
3F3C:  MOVLW  00
3F3E:  ADDWFC 03,W
3F40:  MOVWF  FEA
3F42:  INCF   FEF,F
3F44:  BSF    3E.4
3F46:  MOVLW  1E
3F48:  MOVLB  1
3F4A:  MOVWF  x24
3F4C:  MOVLB  0
3F4E:  CALL   0A66
....................          else 
3F52:  BRA    3F56
....................             {Flanco = 0;} 
3F54:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3F56:  BSF    F93.2
3F58:  BTFSS  F81.2
3F5A:  BRA    3F82
....................       {  if(Flanco2 == 0)  
3F5C:  BTFSC  3E.6
3F5E:  BRA    3F80
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3F60:  MOVLW  0B
3F62:  SUBWF  1A,W
3F64:  CLRF   03
3F66:  ADDLW  44
3F68:  MOVWF  FE9
3F6A:  MOVLW  00
3F6C:  ADDWFC 03,W
3F6E:  MOVWF  FEA
3F70:  DECF   FEF,F
3F72:  BSF    3E.6
3F74:  MOVLW  1E
3F76:  MOVLB  1
3F78:  MOVWF  x24
3F7A:  MOVLB  0
3F7C:  CALL   0A66
....................          else 
3F80:  BRA    3F84
....................             {Flanco2 = 0;} 
3F82:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
3F84:  BSF    F93.0
3F86:  BTFSS  F81.0
3F88:  BRA    3FAC
....................       {  if(Flanco1 == 0)  
3F8A:  BTFSC  3E.5
3F8C:  BRA    3FAA
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3F8E:  BSF    3E.5
3F90:  INCF   1A,F
3F92:  MOVLW  1E
3F94:  MOVLB  1
3F96:  MOVWF  x24
3F98:  MOVLB  0
3F9A:  CALL   0A66
3F9E:  MOVLW  0C
3FA0:  MOVLB  1
3FA2:  MOVWF  x1E
3FA4:  MOVLB  0
3FA6:  CALL   0BEA
....................          else 
3FAA:  BRA    3FAE
....................             {Flanco1 = 0;}    
3FAC:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3FAE:  BSF    F93.1
3FB0:  BTFSS  F81.1
3FB2:  BRA    3FD6
....................       {  if(Flanco3 == 0)  
3FB4:  BTFSC  3E.7
3FB6:  BRA    3FD4
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3FB8:  BSF    3E.7
3FBA:  DECF   1A,F
3FBC:  MOVLW  1E
3FBE:  MOVLB  1
3FC0:  MOVWF  x24
3FC2:  MOVLB  0
3FC4:  CALL   0A66
3FC8:  MOVLW  0C
3FCA:  MOVLB  1
3FCC:  MOVWF  x1E
3FCE:  MOVLB  0
3FD0:  CALL   0BEA
....................          else 
3FD4:  BRA    3FD8
....................             {Flanco3 = 0;}     
3FD6:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3FD8:  MOVLW  0B
3FDA:  SUBWF  1A,W
3FDC:  CLRF   03
3FDE:  ADDLW  44
3FE0:  MOVWF  FE9
3FE2:  MOVLW  00
3FE4:  ADDWFC 03,W
3FE6:  MOVWF  FEA
3FE8:  BTFSC  FEF.7
3FEA:  BRA    3FEE
3FEC:  BRA    4002
....................        {clave[unidad-11]=9;} 
3FEE:  MOVLW  0B
3FF0:  SUBWF  1A,W
3FF2:  CLRF   03
3FF4:  ADDLW  44
3FF6:  MOVWF  FE9
3FF8:  MOVLW  00
3FFA:  ADDWFC 03,W
3FFC:  MOVWF  FEA
3FFE:  MOVLW  09
4000:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
4002:  MOVLW  0B
4004:  SUBWF  1A,W
4006:  CLRF   03
4008:  ADDLW  44
400A:  MOVWF  FE9
400C:  MOVLW  00
400E:  ADDWFC 03,W
4010:  MOVWF  FEA
4012:  BTFSC  FEF.7
4014:  BRA    402E
4016:  MOVF   FEF,W
4018:  SUBLW  09
401A:  BC    402E
....................        {clave[unidad-11]=0;} 
401C:  MOVLW  0B
401E:  SUBWF  1A,W
4020:  CLRF   03
4022:  ADDLW  44
4024:  MOVWF  FE9
4026:  MOVLW  00
4028:  ADDWFC 03,W
402A:  MOVWF  FEA
402C:  CLRF   FEF
....................        if(unidad<11) 
402E:  MOVF   1A,W
4030:  SUBLW  0A
4032:  BNC   403C
....................        {Menu=5;unidad=11;} 
4034:  MOVLW  05
4036:  MOVWF  17
4038:  MOVLW  0B
403A:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
403C:  MOVFF  1A,11F
4040:  MOVLW  04
4042:  MOVLB  1
4044:  MOVWF  x20
4046:  MOVLB  0
4048:  CALL   0B78
....................        lcd_putc(t[2]); 
404C:  MOVFF  43,11E
4050:  CALL   0BEA
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
4054:  MOVF   1A,W
4056:  SUBLW  0E
4058:  BTFSC  FD8.0
405A:  BRA    41C4
....................        { 
....................             lcd_gotoxy(1,1); 
405C:  MOVLW  01
405E:  MOVLB  1
4060:  MOVWF  x1F
4062:  MOVWF  x20
4064:  MOVLB  0
4066:  CALL   0B78
....................             printf(lcd_putc,"                    "); 
406A:  MOVLW  24
406C:  MOVWF  FF6
406E:  MOVLW  06
4070:  MOVWF  FF7
4072:  CALL   1076
....................             lcd_gotoxy(1,2); 
4076:  MOVLW  01
4078:  MOVLB  1
407A:  MOVWF  x1F
407C:  MOVLW  02
407E:  MOVWF  x20
4080:  MOVLB  0
4082:  CALL   0B78
....................             printf(lcd_putc,"     Contraseña     "); 
4086:  MOVLW  3A
4088:  MOVWF  FF6
408A:  MOVLW  06
408C:  MOVWF  FF7
408E:  CALL   1076
....................             lcd_gotoxy(1,3); 
4092:  MOVLW  01
4094:  MOVLB  1
4096:  MOVWF  x1F
4098:  MOVLW  03
409A:  MOVWF  x20
409C:  MOVLB  0
409E:  CALL   0B78
....................             printf(lcd_putc,"     Almacenada     "); 
40A2:  MOVLW  50
40A4:  MOVWF  FF6
40A6:  MOVLW  06
40A8:  MOVWF  FF7
40AA:  CALL   1076
....................             lcd_gotoxy(1,4); 
40AE:  MOVLW  01
40B0:  MOVLB  1
40B2:  MOVWF  x1F
40B4:  MOVLW  04
40B6:  MOVWF  x20
40B8:  MOVLB  0
40BA:  CALL   0B78
....................             printf(lcd_putc,"                    "); 
40BE:  MOVLW  66
40C0:  MOVWF  FF6
40C2:  MOVLW  06
40C4:  MOVWF  FF7
40C6:  CALL   1076
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
40CA:  CLRF   FA9
40CC:  MOVFF  44,FA8
40D0:  BCF    FA6.6
40D2:  BCF    FA6.7
40D4:  BSF    FA6.2
40D6:  MOVF   FF2,W
40D8:  MOVWF  00
40DA:  BCF    FF2.7
40DC:  MOVLB  F
40DE:  MOVLW  55
40E0:  MOVWF  FA7
40E2:  MOVLW  AA
40E4:  MOVWF  FA7
40E6:  BSF    FA6.1
40E8:  BTFSC  FA6.1
40EA:  BRA    40E8
40EC:  BCF    FA6.2
40EE:  MOVF   00,W
40F0:  IORWF  FF2,F
40F2:  MOVLW  14
40F4:  MOVLB  1
40F6:  MOVWF  x24
40F8:  MOVLB  0
40FA:  CALL   0A66
40FE:  MOVLW  01
4100:  MOVWF  FA9
4102:  MOVFF  45,FA8
4106:  BCF    FA6.6
4108:  BCF    FA6.7
410A:  BSF    FA6.2
410C:  MOVF   FF2,W
410E:  MOVWF  00
4110:  BCF    FF2.7
4112:  MOVLB  F
4114:  MOVLW  55
4116:  MOVWF  FA7
4118:  MOVLW  AA
411A:  MOVWF  FA7
411C:  BSF    FA6.1
411E:  BTFSC  FA6.1
4120:  BRA    411E
4122:  BCF    FA6.2
4124:  MOVF   00,W
4126:  IORWF  FF2,F
4128:  MOVLW  14
412A:  MOVLB  1
412C:  MOVWF  x24
412E:  MOVLB  0
4130:  CALL   0A66
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
4134:  MOVLW  02
4136:  MOVWF  FA9
4138:  MOVFF  46,FA8
413C:  BCF    FA6.6
413E:  BCF    FA6.7
4140:  BSF    FA6.2
4142:  MOVF   FF2,W
4144:  MOVWF  00
4146:  BCF    FF2.7
4148:  MOVLB  F
414A:  MOVLW  55
414C:  MOVWF  FA7
414E:  MOVLW  AA
4150:  MOVWF  FA7
4152:  BSF    FA6.1
4154:  BTFSC  FA6.1
4156:  BRA    4154
4158:  BCF    FA6.2
415A:  MOVF   00,W
415C:  IORWF  FF2,F
415E:  MOVLW  14
4160:  MOVLB  1
4162:  MOVWF  x24
4164:  MOVLB  0
4166:  CALL   0A66
416A:  MOVLW  03
416C:  MOVWF  FA9
416E:  MOVFF  47,FA8
4172:  BCF    FA6.6
4174:  BCF    FA6.7
4176:  BSF    FA6.2
4178:  MOVF   FF2,W
417A:  MOVWF  00
417C:  BCF    FF2.7
417E:  MOVLB  F
4180:  MOVLW  55
4182:  MOVWF  FA7
4184:  MOVLW  AA
4186:  MOVWF  FA7
4188:  BSF    FA6.1
418A:  BTFSC  FA6.1
418C:  BRA    418A
418E:  BCF    FA6.2
4190:  MOVF   00,W
4192:  IORWF  FF2,F
4194:  MOVLW  14
4196:  MOVLB  1
4198:  MOVWF  x24
419A:  MOVLB  0
419C:  CALL   0A66
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
41A0:  MOVLW  02
41A2:  MOVLB  1
41A4:  MOVWF  x09
41A6:  MOVLW  FA
41A8:  MOVWF  x24
41AA:  MOVLB  0
41AC:  CALL   0A66
41B0:  MOVLB  1
41B2:  DECFSZ x09,F
41B4:  BRA    41A6
41B6:  MOVLW  01
41B8:  MOVWF  17
41BA:  CLRF   40
41BC:  MOVLW  02
41BE:  MOVWF  1B
41C0:  MOVWF  1D
41C2:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
41C4:  MOVF   1A,W
41C6:  SUBLW  0B
41C8:  BC    41EC
41CA:  MOVF   1A,W
41CC:  SUBLW  0D
41CE:  BNC   41EC
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
41D0:  MOVLW  01
41D2:  SUBWF  1A,W
41D4:  MOVLB  1
41D6:  MOVWF  x09
41D8:  MOVWF  x1F
41DA:  MOVLW  04
41DC:  MOVWF  x20
41DE:  MOVLB  0
41E0:  CALL   0B78
....................             lcd_putc(t[1]); 
41E4:  MOVFF  42,11E
41E8:  CALL   0BEA
41EC:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
41EE:  MOVF   17,W
41F0:  SUBLW  06
41F2:  BTFSS  FD8.2
41F4:  BRA    4364
....................    { 
....................    lcd_gotoxy(1,2); 
41F6:  MOVLW  01
41F8:  MOVWF  x1F
41FA:  MOVLW  02
41FC:  MOVWF  x20
41FE:  MOVLB  0
4200:  CALL   0B78
....................    printf(lcd_putc,"     Media Movil    "); 
4204:  MOVLW  7C
4206:  MOVWF  FF6
4208:  MOVLW  06
420A:  MOVWF  FF7
420C:  CALL   1076
....................    lcd_gotoxy(1,3); 
4210:  MOVLW  01
4212:  MOVLB  1
4214:  MOVWF  x1F
4216:  MOVLW  03
4218:  MOVWF  x20
421A:  MOVLB  0
421C:  CALL   0B78
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
4220:  MOVLW  92
4222:  MOVWF  FF6
4224:  MOVLW  06
4226:  MOVWF  FF7
4228:  MOVLW  07
422A:  MOVLB  1
422C:  MOVWF  x11
422E:  MOVLB  0
4230:  CALL   1096
4234:  MOVFF  2D,109
4238:  MOVLW  01
423A:  MOVLB  1
423C:  MOVWF  x0A
423E:  MOVLB  0
4240:  CALL   10EA
4244:  MOVLW  20
4246:  MOVLB  1
4248:  MOVWF  x1E
424A:  MOVLB  0
424C:  CALL   0BEA
4250:  MOVLW  20
4252:  MOVLB  1
4254:  MOVWF  x1E
4256:  MOVLB  0
4258:  CALL   0BEA
425C:  MOVLW  20
425E:  MOVLB  1
4260:  MOVWF  x1E
4262:  MOVLB  0
4264:  CALL   0BEA
....................     
....................    if(MediaMovil>12) 
4268:  MOVF   2D,W
426A:  SUBLW  0C
426C:  BC    4272
....................    {MediaMovil=12;} 
426E:  MOVLW  0C
4270:  MOVWF  2D
....................     
....................    if(MediaMovil<1) 
4272:  MOVF   2D,F
4274:  BNZ   427A
....................    {MediaMovil=1;} 
4276:  MOVLW  01
4278:  MOVWF  2D
....................     
....................       if(UP)//Si oprime hacia arriba 
427A:  BSF    F93.3
427C:  BTFSS  F81.3
427E:  BRA    4298
....................       {  if(Flanco == 0)  
4280:  BTFSC  3E.4
4282:  BRA    4296
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
4284:  MOVLW  01
4286:  ADDWF  2D,F
4288:  BSF    3E.4
428A:  MOVLW  1E
428C:  MOVLB  1
428E:  MOVWF  x24
4290:  MOVLB  0
4292:  CALL   0A66
....................          else 
4296:  BRA    429A
....................             {Flanco = 0;} 
4298:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
429A:  BSF    F93.2
429C:  BTFSS  F81.2
429E:  BRA    42B8
....................       {  if(Flanco2 == 0)  
42A0:  BTFSC  3E.6
42A2:  BRA    42B6
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
42A4:  MOVLW  01
42A6:  SUBWF  2D,F
42A8:  BSF    3E.6
42AA:  MOVLW  1E
42AC:  MOVLB  1
42AE:  MOVWF  x24
42B0:  MOVLB  0
42B2:  CALL   0A66
....................          else 
42B6:  BRA    42BA
....................             {Flanco2 = 0;} 
42B8:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
42BA:  BSF    F93.0
42BC:  BTFSS  F81.0
42BE:  BRA    4322
....................       {  if(Flanco1 == 0)  
42C0:  BTFSC  3E.5
42C2:  BRA    4320
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
42C4:  MOVLW  01
42C6:  MOVWF  17
42C8:  CLRF   40
42CA:  MOVLW  02
42CC:  MOVWF  1B
42CE:  MOVWF  1D
42D0:  MOVLW  0B
42D2:  MOVWF  1A
42D4:  MOVLW  02
42D6:  MOVLB  1
42D8:  MOVWF  x09
42DA:  MOVLW  FA
42DC:  MOVWF  x24
42DE:  MOVLB  0
42E0:  CALL   0A66
42E4:  MOVLB  1
42E6:  DECFSZ x09,F
42E8:  BRA    42DA
42EA:  MOVLW  0C
42EC:  MOVWF  x1E
42EE:  MOVLB  0
42F0:  CALL   0BEA
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
42F4:  MOVLW  2A
42F6:  MOVWF  FA9
42F8:  MOVFF  2D,FA8
42FC:  BCF    FA6.6
42FE:  BCF    FA6.7
4300:  BSF    FA6.2
4302:  MOVF   FF2,W
4304:  MOVWF  00
4306:  BCF    FF2.7
4308:  MOVLB  F
430A:  MOVLW  55
430C:  MOVWF  FA7
430E:  MOVLW  AA
4310:  MOVWF  FA7
4312:  BSF    FA6.1
4314:  BTFSC  FA6.1
4316:  BRA    4314
4318:  BCF    FA6.2
431A:  MOVF   00,W
431C:  IORWF  FF2,F
431E:  MOVLB  0
....................             }} 
....................          else 
4320:  BRA    4324
....................             {Flanco1 = 0;}    
4322:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4324:  BSF    F93.1
4326:  BTFSS  F81.1
4328:  BRA    4360
....................       {  if(Flanco3 == 0)  
432A:  BTFSC  3E.7
432C:  BRA    435E
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
432E:  MOVLW  01
4330:  MOVWF  17
4332:  CLRF   40
4334:  MOVLW  02
4336:  MOVWF  1B
4338:  MOVWF  1D
433A:  MOVLW  0B
433C:  MOVWF  1A
433E:  MOVLW  02
4340:  MOVLB  1
4342:  MOVWF  x09
4344:  MOVLW  FA
4346:  MOVWF  x24
4348:  MOVLB  0
434A:  CALL   0A66
434E:  MOVLB  1
4350:  DECFSZ x09,F
4352:  BRA    4344
4354:  MOVLW  0C
4356:  MOVWF  x1E
4358:  MOVLB  0
435A:  CALL   0BEA
....................          else 
435E:  BRA    4362
....................             {Flanco3 = 0;}   
4360:  BCF    3E.7
4362:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
4364:  MOVF   17,W
4366:  SUBLW  07
4368:  BTFSS  FD8.2
436A:  BRA    475A
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
436C:  MOVLW  01
436E:  MOVWF  x1F
4370:  MOVWF  x20
4372:  MOVLB  0
4374:  CALL   0B78
....................    printf(lcd_putc,"  Zero Point Config "); 
4378:  MOVLW  A2
437A:  MOVWF  FF6
437C:  MOVLW  06
437E:  MOVWF  FF7
4380:  CALL   1076
....................    lcd_gotoxy(1,2); 
4384:  MOVLW  01
4386:  MOVLB  1
4388:  MOVWF  x1F
438A:  MOVLW  02
438C:  MOVWF  x20
438E:  MOVLB  0
4390:  CALL   0B78
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
4394:  MOVLW  B8
4396:  MOVWF  FF6
4398:  MOVLW  06
439A:  MOVWF  FF7
439C:  MOVLW  08
439E:  MOVLB  1
43A0:  MOVWF  x11
43A2:  MOVLB  0
43A4:  CALL   1096
43A8:  MOVLW  01
43AA:  MOVWF  FE9
43AC:  MOVFF  98,114
43B0:  MOVFF  97,113
43B4:  MOVFF  96,112
43B8:  MOVFF  95,111
43BC:  MOVLB  1
43BE:  MOVWF  x15
43C0:  MOVLB  0
43C2:  CALL   154E
43C6:  MOVLW  C5
43C8:  MOVWF  FF6
43CA:  MOVLW  06
43CC:  MOVWF  FF7
43CE:  MOVLW  08
43D0:  MOVLB  1
43D2:  MOVWF  x11
43D4:  MOVLB  0
43D6:  CALL   1096
....................    lcd_gotoxy(1,3); 
43DA:  MOVLW  01
43DC:  MOVLB  1
43DE:  MOVWF  x1F
43E0:  MOVLW  03
43E2:  MOVWF  x20
43E4:  MOVLB  0
43E6:  CALL   0B78
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
43EA:  MOVLB  1
43EC:  CLRF   x0D
43EE:  MOVLB  0
43F0:  CALL   17B6
43F4:  MOVFF  00,109
43F8:  MOVFF  01,10A
43FC:  MOVFF  02,10B
4400:  MOVFF  03,10C
4404:  MOVLW  5A
4406:  MOVLB  1
4408:  MOVWF  x1E
440A:  MOVLB  0
440C:  CALL   0BEA
4410:  MOVLW  46
4412:  MOVLB  1
4414:  MOVWF  x1E
4416:  MOVLB  0
4418:  CALL   0BEA
441C:  MOVLW  3D
441E:  MOVLB  1
4420:  MOVWF  x1E
4422:  MOVLB  0
4424:  CALL   0BEA
4428:  MOVLW  01
442A:  MOVWF  FE9
442C:  MOVFF  57,114
4430:  MOVFF  56,113
4434:  MOVFF  55,112
4438:  MOVFF  54,111
443C:  MOVLB  1
443E:  CLRF   x15
4440:  MOVLB  0
4442:  CALL   154E
4446:  MOVLW  D6
4448:  MOVWF  FF6
444A:  MOVLW  06
444C:  MOVWF  FF7
444E:  MOVLW  05
4450:  MOVLB  1
4452:  MOVWF  x11
4454:  MOVLB  0
4456:  CALL   1096
445A:  MOVLW  01
445C:  MOVWF  FE9
445E:  MOVFF  10C,114
4462:  MOVFF  10B,113
4466:  MOVFF  10A,112
446A:  MOVFF  109,111
446E:  MOVLB  1
4470:  CLRF   x15
4472:  MOVLB  0
4474:  CALL   154E
....................    lcd_gotoxy(1,4); 
4478:  MOVLW  01
447A:  MOVLB  1
447C:  MOVWF  x1F
447E:  MOVLW  04
4480:  MOVWF  x20
4482:  MOVLB  0
4484:  CALL   0B78
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
4488:  MOVLW  E2
448A:  MOVWF  FF6
448C:  MOVLW  06
448E:  MOVWF  FF7
4490:  MOVLW  0C
4492:  MOVLB  1
4494:  MOVWF  x11
4496:  MOVLB  0
4498:  CALL   1096
449C:  MOVLW  01
449E:  MOVWF  FE9
44A0:  MOVFF  C8,114
44A4:  MOVFF  C7,113
44A8:  MOVFF  C6,112
44AC:  MOVFF  C5,111
44B0:  MOVLB  1
44B2:  CLRF   x15
44B4:  MOVLB  0
44B6:  CALL   154E
....................      
....................       if(RIGHT)// Si oprime derecha 
44BA:  BSF    F93.0
44BC:  BTFSS  F81.0
44BE:  BRA    4718
....................       {  if(Flanco1 == 0)  
44C0:  BTFSC  3E.5
44C2:  BRA    4716
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
44C4:  MOVLW  01
44C6:  MOVWF  17
44C8:  CLRF   40
44CA:  MOVLW  02
44CC:  MOVWF  1B
44CE:  MOVWF  1D
44D0:  MOVLW  0B
44D2:  MOVWF  1A
44D4:  MOVLW  02
44D6:  MOVLB  1
44D8:  MOVWF  x09
44DA:  MOVLW  FA
44DC:  MOVWF  x24
44DE:  MOVLB  0
44E0:  CALL   0A66
44E4:  MOVLB  1
44E6:  DECFSZ x09,F
44E8:  BRA    44DA
44EA:  MOVLW  0C
44EC:  MOVWF  x1E
44EE:  MOVLB  0
44F0:  CALL   0BEA
....................             Diferencia=zero_fabrica-sensores(0); 
44F4:  MOVLB  1
44F6:  CLRF   x0D
44F8:  MOVLB  0
44FA:  CALL   17B6
44FE:  MOVFF  FEA,10A
4502:  MOVFF  FE9,109
4506:  BSF    FD8.1
4508:  MOVFF  57,12A
450C:  MOVFF  56,129
4510:  MOVFF  55,128
4514:  MOVFF  54,127
4518:  MOVFF  03,12E
451C:  MOVFF  02,12D
4520:  MOVFF  01,12C
4524:  MOVFF  00,12B
4528:  CALL   0DEA
452C:  MOVFF  10A,FEA
4530:  MOVFF  109,FE9
4534:  MOVFF  03,C8
4538:  MOVFF  02,C7
453C:  MOVFF  01,C6
4540:  MOVFF  00,C5
....................              
....................             if(Diferencia>=0) 
4544:  MOVLB  1
4546:  CLRF   x26
4548:  CLRF   x25
454A:  CLRF   x24
454C:  CLRF   x23
454E:  MOVFF  C8,12A
4552:  MOVFF  C7,129
4556:  MOVFF  C6,128
455A:  MOVFF  C5,127
455E:  MOVLB  0
4560:  CALL   1700
4564:  BC    4568
4566:  BNZ   4596
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
4568:  MOVLW  0A
456A:  MOVWF  2E
456C:  MOVLW  32
456E:  MOVWF  FA9
4570:  MOVFF  2E,FA8
4574:  BCF    FA6.6
4576:  BCF    FA6.7
4578:  BSF    FA6.2
457A:  MOVF   FF2,W
457C:  MOVWF  00
457E:  BCF    FF2.7
4580:  MOVLB  F
4582:  MOVLW  55
4584:  MOVWF  FA7
4586:  MOVLW  AA
4588:  MOVWF  FA7
458A:  BSF    FA6.1
458C:  BTFSC  FA6.1
458E:  BRA    458C
4590:  BCF    FA6.2
4592:  MOVF   00,W
4594:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
4596:  MOVFF  C8,126
459A:  MOVFF  C7,125
459E:  MOVFF  C6,124
45A2:  MOVFF  C5,123
45A6:  MOVLB  1
45A8:  CLRF   x2A
45AA:  CLRF   x29
45AC:  CLRF   x28
45AE:  CLRF   x27
45B0:  MOVLB  0
45B2:  CALL   1700
45B6:  BNC   45E8
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
45B8:  MOVLW  14
45BA:  MOVWF  2E
45BC:  MOVLW  32
45BE:  MOVWF  FA9
45C0:  MOVFF  2E,FA8
45C4:  BCF    FA6.6
45C6:  BCF    FA6.7
45C8:  BSF    FA6.2
45CA:  MOVF   FF2,W
45CC:  MOVWF  00
45CE:  BCF    FF2.7
45D0:  MOVLB  F
45D2:  MOVLW  55
45D4:  MOVWF  FA7
45D6:  MOVLW  AA
45D8:  MOVWF  FA7
45DA:  BSF    FA6.1
45DC:  BTFSC  FA6.1
45DE:  BRA    45DC
45E0:  BCF    FA6.2
45E2:  MOVF   00,W
45E4:  IORWF  FF2,F
45E6:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
45E8:  MOVFF  C5,00
45EC:  MOVFF  C6,01
45F0:  MOVFF  C7,02
45F4:  MOVFF  C8,03
45F8:  BCF    01.7
45FA:  MOVFF  C8,C8
45FE:  MOVFF  C7,C7
4602:  MOVFF  01,C6
4606:  MOVFF  C5,C5
....................             Temporal1=Diferencia; 
460A:  MOVFF  C8,C0
460E:  MOVFF  C7,BF
4612:  MOVFF  C6,BE
4616:  MOVFF  C5,BD
....................             Entero1=(int)Temporal1; 
461A:  MOVFF  C0,10C
461E:  MOVFF  BF,10B
4622:  MOVFF  BE,10A
4626:  MOVFF  BD,109
462A:  CALL   177A
462E:  MOVFF  01,27
....................             Temporal1=Temporal1-Entero1; 
4632:  MOVLB  1
4634:  CLRF   x13
4636:  MOVFF  27,112
463A:  MOVLB  0
463C:  CALL   0C56
4640:  BSF    FD8.1
4642:  MOVFF  C0,12A
4646:  MOVFF  BF,129
464A:  MOVFF  BE,128
464E:  MOVFF  BD,127
4652:  MOVFF  03,12E
4656:  MOVFF  02,12D
465A:  MOVFF  01,12C
465E:  MOVFF  00,12B
4662:  CALL   0DEA
4666:  MOVFF  03,C0
466A:  MOVFF  02,BF
466E:  MOVFF  01,BE
4672:  MOVFF  00,BD
....................             Temporal12=Temporal1*100.0; 
4676:  MOVFF  C0,126
467A:  MOVFF  BF,125
467E:  MOVFF  BE,124
4682:  MOVFF  BD,123
4686:  MOVLB  1
4688:  CLRF   x2A
468A:  CLRF   x29
468C:  MOVLW  48
468E:  MOVWF  x28
4690:  MOVLW  85
4692:  MOVWF  x27
4694:  MOVLB  0
4696:  CALL   1394
469A:  MOVFF  03,C4
469E:  MOVFF  02,C3
46A2:  MOVFF  01,C2
46A6:  MOVFF  00,C1
....................             Decimal12=(int8)Temporal12; 
46AA:  MOVFF  C4,10C
46AE:  MOVFF  C3,10B
46B2:  MOVFF  C2,10A
46B6:  MOVFF  C1,109
46BA:  CALL   177A
46BE:  MOVFF  01,28
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
46C2:  MOVLW  3C
46C4:  MOVWF  FA9
46C6:  MOVFF  27,FA8
46CA:  BCF    FA6.6
46CC:  BCF    FA6.7
46CE:  BSF    FA6.2
46D0:  MOVF   FF2,W
46D2:  MOVWF  00
46D4:  BCF    FF2.7
46D6:  MOVLB  F
46D8:  MOVLW  55
46DA:  MOVWF  FA7
46DC:  MOVLW  AA
46DE:  MOVWF  FA7
46E0:  BSF    FA6.1
46E2:  BTFSC  FA6.1
46E4:  BRA    46E2
46E6:  BCF    FA6.2
46E8:  MOVF   00,W
46EA:  IORWF  FF2,F
46EC:  MOVLW  3D
46EE:  MOVWF  FA9
46F0:  MOVFF  28,FA8
46F4:  BCF    FA6.6
46F6:  BCF    FA6.7
46F8:  BSF    FA6.2
46FA:  MOVF   FF2,W
46FC:  MOVWF  00
46FE:  BCF    FF2.7
4700:  MOVLW  55
4702:  MOVWF  FA7
4704:  MOVLW  AA
4706:  MOVWF  FA7
4708:  BSF    FA6.1
470A:  BTFSC  FA6.1
470C:  BRA    470A
470E:  BCF    FA6.2
4710:  MOVF   00,W
4712:  IORWF  FF2,F
4714:  MOVLB  0
....................             }} 
....................          else 
4716:  BRA    471A
....................             {Flanco1 = 0;}    
4718:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
471A:  BSF    F93.1
471C:  BTFSS  F81.1
471E:  BRA    4756
....................       {  if(Flanco3 == 0)  
4720:  BTFSC  3E.7
4722:  BRA    4754
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4724:  MOVLW  01
4726:  MOVWF  17
4728:  CLRF   40
472A:  MOVLW  02
472C:  MOVWF  1B
472E:  MOVWF  1D
4730:  MOVLW  0B
4732:  MOVWF  1A
4734:  MOVLW  02
4736:  MOVLB  1
4738:  MOVWF  x09
473A:  MOVLW  FA
473C:  MOVWF  x24
473E:  MOVLB  0
4740:  CALL   0A66
4744:  MOVLB  1
4746:  DECFSZ x09,F
4748:  BRA    473A
474A:  MOVLW  0C
474C:  MOVWF  x1E
474E:  MOVLB  0
4750:  CALL   0BEA
....................          else 
4754:  BRA    4758
....................             {Flanco3 = 0;}   
4756:  BCF    3E.7
4758:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
475A:  MOVF   17,W
475C:  SUBLW  08
475E:  BTFSS  FD8.2
4760:  BRA    4CB2
....................    { 
....................    lcd_gotoxy(1,1); 
4762:  MOVLW  01
4764:  MOVWF  x1F
4766:  MOVWF  x20
4768:  MOVLB  0
476A:  CALL   0B78
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
476E:  MOVLB  1
4770:  CLRF   x0D
4772:  MOVLB  0
4774:  CALL   17B6
4778:  MOVFF  00,109
477C:  MOVFF  01,10A
4780:  MOVFF  02,10B
4784:  MOVFF  03,10C
4788:  MOVLW  F4
478A:  MOVWF  FF6
478C:  MOVLW  06
478E:  MOVWF  FF7
4790:  MOVLW  0A
4792:  MOVLB  1
4794:  MOVWF  x11
4796:  MOVLB  0
4798:  CALL   1096
479C:  MOVLW  01
479E:  MOVWF  FE9
47A0:  MOVFF  10C,114
47A4:  MOVFF  10B,113
47A8:  MOVFF  10A,112
47AC:  MOVFF  109,111
47B0:  MOVLB  1
47B2:  CLRF   x15
47B4:  MOVLB  0
47B6:  CALL   154E
47BA:  MOVLW  20
47BC:  MOVLB  1
47BE:  MOVWF  x1E
47C0:  MOVLB  0
47C2:  CALL   0BEA
47C6:  MOVLW  20
47C8:  MOVLB  1
47CA:  MOVWF  x1E
47CC:  MOVLB  0
47CE:  CALL   0BEA
....................    lcd_gotoxy(1,2); 
47D2:  MOVLW  01
47D4:  MOVLB  1
47D6:  MOVWF  x1F
47D8:  MOVLW  02
47DA:  MOVWF  x20
47DC:  MOVLB  0
47DE:  CALL   0B78
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
47E2:  MOVLB  1
47E4:  CLRF   x13
47E6:  MOVFF  2C,112
47EA:  MOVLB  0
47EC:  CALL   0C56
47F0:  MOVFF  00,109
47F4:  MOVFF  01,10A
47F8:  MOVFF  02,10B
47FC:  MOVFF  03,10C
4800:  MOVFF  03,12A
4804:  MOVFF  02,129
4808:  MOVFF  01,128
480C:  MOVFF  00,127
4810:  MOVLB  1
4812:  CLRF   x2E
4814:  CLRF   x2D
4816:  MOVLW  7F
4818:  MOVWF  x2C
481A:  MOVLW  86
481C:  MOVWF  x2B
481E:  MOVLB  0
4820:  CALL   0C8C
4824:  MOVLB  1
4826:  CLRF   x26
4828:  CLRF   x25
482A:  MOVLW  48
482C:  MOVWF  x24
482E:  MOVLW  85
4830:  MOVWF  x23
4832:  MOVFF  03,12A
4836:  MOVFF  02,129
483A:  MOVFF  01,128
483E:  MOVFF  00,127
4842:  MOVLB  0
4844:  CALL   1394
4848:  MOVFF  00,109
484C:  MOVFF  01,10A
4850:  MOVFF  02,10B
4854:  MOVFF  03,10C
4858:  MOVLW  01
485A:  MOVLB  1
485C:  MOVWF  x0D
485E:  MOVLB  0
4860:  CALL   17B6
4864:  MOVFF  00,10D
4868:  MOVFF  01,10E
486C:  MOVFF  02,10F
4870:  MOVFF  03,110
4874:  MOVLW  06
4876:  MOVWF  FF6
4878:  MOVLW  07
487A:  MOVWF  FF7
487C:  MOVLW  05
487E:  MOVLB  1
4880:  MOVWF  x11
4882:  MOVLB  0
4884:  CALL   1096
4888:  MOVLW  01
488A:  MOVWF  FE9
488C:  MOVFF  10C,114
4890:  MOVFF  10B,113
4894:  MOVFF  10A,112
4898:  MOVFF  109,111
489C:  MOVLB  1
489E:  CLRF   x15
48A0:  MOVLB  0
48A2:  CALL   154E
48A6:  MOVLW  25
48A8:  MOVLB  1
48AA:  MOVWF  x1E
48AC:  MOVLB  0
48AE:  CALL   0BEA
48B2:  MOVLW  12
48B4:  MOVWF  FF6
48B6:  MOVLW  07
48B8:  MOVWF  FF7
48BA:  MOVLW  04
48BC:  MOVLB  1
48BE:  MOVWF  x11
48C0:  MOVLB  0
48C2:  CALL   1096
48C6:  MOVLW  01
48C8:  MOVWF  FE9
48CA:  MOVFF  110,114
48CE:  MOVFF  10F,113
48D2:  MOVFF  10E,112
48D6:  MOVFF  10D,111
48DA:  MOVLB  1
48DC:  CLRF   x15
48DE:  MOVLB  0
48E0:  CALL   154E
48E4:  MOVLW  20
48E6:  MOVLB  1
48E8:  MOVWF  x1E
48EA:  MOVLB  0
48EC:  CALL   0BEA
....................    lcd_gotoxy(1,3); 
48F0:  MOVLW  01
48F2:  MOVLB  1
48F4:  MOVWF  x1F
48F6:  MOVLW  03
48F8:  MOVWF  x20
48FA:  MOVLB  0
48FC:  CALL   0B78
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
4900:  MOVLW  02
4902:  MOVLB  1
4904:  MOVWF  x0D
4906:  MOVLB  0
4908:  CALL   17B6
490C:  MOVFF  00,109
4910:  MOVFF  01,10A
4914:  MOVFF  02,10B
4918:  MOVFF  03,10C
491C:  MOVFF  03,12A
4920:  MOVFF  02,129
4924:  MOVFF  01,128
4928:  MOVFF  00,127
492C:  MOVLB  1
492E:  CLRF   x2E
4930:  MOVLW  C0
4932:  MOVWF  x2D
4934:  MOVLW  7F
4936:  MOVWF  x2C
4938:  MOVLW  88
493A:  MOVWF  x2B
493C:  MOVLB  0
493E:  CALL   0C8C
4942:  MOVLB  1
4944:  CLRF   x26
4946:  CLRF   x25
4948:  MOVLW  48
494A:  MOVWF  x24
494C:  MOVLW  85
494E:  MOVWF  x23
4950:  MOVFF  03,12A
4954:  MOVFF  02,129
4958:  MOVFF  01,128
495C:  MOVFF  00,127
4960:  MOVLB  0
4962:  CALL   1394
4966:  MOVFF  00,109
496A:  MOVFF  01,10A
496E:  MOVFF  02,10B
4972:  MOVFF  03,10C
4976:  MOVLW  1E
4978:  MOVWF  FF6
497A:  MOVLW  07
497C:  MOVWF  FF7
497E:  MOVLW  04
4980:  MOVLB  1
4982:  MOVWF  x11
4984:  MOVLB  0
4986:  CALL   1096
498A:  MOVLW  01
498C:  MOVWF  FE9
498E:  MOVFF  98,114
4992:  MOVFF  97,113
4996:  MOVFF  96,112
499A:  MOVFF  95,111
499E:  MOVLB  1
49A0:  MOVWF  x15
49A2:  MOVLB  0
49A4:  CALL   154E
49A8:  MOVLW  27
49AA:  MOVWF  FF6
49AC:  MOVLW  07
49AE:  MOVWF  FF7
49B0:  MOVLW  0A
49B2:  MOVLB  1
49B4:  MOVWF  x11
49B6:  MOVLB  0
49B8:  CALL   1096
49BC:  MOVLW  01
49BE:  MOVWF  FE9
49C0:  MOVFF  10C,114
49C4:  MOVFF  10B,113
49C8:  MOVFF  10A,112
49CC:  MOVFF  109,111
49D0:  MOVLB  1
49D2:  CLRF   x15
49D4:  MOVLB  0
49D6:  CALL   154E
....................    lcd_gotoxy(1,4); 
49DA:  MOVLW  01
49DC:  MOVLB  1
49DE:  MOVWF  x1F
49E0:  MOVLW  04
49E2:  MOVWF  x20
49E4:  MOVLB  0
49E6:  CALL   0B78
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
49EA:  MOVLW  38
49EC:  MOVWF  FF6
49EE:  MOVLW  07
49F0:  MOVWF  FF7
49F2:  MOVLW  09
49F4:  MOVLB  1
49F6:  MOVWF  x11
49F8:  MOVLB  0
49FA:  CALL   1096
49FE:  MOVLW  89
4A00:  MOVWF  FE9
4A02:  MOVFF  CC,114
4A06:  MOVFF  CB,113
4A0A:  MOVFF  CA,112
4A0E:  MOVFF  C9,111
4A12:  MOVLW  02
4A14:  MOVLB  1
4A16:  MOVWF  x15
4A18:  MOVLB  0
4A1A:  CALL   154E
4A1E:  MOVLW  20
4A20:  MOVLB  1
4A22:  MOVWF  x1E
4A24:  MOVLB  0
4A26:  CALL   0BEA
....................        
....................       if(UP)//Si oprime hacia arriba 
4A2A:  BSF    F93.3
4A2C:  BTFSS  F81.3
4A2E:  BRA    4AA4
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
4A30:  BCF    FD8.1
4A32:  MOVFF  CC,12A
4A36:  MOVFF  CB,129
4A3A:  MOVFF  CA,128
4A3E:  MOVFF  C9,127
4A42:  MOVLW  0A
4A44:  MOVLB  1
4A46:  MOVWF  x2E
4A48:  MOVLW  D7
4A4A:  MOVWF  x2D
4A4C:  MOVLW  23
4A4E:  MOVWF  x2C
4A50:  MOVLW  78
4A52:  MOVWF  x2B
4A54:  MOVLB  0
4A56:  CALL   0DEA
4A5A:  MOVFF  03,CC
4A5E:  MOVFF  02,CB
4A62:  MOVFF  01,CA
4A66:  MOVFF  00,C9
4A6A:  MOVLW  32
4A6C:  MOVLB  1
4A6E:  MOVWF  x24
4A70:  MOVLB  0
4A72:  CALL   0A66
....................          if(Ajuste1>30.0) 
4A76:  MOVLB  1
4A78:  CLRF   x26
4A7A:  CLRF   x25
4A7C:  MOVLW  70
4A7E:  MOVWF  x24
4A80:  MOVLW  83
4A82:  MOVWF  x23
4A84:  MOVFF  CC,12A
4A88:  MOVFF  CB,129
4A8C:  MOVFF  CA,128
4A90:  MOVFF  C9,127
4A94:  MOVLB  0
4A96:  CALL   1700
4A9A:  BNC   4AA4
....................          {Ajuste1=0.0;} 
4A9C:  CLRF   xCC
4A9E:  CLRF   xCB
4AA0:  CLRF   xCA
4AA2:  CLRF   xC9
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4AA4:  BSF    F93.2
4AA6:  BTFSS  F81.2
4AA8:  BRA    4B1A
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
4AAA:  BSF    FD8.1
4AAC:  MOVFF  CC,12A
4AB0:  MOVFF  CB,129
4AB4:  MOVFF  CA,128
4AB8:  MOVFF  C9,127
4ABC:  MOVLW  0A
4ABE:  MOVLB  1
4AC0:  MOVWF  x2E
4AC2:  MOVLW  D7
4AC4:  MOVWF  x2D
4AC6:  MOVLW  23
4AC8:  MOVWF  x2C
4ACA:  MOVLW  78
4ACC:  MOVWF  x2B
4ACE:  MOVLB  0
4AD0:  CALL   0DEA
4AD4:  MOVFF  03,CC
4AD8:  MOVFF  02,CB
4ADC:  MOVFF  01,CA
4AE0:  MOVFF  00,C9
4AE4:  MOVLW  32
4AE6:  MOVLB  1
4AE8:  MOVWF  x24
4AEA:  MOVLB  0
4AEC:  CALL   0A66
....................          if(Ajuste1<0.0) 
4AF0:  MOVFF  CC,126
4AF4:  MOVFF  CB,125
4AF8:  MOVFF  CA,124
4AFC:  MOVFF  C9,123
4B00:  MOVLB  1
4B02:  CLRF   x2A
4B04:  CLRF   x29
4B06:  CLRF   x28
4B08:  CLRF   x27
4B0A:  MOVLB  0
4B0C:  CALL   1700
4B10:  BNC   4B1A
....................          {Ajuste1=0.0;} 
4B12:  CLRF   xCC
4B14:  CLRF   xCB
4B16:  CLRF   xCA
4B18:  CLRF   xC9
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
4B1A:  BSF    F93.0
4B1C:  BTFSS  F81.0
4B1E:  BRA    4C70
....................       {  if(Flanco1 == 0)  
4B20:  BTFSC  3E.5
4B22:  BRA    4C6E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4B24:  MOVLW  01
4B26:  MOVWF  17
4B28:  CLRF   40
4B2A:  MOVLW  02
4B2C:  MOVWF  1B
4B2E:  MOVWF  1D
4B30:  MOVLW  0B
4B32:  MOVWF  1A
4B34:  MOVLW  1E
4B36:  MOVLB  1
4B38:  MOVWF  x24
4B3A:  MOVLB  0
4B3C:  CALL   0A66
4B40:  MOVLW  0C
4B42:  MOVLB  1
4B44:  MOVWF  x1E
4B46:  MOVLB  0
4B48:  CALL   0BEA
....................             Temporal=Ajuste1; 
4B4C:  MOVFF  CC,B4
4B50:  MOVFF  CB,B3
4B54:  MOVFF  CA,B2
4B58:  MOVFF  C9,B1
....................             Entero=(int)Ajuste1; 
4B5C:  MOVFF  CC,10C
4B60:  MOVFF  CB,10B
4B64:  MOVFF  CA,10A
4B68:  MOVFF  C9,109
4B6C:  CALL   177A
4B70:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
4B74:  MOVLB  1
4B76:  CLRF   x13
4B78:  MOVFF  24,112
4B7C:  MOVLB  0
4B7E:  CALL   0C56
4B82:  BSF    FD8.1
4B84:  MOVFF  B4,12A
4B88:  MOVFF  B3,129
4B8C:  MOVFF  B2,128
4B90:  MOVFF  B1,127
4B94:  MOVFF  03,12E
4B98:  MOVFF  02,12D
4B9C:  MOVFF  01,12C
4BA0:  MOVFF  00,12B
4BA4:  CALL   0DEA
4BA8:  MOVFF  03,B4
4BAC:  MOVFF  02,B3
4BB0:  MOVFF  01,B2
4BB4:  MOVFF  00,B1
....................             Temporal2=Temporal*100.0; 
4BB8:  MOVFF  B4,126
4BBC:  MOVFF  B3,125
4BC0:  MOVFF  B2,124
4BC4:  MOVFF  B1,123
4BC8:  MOVLB  1
4BCA:  CLRF   x2A
4BCC:  CLRF   x29
4BCE:  MOVLW  48
4BD0:  MOVWF  x28
4BD2:  MOVLW  85
4BD4:  MOVWF  x27
4BD6:  MOVLB  0
4BD8:  CALL   1394
4BDC:  MOVFF  03,B8
4BE0:  MOVFF  02,B7
4BE4:  MOVFF  01,B6
4BE8:  MOVFF  00,B5
....................             Decimal1=(int8)Temporal2; 
4BEC:  MOVFF  B8,10C
4BF0:  MOVFF  B7,10B
4BF4:  MOVFF  B6,10A
4BF8:  MOVFF  B5,109
4BFC:  CALL   177A
4C00:  MOVFF  01,25
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
4C04:  MOVLW  19
4C06:  MOVWF  FA9
4C08:  MOVFF  24,FA8
4C0C:  BCF    FA6.6
4C0E:  BCF    FA6.7
4C10:  BSF    FA6.2
4C12:  MOVF   FF2,W
4C14:  MOVWF  00
4C16:  BCF    FF2.7
4C18:  MOVLB  F
4C1A:  MOVLW  55
4C1C:  MOVWF  FA7
4C1E:  MOVLW  AA
4C20:  MOVWF  FA7
4C22:  BSF    FA6.1
4C24:  BTFSC  FA6.1
4C26:  BRA    4C24
4C28:  BCF    FA6.2
4C2A:  MOVF   00,W
4C2C:  IORWF  FF2,F
4C2E:  MOVLW  1A
4C30:  MOVWF  FA9
4C32:  MOVFF  25,FA8
4C36:  BCF    FA6.6
4C38:  BCF    FA6.7
4C3A:  BSF    FA6.2
4C3C:  MOVF   FF2,W
4C3E:  MOVWF  00
4C40:  BCF    FF2.7
4C42:  MOVLW  55
4C44:  MOVWF  FA7
4C46:  MOVLW  AA
4C48:  MOVWF  FA7
4C4A:  BSF    FA6.1
4C4C:  BTFSC  FA6.1
4C4E:  BRA    4C4C
4C50:  BCF    FA6.2
4C52:  MOVF   00,W
4C54:  IORWF  FF2,F
....................             delay_ms(1000); 
4C56:  MOVLW  04
4C58:  MOVLB  1
4C5A:  MOVWF  x09
4C5C:  MOVLW  FA
4C5E:  MOVWF  x24
4C60:  MOVLB  0
4C62:  CALL   0A66
4C66:  MOVLB  1
4C68:  DECFSZ x09,F
4C6A:  BRA    4C5C
4C6C:  MOVLB  0
....................             }} 
....................          else 
4C6E:  BRA    4C72
....................             {Flanco1 = 0;}    
4C70:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4C72:  BSF    F93.1
4C74:  BTFSS  F81.1
4C76:  BRA    4CAE
....................       {  if(Flanco3 == 0)  
4C78:  BTFSC  3E.7
4C7A:  BRA    4CAC
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4C7C:  MOVLW  01
4C7E:  MOVWF  17
4C80:  CLRF   40
4C82:  MOVLW  02
4C84:  MOVWF  1B
4C86:  MOVWF  1D
4C88:  MOVLW  0B
4C8A:  MOVWF  1A
4C8C:  MOVLW  02
4C8E:  MOVLB  1
4C90:  MOVWF  x09
4C92:  MOVLW  FA
4C94:  MOVWF  x24
4C96:  MOVLB  0
4C98:  CALL   0A66
4C9C:  MOVLB  1
4C9E:  DECFSZ x09,F
4CA0:  BRA    4C92
4CA2:  MOVLW  0C
4CA4:  MOVWF  x1E
4CA6:  MOVLB  0
4CA8:  CALL   0BEA
....................          else 
4CAC:  BRA    4CB0
....................             {Flanco3 = 0;}   
4CAE:  BCF    3E.7
4CB0:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
4CB2:  MOVF   17,W
4CB4:  SUBLW  09
4CB6:  BTFSS  FD8.2
4CB8:  BRA    5300
....................    { 
....................    lcd_gotoxy(1,1); 
4CBA:  MOVLW  01
4CBC:  MOVWF  x1F
4CBE:  MOVWF  x20
4CC0:  MOVLB  0
4CC2:  CALL   0B78
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
4CC6:  MOVLB  1
4CC8:  CLRF   x13
4CCA:  MOVFF  2C,112
4CCE:  MOVLB  0
4CD0:  CALL   0C56
4CD4:  MOVFF  00,109
4CD8:  MOVFF  01,10A
4CDC:  MOVFF  02,10B
4CE0:  MOVFF  03,10C
4CE4:  MOVFF  03,12A
4CE8:  MOVFF  02,129
4CEC:  MOVFF  01,128
4CF0:  MOVFF  00,127
4CF4:  MOVLB  1
4CF6:  CLRF   x2E
4CF8:  CLRF   x2D
4CFA:  MOVLW  7F
4CFC:  MOVWF  x2C
4CFE:  MOVLW  86
4D00:  MOVWF  x2B
4D02:  MOVLB  0
4D04:  CALL   0C8C
4D08:  MOVLB  1
4D0A:  CLRF   x26
4D0C:  CLRF   x25
4D0E:  MOVLW  48
4D10:  MOVWF  x24
4D12:  MOVLW  85
4D14:  MOVWF  x23
4D16:  MOVFF  03,12A
4D1A:  MOVFF  02,129
4D1E:  MOVFF  01,128
4D22:  MOVFF  00,127
4D26:  MOVLB  0
4D28:  CALL   1394
4D2C:  MOVFF  00,109
4D30:  MOVFF  01,10A
4D34:  MOVFF  02,10B
4D38:  MOVFF  03,10C
4D3C:  MOVLW  48
4D3E:  MOVWF  FF6
4D40:  MOVLW  07
4D42:  MOVWF  FF7
4D44:  MOVLW  0D
4D46:  MOVLB  1
4D48:  MOVWF  x11
4D4A:  MOVLB  0
4D4C:  CALL   1096
4D50:  MOVLW  01
4D52:  MOVWF  FE9
4D54:  MOVFF  10C,114
4D58:  MOVFF  10B,113
4D5C:  MOVFF  10A,112
4D60:  MOVFF  109,111
4D64:  MOVLB  1
4D66:  CLRF   x15
4D68:  MOVLB  0
4D6A:  CALL   154E
4D6E:  MOVLW  25
4D70:  MOVLB  1
4D72:  MOVWF  x1E
4D74:  MOVLB  0
4D76:  CALL   0BEA
4D7A:  MOVLW  20
4D7C:  MOVLB  1
4D7E:  MOVWF  x1E
4D80:  MOVLB  0
4D82:  CALL   0BEA
....................  
....................    lcd_gotoxy(1,4); 
4D86:  MOVLW  01
4D88:  MOVLB  1
4D8A:  MOVWF  x1F
4D8C:  MOVLW  04
4D8E:  MOVWF  x20
4D90:  MOVLB  0
4D92:  CALL   0B78
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
4D96:  MOVLW  02
4D98:  MOVLB  1
4D9A:  MOVWF  x0D
4D9C:  MOVLB  0
4D9E:  CALL   17B6
4DA2:  MOVFF  00,109
4DA6:  MOVFF  01,10A
4DAA:  MOVFF  02,10B
4DAE:  MOVFF  03,10C
4DB2:  MOVFF  03,12A
4DB6:  MOVFF  02,129
4DBA:  MOVFF  01,128
4DBE:  MOVFF  00,127
4DC2:  MOVLB  1
4DC4:  CLRF   x2E
4DC6:  MOVLW  C0
4DC8:  MOVWF  x2D
4DCA:  MOVLW  7F
4DCC:  MOVWF  x2C
4DCE:  MOVLW  88
4DD0:  MOVWF  x2B
4DD2:  MOVLB  0
4DD4:  CALL   0C8C
4DD8:  MOVLB  1
4DDA:  CLRF   x26
4DDC:  CLRF   x25
4DDE:  MOVLW  48
4DE0:  MOVWF  x24
4DE2:  MOVLW  85
4DE4:  MOVWF  x23
4DE6:  MOVFF  03,12A
4DEA:  MOVFF  02,129
4DEE:  MOVFF  01,128
4DF2:  MOVFF  00,127
4DF6:  MOVLB  0
4DF8:  CALL   1394
4DFC:  MOVFF  00,109
4E00:  MOVFF  01,10A
4E04:  MOVFF  02,10B
4E08:  MOVFF  03,10C
4E0C:  MOVLW  5E
4E0E:  MOVWF  FF6
4E10:  MOVLW  07
4E12:  MOVWF  FF7
4E14:  MOVLW  04
4E16:  MOVLB  1
4E18:  MOVWF  x11
4E1A:  MOVLB  0
4E1C:  CALL   1096
4E20:  MOVLW  01
4E22:  MOVWF  FE9
4E24:  MOVFF  98,114
4E28:  MOVFF  97,113
4E2C:  MOVFF  96,112
4E30:  MOVFF  95,111
4E34:  MOVLB  1
4E36:  MOVWF  x15
4E38:  MOVLB  0
4E3A:  CALL   154E
4E3E:  MOVLW  67
4E40:  MOVWF  FF6
4E42:  MOVLW  07
4E44:  MOVWF  FF7
4E46:  MOVLW  0A
4E48:  MOVLB  1
4E4A:  MOVWF  x11
4E4C:  MOVLB  0
4E4E:  CALL   1096
4E52:  MOVLW  01
4E54:  MOVWF  FE9
4E56:  MOVFF  10C,114
4E5A:  MOVFF  10B,113
4E5E:  MOVFF  10A,112
4E62:  MOVFF  109,111
4E66:  MOVLB  1
4E68:  CLRF   x15
4E6A:  MOVLB  0
4E6C:  CALL   154E
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
4E70:  BTFSC  58.1
4E72:  BRA    4FD2
4E74:  BTFSC  58.2
4E76:  BRA    4FD2
4E78:  BTFSC  58.3
4E7A:  BRA    4FD2
....................       { 
....................          if(UP)//Si oprime hacia arriba 
4E7C:  BSF    F93.3
4E7E:  BTFSS  F81.3
4E80:  BRA    4EDC
....................          { 
....................             delay_ms(500); 
4E82:  MOVLW  02
4E84:  MOVLB  1
4E86:  MOVWF  x09
4E88:  MOVLW  FA
4E8A:  MOVWF  x24
4E8C:  MOVLB  0
4E8E:  CALL   0A66
4E92:  MOVLB  1
4E94:  DECFSZ x09,F
4E96:  BRA    4E88
....................             if(UP) 
4E98:  BSF    F93.3
4E9A:  BTFSS  F81.3
4E9C:  BRA    4EDA
....................             { 
....................                lcd_gotoxy(1,2); 
4E9E:  MOVLW  01
4EA0:  MOVWF  x1F
4EA2:  MOVLW  02
4EA4:  MOVWF  x20
4EA6:  MOVLB  0
4EA8:  CALL   0B78
....................                printf(lcd_putc,"   Modo Manual  "); 
4EAC:  MOVLW  78
4EAE:  MOVWF  FF6
4EB0:  MOVLW  07
4EB2:  MOVWF  FF7
4EB4:  CALL   1076
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4EB8:  BSF    58.1
4EBA:  BCF    58.2
4EBC:  BCF    58.3
4EBE:  MOVLW  0A
4EC0:  MOVWF  2F
4EC2:  MOVWF  31
....................                delay_ms(1000); 
4EC4:  MOVLW  04
4EC6:  MOVLB  1
4EC8:  MOVWF  x09
4ECA:  MOVLW  FA
4ECC:  MOVWF  x24
4ECE:  MOVLB  0
4ED0:  CALL   0A66
4ED4:  MOVLB  1
4ED6:  DECFSZ x09,F
4ED8:  BRA    4ECA
4EDA:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
4EDC:  BSF    F93.2
4EDE:  BTFSS  F81.2
4EE0:  BRA    4F3C
....................          { 
....................             delay_ms(500); 
4EE2:  MOVLW  02
4EE4:  MOVLB  1
4EE6:  MOVWF  x09
4EE8:  MOVLW  FA
4EEA:  MOVWF  x24
4EEC:  MOVLB  0
4EEE:  CALL   0A66
4EF2:  MOVLB  1
4EF4:  DECFSZ x09,F
4EF6:  BRA    4EE8
....................             if(DOWN) 
4EF8:  BSF    F93.2
4EFA:  BTFSS  F81.2
4EFC:  BRA    4F3A
....................             { 
....................                lcd_gotoxy(1,2); 
4EFE:  MOVLW  01
4F00:  MOVWF  x1F
4F02:  MOVLW  02
4F04:  MOVWF  x20
4F06:  MOVLB  0
4F08:  CALL   0B78
....................                printf(lcd_putc,"   Modo Auto   "); 
4F0C:  MOVLW  8A
4F0E:  MOVWF  FF6
4F10:  MOVLW  07
4F12:  MOVWF  FF7
4F14:  CALL   1076
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
4F18:  BSF    58.2
4F1A:  BCF    58.1
4F1C:  BCF    58.3
4F1E:  MOVLW  0A
4F20:  MOVWF  30
4F22:  MOVWF  31
....................                delay_ms(1000); 
4F24:  MOVLW  04
4F26:  MOVLB  1
4F28:  MOVWF  x09
4F2A:  MOVLW  FA
4F2C:  MOVWF  x24
4F2E:  MOVLB  0
4F30:  CALL   0A66
4F34:  MOVLB  1
4F36:  DECFSZ x09,F
4F38:  BRA    4F2A
4F3A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
4F3C:  BSF    F93.0
4F3E:  BTFSS  F81.0
4F40:  BRA    4F9C
....................          { 
....................             delay_ms(500); 
4F42:  MOVLW  02
4F44:  MOVLB  1
4F46:  MOVWF  x09
4F48:  MOVLW  FA
4F4A:  MOVWF  x24
4F4C:  MOVLB  0
4F4E:  CALL   0A66
4F52:  MOVLB  1
4F54:  DECFSZ x09,F
4F56:  BRA    4F48
....................             if(RIGHT) 
4F58:  BSF    F93.0
4F5A:  BTFSS  F81.0
4F5C:  BRA    4F9A
....................             { 
....................                lcd_gotoxy(1,2); 
4F5E:  MOVLW  01
4F60:  MOVWF  x1F
4F62:  MOVLW  02
4F64:  MOVWF  x20
4F66:  MOVLB  0
4F68:  CALL   0B78
....................                printf(lcd_putc,"   Modo Semi   "); 
4F6C:  MOVLW  9A
4F6E:  MOVWF  FF6
4F70:  MOVLW  07
4F72:  MOVWF  FF7
4F74:  CALL   1076
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4F78:  BSF    58.3
4F7A:  BCF    58.1
4F7C:  BCF    58.2
4F7E:  MOVLW  0A
4F80:  MOVWF  2F
4F82:  MOVWF  30
....................                delay_ms(1000); 
4F84:  MOVLW  04
4F86:  MOVLB  1
4F88:  MOVWF  x09
4F8A:  MOVLW  FA
4F8C:  MOVWF  x24
4F8E:  MOVLB  0
4F90:  CALL   0A66
4F94:  MOVLB  1
4F96:  DECFSZ x09,F
4F98:  BRA    4F8A
4F9A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
4F9C:  BSF    F93.1
4F9E:  BTFSS  F81.1
4FA0:  BRA    4FD2
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4FA2:  MOVLW  01
4FA4:  MOVWF  17
4FA6:  CLRF   40
4FA8:  MOVLW  02
4FAA:  MOVWF  1B
4FAC:  MOVWF  1D
4FAE:  MOVLW  0B
4FB0:  MOVWF  1A
4FB2:  MOVLW  02
4FB4:  MOVLB  1
4FB6:  MOVWF  x09
4FB8:  MOVLW  FA
4FBA:  MOVWF  x24
4FBC:  MOVLB  0
4FBE:  CALL   0A66
4FC2:  MOVLB  1
4FC4:  DECFSZ x09,F
4FC6:  BRA    4FB8
4FC8:  MOVLW  0C
4FCA:  MOVWF  x1E
4FCC:  MOVLB  0
4FCE:  CALL   0BEA
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4FD2:  BTFSC  58.1
4FD4:  BRA    4FDE
4FD6:  MOVF   30,W
4FD8:  SUBLW  14
4FDA:  BTFSS  FD8.2
4FDC:  BRA    5106
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4FDE:  BCF    58.2
4FE0:  BCF    58.3
4FE2:  MOVLW  0A
4FE4:  MOVWF  2F
4FE6:  MOVWF  31
....................          lcd_gotoxy(1,2); 
4FE8:  MOVLW  01
4FEA:  MOVLB  1
4FEC:  MOVWF  x1F
4FEE:  MOVLW  02
4FF0:  MOVWF  x20
4FF2:  MOVLB  0
4FF4:  CALL   0B78
....................          printf(lcd_putc,"   Modo Manual  "); 
4FF8:  MOVLW  AA
4FFA:  MOVWF  FF6
4FFC:  MOVLW  07
4FFE:  MOVWF  FF7
5000:  CALL   1076
....................          lcd_gotoxy(1,3); 
5004:  MOVLW  01
5006:  MOVLB  1
5008:  MOVWF  x1F
500A:  MOVLW  03
500C:  MOVWF  x20
500E:  MOVLB  0
5010:  CALL   0B78
....................          printf(lcd_putc,"    Seleccionado    "); 
5014:  MOVLW  BC
5016:  MOVWF  FF6
5018:  MOVLW  07
501A:  MOVWF  FF7
501C:  CALL   1076
....................          if(LEFT) 
5020:  BSF    F93.1
5022:  BTFSS  F81.1
5024:  BRA    5106
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
5026:  BCF    58.1
5028:  MOVLW  14
502A:  MOVWF  30
502C:  MOVLW  0A
502E:  MOVWF  2F
5030:  MOVWF  31
5032:  MOVLW  02
5034:  MOVLB  1
5036:  MOVWF  x09
5038:  MOVLW  FA
503A:  MOVWF  x24
503C:  MOVLB  0
503E:  CALL   0A66
5042:  MOVLB  1
5044:  DECFSZ x09,F
5046:  BRA    5038
5048:  MOVLW  0C
504A:  MOVWF  x1E
504C:  MOVLB  0
504E:  CALL   0BEA
5052:  MOVLW  FE
5054:  MOVLB  1
5056:  MOVWF  x09
5058:  MOVLB  0
505A:  CALL   180E
505E:  MOVLW  FE
5060:  MOVWF  2C
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
5062:  MOVLW  0A
5064:  MOVWF  FA9
5066:  MOVFF  30,FA8
506A:  BCF    FA6.6
506C:  BCF    FA6.7
506E:  BSF    FA6.2
5070:  MOVF   FF2,W
5072:  MOVWF  00
5074:  BCF    FF2.7
5076:  MOVLB  F
5078:  MOVLW  55
507A:  MOVWF  FA7
507C:  MOVLW  AA
507E:  MOVWF  FA7
5080:  BSF    FA6.1
5082:  BTFSC  FA6.1
5084:  BRA    5082
5086:  BCF    FA6.2
5088:  MOVF   00,W
508A:  IORWF  FF2,F
508C:  MOVLW  0C
508E:  MOVWF  FA9
5090:  MOVFF  31,FA8
5094:  BCF    FA6.6
5096:  BCF    FA6.7
5098:  BSF    FA6.2
509A:  MOVF   FF2,W
509C:  MOVWF  00
509E:  BCF    FF2.7
50A0:  MOVLW  55
50A2:  MOVWF  FA7
50A4:  MOVLW  AA
50A6:  MOVWF  FA7
50A8:  BSF    FA6.1
50AA:  BTFSC  FA6.1
50AC:  BRA    50AA
50AE:  BCF    FA6.2
50B0:  MOVF   00,W
50B2:  IORWF  FF2,F
50B4:  MOVLW  0B
50B6:  MOVWF  FA9
50B8:  MOVFF  2F,FA8
50BC:  BCF    FA6.6
50BE:  BCF    FA6.7
50C0:  BSF    FA6.2
50C2:  MOVF   FF2,W
50C4:  MOVWF  00
50C6:  BCF    FF2.7
50C8:  MOVLW  55
50CA:  MOVWF  FA7
50CC:  MOVLW  AA
50CE:  MOVWF  FA7
50D0:  BSF    FA6.1
50D2:  BTFSC  FA6.1
50D4:  BRA    50D2
50D6:  BCF    FA6.2
50D8:  MOVF   00,W
50DA:  IORWF  FF2,F
50DC:  MOVLW  0D
50DE:  MOVWF  FA9
50E0:  MOVFF  2C,FA8
50E4:  BCF    FA6.6
50E6:  BCF    FA6.7
50E8:  BSF    FA6.2
50EA:  MOVF   FF2,W
50EC:  MOVWF  00
50EE:  BCF    FF2.7
50F0:  MOVLW  55
50F2:  MOVWF  FA7
50F4:  MOVLW  AA
50F6:  MOVWF  FA7
50F8:  BSF    FA6.1
50FA:  BTFSC  FA6.1
50FC:  BRA    50FA
50FE:  BCF    FA6.2
5100:  MOVF   00,W
5102:  IORWF  FF2,F
5104:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
5106:  BTFSC  58.2
5108:  BRA    5110
510A:  MOVF   2F,W
510C:  SUBLW  14
510E:  BNZ   51D8
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
5110:  BCF    58.1
5112:  BCF    58.3
5114:  MOVLW  0A
5116:  MOVWF  31
5118:  MOVWF  30
....................          lcd_gotoxy(1,2); 
511A:  MOVLW  01
511C:  MOVLB  1
511E:  MOVWF  x1F
5120:  MOVLW  02
5122:  MOVWF  x20
5124:  MOVLB  0
5126:  CALL   0B78
....................          printf(lcd_putc,"   Modo Auto   "); 
512A:  MOVLW  D2
512C:  MOVWF  FF6
512E:  MOVLW  07
5130:  MOVWF  FF7
5132:  CALL   1076
....................          lcd_gotoxy(1,3); 
5136:  MOVLW  01
5138:  MOVLB  1
513A:  MOVWF  x1F
513C:  MOVLW  03
513E:  MOVWF  x20
5140:  MOVLB  0
5142:  CALL   0B78
....................          printf(lcd_putc,"    Seleccionado    "); 
5146:  MOVLW  E2
5148:  MOVWF  FF6
514A:  MOVLW  07
514C:  MOVWF  FF7
514E:  CALL   1076
....................          if(LEFT) 
5152:  BSF    F93.1
5154:  BTFSS  F81.1
5156:  BRA    51D8
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5158:  BCF    58.2
515A:  MOVLW  14
515C:  MOVWF  2F
515E:  MOVLW  0A
5160:  MOVWF  31
5162:  MOVWF  30
5164:  MOVLW  02
5166:  MOVLB  1
5168:  MOVWF  x09
516A:  MOVLW  FA
516C:  MOVWF  x24
516E:  MOVLB  0
5170:  CALL   0A66
5174:  MOVLB  1
5176:  DECFSZ x09,F
5178:  BRA    516A
517A:  MOVLW  0C
517C:  MOVWF  x1E
517E:  MOVLB  0
5180:  CALL   0BEA
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
5184:  MOVLW  0B
5186:  MOVWF  FA9
5188:  MOVFF  2F,FA8
518C:  BCF    FA6.6
518E:  BCF    FA6.7
5190:  BSF    FA6.2
5192:  MOVF   FF2,W
5194:  MOVWF  00
5196:  BCF    FF2.7
5198:  MOVLB  F
519A:  MOVLW  55
519C:  MOVWF  FA7
519E:  MOVLW  AA
51A0:  MOVWF  FA7
51A2:  BSF    FA6.1
51A4:  BTFSC  FA6.1
51A6:  BRA    51A4
51A8:  BCF    FA6.2
51AA:  MOVF   00,W
51AC:  IORWF  FF2,F
51AE:  MOVLW  0C
51B0:  MOVWF  FA9
51B2:  MOVFF  31,FA8
51B6:  BCF    FA6.6
51B8:  BCF    FA6.7
51BA:  BSF    FA6.2
51BC:  MOVF   FF2,W
51BE:  MOVWF  00
51C0:  BCF    FF2.7
51C2:  MOVLW  55
51C4:  MOVWF  FA7
51C6:  MOVLW  AA
51C8:  MOVWF  FA7
51CA:  BSF    FA6.1
51CC:  BTFSC  FA6.1
51CE:  BRA    51CC
51D0:  BCF    FA6.2
51D2:  MOVF   00,W
51D4:  IORWF  FF2,F
51D6:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
51D8:  BTFSC  58.3
51DA:  BRA    51E4
51DC:  MOVF   31,W
51DE:  SUBLW  14
51E0:  BTFSS  FD8.2
51E2:  BRA    52FE
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
51E4:  BCF    58.1
51E6:  BCF    58.2
51E8:  MOVLW  0A
51EA:  MOVWF  2F
51EC:  MOVWF  30
....................          lcd_gotoxy(1,2); 
51EE:  MOVLW  01
51F0:  MOVLB  1
51F2:  MOVWF  x1F
51F4:  MOVLW  02
51F6:  MOVWF  x20
51F8:  MOVLB  0
51FA:  CALL   0B78
....................          printf(lcd_putc,"   Modo Semi   "); 
51FE:  MOVLW  F8
5200:  MOVWF  FF6
5202:  MOVLW  07
5204:  MOVWF  FF7
5206:  CALL   1076
....................          if(UP) 
520A:  BSF    F93.3
520C:  BTFSS  F81.3
520E:  BRA    5212
....................          { 
....................             tmp++; 
5210:  INCF   2C,F
....................              
....................          } 
....................           
....................          if(DOWN) 
5212:  BSF    F93.2
5214:  BTFSS  F81.2
5216:  BRA    521A
....................          { 
....................             tmp--; 
5218:  DECF   2C,F
....................          } 
....................          ValorSemi=tmp; 
521A:  MOVFF  2C,32
....................          ajustar_damper(tmp); 
521E:  MOVFF  2C,109
5222:  CALL   180E
....................          if(LEFT) 
5226:  BSF    F93.1
5228:  BTFSS  F81.1
522A:  BRA    52FE
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
522C:  MOVLW  0D
522E:  MOVWF  FA9
5230:  MOVFF  2C,FA8
5234:  BCF    FA6.6
5236:  BCF    FA6.7
5238:  BSF    FA6.2
523A:  MOVF   FF2,W
523C:  MOVWF  00
523E:  BCF    FF2.7
5240:  MOVLB  F
5242:  MOVLW  55
5244:  MOVWF  FA7
5246:  MOVLW  AA
5248:  MOVWF  FA7
524A:  BSF    FA6.1
524C:  BTFSC  FA6.1
524E:  BRA    524C
5250:  BCF    FA6.2
5252:  MOVF   00,W
5254:  IORWF  FF2,F
5256:  BCF    58.3
5258:  MOVLW  14
525A:  MOVWF  31
525C:  MOVLW  0A
525E:  MOVWF  2F
5260:  MOVWF  30
5262:  MOVLW  02
5264:  MOVLB  1
5266:  MOVWF  x09
5268:  MOVLW  FA
526A:  MOVWF  x24
526C:  MOVLB  0
526E:  CALL   0A66
5272:  MOVLB  1
5274:  DECFSZ x09,F
5276:  BRA    5268
5278:  MOVLW  0C
527A:  MOVWF  x1E
527C:  MOVLB  0
527E:  CALL   0BEA
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
5282:  MOVLW  0C
5284:  MOVWF  FA9
5286:  MOVFF  31,FA8
528A:  BCF    FA6.6
528C:  BCF    FA6.7
528E:  BSF    FA6.2
5290:  MOVF   FF2,W
5292:  MOVWF  00
5294:  BCF    FF2.7
5296:  MOVLB  F
5298:  MOVLW  55
529A:  MOVWF  FA7
529C:  MOVLW  AA
529E:  MOVWF  FA7
52A0:  BSF    FA6.1
52A2:  BTFSC  FA6.1
52A4:  BRA    52A2
52A6:  BCF    FA6.2
52A8:  MOVF   00,W
52AA:  IORWF  FF2,F
52AC:  MOVLW  0B
52AE:  MOVWF  FA9
52B0:  MOVFF  2F,FA8
52B4:  BCF    FA6.6
52B6:  BCF    FA6.7
52B8:  BSF    FA6.2
52BA:  MOVF   FF2,W
52BC:  MOVWF  00
52BE:  BCF    FF2.7
52C0:  MOVLW  55
52C2:  MOVWF  FA7
52C4:  MOVLW  AA
52C6:  MOVWF  FA7
52C8:  BSF    FA6.1
52CA:  BTFSC  FA6.1
52CC:  BRA    52CA
52CE:  BCF    FA6.2
52D0:  MOVF   00,W
52D2:  IORWF  FF2,F
52D4:  MOVLW  0A
52D6:  MOVWF  FA9
52D8:  MOVFF  30,FA8
52DC:  BCF    FA6.6
52DE:  BCF    FA6.7
52E0:  BSF    FA6.2
52E2:  MOVF   FF2,W
52E4:  MOVWF  00
52E6:  BCF    FF2.7
52E8:  MOVLW  55
52EA:  MOVWF  FA7
52EC:  MOVLW  AA
52EE:  MOVWF  FA7
52F0:  BSF    FA6.1
52F2:  BTFSC  FA6.1
52F4:  BRA    52F2
52F6:  BCF    FA6.2
52F8:  MOVF   00,W
52FA:  IORWF  FF2,F
52FC:  MOVLB  0
52FE:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //----------------Menu10--------------------------------------------------------------- 
....................    if(Menu == 10)// Menu de Tiempo de Purga 
5300:  MOVF   17,W
5302:  SUBLW  0A
5304:  BTFSS  FD8.2
5306:  BRA    55D2
....................    { 
....................       lcd_gotoxy(1,1); 
5308:  MOVLW  01
530A:  MOVWF  x1F
530C:  MOVWF  x20
530E:  MOVLB  0
5310:  CALL   0B78
....................       printf(lcd_putc,"     Tiempo  de      "); 
5314:  MOVLW  08
5316:  MOVWF  FF6
5318:  MOVLW  08
531A:  MOVWF  FF7
531C:  CALL   1076
....................       lcd_gotoxy(1,2); 
5320:  MOVLW  01
5322:  MOVLB  1
5324:  MOVWF  x1F
5326:  MOVLW  02
5328:  MOVWF  x20
532A:  MOVLB  0
532C:  CALL   0B78
....................       printf(lcd_putc,"       Purga         "); 
5330:  MOVLW  1E
5332:  MOVWF  FF6
5334:  MOVLW  08
5336:  MOVWF  FF7
5338:  CALL   1076
....................       lcd_gotoxy(6,3); 
533C:  MOVLW  06
533E:  MOVLB  1
5340:  MOVWF  x1F
5342:  MOVLW  03
5344:  MOVWF  x20
5346:  MOVLB  0
5348:  CALL   0B78
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
534C:  MOVFF  23,109
5350:  MOVLW  01
5352:  MOVLB  1
5354:  MOVWF  x0A
5356:  MOVLB  0
5358:  CALL   1318
535C:  MOVLW  3A
535E:  MOVLB  1
5360:  MOVWF  x1E
5362:  MOVLB  0
5364:  CALL   0BEA
5368:  MOVFF  38,109
536C:  MOVLW  01
536E:  MOVLB  1
5370:  MOVWF  x0A
5372:  MOVLB  0
5374:  CALL   1318
5378:  MOVLW  3D
537A:  MOVWF  FF6
537C:  MOVLW  08
537E:  MOVWF  FF7
5380:  MOVLW  08
5382:  MOVLB  1
5384:  MOVWF  x11
5386:  MOVLB  0
5388:  CALL   1096
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
538C:  MOVLW  06
538E:  ADDWF  21,W
5390:  MOVLB  1
5392:  MOVWF  x09
5394:  MOVWF  x1F
5396:  MOVLW  04
5398:  MOVWF  x20
539A:  MOVLB  0
539C:  CALL   0B78
....................       lcd_putc(t[2]); 
53A0:  MOVFF  43,11E
53A4:  CALL   0BEA
....................        
....................       if(unidad2<1) 
53A8:  MOVF   21,F
53AA:  BNZ   53B6
....................          unidad2==1; 
53AC:  DECFSZ 21,W
53AE:  BRA    53B2
53B0:  BRA    53B6
53B2:  MOVLW  00
53B4:  BRA    53B6
....................       if(unidad2>3) 
53B6:  MOVF   21,W
53B8:  SUBLW  03
53BA:  BC    53C6
....................          unidad2==3;    
53BC:  MOVF   21,W
53BE:  SUBLW  03
53C0:  BZ    53C6
53C2:  MOVLW  00
53C4:  BRA    53C6
....................        
....................       if(UP) 
53C6:  BSF    F93.3
53C8:  BTFSS  F81.3
53CA:  BRA    5416
....................       { 
....................          if(unidad2==1) 
53CC:  DECFSZ 21,W
53CE:  BRA    53F0
....................          { 
....................             if(purga_minutos_pro<61) 
53D0:  MOVF   23,W
53D2:  SUBLW  3C
53D4:  BNC   53F0
....................             { 
....................                purga_minutos_pro++;delay_ms(300); 
53D6:  INCF   23,F
53D8:  MOVLW  02
53DA:  MOVLB  1
53DC:  MOVWF  x09
53DE:  MOVLW  96
53E0:  MOVWF  x24
53E2:  MOVLB  0
53E4:  CALL   0A66
53E8:  MOVLB  1
53EA:  DECFSZ x09,F
53EC:  BRA    53DE
53EE:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
53F0:  MOVF   21,W
53F2:  SUBLW  03
53F4:  BNZ   5416
....................          { 
....................             if(purga_segundos_pro<60) 
53F6:  MOVF   38,W
53F8:  SUBLW  3B
53FA:  BNC   5416
....................             { 
....................                purga_segundos_pro++;delay_ms(300); 
53FC:  INCF   38,F
53FE:  MOVLW  02
5400:  MOVLB  1
5402:  MOVWF  x09
5404:  MOVLW  96
5406:  MOVWF  x24
5408:  MOVLB  0
540A:  CALL   0A66
540E:  MOVLB  1
5410:  DECFSZ x09,F
5412:  BRA    5404
5414:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
5416:  BSF    F93.2
5418:  BTFSS  F81.2
541A:  BRA    54A8
....................       { 
....................          if(unidad2==1) 
541C:  DECFSZ 21,W
541E:  BRA    5462
....................          { 
....................             if(purga_minutos_pro>1) 
5420:  MOVF   23,W
5422:  SUBLW  01
5424:  BC    5440
....................             { 
....................                purga_minutos_pro--;delay_ms(300); 
5426:  DECF   23,F
5428:  MOVLW  02
542A:  MOVLB  1
542C:  MOVWF  x09
542E:  MOVLW  96
5430:  MOVWF  x24
5432:  MOVLB  0
5434:  CALL   0A66
5438:  MOVLB  1
543A:  DECFSZ x09,F
543C:  BRA    542E
543E:  MOVLB  0
....................             } 
....................              
....................             if(purga_minutos_pro>60) 
5440:  MOVF   23,W
5442:  SUBLW  3C
5444:  BC    5462
....................             { 
....................                purga_minutos_pro=60;delay_ms(300); 
5446:  MOVLW  3C
5448:  MOVWF  23
544A:  MOVLW  02
544C:  MOVLB  1
544E:  MOVWF  x09
5450:  MOVLW  96
5452:  MOVWF  x24
5454:  MOVLB  0
5456:  CALL   0A66
545A:  MOVLB  1
545C:  DECFSZ x09,F
545E:  BRA    5450
5460:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
5462:  MOVF   21,W
5464:  SUBLW  03
5466:  BNZ   54A8
....................          { 
....................             if(purga_segundos_pro>0) 
5468:  MOVF   38,F
546A:  BZ    5486
....................             { 
....................                purga_segundos_pro--;delay_ms(300); 
546C:  DECF   38,F
546E:  MOVLW  02
5470:  MOVLB  1
5472:  MOVWF  x09
5474:  MOVLW  96
5476:  MOVWF  x24
5478:  MOVLB  0
547A:  CALL   0A66
547E:  MOVLB  1
5480:  DECFSZ x09,F
5482:  BRA    5474
5484:  MOVLB  0
....................             } 
....................              
....................             if(purga_segundos_pro>59) 
5486:  MOVF   38,W
5488:  SUBLW  3B
548A:  BC    54A8
....................             { 
....................                purga_segundos_pro=59;delay_ms(300); 
548C:  MOVLW  3B
548E:  MOVWF  38
5490:  MOVLW  02
5492:  MOVLB  1
5494:  MOVWF  x09
5496:  MOVLW  96
5498:  MOVWF  x24
549A:  MOVLB  0
549C:  CALL   0A66
54A0:  MOVLB  1
54A2:  DECFSZ x09,F
54A4:  BRA    5496
54A6:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
54A8:  BSF    F93.0
54AA:  BTFSS  F81.0
54AC:  BRA    54E8
....................       { 
....................          if(unidad2==1) 
54AE:  DECFSZ 21,W
54B0:  BRA    54B8
....................          { 
....................             unidad2=3; 
54B2:  MOVLW  03
54B4:  MOVWF  21
....................          } 
....................          else 
54B6:  BRA    54C8
....................          { 
....................             if(unidad2==3) 
54B8:  MOVF   21,W
54BA:  SUBLW  03
54BC:  BNZ   54C4
....................             { 
....................                unidad2=1; 
54BE:  MOVLW  01
54C0:  MOVWF  21
....................             } 
....................             else 
54C2:  BRA    54C8
....................             { 
....................                unidad2=3; 
54C4:  MOVLW  03
54C6:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
54C8:  MOVLW  02
54CA:  MOVLB  1
54CC:  MOVWF  x09
54CE:  MOVLW  FA
54D0:  MOVWF  x24
54D2:  MOVLB  0
54D4:  CALL   0A66
54D8:  MOVLB  1
54DA:  DECFSZ x09,F
54DC:  BRA    54CE
....................          printf(lcd_putc,"\f"); 
54DE:  MOVLW  0C
54E0:  MOVWF  x1E
54E2:  MOVLB  0
54E4:  CALL   0BEA
....................       } 
....................        
....................       if(LEFT) 
54E8:  BSF    F93.1
54EA:  BTFSS  F81.1
54EC:  BRA    55D0
....................       { 
....................          delay_ms(200); 
54EE:  MOVLW  C8
54F0:  MOVLB  1
54F2:  MOVWF  x24
54F4:  MOVLB  0
54F6:  CALL   0A66
....................          printf(lcd_putc,"\f"); 
54FA:  MOVLW  0C
54FC:  MOVLB  1
54FE:  MOVWF  x1E
5500:  MOVLB  0
5502:  CALL   0BEA
....................          lcd_gotoxy(1,2); 
5506:  MOVLW  01
5508:  MOVLB  1
550A:  MOVWF  x1F
550C:  MOVLW  02
550E:  MOVWF  x20
5510:  MOVLB  0
5512:  CALL   0B78
....................          printf(lcd_putc,"Tiempo Almacenado"); 
5516:  MOVLW  46
5518:  MOVWF  FF6
551A:  MOVLW  08
551C:  MOVWF  FF7
551E:  CALL   1076
....................          lcd_gotoxy(1,3); 
5522:  MOVLW  01
5524:  MOVLB  1
5526:  MOVWF  x1F
5528:  MOVLW  03
552A:  MOVWF  x20
552C:  MOVLB  0
552E:  CALL   0B78
....................          printf(lcd_putc,"  Correctamente  "); 
5532:  MOVLW  58
5534:  MOVWF  FF6
5536:  MOVLW  08
5538:  MOVWF  FF7
553A:  CALL   1076
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
553E:  MOVLW  14
5540:  MOVWF  FA9
5542:  MOVFF  23,FA8
5546:  BCF    FA6.6
5548:  BCF    FA6.7
554A:  BSF    FA6.2
554C:  MOVF   FF2,W
554E:  MOVWF  00
5550:  BCF    FF2.7
5552:  MOVLB  F
5554:  MOVLW  55
5556:  MOVWF  FA7
5558:  MOVLW  AA
555A:  MOVWF  FA7
555C:  BSF    FA6.1
555E:  BTFSC  FA6.1
5560:  BRA    555E
5562:  BCF    FA6.2
5564:  MOVF   00,W
5566:  IORWF  FF2,F
5568:  MOVLW  15
556A:  MOVWF  FA9
556C:  MOVFF  38,FA8
5570:  BCF    FA6.6
5572:  BCF    FA6.7
5574:  BSF    FA6.2
5576:  MOVF   FF2,W
5578:  MOVWF  00
557A:  BCF    FF2.7
557C:  MOVLW  55
557E:  MOVWF  FA7
5580:  MOVLW  AA
5582:  MOVWF  FA7
5584:  BSF    FA6.1
5586:  BTFSC  FA6.1
5588:  BRA    5586
558A:  BCF    FA6.2
558C:  MOVF   00,W
558E:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
5590:  MOVFF  23,22
5594:  MOVFF  38,37
....................          delay_ms(700); 
5598:  MOVLW  04
559A:  MOVLB  1
559C:  MOVWF  x09
559E:  MOVLW  AF
55A0:  MOVWF  x24
55A2:  MOVLB  0
55A4:  CALL   0A66
55A8:  MOVLB  1
55AA:  DECFSZ x09,F
55AC:  BRA    559E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
55AE:  MOVLW  1E
55B0:  MOVWF  x24
55B2:  MOVLB  0
55B4:  CALL   0A66
55B8:  MOVLW  01
55BA:  MOVWF  17
55BC:  CLRF   40
55BE:  MOVLW  02
55C0:  MOVWF  1B
55C2:  MOVWF  1D
55C4:  MOVLW  0C
55C6:  MOVLB  1
55C8:  MOVWF  x1E
55CA:  MOVLB  0
55CC:  CALL   0BEA
55D0:  MOVLB  1
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu10--------------------------------------------------------------- 
....................  
.................... //----------------Menu11--------------------------------------------------------------- 
....................    if(Menu == 11)// Menu de Tiempo de Post-Purga 
55D2:  MOVF   17,W
55D4:  SUBLW  0B
55D6:  BTFSS  FD8.2
55D8:  BRA    589E
....................    { 
....................       lcd_gotoxy(1,1); 
55DA:  MOVLW  01
55DC:  MOVWF  x1F
55DE:  MOVWF  x20
55E0:  MOVLB  0
55E2:  CALL   0B78
....................       printf(lcd_putc,"     Tiempo  de      "); 
55E6:  MOVLW  6A
55E8:  MOVWF  FF6
55EA:  MOVLW  08
55EC:  MOVWF  FF7
55EE:  CALL   1076
....................       lcd_gotoxy(1,2); 
55F2:  MOVLW  01
55F4:  MOVLB  1
55F6:  MOVWF  x1F
55F8:  MOVLW  02
55FA:  MOVWF  x20
55FC:  MOVLB  0
55FE:  CALL   0B78
....................       printf(lcd_putc,"     Post-Purga      "); 
5602:  MOVLW  80
5604:  MOVWF  FF6
5606:  MOVLW  08
5608:  MOVWF  FF7
560A:  CALL   1076
....................       lcd_gotoxy(6,3); 
560E:  MOVLW  06
5610:  MOVLB  1
5612:  MOVWF  x1F
5614:  MOVLW  03
5616:  MOVWF  x20
5618:  MOVLB  0
561A:  CALL   0B78
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
561E:  MOVFF  3C,109
5622:  MOVLW  01
5624:  MOVLB  1
5626:  MOVWF  x0A
5628:  MOVLB  0
562A:  CALL   1318
562E:  MOVLW  3A
5630:  MOVLB  1
5632:  MOVWF  x1E
5634:  MOVLB  0
5636:  CALL   0BEA
563A:  MOVFF  3A,109
563E:  MOVLW  01
5640:  MOVLB  1
5642:  MOVWF  x0A
5644:  MOVLB  0
5646:  CALL   1318
564A:  MOVLW  9F
564C:  MOVWF  FF6
564E:  MOVLW  08
5650:  MOVWF  FF7
5652:  MOVLW  08
5654:  MOVLB  1
5656:  MOVWF  x11
5658:  MOVLB  0
565A:  CALL   1096
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
565E:  MOVLW  06
5660:  ADDWF  21,W
5662:  MOVLB  1
5664:  MOVWF  x09
5666:  MOVWF  x1F
5668:  MOVLW  04
566A:  MOVWF  x20
566C:  MOVLB  0
566E:  CALL   0B78
....................       lcd_putc(t[2]); 
5672:  MOVFF  43,11E
5676:  CALL   0BEA
....................       if(unidad2<1) 
567A:  MOVF   21,F
567C:  BNZ   5688
....................          unidad2==1; 
567E:  DECFSZ 21,W
5680:  BRA    5684
5682:  BRA    5688
5684:  MOVLW  00
5686:  BRA    5688
....................       if(unidad2>3) 
5688:  MOVF   21,W
568A:  SUBLW  03
568C:  BC    5698
....................          unidad2==3;    
568E:  MOVF   21,W
5690:  SUBLW  03
5692:  BZ    5698
5694:  MOVLW  00
5696:  BRA    5698
....................        
....................       if(UP) 
5698:  BSF    F93.3
569A:  BTFSS  F81.3
569C:  BRA    56E8
....................       { 
....................          if(unidad2==1) 
569E:  DECFSZ 21,W
56A0:  BRA    56C2
....................          { 
....................             if(ppurga_minutos_pro<61) 
56A2:  MOVF   3C,W
56A4:  SUBLW  3C
56A6:  BNC   56C2
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
56A8:  INCF   3C,F
56AA:  MOVLW  02
56AC:  MOVLB  1
56AE:  MOVWF  x09
56B0:  MOVLW  96
56B2:  MOVWF  x24
56B4:  MOVLB  0
56B6:  CALL   0A66
56BA:  MOVLB  1
56BC:  DECFSZ x09,F
56BE:  BRA    56B0
56C0:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
56C2:  MOVF   21,W
56C4:  SUBLW  03
56C6:  BNZ   56E8
....................          { 
....................             if(ppurga_segundos_pro<60) 
56C8:  MOVF   3A,W
56CA:  SUBLW  3B
56CC:  BNC   56E8
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
56CE:  INCF   3A,F
56D0:  MOVLW  02
56D2:  MOVLB  1
56D4:  MOVWF  x09
56D6:  MOVLW  96
56D8:  MOVWF  x24
56DA:  MOVLB  0
56DC:  CALL   0A66
56E0:  MOVLB  1
56E2:  DECFSZ x09,F
56E4:  BRA    56D6
56E6:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
56E8:  BSF    F93.2
56EA:  BTFSS  F81.2
56EC:  BRA    577A
....................       { 
....................          if(unidad2==1) 
56EE:  DECFSZ 21,W
56F0:  BRA    5734
....................          { 
....................             if(ppurga_minutos_pro>1) 
56F2:  MOVF   3C,W
56F4:  SUBLW  01
56F6:  BC    5712
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
56F8:  DECF   3C,F
56FA:  MOVLW  02
56FC:  MOVLB  1
56FE:  MOVWF  x09
5700:  MOVLW  96
5702:  MOVWF  x24
5704:  MOVLB  0
5706:  CALL   0A66
570A:  MOVLB  1
570C:  DECFSZ x09,F
570E:  BRA    5700
5710:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
5712:  MOVF   3C,W
5714:  SUBLW  3C
5716:  BC    5734
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
5718:  MOVLW  3C
571A:  MOVWF  3C
571C:  MOVLW  02
571E:  MOVLB  1
5720:  MOVWF  x09
5722:  MOVLW  96
5724:  MOVWF  x24
5726:  MOVLB  0
5728:  CALL   0A66
572C:  MOVLB  1
572E:  DECFSZ x09,F
5730:  BRA    5722
5732:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
5734:  MOVF   21,W
5736:  SUBLW  03
5738:  BNZ   577A
....................          { 
....................             if(ppurga_segundos_pro>0) 
573A:  MOVF   3A,F
573C:  BZ    5758
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
573E:  DECF   3A,F
5740:  MOVLW  02
5742:  MOVLB  1
5744:  MOVWF  x09
5746:  MOVLW  96
5748:  MOVWF  x24
574A:  MOVLB  0
574C:  CALL   0A66
5750:  MOVLB  1
5752:  DECFSZ x09,F
5754:  BRA    5746
5756:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
5758:  MOVF   3A,W
575A:  SUBLW  3B
575C:  BC    577A
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
575E:  MOVLW  3B
5760:  MOVWF  3A
5762:  MOVLW  02
5764:  MOVLB  1
5766:  MOVWF  x09
5768:  MOVLW  96
576A:  MOVWF  x24
576C:  MOVLB  0
576E:  CALL   0A66
5772:  MOVLB  1
5774:  DECFSZ x09,F
5776:  BRA    5768
5778:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
577A:  BSF    F93.0
577C:  BTFSS  F81.0
577E:  BRA    57B4
....................       { 
....................          if(unidad2==1) 
5780:  DECFSZ 21,W
5782:  BRA    578A
....................          { 
....................             unidad2=3; 
5784:  MOVLW  03
5786:  MOVWF  21
....................          } 
....................          else 
5788:  BRA    5794
....................          { 
....................             if(unidad2==3) 
578A:  MOVF   21,W
578C:  SUBLW  03
578E:  BNZ   5794
....................             { 
....................                unidad2=1; 
5790:  MOVLW  01
5792:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
5794:  MOVLW  02
5796:  MOVLB  1
5798:  MOVWF  x09
579A:  MOVLW  FA
579C:  MOVWF  x24
579E:  MOVLB  0
57A0:  CALL   0A66
57A4:  MOVLB  1
57A6:  DECFSZ x09,F
57A8:  BRA    579A
....................          printf(lcd_putc,"\f"); 
57AA:  MOVLW  0C
57AC:  MOVWF  x1E
57AE:  MOVLB  0
57B0:  CALL   0BEA
....................       } 
....................        
....................       if(LEFT) 
57B4:  BSF    F93.1
57B6:  BTFSS  F81.1
57B8:  BRA    589C
....................       { 
....................          delay_ms(200); 
57BA:  MOVLW  C8
57BC:  MOVLB  1
57BE:  MOVWF  x24
57C0:  MOVLB  0
57C2:  CALL   0A66
....................          printf(lcd_putc,"\f"); 
57C6:  MOVLW  0C
57C8:  MOVLB  1
57CA:  MOVWF  x1E
57CC:  MOVLB  0
57CE:  CALL   0BEA
....................          lcd_gotoxy(1,2); 
57D2:  MOVLW  01
57D4:  MOVLB  1
57D6:  MOVWF  x1F
57D8:  MOVLW  02
57DA:  MOVWF  x20
57DC:  MOVLB  0
57DE:  CALL   0B78
....................          printf(lcd_putc,"Tiempo Almacenado"); 
57E2:  MOVLW  A8
57E4:  MOVWF  FF6
57E6:  MOVLW  08
57E8:  MOVWF  FF7
57EA:  CALL   1076
....................          lcd_gotoxy(1,3); 
57EE:  MOVLW  01
57F0:  MOVLB  1
57F2:  MOVWF  x1F
57F4:  MOVLW  03
57F6:  MOVWF  x20
57F8:  MOVLB  0
57FA:  CALL   0B78
....................          printf(lcd_putc,"  Correctamente  "); 
57FE:  MOVLW  BA
5800:  MOVWF  FF6
5802:  MOVLW  08
5804:  MOVWF  FF7
5806:  CALL   1076
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
580A:  MOVLW  16
580C:  MOVWF  FA9
580E:  MOVFF  3C,FA8
5812:  BCF    FA6.6
5814:  BCF    FA6.7
5816:  BSF    FA6.2
5818:  MOVF   FF2,W
581A:  MOVWF  00
581C:  BCF    FF2.7
581E:  MOVLB  F
5820:  MOVLW  55
5822:  MOVWF  FA7
5824:  MOVLW  AA
5826:  MOVWF  FA7
5828:  BSF    FA6.1
582A:  BTFSC  FA6.1
582C:  BRA    582A
582E:  BCF    FA6.2
5830:  MOVF   00,W
5832:  IORWF  FF2,F
5834:  MOVLW  17
5836:  MOVWF  FA9
5838:  MOVFF  3A,FA8
583C:  BCF    FA6.6
583E:  BCF    FA6.7
5840:  BSF    FA6.2
5842:  MOVF   FF2,W
5844:  MOVWF  00
5846:  BCF    FF2.7
5848:  MOVLW  55
584A:  MOVWF  FA7
584C:  MOVLW  AA
584E:  MOVWF  FA7
5850:  BSF    FA6.1
5852:  BTFSC  FA6.1
5854:  BRA    5852
5856:  BCF    FA6.2
5858:  MOVF   00,W
585A:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
585C:  MOVFF  3C,3B
5860:  MOVFF  3A,39
....................          delay_ms(700); 
5864:  MOVLW  04
5866:  MOVLB  1
5868:  MOVWF  x09
586A:  MOVLW  AF
586C:  MOVWF  x24
586E:  MOVLB  0
5870:  CALL   0A66
5874:  MOVLB  1
5876:  DECFSZ x09,F
5878:  BRA    586A
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
587A:  MOVLW  1E
587C:  MOVWF  x24
587E:  MOVLB  0
5880:  CALL   0A66
5884:  MOVLW  01
5886:  MOVWF  17
5888:  CLRF   40
588A:  MOVLW  02
588C:  MOVWF  1B
588E:  MOVWF  1D
5890:  MOVLW  0C
5892:  MOVLB  1
5894:  MOVWF  x1E
5896:  MOVLB  0
5898:  CALL   0BEA
589C:  MOVLB  1
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu11--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
589E:  MOVF   17,W
58A0:  SUBLW  14
58A2:  BTFSS  FD8.2
58A4:  BRA    5BC4
....................    { 
....................       if(Lectura2==1) 
58A6:  BTFSS  3F.6
58A8:  BRA    595C
....................       { 
....................       lcd_gotoxy(1,1);                      
58AA:  MOVLW  01
58AC:  MOVWF  x1F
58AE:  MOVWF  x20
58B0:  MOVLB  0
58B2:  CALL   0B78
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
58B6:  MOVLW  CC
58B8:  MOVWF  FF6
58BA:  MOVLW  08
58BC:  MOVWF  FF7
58BE:  CALL   1076
....................       lcd_gotoxy(1,2); 
58C2:  MOVLW  01
58C4:  MOVLB  1
58C6:  MOVWF  x1F
58C8:  MOVLW  02
58CA:  MOVWF  x20
58CC:  MOVLB  0
58CE:  CALL   0B78
....................       //printf(lcd_putc,"Ext=%2.0f%%",(100*((float)tmp/255))); 
....................       printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
58D2:  MOVLW  D6
58D4:  MOVWF  FF6
58D6:  MOVLW  08
58D8:  MOVWF  FF7
58DA:  MOVLW  05
58DC:  MOVLB  1
58DE:  MOVWF  x11
58E0:  MOVLB  0
58E2:  CALL   1096
58E6:  MOVFF  3D,109
58EA:  MOVLW  03
58EC:  MOVLB  1
58EE:  MOVWF  x0A
58F0:  MOVLB  0
58F2:  CALL   1318
58F6:  MOVLW  25
58F8:  MOVLB  1
58FA:  MOVWF  x1E
58FC:  MOVLB  0
58FE:  CALL   0BEA
....................       lcd_gotoxy(1,3); 
5902:  MOVLW  01
5904:  MOVLB  1
5906:  MOVWF  x1F
5908:  MOVLW  03
590A:  MOVWF  x20
590C:  MOVLB  0
590E:  CALL   0B78
....................       printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
5912:  MOVLW  E2
5914:  MOVWF  FF6
5916:  MOVLW  08
5918:  MOVWF  FF7
591A:  MOVLW  08
591C:  MOVLB  1
591E:  MOVWF  x11
5920:  MOVLB  0
5922:  CALL   1096
5926:  MOVLW  01
5928:  MOVWF  FE9
592A:  MOVFF  98,114
592E:  MOVFF  97,113
5932:  MOVFF  96,112
5936:  MOVFF  95,111
593A:  MOVLB  1
593C:  MOVWF  x15
593E:  MOVLB  0
5940:  CALL   154E
5944:  MOVLW  EF
5946:  MOVWF  FF6
5948:  MOVLW  08
594A:  MOVWF  FF7
594C:  MOVLW  07
594E:  MOVLB  1
5950:  MOVWF  x11
5952:  MOVLB  0
5954:  CALL   1096
....................       Lectura2=0; 
5958:  BCF    3F.6
595A:  MOVLB  1
....................       } 
....................        
....................       if(flag_filtro==1) 
595C:  BTFSS  3F.2
595E:  BRA    59A2
....................       { 
....................          if(horas>=60) 
5960:  MOVF   35,W
5962:  SUBLW  3B
5964:  BC    5984
....................          { 
....................             lcd_gotoxy(10,1);                      
5966:  MOVLW  0A
5968:  MOVWF  x1F
596A:  MOVLW  01
596C:  MOVWF  x20
596E:  MOVLB  0
5970:  CALL   0B78
....................             printf(lcd_putc,"Filtro:CAM"); 
5974:  MOVLW  F8
5976:  MOVWF  FF6
5978:  MOVLW  08
597A:  MOVWF  FF7
597C:  CALL   1076
....................          } 
....................          else 
5980:  BRA    599E
5982:  MOVLB  1
....................          { 
....................             lcd_gotoxy(10,1);                      
5984:  MOVLW  0A
5986:  MOVWF  x1F
5988:  MOVLW  01
598A:  MOVWF  x20
598C:  MOVLB  0
598E:  CALL   0B78
....................             printf(lcd_putc,"Filtro:OK "); 
5992:  MOVLW  04
5994:  MOVWF  FF6
5996:  MOVLW  09
5998:  MOVWF  FF7
599A:  CALL   1076
....................          } 
....................       } 
....................       else 
599E:  BRA    59BC
59A0:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
59A2:  MOVLW  0A
59A4:  MOVWF  x1F
59A6:  MOVLW  01
59A8:  MOVWF  x20
59AA:  MOVLB  0
59AC:  CALL   0B78
....................          printf(lcd_putc,"Filtro:---"); 
59B0:  MOVLW  10
59B2:  MOVWF  FF6
59B4:  MOVLW  09
59B6:  MOVWF  FF7
59B8:  CALL   1076
....................       } 
....................           
....................       if(Flujo<0.5) 
59BC:  MOVFF  98,126
59C0:  MOVFF  97,125
59C4:  MOVFF  96,124
59C8:  MOVFF  95,123
59CC:  MOVLB  1
59CE:  CLRF   x2A
59D0:  CLRF   x29
59D2:  CLRF   x28
59D4:  MOVLW  7E
59D6:  MOVWF  x27
59D8:  MOVLB  0
59DA:  CALL   1700
59DE:  BNC   59FE
....................       { 
....................          lcd_gotoxy(11,2); 
59E0:  MOVLW  0B
59E2:  MOVLB  1
59E4:  MOVWF  x1F
59E6:  MOVLW  02
59E8:  MOVWF  x20
59EA:  MOVLB  0
59EC:  CALL   0B78
....................          printf(lcd_putc,"Flujo=Bajo");       
59F0:  MOVLW  1C
59F2:  MOVWF  FF6
59F4:  MOVLW  09
59F6:  MOVWF  FF7
59F8:  CALL   1076
....................       } 
....................       else 
59FC:  BRA    5A5C
....................       { 
....................          if(Flujo>2.0) 
59FE:  MOVLB  1
5A00:  CLRF   x26
5A02:  CLRF   x25
5A04:  CLRF   x24
5A06:  MOVLW  80
5A08:  MOVWF  x23
5A0A:  MOVFF  98,12A
5A0E:  MOVFF  97,129
5A12:  MOVFF  96,128
5A16:  MOVFF  95,127
5A1A:  MOVLB  0
5A1C:  CALL   1700
5A20:  BNC   5A40
....................          { 
....................             lcd_gotoxy(11,2); 
5A22:  MOVLW  0B
5A24:  MOVLB  1
5A26:  MOVWF  x1F
5A28:  MOVLW  02
5A2A:  MOVWF  x20
5A2C:  MOVLB  0
5A2E:  CALL   0B78
....................             printf(lcd_putc,"Flujo=Alto");                
5A32:  MOVLW  28
5A34:  MOVWF  FF6
5A36:  MOVLW  09
5A38:  MOVWF  FF7
5A3A:  CALL   1076
....................          } 
....................          else 
5A3E:  BRA    5A5C
....................          { 
....................             lcd_gotoxy(11,2); 
5A40:  MOVLW  0B
5A42:  MOVLB  1
5A44:  MOVWF  x1F
5A46:  MOVLW  02
5A48:  MOVWF  x20
5A4A:  MOVLB  0
5A4C:  CALL   0B78
....................             printf(lcd_putc,"Flujo=OK  ");       
5A50:  MOVLW  34
5A52:  MOVWF  FF6
5A54:  MOVLW  09
5A56:  MOVWF  FF7
5A58:  CALL   1076
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
5A5C:  BTFSS  3E.0
5A5E:  BRA    5A82
....................       { 
....................          Luz_Blanca_on; 
5A60:  BSF    F8A.4
5A62:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5A64:  MOVLW  01
5A66:  MOVLB  1
5A68:  MOVWF  x1F
5A6A:  MOVLW  04
5A6C:  MOVWF  x20
5A6E:  MOVLB  0
5A70:  CALL   0B78
....................          printf(lcd_putc,"Luz:ON "); 
5A74:  MOVLW  40
5A76:  MOVWF  FF6
5A78:  MOVLW  09
5A7A:  MOVWF  FF7
5A7C:  CALL   1076
....................       } 
....................       else 
5A80:  BRA    5AA2
....................       { 
....................          Luz_Blanca_off; 
5A82:  BCF    F8A.4
5A84:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5A86:  MOVLW  01
5A88:  MOVLB  1
5A8A:  MOVWF  x1F
5A8C:  MOVLW  04
5A8E:  MOVWF  x20
5A90:  MOVLB  0
5A92:  CALL   0B78
....................          printf(lcd_putc,"Luz:OFF "); 
5A96:  MOVLW  48
5A98:  MOVWF  FF6
5A9A:  MOVLW  09
5A9C:  MOVWF  FF7
5A9E:  CALL   1076
....................       } 
....................        
....................       if(estadomv==1) 
5AA2:  BTFSS  3E.1
5AA4:  BRA    5AC4
....................       { 
....................          lcd_gotoxy(10,4); 
5AA6:  MOVLW  0A
5AA8:  MOVLB  1
5AAA:  MOVWF  x1F
5AAC:  MOVLW  04
5AAE:  MOVWF  x20
5AB0:  MOVLB  0
5AB2:  CALL   0B78
....................          printf(lcd_putc,"Motor:ON "); 
5AB6:  MOVLW  52
5AB8:  MOVWF  FF6
5ABA:  MOVLW  09
5ABC:  MOVWF  FF7
5ABE:  CALL   1076
....................       } 
....................       else 
5AC2:  BRA    5AE8
....................       { 
....................          if(iniciodamper==1) 
5AC4:  BTFSS  58.0
5AC6:  BRA    5ACC
....................          { 
....................             Motor_off;      
5AC8:  BCF    F8A.5
5ACA:  BCF    F93.5
....................          } 
....................          lcd_gotoxy(10,4); 
5ACC:  MOVLW  0A
5ACE:  MOVLB  1
5AD0:  MOVWF  x1F
5AD2:  MOVLW  04
5AD4:  MOVWF  x20
5AD6:  MOVLB  0
5AD8:  CALL   0B78
....................          printf(lcd_putc,"Motor:OFF ");  
5ADC:  MOVLW  5C
5ADE:  MOVWF  FF6
5AE0:  MOVLW  09
5AE2:  MOVWF  FF7
5AE4:  CALL   1076
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
5AE8:  BSF    F93.2
5AEA:  BTFSS  F81.2
5AEC:  BRA    5B04
....................       {  if(Flanco == 0)  
5AEE:  BTFSC  3E.4
5AF0:  BRA    5B02
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
5AF2:  BSF    3E.4
5AF4:  MOVLW  C8
5AF6:  MOVLB  1
5AF8:  MOVWF  x24
5AFA:  MOVLB  0
5AFC:  CALL   0A66
5B00:  BTG    3E.0
....................          else 
5B02:  BRA    5B06
....................             {Flanco = 0;} 
5B04:  BCF    3E.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
5B06:  BSF    F93.1
5B08:  BTFSS  F81.1
5B0A:  BRA    5B50
....................       {   
....................          if(Flanco2 == 0) 
5B0C:  BTFSC  3E.6
5B0E:  BRA    5B4E
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
5B10:  BSF    3E.6
5B12:  MOVLW  C8
5B14:  MOVLB  1
5B16:  MOVWF  x24
5B18:  MOVLB  0
5B1A:  CALL   0A66
5B1E:  BTG    3E.1
....................             if(estadomv==1) 
5B20:  BTFSS  3E.1
5B22:  BRA    5B3A
....................             { 
....................                Motor_on; 
5B24:  BSF    F8A.5
5B26:  BCF    F93.5
....................                delay_ms(150); 
5B28:  MOVLW  96
5B2A:  MOVLB  1
5B2C:  MOVWF  x24
5B2E:  MOVLB  0
5B30:  CALL   0A66
....................                lcd_init(); 
5B34:  CALL   0B04
....................             } 
....................             else 
5B38:  BRA    5B4E
....................             { 
....................                Motor_off; 
5B3A:  BCF    F8A.5
5B3C:  BCF    F93.5
....................                delay_ms(150); 
5B3E:  MOVLW  96
5B40:  MOVLB  1
5B42:  MOVWF  x24
5B44:  MOVLB  0
5B46:  CALL   0A66
....................                lcd_init(); 
5B4A:  CALL   0B04
....................             } 
....................          } 
....................       } 
....................       else 
5B4E:  BRA    5B52
....................       { 
....................          Flanco2 = 0; 
5B50:  BCF    3E.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
5B52:  BSF    F93.3
5B54:  BTFSS  F81.3
5B56:  BRA    5B8E
....................       {  if(Flanco1 == 0)  
5B58:  BTFSC  3E.5
5B5A:  BRA    5B8C
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
5B5C:  MOVLW  02
5B5E:  MOVLB  1
5B60:  MOVWF  x09
5B62:  MOVLW  FA
5B64:  MOVWF  x24
5B66:  MOVLB  0
5B68:  CALL   0A66
5B6C:  MOVLB  1
5B6E:  DECFSZ x09,F
5B70:  BRA    5B62
5B72:  MOVLW  0C
5B74:  MOVWF  x1E
5B76:  MOVLB  0
5B78:  CALL   0BEA
5B7C:  MOVLW  01
5B7E:  MOVWF  17
5B80:  CLRF   40
5B82:  MOVLW  02
5B84:  MOVWF  1B
5B86:  MOVWF  1D
5B88:  MOVLW  0B
5B8A:  MOVWF  1A
....................          else 
5B8C:  BRA    5B90
....................             {Flanco1 = 0;}    
5B8E:  BCF    3E.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
5B90:  BSF    F93.0
5B92:  BTFSS  F81.0
5B94:  BRA    5BC0
....................       {  if(Flanco3 == 0)  
5B96:  BTFSC  3E.7
5B98:  BRA    5BBE
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
5B9A:  MOVLW  02
5B9C:  MOVLB  1
5B9E:  MOVWF  x09
5BA0:  MOVLW  FA
5BA2:  MOVWF  x24
5BA4:  MOVLB  0
5BA6:  CALL   0A66
5BAA:  MOVLB  1
5BAC:  DECFSZ x09,F
5BAE:  BRA    5BA0
5BB0:  MOVLW  0C
5BB2:  MOVWF  x1E
5BB4:  MOVLB  0
5BB6:  CALL   0BEA
5BBA:  MOVLW  28
5BBC:  MOVWF  17
....................          else 
5BBE:  BRA    5BC2
....................             {Flanco3 = 0;}     
5BC0:  BCF    3E.7
5BC2:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
5BC4:  MOVF   17,W
5BC6:  SUBLW  1E
5BC8:  BTFSS  FD8.2
5BCA:  BRA    5DAC
....................       lcd_gotoxy(1,1); 
5BCC:  MOVLW  01
5BCE:  MOVWF  x1F
5BD0:  MOVWF  x20
5BD2:  MOVLB  0
5BD4:  CALL   0B78
....................       printf(lcd_putc,"    !Post-Purga!    "); 
5BD8:  MOVLW  68
5BDA:  MOVWF  FF6
5BDC:  MOVLW  09
5BDE:  MOVWF  FF7
5BE0:  CALL   1076
....................       lcd_gotoxy(1,2); 
5BE4:  MOVLW  01
5BE6:  MOVLB  1
5BE8:  MOVWF  x1F
5BEA:  MOVLW  02
5BEC:  MOVWF  x20
5BEE:  MOVLB  0
5BF0:  CALL   0B78
....................       printf(lcd_putc,"                    "); 
5BF4:  MOVLW  7E
5BF6:  MOVWF  FF6
5BF8:  MOVLW  09
5BFA:  MOVWF  FF7
5BFC:  CALL   1076
....................       lcd_gotoxy(1,3); 
5C00:  MOVLW  01
5C02:  MOVLB  1
5C04:  MOVWF  x1F
5C06:  MOVLW  03
5C08:  MOVWF  x20
5C0A:  MOVLB  0
5C0C:  CALL   0B78
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
5C10:  MOVLW  94
5C12:  MOVWF  FF6
5C14:  MOVLW  09
5C16:  MOVWF  FF7
5C18:  MOVLW  06
5C1A:  MOVLB  1
5C1C:  MOVWF  x11
5C1E:  MOVLB  0
5C20:  CALL   1096
5C24:  MOVFF  3B,109
5C28:  MOVLW  01
5C2A:  MOVLB  1
5C2C:  MOVWF  x0A
5C2E:  MOVLB  0
5C30:  CALL   1318
5C34:  MOVLW  3A
5C36:  MOVLB  1
5C38:  MOVWF  x1E
5C3A:  MOVLB  0
5C3C:  CALL   0BEA
5C40:  MOVFF  39,109
5C44:  MOVLW  01
5C46:  MOVLB  1
5C48:  MOVWF  x0A
5C4A:  MOVLB  0
5C4C:  CALL   1318
5C50:  MOVLW  20
5C52:  MOVLB  1
5C54:  MOVWF  x1E
5C56:  MOVLB  0
5C58:  CALL   0BEA
5C5C:  MOVLW  20
5C5E:  MOVLB  1
5C60:  MOVWF  x1E
5C62:  MOVLB  0
5C64:  CALL   0BEA
....................            
....................       if(Lectura==1) 
5C68:  BTFSS  3F.5
5C6A:  BRA    5DA8
....................       { 
....................          Luz_Blanca_off; 
5C6C:  BCF    F8A.4
5C6E:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
5C70:  MOVLW  02
5C72:  MOVLB  1
5C74:  MOVWF  x0D
5C76:  MOVLB  0
5C78:  CALL   17B6
5C7C:  MOVFF  00,109
5C80:  MOVFF  01,10A
5C84:  MOVFF  02,10B
5C88:  MOVFF  03,10C
5C8C:  MOVFF  03,126
5C90:  MOVFF  02,125
5C94:  MOVFF  01,124
5C98:  MOVFF  00,123
5C9C:  MOVLB  1
5C9E:  CLRF   x2A
5CA0:  CLRF   x29
5CA2:  MOVLW  40
5CA4:  MOVWF  x28
5CA6:  MOVLW  81
5CA8:  MOVWF  x27
5CAA:  MOVLB  0
5CAC:  CALL   1700
5CB0:  BTFSS  FD8.0
5CB2:  BRA    5DA6
5CB4:  MOVF   39,F
5CB6:  BNZ   5DA6
5CB8:  MOVF   3B,F
5CBA:  BNZ   5DA6
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
5CBC:  MOVLW  46
5CBE:  MOVWF  FA9
5CC0:  MOVFF  33,FA8
5CC4:  BCF    FA6.6
5CC6:  BCF    FA6.7
5CC8:  BSF    FA6.2
5CCA:  MOVF   FF2,W
5CCC:  MOVWF  00
5CCE:  BCF    FF2.7
5CD0:  MOVLB  F
5CD2:  MOVLW  55
5CD4:  MOVWF  FA7
5CD6:  MOVLW  AA
5CD8:  MOVWF  FA7
5CDA:  BSF    FA6.1
5CDC:  BTFSC  FA6.1
5CDE:  BRA    5CDC
5CE0:  BCF    FA6.2
5CE2:  MOVF   00,W
5CE4:  IORWF  FF2,F
5CE6:  MOVLW  47
5CE8:  MOVWF  FA9
5CEA:  MOVFF  34,FA8
5CEE:  BCF    FA6.6
5CF0:  BCF    FA6.7
5CF2:  BSF    FA6.2
5CF4:  MOVF   FF2,W
5CF6:  MOVWF  00
5CF8:  BCF    FF2.7
5CFA:  MOVLW  55
5CFC:  MOVWF  FA7
5CFE:  MOVLW  AA
5D00:  MOVWF  FA7
5D02:  BSF    FA6.1
5D04:  BTFSC  FA6.1
5D06:  BRA    5D04
5D08:  BCF    FA6.2
5D0A:  MOVF   00,W
5D0C:  IORWF  FF2,F
5D0E:  MOVLW  48
5D10:  MOVWF  FA9
5D12:  MOVFF  35,FA8
5D16:  BCF    FA6.6
5D18:  BCF    FA6.7
5D1A:  BSF    FA6.2
5D1C:  MOVF   FF2,W
5D1E:  MOVWF  00
5D20:  BCF    FF2.7
5D22:  MOVLW  55
5D24:  MOVWF  FA7
5D26:  MOVLW  AA
5D28:  MOVWF  FA7
5D2A:  BSF    FA6.1
5D2C:  BTFSC  FA6.1
5D2E:  BRA    5D2C
5D30:  BCF    FA6.2
5D32:  MOVF   00,W
5D34:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
5D36:  MOVLW  0C
5D38:  MOVLB  1
5D3A:  MOVWF  x1E
5D3C:  MOVLB  0
5D3E:  CALL   0BEA
....................             lcd_gotoxy(1,2); 
5D42:  MOVLW  01
5D44:  MOVLB  1
5D46:  MOVWF  x1F
5D48:  MOVLW  02
5D4A:  MOVWF  x20
5D4C:  MOVLB  0
5D4E:  CALL   0B78
....................             printf(lcd_putc,"     Proceso      "); 
5D52:  MOVLW  A6
5D54:  MOVWF  FF6
5D56:  MOVLW  09
5D58:  MOVWF  FF7
5D5A:  CALL   1076
....................             lcd_gotoxy(1,3); 
5D5E:  MOVLW  01
5D60:  MOVLB  1
5D62:  MOVWF  x1F
5D64:  MOVLW  03
5D66:  MOVWF  x20
5D68:  MOVLB  0
5D6A:  CALL   0B78
....................             printf(lcd_putc,"    Finalizado    "); 
5D6E:  MOVLW  BA
5D70:  MOVWF  FF6
5D72:  MOVLW  09
5D74:  MOVWF  FF7
5D76:  CALL   1076
....................             delay_ms(2000); 
5D7A:  MOVLW  08
5D7C:  MOVLB  1
5D7E:  MOVWF  x09
5D80:  MOVLW  FA
5D82:  MOVWF  x24
5D84:  MOVLB  0
5D86:  CALL   0A66
5D8A:  MOVLB  1
5D8C:  DECFSZ x09,F
5D8E:  BRA    5D80
....................             printf(lcd_putc,"\f"); 
5D90:  MOVLW  0C
5D92:  MOVWF  x1E
5D94:  MOVLB  0
5D96:  CALL   0BEA
....................             ajustar_damper(0); 
5D9A:  MOVLB  1
5D9C:  CLRF   x09
5D9E:  MOVLB  0
5DA0:  CALL   180E
....................             reset_cpu(); 
5DA4:  RESET
....................          } 
....................          Lectura=0; 
5DA6:  BCF    3F.5
....................       } 
....................        
....................    } 
5DA8:  MOVLB  1
5DAA:  BRA    5BC4
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
5DAC:  MOVF   17,W
5DAE:  SUBLW  28
5DB0:  BNZ   5E8E
....................    lcd_gotoxy(1,1); 
5DB2:  MOVLW  01
5DB4:  MOVWF  x1F
5DB6:  MOVWF  x20
5DB8:  MOVLB  0
5DBA:  CALL   0B78
....................    printf(lcd_putc,"   Desea apagar     "); 
5DBE:  MOVLW  CE
5DC0:  MOVWF  FF6
5DC2:  MOVLW  09
5DC4:  MOVWF  FF7
5DC6:  CALL   1076
....................    lcd_gotoxy(1,2); 
5DCA:  MOVLW  01
5DCC:  MOVLB  1
5DCE:  MOVWF  x1F
5DD0:  MOVLW  02
5DD2:  MOVWF  x20
5DD4:  MOVLB  0
5DD6:  CALL   0B78
....................    printf(lcd_putc,"     la cabina      "); 
5DDA:  MOVLW  E4
5DDC:  MOVWF  FF6
5DDE:  MOVLW  09
5DE0:  MOVWF  FF7
5DE2:  CALL   1076
....................    lcd_gotoxy(1,3); 
5DE6:  MOVLW  01
5DE8:  MOVLB  1
5DEA:  MOVWF  x1F
5DEC:  MOVLW  03
5DEE:  MOVWF  x20
5DF0:  MOVLB  0
5DF2:  CALL   0B78
....................    printf(lcd_putc,"   > Aceptar        "); 
5DF6:  MOVLW  FA
5DF8:  MOVWF  FF6
5DFA:  MOVLW  09
5DFC:  MOVWF  FF7
5DFE:  CALL   1076
....................    lcd_gotoxy(1,4); 
5E02:  MOVLW  01
5E04:  MOVLB  1
5E06:  MOVWF  x1F
5E08:  MOVLW  04
5E0A:  MOVWF  x20
5E0C:  MOVLB  0
5E0E:  CALL   0B78
....................    printf(lcd_putc,"   < Cancelar       "); 
5E12:  MOVLW  10
5E14:  MOVWF  FF6
5E16:  MOVLW  0A
5E18:  MOVWF  FF7
5E1A:  CALL   1076
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
5E1E:  BSF    F93.0
5E20:  BTFSS  F81.0
5E22:  BRA    5E4A
....................       {  if(Flanco1 == 0)  
5E24:  BTFSC  3E.5
5E26:  BRA    5E48
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
5E28:  BSF    3E.5
5E2A:  MOVLW  1E
5E2C:  MOVWF  17
5E2E:  MOVFF  20,109
5E32:  CALL   1062
5E36:  BCF    F8A.6
5E38:  BCF    F93.6
5E3A:  MOVLW  0C
5E3C:  MOVLB  1
5E3E:  MOVWF  x1E
5E40:  MOVLB  0
5E42:  CALL   0BEA
5E46:  BSF    58.5
....................             }} 
....................          else 
5E48:  BRA    5E4C
....................             {Flanco1 = 0;}    
5E4A:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5E4C:  BSF    F93.1
5E4E:  BTFSS  F81.1
5E50:  BRA    5E8A
....................       {  if(Flanco3 == 0)  
5E52:  BTFSC  3E.7
5E54:  BRA    5E88
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
5E56:  BSF    3E.7
5E58:  MOVLW  14
5E5A:  MOVWF  17
5E5C:  CLRF   40
5E5E:  MOVLW  02
5E60:  MOVWF  1B
5E62:  MOVWF  1D
5E64:  MOVLW  0B
5E66:  MOVWF  1A
5E68:  MOVLW  02
5E6A:  MOVLB  1
5E6C:  MOVWF  x09
5E6E:  MOVLW  FA
5E70:  MOVWF  x24
5E72:  MOVLB  0
5E74:  CALL   0A66
5E78:  MOVLB  1
5E7A:  DECFSZ x09,F
5E7C:  BRA    5E6E
5E7E:  MOVLW  0C
5E80:  MOVWF  x1E
5E82:  MOVLB  0
5E84:  CALL   0BEA
....................          else 
5E88:  BRA    5E8C
....................             {Flanco3 = 0;}     
5E8A:  BCF    3E.7
5E8C:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
5E8E:  MOVF   17,W
5E90:  SUBLW  32
5E92:  BTFSS  FD8.2
5E94:  BRA    5F96
....................    lcd_gotoxy(1,1); 
5E96:  MOVLW  01
5E98:  MOVWF  x1F
5E9A:  MOVWF  x20
5E9C:  MOVLB  0
5E9E:  CALL   0B78
....................    printf(lcd_putc,"      !Purga!       "); 
5EA2:  MOVLW  26
5EA4:  MOVWF  FF6
5EA6:  MOVLW  0A
5EA8:  MOVWF  FF7
5EAA:  CALL   1076
....................    lcd_gotoxy(1,2); 
5EAE:  MOVLW  01
5EB0:  MOVLB  1
5EB2:  MOVWF  x1F
5EB4:  MOVLW  02
5EB6:  MOVWF  x20
5EB8:  MOVLB  0
5EBA:  CALL   0B78
....................    printf(lcd_putc,"                    "); 
5EBE:  MOVLW  3C
5EC0:  MOVWF  FF6
5EC2:  MOVLW  0A
5EC4:  MOVWF  FF7
5EC6:  CALL   1076
....................    lcd_gotoxy(1,3); 
5ECA:  MOVLW  01
5ECC:  MOVLB  1
5ECE:  MOVWF  x1F
5ED0:  MOVLW  03
5ED2:  MOVWF  x20
5ED4:  MOVLB  0
5ED6:  CALL   0B78
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
5EDA:  MOVLW  52
5EDC:  MOVWF  FF6
5EDE:  MOVLW  0A
5EE0:  MOVWF  FF7
5EE2:  MOVLW  06
5EE4:  MOVLB  1
5EE6:  MOVWF  x11
5EE8:  MOVLB  0
5EEA:  CALL   1096
5EEE:  MOVFF  22,109
5EF2:  MOVLW  01
5EF4:  MOVLB  1
5EF6:  MOVWF  x0A
5EF8:  MOVLB  0
5EFA:  CALL   1318
5EFE:  MOVLW  3A
5F00:  MOVLB  1
5F02:  MOVWF  x1E
5F04:  MOVLB  0
5F06:  CALL   0BEA
5F0A:  MOVFF  37,109
5F0E:  MOVLW  01
5F10:  MOVLB  1
5F12:  MOVWF  x0A
5F14:  MOVLB  0
5F16:  CALL   1318
5F1A:  MOVLW  20
5F1C:  MOVLB  1
5F1E:  MOVWF  x1E
5F20:  MOVLB  0
5F22:  CALL   0BEA
5F26:  MOVLW  20
5F28:  MOVLB  1
5F2A:  MOVWF  x1E
5F2C:  MOVLB  0
5F2E:  CALL   0BEA
5F32:  MOVLW  20
5F34:  MOVLB  1
5F36:  MOVWF  x1E
5F38:  MOVLB  0
5F3A:  CALL   0BEA
....................         
....................    if(RIGHT) 
5F3E:  BSF    F93.0
5F40:  BTFSS  F81.0
5F42:  BRA    5F6C
....................    { 
....................       delay_ms(1000); 
5F44:  MOVLW  04
5F46:  MOVLB  1
5F48:  MOVWF  x09
5F4A:  MOVLW  FA
5F4C:  MOVWF  x24
5F4E:  MOVLB  0
5F50:  CALL   0A66
5F54:  MOVLB  1
5F56:  DECFSZ x09,F
5F58:  BRA    5F4A
....................       if(RIGHT) 
5F5A:  BSF    F93.0
5F5C:  BTFSS  F81.0
5F5E:  BRA    5F6A
....................       { 
....................          tiempo_purga=0;Motor_on;Menu=20; 
5F60:  BCF    58.4
5F62:  BSF    F8A.5
5F64:  BCF    F93.5
5F66:  MOVLW  14
5F68:  MOVWF  17
5F6A:  MOVLB  0
....................       } 
....................    } 
....................    if(Lectura==1) 
5F6C:  BTFSS  3F.5
5F6E:  BRA    5F94
....................    { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
5F70:  MOVFF  2D,109
5F74:  CALL   1D38
5F78:  MOVFF  03,98
5F7C:  MOVFF  02,97
5F80:  MOVFF  01,96
5F84:  MOVFF  00,95
....................         controlar_flujo();     
5F88:  CALL   240A
....................         Motor_on; 
5F8C:  BSF    F8A.5
5F8E:  BCF    F93.5
....................         Luz_Blanca_off; 
5F90:  BCF    F8A.4
5F92:  BCF    F93.4
5F94:  MOVLB  1
....................    } 
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=20) 
5F96:  MOVF   36,W
5F98:  SUBLW  13
5F9A:  BC    5FA6
....................    { 
....................       lcd_init(); 
5F9C:  MOVLB  0
5F9E:  CALL   0B04
....................       tiemporeset=0; 
5FA2:  CLRF   36
5FA4:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
5FA6:  BTFSS  3F.3
5FA8:  BRA    5FB6
....................       {intensidadpantalla(0);sleep();} 
5FAA:  CLRF   x09
5FAC:  MOVLB  0
5FAE:  CALL   1062
5FB2:  SLEEP 
5FB4:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
5FB6:  MOVF   17,F
5FB8:  BNZ   5FC2
5FBA:  MOVF   17,W
5FBC:  SUBLW  1E
5FBE:  BTFSC  FD8.2
5FC0:  BRA    60F8
....................    { 
....................       if(Lectura==1) 
5FC2:  BTFSS  3F.5
5FC4:  BRA    60F4
....................       { 
....................          FeedbackDamper=(int8)(100*(sensores(2)/1023)); 
5FC6:  MOVLW  02
5FC8:  MOVWF  x0D
5FCA:  MOVLB  0
5FCC:  CALL   17B6
5FD0:  MOVFF  00,109
5FD4:  MOVFF  01,10A
5FD8:  MOVFF  02,10B
5FDC:  MOVFF  03,10C
5FE0:  MOVFF  03,12A
5FE4:  MOVFF  02,129
5FE8:  MOVFF  01,128
5FEC:  MOVFF  00,127
5FF0:  MOVLB  1
5FF2:  CLRF   x2E
5FF4:  MOVLW  C0
5FF6:  MOVWF  x2D
5FF8:  MOVLW  7F
5FFA:  MOVWF  x2C
5FFC:  MOVLW  88
5FFE:  MOVWF  x2B
6000:  MOVLB  0
6002:  CALL   0C8C
6006:  MOVLB  1
6008:  CLRF   x26
600A:  CLRF   x25
600C:  MOVLW  48
600E:  MOVWF  x24
6010:  MOVLW  85
6012:  MOVWF  x23
6014:  MOVFF  03,12A
6018:  MOVFF  02,129
601C:  MOVFF  01,128
6020:  MOVFF  00,127
6024:  MOVLB  0
6026:  CALL   1394
602A:  MOVFF  03,10C
602E:  MOVFF  02,10B
6032:  MOVFF  01,10A
6036:  MOVFF  00,109
603A:  CALL   177A
603E:  MOVFF  01,3D
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
6042:  MOVFF  2D,109
6046:  CALL   1D38
604A:  MOVFF  03,98
604E:  MOVFF  02,97
6052:  MOVFF  01,96
6056:  MOVFF  00,95
....................          controlar_flujo(); 
605A:  CALL   240A
....................           
....................          if(Flujo<0.5 && Menu==20) 
605E:  MOVFF  98,126
6062:  MOVFF  97,125
6066:  MOVFF  96,124
606A:  MOVFF  95,123
606E:  MOVLB  1
6070:  CLRF   x2A
6072:  CLRF   x29
6074:  CLRF   x28
6076:  MOVLW  7E
6078:  MOVWF  x27
607A:  MOVLB  0
607C:  CALL   1700
6080:  BNC   60B8
6082:  MOVF   17,W
6084:  SUBLW  14
6086:  BNZ   60B8
....................          { 
....................               flag_latencia=1; 
6088:  BSF    3F.0
....................                
....................               if(Latencia==1) 
608A:  BTFSS  3F.1
608C:  BRA    60B6
....................               { 
....................                  if(estadoalarma==1) 
608E:  BTFSS  3E.2
6090:  BRA    6098
....................                  { 
....................                     Alarma_on; 
6092:  BSF    F8A.6
6094:  BCF    F93.6
....................                  } 
....................                  else 
6096:  BRA    609C
....................                  { 
....................                     Alarma_off; 
6098:  BCF    F8A.6
609A:  BCF    F93.6
....................                  } 
....................                  estadopantalla=!estadopantalla; 
609C:  BTG    3E.3
....................                  if(estadopantalla==1) 
609E:  BTFSS  3E.3
60A0:  BRA    60AC
....................                  {intensidadpantalla(contraste);} 
60A2:  MOVFF  20,109
60A6:  CALL   1062
....................                  else 
60AA:  BRA    60B6
....................                  {intensidadpantalla(0);} 
60AC:  MOVLB  1
60AE:  CLRF   x09
60B0:  MOVLB  0
60B2:  CALL   1062
....................                } 
....................             } 
....................          else 
60B6:  BRA    60F2
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
60B8:  MOVFF  20,109
60BC:  CALL   1062
60C0:  BCF    F8A.6
60C2:  BCF    F93.6
....................             if(Flujo>=0.5) 
60C4:  MOVLB  1
60C6:  CLRF   x26
60C8:  CLRF   x25
60CA:  CLRF   x24
60CC:  MOVLW  7E
60CE:  MOVWF  x23
60D0:  MOVFF  98,12A
60D4:  MOVFF  97,129
60D8:  MOVFF  96,128
60DC:  MOVFF  95,127
60E0:  MOVLB  0
60E2:  CALL   1700
60E6:  BC    60EA
60E8:  BNZ   60F2
....................             { 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
60EA:  BCF    3F.1
60EC:  CLRF   5C
60EE:  CLRF   5B
60F0:  BCF    3F.0
60F2:  MOVLB  1
....................             } 
....................          } 
....................       } 
....................       Lectura=0; 
60F4:  BCF    3F.5
....................    }    
....................    else 
60F6:  BRA    6110
....................    { 
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
60F8:  MOVFF  20,109
60FC:  MOVLB  0
60FE:  CALL   1062
6102:  BCF    F8A.6
6104:  BCF    F93.6
6106:  BCF    3F.1
6108:  CLRF   5C
610A:  CLRF   5B
610C:  BCF    3F.0
610E:  MOVLB  1
....................    } 
....................  
....................    }        
6110:  GOTO   2C66
.................... } 
....................  
6114:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
