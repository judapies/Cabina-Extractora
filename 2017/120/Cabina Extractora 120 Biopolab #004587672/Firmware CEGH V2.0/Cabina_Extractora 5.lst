CCS PCH C Compiler, Version 4.104, 5967               30-oct.-18 08:21

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2017\120\Cabina Extractora 120 Biopolab #004587672\Firmware CEGH V2.0\Cabina_Extractora 5.lst

               ROM used: 14290 bytes (44%)
                         Largest free fragment is 18474
               RAM used: 76 (4%) at main() level
                         102 (5%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1758
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... // Lectura de sensor de vidrio. 
....................  
.................... // Esta version tiene la opcion de cargar los valores por defecto, cusndo el micro se pone a funcionar, despues de haber sido grabado 
.................... // Esto evita que los valores se reinicien con 255 en la EE 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
....................  
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
....................  
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,MCLR,NOPUT// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
088E:  CLRF   FEA
0890:  MOVLW  5D
0892:  MOVWF  FE9
0894:  MOVF   FEF,W
0896:  BZ    08B4
0898:  MOVLW  0F
089A:  MOVWF  01
089C:  CLRF   00
089E:  DECFSZ 00,F
08A0:  BRA    089E
08A2:  DECFSZ 01,F
08A4:  BRA    089C
08A6:  MOVLW  8F
08A8:  MOVWF  00
08AA:  DECFSZ 00,F
08AC:  BRA    08AA
08AE:  NOP   
08B0:  DECFSZ FEF,F
08B2:  BRA    0898
08B4:  RETLW  00
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_B3) // A5 
.................... #define   DOWN          input(PIN_B2) // E0 
.................... #define   RIGHT         input(PIN_B0) // E1 
.................... #define   LEFT          input(PIN_B1) // E2 
.................... #define   VIDRIOUP      !input(PIN_A4) 
.................... #define   VIDRIODN      !input(PIN_A3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Rele_on           output_bit(PIN_B7,1) 
.................... #define   Rele_off          output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
.................... #define   O1_on             output_bit(PIN_C6,1) 
.................... #define   O1_off            output_bit(PIN_C6,0) 
.................... #define   O2_on             output_bit(PIN_C7,1) 
.................... #define   O2_off            output_bit(PIN_C7,0) 
....................  
.................... signed int8 Menu=100, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... signed int8 Entero=0; 
.................... signed int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0,estadopantalla=0; 
.................... short pulsu=0,pulsr=0,pulsd=0,pulsl=0; 
.................... short flag_min=0,flag_hrs=0,lee_cursor=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'}; 
.................... char tecla='N'; 
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Cambio=0; 
.................... float setpoint=0.0; 
.................... short ModoSleep,inicio=0,Lectura=0,flag_iniciodamper=0,tiempo_purga=0,tiempo_ppurga=0,ver_ddram=0; 
.................... int16 tiempos=0,t_latencia=0; 
.................... unsigned int8 ult_ddram=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
*
09D4:  MOVLW  F0
09D6:  MOVWF  F95
....................       lcd.rw = 1; 
09D8:  BSF    F83.1
....................       delay_cycles(25); 
09DA:  MOVLW  08
09DC:  MOVWF  00
09DE:  DECFSZ 00,F
09E0:  BRA    09DE
....................       lcd.enable = 1; 
09E2:  BSF    F83.2
....................       delay_cycles(25); 
09E4:  MOVLW  08
09E6:  MOVWF  00
09E8:  DECFSZ 00,F
09EA:  BRA    09E8
....................       high = lcd.data; 
09EC:  SWAPF  F83,W
09EE:  ANDLW  0F
09F0:  MOVWF  59
....................       lcd.enable = 0; 
09F2:  BCF    F83.2
....................       delay_cycles(25); 
09F4:  MOVLW  08
09F6:  MOVWF  00
09F8:  DECFSZ 00,F
09FA:  BRA    09F8
....................       lcd.enable = 1; 
09FC:  BSF    F83.2
....................       delay_us(25); 
09FE:  MOVLW  63
0A00:  MOVWF  00
0A02:  DECFSZ 00,F
0A04:  BRA    0A02
0A06:  BRA    0A08
....................       low = lcd.data; 
0A08:  SWAPF  F83,W
0A0A:  ANDLW  0F
0A0C:  MOVWF  58
....................       lcd.enable = 0; 
0A0E:  BCF    F83.2
....................       set_tris_d(LCD_WRITE); 
0A10:  MOVLW  00
0A12:  MOVWF  F95
....................       return( (high<<4) | low); 
0A14:  SWAPF  59,W
0A16:  MOVWF  00
0A18:  MOVLW  F0
0A1A:  ANDWF  00,F
0A1C:  MOVF   00,W
0A1E:  IORWF  58,W
0A20:  MOVWF  01
.................... } 
0A22:  RETLW  00
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
08B6:  SWAPF  5E,W
08B8:  ANDLW  F0
08BA:  MOVWF  00
08BC:  MOVLW  0F
08BE:  ANDWF  F83,W
08C0:  IORWF  00,W
08C2:  MOVWF  F83
....................       delay_cycles(25); 
08C4:  MOVLW  08
08C6:  MOVWF  00
08C8:  DECFSZ 00,F
08CA:  BRA    08C8
....................       lcd.enable = 1; 
08CC:  BSF    F83.2
....................       delay_us(55); 
08CE:  MOVLW  DB
08D0:  MOVWF  00
08D2:  DECFSZ 00,F
08D4:  BRA    08D2
08D6:  BRA    08D8
....................       lcd.enable = 0; 
08D8:  BCF    F83.2
.................... } 
08DA:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n )  
....................  { 
....................  
....................       lcd.rs = 0; 
08DC:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
08DE:  MOVLW  02
08E0:  MOVWF  5D
08E2:  RCALL  088E
....................       lcd.rs = address; 
08E4:  BTFSS  5B.0
08E6:  BCF    F83.0
08E8:  BTFSC  5B.0
08EA:  BSF    F83.0
....................       delay_cycles(25); 
08EC:  MOVLW  08
08EE:  MOVWF  00
08F0:  DECFSZ 00,F
08F2:  BRA    08F0
....................       lcd.rw = 0; 
08F4:  BCF    F83.1
....................       delay_cycles(25); 
08F6:  MOVLW  08
08F8:  MOVWF  00
08FA:  DECFSZ 00,F
08FC:  BRA    08FA
....................       lcd.enable = 0; 
08FE:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0900:  SWAPF  5C,W
0902:  MOVWF  5D
0904:  MOVLW  0F
0906:  ANDWF  5D,F
0908:  MOVFF  5D,5E
090C:  RCALL  08B6
....................       lcd_send_nibble(n & 0xf); 
090E:  MOVF   5C,W
0910:  ANDLW  0F
0912:  MOVWF  5D
0914:  MOVWF  5E
0916:  RCALL  08B6
....................  } 
0918:  RETLW  00
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
091A:  MOVLW  00
091C:  MOVWF  F95
....................     lcd.rs = 0; 
091E:  BCF    F83.0
....................     lcd.rw = 0; 
0920:  BCF    F83.1
....................     lcd.enable = 0; 
0922:  BCF    F83.2
....................     delay_ms(15); 
0924:  MOVLW  0F
0926:  MOVWF  5D
0928:  RCALL  088E
....................     for(i=1;i<=3;++i) { 
092A:  MOVLW  01
092C:  MOVWF  4A
092E:  MOVF   4A,W
0930:  SUBLW  03
0932:  BNC   0944
....................        lcd_send_nibble(3); 
0934:  MOVLW  03
0936:  MOVWF  5E
0938:  RCALL  08B6
....................        delay_ms(5); 
093A:  MOVLW  05
093C:  MOVWF  5D
093E:  RCALL  088E
....................     } 
0940:  INCF   4A,F
0942:  BRA    092E
....................     lcd_send_nibble(2); 
0944:  MOVLW  02
0946:  MOVWF  5E
0948:  RCALL  08B6
....................     for(i=0;i<=3;++i) 
094A:  CLRF   4A
094C:  MOVF   4A,W
094E:  SUBLW  03
0950:  BNC   0970
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0952:  CLRF   03
0954:  MOVF   4A,W
0956:  MOVFF  FF2,4B
095A:  BCF    FF2.7
095C:  CALL   0096
0960:  BTFSC  4B.7
0962:  BSF    FF2.7
0964:  MOVWF  4B
0966:  CLRF   5B
0968:  MOVWF  5C
096A:  RCALL  08DC
096C:  INCF   4A,F
096E:  BRA    094C
.................... } 
0970:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0972:  MOVLW  01
0974:  SUBWF  59,W
0976:  ADDLW  FC
0978:  BC    0998
097A:  ADDLW  04
097C:  GOTO   09A8
....................      case 1 : address=0x80;break; 
0980:  MOVLW  80
0982:  MOVWF  5A
0984:  BRA    0998
....................      case 2 : address=0xc0;break; 
0986:  MOVLW  C0
0988:  MOVWF  5A
098A:  BRA    0998
....................      case 3 : address=0x94;break; 
098C:  MOVLW  94
098E:  MOVWF  5A
0990:  BRA    0998
....................      case 4 : address=0xd4;break; 
0992:  MOVLW  D4
0994:  MOVWF  5A
0996:  BRA    0998
....................    } 
....................    address+=x-1; 
0998:  MOVLW  01
099A:  SUBWF  58,W
099C:  ADDWF  5A,F
....................    lcd_send_byte(0,address); 
099E:  CLRF   5B
09A0:  MOVFF  5A,5C
09A4:  RCALL  08DC
.................... } 
09A6:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A24:  MOVF   57,W
0A26:  SUBLW  F1
0A28:  BNZ   0A2E
....................     c=238; 
0A2A:  MOVLW  EE
0A2C:  MOVWF  57
....................    switch (c) { 
0A2E:  MOVF   57,W
0A30:  XORLW  0C
0A32:  BZ    0A3E
0A34:  XORLW  06
0A36:  BZ    0A52
0A38:  XORLW  02
0A3A:  BZ    0A60
0A3C:  BRA    0A6A
....................      case '\f'   : lcd_send_byte(0,1); 
0A3E:  CLRF   5B
0A40:  MOVLW  01
0A42:  MOVWF  5C
0A44:  RCALL  08DC
....................                    lcdline=1; 
0A46:  MOVLW  01
0A48:  MOVWF  49
....................                    delay_ms(2); 
0A4A:  MOVLW  02
0A4C:  MOVWF  5D
0A4E:  RCALL  088E
....................                                            break; 
0A50:  BRA    0A76
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A52:  INCF   49,F
0A54:  MOVLW  01
0A56:  MOVWF  58
0A58:  MOVFF  49,59
0A5C:  RCALL  0972
0A5E:  BRA    0A76
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0A60:  CLRF   5B
0A62:  MOVLW  10
0A64:  MOVWF  5C
0A66:  RCALL  08DC
0A68:  BRA    0A76
....................      default     : lcd_send_byte(1,c);     break; 
0A6A:  MOVLW  01
0A6C:  MOVWF  5B
0A6E:  MOVFF  57,5C
0A72:  RCALL  08DC
0A74:  BRA    0A76
....................    } 
.................... lcd.rs=0; 
0A76:  BCF    F83.0
.................... ult_ddram = lcd_read_byte() & 0x7F; 
0A78:  RCALL  09D4
0A7A:  MOVF   01,W
0A7C:  ANDLW  7F
0A7E:  MOVWF  48
.................... } 
0A80:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... BYTE lee_DDRAM() 
....................  { 
....................   BYTE vcursor; 
....................   lcd.rs=0; 
*
0D94:  BCF    F83.0
....................   vcursor = lcd_read_byte() & 0x7F; 
0D96:  RCALL  09D4
0D98:  MOVF   01,W
0D9A:  ANDLW  7F
0D9C:  MOVWF  4A
....................   return(vcursor); 
0D9E:  MOVFF  4A,01
....................  } 
0DA2:  GOTO   1A6C (RETURN)
....................          
....................  
....................  
....................  
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
.................... } 
....................  
.................... // Esta rutina hay que depurarla, pero sera despues, cuando lo haga la implementamos para ver si se escribio 
.................... // Algo raro en la pantalla por ruido y asi refrescar 
....................  
.................... /* void shw_vcursor() 
.................... { 
....................  posic=get_cursor();   // get_cursor() esta en LCD420.c 
....................  lcd_gotoxy(18,1); 
....................  printf(lcd_putc,"%3u",posic); //Imprime en hexadecimal 
....................  delay_ms(1000); 
....................  // printf(lcd_putc,"\f"); 
....................   
.................... } */ 
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
0DA6:  MOVF   4A,F
0DA8:  BNZ   0DB0
....................    { 
....................       Pantalla_off; 
0DAA:  BCF    F8B.1
0DAC:  BCF    F94.1
....................    } 
....................    else 
0DAE:  BRA    0DB4
....................    { 
....................       Pantalla_on; 
0DB0:  BSF    F8B.1
0DB2:  BCF    F94.1
....................    } 
.................... } 
0DB4:  RETLW  00
....................  
.................... // ************************** Rutina unica para leer las teclas ********************* 
....................  
.................... void lee_pulsad() 
....................  { 
....................    pulsu=0;pulsr=0;pulsd=0;pulsl=0;tecla='N'; 
*
0EE4:  BCF    2F.3
0EE6:  BCF    2F.4
0EE8:  BCF    2F.5
0EEA:  BCF    2F.6
0EEC:  MOVLW  4E
0EEE:  MOVWF  35
....................     
....................    if(UP)//Si oprime hacia arriba 
0EF0:  BSF    F93.3
0EF2:  BTFSS  F81.3
0EF4:  BRA    0F1A
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0EF6:  MOVLW  14
0EF8:  MOVWF  5D
0EFA:  RCALL  088E
....................       if(UP) 
0EFC:  BSF    F93.3
0EFE:  BTFSS  F81.3
0F00:  BRA    0F18
....................       { 
....................        if(Flanco == 0) 
0F02:  BTFSC  2E.3
0F04:  BRA    0F18
....................         { 
....................          pulsu=1;  //Bandera que indica que la tecla UP, fue pulsada validamente 
0F06:  BSF    2F.3
....................          tecla='U'; 
0F08:  MOVLW  55
0F0A:  MOVWF  35
....................          Flanco=1;   //Flag que indica el ultimo estado del pulsador  
0F0C:  BSF    2E.3
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F0E:  MOVLW  01
0F10:  MOVWF  3E
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F12:  MOVLW  1E
0F14:  MOVWF  5D
0F16:  RCALL  088E
....................         } 
....................       } 
....................      }else{ 
0F18:  BRA    0F1C
....................          Flanco=0; //Se reasigna el estado del pulsador en 0 
0F1A:  BCF    2E.3
....................       } 
....................       
....................     if(RIGHT)//Si oprime hacia arriba 
0F1C:  BSF    F93.0
0F1E:  BTFSS  F81.0
0F20:  BRA    0F46
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0F22:  MOVLW  14
0F24:  MOVWF  5D
0F26:  RCALL  088E
....................       if(RIGHT) 
0F28:  BSF    F93.0
0F2A:  BTFSS  F81.0
0F2C:  BRA    0F44
....................       { 
....................        if(Flanco1 == 0) 
0F2E:  BTFSC  2E.4
0F30:  BRA    0F44
....................         { 
....................          pulsr=1;  //Bandera que indica que la tecla RIGHT, fue pulsada validamente 
0F32:  BSF    2F.4
....................          tecla='R'; 
0F34:  MOVLW  52
0F36:  MOVWF  35
....................          Flanco1=1;   //Flag que indica el ultimo estado del pulsador  
0F38:  BSF    2E.4
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F3A:  MOVLW  01
0F3C:  MOVWF  3E
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F3E:  MOVLW  1E
0F40:  MOVWF  5D
0F42:  RCALL  088E
....................         } 
....................       } 
....................      }else{ 
0F44:  BRA    0F48
....................          Flanco1=0; //Se reasigna el estado del pulsador en 0 
0F46:  BCF    2E.4
....................       } 
....................       
....................      if(DOWN)//Si oprime hacia arriba 
0F48:  BSF    F93.2
0F4A:  BTFSS  F81.2
0F4C:  BRA    0F72
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0F4E:  MOVLW  14
0F50:  MOVWF  5D
0F52:  RCALL  088E
....................       if(DOWN) 
0F54:  BSF    F93.2
0F56:  BTFSS  F81.2
0F58:  BRA    0F70
....................       { 
....................        if(Flanco2 == 0) 
0F5A:  BTFSC  2E.5
0F5C:  BRA    0F70
....................         { 
....................          pulsd=1;  //Bandera que indica que la tecla DOWN, fue pulsada validamente 
0F5E:  BSF    2F.5
....................          tecla='D'; 
0F60:  MOVLW  44
0F62:  MOVWF  35
....................          Flanco2=1;   //Flag que indica el ultimo estado del pulsador  
0F64:  BSF    2E.5
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F66:  MOVLW  01
0F68:  MOVWF  3E
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F6A:  MOVLW  1E
0F6C:  MOVWF  5D
0F6E:  RCALL  088E
....................         } 
....................       } 
....................      }else{ 
0F70:  BRA    0F74
....................          Flanco2=0; //Se reasigna el estado del pulsador en 0 
0F72:  BCF    2E.5
....................       } 
....................       
....................     if(LEFT)//Si oprime hacia arriba 
0F74:  BSF    F93.1
0F76:  BTFSS  F81.1
0F78:  BRA    0F9E
....................     { 
....................       delay_ms(20); //Este retardo descarta que haya sido un pico espureo, si es asi no se hace nada 
0F7A:  MOVLW  14
0F7C:  MOVWF  5D
0F7E:  RCALL  088E
....................       if(LEFT) 
0F80:  BSF    F93.1
0F82:  BTFSS  F81.1
0F84:  BRA    0F9C
....................       { 
....................        if(Flanco3 == 0) 
0F86:  BTFSC  2E.6
0F88:  BRA    0F9C
....................         { 
....................          pulsl=1;  //Bandera que indica que la tecla LEFT, fue pulsada validamente 
0F8A:  BSF    2F.6
....................          tecla='L'; 
0F8C:  MOVLW  4C
0F8E:  MOVWF  35
....................          Flanco3=1;   //Flag que indica el ultimo estado del pulsador  
0F90:  BSF    2E.6
....................          Cambio=1;   //Flag que indica que uno de los 4 pulsadores fue presionado validamente 
0F92:  MOVLW  01
0F94:  MOVWF  3E
....................          delay_ms(30); //Retardo de salida para la repeticion de las teclas y el antirebote 
0F96:  MOVLW  1E
0F98:  MOVWF  5D
0F9A:  RCALL  088E
....................         } 
....................       } 
....................      }else{ 
0F9C:  BRA    0FA0
....................          Flanco3=0; //Se reasigna el estado del pulsador en 0 
0F9E:  BCF    2E.6
....................       } 
....................       
....................  } 
0FA0:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   44,F
00BE:  BTFSC  FD8.2
00C0:  INCF   45,F
....................  
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   45,F
00C4:  BNZ   00CC
00C6:  MOVF   44,W
00C8:  SUBLW  C7
00CA:  BC    016C
....................    { 
....................       tiempos=0;tiemporeset++; 
00CC:  CLRF   45
00CE:  CLRF   44
00D0:  INCF   27,F
....................       Lectura=1; 
00D2:  BSF    30.4
....................       ver_ddram=1; 
00D4:  BSF    43.0
....................       lee_cursor=1; 
00D6:  BSF    30.1
....................        
....................       if(flag_latencia){ 
00D8:  BTFSS  2E.7
00DA:  BRA    00E2
....................          t_latencia++; 
00DC:  INCF   46,F
00DE:  BTFSC  FD8.2
00E0:  INCF   47,F
....................       } 
....................           
....................       if(estadomv==1 && flag_filtro==1) 
00E2:  BTFSS  2E.1
00E4:  BRA    010C
00E6:  BTFSS  2F.1
00E8:  BRA    010C
....................       {   
....................          segundos++; 
00EA:  INCF   24,F
....................          if(segundos>=60) 
00EC:  BTFSC  24.7
00EE:  BRA    00FC
00F0:  MOVF   24,W
00F2:  SUBLW  3B
00F4:  BC    00FC
....................          { 
....................             segundos=0;minutos++;flag_min=1; 
00F6:  CLRF   24
00F8:  INCF   25,F
00FA:  BSF    2F.7
....................          } 
....................           
....................          if(minutos>=60) 
00FC:  BTFSC  25.7
00FE:  BRA    010C
0100:  MOVF   25,W
0102:  SUBLW  3B
0104:  BC    010C
....................          { 
....................             minutos=0;horas++;flag_hrs=1; 
0106:  CLRF   25
0108:  INCF   26,F
010A:  BSF    30.0
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1)   // Aqui se decrementa el tiempo de purga, cargado de la eeprom 
010C:  BTFSS  30.6
010E:  BRA    0146
....................       { 
....................          if(purga_segundos>0) 
0110:  BTFSC  28.7
0112:  BRA    011E
0114:  MOVF   28,W
0116:  SUBLW  00
0118:  BC    011E
....................          { 
....................           
....................             purga_segundos--; 
011A:  DECF   28,F
....................          } 
....................          else 
011C:  BRA    0146
....................          { 
....................             if(purga_minutos>0) 
011E:  BTFSC  21.7
0120:  BRA    0130
0122:  MOVF   21,W
0124:  SUBLW  00
0126:  BC    0130
....................             { 
....................                purga_minutos--; 
0128:  DECF   21,F
....................                purga_segundos=59; 
012A:  MOVLW  3B
012C:  MOVWF  28
....................             } 
....................             else 
012E:  BRA    0146
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20;Cambio=1; // Aqui se sale al menu20 despues de la purga 
0130:  BCF    30.6
0132:  BSF    F8A.5
0134:  BCF    F93.5
0136:  MOVLW  14
0138:  MOVWF  16
013A:  MOVLW  01
013C:  MOVWF  3E
....................                Luz_Blanca_on; 
013E:  BSF    F8A.4
0140:  BCF    F93.4
....................                estadomv=1; 
0142:  BSF    2E.1
....................                estadofl=1; 
0144:  BSF    2E.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
0146:  BTFSS  30.7
0148:  BRA    016C
....................       { 
....................          if(ppurga_segundos>0) 
014A:  BTFSC  2A.7
014C:  BRA    0158
014E:  MOVF   2A,W
0150:  SUBLW  00
0152:  BC    0158
....................          { 
....................             ppurga_segundos--; 
0154:  DECF   2A,F
....................          } 
....................          else 
0156:  BRA    016C
....................          { 
....................             if(ppurga_minutos>0) 
0158:  BTFSC  2C.7
015A:  BRA    016A
015C:  MOVF   2C,W
015E:  SUBLW  00
0160:  BC    016A
....................             { 
....................                ppurga_minutos--; 
0162:  DECF   2C,F
....................                ppurga_segundos=59; 
0164:  MOVLW  3B
0166:  MOVWF  2A
....................             } 
....................             else 
0168:  BRA    016C
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
016A:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
016C:  BCF    F9E.0
016E:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
0FA2:  DECFSZ 4B,W
0FA4:  BRA    0FD6
....................    {if(estadoalarma==0) 
0FA6:  BTFSC  2E.2
0FA8:  BRA    0FBE
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0FAA:  MOVLW  02
0FAC:  MOVWF  58
0FAE:  MOVFF  4C,59
0FB2:  RCALL  0972
0FB4:  MOVLW  72
0FB6:  MOVWF  FF6
0FB8:  MOVLW  01
0FBA:  MOVWF  FF7
0FBC:  RCALL  0DB6
....................    if(estadoalarma==1) 
0FBE:  BTFSS  2E.2
0FC0:  BRA    0FD6
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0FC2:  MOVLW  02
0FC4:  MOVWF  58
0FC6:  MOVFF  4C,59
0FCA:  RCALL  0972
0FCC:  MOVLW  86
0FCE:  MOVWF  FF6
0FD0:  MOVLW  01
0FD2:  MOVWF  FF7
0FD4:  RCALL  0DB6
....................    } 
....................     
....................    if(x==2) 
0FD6:  MOVF   4B,W
0FD8:  SUBLW  02
0FDA:  BNZ   0FF0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
0FDC:  MOVLW  02
0FDE:  MOVWF  58
0FE0:  MOVFF  4C,59
0FE4:  RCALL  0972
0FE6:  MOVLW  9A
0FE8:  MOVWF  FF6
0FEA:  MOVLW  01
0FEC:  MOVWF  FF7
0FEE:  RCALL  0DB6
....................     
....................    if(x==3) 
0FF0:  MOVF   4B,W
0FF2:  SUBLW  03
0FF4:  BNZ   100A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Vida Filtro        ");} 
0FF6:  MOVLW  02
0FF8:  MOVWF  58
0FFA:  MOVFF  4C,59
0FFE:  RCALL  0972
1000:  MOVLW  AE
1002:  MOVWF  FF6
1004:  MOVLW  01
1006:  MOVWF  FF7
1008:  RCALL  0DB6
....................     
....................    if(x==4) 
100A:  MOVF   4B,W
100C:  SUBLW  04
100E:  BNZ   1024
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1010:  MOVLW  02
1012:  MOVWF  58
1014:  MOVFF  4C,59
1018:  RCALL  0972
101A:  MOVLW  C2
101C:  MOVWF  FF6
101E:  MOVLW  01
1020:  MOVWF  FF7
1022:  RCALL  0DB6
....................        
....................    if(x==5) 
1024:  MOVF   4B,W
1026:  SUBLW  05
1028:  BNZ   103E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
102A:  MOVLW  02
102C:  MOVWF  58
102E:  MOVFF  4C,59
1032:  RCALL  0972
1034:  MOVLW  D6
1036:  MOVWF  FF6
1038:  MOVLW  01
103A:  MOVWF  FF7
103C:  RCALL  0DB6
....................     
....................    if(x==6) 
103E:  MOVF   4B,W
1040:  SUBLW  06
1042:  BNZ   1058
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
1044:  MOVLW  02
1046:  MOVWF  58
1048:  MOVFF  4C,59
104C:  RCALL  0972
104E:  MOVLW  EA
1050:  MOVWF  FF6
1052:  MOVLW  01
1054:  MOVWF  FF7
1056:  RCALL  0DB6
.................... } 
1058:  RETLW  00
....................  
.................... void set_default() 
....................  { 
....................    write_eeprom(0,0);delay_ms(20);   // Contraseña 0 = 0 
*
0A82:  CLRF   FA9
0A84:  CLRF   FA8
0A86:  BCF    FA6.6
0A88:  BCF    FA6.7
0A8A:  BSF    FA6.2
0A8C:  MOVF   FF2,W
0A8E:  MOVWF  00
0A90:  BCF    FF2.7
0A92:  MOVLB  F
0A94:  MOVLW  55
0A96:  MOVWF  FA7
0A98:  MOVLW  AA
0A9A:  MOVWF  FA7
0A9C:  BSF    FA6.1
0A9E:  BTFSC  FA6.1
0AA0:  BRA    0A9E
0AA2:  BCF    FA6.2
0AA4:  MOVF   00,W
0AA6:  IORWF  FF2,F
0AA8:  MOVLW  14
0AAA:  MOVWF  5D
0AAC:  MOVLB  0
0AAE:  RCALL  088E
....................    write_eeprom(1,0);delay_ms(20);   // Contraseña 1 = 0 
0AB0:  MOVLW  01
0AB2:  MOVWF  FA9
0AB4:  CLRF   FA8
0AB6:  BCF    FA6.6
0AB8:  BCF    FA6.7
0ABA:  BSF    FA6.2
0ABC:  MOVF   FF2,W
0ABE:  MOVWF  00
0AC0:  BCF    FF2.7
0AC2:  MOVLB  F
0AC4:  MOVLW  55
0AC6:  MOVWF  FA7
0AC8:  MOVLW  AA
0ACA:  MOVWF  FA7
0ACC:  BSF    FA6.1
0ACE:  BTFSC  FA6.1
0AD0:  BRA    0ACE
0AD2:  BCF    FA6.2
0AD4:  MOVF   00,W
0AD6:  IORWF  FF2,F
0AD8:  MOVLW  14
0ADA:  MOVWF  5D
0ADC:  MOVLB  0
0ADE:  RCALL  088E
....................    write_eeprom(2,0);delay_ms(20);   // Contraseña 2 = 0 
0AE0:  MOVLW  02
0AE2:  MOVWF  FA9
0AE4:  CLRF   FA8
0AE6:  BCF    FA6.6
0AE8:  BCF    FA6.7
0AEA:  BSF    FA6.2
0AEC:  MOVF   FF2,W
0AEE:  MOVWF  00
0AF0:  BCF    FF2.7
0AF2:  MOVLB  F
0AF4:  MOVLW  55
0AF6:  MOVWF  FA7
0AF8:  MOVLW  AA
0AFA:  MOVWF  FA7
0AFC:  BSF    FA6.1
0AFE:  BTFSC  FA6.1
0B00:  BRA    0AFE
0B02:  BCF    FA6.2
0B04:  MOVF   00,W
0B06:  IORWF  FF2,F
0B08:  MOVLW  14
0B0A:  MOVWF  5D
0B0C:  MOVLB  0
0B0E:  RCALL  088E
....................    write_eeprom(3,0);delay_ms(20);   // Contraseña 3 = 0 
0B10:  MOVLW  03
0B12:  MOVWF  FA9
0B14:  CLRF   FA8
0B16:  BCF    FA6.6
0B18:  BCF    FA6.7
0B1A:  BSF    FA6.2
0B1C:  MOVF   FF2,W
0B1E:  MOVWF  00
0B20:  BCF    FF2.7
0B22:  MOVLB  F
0B24:  MOVLW  55
0B26:  MOVWF  FA7
0B28:  MOVLW  AA
0B2A:  MOVWF  FA7
0B2C:  BSF    FA6.1
0B2E:  BTFSC  FA6.1
0B30:  BRA    0B2E
0B32:  BCF    FA6.2
0B34:  MOVF   00,W
0B36:  IORWF  FF2,F
0B38:  MOVLW  14
0B3A:  MOVWF  5D
0B3C:  MOVLB  0
0B3E:  RCALL  088E
....................     
....................    write_eeprom(5,1);delay_ms(20);   // Estado de alarma = 1 
0B40:  MOVLW  05
0B42:  MOVWF  FA9
0B44:  MOVLW  01
0B46:  MOVWF  FA8
0B48:  BCF    FA6.6
0B4A:  BCF    FA6.7
0B4C:  BSF    FA6.2
0B4E:  MOVF   FF2,W
0B50:  MOVWF  00
0B52:  BCF    FF2.7
0B54:  MOVLB  F
0B56:  MOVLW  55
0B58:  MOVWF  FA7
0B5A:  MOVLW  AA
0B5C:  MOVWF  FA7
0B5E:  BSF    FA6.1
0B60:  BTFSC  FA6.1
0B62:  BRA    0B60
0B64:  BCF    FA6.2
0B66:  MOVF   00,W
0B68:  IORWF  FF2,F
0B6A:  MOVLW  14
0B6C:  MOVWF  5D
0B6E:  MOVLB  0
0B70:  RCALL  088E
....................     
....................    write_eeprom(20,1);delay_ms(20);  // Minutos de Tiempo de Purga = 1 
0B72:  MOVLW  14
0B74:  MOVWF  FA9
0B76:  MOVLW  01
0B78:  MOVWF  FA8
0B7A:  BCF    FA6.6
0B7C:  BCF    FA6.7
0B7E:  BSF    FA6.2
0B80:  MOVF   FF2,W
0B82:  MOVWF  00
0B84:  BCF    FF2.7
0B86:  MOVLB  F
0B88:  MOVLW  55
0B8A:  MOVWF  FA7
0B8C:  MOVLW  AA
0B8E:  MOVWF  FA7
0B90:  BSF    FA6.1
0B92:  BTFSC  FA6.1
0B94:  BRA    0B92
0B96:  BCF    FA6.2
0B98:  MOVF   00,W
0B9A:  IORWF  FF2,F
0B9C:  MOVLW  14
0B9E:  MOVWF  5D
0BA0:  MOVLB  0
0BA2:  RCALL  088E
....................    write_eeprom(21,0);delay_ms(20);  // Segundos de Tiempo de Purga = 0 
0BA4:  MOVLW  15
0BA6:  MOVWF  FA9
0BA8:  CLRF   FA8
0BAA:  BCF    FA6.6
0BAC:  BCF    FA6.7
0BAE:  BSF    FA6.2
0BB0:  MOVF   FF2,W
0BB2:  MOVWF  00
0BB4:  BCF    FF2.7
0BB6:  MOVLB  F
0BB8:  MOVLW  55
0BBA:  MOVWF  FA7
0BBC:  MOVLW  AA
0BBE:  MOVWF  FA7
0BC0:  BSF    FA6.1
0BC2:  BTFSC  FA6.1
0BC4:  BRA    0BC2
0BC6:  BCF    FA6.2
0BC8:  MOVF   00,W
0BCA:  IORWF  FF2,F
0BCC:  MOVLW  14
0BCE:  MOVWF  5D
0BD0:  MOVLB  0
0BD2:  RCALL  088E
....................    write_eeprom(22,1);delay_ms(20);  // Minutos de Tiempo de PostPurga = 1 
0BD4:  MOVLW  16
0BD6:  MOVWF  FA9
0BD8:  MOVLW  01
0BDA:  MOVWF  FA8
0BDC:  BCF    FA6.6
0BDE:  BCF    FA6.7
0BE0:  BSF    FA6.2
0BE2:  MOVF   FF2,W
0BE4:  MOVWF  00
0BE6:  BCF    FF2.7
0BE8:  MOVLB  F
0BEA:  MOVLW  55
0BEC:  MOVWF  FA7
0BEE:  MOVLW  AA
0BF0:  MOVWF  FA7
0BF2:  BSF    FA6.1
0BF4:  BTFSC  FA6.1
0BF6:  BRA    0BF4
0BF8:  BCF    FA6.2
0BFA:  MOVF   00,W
0BFC:  IORWF  FF2,F
0BFE:  MOVLW  14
0C00:  MOVWF  5D
0C02:  MOVLB  0
0C04:  RCALL  088E
....................    write_eeprom(23,0);delay_ms(20);  // Segundos de Tiempo de PostPurga = 0 
0C06:  MOVLW  17
0C08:  MOVWF  FA9
0C0A:  CLRF   FA8
0C0C:  BCF    FA6.6
0C0E:  BCF    FA6.7
0C10:  BSF    FA6.2
0C12:  MOVF   FF2,W
0C14:  MOVWF  00
0C16:  BCF    FF2.7
0C18:  MOVLB  F
0C1A:  MOVLW  55
0C1C:  MOVWF  FA7
0C1E:  MOVLW  AA
0C20:  MOVWF  FA7
0C22:  BSF    FA6.1
0C24:  BTFSC  FA6.1
0C26:  BRA    0C24
0C28:  BCF    FA6.2
0C2A:  MOVF   00,W
0C2C:  IORWF  FF2,F
0C2E:  MOVLW  14
0C30:  MOVWF  5D
0C32:  MOVLB  0
0C34:  RCALL  088E
....................     
....................    write_eeprom(40,60);delay_ms(20); // Setpoint de vida del filtro = 60 
0C36:  MOVLW  28
0C38:  MOVWF  FA9
0C3A:  MOVLW  3C
0C3C:  MOVWF  FA8
0C3E:  BCF    FA6.6
0C40:  BCF    FA6.7
0C42:  BSF    FA6.2
0C44:  MOVF   FF2,W
0C46:  MOVWF  00
0C48:  BCF    FF2.7
0C4A:  MOVLB  F
0C4C:  MOVLW  55
0C4E:  MOVWF  FA7
0C50:  MOVLW  AA
0C52:  MOVWF  FA7
0C54:  BSF    FA6.1
0C56:  BTFSC  FA6.1
0C58:  BRA    0C56
0C5A:  BCF    FA6.2
0C5C:  MOVF   00,W
0C5E:  IORWF  FF2,F
0C60:  MOVLW  14
0C62:  MOVWF  5D
0C64:  MOVLB  0
0C66:  RCALL  088E
....................     
....................    write_eeprom(70,0);delay_ms(20);  // Segundos de uso del filtro = 0 
0C68:  MOVLW  46
0C6A:  MOVWF  FA9
0C6C:  CLRF   FA8
0C6E:  BCF    FA6.6
0C70:  BCF    FA6.7
0C72:  BSF    FA6.2
0C74:  MOVF   FF2,W
0C76:  MOVWF  00
0C78:  BCF    FF2.7
0C7A:  MOVLB  F
0C7C:  MOVLW  55
0C7E:  MOVWF  FA7
0C80:  MOVLW  AA
0C82:  MOVWF  FA7
0C84:  BSF    FA6.1
0C86:  BTFSC  FA6.1
0C88:  BRA    0C86
0C8A:  BCF    FA6.2
0C8C:  MOVF   00,W
0C8E:  IORWF  FF2,F
0C90:  MOVLW  14
0C92:  MOVWF  5D
0C94:  MOVLB  0
0C96:  RCALL  088E
....................    write_eeprom(71,0);delay_ms(20);  // Minutos de uso del filtro = 0 
0C98:  MOVLW  47
0C9A:  MOVWF  FA9
0C9C:  CLRF   FA8
0C9E:  BCF    FA6.6
0CA0:  BCF    FA6.7
0CA2:  BSF    FA6.2
0CA4:  MOVF   FF2,W
0CA6:  MOVWF  00
0CA8:  BCF    FF2.7
0CAA:  MOVLB  F
0CAC:  MOVLW  55
0CAE:  MOVWF  FA7
0CB0:  MOVLW  AA
0CB2:  MOVWF  FA7
0CB4:  BSF    FA6.1
0CB6:  BTFSC  FA6.1
0CB8:  BRA    0CB6
0CBA:  BCF    FA6.2
0CBC:  MOVF   00,W
0CBE:  IORWF  FF2,F
0CC0:  MOVLW  14
0CC2:  MOVWF  5D
0CC4:  MOVLB  0
0CC6:  RCALL  088E
....................    write_eeprom(72,0);delay_ms(20);  // Horas de uso del filtro = 0 
0CC8:  MOVLW  48
0CCA:  MOVWF  FA9
0CCC:  CLRF   FA8
0CCE:  BCF    FA6.6
0CD0:  BCF    FA6.7
0CD2:  BSF    FA6.2
0CD4:  MOVF   FF2,W
0CD6:  MOVWF  00
0CD8:  BCF    FF2.7
0CDA:  MOVLB  F
0CDC:  MOVLW  55
0CDE:  MOVWF  FA7
0CE0:  MOVLW  AA
0CE2:  MOVWF  FA7
0CE4:  BSF    FA6.1
0CE6:  BTFSC  FA6.1
0CE8:  BRA    0CE6
0CEA:  BCF    FA6.2
0CEC:  MOVF   00,W
0CEE:  IORWF  FF2,F
0CF0:  MOVLW  14
0CF2:  MOVWF  5D
0CF4:  MOVLB  0
0CF6:  RCALL  088E
....................    write_eeprom(73,1);delay_ms(20);  // Flag de uso del filtro = 1 
0CF8:  MOVLW  49
0CFA:  MOVWF  FA9
0CFC:  MOVLW  01
0CFE:  MOVWF  FA8
0D00:  BCF    FA6.6
0D02:  BCF    FA6.7
0D04:  BSF    FA6.2
0D06:  MOVF   FF2,W
0D08:  MOVWF  00
0D0A:  BCF    FF2.7
0D0C:  MOVLB  F
0D0E:  MOVLW  55
0D10:  MOVWF  FA7
0D12:  MOVLW  AA
0D14:  MOVWF  FA7
0D16:  BSF    FA6.1
0D18:  BTFSC  FA6.1
0D1A:  BRA    0D18
0D1C:  BCF    FA6.2
0D1E:  MOVF   00,W
0D20:  IORWF  FF2,F
0D22:  MOVLW  14
0D24:  MOVWF  5D
0D26:  MOVLB  0
0D28:  RCALL  088E
....................  
....................    write_eeprom(80,0x27);delay_ms(20); //Testigo de quer ya se grabaron los valores = 0x27 
0D2A:  MOVLW  50
0D2C:  MOVWF  FA9
0D2E:  MOVLW  27
0D30:  MOVWF  FA8
0D32:  BCF    FA6.6
0D34:  BCF    FA6.7
0D36:  BSF    FA6.2
0D38:  MOVF   FF2,W
0D3A:  MOVWF  00
0D3C:  BCF    FF2.7
0D3E:  MOVLB  F
0D40:  MOVLW  55
0D42:  MOVWF  FA7
0D44:  MOVLW  AA
0D46:  MOVWF  FA7
0D48:  BSF    FA6.1
0D4A:  BTFSC  FA6.1
0D4C:  BRA    0D4A
0D4E:  BCF    FA6.2
0D50:  MOVF   00,W
0D52:  IORWF  FF2,F
0D54:  MOVLW  14
0D56:  MOVWF  5D
0D58:  MOVLB  0
0D5A:  RCALL  088E
....................  } 
0D5C:  RETLW  00
....................  
....................  
....................  
.................... void main () 
.................... { 
*
1758:  CLRF   FF8
175A:  BCF    FD0.7
175C:  BSF    07.7
175E:  CLRF   FEA
1760:  CLRF   FE9
1762:  MOVLW  64
1764:  MOVWF  16
1766:  MOVLW  07
1768:  MOVWF  17
176A:  MOVLW  02
176C:  MOVWF  18
176E:  MOVLW  0B
1770:  MOVWF  19
1772:  MOVLW  02
1774:  MOVWF  1A
1776:  MOVLW  03
1778:  MOVWF  1B
177A:  MOVLW  02
177C:  MOVWF  1C
177E:  MOVWF  1D
1780:  MOVLW  04
1782:  MOVWF  1E
1784:  MOVLW  0A
1786:  MOVWF  1F
1788:  MOVLW  01
178A:  MOVWF  20
178C:  CLRF   21
178E:  CLRF   22
1790:  CLRF   23
1792:  CLRF   24
1794:  CLRF   25
1796:  CLRF   26
1798:  CLRF   27
179A:  CLRF   28
179C:  CLRF   29
179E:  CLRF   2A
17A0:  CLRF   2B
17A2:  CLRF   2C
17A4:  CLRF   2D
17A6:  BCF    2E.0
17A8:  BCF    2E.1
17AA:  BCF    2E.2
17AC:  BCF    2E.3
17AE:  BCF    2E.4
17B0:  BCF    2E.5
17B2:  BCF    2E.6
17B4:  BCF    2E.7
17B6:  BCF    2F.0
17B8:  BCF    2F.1
17BA:  BCF    2F.2
17BC:  BCF    2F.3
17BE:  BCF    2F.4
17C0:  BCF    2F.5
17C2:  BCF    2F.6
17C4:  BCF    2F.7
17C6:  BCF    30.0
17C8:  BCF    30.1
17CA:  CLRF   31
17CC:  MOVLW  4E
17CE:  MOVWF  35
17D0:  CLRF   3E
17D2:  CLRF   42
17D4:  CLRF   41
17D6:  CLRF   40
17D8:  CLRF   3F
17DA:  BCF    30.3
17DC:  BCF    30.4
17DE:  BCF    30.5
17E0:  BCF    30.6
17E2:  BCF    30.7
17E4:  BCF    43.0
17E6:  CLRF   45
17E8:  CLRF   44
17EA:  CLRF   47
17EC:  CLRF   46
17EE:  CLRF   48
17F0:  MOVF   FC1,W
17F2:  ANDLW  C0
17F4:  IORLW  0F
17F6:  MOVWF  FC1
17F8:  MOVLW  07
17FA:  MOVWF  FB4
17FC:  MOVLW  3E
17FE:  MOVWF  32
1800:  MOVLW  20
1802:  MOVWF  33
1804:  MOVLW  5E
1806:  MOVWF  34
1808:  CLRF   36
180A:  CLRF   37
180C:  CLRF   38
180E:  CLRF   39
1810:  CLRF   3A
1812:  CLRF   3B
1814:  CLRF   3C
1816:  CLRF   3D
....................    setup_adc_ports(AN0_TO_AN3); 
1818:  MOVF   FC1,W
181A:  ANDLW  C0
181C:  IORLW  0B
181E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1820:  BCF    FC0.0
1822:  BSF    FC0.1
1824:  BCF    FC0.2
1826:  BSF    FC0.7
1828:  BSF    FC2.0
....................    output_d(0);  
182A:  CLRF   F95
182C:  CLRF   F8C
....................    ModoSleep=1; 
182E:  BSF    30.2
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1830:  MOVLW  85
1832:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1834:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
1836:  MOVLW  00
1838:  IORLW  05
183A:  MOVWF  FCA
183C:  MOVLW  FF
183E:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
1840:  BCF    F94.2
1842:  BCF    F8B.2
1844:  BCF    F96.6
1846:  MOVLW  0C
1848:  MOVWF  FBD
184A:  CLRF   FB7
184C:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
184E:  MOVLW  C0
1850:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
1852:  CLRF   FBE
....................    lcd_init(); 
1854:  CALL   091A
....................    printf(lcd_putc,"\f"); 
1858:  MOVLW  0C
185A:  MOVWF  57
185C:  CALL   0A24
....................     
....................    if(read_eeprom(80)!=0x27) 
1860:  MOVFF  FF2,4A
1864:  BCF    FF2.7
1866:  MOVLW  50
1868:  MOVWF  FA9
186A:  BCF    FA6.6
186C:  BCF    FA6.7
186E:  BSF    FA6.0
1870:  MOVF   FA8,W
1872:  BTFSC  4A.7
1874:  BSF    FF2.7
1876:  SUBLW  27
1878:  BZ    187E
....................    set_default(); 
187A:  CALL   0A82
....................     
....................        
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
187E:  MOVFF  FF2,4A
1882:  BCF    FF2.7
1884:  CLRF   FA9
1886:  BCF    FA6.6
1888:  BCF    FA6.7
188A:  BSF    FA6.0
188C:  MOVF   FA8,W
188E:  BTFSC  4A.7
1890:  BSF    FF2.7
1892:  MOVWF  3A
1894:  MOVLW  14
1896:  MOVWF  5D
1898:  CALL   088E
189C:  MOVFF  FF2,4A
18A0:  BCF    FF2.7
18A2:  MOVLW  01
18A4:  MOVWF  FA9
18A6:  BCF    FA6.6
18A8:  BCF    FA6.7
18AA:  BSF    FA6.0
18AC:  MOVF   FA8,W
18AE:  BTFSC  4A.7
18B0:  BSF    FF2.7
18B2:  MOVWF  3B
18B4:  MOVLW  14
18B6:  MOVWF  5D
18B8:  CALL   088E
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
18BC:  MOVFF  FF2,4A
18C0:  BCF    FF2.7
18C2:  MOVLW  02
18C4:  MOVWF  FA9
18C6:  BCF    FA6.6
18C8:  BCF    FA6.7
18CA:  BSF    FA6.0
18CC:  MOVF   FA8,W
18CE:  BTFSC  4A.7
18D0:  BSF    FF2.7
18D2:  MOVWF  3C
18D4:  MOVLW  14
18D6:  MOVWF  5D
18D8:  CALL   088E
18DC:  MOVFF  FF2,4A
18E0:  BCF    FF2.7
18E2:  MOVLW  03
18E4:  MOVWF  FA9
18E6:  BCF    FA6.6
18E8:  BCF    FA6.7
18EA:  BSF    FA6.0
18EC:  MOVF   FA8,W
18EE:  BTFSC  4A.7
18F0:  BSF    FF2.7
18F2:  MOVWF  3D
18F4:  MOVLW  14
18F6:  MOVWF  5D
18F8:  CALL   088E
....................    estadoalarma=read_eeprom(5); 
18FC:  MOVFF  FF2,4A
1900:  BCF    FF2.7
1902:  MOVLW  05
1904:  MOVWF  FA9
1906:  BCF    FA6.6
1908:  BCF    FA6.7
190A:  BSF    FA6.0
190C:  MOVF   FA8,W
190E:  BTFSC  4A.7
1910:  BSF    FF2.7
1912:  MOVWF  01
1914:  BCF    2E.2
1916:  BTFSC  01.0
1918:  BSF    2E.2
....................    delay_ms(20); 
191A:  MOVLW  14
191C:  MOVWF  5D
191E:  CALL   088E
....................  
....................    purga_minutos=read_eeprom(20); 
1922:  MOVFF  FF2,4A
1926:  BCF    FF2.7
1928:  MOVLW  14
192A:  MOVWF  FA9
192C:  BCF    FA6.6
192E:  BCF    FA6.7
1930:  BSF    FA6.0
1932:  MOVF   FA8,W
1934:  BTFSC  4A.7
1936:  BSF    FF2.7
1938:  MOVWF  21
....................    delay_ms(20); 
193A:  MOVLW  14
193C:  MOVWF  5D
193E:  CALL   088E
....................    purga_segundos=read_eeprom(21); 
1942:  MOVFF  FF2,4A
1946:  BCF    FF2.7
1948:  MOVLW  15
194A:  MOVWF  FA9
194C:  BCF    FA6.6
194E:  BCF    FA6.7
1950:  BSF    FA6.0
1952:  MOVF   FA8,W
1954:  BTFSC  4A.7
1956:  BSF    FF2.7
1958:  MOVWF  28
....................    delay_ms(20); 
195A:  MOVLW  14
195C:  MOVWF  5D
195E:  CALL   088E
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
1962:  MOVFF  21,22
1966:  MOVFF  28,29
....................    ppurga_minutos=read_eeprom(22); 
196A:  MOVFF  FF2,4A
196E:  BCF    FF2.7
1970:  MOVLW  16
1972:  MOVWF  FA9
1974:  BCF    FA6.6
1976:  BCF    FA6.7
1978:  BSF    FA6.0
197A:  MOVF   FA8,W
197C:  BTFSC  4A.7
197E:  BSF    FF2.7
1980:  MOVWF  2C
....................    delay_ms(20); 
1982:  MOVLW  14
1984:  MOVWF  5D
1986:  CALL   088E
....................    ppurga_segundos=read_eeprom(23); 
198A:  MOVFF  FF2,4A
198E:  BCF    FF2.7
1990:  MOVLW  17
1992:  MOVWF  FA9
1994:  BCF    FA6.6
1996:  BCF    FA6.7
1998:  BSF    FA6.0
199A:  MOVF   FA8,W
199C:  BTFSC  4A.7
199E:  BSF    FF2.7
19A0:  MOVWF  2A
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
19A2:  MOVFF  2C,2D
19A6:  MOVFF  2A,2B
....................           
....................    setpoint=read_eeprom(40);                                                                                                                                                                                                                                                
19AA:  MOVFF  FF2,4A
19AE:  BCF    FF2.7
19B0:  MOVLW  28
19B2:  MOVWF  FA9
19B4:  BCF    FA6.6
19B6:  BCF    FA6.7
19B8:  BSF    FA6.0
19BA:  MOVF   FA8,W
19BC:  BTFSC  4A.7
19BE:  BSF    FF2.7
19C0:  CLRF   4C
19C2:  MOVWF  4B
19C4:  CALL   0D5E
19C8:  MOVFF  03,42
19CC:  MOVFF  02,41
19D0:  MOVFF  01,40
19D4:  MOVFF  00,3F
....................    delay_ms(20); 
19D8:  MOVLW  14
19DA:  MOVWF  5D
19DC:  CALL   088E
....................    segundos=read_eeprom(70); 
19E0:  MOVFF  FF2,4A
19E4:  BCF    FF2.7
19E6:  MOVLW  46
19E8:  MOVWF  FA9
19EA:  BCF    FA6.6
19EC:  BCF    FA6.7
19EE:  BSF    FA6.0
19F0:  MOVF   FA8,W
19F2:  BTFSC  4A.7
19F4:  BSF    FF2.7
19F6:  MOVWF  24
....................    delay_ms(20); 
19F8:  MOVLW  14
19FA:  MOVWF  5D
19FC:  CALL   088E
....................    minutos=read_eeprom(71); 
1A00:  MOVFF  FF2,4A
1A04:  BCF    FF2.7
1A06:  MOVLW  47
1A08:  MOVWF  FA9
1A0A:  BCF    FA6.6
1A0C:  BCF    FA6.7
1A0E:  BSF    FA6.0
1A10:  MOVF   FA8,W
1A12:  BTFSC  4A.7
1A14:  BSF    FF2.7
1A16:  MOVWF  25
....................    delay_ms(20); 
1A18:  MOVLW  14
1A1A:  MOVWF  5D
1A1C:  CALL   088E
....................    horas=read_eeprom(72); 
1A20:  MOVFF  FF2,4A
1A24:  BCF    FF2.7
1A26:  MOVLW  48
1A28:  MOVWF  FA9
1A2A:  BCF    FA6.6
1A2C:  BCF    FA6.7
1A2E:  BSF    FA6.0
1A30:  MOVF   FA8,W
1A32:  BTFSC  4A.7
1A34:  BSF    FF2.7
1A36:  MOVWF  26
....................    delay_ms(20); 
1A38:  MOVLW  14
1A3A:  MOVWF  5D
1A3C:  CALL   088E
....................    flag_filtro=read_eeprom(73); 
1A40:  MOVFF  FF2,4A
1A44:  BCF    FF2.7
1A46:  MOVLW  49
1A48:  MOVWF  FA9
1A4A:  BCF    FA6.6
1A4C:  BCF    FA6.7
1A4E:  BSF    FA6.0
1A50:  MOVF   FA8,W
1A52:  BTFSC  4A.7
1A54:  BSF    FF2.7
1A56:  MOVWF  01
1A58:  BCF    2F.1
1A5A:  BTFSC  01.0
1A5C:  BSF    2F.1
....................    Menu=200; 
1A5E:  MOVLW  C8
1A60:  MOVWF  16
....................    
....................    while(true){ 
....................     
....................    if(ver_ddram==1)                // Inicio de funcion que verifica si entraron ruidos a la pantalla .... 
1A62:  BTFSS  43.0
1A64:  BRA    1A7A
....................        { 
....................         ver_ddram=0; 
1A66:  BCF    43.0
....................         if(lee_ddram()!=ult_ddram) 
1A68:  GOTO   0D94
1A6C:  MOVF   48,W
1A6E:  SUBWF  01,W
1A70:  BZ    1A7A
....................          { 
....................           lcd_init(); 
1A72:  CALL   091A
....................           cambio=1; 
1A76:  MOVLW  01
1A78:  MOVWF  3E
....................          } 
....................        }  
....................         
....................    while(Menu==200) 
....................    {   
1A7A:  MOVF   16,W
1A7C:  SUBLW  C8
1A7E:  BNZ   1B3E
....................       // Fin de funcion que verifica si entraron ruidos a la pantalla .... 
....................       if(inicio==0) 
1A80:  BTFSC  30.3
1A82:  BRA    1B38
....................       { 
....................         if(RIGHT){ 
1A84:  BSF    F93.0
1A86:  BTFSS  F81.0
1A88:  BRA    1B38
....................          delay_ms(500); 
1A8A:  MOVLW  02
1A8C:  MOVWF  4A
1A8E:  MOVLW  FA
1A90:  MOVWF  5D
1A92:  CALL   088E
1A96:  DECFSZ 4A,F
1A98:  BRA    1A8E
....................          if(RIGHT){ 
1A9A:  BSF    F93.0
1A9C:  BTFSS  F81.0
1A9E:  BRA    1B38
....................             lcd_init(); 
1AA0:  CALL   091A
....................             intensidadpantalla(contraste); 
1AA4:  MOVFF  1F,4A
1AA8:  CALL   0DA6
....................             lcd_gotoxy(1,1); 
1AAC:  MOVLW  01
1AAE:  MOVWF  58
1AB0:  MOVWF  59
1AB2:  CALL   0972
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
1AB6:  MOVLW  FE
1AB8:  MOVWF  FF6
1ABA:  MOVLW  01
1ABC:  MOVWF  FF7
1ABE:  CALL   0DB6
....................             lcd_gotoxy(1,2); 
1AC2:  MOVLW  01
1AC4:  MOVWF  58
1AC6:  MOVLW  02
1AC8:  MOVWF  59
1ACA:  CALL   0972
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1ACE:  MOVLW  14
1AD0:  MOVWF  FF6
1AD2:  MOVLW  02
1AD4:  MOVWF  FF7
1AD6:  CALL   0DB6
....................             lcd_gotoxy(1,3); 
1ADA:  MOVLW  01
1ADC:  MOVWF  58
1ADE:  MOVLW  03
1AE0:  MOVWF  59
1AE2:  CALL   0972
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
1AE6:  MOVLW  2A
1AE8:  MOVWF  FF6
1AEA:  MOVLW  02
1AEC:  MOVWF  FF7
1AEE:  CALL   0DB6
....................             lcd_gotoxy(1,4); 
1AF2:  MOVLW  01
1AF4:  MOVWF  58
1AF6:  MOVLW  04
1AF8:  MOVWF  59
1AFA:  CALL   0972
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1AFE:  MOVLW  40
1B00:  MOVWF  FF6
1B02:  MOVLW  02
1B04:  MOVWF  FF7
1B06:  CALL   0DB6
....................             delay_ms(2000); 
1B0A:  MOVLW  08
1B0C:  MOVWF  4A
1B0E:  MOVLW  FA
1B10:  MOVWF  5D
1B12:  CALL   088E
1B16:  DECFSZ 4A,F
1B18:  BRA    1B0E
....................             printf(lcd_putc,"\f"); 
1B1A:  MOVLW  0C
1B1C:  MOVWF  57
1B1E:  CALL   0A24
....................             inicio=1;               // Condicion Inicial de (inicio) 
1B22:  BSF    30.3
....................             Menu=0;                 // Condicion Inicial de Menu 
1B24:  CLRF   16
....................             ModoSleep=0; 
1B26:  BCF    30.2
....................             delay_ms(500); 
1B28:  MOVLW  02
1B2A:  MOVWF  4A
1B2C:  MOVLW  FA
1B2E:  MOVWF  5D
1B30:  CALL   088E
1B34:  DECFSZ 4A,F
1B36:  BRA    1B2C
....................          } 
....................        } 
....................       } 
....................       Cambio=1; 
1B38:  MOVLW  01
1B3A:  MOVWF  3E
....................   
....................    } 
1B3C:  BRA    1A7A
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1B3E:  MOVF   16,F
1B40:  BTFSS  FD8.2
1B42:  BRA    1E8C
....................     
....................    flag_latencia=1;set_pwm1_duty(0); 
1B44:  BSF    2E.7
1B46:  CLRF   FBE
....................       if(t_latencia>15)  // Define que se acabo el tiempo de espera y borra la pantalla y hace un reset por firmware 
1B48:  MOVF   47,F
1B4A:  BNZ   1B52
1B4C:  MOVF   46,W
1B4E:  SUBLW  0F
1B50:  BC    1B5C
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1B52:  MOVLW  0C
1B54:  MOVWF  57
1B56:  CALL   0A24
1B5A:  RESET
....................          } 
....................     
....................    
....................    if(Cambio == 1) 
1B5C:  DECFSZ 3E,W
1B5E:  BRA    1C00
....................    { 
....................       lcd_gotoxy(1,1); 
1B60:  MOVLW  01
1B62:  MOVWF  58
1B64:  MOVWF  59
1B66:  CALL   0972
....................       printf(lcd_putc,"     Ingrese        "); 
1B6A:  MOVLW  56
1B6C:  MOVWF  FF6
1B6E:  MOVLW  02
1B70:  MOVWF  FF7
1B72:  CALL   0DB6
....................       lcd_gotoxy(1,2); 
1B76:  MOVLW  01
1B78:  MOVWF  58
1B7A:  MOVLW  02
1B7C:  MOVWF  59
1B7E:  CALL   0972
....................       printf(lcd_putc,"    Contraseña      "); 
1B82:  MOVLW  6C
1B84:  MOVWF  FF6
1B86:  MOVLW  02
1B88:  MOVWF  FF7
1B8A:  CALL   0DB6
....................       lcd_gotoxy(1,3); 
1B8E:  MOVLW  01
1B90:  MOVWF  58
1B92:  MOVLW  03
1B94:  MOVWF  59
1B96:  CALL   0972
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1B9A:  MOVLW  82
1B9C:  MOVWF  FF6
1B9E:  MOVLW  02
1BA0:  MOVWF  FF7
1BA2:  MOVLW  0A
1BA4:  MOVWF  4A
1BA6:  CALL   0DD6
1BAA:  MOVFF  36,4A
1BAE:  MOVLW  1F
1BB0:  MOVWF  4B
1BB2:  CALL   0E1C
1BB6:  MOVFF  37,4A
1BBA:  MOVLW  1F
1BBC:  MOVWF  4B
1BBE:  CALL   0E1C
1BC2:  MOVFF  38,4A
1BC6:  MOVLW  1F
1BC8:  MOVWF  4B
1BCA:  CALL   0E1C
1BCE:  MOVFF  39,4A
1BD2:  MOVLW  1F
1BD4:  MOVWF  4B
1BD6:  CALL   0E1C
1BDA:  MOVLW  20
1BDC:  MOVWF  57
1BDE:  CALL   0A24
1BE2:  MOVLW  20
1BE4:  MOVWF  57
1BE6:  CALL   0A24
....................       lcd_gotoxy(unidad,4); // Para mostrar cursor. 
1BEA:  MOVFF  19,58
1BEE:  MOVLW  04
1BF0:  MOVWF  59
1BF2:  CALL   0972
....................      lcd_putc(t[2]); 
1BF6:  MOVFF  34,57
1BFA:  CALL   0A24
....................      /* printf(lcd_putc,"%3u",ult_ddram); 
....................      delay_ms(10); 
....................      printf(lcd_putc,"%3u",lee_ddram()); */ 
....................      Cambio=0; 
1BFE:  CLRF   3E
....................     } 
....................    lee_pulsad(); 
1C00:  CALL   0EE4
....................     
....................       Switch(tecla) 
....................       { 
1C04:  MOVF   35,W
1C06:  XORLW  55
1C08:  BZ    1C18
1C0A:  XORLW  11
1C0C:  BZ    1C30
1C0E:  XORLW  16
1C10:  BZ    1C48
1C12:  XORLW  1E
1C14:  BZ    1C60
1C16:  BRA    1C78
....................     
....................        Case 'U':       //Si se oprimio el pulsador de subir 
....................        {clave[unidad-11]++;t_latencia=0;} 
1C18:  MOVLW  0B
1C1A:  SUBWF  19,W
1C1C:  CLRF   03
1C1E:  ADDLW  36
1C20:  MOVWF  FE9
1C22:  MOVLW  00
1C24:  ADDWFC 03,W
1C26:  MOVWF  FEA
1C28:  INCF   FEF,F
1C2A:  CLRF   47
1C2C:  CLRF   46
....................        break; 
1C2E:  BRA    1C78
....................         
....................        Case 'D':       //Si se oprimio el pulsador de bajar 
....................        {clave[unidad-11]--;t_latencia=0;} 
1C30:  MOVLW  0B
1C32:  SUBWF  19,W
1C34:  CLRF   03
1C36:  ADDLW  36
1C38:  MOVWF  FE9
1C3A:  MOVLW  00
1C3C:  ADDWFC 03,W
1C3E:  MOVWF  FEA
1C40:  DECF   FEF,F
1C42:  CLRF   47
1C44:  CLRF   46
....................        break; 
1C46:  BRA    1C78
....................         
....................        Case 'R':       //Si se oprimio el pulsador de derecha 
....................        {unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;} 
1C48:  INCF   19,F
1C4A:  MOVLW  1E
1C4C:  MOVWF  5D
1C4E:  CALL   088E
1C52:  MOVLW  0C
1C54:  MOVWF  57
1C56:  CALL   0A24
1C5A:  CLRF   47
1C5C:  CLRF   46
....................        break; 
1C5E:  BRA    1C78
....................         
....................        Case 'L':       //Si se oprimio el pulsador de izquierda 
....................        {unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;} 
1C60:  DECF   19,F
1C62:  MOVLW  1E
1C64:  MOVWF  5D
1C66:  CALL   088E
1C6A:  MOVLW  0C
1C6C:  MOVWF  57
1C6E:  CALL   0A24
1C72:  CLRF   47
1C74:  CLRF   46
....................        break; 
1C76:  BRA    1C78
....................            
....................       }       
....................              
....................        if(Cambio==1) 
1C78:  DECFSZ 3E,W
1C7A:  BRA    1E8A
....................        { 
....................         if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1C7C:  MOVLW  0B
1C7E:  SUBWF  19,W
1C80:  CLRF   03
1C82:  ADDLW  36
1C84:  MOVWF  FE9
1C86:  MOVLW  00
1C88:  ADDWFC 03,W
1C8A:  MOVWF  FEA
1C8C:  BTFSC  FEF.7
1C8E:  BRA    1C92
1C90:  BRA    1CA6
....................         {clave[unidad-11]=9;} 
1C92:  MOVLW  0B
1C94:  SUBWF  19,W
1C96:  CLRF   03
1C98:  ADDLW  36
1C9A:  MOVWF  FE9
1C9C:  MOVLW  00
1C9E:  ADDWFC 03,W
1CA0:  MOVWF  FEA
1CA2:  MOVLW  09
1CA4:  MOVWF  FEF
....................         if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1CA6:  MOVLW  0B
1CA8:  SUBWF  19,W
1CAA:  CLRF   03
1CAC:  ADDLW  36
1CAE:  MOVWF  FE9
1CB0:  MOVLW  00
1CB2:  ADDWFC 03,W
1CB4:  MOVWF  FEA
1CB6:  BTFSC  FEF.7
1CB8:  BRA    1CD2
1CBA:  MOVF   FEF,W
1CBC:  SUBLW  09
1CBE:  BC    1CD2
....................         {clave[unidad-11]=0;} 
1CC0:  MOVLW  0B
1CC2:  SUBWF  19,W
1CC4:  CLRF   03
1CC6:  ADDLW  36
1CC8:  MOVWF  FE9
1CCA:  MOVLW  00
1CCC:  ADDWFC 03,W
1CCE:  MOVWF  FEA
1CD0:  CLRF   FEF
....................         if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1CD2:  BTFSC  19.7
1CD4:  BRA    1CDC
1CD6:  MOVF   19,W
1CD8:  SUBLW  0A
1CDA:  BNC   1CE0
....................         {unidad=11;} 
1CDC:  MOVLW  0B
1CDE:  MOVWF  19
....................         lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1CE0:  MOVFF  19,58
1CE4:  MOVLW  04
1CE6:  MOVWF  59
1CE8:  CALL   0972
....................         lcd_putc(t[2]); 
1CEC:  MOVFF  34,57
1CF0:  CALL   0A24
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1CF4:  BTFSC  19.7
1CF6:  BRA    1E4A
1CF8:  MOVF   19,W
1CFA:  SUBLW  0E
1CFC:  BTFSC  FD8.0
1CFE:  BRA    1E4A
....................         { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1D00:  MOVF   36,W
1D02:  SUBLW  03
1D04:  BNZ   1D1E
1D06:  MOVF   37,W
1D08:  SUBLW  08
1D0A:  BNZ   1D1E
1D0C:  MOVF   38,W
1D0E:  SUBLW  09
1D10:  BNZ   1D1E
1D12:  MOVF   39,W
1D14:  SUBLW  02
1D16:  BNZ   1D1E
....................             {set_default(); 
1D18:  CALL   0A82
....................              reset_cpu(); 
1D1C:  RESET
....................             } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1D1E:  MOVF   3A,W
1D20:  SUBWF  36,W
1D22:  BNZ   1DD8
1D24:  MOVF   3B,W
1D26:  SUBWF  37,W
1D28:  BNZ   1DD8
1D2A:  MOVF   3C,W
1D2C:  SUBWF  38,W
1D2E:  BNZ   1DD8
1D30:  MOVF   3D,W
1D32:  SUBWF  39,W
1D34:  BNZ   1DD8
....................             {lcd_gotoxy(1,1); 
1D36:  MOVLW  01
1D38:  MOVWF  58
1D3A:  MOVWF  59
1D3C:  CALL   0972
....................             printf(lcd_putc,"                   "); 
1D40:  MOVLW  98
1D42:  MOVWF  FF6
1D44:  MOVLW  02
1D46:  MOVWF  FF7
1D48:  CALL   0DB6
....................             lcd_gotoxy(1,2); 
1D4C:  MOVLW  01
1D4E:  MOVWF  58
1D50:  MOVLW  02
1D52:  MOVWF  59
1D54:  CALL   0972
....................             printf(lcd_putc,"     Contraseña    "); 
1D58:  MOVLW  AC
1D5A:  MOVWF  FF6
1D5C:  MOVLW  02
1D5E:  MOVWF  FF7
1D60:  CALL   0DB6
....................             lcd_gotoxy(1,3); 
1D64:  MOVLW  01
1D66:  MOVWF  58
1D68:  MOVLW  03
1D6A:  MOVWF  59
1D6C:  CALL   0972
....................             printf(lcd_putc,"      Correcta     "); 
1D70:  MOVLW  C0
1D72:  MOVWF  FF6
1D74:  MOVLW  02
1D76:  MOVWF  FF7
1D78:  CALL   0DB6
....................             lcd_gotoxy(1,4); 
1D7C:  MOVLW  01
1D7E:  MOVWF  58
1D80:  MOVLW  04
1D82:  MOVWF  59
1D84:  CALL   0972
....................             printf(lcd_putc,"                   "); 
1D88:  MOVLW  D4
1D8A:  MOVWF  FF6
1D8C:  MOVLW  02
1D8E:  MOVWF  FF7
1D90:  CALL   0DB6
....................             delay_ms(200); 
1D94:  MOVLW  C8
1D96:  MOVWF  5D
1D98:  CALL   088E
....................             Motor_on; 
1D9C:  BSF    F8A.5
1D9E:  BCF    F93.5
....................             delay_ms(100); 
1DA0:  MOVLW  64
1DA2:  MOVWF  5D
1DA4:  CALL   088E
....................             lcd_init(); 
1DA8:  CALL   091A
....................             delay_ms(100); 
1DAC:  MOVLW  64
1DAE:  MOVWF  5D
1DB0:  CALL   088E
....................             Menu=50;Cambio=1;unidad=11;printf(lcd_putc,"\f");flag_latencia=0;Latencia=0;tiempo_purga=1;Lectura=1; 
1DB4:  MOVLW  32
1DB6:  MOVWF  16
1DB8:  MOVLW  01
1DBA:  MOVWF  3E
1DBC:  MOVLW  0B
1DBE:  MOVWF  19
1DC0:  MOVLW  0C
1DC2:  MOVWF  57
1DC4:  CALL   0A24
1DC8:  BCF    2E.7
1DCA:  BCF    2F.0
1DCC:  BSF    30.6
1DCE:  BSF    30.4
....................             t_latencia=0;flag_iniciodamper=1;} 
1DD0:  CLRF   47
1DD2:  CLRF   46
1DD4:  BSF    30.5
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1DD6:  BRA    1E4A
....................          {lcd_gotoxy(1,1); 
1DD8:  MOVLW  01
1DDA:  MOVWF  58
1DDC:  MOVWF  59
1DDE:  CALL   0972
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1DE2:  MOVLW  01
1DE4:  MOVWF  58
1DE6:  MOVLW  02
1DE8:  MOVWF  59
1DEA:  CALL   0972
....................             printf(lcd_putc,"     Contraseña    "); 
1DEE:  MOVLW  E8
1DF0:  MOVWF  FF6
1DF2:  MOVLW  02
1DF4:  MOVWF  FF7
1DF6:  CALL   0DB6
....................             lcd_gotoxy(1,3); 
1DFA:  MOVLW  01
1DFC:  MOVWF  58
1DFE:  MOVLW  03
1E00:  MOVWF  59
1E02:  CALL   0972
....................             printf(lcd_putc,"     Incorrecta    "); 
1E06:  MOVLW  FC
1E08:  MOVWF  FF6
1E0A:  MOVLW  02
1E0C:  MOVWF  FF7
1E0E:  CALL   0DB6
....................             lcd_gotoxy(1,4); 
1E12:  MOVLW  01
1E14:  MOVWF  58
1E16:  MOVLW  04
1E18:  MOVWF  59
1E1A:  CALL   0972
....................             printf(lcd_putc,"                   ");  
1E1E:  MOVLW  10
1E20:  MOVWF  FF6
1E22:  MOVLW  03
1E24:  MOVWF  FF7
1E26:  CALL   0DB6
....................             Cambio=1;                              //Se activa el flag de pedir clave nuevamente, porque fue errada 
1E2A:  MOVLW  01
1E2C:  MOVWF  3E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
1E2E:  MOVLW  02
1E30:  MOVWF  4A
1E32:  MOVLW  FA
1E34:  MOVWF  5D
1E36:  CALL   088E
1E3A:  DECFSZ 4A,F
1E3C:  BRA    1E32
1E3E:  MOVLW  0B
1E40:  MOVWF  19
1E42:  MOVLW  0C
1E44:  MOVWF  57
1E46:  CALL   0A24
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1E4A:  BTFSC  19.7
1E4C:  BRA    1E8A
1E4E:  MOVF   19,W
1E50:  SUBLW  0B
1E52:  BC    1E8A
1E54:  BTFSC  19.7
1E56:  BRA    1E5E
1E58:  MOVF   19,W
1E5A:  SUBLW  0D
1E5C:  BNC   1E8A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1E5E:  MOVLW  01
1E60:  SUBWF  19,W
1E62:  MOVWF  4A
1E64:  MOVWF  58
1E66:  MOVLW  04
1E68:  MOVWF  59
1E6A:  CALL   0972
....................             lcd_putc(t[1]); 
1E6E:  MOVFF  33,57
1E72:  CALL   0A24
....................             lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1E76:  MOVFF  19,58
1E7A:  MOVLW  04
1E7C:  MOVWF  59
1E7E:  CALL   0972
....................             lcd_putc(t[2]); 
1E82:  MOVFF  34,57
1E86:  CALL   0A24
....................    
....................           } 
....................         
....................       } 
....................    } 
1E8A:  BRA    1B3E
.................... //----------------Fin-Menu0---------------------------------------------------------------     
....................  
....................   
.................... //------------Menu1------------------------------------------------------------------    
....................    while(Menu == 1)      // Menu de seleccion de lo que desea encender 
....................    { 
1E8C:  DECFSZ 16,W
1E8E:  BRA    2078
....................    lee_pulsad(); 
1E90:  CALL   0EE4
....................     
....................       if(tecla=='U')       //Si oprime hacia arriba 
1E94:  MOVF   35,W
1E96:  SUBLW  55
1E98:  BNZ   1EAC
....................       {Flecha2--;Flecha--;Flecha1=Flecha+1;delay_ms(30);} 
1E9A:  DECF   1C,F
1E9C:  DECF   1A,F
1E9E:  MOVLW  01
1EA0:  ADDWF  1A,W
1EA2:  MOVWF  1B
1EA4:  MOVLW  1E
1EA6:  MOVWF  5D
1EA8:  CALL   088E
....................       if(tecla=='D')       //Si oprime hacia abajo 
1EAC:  MOVF   35,W
1EAE:  SUBLW  44
1EB0:  BNZ   1EC4
....................       {Flecha2++;Flecha++;Flecha1=Flecha-1;delay_ms(30);} 
1EB2:  INCF   1C,F
1EB4:  INCF   1A,F
1EB6:  MOVLW  01
1EB8:  SUBWF  1A,W
1EBA:  MOVWF  1B
1EBC:  MOVLW  1E
1EBE:  MOVWF  5D
1EC0:  CALL   088E
....................   
....................          
....................         if(Flecha2>nMenuH) 
1EC4:  MOVF   1E,W
1EC6:  XORLW  80
1EC8:  MOVWF  00
1ECA:  MOVF   1C,W
1ECC:  XORLW  80
1ECE:  SUBWF  00,W
1ED0:  BC    1EE2
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1ED2:  INCF   31,F
1ED4:  MOVFF  1C,1E
1ED8:  MOVLW  02
1EDA:  SUBWF  1E,W
1EDC:  MOVWF  1D
1EDE:  MOVLW  04
1EE0:  MOVWF  1A
....................          
....................         if(Flecha2<nMenuL) 
1EE2:  MOVF   1C,W
1EE4:  XORLW  80
1EE6:  MOVWF  00
1EE8:  MOVF   1D,W
1EEA:  XORLW  80
1EEC:  SUBWF  00,W
1EEE:  BC    1F00
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1EF0:  DECF   31,F
1EF2:  MOVFF  1C,1D
1EF6:  MOVLW  02
1EF8:  ADDWF  1D,W
1EFA:  MOVWF  1E
1EFC:  MOVLW  02
1EFE:  MOVWF  1A
....................          
....................         if(Flecha2>n_opcionH) 
1F00:  MOVF   17,W
1F02:  XORLW  80
1F04:  MOVWF  00
1F06:  MOVF   1C,W
1F08:  XORLW  80
1F0A:  SUBWF  00,W
1F0C:  BC    1F20
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1F0E:  MOVFF  18,1C
1F12:  MOVLW  02
1F14:  MOVWF  1A
1F16:  CLRF   31
1F18:  MOVFF  1C,1D
1F1C:  ADDWF  1D,W
1F1E:  MOVWF  1E
....................          
....................         if(Flecha2<n_opcionL) 
1F20:  MOVF   1C,W
1F22:  XORLW  80
1F24:  MOVWF  00
1F26:  MOVF   18,W
1F28:  XORLW  80
1F2A:  SUBWF  00,W
1F2C:  BC    1F44
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
1F2E:  MOVFF  17,1C
1F32:  MOVLW  04
1F34:  MOVWF  1A
1F36:  SUBWF  17,W
1F38:  MOVWF  31
1F3A:  MOVFF  1C,1E
1F3E:  MOVLW  02
1F40:  SUBWF  1E,W
1F42:  MOVWF  1D
....................          
....................         if(paso<0) 
1F44:  BTFSC  31.7
1F46:  BRA    1F4A
1F48:  BRA    1F4C
....................         paso=0; 
1F4A:  CLRF   31
....................          
....................         if(Cambio==1) 
1F4C:  DECFSZ 3E,W
1F4E:  BRA    2036
....................         { 
....................         lcd_gotoxy(1,1); 
1F50:  MOVLW  01
1F52:  MOVWF  58
1F54:  MOVWF  59
1F56:  CALL   0972
....................         printf(lcd_putc,"---MENU PRINCIPAL---"); 
1F5A:  MOVLW  24
1F5C:  MOVWF  FF6
1F5E:  MOVLW  03
1F60:  MOVWF  FF7
1F62:  CALL   0DB6
....................          
....................         mensajes(1+paso,2); 
1F66:  MOVLW  01
1F68:  ADDWF  31,W
1F6A:  MOVWF  4A
1F6C:  MOVWF  4B
1F6E:  MOVLW  02
1F70:  MOVWF  4C
1F72:  CALL   0FA2
....................         mensajes(2+paso,3); 
1F76:  MOVLW  02
1F78:  ADDWF  31,W
1F7A:  MOVWF  4A
1F7C:  MOVWF  4B
1F7E:  MOVLW  03
1F80:  MOVWF  4C
1F82:  CALL   0FA2
....................         mensajes(3+paso,4); 
1F86:  MOVLW  03
1F88:  ADDWF  31,W
1F8A:  MOVWF  4A
1F8C:  MOVWF  4B
1F8E:  MOVLW  04
1F90:  MOVWF  4C
1F92:  CALL   0FA2
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
1F96:  MOVLW  01
1F98:  MOVWF  58
1F9A:  MOVFF  1A,59
1F9E:  CALL   0972
....................         lcd_putc(t[0]); 
1FA2:  MOVFF  32,57
1FA6:  CALL   0A24
....................  
....................         if(Flecha==2) 
1FAA:  MOVF   1A,W
1FAC:  SUBLW  02
1FAE:  BNZ   1FD8
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
1FB0:  MOVLW  01
1FB2:  MOVWF  58
1FB4:  MOVLW  04
1FB6:  MOVWF  59
1FB8:  CALL   0972
....................             lcd_putc(t[1]); 
1FBC:  MOVFF  33,57
1FC0:  CALL   0A24
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1FC4:  MOVLW  01
1FC6:  MOVWF  58
1FC8:  MOVLW  03
1FCA:  MOVWF  59
1FCC:  CALL   0972
....................             lcd_putc(t[1]); 
1FD0:  MOVFF  33,57
1FD4:  CALL   0A24
....................           } 
....................          
....................         if(Flecha==4) 
1FD8:  MOVF   1A,W
1FDA:  SUBLW  04
1FDC:  BNZ   2006
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
1FDE:  MOVLW  01
1FE0:  MOVWF  58
1FE2:  MOVLW  02
1FE4:  MOVWF  59
1FE6:  CALL   0972
....................             lcd_putc(t[1]); 
1FEA:  MOVFF  33,57
1FEE:  CALL   0A24
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
1FF2:  MOVLW  01
1FF4:  MOVWF  58
1FF6:  MOVLW  03
1FF8:  MOVWF  59
1FFA:  CALL   0972
....................             lcd_putc(t[1]); 
1FFE:  MOVFF  33,57
2002:  CALL   0A24
....................           } 
....................          
....................         if(Flecha==3) 
2006:  MOVF   1A,W
2008:  SUBLW  03
200A:  BNZ   2034
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
200C:  MOVLW  01
200E:  MOVWF  58
2010:  MOVLW  04
2012:  MOVWF  59
2014:  CALL   0972
....................             lcd_putc(t[1]); 
2018:  MOVFF  33,57
201C:  CALL   0A24
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2020:  MOVLW  01
2022:  MOVWF  58
2024:  MOVLW  02
2026:  MOVWF  59
2028:  CALL   0972
....................             lcd_putc(t[1]); 
202C:  MOVFF  33,57
2030:  CALL   0A24
....................           } 
....................           Cambio=0; 
2034:  CLRF   3E
....................         } 
....................  
....................         if(tecla=='R')        // Si oprime derecha 
2036:  MOVF   35,W
2038:  SUBLW  52
203A:  BNZ   205E
....................         {Menu=Flecha2;Cambio=1;Flecha=3;printf(lcd_putc,"\f"); 
203C:  MOVFF  1C,16
2040:  MOVLW  01
2042:  MOVWF  3E
2044:  MOVLW  03
2046:  MOVWF  1A
2048:  MOVLW  0C
204A:  MOVWF  57
204C:  CALL   0A24
....................             if(Menu==6) 
2050:  MOVF   16,W
2052:  SUBLW  06
2054:  BNZ   205E
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}} 
2056:  CLRF   36
2058:  CLRF   37
205A:  CLRF   38
205C:  CLRF   39
....................               
....................         if(tecla=='L')        // Si oprime Izquierda 
205E:  MOVF   35,W
2060:  SUBLW  4C
2062:  BNZ   2076
....................         {Menu=20;Cambio=1;Cambio=1;printf(lcd_putc,"\f");} 
2064:  MOVLW  14
2066:  MOVWF  16
2068:  MOVLW  01
206A:  MOVWF  3E
206C:  MOVWF  3E
206E:  MOVLW  0C
2070:  MOVWF  57
2072:  CALL   0A24
....................  
....................    } 
2076:  BRA    1E8C
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
2078:  MOVF   16,W
207A:  SUBLW  02
207C:  BTFSS  FD8.2
207E:  BRA    21AE
....................    estadoalarma=!estadoalarma;Menu=1; paso=0; 
2080:  BTG    2E.2
2082:  MOVLW  01
2084:  MOVWF  16
2086:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
2088:  BTFSS  2E.2
208A:  BRA    20EC
....................             {estadoalarma=1; 
208C:  BSF    2E.2
....................                lcd_gotoxy(1,1); 
208E:  MOVLW  01
2090:  MOVWF  58
2092:  MOVWF  59
2094:  CALL   0972
....................                printf(lcd_putc,"                    "); 
2098:  MOVLW  3A
209A:  MOVWF  FF6
209C:  MOVLW  03
209E:  MOVWF  FF7
20A0:  CALL   0DB6
....................                lcd_gotoxy(1,2); 
20A4:  MOVLW  01
20A6:  MOVWF  58
20A8:  MOVLW  02
20AA:  MOVWF  59
20AC:  CALL   0972
....................                printf(lcd_putc,"        Activo      "); 
20B0:  MOVLW  50
20B2:  MOVWF  FF6
20B4:  MOVLW  03
20B6:  MOVWF  FF7
20B8:  CALL   0DB6
....................                lcd_gotoxy(1,3); 
20BC:  MOVLW  01
20BE:  MOVWF  58
20C0:  MOVLW  03
20C2:  MOVWF  59
20C4:  CALL   0972
....................                printf(lcd_putc,"        Alarma      "); 
20C8:  MOVLW  66
20CA:  MOVWF  FF6
20CC:  MOVLW  03
20CE:  MOVWF  FF7
20D0:  CALL   0DB6
....................                lcd_gotoxy(1,4); 
20D4:  MOVLW  01
20D6:  MOVWF  58
20D8:  MOVLW  04
20DA:  MOVWF  59
20DC:  CALL   0972
....................                printf(lcd_putc,"                    ");} 
20E0:  MOVLW  7C
20E2:  MOVWF  FF6
20E4:  MOVLW  03
20E6:  MOVWF  FF7
20E8:  CALL   0DB6
....................                 
....................             if(estadoalarma==0) 
20EC:  BTFSC  2E.2
20EE:  BRA    2150
....................             {estadoalarma=0; 
20F0:  BCF    2E.2
....................                lcd_gotoxy(1,1); 
20F2:  MOVLW  01
20F4:  MOVWF  58
20F6:  MOVWF  59
20F8:  CALL   0972
....................                printf(lcd_putc,"                    "); 
20FC:  MOVLW  92
20FE:  MOVWF  FF6
2100:  MOVLW  03
2102:  MOVWF  FF7
2104:  CALL   0DB6
....................                lcd_gotoxy(1,2); 
2108:  MOVLW  01
210A:  MOVWF  58
210C:  MOVLW  02
210E:  MOVWF  59
2110:  CALL   0972
....................                printf(lcd_putc,"      Desactivo     "); 
2114:  MOVLW  A8
2116:  MOVWF  FF6
2118:  MOVLW  03
211A:  MOVWF  FF7
211C:  CALL   0DB6
....................                lcd_gotoxy(1,3); 
2120:  MOVLW  01
2122:  MOVWF  58
2124:  MOVLW  03
2126:  MOVWF  59
2128:  CALL   0972
....................                printf(lcd_putc,"       Alarma       "); 
212C:  MOVLW  BE
212E:  MOVWF  FF6
2130:  MOVLW  03
2132:  MOVWF  FF7
2134:  CALL   0DB6
....................                lcd_gotoxy(1,4); 
2138:  MOVLW  01
213A:  MOVWF  58
213C:  MOVLW  04
213E:  MOVWF  59
2140:  CALL   0972
....................                printf(lcd_putc,"                    ");} 
2144:  MOVLW  D4
2146:  MOVWF  FF6
2148:  MOVLW  03
214A:  MOVWF  FF7
214C:  CALL   0DB6
....................               
....................             write_eeprom(5,estadoalarma);menu=1;Cambio=1;delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2150:  MOVLW  00
2152:  BTFSC  2E.2
2154:  MOVLW  01
2156:  MOVWF  4A
2158:  MOVLW  05
215A:  MOVWF  FA9
215C:  MOVFF  4A,FA8
2160:  BCF    FA6.6
2162:  BCF    FA6.7
2164:  BSF    FA6.2
2166:  MOVF   FF2,W
2168:  MOVWF  00
216A:  BCF    FF2.7
216C:  MOVLB  F
216E:  MOVLW  55
2170:  MOVWF  FA7
2172:  MOVLW  AA
2174:  MOVWF  FA7
2176:  BSF    FA6.1
2178:  BTFSC  FA6.1
217A:  BRA    2178
217C:  BCF    FA6.2
217E:  MOVF   00,W
2180:  IORWF  FF2,F
2182:  MOVLW  01
2184:  MOVWF  16
2186:  MOVWF  3E
2188:  MOVLW  04
218A:  MOVWF  4A
218C:  MOVLW  FA
218E:  MOVWF  5D
2190:  MOVLB  0
2192:  CALL   088E
2196:  DECFSZ 4A,F
2198:  BRA    219C
219A:  BRA    21A0
219C:  MOVLB  F
219E:  BRA    218C
21A0:  MOVLW  02
21A2:  MOVWF  1A
21A4:  MOVWF  1C
21A6:  MOVLW  0C
21A8:  MOVWF  57
21AA:  CALL   0A24
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................     
....................    while(Menu == 3){ // Menu de seleccion de SetPoint 
21AE:  MOVF   16,W
21B0:  SUBLW  03
21B2:  BTFSS  FD8.2
21B4:  BRA    2434
....................    if(Cambio==1) 
21B6:  DECFSZ 3E,W
21B8:  BRA    2278
....................    { 
....................       lcd_gotoxy(1,1); 
21BA:  MOVLW  01
21BC:  MOVWF  58
21BE:  MOVWF  59
21C0:  CALL   0972
....................       Cambio=0; 
21C4:  CLRF   3E
....................       printf(lcd_putc,"  Duracion Actual   ");                           
21C6:  MOVLW  EA
21C8:  MOVWF  FF6
21CA:  MOVLW  03
21CC:  MOVWF  FF7
21CE:  CALL   0DB6
....................       lcd_gotoxy(1,2);                                                   
21D2:  MOVLW  01
21D4:  MOVWF  58
21D6:  MOVLW  02
21D8:  MOVWF  59
21DA:  CALL   0972
....................       printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
21DE:  MOVLW  00
21E0:  MOVWF  FF6
21E2:  MOVLW  04
21E4:  MOVWF  FF7
21E6:  MOVLW  09
21E8:  MOVWF  4A
21EA:  CALL   0DD6
21EE:  MOVFF  26,4A
21F2:  MOVLW  01
21F4:  MOVWF  4B
21F6:  CALL   105A
21FA:  MOVLW  3A
21FC:  MOVWF  57
21FE:  CALL   0A24
2202:  MOVFF  25,4A
2206:  MOVLW  01
2208:  MOVWF  4B
220A:  CALL   105A
220E:  MOVLW  3A
2210:  MOVWF  57
2212:  CALL   0A24
2216:  MOVFF  24,4A
221A:  MOVLW  01
221C:  MOVWF  4B
221E:  CALL   105A
2222:  MOVLW  20
2224:  MOVWF  57
2226:  CALL   0A24
....................        
....................       if(flag_filtro==1) 
222A:  BTFSS  2F.1
222C:  BRA    2248
....................       { 
....................          lcd_gotoxy(1,3);                                                  
222E:  MOVLW  01
2230:  MOVWF  58
2232:  MOVLW  03
2234:  MOVWF  59
2236:  CALL   0972
....................          printf(lcd_putc,"DESACTIVAR= Oprima >");                         
223A:  MOVLW  1A
223C:  MOVWF  FF6
223E:  MOVLW  04
2240:  MOVWF  FF7
2242:  CALL   0DB6
....................       } 
....................       else 
2246:  BRA    2260
....................       { 
....................          lcd_gotoxy(1,3);                                                  
2248:  MOVLW  01
224A:  MOVWF  58
224C:  MOVLW  03
224E:  MOVWF  59
2250:  CALL   0972
....................          printf(lcd_putc," ACTIVAR= Oprima >  ");                         
2254:  MOVLW  30
2256:  MOVWF  FF6
2258:  MOVLW  04
225A:  MOVWF  FF7
225C:  CALL   0DB6
....................       } 
....................        
....................       lcd_gotoxy(1,4);                                                  
2260:  MOVLW  01
2262:  MOVWF  58
2264:  MOVLW  04
2266:  MOVWF  59
2268:  CALL   0972
....................       printf(lcd_putc," RESET= Oprima ^    ");    
226C:  MOVLW  46
226E:  MOVWF  FF6
2270:  MOVLW  04
2272:  MOVWF  FF7
2274:  CALL   0DB6
....................    } 
....................       
....................      lee_pulsad(); 
2278:  CALL   0EE4
....................       
....................      Switch(tecla) 
....................       
....................      { 
227C:  MOVF   35,W
227E:  XORLW  55
2280:  BZ    2290
2282:  XORLW  07
2284:  BTFSC  FD8.2
2286:  BRA    239C
2288:  XORLW  1E
228A:  BTFSC  FD8.2
228C:  BRA    2408
228E:  BRA    2432
....................     
....................       Case ('U'):       //Si oprime hacia arriba 
....................       {  delay_ms(200); 
2290:  MOVLW  C8
2292:  MOVWF  5D
2294:  CALL   088E
....................          printf(lcd_putc,"\f"); 
2298:  MOVLW  0C
229A:  MOVWF  57
229C:  CALL   0A24
....................          lcd_gotoxy(1,2); 
22A0:  MOVLW  01
22A2:  MOVWF  58
22A4:  MOVLW  02
22A6:  MOVWF  59
22A8:  CALL   0972
....................          printf(lcd_putc," Reset de tiempo "); 
22AC:  MOVLW  5C
22AE:  MOVWF  FF6
22B0:  MOVLW  04
22B2:  MOVWF  FF7
22B4:  CALL   0DB6
....................          lcd_gotoxy(1,3); 
22B8:  MOVLW  01
22BA:  MOVWF  58
22BC:  MOVLW  03
22BE:  MOVWF  59
22C0:  CALL   0972
....................          printf(lcd_putc,"     Exitoso     "); 
22C4:  MOVLW  6E
22C6:  MOVWF  FF6
22C8:  MOVLW  04
22CA:  MOVWF  FF7
22CC:  CALL   0DB6
....................          write_eeprom(70,0); 
22D0:  MOVLW  46
22D2:  MOVWF  FA9
22D4:  CLRF   FA8
22D6:  BCF    FA6.6
22D8:  BCF    FA6.7
22DA:  BSF    FA6.2
22DC:  MOVF   FF2,W
22DE:  MOVWF  00
22E0:  BCF    FF2.7
22E2:  MOVLB  F
22E4:  MOVLW  55
22E6:  MOVWF  FA7
22E8:  MOVLW  AA
22EA:  MOVWF  FA7
22EC:  BSF    FA6.1
22EE:  BTFSC  FA6.1
22F0:  BRA    22EE
22F2:  BCF    FA6.2
22F4:  MOVF   00,W
22F6:  IORWF  FF2,F
....................          delay_ms(20); 
22F8:  MOVLW  14
22FA:  MOVWF  5D
22FC:  MOVLB  0
22FE:  CALL   088E
....................          write_eeprom(71,0); 
2302:  MOVLW  47
2304:  MOVWF  FA9
2306:  CLRF   FA8
2308:  BCF    FA6.6
230A:  BCF    FA6.7
230C:  BSF    FA6.2
230E:  MOVF   FF2,W
2310:  MOVWF  00
2312:  BCF    FF2.7
2314:  MOVLB  F
2316:  MOVLW  55
2318:  MOVWF  FA7
231A:  MOVLW  AA
231C:  MOVWF  FA7
231E:  BSF    FA6.1
2320:  BTFSC  FA6.1
2322:  BRA    2320
2324:  BCF    FA6.2
2326:  MOVF   00,W
2328:  IORWF  FF2,F
....................          delay_ms(20); 
232A:  MOVLW  14
232C:  MOVWF  5D
232E:  MOVLB  0
2330:  CALL   088E
....................          write_eeprom(72,0); 
2334:  MOVLW  48
2336:  MOVWF  FA9
2338:  CLRF   FA8
233A:  BCF    FA6.6
233C:  BCF    FA6.7
233E:  BSF    FA6.2
2340:  MOVF   FF2,W
2342:  MOVWF  00
2344:  BCF    FF2.7
2346:  MOVLB  F
2348:  MOVLW  55
234A:  MOVWF  FA7
234C:  MOVLW  AA
234E:  MOVWF  FA7
2350:  BSF    FA6.1
2352:  BTFSC  FA6.1
2354:  BRA    2352
2356:  BCF    FA6.2
2358:  MOVF   00,W
235A:  IORWF  FF2,F
....................          delay_ms(700); 
235C:  MOVLW  04
235E:  MOVWF  4A
2360:  MOVLW  AF
2362:  MOVWF  5D
2364:  MOVLB  0
2366:  CALL   088E
236A:  DECFSZ 4A,F
236C:  BRA    2370
236E:  BRA    2374
2370:  MOVLB  F
2372:  BRA    2360
....................          segundos=0;minutos=0;horas=0; 
2374:  CLRF   24
2376:  CLRF   25
2378:  CLRF   26
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
237A:  MOVLW  1E
237C:  MOVWF  5D
237E:  CALL   088E
2382:  MOVLW  01
2384:  MOVWF  16
2386:  CLRF   31
2388:  MOVLW  02
238A:  MOVWF  1A
238C:  MOVWF  1C
238E:  MOVLW  01
2390:  MOVWF  3E
2392:  MOVLW  0C
2394:  MOVWF  57
2396:  CALL   0A24
....................       } 
....................       break; 
239A:  BRA    2432
....................        
....................       Case ('R'):       //Se oprimio el boton derecha 
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
239C:  BTG    2F.1
239E:  MOVLW  00
23A0:  BTFSC  2F.1
23A2:  MOVLW  01
23A4:  MOVWF  4A
23A6:  MOVLW  49
23A8:  MOVWF  FA9
23AA:  MOVFF  4A,FA8
23AE:  BCF    FA6.6
23B0:  BCF    FA6.7
23B2:  BSF    FA6.2
23B4:  MOVF   FF2,W
23B6:  MOVWF  00
23B8:  BCF    FF2.7
23BA:  MOVLB  F
23BC:  MOVLW  55
23BE:  MOVWF  FA7
23C0:  MOVLW  AA
23C2:  MOVWF  FA7
23C4:  BSF    FA6.1
23C6:  BTFSC  FA6.1
23C8:  BRA    23C6
23CA:  BCF    FA6.2
23CC:  MOVF   00,W
23CE:  IORWF  FF2,F
....................          if(flag_filtro==1) // Si se activa el filtro, se fuerza a leer el estado de una vez 
23D0:  BTFSS  2F.1
23D2:  BRA    23D6
....................          { 
....................           flag_hrs=1; 
23D4:  BSF    30.0
....................          } 
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
23D6:  MOVLW  02
23D8:  MOVWF  4A
23DA:  MOVLW  FA
23DC:  MOVWF  5D
23DE:  MOVLB  0
23E0:  CALL   088E
23E4:  DECFSZ 4A,F
23E6:  BRA    23EA
23E8:  BRA    23EE
23EA:  MOVLB  F
23EC:  BRA    23DA
23EE:  MOVLW  01
23F0:  MOVWF  16
23F2:  CLRF   31
23F4:  MOVLW  02
23F6:  MOVWF  1A
23F8:  MOVWF  1C
23FA:  MOVLW  01
23FC:  MOVWF  3E
23FE:  MOVLW  0C
2400:  MOVWF  57
2402:  CALL   0A24
....................       } 
....................       break; 
2406:  BRA    2432
....................              
....................        Case ('L'):       // Si oprime Izquierda 
....................       {   
....................         delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;Cambio=1;printf(lcd_putc,"\f"); 
2408:  MOVLW  02
240A:  MOVWF  4A
240C:  MOVLW  FA
240E:  MOVWF  5D
2410:  CALL   088E
2414:  DECFSZ 4A,F
2416:  BRA    240C
2418:  MOVLW  01
241A:  MOVWF  16
241C:  CLRF   31
241E:  MOVLW  02
2420:  MOVWF  1A
2422:  MOVWF  1C
2424:  MOVLW  01
2426:  MOVWF  3E
2428:  MOVLW  0C
242A:  MOVWF  57
242C:  CALL   0A24
....................       } 
....................       break; 
2430:  BRA    2432
....................               
....................    } 
....................    } 
2432:  BRA    21AE
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    while(Menu == 4){ // Menu de seleccion de SetPoint 
2434:  MOVF   16,W
2436:  SUBLW  04
2438:  BTFSS  FD8.2
243A:  BRA    264C
....................    if(Cambio==1) 
243C:  DECFSZ 3E,W
243E:  BRA    24A0
....................    { 
....................       lcd_gotoxy(1,2); 
2440:  MOVLW  01
2442:  MOVWF  58
2444:  MOVLW  02
2446:  MOVWF  59
2448:  CALL   0972
....................       printf(lcd_putc,"    Vida Filtro     "); 
244C:  MOVLW  80
244E:  MOVWF  FF6
2450:  MOVLW  04
2452:  MOVWF  FF7
2454:  CALL   0DB6
....................       lcd_gotoxy(1,3); 
2458:  MOVLW  01
245A:  MOVWF  58
245C:  MOVLW  03
245E:  MOVWF  59
2460:  CALL   0972
....................       printf(lcd_putc,"      %03.0f Horas  ",setpoint); 
2464:  MOVLW  96
2466:  MOVWF  FF6
2468:  MOVLW  04
246A:  MOVWF  FF7
246C:  MOVLW  06
246E:  MOVWF  4A
2470:  CALL   0DD6
2474:  MOVLW  42
2476:  MOVWF  FE9
2478:  MOVFF  42,4D
247C:  MOVFF  41,4C
2480:  MOVFF  40,4B
2484:  MOVFF  3F,4A
2488:  CLRF   4E
248A:  GOTO   126E
248E:  MOVLW  A2
2490:  MOVWF  FF6
2492:  MOVLW  04
2494:  MOVWF  FF7
2496:  MOVLW  08
2498:  MOVWF  4A
249A:  CALL   0DD6
....................       Cambio=0; 
249E:  CLRF   3E
....................    } 
....................     
....................    if(setpoint<1.0) 
24A0:  MOVFF  42,4E
24A4:  MOVFF  41,4D
24A8:  MOVFF  40,4C
24AC:  MOVFF  3F,4B
24B0:  CLRF   52
24B2:  CLRF   51
24B4:  CLRF   50
24B6:  MOVLW  7F
24B8:  MOVWF  4F
24BA:  CALL   13F6
24BE:  BNC   24CA
....................    {setpoint=1.0;} 
24C0:  CLRF   42
24C2:  CLRF   41
24C4:  CLRF   40
24C6:  MOVLW  7F
24C8:  MOVWF  3F
....................     
....................    if(setpoint>255.0) 
24CA:  CLRF   4E
24CC:  CLRF   4D
24CE:  MOVLW  7F
24D0:  MOVWF  4C
24D2:  MOVLW  86
24D4:  MOVWF  4B
24D6:  MOVFF  42,52
24DA:  MOVFF  41,51
24DE:  MOVFF  40,50
24E2:  MOVFF  3F,4F
24E6:  CALL   13F6
24EA:  BNC   24F8
....................    {setpoint=255.0;} 
24EC:  CLRF   42
24EE:  CLRF   41
24F0:  MOVLW  7F
24F2:  MOVWF  40
24F4:  MOVLW  86
24F6:  MOVWF  3F
....................     
....................    lee_pulsad(); 
24F8:  CALL   0EE4
....................     
....................    Switch(tecla) 
....................    { 
24FC:  MOVF   35,W
24FE:  XORLW  55
2500:  BZ    2510
2502:  XORLW  11
2504:  BZ    254A
2506:  XORLW  16
2508:  BZ    2584
250A:  XORLW  1E
250C:  BZ    25F2
250E:  BRA    264A
....................     
....................     Case 'U':     //Si oprime hacia arriba 
....................       {setpoint+=1.0;delay_ms(30);} 
2510:  BCF    FD8.1
2512:  MOVFF  42,4D
2516:  MOVFF  41,4C
251A:  MOVFF  40,4B
251E:  MOVFF  3F,4A
2522:  CLRF   51
2524:  CLRF   50
2526:  CLRF   4F
2528:  MOVLW  7F
252A:  MOVWF  4E
252C:  CALL   146C
2530:  MOVFF  03,42
2534:  MOVFF  02,41
2538:  MOVFF  01,40
253C:  MOVFF  00,3F
2540:  MOVLW  1E
2542:  MOVWF  5D
2544:  CALL   088E
....................     break; 
2548:  BRA    264A
....................       
....................              
....................     Case 'D':     //Si oprime hacia abajo 
....................       {setpoint-=1.0;delay_ms(30);} 
254A:  BSF    FD8.1
254C:  MOVFF  42,4D
2550:  MOVFF  41,4C
2554:  MOVFF  40,4B
2558:  MOVFF  3F,4A
255C:  CLRF   51
255E:  CLRF   50
2560:  CLRF   4F
2562:  MOVLW  7F
2564:  MOVWF  4E
2566:  CALL   146C
256A:  MOVFF  03,42
256E:  MOVFF  02,41
2572:  MOVFF  01,40
2576:  MOVFF  00,3F
257A:  MOVLW  1E
257C:  MOVWF  5D
257E:  CALL   088E
....................     break; 
2582:  BRA    264A
....................          
....................     
....................     Case 'R':    //Si se oprime derecha 
....................       { 
....................         Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2584:  MOVLW  01
2586:  MOVWF  16
2588:  CLRF   31
258A:  MOVLW  02
258C:  MOVWF  1A
258E:  MOVWF  1C
2590:  MOVLW  0B
2592:  MOVWF  19
2594:  MOVLW  02
2596:  MOVWF  4A
2598:  MOVLW  FA
259A:  MOVWF  5D
259C:  CALL   088E
25A0:  DECFSZ 4A,F
25A2:  BRA    2598
25A4:  MOVLW  0C
25A6:  MOVWF  57
25A8:  CALL   0A24
....................         Entero=(int)setpoint; 
25AC:  MOVFF  42,4D
25B0:  MOVFF  41,4C
25B4:  MOVFF  40,4B
25B8:  MOVFF  3F,4A
25BC:  GOTO   16D6
25C0:  MOVFF  01,23
....................         write_eeprom(40,Entero); 
25C4:  MOVLW  28
25C6:  MOVWF  FA9
25C8:  MOVFF  23,FA8
25CC:  BCF    FA6.6
25CE:  BCF    FA6.7
25D0:  BSF    FA6.2
25D2:  MOVF   FF2,W
25D4:  MOVWF  00
25D6:  BCF    FF2.7
25D8:  MOVLB  F
25DA:  MOVLW  55
25DC:  MOVWF  FA7
25DE:  MOVLW  AA
25E0:  MOVWF  FA7
25E2:  BSF    FA6.1
25E4:  BTFSC  FA6.1
25E6:  BRA    25E4
25E8:  BCF    FA6.2
25EA:  MOVF   00,W
25EC:  IORWF  FF2,F
....................       } 
....................     break; 
25EE:  MOVLB  0
25F0:  BRA    264A
....................           
....................     Case 'L':    // Si oprime Izquierda 
....................       {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");} 
25F2:  MOVLW  01
25F4:  MOVWF  16
25F6:  CLRF   31
25F8:  MOVLW  02
25FA:  MOVWF  1A
25FC:  MOVWF  1C
25FE:  MOVLW  0B
2600:  MOVWF  19
2602:  MOVLW  02
2604:  MOVWF  4A
2606:  MOVLW  FA
2608:  MOVWF  5D
260A:  CALL   088E
260E:  DECFSZ 4A,F
2610:  BRA    2606
2612:  MOVLW  0C
2614:  MOVWF  57
2616:  CALL   0A24
....................        setpoint=read_eeprom(40); 
261A:  MOVFF  FF2,4A
261E:  BCF    FF2.7
2620:  MOVLW  28
2622:  MOVWF  FA9
2624:  BCF    FA6.6
2626:  BCF    FA6.7
2628:  BSF    FA6.0
262A:  MOVF   FA8,W
262C:  BTFSC  4A.7
262E:  BSF    FF2.7
2630:  CLRF   4C
2632:  MOVWF  4B
2634:  CALL   0D5E
2638:  MOVFF  03,42
263C:  MOVFF  02,41
2640:  MOVFF  01,40
2644:  MOVFF  00,3F
....................     break; 
2648:  BRA    264A
....................           
....................       } 
....................               
....................    }       
264A:  BRA    2434
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    while(Menu == 5)   // Menu para Cambio de Contraseña 
....................    { 
264C:  MOVF   16,W
264E:  SUBLW  05
2650:  BTFSS  FD8.2
2652:  BRA    29A2
....................       if(Cambio==1) 
2654:  DECFSZ 3E,W
2656:  BRA    26F8
....................       { 
....................          lcd_gotoxy(1,1); 
2658:  MOVLW  01
265A:  MOVWF  58
265C:  MOVWF  59
265E:  CALL   0972
....................          printf(lcd_putc,"      Ingrese       "); 
2662:  MOVLW  AC
2664:  MOVWF  FF6
2666:  MOVLW  04
2668:  MOVWF  FF7
266A:  CALL   0DB6
....................          lcd_gotoxy(1,2); 
266E:  MOVLW  01
2670:  MOVWF  58
2672:  MOVLW  02
2674:  MOVWF  59
2676:  CALL   0972
....................          printf(lcd_putc," Contraseña Actual  "); 
267A:  MOVLW  C2
267C:  MOVWF  FF6
267E:  MOVLW  04
2680:  MOVWF  FF7
2682:  CALL   0DB6
....................          lcd_gotoxy(1,3); 
2686:  MOVLW  01
2688:  MOVWF  58
268A:  MOVLW  03
268C:  MOVWF  59
268E:  CALL   0972
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2692:  MOVLW  D8
2694:  MOVWF  FF6
2696:  MOVLW  04
2698:  MOVWF  FF7
269A:  MOVLW  0A
269C:  MOVWF  4A
269E:  CALL   0DD6
26A2:  MOVFF  36,4A
26A6:  MOVLW  1F
26A8:  MOVWF  4B
26AA:  CALL   0E1C
26AE:  MOVFF  37,4A
26B2:  MOVLW  1F
26B4:  MOVWF  4B
26B6:  CALL   0E1C
26BA:  MOVFF  38,4A
26BE:  MOVLW  1F
26C0:  MOVWF  4B
26C2:  CALL   0E1C
26C6:  MOVFF  39,4A
26CA:  MOVLW  1F
26CC:  MOVWF  4B
26CE:  CALL   0E1C
26D2:  MOVLW  20
26D4:  MOVWF  57
26D6:  CALL   0A24
26DA:  MOVLW  20
26DC:  MOVWF  57
26DE:  CALL   0A24
....................          lcd_gotoxy(unidad,4); // Para mostrar cursor. 
26E2:  MOVFF  19,58
26E6:  MOVLW  04
26E8:  MOVWF  59
26EA:  CALL   0972
....................          lcd_putc(t[2]); 
26EE:  MOVFF  34,57
26F2:  CALL   0A24
....................          Cambio=0; 
26F6:  CLRF   3E
....................       } 
....................     
....................    lee_pulsad(); 
26F8:  CALL   0EE4
....................    Switch (tecla) 
....................    { 
26FC:  MOVF   35,W
26FE:  XORLW  55
2700:  BZ    2710
2702:  XORLW  11
2704:  BZ    272C
2706:  XORLW  16
2708:  BZ    274A
270A:  XORLW  1E
270C:  BZ    2766
270E:  BRA    2782
....................     
....................    Case 'U':  //Si oprime hacia arriba 
....................       {clave[unidad-11]++;delay_ms(30);} 
2710:  MOVLW  0B
2712:  SUBWF  19,W
2714:  CLRF   03
2716:  ADDLW  36
2718:  MOVWF  FE9
271A:  MOVLW  00
271C:  ADDWFC 03,W
271E:  MOVWF  FEA
2720:  INCF   FEF,F
2722:  MOVLW  1E
2724:  MOVWF  5D
2726:  CALL   088E
....................       break; 
272A:  BRA    2782
....................          
....................    Case 'D': //Si oprime hacia abajo 
....................       {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);} 
272C:  MOVLW  0B
272E:  SUBWF  19,W
2730:  CLRF   03
2732:  ADDLW  36
2734:  MOVWF  FE9
2736:  MOVLW  00
2738:  ADDWFC 03,W
273A:  MOVWF  FEA
273C:  DECF   FEF,F
273E:  BSF    2E.5
2740:  MOVLW  1E
2742:  MOVWF  5D
2744:  CALL   088E
....................       break; 
2748:  BRA    2782
....................     
....................    Case 'R': // Si oprime derecha 
....................       {unidad++;delay_ms(500);printf(lcd_putc,"\f");} 
274A:  INCF   19,F
274C:  MOVLW  02
274E:  MOVWF  4A
2750:  MOVLW  FA
2752:  MOVWF  5D
2754:  CALL   088E
2758:  DECFSZ 4A,F
275A:  BRA    2750
275C:  MOVLW  0C
275E:  MOVWF  57
2760:  CALL   0A24
....................       break; 
2764:  BRA    2782
....................          
....................    Case 'L': // Si oprime Izquierda 
....................       {unidad--;delay_ms(500);printf(lcd_putc,"\f");} 
2766:  DECF   19,F
2768:  MOVLW  02
276A:  MOVWF  4A
276C:  MOVLW  FA
276E:  MOVWF  5D
2770:  CALL   088E
2774:  DECFSZ 4A,F
2776:  BRA    276C
2778:  MOVLW  0C
277A:  MOVWF  57
277C:  CALL   0A24
....................       break; 
2780:  BRA    2782
....................        
....................    } 
....................     
....................    if(Cambio==1) 
2782:  DECFSZ 3E,W
2784:  BRA    29A0
....................     { 
....................          
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2786:  MOVLW  0B
2788:  SUBWF  19,W
278A:  CLRF   03
278C:  ADDLW  36
278E:  MOVWF  FE9
2790:  MOVLW  00
2792:  ADDWFC 03,W
2794:  MOVWF  FEA
2796:  BTFSC  FEF.7
2798:  BRA    279C
279A:  BRA    27B0
....................        {clave[unidad-11]=9;} 
279C:  MOVLW  0B
279E:  SUBWF  19,W
27A0:  CLRF   03
27A2:  ADDLW  36
27A4:  MOVWF  FE9
27A6:  MOVLW  00
27A8:  ADDWFC 03,W
27AA:  MOVWF  FEA
27AC:  MOVLW  09
27AE:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
27B0:  MOVLW  0B
27B2:  SUBWF  19,W
27B4:  CLRF   03
27B6:  ADDLW  36
27B8:  MOVWF  FE9
27BA:  MOVLW  00
27BC:  ADDWFC 03,W
27BE:  MOVWF  FEA
27C0:  BTFSC  FEF.7
27C2:  BRA    27DC
27C4:  MOVF   FEF,W
27C6:  SUBLW  09
27C8:  BC    27DC
....................        {clave[unidad-11]=0;} 
27CA:  MOVLW  0B
27CC:  SUBWF  19,W
27CE:  CLRF   03
27D0:  ADDLW  36
27D2:  MOVWF  FE9
27D4:  MOVLW  00
27D6:  ADDWFC 03,W
27D8:  MOVWF  FEA
27DA:  CLRF   FEF
....................        if(unidad<11) 
27DC:  BTFSC  19.7
27DE:  BRA    27E6
27E0:  MOVF   19,W
27E2:  SUBLW  0A
27E4:  BNC   281E
....................        { 
....................         Menu=1;paso=1;Flecha=2;Flecha1=3;Flecha2=2;unidad=11; 
27E6:  MOVLW  01
27E8:  MOVWF  16
27EA:  MOVWF  31
27EC:  MOVLW  02
27EE:  MOVWF  1A
27F0:  MOVLW  03
27F2:  MOVWF  1B
27F4:  MOVLW  02
27F6:  MOVWF  1C
27F8:  MOVLW  0B
27FA:  MOVWF  19
....................         lcd_gotoxy(unidad,4); 
27FC:  MOVFF  19,58
2800:  MOVLW  04
2802:  MOVWF  59
2804:  CALL   0972
....................         printf(lcd_putc,"\f"); 
2808:  MOVLW  0C
280A:  MOVWF  57
280C:  CALL   0A24
....................         unidad=11;clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2810:  MOVLW  0B
2812:  MOVWF  19
2814:  CLRF   36
2816:  CLRF   37
2818:  CLRF   38
281A:  CLRF   39
....................        } 
....................        else 
281C:  BRA    2832
....................        { 
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
281E:  MOVFF  19,58
2822:  MOVLW  04
2824:  MOVWF  59
2826:  CALL   0972
....................        lcd_putc(t[2]); 
282A:  MOVFF  34,57
282E:  CALL   0A24
....................        } 
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2832:  BTFSC  19.7
2834:  BRA    2960
2836:  MOVF   19,W
2838:  SUBLW  0E
283A:  BTFSC  FD8.0
283C:  BRA    2960
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
283E:  MOVF   3A,W
2840:  SUBWF  36,W
2842:  BNZ   28DE
2844:  MOVF   3B,W
2846:  SUBWF  37,W
2848:  BNZ   28DE
284A:  MOVF   3C,W
284C:  SUBWF  38,W
284E:  BNZ   28DE
2850:  MOVF   3D,W
2852:  SUBWF  39,W
2854:  BNZ   28DE
....................             {lcd_gotoxy(1,1); 
2856:  MOVLW  01
2858:  MOVWF  58
285A:  MOVWF  59
285C:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2860:  MOVLW  EE
2862:  MOVWF  FF6
2864:  MOVLW  04
2866:  MOVWF  FF7
2868:  CALL   0DB6
....................             lcd_gotoxy(1,2); 
286C:  MOVLW  01
286E:  MOVWF  58
2870:  MOVLW  02
2872:  MOVWF  59
2874:  CALL   0972
....................             printf(lcd_putc,"     Contraseña     "); 
2878:  MOVLW  04
287A:  MOVWF  FF6
287C:  MOVLW  05
287E:  MOVWF  FF7
2880:  CALL   0DB6
....................             lcd_gotoxy(1,3); 
2884:  MOVLW  01
2886:  MOVWF  58
2888:  MOVLW  03
288A:  MOVWF  59
288C:  CALL   0972
....................             printf(lcd_putc,"      Correcta      "); 
2890:  MOVLW  1A
2892:  MOVWF  FF6
2894:  MOVLW  05
2896:  MOVWF  FF7
2898:  CALL   0DB6
....................             lcd_gotoxy(1,4); 
289C:  MOVLW  01
289E:  MOVWF  58
28A0:  MOVLW  04
28A2:  MOVWF  59
28A4:  CALL   0972
....................             printf(lcd_putc,"                    "); 
28A8:  MOVLW  30
28AA:  MOVWF  FF6
28AC:  MOVLW  05
28AE:  MOVWF  FF7
28B0:  CALL   0DB6
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
28B4:  MOVLW  02
28B6:  MOVWF  4A
28B8:  MOVLW  FA
28BA:  MOVWF  5D
28BC:  CALL   088E
28C0:  DECFSZ 4A,F
28C2:  BRA    28B8
28C4:  MOVLW  33
28C6:  MOVWF  16
28C8:  MOVLW  0B
28CA:  MOVWF  19
28CC:  MOVLW  0C
28CE:  MOVWF  57
28D0:  CALL   0A24
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
28D4:  CLRF   36
28D6:  CLRF   37
28D8:  CLRF   38
28DA:  CLRF   39
....................          else 
28DC:  BRA    2960
....................          {lcd_gotoxy(1,1); 
28DE:  MOVLW  01
28E0:  MOVWF  58
28E2:  MOVWF  59
28E4:  CALL   0972
....................             printf(lcd_putc,"                    "); 
28E8:  MOVLW  46
28EA:  MOVWF  FF6
28EC:  MOVLW  05
28EE:  MOVWF  FF7
28F0:  CALL   0DB6
....................             lcd_gotoxy(1,2); 
28F4:  MOVLW  01
28F6:  MOVWF  58
28F8:  MOVLW  02
28FA:  MOVWF  59
28FC:  CALL   0972
....................             printf(lcd_putc,"     Contraseña     "); 
2900:  MOVLW  5C
2902:  MOVWF  FF6
2904:  MOVLW  05
2906:  MOVWF  FF7
2908:  CALL   0DB6
....................             lcd_gotoxy(1,3); 
290C:  MOVLW  01
290E:  MOVWF  58
2910:  MOVLW  03
2912:  MOVWF  59
2914:  CALL   0972
....................             printf(lcd_putc,"     Incorrecta     "); 
2918:  MOVLW  72
291A:  MOVWF  FF6
291C:  MOVLW  05
291E:  MOVWF  FF7
2920:  CALL   0DB6
....................             lcd_gotoxy(1,4); 
2924:  MOVLW  01
2926:  MOVWF  58
2928:  MOVLW  04
292A:  MOVWF  59
292C:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2930:  MOVLW  88
2932:  MOVWF  FF6
2934:  MOVLW  05
2936:  MOVWF  FF7
2938:  CALL   0DB6
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
293C:  MOVLW  02
293E:  MOVWF  4A
2940:  MOVLW  FA
2942:  MOVWF  5D
2944:  CALL   088E
2948:  DECFSZ 4A,F
294A:  BRA    2940
294C:  MOVLW  0B
294E:  MOVWF  19
2950:  MOVLW  0C
2952:  MOVWF  57
2954:  CALL   0A24
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2958:  CLRF   36
295A:  CLRF   37
295C:  CLRF   38
295E:  CLRF   39
....................             } 
....................          } 
....................           if(unidad>11&&unidad<14) 
2960:  BTFSC  19.7
2962:  BRA    29A0
2964:  MOVF   19,W
2966:  SUBLW  0B
2968:  BC    29A0
296A:  BTFSC  19.7
296C:  BRA    2974
296E:  MOVF   19,W
2970:  SUBLW  0D
2972:  BNC   29A0
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2974:  MOVLW  01
2976:  SUBWF  19,W
2978:  MOVWF  4A
297A:  MOVWF  58
297C:  MOVLW  04
297E:  MOVWF  59
2980:  CALL   0972
....................             lcd_putc(t[1]); 
2984:  MOVFF  33,57
2988:  CALL   0A24
....................             lcd_gotoxy(unidad,4);// Para mostrar cursor. 
298C:  MOVFF  19,58
2990:  MOVLW  04
2992:  MOVWF  59
2994:  CALL   0972
....................             lcd_putc(t[2]); 
2998:  MOVFF  34,57
299C:  CALL   0A24
....................           } 
....................     } 
....................    }       
29A0:  BRA    264C
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    while(Menu == 51)   // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
....................    { 
29A2:  MOVF   16,W
29A4:  SUBLW  33
29A6:  BTFSS  FD8.2
29A8:  BRA    2D18
....................     if(Cambio==1) 
29AA:  DECFSZ 3E,W
29AC:  BRA    2A4E
....................     { 
....................    lcd_gotoxy(1,1); 
29AE:  MOVLW  01
29B0:  MOVWF  58
29B2:  MOVWF  59
29B4:  CALL   0972
....................    printf(lcd_putc,"     Ingrese        "); 
29B8:  MOVLW  9E
29BA:  MOVWF  FF6
29BC:  MOVLW  05
29BE:  MOVWF  FF7
29C0:  CALL   0DB6
....................    lcd_gotoxy(1,2); 
29C4:  MOVLW  01
29C6:  MOVWF  58
29C8:  MOVLW  02
29CA:  MOVWF  59
29CC:  CALL   0972
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
29D0:  MOVLW  B4
29D2:  MOVWF  FF6
29D4:  MOVLW  05
29D6:  MOVWF  FF7
29D8:  CALL   0DB6
....................    lcd_gotoxy(1,3); 
29DC:  MOVLW  01
29DE:  MOVWF  58
29E0:  MOVLW  03
29E2:  MOVWF  59
29E4:  CALL   0972
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
29E8:  MOVLW  CA
29EA:  MOVWF  FF6
29EC:  MOVLW  05
29EE:  MOVWF  FF7
29F0:  MOVLW  0A
29F2:  MOVWF  4A
29F4:  CALL   0DD6
29F8:  MOVFF  36,4A
29FC:  MOVLW  1F
29FE:  MOVWF  4B
2A00:  CALL   0E1C
2A04:  MOVFF  37,4A
2A08:  MOVLW  1F
2A0A:  MOVWF  4B
2A0C:  CALL   0E1C
2A10:  MOVFF  38,4A
2A14:  MOVLW  1F
2A16:  MOVWF  4B
2A18:  CALL   0E1C
2A1C:  MOVFF  39,4A
2A20:  MOVLW  1F
2A22:  MOVWF  4B
2A24:  CALL   0E1C
2A28:  MOVLW  20
2A2A:  MOVWF  57
2A2C:  CALL   0A24
2A30:  MOVLW  20
2A32:  MOVWF  57
2A34:  CALL   0A24
....................    lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2A38:  MOVFF  19,58
2A3C:  MOVLW  04
2A3E:  MOVWF  59
2A40:  CALL   0972
....................    lcd_putc(t[2]); 
2A44:  MOVFF  34,57
2A48:  CALL   0A24
....................    Cambio=0; 
2A4C:  CLRF   3E
....................     } 
....................     
....................    lee_pulsad(); 
2A4E:  CALL   0EE4
....................    Switch (tecla) 
....................     { 
2A52:  MOVF   35,W
2A54:  XORLW  55
2A56:  BZ    2A66
2A58:  XORLW  11
2A5A:  BZ    2A82
2A5C:  XORLW  16
2A5E:  BZ    2A9E
2A60:  XORLW  1E
2A62:  BZ    2AB2
2A64:  BRA    2AC6
....................     Case 'U':  //Si oprime hacia arriba 
....................       {clave[unidad-11]++;delay_ms(30);} 
2A66:  MOVLW  0B
2A68:  SUBWF  19,W
2A6A:  CLRF   03
2A6C:  ADDLW  36
2A6E:  MOVWF  FE9
2A70:  MOVLW  00
2A72:  ADDWFC 03,W
2A74:  MOVWF  FEA
2A76:  INCF   FEF,F
2A78:  MOVLW  1E
2A7A:  MOVWF  5D
2A7C:  CALL   088E
....................       break; 
2A80:  BRA    2AC6
....................        
....................     Case 'D':  //Si oprime hacia abajo 
....................       {clave[unidad-11]--;delay_ms(30);} 
2A82:  MOVLW  0B
2A84:  SUBWF  19,W
2A86:  CLRF   03
2A88:  ADDLW  36
2A8A:  MOVWF  FE9
2A8C:  MOVLW  00
2A8E:  ADDWFC 03,W
2A90:  MOVWF  FEA
2A92:  DECF   FEF,F
2A94:  MOVLW  1E
2A96:  MOVWF  5D
2A98:  CALL   088E
....................       break; 
2A9C:  BRA    2AC6
....................      
....................     Case 'R':  // Si oprime Derecha 
....................       {unidad++;delay_ms(30);printf(lcd_putc,"\f");} 
2A9E:  INCF   19,F
2AA0:  MOVLW  1E
2AA2:  MOVWF  5D
2AA4:  CALL   088E
2AA8:  MOVLW  0C
2AAA:  MOVWF  57
2AAC:  CALL   0A24
....................       break; 
2AB0:  BRA    2AC6
....................      
....................     Case 'L':  // Si oprime Izquierda 
....................       {unidad--;delay_ms(30);printf(lcd_putc,"\f");} 
2AB2:  DECF   19,F
2AB4:  MOVLW  1E
2AB6:  MOVWF  5D
2AB8:  CALL   088E
2ABC:  MOVLW  0C
2ABE:  MOVWF  57
2AC0:  CALL   0A24
....................       break; 
2AC4:  BRA    2AC6
....................     } 
....................      
....................     if(Cambio==1) 
2AC6:  DECFSZ 3E,W
2AC8:  BRA    2D16
....................       {       
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2ACA:  MOVLW  0B
2ACC:  SUBWF  19,W
2ACE:  CLRF   03
2AD0:  ADDLW  36
2AD2:  MOVWF  FE9
2AD4:  MOVLW  00
2AD6:  ADDWFC 03,W
2AD8:  MOVWF  FEA
2ADA:  BTFSC  FEF.7
2ADC:  BRA    2AE0
2ADE:  BRA    2AF4
....................        {clave[unidad-11]=9;} 
2AE0:  MOVLW  0B
2AE2:  SUBWF  19,W
2AE4:  CLRF   03
2AE6:  ADDLW  36
2AE8:  MOVWF  FE9
2AEA:  MOVLW  00
2AEC:  ADDWFC 03,W
2AEE:  MOVWF  FEA
2AF0:  MOVLW  09
2AF2:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2AF4:  MOVLW  0B
2AF6:  SUBWF  19,W
2AF8:  CLRF   03
2AFA:  ADDLW  36
2AFC:  MOVWF  FE9
2AFE:  MOVLW  00
2B00:  ADDWFC 03,W
2B02:  MOVWF  FEA
2B04:  BTFSC  FEF.7
2B06:  BRA    2B20
2B08:  MOVF   FEF,W
2B0A:  SUBLW  09
2B0C:  BC    2B20
....................        {clave[unidad-11]=0;} 
2B0E:  MOVLW  0B
2B10:  SUBWF  19,W
2B12:  CLRF   03
2B14:  ADDLW  36
2B16:  MOVWF  FE9
2B18:  MOVLW  00
2B1A:  ADDWFC 03,W
2B1C:  MOVWF  FEA
2B1E:  CLRF   FEF
....................        if(unidad<11) 
2B20:  BTFSC  19.7
2B22:  BRA    2B2A
2B24:  MOVF   19,W
2B26:  SUBLW  0A
2B28:  BNC   2B60
....................        { 
....................         Menu=1;paso=1;Flecha=2;Flecha1=3;Flecha2=2;unidad=11; 
2B2A:  MOVLW  01
2B2C:  MOVWF  16
2B2E:  MOVWF  31
2B30:  MOVLW  02
2B32:  MOVWF  1A
2B34:  MOVLW  03
2B36:  MOVWF  1B
2B38:  MOVLW  02
2B3A:  MOVWF  1C
2B3C:  MOVLW  0B
2B3E:  MOVWF  19
....................         lcd_gotoxy(unidad,4); 
2B40:  MOVFF  19,58
2B44:  MOVLW  04
2B46:  MOVWF  59
2B48:  CALL   0972
....................         printf(lcd_putc,"\f"); 
2B4C:  MOVLW  0C
2B4E:  MOVWF  57
2B50:  CALL   0A24
....................         unidad=11;clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2B54:  MOVLW  0B
2B56:  MOVWF  19
2B58:  CLRF   36
2B5A:  CLRF   37
2B5C:  CLRF   38
2B5E:  CLRF   39
....................        } 
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2B60:  MOVFF  19,58
2B64:  MOVLW  04
2B66:  MOVWF  59
2B68:  CALL   0972
....................        lcd_putc(t[2]); 
2B6C:  MOVFF  34,57
2B70:  CALL   0A24
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2B74:  BTFSC  19.7
2B76:  BRA    2CEA
2B78:  MOVF   19,W
2B7A:  SUBLW  0E
2B7C:  BTFSC  FD8.0
2B7E:  BRA    2CEA
....................        { 
....................             lcd_gotoxy(1,1); 
2B80:  MOVLW  01
2B82:  MOVWF  58
2B84:  MOVWF  59
2B86:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2B8A:  MOVLW  E0
2B8C:  MOVWF  FF6
2B8E:  MOVLW  05
2B90:  MOVWF  FF7
2B92:  CALL   0DB6
....................             lcd_gotoxy(1,2); 
2B96:  MOVLW  01
2B98:  MOVWF  58
2B9A:  MOVLW  02
2B9C:  MOVWF  59
2B9E:  CALL   0972
....................             printf(lcd_putc,"     Contraseña     "); 
2BA2:  MOVLW  F6
2BA4:  MOVWF  FF6
2BA6:  MOVLW  05
2BA8:  MOVWF  FF7
2BAA:  CALL   0DB6
....................             lcd_gotoxy(1,3); 
2BAE:  MOVLW  01
2BB0:  MOVWF  58
2BB2:  MOVLW  03
2BB4:  MOVWF  59
2BB6:  CALL   0972
....................             printf(lcd_putc,"     Almacenada     "); 
2BBA:  MOVLW  0C
2BBC:  MOVWF  FF6
2BBE:  MOVLW  06
2BC0:  MOVWF  FF7
2BC2:  CALL   0DB6
....................             lcd_gotoxy(1,4); 
2BC6:  MOVLW  01
2BC8:  MOVWF  58
2BCA:  MOVLW  04
2BCC:  MOVWF  59
2BCE:  CALL   0972
....................             printf(lcd_putc,"                    "); 
2BD2:  MOVLW  22
2BD4:  MOVWF  FF6
2BD6:  MOVLW  06
2BD8:  MOVWF  FF7
2BDA:  CALL   0DB6
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2BDE:  CLRF   FA9
2BE0:  MOVFF  36,FA8
2BE4:  BCF    FA6.6
2BE6:  BCF    FA6.7
2BE8:  BSF    FA6.2
2BEA:  MOVF   FF2,W
2BEC:  MOVWF  00
2BEE:  BCF    FF2.7
2BF0:  MOVLB  F
2BF2:  MOVLW  55
2BF4:  MOVWF  FA7
2BF6:  MOVLW  AA
2BF8:  MOVWF  FA7
2BFA:  BSF    FA6.1
2BFC:  BTFSC  FA6.1
2BFE:  BRA    2BFC
2C00:  BCF    FA6.2
2C02:  MOVF   00,W
2C04:  IORWF  FF2,F
2C06:  MOVLW  14
2C08:  MOVWF  5D
2C0A:  MOVLB  0
2C0C:  CALL   088E
2C10:  MOVLW  01
2C12:  MOVWF  FA9
2C14:  MOVFF  37,FA8
2C18:  BCF    FA6.6
2C1A:  BCF    FA6.7
2C1C:  BSF    FA6.2
2C1E:  MOVF   FF2,W
2C20:  MOVWF  00
2C22:  BCF    FF2.7
2C24:  MOVLB  F
2C26:  MOVLW  55
2C28:  MOVWF  FA7
2C2A:  MOVLW  AA
2C2C:  MOVWF  FA7
2C2E:  BSF    FA6.1
2C30:  BTFSC  FA6.1
2C32:  BRA    2C30
2C34:  BCF    FA6.2
2C36:  MOVF   00,W
2C38:  IORWF  FF2,F
2C3A:  MOVLW  14
2C3C:  MOVWF  5D
2C3E:  MOVLB  0
2C40:  CALL   088E
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2C44:  MOVLW  02
2C46:  MOVWF  FA9
2C48:  MOVFF  38,FA8
2C4C:  BCF    FA6.6
2C4E:  BCF    FA6.7
2C50:  BSF    FA6.2
2C52:  MOVF   FF2,W
2C54:  MOVWF  00
2C56:  BCF    FF2.7
2C58:  MOVLB  F
2C5A:  MOVLW  55
2C5C:  MOVWF  FA7
2C5E:  MOVLW  AA
2C60:  MOVWF  FA7
2C62:  BSF    FA6.1
2C64:  BTFSC  FA6.1
2C66:  BRA    2C64
2C68:  BCF    FA6.2
2C6A:  MOVF   00,W
2C6C:  IORWF  FF2,F
2C6E:  MOVLW  14
2C70:  MOVWF  5D
2C72:  MOVLB  0
2C74:  CALL   088E
2C78:  MOVLW  03
2C7A:  MOVWF  FA9
2C7C:  MOVFF  39,FA8
2C80:  BCF    FA6.6
2C82:  BCF    FA6.7
2C84:  BSF    FA6.2
2C86:  MOVF   FF2,W
2C88:  MOVWF  00
2C8A:  BCF    FF2.7
2C8C:  MOVLB  F
2C8E:  MOVLW  55
2C90:  MOVWF  FA7
2C92:  MOVLW  AA
2C94:  MOVWF  FA7
2C96:  BSF    FA6.1
2C98:  BTFSC  FA6.1
2C9A:  BRA    2C98
2C9C:  BCF    FA6.2
2C9E:  MOVF   00,W
2CA0:  IORWF  FF2,F
2CA2:  MOVLW  14
2CA4:  MOVWF  5D
2CA6:  MOVLB  0
2CA8:  CALL   088E
....................             contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2CAC:  MOVFF  36,3A
2CB0:  MOVFF  37,3B
2CB4:  MOVFF  38,3C
2CB8:  MOVFF  39,3D
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2CBC:  CLRF   36
2CBE:  CLRF   37
2CC0:  CLRF   38
2CC2:  CLRF   39
....................             delay_ms(500);Menu=1;Flecha=2;Flecha2=2;unidad=11;printf(lcd_putc,"\f"); 
2CC4:  MOVLW  02
2CC6:  MOVWF  4A
2CC8:  MOVLW  FA
2CCA:  MOVWF  5D
2CCC:  CALL   088E
2CD0:  DECFSZ 4A,F
2CD2:  BRA    2CC8
2CD4:  MOVLW  01
2CD6:  MOVWF  16
2CD8:  MOVLW  02
2CDA:  MOVWF  1A
2CDC:  MOVWF  1C
2CDE:  MOVLW  0B
2CE0:  MOVWF  19
2CE2:  MOVLW  0C
2CE4:  MOVWF  57
2CE6:  CALL   0A24
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2CEA:  BTFSC  19.7
2CEC:  BRA    2D16
2CEE:  MOVF   19,W
2CF0:  SUBLW  0B
2CF2:  BC    2D16
2CF4:  BTFSC  19.7
2CF6:  BRA    2CFE
2CF8:  MOVF   19,W
2CFA:  SUBLW  0D
2CFC:  BNC   2D16
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2CFE:  MOVLW  01
2D00:  SUBWF  19,W
2D02:  MOVWF  4A
2D04:  MOVWF  58
2D06:  MOVLW  04
2D08:  MOVWF  59
2D0A:  CALL   0972
....................             lcd_putc(t[1]); 
2D0E:  MOVFF  33,57
2D12:  CALL   0A24
....................           } 
....................       } 
....................    }       
2D16:  BRA    29A2
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    while(Menu == 6)// Menu de Tiempo de Purga 
....................    { 
2D18:  MOVF   16,W
2D1A:  SUBLW  06
2D1C:  BTFSS  FD8.2
2D1E:  BRA    2F60
....................     if(Cambio==1) 
2D20:  DECFSZ 3E,W
2D22:  BRA    2DA8
....................      { 
....................       lcd_gotoxy(1,1); 
2D24:  MOVLW  01
2D26:  MOVWF  58
2D28:  MOVWF  59
2D2A:  CALL   0972
....................       printf(lcd_putc,"     Tiempo  de      "); 
2D2E:  MOVLW  38
2D30:  MOVWF  FF6
2D32:  MOVLW  06
2D34:  MOVWF  FF7
2D36:  CALL   0DB6
....................       lcd_gotoxy(1,2); 
2D3A:  MOVLW  01
2D3C:  MOVWF  58
2D3E:  MOVLW  02
2D40:  MOVWF  59
2D42:  CALL   0972
....................       printf(lcd_putc,"       Purga         "); 
2D46:  MOVLW  4E
2D48:  MOVWF  FF6
2D4A:  MOVLW  06
2D4C:  MOVWF  FF7
2D4E:  CALL   0DB6
....................       lcd_gotoxy(6,3); 
2D52:  MOVLW  06
2D54:  MOVWF  58
2D56:  MOVLW  03
2D58:  MOVWF  59
2D5A:  CALL   0972
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
2D5E:  MOVFF  22,4A
2D62:  MOVLW  01
2D64:  MOVWF  4B
2D66:  CALL   105A
2D6A:  MOVLW  3A
2D6C:  MOVWF  57
2D6E:  CALL   0A24
2D72:  MOVFF  29,4A
2D76:  MOVLW  01
2D78:  MOVWF  4B
2D7A:  CALL   105A
2D7E:  MOVLW  6D
2D80:  MOVWF  FF6
2D82:  MOVLW  06
2D84:  MOVWF  FF7
2D86:  MOVLW  08
2D88:  MOVWF  4A
2D8A:  CALL   0DD6
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2D8E:  MOVLW  06
2D90:  ADDWF  20,W
2D92:  MOVWF  4A
2D94:  MOVWF  58
2D96:  MOVLW  04
2D98:  MOVWF  59
2D9A:  CALL   0972
....................       lcd_putc(t[2]); 
2D9E:  MOVFF  34,57
2DA2:  CALL   0A24
....................       Cambio=0; 
2DA6:  CLRF   3E
....................      } 
....................        
....................       if(unidad2<1) 
2DA8:  BTFSC  20.7
2DAA:  BRA    2DB2
2DAC:  MOVF   20,W
2DAE:  SUBLW  00
2DB0:  BNC   2DB6
....................          unidad2=1; 
2DB2:  MOVLW  01
2DB4:  MOVWF  20
....................       if(unidad2>3) 
2DB6:  BTFSC  20.7
2DB8:  BRA    2DC4
2DBA:  MOVF   20,W
2DBC:  SUBLW  03
2DBE:  BC    2DC4
....................          unidad2=3;    
2DC0:  MOVLW  03
2DC2:  MOVWF  20
....................       
....................      lee_pulsad(); 
2DC4:  CALL   0EE4
....................       
....................      Switch(tecla) 
....................         
....................       { 
2DC8:  MOVF   35,W
2DCA:  XORLW  55
2DCC:  BZ    2DDC
2DCE:  XORLW  11
2DD0:  BZ    2E14
2DD2:  XORLW  16
2DD4:  BZ    2E48
2DD6:  XORLW  1E
2DD8:  BZ    2E7C
2DDA:  BRA    2F5E
....................       Case 'U': 
....................       { 
....................          if(unidad2==1) 
2DDC:  DECFSZ 20,W
2DDE:  BRA    2DF6
....................          { 
....................             purga_minutos_pro++; 
2DE0:  INCF   22,F
....................             if(purga_minutos_pro>59) 
2DE2:  BTFSC  22.7
2DE4:  BRA    2DEE
2DE6:  MOVF   22,W
2DE8:  SUBLW  3B
2DEA:  BC    2DEE
....................                purga_minutos_pro=0; 
2DEC:  CLRF   22
....................                 
....................             delay_ms(200); 
2DEE:  MOVLW  C8
2DF0:  MOVWF  5D
2DF2:  CALL   088E
....................              
....................          } 
....................           
....................          if(unidad2==3) 
2DF6:  MOVF   20,W
2DF8:  SUBLW  03
2DFA:  BNZ   2E12
....................          { 
....................             purga_segundos_pro++; 
2DFC:  INCF   29,F
....................             if(purga_segundos_pro>59) 
2DFE:  BTFSC  29.7
2E00:  BRA    2E0A
2E02:  MOVF   29,W
2E04:  SUBLW  3B
2E06:  BC    2E0A
....................                purga_segundos_pro=0; 
2E08:  CLRF   29
....................                 
....................             delay_ms(200); 
2E0A:  MOVLW  C8
2E0C:  MOVWF  5D
2E0E:  CALL   088E
....................          } 
....................       } 
....................       break; 
2E12:  BRA    2F5E
....................        
....................       Case 'D': 
....................       { 
....................          if(unidad2==1) 
2E14:  DECFSZ 20,W
2E16:  BRA    2E2C
....................          { 
....................             purga_minutos_pro--; 
2E18:  DECF   22,F
....................             if(purga_minutos_pro<0) 
2E1A:  BTFSC  22.7
2E1C:  BRA    2E20
2E1E:  BRA    2E24
....................                purga_minutos_pro=59; 
2E20:  MOVLW  3B
2E22:  MOVWF  22
....................                 
....................             delay_ms(200); 
2E24:  MOVLW  C8
2E26:  MOVWF  5D
2E28:  CALL   088E
....................          } 
....................           
....................          if(unidad2==3) 
2E2C:  MOVF   20,W
2E2E:  SUBLW  03
2E30:  BNZ   2E46
....................          { 
....................             purga_segundos_pro--; 
2E32:  DECF   29,F
....................             if(purga_segundos_pro<0) 
2E34:  BTFSC  29.7
2E36:  BRA    2E3A
2E38:  BRA    2E3E
....................                purga_segundos_pro=59; 
2E3A:  MOVLW  3B
2E3C:  MOVWF  29
....................                 
....................             delay_ms(200); 
2E3E:  MOVLW  C8
2E40:  MOVWF  5D
2E42:  CALL   088E
....................          } 
....................       } 
....................       break; 
2E46:  BRA    2F5E
....................        
....................       Case 'R': 
....................       { 
....................          if(unidad2==1) 
2E48:  DECFSZ 20,W
2E4A:  BRA    2E52
....................          { 
....................             unidad2=3; 
2E4C:  MOVLW  03
2E4E:  MOVWF  20
....................          } 
....................          else 
2E50:  BRA    2E62
....................          { 
....................             if(unidad2==3) 
2E52:  MOVF   20,W
2E54:  SUBLW  03
2E56:  BNZ   2E5E
....................             { 
....................                unidad2=1; 
2E58:  MOVLW  01
2E5A:  MOVWF  20
....................             } 
....................             else 
2E5C:  BRA    2E62
....................             { 
....................                unidad2=3; 
2E5E:  MOVLW  03
2E60:  MOVWF  20
....................             } 
....................          } 
....................          delay_ms(400); 
2E62:  MOVLW  02
2E64:  MOVWF  4A
2E66:  MOVLW  C8
2E68:  MOVWF  5D
2E6A:  CALL   088E
2E6E:  DECFSZ 4A,F
2E70:  BRA    2E66
....................          printf(lcd_putc,"\f"); 
2E72:  MOVLW  0C
2E74:  MOVWF  57
2E76:  CALL   0A24
....................       } 
....................       break; 
2E7A:  BRA    2F5E
....................        
....................       Case 'L': 
....................       { 
....................          delay_ms(200); 
2E7C:  MOVLW  C8
2E7E:  MOVWF  5D
2E80:  CALL   088E
....................          printf(lcd_putc,"\f"); 
2E84:  MOVLW  0C
2E86:  MOVWF  57
2E88:  CALL   0A24
....................          lcd_gotoxy(1,2); 
2E8C:  MOVLW  01
2E8E:  MOVWF  58
2E90:  MOVLW  02
2E92:  MOVWF  59
2E94:  CALL   0972
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2E98:  MOVLW  76
2E9A:  MOVWF  FF6
2E9C:  MOVLW  06
2E9E:  MOVWF  FF7
2EA0:  CALL   0DB6
....................          lcd_gotoxy(1,3); 
2EA4:  MOVLW  01
2EA6:  MOVWF  58
2EA8:  MOVLW  03
2EAA:  MOVWF  59
2EAC:  CALL   0972
....................          printf(lcd_putc,"  Correctamente  "); 
2EB0:  MOVLW  88
2EB2:  MOVWF  FF6
2EB4:  MOVLW  06
2EB6:  MOVWF  FF7
2EB8:  CALL   0DB6
....................          write_eeprom(20,purga_minutos_pro); 
2EBC:  MOVLW  14
2EBE:  MOVWF  FA9
2EC0:  MOVFF  22,FA8
2EC4:  BCF    FA6.6
2EC6:  BCF    FA6.7
2EC8:  BSF    FA6.2
2ECA:  MOVF   FF2,W
2ECC:  MOVWF  00
2ECE:  BCF    FF2.7
2ED0:  MOVLB  F
2ED2:  MOVLW  55
2ED4:  MOVWF  FA7
2ED6:  MOVLW  AA
2ED8:  MOVWF  FA7
2EDA:  BSF    FA6.1
2EDC:  BTFSC  FA6.1
2EDE:  BRA    2EDC
2EE0:  BCF    FA6.2
2EE2:  MOVF   00,W
2EE4:  IORWF  FF2,F
....................          delay_ms(20); 
2EE6:  MOVLW  14
2EE8:  MOVWF  5D
2EEA:  MOVLB  0
2EEC:  CALL   088E
....................          write_eeprom(21,purga_segundos_pro); 
2EF0:  MOVLW  15
2EF2:  MOVWF  FA9
2EF4:  MOVFF  29,FA8
2EF8:  BCF    FA6.6
2EFA:  BCF    FA6.7
2EFC:  BSF    FA6.2
2EFE:  MOVF   FF2,W
2F00:  MOVWF  00
2F02:  BCF    FF2.7
2F04:  MOVLB  F
2F06:  MOVLW  55
2F08:  MOVWF  FA7
2F0A:  MOVLW  AA
2F0C:  MOVWF  FA7
2F0E:  BSF    FA6.1
2F10:  BTFSC  FA6.1
2F12:  BRA    2F10
2F14:  BCF    FA6.2
2F16:  MOVF   00,W
2F18:  IORWF  FF2,F
....................          delay_ms(20); 
2F1A:  MOVLW  14
2F1C:  MOVWF  5D
2F1E:  MOVLB  0
2F20:  CALL   088E
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2F24:  CLRF   36
2F26:  CLRF   37
2F28:  CLRF   38
2F2A:  CLRF   39
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
2F2C:  MOVFF  22,21
2F30:  MOVFF  29,28
....................          delay_ms(700); 
2F34:  MOVLW  04
2F36:  MOVWF  4A
2F38:  MOVLW  AF
2F3A:  MOVWF  5D
2F3C:  CALL   088E
2F40:  DECFSZ 4A,F
2F42:  BRA    2F38
....................          Menu=1;Flecha=2;Flecha2=2;Cambio=1;paso=0;printf(lcd_putc,"\f"); 
2F44:  MOVLW  01
2F46:  MOVWF  16
2F48:  MOVLW  02
2F4A:  MOVWF  1A
2F4C:  MOVWF  1C
2F4E:  MOVLW  01
2F50:  MOVWF  3E
2F52:  CLRF   31
2F54:  MOVLW  0C
2F56:  MOVWF  57
2F58:  CALL   0A24
....................       } 
....................       break; 
2F5C:  BRA    2F5E
....................      } 
....................          
....................    } 
2F5E:  BRA    2D18
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    while(Menu == 7)   // Menu de Tiempo de Post-Purga 
....................    { 
2F60:  MOVF   16,W
2F62:  SUBLW  07
2F64:  BTFSS  FD8.2
2F66:  BRA    31C0
....................     if(Cambio==1) 
2F68:  DECFSZ 3E,W
2F6A:  BRA    300C
....................      { 
....................       lcd_gotoxy(1,1); 
2F6C:  MOVLW  01
2F6E:  MOVWF  58
2F70:  MOVWF  59
2F72:  CALL   0972
....................       printf(lcd_putc,"     Tiempo  de      "); 
2F76:  MOVLW  9A
2F78:  MOVWF  FF6
2F7A:  MOVLW  06
2F7C:  MOVWF  FF7
2F7E:  CALL   0DB6
....................       lcd_gotoxy(1,2); 
2F82:  MOVLW  01
2F84:  MOVWF  58
2F86:  MOVLW  02
2F88:  MOVWF  59
2F8A:  CALL   0972
....................       printf(lcd_putc,"     Post-Purga      "); 
2F8E:  MOVLW  B0
2F90:  MOVWF  FF6
2F92:  MOVLW  06
2F94:  MOVWF  FF7
2F96:  CALL   0DB6
....................       lcd_gotoxy(6,3); 
2F9A:  MOVLW  06
2F9C:  MOVWF  58
2F9E:  MOVLW  03
2FA0:  MOVWF  59
2FA2:  CALL   0972
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
2FA6:  MOVFF  2D,4A
2FAA:  MOVLW  01
2FAC:  MOVWF  4B
2FAE:  CALL   105A
2FB2:  MOVLW  3A
2FB4:  MOVWF  57
2FB6:  CALL   0A24
2FBA:  MOVFF  2B,4A
2FBE:  MOVLW  01
2FC0:  MOVWF  4B
2FC2:  CALL   105A
2FC6:  MOVLW  CF
2FC8:  MOVWF  FF6
2FCA:  MOVLW  06
2FCC:  MOVWF  FF7
2FCE:  MOVLW  08
2FD0:  MOVWF  4A
2FD2:  CALL   0DD6
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2FD6:  MOVLW  06
2FD8:  ADDWF  20,W
2FDA:  MOVWF  4A
2FDC:  MOVWF  58
2FDE:  MOVLW  04
2FE0:  MOVWF  59
2FE2:  CALL   0972
....................       lcd_putc(t[2]); 
2FE6:  MOVFF  34,57
2FEA:  CALL   0A24
....................       if(unidad2<1) 
2FEE:  BTFSC  20.7
2FF0:  BRA    2FF8
2FF2:  MOVF   20,W
2FF4:  SUBLW  00
2FF6:  BNC   2FFC
....................          unidad2=1; 
2FF8:  MOVLW  01
2FFA:  MOVWF  20
....................       if(unidad2>3) 
2FFC:  BTFSC  20.7
2FFE:  BRA    300A
3000:  MOVF   20,W
3002:  SUBLW  03
3004:  BC    300A
....................          unidad2=3; 
3006:  MOVLW  03
3008:  MOVWF  20
....................       Cambio=0; 
300A:  CLRF   3E
....................      } 
....................       
....................      lee_pulsad(); 
300C:  CALL   0EE4
....................       
....................      Switch(tecla) 
....................       { 
3010:  MOVF   35,W
3012:  XORLW  55
3014:  BZ    3024
3016:  XORLW  11
3018:  BZ    306C
301A:  XORLW  16
301C:  BZ    30B0
301E:  XORLW  1E
3020:  BZ    30DE
3022:  BRA    31BE
....................        
....................       Case 'U': 
....................       { 
....................          if(unidad2==1) 
3024:  DECFSZ 20,W
3026:  BRA    3046
....................          { 
....................             ppurga_minutos_pro++; 
3028:  INCF   2D,F
....................             if(ppurga_minutos_pro>59) 
302A:  BTFSC  2D.7
302C:  BRA    3036
302E:  MOVF   2D,W
3030:  SUBLW  3B
3032:  BC    3036
....................                ppurga_minutos_pro=0; 
3034:  CLRF   2D
....................                 
....................             delay_ms(300); 
3036:  MOVLW  02
3038:  MOVWF  4A
303A:  MOVLW  96
303C:  MOVWF  5D
303E:  CALL   088E
3042:  DECFSZ 4A,F
3044:  BRA    303A
....................              
....................          } 
....................           
....................          if(unidad2==3) 
3046:  MOVF   20,W
3048:  SUBLW  03
304A:  BNZ   306A
....................          { 
....................             ppurga_segundos_pro++; 
304C:  INCF   2B,F
....................             if(ppurga_segundos_pro>59) 
304E:  BTFSC  2B.7
3050:  BRA    305A
3052:  MOVF   2B,W
3054:  SUBLW  3B
3056:  BC    305A
....................                ppurga_segundos_pro=0; 
3058:  CLRF   2B
....................                 
....................             delay_ms(300); 
305A:  MOVLW  02
305C:  MOVWF  4A
305E:  MOVLW  96
3060:  MOVWF  5D
3062:  CALL   088E
3066:  DECFSZ 4A,F
3068:  BRA    305E
....................          } 
....................       } 
....................       break; 
306A:  BRA    31BE
....................        
....................       Case 'D': 
....................       { 
....................          if(unidad2==1) 
306C:  DECFSZ 20,W
306E:  BRA    308C
....................          { 
....................             ppurga_minutos_pro--; 
3070:  DECF   2D,F
....................             if(ppurga_minutos_pro<0) 
3072:  BTFSC  2D.7
3074:  BRA    3078
3076:  BRA    307C
....................                ppurga_minutos_pro=59; 
3078:  MOVLW  3B
307A:  MOVWF  2D
....................                 
....................             delay_ms(300); 
307C:  MOVLW  02
307E:  MOVWF  4A
3080:  MOVLW  96
3082:  MOVWF  5D
3084:  CALL   088E
3088:  DECFSZ 4A,F
308A:  BRA    3080
....................          } 
....................           
....................          if(unidad2==3) 
308C:  MOVF   20,W
308E:  SUBLW  03
3090:  BNZ   30AE
....................          { 
....................             ppurga_segundos_pro--; 
3092:  DECF   2B,F
....................             if(ppurga_segundos_pro<0) 
3094:  BTFSC  2B.7
3096:  BRA    309A
3098:  BRA    309E
....................                ppurga_segundos_pro=59; 
309A:  MOVLW  3B
309C:  MOVWF  2B
....................                 
....................             delay_ms(300); 
309E:  MOVLW  02
30A0:  MOVWF  4A
30A2:  MOVLW  96
30A4:  MOVWF  5D
30A6:  CALL   088E
30AA:  DECFSZ 4A,F
30AC:  BRA    30A2
....................          } 
....................       } 
....................       break; 
30AE:  BRA    31BE
....................        
....................       Case 'R': 
....................       { 
....................          if(unidad2==1) 
30B0:  DECFSZ 20,W
30B2:  BRA    30BA
....................          { 
....................             unidad2=3; 
30B4:  MOVLW  03
30B6:  MOVWF  20
....................          } 
....................          else 
30B8:  BRA    30C4
....................          { 
....................             if(unidad2==3) 
30BA:  MOVF   20,W
30BC:  SUBLW  03
30BE:  BNZ   30C4
....................             { 
....................                unidad2=1; 
30C0:  MOVLW  01
30C2:  MOVWF  20
....................             } 
....................          } 
....................          delay_ms(500); 
30C4:  MOVLW  02
30C6:  MOVWF  4A
30C8:  MOVLW  FA
30CA:  MOVWF  5D
30CC:  CALL   088E
30D0:  DECFSZ 4A,F
30D2:  BRA    30C8
....................          printf(lcd_putc,"\f"); 
30D4:  MOVLW  0C
30D6:  MOVWF  57
30D8:  CALL   0A24
....................       } 
....................       break; 
30DC:  BRA    31BE
....................        
....................       Case 'L': 
....................       { 
....................          delay_ms(200); 
30DE:  MOVLW  C8
30E0:  MOVWF  5D
30E2:  CALL   088E
....................          printf(lcd_putc,"\f"); 
30E6:  MOVLW  0C
30E8:  MOVWF  57
30EA:  CALL   0A24
....................          lcd_gotoxy(1,2); 
30EE:  MOVLW  01
30F0:  MOVWF  58
30F2:  MOVLW  02
30F4:  MOVWF  59
30F6:  CALL   0972
....................          printf(lcd_putc,"Tiempo Almacenado"); 
30FA:  MOVLW  D8
30FC:  MOVWF  FF6
30FE:  MOVLW  06
3100:  MOVWF  FF7
3102:  CALL   0DB6
....................          lcd_gotoxy(1,3); 
3106:  MOVLW  01
3108:  MOVWF  58
310A:  MOVLW  03
310C:  MOVWF  59
310E:  CALL   0972
....................          printf(lcd_putc,"  Correctamente  "); 
3112:  MOVLW  EA
3114:  MOVWF  FF6
3116:  MOVLW  06
3118:  MOVWF  FF7
311A:  CALL   0DB6
....................          write_eeprom(22,ppurga_minutos_pro); 
311E:  MOVLW  16
3120:  MOVWF  FA9
3122:  MOVFF  2D,FA8
3126:  BCF    FA6.6
3128:  BCF    FA6.7
312A:  BSF    FA6.2
312C:  MOVF   FF2,W
312E:  MOVWF  00
3130:  BCF    FF2.7
3132:  MOVLB  F
3134:  MOVLW  55
3136:  MOVWF  FA7
3138:  MOVLW  AA
313A:  MOVWF  FA7
313C:  BSF    FA6.1
313E:  BTFSC  FA6.1
3140:  BRA    313E
3142:  BCF    FA6.2
3144:  MOVF   00,W
3146:  IORWF  FF2,F
....................          delay_ms(20); 
3148:  MOVLW  14
314A:  MOVWF  5D
314C:  MOVLB  0
314E:  CALL   088E
....................          write_eeprom(23,ppurga_segundos_pro); 
3152:  MOVLW  17
3154:  MOVWF  FA9
3156:  MOVFF  2B,FA8
315A:  BCF    FA6.6
315C:  BCF    FA6.7
315E:  BSF    FA6.2
3160:  MOVF   FF2,W
3162:  MOVWF  00
3164:  BCF    FF2.7
3166:  MOVLB  F
3168:  MOVLW  55
316A:  MOVWF  FA7
316C:  MOVLW  AA
316E:  MOVWF  FA7
3170:  BSF    FA6.1
3172:  BTFSC  FA6.1
3174:  BRA    3172
3176:  BCF    FA6.2
3178:  MOVF   00,W
317A:  IORWF  FF2,F
....................          delay_ms(20); 
317C:  MOVLW  14
317E:  MOVWF  5D
3180:  MOVLB  0
3182:  CALL   088E
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
3186:  MOVFF  2D,2C
318A:  MOVFF  2B,2A
....................          delay_ms(700); 
318E:  MOVLW  04
3190:  MOVWF  4A
3192:  MOVLW  AF
3194:  MOVWF  5D
3196:  CALL   088E
319A:  DECFSZ 4A,F
319C:  BRA    3192
....................          delay_ms(30);Menu=1;Cambio=1;Flecha=2;Flecha2=2;paso=0;printf(lcd_putc,"\f"); 
319E:  MOVLW  1E
31A0:  MOVWF  5D
31A2:  CALL   088E
31A6:  MOVLW  01
31A8:  MOVWF  16
31AA:  MOVWF  3E
31AC:  MOVLW  02
31AE:  MOVWF  1A
31B0:  MOVWF  1C
31B2:  CLRF   31
31B4:  MOVLW  0C
31B6:  MOVWF  57
31B8:  CALL   0A24
....................       } 
....................       break; 
31BC:  BRA    31BE
....................       } 
....................         
....................    } 
31BE:  BRA    2F60
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
31C0:  MOVF   16,W
31C2:  SUBLW  14
31C4:  BTFSS  FD8.2
31C6:  BRA    33A2
....................    { 
....................       if(Cambio==1) 
31C8:  DECFSZ 3E,W
31CA:  BRA    32C2
....................       { 
....................       lcd_send_byte(0,1); //Borra la pantalla, si se entra por primera vez 
31CC:  CLRF   5B
31CE:  MOVLW  01
31D0:  MOVWF  5C
31D2:  CALL   08DC
....................       lcd_gotoxy(1,1);                      
31D6:  MOVLW  01
31D8:  MOVWF  58
31DA:  MOVWF  59
31DC:  CALL   0972
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
31E0:  MOVLW  FC
31E2:  MOVWF  FF6
31E4:  MOVLW  06
31E6:  MOVWF  FF7
31E8:  CALL   0DB6
....................       lcd_gotoxy(1,2); 
31EC:  MOVLW  01
31EE:  MOVWF  58
31F0:  MOVLW  02
31F2:  MOVWF  59
31F4:  CALL   0972
....................       //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................       printf(lcd_putc,"Ext= ---"); 
31F8:  MOVLW  06
31FA:  MOVWF  FF6
31FC:  MOVLW  07
31FE:  MOVWF  FF7
3200:  CALL   0DB6
....................       lcd_gotoxy(1,3); 
3204:  MOVLW  01
3206:  MOVWF  58
3208:  MOVLW  03
320A:  MOVWF  59
320C:  CALL   0972
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
3210:  MOVLW  10
3212:  MOVWF  FF6
3214:  MOVLW  07
3216:  MOVWF  FF7
3218:  CALL   0DB6
....................       lcd_gotoxy(11,2); 
321C:  MOVLW  0B
321E:  MOVWF  58
3220:  MOVLW  02
3222:  MOVWF  59
3224:  CALL   0972
....................       printf(lcd_putc,"Flujo=--- "); 
3228:  MOVLW  20
322A:  MOVWF  FF6
322C:  MOVLW  07
322E:  MOVWF  FF7
3230:  CALL   0DB6
....................       lcd_gotoxy(10,1);                      
3234:  MOVLW  0A
3236:  MOVWF  58
3238:  MOVLW  01
323A:  MOVWF  59
323C:  CALL   0972
....................       printf(lcd_putc,"Filtro:OK "); 
3240:  MOVLW  2C
3242:  MOVWF  FF6
3244:  MOVLW  07
3246:  MOVWF  FF7
3248:  CALL   0DB6
....................        
....................       if(estadofl==1) 
324C:  BTFSS  2E.0
324E:  BRA    326E
....................       { 
....................          Luz_Blanca_on; 
3250:  BSF    F8A.4
3252:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
3254:  MOVLW  01
3256:  MOVWF  58
3258:  MOVLW  04
325A:  MOVWF  59
325C:  CALL   0972
....................          printf(lcd_putc,"Luz: ON "); 
3260:  MOVLW  38
3262:  MOVWF  FF6
3264:  MOVLW  07
3266:  MOVWF  FF7
3268:  CALL   0DB6
....................       } 
....................       else 
326C:  BRA    328A
....................       { 
....................          Luz_Blanca_off; 
326E:  BCF    F8A.4
3270:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
3272:  MOVLW  01
3274:  MOVWF  58
3276:  MOVLW  04
3278:  MOVWF  59
327A:  CALL   0972
....................          printf(lcd_putc,"Luz:OFF "); 
327E:  MOVLW  42
3280:  MOVWF  FF6
3282:  MOVLW  07
3284:  MOVWF  FF7
3286:  CALL   0DB6
....................       } 
....................        
....................       if(estadomv==1) 
328A:  BTFSS  2E.1
328C:  BRA    32A8
....................       { 
....................          lcd_gotoxy(10,4); 
328E:  MOVLW  0A
3290:  MOVWF  58
3292:  MOVLW  04
3294:  MOVWF  59
3296:  CALL   0972
....................          printf(lcd_putc,"Motor: ON "); 
329A:  MOVLW  4C
329C:  MOVWF  FF6
329E:  MOVLW  07
32A0:  MOVWF  FF7
32A2:  CALL   0DB6
....................       } 
....................       else 
32A6:  BRA    32C0
....................       {    
....................          lcd_gotoxy(10,4); 
32A8:  MOVLW  0A
32AA:  MOVWF  58
32AC:  MOVLW  04
32AE:  MOVWF  59
32B0:  CALL   0972
....................          printf(lcd_putc,"Motor:OFF ");  
32B4:  MOVLW  58
32B6:  MOVWF  FF6
32B8:  MOVLW  07
32BA:  MOVWF  FF7
32BC:  CALL   0DB6
....................       } 
....................       Cambio=0; 
32C0:  CLRF   3E
....................       } 
....................    
....................       if(flag_filtro==1) 
32C2:  BTFSS  2F.1
32C4:  BRA    3334
....................       { 
....................         if(flag_hrs==1) 
32C6:  BTFSS  30.0
32C8:  BRA    3334
....................         { 
....................          if(horas>=setpoint) 
32CA:  CLRF   4C
32CC:  MOVFF  26,4B
32D0:  BTFSC  4B.7
32D2:  DECF   4C,F
32D4:  CALL   1710
32D8:  MOVFF  42,4E
32DC:  MOVFF  41,4D
32E0:  MOVFF  40,4C
32E4:  MOVFF  3F,4B
32E8:  MOVFF  03,52
32EC:  MOVFF  02,51
32F0:  MOVFF  01,50
32F4:  MOVFF  00,4F
32F8:  CALL   13F6
32FC:  BC    3300
32FE:  BNZ   331A
....................          { 
....................             lcd_gotoxy(10,1);                      
3300:  MOVLW  0A
3302:  MOVWF  58
3304:  MOVLW  01
3306:  MOVWF  59
3308:  CALL   0972
....................             printf(lcd_putc,"Filtro:CAM"); 
330C:  MOVLW  64
330E:  MOVWF  FF6
3310:  MOVLW  07
3312:  MOVWF  FF7
3314:  CALL   0DB6
....................          } 
....................          else 
3318:  BRA    3332
....................          { 
....................             lcd_gotoxy(10,1);                      
331A:  MOVLW  0A
331C:  MOVWF  58
331E:  MOVLW  01
3320:  MOVWF  59
3322:  CALL   0972
....................             printf(lcd_putc,"Filtro:OK "); 
3326:  MOVLW  70
3328:  MOVWF  FF6
332A:  MOVLW  07
332C:  MOVWF  FF7
332E:  CALL   0DB6
....................          } 
....................          flag_hrs=0; 
3332:  BCF    30.0
....................         }   
....................       } 
....................           
....................   // ********* Aqui comienza el monitoreo de teclas y tiempos          
....................       
....................      lee_pulsad(); 
3334:  CALL   0EE4
....................       
....................       Switch (tecla) 
....................       { 
3338:  MOVF   35,W
333A:  XORLW  44
333C:  BZ    334C
333E:  XORLW  08
3340:  BZ    3350
3342:  XORLW  19
3344:  BZ    337A
3346:  XORLW  07
3348:  BZ    3394
334A:  BRA    33A2
....................        Case 'D':       //Si oprime hacia Abajo 
....................        {  
....................         estadofl=!estadofl; 
334C:  BTG    2E.0
....................        } 
....................        break; 
334E:  BRA    33A2
....................        
....................              
....................       Case 'L':      //Si oprime hacia Izquierda 
....................       {   
....................          estadomv=!estadomv; 
3350:  BTG    2E.1
....................          if(estadomv){ 
3352:  BTFSS  2E.1
3354:  BRA    335C
....................             Motor_on; 
3356:  BSF    F8A.5
3358:  BCF    F93.5
....................          }else{ 
335A:  BRA    3360
....................             Motor_off; 
335C:  BCF    F8A.5
335E:  BCF    F93.5
....................          } 
....................          delay_ms(100); 
3360:  MOVLW  64
3362:  MOVWF  5D
3364:  CALL   088E
....................          lcd_init(); 
3368:  CALL   091A
....................          delay_ms(100); 
336C:  MOVLW  64
336E:  MOVWF  5D
3370:  CALL   088E
....................          Cambio=1; 
3374:  MOVLW  01
3376:  MOVWF  3E
....................       } 
....................       break; 
3378:  BRA    33A2
....................        
....................     
....................        Case 'U':      // Si oprime Arriba 
....................       {   
....................         printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
337A:  MOVLW  0C
337C:  MOVWF  57
337E:  CALL   0A24
3382:  MOVLW  01
3384:  MOVWF  16
3386:  CLRF   31
3388:  MOVLW  02
338A:  MOVWF  1A
338C:  MOVWF  1C
338E:  MOVLW  0B
3390:  MOVWF  19
....................       } 
....................       break; 
3392:  BRA    33A2
....................              
....................        Case 'R':      // Si oprime Derecha 
....................        {   
....................         printf(lcd_putc,"\f");Menu=40; 
3394:  MOVLW  0C
3396:  MOVWF  57
3398:  CALL   0A24
339C:  MOVLW  28
339E:  MOVWF  16
....................        } 
....................        break; 
33A0:  BRA    33A2
....................    } 
....................  } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
33A2:  MOVF   16,W
33A4:  SUBLW  1E
33A6:  BTFSS  FD8.2
33A8:  BRA    352E
....................       if(Cambio==1) 
33AA:  DECFSZ 3E,W
33AC:  BRA    33DE
....................       { 
....................       lcd_gotoxy(1,1); 
33AE:  MOVLW  01
33B0:  MOVWF  58
33B2:  MOVWF  59
33B4:  CALL   0972
....................       printf(lcd_putc,"    !Post-Purga!    "); 
33B8:  MOVLW  7C
33BA:  MOVWF  FF6
33BC:  MOVLW  07
33BE:  MOVWF  FF7
33C0:  CALL   0DB6
....................       lcd_gotoxy(1,2); 
33C4:  MOVLW  01
33C6:  MOVWF  58
33C8:  MOVLW  02
33CA:  MOVWF  59
33CC:  CALL   0972
....................       printf(lcd_putc,"                    "); 
33D0:  MOVLW  92
33D2:  MOVWF  FF6
33D4:  MOVLW  07
33D6:  MOVWF  FF7
33D8:  CALL   0DB6
....................       Cambio=0; 
33DC:  CLRF   3E
....................       } 
....................               
....................       if(Lectura==1) 
33DE:  BTFSS  30.4
33E0:  BRA    352C
....................       { 
....................          Luz_Blanca_off; 
33E2:  BCF    F8A.4
33E4:  BCF    F93.4
....................          lcd_gotoxy(1,3); 
33E6:  MOVLW  01
33E8:  MOVWF  58
33EA:  MOVLW  03
33EC:  MOVWF  59
33EE:  CALL   0972
....................          printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos); 
33F2:  MOVLW  A8
33F4:  MOVWF  FF6
33F6:  MOVLW  07
33F8:  MOVWF  FF7
33FA:  MOVLW  06
33FC:  MOVWF  4A
33FE:  CALL   0DD6
3402:  MOVFF  2C,4A
3406:  MOVLW  01
3408:  MOVWF  4B
340A:  CALL   105A
340E:  MOVLW  3A
3410:  MOVWF  57
3412:  CALL   0A24
3416:  MOVFF  2A,4A
341A:  MOVLW  01
341C:  MOVWF  4B
341E:  CALL   105A
3422:  MOVLW  20
3424:  MOVWF  57
3426:  CALL   0A24
342A:  MOVLW  20
342C:  MOVWF  57
342E:  CALL   0A24
....................           
....................          if(ppurga_segundos==0 && ppurga_minutos==0) 
3432:  MOVF   2A,F
3434:  BTFSS  FD8.2
3436:  BRA    352A
3438:  MOVF   2C,F
343A:  BNZ   352A
....................          { 
....................             write_eeprom(70,segundos); 
343C:  MOVLW  46
343E:  MOVWF  FA9
3440:  MOVFF  24,FA8
3444:  BCF    FA6.6
3446:  BCF    FA6.7
3448:  BSF    FA6.2
344A:  MOVF   FF2,W
344C:  MOVWF  00
344E:  BCF    FF2.7
3450:  MOVLB  F
3452:  MOVLW  55
3454:  MOVWF  FA7
3456:  MOVLW  AA
3458:  MOVWF  FA7
345A:  BSF    FA6.1
345C:  BTFSC  FA6.1
345E:  BRA    345C
3460:  BCF    FA6.2
3462:  MOVF   00,W
3464:  IORWF  FF2,F
....................             delay_ms(20); 
3466:  MOVLW  14
3468:  MOVWF  5D
346A:  MOVLB  0
346C:  CALL   088E
....................             write_eeprom(71,minutos); 
3470:  MOVLW  47
3472:  MOVWF  FA9
3474:  MOVFF  25,FA8
3478:  BCF    FA6.6
347A:  BCF    FA6.7
347C:  BSF    FA6.2
347E:  MOVF   FF2,W
3480:  MOVWF  00
3482:  BCF    FF2.7
3484:  MOVLB  F
3486:  MOVLW  55
3488:  MOVWF  FA7
348A:  MOVLW  AA
348C:  MOVWF  FA7
348E:  BSF    FA6.1
3490:  BTFSC  FA6.1
3492:  BRA    3490
3494:  BCF    FA6.2
3496:  MOVF   00,W
3498:  IORWF  FF2,F
....................             delay_ms(20); 
349A:  MOVLW  14
349C:  MOVWF  5D
349E:  MOVLB  0
34A0:  CALL   088E
....................             write_eeprom(72,horas); 
34A4:  MOVLW  48
34A6:  MOVWF  FA9
34A8:  MOVFF  26,FA8
34AC:  BCF    FA6.6
34AE:  BCF    FA6.7
34B0:  BSF    FA6.2
34B2:  MOVF   FF2,W
34B4:  MOVWF  00
34B6:  BCF    FF2.7
34B8:  MOVLB  F
34BA:  MOVLW  55
34BC:  MOVWF  FA7
34BE:  MOVLW  AA
34C0:  MOVWF  FA7
34C2:  BSF    FA6.1
34C4:  BTFSC  FA6.1
34C6:  BRA    34C4
34C8:  BCF    FA6.2
34CA:  MOVF   00,W
34CC:  IORWF  FF2,F
....................             delay_ms(20); 
34CE:  MOVLW  14
34D0:  MOVWF  5D
34D2:  MOVLB  0
34D4:  CALL   088E
....................             printf(lcd_putc,"\f"); 
34D8:  MOVLW  0C
34DA:  MOVWF  57
34DC:  CALL   0A24
....................             lcd_gotoxy(1,2); 
34E0:  MOVLW  01
34E2:  MOVWF  58
34E4:  MOVLW  02
34E6:  MOVWF  59
34E8:  CALL   0972
....................             printf(lcd_putc,"     Proceso      "); 
34EC:  MOVLW  BA
34EE:  MOVWF  FF6
34F0:  MOVLW  07
34F2:  MOVWF  FF7
34F4:  CALL   0DB6
....................             lcd_gotoxy(1,3); 
34F8:  MOVLW  01
34FA:  MOVWF  58
34FC:  MOVLW  03
34FE:  MOVWF  59
3500:  CALL   0972
....................             printf(lcd_putc,"    Finalizado    "); 
3504:  MOVLW  CE
3506:  MOVWF  FF6
3508:  MOVLW  07
350A:  MOVWF  FF7
350C:  CALL   0DB6
....................             delay_ms(2000); 
3510:  MOVLW  08
3512:  MOVWF  4A
3514:  MOVLW  FA
3516:  MOVWF  5D
3518:  CALL   088E
351C:  DECFSZ 4A,F
351E:  BRA    3514
....................             printf(lcd_putc,"\f"); 
3520:  MOVLW  0C
3522:  MOVWF  57
3524:  CALL   0A24
....................             reset_cpu(); 
3528:  RESET
....................          } 
....................          Lectura=0; 
352A:  BCF    30.4
....................       } 
....................        
....................    } 
352C:  BRA    33A2
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40)   // Menu de apagado de cabina 
352E:  MOVF   16,W
3530:  SUBLW  28
3532:  BNZ   35F4
....................    { 
....................     if(Cambio==1) 
3534:  DECFSZ 3E,W
3536:  BRA    3598
....................      { 
....................    lcd_gotoxy(1,1); 
3538:  MOVLW  01
353A:  MOVWF  58
353C:  MOVWF  59
353E:  CALL   0972
....................    printf(lcd_putc,"   Desea apagar     "); 
3542:  MOVLW  E2
3544:  MOVWF  FF6
3546:  MOVLW  07
3548:  MOVWF  FF7
354A:  CALL   0DB6
....................    lcd_gotoxy(1,2); 
354E:  MOVLW  01
3550:  MOVWF  58
3552:  MOVLW  02
3554:  MOVWF  59
3556:  CALL   0972
....................    printf(lcd_putc,"     la cabina      "); 
355A:  MOVLW  F8
355C:  MOVWF  FF6
355E:  MOVLW  07
3560:  MOVWF  FF7
3562:  CALL   0DB6
....................    lcd_gotoxy(1,3); 
3566:  MOVLW  01
3568:  MOVWF  58
356A:  MOVLW  03
356C:  MOVWF  59
356E:  CALL   0972
....................    printf(lcd_putc,"   > Aceptar        "); 
3572:  MOVLW  0E
3574:  MOVWF  FF6
3576:  MOVLW  08
3578:  MOVWF  FF7
357A:  CALL   0DB6
....................    lcd_gotoxy(1,4); 
357E:  MOVLW  01
3580:  MOVWF  58
3582:  MOVLW  04
3584:  MOVWF  59
3586:  CALL   0972
....................    printf(lcd_putc,"   < Cancelar       "); 
358A:  MOVLW  24
358C:  MOVWF  FF6
358E:  MOVLW  08
3590:  MOVWF  FF7
3592:  CALL   0DB6
....................    Cambio=0; 
3596:  CLRF   3E
....................       } 
....................    
....................    lee_pulsad(); 
3598:  CALL   0EE4
....................     
....................    Switch(tecla) 
....................     { 
359C:  MOVF   35,W
359E:  XORLW  52
35A0:  BZ    35A8
35A2:  XORLW  1E
35A4:  BZ    35C8
35A6:  BRA    35F4
....................       Case 'R': // Si oprime derecha 
....................       {Menu=30;Cambio=1;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1;} 
35A8:  MOVLW  1E
35AA:  MOVWF  16
35AC:  MOVLW  01
35AE:  MOVWF  3E
35B0:  MOVFF  1F,4A
35B4:  CALL   0DA6
35B8:  BCF    F8A.6
35BA:  BCF    F93.6
35BC:  MOVLW  0C
35BE:  MOVWF  57
35C0:  CALL   0A24
35C4:  BSF    30.7
....................       break; 
35C6:  BRA    35F4
....................             
....................              
....................       Case 'L': // Si oprime Izquierda 
....................       {Menu=20;Cambio=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");} 
35C8:  MOVLW  14
35CA:  MOVWF  16
35CC:  MOVLW  01
35CE:  MOVWF  3E
35D0:  CLRF   31
35D2:  MOVLW  02
35D4:  MOVWF  1A
35D6:  MOVWF  1C
35D8:  MOVLW  0B
35DA:  MOVWF  19
35DC:  MOVLW  02
35DE:  MOVWF  4A
35E0:  MOVLW  FA
35E2:  MOVWF  5D
35E4:  CALL   088E
35E8:  DECFSZ 4A,F
35EA:  BRA    35E0
35EC:  MOVLW  0C
35EE:  MOVWF  57
35F0:  CALL   0A24
....................     }        
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    While(Menu == 50) // Menu de Purga 
....................    { 
35F4:  MOVF   16,W
35F6:  SUBLW  32
35F8:  BTFSS  FD8.2
35FA:  BRA    3732
....................     if(Cambio==1) 
35FC:  DECFSZ 3E,W
35FE:  BRA    368C
....................     { 
....................       lcd_gotoxy(1,1); 
3600:  MOVLW  01
3602:  MOVWF  58
3604:  MOVWF  59
3606:  CALL   0972
....................       printf(lcd_putc,"      !Purga!       "); 
360A:  MOVLW  3A
360C:  MOVWF  FF6
360E:  MOVLW  08
3610:  MOVWF  FF7
3612:  CALL   0DB6
....................       lcd_gotoxy(1,2); 
3616:  MOVLW  01
3618:  MOVWF  58
361A:  MOVLW  02
361C:  MOVWF  59
361E:  CALL   0972
....................       printf(lcd_putc,"                    "); 
3622:  MOVLW  50
3624:  MOVWF  FF6
3626:  MOVLW  08
3628:  MOVWF  FF7
362A:  CALL   0DB6
....................       lcd_gotoxy(1,3); 
362E:  MOVLW  01
3630:  MOVWF  58
3632:  MOVLW  03
3634:  MOVWF  59
3636:  CALL   0972
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos); 
363A:  MOVLW  66
363C:  MOVWF  FF6
363E:  MOVLW  08
3640:  MOVWF  FF7
3642:  MOVLW  06
3644:  MOVWF  4A
3646:  CALL   0DD6
364A:  MOVFF  21,4A
364E:  MOVLW  01
3650:  MOVWF  4B
3652:  CALL   105A
3656:  MOVLW  3A
3658:  MOVWF  57
365A:  CALL   0A24
365E:  MOVFF  28,4A
3662:  MOVLW  01
3664:  MOVWF  4B
3666:  CALL   105A
366A:  MOVLW  20
366C:  MOVWF  57
366E:  CALL   0A24
3672:  MOVLW  20
3674:  MOVWF  57
3676:  CALL   0A24
367A:  MOVLW  20
367C:  MOVWF  57
367E:  CALL   0A24
....................       Cambio=0; 
3682:  CLRF   3E
....................       Motor_on; 
3684:  BSF    F8A.5
3686:  BCF    F93.5
....................       Luz_Blanca_off; 
3688:  BCF    F8A.4
368A:  BCF    F93.4
....................     } 
....................       
....................     if(Lectura==1) 
368C:  BTFSS  30.4
368E:  BRA    36E6
....................      { 
....................       lcd_gotoxy(1,3); 
3690:  MOVLW  01
3692:  MOVWF  58
3694:  MOVLW  03
3696:  MOVWF  59
3698:  CALL   0972
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos); 
369C:  MOVLW  7A
369E:  MOVWF  FF6
36A0:  MOVLW  08
36A2:  MOVWF  FF7
36A4:  MOVLW  06
36A6:  MOVWF  4A
36A8:  CALL   0DD6
36AC:  MOVFF  21,4A
36B0:  MOVLW  01
36B2:  MOVWF  4B
36B4:  CALL   105A
36B8:  MOVLW  3A
36BA:  MOVWF  57
36BC:  CALL   0A24
36C0:  MOVFF  28,4A
36C4:  MOVLW  01
36C6:  MOVWF  4B
36C8:  CALL   105A
36CC:  MOVLW  20
36CE:  MOVWF  57
36D0:  CALL   0A24
36D4:  MOVLW  20
36D6:  MOVWF  57
36D8:  CALL   0A24
36DC:  MOVLW  20
36DE:  MOVWF  57
36E0:  CALL   0A24
....................       Lectura=0; 
36E4:  BCF    30.4
....................      } 
....................       
....................     if((LEFT) || ((purga_minutos==0) && (purga_segundos==0))) 
36E6:  BSF    F93.1
36E8:  BTFSC  F81.1
36EA:  BRA    36F4
36EC:  MOVF   21,F
36EE:  BNZ   3730
36F0:  MOVF   28,F
36F2:  BNZ   3730
....................     { 
....................       delay_ms(100); 
36F4:  MOVLW  64
36F6:  MOVWF  5D
36F8:  CALL   088E
....................       if(LEFT || ((purga_minutos==0) && (purga_segundos==0))){ 
36FC:  BSF    F93.1
36FE:  BTFSC  F81.1
3700:  BRA    370A
3702:  MOVF   21,F
3704:  BNZ   3730
3706:  MOVF   28,F
3708:  BNZ   3730
....................          tiempo_purga=0;Motor_on;Luz_Blanca_on;estadomv=1;estadofl=1;Menu=20;Cambio=1;delay_ms(500); 
370A:  BCF    30.6
370C:  BSF    F8A.5
370E:  BCF    F93.5
3710:  BSF    F8A.4
3712:  BCF    F93.4
3714:  BSF    2E.1
3716:  BSF    2E.0
3718:  MOVLW  14
371A:  MOVWF  16
371C:  MOVLW  01
371E:  MOVWF  3E
3720:  MOVLW  02
3722:  MOVWF  4A
3724:  MOVLW  FA
3726:  MOVWF  5D
3728:  CALL   088E
372C:  DECFSZ 4A,F
372E:  BRA    3724
....................       } 
....................     } 
....................   
....................   }       
3730:  BRA    35F4
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................   /* if(tiemporeset>=20) 
....................    { 
....................       lcd_init(); 
....................       tiemporeset=0; 
....................    }*/  
....................  
....................    if(ModoSleep==1) 
3732:  BTFSS  30.2
3734:  BRA    373E
....................       {intensidadpantalla(0);sleep();} 
3736:  CLRF   4A
3738:  CALL   0DA6
373C:  SLEEP 
....................  
....................    if(Menu!=0 || Menu!=30 || Menu!=50) 
373E:  MOVF   16,F
3740:  BNZ   374E
3742:  MOVF   16,W
3744:  SUBLW  1E
3746:  BNZ   374E
3748:  MOVF   16,W
374A:  SUBLW  32
374C:  BZ    37C4
....................    { 
....................       if(Lectura==1) 
374E:  BTFSS  30.4
3750:  BRA    37C2
....................       { 
....................           
....................          if(horas>=setpoint && Menu==20) 
3752:  CLRF   4C
3754:  MOVFF  26,4B
3758:  BTFSC  4B.7
375A:  DECF   4C,F
375C:  CALL   1710
3760:  MOVFF  42,4E
3764:  MOVFF  41,4D
3768:  MOVFF  40,4C
376C:  MOVFF  3F,4B
3770:  MOVFF  03,52
3774:  MOVFF  02,51
3778:  MOVFF  01,50
377C:  MOVFF  00,4F
3780:  CALL   13F6
3784:  BC    3788
3786:  BNZ   37B4
3788:  MOVF   16,W
378A:  SUBLW  14
378C:  BNZ   37B4
....................          { 
....................              if(estadoalarma==1) 
378E:  BTFSS  2E.2
3790:  BRA    3798
....................              { 
....................                 Alarma_on; 
3792:  BSF    F8A.6
3794:  BCF    F93.6
....................              } 
....................              else 
3796:  BRA    379C
....................              { 
....................                 Alarma_off; 
3798:  BCF    F8A.6
379A:  BCF    F93.6
....................              } 
....................              estadopantalla=!estadopantalla; 
379C:  BTG    2F.2
....................              if(estadopantalla==1) 
379E:  BTFSS  2F.2
37A0:  BRA    37AC
....................              {intensidadpantalla(contraste);} 
37A2:  MOVFF  1F,4A
37A6:  CALL   0DA6
....................              else 
37AA:  BRA    37B2
....................              {intensidadpantalla(0);} 
37AC:  CLRF   4A
37AE:  CALL   0DA6
....................          } 
....................          else 
37B2:  BRA    37C0
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
37B4:  MOVFF  1F,4A
37B8:  CALL   0DA6
37BC:  BCF    F8A.6
37BE:  BCF    F93.6
....................          } 
....................          Lectura=0; 
37C0:  BCF    30.4
....................       } 
....................       //Lectura=0; 
....................    }    
....................    else 
37C2:  BRA    37D0
....................    { 
....................       intensidadpantalla(contraste);Alarma_off; 
37C4:  MOVFF  1F,4A
37C8:  CALL   0DA6
37CC:  BCF    F8A.6
37CE:  BCF    F93.6
....................    } 
....................     } 
37D0:  GOTO   1A62
.................... } 
....................  
37D4:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
