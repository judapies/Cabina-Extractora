CCS PCH C Compiler, Version 4.104, 5967               10-may.-17 14:32

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2017\Cabina Extractora 120 Ecuador\Firmware\Cabina_Extractora.lst

               ROM used: 24250 bytes (74%)
                         Largest free fragment is 8514
               RAM used: 273 (13%) at main() level
                         313 (15%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2502
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0A46:  MOVLW  01
0A48:  MOVWF  FEA
0A4A:  MOVLW  24
0A4C:  MOVWF  FE9
0A4E:  MOVF   FEF,W
0A50:  BZ    0A6E
0A52:  MOVLW  0F
0A54:  MOVWF  01
0A56:  CLRF   00
0A58:  DECFSZ 00,F
0A5A:  BRA    0A58
0A5C:  DECFSZ 01,F
0A5E:  BRA    0A56
0A60:  MOVLW  8F
0A62:  MOVWF  00
0A64:  DECFSZ 00,F
0A66:  BRA    0A64
0A68:  NOP   
0A6A:  DECFSZ FEF,F
0A6C:  BRA    0A52
0A6E:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0A70:  MOVLB  1
0A72:  SWAPF  x25,W
0A74:  ANDLW  F0
0A76:  MOVWF  00
0A78:  MOVLW  0F
0A7A:  ANDWF  F83,W
0A7C:  IORWF  00,W
0A7E:  MOVWF  F83
....................       delay_cycles(25); 
0A80:  MOVLW  08
0A82:  MOVWF  00
0A84:  DECFSZ 00,F
0A86:  BRA    0A84
....................       lcd.enable = 1; 
0A88:  BSF    F83.2
....................       delay_us(55); 
0A8A:  MOVLW  DB
0A8C:  MOVWF  00
0A8E:  DECFSZ 00,F
0A90:  BRA    0A8E
0A92:  BRA    0A94
....................       lcd.enable = 0; 
0A94:  BCF    F83.2
.................... } 
0A96:  MOVLB  0
0A98:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0A9A:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
0A9C:  MOVLW  02
0A9E:  MOVLB  1
0AA0:  MOVWF  x24
0AA2:  MOVLB  0
0AA4:  RCALL  0A46
....................       lcd.rs = address; 
0AA6:  MOVLB  1
0AA8:  BTFSS  x22.0
0AAA:  BCF    F83.0
0AAC:  BTFSC  x22.0
0AAE:  BSF    F83.0
....................       delay_cycles(25); 
0AB0:  MOVLW  08
0AB2:  MOVWF  00
0AB4:  DECFSZ 00,F
0AB6:  BRA    0AB4
....................       lcd.rw = 0; 
0AB8:  BCF    F83.1
....................       delay_cycles(25); 
0ABA:  MOVLW  08
0ABC:  MOVWF  00
0ABE:  DECFSZ 00,F
0AC0:  BRA    0ABE
....................       lcd.enable = 0; 
0AC2:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0AC4:  SWAPF  x23,W
0AC6:  MOVWF  x24
0AC8:  MOVLW  0F
0ACA:  ANDWF  x24,F
0ACC:  MOVFF  124,125
0AD0:  MOVLB  0
0AD2:  RCALL  0A70
....................       lcd_send_nibble(n & 0xf); 
0AD4:  MOVLB  1
0AD6:  MOVF   x23,W
0AD8:  ANDLW  0F
0ADA:  MOVWF  x24
0ADC:  MOVWF  x25
0ADE:  MOVLB  0
0AE0:  RCALL  0A70
.................... } 
0AE2:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0AE4:  MOVLW  00
0AE6:  MOVWF  F95
....................     lcd.rs = 0; 
0AE8:  BCF    F83.0
....................     lcd.rw = 0; 
0AEA:  BCF    F83.1
....................     lcd.enable = 0; 
0AEC:  BCF    F83.2
....................     delay_ms(15); 
0AEE:  MOVLW  0F
0AF0:  MOVLB  1
0AF2:  MOVWF  x24
0AF4:  MOVLB  0
0AF6:  RCALL  0A46
....................     for(i=1;i<=3;++i) { 
0AF8:  MOVLW  01
0AFA:  MOVLB  1
0AFC:  MOVWF  x09
0AFE:  MOVF   x09,W
0B00:  SUBLW  03
0B02:  BNC   0B1C
....................        lcd_send_nibble(3); 
0B04:  MOVLW  03
0B06:  MOVWF  x25
0B08:  MOVLB  0
0B0A:  RCALL  0A70
....................        delay_ms(5); 
0B0C:  MOVLW  05
0B0E:  MOVLB  1
0B10:  MOVWF  x24
0B12:  MOVLB  0
0B14:  RCALL  0A46
....................     } 
0B16:  MOVLB  1
0B18:  INCF   x09,F
0B1A:  BRA    0AFE
....................     lcd_send_nibble(2); 
0B1C:  MOVLW  02
0B1E:  MOVWF  x25
0B20:  MOVLB  0
0B22:  RCALL  0A70
....................     for(i=0;i<=3;++i) 
0B24:  MOVLB  1
0B26:  CLRF   x09
0B28:  MOVF   x09,W
0B2A:  SUBLW  03
0B2C:  BNC   0B54
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0B2E:  CLRF   03
0B30:  MOVF   x09,W
0B32:  MOVFF  FF2,10A
0B36:  BCF    FF2.7
0B38:  MOVLB  0
0B3A:  CALL   0096
0B3E:  MOVLB  1
0B40:  BTFSC  x0A.7
0B42:  BSF    FF2.7
0B44:  MOVWF  x0A
0B46:  CLRF   x22
0B48:  MOVWF  x23
0B4A:  MOVLB  0
0B4C:  RCALL  0A9A
0B4E:  MOVLB  1
0B50:  INCF   x09,F
0B52:  BRA    0B28
.................... } 
0B54:  MOVLB  0
0B56:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0B58:  MOVLW  01
0B5A:  MOVLB  1
0B5C:  SUBWF  x20,W
0B5E:  ADDLW  FC
0B60:  BC    0B8C
0B62:  ADDLW  04
0B64:  MOVLB  0
0B66:  GOTO   0B9E
....................      case 1 : address=0x80;break; 
0B6A:  MOVLW  80
0B6C:  MOVLB  1
0B6E:  MOVWF  x21
0B70:  BRA    0B8C
....................      case 2 : address=0xc0;break; 
0B72:  MOVLW  C0
0B74:  MOVLB  1
0B76:  MOVWF  x21
0B78:  BRA    0B8C
....................      case 3 : address=0x94;break; 
0B7A:  MOVLW  94
0B7C:  MOVLB  1
0B7E:  MOVWF  x21
0B80:  BRA    0B8C
....................      case 4 : address=0xd4;break; 
0B82:  MOVLW  D4
0B84:  MOVLB  1
0B86:  MOVWF  x21
0B88:  BRA    0B8C
0B8A:  MOVLB  1
....................    } 
....................    address+=x-1; 
0B8C:  MOVLW  01
0B8E:  SUBWF  x1F,W
0B90:  ADDWF  x21,F
....................    lcd_send_byte(0,address); 
0B92:  CLRF   x22
0B94:  MOVFF  121,123
0B98:  MOVLB  0
0B9A:  RCALL  0A9A
.................... } 
0B9C:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0BCA:  MOVLB  1
0BCC:  MOVF   x1E,W
0BCE:  SUBLW  F1
0BD0:  BNZ   0BD6
....................     c=238; 
0BD2:  MOVLW  EE
0BD4:  MOVWF  x1E
....................    switch (c) { 
0BD6:  MOVF   x1E,W
0BD8:  XORLW  0C
0BDA:  MOVLB  0
0BDC:  BZ    0BE8
0BDE:  XORLW  06
0BE0:  BZ    0C04
0BE2:  XORLW  02
0BE4:  BZ    0C16
0BE6:  BRA    0C24
....................      case '\f'   : lcd_send_byte(0,1); 
0BE8:  MOVLB  1
0BEA:  CLRF   x22
0BEC:  MOVLW  01
0BEE:  MOVWF  x23
0BF0:  MOVLB  0
0BF2:  RCALL  0A9A
....................                    lcdline=1; 
0BF4:  MOVLW  01
0BF6:  MOVWF  16
....................                    delay_ms(2); 
0BF8:  MOVLW  02
0BFA:  MOVLB  1
0BFC:  MOVWF  x24
0BFE:  MOVLB  0
0C00:  RCALL  0A46
....................                                            break; 
0C02:  BRA    0C34
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0C04:  INCF   16,F
0C06:  MOVLW  01
0C08:  MOVLB  1
0C0A:  MOVWF  x1F
0C0C:  MOVFF  16,120
0C10:  MOVLB  0
0C12:  RCALL  0B58
0C14:  BRA    0C34
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0C16:  MOVLB  1
0C18:  CLRF   x22
0C1A:  MOVLW  10
0C1C:  MOVWF  x23
0C1E:  MOVLB  0
0C20:  RCALL  0A9A
0C22:  BRA    0C34
....................      default     : lcd_send_byte(1,c);     break; 
0C24:  MOVLW  01
0C26:  MOVLB  1
0C28:  MOVWF  x22
0C2A:  MOVFF  11E,123
0C2E:  MOVLB  0
0C30:  RCALL  0A9A
0C32:  BRA    0C34
....................    } 
.................... } 
0C34:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
1844:  MOVFF  111,115
1848:  MOVFF  110,114
184C:  MOVFF  10F,113
1850:  MOVFF  10E,112
....................  
....................    if (y != 1.0) 
1854:  MOVFF  115,126
1858:  MOVFF  114,125
185C:  MOVFF  113,124
1860:  MOVFF  112,123
1864:  MOVLB  1
1866:  CLRF   x2A
1868:  CLRF   x29
186A:  CLRF   x28
186C:  MOVLW  7F
186E:  MOVWF  x27
1870:  MOVLB  0
1872:  RCALL  16E0
1874:  BTFSC  FD8.2
1876:  BRA    1CF8
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1878:  MOVLW  01
187A:  MOVLB  1
187C:  MOVWF  x24
187E:  MOVLW  12
1880:  MOVWF  FE9
1882:  MOVFF  124,FEA
1886:  MOVLW  7E
1888:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
188A:  BSF    FD8.1
188C:  MOVFF  115,12A
1890:  MOVFF  114,129
1894:  MOVFF  113,128
1898:  MOVFF  112,127
189C:  CLRF   x2E
189E:  CLRF   x2D
18A0:  CLRF   x2C
18A2:  MOVLW  7F
18A4:  MOVWF  x2B
18A6:  MOVLB  0
18A8:  CALL   0DCA
18AC:  MOVFF  00,123
18B0:  MOVFF  01,124
18B4:  MOVFF  02,125
18B8:  MOVFF  03,126
18BC:  BCF    FD8.1
18BE:  MOVFF  115,12A
18C2:  MOVFF  114,129
18C6:  MOVFF  113,128
18CA:  MOVFF  112,127
18CE:  MOVLB  1
18D0:  CLRF   x2E
18D2:  CLRF   x2D
18D4:  CLRF   x2C
18D6:  MOVLW  7F
18D8:  MOVWF  x2B
18DA:  MOVLB  0
18DC:  CALL   0DCA
18E0:  MOVFF  126,12A
18E4:  MOVFF  125,129
18E8:  MOVFF  124,128
18EC:  MOVFF  123,127
18F0:  MOVFF  03,12E
18F4:  MOVFF  02,12D
18F8:  MOVFF  01,12C
18FC:  MOVFF  00,12B
1900:  CALL   0C6C
1904:  MOVFF  03,115
1908:  MOVFF  02,114
190C:  MOVFF  01,113
1910:  MOVFF  00,112
....................  
....................       y2=y*y; 
1914:  MOVFF  115,126
1918:  MOVFF  114,125
191C:  MOVFF  113,124
1920:  MOVFF  112,123
1924:  MOVFF  115,12A
1928:  MOVFF  114,129
192C:  MOVFF  113,128
1930:  MOVFF  112,127
1934:  RCALL  1374
1936:  MOVFF  03,121
193A:  MOVFF  02,120
193E:  MOVFF  01,11F
1942:  MOVFF  00,11E
....................  
....................       res = pl[0]*y2 + pl[1]; 
1946:  MOVLW  BC
1948:  MOVLB  1
194A:  MOVWF  x26
194C:  MOVLW  24
194E:  MOVWF  x25
1950:  MOVLW  67
1952:  MOVWF  x24
1954:  MOVLW  7D
1956:  MOVWF  x23
1958:  MOVFF  121,12A
195C:  MOVFF  120,129
1960:  MOVFF  11F,128
1964:  MOVFF  11E,127
1968:  MOVLB  0
196A:  RCALL  1374
196C:  MOVFF  00,123
1970:  MOVFF  01,124
1974:  MOVFF  02,125
1978:  MOVFF  03,126
197C:  BCF    FD8.1
197E:  MOVFF  03,12A
1982:  MOVFF  02,129
1986:  MOVFF  01,128
198A:  MOVFF  00,127
198E:  MOVLW  E3
1990:  MOVLB  1
1992:  MOVWF  x2E
1994:  MOVLW  E4
1996:  MOVWF  x2D
1998:  MOVLW  90
199A:  MOVWF  x2C
199C:  MOVLW  82
199E:  MOVWF  x2B
19A0:  MOVLB  0
19A2:  CALL   0DCA
19A6:  MOVFF  03,119
19AA:  MOVFF  02,118
19AE:  MOVFF  01,117
19B2:  MOVFF  00,116
....................       res = res*y2 + pl[2]; 
19B6:  MOVFF  119,126
19BA:  MOVFF  118,125
19BE:  MOVFF  117,124
19C2:  MOVFF  116,123
19C6:  MOVFF  121,12A
19CA:  MOVFF  120,129
19CE:  MOVFF  11F,128
19D2:  MOVFF  11E,127
19D6:  RCALL  1374
19D8:  MOVFF  00,123
19DC:  MOVFF  01,124
19E0:  MOVFF  02,125
19E4:  MOVFF  03,126
19E8:  BCF    FD8.1
19EA:  MOVFF  03,12A
19EE:  MOVFF  02,129
19F2:  MOVFF  01,128
19F6:  MOVFF  00,127
19FA:  MOVLW  1C
19FC:  MOVLB  1
19FE:  MOVWF  x2E
1A00:  MOVLW  87
1A02:  MOVWF  x2D
1A04:  MOVLW  57
1A06:  MOVWF  x2C
1A08:  MOVLW  83
1A0A:  MOVWF  x2B
1A0C:  MOVLB  0
1A0E:  CALL   0DCA
1A12:  MOVFF  03,119
1A16:  MOVFF  02,118
1A1A:  MOVFF  01,117
1A1E:  MOVFF  00,116
....................       res = res*y2 + pl[3]; 
1A22:  MOVFF  119,126
1A26:  MOVFF  118,125
1A2A:  MOVFF  117,124
1A2E:  MOVFF  116,123
1A32:  MOVFF  121,12A
1A36:  MOVFF  120,129
1A3A:  MOVFF  11F,128
1A3E:  MOVFF  11E,127
1A42:  RCALL  1374
1A44:  MOVFF  00,123
1A48:  MOVFF  01,124
1A4C:  MOVFF  02,125
1A50:  MOVFF  03,126
1A54:  BCF    FD8.1
1A56:  MOVFF  03,12A
1A5A:  MOVFF  02,129
1A5E:  MOVFF  01,128
1A62:  MOVFF  00,127
1A66:  MOVLW  AB
1A68:  MOVLB  1
1A6A:  MOVWF  x2E
1A6C:  MOVLW  E1
1A6E:  MOVWF  x2D
1A70:  MOVLW  9E
1A72:  MOVWF  x2C
1A74:  MOVLW  83
1A76:  MOVWF  x2B
1A78:  MOVLB  0
1A7A:  CALL   0DCA
1A7E:  MOVFF  03,119
1A82:  MOVFF  02,118
1A86:  MOVFF  01,117
1A8A:  MOVFF  00,116
....................  
....................       r = ql[0]*y2 + ql[1]; 
1A8E:  MOVLB  1
1A90:  CLRF   x26
1A92:  CLRF   x25
1A94:  CLRF   x24
1A96:  MOVLW  7F
1A98:  MOVWF  x23
1A9A:  MOVFF  121,12A
1A9E:  MOVFF  120,129
1AA2:  MOVFF  11F,128
1AA6:  MOVFF  11E,127
1AAA:  MOVLB  0
1AAC:  RCALL  1374
1AAE:  MOVFF  00,123
1AB2:  MOVFF  01,124
1AB6:  MOVFF  02,125
1ABA:  MOVFF  03,126
1ABE:  BCF    FD8.1
1AC0:  MOVFF  03,12A
1AC4:  MOVFF  02,129
1AC8:  MOVFF  01,128
1ACC:  MOVFF  00,127
1AD0:  MOVLW  B4
1AD2:  MOVLB  1
1AD4:  MOVWF  x2E
1AD6:  MOVLW  2A
1AD8:  MOVWF  x2D
1ADA:  MOVLW  82
1ADC:  MOVWF  x2C
1ADE:  MOVWF  x2B
1AE0:  MOVLB  0
1AE2:  CALL   0DCA
1AE6:  MOVFF  03,11D
1AEA:  MOVFF  02,11C
1AEE:  MOVFF  01,11B
1AF2:  MOVFF  00,11A
....................       r = r*y2 + ql[2]; 
1AF6:  MOVFF  11D,126
1AFA:  MOVFF  11C,125
1AFE:  MOVFF  11B,124
1B02:  MOVFF  11A,123
1B06:  MOVFF  121,12A
1B0A:  MOVFF  120,129
1B0E:  MOVFF  11F,128
1B12:  MOVFF  11E,127
1B16:  RCALL  1374
1B18:  MOVFF  00,123
1B1C:  MOVFF  01,124
1B20:  MOVFF  02,125
1B24:  MOVFF  03,126
1B28:  BCF    FD8.1
1B2A:  MOVFF  03,12A
1B2E:  MOVFF  02,129
1B32:  MOVFF  01,128
1B36:  MOVFF  00,127
1B3A:  MOVLW  80
1B3C:  MOVLB  1
1B3E:  MOVWF  x2E
1B40:  MOVLW  3E
1B42:  MOVWF  x2D
1B44:  MOVLW  06
1B46:  MOVWF  x2C
1B48:  MOVLW  83
1B4A:  MOVWF  x2B
1B4C:  MOVLB  0
1B4E:  CALL   0DCA
1B52:  MOVFF  03,11D
1B56:  MOVFF  02,11C
1B5A:  MOVFF  01,11B
1B5E:  MOVFF  00,11A
....................       r = r*y2 + ql[3]; 
1B62:  MOVFF  11D,126
1B66:  MOVFF  11C,125
1B6A:  MOVFF  11B,124
1B6E:  MOVFF  11A,123
1B72:  MOVFF  121,12A
1B76:  MOVFF  120,129
1B7A:  MOVFF  11F,128
1B7E:  MOVFF  11E,127
1B82:  CALL   1374
1B86:  MOVFF  00,123
1B8A:  MOVFF  01,124
1B8E:  MOVFF  02,125
1B92:  MOVFF  03,126
1B96:  BCF    FD8.1
1B98:  MOVFF  03,12A
1B9C:  MOVFF  02,129
1BA0:  MOVFF  01,128
1BA4:  MOVFF  00,127
1BA8:  MOVLW  AB
1BAA:  MOVLB  1
1BAC:  MOVWF  x2E
1BAE:  MOVLW  E1
1BB0:  MOVWF  x2D
1BB2:  MOVLW  9E
1BB4:  MOVWF  x2C
1BB6:  MOVLW  82
1BB8:  MOVWF  x2B
1BBA:  MOVLB  0
1BBC:  CALL   0DCA
1BC0:  MOVFF  03,11D
1BC4:  MOVFF  02,11C
1BC8:  MOVFF  01,11B
1BCC:  MOVFF  00,11A
....................  
....................       res = y*res/r; 
1BD0:  MOVFF  115,126
1BD4:  MOVFF  114,125
1BD8:  MOVFF  113,124
1BDC:  MOVFF  112,123
1BE0:  MOVFF  119,12A
1BE4:  MOVFF  118,129
1BE8:  MOVFF  117,128
1BEC:  MOVFF  116,127
1BF0:  CALL   1374
1BF4:  MOVFF  00,123
1BF8:  MOVFF  01,124
1BFC:  MOVFF  02,125
1C00:  MOVFF  03,126
1C04:  MOVFF  03,12A
1C08:  MOVFF  02,129
1C0C:  MOVFF  01,128
1C10:  MOVFF  00,127
1C14:  MOVFF  11D,12E
1C18:  MOVFF  11C,12D
1C1C:  MOVFF  11B,12C
1C20:  MOVFF  11A,12B
1C24:  CALL   0C6C
1C28:  MOVFF  03,119
1C2C:  MOVFF  02,118
1C30:  MOVFF  01,117
1C34:  MOVFF  00,116
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1C38:  MOVLW  01
1C3A:  MOVLB  1
1C3C:  MOVWF  x24
1C3E:  MOVLW  0E
1C40:  MOVWF  FE9
1C42:  MOVFF  124,FEA
1C46:  MOVLW  7E
1C48:  SUBWF  FEF,W
1C4A:  MOVWF  x22
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1C4C:  BTFSC  x22.7
1C4E:  BRA    1C52
1C50:  BRA    1C7A
....................          r = -(float32)-n; 
1C52:  MOVLW  00
1C54:  BSF    FD8.0
1C56:  SUBFWB x22,W
1C58:  CLRF   x24
1C5A:  MOVWF  x23
1C5C:  BTFSC  x23.7
1C5E:  DECF   x24,F
1C60:  MOVLB  0
1C62:  RCALL  17F4
1C64:  MOVFF  00,11A
1C68:  MOVF   01,W
1C6A:  XORLW  80
1C6C:  MOVLB  1
1C6E:  MOVWF  x1B
1C70:  MOVFF  02,11C
1C74:  MOVFF  03,11D
....................       else 
1C78:  BRA    1C9A
....................          r = (float32)n; 
1C7A:  CLRF   x24
1C7C:  MOVFF  122,123
1C80:  BTFSC  x23.7
1C82:  DECF   x24,F
1C84:  MOVLB  0
1C86:  RCALL  17F4
1C88:  MOVFF  03,11D
1C8C:  MOVFF  02,11C
1C90:  MOVFF  01,11B
1C94:  MOVFF  00,11A
1C98:  MOVLB  1
....................  
....................       res += r*LN2; 
1C9A:  MOVFF  11D,126
1C9E:  MOVFF  11C,125
1CA2:  MOVFF  11B,124
1CA6:  MOVFF  11A,123
1CAA:  MOVLW  18
1CAC:  MOVWF  x2A
1CAE:  MOVLW  72
1CB0:  MOVWF  x29
1CB2:  MOVLW  31
1CB4:  MOVWF  x28
1CB6:  MOVLW  7E
1CB8:  MOVWF  x27
1CBA:  MOVLB  0
1CBC:  CALL   1374
1CC0:  BCF    FD8.1
1CC2:  MOVFF  119,12A
1CC6:  MOVFF  118,129
1CCA:  MOVFF  117,128
1CCE:  MOVFF  116,127
1CD2:  MOVFF  03,12E
1CD6:  MOVFF  02,12D
1CDA:  MOVFF  01,12C
1CDE:  MOVFF  00,12B
1CE2:  CALL   0DCA
1CE6:  MOVFF  03,119
1CEA:  MOVFF  02,118
1CEE:  MOVFF  01,117
1CF2:  MOVFF  00,116
....................    } 
....................  
....................    else 
1CF6:  BRA    1D04
....................       res = 0.0; 
1CF8:  MOVLB  1
1CFA:  CLRF   x19
1CFC:  CLRF   x18
1CFE:  CLRF   x17
1D00:  CLRF   x16
1D02:  MOVLB  0
....................  
....................    return(res); 
1D04:  MOVFF  116,00
1D08:  MOVFF  117,01
1D0C:  MOVFF  118,02
1D10:  MOVFF  119,03
.................... } 
1D14:  GOTO   1EF0 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=11,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 FeedbackDamper=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1796:  MOVLB  1
1798:  RLCF   x0D,W
179A:  MOVWF  00
179C:  RLCF   00,F
179E:  MOVLW  FC
17A0:  ANDWF  00,F
17A2:  MOVFF  00,01
17A6:  MOVF   FC2,W
17A8:  ANDLW  C3
17AA:  IORWF  00,W
17AC:  MOVWF  FC2
17AE:  MOVLW  0A
17B0:  MOVWF  x24
17B2:  MOVLB  0
17B4:  CALL   0A46
17B8:  BSF    FC2.1
17BA:  BTFSC  FC2.1
17BC:  BRA    17BA
17BE:  MOVFF  FC4,113
17C2:  MOVFF  FC3,112
17C6:  MOVLB  0
17C8:  CALL   0C36
17CC:  MOVFF  03,111
17D0:  MOVFF  02,110
17D4:  MOVFF  01,10F
17D8:  MOVFF  00,10E
17DC:  MOVFF  10E,00
17E0:  MOVFF  10F,01
17E4:  MOVFF  110,02
17E8:  MOVFF  111,03
.................... } 
17EC:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
1042:  MOVLB  1
1044:  MOVF   x09,F
1046:  BNZ   104E
....................    { 
....................       Pantalla_off; 
1048:  BCF    F8B.1
104A:  BCF    F94.1
....................    } 
....................    else 
104C:  BRA    1052
....................    { 
....................       Pantalla_on; 
104E:  BSF    F8B.1
1050:  BCF    F94.1
....................    } 
.................... } 
1052:  MOVLB  0
1054:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1D18:  MOVLB  1
1D1A:  CLRF   x0D
1D1C:  MOVLB  0
1D1E:  RCALL  1796
1D20:  MOVFF  00,10A
1D24:  MOVFF  01,10B
1D28:  MOVFF  02,10C
1D2C:  MOVFF  03,10D
1D30:  MOVFF  03,126
1D34:  MOVFF  02,125
1D38:  MOVFF  01,124
1D3C:  MOVFF  00,123
1D40:  MOVLB  1
1D42:  CLRF   x2A
1D44:  CLRF   x29
1D46:  MOVLW  20
1D48:  MOVWF  x28
1D4A:  MOVLW  81
1D4C:  MOVWF  x27
1D4E:  MOVLB  0
1D50:  CALL   1374
1D54:  MOVFF  00,10A
1D58:  MOVFF  01,10B
1D5C:  MOVFF  02,10C
1D60:  MOVFF  03,10D
1D64:  MOVFF  03,12A
1D68:  MOVFF  02,129
1D6C:  MOVFF  01,128
1D70:  MOVFF  00,127
1D74:  MOVLB  1
1D76:  CLRF   x2E
1D78:  MOVLW  C0
1D7A:  MOVWF  x2D
1D7C:  MOVLW  7F
1D7E:  MOVWF  x2C
1D80:  MOVLW  88
1D82:  MOVWF  x2B
1D84:  MOVLB  0
1D86:  CALL   0C6C
1D8A:  MOVFF  03,80
1D8E:  MOVFF  02,7F
1D92:  MOVFF  01,7E
1D96:  MOVFF  00,7D
....................     Voltaje1=sensores(1)*5/1023; 
1D9A:  MOVLW  01
1D9C:  MOVLB  1
1D9E:  MOVWF  x0D
1DA0:  MOVLB  0
1DA2:  RCALL  1796
1DA4:  MOVFF  00,10A
1DA8:  MOVFF  01,10B
1DAC:  MOVFF  02,10C
1DB0:  MOVFF  03,10D
1DB4:  MOVFF  03,126
1DB8:  MOVFF  02,125
1DBC:  MOVFF  01,124
1DC0:  MOVFF  00,123
1DC4:  MOVLB  1
1DC6:  CLRF   x2A
1DC8:  CLRF   x29
1DCA:  MOVLW  20
1DCC:  MOVWF  x28
1DCE:  MOVLW  81
1DD0:  MOVWF  x27
1DD2:  MOVLB  0
1DD4:  CALL   1374
1DD8:  MOVFF  00,10A
1DDC:  MOVFF  01,10B
1DE0:  MOVFF  02,10C
1DE4:  MOVFF  03,10D
1DE8:  MOVFF  03,12A
1DEC:  MOVFF  02,129
1DF0:  MOVFF  01,128
1DF4:  MOVFF  00,127
1DF8:  MOVLB  1
1DFA:  CLRF   x2E
1DFC:  MOVLW  C0
1DFE:  MOVWF  x2D
1E00:  MOVLW  7F
1E02:  MOVWF  x2C
1E04:  MOVLW  88
1E06:  MOVWF  x2B
1E08:  MOVLB  0
1E0A:  CALL   0C6C
1E0E:  MOVFF  03,84
1E12:  MOVFF  02,83
1E16:  MOVFF  01,82
1E1A:  MOVFF  00,81
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1E1E:  MOVLB  1
1E20:  CLRF   x2A
1E22:  CLRF   x29
1E24:  MOVLW  20
1E26:  MOVWF  x28
1E28:  MOVLW  81
1E2A:  MOVWF  x27
1E2C:  MOVFF  84,12E
1E30:  MOVFF  83,12D
1E34:  MOVFF  82,12C
1E38:  MOVFF  81,12B
1E3C:  MOVLB  0
1E3E:  CALL   0C6C
1E42:  MOVFF  00,10A
1E46:  MOVFF  01,10B
1E4A:  MOVFF  02,10C
1E4E:  MOVFF  03,10D
1E52:  BSF    FD8.1
1E54:  MOVFF  03,12A
1E58:  MOVFF  02,129
1E5C:  MOVFF  01,128
1E60:  MOVFF  00,127
1E64:  MOVLB  1
1E66:  CLRF   x2E
1E68:  CLRF   x2D
1E6A:  CLRF   x2C
1E6C:  MOVLW  7F
1E6E:  MOVWF  x2B
1E70:  MOVLB  0
1E72:  CALL   0DCA
1E76:  MOVFF  78,12A
1E7A:  MOVFF  77,129
1E7E:  MOVFF  76,128
1E82:  MOVFF  75,127
1E86:  MOVFF  03,12E
1E8A:  MOVFF  02,12D
1E8E:  MOVFF  01,12C
1E92:  MOVFF  00,12B
1E96:  CALL   0C6C
1E9A:  MOVFF  03,7C
1E9E:  MOVFF  02,7B
1EA2:  MOVFF  01,7A
1EA6:  MOVFF  00,79
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
1EAA:  MOVFF  7C,12A
1EAE:  MOVFF  7B,129
1EB2:  MOVFF  7A,128
1EB6:  MOVFF  79,127
1EBA:  MOVFF  68,12E
1EBE:  MOVFF  67,12D
1EC2:  MOVFF  66,12C
1EC6:  MOVFF  65,12B
1ECA:  CALL   0C6C
1ECE:  MOVFF  00,10A
1ED2:  MOVFF  01,10B
1ED6:  MOVFF  02,10C
1EDA:  MOVFF  03,10D
1EDE:  MOVFF  03,111
1EE2:  MOVFF  02,110
1EE6:  MOVFF  01,10F
1EEA:  MOVFF  00,10E
1EEE:  BRA    1844
1EF0:  MOVFF  00,10A
1EF4:  MOVFF  01,10B
1EF8:  MOVFF  02,10C
1EFC:  MOVFF  03,10D
1F00:  MOVFF  03,12A
1F04:  MOVFF  02,129
1F08:  MOVFF  01,128
1F0C:  MOVFF  00,127
1F10:  MOVFF  64,12E
1F14:  MOVFF  63,12D
1F18:  MOVFF  62,12C
1F1C:  MOVFF  61,12B
1F20:  CALL   0C6C
1F24:  MOVFF  00,10A
1F28:  MOVFF  01,10B
1F2C:  MOVFF  02,10C
1F30:  MOVFF  03,10D
1F34:  MOVLB  1
1F36:  CLRF   x2A
1F38:  CLRF   x29
1F3A:  CLRF   x28
1F3C:  MOVLW  7F
1F3E:  MOVWF  x27
1F40:  MOVFF  6C,12E
1F44:  MOVFF  6B,12D
1F48:  MOVFF  6A,12C
1F4C:  MOVFF  69,12B
1F50:  MOVLB  0
1F52:  CALL   0C6C
1F56:  MOVFF  FEA,10F
1F5A:  MOVFF  FE9,10E
1F5E:  BCF    FD8.1
1F60:  MOVFF  10D,12A
1F64:  MOVFF  10C,129
1F68:  MOVFF  10B,128
1F6C:  MOVFF  10A,127
1F70:  MOVFF  03,12E
1F74:  MOVFF  02,12D
1F78:  MOVFF  01,12C
1F7C:  MOVFF  00,12B
1F80:  CALL   0DCA
1F84:  MOVFF  10F,FEA
1F88:  MOVFF  10E,FE9
1F8C:  MOVLB  1
1F8E:  CLRF   x2A
1F90:  CLRF   x29
1F92:  CLRF   x28
1F94:  MOVLW  7F
1F96:  MOVWF  x27
1F98:  MOVFF  03,12E
1F9C:  MOVFF  02,12D
1FA0:  MOVFF  01,12C
1FA4:  MOVFF  00,12B
1FA8:  MOVLB  0
1FAA:  CALL   0C6C
1FAE:  MOVFF  03,70
1FB2:  MOVFF  02,6F
1FB6:  MOVFF  01,6E
1FBA:  MOVFF  00,6D
....................     TC=TK-273.15; 
1FBE:  BSF    FD8.1
1FC0:  MOVFF  70,12A
1FC4:  MOVFF  6F,129
1FC8:  MOVFF  6E,128
1FCC:  MOVFF  6D,127
1FD0:  MOVLW  33
1FD2:  MOVLB  1
1FD4:  MOVWF  x2E
1FD6:  MOVLW  93
1FD8:  MOVWF  x2D
1FDA:  MOVLW  08
1FDC:  MOVWF  x2C
1FDE:  MOVLW  87
1FE0:  MOVWF  x2B
1FE2:  MOVLB  0
1FE4:  CALL   0DCA
1FE8:  MOVFF  03,74
1FEC:  MOVFF  02,73
1FF0:  MOVFF  01,72
1FF4:  MOVFF  00,71
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
1FF8:  MOVF   2E,W
1FFA:  SUBLW  0A
1FFC:  BNZ   205E
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
1FFE:  MOVLB  1
2000:  CLRF   x0D
2002:  MOVLB  0
2004:  CALL   1796
2008:  MOVFF  00,10A
200C:  MOVFF  01,10B
2010:  MOVFF  02,10C
2014:  MOVFF  03,10D
2018:  MOVFF  FEA,10F
201C:  MOVFF  FE9,10E
2020:  BCF    FD8.1
2022:  MOVFF  03,12A
2026:  MOVFF  02,129
202A:  MOVFF  01,128
202E:  MOVFF  00,127
2032:  MOVFF  C8,12E
2036:  MOVFF  C7,12D
203A:  MOVFF  C6,12C
203E:  MOVFF  C5,12B
2042:  CALL   0DCA
2046:  MOVFF  10F,FEA
204A:  MOVFF  10E,FE9
204E:  MOVFF  03,A4
2052:  MOVFF  02,A3
2056:  MOVFF  01,A2
205A:  MOVFF  00,A1
....................     } 
....................     if(negativo==20) 
205E:  MOVF   2E,W
2060:  SUBLW  14
2062:  BNZ   20C4
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
2064:  MOVLB  1
2066:  CLRF   x0D
2068:  MOVLB  0
206A:  CALL   1796
206E:  MOVFF  00,10A
2072:  MOVFF  01,10B
2076:  MOVFF  02,10C
207A:  MOVFF  03,10D
207E:  MOVFF  FEA,10F
2082:  MOVFF  FE9,10E
2086:  BSF    FD8.1
2088:  MOVFF  03,12A
208C:  MOVFF  02,129
2090:  MOVFF  01,128
2094:  MOVFF  00,127
2098:  MOVFF  C8,12E
209C:  MOVFF  C7,12D
20A0:  MOVFF  C6,12C
20A4:  MOVFF  C5,12B
20A8:  CALL   0DCA
20AC:  MOVFF  10F,FEA
20B0:  MOVFF  10E,FE9
20B4:  MOVFF  03,A4
20B8:  MOVFF  02,A3
20BC:  MOVFF  01,A2
20C0:  MOVFF  00,A1
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
20C4:  MOVFF  A4,126
20C8:  MOVFF  A3,125
20CC:  MOVFF  A2,124
20D0:  MOVFF  A1,123
20D4:  MOVFF  A4,12A
20D8:  MOVFF  A3,129
20DC:  MOVFF  A2,128
20E0:  MOVFF  A1,127
20E4:  CALL   1374
20E8:  MOVFF  03,A8
20EC:  MOVFF  02,A7
20F0:  MOVFF  01,A6
20F4:  MOVFF  00,A5
....................     x_cubo=x_uno*x_cuadrado; 
20F8:  MOVFF  A4,126
20FC:  MOVFF  A3,125
2100:  MOVFF  A2,124
2104:  MOVFF  A1,123
2108:  MOVFF  A8,12A
210C:  MOVFF  A7,129
2110:  MOVFF  A6,128
2114:  MOVFF  A5,127
2118:  CALL   1374
211C:  MOVFF  03,AC
2120:  MOVFF  02,AB
2124:  MOVFF  01,AA
2128:  MOVFF  00,A9
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
212C:  MOVFF  AC,126
2130:  MOVFF  AB,125
2134:  MOVFF  AA,124
2138:  MOVFF  A9,123
213C:  MOVFF  88,12A
2140:  MOVFF  87,129
2144:  MOVFF  86,128
2148:  MOVFF  85,127
214C:  CALL   1374
2150:  MOVFF  00,10A
2154:  MOVFF  01,10B
2158:  MOVFF  02,10C
215C:  MOVFF  03,10D
2160:  MOVFF  A8,126
2164:  MOVFF  A7,125
2168:  MOVFF  A6,124
216C:  MOVFF  A5,123
2170:  MOVFF  8C,12A
2174:  MOVFF  8B,129
2178:  MOVFF  8A,128
217C:  MOVFF  89,127
2180:  CALL   1374
2184:  BCF    FD8.1
2186:  MOVFF  10D,12A
218A:  MOVFF  10C,129
218E:  MOVFF  10B,128
2192:  MOVFF  10A,127
2196:  MOVFF  03,12E
219A:  MOVFF  02,12D
219E:  MOVFF  01,12C
21A2:  MOVFF  00,12B
21A6:  CALL   0DCA
21AA:  MOVFF  00,10A
21AE:  MOVFF  01,10B
21B2:  MOVFF  02,10C
21B6:  MOVFF  03,10D
21BA:  MOVFF  A4,126
21BE:  MOVFF  A3,125
21C2:  MOVFF  A2,124
21C6:  MOVFF  A1,123
21CA:  MOVFF  90,12A
21CE:  MOVFF  8F,129
21D2:  MOVFF  8E,128
21D6:  MOVFF  8D,127
21DA:  CALL   1374
21DE:  BCF    FD8.1
21E0:  MOVFF  10D,12A
21E4:  MOVFF  10C,129
21E8:  MOVFF  10B,128
21EC:  MOVFF  10A,127
21F0:  MOVFF  03,12E
21F4:  MOVFF  02,12D
21F8:  MOVFF  01,12C
21FC:  MOVFF  00,12B
2200:  CALL   0DCA
2204:  MOVFF  00,10A
2208:  MOVFF  01,10B
220C:  MOVFF  02,10C
2210:  MOVFF  03,10D
2214:  BCF    FD8.1
2216:  MOVFF  03,12A
221A:  MOVFF  02,129
221E:  MOVFF  01,128
2222:  MOVFF  00,127
2226:  MOVFF  94,12E
222A:  MOVFF  93,12D
222E:  MOVFF  92,12C
2232:  MOVFF  91,12B
2236:  CALL   0DCA
223A:  MOVFF  03,BC
223E:  MOVFF  02,BB
2242:  MOVFF  01,BA
2246:  MOVFF  00,B9
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
224A:  BSF    FD8.1
224C:  MOVFF  BC,12A
2250:  MOVFF  BB,129
2254:  MOVFF  BA,128
2258:  MOVFF  B9,127
225C:  MOVLW  0A
225E:  MOVLB  1
2260:  MOVWF  x2E
2262:  MOVLW  D7
2264:  MOVWF  x2D
2266:  MOVLW  23
2268:  MOVWF  x2C
226A:  MOVLW  7B
226C:  MOVWF  x2B
226E:  MOVLB  0
2270:  CALL   0DCA
2274:  MOVFF  03,BC
2278:  MOVFF  02,BB
227C:  MOVFF  01,BA
2280:  MOVFF  00,B9
....................     if(Velocidad<0.0) 
2284:  MOVFF  BC,126
2288:  MOVFF  BB,125
228C:  MOVFF  BA,124
2290:  MOVFF  B9,123
2294:  MOVLB  1
2296:  CLRF   x2A
2298:  CLRF   x29
229A:  CLRF   x28
229C:  CLRF   x27
229E:  MOVLB  0
22A0:  CALL   16E0
22A4:  BNC   22AE
....................      {Velocidad=0.0;} 
22A6:  CLRF   xBC
22A8:  CLRF   xBB
22AA:  CLRF   xBA
22AC:  CLRF   xB9
....................       
....................      if(l>=media) 
22AE:  MOVLB  1
22B0:  MOVF   x09,W
22B2:  SUBWF  2A,W
22B4:  BNC   22B8
....................        {l=0;} 
22B6:  CLRF   2A
....................       
....................      promedio[l]=Velocidad;l++; 
22B8:  MOVF   2A,W
22BA:  MULLW  04
22BC:  MOVF   FF3,W
22BE:  CLRF   03
22C0:  ADDLW  D9
22C2:  MOVWF  FE9
22C4:  MOVLW  00
22C6:  ADDWFC 03,W
22C8:  MOVWF  FEA
22CA:  MOVFF  B9,FEF
22CE:  MOVFF  BA,FEC
22D2:  MOVFF  BB,FEC
22D6:  MOVFF  BC,FEC
22DA:  INCF   2A,F
....................      Flujo2=0; 
22DC:  MOVLB  0
22DE:  CLRF   x9C
22E0:  CLRF   x9B
22E2:  CLRF   x9A
22E4:  CLRF   x99
....................         for(h=0;h<=(media-1);h++) 
22E6:  CLRF   2B
22E8:  MOVLW  01
22EA:  MOVLB  1
22EC:  SUBWF  x09,W
22EE:  SUBWF  2B,W
22F0:  BZ    22F4
22F2:  BC    2364
....................         { 
....................            Flujo2+=promedio[h]; 
22F4:  MOVF   2B,W
22F6:  MULLW  04
22F8:  MOVF   FF3,W
22FA:  CLRF   03
22FC:  ADDLW  D9
22FE:  MOVWF  FE9
2300:  MOVLW  00
2302:  ADDWFC 03,W
2304:  MOVWF  FEA
2306:  MOVFF  FEF,00
230A:  MOVFF  FEC,01
230E:  MOVFF  FEC,02
2312:  MOVFF  FEC,03
2316:  MOVFF  FEA,10B
231A:  MOVFF  FE9,10A
231E:  BCF    FD8.1
2320:  MOVFF  9C,12A
2324:  MOVFF  9B,129
2328:  MOVFF  9A,128
232C:  MOVFF  99,127
2330:  MOVFF  03,12E
2334:  MOVFF  02,12D
2338:  MOVFF  01,12C
233C:  MOVFF  00,12B
2340:  MOVLB  0
2342:  CALL   0DCA
2346:  MOVFF  10B,FEA
234A:  MOVFF  10A,FE9
234E:  MOVFF  03,9C
2352:  MOVFF  02,9B
2356:  MOVFF  01,9A
235A:  MOVFF  00,99
....................         }  
235E:  INCF   2B,F
2360:  BRA    22E8
2362:  MOVLB  1
....................            Flujo2=(Flujo2/media)*Ajuste1;  
2364:  CLRF   x13
2366:  MOVFF  109,112
236A:  MOVLB  0
236C:  CALL   0C36
2370:  MOVFF  9C,12A
2374:  MOVFF  9B,129
2378:  MOVFF  9A,128
237C:  MOVFF  99,127
2380:  MOVFF  03,12E
2384:  MOVFF  02,12D
2388:  MOVFF  01,12C
238C:  MOVFF  00,12B
2390:  CALL   0C6C
2394:  MOVFF  00,10A
2398:  MOVFF  01,10B
239C:  MOVFF  02,10C
23A0:  MOVFF  03,10D
23A4:  MOVFF  03,126
23A8:  MOVFF  02,125
23AC:  MOVFF  01,124
23B0:  MOVFF  00,123
23B4:  MOVFF  CC,12A
23B8:  MOVFF  CB,129
23BC:  MOVFF  CA,128
23C0:  MOVFF  C9,127
23C4:  CALL   1374
23C8:  MOVFF  03,9C
23CC:  MOVFF  02,9B
23D0:  MOVFF  01,9A
23D4:  MOVFF  00,99
....................            return Flujo2; 
23D8:  MOVFF  99,00
23DC:  MOVFF  9A,01
23E0:  MOVFF  9B,02
23E4:  MOVFF  9C,03
.................... } 
23E8:  GOTO   5E7A (RETURN)
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
23EC:  MOVF   2F,W
23EE:  SUBLW  14
23F0:  BTFSS  FD8.2
23F2:  BRA    24E6
23F4:  BTFSS  3E.1
23F6:  BRA    24E6
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
23F8:  BSF    FD8.1
23FA:  MOVFF  4F,12A
23FE:  MOVFF  4E,129
2402:  MOVFF  4D,128
2406:  MOVFF  4C,127
240A:  MOVFF  98,12E
240E:  MOVFF  97,12D
2412:  MOVFF  96,12C
2416:  MOVFF  95,12B
241A:  CALL   0DCA
241E:  MOVFF  03,D8
2422:  MOVFF  02,D7
2426:  MOVFF  01,D6
242A:  MOVFF  00,D5
....................       if(error<0.2&&error>-0.2) 
242E:  MOVFF  D8,126
2432:  MOVFF  D7,125
2436:  MOVFF  D6,124
243A:  MOVFF  D5,123
243E:  MOVLW  CD
2440:  MOVLB  1
2442:  MOVWF  x2A
2444:  MOVLW  CC
2446:  MOVWF  x29
2448:  MOVLW  4C
244A:  MOVWF  x28
244C:  MOVLW  7C
244E:  MOVWF  x27
2450:  MOVLB  0
2452:  CALL   16E0
2456:  BNC   2482
2458:  MOVLW  CD
245A:  MOVLB  1
245C:  MOVWF  x26
245E:  MOVLW  CC
2460:  MOVWF  x25
2462:  MOVWF  x24
2464:  MOVLW  7C
2466:  MOVWF  x23
2468:  MOVFF  D8,12A
246C:  MOVFF  D7,129
2470:  MOVFF  D6,128
2474:  MOVFF  D5,127
2478:  MOVLB  0
247A:  CALL   16E0
247E:  BNC   2482
....................       {} 
....................       else 
2480:  BRA    24CE
....................       { 
....................          if(error>0.0) 
2482:  MOVLB  1
2484:  CLRF   x26
2486:  CLRF   x25
2488:  CLRF   x24
248A:  CLRF   x23
248C:  MOVFF  D8,12A
2490:  MOVFF  D7,129
2494:  MOVFF  D6,128
2498:  MOVFF  D5,127
249C:  MOVLB  0
249E:  CALL   16E0
24A2:  BNC   24A8
....................          {tmp+=1;} 
24A4:  MOVLW  01
24A6:  ADDWF  2C,F
....................                 
....................          if(error<-0.0) 
24A8:  MOVFF  D8,126
24AC:  MOVFF  D7,125
24B0:  MOVFF  D6,124
24B4:  MOVFF  D5,123
24B8:  MOVLB  1
24BA:  CLRF   x2A
24BC:  CLRF   x29
24BE:  CLRF   x28
24C0:  CLRF   x27
24C2:  MOVLB  0
24C4:  CALL   16E0
24C8:  BNC   24CE
....................          {tmp-=1;}   
24CA:  MOVLW  01
24CC:  SUBWF  2C,F
....................       } 
....................        
....................       if(tmp>251) 
24CE:  MOVF   2C,W
24D0:  SUBLW  FB
24D2:  BC    24D8
....................       {tmp=251;} 
24D4:  MOVLW  FB
24D6:  MOVWF  2C
....................       if(tmp<4)          
24D8:  MOVF   2C,W
24DA:  SUBLW  03
24DC:  BNC   24E2
....................       {tmp=4;}       
24DE:  MOVLW  04
24E0:  MOVWF  2C
....................       set_pwm1_duty (tmp); 
24E2:  MOVFF  2C,FBE
....................    } 
....................     
....................    if(Manual==20) 
24E6:  MOVF   30,W
24E8:  SUBLW  14
24EA:  BNZ   24F4
....................    { 
....................       tmp=251; 
24EC:  MOVLW  FB
24EE:  MOVWF  2C
....................       set_pwm1_duty (tmp); 
24F0:  MOVFF  2C,FBE
....................    } 
....................     
....................    if(Semi==20) 
24F4:  MOVF   31,W
24F6:  SUBLW  14
24F8:  BNZ   24FE
....................    { 
....................       set_pwm1_duty (ValorSemi); 
24FA:  MOVFF  32,FBE
....................    } 
.................... } 
24FE:  GOTO   5E8E (RETURN)
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   59,F
00BE:  BTFSC  FD8.2
00C0:  INCF   5A,F
....................    tiempos2++; 
00C2:  INCF   5D,F
00C4:  BTFSC  FD8.2
00C6:  INCF   5E,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   5C,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   5B,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    3F.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  3F.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   5B,F
00E0:  BTFSC  FD8.2
00E2:  INCF   5C,F
....................    } 
....................     
....................    if(tiempos2==20) 
00E4:  MOVF   5D,W
00E6:  SUBLW  14
00E8:  BNZ   00F4
00EA:  MOVF   5E,F
00EC:  BNZ   00F4
....................    {tiempos2=0;Lectura2=1;} 
00EE:  CLRF   5E
00F0:  CLRF   5D
00F2:  BSF    3F.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00F4:  MOVF   59,W
00F6:  SUBLW  C8
00F8:  BNZ   0166
00FA:  MOVF   5A,F
00FC:  BNZ   0166
....................    { 
....................       tiempos=0;tiemporeset++; 
00FE:  CLRF   5A
0100:  CLRF   59
0102:  INCF   36,F
....................       Lectura=1; 
0104:  BSF    3F.5
....................           
....................       if(estadomv==1 && flag_filtro==1) 
0106:  BTFSS  3E.1
0108:  BRA    0122
010A:  BTFSS  3F.2
010C:  BRA    0122
....................       {   
....................          if(segundos==60) 
010E:  MOVF   33,W
0110:  SUBLW  3C
0112:  BNZ   0118
....................          { 
....................             segundos=0;minutos++; 
0114:  CLRF   33
0116:  INCF   34,F
....................          } 
....................           
....................          if(minutos==60) 
0118:  MOVF   34,W
011A:  SUBLW  3C
011C:  BNZ   0122
....................          { 
....................             minutos=0;horas++; 
011E:  CLRF   34
0120:  INCF   35,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1) 
0122:  BTFSS  58.4
0124:  BRA    014C
....................       { 
....................          if(purga_segundos>0) 
0126:  MOVF   37,F
0128:  BZ    012E
....................          { 
....................             purga_segundos--; 
012A:  DECF   37,F
....................          } 
....................          else 
012C:  BRA    014C
....................          { 
....................             if(purga_minutos>0) 
012E:  MOVF   22,F
0130:  BZ    013A
....................             { 
....................                purga_minutos--; 
0132:  DECF   22,F
....................                purga_segundos=59; 
0134:  MOVLW  3B
0136:  MOVWF  37
....................             } 
....................             else 
0138:  BRA    014C
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20; 
013A:  BCF    58.4
013C:  BSF    F8A.5
013E:  BCF    F93.5
0140:  MOVLW  14
0142:  MOVWF  17
....................                Luz_Blanca_on; 
0144:  BSF    F8A.4
0146:  BCF    F93.4
....................                estadomv=1; 
0148:  BSF    3E.1
....................                estadofl=1; 
014A:  BSF    3E.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
014C:  BTFSS  58.5
014E:  BRA    0166
....................       { 
....................          if(ppurga_segundos>0) 
0150:  MOVF   39,F
0152:  BZ    0158
....................          { 
....................             ppurga_segundos--; 
0154:  DECF   39,F
....................          } 
....................          else 
0156:  BRA    0166
....................          { 
....................             if(ppurga_minutos>0) 
0158:  MOVF   3B,F
015A:  BZ    0164
....................             { 
....................                ppurga_minutos--; 
015C:  DECF   3B,F
....................                ppurga_segundos=59; 
015E:  MOVLW  3B
0160:  MOVWF  39
....................             } 
....................             else 
0162:  BRA    0166
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0164:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0166:  BCF    F9E.0
0168:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
11A8:  MOVLB  1
11AA:  DECFSZ x0A,W
11AC:  BRA    11E6
....................    {if(estadoalarma==0) 
11AE:  BTFSC  3E.2
11B0:  BRA    11CA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
11B2:  MOVLW  02
11B4:  MOVWF  x1F
11B6:  MOVFF  10B,120
11BA:  MOVLB  0
11BC:  RCALL  0B58
11BE:  MOVLW  6C
11C0:  MOVWF  FF6
11C2:  MOVLW  01
11C4:  MOVWF  FF7
11C6:  RCALL  1056
11C8:  MOVLB  1
....................    if(estadoalarma==1) 
11CA:  BTFSS  3E.2
11CC:  BRA    11E6
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
11CE:  MOVLW  02
11D0:  MOVWF  x1F
11D2:  MOVFF  10B,120
11D6:  MOVLB  0
11D8:  RCALL  0B58
11DA:  MOVLW  80
11DC:  MOVWF  FF6
11DE:  MOVLW  01
11E0:  MOVWF  FF7
11E2:  RCALL  1056
11E4:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
11E6:  MOVF   x0A,W
11E8:  SUBLW  02
11EA:  BNZ   1204
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
11EC:  MOVLW  02
11EE:  MOVWF  x1F
11F0:  MOVFF  10B,120
11F4:  MOVLB  0
11F6:  RCALL  0B58
11F8:  MOVLW  94
11FA:  MOVWF  FF6
11FC:  MOVLW  01
11FE:  MOVWF  FF7
1200:  RCALL  1056
1202:  MOVLB  1
....................     
....................    if(x==3) 
1204:  MOVF   x0A,W
1206:  SUBLW  03
1208:  BNZ   1222
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
120A:  MOVLW  02
120C:  MOVWF  x1F
120E:  MOVFF  10B,120
1212:  MOVLB  0
1214:  RCALL  0B58
1216:  MOVLW  A8
1218:  MOVWF  FF6
121A:  MOVLW  01
121C:  MOVWF  FF7
121E:  RCALL  1056
1220:  MOVLB  1
....................     
....................    if(x==4) 
1222:  MOVF   x0A,W
1224:  SUBLW  04
1226:  BNZ   1240
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1228:  MOVLW  02
122A:  MOVWF  x1F
122C:  MOVFF  10B,120
1230:  MOVLB  0
1232:  RCALL  0B58
1234:  MOVLW  BC
1236:  MOVWF  FF6
1238:  MOVLW  01
123A:  MOVWF  FF7
123C:  RCALL  1056
123E:  MOVLB  1
....................     
....................    if(x==5) 
1240:  MOVF   x0A,W
1242:  SUBLW  05
1244:  BNZ   125E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
1246:  MOVLW  02
1248:  MOVWF  x1F
124A:  MOVFF  10B,120
124E:  MOVLB  0
1250:  RCALL  0B58
1252:  MOVLW  D0
1254:  MOVWF  FF6
1256:  MOVLW  01
1258:  MOVWF  FF7
125A:  RCALL  1056
125C:  MOVLB  1
....................     
....................    if(x==6) 
125E:  MOVF   x0A,W
1260:  SUBLW  06
1262:  BNZ   127C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1264:  MOVLW  02
1266:  MOVWF  x1F
1268:  MOVFF  10B,120
126C:  MOVLB  0
126E:  RCALL  0B58
1270:  MOVLW  E4
1272:  MOVWF  FF6
1274:  MOVLW  01
1276:  MOVWF  FF7
1278:  RCALL  1056
127A:  MOVLB  1
....................     
....................    if(x==7) 
127C:  MOVF   x0A,W
127E:  SUBLW  07
1280:  BNZ   129A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1282:  MOVLW  02
1284:  MOVWF  x1F
1286:  MOVFF  10B,120
128A:  MOVLB  0
128C:  RCALL  0B58
128E:  MOVLW  F8
1290:  MOVWF  FF6
1292:  MOVLW  01
1294:  MOVWF  FF7
1296:  RCALL  1056
1298:  MOVLB  1
....................     
....................    if(x==8) 
129A:  MOVF   x0A,W
129C:  SUBLW  08
129E:  BNZ   12B8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
12A0:  MOVLW  02
12A2:  MOVWF  x1F
12A4:  MOVFF  10B,120
12A8:  MOVLB  0
12AA:  RCALL  0B58
12AC:  MOVLW  0C
12AE:  MOVWF  FF6
12B0:  MOVLW  02
12B2:  MOVWF  FF7
12B4:  RCALL  1056
12B6:  MOVLB  1
....................     
....................    if(x==9) 
12B8:  MOVF   x0A,W
12BA:  SUBLW  09
12BC:  BNZ   12D6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
12BE:  MOVLW  02
12C0:  MOVWF  x1F
12C2:  MOVFF  10B,120
12C6:  MOVLB  0
12C8:  RCALL  0B58
12CA:  MOVLW  20
12CC:  MOVWF  FF6
12CE:  MOVLW  02
12D0:  MOVWF  FF7
12D2:  RCALL  1056
12D4:  MOVLB  1
....................     
....................    if(x==10) 
12D6:  MOVF   x0A,W
12D8:  SUBLW  0A
12DA:  BNZ   12F4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
12DC:  MOVLW  02
12DE:  MOVWF  x1F
12E0:  MOVFF  10B,120
12E4:  MOVLB  0
12E6:  RCALL  0B58
12E8:  MOVLW  34
12EA:  MOVWF  FF6
12EC:  MOVLW  02
12EE:  MOVWF  FF7
12F0:  RCALL  1056
12F2:  MOVLB  1
.................... } 
12F4:  MOVLB  0
12F6:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
17EE:  MOVFF  109,FBE
.................... } 
17F2:  RETLW  00
....................  
.................... void main () 
.................... { 
*
2502:  CLRF   FF8
2504:  BCF    FD0.7
2506:  BSF    07.7
2508:  CLRF   FEA
250A:  CLRF   FE9
250C:  MOVLW  64
250E:  MOVWF  17
2510:  MOVLW  0B
2512:  MOVWF  18
2514:  MOVLW  02
2516:  MOVWF  19
2518:  MOVLW  0B
251A:  MOVWF  1A
251C:  MOVLW  02
251E:  MOVWF  1B
2520:  MOVLW  03
2522:  MOVWF  1C
2524:  MOVLW  02
2526:  MOVWF  1D
2528:  MOVWF  1E
252A:  MOVLW  04
252C:  MOVWF  1F
252E:  MOVLW  0A
2530:  MOVWF  20
2532:  MOVLW  01
2534:  MOVWF  21
2536:  CLRF   22
2538:  CLRF   23
253A:  CLRF   24
253C:  CLRF   25
253E:  CLRF   26
2540:  CLRF   27
2542:  CLRF   28
2544:  CLRF   29
2546:  CLRF   2A
2548:  CLRF   2B
254A:  MOVLW  0A
254C:  MOVWF  2C
254E:  CLRF   2D
2550:  MOVWF  2E
2552:  MOVWF  2F
2554:  MOVWF  30
2556:  MOVWF  31
2558:  CLRF   32
255A:  CLRF   33
255C:  CLRF   34
255E:  CLRF   35
2560:  CLRF   36
2562:  CLRF   37
2564:  CLRF   38
2566:  CLRF   39
2568:  CLRF   3A
256A:  CLRF   3B
256C:  CLRF   3C
256E:  CLRF   3D
2570:  BCF    3E.0
2572:  BCF    3E.1
2574:  BCF    3E.2
2576:  BCF    3E.3
2578:  BCF    3E.4
257A:  BCF    3E.5
257C:  BCF    3E.6
257E:  BCF    3E.7
2580:  BCF    3F.0
2582:  BCF    3F.1
2584:  BCF    3F.2
2586:  CLRF   40
2588:  CLRF   4F
258A:  CLRF   4E
258C:  CLRF   4D
258E:  CLRF   4C
2590:  CLRF   53
2592:  CLRF   52
2594:  CLRF   51
2596:  CLRF   50
2598:  CLRF   57
259A:  CLRF   56
259C:  MOVLW  4B
259E:  MOVWF  55
25A0:  MOVLW  86
25A2:  MOVWF  54
25A4:  BCF    3F.4
25A6:  BCF    3F.5
25A8:  BCF    3F.6
25AA:  BCF    3F.7
25AC:  BCF    58.0
25AE:  BCF    58.1
25B0:  BCF    58.2
25B2:  BCF    58.3
25B4:  BCF    58.4
25B6:  BCF    58.5
25B8:  CLRF   5A
25BA:  CLRF   59
25BC:  CLRF   5C
25BE:  CLRF   5B
25C0:  CLRF   5E
25C2:  CLRF   5D
25C4:  CLRF   x60
25C6:  CLRF   5F
25C8:  CLRF   x64
25CA:  MOVLW  E0
25CC:  MOVWF  x63
25CE:  MOVLW  5D
25D0:  MOVWF  x62
25D2:  MOVLW  8A
25D4:  MOVWF  x61
25D6:  CLRF   x68
25D8:  MOVLW  C0
25DA:  MOVWF  x67
25DC:  MOVLW  28
25DE:  MOVWF  x66
25E0:  MOVLW  89
25E2:  MOVWF  x65
25E4:  MOVLW  33
25E6:  MOVWF  x6C
25E8:  MOVLW  13
25EA:  MOVWF  x6B
25EC:  MOVLW  15
25EE:  MOVWF  x6A
25F0:  MOVLW  87
25F2:  MOVWF  x69
25F4:  CLRF   x70
25F6:  CLRF   x6F
25F8:  CLRF   x6E
25FA:  CLRF   x6D
25FC:  CLRF   x74
25FE:  CLRF   x73
2600:  CLRF   x72
2602:  CLRF   x71
2604:  CLRF   x78
2606:  CLRF   x77
2608:  MOVLW  7A
260A:  MOVWF  x76
260C:  MOVLW  88
260E:  MOVWF  x75
2610:  CLRF   x7C
2612:  CLRF   x7B
2614:  CLRF   x7A
2616:  CLRF   x79
2618:  CLRF   x80
261A:  CLRF   x7F
261C:  CLRF   x7E
261E:  CLRF   x7D
2620:  CLRF   x84
2622:  CLRF   x83
2624:  CLRF   x82
2626:  CLRF   x81
2628:  MOVLW  19
262A:  MOVWF  x88
262C:  MOVLW  53
262E:  MOVWF  x87
2630:  MOVLW  18
2632:  MOVWF  x86
2634:  MOVLW  68
2636:  MOVWF  x85
2638:  MOVLW  E9
263A:  MOVWF  x8C
263C:  MOVLW  BD
263E:  MOVWF  x8B
2640:  MOVLW  C6
2642:  MOVWF  x8A
2644:  MOVLW  71
2646:  MOVWF  x89
2648:  MOVLW  BE
264A:  MOVWF  x90
264C:  MOVLW  96
264E:  MOVWF  x8F
2650:  MOVLW  24
2652:  MOVWF  x8E
2654:  MOVLW  7A
2656:  MOVWF  x8D
2658:  MOVLW  F3
265A:  MOVWF  x94
265C:  MOVLW  5A
265E:  MOVWF  x93
2660:  MOVLW  AB
2662:  MOVWF  x92
2664:  MOVLW  81
2666:  MOVWF  x91
2668:  CLRF   x98
266A:  CLRF   x97
266C:  CLRF   x96
266E:  CLRF   x95
2670:  CLRF   x9C
2672:  CLRF   x9B
2674:  CLRF   x9A
2676:  CLRF   x99
2678:  CLRF   xA0
267A:  CLRF   x9F
267C:  CLRF   x9E
267E:  CLRF   x9D
2680:  CLRF   xA4
2682:  CLRF   xA3
2684:  CLRF   xA2
2686:  CLRF   xA1
2688:  CLRF   xA8
268A:  CLRF   xA7
268C:  CLRF   xA6
268E:  CLRF   xA5
2690:  CLRF   xAC
2692:  CLRF   xAB
2694:  CLRF   xAA
2696:  CLRF   xA9
2698:  MOVLW  8B
269A:  MOVWF  xB0
269C:  MOVLW  FD
269E:  MOVWF  xAF
26A0:  MOVLW  65
26A2:  MOVWF  xAE
26A4:  MOVLW  7C
26A6:  MOVWF  xAD
26A8:  CLRF   xB4
26AA:  CLRF   xB3
26AC:  CLRF   xB2
26AE:  CLRF   xB1
26B0:  CLRF   xB8
26B2:  CLRF   xB7
26B4:  CLRF   xB6
26B6:  CLRF   xB5
26B8:  CLRF   xBC
26BA:  CLRF   xBB
26BC:  CLRF   xBA
26BE:  CLRF   xB9
26C0:  CLRF   xC0
26C2:  CLRF   xBF
26C4:  CLRF   xBE
26C6:  CLRF   xBD
26C8:  CLRF   xC4
26CA:  CLRF   xC3
26CC:  CLRF   xC2
26CE:  CLRF   xC1
26D0:  CLRF   xC8
26D2:  CLRF   xC7
26D4:  CLRF   xC6
26D6:  CLRF   xC5
26D8:  CLRF   xCC
26DA:  CLRF   xCB
26DC:  CLRF   xCA
26DE:  MOVLW  7F
26E0:  MOVWF  xC9
26E2:  CLRF   xD0
26E4:  CLRF   xCF
26E6:  MOVLW  24
26E8:  MOVWF  xCE
26EA:  MOVLW  88
26EC:  MOVWF  xCD
26EE:  CLRF   xD4
26F0:  CLRF   xD3
26F2:  CLRF   xD2
26F4:  CLRF   xD1
26F6:  CLRF   xD8
26F8:  CLRF   xD7
26FA:  CLRF   xD6
26FC:  CLRF   xD5
26FE:  MOVF   FC1,W
2700:  ANDLW  C0
2702:  IORLW  0F
2704:  MOVWF  FC1
2706:  MOVLW  07
2708:  MOVWF  FB4
270A:  MOVLW  3E
270C:  MOVWF  41
270E:  MOVLW  20
2710:  MOVWF  42
2712:  MOVLW  5E
2714:  MOVWF  43
2716:  CLRF   44
2718:  CLRF   45
271A:  CLRF   46
271C:  CLRF   47
271E:  CLRF   48
2720:  CLRF   49
2722:  CLRF   4A
2724:  CLRF   4B
2726:  CLRF   xD9
2728:  CLRF   xDA
272A:  CLRF   xDB
272C:  CLRF   xDC
272E:  CLRF   xDD
2730:  CLRF   xDE
2732:  CLRF   xDF
2734:  CLRF   xE0
2736:  CLRF   xE1
2738:  CLRF   xE2
273A:  CLRF   xE3
273C:  CLRF   xE4
273E:  CLRF   xE5
2740:  CLRF   xE6
2742:  CLRF   xE7
2744:  CLRF   xE8
2746:  CLRF   xE9
2748:  CLRF   xEA
274A:  CLRF   xEB
274C:  CLRF   xEC
274E:  CLRF   xED
2750:  CLRF   xEE
2752:  CLRF   xEF
2754:  CLRF   xF0
2756:  CLRF   xF1
2758:  CLRF   xF2
275A:  CLRF   xF3
275C:  CLRF   xF4
275E:  CLRF   xF5
2760:  CLRF   xF6
2762:  CLRF   xF7
2764:  CLRF   xF8
2766:  CLRF   xF9
2768:  CLRF   xFA
276A:  CLRF   xFB
276C:  CLRF   xFC
276E:  CLRF   xFD
2770:  CLRF   xFE
2772:  CLRF   xFF
2774:  MOVLB  1
2776:  CLRF   x00
2778:  CLRF   x01
277A:  CLRF   x02
277C:  CLRF   x03
277E:  CLRF   x04
2780:  CLRF   x05
2782:  CLRF   x06
2784:  CLRF   x07
2786:  CLRF   x08
....................    setup_adc_ports(AN0_TO_AN3); 
2788:  MOVF   FC1,W
278A:  ANDLW  C0
278C:  IORLW  0B
278E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
2790:  BCF    FC0.0
2792:  BSF    FC0.1
2794:  BCF    FC0.2
2796:  BSF    FC0.7
2798:  BSF    FC2.0
....................    output_d(0);  
279A:  CLRF   F95
279C:  CLRF   F8C
....................    ModoSleep=1; 
279E:  BSF    3F.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
27A0:  MOVLW  85
27A2:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
27A4:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
27A6:  MOVLW  00
27A8:  IORLW  05
27AA:  MOVWF  FCA
27AC:  MOVLW  FF
27AE:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
27B0:  BCF    F94.2
27B2:  BCF    F8B.2
27B4:  BCF    F96.6
27B6:  MOVLW  0C
27B8:  MOVWF  FBD
27BA:  CLRF   FB7
27BC:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
27BE:  MOVLW  C0
27C0:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
27C2:  CLRF   FBE
....................    lcd_init(); 
27C4:  MOVLB  0
27C6:  CALL   0AE4
....................    printf(lcd_putc,"\f"); 
27CA:  MOVLW  0C
27CC:  MOVLB  1
27CE:  MOVWF  x1E
27D0:  MOVLB  0
27D2:  CALL   0BCA
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
27D6:  MOVFF  FF2,109
27DA:  BCF    FF2.7
27DC:  CLRF   FA9
27DE:  BCF    FA6.6
27E0:  BCF    FA6.7
27E2:  BSF    FA6.0
27E4:  MOVF   FA8,W
27E6:  MOVLB  1
27E8:  BTFSC  x09.7
27EA:  BSF    FF2.7
27EC:  MOVWF  48
27EE:  MOVLW  14
27F0:  MOVWF  x24
27F2:  MOVLB  0
27F4:  CALL   0A46
27F8:  MOVFF  FF2,109
27FC:  BCF    FF2.7
27FE:  MOVLW  01
2800:  MOVWF  FA9
2802:  BCF    FA6.6
2804:  BCF    FA6.7
2806:  BSF    FA6.0
2808:  MOVF   FA8,W
280A:  MOVLB  1
280C:  BTFSC  x09.7
280E:  BSF    FF2.7
2810:  MOVWF  49
2812:  MOVLW  14
2814:  MOVWF  x24
2816:  MOVLB  0
2818:  CALL   0A46
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
281C:  MOVFF  FF2,109
2820:  BCF    FF2.7
2822:  MOVLW  02
2824:  MOVWF  FA9
2826:  BCF    FA6.6
2828:  BCF    FA6.7
282A:  BSF    FA6.0
282C:  MOVF   FA8,W
282E:  MOVLB  1
2830:  BTFSC  x09.7
2832:  BSF    FF2.7
2834:  MOVWF  4A
2836:  MOVLW  14
2838:  MOVWF  x24
283A:  MOVLB  0
283C:  CALL   0A46
2840:  MOVFF  FF2,109
2844:  BCF    FF2.7
2846:  MOVLW  03
2848:  MOVWF  FA9
284A:  BCF    FA6.6
284C:  BCF    FA6.7
284E:  BSF    FA6.0
2850:  MOVF   FA8,W
2852:  MOVLB  1
2854:  BTFSC  x09.7
2856:  BSF    FF2.7
2858:  MOVWF  4B
285A:  MOVLW  14
285C:  MOVWF  x24
285E:  MOVLB  0
2860:  CALL   0A46
....................    estadoalarma=read_eeprom(5); 
2864:  MOVFF  FF2,109
2868:  BCF    FF2.7
286A:  MOVLW  05
286C:  MOVWF  FA9
286E:  BCF    FA6.6
2870:  BCF    FA6.7
2872:  BSF    FA6.0
2874:  MOVF   FA8,W
2876:  MOVLB  1
2878:  BTFSC  x09.7
287A:  BSF    FF2.7
287C:  MOVWF  01
287E:  BCF    3E.2
2880:  BTFSC  01.0
2882:  BSF    3E.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
2884:  MOVFF  FF2,109
2888:  BCF    FF2.7
288A:  MOVLW  0A
288C:  MOVWF  FA9
288E:  BCF    FA6.6
2890:  BCF    FA6.7
2892:  BSF    FA6.0
2894:  MOVF   FA8,W
2896:  BTFSC  x09.7
2898:  BSF    FF2.7
289A:  MOVWF  30
289C:  MOVFF  FF2,109
28A0:  BCF    FF2.7
28A2:  MOVLW  0B
28A4:  MOVWF  FA9
28A6:  BCF    FA6.6
28A8:  BCF    FA6.7
28AA:  BSF    FA6.0
28AC:  MOVF   FA8,W
28AE:  BTFSC  x09.7
28B0:  BSF    FF2.7
28B2:  MOVWF  2F
28B4:  MOVFF  FF2,109
28B8:  BCF    FF2.7
28BA:  MOVLW  0C
28BC:  MOVWF  FA9
28BE:  BCF    FA6.6
28C0:  BCF    FA6.7
28C2:  BSF    FA6.0
28C4:  MOVF   FA8,W
28C6:  BTFSC  x09.7
28C8:  BSF    FF2.7
28CA:  MOVWF  31
28CC:  MOVFF  FF2,109
28D0:  BCF    FF2.7
28D2:  MOVLW  0D
28D4:  MOVWF  FA9
28D6:  BCF    FA6.6
28D8:  BCF    FA6.7
28DA:  BSF    FA6.0
28DC:  MOVF   FA8,W
28DE:  BTFSC  x09.7
28E0:  BSF    FF2.7
28E2:  MOVWF  32
28E4:  MOVFF  32,2C
....................  
....................    purga_minutos=read_eeprom(20);purga_segundos=read_eeprom(21); 
28E8:  MOVFF  FF2,109
28EC:  BCF    FF2.7
28EE:  MOVLW  14
28F0:  MOVWF  FA9
28F2:  BCF    FA6.6
28F4:  BCF    FA6.7
28F6:  BSF    FA6.0
28F8:  MOVF   FA8,W
28FA:  BTFSC  x09.7
28FC:  BSF    FF2.7
28FE:  MOVWF  22
2900:  MOVFF  FF2,109
2904:  BCF    FF2.7
2906:  MOVLW  15
2908:  MOVWF  FA9
290A:  BCF    FA6.6
290C:  BCF    FA6.7
290E:  BSF    FA6.0
2910:  MOVF   FA8,W
2912:  BTFSC  x09.7
2914:  BSF    FF2.7
2916:  MOVWF  37
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
2918:  MOVFF  22,23
291C:  MOVFF  37,38
....................    ppurga_minutos=read_eeprom(22);ppurga_segundos=read_eeprom(23); 
2920:  MOVFF  FF2,109
2924:  BCF    FF2.7
2926:  MOVLW  16
2928:  MOVWF  FA9
292A:  BCF    FA6.6
292C:  BCF    FA6.7
292E:  BSF    FA6.0
2930:  MOVF   FA8,W
2932:  BTFSC  x09.7
2934:  BSF    FF2.7
2936:  MOVWF  3B
2938:  MOVFF  FF2,109
293C:  BCF    FF2.7
293E:  MOVLW  17
2940:  MOVWF  FA9
2942:  BCF    FA6.6
2944:  BCF    FA6.7
2946:  BSF    FA6.0
2948:  MOVF   FA8,W
294A:  BTFSC  x09.7
294C:  BSF    FF2.7
294E:  MOVWF  39
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
2950:  MOVFF  3B,3C
2954:  MOVFF  39,3A
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
2958:  MOVFF  FF2,109
295C:  BCF    FF2.7
295E:  MOVLW  19
2960:  MOVWF  FA9
2962:  BCF    FA6.6
2964:  BCF    FA6.7
2966:  BSF    FA6.0
2968:  MOVF   FA8,W
296A:  BTFSC  x09.7
296C:  BSF    FF2.7
296E:  MOVWF  24
....................    Temporal=read_eeprom(26); 
2970:  MOVFF  FF2,109
2974:  BCF    FF2.7
2976:  MOVLW  1A
2978:  MOVWF  FA9
297A:  BCF    FA6.6
297C:  BCF    FA6.7
297E:  BSF    FA6.0
2980:  MOVF   FA8,W
2982:  BTFSC  x09.7
2984:  BSF    FF2.7
2986:  CLRF   x13
2988:  MOVWF  x12
298A:  MOVLB  0
298C:  CALL   0C36
2990:  MOVFF  03,B4
2994:  MOVFF  02,B3
2998:  MOVFF  01,B2
299C:  MOVFF  00,B1
....................    Temporal=Temporal/100.0; 
29A0:  MOVFF  B4,12A
29A4:  MOVFF  B3,129
29A8:  MOVFF  B2,128
29AC:  MOVFF  B1,127
29B0:  MOVLB  1
29B2:  CLRF   x2E
29B4:  CLRF   x2D
29B6:  MOVLW  48
29B8:  MOVWF  x2C
29BA:  MOVLW  85
29BC:  MOVWF  x2B
29BE:  MOVLB  0
29C0:  CALL   0C6C
29C4:  MOVFF  03,B4
29C8:  MOVFF  02,B3
29CC:  MOVFF  01,B2
29D0:  MOVFF  00,B1
....................    Ajuste1=Entero+Temporal; 
29D4:  MOVLB  1
29D6:  CLRF   x13
29D8:  MOVFF  24,112
29DC:  MOVLB  0
29DE:  CALL   0C36
29E2:  BCF    FD8.1
29E4:  MOVFF  03,12A
29E8:  MOVFF  02,129
29EC:  MOVFF  01,128
29F0:  MOVFF  00,127
29F4:  MOVFF  B4,12E
29F8:  MOVFF  B3,12D
29FC:  MOVFF  B2,12C
2A00:  MOVFF  B1,12B
2A04:  CALL   0DCA
2A08:  MOVFF  03,CC
2A0C:  MOVFF  02,CB
2A10:  MOVFF  01,CA
2A14:  MOVFF  00,C9
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
2A18:  MOVFF  FF2,109
2A1C:  BCF    FF2.7
2A1E:  MOVLW  28
2A20:  MOVWF  FA9
2A22:  BCF    FA6.6
2A24:  BCF    FA6.7
2A26:  BSF    FA6.0
2A28:  MOVF   FA8,W
2A2A:  MOVLB  1
2A2C:  BTFSC  x09.7
2A2E:  BSF    FF2.7
2A30:  MOVWF  24
....................    Temporal=read_eeprom(41); 
2A32:  MOVFF  FF2,109
2A36:  BCF    FF2.7
2A38:  MOVLW  29
2A3A:  MOVWF  FA9
2A3C:  BCF    FA6.6
2A3E:  BCF    FA6.7
2A40:  BSF    FA6.0
2A42:  MOVF   FA8,W
2A44:  BTFSC  x09.7
2A46:  BSF    FF2.7
2A48:  CLRF   x13
2A4A:  MOVWF  x12
2A4C:  MOVLB  0
2A4E:  CALL   0C36
2A52:  MOVFF  03,B4
2A56:  MOVFF  02,B3
2A5A:  MOVFF  01,B2
2A5E:  MOVFF  00,B1
....................    Temporal=Temporal/100.0; 
2A62:  MOVFF  B4,12A
2A66:  MOVFF  B3,129
2A6A:  MOVFF  B2,128
2A6E:  MOVFF  B1,127
2A72:  MOVLB  1
2A74:  CLRF   x2E
2A76:  CLRF   x2D
2A78:  MOVLW  48
2A7A:  MOVWF  x2C
2A7C:  MOVLW  85
2A7E:  MOVWF  x2B
2A80:  MOVLB  0
2A82:  CALL   0C6C
2A86:  MOVFF  03,B4
2A8A:  MOVFF  02,B3
2A8E:  MOVFF  01,B2
2A92:  MOVFF  00,B1
....................    setpoint=Entero+Temporal; 
2A96:  MOVLB  1
2A98:  CLRF   x13
2A9A:  MOVFF  24,112
2A9E:  MOVLB  0
2AA0:  CALL   0C36
2AA4:  BCF    FD8.1
2AA6:  MOVFF  03,12A
2AAA:  MOVFF  02,129
2AAE:  MOVFF  01,128
2AB2:  MOVFF  00,127
2AB6:  MOVFF  B4,12E
2ABA:  MOVFF  B3,12D
2ABE:  MOVFF  B2,12C
2AC2:  MOVFF  B1,12B
2AC6:  CALL   0DCA
2ACA:  MOVFF  03,4F
2ACE:  MOVFF  02,4E
2AD2:  MOVFF  01,4D
2AD6:  MOVFF  00,4C
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
2ADA:  MOVFF  FF2,109
2ADE:  BCF    FF2.7
2AE0:  MOVLW  3C
2AE2:  MOVWF  FA9
2AE4:  BCF    FA6.6
2AE6:  BCF    FA6.7
2AE8:  BSF    FA6.0
2AEA:  MOVF   FA8,W
2AEC:  MOVLB  1
2AEE:  BTFSC  x09.7
2AF0:  BSF    FF2.7
2AF2:  MOVWF  27
....................    Temporal1=read_eeprom(61); 
2AF4:  MOVFF  FF2,109
2AF8:  BCF    FF2.7
2AFA:  MOVLW  3D
2AFC:  MOVWF  FA9
2AFE:  BCF    FA6.6
2B00:  BCF    FA6.7
2B02:  BSF    FA6.0
2B04:  MOVF   FA8,W
2B06:  BTFSC  x09.7
2B08:  BSF    FF2.7
2B0A:  CLRF   x13
2B0C:  MOVWF  x12
2B0E:  MOVLB  0
2B10:  CALL   0C36
2B14:  MOVFF  03,C0
2B18:  MOVFF  02,BF
2B1C:  MOVFF  01,BE
2B20:  MOVFF  00,BD
....................    Temporal1=Temporal1/100.0; 
2B24:  MOVFF  C0,12A
2B28:  MOVFF  BF,129
2B2C:  MOVFF  BE,128
2B30:  MOVFF  BD,127
2B34:  MOVLB  1
2B36:  CLRF   x2E
2B38:  CLRF   x2D
2B3A:  MOVLW  48
2B3C:  MOVWF  x2C
2B3E:  MOVLW  85
2B40:  MOVWF  x2B
2B42:  MOVLB  0
2B44:  CALL   0C6C
2B48:  MOVFF  03,C0
2B4C:  MOVFF  02,BF
2B50:  MOVFF  01,BE
2B54:  MOVFF  00,BD
....................    Diferencia=Entero1+Temporal1; 
2B58:  MOVLB  1
2B5A:  CLRF   x13
2B5C:  MOVFF  27,112
2B60:  MOVLB  0
2B62:  CALL   0C36
2B66:  BCF    FD8.1
2B68:  MOVFF  03,12A
2B6C:  MOVFF  02,129
2B70:  MOVFF  01,128
2B74:  MOVFF  00,127
2B78:  MOVFF  C0,12E
2B7C:  MOVFF  BF,12D
2B80:  MOVFF  BE,12C
2B84:  MOVFF  BD,12B
2B88:  CALL   0DCA
2B8C:  MOVFF  03,C8
2B90:  MOVFF  02,C7
2B94:  MOVFF  01,C6
2B98:  MOVFF  00,C5
....................     
....................    negativo=read_eeprom(50); 
2B9C:  MOVFF  FF2,109
2BA0:  BCF    FF2.7
2BA2:  MOVLW  32
2BA4:  MOVWF  FA9
2BA6:  BCF    FA6.6
2BA8:  BCF    FA6.7
2BAA:  BSF    FA6.0
2BAC:  MOVF   FA8,W
2BAE:  MOVLB  1
2BB0:  BTFSC  x09.7
2BB2:  BSF    FF2.7
2BB4:  MOVWF  2E
....................  
....................    MediaMovil=read_eeprom(42); 
2BB6:  MOVFF  FF2,109
2BBA:  BCF    FF2.7
2BBC:  MOVLW  2A
2BBE:  MOVWF  FA9
2BC0:  BCF    FA6.6
2BC2:  BCF    FA6.7
2BC4:  BSF    FA6.0
2BC6:  MOVF   FA8,W
2BC8:  BTFSC  x09.7
2BCA:  BSF    FF2.7
2BCC:  MOVWF  2D
....................    if(MediaMovil>12) 
2BCE:  MOVF   2D,W
2BD0:  SUBLW  0C
2BD2:  BC    2BD8
....................    {MediaMovil=12;} 
2BD4:  MOVLW  0C
2BD6:  MOVWF  2D
....................     
....................    if(MediaMovil<1) 
2BD8:  MOVF   2D,F
2BDA:  BNZ   2BE0
....................    {MediaMovil=1;} 
2BDC:  MOVLW  01
2BDE:  MOVWF  2D
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
2BE0:  MOVFF  FF2,109
2BE4:  BCF    FF2.7
2BE6:  MOVLW  46
2BE8:  MOVWF  FA9
2BEA:  BCF    FA6.6
2BEC:  BCF    FA6.7
2BEE:  BSF    FA6.0
2BF0:  MOVF   FA8,W
2BF2:  BTFSC  x09.7
2BF4:  BSF    FF2.7
2BF6:  MOVWF  33
2BF8:  MOVFF  FF2,109
2BFC:  BCF    FF2.7
2BFE:  MOVLW  47
2C00:  MOVWF  FA9
2C02:  BCF    FA6.6
2C04:  BCF    FA6.7
2C06:  BSF    FA6.0
2C08:  MOVF   FA8,W
2C0A:  BTFSC  x09.7
2C0C:  BSF    FF2.7
2C0E:  MOVWF  34
2C10:  MOVFF  FF2,109
2C14:  BCF    FF2.7
2C16:  MOVLW  48
2C18:  MOVWF  FA9
2C1A:  BCF    FA6.6
2C1C:  BCF    FA6.7
2C1E:  BSF    FA6.0
2C20:  MOVF   FA8,W
2C22:  BTFSC  x09.7
2C24:  BSF    FF2.7
2C26:  MOVWF  35
2C28:  MOVFF  FF2,109
2C2C:  BCF    FF2.7
2C2E:  MOVLW  49
2C30:  MOVWF  FA9
2C32:  BCF    FA6.6
2C34:  BCF    FA6.7
2C36:  BSF    FA6.0
2C38:  MOVF   FA8,W
2C3A:  BTFSC  x09.7
2C3C:  BSF    FF2.7
2C3E:  MOVWF  01
2C40:  BCF    3F.2
2C42:  BTFSC  01.0
2C44:  BSF    3F.2
....................    Menu=200; 
2C46:  MOVLW  C8
2C48:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
2C4A:  MOVF   17,W
2C4C:  SUBLW  C8
2C4E:  BNZ   2D28
....................       if(inicio==0) 
2C50:  BTFSC  3F.4
2C52:  BRA    2D26
....................       { 
....................       delay_ms(500); 
2C54:  MOVLW  02
2C56:  MOVWF  x09
2C58:  MOVLW  FA
2C5A:  MOVWF  x24
2C5C:  MOVLB  0
2C5E:  CALL   0A46
2C62:  MOVLB  1
2C64:  DECFSZ x09,F
2C66:  BRA    2C58
....................          if(input(PIN_B0)) 
2C68:  BSF    F93.0
2C6A:  BTFSS  F81.0
2C6C:  BRA    2D26
....................          { 
....................             lcd_init(); 
2C6E:  MOVLB  0
2C70:  CALL   0AE4
....................             intensidadpantalla(contraste); 
2C74:  MOVFF  20,109
2C78:  CALL   1042
....................             lcd_gotoxy(1,1); 
2C7C:  MOVLW  01
2C7E:  MOVLB  1
2C80:  MOVWF  x1F
2C82:  MOVWF  x20
2C84:  MOVLB  0
2C86:  CALL   0B58
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
2C8A:  MOVLW  48
2C8C:  MOVWF  FF6
2C8E:  MOVLW  02
2C90:  MOVWF  FF7
2C92:  CALL   1056
....................             lcd_gotoxy(1,2); 
2C96:  MOVLW  01
2C98:  MOVLB  1
2C9A:  MOVWF  x1F
2C9C:  MOVLW  02
2C9E:  MOVWF  x20
2CA0:  MOVLB  0
2CA2:  CALL   0B58
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
2CA6:  MOVLW  5E
2CA8:  MOVWF  FF6
2CAA:  MOVLW  02
2CAC:  MOVWF  FF7
2CAE:  CALL   1056
....................             lcd_gotoxy(1,3); 
2CB2:  MOVLW  01
2CB4:  MOVLB  1
2CB6:  MOVWF  x1F
2CB8:  MOVLW  03
2CBA:  MOVWF  x20
2CBC:  MOVLB  0
2CBE:  CALL   0B58
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
2CC2:  MOVLW  74
2CC4:  MOVWF  FF6
2CC6:  MOVLW  02
2CC8:  MOVWF  FF7
2CCA:  CALL   1056
....................             lcd_gotoxy(1,4); 
2CCE:  MOVLW  01
2CD0:  MOVLB  1
2CD2:  MOVWF  x1F
2CD4:  MOVLW  04
2CD6:  MOVWF  x20
2CD8:  MOVLB  0
2CDA:  CALL   0B58
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
2CDE:  MOVLW  8A
2CE0:  MOVWF  FF6
2CE2:  MOVLW  02
2CE4:  MOVWF  FF7
2CE6:  CALL   1056
....................             delay_ms(2000); 
2CEA:  MOVLW  08
2CEC:  MOVLB  1
2CEE:  MOVWF  x09
2CF0:  MOVLW  FA
2CF2:  MOVWF  x24
2CF4:  MOVLB  0
2CF6:  CALL   0A46
2CFA:  MOVLB  1
2CFC:  DECFSZ x09,F
2CFE:  BRA    2CF0
....................             printf(lcd_putc,"\f"); 
2D00:  MOVLW  0C
2D02:  MOVWF  x1E
2D04:  MOVLB  0
2D06:  CALL   0BCA
....................             inicio=1; 
2D0A:  BSF    3F.4
....................             Menu=0; 
2D0C:  CLRF   17
....................             ModoSleep=0; 
2D0E:  BCF    3F.3
....................             delay_ms(500); 
2D10:  MOVLW  02
2D12:  MOVLB  1
2D14:  MOVWF  x09
2D16:  MOVLW  FA
2D18:  MOVWF  x24
2D1A:  MOVLB  0
2D1C:  CALL   0A46
2D20:  MOVLB  1
2D22:  DECFSZ x09,F
2D24:  BRA    2D16
....................          } 
....................       } 
....................    } 
2D26:  BRA    2C4A
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2D28:  MOVF   17,F
2D2A:  BTFSS  FD8.2
2D2C:  BRA    318E
....................    flag_latencia=1;set_pwm1_duty(0); 
2D2E:  BSF    3F.0
2D30:  CLRF   FBE
....................       if(Latencia==1) 
2D32:  BTFSS  3F.1
2D34:  BRA    2D44
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2D36:  MOVLW  0C
2D38:  MOVWF  x1E
2D3A:  MOVLB  0
2D3C:  CALL   0BCA
2D40:  RESET
2D42:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
2D44:  MOVLW  01
2D46:  MOVWF  x1F
2D48:  MOVWF  x20
2D4A:  MOVLB  0
2D4C:  CALL   0B58
....................    printf(lcd_putc,"     Ingrese        "); 
2D50:  MOVLW  A0
2D52:  MOVWF  FF6
2D54:  MOVLW  02
2D56:  MOVWF  FF7
2D58:  CALL   1056
....................    lcd_gotoxy(1,2); 
2D5C:  MOVLW  01
2D5E:  MOVLB  1
2D60:  MOVWF  x1F
2D62:  MOVLW  02
2D64:  MOVWF  x20
2D66:  MOVLB  0
2D68:  CALL   0B58
....................    printf(lcd_putc,"    Contraseña      "); 
2D6C:  MOVLW  B6
2D6E:  MOVWF  FF6
2D70:  MOVLW  02
2D72:  MOVWF  FF7
2D74:  CALL   1056
....................    lcd_gotoxy(1,3); 
2D78:  MOVLW  01
2D7A:  MOVLB  1
2D7C:  MOVWF  x1F
2D7E:  MOVLW  03
2D80:  MOVWF  x20
2D82:  MOVLB  0
2D84:  CALL   0B58
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2D88:  MOVLW  CC
2D8A:  MOVWF  FF6
2D8C:  MOVLW  02
2D8E:  MOVWF  FF7
2D90:  MOVLW  0A
2D92:  MOVLB  1
2D94:  MOVWF  x11
2D96:  MOVLB  0
2D98:  CALL   1076
2D9C:  MOVFF  44,109
2DA0:  MOVLW  1F
2DA2:  MOVLB  1
2DA4:  MOVWF  x0A
2DA6:  MOVLB  0
2DA8:  CALL   10CA
2DAC:  MOVFF  45,109
2DB0:  MOVLW  1F
2DB2:  MOVLB  1
2DB4:  MOVWF  x0A
2DB6:  MOVLB  0
2DB8:  CALL   10CA
2DBC:  MOVFF  46,109
2DC0:  MOVLW  1F
2DC2:  MOVLB  1
2DC4:  MOVWF  x0A
2DC6:  MOVLB  0
2DC8:  CALL   10CA
2DCC:  MOVFF  47,109
2DD0:  MOVLW  1F
2DD2:  MOVLB  1
2DD4:  MOVWF  x0A
2DD6:  MOVLB  0
2DD8:  CALL   10CA
2DDC:  MOVLW  20
2DDE:  MOVLB  1
2DE0:  MOVWF  x1E
2DE2:  MOVLB  0
2DE4:  CALL   0BCA
2DE8:  MOVLW  20
2DEA:  MOVLB  1
2DEC:  MOVWF  x1E
2DEE:  MOVLB  0
2DF0:  CALL   0BCA
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2DF4:  BSF    F93.3
2DF6:  BTFSS  F81.3
2DF8:  BRA    2E24
....................       {  if(Flanco == 0)  
2DFA:  BTFSC  3E.4
2DFC:  BRA    2E22
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2DFE:  MOVLW  0B
2E00:  SUBWF  1A,W
2E02:  CLRF   03
2E04:  ADDLW  44
2E06:  MOVWF  FE9
2E08:  MOVLW  00
2E0A:  ADDWFC 03,W
2E0C:  MOVWF  FEA
2E0E:  INCF   FEF,F
2E10:  BSF    3E.4
2E12:  MOVLW  1E
2E14:  MOVLB  1
2E16:  MOVWF  x24
2E18:  MOVLB  0
2E1A:  CALL   0A46
2E1E:  CLRF   5C
2E20:  CLRF   5B
....................          else 
2E22:  BRA    2E26
....................             {Flanco = 0;} 
2E24:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2E26:  BSF    F93.2
2E28:  BTFSS  F81.2
2E2A:  BRA    2E56
....................       {  if(Flanco2 == 0)  
2E2C:  BTFSC  3E.6
2E2E:  BRA    2E54
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2E30:  MOVLW  0B
2E32:  SUBWF  1A,W
2E34:  CLRF   03
2E36:  ADDLW  44
2E38:  MOVWF  FE9
2E3A:  MOVLW  00
2E3C:  ADDWFC 03,W
2E3E:  MOVWF  FEA
2E40:  DECF   FEF,F
2E42:  BSF    3E.6
2E44:  MOVLW  1E
2E46:  MOVLB  1
2E48:  MOVWF  x24
2E4A:  MOVLB  0
2E4C:  CALL   0A46
2E50:  CLRF   5C
2E52:  CLRF   5B
....................          else 
2E54:  BRA    2E58
....................             {Flanco2 = 0;} 
2E56:  BCF    3E.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2E58:  BSF    F93.0
2E5A:  BTFSS  F81.0
2E5C:  BRA    2E84
....................       {  if(Flanco1 == 0)  
2E5E:  BTFSC  3E.5
2E60:  BRA    2E82
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2E62:  BSF    3E.5
2E64:  INCF   1A,F
2E66:  MOVLW  1E
2E68:  MOVLB  1
2E6A:  MOVWF  x24
2E6C:  MOVLB  0
2E6E:  CALL   0A46
2E72:  MOVLW  0C
2E74:  MOVLB  1
2E76:  MOVWF  x1E
2E78:  MOVLB  0
2E7A:  CALL   0BCA
2E7E:  CLRF   5C
2E80:  CLRF   5B
....................          else 
2E82:  BRA    2E86
....................             {Flanco1 = 0;}    
2E84:  BCF    3E.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2E86:  BSF    F93.1
2E88:  BTFSS  F81.1
2E8A:  BRA    2EB2
....................       {  if(Flanco3 == 0)  
2E8C:  BTFSC  3E.7
2E8E:  BRA    2EB0
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2E90:  BSF    3E.7
2E92:  DECF   1A,F
2E94:  MOVLW  1E
2E96:  MOVLB  1
2E98:  MOVWF  x24
2E9A:  MOVLB  0
2E9C:  CALL   0A46
2EA0:  MOVLW  0C
2EA2:  MOVLB  1
2EA4:  MOVWF  x1E
2EA6:  MOVLB  0
2EA8:  CALL   0BCA
2EAC:  CLRF   5C
2EAE:  CLRF   5B
....................          else 
2EB0:  BRA    2EB4
....................             {Flanco3 = 0;}     
2EB2:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2EB4:  MOVLW  0B
2EB6:  SUBWF  1A,W
2EB8:  CLRF   03
2EBA:  ADDLW  44
2EBC:  MOVWF  FE9
2EBE:  MOVLW  00
2EC0:  ADDWFC 03,W
2EC2:  MOVWF  FEA
2EC4:  BTFSC  FEF.7
2EC6:  BRA    2ECA
2EC8:  BRA    2EDE
....................        {clave[unidad-11]=9;} 
2ECA:  MOVLW  0B
2ECC:  SUBWF  1A,W
2ECE:  CLRF   03
2ED0:  ADDLW  44
2ED2:  MOVWF  FE9
2ED4:  MOVLW  00
2ED6:  ADDWFC 03,W
2ED8:  MOVWF  FEA
2EDA:  MOVLW  09
2EDC:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2EDE:  MOVLW  0B
2EE0:  SUBWF  1A,W
2EE2:  CLRF   03
2EE4:  ADDLW  44
2EE6:  MOVWF  FE9
2EE8:  MOVLW  00
2EEA:  ADDWFC 03,W
2EEC:  MOVWF  FEA
2EEE:  BTFSC  FEF.7
2EF0:  BRA    2F0A
2EF2:  MOVF   FEF,W
2EF4:  SUBLW  09
2EF6:  BC    2F0A
....................        {clave[unidad-11]=0;} 
2EF8:  MOVLW  0B
2EFA:  SUBWF  1A,W
2EFC:  CLRF   03
2EFE:  ADDLW  44
2F00:  MOVWF  FE9
2F02:  MOVLW  00
2F04:  ADDWFC 03,W
2F06:  MOVWF  FEA
2F08:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2F0A:  MOVF   1A,W
2F0C:  SUBLW  0A
2F0E:  BNC   2F14
....................        {unidad=11;} 
2F10:  MOVLW  0B
2F12:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2F14:  MOVFF  1A,11F
2F18:  MOVLW  04
2F1A:  MOVLB  1
2F1C:  MOVWF  x20
2F1E:  MOVLB  0
2F20:  CALL   0B58
....................        lcd_putc(t[2]); 
2F24:  MOVFF  43,11E
2F28:  CALL   0BCA
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2F2C:  MOVF   1A,W
2F2E:  SUBLW  0E
2F30:  BTFSC  FD8.0
2F32:  BRA    3162
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2F34:  MOVF   44,W
2F36:  SUBLW  03
2F38:  BNZ   301C
2F3A:  MOVF   45,W
2F3C:  SUBLW  08
2F3E:  BNZ   301C
2F40:  MOVF   46,W
2F42:  SUBLW  09
2F44:  BNZ   301C
2F46:  MOVF   47,W
2F48:  SUBLW  02
2F4A:  BNZ   301C
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2F4C:  CLRF   FA9
2F4E:  CLRF   FA8
2F50:  BCF    FA6.6
2F52:  BCF    FA6.7
2F54:  BSF    FA6.2
2F56:  MOVF   FF2,W
2F58:  MOVWF  00
2F5A:  BCF    FF2.7
2F5C:  MOVLB  F
2F5E:  MOVLW  55
2F60:  MOVWF  FA7
2F62:  MOVLW  AA
2F64:  MOVWF  FA7
2F66:  BSF    FA6.1
2F68:  BTFSC  FA6.1
2F6A:  BRA    2F68
2F6C:  BCF    FA6.2
2F6E:  MOVF   00,W
2F70:  IORWF  FF2,F
2F72:  MOVLW  14
2F74:  MOVLB  1
2F76:  MOVWF  x24
2F78:  MOVLB  0
2F7A:  CALL   0A46
2F7E:  MOVLW  01
2F80:  MOVWF  FA9
2F82:  CLRF   FA8
2F84:  BCF    FA6.6
2F86:  BCF    FA6.7
2F88:  BSF    FA6.2
2F8A:  MOVF   FF2,W
2F8C:  MOVWF  00
2F8E:  BCF    FF2.7
2F90:  MOVLB  F
2F92:  MOVLW  55
2F94:  MOVWF  FA7
2F96:  MOVLW  AA
2F98:  MOVWF  FA7
2F9A:  BSF    FA6.1
2F9C:  BTFSC  FA6.1
2F9E:  BRA    2F9C
2FA0:  BCF    FA6.2
2FA2:  MOVF   00,W
2FA4:  IORWF  FF2,F
2FA6:  MOVLW  14
2FA8:  MOVLB  1
2FAA:  MOVWF  x24
2FAC:  MOVLB  0
2FAE:  CALL   0A46
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2FB2:  MOVLW  02
2FB4:  MOVWF  FA9
2FB6:  CLRF   FA8
2FB8:  BCF    FA6.6
2FBA:  BCF    FA6.7
2FBC:  BSF    FA6.2
2FBE:  MOVF   FF2,W
2FC0:  MOVWF  00
2FC2:  BCF    FF2.7
2FC4:  MOVLB  F
2FC6:  MOVLW  55
2FC8:  MOVWF  FA7
2FCA:  MOVLW  AA
2FCC:  MOVWF  FA7
2FCE:  BSF    FA6.1
2FD0:  BTFSC  FA6.1
2FD2:  BRA    2FD0
2FD4:  BCF    FA6.2
2FD6:  MOVF   00,W
2FD8:  IORWF  FF2,F
2FDA:  MOVLW  14
2FDC:  MOVLB  1
2FDE:  MOVWF  x24
2FE0:  MOVLB  0
2FE2:  CALL   0A46
2FE6:  MOVLW  03
2FE8:  MOVWF  FA9
2FEA:  CLRF   FA8
2FEC:  BCF    FA6.6
2FEE:  BCF    FA6.7
2FF0:  BSF    FA6.2
2FF2:  MOVF   FF2,W
2FF4:  MOVWF  00
2FF6:  BCF    FF2.7
2FF8:  MOVLB  F
2FFA:  MOVLW  55
2FFC:  MOVWF  FA7
2FFE:  MOVLW  AA
3000:  MOVWF  FA7
3002:  BSF    FA6.1
3004:  BTFSC  FA6.1
3006:  BRA    3004
3008:  BCF    FA6.2
300A:  MOVF   00,W
300C:  IORWF  FF2,F
300E:  MOVLW  14
3010:  MOVLB  1
3012:  MOVWF  x24
3014:  MOVLB  0
3016:  CALL   0A46
....................              reset_cpu();} 
301A:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
301C:  MOVF   48,W
301E:  SUBWF  44,W
3020:  BNZ   30DC
3022:  MOVF   49,W
3024:  SUBWF  45,W
3026:  BNZ   30DC
3028:  MOVF   4A,W
302A:  SUBWF  46,W
302C:  BNZ   30DC
302E:  MOVF   4B,W
3030:  SUBWF  47,W
3032:  BNZ   30DC
....................             {lcd_gotoxy(1,1); 
3034:  MOVLW  01
3036:  MOVLB  1
3038:  MOVWF  x1F
303A:  MOVWF  x20
303C:  MOVLB  0
303E:  CALL   0B58
....................             printf(lcd_putc,"                   "); 
3042:  MOVLW  E2
3044:  MOVWF  FF6
3046:  MOVLW  02
3048:  MOVWF  FF7
304A:  CALL   1056
....................             lcd_gotoxy(1,2); 
304E:  MOVLW  01
3050:  MOVLB  1
3052:  MOVWF  x1F
3054:  MOVLW  02
3056:  MOVWF  x20
3058:  MOVLB  0
305A:  CALL   0B58
....................             printf(lcd_putc,"     Contraseña    "); 
305E:  MOVLW  F6
3060:  MOVWF  FF6
3062:  MOVLW  02
3064:  MOVWF  FF7
3066:  CALL   1056
....................             lcd_gotoxy(1,3); 
306A:  MOVLW  01
306C:  MOVLB  1
306E:  MOVWF  x1F
3070:  MOVLW  03
3072:  MOVWF  x20
3074:  MOVLB  0
3076:  CALL   0B58
....................             printf(lcd_putc,"      Correcta     "); 
307A:  MOVLW  0A
307C:  MOVWF  FF6
307E:  MOVLW  03
3080:  MOVWF  FF7
3082:  CALL   1056
....................             lcd_gotoxy(1,4); 
3086:  MOVLW  01
3088:  MOVLB  1
308A:  MOVWF  x1F
308C:  MOVLW  04
308E:  MOVWF  x20
3090:  MOVLB  0
3092:  CALL   0B58
....................             printf(lcd_putc,"                   "); 
3096:  MOVLW  1E
3098:  MOVWF  FF6
309A:  MOVLW  03
309C:  MOVWF  FF7
309E:  CALL   1056
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
30A2:  MOVLW  02
30A4:  MOVLB  1
30A6:  MOVWF  x09
30A8:  MOVLW  FA
30AA:  MOVWF  x24
30AC:  MOVLB  0
30AE:  CALL   0A46
30B2:  MOVLB  1
30B4:  DECFSZ x09,F
30B6:  BRA    30A8
30B8:  MOVLW  32
30BA:  MOVWF  17
30BC:  MOVLW  0B
30BE:  MOVWF  1A
30C0:  MOVLW  0C
30C2:  MOVWF  x1E
30C4:  MOVLB  0
30C6:  CALL   0BCA
30CA:  BSF    F8A.7
30CC:  BCF    F93.7
30CE:  BCF    3F.0
30D0:  BCF    3F.1
30D2:  BSF    58.4
....................             t_latencia=0;flag_iniciodamper=1;} 
30D4:  CLRF   5C
30D6:  CLRF   5B
30D8:  BSF    3F.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
30DA:  BRA    3162
....................          {lcd_gotoxy(1,1); 
30DC:  MOVLW  01
30DE:  MOVLB  1
30E0:  MOVWF  x1F
30E2:  MOVWF  x20
30E4:  MOVLB  0
30E6:  CALL   0B58
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
30EA:  MOVLW  01
30EC:  MOVLB  1
30EE:  MOVWF  x1F
30F0:  MOVLW  02
30F2:  MOVWF  x20
30F4:  MOVLB  0
30F6:  CALL   0B58
....................             printf(lcd_putc,"     Contraseña    "); 
30FA:  MOVLW  32
30FC:  MOVWF  FF6
30FE:  MOVLW  03
3100:  MOVWF  FF7
3102:  CALL   1056
....................             lcd_gotoxy(1,3); 
3106:  MOVLW  01
3108:  MOVLB  1
310A:  MOVWF  x1F
310C:  MOVLW  03
310E:  MOVWF  x20
3110:  MOVLB  0
3112:  CALL   0B58
....................             printf(lcd_putc,"     Incorrecta    "); 
3116:  MOVLW  46
3118:  MOVWF  FF6
311A:  MOVLW  03
311C:  MOVWF  FF7
311E:  CALL   1056
....................             lcd_gotoxy(1,4); 
3122:  MOVLW  01
3124:  MOVLB  1
3126:  MOVWF  x1F
3128:  MOVLW  04
312A:  MOVWF  x20
312C:  MOVLB  0
312E:  CALL   0B58
....................             printf(lcd_putc,"                   "); 
3132:  MOVLW  5A
3134:  MOVWF  FF6
3136:  MOVLW  03
3138:  MOVWF  FF7
313A:  CALL   1056
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
313E:  MOVLW  02
3140:  MOVLB  1
3142:  MOVWF  x09
3144:  MOVLW  FA
3146:  MOVWF  x24
3148:  MOVLB  0
314A:  CALL   0A46
314E:  MOVLB  1
3150:  DECFSZ x09,F
3152:  BRA    3144
3154:  MOVLW  0B
3156:  MOVWF  1A
3158:  MOVLW  0C
315A:  MOVWF  x1E
315C:  MOVLB  0
315E:  CALL   0BCA
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
3162:  MOVF   1A,W
3164:  SUBLW  0B
3166:  BC    318A
3168:  MOVF   1A,W
316A:  SUBLW  0D
316C:  BNC   318A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
316E:  MOVLW  01
3170:  SUBWF  1A,W
3172:  MOVLB  1
3174:  MOVWF  x09
3176:  MOVWF  x1F
3178:  MOVLW  04
317A:  MOVWF  x20
317C:  MOVLB  0
317E:  CALL   0B58
....................             lcd_putc(t[1]); 
3182:  MOVFF  42,11E
3186:  CALL   0BCA
....................           } 
....................  
....................    } 
318A:  MOVLB  1
318C:  BRA    2D28
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
318E:  DECFSZ 17,W
3190:  BRA    33CC
....................       if(paso<0) 
3192:  BTFSC  40.7
3194:  BRA    3198
3196:  BRA    319A
....................         {paso=0;} 
3198:  CLRF   40
....................     
....................    lcd_gotoxy(1,1); 
319A:  MOVLW  01
319C:  MOVWF  x1F
319E:  MOVWF  x20
31A0:  MOVLB  0
31A2:  CALL   0B58
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
31A6:  MOVLW  6E
31A8:  MOVWF  FF6
31AA:  MOVLW  03
31AC:  MOVWF  FF7
31AE:  CALL   1056
....................     
....................       if(UP)//Si oprime hacia arriba 
31B2:  BSF    F93.3
31B4:  BTFSS  F81.3
31B6:  BRA    31D6
....................       {  if(Flanco == 0)  
31B8:  BTFSC  3E.4
31BA:  BRA    31D4
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
31BC:  DECF   1D,F
31BE:  DECF   1B,F
31C0:  MOVLW  01
31C2:  ADDWF  1B,W
31C4:  MOVWF  1C
31C6:  BSF    3E.4
31C8:  MOVLW  1E
31CA:  MOVLB  1
31CC:  MOVWF  x24
31CE:  MOVLB  0
31D0:  CALL   0A46
....................          else 
31D4:  BRA    31D8
....................             {Flanco = 0;} 
31D6:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31D8:  BSF    F93.2
31DA:  BTFSS  F81.2
31DC:  BRA    31FC
....................       {  if(Flanco2 == 0)  
31DE:  BTFSC  3E.6
31E0:  BRA    31FA
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
31E2:  INCF   1D,F
31E4:  INCF   1B,F
31E6:  MOVLW  01
31E8:  SUBWF  1B,W
31EA:  MOVWF  1C
31EC:  BSF    3E.6
31EE:  MOVLW  1E
31F0:  MOVLB  1
31F2:  MOVWF  x24
31F4:  MOVLB  0
31F6:  CALL   0A46
....................          else 
31FA:  BRA    31FE
....................             {Flanco2 = 0;} 
31FC:  BCF    3E.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
31FE:  MOVF   1D,W
3200:  SUBWF  1F,W
3202:  BC    3214
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
3204:  INCF   40,F
3206:  MOVFF  1D,1F
320A:  MOVLW  02
320C:  SUBWF  1F,W
320E:  MOVWF  1E
3210:  MOVLW  04
3212:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
3214:  MOVF   1E,W
3216:  SUBWF  1D,W
3218:  BC    322A
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
321A:  DECF   40,F
321C:  MOVFF  1D,1E
3220:  MOVLW  02
3222:  ADDWF  1E,W
3224:  MOVWF  1F
3226:  MOVLW  02
3228:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
322A:  MOVF   1D,W
322C:  SUBWF  18,W
322E:  BC    3242
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
3230:  MOVFF  19,1D
3234:  MOVLW  02
3236:  MOVWF  1B
3238:  CLRF   40
323A:  MOVFF  1D,1E
323E:  ADDWF  1E,W
3240:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
3242:  MOVF   19,W
3244:  SUBWF  1D,W
3246:  BC    325E
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
3248:  MOVFF  18,1D
324C:  MOVLW  04
324E:  MOVWF  1B
3250:  SUBWF  18,W
3252:  MOVWF  40
3254:  MOVFF  1D,1F
3258:  MOVLW  02
325A:  SUBWF  1F,W
325C:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
325E:  MOVLW  01
3260:  ADDWF  40,W
3262:  MOVLB  1
3264:  MOVWF  x09
3266:  MOVWF  x0A
3268:  MOVLW  02
326A:  MOVWF  x0B
326C:  MOVLB  0
326E:  CALL   11A8
....................         mensajes(2+paso,3); 
3272:  MOVLW  02
3274:  ADDWF  40,W
3276:  MOVLB  1
3278:  MOVWF  x09
327A:  MOVWF  x0A
327C:  MOVLW  03
327E:  MOVWF  x0B
3280:  MOVLB  0
3282:  CALL   11A8
....................         mensajes(3+paso,4); 
3286:  MOVLW  03
3288:  ADDWF  40,W
328A:  MOVLB  1
328C:  MOVWF  x09
328E:  MOVWF  x0A
3290:  MOVLW  04
3292:  MOVWF  x0B
3294:  MOVLB  0
3296:  CALL   11A8
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
329A:  MOVLW  01
329C:  MOVLB  1
329E:  MOVWF  x1F
32A0:  MOVFF  1B,120
32A4:  MOVLB  0
32A6:  CALL   0B58
....................         lcd_putc(t[0]); 
32AA:  MOVFF  41,11E
32AE:  CALL   0BCA
....................  
....................         if(Flecha==2) 
32B2:  MOVF   1B,W
32B4:  SUBLW  02
32B6:  BNZ   32E8
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
32B8:  MOVLW  01
32BA:  MOVLB  1
32BC:  MOVWF  x1F
32BE:  MOVLW  04
32C0:  MOVWF  x20
32C2:  MOVLB  0
32C4:  CALL   0B58
....................             lcd_putc(t[1]); 
32C8:  MOVFF  42,11E
32CC:  CALL   0BCA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
32D0:  MOVLW  01
32D2:  MOVLB  1
32D4:  MOVWF  x1F
32D6:  MOVLW  03
32D8:  MOVWF  x20
32DA:  MOVLB  0
32DC:  CALL   0B58
....................             lcd_putc(t[1]); 
32E0:  MOVFF  42,11E
32E4:  CALL   0BCA
....................           } 
....................          
....................         if(Flecha==4) 
32E8:  MOVF   1B,W
32EA:  SUBLW  04
32EC:  BNZ   331E
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
32EE:  MOVLW  01
32F0:  MOVLB  1
32F2:  MOVWF  x1F
32F4:  MOVLW  02
32F6:  MOVWF  x20
32F8:  MOVLB  0
32FA:  CALL   0B58
....................             lcd_putc(t[1]); 
32FE:  MOVFF  42,11E
3302:  CALL   0BCA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
3306:  MOVLW  01
3308:  MOVLB  1
330A:  MOVWF  x1F
330C:  MOVLW  03
330E:  MOVWF  x20
3310:  MOVLB  0
3312:  CALL   0B58
....................             lcd_putc(t[1]); 
3316:  MOVFF  42,11E
331A:  CALL   0BCA
....................           } 
....................          
....................         if(Flecha==3) 
331E:  MOVF   1B,W
3320:  SUBLW  03
3322:  BNZ   3354
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3324:  MOVLW  01
3326:  MOVLB  1
3328:  MOVWF  x1F
332A:  MOVLW  04
332C:  MOVWF  x20
332E:  MOVLB  0
3330:  CALL   0B58
....................             lcd_putc(t[1]); 
3334:  MOVFF  42,11E
3338:  CALL   0BCA
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
333C:  MOVLW  01
333E:  MOVLB  1
3340:  MOVWF  x1F
3342:  MOVLW  02
3344:  MOVWF  x20
3346:  MOVLB  0
3348:  CALL   0B58
....................             lcd_putc(t[1]); 
334C:  MOVFF  42,11E
3350:  CALL   0BCA
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
3354:  BSF    F93.0
3356:  BTFSS  F81.0
3358:  BRA    3396
....................       {  if(Flanco1 == 0)  
335A:  BTFSC  3E.5
335C:  BRA    3394
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
335E:  MOVFF  1D,17
3362:  MOVLW  03
3364:  MOVWF  1B
3366:  MOVLW  02
3368:  MOVLB  1
336A:  MOVWF  x09
336C:  MOVLW  FA
336E:  MOVWF  x24
3370:  MOVLB  0
3372:  CALL   0A46
3376:  MOVLB  1
3378:  DECFSZ x09,F
337A:  BRA    336C
337C:  MOVLW  0C
337E:  MOVWF  x1E
3380:  MOVLB  0
3382:  CALL   0BCA
....................             if(Menu==6) 
3386:  MOVF   17,W
3388:  SUBLW  06
338A:  BNZ   3394
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
338C:  CLRF   44
338E:  CLRF   45
3390:  CLRF   46
3392:  CLRF   47
....................          else 
3394:  BRA    3398
....................             {Flanco1 = 0;}   
3396:  BCF    3E.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
3398:  BSF    F93.1
339A:  BTFSS  F81.1
339C:  BRA    33C8
....................       {  if(Flanco3 == 0)  
339E:  BTFSC  3E.7
33A0:  BRA    33C6
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
33A2:  MOVLW  02
33A4:  MOVLB  1
33A6:  MOVWF  x09
33A8:  MOVLW  FA
33AA:  MOVWF  x24
33AC:  MOVLB  0
33AE:  CALL   0A46
33B2:  MOVLB  1
33B4:  DECFSZ x09,F
33B6:  BRA    33A8
33B8:  MOVLW  14
33BA:  MOVWF  17
33BC:  MOVLW  0C
33BE:  MOVWF  x1E
33C0:  MOVLB  0
33C2:  CALL   0BCA
....................          else 
33C6:  BRA    33CA
....................             {Flanco3 = 0;}                
33C8:  BCF    3E.7
33CA:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
33CC:  MOVF   17,W
33CE:  SUBLW  02
33D0:  BTFSS  FD8.2
33D2:  BRA    3520
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
33D4:  BTG    3E.2
33D6:  BSF    3E.5
33D8:  MOVLW  01
33DA:  MOVWF  17
33DC:  CLRF   40
....................                        
....................             if(estadoalarma==1) 
33DE:  BTFSS  3E.2
33E0:  BRA    3452
....................             {estadoalarma=1; 
33E2:  BSF    3E.2
....................                lcd_gotoxy(1,1); 
33E4:  MOVLW  01
33E6:  MOVWF  x1F
33E8:  MOVWF  x20
33EA:  MOVLB  0
33EC:  CALL   0B58
....................                printf(lcd_putc,"                    "); 
33F0:  MOVLW  84
33F2:  MOVWF  FF6
33F4:  MOVLW  03
33F6:  MOVWF  FF7
33F8:  CALL   1056
....................                lcd_gotoxy(1,2); 
33FC:  MOVLW  01
33FE:  MOVLB  1
3400:  MOVWF  x1F
3402:  MOVLW  02
3404:  MOVWF  x20
3406:  MOVLB  0
3408:  CALL   0B58
....................                printf(lcd_putc,"        Activo      "); 
340C:  MOVLW  9A
340E:  MOVWF  FF6
3410:  MOVLW  03
3412:  MOVWF  FF7
3414:  CALL   1056
....................                lcd_gotoxy(1,3); 
3418:  MOVLW  01
341A:  MOVLB  1
341C:  MOVWF  x1F
341E:  MOVLW  03
3420:  MOVWF  x20
3422:  MOVLB  0
3424:  CALL   0B58
....................                printf(lcd_putc,"        Alarma      "); 
3428:  MOVLW  B0
342A:  MOVWF  FF6
342C:  MOVLW  03
342E:  MOVWF  FF7
3430:  CALL   1056
....................                lcd_gotoxy(1,4); 
3434:  MOVLW  01
3436:  MOVLB  1
3438:  MOVWF  x1F
343A:  MOVLW  04
343C:  MOVWF  x20
343E:  MOVLB  0
3440:  CALL   0B58
....................                printf(lcd_putc,"                    ");} 
3444:  MOVLW  C6
3446:  MOVWF  FF6
3448:  MOVLW  03
344A:  MOVWF  FF7
344C:  CALL   1056
3450:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
3452:  BTFSC  3E.2
3454:  BRA    34C6
....................             {estadoalarma=0; 
3456:  BCF    3E.2
....................                lcd_gotoxy(1,1); 
3458:  MOVLW  01
345A:  MOVWF  x1F
345C:  MOVWF  x20
345E:  MOVLB  0
3460:  CALL   0B58
....................                printf(lcd_putc,"                    "); 
3464:  MOVLW  DC
3466:  MOVWF  FF6
3468:  MOVLW  03
346A:  MOVWF  FF7
346C:  CALL   1056
....................                lcd_gotoxy(1,2); 
3470:  MOVLW  01
3472:  MOVLB  1
3474:  MOVWF  x1F
3476:  MOVLW  02
3478:  MOVWF  x20
347A:  MOVLB  0
347C:  CALL   0B58
....................                printf(lcd_putc,"      Desactivo     "); 
3480:  MOVLW  F2
3482:  MOVWF  FF6
3484:  MOVLW  03
3486:  MOVWF  FF7
3488:  CALL   1056
....................                lcd_gotoxy(1,3); 
348C:  MOVLW  01
348E:  MOVLB  1
3490:  MOVWF  x1F
3492:  MOVLW  03
3494:  MOVWF  x20
3496:  MOVLB  0
3498:  CALL   0B58
....................                printf(lcd_putc,"       Alarma       "); 
349C:  MOVLW  08
349E:  MOVWF  FF6
34A0:  MOVLW  04
34A2:  MOVWF  FF7
34A4:  CALL   1056
....................                lcd_gotoxy(1,4); 
34A8:  MOVLW  01
34AA:  MOVLB  1
34AC:  MOVWF  x1F
34AE:  MOVLW  04
34B0:  MOVWF  x20
34B2:  MOVLB  0
34B4:  CALL   0B58
....................                printf(lcd_putc,"                    ");} 
34B8:  MOVLW  1E
34BA:  MOVWF  FF6
34BC:  MOVLW  04
34BE:  MOVWF  FF7
34C0:  CALL   1056
34C4:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
34C6:  MOVLW  00
34C8:  BTFSC  3E.2
34CA:  MOVLW  01
34CC:  MOVWF  x09
34CE:  MOVLW  05
34D0:  MOVWF  FA9
34D2:  MOVFF  109,FA8
34D6:  BCF    FA6.6
34D8:  BCF    FA6.7
34DA:  BSF    FA6.2
34DC:  MOVF   FF2,W
34DE:  MOVWF  00
34E0:  BCF    FF2.7
34E2:  MOVLB  F
34E4:  MOVLW  55
34E6:  MOVWF  FA7
34E8:  MOVLW  AA
34EA:  MOVWF  FA7
34EC:  BSF    FA6.1
34EE:  BTFSC  FA6.1
34F0:  BRA    34EE
34F2:  BCF    FA6.2
34F4:  MOVF   00,W
34F6:  IORWF  FF2,F
34F8:  MOVLW  04
34FA:  MOVLB  1
34FC:  MOVWF  x09
34FE:  MOVLW  FA
3500:  MOVWF  x24
3502:  MOVLB  0
3504:  CALL   0A46
3508:  MOVLB  1
350A:  DECFSZ x09,F
350C:  BRA    34FE
350E:  MOVLW  02
3510:  MOVWF  1B
3512:  MOVWF  1D
3514:  MOVLW  0C
3516:  MOVWF  x1E
3518:  MOVLB  0
351A:  CALL   0BCA
351E:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
3520:  MOVF   17,W
3522:  SUBLW  03
3524:  BTFSS  FD8.2
3526:  BRA    37C0
....................    lcd_gotoxy(1,1); 
3528:  MOVLW  01
352A:  MOVWF  x1F
352C:  MOVWF  x20
352E:  MOVLB  0
3530:  CALL   0B58
....................    printf(lcd_putc,"  Duracion Actual   ");                           
3534:  MOVLW  34
3536:  MOVWF  FF6
3538:  MOVLW  04
353A:  MOVWF  FF7
353C:  CALL   1056
....................    lcd_gotoxy(1,2);                                                   
3540:  MOVLW  01
3542:  MOVLB  1
3544:  MOVWF  x1F
3546:  MOVLW  02
3548:  MOVWF  x20
354A:  MOVLB  0
354C:  CALL   0B58
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
3550:  MOVLW  4A
3552:  MOVWF  FF6
3554:  MOVLW  04
3556:  MOVWF  FF7
3558:  MOVLW  09
355A:  MOVLB  1
355C:  MOVWF  x11
355E:  MOVLB  0
3560:  CALL   1076
3564:  MOVFF  35,109
3568:  MOVLW  01
356A:  MOVLB  1
356C:  MOVWF  x0A
356E:  MOVLB  0
3570:  CALL   12F8
3574:  MOVLW  3A
3576:  MOVLB  1
3578:  MOVWF  x1E
357A:  MOVLB  0
357C:  CALL   0BCA
3580:  MOVFF  34,109
3584:  MOVLW  01
3586:  MOVLB  1
3588:  MOVWF  x0A
358A:  MOVLB  0
358C:  CALL   12F8
3590:  MOVLW  3A
3592:  MOVLB  1
3594:  MOVWF  x1E
3596:  MOVLB  0
3598:  CALL   0BCA
359C:  MOVFF  33,109
35A0:  MOVLW  01
35A2:  MOVLB  1
35A4:  MOVWF  x0A
35A6:  MOVLB  0
35A8:  CALL   12F8
35AC:  MOVLW  20
35AE:  MOVLB  1
35B0:  MOVWF  x1E
35B2:  MOVLB  0
35B4:  CALL   0BCA
....................     
....................    if(flag_filtro==1) 
35B8:  BTFSS  3F.2
35BA:  BRA    35DA
....................    { 
....................       lcd_gotoxy(1,3);                                                  
35BC:  MOVLW  01
35BE:  MOVLB  1
35C0:  MOVWF  x1F
35C2:  MOVLW  03
35C4:  MOVWF  x20
35C6:  MOVLB  0
35C8:  CALL   0B58
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
35CC:  MOVLW  64
35CE:  MOVWF  FF6
35D0:  MOVLW  04
35D2:  MOVWF  FF7
35D4:  CALL   1056
....................    } 
....................    else 
35D8:  BRA    35F6
....................    { 
....................       lcd_gotoxy(1,3);                                                  
35DA:  MOVLW  01
35DC:  MOVLB  1
35DE:  MOVWF  x1F
35E0:  MOVLW  03
35E2:  MOVWF  x20
35E4:  MOVLB  0
35E6:  CALL   0B58
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
35EA:  MOVLW  7A
35EC:  MOVWF  FF6
35EE:  MOVLW  04
35F0:  MOVWF  FF7
35F2:  CALL   1056
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
35F6:  MOVLW  01
35F8:  MOVLB  1
35FA:  MOVWF  x1F
35FC:  MOVLW  04
35FE:  MOVWF  x20
3600:  MOVLB  0
3602:  CALL   0B58
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
3606:  MOVLW  90
3608:  MOVWF  FF6
360A:  MOVLW  04
360C:  MOVWF  FF7
360E:  CALL   1056
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
3612:  BSF    F93.3
3614:  BTFSS  F81.3
3616:  BRA    371A
....................       {  delay_ms(200); 
3618:  MOVLW  C8
361A:  MOVLB  1
361C:  MOVWF  x24
361E:  MOVLB  0
3620:  CALL   0A46
....................          printf(lcd_putc,"\f"); 
3624:  MOVLW  0C
3626:  MOVLB  1
3628:  MOVWF  x1E
362A:  MOVLB  0
362C:  CALL   0BCA
....................          lcd_gotoxy(1,2); 
3630:  MOVLW  01
3632:  MOVLB  1
3634:  MOVWF  x1F
3636:  MOVLW  02
3638:  MOVWF  x20
363A:  MOVLB  0
363C:  CALL   0B58
....................          printf(lcd_putc," Reset de tiempo "); 
3640:  MOVLW  A6
3642:  MOVWF  FF6
3644:  MOVLW  04
3646:  MOVWF  FF7
3648:  CALL   1056
....................          lcd_gotoxy(1,3); 
364C:  MOVLW  01
364E:  MOVLB  1
3650:  MOVWF  x1F
3652:  MOVLW  03
3654:  MOVWF  x20
3656:  MOVLB  0
3658:  CALL   0B58
....................          printf(lcd_putc,"     Exitoso     "); 
365C:  MOVLW  B8
365E:  MOVWF  FF6
3660:  MOVLW  04
3662:  MOVWF  FF7
3664:  CALL   1056
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
3668:  MOVLW  46
366A:  MOVWF  FA9
366C:  CLRF   FA8
366E:  BCF    FA6.6
3670:  BCF    FA6.7
3672:  BSF    FA6.2
3674:  MOVF   FF2,W
3676:  MOVWF  00
3678:  BCF    FF2.7
367A:  MOVLB  F
367C:  MOVLW  55
367E:  MOVWF  FA7
3680:  MOVLW  AA
3682:  MOVWF  FA7
3684:  BSF    FA6.1
3686:  BTFSC  FA6.1
3688:  BRA    3686
368A:  BCF    FA6.2
368C:  MOVF   00,W
368E:  IORWF  FF2,F
3690:  MOVLW  47
3692:  MOVWF  FA9
3694:  CLRF   FA8
3696:  BCF    FA6.6
3698:  BCF    FA6.7
369A:  BSF    FA6.2
369C:  MOVF   FF2,W
369E:  MOVWF  00
36A0:  BCF    FF2.7
36A2:  MOVLW  55
36A4:  MOVWF  FA7
36A6:  MOVLW  AA
36A8:  MOVWF  FA7
36AA:  BSF    FA6.1
36AC:  BTFSC  FA6.1
36AE:  BRA    36AC
36B0:  BCF    FA6.2
36B2:  MOVF   00,W
36B4:  IORWF  FF2,F
36B6:  MOVLW  48
36B8:  MOVWF  FA9
36BA:  CLRF   FA8
36BC:  BCF    FA6.6
36BE:  BCF    FA6.7
36C0:  BSF    FA6.2
36C2:  MOVF   FF2,W
36C4:  MOVWF  00
36C6:  BCF    FF2.7
36C8:  MOVLW  55
36CA:  MOVWF  FA7
36CC:  MOVLW  AA
36CE:  MOVWF  FA7
36D0:  BSF    FA6.1
36D2:  BTFSC  FA6.1
36D4:  BRA    36D2
36D6:  BCF    FA6.2
36D8:  MOVF   00,W
36DA:  IORWF  FF2,F
....................          delay_ms(700); 
36DC:  MOVLW  04
36DE:  MOVLB  1
36E0:  MOVWF  x09
36E2:  MOVLW  AF
36E4:  MOVWF  x24
36E6:  MOVLB  0
36E8:  CALL   0A46
36EC:  MOVLB  1
36EE:  DECFSZ x09,F
36F0:  BRA    36E2
....................          segundos=0;minutos=0;horas=0; 
36F2:  CLRF   33
36F4:  CLRF   34
36F6:  CLRF   35
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36F8:  MOVLW  1E
36FA:  MOVWF  x24
36FC:  MOVLB  0
36FE:  CALL   0A46
3702:  MOVLW  01
3704:  MOVWF  17
3706:  CLRF   40
3708:  MOVLW  02
370A:  MOVWF  1B
370C:  MOVWF  1D
370E:  MOVLW  0C
3710:  MOVLB  1
3712:  MOVWF  x1E
3714:  MOVLB  0
3716:  CALL   0BCA
....................       } 
....................        
....................       if(RIGHT) 
371A:  BSF    F93.0
371C:  BTFSS  F81.0
371E:  BRA    3782
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
3720:  BTG    3F.2
3722:  MOVLW  00
3724:  BTFSC  3F.2
3726:  MOVLW  01
3728:  MOVLB  1
372A:  MOVWF  x09
372C:  MOVLW  49
372E:  MOVWF  FA9
3730:  MOVFF  109,FA8
3734:  BCF    FA6.6
3736:  BCF    FA6.7
3738:  BSF    FA6.2
373A:  MOVF   FF2,W
373C:  MOVWF  00
373E:  BCF    FF2.7
3740:  MOVLB  F
3742:  MOVLW  55
3744:  MOVWF  FA7
3746:  MOVLW  AA
3748:  MOVWF  FA7
374A:  BSF    FA6.1
374C:  BTFSC  FA6.1
374E:  BRA    374C
3750:  BCF    FA6.2
3752:  MOVF   00,W
3754:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3756:  MOVLW  02
3758:  MOVLB  1
375A:  MOVWF  x09
375C:  MOVLW  FA
375E:  MOVWF  x24
3760:  MOVLB  0
3762:  CALL   0A46
3766:  MOVLB  1
3768:  DECFSZ x09,F
376A:  BRA    375C
376C:  MOVLW  01
376E:  MOVWF  17
3770:  CLRF   40
3772:  MOVLW  02
3774:  MOVWF  1B
3776:  MOVWF  1D
3778:  MOVLW  0C
377A:  MOVWF  x1E
377C:  MOVLB  0
377E:  CALL   0BCA
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
3782:  BSF    F93.1
3784:  BTFSS  F81.1
3786:  BRA    37BC
....................       {  if(Flanco3 == 0)  
3788:  BTFSC  3E.7
378A:  BRA    37BA
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
378C:  BSF    3E.7
378E:  MOVLW  02
3790:  MOVLB  1
3792:  MOVWF  x09
3794:  MOVLW  FA
3796:  MOVWF  x24
3798:  MOVLB  0
379A:  CALL   0A46
379E:  MOVLB  1
37A0:  DECFSZ x09,F
37A2:  BRA    3794
37A4:  MOVLW  01
37A6:  MOVWF  17
37A8:  CLRF   40
37AA:  MOVLW  02
37AC:  MOVWF  1B
37AE:  MOVWF  1D
37B0:  MOVLW  0C
37B2:  MOVWF  x1E
37B4:  MOVLB  0
37B6:  CALL   0BCA
....................          else 
37BA:  BRA    37BE
....................             {Flanco3 = 0;}       
37BC:  BCF    3E.7
37BE:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
37C0:  MOVF   17,W
37C2:  SUBLW  04
37C4:  BTFSS  FD8.2
37C6:  BRA    3ADC
....................    lcd_gotoxy(1,2); 
37C8:  MOVLW  01
37CA:  MOVWF  x1F
37CC:  MOVLW  02
37CE:  MOVWF  x20
37D0:  MOVLB  0
37D2:  CALL   0B58
....................    printf(lcd_putc,"      Setpoint      "); 
37D6:  MOVLW  CA
37D8:  MOVWF  FF6
37DA:  MOVLW  04
37DC:  MOVWF  FF7
37DE:  CALL   1056
....................    lcd_gotoxy(1,3); 
37E2:  MOVLW  01
37E4:  MOVLB  1
37E6:  MOVWF  x1F
37E8:  MOVLW  03
37EA:  MOVWF  x20
37EC:  MOVLB  0
37EE:  CALL   0B58
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
37F2:  MOVLW  E0
37F4:  MOVWF  FF6
37F6:  MOVLW  04
37F8:  MOVWF  FF7
37FA:  MOVLW  07
37FC:  MOVLB  1
37FE:  MOVWF  x11
3800:  MOVLB  0
3802:  CALL   1076
3806:  MOVLW  89
3808:  MOVWF  FE9
380A:  MOVFF  4F,114
380E:  MOVFF  4E,113
3812:  MOVFF  4D,112
3816:  MOVFF  4C,111
381A:  MOVLW  02
381C:  MOVLB  1
381E:  MOVWF  x15
3820:  MOVLB  0
3822:  CALL   152E
3826:  MOVLW  20
3828:  MOVLB  1
382A:  MOVWF  x1E
382C:  MOVLB  0
382E:  CALL   0BCA
3832:  MOVLW  20
3834:  MOVLB  1
3836:  MOVWF  x1E
3838:  MOVLB  0
383A:  CALL   0BCA
383E:  MOVLW  20
3840:  MOVLB  1
3842:  MOVWF  x1E
3844:  MOVLB  0
3846:  CALL   0BCA
....................     
....................    if(setpoint>2.0) 
384A:  MOVLB  1
384C:  CLRF   x26
384E:  CLRF   x25
3850:  CLRF   x24
3852:  MOVLW  80
3854:  MOVWF  x23
3856:  MOVFF  4F,12A
385A:  MOVFF  4E,129
385E:  MOVFF  4D,128
3862:  MOVFF  4C,127
3866:  MOVLB  0
3868:  CALL   16E0
386C:  BNC   3878
....................    {setpoint=2.0;} 
386E:  CLRF   4F
3870:  CLRF   4E
3872:  CLRF   4D
3874:  MOVLW  80
3876:  MOVWF  4C
....................     
....................    if(setpoint<0.5) 
3878:  MOVFF  4F,126
387C:  MOVFF  4E,125
3880:  MOVFF  4D,124
3884:  MOVFF  4C,123
3888:  MOVLB  1
388A:  CLRF   x2A
388C:  CLRF   x29
388E:  CLRF   x28
3890:  MOVLW  7E
3892:  MOVWF  x27
3894:  MOVLB  0
3896:  CALL   16E0
389A:  BNC   38A6
....................    {setpoint=0.5;} 
389C:  CLRF   4F
389E:  CLRF   4E
38A0:  CLRF   4D
38A2:  MOVLW  7E
38A4:  MOVWF  4C
....................     
....................       if(UP)//Si oprime hacia arriba 
38A6:  BSF    F93.3
38A8:  BTFSS  F81.3
38AA:  BRA    38FA
....................       {  if(Flanco == 0)  
38AC:  BTFSC  3E.4
38AE:  BRA    38F8
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
38B0:  BCF    FD8.1
38B2:  MOVFF  4F,12A
38B6:  MOVFF  4E,129
38BA:  MOVFF  4D,128
38BE:  MOVFF  4C,127
38C2:  MOVLW  CD
38C4:  MOVLB  1
38C6:  MOVWF  x2E
38C8:  MOVLW  CC
38CA:  MOVWF  x2D
38CC:  MOVLW  4C
38CE:  MOVWF  x2C
38D0:  MOVLW  7B
38D2:  MOVWF  x2B
38D4:  MOVLB  0
38D6:  CALL   0DCA
38DA:  MOVFF  03,4F
38DE:  MOVFF  02,4E
38E2:  MOVFF  01,4D
38E6:  MOVFF  00,4C
38EA:  BSF    3E.4
38EC:  MOVLW  1E
38EE:  MOVLB  1
38F0:  MOVWF  x24
38F2:  MOVLB  0
38F4:  CALL   0A46
....................          else 
38F8:  BRA    38FC
....................             {Flanco = 0;} 
38FA:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
38FC:  BSF    F93.2
38FE:  BTFSS  F81.2
3900:  BRA    3950
....................       {  if(Flanco2 == 0)  
3902:  BTFSC  3E.6
3904:  BRA    394E
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
3906:  BSF    FD8.1
3908:  MOVFF  4F,12A
390C:  MOVFF  4E,129
3910:  MOVFF  4D,128
3914:  MOVFF  4C,127
3918:  MOVLW  CD
391A:  MOVLB  1
391C:  MOVWF  x2E
391E:  MOVLW  CC
3920:  MOVWF  x2D
3922:  MOVLW  4C
3924:  MOVWF  x2C
3926:  MOVLW  7B
3928:  MOVWF  x2B
392A:  MOVLB  0
392C:  CALL   0DCA
3930:  MOVFF  03,4F
3934:  MOVFF  02,4E
3938:  MOVFF  01,4D
393C:  MOVFF  00,4C
3940:  BSF    3E.6
3942:  MOVLW  1E
3944:  MOVLB  1
3946:  MOVWF  x24
3948:  MOVLB  0
394A:  CALL   0A46
....................          else 
394E:  BRA    3952
....................             {Flanco2 = 0;} 
3950:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3952:  BSF    F93.0
3954:  BTFSS  F81.0
3956:  BRA    3A9A
....................       {  if(Flanco1 == 0)  
3958:  BTFSC  3E.5
395A:  BRA    3A98
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
395C:  MOVLW  01
395E:  MOVWF  17
3960:  CLRF   40
3962:  MOVLW  02
3964:  MOVWF  1B
3966:  MOVWF  1D
3968:  MOVLW  0B
396A:  MOVWF  1A
396C:  MOVLW  02
396E:  MOVLB  1
3970:  MOVWF  x09
3972:  MOVLW  FA
3974:  MOVWF  x24
3976:  MOVLB  0
3978:  CALL   0A46
397C:  MOVLB  1
397E:  DECFSZ x09,F
3980:  BRA    3972
3982:  MOVLW  0C
3984:  MOVWF  x1E
3986:  MOVLB  0
3988:  CALL   0BCA
....................             Temporal=setpoint; 
398C:  MOVFF  4F,B4
3990:  MOVFF  4E,B3
3994:  MOVFF  4D,B2
3998:  MOVFF  4C,B1
....................             Entero=(int)setpoint; 
399C:  MOVFF  4F,10C
39A0:  MOVFF  4E,10B
39A4:  MOVFF  4D,10A
39A8:  MOVFF  4C,109
39AC:  CALL   175A
39B0:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
39B4:  MOVLB  1
39B6:  CLRF   x13
39B8:  MOVFF  24,112
39BC:  MOVLB  0
39BE:  CALL   0C36
39C2:  BSF    FD8.1
39C4:  MOVFF  B4,12A
39C8:  MOVFF  B3,129
39CC:  MOVFF  B2,128
39D0:  MOVFF  B1,127
39D4:  MOVFF  03,12E
39D8:  MOVFF  02,12D
39DC:  MOVFF  01,12C
39E0:  MOVFF  00,12B
39E4:  CALL   0DCA
39E8:  MOVFF  03,B4
39EC:  MOVFF  02,B3
39F0:  MOVFF  01,B2
39F4:  MOVFF  00,B1
....................             Temporal2=Temporal*100.0; 
39F8:  MOVFF  B4,126
39FC:  MOVFF  B3,125
3A00:  MOVFF  B2,124
3A04:  MOVFF  B1,123
3A08:  MOVLB  1
3A0A:  CLRF   x2A
3A0C:  CLRF   x29
3A0E:  MOVLW  48
3A10:  MOVWF  x28
3A12:  MOVLW  85
3A14:  MOVWF  x27
3A16:  MOVLB  0
3A18:  CALL   1374
3A1C:  MOVFF  03,B8
3A20:  MOVFF  02,B7
3A24:  MOVFF  01,B6
3A28:  MOVFF  00,B5
....................             Decimal2=(int8)Temporal2; 
3A2C:  MOVFF  B8,10C
3A30:  MOVFF  B7,10B
3A34:  MOVFF  B6,10A
3A38:  MOVFF  B5,109
3A3C:  CALL   175A
3A40:  MOVFF  01,26
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
3A44:  MOVLW  28
3A46:  MOVWF  FA9
3A48:  MOVFF  24,FA8
3A4C:  BCF    FA6.6
3A4E:  BCF    FA6.7
3A50:  BSF    FA6.2
3A52:  MOVF   FF2,W
3A54:  MOVWF  00
3A56:  BCF    FF2.7
3A58:  MOVLB  F
3A5A:  MOVLW  55
3A5C:  MOVWF  FA7
3A5E:  MOVLW  AA
3A60:  MOVWF  FA7
3A62:  BSF    FA6.1
3A64:  BTFSC  FA6.1
3A66:  BRA    3A64
3A68:  BCF    FA6.2
3A6A:  MOVF   00,W
3A6C:  IORWF  FF2,F
3A6E:  MOVLW  29
3A70:  MOVWF  FA9
3A72:  MOVFF  26,FA8
3A76:  BCF    FA6.6
3A78:  BCF    FA6.7
3A7A:  BSF    FA6.2
3A7C:  MOVF   FF2,W
3A7E:  MOVWF  00
3A80:  BCF    FF2.7
3A82:  MOVLW  55
3A84:  MOVWF  FA7
3A86:  MOVLW  AA
3A88:  MOVWF  FA7
3A8A:  BSF    FA6.1
3A8C:  BTFSC  FA6.1
3A8E:  BRA    3A8C
3A90:  BCF    FA6.2
3A92:  MOVF   00,W
3A94:  IORWF  FF2,F
3A96:  MOVLB  0
....................             }} 
....................          else 
3A98:  BRA    3A9C
....................             {Flanco1 = 0;}    
3A9A:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3A9C:  BSF    F93.1
3A9E:  BTFSS  F81.1
3AA0:  BRA    3AD8
....................       {  if(Flanco3 == 0)  
3AA2:  BTFSC  3E.7
3AA4:  BRA    3AD6
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3AA6:  MOVLW  01
3AA8:  MOVWF  17
3AAA:  CLRF   40
3AAC:  MOVLW  02
3AAE:  MOVWF  1B
3AB0:  MOVWF  1D
3AB2:  MOVLW  0B
3AB4:  MOVWF  1A
3AB6:  MOVLW  02
3AB8:  MOVLB  1
3ABA:  MOVWF  x09
3ABC:  MOVLW  FA
3ABE:  MOVWF  x24
3AC0:  MOVLB  0
3AC2:  CALL   0A46
3AC6:  MOVLB  1
3AC8:  DECFSZ x09,F
3ACA:  BRA    3ABC
3ACC:  MOVLW  0C
3ACE:  MOVWF  x1E
3AD0:  MOVLB  0
3AD2:  CALL   0BCA
....................          else 
3AD6:  BRA    3ADA
....................             {Flanco3 = 0;}     
3AD8:  BCF    3E.7
3ADA:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
3ADC:  MOVF   17,W
3ADE:  SUBLW  05
3AE0:  BTFSS  FD8.2
3AE2:  BRA    3E54
....................    lcd_gotoxy(1,1); 
3AE4:  MOVLW  01
3AE6:  MOVWF  x1F
3AE8:  MOVWF  x20
3AEA:  MOVLB  0
3AEC:  CALL   0B58
....................    printf(lcd_putc,"      Ingrese       "); 
3AF0:  MOVLW  F0
3AF2:  MOVWF  FF6
3AF4:  MOVLW  04
3AF6:  MOVWF  FF7
3AF8:  CALL   1056
....................    lcd_gotoxy(1,2); 
3AFC:  MOVLW  01
3AFE:  MOVLB  1
3B00:  MOVWF  x1F
3B02:  MOVLW  02
3B04:  MOVWF  x20
3B06:  MOVLB  0
3B08:  CALL   0B58
....................    printf(lcd_putc," Contraseña Actual  "); 
3B0C:  MOVLW  06
3B0E:  MOVWF  FF6
3B10:  MOVLW  05
3B12:  MOVWF  FF7
3B14:  CALL   1056
....................    lcd_gotoxy(1,3); 
3B18:  MOVLW  01
3B1A:  MOVLB  1
3B1C:  MOVWF  x1F
3B1E:  MOVLW  03
3B20:  MOVWF  x20
3B22:  MOVLB  0
3B24:  CALL   0B58
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3B28:  MOVLW  1C
3B2A:  MOVWF  FF6
3B2C:  MOVLW  05
3B2E:  MOVWF  FF7
3B30:  MOVLW  0A
3B32:  MOVLB  1
3B34:  MOVWF  x11
3B36:  MOVLB  0
3B38:  CALL   1076
3B3C:  MOVFF  44,109
3B40:  MOVLW  1F
3B42:  MOVLB  1
3B44:  MOVWF  x0A
3B46:  MOVLB  0
3B48:  CALL   10CA
3B4C:  MOVFF  45,109
3B50:  MOVLW  1F
3B52:  MOVLB  1
3B54:  MOVWF  x0A
3B56:  MOVLB  0
3B58:  CALL   10CA
3B5C:  MOVFF  46,109
3B60:  MOVLW  1F
3B62:  MOVLB  1
3B64:  MOVWF  x0A
3B66:  MOVLB  0
3B68:  CALL   10CA
3B6C:  MOVFF  47,109
3B70:  MOVLW  1F
3B72:  MOVLB  1
3B74:  MOVWF  x0A
3B76:  MOVLB  0
3B78:  CALL   10CA
3B7C:  MOVLW  20
3B7E:  MOVLB  1
3B80:  MOVWF  x1E
3B82:  MOVLB  0
3B84:  CALL   0BCA
3B88:  MOVLW  20
3B8A:  MOVLB  1
3B8C:  MOVWF  x1E
3B8E:  MOVLB  0
3B90:  CALL   0BCA
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3B94:  BSF    F93.3
3B96:  BTFSS  F81.3
3B98:  BRA    3BC0
....................       {  if(Flanco == 0)  
3B9A:  BTFSC  3E.4
3B9C:  BRA    3BBE
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3B9E:  MOVLW  0B
3BA0:  SUBWF  1A,W
3BA2:  CLRF   03
3BA4:  ADDLW  44
3BA6:  MOVWF  FE9
3BA8:  MOVLW  00
3BAA:  ADDWFC 03,W
3BAC:  MOVWF  FEA
3BAE:  INCF   FEF,F
3BB0:  BSF    3E.4
3BB2:  MOVLW  1E
3BB4:  MOVLB  1
3BB6:  MOVWF  x24
3BB8:  MOVLB  0
3BBA:  CALL   0A46
....................          else 
3BBE:  BRA    3BC2
....................             {Flanco = 0;} 
3BC0:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3BC2:  BSF    F93.2
3BC4:  BTFSS  F81.2
3BC6:  BRA    3BEE
....................       {  if(Flanco2 == 0)  
3BC8:  BTFSC  3E.6
3BCA:  BRA    3BEC
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3BCC:  MOVLW  0B
3BCE:  SUBWF  1A,W
3BD0:  CLRF   03
3BD2:  ADDLW  44
3BD4:  MOVWF  FE9
3BD6:  MOVLW  00
3BD8:  ADDWFC 03,W
3BDA:  MOVWF  FEA
3BDC:  DECF   FEF,F
3BDE:  BSF    3E.6
3BE0:  MOVLW  1E
3BE2:  MOVLB  1
3BE4:  MOVWF  x24
3BE6:  MOVLB  0
3BE8:  CALL   0A46
....................          else 
3BEC:  BRA    3BF0
....................             {Flanco2 = 0;} 
3BEE:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3BF0:  BSF    F93.0
3BF2:  BTFSS  F81.0
3BF4:  BRA    3C20
....................       {  if(Flanco1 == 0)  
3BF6:  BTFSC  3E.5
3BF8:  BRA    3C1E
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
3BFA:  BSF    3E.5
3BFC:  INCF   1A,F
3BFE:  MOVLW  02
3C00:  MOVLB  1
3C02:  MOVWF  x09
3C04:  MOVLW  FA
3C06:  MOVWF  x24
3C08:  MOVLB  0
3C0A:  CALL   0A46
3C0E:  MOVLB  1
3C10:  DECFSZ x09,F
3C12:  BRA    3C04
3C14:  MOVLW  0C
3C16:  MOVWF  x1E
3C18:  MOVLB  0
3C1A:  CALL   0BCA
....................          else 
3C1E:  BRA    3C22
....................             {Flanco1 = 0;}    
3C20:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3C22:  BSF    F93.1
3C24:  BTFSS  F81.1
3C26:  BRA    3C52
....................       {  if(Flanco3 == 0)  
3C28:  BTFSC  3E.7
3C2A:  BRA    3C50
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
3C2C:  BSF    3E.7
3C2E:  DECF   1A,F
3C30:  MOVLW  02
3C32:  MOVLB  1
3C34:  MOVWF  x09
3C36:  MOVLW  FA
3C38:  MOVWF  x24
3C3A:  MOVLB  0
3C3C:  CALL   0A46
3C40:  MOVLB  1
3C42:  DECFSZ x09,F
3C44:  BRA    3C36
3C46:  MOVLW  0C
3C48:  MOVWF  x1E
3C4A:  MOVLB  0
3C4C:  CALL   0BCA
....................          else 
3C50:  BRA    3C54
....................             {Flanco3 = 0;}     
3C52:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3C54:  MOVLW  0B
3C56:  SUBWF  1A,W
3C58:  CLRF   03
3C5A:  ADDLW  44
3C5C:  MOVWF  FE9
3C5E:  MOVLW  00
3C60:  ADDWFC 03,W
3C62:  MOVWF  FEA
3C64:  BTFSC  FEF.7
3C66:  BRA    3C6A
3C68:  BRA    3C7E
....................        {clave[unidad-11]=9;} 
3C6A:  MOVLW  0B
3C6C:  SUBWF  1A,W
3C6E:  CLRF   03
3C70:  ADDLW  44
3C72:  MOVWF  FE9
3C74:  MOVLW  00
3C76:  ADDWFC 03,W
3C78:  MOVWF  FEA
3C7A:  MOVLW  09
3C7C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3C7E:  MOVLW  0B
3C80:  SUBWF  1A,W
3C82:  CLRF   03
3C84:  ADDLW  44
3C86:  MOVWF  FE9
3C88:  MOVLW  00
3C8A:  ADDWFC 03,W
3C8C:  MOVWF  FEA
3C8E:  BTFSC  FEF.7
3C90:  BRA    3CAA
3C92:  MOVF   FEF,W
3C94:  SUBLW  09
3C96:  BC    3CAA
....................        {clave[unidad-11]=0;} 
3C98:  MOVLW  0B
3C9A:  SUBWF  1A,W
3C9C:  CLRF   03
3C9E:  ADDLW  44
3CA0:  MOVWF  FE9
3CA2:  MOVLW  00
3CA4:  ADDWFC 03,W
3CA6:  MOVWF  FEA
3CA8:  CLRF   FEF
....................        if(unidad<11) 
3CAA:  MOVF   1A,W
3CAC:  SUBLW  0A
3CAE:  BNC   3CC0
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
3CB0:  MOVLW  01
3CB2:  MOVWF  17
3CB4:  CLRF   40
3CB6:  MOVLW  02
3CB8:  MOVWF  1B
3CBA:  MOVWF  1D
3CBC:  MOVLW  0B
3CBE:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3CC0:  MOVFF  1A,11F
3CC4:  MOVLW  04
3CC6:  MOVLB  1
3CC8:  MOVWF  x20
3CCA:  MOVLB  0
3CCC:  CALL   0B58
....................        lcd_putc(t[2]); 
3CD0:  MOVFF  43,11E
3CD4:  CALL   0BCA
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3CD8:  MOVF   1A,W
3CDA:  SUBLW  0E
3CDC:  BTFSC  FD8.0
3CDE:  BRA    3E2A
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3CE0:  MOVF   48,W
3CE2:  SUBWF  44,W
3CE4:  BNZ   3D98
3CE6:  MOVF   49,W
3CE8:  SUBWF  45,W
3CEA:  BNZ   3D98
3CEC:  MOVF   4A,W
3CEE:  SUBWF  46,W
3CF0:  BNZ   3D98
3CF2:  MOVF   4B,W
3CF4:  SUBWF  47,W
3CF6:  BNZ   3D98
....................             {lcd_gotoxy(1,1); 
3CF8:  MOVLW  01
3CFA:  MOVLB  1
3CFC:  MOVWF  x1F
3CFE:  MOVWF  x20
3D00:  MOVLB  0
3D02:  CALL   0B58
....................             printf(lcd_putc,"                    "); 
3D06:  MOVLW  32
3D08:  MOVWF  FF6
3D0A:  MOVLW  05
3D0C:  MOVWF  FF7
3D0E:  CALL   1056
....................             lcd_gotoxy(1,2); 
3D12:  MOVLW  01
3D14:  MOVLB  1
3D16:  MOVWF  x1F
3D18:  MOVLW  02
3D1A:  MOVWF  x20
3D1C:  MOVLB  0
3D1E:  CALL   0B58
....................             printf(lcd_putc,"     Contraseña     "); 
3D22:  MOVLW  48
3D24:  MOVWF  FF6
3D26:  MOVLW  05
3D28:  MOVWF  FF7
3D2A:  CALL   1056
....................             lcd_gotoxy(1,3); 
3D2E:  MOVLW  01
3D30:  MOVLB  1
3D32:  MOVWF  x1F
3D34:  MOVLW  03
3D36:  MOVWF  x20
3D38:  MOVLB  0
3D3A:  CALL   0B58
....................             printf(lcd_putc,"      Correcta      "); 
3D3E:  MOVLW  5E
3D40:  MOVWF  FF6
3D42:  MOVLW  05
3D44:  MOVWF  FF7
3D46:  CALL   1056
....................             lcd_gotoxy(1,4); 
3D4A:  MOVLW  01
3D4C:  MOVLB  1
3D4E:  MOVWF  x1F
3D50:  MOVLW  04
3D52:  MOVWF  x20
3D54:  MOVLB  0
3D56:  CALL   0B58
....................             printf(lcd_putc,"                    "); 
3D5A:  MOVLW  74
3D5C:  MOVWF  FF6
3D5E:  MOVLW  05
3D60:  MOVWF  FF7
3D62:  CALL   1056
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
3D66:  MOVLW  02
3D68:  MOVLB  1
3D6A:  MOVWF  x09
3D6C:  MOVLW  FA
3D6E:  MOVWF  x24
3D70:  MOVLB  0
3D72:  CALL   0A46
3D76:  MOVLB  1
3D78:  DECFSZ x09,F
3D7A:  BRA    3D6C
3D7C:  MOVLW  33
3D7E:  MOVWF  17
3D80:  MOVLW  0B
3D82:  MOVWF  1A
3D84:  MOVLW  0C
3D86:  MOVWF  x1E
3D88:  MOVLB  0
3D8A:  CALL   0BCA
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3D8E:  CLRF   44
3D90:  CLRF   45
3D92:  CLRF   46
3D94:  CLRF   47
....................          else 
3D96:  BRA    3E2A
....................          {lcd_gotoxy(1,1); 
3D98:  MOVLW  01
3D9A:  MOVLB  1
3D9C:  MOVWF  x1F
3D9E:  MOVWF  x20
3DA0:  MOVLB  0
3DA2:  CALL   0B58
....................             printf(lcd_putc,"                    "); 
3DA6:  MOVLW  8A
3DA8:  MOVWF  FF6
3DAA:  MOVLW  05
3DAC:  MOVWF  FF7
3DAE:  CALL   1056
....................             lcd_gotoxy(1,2); 
3DB2:  MOVLW  01
3DB4:  MOVLB  1
3DB6:  MOVWF  x1F
3DB8:  MOVLW  02
3DBA:  MOVWF  x20
3DBC:  MOVLB  0
3DBE:  CALL   0B58
....................             printf(lcd_putc,"     Contraseña     "); 
3DC2:  MOVLW  A0
3DC4:  MOVWF  FF6
3DC6:  MOVLW  05
3DC8:  MOVWF  FF7
3DCA:  CALL   1056
....................             lcd_gotoxy(1,3); 
3DCE:  MOVLW  01
3DD0:  MOVLB  1
3DD2:  MOVWF  x1F
3DD4:  MOVLW  03
3DD6:  MOVWF  x20
3DD8:  MOVLB  0
3DDA:  CALL   0B58
....................             printf(lcd_putc,"     Incorrecta     "); 
3DDE:  MOVLW  B6
3DE0:  MOVWF  FF6
3DE2:  MOVLW  05
3DE4:  MOVWF  FF7
3DE6:  CALL   1056
....................             lcd_gotoxy(1,4); 
3DEA:  MOVLW  01
3DEC:  MOVLB  1
3DEE:  MOVWF  x1F
3DF0:  MOVLW  04
3DF2:  MOVWF  x20
3DF4:  MOVLB  0
3DF6:  CALL   0B58
....................             printf(lcd_putc,"                    "); 
3DFA:  MOVLW  CC
3DFC:  MOVWF  FF6
3DFE:  MOVLW  05
3E00:  MOVWF  FF7
3E02:  CALL   1056
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3E06:  MOVLW  02
3E08:  MOVLB  1
3E0A:  MOVWF  x09
3E0C:  MOVLW  FA
3E0E:  MOVWF  x24
3E10:  MOVLB  0
3E12:  CALL   0A46
3E16:  MOVLB  1
3E18:  DECFSZ x09,F
3E1A:  BRA    3E0C
3E1C:  MOVLW  0B
3E1E:  MOVWF  1A
3E20:  MOVLW  0C
3E22:  MOVWF  x1E
3E24:  MOVLB  0
3E26:  CALL   0BCA
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
3E2A:  MOVF   1A,W
3E2C:  SUBLW  0B
3E2E:  BC    3E52
3E30:  MOVF   1A,W
3E32:  SUBLW  0D
3E34:  BNC   3E52
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3E36:  MOVLW  01
3E38:  SUBWF  1A,W
3E3A:  MOVLB  1
3E3C:  MOVWF  x09
3E3E:  MOVWF  x1F
3E40:  MOVLW  04
3E42:  MOVWF  x20
3E44:  MOVLB  0
3E46:  CALL   0B58
....................             lcd_putc(t[1]); 
3E4A:  MOVFF  42,11E
3E4E:  CALL   0BCA
3E52:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3E54:  MOVF   17,W
3E56:  SUBLW  33
3E58:  BTFSS  FD8.2
3E5A:  BRA    41D2
....................    lcd_gotoxy(1,1); 
3E5C:  MOVLW  01
3E5E:  MOVWF  x1F
3E60:  MOVWF  x20
3E62:  MOVLB  0
3E64:  CALL   0B58
....................    printf(lcd_putc,"     Ingrese        "); 
3E68:  MOVLW  E2
3E6A:  MOVWF  FF6
3E6C:  MOVLW  05
3E6E:  MOVWF  FF7
3E70:  CALL   1056
....................    lcd_gotoxy(1,2); 
3E74:  MOVLW  01
3E76:  MOVLB  1
3E78:  MOVWF  x1F
3E7A:  MOVLW  02
3E7C:  MOVWF  x20
3E7E:  MOVLB  0
3E80:  CALL   0B58
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
3E84:  MOVLW  F8
3E86:  MOVWF  FF6
3E88:  MOVLW  05
3E8A:  MOVWF  FF7
3E8C:  CALL   1056
....................    lcd_gotoxy(1,3); 
3E90:  MOVLW  01
3E92:  MOVLB  1
3E94:  MOVWF  x1F
3E96:  MOVLW  03
3E98:  MOVWF  x20
3E9A:  MOVLB  0
3E9C:  CALL   0B58
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3EA0:  MOVLW  0E
3EA2:  MOVWF  FF6
3EA4:  MOVLW  06
3EA6:  MOVWF  FF7
3EA8:  MOVLW  0A
3EAA:  MOVLB  1
3EAC:  MOVWF  x11
3EAE:  MOVLB  0
3EB0:  CALL   1076
3EB4:  MOVFF  44,109
3EB8:  MOVLW  1F
3EBA:  MOVLB  1
3EBC:  MOVWF  x0A
3EBE:  MOVLB  0
3EC0:  CALL   10CA
3EC4:  MOVFF  45,109
3EC8:  MOVLW  1F
3ECA:  MOVLB  1
3ECC:  MOVWF  x0A
3ECE:  MOVLB  0
3ED0:  CALL   10CA
3ED4:  MOVFF  46,109
3ED8:  MOVLW  1F
3EDA:  MOVLB  1
3EDC:  MOVWF  x0A
3EDE:  MOVLB  0
3EE0:  CALL   10CA
3EE4:  MOVFF  47,109
3EE8:  MOVLW  1F
3EEA:  MOVLB  1
3EEC:  MOVWF  x0A
3EEE:  MOVLB  0
3EF0:  CALL   10CA
3EF4:  MOVLW  20
3EF6:  MOVLB  1
3EF8:  MOVWF  x1E
3EFA:  MOVLB  0
3EFC:  CALL   0BCA
3F00:  MOVLW  20
3F02:  MOVLB  1
3F04:  MOVWF  x1E
3F06:  MOVLB  0
3F08:  CALL   0BCA
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
3F0C:  BSF    F93.3
3F0E:  BTFSS  F81.3
3F10:  BRA    3F38
....................       {  if(Flanco == 0)  
3F12:  BTFSC  3E.4
3F14:  BRA    3F36
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3F16:  MOVLW  0B
3F18:  SUBWF  1A,W
3F1A:  CLRF   03
3F1C:  ADDLW  44
3F1E:  MOVWF  FE9
3F20:  MOVLW  00
3F22:  ADDWFC 03,W
3F24:  MOVWF  FEA
3F26:  INCF   FEF,F
3F28:  BSF    3E.4
3F2A:  MOVLW  1E
3F2C:  MOVLB  1
3F2E:  MOVWF  x24
3F30:  MOVLB  0
3F32:  CALL   0A46
....................          else 
3F36:  BRA    3F3A
....................             {Flanco = 0;} 
3F38:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3F3A:  BSF    F93.2
3F3C:  BTFSS  F81.2
3F3E:  BRA    3F66
....................       {  if(Flanco2 == 0)  
3F40:  BTFSC  3E.6
3F42:  BRA    3F64
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3F44:  MOVLW  0B
3F46:  SUBWF  1A,W
3F48:  CLRF   03
3F4A:  ADDLW  44
3F4C:  MOVWF  FE9
3F4E:  MOVLW  00
3F50:  ADDWFC 03,W
3F52:  MOVWF  FEA
3F54:  DECF   FEF,F
3F56:  BSF    3E.6
3F58:  MOVLW  1E
3F5A:  MOVLB  1
3F5C:  MOVWF  x24
3F5E:  MOVLB  0
3F60:  CALL   0A46
....................          else 
3F64:  BRA    3F68
....................             {Flanco2 = 0;} 
3F66:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
3F68:  BSF    F93.0
3F6A:  BTFSS  F81.0
3F6C:  BRA    3F90
....................       {  if(Flanco1 == 0)  
3F6E:  BTFSC  3E.5
3F70:  BRA    3F8E
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3F72:  BSF    3E.5
3F74:  INCF   1A,F
3F76:  MOVLW  1E
3F78:  MOVLB  1
3F7A:  MOVWF  x24
3F7C:  MOVLB  0
3F7E:  CALL   0A46
3F82:  MOVLW  0C
3F84:  MOVLB  1
3F86:  MOVWF  x1E
3F88:  MOVLB  0
3F8A:  CALL   0BCA
....................          else 
3F8E:  BRA    3F92
....................             {Flanco1 = 0;}    
3F90:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3F92:  BSF    F93.1
3F94:  BTFSS  F81.1
3F96:  BRA    3FBA
....................       {  if(Flanco3 == 0)  
3F98:  BTFSC  3E.7
3F9A:  BRA    3FB8
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3F9C:  BSF    3E.7
3F9E:  DECF   1A,F
3FA0:  MOVLW  1E
3FA2:  MOVLB  1
3FA4:  MOVWF  x24
3FA6:  MOVLB  0
3FA8:  CALL   0A46
3FAC:  MOVLW  0C
3FAE:  MOVLB  1
3FB0:  MOVWF  x1E
3FB2:  MOVLB  0
3FB4:  CALL   0BCA
....................          else 
3FB8:  BRA    3FBC
....................             {Flanco3 = 0;}     
3FBA:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3FBC:  MOVLW  0B
3FBE:  SUBWF  1A,W
3FC0:  CLRF   03
3FC2:  ADDLW  44
3FC4:  MOVWF  FE9
3FC6:  MOVLW  00
3FC8:  ADDWFC 03,W
3FCA:  MOVWF  FEA
3FCC:  BTFSC  FEF.7
3FCE:  BRA    3FD2
3FD0:  BRA    3FE6
....................        {clave[unidad-11]=9;} 
3FD2:  MOVLW  0B
3FD4:  SUBWF  1A,W
3FD6:  CLRF   03
3FD8:  ADDLW  44
3FDA:  MOVWF  FE9
3FDC:  MOVLW  00
3FDE:  ADDWFC 03,W
3FE0:  MOVWF  FEA
3FE2:  MOVLW  09
3FE4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3FE6:  MOVLW  0B
3FE8:  SUBWF  1A,W
3FEA:  CLRF   03
3FEC:  ADDLW  44
3FEE:  MOVWF  FE9
3FF0:  MOVLW  00
3FF2:  ADDWFC 03,W
3FF4:  MOVWF  FEA
3FF6:  BTFSC  FEF.7
3FF8:  BRA    4012
3FFA:  MOVF   FEF,W
3FFC:  SUBLW  09
3FFE:  BC    4012
....................        {clave[unidad-11]=0;} 
4000:  MOVLW  0B
4002:  SUBWF  1A,W
4004:  CLRF   03
4006:  ADDLW  44
4008:  MOVWF  FE9
400A:  MOVLW  00
400C:  ADDWFC 03,W
400E:  MOVWF  FEA
4010:  CLRF   FEF
....................        if(unidad<11) 
4012:  MOVF   1A,W
4014:  SUBLW  0A
4016:  BNC   4020
....................        {Menu=5;unidad=11;} 
4018:  MOVLW  05
401A:  MOVWF  17
401C:  MOVLW  0B
401E:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
4020:  MOVFF  1A,11F
4024:  MOVLW  04
4026:  MOVLB  1
4028:  MOVWF  x20
402A:  MOVLB  0
402C:  CALL   0B58
....................        lcd_putc(t[2]); 
4030:  MOVFF  43,11E
4034:  CALL   0BCA
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
4038:  MOVF   1A,W
403A:  SUBLW  0E
403C:  BTFSC  FD8.0
403E:  BRA    41A8
....................        { 
....................             lcd_gotoxy(1,1); 
4040:  MOVLW  01
4042:  MOVLB  1
4044:  MOVWF  x1F
4046:  MOVWF  x20
4048:  MOVLB  0
404A:  CALL   0B58
....................             printf(lcd_putc,"                    "); 
404E:  MOVLW  24
4050:  MOVWF  FF6
4052:  MOVLW  06
4054:  MOVWF  FF7
4056:  CALL   1056
....................             lcd_gotoxy(1,2); 
405A:  MOVLW  01
405C:  MOVLB  1
405E:  MOVWF  x1F
4060:  MOVLW  02
4062:  MOVWF  x20
4064:  MOVLB  0
4066:  CALL   0B58
....................             printf(lcd_putc,"     Contraseña     "); 
406A:  MOVLW  3A
406C:  MOVWF  FF6
406E:  MOVLW  06
4070:  MOVWF  FF7
4072:  CALL   1056
....................             lcd_gotoxy(1,3); 
4076:  MOVLW  01
4078:  MOVLB  1
407A:  MOVWF  x1F
407C:  MOVLW  03
407E:  MOVWF  x20
4080:  MOVLB  0
4082:  CALL   0B58
....................             printf(lcd_putc,"     Almacenada     "); 
4086:  MOVLW  50
4088:  MOVWF  FF6
408A:  MOVLW  06
408C:  MOVWF  FF7
408E:  CALL   1056
....................             lcd_gotoxy(1,4); 
4092:  MOVLW  01
4094:  MOVLB  1
4096:  MOVWF  x1F
4098:  MOVLW  04
409A:  MOVWF  x20
409C:  MOVLB  0
409E:  CALL   0B58
....................             printf(lcd_putc,"                    "); 
40A2:  MOVLW  66
40A4:  MOVWF  FF6
40A6:  MOVLW  06
40A8:  MOVWF  FF7
40AA:  CALL   1056
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
40AE:  CLRF   FA9
40B0:  MOVFF  44,FA8
40B4:  BCF    FA6.6
40B6:  BCF    FA6.7
40B8:  BSF    FA6.2
40BA:  MOVF   FF2,W
40BC:  MOVWF  00
40BE:  BCF    FF2.7
40C0:  MOVLB  F
40C2:  MOVLW  55
40C4:  MOVWF  FA7
40C6:  MOVLW  AA
40C8:  MOVWF  FA7
40CA:  BSF    FA6.1
40CC:  BTFSC  FA6.1
40CE:  BRA    40CC
40D0:  BCF    FA6.2
40D2:  MOVF   00,W
40D4:  IORWF  FF2,F
40D6:  MOVLW  14
40D8:  MOVLB  1
40DA:  MOVWF  x24
40DC:  MOVLB  0
40DE:  CALL   0A46
40E2:  MOVLW  01
40E4:  MOVWF  FA9
40E6:  MOVFF  45,FA8
40EA:  BCF    FA6.6
40EC:  BCF    FA6.7
40EE:  BSF    FA6.2
40F0:  MOVF   FF2,W
40F2:  MOVWF  00
40F4:  BCF    FF2.7
40F6:  MOVLB  F
40F8:  MOVLW  55
40FA:  MOVWF  FA7
40FC:  MOVLW  AA
40FE:  MOVWF  FA7
4100:  BSF    FA6.1
4102:  BTFSC  FA6.1
4104:  BRA    4102
4106:  BCF    FA6.2
4108:  MOVF   00,W
410A:  IORWF  FF2,F
410C:  MOVLW  14
410E:  MOVLB  1
4110:  MOVWF  x24
4112:  MOVLB  0
4114:  CALL   0A46
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
4118:  MOVLW  02
411A:  MOVWF  FA9
411C:  MOVFF  46,FA8
4120:  BCF    FA6.6
4122:  BCF    FA6.7
4124:  BSF    FA6.2
4126:  MOVF   FF2,W
4128:  MOVWF  00
412A:  BCF    FF2.7
412C:  MOVLB  F
412E:  MOVLW  55
4130:  MOVWF  FA7
4132:  MOVLW  AA
4134:  MOVWF  FA7
4136:  BSF    FA6.1
4138:  BTFSC  FA6.1
413A:  BRA    4138
413C:  BCF    FA6.2
413E:  MOVF   00,W
4140:  IORWF  FF2,F
4142:  MOVLW  14
4144:  MOVLB  1
4146:  MOVWF  x24
4148:  MOVLB  0
414A:  CALL   0A46
414E:  MOVLW  03
4150:  MOVWF  FA9
4152:  MOVFF  47,FA8
4156:  BCF    FA6.6
4158:  BCF    FA6.7
415A:  BSF    FA6.2
415C:  MOVF   FF2,W
415E:  MOVWF  00
4160:  BCF    FF2.7
4162:  MOVLB  F
4164:  MOVLW  55
4166:  MOVWF  FA7
4168:  MOVLW  AA
416A:  MOVWF  FA7
416C:  BSF    FA6.1
416E:  BTFSC  FA6.1
4170:  BRA    416E
4172:  BCF    FA6.2
4174:  MOVF   00,W
4176:  IORWF  FF2,F
4178:  MOVLW  14
417A:  MOVLB  1
417C:  MOVWF  x24
417E:  MOVLB  0
4180:  CALL   0A46
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
4184:  MOVLW  02
4186:  MOVLB  1
4188:  MOVWF  x09
418A:  MOVLW  FA
418C:  MOVWF  x24
418E:  MOVLB  0
4190:  CALL   0A46
4194:  MOVLB  1
4196:  DECFSZ x09,F
4198:  BRA    418A
419A:  MOVLW  01
419C:  MOVWF  17
419E:  CLRF   40
41A0:  MOVLW  02
41A2:  MOVWF  1B
41A4:  MOVWF  1D
41A6:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
41A8:  MOVF   1A,W
41AA:  SUBLW  0B
41AC:  BC    41D0
41AE:  MOVF   1A,W
41B0:  SUBLW  0D
41B2:  BNC   41D0
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
41B4:  MOVLW  01
41B6:  SUBWF  1A,W
41B8:  MOVLB  1
41BA:  MOVWF  x09
41BC:  MOVWF  x1F
41BE:  MOVLW  04
41C0:  MOVWF  x20
41C2:  MOVLB  0
41C4:  CALL   0B58
....................             lcd_putc(t[1]); 
41C8:  MOVFF  42,11E
41CC:  CALL   0BCA
41D0:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
41D2:  MOVF   17,W
41D4:  SUBLW  06
41D6:  BTFSS  FD8.2
41D8:  BRA    4348
....................    { 
....................    lcd_gotoxy(1,2); 
41DA:  MOVLW  01
41DC:  MOVWF  x1F
41DE:  MOVLW  02
41E0:  MOVWF  x20
41E2:  MOVLB  0
41E4:  CALL   0B58
....................    printf(lcd_putc,"     Media Movil    "); 
41E8:  MOVLW  7C
41EA:  MOVWF  FF6
41EC:  MOVLW  06
41EE:  MOVWF  FF7
41F0:  CALL   1056
....................    lcd_gotoxy(1,3); 
41F4:  MOVLW  01
41F6:  MOVLB  1
41F8:  MOVWF  x1F
41FA:  MOVLW  03
41FC:  MOVWF  x20
41FE:  MOVLB  0
4200:  CALL   0B58
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
4204:  MOVLW  92
4206:  MOVWF  FF6
4208:  MOVLW  06
420A:  MOVWF  FF7
420C:  MOVLW  07
420E:  MOVLB  1
4210:  MOVWF  x11
4212:  MOVLB  0
4214:  CALL   1076
4218:  MOVFF  2D,109
421C:  MOVLW  01
421E:  MOVLB  1
4220:  MOVWF  x0A
4222:  MOVLB  0
4224:  CALL   10CA
4228:  MOVLW  20
422A:  MOVLB  1
422C:  MOVWF  x1E
422E:  MOVLB  0
4230:  CALL   0BCA
4234:  MOVLW  20
4236:  MOVLB  1
4238:  MOVWF  x1E
423A:  MOVLB  0
423C:  CALL   0BCA
4240:  MOVLW  20
4242:  MOVLB  1
4244:  MOVWF  x1E
4246:  MOVLB  0
4248:  CALL   0BCA
....................     
....................    if(MediaMovil>12) 
424C:  MOVF   2D,W
424E:  SUBLW  0C
4250:  BC    4256
....................    {MediaMovil=12;} 
4252:  MOVLW  0C
4254:  MOVWF  2D
....................     
....................    if(MediaMovil<1) 
4256:  MOVF   2D,F
4258:  BNZ   425E
....................    {MediaMovil=1;} 
425A:  MOVLW  01
425C:  MOVWF  2D
....................     
....................       if(UP)//Si oprime hacia arriba 
425E:  BSF    F93.3
4260:  BTFSS  F81.3
4262:  BRA    427C
....................       {  if(Flanco == 0)  
4264:  BTFSC  3E.4
4266:  BRA    427A
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
4268:  MOVLW  01
426A:  ADDWF  2D,F
426C:  BSF    3E.4
426E:  MOVLW  1E
4270:  MOVLB  1
4272:  MOVWF  x24
4274:  MOVLB  0
4276:  CALL   0A46
....................          else 
427A:  BRA    427E
....................             {Flanco = 0;} 
427C:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
427E:  BSF    F93.2
4280:  BTFSS  F81.2
4282:  BRA    429C
....................       {  if(Flanco2 == 0)  
4284:  BTFSC  3E.6
4286:  BRA    429A
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
4288:  MOVLW  01
428A:  SUBWF  2D,F
428C:  BSF    3E.6
428E:  MOVLW  1E
4290:  MOVLB  1
4292:  MOVWF  x24
4294:  MOVLB  0
4296:  CALL   0A46
....................          else 
429A:  BRA    429E
....................             {Flanco2 = 0;} 
429C:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
429E:  BSF    F93.0
42A0:  BTFSS  F81.0
42A2:  BRA    4306
....................       {  if(Flanco1 == 0)  
42A4:  BTFSC  3E.5
42A6:  BRA    4304
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
42A8:  MOVLW  01
42AA:  MOVWF  17
42AC:  CLRF   40
42AE:  MOVLW  02
42B0:  MOVWF  1B
42B2:  MOVWF  1D
42B4:  MOVLW  0B
42B6:  MOVWF  1A
42B8:  MOVLW  02
42BA:  MOVLB  1
42BC:  MOVWF  x09
42BE:  MOVLW  FA
42C0:  MOVWF  x24
42C2:  MOVLB  0
42C4:  CALL   0A46
42C8:  MOVLB  1
42CA:  DECFSZ x09,F
42CC:  BRA    42BE
42CE:  MOVLW  0C
42D0:  MOVWF  x1E
42D2:  MOVLB  0
42D4:  CALL   0BCA
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
42D8:  MOVLW  2A
42DA:  MOVWF  FA9
42DC:  MOVFF  2D,FA8
42E0:  BCF    FA6.6
42E2:  BCF    FA6.7
42E4:  BSF    FA6.2
42E6:  MOVF   FF2,W
42E8:  MOVWF  00
42EA:  BCF    FF2.7
42EC:  MOVLB  F
42EE:  MOVLW  55
42F0:  MOVWF  FA7
42F2:  MOVLW  AA
42F4:  MOVWF  FA7
42F6:  BSF    FA6.1
42F8:  BTFSC  FA6.1
42FA:  BRA    42F8
42FC:  BCF    FA6.2
42FE:  MOVF   00,W
4300:  IORWF  FF2,F
4302:  MOVLB  0
....................             }} 
....................          else 
4304:  BRA    4308
....................             {Flanco1 = 0;}    
4306:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4308:  BSF    F93.1
430A:  BTFSS  F81.1
430C:  BRA    4344
....................       {  if(Flanco3 == 0)  
430E:  BTFSC  3E.7
4310:  BRA    4342
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4312:  MOVLW  01
4314:  MOVWF  17
4316:  CLRF   40
4318:  MOVLW  02
431A:  MOVWF  1B
431C:  MOVWF  1D
431E:  MOVLW  0B
4320:  MOVWF  1A
4322:  MOVLW  02
4324:  MOVLB  1
4326:  MOVWF  x09
4328:  MOVLW  FA
432A:  MOVWF  x24
432C:  MOVLB  0
432E:  CALL   0A46
4332:  MOVLB  1
4334:  DECFSZ x09,F
4336:  BRA    4328
4338:  MOVLW  0C
433A:  MOVWF  x1E
433C:  MOVLB  0
433E:  CALL   0BCA
....................          else 
4342:  BRA    4346
....................             {Flanco3 = 0;}   
4344:  BCF    3E.7
4346:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
4348:  MOVF   17,W
434A:  SUBLW  07
434C:  BTFSS  FD8.2
434E:  BRA    473E
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
4350:  MOVLW  01
4352:  MOVWF  x1F
4354:  MOVWF  x20
4356:  MOVLB  0
4358:  CALL   0B58
....................    printf(lcd_putc,"  Zero Point Config "); 
435C:  MOVLW  A2
435E:  MOVWF  FF6
4360:  MOVLW  06
4362:  MOVWF  FF7
4364:  CALL   1056
....................    lcd_gotoxy(1,2); 
4368:  MOVLW  01
436A:  MOVLB  1
436C:  MOVWF  x1F
436E:  MOVLW  02
4370:  MOVWF  x20
4372:  MOVLB  0
4374:  CALL   0B58
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
4378:  MOVLW  B8
437A:  MOVWF  FF6
437C:  MOVLW  06
437E:  MOVWF  FF7
4380:  MOVLW  08
4382:  MOVLB  1
4384:  MOVWF  x11
4386:  MOVLB  0
4388:  CALL   1076
438C:  MOVLW  01
438E:  MOVWF  FE9
4390:  MOVFF  98,114
4394:  MOVFF  97,113
4398:  MOVFF  96,112
439C:  MOVFF  95,111
43A0:  MOVLB  1
43A2:  MOVWF  x15
43A4:  MOVLB  0
43A6:  CALL   152E
43AA:  MOVLW  C5
43AC:  MOVWF  FF6
43AE:  MOVLW  06
43B0:  MOVWF  FF7
43B2:  MOVLW  08
43B4:  MOVLB  1
43B6:  MOVWF  x11
43B8:  MOVLB  0
43BA:  CALL   1076
....................    lcd_gotoxy(1,3); 
43BE:  MOVLW  01
43C0:  MOVLB  1
43C2:  MOVWF  x1F
43C4:  MOVLW  03
43C6:  MOVWF  x20
43C8:  MOVLB  0
43CA:  CALL   0B58
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
43CE:  MOVLB  1
43D0:  CLRF   x0D
43D2:  MOVLB  0
43D4:  CALL   1796
43D8:  MOVFF  00,109
43DC:  MOVFF  01,10A
43E0:  MOVFF  02,10B
43E4:  MOVFF  03,10C
43E8:  MOVLW  5A
43EA:  MOVLB  1
43EC:  MOVWF  x1E
43EE:  MOVLB  0
43F0:  CALL   0BCA
43F4:  MOVLW  46
43F6:  MOVLB  1
43F8:  MOVWF  x1E
43FA:  MOVLB  0
43FC:  CALL   0BCA
4400:  MOVLW  3D
4402:  MOVLB  1
4404:  MOVWF  x1E
4406:  MOVLB  0
4408:  CALL   0BCA
440C:  MOVLW  01
440E:  MOVWF  FE9
4410:  MOVFF  57,114
4414:  MOVFF  56,113
4418:  MOVFF  55,112
441C:  MOVFF  54,111
4420:  MOVLB  1
4422:  CLRF   x15
4424:  MOVLB  0
4426:  CALL   152E
442A:  MOVLW  D6
442C:  MOVWF  FF6
442E:  MOVLW  06
4430:  MOVWF  FF7
4432:  MOVLW  05
4434:  MOVLB  1
4436:  MOVWF  x11
4438:  MOVLB  0
443A:  CALL   1076
443E:  MOVLW  01
4440:  MOVWF  FE9
4442:  MOVFF  10C,114
4446:  MOVFF  10B,113
444A:  MOVFF  10A,112
444E:  MOVFF  109,111
4452:  MOVLB  1
4454:  CLRF   x15
4456:  MOVLB  0
4458:  CALL   152E
....................    lcd_gotoxy(1,4); 
445C:  MOVLW  01
445E:  MOVLB  1
4460:  MOVWF  x1F
4462:  MOVLW  04
4464:  MOVWF  x20
4466:  MOVLB  0
4468:  CALL   0B58
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
446C:  MOVLW  E2
446E:  MOVWF  FF6
4470:  MOVLW  06
4472:  MOVWF  FF7
4474:  MOVLW  0C
4476:  MOVLB  1
4478:  MOVWF  x11
447A:  MOVLB  0
447C:  CALL   1076
4480:  MOVLW  01
4482:  MOVWF  FE9
4484:  MOVFF  C8,114
4488:  MOVFF  C7,113
448C:  MOVFF  C6,112
4490:  MOVFF  C5,111
4494:  MOVLB  1
4496:  CLRF   x15
4498:  MOVLB  0
449A:  CALL   152E
....................      
....................       if(RIGHT)// Si oprime derecha 
449E:  BSF    F93.0
44A0:  BTFSS  F81.0
44A2:  BRA    46FC
....................       {  if(Flanco1 == 0)  
44A4:  BTFSC  3E.5
44A6:  BRA    46FA
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
44A8:  MOVLW  01
44AA:  MOVWF  17
44AC:  CLRF   40
44AE:  MOVLW  02
44B0:  MOVWF  1B
44B2:  MOVWF  1D
44B4:  MOVLW  0B
44B6:  MOVWF  1A
44B8:  MOVLW  02
44BA:  MOVLB  1
44BC:  MOVWF  x09
44BE:  MOVLW  FA
44C0:  MOVWF  x24
44C2:  MOVLB  0
44C4:  CALL   0A46
44C8:  MOVLB  1
44CA:  DECFSZ x09,F
44CC:  BRA    44BE
44CE:  MOVLW  0C
44D0:  MOVWF  x1E
44D2:  MOVLB  0
44D4:  CALL   0BCA
....................             Diferencia=zero_fabrica-sensores(0); 
44D8:  MOVLB  1
44DA:  CLRF   x0D
44DC:  MOVLB  0
44DE:  CALL   1796
44E2:  MOVFF  FEA,10A
44E6:  MOVFF  FE9,109
44EA:  BSF    FD8.1
44EC:  MOVFF  57,12A
44F0:  MOVFF  56,129
44F4:  MOVFF  55,128
44F8:  MOVFF  54,127
44FC:  MOVFF  03,12E
4500:  MOVFF  02,12D
4504:  MOVFF  01,12C
4508:  MOVFF  00,12B
450C:  CALL   0DCA
4510:  MOVFF  10A,FEA
4514:  MOVFF  109,FE9
4518:  MOVFF  03,C8
451C:  MOVFF  02,C7
4520:  MOVFF  01,C6
4524:  MOVFF  00,C5
....................              
....................             if(Diferencia>=0) 
4528:  MOVLB  1
452A:  CLRF   x26
452C:  CLRF   x25
452E:  CLRF   x24
4530:  CLRF   x23
4532:  MOVFF  C8,12A
4536:  MOVFF  C7,129
453A:  MOVFF  C6,128
453E:  MOVFF  C5,127
4542:  MOVLB  0
4544:  CALL   16E0
4548:  BC    454C
454A:  BNZ   457A
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
454C:  MOVLW  0A
454E:  MOVWF  2E
4550:  MOVLW  32
4552:  MOVWF  FA9
4554:  MOVFF  2E,FA8
4558:  BCF    FA6.6
455A:  BCF    FA6.7
455C:  BSF    FA6.2
455E:  MOVF   FF2,W
4560:  MOVWF  00
4562:  BCF    FF2.7
4564:  MOVLB  F
4566:  MOVLW  55
4568:  MOVWF  FA7
456A:  MOVLW  AA
456C:  MOVWF  FA7
456E:  BSF    FA6.1
4570:  BTFSC  FA6.1
4572:  BRA    4570
4574:  BCF    FA6.2
4576:  MOVF   00,W
4578:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
457A:  MOVFF  C8,126
457E:  MOVFF  C7,125
4582:  MOVFF  C6,124
4586:  MOVFF  C5,123
458A:  MOVLB  1
458C:  CLRF   x2A
458E:  CLRF   x29
4590:  CLRF   x28
4592:  CLRF   x27
4594:  MOVLB  0
4596:  CALL   16E0
459A:  BNC   45CC
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
459C:  MOVLW  14
459E:  MOVWF  2E
45A0:  MOVLW  32
45A2:  MOVWF  FA9
45A4:  MOVFF  2E,FA8
45A8:  BCF    FA6.6
45AA:  BCF    FA6.7
45AC:  BSF    FA6.2
45AE:  MOVF   FF2,W
45B0:  MOVWF  00
45B2:  BCF    FF2.7
45B4:  MOVLB  F
45B6:  MOVLW  55
45B8:  MOVWF  FA7
45BA:  MOVLW  AA
45BC:  MOVWF  FA7
45BE:  BSF    FA6.1
45C0:  BTFSC  FA6.1
45C2:  BRA    45C0
45C4:  BCF    FA6.2
45C6:  MOVF   00,W
45C8:  IORWF  FF2,F
45CA:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
45CC:  MOVFF  C5,00
45D0:  MOVFF  C6,01
45D4:  MOVFF  C7,02
45D8:  MOVFF  C8,03
45DC:  BCF    01.7
45DE:  MOVFF  C8,C8
45E2:  MOVFF  C7,C7
45E6:  MOVFF  01,C6
45EA:  MOVFF  C5,C5
....................             Temporal1=Diferencia; 
45EE:  MOVFF  C8,C0
45F2:  MOVFF  C7,BF
45F6:  MOVFF  C6,BE
45FA:  MOVFF  C5,BD
....................             Entero1=(int)Temporal1; 
45FE:  MOVFF  C0,10C
4602:  MOVFF  BF,10B
4606:  MOVFF  BE,10A
460A:  MOVFF  BD,109
460E:  CALL   175A
4612:  MOVFF  01,27
....................             Temporal1=Temporal1-Entero1; 
4616:  MOVLB  1
4618:  CLRF   x13
461A:  MOVFF  27,112
461E:  MOVLB  0
4620:  CALL   0C36
4624:  BSF    FD8.1
4626:  MOVFF  C0,12A
462A:  MOVFF  BF,129
462E:  MOVFF  BE,128
4632:  MOVFF  BD,127
4636:  MOVFF  03,12E
463A:  MOVFF  02,12D
463E:  MOVFF  01,12C
4642:  MOVFF  00,12B
4646:  CALL   0DCA
464A:  MOVFF  03,C0
464E:  MOVFF  02,BF
4652:  MOVFF  01,BE
4656:  MOVFF  00,BD
....................             Temporal12=Temporal1*100.0; 
465A:  MOVFF  C0,126
465E:  MOVFF  BF,125
4662:  MOVFF  BE,124
4666:  MOVFF  BD,123
466A:  MOVLB  1
466C:  CLRF   x2A
466E:  CLRF   x29
4670:  MOVLW  48
4672:  MOVWF  x28
4674:  MOVLW  85
4676:  MOVWF  x27
4678:  MOVLB  0
467A:  CALL   1374
467E:  MOVFF  03,C4
4682:  MOVFF  02,C3
4686:  MOVFF  01,C2
468A:  MOVFF  00,C1
....................             Decimal12=(int8)Temporal12; 
468E:  MOVFF  C4,10C
4692:  MOVFF  C3,10B
4696:  MOVFF  C2,10A
469A:  MOVFF  C1,109
469E:  CALL   175A
46A2:  MOVFF  01,28
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
46A6:  MOVLW  3C
46A8:  MOVWF  FA9
46AA:  MOVFF  27,FA8
46AE:  BCF    FA6.6
46B0:  BCF    FA6.7
46B2:  BSF    FA6.2
46B4:  MOVF   FF2,W
46B6:  MOVWF  00
46B8:  BCF    FF2.7
46BA:  MOVLB  F
46BC:  MOVLW  55
46BE:  MOVWF  FA7
46C0:  MOVLW  AA
46C2:  MOVWF  FA7
46C4:  BSF    FA6.1
46C6:  BTFSC  FA6.1
46C8:  BRA    46C6
46CA:  BCF    FA6.2
46CC:  MOVF   00,W
46CE:  IORWF  FF2,F
46D0:  MOVLW  3D
46D2:  MOVWF  FA9
46D4:  MOVFF  28,FA8
46D8:  BCF    FA6.6
46DA:  BCF    FA6.7
46DC:  BSF    FA6.2
46DE:  MOVF   FF2,W
46E0:  MOVWF  00
46E2:  BCF    FF2.7
46E4:  MOVLW  55
46E6:  MOVWF  FA7
46E8:  MOVLW  AA
46EA:  MOVWF  FA7
46EC:  BSF    FA6.1
46EE:  BTFSC  FA6.1
46F0:  BRA    46EE
46F2:  BCF    FA6.2
46F4:  MOVF   00,W
46F6:  IORWF  FF2,F
46F8:  MOVLB  0
....................             }} 
....................          else 
46FA:  BRA    46FE
....................             {Flanco1 = 0;}    
46FC:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
46FE:  BSF    F93.1
4700:  BTFSS  F81.1
4702:  BRA    473A
....................       {  if(Flanco3 == 0)  
4704:  BTFSC  3E.7
4706:  BRA    4738
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4708:  MOVLW  01
470A:  MOVWF  17
470C:  CLRF   40
470E:  MOVLW  02
4710:  MOVWF  1B
4712:  MOVWF  1D
4714:  MOVLW  0B
4716:  MOVWF  1A
4718:  MOVLW  02
471A:  MOVLB  1
471C:  MOVWF  x09
471E:  MOVLW  FA
4720:  MOVWF  x24
4722:  MOVLB  0
4724:  CALL   0A46
4728:  MOVLB  1
472A:  DECFSZ x09,F
472C:  BRA    471E
472E:  MOVLW  0C
4730:  MOVWF  x1E
4732:  MOVLB  0
4734:  CALL   0BCA
....................          else 
4738:  BRA    473C
....................             {Flanco3 = 0;}   
473A:  BCF    3E.7
473C:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
473E:  MOVF   17,W
4740:  SUBLW  08
4742:  BTFSS  FD8.2
4744:  BRA    4C96
....................    { 
....................    lcd_gotoxy(1,1); 
4746:  MOVLW  01
4748:  MOVWF  x1F
474A:  MOVWF  x20
474C:  MOVLB  0
474E:  CALL   0B58
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4752:  MOVLB  1
4754:  CLRF   x0D
4756:  MOVLB  0
4758:  CALL   1796
475C:  MOVFF  00,109
4760:  MOVFF  01,10A
4764:  MOVFF  02,10B
4768:  MOVFF  03,10C
476C:  MOVLW  F4
476E:  MOVWF  FF6
4770:  MOVLW  06
4772:  MOVWF  FF7
4774:  MOVLW  0A
4776:  MOVLB  1
4778:  MOVWF  x11
477A:  MOVLB  0
477C:  CALL   1076
4780:  MOVLW  01
4782:  MOVWF  FE9
4784:  MOVFF  10C,114
4788:  MOVFF  10B,113
478C:  MOVFF  10A,112
4790:  MOVFF  109,111
4794:  MOVLB  1
4796:  CLRF   x15
4798:  MOVLB  0
479A:  CALL   152E
479E:  MOVLW  20
47A0:  MOVLB  1
47A2:  MOVWF  x1E
47A4:  MOVLB  0
47A6:  CALL   0BCA
47AA:  MOVLW  20
47AC:  MOVLB  1
47AE:  MOVWF  x1E
47B0:  MOVLB  0
47B2:  CALL   0BCA
....................    lcd_gotoxy(1,2); 
47B6:  MOVLW  01
47B8:  MOVLB  1
47BA:  MOVWF  x1F
47BC:  MOVLW  02
47BE:  MOVWF  x20
47C0:  MOVLB  0
47C2:  CALL   0B58
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
47C6:  MOVLB  1
47C8:  CLRF   x13
47CA:  MOVFF  2C,112
47CE:  MOVLB  0
47D0:  CALL   0C36
47D4:  MOVFF  00,109
47D8:  MOVFF  01,10A
47DC:  MOVFF  02,10B
47E0:  MOVFF  03,10C
47E4:  MOVFF  03,12A
47E8:  MOVFF  02,129
47EC:  MOVFF  01,128
47F0:  MOVFF  00,127
47F4:  MOVLB  1
47F6:  CLRF   x2E
47F8:  CLRF   x2D
47FA:  MOVLW  7F
47FC:  MOVWF  x2C
47FE:  MOVLW  86
4800:  MOVWF  x2B
4802:  MOVLB  0
4804:  CALL   0C6C
4808:  MOVLB  1
480A:  CLRF   x26
480C:  CLRF   x25
480E:  MOVLW  48
4810:  MOVWF  x24
4812:  MOVLW  85
4814:  MOVWF  x23
4816:  MOVFF  03,12A
481A:  MOVFF  02,129
481E:  MOVFF  01,128
4822:  MOVFF  00,127
4826:  MOVLB  0
4828:  CALL   1374
482C:  MOVFF  00,109
4830:  MOVFF  01,10A
4834:  MOVFF  02,10B
4838:  MOVFF  03,10C
483C:  MOVLW  01
483E:  MOVLB  1
4840:  MOVWF  x0D
4842:  MOVLB  0
4844:  CALL   1796
4848:  MOVFF  00,10D
484C:  MOVFF  01,10E
4850:  MOVFF  02,10F
4854:  MOVFF  03,110
4858:  MOVLW  06
485A:  MOVWF  FF6
485C:  MOVLW  07
485E:  MOVWF  FF7
4860:  MOVLW  05
4862:  MOVLB  1
4864:  MOVWF  x11
4866:  MOVLB  0
4868:  CALL   1076
486C:  MOVLW  01
486E:  MOVWF  FE9
4870:  MOVFF  10C,114
4874:  MOVFF  10B,113
4878:  MOVFF  10A,112
487C:  MOVFF  109,111
4880:  MOVLB  1
4882:  CLRF   x15
4884:  MOVLB  0
4886:  CALL   152E
488A:  MOVLW  25
488C:  MOVLB  1
488E:  MOVWF  x1E
4890:  MOVLB  0
4892:  CALL   0BCA
4896:  MOVLW  12
4898:  MOVWF  FF6
489A:  MOVLW  07
489C:  MOVWF  FF7
489E:  MOVLW  04
48A0:  MOVLB  1
48A2:  MOVWF  x11
48A4:  MOVLB  0
48A6:  CALL   1076
48AA:  MOVLW  01
48AC:  MOVWF  FE9
48AE:  MOVFF  110,114
48B2:  MOVFF  10F,113
48B6:  MOVFF  10E,112
48BA:  MOVFF  10D,111
48BE:  MOVLB  1
48C0:  CLRF   x15
48C2:  MOVLB  0
48C4:  CALL   152E
48C8:  MOVLW  20
48CA:  MOVLB  1
48CC:  MOVWF  x1E
48CE:  MOVLB  0
48D0:  CALL   0BCA
....................    lcd_gotoxy(1,3); 
48D4:  MOVLW  01
48D6:  MOVLB  1
48D8:  MOVWF  x1F
48DA:  MOVLW  03
48DC:  MOVWF  x20
48DE:  MOVLB  0
48E0:  CALL   0B58
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
48E4:  MOVLW  02
48E6:  MOVLB  1
48E8:  MOVWF  x0D
48EA:  MOVLB  0
48EC:  CALL   1796
48F0:  MOVFF  00,109
48F4:  MOVFF  01,10A
48F8:  MOVFF  02,10B
48FC:  MOVFF  03,10C
4900:  MOVFF  03,12A
4904:  MOVFF  02,129
4908:  MOVFF  01,128
490C:  MOVFF  00,127
4910:  MOVLB  1
4912:  CLRF   x2E
4914:  MOVLW  C0
4916:  MOVWF  x2D
4918:  MOVLW  7F
491A:  MOVWF  x2C
491C:  MOVLW  88
491E:  MOVWF  x2B
4920:  MOVLB  0
4922:  CALL   0C6C
4926:  MOVLB  1
4928:  CLRF   x26
492A:  CLRF   x25
492C:  MOVLW  48
492E:  MOVWF  x24
4930:  MOVLW  85
4932:  MOVWF  x23
4934:  MOVFF  03,12A
4938:  MOVFF  02,129
493C:  MOVFF  01,128
4940:  MOVFF  00,127
4944:  MOVLB  0
4946:  CALL   1374
494A:  MOVFF  00,109
494E:  MOVFF  01,10A
4952:  MOVFF  02,10B
4956:  MOVFF  03,10C
495A:  MOVLW  1E
495C:  MOVWF  FF6
495E:  MOVLW  07
4960:  MOVWF  FF7
4962:  MOVLW  04
4964:  MOVLB  1
4966:  MOVWF  x11
4968:  MOVLB  0
496A:  CALL   1076
496E:  MOVLW  01
4970:  MOVWF  FE9
4972:  MOVFF  98,114
4976:  MOVFF  97,113
497A:  MOVFF  96,112
497E:  MOVFF  95,111
4982:  MOVLB  1
4984:  MOVWF  x15
4986:  MOVLB  0
4988:  CALL   152E
498C:  MOVLW  27
498E:  MOVWF  FF6
4990:  MOVLW  07
4992:  MOVWF  FF7
4994:  MOVLW  0A
4996:  MOVLB  1
4998:  MOVWF  x11
499A:  MOVLB  0
499C:  CALL   1076
49A0:  MOVLW  01
49A2:  MOVWF  FE9
49A4:  MOVFF  10C,114
49A8:  MOVFF  10B,113
49AC:  MOVFF  10A,112
49B0:  MOVFF  109,111
49B4:  MOVLB  1
49B6:  CLRF   x15
49B8:  MOVLB  0
49BA:  CALL   152E
....................    lcd_gotoxy(1,4); 
49BE:  MOVLW  01
49C0:  MOVLB  1
49C2:  MOVWF  x1F
49C4:  MOVLW  04
49C6:  MOVWF  x20
49C8:  MOVLB  0
49CA:  CALL   0B58
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
49CE:  MOVLW  38
49D0:  MOVWF  FF6
49D2:  MOVLW  07
49D4:  MOVWF  FF7
49D6:  MOVLW  09
49D8:  MOVLB  1
49DA:  MOVWF  x11
49DC:  MOVLB  0
49DE:  CALL   1076
49E2:  MOVLW  89
49E4:  MOVWF  FE9
49E6:  MOVFF  CC,114
49EA:  MOVFF  CB,113
49EE:  MOVFF  CA,112
49F2:  MOVFF  C9,111
49F6:  MOVLW  02
49F8:  MOVLB  1
49FA:  MOVWF  x15
49FC:  MOVLB  0
49FE:  CALL   152E
4A02:  MOVLW  20
4A04:  MOVLB  1
4A06:  MOVWF  x1E
4A08:  MOVLB  0
4A0A:  CALL   0BCA
....................        
....................       if(UP)//Si oprime hacia arriba 
4A0E:  BSF    F93.3
4A10:  BTFSS  F81.3
4A12:  BRA    4A88
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
4A14:  BCF    FD8.1
4A16:  MOVFF  CC,12A
4A1A:  MOVFF  CB,129
4A1E:  MOVFF  CA,128
4A22:  MOVFF  C9,127
4A26:  MOVLW  0A
4A28:  MOVLB  1
4A2A:  MOVWF  x2E
4A2C:  MOVLW  D7
4A2E:  MOVWF  x2D
4A30:  MOVLW  23
4A32:  MOVWF  x2C
4A34:  MOVLW  78
4A36:  MOVWF  x2B
4A38:  MOVLB  0
4A3A:  CALL   0DCA
4A3E:  MOVFF  03,CC
4A42:  MOVFF  02,CB
4A46:  MOVFF  01,CA
4A4A:  MOVFF  00,C9
4A4E:  MOVLW  32
4A50:  MOVLB  1
4A52:  MOVWF  x24
4A54:  MOVLB  0
4A56:  CALL   0A46
....................          if(Ajuste1>30.0) 
4A5A:  MOVLB  1
4A5C:  CLRF   x26
4A5E:  CLRF   x25
4A60:  MOVLW  70
4A62:  MOVWF  x24
4A64:  MOVLW  83
4A66:  MOVWF  x23
4A68:  MOVFF  CC,12A
4A6C:  MOVFF  CB,129
4A70:  MOVFF  CA,128
4A74:  MOVFF  C9,127
4A78:  MOVLB  0
4A7A:  CALL   16E0
4A7E:  BNC   4A88
....................          {Ajuste1=0.0;} 
4A80:  CLRF   xCC
4A82:  CLRF   xCB
4A84:  CLRF   xCA
4A86:  CLRF   xC9
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4A88:  BSF    F93.2
4A8A:  BTFSS  F81.2
4A8C:  BRA    4AFE
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
4A8E:  BSF    FD8.1
4A90:  MOVFF  CC,12A
4A94:  MOVFF  CB,129
4A98:  MOVFF  CA,128
4A9C:  MOVFF  C9,127
4AA0:  MOVLW  0A
4AA2:  MOVLB  1
4AA4:  MOVWF  x2E
4AA6:  MOVLW  D7
4AA8:  MOVWF  x2D
4AAA:  MOVLW  23
4AAC:  MOVWF  x2C
4AAE:  MOVLW  78
4AB0:  MOVWF  x2B
4AB2:  MOVLB  0
4AB4:  CALL   0DCA
4AB8:  MOVFF  03,CC
4ABC:  MOVFF  02,CB
4AC0:  MOVFF  01,CA
4AC4:  MOVFF  00,C9
4AC8:  MOVLW  32
4ACA:  MOVLB  1
4ACC:  MOVWF  x24
4ACE:  MOVLB  0
4AD0:  CALL   0A46
....................          if(Ajuste1<0.0) 
4AD4:  MOVFF  CC,126
4AD8:  MOVFF  CB,125
4ADC:  MOVFF  CA,124
4AE0:  MOVFF  C9,123
4AE4:  MOVLB  1
4AE6:  CLRF   x2A
4AE8:  CLRF   x29
4AEA:  CLRF   x28
4AEC:  CLRF   x27
4AEE:  MOVLB  0
4AF0:  CALL   16E0
4AF4:  BNC   4AFE
....................          {Ajuste1=0.0;} 
4AF6:  CLRF   xCC
4AF8:  CLRF   xCB
4AFA:  CLRF   xCA
4AFC:  CLRF   xC9
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
4AFE:  BSF    F93.0
4B00:  BTFSS  F81.0
4B02:  BRA    4C54
....................       {  if(Flanco1 == 0)  
4B04:  BTFSC  3E.5
4B06:  BRA    4C52
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4B08:  MOVLW  01
4B0A:  MOVWF  17
4B0C:  CLRF   40
4B0E:  MOVLW  02
4B10:  MOVWF  1B
4B12:  MOVWF  1D
4B14:  MOVLW  0B
4B16:  MOVWF  1A
4B18:  MOVLW  1E
4B1A:  MOVLB  1
4B1C:  MOVWF  x24
4B1E:  MOVLB  0
4B20:  CALL   0A46
4B24:  MOVLW  0C
4B26:  MOVLB  1
4B28:  MOVWF  x1E
4B2A:  MOVLB  0
4B2C:  CALL   0BCA
....................             Temporal=Ajuste1; 
4B30:  MOVFF  CC,B4
4B34:  MOVFF  CB,B3
4B38:  MOVFF  CA,B2
4B3C:  MOVFF  C9,B1
....................             Entero=(int)Ajuste1; 
4B40:  MOVFF  CC,10C
4B44:  MOVFF  CB,10B
4B48:  MOVFF  CA,10A
4B4C:  MOVFF  C9,109
4B50:  CALL   175A
4B54:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
4B58:  MOVLB  1
4B5A:  CLRF   x13
4B5C:  MOVFF  24,112
4B60:  MOVLB  0
4B62:  CALL   0C36
4B66:  BSF    FD8.1
4B68:  MOVFF  B4,12A
4B6C:  MOVFF  B3,129
4B70:  MOVFF  B2,128
4B74:  MOVFF  B1,127
4B78:  MOVFF  03,12E
4B7C:  MOVFF  02,12D
4B80:  MOVFF  01,12C
4B84:  MOVFF  00,12B
4B88:  CALL   0DCA
4B8C:  MOVFF  03,B4
4B90:  MOVFF  02,B3
4B94:  MOVFF  01,B2
4B98:  MOVFF  00,B1
....................             Temporal2=Temporal*100.0; 
4B9C:  MOVFF  B4,126
4BA0:  MOVFF  B3,125
4BA4:  MOVFF  B2,124
4BA8:  MOVFF  B1,123
4BAC:  MOVLB  1
4BAE:  CLRF   x2A
4BB0:  CLRF   x29
4BB2:  MOVLW  48
4BB4:  MOVWF  x28
4BB6:  MOVLW  85
4BB8:  MOVWF  x27
4BBA:  MOVLB  0
4BBC:  CALL   1374
4BC0:  MOVFF  03,B8
4BC4:  MOVFF  02,B7
4BC8:  MOVFF  01,B6
4BCC:  MOVFF  00,B5
....................             Decimal1=(int8)Temporal2; 
4BD0:  MOVFF  B8,10C
4BD4:  MOVFF  B7,10B
4BD8:  MOVFF  B6,10A
4BDC:  MOVFF  B5,109
4BE0:  CALL   175A
4BE4:  MOVFF  01,25
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
4BE8:  MOVLW  19
4BEA:  MOVWF  FA9
4BEC:  MOVFF  24,FA8
4BF0:  BCF    FA6.6
4BF2:  BCF    FA6.7
4BF4:  BSF    FA6.2
4BF6:  MOVF   FF2,W
4BF8:  MOVWF  00
4BFA:  BCF    FF2.7
4BFC:  MOVLB  F
4BFE:  MOVLW  55
4C00:  MOVWF  FA7
4C02:  MOVLW  AA
4C04:  MOVWF  FA7
4C06:  BSF    FA6.1
4C08:  BTFSC  FA6.1
4C0A:  BRA    4C08
4C0C:  BCF    FA6.2
4C0E:  MOVF   00,W
4C10:  IORWF  FF2,F
4C12:  MOVLW  1A
4C14:  MOVWF  FA9
4C16:  MOVFF  25,FA8
4C1A:  BCF    FA6.6
4C1C:  BCF    FA6.7
4C1E:  BSF    FA6.2
4C20:  MOVF   FF2,W
4C22:  MOVWF  00
4C24:  BCF    FF2.7
4C26:  MOVLW  55
4C28:  MOVWF  FA7
4C2A:  MOVLW  AA
4C2C:  MOVWF  FA7
4C2E:  BSF    FA6.1
4C30:  BTFSC  FA6.1
4C32:  BRA    4C30
4C34:  BCF    FA6.2
4C36:  MOVF   00,W
4C38:  IORWF  FF2,F
....................             delay_ms(1000); 
4C3A:  MOVLW  04
4C3C:  MOVLB  1
4C3E:  MOVWF  x09
4C40:  MOVLW  FA
4C42:  MOVWF  x24
4C44:  MOVLB  0
4C46:  CALL   0A46
4C4A:  MOVLB  1
4C4C:  DECFSZ x09,F
4C4E:  BRA    4C40
4C50:  MOVLB  0
....................             }} 
....................          else 
4C52:  BRA    4C56
....................             {Flanco1 = 0;}    
4C54:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4C56:  BSF    F93.1
4C58:  BTFSS  F81.1
4C5A:  BRA    4C92
....................       {  if(Flanco3 == 0)  
4C5C:  BTFSC  3E.7
4C5E:  BRA    4C90
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4C60:  MOVLW  01
4C62:  MOVWF  17
4C64:  CLRF   40
4C66:  MOVLW  02
4C68:  MOVWF  1B
4C6A:  MOVWF  1D
4C6C:  MOVLW  0B
4C6E:  MOVWF  1A
4C70:  MOVLW  02
4C72:  MOVLB  1
4C74:  MOVWF  x09
4C76:  MOVLW  FA
4C78:  MOVWF  x24
4C7A:  MOVLB  0
4C7C:  CALL   0A46
4C80:  MOVLB  1
4C82:  DECFSZ x09,F
4C84:  BRA    4C76
4C86:  MOVLW  0C
4C88:  MOVWF  x1E
4C8A:  MOVLB  0
4C8C:  CALL   0BCA
....................          else 
4C90:  BRA    4C94
....................             {Flanco3 = 0;}   
4C92:  BCF    3E.7
4C94:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
4C96:  MOVF   17,W
4C98:  SUBLW  09
4C9A:  BTFSS  FD8.2
4C9C:  BRA    52E4
....................    { 
....................    lcd_gotoxy(1,1); 
4C9E:  MOVLW  01
4CA0:  MOVWF  x1F
4CA2:  MOVWF  x20
4CA4:  MOVLB  0
4CA6:  CALL   0B58
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
4CAA:  MOVLB  1
4CAC:  CLRF   x13
4CAE:  MOVFF  2C,112
4CB2:  MOVLB  0
4CB4:  CALL   0C36
4CB8:  MOVFF  00,109
4CBC:  MOVFF  01,10A
4CC0:  MOVFF  02,10B
4CC4:  MOVFF  03,10C
4CC8:  MOVFF  03,12A
4CCC:  MOVFF  02,129
4CD0:  MOVFF  01,128
4CD4:  MOVFF  00,127
4CD8:  MOVLB  1
4CDA:  CLRF   x2E
4CDC:  CLRF   x2D
4CDE:  MOVLW  7F
4CE0:  MOVWF  x2C
4CE2:  MOVLW  86
4CE4:  MOVWF  x2B
4CE6:  MOVLB  0
4CE8:  CALL   0C6C
4CEC:  MOVLB  1
4CEE:  CLRF   x26
4CF0:  CLRF   x25
4CF2:  MOVLW  48
4CF4:  MOVWF  x24
4CF6:  MOVLW  85
4CF8:  MOVWF  x23
4CFA:  MOVFF  03,12A
4CFE:  MOVFF  02,129
4D02:  MOVFF  01,128
4D06:  MOVFF  00,127
4D0A:  MOVLB  0
4D0C:  CALL   1374
4D10:  MOVFF  00,109
4D14:  MOVFF  01,10A
4D18:  MOVFF  02,10B
4D1C:  MOVFF  03,10C
4D20:  MOVLW  48
4D22:  MOVWF  FF6
4D24:  MOVLW  07
4D26:  MOVWF  FF7
4D28:  MOVLW  0D
4D2A:  MOVLB  1
4D2C:  MOVWF  x11
4D2E:  MOVLB  0
4D30:  CALL   1076
4D34:  MOVLW  01
4D36:  MOVWF  FE9
4D38:  MOVFF  10C,114
4D3C:  MOVFF  10B,113
4D40:  MOVFF  10A,112
4D44:  MOVFF  109,111
4D48:  MOVLB  1
4D4A:  CLRF   x15
4D4C:  MOVLB  0
4D4E:  CALL   152E
4D52:  MOVLW  25
4D54:  MOVLB  1
4D56:  MOVWF  x1E
4D58:  MOVLB  0
4D5A:  CALL   0BCA
4D5E:  MOVLW  20
4D60:  MOVLB  1
4D62:  MOVWF  x1E
4D64:  MOVLB  0
4D66:  CALL   0BCA
....................  
....................    lcd_gotoxy(1,4); 
4D6A:  MOVLW  01
4D6C:  MOVLB  1
4D6E:  MOVWF  x1F
4D70:  MOVLW  04
4D72:  MOVWF  x20
4D74:  MOVLB  0
4D76:  CALL   0B58
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
4D7A:  MOVLW  02
4D7C:  MOVLB  1
4D7E:  MOVWF  x0D
4D80:  MOVLB  0
4D82:  CALL   1796
4D86:  MOVFF  00,109
4D8A:  MOVFF  01,10A
4D8E:  MOVFF  02,10B
4D92:  MOVFF  03,10C
4D96:  MOVFF  03,12A
4D9A:  MOVFF  02,129
4D9E:  MOVFF  01,128
4DA2:  MOVFF  00,127
4DA6:  MOVLB  1
4DA8:  CLRF   x2E
4DAA:  MOVLW  C0
4DAC:  MOVWF  x2D
4DAE:  MOVLW  7F
4DB0:  MOVWF  x2C
4DB2:  MOVLW  88
4DB4:  MOVWF  x2B
4DB6:  MOVLB  0
4DB8:  CALL   0C6C
4DBC:  MOVLB  1
4DBE:  CLRF   x26
4DC0:  CLRF   x25
4DC2:  MOVLW  48
4DC4:  MOVWF  x24
4DC6:  MOVLW  85
4DC8:  MOVWF  x23
4DCA:  MOVFF  03,12A
4DCE:  MOVFF  02,129
4DD2:  MOVFF  01,128
4DD6:  MOVFF  00,127
4DDA:  MOVLB  0
4DDC:  CALL   1374
4DE0:  MOVFF  00,109
4DE4:  MOVFF  01,10A
4DE8:  MOVFF  02,10B
4DEC:  MOVFF  03,10C
4DF0:  MOVLW  5E
4DF2:  MOVWF  FF6
4DF4:  MOVLW  07
4DF6:  MOVWF  FF7
4DF8:  MOVLW  04
4DFA:  MOVLB  1
4DFC:  MOVWF  x11
4DFE:  MOVLB  0
4E00:  CALL   1076
4E04:  MOVLW  01
4E06:  MOVWF  FE9
4E08:  MOVFF  98,114
4E0C:  MOVFF  97,113
4E10:  MOVFF  96,112
4E14:  MOVFF  95,111
4E18:  MOVLB  1
4E1A:  MOVWF  x15
4E1C:  MOVLB  0
4E1E:  CALL   152E
4E22:  MOVLW  67
4E24:  MOVWF  FF6
4E26:  MOVLW  07
4E28:  MOVWF  FF7
4E2A:  MOVLW  0A
4E2C:  MOVLB  1
4E2E:  MOVWF  x11
4E30:  MOVLB  0
4E32:  CALL   1076
4E36:  MOVLW  01
4E38:  MOVWF  FE9
4E3A:  MOVFF  10C,114
4E3E:  MOVFF  10B,113
4E42:  MOVFF  10A,112
4E46:  MOVFF  109,111
4E4A:  MOVLB  1
4E4C:  CLRF   x15
4E4E:  MOVLB  0
4E50:  CALL   152E
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
4E54:  BTFSC  58.1
4E56:  BRA    4FB6
4E58:  BTFSC  58.2
4E5A:  BRA    4FB6
4E5C:  BTFSC  58.3
4E5E:  BRA    4FB6
....................       { 
....................          if(UP)//Si oprime hacia arriba 
4E60:  BSF    F93.3
4E62:  BTFSS  F81.3
4E64:  BRA    4EC0
....................          { 
....................             delay_ms(500); 
4E66:  MOVLW  02
4E68:  MOVLB  1
4E6A:  MOVWF  x09
4E6C:  MOVLW  FA
4E6E:  MOVWF  x24
4E70:  MOVLB  0
4E72:  CALL   0A46
4E76:  MOVLB  1
4E78:  DECFSZ x09,F
4E7A:  BRA    4E6C
....................             if(UP) 
4E7C:  BSF    F93.3
4E7E:  BTFSS  F81.3
4E80:  BRA    4EBE
....................             { 
....................                lcd_gotoxy(1,2); 
4E82:  MOVLW  01
4E84:  MOVWF  x1F
4E86:  MOVLW  02
4E88:  MOVWF  x20
4E8A:  MOVLB  0
4E8C:  CALL   0B58
....................                printf(lcd_putc,"   Modo Manual  "); 
4E90:  MOVLW  78
4E92:  MOVWF  FF6
4E94:  MOVLW  07
4E96:  MOVWF  FF7
4E98:  CALL   1056
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4E9C:  BSF    58.1
4E9E:  BCF    58.2
4EA0:  BCF    58.3
4EA2:  MOVLW  0A
4EA4:  MOVWF  2F
4EA6:  MOVWF  31
....................                delay_ms(1000); 
4EA8:  MOVLW  04
4EAA:  MOVLB  1
4EAC:  MOVWF  x09
4EAE:  MOVLW  FA
4EB0:  MOVWF  x24
4EB2:  MOVLB  0
4EB4:  CALL   0A46
4EB8:  MOVLB  1
4EBA:  DECFSZ x09,F
4EBC:  BRA    4EAE
4EBE:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
4EC0:  BSF    F93.2
4EC2:  BTFSS  F81.2
4EC4:  BRA    4F20
....................          { 
....................             delay_ms(500); 
4EC6:  MOVLW  02
4EC8:  MOVLB  1
4ECA:  MOVWF  x09
4ECC:  MOVLW  FA
4ECE:  MOVWF  x24
4ED0:  MOVLB  0
4ED2:  CALL   0A46
4ED6:  MOVLB  1
4ED8:  DECFSZ x09,F
4EDA:  BRA    4ECC
....................             if(DOWN) 
4EDC:  BSF    F93.2
4EDE:  BTFSS  F81.2
4EE0:  BRA    4F1E
....................             { 
....................                lcd_gotoxy(1,2); 
4EE2:  MOVLW  01
4EE4:  MOVWF  x1F
4EE6:  MOVLW  02
4EE8:  MOVWF  x20
4EEA:  MOVLB  0
4EEC:  CALL   0B58
....................                printf(lcd_putc,"   Modo Auto   "); 
4EF0:  MOVLW  8A
4EF2:  MOVWF  FF6
4EF4:  MOVLW  07
4EF6:  MOVWF  FF7
4EF8:  CALL   1056
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
4EFC:  BSF    58.2
4EFE:  BCF    58.1
4F00:  BCF    58.3
4F02:  MOVLW  0A
4F04:  MOVWF  30
4F06:  MOVWF  31
....................                delay_ms(1000); 
4F08:  MOVLW  04
4F0A:  MOVLB  1
4F0C:  MOVWF  x09
4F0E:  MOVLW  FA
4F10:  MOVWF  x24
4F12:  MOVLB  0
4F14:  CALL   0A46
4F18:  MOVLB  1
4F1A:  DECFSZ x09,F
4F1C:  BRA    4F0E
4F1E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
4F20:  BSF    F93.0
4F22:  BTFSS  F81.0
4F24:  BRA    4F80
....................          { 
....................             delay_ms(500); 
4F26:  MOVLW  02
4F28:  MOVLB  1
4F2A:  MOVWF  x09
4F2C:  MOVLW  FA
4F2E:  MOVWF  x24
4F30:  MOVLB  0
4F32:  CALL   0A46
4F36:  MOVLB  1
4F38:  DECFSZ x09,F
4F3A:  BRA    4F2C
....................             if(RIGHT) 
4F3C:  BSF    F93.0
4F3E:  BTFSS  F81.0
4F40:  BRA    4F7E
....................             { 
....................                lcd_gotoxy(1,2); 
4F42:  MOVLW  01
4F44:  MOVWF  x1F
4F46:  MOVLW  02
4F48:  MOVWF  x20
4F4A:  MOVLB  0
4F4C:  CALL   0B58
....................                printf(lcd_putc,"   Modo Semi   "); 
4F50:  MOVLW  9A
4F52:  MOVWF  FF6
4F54:  MOVLW  07
4F56:  MOVWF  FF7
4F58:  CALL   1056
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4F5C:  BSF    58.3
4F5E:  BCF    58.1
4F60:  BCF    58.2
4F62:  MOVLW  0A
4F64:  MOVWF  2F
4F66:  MOVWF  30
....................                delay_ms(1000); 
4F68:  MOVLW  04
4F6A:  MOVLB  1
4F6C:  MOVWF  x09
4F6E:  MOVLW  FA
4F70:  MOVWF  x24
4F72:  MOVLB  0
4F74:  CALL   0A46
4F78:  MOVLB  1
4F7A:  DECFSZ x09,F
4F7C:  BRA    4F6E
4F7E:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
4F80:  BSF    F93.1
4F82:  BTFSS  F81.1
4F84:  BRA    4FB6
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4F86:  MOVLW  01
4F88:  MOVWF  17
4F8A:  CLRF   40
4F8C:  MOVLW  02
4F8E:  MOVWF  1B
4F90:  MOVWF  1D
4F92:  MOVLW  0B
4F94:  MOVWF  1A
4F96:  MOVLW  02
4F98:  MOVLB  1
4F9A:  MOVWF  x09
4F9C:  MOVLW  FA
4F9E:  MOVWF  x24
4FA0:  MOVLB  0
4FA2:  CALL   0A46
4FA6:  MOVLB  1
4FA8:  DECFSZ x09,F
4FAA:  BRA    4F9C
4FAC:  MOVLW  0C
4FAE:  MOVWF  x1E
4FB0:  MOVLB  0
4FB2:  CALL   0BCA
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4FB6:  BTFSC  58.1
4FB8:  BRA    4FC2
4FBA:  MOVF   30,W
4FBC:  SUBLW  14
4FBE:  BTFSS  FD8.2
4FC0:  BRA    50EA
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4FC2:  BCF    58.2
4FC4:  BCF    58.3
4FC6:  MOVLW  0A
4FC8:  MOVWF  2F
4FCA:  MOVWF  31
....................          lcd_gotoxy(1,2); 
4FCC:  MOVLW  01
4FCE:  MOVLB  1
4FD0:  MOVWF  x1F
4FD2:  MOVLW  02
4FD4:  MOVWF  x20
4FD6:  MOVLB  0
4FD8:  CALL   0B58
....................          printf(lcd_putc,"   Modo Manual  "); 
4FDC:  MOVLW  AA
4FDE:  MOVWF  FF6
4FE0:  MOVLW  07
4FE2:  MOVWF  FF7
4FE4:  CALL   1056
....................          lcd_gotoxy(1,3); 
4FE8:  MOVLW  01
4FEA:  MOVLB  1
4FEC:  MOVWF  x1F
4FEE:  MOVLW  03
4FF0:  MOVWF  x20
4FF2:  MOVLB  0
4FF4:  CALL   0B58
....................          printf(lcd_putc,"    Seleccionado    "); 
4FF8:  MOVLW  BC
4FFA:  MOVWF  FF6
4FFC:  MOVLW  07
4FFE:  MOVWF  FF7
5000:  CALL   1056
....................          if(LEFT) 
5004:  BSF    F93.1
5006:  BTFSS  F81.1
5008:  BRA    50EA
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
500A:  BCF    58.1
500C:  MOVLW  14
500E:  MOVWF  30
5010:  MOVLW  0A
5012:  MOVWF  2F
5014:  MOVWF  31
5016:  MOVLW  02
5018:  MOVLB  1
501A:  MOVWF  x09
501C:  MOVLW  FA
501E:  MOVWF  x24
5020:  MOVLB  0
5022:  CALL   0A46
5026:  MOVLB  1
5028:  DECFSZ x09,F
502A:  BRA    501C
502C:  MOVLW  0C
502E:  MOVWF  x1E
5030:  MOVLB  0
5032:  CALL   0BCA
5036:  MOVLW  FE
5038:  MOVLB  1
503A:  MOVWF  x09
503C:  MOVLB  0
503E:  CALL   17EE
5042:  MOVLW  FE
5044:  MOVWF  2C
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
5046:  MOVLW  0A
5048:  MOVWF  FA9
504A:  MOVFF  30,FA8
504E:  BCF    FA6.6
5050:  BCF    FA6.7
5052:  BSF    FA6.2
5054:  MOVF   FF2,W
5056:  MOVWF  00
5058:  BCF    FF2.7
505A:  MOVLB  F
505C:  MOVLW  55
505E:  MOVWF  FA7
5060:  MOVLW  AA
5062:  MOVWF  FA7
5064:  BSF    FA6.1
5066:  BTFSC  FA6.1
5068:  BRA    5066
506A:  BCF    FA6.2
506C:  MOVF   00,W
506E:  IORWF  FF2,F
5070:  MOVLW  0C
5072:  MOVWF  FA9
5074:  MOVFF  31,FA8
5078:  BCF    FA6.6
507A:  BCF    FA6.7
507C:  BSF    FA6.2
507E:  MOVF   FF2,W
5080:  MOVWF  00
5082:  BCF    FF2.7
5084:  MOVLW  55
5086:  MOVWF  FA7
5088:  MOVLW  AA
508A:  MOVWF  FA7
508C:  BSF    FA6.1
508E:  BTFSC  FA6.1
5090:  BRA    508E
5092:  BCF    FA6.2
5094:  MOVF   00,W
5096:  IORWF  FF2,F
5098:  MOVLW  0B
509A:  MOVWF  FA9
509C:  MOVFF  2F,FA8
50A0:  BCF    FA6.6
50A2:  BCF    FA6.7
50A4:  BSF    FA6.2
50A6:  MOVF   FF2,W
50A8:  MOVWF  00
50AA:  BCF    FF2.7
50AC:  MOVLW  55
50AE:  MOVWF  FA7
50B0:  MOVLW  AA
50B2:  MOVWF  FA7
50B4:  BSF    FA6.1
50B6:  BTFSC  FA6.1
50B8:  BRA    50B6
50BA:  BCF    FA6.2
50BC:  MOVF   00,W
50BE:  IORWF  FF2,F
50C0:  MOVLW  0D
50C2:  MOVWF  FA9
50C4:  MOVFF  2C,FA8
50C8:  BCF    FA6.6
50CA:  BCF    FA6.7
50CC:  BSF    FA6.2
50CE:  MOVF   FF2,W
50D0:  MOVWF  00
50D2:  BCF    FF2.7
50D4:  MOVLW  55
50D6:  MOVWF  FA7
50D8:  MOVLW  AA
50DA:  MOVWF  FA7
50DC:  BSF    FA6.1
50DE:  BTFSC  FA6.1
50E0:  BRA    50DE
50E2:  BCF    FA6.2
50E4:  MOVF   00,W
50E6:  IORWF  FF2,F
50E8:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
50EA:  BTFSC  58.2
50EC:  BRA    50F4
50EE:  MOVF   2F,W
50F0:  SUBLW  14
50F2:  BNZ   51BC
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
50F4:  BCF    58.1
50F6:  BCF    58.3
50F8:  MOVLW  0A
50FA:  MOVWF  31
50FC:  MOVWF  30
....................          lcd_gotoxy(1,2); 
50FE:  MOVLW  01
5100:  MOVLB  1
5102:  MOVWF  x1F
5104:  MOVLW  02
5106:  MOVWF  x20
5108:  MOVLB  0
510A:  CALL   0B58
....................          printf(lcd_putc,"   Modo Auto   "); 
510E:  MOVLW  D2
5110:  MOVWF  FF6
5112:  MOVLW  07
5114:  MOVWF  FF7
5116:  CALL   1056
....................          lcd_gotoxy(1,3); 
511A:  MOVLW  01
511C:  MOVLB  1
511E:  MOVWF  x1F
5120:  MOVLW  03
5122:  MOVWF  x20
5124:  MOVLB  0
5126:  CALL   0B58
....................          printf(lcd_putc,"    Seleccionado    "); 
512A:  MOVLW  E2
512C:  MOVWF  FF6
512E:  MOVLW  07
5130:  MOVWF  FF7
5132:  CALL   1056
....................          if(LEFT) 
5136:  BSF    F93.1
5138:  BTFSS  F81.1
513A:  BRA    51BC
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
513C:  BCF    58.2
513E:  MOVLW  14
5140:  MOVWF  2F
5142:  MOVLW  0A
5144:  MOVWF  31
5146:  MOVWF  30
5148:  MOVLW  02
514A:  MOVLB  1
514C:  MOVWF  x09
514E:  MOVLW  FA
5150:  MOVWF  x24
5152:  MOVLB  0
5154:  CALL   0A46
5158:  MOVLB  1
515A:  DECFSZ x09,F
515C:  BRA    514E
515E:  MOVLW  0C
5160:  MOVWF  x1E
5162:  MOVLB  0
5164:  CALL   0BCA
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
5168:  MOVLW  0B
516A:  MOVWF  FA9
516C:  MOVFF  2F,FA8
5170:  BCF    FA6.6
5172:  BCF    FA6.7
5174:  BSF    FA6.2
5176:  MOVF   FF2,W
5178:  MOVWF  00
517A:  BCF    FF2.7
517C:  MOVLB  F
517E:  MOVLW  55
5180:  MOVWF  FA7
5182:  MOVLW  AA
5184:  MOVWF  FA7
5186:  BSF    FA6.1
5188:  BTFSC  FA6.1
518A:  BRA    5188
518C:  BCF    FA6.2
518E:  MOVF   00,W
5190:  IORWF  FF2,F
5192:  MOVLW  0C
5194:  MOVWF  FA9
5196:  MOVFF  31,FA8
519A:  BCF    FA6.6
519C:  BCF    FA6.7
519E:  BSF    FA6.2
51A0:  MOVF   FF2,W
51A2:  MOVWF  00
51A4:  BCF    FF2.7
51A6:  MOVLW  55
51A8:  MOVWF  FA7
51AA:  MOVLW  AA
51AC:  MOVWF  FA7
51AE:  BSF    FA6.1
51B0:  BTFSC  FA6.1
51B2:  BRA    51B0
51B4:  BCF    FA6.2
51B6:  MOVF   00,W
51B8:  IORWF  FF2,F
51BA:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
51BC:  BTFSC  58.3
51BE:  BRA    51C8
51C0:  MOVF   31,W
51C2:  SUBLW  14
51C4:  BTFSS  FD8.2
51C6:  BRA    52E2
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
51C8:  BCF    58.1
51CA:  BCF    58.2
51CC:  MOVLW  0A
51CE:  MOVWF  2F
51D0:  MOVWF  30
....................          lcd_gotoxy(1,2); 
51D2:  MOVLW  01
51D4:  MOVLB  1
51D6:  MOVWF  x1F
51D8:  MOVLW  02
51DA:  MOVWF  x20
51DC:  MOVLB  0
51DE:  CALL   0B58
....................          printf(lcd_putc,"   Modo Semi   "); 
51E2:  MOVLW  F8
51E4:  MOVWF  FF6
51E6:  MOVLW  07
51E8:  MOVWF  FF7
51EA:  CALL   1056
....................          if(UP) 
51EE:  BSF    F93.3
51F0:  BTFSS  F81.3
51F2:  BRA    51F6
....................          { 
....................             tmp++; 
51F4:  INCF   2C,F
....................              
....................          } 
....................           
....................          if(DOWN) 
51F6:  BSF    F93.2
51F8:  BTFSS  F81.2
51FA:  BRA    51FE
....................          { 
....................             tmp--; 
51FC:  DECF   2C,F
....................          } 
....................          ValorSemi=tmp; 
51FE:  MOVFF  2C,32
....................          ajustar_damper(tmp); 
5202:  MOVFF  2C,109
5206:  CALL   17EE
....................          if(LEFT) 
520A:  BSF    F93.1
520C:  BTFSS  F81.1
520E:  BRA    52E2
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5210:  MOVLW  0D
5212:  MOVWF  FA9
5214:  MOVFF  2C,FA8
5218:  BCF    FA6.6
521A:  BCF    FA6.7
521C:  BSF    FA6.2
521E:  MOVF   FF2,W
5220:  MOVWF  00
5222:  BCF    FF2.7
5224:  MOVLB  F
5226:  MOVLW  55
5228:  MOVWF  FA7
522A:  MOVLW  AA
522C:  MOVWF  FA7
522E:  BSF    FA6.1
5230:  BTFSC  FA6.1
5232:  BRA    5230
5234:  BCF    FA6.2
5236:  MOVF   00,W
5238:  IORWF  FF2,F
523A:  BCF    58.3
523C:  MOVLW  14
523E:  MOVWF  31
5240:  MOVLW  0A
5242:  MOVWF  2F
5244:  MOVWF  30
5246:  MOVLW  02
5248:  MOVLB  1
524A:  MOVWF  x09
524C:  MOVLW  FA
524E:  MOVWF  x24
5250:  MOVLB  0
5252:  CALL   0A46
5256:  MOVLB  1
5258:  DECFSZ x09,F
525A:  BRA    524C
525C:  MOVLW  0C
525E:  MOVWF  x1E
5260:  MOVLB  0
5262:  CALL   0BCA
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
5266:  MOVLW  0C
5268:  MOVWF  FA9
526A:  MOVFF  31,FA8
526E:  BCF    FA6.6
5270:  BCF    FA6.7
5272:  BSF    FA6.2
5274:  MOVF   FF2,W
5276:  MOVWF  00
5278:  BCF    FF2.7
527A:  MOVLB  F
527C:  MOVLW  55
527E:  MOVWF  FA7
5280:  MOVLW  AA
5282:  MOVWF  FA7
5284:  BSF    FA6.1
5286:  BTFSC  FA6.1
5288:  BRA    5286
528A:  BCF    FA6.2
528C:  MOVF   00,W
528E:  IORWF  FF2,F
5290:  MOVLW  0B
5292:  MOVWF  FA9
5294:  MOVFF  2F,FA8
5298:  BCF    FA6.6
529A:  BCF    FA6.7
529C:  BSF    FA6.2
529E:  MOVF   FF2,W
52A0:  MOVWF  00
52A2:  BCF    FF2.7
52A4:  MOVLW  55
52A6:  MOVWF  FA7
52A8:  MOVLW  AA
52AA:  MOVWF  FA7
52AC:  BSF    FA6.1
52AE:  BTFSC  FA6.1
52B0:  BRA    52AE
52B2:  BCF    FA6.2
52B4:  MOVF   00,W
52B6:  IORWF  FF2,F
52B8:  MOVLW  0A
52BA:  MOVWF  FA9
52BC:  MOVFF  30,FA8
52C0:  BCF    FA6.6
52C2:  BCF    FA6.7
52C4:  BSF    FA6.2
52C6:  MOVF   FF2,W
52C8:  MOVWF  00
52CA:  BCF    FF2.7
52CC:  MOVLW  55
52CE:  MOVWF  FA7
52D0:  MOVLW  AA
52D2:  MOVWF  FA7
52D4:  BSF    FA6.1
52D6:  BTFSC  FA6.1
52D8:  BRA    52D6
52DA:  BCF    FA6.2
52DC:  MOVF   00,W
52DE:  IORWF  FF2,F
52E0:  MOVLB  0
52E2:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //----------------Menu10--------------------------------------------------------------- 
....................    if(Menu == 10)// Menu de Tiempo de Purga 
52E4:  MOVF   17,W
52E6:  SUBLW  0A
52E8:  BTFSS  FD8.2
52EA:  BRA    55B6
....................    { 
....................       lcd_gotoxy(1,1); 
52EC:  MOVLW  01
52EE:  MOVWF  x1F
52F0:  MOVWF  x20
52F2:  MOVLB  0
52F4:  CALL   0B58
....................       printf(lcd_putc,"     Tiempo  de      "); 
52F8:  MOVLW  08
52FA:  MOVWF  FF6
52FC:  MOVLW  08
52FE:  MOVWF  FF7
5300:  CALL   1056
....................       lcd_gotoxy(1,2); 
5304:  MOVLW  01
5306:  MOVLB  1
5308:  MOVWF  x1F
530A:  MOVLW  02
530C:  MOVWF  x20
530E:  MOVLB  0
5310:  CALL   0B58
....................       printf(lcd_putc,"       Purga         "); 
5314:  MOVLW  1E
5316:  MOVWF  FF6
5318:  MOVLW  08
531A:  MOVWF  FF7
531C:  CALL   1056
....................       lcd_gotoxy(6,3); 
5320:  MOVLW  06
5322:  MOVLB  1
5324:  MOVWF  x1F
5326:  MOVLW  03
5328:  MOVWF  x20
532A:  MOVLB  0
532C:  CALL   0B58
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
5330:  MOVFF  23,109
5334:  MOVLW  01
5336:  MOVLB  1
5338:  MOVWF  x0A
533A:  MOVLB  0
533C:  CALL   12F8
5340:  MOVLW  3A
5342:  MOVLB  1
5344:  MOVWF  x1E
5346:  MOVLB  0
5348:  CALL   0BCA
534C:  MOVFF  38,109
5350:  MOVLW  01
5352:  MOVLB  1
5354:  MOVWF  x0A
5356:  MOVLB  0
5358:  CALL   12F8
535C:  MOVLW  3D
535E:  MOVWF  FF6
5360:  MOVLW  08
5362:  MOVWF  FF7
5364:  MOVLW  08
5366:  MOVLB  1
5368:  MOVWF  x11
536A:  MOVLB  0
536C:  CALL   1076
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
5370:  MOVLW  06
5372:  ADDWF  21,W
5374:  MOVLB  1
5376:  MOVWF  x09
5378:  MOVWF  x1F
537A:  MOVLW  04
537C:  MOVWF  x20
537E:  MOVLB  0
5380:  CALL   0B58
....................       lcd_putc(t[2]); 
5384:  MOVFF  43,11E
5388:  CALL   0BCA
....................        
....................       if(unidad2<1) 
538C:  MOVF   21,F
538E:  BNZ   539A
....................          unidad2==1; 
5390:  DECFSZ 21,W
5392:  BRA    5396
5394:  BRA    539A
5396:  MOVLW  00
5398:  BRA    539A
....................       if(unidad2>3) 
539A:  MOVF   21,W
539C:  SUBLW  03
539E:  BC    53AA
....................          unidad2==3;    
53A0:  MOVF   21,W
53A2:  SUBLW  03
53A4:  BZ    53AA
53A6:  MOVLW  00
53A8:  BRA    53AA
....................        
....................       if(UP) 
53AA:  BSF    F93.3
53AC:  BTFSS  F81.3
53AE:  BRA    53FA
....................       { 
....................          if(unidad2==1) 
53B0:  DECFSZ 21,W
53B2:  BRA    53D4
....................          { 
....................             if(purga_minutos_pro<61) 
53B4:  MOVF   23,W
53B6:  SUBLW  3C
53B8:  BNC   53D4
....................             { 
....................                purga_minutos_pro++;delay_ms(300); 
53BA:  INCF   23,F
53BC:  MOVLW  02
53BE:  MOVLB  1
53C0:  MOVWF  x09
53C2:  MOVLW  96
53C4:  MOVWF  x24
53C6:  MOVLB  0
53C8:  CALL   0A46
53CC:  MOVLB  1
53CE:  DECFSZ x09,F
53D0:  BRA    53C2
53D2:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
53D4:  MOVF   21,W
53D6:  SUBLW  03
53D8:  BNZ   53FA
....................          { 
....................             if(purga_segundos_pro<60) 
53DA:  MOVF   38,W
53DC:  SUBLW  3B
53DE:  BNC   53FA
....................             { 
....................                purga_segundos_pro++;delay_ms(300); 
53E0:  INCF   38,F
53E2:  MOVLW  02
53E4:  MOVLB  1
53E6:  MOVWF  x09
53E8:  MOVLW  96
53EA:  MOVWF  x24
53EC:  MOVLB  0
53EE:  CALL   0A46
53F2:  MOVLB  1
53F4:  DECFSZ x09,F
53F6:  BRA    53E8
53F8:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
53FA:  BSF    F93.2
53FC:  BTFSS  F81.2
53FE:  BRA    548C
....................       { 
....................          if(unidad2==1) 
5400:  DECFSZ 21,W
5402:  BRA    5446
....................          { 
....................             if(purga_minutos_pro>1) 
5404:  MOVF   23,W
5406:  SUBLW  01
5408:  BC    5424
....................             { 
....................                purga_minutos_pro--;delay_ms(300); 
540A:  DECF   23,F
540C:  MOVLW  02
540E:  MOVLB  1
5410:  MOVWF  x09
5412:  MOVLW  96
5414:  MOVWF  x24
5416:  MOVLB  0
5418:  CALL   0A46
541C:  MOVLB  1
541E:  DECFSZ x09,F
5420:  BRA    5412
5422:  MOVLB  0
....................             } 
....................              
....................             if(purga_minutos_pro>60) 
5424:  MOVF   23,W
5426:  SUBLW  3C
5428:  BC    5446
....................             { 
....................                purga_minutos_pro=60;delay_ms(300); 
542A:  MOVLW  3C
542C:  MOVWF  23
542E:  MOVLW  02
5430:  MOVLB  1
5432:  MOVWF  x09
5434:  MOVLW  96
5436:  MOVWF  x24
5438:  MOVLB  0
543A:  CALL   0A46
543E:  MOVLB  1
5440:  DECFSZ x09,F
5442:  BRA    5434
5444:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
5446:  MOVF   21,W
5448:  SUBLW  03
544A:  BNZ   548C
....................          { 
....................             if(purga_segundos_pro>0) 
544C:  MOVF   38,F
544E:  BZ    546A
....................             { 
....................                purga_segundos_pro--;delay_ms(300); 
5450:  DECF   38,F
5452:  MOVLW  02
5454:  MOVLB  1
5456:  MOVWF  x09
5458:  MOVLW  96
545A:  MOVWF  x24
545C:  MOVLB  0
545E:  CALL   0A46
5462:  MOVLB  1
5464:  DECFSZ x09,F
5466:  BRA    5458
5468:  MOVLB  0
....................             } 
....................              
....................             if(purga_segundos_pro>59) 
546A:  MOVF   38,W
546C:  SUBLW  3B
546E:  BC    548C
....................             { 
....................                purga_segundos_pro=59;delay_ms(300); 
5470:  MOVLW  3B
5472:  MOVWF  38
5474:  MOVLW  02
5476:  MOVLB  1
5478:  MOVWF  x09
547A:  MOVLW  96
547C:  MOVWF  x24
547E:  MOVLB  0
5480:  CALL   0A46
5484:  MOVLB  1
5486:  DECFSZ x09,F
5488:  BRA    547A
548A:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
548C:  BSF    F93.0
548E:  BTFSS  F81.0
5490:  BRA    54CC
....................       { 
....................          if(unidad2==1) 
5492:  DECFSZ 21,W
5494:  BRA    549C
....................          { 
....................             unidad2=3; 
5496:  MOVLW  03
5498:  MOVWF  21
....................          } 
....................          else 
549A:  BRA    54AC
....................          { 
....................             if(unidad2==3) 
549C:  MOVF   21,W
549E:  SUBLW  03
54A0:  BNZ   54A8
....................             { 
....................                unidad2=1; 
54A2:  MOVLW  01
54A4:  MOVWF  21
....................             } 
....................             else 
54A6:  BRA    54AC
....................             { 
....................                unidad2=3; 
54A8:  MOVLW  03
54AA:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
54AC:  MOVLW  02
54AE:  MOVLB  1
54B0:  MOVWF  x09
54B2:  MOVLW  FA
54B4:  MOVWF  x24
54B6:  MOVLB  0
54B8:  CALL   0A46
54BC:  MOVLB  1
54BE:  DECFSZ x09,F
54C0:  BRA    54B2
....................          printf(lcd_putc,"\f"); 
54C2:  MOVLW  0C
54C4:  MOVWF  x1E
54C6:  MOVLB  0
54C8:  CALL   0BCA
....................       } 
....................        
....................       if(LEFT) 
54CC:  BSF    F93.1
54CE:  BTFSS  F81.1
54D0:  BRA    55B4
....................       { 
....................          delay_ms(200); 
54D2:  MOVLW  C8
54D4:  MOVLB  1
54D6:  MOVWF  x24
54D8:  MOVLB  0
54DA:  CALL   0A46
....................          printf(lcd_putc,"\f"); 
54DE:  MOVLW  0C
54E0:  MOVLB  1
54E2:  MOVWF  x1E
54E4:  MOVLB  0
54E6:  CALL   0BCA
....................          lcd_gotoxy(1,2); 
54EA:  MOVLW  01
54EC:  MOVLB  1
54EE:  MOVWF  x1F
54F0:  MOVLW  02
54F2:  MOVWF  x20
54F4:  MOVLB  0
54F6:  CALL   0B58
....................          printf(lcd_putc,"Tiempo Almacenado"); 
54FA:  MOVLW  46
54FC:  MOVWF  FF6
54FE:  MOVLW  08
5500:  MOVWF  FF7
5502:  CALL   1056
....................          lcd_gotoxy(1,3); 
5506:  MOVLW  01
5508:  MOVLB  1
550A:  MOVWF  x1F
550C:  MOVLW  03
550E:  MOVWF  x20
5510:  MOVLB  0
5512:  CALL   0B58
....................          printf(lcd_putc,"  Correctamente  "); 
5516:  MOVLW  58
5518:  MOVWF  FF6
551A:  MOVLW  08
551C:  MOVWF  FF7
551E:  CALL   1056
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
5522:  MOVLW  14
5524:  MOVWF  FA9
5526:  MOVFF  23,FA8
552A:  BCF    FA6.6
552C:  BCF    FA6.7
552E:  BSF    FA6.2
5530:  MOVF   FF2,W
5532:  MOVWF  00
5534:  BCF    FF2.7
5536:  MOVLB  F
5538:  MOVLW  55
553A:  MOVWF  FA7
553C:  MOVLW  AA
553E:  MOVWF  FA7
5540:  BSF    FA6.1
5542:  BTFSC  FA6.1
5544:  BRA    5542
5546:  BCF    FA6.2
5548:  MOVF   00,W
554A:  IORWF  FF2,F
554C:  MOVLW  15
554E:  MOVWF  FA9
5550:  MOVFF  38,FA8
5554:  BCF    FA6.6
5556:  BCF    FA6.7
5558:  BSF    FA6.2
555A:  MOVF   FF2,W
555C:  MOVWF  00
555E:  BCF    FF2.7
5560:  MOVLW  55
5562:  MOVWF  FA7
5564:  MOVLW  AA
5566:  MOVWF  FA7
5568:  BSF    FA6.1
556A:  BTFSC  FA6.1
556C:  BRA    556A
556E:  BCF    FA6.2
5570:  MOVF   00,W
5572:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
5574:  MOVFF  23,22
5578:  MOVFF  38,37
....................          delay_ms(700); 
557C:  MOVLW  04
557E:  MOVLB  1
5580:  MOVWF  x09
5582:  MOVLW  AF
5584:  MOVWF  x24
5586:  MOVLB  0
5588:  CALL   0A46
558C:  MOVLB  1
558E:  DECFSZ x09,F
5590:  BRA    5582
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
5592:  MOVLW  1E
5594:  MOVWF  x24
5596:  MOVLB  0
5598:  CALL   0A46
559C:  MOVLW  01
559E:  MOVWF  17
55A0:  CLRF   40
55A2:  MOVLW  02
55A4:  MOVWF  1B
55A6:  MOVWF  1D
55A8:  MOVLW  0C
55AA:  MOVLB  1
55AC:  MOVWF  x1E
55AE:  MOVLB  0
55B0:  CALL   0BCA
55B4:  MOVLB  1
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu10--------------------------------------------------------------- 
....................  
.................... //----------------Menu11--------------------------------------------------------------- 
....................    if(Menu == 11)// Menu de Tiempo de Post-Purga 
55B6:  MOVF   17,W
55B8:  SUBLW  0B
55BA:  BTFSS  FD8.2
55BC:  BRA    5882
....................    { 
....................       lcd_gotoxy(1,1); 
55BE:  MOVLW  01
55C0:  MOVWF  x1F
55C2:  MOVWF  x20
55C4:  MOVLB  0
55C6:  CALL   0B58
....................       printf(lcd_putc,"     Tiempo  de      "); 
55CA:  MOVLW  6A
55CC:  MOVWF  FF6
55CE:  MOVLW  08
55D0:  MOVWF  FF7
55D2:  CALL   1056
....................       lcd_gotoxy(1,2); 
55D6:  MOVLW  01
55D8:  MOVLB  1
55DA:  MOVWF  x1F
55DC:  MOVLW  02
55DE:  MOVWF  x20
55E0:  MOVLB  0
55E2:  CALL   0B58
....................       printf(lcd_putc,"     Post-Purga      "); 
55E6:  MOVLW  80
55E8:  MOVWF  FF6
55EA:  MOVLW  08
55EC:  MOVWF  FF7
55EE:  CALL   1056
....................       lcd_gotoxy(6,3); 
55F2:  MOVLW  06
55F4:  MOVLB  1
55F6:  MOVWF  x1F
55F8:  MOVLW  03
55FA:  MOVWF  x20
55FC:  MOVLB  0
55FE:  CALL   0B58
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
5602:  MOVFF  3C,109
5606:  MOVLW  01
5608:  MOVLB  1
560A:  MOVWF  x0A
560C:  MOVLB  0
560E:  CALL   12F8
5612:  MOVLW  3A
5614:  MOVLB  1
5616:  MOVWF  x1E
5618:  MOVLB  0
561A:  CALL   0BCA
561E:  MOVFF  3A,109
5622:  MOVLW  01
5624:  MOVLB  1
5626:  MOVWF  x0A
5628:  MOVLB  0
562A:  CALL   12F8
562E:  MOVLW  9F
5630:  MOVWF  FF6
5632:  MOVLW  08
5634:  MOVWF  FF7
5636:  MOVLW  08
5638:  MOVLB  1
563A:  MOVWF  x11
563C:  MOVLB  0
563E:  CALL   1076
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
5642:  MOVLW  06
5644:  ADDWF  21,W
5646:  MOVLB  1
5648:  MOVWF  x09
564A:  MOVWF  x1F
564C:  MOVLW  04
564E:  MOVWF  x20
5650:  MOVLB  0
5652:  CALL   0B58
....................       lcd_putc(t[2]); 
5656:  MOVFF  43,11E
565A:  CALL   0BCA
....................       if(unidad2<1) 
565E:  MOVF   21,F
5660:  BNZ   566C
....................          unidad2==1; 
5662:  DECFSZ 21,W
5664:  BRA    5668
5666:  BRA    566C
5668:  MOVLW  00
566A:  BRA    566C
....................       if(unidad2>3) 
566C:  MOVF   21,W
566E:  SUBLW  03
5670:  BC    567C
....................          unidad2==3;    
5672:  MOVF   21,W
5674:  SUBLW  03
5676:  BZ    567C
5678:  MOVLW  00
567A:  BRA    567C
....................        
....................       if(UP) 
567C:  BSF    F93.3
567E:  BTFSS  F81.3
5680:  BRA    56CC
....................       { 
....................          if(unidad2==1) 
5682:  DECFSZ 21,W
5684:  BRA    56A6
....................          { 
....................             if(ppurga_minutos_pro<61) 
5686:  MOVF   3C,W
5688:  SUBLW  3C
568A:  BNC   56A6
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
568C:  INCF   3C,F
568E:  MOVLW  02
5690:  MOVLB  1
5692:  MOVWF  x09
5694:  MOVLW  96
5696:  MOVWF  x24
5698:  MOVLB  0
569A:  CALL   0A46
569E:  MOVLB  1
56A0:  DECFSZ x09,F
56A2:  BRA    5694
56A4:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
56A6:  MOVF   21,W
56A8:  SUBLW  03
56AA:  BNZ   56CC
....................          { 
....................             if(ppurga_segundos_pro<60) 
56AC:  MOVF   3A,W
56AE:  SUBLW  3B
56B0:  BNC   56CC
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
56B2:  INCF   3A,F
56B4:  MOVLW  02
56B6:  MOVLB  1
56B8:  MOVWF  x09
56BA:  MOVLW  96
56BC:  MOVWF  x24
56BE:  MOVLB  0
56C0:  CALL   0A46
56C4:  MOVLB  1
56C6:  DECFSZ x09,F
56C8:  BRA    56BA
56CA:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
56CC:  BSF    F93.2
56CE:  BTFSS  F81.2
56D0:  BRA    575E
....................       { 
....................          if(unidad2==1) 
56D2:  DECFSZ 21,W
56D4:  BRA    5718
....................          { 
....................             if(ppurga_minutos_pro>1) 
56D6:  MOVF   3C,W
56D8:  SUBLW  01
56DA:  BC    56F6
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
56DC:  DECF   3C,F
56DE:  MOVLW  02
56E0:  MOVLB  1
56E2:  MOVWF  x09
56E4:  MOVLW  96
56E6:  MOVWF  x24
56E8:  MOVLB  0
56EA:  CALL   0A46
56EE:  MOVLB  1
56F0:  DECFSZ x09,F
56F2:  BRA    56E4
56F4:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
56F6:  MOVF   3C,W
56F8:  SUBLW  3C
56FA:  BC    5718
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
56FC:  MOVLW  3C
56FE:  MOVWF  3C
5700:  MOVLW  02
5702:  MOVLB  1
5704:  MOVWF  x09
5706:  MOVLW  96
5708:  MOVWF  x24
570A:  MOVLB  0
570C:  CALL   0A46
5710:  MOVLB  1
5712:  DECFSZ x09,F
5714:  BRA    5706
5716:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
5718:  MOVF   21,W
571A:  SUBLW  03
571C:  BNZ   575E
....................          { 
....................             if(ppurga_segundos_pro>0) 
571E:  MOVF   3A,F
5720:  BZ    573C
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
5722:  DECF   3A,F
5724:  MOVLW  02
5726:  MOVLB  1
5728:  MOVWF  x09
572A:  MOVLW  96
572C:  MOVWF  x24
572E:  MOVLB  0
5730:  CALL   0A46
5734:  MOVLB  1
5736:  DECFSZ x09,F
5738:  BRA    572A
573A:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
573C:  MOVF   3A,W
573E:  SUBLW  3B
5740:  BC    575E
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
5742:  MOVLW  3B
5744:  MOVWF  3A
5746:  MOVLW  02
5748:  MOVLB  1
574A:  MOVWF  x09
574C:  MOVLW  96
574E:  MOVWF  x24
5750:  MOVLB  0
5752:  CALL   0A46
5756:  MOVLB  1
5758:  DECFSZ x09,F
575A:  BRA    574C
575C:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
575E:  BSF    F93.0
5760:  BTFSS  F81.0
5762:  BRA    5798
....................       { 
....................          if(unidad2==1) 
5764:  DECFSZ 21,W
5766:  BRA    576E
....................          { 
....................             unidad2=3; 
5768:  MOVLW  03
576A:  MOVWF  21
....................          } 
....................          else 
576C:  BRA    5778
....................          { 
....................             if(unidad2==3) 
576E:  MOVF   21,W
5770:  SUBLW  03
5772:  BNZ   5778
....................             { 
....................                unidad2=1; 
5774:  MOVLW  01
5776:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
5778:  MOVLW  02
577A:  MOVLB  1
577C:  MOVWF  x09
577E:  MOVLW  FA
5780:  MOVWF  x24
5782:  MOVLB  0
5784:  CALL   0A46
5788:  MOVLB  1
578A:  DECFSZ x09,F
578C:  BRA    577E
....................          printf(lcd_putc,"\f"); 
578E:  MOVLW  0C
5790:  MOVWF  x1E
5792:  MOVLB  0
5794:  CALL   0BCA
....................       } 
....................        
....................       if(LEFT) 
5798:  BSF    F93.1
579A:  BTFSS  F81.1
579C:  BRA    5880
....................       { 
....................          delay_ms(200); 
579E:  MOVLW  C8
57A0:  MOVLB  1
57A2:  MOVWF  x24
57A4:  MOVLB  0
57A6:  CALL   0A46
....................          printf(lcd_putc,"\f"); 
57AA:  MOVLW  0C
57AC:  MOVLB  1
57AE:  MOVWF  x1E
57B0:  MOVLB  0
57B2:  CALL   0BCA
....................          lcd_gotoxy(1,2); 
57B6:  MOVLW  01
57B8:  MOVLB  1
57BA:  MOVWF  x1F
57BC:  MOVLW  02
57BE:  MOVWF  x20
57C0:  MOVLB  0
57C2:  CALL   0B58
....................          printf(lcd_putc,"Tiempo Almacenado"); 
57C6:  MOVLW  A8
57C8:  MOVWF  FF6
57CA:  MOVLW  08
57CC:  MOVWF  FF7
57CE:  CALL   1056
....................          lcd_gotoxy(1,3); 
57D2:  MOVLW  01
57D4:  MOVLB  1
57D6:  MOVWF  x1F
57D8:  MOVLW  03
57DA:  MOVWF  x20
57DC:  MOVLB  0
57DE:  CALL   0B58
....................          printf(lcd_putc,"  Correctamente  "); 
57E2:  MOVLW  BA
57E4:  MOVWF  FF6
57E6:  MOVLW  08
57E8:  MOVWF  FF7
57EA:  CALL   1056
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
57EE:  MOVLW  16
57F0:  MOVWF  FA9
57F2:  MOVFF  3C,FA8
57F6:  BCF    FA6.6
57F8:  BCF    FA6.7
57FA:  BSF    FA6.2
57FC:  MOVF   FF2,W
57FE:  MOVWF  00
5800:  BCF    FF2.7
5802:  MOVLB  F
5804:  MOVLW  55
5806:  MOVWF  FA7
5808:  MOVLW  AA
580A:  MOVWF  FA7
580C:  BSF    FA6.1
580E:  BTFSC  FA6.1
5810:  BRA    580E
5812:  BCF    FA6.2
5814:  MOVF   00,W
5816:  IORWF  FF2,F
5818:  MOVLW  17
581A:  MOVWF  FA9
581C:  MOVFF  3A,FA8
5820:  BCF    FA6.6
5822:  BCF    FA6.7
5824:  BSF    FA6.2
5826:  MOVF   FF2,W
5828:  MOVWF  00
582A:  BCF    FF2.7
582C:  MOVLW  55
582E:  MOVWF  FA7
5830:  MOVLW  AA
5832:  MOVWF  FA7
5834:  BSF    FA6.1
5836:  BTFSC  FA6.1
5838:  BRA    5836
583A:  BCF    FA6.2
583C:  MOVF   00,W
583E:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
5840:  MOVFF  3C,3B
5844:  MOVFF  3A,39
....................          delay_ms(700); 
5848:  MOVLW  04
584A:  MOVLB  1
584C:  MOVWF  x09
584E:  MOVLW  AF
5850:  MOVWF  x24
5852:  MOVLB  0
5854:  CALL   0A46
5858:  MOVLB  1
585A:  DECFSZ x09,F
585C:  BRA    584E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
585E:  MOVLW  1E
5860:  MOVWF  x24
5862:  MOVLB  0
5864:  CALL   0A46
5868:  MOVLW  01
586A:  MOVWF  17
586C:  CLRF   40
586E:  MOVLW  02
5870:  MOVWF  1B
5872:  MOVWF  1D
5874:  MOVLW  0C
5876:  MOVLB  1
5878:  MOVWF  x1E
587A:  MOVLB  0
587C:  CALL   0BCA
5880:  MOVLB  1
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu11--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
5882:  MOVF   17,W
5884:  SUBLW  14
5886:  BTFSS  FD8.2
5888:  BRA    5AC6
....................    { 
....................       if(Lectura2==1) 
588A:  BTFSS  3F.6
588C:  BRA    58FE
....................       { 
....................       lcd_gotoxy(1,1);                      
588E:  MOVLW  01
5890:  MOVWF  x1F
5892:  MOVWF  x20
5894:  MOVLB  0
5896:  CALL   0B58
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
589A:  MOVLW  CC
589C:  MOVWF  FF6
589E:  MOVLW  08
58A0:  MOVWF  FF7
58A2:  CALL   1056
....................       lcd_gotoxy(1,2); 
58A6:  MOVLW  01
58A8:  MOVLB  1
58AA:  MOVWF  x1F
58AC:  MOVLW  02
58AE:  MOVWF  x20
58B0:  MOVLB  0
58B2:  CALL   0B58
....................       //printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
....................       printf(lcd_putc,"Ext= ---"); 
58B6:  MOVLW  D6
58B8:  MOVWF  FF6
58BA:  MOVLW  08
58BC:  MOVWF  FF7
58BE:  CALL   1056
....................       lcd_gotoxy(1,3); 
58C2:  MOVLW  01
58C4:  MOVLB  1
58C6:  MOVWF  x1F
58C8:  MOVLW  03
58CA:  MOVWF  x20
58CC:  MOVLB  0
58CE:  CALL   0B58
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       printf(lcd_putc,"InFlow= ---   "); 
58D2:  MOVLW  E0
58D4:  MOVWF  FF6
58D6:  MOVLW  08
58D8:  MOVWF  FF7
58DA:  CALL   1056
....................       lcd_gotoxy(11,2); 
58DE:  MOVLW  0B
58E0:  MOVLB  1
58E2:  MOVWF  x1F
58E4:  MOVLW  02
58E6:  MOVWF  x20
58E8:  MOVLB  0
58EA:  CALL   0B58
....................       printf(lcd_putc,"Flujo=--- ");   
58EE:  MOVLW  F0
58F0:  MOVWF  FF6
58F2:  MOVLW  08
58F4:  MOVWF  FF7
58F6:  CALL   1056
....................  
....................       Lectura2=0; 
58FA:  BCF    3F.6
58FC:  MOVLB  1
....................       } 
....................        
....................       if(flag_filtro==1) 
58FE:  BTFSS  3F.2
5900:  BRA    5944
....................       { 
....................          if(horas>=60) 
5902:  MOVF   35,W
5904:  SUBLW  3B
5906:  BC    5926
....................          { 
....................             lcd_gotoxy(10,1);                      
5908:  MOVLW  0A
590A:  MOVWF  x1F
590C:  MOVLW  01
590E:  MOVWF  x20
5910:  MOVLB  0
5912:  CALL   0B58
....................             printf(lcd_putc,"Filtro:CAM"); 
5916:  MOVLW  FC
5918:  MOVWF  FF6
591A:  MOVLW  08
591C:  MOVWF  FF7
591E:  CALL   1056
....................          } 
....................          else 
5922:  BRA    5940
5924:  MOVLB  1
....................          { 
....................             lcd_gotoxy(10,1);                      
5926:  MOVLW  0A
5928:  MOVWF  x1F
592A:  MOVLW  01
592C:  MOVWF  x20
592E:  MOVLB  0
5930:  CALL   0B58
....................             printf(lcd_putc,"Filtro:OK "); 
5934:  MOVLW  08
5936:  MOVWF  FF6
5938:  MOVLW  09
593A:  MOVWF  FF7
593C:  CALL   1056
....................          } 
....................       } 
....................       else 
5940:  BRA    595E
5942:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
5944:  MOVLW  0A
5946:  MOVWF  x1F
5948:  MOVLW  01
594A:  MOVWF  x20
594C:  MOVLB  0
594E:  CALL   0B58
....................          printf(lcd_putc,"Filtro:---"); 
5952:  MOVLW  14
5954:  MOVWF  FF6
5956:  MOVLW  09
5958:  MOVWF  FF7
595A:  CALL   1056
....................       } 
....................           
....................             
....................       if(estadofl==1) 
595E:  BTFSS  3E.0
5960:  BRA    5984
....................       { 
....................          Luz_Blanca_on; 
5962:  BSF    F8A.4
5964:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5966:  MOVLW  01
5968:  MOVLB  1
596A:  MOVWF  x1F
596C:  MOVLW  04
596E:  MOVWF  x20
5970:  MOVLB  0
5972:  CALL   0B58
....................          printf(lcd_putc,"Luz:ON "); 
5976:  MOVLW  20
5978:  MOVWF  FF6
597A:  MOVLW  09
597C:  MOVWF  FF7
597E:  CALL   1056
....................       } 
....................       else 
5982:  BRA    59A4
....................       { 
....................          Luz_Blanca_off; 
5984:  BCF    F8A.4
5986:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5988:  MOVLW  01
598A:  MOVLB  1
598C:  MOVWF  x1F
598E:  MOVLW  04
5990:  MOVWF  x20
5992:  MOVLB  0
5994:  CALL   0B58
....................          printf(lcd_putc,"Luz:OFF "); 
5998:  MOVLW  28
599A:  MOVWF  FF6
599C:  MOVLW  09
599E:  MOVWF  FF7
59A0:  CALL   1056
....................       } 
....................        
....................       if(estadomv==1) 
59A4:  BTFSS  3E.1
59A6:  BRA    59C6
....................       { 
....................          lcd_gotoxy(10,4); 
59A8:  MOVLW  0A
59AA:  MOVLB  1
59AC:  MOVWF  x1F
59AE:  MOVLW  04
59B0:  MOVWF  x20
59B2:  MOVLB  0
59B4:  CALL   0B58
....................          printf(lcd_putc,"Motor:ON "); 
59B8:  MOVLW  32
59BA:  MOVWF  FF6
59BC:  MOVLW  09
59BE:  MOVWF  FF7
59C0:  CALL   1056
....................       } 
....................       else 
59C4:  BRA    59EA
....................       { 
....................          if(iniciodamper==1) 
59C6:  BTFSS  58.0
59C8:  BRA    59CE
....................          { 
....................             Motor_off;      
59CA:  BCF    F8A.5
59CC:  BCF    F93.5
....................          } 
....................          lcd_gotoxy(10,4); 
59CE:  MOVLW  0A
59D0:  MOVLB  1
59D2:  MOVWF  x1F
59D4:  MOVLW  04
59D6:  MOVWF  x20
59D8:  MOVLB  0
59DA:  CALL   0B58
....................          printf(lcd_putc,"Motor:OFF ");  
59DE:  MOVLW  3C
59E0:  MOVWF  FF6
59E2:  MOVLW  09
59E4:  MOVWF  FF7
59E6:  CALL   1056
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
59EA:  BSF    F93.2
59EC:  BTFSS  F81.2
59EE:  BRA    5A06
....................       {  if(Flanco == 0)  
59F0:  BTFSC  3E.4
59F2:  BRA    5A04
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
59F4:  BSF    3E.4
59F6:  MOVLW  C8
59F8:  MOVLB  1
59FA:  MOVWF  x24
59FC:  MOVLB  0
59FE:  CALL   0A46
5A02:  BTG    3E.0
....................          else 
5A04:  BRA    5A08
....................             {Flanco = 0;} 
5A06:  BCF    3E.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
5A08:  BSF    F93.1
5A0A:  BTFSS  F81.1
5A0C:  BRA    5A52
....................       {   
....................          if(Flanco2 == 0) 
5A0E:  BTFSC  3E.6
5A10:  BRA    5A50
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
5A12:  BSF    3E.6
5A14:  MOVLW  C8
5A16:  MOVLB  1
5A18:  MOVWF  x24
5A1A:  MOVLB  0
5A1C:  CALL   0A46
5A20:  BTG    3E.1
....................             if(estadomv==1) 
5A22:  BTFSS  3E.1
5A24:  BRA    5A3C
....................             { 
....................                Motor_on; 
5A26:  BSF    F8A.5
5A28:  BCF    F93.5
....................                delay_ms(150); 
5A2A:  MOVLW  96
5A2C:  MOVLB  1
5A2E:  MOVWF  x24
5A30:  MOVLB  0
5A32:  CALL   0A46
....................                lcd_init(); 
5A36:  CALL   0AE4
....................             } 
....................             else 
5A3A:  BRA    5A50
....................             { 
....................                Motor_off; 
5A3C:  BCF    F8A.5
5A3E:  BCF    F93.5
....................                delay_ms(150); 
5A40:  MOVLW  96
5A42:  MOVLB  1
5A44:  MOVWF  x24
5A46:  MOVLB  0
5A48:  CALL   0A46
....................                lcd_init(); 
5A4C:  CALL   0AE4
....................             } 
....................          } 
....................       } 
....................       else 
5A50:  BRA    5A54
....................       { 
....................          Flanco2 = 0; 
5A52:  BCF    3E.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
5A54:  BSF    F93.3
5A56:  BTFSS  F81.3
5A58:  BRA    5A90
....................       {  if(Flanco1 == 0)  
5A5A:  BTFSC  3E.5
5A5C:  BRA    5A8E
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
5A5E:  MOVLW  02
5A60:  MOVLB  1
5A62:  MOVWF  x09
5A64:  MOVLW  FA
5A66:  MOVWF  x24
5A68:  MOVLB  0
5A6A:  CALL   0A46
5A6E:  MOVLB  1
5A70:  DECFSZ x09,F
5A72:  BRA    5A64
5A74:  MOVLW  0C
5A76:  MOVWF  x1E
5A78:  MOVLB  0
5A7A:  CALL   0BCA
5A7E:  MOVLW  01
5A80:  MOVWF  17
5A82:  CLRF   40
5A84:  MOVLW  02
5A86:  MOVWF  1B
5A88:  MOVWF  1D
5A8A:  MOVLW  0B
5A8C:  MOVWF  1A
....................          else 
5A8E:  BRA    5A92
....................             {Flanco1 = 0;}    
5A90:  BCF    3E.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
5A92:  BSF    F93.0
5A94:  BTFSS  F81.0
5A96:  BRA    5AC2
....................       {  if(Flanco3 == 0)  
5A98:  BTFSC  3E.7
5A9A:  BRA    5AC0
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
5A9C:  MOVLW  02
5A9E:  MOVLB  1
5AA0:  MOVWF  x09
5AA2:  MOVLW  FA
5AA4:  MOVWF  x24
5AA6:  MOVLB  0
5AA8:  CALL   0A46
5AAC:  MOVLB  1
5AAE:  DECFSZ x09,F
5AB0:  BRA    5AA2
5AB2:  MOVLW  0C
5AB4:  MOVWF  x1E
5AB6:  MOVLB  0
5AB8:  CALL   0BCA
5ABC:  MOVLW  28
5ABE:  MOVWF  17
....................          else 
5AC0:  BRA    5AC4
....................             {Flanco3 = 0;}     
5AC2:  BCF    3E.7
5AC4:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
5AC6:  MOVF   17,W
5AC8:  SUBLW  1E
5ACA:  BTFSS  FD8.2
5ACC:  BRA    5CAE
....................       lcd_gotoxy(1,1); 
5ACE:  MOVLW  01
5AD0:  MOVWF  x1F
5AD2:  MOVWF  x20
5AD4:  MOVLB  0
5AD6:  CALL   0B58
....................       printf(lcd_putc,"    !Post-Purga!    "); 
5ADA:  MOVLW  48
5ADC:  MOVWF  FF6
5ADE:  MOVLW  09
5AE0:  MOVWF  FF7
5AE2:  CALL   1056
....................       lcd_gotoxy(1,2); 
5AE6:  MOVLW  01
5AE8:  MOVLB  1
5AEA:  MOVWF  x1F
5AEC:  MOVLW  02
5AEE:  MOVWF  x20
5AF0:  MOVLB  0
5AF2:  CALL   0B58
....................       printf(lcd_putc,"                    "); 
5AF6:  MOVLW  5E
5AF8:  MOVWF  FF6
5AFA:  MOVLW  09
5AFC:  MOVWF  FF7
5AFE:  CALL   1056
....................       lcd_gotoxy(1,3); 
5B02:  MOVLW  01
5B04:  MOVLB  1
5B06:  MOVWF  x1F
5B08:  MOVLW  03
5B0A:  MOVWF  x20
5B0C:  MOVLB  0
5B0E:  CALL   0B58
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
5B12:  MOVLW  74
5B14:  MOVWF  FF6
5B16:  MOVLW  09
5B18:  MOVWF  FF7
5B1A:  MOVLW  06
5B1C:  MOVLB  1
5B1E:  MOVWF  x11
5B20:  MOVLB  0
5B22:  CALL   1076
5B26:  MOVFF  3B,109
5B2A:  MOVLW  01
5B2C:  MOVLB  1
5B2E:  MOVWF  x0A
5B30:  MOVLB  0
5B32:  CALL   12F8
5B36:  MOVLW  3A
5B38:  MOVLB  1
5B3A:  MOVWF  x1E
5B3C:  MOVLB  0
5B3E:  CALL   0BCA
5B42:  MOVFF  39,109
5B46:  MOVLW  01
5B48:  MOVLB  1
5B4A:  MOVWF  x0A
5B4C:  MOVLB  0
5B4E:  CALL   12F8
5B52:  MOVLW  20
5B54:  MOVLB  1
5B56:  MOVWF  x1E
5B58:  MOVLB  0
5B5A:  CALL   0BCA
5B5E:  MOVLW  20
5B60:  MOVLB  1
5B62:  MOVWF  x1E
5B64:  MOVLB  0
5B66:  CALL   0BCA
....................            
....................       if(Lectura==1) 
5B6A:  BTFSS  3F.5
5B6C:  BRA    5CAA
....................       { 
....................          Luz_Blanca_off; 
5B6E:  BCF    F8A.4
5B70:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
5B72:  MOVLW  02
5B74:  MOVLB  1
5B76:  MOVWF  x0D
5B78:  MOVLB  0
5B7A:  CALL   1796
5B7E:  MOVFF  00,109
5B82:  MOVFF  01,10A
5B86:  MOVFF  02,10B
5B8A:  MOVFF  03,10C
5B8E:  MOVFF  03,126
5B92:  MOVFF  02,125
5B96:  MOVFF  01,124
5B9A:  MOVFF  00,123
5B9E:  MOVLB  1
5BA0:  CLRF   x2A
5BA2:  CLRF   x29
5BA4:  MOVLW  40
5BA6:  MOVWF  x28
5BA8:  MOVLW  81
5BAA:  MOVWF  x27
5BAC:  MOVLB  0
5BAE:  CALL   16E0
5BB2:  BTFSS  FD8.0
5BB4:  BRA    5CA8
5BB6:  MOVF   39,F
5BB8:  BNZ   5CA8
5BBA:  MOVF   3B,F
5BBC:  BNZ   5CA8
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
5BBE:  MOVLW  46
5BC0:  MOVWF  FA9
5BC2:  MOVFF  33,FA8
5BC6:  BCF    FA6.6
5BC8:  BCF    FA6.7
5BCA:  BSF    FA6.2
5BCC:  MOVF   FF2,W
5BCE:  MOVWF  00
5BD0:  BCF    FF2.7
5BD2:  MOVLB  F
5BD4:  MOVLW  55
5BD6:  MOVWF  FA7
5BD8:  MOVLW  AA
5BDA:  MOVWF  FA7
5BDC:  BSF    FA6.1
5BDE:  BTFSC  FA6.1
5BE0:  BRA    5BDE
5BE2:  BCF    FA6.2
5BE4:  MOVF   00,W
5BE6:  IORWF  FF2,F
5BE8:  MOVLW  47
5BEA:  MOVWF  FA9
5BEC:  MOVFF  34,FA8
5BF0:  BCF    FA6.6
5BF2:  BCF    FA6.7
5BF4:  BSF    FA6.2
5BF6:  MOVF   FF2,W
5BF8:  MOVWF  00
5BFA:  BCF    FF2.7
5BFC:  MOVLW  55
5BFE:  MOVWF  FA7
5C00:  MOVLW  AA
5C02:  MOVWF  FA7
5C04:  BSF    FA6.1
5C06:  BTFSC  FA6.1
5C08:  BRA    5C06
5C0A:  BCF    FA6.2
5C0C:  MOVF   00,W
5C0E:  IORWF  FF2,F
5C10:  MOVLW  48
5C12:  MOVWF  FA9
5C14:  MOVFF  35,FA8
5C18:  BCF    FA6.6
5C1A:  BCF    FA6.7
5C1C:  BSF    FA6.2
5C1E:  MOVF   FF2,W
5C20:  MOVWF  00
5C22:  BCF    FF2.7
5C24:  MOVLW  55
5C26:  MOVWF  FA7
5C28:  MOVLW  AA
5C2A:  MOVWF  FA7
5C2C:  BSF    FA6.1
5C2E:  BTFSC  FA6.1
5C30:  BRA    5C2E
5C32:  BCF    FA6.2
5C34:  MOVF   00,W
5C36:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
5C38:  MOVLW  0C
5C3A:  MOVLB  1
5C3C:  MOVWF  x1E
5C3E:  MOVLB  0
5C40:  CALL   0BCA
....................             lcd_gotoxy(1,2); 
5C44:  MOVLW  01
5C46:  MOVLB  1
5C48:  MOVWF  x1F
5C4A:  MOVLW  02
5C4C:  MOVWF  x20
5C4E:  MOVLB  0
5C50:  CALL   0B58
....................             printf(lcd_putc,"     Proceso      "); 
5C54:  MOVLW  86
5C56:  MOVWF  FF6
5C58:  MOVLW  09
5C5A:  MOVWF  FF7
5C5C:  CALL   1056
....................             lcd_gotoxy(1,3); 
5C60:  MOVLW  01
5C62:  MOVLB  1
5C64:  MOVWF  x1F
5C66:  MOVLW  03
5C68:  MOVWF  x20
5C6A:  MOVLB  0
5C6C:  CALL   0B58
....................             printf(lcd_putc,"    Finalizado    "); 
5C70:  MOVLW  9A
5C72:  MOVWF  FF6
5C74:  MOVLW  09
5C76:  MOVWF  FF7
5C78:  CALL   1056
....................             delay_ms(2000); 
5C7C:  MOVLW  08
5C7E:  MOVLB  1
5C80:  MOVWF  x09
5C82:  MOVLW  FA
5C84:  MOVWF  x24
5C86:  MOVLB  0
5C88:  CALL   0A46
5C8C:  MOVLB  1
5C8E:  DECFSZ x09,F
5C90:  BRA    5C82
....................             printf(lcd_putc,"\f"); 
5C92:  MOVLW  0C
5C94:  MOVWF  x1E
5C96:  MOVLB  0
5C98:  CALL   0BCA
....................             ajustar_damper(0); 
5C9C:  MOVLB  1
5C9E:  CLRF   x09
5CA0:  MOVLB  0
5CA2:  CALL   17EE
....................             reset_cpu(); 
5CA6:  RESET
....................          } 
....................          Lectura=0; 
5CA8:  BCF    3F.5
....................       } 
....................        
....................    } 
5CAA:  MOVLB  1
5CAC:  BRA    5AC6
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
5CAE:  MOVF   17,W
5CB0:  SUBLW  28
5CB2:  BNZ   5D90
....................    lcd_gotoxy(1,1); 
5CB4:  MOVLW  01
5CB6:  MOVWF  x1F
5CB8:  MOVWF  x20
5CBA:  MOVLB  0
5CBC:  CALL   0B58
....................    printf(lcd_putc,"   Desea apagar     "); 
5CC0:  MOVLW  AE
5CC2:  MOVWF  FF6
5CC4:  MOVLW  09
5CC6:  MOVWF  FF7
5CC8:  CALL   1056
....................    lcd_gotoxy(1,2); 
5CCC:  MOVLW  01
5CCE:  MOVLB  1
5CD0:  MOVWF  x1F
5CD2:  MOVLW  02
5CD4:  MOVWF  x20
5CD6:  MOVLB  0
5CD8:  CALL   0B58
....................    printf(lcd_putc,"     la cabina      "); 
5CDC:  MOVLW  C4
5CDE:  MOVWF  FF6
5CE0:  MOVLW  09
5CE2:  MOVWF  FF7
5CE4:  CALL   1056
....................    lcd_gotoxy(1,3); 
5CE8:  MOVLW  01
5CEA:  MOVLB  1
5CEC:  MOVWF  x1F
5CEE:  MOVLW  03
5CF0:  MOVWF  x20
5CF2:  MOVLB  0
5CF4:  CALL   0B58
....................    printf(lcd_putc,"   > Aceptar        "); 
5CF8:  MOVLW  DA
5CFA:  MOVWF  FF6
5CFC:  MOVLW  09
5CFE:  MOVWF  FF7
5D00:  CALL   1056
....................    lcd_gotoxy(1,4); 
5D04:  MOVLW  01
5D06:  MOVLB  1
5D08:  MOVWF  x1F
5D0A:  MOVLW  04
5D0C:  MOVWF  x20
5D0E:  MOVLB  0
5D10:  CALL   0B58
....................    printf(lcd_putc,"   < Cancelar       "); 
5D14:  MOVLW  F0
5D16:  MOVWF  FF6
5D18:  MOVLW  09
5D1A:  MOVWF  FF7
5D1C:  CALL   1056
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
5D20:  BSF    F93.0
5D22:  BTFSS  F81.0
5D24:  BRA    5D4C
....................       {  if(Flanco1 == 0)  
5D26:  BTFSC  3E.5
5D28:  BRA    5D4A
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
5D2A:  BSF    3E.5
5D2C:  MOVLW  1E
5D2E:  MOVWF  17
5D30:  MOVFF  20,109
5D34:  CALL   1042
5D38:  BCF    F8A.6
5D3A:  BCF    F93.6
5D3C:  MOVLW  0C
5D3E:  MOVLB  1
5D40:  MOVWF  x1E
5D42:  MOVLB  0
5D44:  CALL   0BCA
5D48:  BSF    58.5
....................             }} 
....................          else 
5D4A:  BRA    5D4E
....................             {Flanco1 = 0;}    
5D4C:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5D4E:  BSF    F93.1
5D50:  BTFSS  F81.1
5D52:  BRA    5D8C
....................       {  if(Flanco3 == 0)  
5D54:  BTFSC  3E.7
5D56:  BRA    5D8A
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
5D58:  BSF    3E.7
5D5A:  MOVLW  14
5D5C:  MOVWF  17
5D5E:  CLRF   40
5D60:  MOVLW  02
5D62:  MOVWF  1B
5D64:  MOVWF  1D
5D66:  MOVLW  0B
5D68:  MOVWF  1A
5D6A:  MOVLW  02
5D6C:  MOVLB  1
5D6E:  MOVWF  x09
5D70:  MOVLW  FA
5D72:  MOVWF  x24
5D74:  MOVLB  0
5D76:  CALL   0A46
5D7A:  MOVLB  1
5D7C:  DECFSZ x09,F
5D7E:  BRA    5D70
5D80:  MOVLW  0C
5D82:  MOVWF  x1E
5D84:  MOVLB  0
5D86:  CALL   0BCA
....................          else 
5D8A:  BRA    5D8E
....................             {Flanco3 = 0;}     
5D8C:  BCF    3E.7
5D8E:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
5D90:  MOVF   17,W
5D92:  SUBLW  32
5D94:  BTFSS  FD8.2
5D96:  BRA    5E98
....................    lcd_gotoxy(1,1); 
5D98:  MOVLW  01
5D9A:  MOVWF  x1F
5D9C:  MOVWF  x20
5D9E:  MOVLB  0
5DA0:  CALL   0B58
....................    printf(lcd_putc,"      !Purga!       "); 
5DA4:  MOVLW  06
5DA6:  MOVWF  FF6
5DA8:  MOVLW  0A
5DAA:  MOVWF  FF7
5DAC:  CALL   1056
....................    lcd_gotoxy(1,2); 
5DB0:  MOVLW  01
5DB2:  MOVLB  1
5DB4:  MOVWF  x1F
5DB6:  MOVLW  02
5DB8:  MOVWF  x20
5DBA:  MOVLB  0
5DBC:  CALL   0B58
....................    printf(lcd_putc,"                    "); 
5DC0:  MOVLW  1C
5DC2:  MOVWF  FF6
5DC4:  MOVLW  0A
5DC6:  MOVWF  FF7
5DC8:  CALL   1056
....................    lcd_gotoxy(1,3); 
5DCC:  MOVLW  01
5DCE:  MOVLB  1
5DD0:  MOVWF  x1F
5DD2:  MOVLW  03
5DD4:  MOVWF  x20
5DD6:  MOVLB  0
5DD8:  CALL   0B58
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
5DDC:  MOVLW  32
5DDE:  MOVWF  FF6
5DE0:  MOVLW  0A
5DE2:  MOVWF  FF7
5DE4:  MOVLW  06
5DE6:  MOVLB  1
5DE8:  MOVWF  x11
5DEA:  MOVLB  0
5DEC:  CALL   1076
5DF0:  MOVFF  22,109
5DF4:  MOVLW  01
5DF6:  MOVLB  1
5DF8:  MOVWF  x0A
5DFA:  MOVLB  0
5DFC:  CALL   12F8
5E00:  MOVLW  3A
5E02:  MOVLB  1
5E04:  MOVWF  x1E
5E06:  MOVLB  0
5E08:  CALL   0BCA
5E0C:  MOVFF  37,109
5E10:  MOVLW  01
5E12:  MOVLB  1
5E14:  MOVWF  x0A
5E16:  MOVLB  0
5E18:  CALL   12F8
5E1C:  MOVLW  20
5E1E:  MOVLB  1
5E20:  MOVWF  x1E
5E22:  MOVLB  0
5E24:  CALL   0BCA
5E28:  MOVLW  20
5E2A:  MOVLB  1
5E2C:  MOVWF  x1E
5E2E:  MOVLB  0
5E30:  CALL   0BCA
5E34:  MOVLW  20
5E36:  MOVLB  1
5E38:  MOVWF  x1E
5E3A:  MOVLB  0
5E3C:  CALL   0BCA
....................         
....................    if(RIGHT) 
5E40:  BSF    F93.0
5E42:  BTFSS  F81.0
5E44:  BRA    5E6E
....................    { 
....................       delay_ms(1000); 
5E46:  MOVLW  04
5E48:  MOVLB  1
5E4A:  MOVWF  x09
5E4C:  MOVLW  FA
5E4E:  MOVWF  x24
5E50:  MOVLB  0
5E52:  CALL   0A46
5E56:  MOVLB  1
5E58:  DECFSZ x09,F
5E5A:  BRA    5E4C
....................       if(RIGHT) 
5E5C:  BSF    F93.0
5E5E:  BTFSS  F81.0
5E60:  BRA    5E6C
....................       { 
....................          tiempo_purga=0;Motor_on;Menu=20; 
5E62:  BCF    58.4
5E64:  BSF    F8A.5
5E66:  BCF    F93.5
5E68:  MOVLW  14
5E6A:  MOVWF  17
5E6C:  MOVLB  0
....................       } 
....................    } 
....................    if(Lectura==1) 
5E6E:  BTFSS  3F.5
5E70:  BRA    5E96
....................    { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
5E72:  MOVFF  2D,109
5E76:  GOTO   1D18
5E7A:  MOVFF  03,98
5E7E:  MOVFF  02,97
5E82:  MOVFF  01,96
5E86:  MOVFF  00,95
....................         controlar_flujo();     
5E8A:  GOTO   23EC
....................         Motor_on; 
5E8E:  BSF    F8A.5
5E90:  BCF    F93.5
....................         Luz_Blanca_off; 
5E92:  BCF    F8A.4
5E94:  BCF    F93.4
5E96:  MOVLB  1
....................    } 
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=20) 
5E98:  MOVF   36,W
5E9A:  SUBLW  13
5E9C:  BC    5EA8
....................    { 
....................       lcd_init(); 
5E9E:  MOVLB  0
5EA0:  CALL   0AE4
....................       tiemporeset=0; 
5EA4:  CLRF   36
5EA6:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
5EA8:  BTFSS  3F.3
5EAA:  BRA    5EB8
....................       {intensidadpantalla(0);sleep();} 
5EAC:  CLRF   x09
5EAE:  MOVLB  0
5EB0:  CALL   1042
5EB4:  SLEEP 
5EB6:  MOVLB  1
....................  
....................    /*if(Menu!=0 || Menu!=30) 
....................    { 
....................       if(Lectura==1) 
....................       { 
....................          FeedbackDamper=(int8)(100*(sensores(2)/1023)); 
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
....................          controlar_flujo(); 
....................           
....................          if(Flujo<0.5 && Menu==20) 
....................          { 
....................               flag_latencia=1; 
....................                
....................               if(Latencia==1) 
....................               { 
....................                  if(estadoalarma==1) 
....................                  { 
....................                     Alarma_on; 
....................                  } 
....................                  else 
....................                  { 
....................                     Alarma_off; 
....................                  } 
....................                  estadopantalla=!estadopantalla; 
....................                  if(estadopantalla==1) 
....................                  {intensidadpantalla(contraste);} 
....................                  else 
....................                  {intensidadpantalla(0);} 
....................                } 
....................             } 
....................          else 
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
....................             if(Flujo>=0.5) 
....................             { 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
....................             } 
....................          } 
....................       } 
....................       Lectura=0; 
....................    }    
....................    else 
....................    { 
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
....................    }*/ 
....................  
....................    }        
5EB8:  GOTO   2C4A
.................... } 
....................  
5EBC:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
