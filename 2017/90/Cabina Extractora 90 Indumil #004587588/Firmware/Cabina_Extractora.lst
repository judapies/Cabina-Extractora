CCS PCH C Compiler, Version 4.104, 5967               24-ene.-17 09:26

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2017\Cabina Extractora 90 Indumil #004587588\Firmware\Cabina_Extractora.lst

               ROM used: 18600 bytes (57%)
                         Largest free fragment is 14164
               RAM used: 263 (13%) at main() level
                         293 (14%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1650
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
08E2:  MOVLW  01
08E4:  MOVWF  FEA
08E6:  MOVLW  1B
08E8:  MOVWF  FE9
08EA:  MOVF   FEF,W
08EC:  BZ    090A
08EE:  MOVLW  0F
08F0:  MOVWF  01
08F2:  CLRF   00
08F4:  DECFSZ 00,F
08F6:  BRA    08F4
08F8:  DECFSZ 01,F
08FA:  BRA    08F2
08FC:  MOVLW  8F
08FE:  MOVWF  00
0900:  DECFSZ 00,F
0902:  BRA    0900
0904:  NOP   
0906:  DECFSZ FEF,F
0908:  BRA    08EE
090A:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
090C:  MOVLB  1
090E:  SWAPF  x1C,W
0910:  ANDLW  F0
0912:  MOVWF  00
0914:  MOVLW  0F
0916:  ANDWF  F83,W
0918:  IORWF  00,W
091A:  MOVWF  F83
....................       delay_cycles(25); 
091C:  MOVLW  08
091E:  MOVWF  00
0920:  DECFSZ 00,F
0922:  BRA    0920
....................       lcd.enable = 1; 
0924:  BSF    F83.2
....................       delay_us(55); 
0926:  MOVLW  DB
0928:  MOVWF  00
092A:  DECFSZ 00,F
092C:  BRA    092A
092E:  BRA    0930
....................       lcd.enable = 0; 
0930:  BCF    F83.2
.................... } 
0932:  MOVLB  0
0934:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0936:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0938:  MOVLW  01
093A:  MOVLB  1
093C:  MOVWF  x1B
093E:  MOVLB  0
0940:  RCALL  08E2
....................       lcd.rs = address; 
0942:  MOVLB  1
0944:  BTFSS  x19.0
0946:  BCF    F83.0
0948:  BTFSC  x19.0
094A:  BSF    F83.0
....................       delay_cycles(25); 
094C:  MOVLW  08
094E:  MOVWF  00
0950:  DECFSZ 00,F
0952:  BRA    0950
....................       lcd.rw = 0; 
0954:  BCF    F83.1
....................       delay_cycles(25); 
0956:  MOVLW  08
0958:  MOVWF  00
095A:  DECFSZ 00,F
095C:  BRA    095A
....................       lcd.enable = 0; 
095E:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0960:  SWAPF  x1A,W
0962:  MOVWF  x1B
0964:  MOVLW  0F
0966:  ANDWF  x1B,F
0968:  MOVFF  11B,11C
096C:  MOVLB  0
096E:  RCALL  090C
....................       lcd_send_nibble(n & 0xf); 
0970:  MOVLB  1
0972:  MOVF   x1A,W
0974:  ANDLW  0F
0976:  MOVWF  x1B
0978:  MOVWF  x1C
097A:  MOVLB  0
097C:  RCALL  090C
.................... } 
097E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0980:  MOVLW  00
0982:  MOVWF  F95
....................     lcd.rs = 0; 
0984:  BCF    F83.0
....................     lcd.rw = 0; 
0986:  BCF    F83.1
....................     lcd.enable = 0; 
0988:  BCF    F83.2
....................     delay_ms(15); 
098A:  MOVLW  0F
098C:  MOVLB  1
098E:  MOVWF  x1B
0990:  MOVLB  0
0992:  RCALL  08E2
....................     for(i=1;i<=3;++i) { 
0994:  MOVLW  01
0996:  MOVWF  xFF
0998:  MOVF   xFF,W
099A:  SUBLW  03
099C:  BNC   09B6
....................        lcd_send_nibble(3); 
099E:  MOVLW  03
09A0:  MOVLB  1
09A2:  MOVWF  x1C
09A4:  MOVLB  0
09A6:  RCALL  090C
....................        delay_ms(5); 
09A8:  MOVLW  05
09AA:  MOVLB  1
09AC:  MOVWF  x1B
09AE:  MOVLB  0
09B0:  RCALL  08E2
....................     } 
09B2:  INCF   xFF,F
09B4:  BRA    0998
....................     lcd_send_nibble(2); 
09B6:  MOVLW  02
09B8:  MOVLB  1
09BA:  MOVWF  x1C
09BC:  MOVLB  0
09BE:  RCALL  090C
....................     for(i=0;i<=3;++i) 
09C0:  CLRF   xFF
09C2:  MOVF   xFF,W
09C4:  SUBLW  03
09C6:  BNC   09EA
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
09C8:  CLRF   03
09CA:  MOVF   xFF,W
09CC:  MOVFF  FF2,100
09D0:  BCF    FF2.7
09D2:  CALL   0096
09D6:  MOVLB  1
09D8:  BTFSC  x00.7
09DA:  BSF    FF2.7
09DC:  MOVWF  x00
09DE:  CLRF   x19
09E0:  MOVWF  x1A
09E2:  MOVLB  0
09E4:  RCALL  0936
09E6:  INCF   xFF,F
09E8:  BRA    09C2
.................... } 
09EA:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
09EC:  MOVLW  01
09EE:  MOVLB  1
09F0:  SUBWF  x17,W
09F2:  ADDLW  FC
09F4:  BC    0A20
09F6:  ADDLW  04
09F8:  MOVLB  0
09FA:  GOTO   0A32
....................      case 1 : address=0x80;break; 
09FE:  MOVLW  80
0A00:  MOVLB  1
0A02:  MOVWF  x18
0A04:  BRA    0A20
....................      case 2 : address=0xc0;break; 
0A06:  MOVLW  C0
0A08:  MOVLB  1
0A0A:  MOVWF  x18
0A0C:  BRA    0A20
....................      case 3 : address=0x94;break; 
0A0E:  MOVLW  94
0A10:  MOVLB  1
0A12:  MOVWF  x18
0A14:  BRA    0A20
....................      case 4 : address=0xd4;break; 
0A16:  MOVLW  D4
0A18:  MOVLB  1
0A1A:  MOVWF  x18
0A1C:  BRA    0A20
0A1E:  MOVLB  1
....................    } 
....................    address+=x-1; 
0A20:  MOVLW  01
0A22:  SUBWF  x16,W
0A24:  ADDWF  x18,F
....................    lcd_send_byte(0,address); 
0A26:  CLRF   x19
0A28:  MOVFF  118,11A
0A2C:  MOVLB  0
0A2E:  RCALL  0936
.................... } 
0A30:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A5E:  MOVLB  1
0A60:  MOVF   x15,W
0A62:  SUBLW  F1
0A64:  BNZ   0A6A
....................     c=238; 
0A66:  MOVLW  EE
0A68:  MOVWF  x15
....................    switch (c) { 
0A6A:  MOVF   x15,W
0A6C:  XORLW  0C
0A6E:  MOVLB  0
0A70:  BZ    0A7C
0A72:  XORLW  06
0A74:  BZ    0A98
0A76:  XORLW  02
0A78:  BZ    0AAA
0A7A:  BRA    0AB8
....................      case '\f'   : lcd_send_byte(0,1); 
0A7C:  MOVLB  1
0A7E:  CLRF   x19
0A80:  MOVLW  01
0A82:  MOVWF  x1A
0A84:  MOVLB  0
0A86:  RCALL  0936
....................                    lcdline=1; 
0A88:  MOVLW  01
0A8A:  MOVWF  16
....................                    delay_ms(2); 
0A8C:  MOVLW  02
0A8E:  MOVLB  1
0A90:  MOVWF  x1B
0A92:  MOVLB  0
0A94:  RCALL  08E2
....................                                            break; 
0A96:  BRA    0AC8
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A98:  INCF   16,F
0A9A:  MOVLW  01
0A9C:  MOVLB  1
0A9E:  MOVWF  x16
0AA0:  MOVFF  16,117
0AA4:  MOVLB  0
0AA6:  RCALL  09EC
0AA8:  BRA    0AC8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0AAA:  MOVLB  1
0AAC:  CLRF   x19
0AAE:  MOVLW  10
0AB0:  MOVWF  x1A
0AB2:  MOVLB  0
0AB4:  RCALL  0936
0AB6:  BRA    0AC8
....................      default     : lcd_send_byte(1,c);     break; 
0AB8:  MOVLW  01
0ABA:  MOVLB  1
0ABC:  MOVWF  x19
0ABE:  MOVFF  115,11A
0AC2:  MOVLB  0
0AC4:  RCALL  0936
0AC6:  BRA    0AC8
....................    } 
.................... } 
0AC8:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=200, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
15F2:  MOVLB  1
15F4:  RLCF   x04,W
15F6:  MOVWF  00
15F8:  RLCF   00,F
15FA:  MOVLW  FC
15FC:  ANDWF  00,F
15FE:  MOVFF  00,01
1602:  MOVF   FC2,W
1604:  ANDLW  C3
1606:  IORWF  00,W
1608:  MOVWF  FC2
160A:  MOVLW  0A
160C:  MOVWF  x1B
160E:  MOVLB  0
1610:  CALL   08E2
1614:  BSF    FC2.1
1616:  BTFSC  FC2.1
1618:  BRA    1616
161A:  MOVFF  FC4,10A
161E:  MOVFF  FC3,109
1622:  MOVLB  0
1624:  CALL   0ACA
1628:  MOVFF  03,108
162C:  MOVFF  02,107
1630:  MOVFF  01,106
1634:  MOVFF  00,105
1638:  MOVFF  105,00
163C:  MOVFF  106,01
1640:  MOVFF  107,02
1644:  MOVFF  108,03
.................... } 
1648:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0ED6:  MOVLB  1
0ED8:  MOVF   x00,F
0EDA:  BNZ   0EE2
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
0EDC:  BCF    F8B.1
0EDE:  BCF    F94.1
....................    } 
....................    else 
0EE0:  BRA    0EE6
....................    { 
....................       Pantalla_on; 
0EE2:  BSF    F8B.1
0EE4:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0EE6:  MOVLB  0
0EE8:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
....................     Voltaje1=sensores(1)*5/1023; 
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
....................     x_cubo=x_uno*x_cuadrado; 
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
....................     if(Velocidad<0.0) 
....................      {Velocidad=0.0;} 
....................       
....................      if(l>=media) 
....................        {l=0;} 
....................       
....................      promedio[l]=Velocidad;l++; 
....................      Flujo2=0; 
....................         for(h=0;h<=(media-1);h++) 
....................         { 
....................            Flujo2+=promedio[h]; 
....................         }  
....................            Flujo2=(Flujo2/media)*Ajuste1;  
....................            return Flujo2; 
.................... } 
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
....................       if(error<0.2&&error>-0.2) 
....................       {} 
....................       else 
....................       { 
....................          if(error>0.0) 
....................          {tmp+=1;} 
....................                 
....................          if(error<-0.0) 
....................          {tmp-=1;}   
....................       } 
....................        
....................       if(tmp>251) 
....................       {tmp=251;} 
....................       if(tmp<4)          
....................       {tmp=4;}       
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Manual==20) 
....................    { 
....................       tmp=251; 
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Semi==20) 
....................    { 
....................       set_pwm1_duty (ValorSemi); 
....................    } 
.................... } 
.................... /* 
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
....................       { 
....................       delay_ms(500); 
....................          if(input(PIN_B0)) 
....................          { 
....................             lcd_init(); 
....................             intensidadpantalla(contraste); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
....................             delay_ms(2000); 
....................             printf(lcd_putc,"\f"); 
....................             inicio=1; 
....................             Menu=0; 
....................             ModoSleep=0; 
....................             delay_ms(500); 
....................          } 
....................       } 
.................... }*/ 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................  
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   50,F
....................    tiempos2++; 
00C2:  INCF   53,F
00C4:  BTFSC  FD8.2
00C6:  INCF   54,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   52,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   51,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    35.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  35.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   51,F
00E0:  BTFSC  FD8.2
00E2:  INCF   52,F
....................    } 
....................     
....................    if(tiempos2==20) 
00E4:  MOVF   53,W
00E6:  SUBLW  14
00E8:  BNZ   00F4
00EA:  MOVF   54,F
00EC:  BNZ   00F4
....................    {tiempos2=0;Lectura2=1;} 
00EE:  CLRF   54
00F0:  CLRF   53
00F2:  BSF    35.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00F4:  MOVF   4F,W
00F6:  SUBLW  C8
00F8:  BNZ   0124
00FA:  MOVF   50,F
00FC:  BNZ   0124
....................    {tiempos=0;tiemporeset++; 
00FE:  CLRF   50
0100:  CLRF   4F
0102:  INCF   33,F
....................         Lectura=1; 
0104:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
0106:  BTFSS  34.1
0108:  BRA    0124
010A:  BTFSS  35.2
010C:  BRA    0124
....................          { 
....................             segundos++; 
010E:  INCF   30,F
....................           
....................          if(segundos==60) 
0110:  MOVF   30,W
0112:  SUBLW  3C
0114:  BNZ   011A
....................          { 
....................             segundos=0;minutos++; 
0116:  CLRF   30
0118:  INCF   31,F
....................          } 
....................           
....................          if(minutos==60) 
011A:  MOVF   31,W
011C:  SUBLW  3C
011E:  BNZ   0124
....................          { 
....................             minutos=0;horas++; 
0120:  CLRF   31
0122:  INCF   32,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
0124:  BCF    F9E.0
0126:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
103C:  MOVLB  1
103E:  DECFSZ x01,W
1040:  BRA    107A
....................    {if(estadoalarma==0) 
1042:  BTFSC  34.2
1044:  BRA    105E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1046:  MOVLW  02
1048:  MOVWF  x16
104A:  MOVFF  102,117
104E:  MOVLB  0
1050:  RCALL  09EC
1052:  MOVLW  2A
1054:  MOVWF  FF6
1056:  MOVLW  01
1058:  MOVWF  FF7
105A:  RCALL  0EEA
105C:  MOVLB  1
....................    if(estadoalarma==1) 
105E:  BTFSS  34.2
1060:  BRA    107A
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1062:  MOVLW  02
1064:  MOVWF  x16
1066:  MOVFF  102,117
106A:  MOVLB  0
106C:  RCALL  09EC
106E:  MOVLW  3E
1070:  MOVWF  FF6
1072:  MOVLW  01
1074:  MOVWF  FF7
1076:  RCALL  0EEA
1078:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
107A:  MOVF   x01,W
107C:  SUBLW  02
107E:  BNZ   1098
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
1080:  MOVLW  02
1082:  MOVWF  x16
1084:  MOVFF  102,117
1088:  MOVLB  0
108A:  RCALL  09EC
108C:  MOVLW  52
108E:  MOVWF  FF6
1090:  MOVLW  01
1092:  MOVWF  FF7
1094:  RCALL  0EEA
1096:  MOVLB  1
....................     
....................    if(x==3) 
1098:  MOVF   x01,W
109A:  SUBLW  03
109C:  BNZ   10B6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
109E:  MOVLW  02
10A0:  MOVWF  x16
10A2:  MOVFF  102,117
10A6:  MOVLB  0
10A8:  RCALL  09EC
10AA:  MOVLW  66
10AC:  MOVWF  FF6
10AE:  MOVLW  01
10B0:  MOVWF  FF7
10B2:  RCALL  0EEA
10B4:  MOVLB  1
....................     
....................    if(x==4) 
10B6:  MOVF   x01,W
10B8:  SUBLW  04
10BA:  BNZ   10D4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
10BC:  MOVLW  02
10BE:  MOVWF  x16
10C0:  MOVFF  102,117
10C4:  MOVLB  0
10C6:  RCALL  09EC
10C8:  MOVLW  7A
10CA:  MOVWF  FF6
10CC:  MOVLW  01
10CE:  MOVWF  FF7
10D0:  RCALL  0EEA
10D2:  MOVLB  1
....................     
....................    if(x==5) 
10D4:  MOVF   x01,W
10D6:  SUBLW  05
10D8:  BNZ   10F2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
10DA:  MOVLW  02
10DC:  MOVWF  x16
10DE:  MOVFF  102,117
10E2:  MOVLB  0
10E4:  RCALL  09EC
10E6:  MOVLW  8E
10E8:  MOVWF  FF6
10EA:  MOVLW  01
10EC:  MOVWF  FF7
10EE:  RCALL  0EEA
10F0:  MOVLB  1
....................     
....................    if(x==6) 
10F2:  MOVF   x01,W
10F4:  SUBLW  06
10F6:  BNZ   1110
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
10F8:  MOVLW  02
10FA:  MOVWF  x16
10FC:  MOVFF  102,117
1100:  MOVLB  0
1102:  RCALL  09EC
1104:  MOVLW  A2
1106:  MOVWF  FF6
1108:  MOVLW  01
110A:  MOVWF  FF7
110C:  RCALL  0EEA
110E:  MOVLB  1
....................     
....................    if(x==7) 
1110:  MOVF   x01,W
1112:  SUBLW  07
1114:  BNZ   112E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1116:  MOVLW  02
1118:  MOVWF  x16
111A:  MOVFF  102,117
111E:  MOVLB  0
1120:  RCALL  09EC
1122:  MOVLW  B6
1124:  MOVWF  FF6
1126:  MOVLW  01
1128:  MOVWF  FF7
112A:  RCALL  0EEA
112C:  MOVLB  1
....................     
....................    if(x==8) 
112E:  MOVF   x01,W
1130:  SUBLW  08
1132:  BNZ   114C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
1134:  MOVLW  02
1136:  MOVWF  x16
1138:  MOVFF  102,117
113C:  MOVLB  0
113E:  RCALL  09EC
1140:  MOVLW  CA
1142:  MOVWF  FF6
1144:  MOVLW  01
1146:  MOVWF  FF7
1148:  RCALL  0EEA
114A:  MOVLB  1
.................... } 
114C:  MOVLB  0
114E:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
164A:  MOVFF  100,FBE
.................... } 
164E:  RETLW  00
....................  
.................... void main () 
.................... { 
1650:  CLRF   FF8
1652:  BCF    FD0.7
1654:  BSF    07.7
1656:  CLRF   FEA
1658:  CLRF   FE9
165A:  MOVLW  C8
165C:  MOVWF  17
165E:  MOVLW  09
1660:  MOVWF  18
1662:  MOVLW  02
1664:  MOVWF  19
1666:  MOVLW  0B
1668:  MOVWF  1A
166A:  MOVLW  02
166C:  MOVWF  1B
166E:  MOVLW  03
1670:  MOVWF  1C
1672:  MOVLW  02
1674:  MOVWF  1D
1676:  MOVWF  1E
1678:  MOVLW  04
167A:  MOVWF  1F
167C:  MOVLW  0A
167E:  MOVWF  20
1680:  CLRF   21
1682:  CLRF   22
1684:  CLRF   23
1686:  CLRF   24
1688:  CLRF   25
168A:  CLRF   26
168C:  CLRF   27
168E:  CLRF   28
1690:  MOVWF  29
1692:  CLRF   2A
1694:  MOVWF  2B
1696:  MOVWF  2C
1698:  MOVWF  2D
169A:  MOVWF  2E
169C:  CLRF   2F
169E:  CLRF   30
16A0:  CLRF   31
16A2:  CLRF   32
16A4:  CLRF   33
16A6:  BCF    34.0
16A8:  BCF    34.1
16AA:  BCF    34.2
16AC:  BCF    34.3
16AE:  BCF    34.4
16B0:  BCF    34.5
16B2:  BCF    34.6
16B4:  BCF    34.7
16B6:  BCF    35.0
16B8:  BCF    35.1
16BA:  BCF    35.2
16BC:  CLRF   36
16BE:  CLRF   45
16C0:  CLRF   44
16C2:  CLRF   43
16C4:  CLRF   42
16C6:  CLRF   49
16C8:  CLRF   48
16CA:  CLRF   47
16CC:  CLRF   46
16CE:  CLRF   4D
16D0:  CLRF   4C
16D2:  MOVLW  4B
16D4:  MOVWF  4B
16D6:  MOVLW  86
16D8:  MOVWF  4A
16DA:  BCF    35.4
16DC:  BCF    35.5
16DE:  BCF    35.6
16E0:  BCF    35.7
16E2:  BCF    4E.0
16E4:  BCF    4E.1
16E6:  BCF    4E.2
16E8:  BCF    4E.3
16EA:  CLRF   50
16EC:  CLRF   4F
16EE:  CLRF   52
16F0:  CLRF   51
16F2:  CLRF   54
16F4:  CLRF   53
16F6:  CLRF   56
16F8:  CLRF   55
16FA:  CLRF   5A
16FC:  MOVLW  E0
16FE:  MOVWF  59
1700:  MOVLW  5D
1702:  MOVWF  58
1704:  MOVLW  8A
1706:  MOVWF  57
1708:  CLRF   5E
170A:  MOVLW  C0
170C:  MOVWF  5D
170E:  MOVLW  28
1710:  MOVWF  5C
1712:  MOVLW  89
1714:  MOVWF  5B
1716:  MOVLW  33
1718:  MOVWF  x62
171A:  MOVLW  13
171C:  MOVWF  x61
171E:  MOVLW  15
1720:  MOVWF  x60
1722:  MOVLW  87
1724:  MOVWF  5F
1726:  CLRF   x66
1728:  CLRF   x65
172A:  CLRF   x64
172C:  CLRF   x63
172E:  CLRF   x6A
1730:  CLRF   x69
1732:  CLRF   x68
1734:  CLRF   x67
1736:  CLRF   x6E
1738:  CLRF   x6D
173A:  MOVLW  7A
173C:  MOVWF  x6C
173E:  MOVLW  88
1740:  MOVWF  x6B
1742:  CLRF   x72
1744:  CLRF   x71
1746:  CLRF   x70
1748:  CLRF   x6F
174A:  CLRF   x76
174C:  CLRF   x75
174E:  CLRF   x74
1750:  CLRF   x73
1752:  CLRF   x7A
1754:  CLRF   x79
1756:  CLRF   x78
1758:  CLRF   x77
175A:  MOVLW  19
175C:  MOVWF  x7E
175E:  MOVLW  53
1760:  MOVWF  x7D
1762:  MOVLW  18
1764:  MOVWF  x7C
1766:  MOVLW  68
1768:  MOVWF  x7B
176A:  MOVLW  E9
176C:  MOVWF  x82
176E:  MOVLW  BD
1770:  MOVWF  x81
1772:  MOVLW  C6
1774:  MOVWF  x80
1776:  MOVLW  71
1778:  MOVWF  x7F
177A:  MOVLW  BE
177C:  MOVWF  x86
177E:  MOVLW  96
1780:  MOVWF  x85
1782:  MOVLW  24
1784:  MOVWF  x84
1786:  MOVLW  7A
1788:  MOVWF  x83
178A:  MOVLW  F3
178C:  MOVWF  x8A
178E:  MOVLW  5A
1790:  MOVWF  x89
1792:  MOVLW  AB
1794:  MOVWF  x88
1796:  MOVLW  81
1798:  MOVWF  x87
179A:  CLRF   x8E
179C:  CLRF   x8D
179E:  CLRF   x8C
17A0:  CLRF   x8B
17A2:  CLRF   x92
17A4:  CLRF   x91
17A6:  CLRF   x90
17A8:  CLRF   x8F
17AA:  CLRF   x96
17AC:  CLRF   x95
17AE:  CLRF   x94
17B0:  CLRF   x93
17B2:  CLRF   x9A
17B4:  CLRF   x99
17B6:  CLRF   x98
17B8:  CLRF   x97
17BA:  CLRF   x9E
17BC:  CLRF   x9D
17BE:  CLRF   x9C
17C0:  CLRF   x9B
17C2:  CLRF   xA2
17C4:  CLRF   xA1
17C6:  CLRF   xA0
17C8:  CLRF   x9F
17CA:  MOVLW  8B
17CC:  MOVWF  xA6
17CE:  MOVLW  FD
17D0:  MOVWF  xA5
17D2:  MOVLW  65
17D4:  MOVWF  xA4
17D6:  MOVLW  7C
17D8:  MOVWF  xA3
17DA:  CLRF   xAA
17DC:  CLRF   xA9
17DE:  CLRF   xA8
17E0:  CLRF   xA7
17E2:  CLRF   xAE
17E4:  CLRF   xAD
17E6:  CLRF   xAC
17E8:  CLRF   xAB
17EA:  CLRF   xB2
17EC:  CLRF   xB1
17EE:  CLRF   xB0
17F0:  CLRF   xAF
17F2:  CLRF   xB6
17F4:  CLRF   xB5
17F6:  CLRF   xB4
17F8:  CLRF   xB3
17FA:  CLRF   xBA
17FC:  CLRF   xB9
17FE:  CLRF   xB8
1800:  CLRF   xB7
1802:  CLRF   xBE
1804:  CLRF   xBD
1806:  CLRF   xBC
1808:  CLRF   xBB
180A:  CLRF   xC2
180C:  CLRF   xC1
180E:  CLRF   xC0
1810:  MOVLW  7F
1812:  MOVWF  xBF
1814:  CLRF   xC6
1816:  CLRF   xC5
1818:  MOVLW  24
181A:  MOVWF  xC4
181C:  MOVLW  88
181E:  MOVWF  xC3
1820:  CLRF   xCA
1822:  CLRF   xC9
1824:  CLRF   xC8
1826:  CLRF   xC7
1828:  CLRF   xCE
182A:  CLRF   xCD
182C:  CLRF   xCC
182E:  CLRF   xCB
1830:  MOVF   FC1,W
1832:  ANDLW  C0
1834:  IORLW  0F
1836:  MOVWF  FC1
1838:  MOVLW  07
183A:  MOVWF  FB4
183C:  MOVLW  3E
183E:  MOVWF  37
1840:  MOVLW  20
1842:  MOVWF  38
1844:  MOVLW  5E
1846:  MOVWF  39
1848:  CLRF   3A
184A:  CLRF   3B
184C:  CLRF   3C
184E:  CLRF   3D
1850:  CLRF   3E
1852:  CLRF   3F
1854:  CLRF   40
1856:  CLRF   41
1858:  CLRF   xCF
185A:  CLRF   xD0
185C:  CLRF   xD1
185E:  CLRF   xD2
1860:  CLRF   xD3
1862:  CLRF   xD4
1864:  CLRF   xD5
1866:  CLRF   xD6
1868:  CLRF   xD7
186A:  CLRF   xD8
186C:  CLRF   xD9
186E:  CLRF   xDA
1870:  CLRF   xDB
1872:  CLRF   xDC
1874:  CLRF   xDD
1876:  CLRF   xDE
1878:  CLRF   xDF
187A:  CLRF   xE0
187C:  CLRF   xE1
187E:  CLRF   xE2
1880:  CLRF   xE3
1882:  CLRF   xE4
1884:  CLRF   xE5
1886:  CLRF   xE6
1888:  CLRF   xE7
188A:  CLRF   xE8
188C:  CLRF   xE9
188E:  CLRF   xEA
1890:  CLRF   xEB
1892:  CLRF   xEC
1894:  CLRF   xED
1896:  CLRF   xEE
1898:  CLRF   xEF
189A:  CLRF   xF0
189C:  CLRF   xF1
189E:  CLRF   xF2
18A0:  CLRF   xF3
18A2:  CLRF   xF4
18A4:  CLRF   xF5
18A6:  CLRF   xF6
18A8:  CLRF   xF7
18AA:  CLRF   xF8
18AC:  CLRF   xF9
18AE:  CLRF   xFA
18B0:  CLRF   xFB
18B2:  CLRF   xFC
18B4:  CLRF   xFD
18B6:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
18B8:  MOVF   FC1,W
18BA:  ANDLW  C0
18BC:  IORLW  0B
18BE:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
18C0:  BCF    FC0.0
18C2:  BSF    FC0.1
18C4:  BCF    FC0.2
18C6:  BSF    FC0.7
18C8:  BSF    FC2.0
....................    output_d(0);  
18CA:  CLRF   F95
18CC:  CLRF   F8C
....................    ModoSleep=1; 
18CE:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
18D0:  MOVLW  85
18D2:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
18D4:  BSF    F9D.0
....................    //enable_interrupts(INT_EXT_L2H); 
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
18D6:  MOVLW  00
18D8:  IORLW  05
18DA:  MOVWF  FCA
18DC:  MOVLW  FF
18DE:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
18E0:  BCF    F94.2
18E2:  BCF    F8B.2
18E4:  BCF    F96.6
18E6:  MOVLW  0C
18E8:  MOVWF  FBD
18EA:  CLRF   FB7
18EC:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
18EE:  MOVLW  C0
18F0:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
18F2:  CLRF   FBE
....................    lcd_init(); 
18F4:  CALL   0980
....................    printf(lcd_putc,"\f"); 
18F8:  MOVLW  0C
18FA:  MOVLB  1
18FC:  MOVWF  x15
18FE:  MOVLB  0
1900:  CALL   0A5E
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1904:  MOVFF  FF2,100
1908:  BCF    FF2.7
190A:  CLRF   FA9
190C:  BCF    FA6.6
190E:  BCF    FA6.7
1910:  BSF    FA6.0
1912:  MOVF   FA8,W
1914:  MOVLB  1
1916:  BTFSC  x00.7
1918:  BSF    FF2.7
191A:  MOVWF  3E
191C:  MOVLW  14
191E:  MOVWF  x1B
1920:  MOVLB  0
1922:  CALL   08E2
1926:  MOVFF  FF2,100
192A:  BCF    FF2.7
192C:  MOVLW  01
192E:  MOVWF  FA9
1930:  BCF    FA6.6
1932:  BCF    FA6.7
1934:  BSF    FA6.0
1936:  MOVF   FA8,W
1938:  MOVLB  1
193A:  BTFSC  x00.7
193C:  BSF    FF2.7
193E:  MOVWF  3F
1940:  MOVLW  14
1942:  MOVWF  x1B
1944:  MOVLB  0
1946:  CALL   08E2
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
194A:  MOVFF  FF2,100
194E:  BCF    FF2.7
1950:  MOVLW  02
1952:  MOVWF  FA9
1954:  BCF    FA6.6
1956:  BCF    FA6.7
1958:  BSF    FA6.0
195A:  MOVF   FA8,W
195C:  MOVLB  1
195E:  BTFSC  x00.7
1960:  BSF    FF2.7
1962:  MOVWF  40
1964:  MOVLW  14
1966:  MOVWF  x1B
1968:  MOVLB  0
196A:  CALL   08E2
196E:  MOVFF  FF2,100
1972:  BCF    FF2.7
1974:  MOVLW  03
1976:  MOVWF  FA9
1978:  BCF    FA6.6
197A:  BCF    FA6.7
197C:  BSF    FA6.0
197E:  MOVF   FA8,W
1980:  MOVLB  1
1982:  BTFSC  x00.7
1984:  BSF    FF2.7
1986:  MOVWF  41
1988:  MOVLW  14
198A:  MOVWF  x1B
198C:  MOVLB  0
198E:  CALL   08E2
....................    estadoalarma=read_eeprom(5); 
1992:  MOVFF  FF2,100
1996:  BCF    FF2.7
1998:  MOVLW  05
199A:  MOVWF  FA9
199C:  BCF    FA6.6
199E:  BCF    FA6.7
19A0:  BSF    FA6.0
19A2:  MOVF   FA8,W
19A4:  MOVLB  1
19A6:  BTFSC  x00.7
19A8:  BSF    FF2.7
19AA:  MOVWF  01
19AC:  BCF    34.2
19AE:  BTFSC  01.0
19B0:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
19B2:  MOVFF  FF2,100
19B6:  BCF    FF2.7
19B8:  MOVLW  0A
19BA:  MOVWF  FA9
19BC:  BCF    FA6.6
19BE:  BCF    FA6.7
19C0:  BSF    FA6.0
19C2:  MOVF   FA8,W
19C4:  BTFSC  x00.7
19C6:  BSF    FF2.7
19C8:  MOVWF  2D
19CA:  MOVFF  FF2,100
19CE:  BCF    FF2.7
19D0:  MOVLW  0B
19D2:  MOVWF  FA9
19D4:  BCF    FA6.6
19D6:  BCF    FA6.7
19D8:  BSF    FA6.0
19DA:  MOVF   FA8,W
19DC:  BTFSC  x00.7
19DE:  BSF    FF2.7
19E0:  MOVWF  2C
19E2:  MOVFF  FF2,100
19E6:  BCF    FF2.7
19E8:  MOVLW  0C
19EA:  MOVWF  FA9
19EC:  BCF    FA6.6
19EE:  BCF    FA6.7
19F0:  BSF    FA6.0
19F2:  MOVF   FA8,W
19F4:  BTFSC  x00.7
19F6:  BSF    FF2.7
19F8:  MOVWF  2E
19FA:  MOVFF  FF2,100
19FE:  BCF    FF2.7
1A00:  MOVLW  0D
1A02:  MOVWF  FA9
1A04:  BCF    FA6.6
1A06:  BCF    FA6.7
1A08:  BSF    FA6.0
1A0A:  MOVF   FA8,W
1A0C:  BTFSC  x00.7
1A0E:  BSF    FF2.7
1A10:  MOVWF  2F
1A12:  MOVFF  2F,29
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
1A16:  MOVFF  FF2,100
1A1A:  BCF    FF2.7
1A1C:  MOVLW  19
1A1E:  MOVWF  FA9
1A20:  BCF    FA6.6
1A22:  BCF    FA6.7
1A24:  BSF    FA6.0
1A26:  MOVF   FA8,W
1A28:  BTFSC  x00.7
1A2A:  BSF    FF2.7
1A2C:  MOVWF  21
....................    Temporal=read_eeprom(26); 
1A2E:  MOVFF  FF2,100
1A32:  BCF    FF2.7
1A34:  MOVLW  1A
1A36:  MOVWF  FA9
1A38:  BCF    FA6.6
1A3A:  BCF    FA6.7
1A3C:  BSF    FA6.0
1A3E:  MOVF   FA8,W
1A40:  BTFSC  x00.7
1A42:  BSF    FF2.7
1A44:  CLRF   x0A
1A46:  MOVWF  x09
1A48:  MOVLB  0
1A4A:  CALL   0ACA
1A4E:  MOVFF  03,AA
1A52:  MOVFF  02,A9
1A56:  MOVFF  01,A8
1A5A:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1A5E:  MOVFF  AA,107
1A62:  MOVFF  A9,106
1A66:  MOVFF  A8,105
1A6A:  MOVFF  A7,104
1A6E:  MOVLB  1
1A70:  CLRF   x0B
1A72:  CLRF   x0A
1A74:  MOVLW  48
1A76:  MOVWF  x09
1A78:  MOVLW  85
1A7A:  MOVWF  x08
1A7C:  MOVLB  0
1A7E:  CALL   0B00
1A82:  MOVFF  03,AA
1A86:  MOVFF  02,A9
1A8A:  MOVFF  01,A8
1A8E:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
1A92:  MOVLB  1
1A94:  CLRF   x0A
1A96:  MOVFF  21,109
1A9A:  MOVLB  0
1A9C:  CALL   0ACA
1AA0:  BCF    FD8.1
1AA2:  MOVFF  03,105
1AA6:  MOVFF  02,104
1AAA:  MOVFF  01,103
1AAE:  MOVFF  00,102
1AB2:  MOVFF  AA,109
1AB6:  MOVFF  A9,108
1ABA:  MOVFF  A8,107
1ABE:  MOVFF  A7,106
1AC2:  CALL   0C5E
1AC6:  MOVFF  03,C2
1ACA:  MOVFF  02,C1
1ACE:  MOVFF  01,C0
1AD2:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
1AD6:  MOVFF  FF2,100
1ADA:  BCF    FF2.7
1ADC:  MOVLW  28
1ADE:  MOVWF  FA9
1AE0:  BCF    FA6.6
1AE2:  BCF    FA6.7
1AE4:  BSF    FA6.0
1AE6:  MOVF   FA8,W
1AE8:  MOVLB  1
1AEA:  BTFSC  x00.7
1AEC:  BSF    FF2.7
1AEE:  MOVWF  21
....................    Temporal=read_eeprom(41); 
1AF0:  MOVFF  FF2,100
1AF4:  BCF    FF2.7
1AF6:  MOVLW  29
1AF8:  MOVWF  FA9
1AFA:  BCF    FA6.6
1AFC:  BCF    FA6.7
1AFE:  BSF    FA6.0
1B00:  MOVF   FA8,W
1B02:  BTFSC  x00.7
1B04:  BSF    FF2.7
1B06:  CLRF   x0A
1B08:  MOVWF  x09
1B0A:  MOVLB  0
1B0C:  CALL   0ACA
1B10:  MOVFF  03,AA
1B14:  MOVFF  02,A9
1B18:  MOVFF  01,A8
1B1C:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1B20:  MOVFF  AA,107
1B24:  MOVFF  A9,106
1B28:  MOVFF  A8,105
1B2C:  MOVFF  A7,104
1B30:  MOVLB  1
1B32:  CLRF   x0B
1B34:  CLRF   x0A
1B36:  MOVLW  48
1B38:  MOVWF  x09
1B3A:  MOVLW  85
1B3C:  MOVWF  x08
1B3E:  MOVLB  0
1B40:  CALL   0B00
1B44:  MOVFF  03,AA
1B48:  MOVFF  02,A9
1B4C:  MOVFF  01,A8
1B50:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
1B54:  MOVLB  1
1B56:  CLRF   x0A
1B58:  MOVFF  21,109
1B5C:  MOVLB  0
1B5E:  CALL   0ACA
1B62:  BCF    FD8.1
1B64:  MOVFF  03,105
1B68:  MOVFF  02,104
1B6C:  MOVFF  01,103
1B70:  MOVFF  00,102
1B74:  MOVFF  AA,109
1B78:  MOVFF  A9,108
1B7C:  MOVFF  A8,107
1B80:  MOVFF  A7,106
1B84:  CALL   0C5E
1B88:  MOVFF  03,45
1B8C:  MOVFF  02,44
1B90:  MOVFF  01,43
1B94:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1B98:  MOVFF  FF2,100
1B9C:  BCF    FF2.7
1B9E:  MOVLW  3C
1BA0:  MOVWF  FA9
1BA2:  BCF    FA6.6
1BA4:  BCF    FA6.7
1BA6:  BSF    FA6.0
1BA8:  MOVF   FA8,W
1BAA:  MOVLB  1
1BAC:  BTFSC  x00.7
1BAE:  BSF    FF2.7
1BB0:  MOVWF  24
....................    Temporal1=read_eeprom(61); 
1BB2:  MOVFF  FF2,100
1BB6:  BCF    FF2.7
1BB8:  MOVLW  3D
1BBA:  MOVWF  FA9
1BBC:  BCF    FA6.6
1BBE:  BCF    FA6.7
1BC0:  BSF    FA6.0
1BC2:  MOVF   FA8,W
1BC4:  BTFSC  x00.7
1BC6:  BSF    FF2.7
1BC8:  CLRF   x0A
1BCA:  MOVWF  x09
1BCC:  MOVLB  0
1BCE:  CALL   0ACA
1BD2:  MOVFF  03,B6
1BD6:  MOVFF  02,B5
1BDA:  MOVFF  01,B4
1BDE:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
1BE2:  MOVFF  B6,107
1BE6:  MOVFF  B5,106
1BEA:  MOVFF  B4,105
1BEE:  MOVFF  B3,104
1BF2:  MOVLB  1
1BF4:  CLRF   x0B
1BF6:  CLRF   x0A
1BF8:  MOVLW  48
1BFA:  MOVWF  x09
1BFC:  MOVLW  85
1BFE:  MOVWF  x08
1C00:  MOVLB  0
1C02:  CALL   0B00
1C06:  MOVFF  03,B6
1C0A:  MOVFF  02,B5
1C0E:  MOVFF  01,B4
1C12:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
1C16:  MOVLB  1
1C18:  CLRF   x0A
1C1A:  MOVFF  24,109
1C1E:  MOVLB  0
1C20:  CALL   0ACA
1C24:  BCF    FD8.1
1C26:  MOVFF  03,105
1C2A:  MOVFF  02,104
1C2E:  MOVFF  01,103
1C32:  MOVFF  00,102
1C36:  MOVFF  B6,109
1C3A:  MOVFF  B5,108
1C3E:  MOVFF  B4,107
1C42:  MOVFF  B3,106
1C46:  CALL   0C5E
1C4A:  MOVFF  03,BE
1C4E:  MOVFF  02,BD
1C52:  MOVFF  01,BC
1C56:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
1C5A:  MOVFF  FF2,100
1C5E:  BCF    FF2.7
1C60:  MOVLW  32
1C62:  MOVWF  FA9
1C64:  BCF    FA6.6
1C66:  BCF    FA6.7
1C68:  BSF    FA6.0
1C6A:  MOVF   FA8,W
1C6C:  MOVLB  1
1C6E:  BTFSC  x00.7
1C70:  BSF    FF2.7
1C72:  MOVWF  2B
....................  
....................    MediaMovil=read_eeprom(42); 
1C74:  MOVFF  FF2,100
1C78:  BCF    FF2.7
1C7A:  MOVLW  2A
1C7C:  MOVWF  FA9
1C7E:  BCF    FA6.6
1C80:  BCF    FA6.7
1C82:  BSF    FA6.0
1C84:  MOVF   FA8,W
1C86:  BTFSC  x00.7
1C88:  BSF    FF2.7
1C8A:  MOVWF  2A
....................    if(MediaMovil>12) 
1C8C:  MOVF   2A,W
1C8E:  SUBLW  0C
1C90:  BC    1C96
....................    {MediaMovil=12;} 
1C92:  MOVLW  0C
1C94:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
1C96:  MOVF   2A,F
1C98:  BNZ   1C9E
....................    {MediaMovil=1;} 
1C9A:  MOVLW  01
1C9C:  MOVWF  2A
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
1C9E:  MOVFF  FF2,100
1CA2:  BCF    FF2.7
1CA4:  MOVLW  46
1CA6:  MOVWF  FA9
1CA8:  BCF    FA6.6
1CAA:  BCF    FA6.7
1CAC:  BSF    FA6.0
1CAE:  MOVF   FA8,W
1CB0:  BTFSC  x00.7
1CB2:  BSF    FF2.7
1CB4:  MOVWF  30
1CB6:  MOVFF  FF2,100
1CBA:  BCF    FF2.7
1CBC:  MOVLW  47
1CBE:  MOVWF  FA9
1CC0:  BCF    FA6.6
1CC2:  BCF    FA6.7
1CC4:  BSF    FA6.0
1CC6:  MOVF   FA8,W
1CC8:  BTFSC  x00.7
1CCA:  BSF    FF2.7
1CCC:  MOVWF  31
1CCE:  MOVFF  FF2,100
1CD2:  BCF    FF2.7
1CD4:  MOVLW  48
1CD6:  MOVWF  FA9
1CD8:  BCF    FA6.6
1CDA:  BCF    FA6.7
1CDC:  BSF    FA6.0
1CDE:  MOVF   FA8,W
1CE0:  BTFSC  x00.7
1CE2:  BSF    FF2.7
1CE4:  MOVWF  32
1CE6:  MOVFF  FF2,100
1CEA:  BCF    FF2.7
1CEC:  MOVLW  49
1CEE:  MOVWF  FA9
1CF0:  BCF    FA6.6
1CF2:  BCF    FA6.7
1CF4:  BSF    FA6.0
1CF6:  MOVF   FA8,W
1CF8:  BTFSC  x00.7
1CFA:  BSF    FF2.7
1CFC:  MOVWF  01
1CFE:  BCF    35.2
1D00:  BTFSC  01.0
1D02:  BSF    35.2
....................    Menu=200; 
1D04:  MOVLW  C8
1D06:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
1D08:  MOVF   17,W
1D0A:  SUBLW  C8
1D0C:  BNZ   1DC8
....................       lcd_init(); 
1D0E:  MOVLB  0
1D10:  CALL   0980
....................       intensidadpantalla(contraste); 
1D14:  MOVFF  20,100
1D18:  CALL   0ED6
....................       lcd_gotoxy(1,1); 
1D1C:  MOVLW  01
1D1E:  MOVLB  1
1D20:  MOVWF  x16
1D22:  MOVWF  x17
1D24:  MOVLB  0
1D26:  CALL   09EC
....................       printf(lcd_putc," CABINA  EXTRACTORA "); 
1D2A:  MOVLW  DE
1D2C:  MOVWF  FF6
1D2E:  MOVLW  01
1D30:  MOVWF  FF7
1D32:  CALL   0EEA
....................       lcd_gotoxy(1,2); 
1D36:  MOVLW  01
1D38:  MOVLB  1
1D3A:  MOVWF  x16
1D3C:  MOVLW  02
1D3E:  MOVWF  x17
1D40:  MOVLB  0
1D42:  CALL   09EC
....................       printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1D46:  MOVLW  F4
1D48:  MOVWF  FF6
1D4A:  MOVLW  01
1D4C:  MOVWF  FF7
1D4E:  CALL   0EEA
....................       lcd_gotoxy(1,3); 
1D52:  MOVLW  01
1D54:  MOVLB  1
1D56:  MOVWF  x16
1D58:  MOVLW  03
1D5A:  MOVWF  x17
1D5C:  MOVLB  0
1D5E:  CALL   09EC
....................       printf(lcd_putc,"    JP INGLOBAL     "); 
1D62:  MOVLW  0A
1D64:  MOVWF  FF6
1D66:  MOVLW  02
1D68:  MOVWF  FF7
1D6A:  CALL   0EEA
....................       lcd_gotoxy(1,4); 
1D6E:  MOVLW  01
1D70:  MOVLB  1
1D72:  MOVWF  x16
1D74:  MOVLW  04
1D76:  MOVWF  x17
1D78:  MOVLB  0
1D7A:  CALL   09EC
....................       printf(lcd_putc," REF: PANEL JPCEH15 "); 
1D7E:  MOVLW  20
1D80:  MOVWF  FF6
1D82:  MOVLW  02
1D84:  MOVWF  FF7
1D86:  CALL   0EEA
....................       delay_ms(2000); 
1D8A:  MOVLW  08
1D8C:  MOVLB  1
1D8E:  MOVWF  x00
1D90:  MOVLW  FA
1D92:  MOVWF  x1B
1D94:  MOVLB  0
1D96:  CALL   08E2
1D9A:  MOVLB  1
1D9C:  DECFSZ x00,F
1D9E:  BRA    1D90
....................       printf(lcd_putc,"\f"); 
1DA0:  MOVLW  0C
1DA2:  MOVWF  x15
1DA4:  MOVLB  0
1DA6:  CALL   0A5E
....................       inicio=1; 
1DAA:  BSF    35.4
....................       Menu=0; 
1DAC:  CLRF   17
....................       ModoSleep=0; 
1DAE:  BCF    35.3
....................       delay_ms(500); 
1DB0:  MOVLW  02
1DB2:  MOVLB  1
1DB4:  MOVWF  x00
1DB6:  MOVLW  FA
1DB8:  MOVWF  x1B
1DBA:  MOVLB  0
1DBC:  CALL   08E2
1DC0:  MOVLB  1
1DC2:  DECFSZ x00,F
1DC4:  BRA    1DB6
....................        
....................    } 
1DC6:  BRA    1D08
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1DC8:  MOVF   17,F
1DCA:  BTFSS  FD8.2
1DCC:  BRA    222C
....................    flag_latencia=1;set_pwm1_duty(0); 
1DCE:  BSF    35.0
1DD0:  CLRF   FBE
....................       if(Latencia==1) 
1DD2:  BTFSS  35.1
1DD4:  BRA    1DE4
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1DD6:  MOVLW  0C
1DD8:  MOVWF  x15
1DDA:  MOVLB  0
1DDC:  CALL   0A5E
1DE0:  RESET
1DE2:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
1DE4:  MOVLW  01
1DE6:  MOVWF  x16
1DE8:  MOVWF  x17
1DEA:  MOVLB  0
1DEC:  CALL   09EC
....................    printf(lcd_putc,"     Ingrese        "); 
1DF0:  MOVLW  36
1DF2:  MOVWF  FF6
1DF4:  MOVLW  02
1DF6:  MOVWF  FF7
1DF8:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
1DFC:  MOVLW  01
1DFE:  MOVLB  1
1E00:  MOVWF  x16
1E02:  MOVLW  02
1E04:  MOVWF  x17
1E06:  MOVLB  0
1E08:  CALL   09EC
....................    printf(lcd_putc,"    Contraseña      "); 
1E0C:  MOVLW  4C
1E0E:  MOVWF  FF6
1E10:  MOVLW  02
1E12:  MOVWF  FF7
1E14:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
1E18:  MOVLW  01
1E1A:  MOVLB  1
1E1C:  MOVWF  x16
1E1E:  MOVLW  03
1E20:  MOVWF  x17
1E22:  MOVLB  0
1E24:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1E28:  MOVLW  62
1E2A:  MOVWF  FF6
1E2C:  MOVLW  02
1E2E:  MOVWF  FF7
1E30:  MOVLW  0A
1E32:  MOVLB  1
1E34:  MOVWF  x08
1E36:  MOVLB  0
1E38:  CALL   0F0A
1E3C:  MOVFF  3A,100
1E40:  MOVLW  1F
1E42:  MOVLB  1
1E44:  MOVWF  x01
1E46:  MOVLB  0
1E48:  CALL   0F5E
1E4C:  MOVFF  3B,100
1E50:  MOVLW  1F
1E52:  MOVLB  1
1E54:  MOVWF  x01
1E56:  MOVLB  0
1E58:  CALL   0F5E
1E5C:  MOVFF  3C,100
1E60:  MOVLW  1F
1E62:  MOVLB  1
1E64:  MOVWF  x01
1E66:  MOVLB  0
1E68:  CALL   0F5E
1E6C:  MOVFF  3D,100
1E70:  MOVLW  1F
1E72:  MOVLB  1
1E74:  MOVWF  x01
1E76:  MOVLB  0
1E78:  CALL   0F5E
1E7C:  MOVLW  20
1E7E:  MOVLB  1
1E80:  MOVWF  x15
1E82:  MOVLB  0
1E84:  CALL   0A5E
1E88:  MOVLW  20
1E8A:  MOVLB  1
1E8C:  MOVWF  x15
1E8E:  MOVLB  0
1E90:  CALL   0A5E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1E94:  BSF    F93.3
1E96:  BTFSS  F81.3
1E98:  BRA    1EC4
....................       {  if(Flanco == 0)  
1E9A:  BTFSC  34.4
1E9C:  BRA    1EC2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
1E9E:  MOVLW  0B
1EA0:  SUBWF  1A,W
1EA2:  CLRF   03
1EA4:  ADDLW  3A
1EA6:  MOVWF  FE9
1EA8:  MOVLW  00
1EAA:  ADDWFC 03,W
1EAC:  MOVWF  FEA
1EAE:  INCF   FEF,F
1EB0:  BSF    34.4
1EB2:  MOVLW  1E
1EB4:  MOVLB  1
1EB6:  MOVWF  x1B
1EB8:  MOVLB  0
1EBA:  CALL   08E2
1EBE:  CLRF   52
1EC0:  CLRF   51
....................          else 
1EC2:  BRA    1EC6
....................             {Flanco = 0;} 
1EC4:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1EC6:  BSF    F93.2
1EC8:  BTFSS  F81.2
1ECA:  BRA    1EF6
....................       {  if(Flanco2 == 0)  
1ECC:  BTFSC  34.6
1ECE:  BRA    1EF4
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
1ED0:  MOVLW  0B
1ED2:  SUBWF  1A,W
1ED4:  CLRF   03
1ED6:  ADDLW  3A
1ED8:  MOVWF  FE9
1EDA:  MOVLW  00
1EDC:  ADDWFC 03,W
1EDE:  MOVWF  FEA
1EE0:  DECF   FEF,F
1EE2:  BSF    34.6
1EE4:  MOVLW  1E
1EE6:  MOVLB  1
1EE8:  MOVWF  x1B
1EEA:  MOVLB  0
1EEC:  CALL   08E2
1EF0:  CLRF   52
1EF2:  CLRF   51
....................          else 
1EF4:  BRA    1EF8
....................             {Flanco2 = 0;} 
1EF6:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1EF8:  BSF    F93.0
1EFA:  BTFSS  F81.0
1EFC:  BRA    1F24
....................       {  if(Flanco1 == 0)  
1EFE:  BTFSC  34.5
1F00:  BRA    1F22
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F02:  BSF    34.5
1F04:  INCF   1A,F
1F06:  MOVLW  1E
1F08:  MOVLB  1
1F0A:  MOVWF  x1B
1F0C:  MOVLB  0
1F0E:  CALL   08E2
1F12:  MOVLW  0C
1F14:  MOVLB  1
1F16:  MOVWF  x15
1F18:  MOVLB  0
1F1A:  CALL   0A5E
1F1E:  CLRF   52
1F20:  CLRF   51
....................          else 
1F22:  BRA    1F26
....................             {Flanco1 = 0;}    
1F24:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
1F26:  BSF    F93.1
1F28:  BTFSS  F81.1
1F2A:  BRA    1F52
....................       {  if(Flanco3 == 0)  
1F2C:  BTFSC  34.7
1F2E:  BRA    1F50
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F30:  BSF    34.7
1F32:  DECF   1A,F
1F34:  MOVLW  1E
1F36:  MOVLB  1
1F38:  MOVWF  x1B
1F3A:  MOVLB  0
1F3C:  CALL   08E2
1F40:  MOVLW  0C
1F42:  MOVLB  1
1F44:  MOVWF  x15
1F46:  MOVLB  0
1F48:  CALL   0A5E
1F4C:  CLRF   52
1F4E:  CLRF   51
....................          else 
1F50:  BRA    1F54
....................             {Flanco3 = 0;}     
1F52:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1F54:  MOVLW  0B
1F56:  SUBWF  1A,W
1F58:  CLRF   03
1F5A:  ADDLW  3A
1F5C:  MOVWF  FE9
1F5E:  MOVLW  00
1F60:  ADDWFC 03,W
1F62:  MOVWF  FEA
1F64:  BTFSC  FEF.7
1F66:  BRA    1F6A
1F68:  BRA    1F7E
....................        {clave[unidad-11]=9;} 
1F6A:  MOVLW  0B
1F6C:  SUBWF  1A,W
1F6E:  CLRF   03
1F70:  ADDLW  3A
1F72:  MOVWF  FE9
1F74:  MOVLW  00
1F76:  ADDWFC 03,W
1F78:  MOVWF  FEA
1F7A:  MOVLW  09
1F7C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1F7E:  MOVLW  0B
1F80:  SUBWF  1A,W
1F82:  CLRF   03
1F84:  ADDLW  3A
1F86:  MOVWF  FE9
1F88:  MOVLW  00
1F8A:  ADDWFC 03,W
1F8C:  MOVWF  FEA
1F8E:  BTFSC  FEF.7
1F90:  BRA    1FAA
1F92:  MOVF   FEF,W
1F94:  SUBLW  09
1F96:  BC    1FAA
....................        {clave[unidad-11]=0;} 
1F98:  MOVLW  0B
1F9A:  SUBWF  1A,W
1F9C:  CLRF   03
1F9E:  ADDLW  3A
1FA0:  MOVWF  FE9
1FA2:  MOVLW  00
1FA4:  ADDWFC 03,W
1FA6:  MOVWF  FEA
1FA8:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1FAA:  MOVF   1A,W
1FAC:  SUBLW  0A
1FAE:  BNC   1FB4
....................        {unidad=11;} 
1FB0:  MOVLW  0B
1FB2:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1FB4:  MOVFF  1A,116
1FB8:  MOVLW  04
1FBA:  MOVLB  1
1FBC:  MOVWF  x17
1FBE:  MOVLB  0
1FC0:  CALL   09EC
....................        lcd_putc(t[2]); 
1FC4:  MOVFF  39,115
1FC8:  CALL   0A5E
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1FCC:  MOVF   1A,W
1FCE:  SUBLW  0E
1FD0:  BTFSC  FD8.0
1FD2:  BRA    2200
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1FD4:  MOVF   3A,W
1FD6:  SUBLW  03
1FD8:  BNZ   20BC
1FDA:  MOVF   3B,W
1FDC:  SUBLW  08
1FDE:  BNZ   20BC
1FE0:  MOVF   3C,W
1FE2:  SUBLW  09
1FE4:  BNZ   20BC
1FE6:  MOVF   3D,W
1FE8:  SUBLW  02
1FEA:  BNZ   20BC
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1FEC:  CLRF   FA9
1FEE:  CLRF   FA8
1FF0:  BCF    FA6.6
1FF2:  BCF    FA6.7
1FF4:  BSF    FA6.2
1FF6:  MOVF   FF2,W
1FF8:  MOVWF  00
1FFA:  BCF    FF2.7
1FFC:  MOVLB  F
1FFE:  MOVLW  55
2000:  MOVWF  FA7
2002:  MOVLW  AA
2004:  MOVWF  FA7
2006:  BSF    FA6.1
2008:  BTFSC  FA6.1
200A:  BRA    2008
200C:  BCF    FA6.2
200E:  MOVF   00,W
2010:  IORWF  FF2,F
2012:  MOVLW  14
2014:  MOVLB  1
2016:  MOVWF  x1B
2018:  MOVLB  0
201A:  CALL   08E2
201E:  MOVLW  01
2020:  MOVWF  FA9
2022:  CLRF   FA8
2024:  BCF    FA6.6
2026:  BCF    FA6.7
2028:  BSF    FA6.2
202A:  MOVF   FF2,W
202C:  MOVWF  00
202E:  BCF    FF2.7
2030:  MOVLB  F
2032:  MOVLW  55
2034:  MOVWF  FA7
2036:  MOVLW  AA
2038:  MOVWF  FA7
203A:  BSF    FA6.1
203C:  BTFSC  FA6.1
203E:  BRA    203C
2040:  BCF    FA6.2
2042:  MOVF   00,W
2044:  IORWF  FF2,F
2046:  MOVLW  14
2048:  MOVLB  1
204A:  MOVWF  x1B
204C:  MOVLB  0
204E:  CALL   08E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2052:  MOVLW  02
2054:  MOVWF  FA9
2056:  CLRF   FA8
2058:  BCF    FA6.6
205A:  BCF    FA6.7
205C:  BSF    FA6.2
205E:  MOVF   FF2,W
2060:  MOVWF  00
2062:  BCF    FF2.7
2064:  MOVLB  F
2066:  MOVLW  55
2068:  MOVWF  FA7
206A:  MOVLW  AA
206C:  MOVWF  FA7
206E:  BSF    FA6.1
2070:  BTFSC  FA6.1
2072:  BRA    2070
2074:  BCF    FA6.2
2076:  MOVF   00,W
2078:  IORWF  FF2,F
207A:  MOVLW  14
207C:  MOVLB  1
207E:  MOVWF  x1B
2080:  MOVLB  0
2082:  CALL   08E2
2086:  MOVLW  03
2088:  MOVWF  FA9
208A:  CLRF   FA8
208C:  BCF    FA6.6
208E:  BCF    FA6.7
2090:  BSF    FA6.2
2092:  MOVF   FF2,W
2094:  MOVWF  00
2096:  BCF    FF2.7
2098:  MOVLB  F
209A:  MOVLW  55
209C:  MOVWF  FA7
209E:  MOVLW  AA
20A0:  MOVWF  FA7
20A2:  BSF    FA6.1
20A4:  BTFSC  FA6.1
20A6:  BRA    20A4
20A8:  BCF    FA6.2
20AA:  MOVF   00,W
20AC:  IORWF  FF2,F
20AE:  MOVLW  14
20B0:  MOVLB  1
20B2:  MOVWF  x1B
20B4:  MOVLB  0
20B6:  CALL   08E2
....................              reset_cpu();} 
20BA:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
20BC:  MOVF   3E,W
20BE:  SUBWF  3A,W
20C0:  BNZ   217A
20C2:  MOVF   3F,W
20C4:  SUBWF  3B,W
20C6:  BNZ   217A
20C8:  MOVF   40,W
20CA:  SUBWF  3C,W
20CC:  BNZ   217A
20CE:  MOVF   41,W
20D0:  SUBWF  3D,W
20D2:  BNZ   217A
....................             {lcd_gotoxy(1,1); 
20D4:  MOVLW  01
20D6:  MOVLB  1
20D8:  MOVWF  x16
20DA:  MOVWF  x17
20DC:  MOVLB  0
20DE:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
20E2:  MOVLW  78
20E4:  MOVWF  FF6
20E6:  MOVLW  02
20E8:  MOVWF  FF7
20EA:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
20EE:  MOVLW  01
20F0:  MOVLB  1
20F2:  MOVWF  x16
20F4:  MOVLW  02
20F6:  MOVWF  x17
20F8:  MOVLB  0
20FA:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña    "); 
20FE:  MOVLW  8C
2100:  MOVWF  FF6
2102:  MOVLW  02
2104:  MOVWF  FF7
2106:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
210A:  MOVLW  01
210C:  MOVLB  1
210E:  MOVWF  x16
2110:  MOVLW  03
2112:  MOVWF  x17
2114:  MOVLB  0
2116:  CALL   09EC
....................             printf(lcd_putc,"      Correcta     "); 
211A:  MOVLW  A0
211C:  MOVWF  FF6
211E:  MOVLW  02
2120:  MOVWF  FF7
2122:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2126:  MOVLW  01
2128:  MOVLB  1
212A:  MOVWF  x16
212C:  MOVLW  04
212E:  MOVWF  x17
2130:  MOVLB  0
2132:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
2136:  MOVLW  B4
2138:  MOVWF  FF6
213A:  MOVLW  02
213C:  MOVWF  FF7
213E:  CALL   0EEA
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
2142:  MOVLW  02
2144:  MOVLB  1
2146:  MOVWF  x00
2148:  MOVLW  FA
214A:  MOVWF  x1B
214C:  MOVLB  0
214E:  CALL   08E2
2152:  MOVLB  1
2154:  DECFSZ x00,F
2156:  BRA    2148
2158:  MOVLW  14
215A:  MOVWF  17
215C:  MOVLW  0B
215E:  MOVWF  1A
2160:  MOVLW  0C
2162:  MOVWF  x15
2164:  MOVLB  0
2166:  CALL   0A5E
216A:  BSF    F8A.7
216C:  BCF    F93.7
216E:  BCF    35.0
2170:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
2172:  CLRF   52
2174:  CLRF   51
2176:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2178:  BRA    2200
....................          {lcd_gotoxy(1,1); 
217A:  MOVLW  01
217C:  MOVLB  1
217E:  MOVWF  x16
2180:  MOVWF  x17
2182:  MOVLB  0
2184:  CALL   09EC
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2188:  MOVLW  01
218A:  MOVLB  1
218C:  MOVWF  x16
218E:  MOVLW  02
2190:  MOVWF  x17
2192:  MOVLB  0
2194:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña    "); 
2198:  MOVLW  C8
219A:  MOVWF  FF6
219C:  MOVLW  02
219E:  MOVWF  FF7
21A0:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
21A4:  MOVLW  01
21A6:  MOVLB  1
21A8:  MOVWF  x16
21AA:  MOVLW  03
21AC:  MOVWF  x17
21AE:  MOVLB  0
21B0:  CALL   09EC
....................             printf(lcd_putc,"     Incorrecta    "); 
21B4:  MOVLW  DC
21B6:  MOVWF  FF6
21B8:  MOVLW  02
21BA:  MOVWF  FF7
21BC:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
21C0:  MOVLW  01
21C2:  MOVLB  1
21C4:  MOVWF  x16
21C6:  MOVLW  04
21C8:  MOVWF  x17
21CA:  MOVLB  0
21CC:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
21D0:  MOVLW  F0
21D2:  MOVWF  FF6
21D4:  MOVLW  02
21D6:  MOVWF  FF7
21D8:  CALL   0EEA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
21DC:  MOVLW  02
21DE:  MOVLB  1
21E0:  MOVWF  x00
21E2:  MOVLW  FA
21E4:  MOVWF  x1B
21E6:  MOVLB  0
21E8:  CALL   08E2
21EC:  MOVLB  1
21EE:  DECFSZ x00,F
21F0:  BRA    21E2
21F2:  MOVLW  0B
21F4:  MOVWF  1A
21F6:  MOVLW  0C
21F8:  MOVWF  x15
21FA:  MOVLB  0
21FC:  CALL   0A5E
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
2200:  MOVF   1A,W
2202:  SUBLW  0B
2204:  BC    2228
2206:  MOVF   1A,W
2208:  SUBLW  0D
220A:  BNC   2228
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
220C:  MOVLW  01
220E:  SUBWF  1A,W
2210:  MOVLB  1
2212:  MOVWF  x00
2214:  MOVWF  x16
2216:  MOVLW  04
2218:  MOVWF  x17
221A:  MOVLB  0
221C:  CALL   09EC
....................             lcd_putc(t[1]); 
2220:  MOVFF  38,115
2224:  CALL   0A5E
....................           } 
....................  
....................    } 
2228:  MOVLB  1
222A:  BRA    1DC8
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
222C:  DECFSZ 17,W
222E:  BRA    246A
....................       if(paso<0) 
2230:  BTFSC  36.7
2232:  BRA    2236
2234:  BRA    2238
....................         {paso=0;} 
2236:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
2238:  MOVLW  01
223A:  MOVWF  x16
223C:  MOVWF  x17
223E:  MOVLB  0
2240:  CALL   09EC
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2244:  MOVLW  04
2246:  MOVWF  FF6
2248:  MOVLW  03
224A:  MOVWF  FF7
224C:  CALL   0EEA
....................     
....................    if(UP)//Si oprime hacia arriba 
2250:  BSF    F93.3
2252:  BTFSS  F81.3
2254:  BRA    2274
....................       {  if(Flanco == 0)  
2256:  BTFSC  34.4
2258:  BRA    2272
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
225A:  DECF   1D,F
225C:  DECF   1B,F
225E:  MOVLW  01
2260:  ADDWF  1B,W
2262:  MOVWF  1C
2264:  BSF    34.4
2266:  MOVLW  1E
2268:  MOVLB  1
226A:  MOVWF  x1B
226C:  MOVLB  0
226E:  CALL   08E2
....................          else 
2272:  BRA    2276
....................             {Flanco = 0;} 
2274:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2276:  BSF    F93.2
2278:  BTFSS  F81.2
227A:  BRA    229A
....................       {  if(Flanco2 == 0)  
227C:  BTFSC  34.6
227E:  BRA    2298
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
2280:  INCF   1D,F
2282:  INCF   1B,F
2284:  MOVLW  01
2286:  SUBWF  1B,W
2288:  MOVWF  1C
228A:  BSF    34.6
228C:  MOVLW  1E
228E:  MOVLB  1
2290:  MOVWF  x1B
2292:  MOVLB  0
2294:  CALL   08E2
....................          else 
2298:  BRA    229C
....................             {Flanco2 = 0;} 
229A:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
229C:  MOVF   1D,W
229E:  SUBWF  1F,W
22A0:  BC    22B2
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
22A2:  INCF   36,F
22A4:  MOVFF  1D,1F
22A8:  MOVLW  02
22AA:  SUBWF  1F,W
22AC:  MOVWF  1E
22AE:  MOVLW  04
22B0:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
22B2:  MOVF   1E,W
22B4:  SUBWF  1D,W
22B6:  BC    22C8
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
22B8:  DECF   36,F
22BA:  MOVFF  1D,1E
22BE:  MOVLW  02
22C0:  ADDWF  1E,W
22C2:  MOVWF  1F
22C4:  MOVLW  02
22C6:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
22C8:  MOVF   1D,W
22CA:  SUBWF  18,W
22CC:  BC    22E0
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
22CE:  MOVFF  19,1D
22D2:  MOVLW  02
22D4:  MOVWF  1B
22D6:  CLRF   36
22D8:  MOVFF  1D,1E
22DC:  ADDWF  1E,W
22DE:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
22E0:  MOVF   19,W
22E2:  SUBWF  1D,W
22E4:  BC    22FC
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
22E6:  MOVFF  18,1D
22EA:  MOVLW  04
22EC:  MOVWF  1B
22EE:  SUBWF  18,W
22F0:  MOVWF  36
22F2:  MOVFF  1D,1F
22F6:  MOVLW  02
22F8:  SUBWF  1F,W
22FA:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
22FC:  MOVLW  01
22FE:  ADDWF  36,W
2300:  MOVLB  1
2302:  MOVWF  x00
2304:  MOVWF  x01
2306:  MOVLW  02
2308:  MOVWF  x02
230A:  MOVLB  0
230C:  CALL   103C
....................         mensajes(2+paso,3); 
2310:  MOVLW  02
2312:  ADDWF  36,W
2314:  MOVLB  1
2316:  MOVWF  x00
2318:  MOVWF  x01
231A:  MOVLW  03
231C:  MOVWF  x02
231E:  MOVLB  0
2320:  CALL   103C
....................         mensajes(3+paso,4); 
2324:  MOVLW  03
2326:  ADDWF  36,W
2328:  MOVLB  1
232A:  MOVWF  x00
232C:  MOVWF  x01
232E:  MOVLW  04
2330:  MOVWF  x02
2332:  MOVLB  0
2334:  CALL   103C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2338:  MOVLW  01
233A:  MOVLB  1
233C:  MOVWF  x16
233E:  MOVFF  1B,117
2342:  MOVLB  0
2344:  CALL   09EC
....................         lcd_putc(t[0]); 
2348:  MOVFF  37,115
234C:  CALL   0A5E
....................  
....................         if(Flecha==2) 
2350:  MOVF   1B,W
2352:  SUBLW  02
2354:  BNZ   2386
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2356:  MOVLW  01
2358:  MOVLB  1
235A:  MOVWF  x16
235C:  MOVLW  04
235E:  MOVWF  x17
2360:  MOVLB  0
2362:  CALL   09EC
....................             lcd_putc(t[1]); 
2366:  MOVFF  38,115
236A:  CALL   0A5E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
236E:  MOVLW  01
2370:  MOVLB  1
2372:  MOVWF  x16
2374:  MOVLW  03
2376:  MOVWF  x17
2378:  MOVLB  0
237A:  CALL   09EC
....................             lcd_putc(t[1]); 
237E:  MOVFF  38,115
2382:  CALL   0A5E
....................           } 
....................          
....................         if(Flecha==4) 
2386:  MOVF   1B,W
2388:  SUBLW  04
238A:  BNZ   23BC
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
238C:  MOVLW  01
238E:  MOVLB  1
2390:  MOVWF  x16
2392:  MOVLW  02
2394:  MOVWF  x17
2396:  MOVLB  0
2398:  CALL   09EC
....................             lcd_putc(t[1]); 
239C:  MOVFF  38,115
23A0:  CALL   0A5E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
23A4:  MOVLW  01
23A6:  MOVLB  1
23A8:  MOVWF  x16
23AA:  MOVLW  03
23AC:  MOVWF  x17
23AE:  MOVLB  0
23B0:  CALL   09EC
....................             lcd_putc(t[1]); 
23B4:  MOVFF  38,115
23B8:  CALL   0A5E
....................           } 
....................          
....................         if(Flecha==3) 
23BC:  MOVF   1B,W
23BE:  SUBLW  03
23C0:  BNZ   23F2
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
23C2:  MOVLW  01
23C4:  MOVLB  1
23C6:  MOVWF  x16
23C8:  MOVLW  04
23CA:  MOVWF  x17
23CC:  MOVLB  0
23CE:  CALL   09EC
....................             lcd_putc(t[1]); 
23D2:  MOVFF  38,115
23D6:  CALL   0A5E
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
23DA:  MOVLW  01
23DC:  MOVLB  1
23DE:  MOVWF  x16
23E0:  MOVLW  02
23E2:  MOVWF  x17
23E4:  MOVLB  0
23E6:  CALL   09EC
....................             lcd_putc(t[1]); 
23EA:  MOVFF  38,115
23EE:  CALL   0A5E
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
23F2:  BSF    F93.0
23F4:  BTFSS  F81.0
23F6:  BRA    2434
....................       {  if(Flanco1 == 0)  
23F8:  BTFSC  34.5
23FA:  BRA    2432
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
23FC:  MOVFF  1D,17
2400:  MOVLW  03
2402:  MOVWF  1B
2404:  MOVLW  02
2406:  MOVLB  1
2408:  MOVWF  x00
240A:  MOVLW  FA
240C:  MOVWF  x1B
240E:  MOVLB  0
2410:  CALL   08E2
2414:  MOVLB  1
2416:  DECFSZ x00,F
2418:  BRA    240A
241A:  MOVLW  0C
241C:  MOVWF  x15
241E:  MOVLB  0
2420:  CALL   0A5E
....................             if(Menu==6) 
2424:  MOVF   17,W
2426:  SUBLW  06
2428:  BNZ   2432
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
242A:  CLRF   3A
242C:  CLRF   3B
242E:  CLRF   3C
2430:  CLRF   3D
....................          else 
2432:  BRA    2436
....................             {Flanco1 = 0;}   
2434:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
2436:  BSF    F93.1
2438:  BTFSS  F81.1
243A:  BRA    2466
....................       {  if(Flanco3 == 0)  
243C:  BTFSC  34.7
243E:  BRA    2464
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
2440:  MOVLW  02
2442:  MOVLB  1
2444:  MOVWF  x00
2446:  MOVLW  FA
2448:  MOVWF  x1B
244A:  MOVLB  0
244C:  CALL   08E2
2450:  MOVLB  1
2452:  DECFSZ x00,F
2454:  BRA    2446
2456:  MOVLW  14
2458:  MOVWF  17
245A:  MOVLW  0C
245C:  MOVWF  x15
245E:  MOVLB  0
2460:  CALL   0A5E
....................          else 
2464:  BRA    2468
....................             {Flanco3 = 0;}                
2466:  BCF    34.7
2468:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
246A:  MOVF   17,W
246C:  SUBLW  02
246E:  BTFSS  FD8.2
2470:  BRA    25BE
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
2472:  BTG    34.2
2474:  BSF    34.5
2476:  MOVLW  01
2478:  MOVWF  17
247A:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
247C:  BTFSS  34.2
247E:  BRA    24F0
....................             {estadoalarma=1; 
2480:  BSF    34.2
....................                lcd_gotoxy(1,1); 
2482:  MOVLW  01
2484:  MOVWF  x16
2486:  MOVWF  x17
2488:  MOVLB  0
248A:  CALL   09EC
....................                printf(lcd_putc,"                    "); 
248E:  MOVLW  1A
2490:  MOVWF  FF6
2492:  MOVLW  03
2494:  MOVWF  FF7
2496:  CALL   0EEA
....................                lcd_gotoxy(1,2); 
249A:  MOVLW  01
249C:  MOVLB  1
249E:  MOVWF  x16
24A0:  MOVLW  02
24A2:  MOVWF  x17
24A4:  MOVLB  0
24A6:  CALL   09EC
....................                printf(lcd_putc,"        Activo      "); 
24AA:  MOVLW  30
24AC:  MOVWF  FF6
24AE:  MOVLW  03
24B0:  MOVWF  FF7
24B2:  CALL   0EEA
....................                lcd_gotoxy(1,3); 
24B6:  MOVLW  01
24B8:  MOVLB  1
24BA:  MOVWF  x16
24BC:  MOVLW  03
24BE:  MOVWF  x17
24C0:  MOVLB  0
24C2:  CALL   09EC
....................                printf(lcd_putc,"        Alarma      "); 
24C6:  MOVLW  46
24C8:  MOVWF  FF6
24CA:  MOVLW  03
24CC:  MOVWF  FF7
24CE:  CALL   0EEA
....................                lcd_gotoxy(1,4); 
24D2:  MOVLW  01
24D4:  MOVLB  1
24D6:  MOVWF  x16
24D8:  MOVLW  04
24DA:  MOVWF  x17
24DC:  MOVLB  0
24DE:  CALL   09EC
....................                printf(lcd_putc,"                    ");} 
24E2:  MOVLW  5C
24E4:  MOVWF  FF6
24E6:  MOVLW  03
24E8:  MOVWF  FF7
24EA:  CALL   0EEA
24EE:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
24F0:  BTFSC  34.2
24F2:  BRA    2564
....................             {estadoalarma=0; 
24F4:  BCF    34.2
....................                lcd_gotoxy(1,1); 
24F6:  MOVLW  01
24F8:  MOVWF  x16
24FA:  MOVWF  x17
24FC:  MOVLB  0
24FE:  CALL   09EC
....................                printf(lcd_putc,"                    "); 
2502:  MOVLW  72
2504:  MOVWF  FF6
2506:  MOVLW  03
2508:  MOVWF  FF7
250A:  CALL   0EEA
....................                lcd_gotoxy(1,2); 
250E:  MOVLW  01
2510:  MOVLB  1
2512:  MOVWF  x16
2514:  MOVLW  02
2516:  MOVWF  x17
2518:  MOVLB  0
251A:  CALL   09EC
....................                printf(lcd_putc,"      Desactivo     "); 
251E:  MOVLW  88
2520:  MOVWF  FF6
2522:  MOVLW  03
2524:  MOVWF  FF7
2526:  CALL   0EEA
....................                lcd_gotoxy(1,3); 
252A:  MOVLW  01
252C:  MOVLB  1
252E:  MOVWF  x16
2530:  MOVLW  03
2532:  MOVWF  x17
2534:  MOVLB  0
2536:  CALL   09EC
....................                printf(lcd_putc,"       Alarma       "); 
253A:  MOVLW  9E
253C:  MOVWF  FF6
253E:  MOVLW  03
2540:  MOVWF  FF7
2542:  CALL   0EEA
....................                lcd_gotoxy(1,4); 
2546:  MOVLW  01
2548:  MOVLB  1
254A:  MOVWF  x16
254C:  MOVLW  04
254E:  MOVWF  x17
2550:  MOVLB  0
2552:  CALL   09EC
....................                printf(lcd_putc,"                    ");} 
2556:  MOVLW  B4
2558:  MOVWF  FF6
255A:  MOVLW  03
255C:  MOVWF  FF7
255E:  CALL   0EEA
2562:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2564:  MOVLW  00
2566:  BTFSC  34.2
2568:  MOVLW  01
256A:  MOVWF  x00
256C:  MOVLW  05
256E:  MOVWF  FA9
2570:  MOVFF  100,FA8
2574:  BCF    FA6.6
2576:  BCF    FA6.7
2578:  BSF    FA6.2
257A:  MOVF   FF2,W
257C:  MOVWF  00
257E:  BCF    FF2.7
2580:  MOVLB  F
2582:  MOVLW  55
2584:  MOVWF  FA7
2586:  MOVLW  AA
2588:  MOVWF  FA7
258A:  BSF    FA6.1
258C:  BTFSC  FA6.1
258E:  BRA    258C
2590:  BCF    FA6.2
2592:  MOVF   00,W
2594:  IORWF  FF2,F
2596:  MOVLW  02
2598:  MOVLB  1
259A:  MOVWF  x00
259C:  MOVLW  FA
259E:  MOVWF  x1B
25A0:  MOVLB  0
25A2:  CALL   08E2
25A6:  MOVLB  1
25A8:  DECFSZ x00,F
25AA:  BRA    259C
25AC:  MOVLW  02
25AE:  MOVWF  1B
25B0:  MOVWF  1D
25B2:  MOVLW  0C
25B4:  MOVWF  x15
25B6:  MOVLB  0
25B8:  CALL   0A5E
25BC:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
25BE:  MOVF   17,W
25C0:  SUBLW  03
25C2:  BTFSS  FD8.2
25C4:  BRA    285E
....................    lcd_gotoxy(1,1); 
25C6:  MOVLW  01
25C8:  MOVWF  x16
25CA:  MOVWF  x17
25CC:  MOVLB  0
25CE:  CALL   09EC
....................    printf(lcd_putc,"  Duracion Actual   ");                           
25D2:  MOVLW  CA
25D4:  MOVWF  FF6
25D6:  MOVLW  03
25D8:  MOVWF  FF7
25DA:  CALL   0EEA
....................    lcd_gotoxy(1,2);                                                   
25DE:  MOVLW  01
25E0:  MOVLB  1
25E2:  MOVWF  x16
25E4:  MOVLW  02
25E6:  MOVWF  x17
25E8:  MOVLB  0
25EA:  CALL   09EC
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
25EE:  MOVLW  E0
25F0:  MOVWF  FF6
25F2:  MOVLW  03
25F4:  MOVWF  FF7
25F6:  MOVLW  09
25F8:  MOVLB  1
25FA:  MOVWF  x08
25FC:  MOVLB  0
25FE:  CALL   0F0A
2602:  MOVFF  32,100
2606:  MOVLW  01
2608:  MOVLB  1
260A:  MOVWF  x01
260C:  MOVLB  0
260E:  CALL   1150
2612:  MOVLW  3A
2614:  MOVLB  1
2616:  MOVWF  x15
2618:  MOVLB  0
261A:  CALL   0A5E
261E:  MOVFF  31,100
2622:  MOVLW  01
2624:  MOVLB  1
2626:  MOVWF  x01
2628:  MOVLB  0
262A:  CALL   1150
262E:  MOVLW  3A
2630:  MOVLB  1
2632:  MOVWF  x15
2634:  MOVLB  0
2636:  CALL   0A5E
263A:  MOVFF  30,100
263E:  MOVLW  01
2640:  MOVLB  1
2642:  MOVWF  x01
2644:  MOVLB  0
2646:  CALL   1150
264A:  MOVLW  20
264C:  MOVLB  1
264E:  MOVWF  x15
2650:  MOVLB  0
2652:  CALL   0A5E
....................     
....................    if(flag_filtro==1) 
2656:  BTFSS  35.2
2658:  BRA    2678
....................    { 
....................       lcd_gotoxy(1,3);                                                  
265A:  MOVLW  01
265C:  MOVLB  1
265E:  MOVWF  x16
2660:  MOVLW  03
2662:  MOVWF  x17
2664:  MOVLB  0
2666:  CALL   09EC
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
266A:  MOVLW  FA
266C:  MOVWF  FF6
266E:  MOVLW  03
2670:  MOVWF  FF7
2672:  CALL   0EEA
....................    } 
....................    else 
2676:  BRA    2694
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2678:  MOVLW  01
267A:  MOVLB  1
267C:  MOVWF  x16
267E:  MOVLW  03
2680:  MOVWF  x17
2682:  MOVLB  0
2684:  CALL   09EC
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
2688:  MOVLW  10
268A:  MOVWF  FF6
268C:  MOVLW  04
268E:  MOVWF  FF7
2690:  CALL   0EEA
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
2694:  MOVLW  01
2696:  MOVLB  1
2698:  MOVWF  x16
269A:  MOVLW  04
269C:  MOVWF  x17
269E:  MOVLB  0
26A0:  CALL   09EC
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
26A4:  MOVLW  26
26A6:  MOVWF  FF6
26A8:  MOVLW  04
26AA:  MOVWF  FF7
26AC:  CALL   0EEA
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
26B0:  BSF    F93.3
26B2:  BTFSS  F81.3
26B4:  BRA    27B8
....................       {  delay_ms(200); 
26B6:  MOVLW  C8
26B8:  MOVLB  1
26BA:  MOVWF  x1B
26BC:  MOVLB  0
26BE:  CALL   08E2
....................          printf(lcd_putc,"\f"); 
26C2:  MOVLW  0C
26C4:  MOVLB  1
26C6:  MOVWF  x15
26C8:  MOVLB  0
26CA:  CALL   0A5E
....................          lcd_gotoxy(1,2); 
26CE:  MOVLW  01
26D0:  MOVLB  1
26D2:  MOVWF  x16
26D4:  MOVLW  02
26D6:  MOVWF  x17
26D8:  MOVLB  0
26DA:  CALL   09EC
....................          printf(lcd_putc," Reset de tiempo "); 
26DE:  MOVLW  3C
26E0:  MOVWF  FF6
26E2:  MOVLW  04
26E4:  MOVWF  FF7
26E6:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
26EA:  MOVLW  01
26EC:  MOVLB  1
26EE:  MOVWF  x16
26F0:  MOVLW  03
26F2:  MOVWF  x17
26F4:  MOVLB  0
26F6:  CALL   09EC
....................          printf(lcd_putc,"     Exitoso     "); 
26FA:  MOVLW  4E
26FC:  MOVWF  FF6
26FE:  MOVLW  04
2700:  MOVWF  FF7
2702:  CALL   0EEA
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
2706:  MOVLW  46
2708:  MOVWF  FA9
270A:  CLRF   FA8
270C:  BCF    FA6.6
270E:  BCF    FA6.7
2710:  BSF    FA6.2
2712:  MOVF   FF2,W
2714:  MOVWF  00
2716:  BCF    FF2.7
2718:  MOVLB  F
271A:  MOVLW  55
271C:  MOVWF  FA7
271E:  MOVLW  AA
2720:  MOVWF  FA7
2722:  BSF    FA6.1
2724:  BTFSC  FA6.1
2726:  BRA    2724
2728:  BCF    FA6.2
272A:  MOVF   00,W
272C:  IORWF  FF2,F
272E:  MOVLW  47
2730:  MOVWF  FA9
2732:  CLRF   FA8
2734:  BCF    FA6.6
2736:  BCF    FA6.7
2738:  BSF    FA6.2
273A:  MOVF   FF2,W
273C:  MOVWF  00
273E:  BCF    FF2.7
2740:  MOVLW  55
2742:  MOVWF  FA7
2744:  MOVLW  AA
2746:  MOVWF  FA7
2748:  BSF    FA6.1
274A:  BTFSC  FA6.1
274C:  BRA    274A
274E:  BCF    FA6.2
2750:  MOVF   00,W
2752:  IORWF  FF2,F
2754:  MOVLW  48
2756:  MOVWF  FA9
2758:  CLRF   FA8
275A:  BCF    FA6.6
275C:  BCF    FA6.7
275E:  BSF    FA6.2
2760:  MOVF   FF2,W
2762:  MOVWF  00
2764:  BCF    FF2.7
2766:  MOVLW  55
2768:  MOVWF  FA7
276A:  MOVLW  AA
276C:  MOVWF  FA7
276E:  BSF    FA6.1
2770:  BTFSC  FA6.1
2772:  BRA    2770
2774:  BCF    FA6.2
2776:  MOVF   00,W
2778:  IORWF  FF2,F
....................          delay_ms(700); 
277A:  MOVLW  04
277C:  MOVLB  1
277E:  MOVWF  x00
2780:  MOVLW  AF
2782:  MOVWF  x1B
2784:  MOVLB  0
2786:  CALL   08E2
278A:  MOVLB  1
278C:  DECFSZ x00,F
278E:  BRA    2780
....................          segundos=0;minutos=0;horas=0; 
2790:  CLRF   30
2792:  CLRF   31
2794:  CLRF   32
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2796:  MOVLW  1E
2798:  MOVWF  x1B
279A:  MOVLB  0
279C:  CALL   08E2
27A0:  MOVLW  01
27A2:  MOVWF  17
27A4:  CLRF   36
27A6:  MOVLW  02
27A8:  MOVWF  1B
27AA:  MOVWF  1D
27AC:  MOVLW  0C
27AE:  MOVLB  1
27B0:  MOVWF  x15
27B2:  MOVLB  0
27B4:  CALL   0A5E
....................       } 
....................        
....................       if(RIGHT) 
27B8:  BSF    F93.0
27BA:  BTFSS  F81.0
27BC:  BRA    2820
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
27BE:  BTG    35.2
27C0:  MOVLW  00
27C2:  BTFSC  35.2
27C4:  MOVLW  01
27C6:  MOVLB  1
27C8:  MOVWF  x00
27CA:  MOVLW  49
27CC:  MOVWF  FA9
27CE:  MOVFF  100,FA8
27D2:  BCF    FA6.6
27D4:  BCF    FA6.7
27D6:  BSF    FA6.2
27D8:  MOVF   FF2,W
27DA:  MOVWF  00
27DC:  BCF    FF2.7
27DE:  MOVLB  F
27E0:  MOVLW  55
27E2:  MOVWF  FA7
27E4:  MOVLW  AA
27E6:  MOVWF  FA7
27E8:  BSF    FA6.1
27EA:  BTFSC  FA6.1
27EC:  BRA    27EA
27EE:  BCF    FA6.2
27F0:  MOVF   00,W
27F2:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
27F4:  MOVLW  02
27F6:  MOVLB  1
27F8:  MOVWF  x00
27FA:  MOVLW  FA
27FC:  MOVWF  x1B
27FE:  MOVLB  0
2800:  CALL   08E2
2804:  MOVLB  1
2806:  DECFSZ x00,F
2808:  BRA    27FA
280A:  MOVLW  01
280C:  MOVWF  17
280E:  CLRF   36
2810:  MOVLW  02
2812:  MOVWF  1B
2814:  MOVWF  1D
2816:  MOVLW  0C
2818:  MOVWF  x15
281A:  MOVLB  0
281C:  CALL   0A5E
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
2820:  BSF    F93.1
2822:  BTFSS  F81.1
2824:  BRA    285A
....................       {  if(Flanco3 == 0)  
2826:  BTFSC  34.7
2828:  BRA    2858
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
282A:  BSF    34.7
282C:  MOVLW  02
282E:  MOVLB  1
2830:  MOVWF  x00
2832:  MOVLW  FA
2834:  MOVWF  x1B
2836:  MOVLB  0
2838:  CALL   08E2
283C:  MOVLB  1
283E:  DECFSZ x00,F
2840:  BRA    2832
2842:  MOVLW  01
2844:  MOVWF  17
2846:  CLRF   36
2848:  MOVLW  02
284A:  MOVWF  1B
284C:  MOVWF  1D
284E:  MOVLW  0C
2850:  MOVWF  x15
2852:  MOVLB  0
2854:  CALL   0A5E
....................          else 
2858:  BRA    285C
....................             {Flanco3 = 0;}       
285A:  BCF    34.7
285C:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
285E:  MOVF   17,W
2860:  SUBLW  04
2862:  BTFSS  FD8.2
2864:  BRA    2B7A
....................    lcd_gotoxy(1,2); 
2866:  MOVLW  01
2868:  MOVWF  x16
286A:  MOVLW  02
286C:  MOVWF  x17
286E:  MOVLB  0
2870:  CALL   09EC
....................    printf(lcd_putc,"      Setpoint      "); 
2874:  MOVLW  60
2876:  MOVWF  FF6
2878:  MOVLW  04
287A:  MOVWF  FF7
287C:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
2880:  MOVLW  01
2882:  MOVLB  1
2884:  MOVWF  x16
2886:  MOVLW  03
2888:  MOVWF  x17
288A:  MOVLB  0
288C:  CALL   09EC
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
2890:  MOVLW  76
2892:  MOVWF  FF6
2894:  MOVLW  04
2896:  MOVWF  FF7
2898:  MOVLW  07
289A:  MOVLB  1
289C:  MOVWF  x08
289E:  MOVLB  0
28A0:  CALL   0F0A
28A4:  MOVLW  89
28A6:  MOVWF  FE9
28A8:  MOVFF  45,10B
28AC:  MOVFF  44,10A
28B0:  MOVFF  43,109
28B4:  MOVFF  42,108
28B8:  MOVLW  02
28BA:  MOVLB  1
28BC:  MOVWF  x0C
28BE:  MOVLB  0
28C0:  CALL   1386
28C4:  MOVLW  20
28C6:  MOVLB  1
28C8:  MOVWF  x15
28CA:  MOVLB  0
28CC:  CALL   0A5E
28D0:  MOVLW  20
28D2:  MOVLB  1
28D4:  MOVWF  x15
28D6:  MOVLB  0
28D8:  CALL   0A5E
28DC:  MOVLW  20
28DE:  MOVLB  1
28E0:  MOVWF  x15
28E2:  MOVLB  0
28E4:  CALL   0A5E
....................     
....................    if(setpoint>2.0) 
28E8:  MOVLB  1
28EA:  CLRF   x02
28EC:  CLRF   x01
28EE:  CLRF   x00
28F0:  MOVLW  80
28F2:  MOVLB  0
28F4:  MOVWF  xFF
28F6:  MOVFF  45,106
28FA:  MOVFF  44,105
28FE:  MOVFF  43,104
2902:  MOVFF  42,103
2906:  CALL   1538
290A:  BNC   2916
....................    {setpoint=2.0;} 
290C:  CLRF   45
290E:  CLRF   44
2910:  CLRF   43
2912:  MOVLW  80
2914:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
2916:  MOVFF  45,102
291A:  MOVFF  44,101
291E:  MOVFF  43,100
2922:  MOVFF  42,FF
2926:  MOVLB  1
2928:  CLRF   x06
292A:  CLRF   x05
292C:  CLRF   x04
292E:  MOVLW  7E
2930:  MOVWF  x03
2932:  MOVLB  0
2934:  CALL   1538
2938:  BNC   2944
....................    {setpoint=0.5;} 
293A:  CLRF   45
293C:  CLRF   44
293E:  CLRF   43
2940:  MOVLW  7E
2942:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
2944:  BSF    F93.3
2946:  BTFSS  F81.3
2948:  BRA    2998
....................       {  if(Flanco == 0)  
294A:  BTFSC  34.4
294C:  BRA    2996
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
294E:  BCF    FD8.1
2950:  MOVFF  45,105
2954:  MOVFF  44,104
2958:  MOVFF  43,103
295C:  MOVFF  42,102
2960:  MOVLW  CD
2962:  MOVLB  1
2964:  MOVWF  x09
2966:  MOVLW  CC
2968:  MOVWF  x08
296A:  MOVLW  4C
296C:  MOVWF  x07
296E:  MOVLW  7B
2970:  MOVWF  x06
2972:  MOVLB  0
2974:  CALL   0C5E
2978:  MOVFF  03,45
297C:  MOVFF  02,44
2980:  MOVFF  01,43
2984:  MOVFF  00,42
2988:  BSF    34.4
298A:  MOVLW  1E
298C:  MOVLB  1
298E:  MOVWF  x1B
2990:  MOVLB  0
2992:  CALL   08E2
....................          else 
2996:  BRA    299A
....................             {Flanco = 0;} 
2998:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
299A:  BSF    F93.2
299C:  BTFSS  F81.2
299E:  BRA    29EE
....................       {  if(Flanco2 == 0)  
29A0:  BTFSC  34.6
29A2:  BRA    29EC
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
29A4:  BSF    FD8.1
29A6:  MOVFF  45,105
29AA:  MOVFF  44,104
29AE:  MOVFF  43,103
29B2:  MOVFF  42,102
29B6:  MOVLW  CD
29B8:  MOVLB  1
29BA:  MOVWF  x09
29BC:  MOVLW  CC
29BE:  MOVWF  x08
29C0:  MOVLW  4C
29C2:  MOVWF  x07
29C4:  MOVLW  7B
29C6:  MOVWF  x06
29C8:  MOVLB  0
29CA:  CALL   0C5E
29CE:  MOVFF  03,45
29D2:  MOVFF  02,44
29D6:  MOVFF  01,43
29DA:  MOVFF  00,42
29DE:  BSF    34.6
29E0:  MOVLW  1E
29E2:  MOVLB  1
29E4:  MOVWF  x1B
29E6:  MOVLB  0
29E8:  CALL   08E2
....................          else 
29EC:  BRA    29F0
....................             {Flanco2 = 0;} 
29EE:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
29F0:  BSF    F93.0
29F2:  BTFSS  F81.0
29F4:  BRA    2B38
....................       {  if(Flanco1 == 0)  
29F6:  BTFSC  34.5
29F8:  BRA    2B36
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
29FA:  MOVLW  01
29FC:  MOVWF  17
29FE:  CLRF   36
2A00:  MOVLW  02
2A02:  MOVWF  1B
2A04:  MOVWF  1D
2A06:  MOVLW  0B
2A08:  MOVWF  1A
2A0A:  MOVLW  02
2A0C:  MOVLB  1
2A0E:  MOVWF  x00
2A10:  MOVLW  FA
2A12:  MOVWF  x1B
2A14:  MOVLB  0
2A16:  CALL   08E2
2A1A:  MOVLB  1
2A1C:  DECFSZ x00,F
2A1E:  BRA    2A10
2A20:  MOVLW  0C
2A22:  MOVWF  x15
2A24:  MOVLB  0
2A26:  CALL   0A5E
....................             Temporal=setpoint; 
2A2A:  MOVFF  45,AA
2A2E:  MOVFF  44,A9
2A32:  MOVFF  43,A8
2A36:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
2A3A:  MOVFF  45,102
2A3E:  MOVFF  44,101
2A42:  MOVFF  43,100
2A46:  MOVFF  42,FF
2A4A:  CALL   15B6
2A4E:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
2A52:  MOVLB  1
2A54:  CLRF   x0A
2A56:  MOVFF  21,109
2A5A:  MOVLB  0
2A5C:  CALL   0ACA
2A60:  BSF    FD8.1
2A62:  MOVFF  AA,105
2A66:  MOVFF  A9,104
2A6A:  MOVFF  A8,103
2A6E:  MOVFF  A7,102
2A72:  MOVFF  03,109
2A76:  MOVFF  02,108
2A7A:  MOVFF  01,107
2A7E:  MOVFF  00,106
2A82:  CALL   0C5E
2A86:  MOVFF  03,AA
2A8A:  MOVFF  02,A9
2A8E:  MOVFF  01,A8
2A92:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
2A96:  MOVFF  AA,118
2A9A:  MOVFF  A9,117
2A9E:  MOVFF  A8,116
2AA2:  MOVFF  A7,115
2AA6:  MOVLB  1
2AA8:  CLRF   x1C
2AAA:  CLRF   x1B
2AAC:  MOVLW  48
2AAE:  MOVWF  x1A
2AB0:  MOVLW  85
2AB2:  MOVWF  x19
2AB4:  MOVLB  0
2AB6:  CALL   11CC
2ABA:  MOVFF  03,AE
2ABE:  MOVFF  02,AD
2AC2:  MOVFF  01,AC
2AC6:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
2ACA:  MOVFF  AE,102
2ACE:  MOVFF  AD,101
2AD2:  MOVFF  AC,100
2AD6:  MOVFF  AB,FF
2ADA:  CALL   15B6
2ADE:  MOVFF  01,23
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
2AE2:  MOVLW  28
2AE4:  MOVWF  FA9
2AE6:  MOVFF  21,FA8
2AEA:  BCF    FA6.6
2AEC:  BCF    FA6.7
2AEE:  BSF    FA6.2
2AF0:  MOVF   FF2,W
2AF2:  MOVWF  00
2AF4:  BCF    FF2.7
2AF6:  MOVLB  F
2AF8:  MOVLW  55
2AFA:  MOVWF  FA7
2AFC:  MOVLW  AA
2AFE:  MOVWF  FA7
2B00:  BSF    FA6.1
2B02:  BTFSC  FA6.1
2B04:  BRA    2B02
2B06:  BCF    FA6.2
2B08:  MOVF   00,W
2B0A:  IORWF  FF2,F
2B0C:  MOVLW  29
2B0E:  MOVWF  FA9
2B10:  MOVFF  23,FA8
2B14:  BCF    FA6.6
2B16:  BCF    FA6.7
2B18:  BSF    FA6.2
2B1A:  MOVF   FF2,W
2B1C:  MOVWF  00
2B1E:  BCF    FF2.7
2B20:  MOVLW  55
2B22:  MOVWF  FA7
2B24:  MOVLW  AA
2B26:  MOVWF  FA7
2B28:  BSF    FA6.1
2B2A:  BTFSC  FA6.1
2B2C:  BRA    2B2A
2B2E:  BCF    FA6.2
2B30:  MOVF   00,W
2B32:  IORWF  FF2,F
2B34:  MOVLB  0
....................             }} 
....................          else 
2B36:  BRA    2B3A
....................             {Flanco1 = 0;}    
2B38:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2B3A:  BSF    F93.1
2B3C:  BTFSS  F81.1
2B3E:  BRA    2B76
....................       {  if(Flanco3 == 0)  
2B40:  BTFSC  34.7
2B42:  BRA    2B74
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
2B44:  MOVLW  01
2B46:  MOVWF  17
2B48:  CLRF   36
2B4A:  MOVLW  02
2B4C:  MOVWF  1B
2B4E:  MOVWF  1D
2B50:  MOVLW  0B
2B52:  MOVWF  1A
2B54:  MOVLW  02
2B56:  MOVLB  1
2B58:  MOVWF  x00
2B5A:  MOVLW  FA
2B5C:  MOVWF  x1B
2B5E:  MOVLB  0
2B60:  CALL   08E2
2B64:  MOVLB  1
2B66:  DECFSZ x00,F
2B68:  BRA    2B5A
2B6A:  MOVLW  0C
2B6C:  MOVWF  x15
2B6E:  MOVLB  0
2B70:  CALL   0A5E
....................          else 
2B74:  BRA    2B78
....................             {Flanco3 = 0;}     
2B76:  BCF    34.7
2B78:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
2B7A:  MOVF   17,W
2B7C:  SUBLW  05
2B7E:  BTFSS  FD8.2
2B80:  BRA    2EF2
....................    lcd_gotoxy(1,1); 
2B82:  MOVLW  01
2B84:  MOVWF  x16
2B86:  MOVWF  x17
2B88:  MOVLB  0
2B8A:  CALL   09EC
....................    printf(lcd_putc,"      Ingrese       "); 
2B8E:  MOVLW  86
2B90:  MOVWF  FF6
2B92:  MOVLW  04
2B94:  MOVWF  FF7
2B96:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
2B9A:  MOVLW  01
2B9C:  MOVLB  1
2B9E:  MOVWF  x16
2BA0:  MOVLW  02
2BA2:  MOVWF  x17
2BA4:  MOVLB  0
2BA6:  CALL   09EC
....................    printf(lcd_putc," Contraseña Actual  "); 
2BAA:  MOVLW  9C
2BAC:  MOVWF  FF6
2BAE:  MOVLW  04
2BB0:  MOVWF  FF7
2BB2:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
2BB6:  MOVLW  01
2BB8:  MOVLB  1
2BBA:  MOVWF  x16
2BBC:  MOVLW  03
2BBE:  MOVWF  x17
2BC0:  MOVLB  0
2BC2:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2BC6:  MOVLW  B2
2BC8:  MOVWF  FF6
2BCA:  MOVLW  04
2BCC:  MOVWF  FF7
2BCE:  MOVLW  0A
2BD0:  MOVLB  1
2BD2:  MOVWF  x08
2BD4:  MOVLB  0
2BD6:  CALL   0F0A
2BDA:  MOVFF  3A,100
2BDE:  MOVLW  1F
2BE0:  MOVLB  1
2BE2:  MOVWF  x01
2BE4:  MOVLB  0
2BE6:  CALL   0F5E
2BEA:  MOVFF  3B,100
2BEE:  MOVLW  1F
2BF0:  MOVLB  1
2BF2:  MOVWF  x01
2BF4:  MOVLB  0
2BF6:  CALL   0F5E
2BFA:  MOVFF  3C,100
2BFE:  MOVLW  1F
2C00:  MOVLB  1
2C02:  MOVWF  x01
2C04:  MOVLB  0
2C06:  CALL   0F5E
2C0A:  MOVFF  3D,100
2C0E:  MOVLW  1F
2C10:  MOVLB  1
2C12:  MOVWF  x01
2C14:  MOVLB  0
2C16:  CALL   0F5E
2C1A:  MOVLW  20
2C1C:  MOVLB  1
2C1E:  MOVWF  x15
2C20:  MOVLB  0
2C22:  CALL   0A5E
2C26:  MOVLW  20
2C28:  MOVLB  1
2C2A:  MOVWF  x15
2C2C:  MOVLB  0
2C2E:  CALL   0A5E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2C32:  BSF    F93.3
2C34:  BTFSS  F81.3
2C36:  BRA    2C5E
....................       {  if(Flanco == 0)  
2C38:  BTFSC  34.4
2C3A:  BRA    2C5C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2C3C:  MOVLW  0B
2C3E:  SUBWF  1A,W
2C40:  CLRF   03
2C42:  ADDLW  3A
2C44:  MOVWF  FE9
2C46:  MOVLW  00
2C48:  ADDWFC 03,W
2C4A:  MOVWF  FEA
2C4C:  INCF   FEF,F
2C4E:  BSF    34.4
2C50:  MOVLW  1E
2C52:  MOVLB  1
2C54:  MOVWF  x1B
2C56:  MOVLB  0
2C58:  CALL   08E2
....................          else 
2C5C:  BRA    2C60
....................             {Flanco = 0;} 
2C5E:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2C60:  BSF    F93.2
2C62:  BTFSS  F81.2
2C64:  BRA    2C8C
....................       {  if(Flanco2 == 0)  
2C66:  BTFSC  34.6
2C68:  BRA    2C8A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2C6A:  MOVLW  0B
2C6C:  SUBWF  1A,W
2C6E:  CLRF   03
2C70:  ADDLW  3A
2C72:  MOVWF  FE9
2C74:  MOVLW  00
2C76:  ADDWFC 03,W
2C78:  MOVWF  FEA
2C7A:  DECF   FEF,F
2C7C:  BSF    34.6
2C7E:  MOVLW  1E
2C80:  MOVLB  1
2C82:  MOVWF  x1B
2C84:  MOVLB  0
2C86:  CALL   08E2
....................          else 
2C8A:  BRA    2C8E
....................             {Flanco2 = 0;} 
2C8C:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
2C8E:  BSF    F93.0
2C90:  BTFSS  F81.0
2C92:  BRA    2CBE
....................       {  if(Flanco1 == 0)  
2C94:  BTFSC  34.5
2C96:  BRA    2CBC
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
2C98:  BSF    34.5
2C9A:  INCF   1A,F
2C9C:  MOVLW  02
2C9E:  MOVLB  1
2CA0:  MOVWF  x00
2CA2:  MOVLW  FA
2CA4:  MOVWF  x1B
2CA6:  MOVLB  0
2CA8:  CALL   08E2
2CAC:  MOVLB  1
2CAE:  DECFSZ x00,F
2CB0:  BRA    2CA2
2CB2:  MOVLW  0C
2CB4:  MOVWF  x15
2CB6:  MOVLB  0
2CB8:  CALL   0A5E
....................          else 
2CBC:  BRA    2CC0
....................             {Flanco1 = 0;}    
2CBE:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2CC0:  BSF    F93.1
2CC2:  BTFSS  F81.1
2CC4:  BRA    2CF0
....................       {  if(Flanco3 == 0)  
2CC6:  BTFSC  34.7
2CC8:  BRA    2CEE
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
2CCA:  BSF    34.7
2CCC:  DECF   1A,F
2CCE:  MOVLW  02
2CD0:  MOVLB  1
2CD2:  MOVWF  x00
2CD4:  MOVLW  FA
2CD6:  MOVWF  x1B
2CD8:  MOVLB  0
2CDA:  CALL   08E2
2CDE:  MOVLB  1
2CE0:  DECFSZ x00,F
2CE2:  BRA    2CD4
2CE4:  MOVLW  0C
2CE6:  MOVWF  x15
2CE8:  MOVLB  0
2CEA:  CALL   0A5E
....................          else 
2CEE:  BRA    2CF2
....................             {Flanco3 = 0;}     
2CF0:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2CF2:  MOVLW  0B
2CF4:  SUBWF  1A,W
2CF6:  CLRF   03
2CF8:  ADDLW  3A
2CFA:  MOVWF  FE9
2CFC:  MOVLW  00
2CFE:  ADDWFC 03,W
2D00:  MOVWF  FEA
2D02:  BTFSC  FEF.7
2D04:  BRA    2D08
2D06:  BRA    2D1C
....................        {clave[unidad-11]=9;} 
2D08:  MOVLW  0B
2D0A:  SUBWF  1A,W
2D0C:  CLRF   03
2D0E:  ADDLW  3A
2D10:  MOVWF  FE9
2D12:  MOVLW  00
2D14:  ADDWFC 03,W
2D16:  MOVWF  FEA
2D18:  MOVLW  09
2D1A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2D1C:  MOVLW  0B
2D1E:  SUBWF  1A,W
2D20:  CLRF   03
2D22:  ADDLW  3A
2D24:  MOVWF  FE9
2D26:  MOVLW  00
2D28:  ADDWFC 03,W
2D2A:  MOVWF  FEA
2D2C:  BTFSC  FEF.7
2D2E:  BRA    2D48
2D30:  MOVF   FEF,W
2D32:  SUBLW  09
2D34:  BC    2D48
....................        {clave[unidad-11]=0;} 
2D36:  MOVLW  0B
2D38:  SUBWF  1A,W
2D3A:  CLRF   03
2D3C:  ADDLW  3A
2D3E:  MOVWF  FE9
2D40:  MOVLW  00
2D42:  ADDWFC 03,W
2D44:  MOVWF  FEA
2D46:  CLRF   FEF
....................        if(unidad<11) 
2D48:  MOVF   1A,W
2D4A:  SUBLW  0A
2D4C:  BNC   2D5E
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
2D4E:  MOVLW  01
2D50:  MOVWF  17
2D52:  CLRF   36
2D54:  MOVLW  02
2D56:  MOVWF  1B
2D58:  MOVWF  1D
2D5A:  MOVLW  0B
2D5C:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2D5E:  MOVFF  1A,116
2D62:  MOVLW  04
2D64:  MOVLB  1
2D66:  MOVWF  x17
2D68:  MOVLB  0
2D6A:  CALL   09EC
....................        lcd_putc(t[2]); 
2D6E:  MOVFF  39,115
2D72:  CALL   0A5E
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2D76:  MOVF   1A,W
2D78:  SUBLW  0E
2D7A:  BTFSC  FD8.0
2D7C:  BRA    2EC8
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2D7E:  MOVF   3E,W
2D80:  SUBWF  3A,W
2D82:  BNZ   2E36
2D84:  MOVF   3F,W
2D86:  SUBWF  3B,W
2D88:  BNZ   2E36
2D8A:  MOVF   40,W
2D8C:  SUBWF  3C,W
2D8E:  BNZ   2E36
2D90:  MOVF   41,W
2D92:  SUBWF  3D,W
2D94:  BNZ   2E36
....................             {lcd_gotoxy(1,1); 
2D96:  MOVLW  01
2D98:  MOVLB  1
2D9A:  MOVWF  x16
2D9C:  MOVWF  x17
2D9E:  MOVLB  0
2DA0:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2DA4:  MOVLW  C8
2DA6:  MOVWF  FF6
2DA8:  MOVLW  04
2DAA:  MOVWF  FF7
2DAC:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
2DB0:  MOVLW  01
2DB2:  MOVLB  1
2DB4:  MOVWF  x16
2DB6:  MOVLW  02
2DB8:  MOVWF  x17
2DBA:  MOVLB  0
2DBC:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
2DC0:  MOVLW  DE
2DC2:  MOVWF  FF6
2DC4:  MOVLW  04
2DC6:  MOVWF  FF7
2DC8:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2DCC:  MOVLW  01
2DCE:  MOVLB  1
2DD0:  MOVWF  x16
2DD2:  MOVLW  03
2DD4:  MOVWF  x17
2DD6:  MOVLB  0
2DD8:  CALL   09EC
....................             printf(lcd_putc,"      Correcta      "); 
2DDC:  MOVLW  F4
2DDE:  MOVWF  FF6
2DE0:  MOVLW  04
2DE2:  MOVWF  FF7
2DE4:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2DE8:  MOVLW  01
2DEA:  MOVLB  1
2DEC:  MOVWF  x16
2DEE:  MOVLW  04
2DF0:  MOVWF  x17
2DF2:  MOVLB  0
2DF4:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2DF8:  MOVLW  0A
2DFA:  MOVWF  FF6
2DFC:  MOVLW  05
2DFE:  MOVWF  FF7
2E00:  CALL   0EEA
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
2E04:  MOVLW  02
2E06:  MOVLB  1
2E08:  MOVWF  x00
2E0A:  MOVLW  FA
2E0C:  MOVWF  x1B
2E0E:  MOVLB  0
2E10:  CALL   08E2
2E14:  MOVLB  1
2E16:  DECFSZ x00,F
2E18:  BRA    2E0A
2E1A:  MOVLW  33
2E1C:  MOVWF  17
2E1E:  MOVLW  0B
2E20:  MOVWF  1A
2E22:  MOVLW  0C
2E24:  MOVWF  x15
2E26:  MOVLB  0
2E28:  CALL   0A5E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2E2C:  CLRF   3A
2E2E:  CLRF   3B
2E30:  CLRF   3C
2E32:  CLRF   3D
....................          else 
2E34:  BRA    2EC8
....................          {lcd_gotoxy(1,1); 
2E36:  MOVLW  01
2E38:  MOVLB  1
2E3A:  MOVWF  x16
2E3C:  MOVWF  x17
2E3E:  MOVLB  0
2E40:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2E44:  MOVLW  20
2E46:  MOVWF  FF6
2E48:  MOVLW  05
2E4A:  MOVWF  FF7
2E4C:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
2E50:  MOVLW  01
2E52:  MOVLB  1
2E54:  MOVWF  x16
2E56:  MOVLW  02
2E58:  MOVWF  x17
2E5A:  MOVLB  0
2E5C:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
2E60:  MOVLW  36
2E62:  MOVWF  FF6
2E64:  MOVLW  05
2E66:  MOVWF  FF7
2E68:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2E6C:  MOVLW  01
2E6E:  MOVLB  1
2E70:  MOVWF  x16
2E72:  MOVLW  03
2E74:  MOVWF  x17
2E76:  MOVLB  0
2E78:  CALL   09EC
....................             printf(lcd_putc,"     Incorrecta     "); 
2E7C:  MOVLW  4C
2E7E:  MOVWF  FF6
2E80:  MOVLW  05
2E82:  MOVWF  FF7
2E84:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2E88:  MOVLW  01
2E8A:  MOVLB  1
2E8C:  MOVWF  x16
2E8E:  MOVLW  04
2E90:  MOVWF  x17
2E92:  MOVLB  0
2E94:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2E98:  MOVLW  62
2E9A:  MOVWF  FF6
2E9C:  MOVLW  05
2E9E:  MOVWF  FF7
2EA0:  CALL   0EEA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2EA4:  MOVLW  02
2EA6:  MOVLB  1
2EA8:  MOVWF  x00
2EAA:  MOVLW  FA
2EAC:  MOVWF  x1B
2EAE:  MOVLB  0
2EB0:  CALL   08E2
2EB4:  MOVLB  1
2EB6:  DECFSZ x00,F
2EB8:  BRA    2EAA
2EBA:  MOVLW  0B
2EBC:  MOVWF  1A
2EBE:  MOVLW  0C
2EC0:  MOVWF  x15
2EC2:  MOVLB  0
2EC4:  CALL   0A5E
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2EC8:  MOVF   1A,W
2ECA:  SUBLW  0B
2ECC:  BC    2EF0
2ECE:  MOVF   1A,W
2ED0:  SUBLW  0D
2ED2:  BNC   2EF0
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2ED4:  MOVLW  01
2ED6:  SUBWF  1A,W
2ED8:  MOVLB  1
2EDA:  MOVWF  x00
2EDC:  MOVWF  x16
2EDE:  MOVLW  04
2EE0:  MOVWF  x17
2EE2:  MOVLB  0
2EE4:  CALL   09EC
....................             lcd_putc(t[1]); 
2EE8:  MOVFF  38,115
2EEC:  CALL   0A5E
2EF0:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2EF2:  MOVF   17,W
2EF4:  SUBLW  33
2EF6:  BTFSS  FD8.2
2EF8:  BRA    3270
....................    lcd_gotoxy(1,1); 
2EFA:  MOVLW  01
2EFC:  MOVWF  x16
2EFE:  MOVWF  x17
2F00:  MOVLB  0
2F02:  CALL   09EC
....................    printf(lcd_putc,"     Ingrese        "); 
2F06:  MOVLW  78
2F08:  MOVWF  FF6
2F0A:  MOVLW  05
2F0C:  MOVWF  FF7
2F0E:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
2F12:  MOVLW  01
2F14:  MOVLB  1
2F16:  MOVWF  x16
2F18:  MOVLW  02
2F1A:  MOVWF  x17
2F1C:  MOVLB  0
2F1E:  CALL   09EC
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2F22:  MOVLW  8E
2F24:  MOVWF  FF6
2F26:  MOVLW  05
2F28:  MOVWF  FF7
2F2A:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
2F2E:  MOVLW  01
2F30:  MOVLB  1
2F32:  MOVWF  x16
2F34:  MOVLW  03
2F36:  MOVWF  x17
2F38:  MOVLB  0
2F3A:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F3E:  MOVLW  A4
2F40:  MOVWF  FF6
2F42:  MOVLW  05
2F44:  MOVWF  FF7
2F46:  MOVLW  0A
2F48:  MOVLB  1
2F4A:  MOVWF  x08
2F4C:  MOVLB  0
2F4E:  CALL   0F0A
2F52:  MOVFF  3A,100
2F56:  MOVLW  1F
2F58:  MOVLB  1
2F5A:  MOVWF  x01
2F5C:  MOVLB  0
2F5E:  CALL   0F5E
2F62:  MOVFF  3B,100
2F66:  MOVLW  1F
2F68:  MOVLB  1
2F6A:  MOVWF  x01
2F6C:  MOVLB  0
2F6E:  CALL   0F5E
2F72:  MOVFF  3C,100
2F76:  MOVLW  1F
2F78:  MOVLB  1
2F7A:  MOVWF  x01
2F7C:  MOVLB  0
2F7E:  CALL   0F5E
2F82:  MOVFF  3D,100
2F86:  MOVLW  1F
2F88:  MOVLB  1
2F8A:  MOVWF  x01
2F8C:  MOVLB  0
2F8E:  CALL   0F5E
2F92:  MOVLW  20
2F94:  MOVLB  1
2F96:  MOVWF  x15
2F98:  MOVLB  0
2F9A:  CALL   0A5E
2F9E:  MOVLW  20
2FA0:  MOVLB  1
2FA2:  MOVWF  x15
2FA4:  MOVLB  0
2FA6:  CALL   0A5E
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
2FAA:  BSF    F93.3
2FAC:  BTFSS  F81.3
2FAE:  BRA    2FD6
....................       {  if(Flanco == 0)  
2FB0:  BTFSC  34.4
2FB2:  BRA    2FD4
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2FB4:  MOVLW  0B
2FB6:  SUBWF  1A,W
2FB8:  CLRF   03
2FBA:  ADDLW  3A
2FBC:  MOVWF  FE9
2FBE:  MOVLW  00
2FC0:  ADDWFC 03,W
2FC2:  MOVWF  FEA
2FC4:  INCF   FEF,F
2FC6:  BSF    34.4
2FC8:  MOVLW  1E
2FCA:  MOVLB  1
2FCC:  MOVWF  x1B
2FCE:  MOVLB  0
2FD0:  CALL   08E2
....................          else 
2FD4:  BRA    2FD8
....................             {Flanco = 0;} 
2FD6:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2FD8:  BSF    F93.2
2FDA:  BTFSS  F81.2
2FDC:  BRA    3004
....................       {  if(Flanco2 == 0)  
2FDE:  BTFSC  34.6
2FE0:  BRA    3002
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2FE2:  MOVLW  0B
2FE4:  SUBWF  1A,W
2FE6:  CLRF   03
2FE8:  ADDLW  3A
2FEA:  MOVWF  FE9
2FEC:  MOVLW  00
2FEE:  ADDWFC 03,W
2FF0:  MOVWF  FEA
2FF2:  DECF   FEF,F
2FF4:  BSF    34.6
2FF6:  MOVLW  1E
2FF8:  MOVLB  1
2FFA:  MOVWF  x1B
2FFC:  MOVLB  0
2FFE:  CALL   08E2
....................          else 
3002:  BRA    3006
....................             {Flanco2 = 0;} 
3004:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
3006:  BSF    F93.0
3008:  BTFSS  F81.0
300A:  BRA    302E
....................       {  if(Flanco1 == 0)  
300C:  BTFSC  34.5
300E:  BRA    302C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3010:  BSF    34.5
3012:  INCF   1A,F
3014:  MOVLW  1E
3016:  MOVLB  1
3018:  MOVWF  x1B
301A:  MOVLB  0
301C:  CALL   08E2
3020:  MOVLW  0C
3022:  MOVLB  1
3024:  MOVWF  x15
3026:  MOVLB  0
3028:  CALL   0A5E
....................          else 
302C:  BRA    3030
....................             {Flanco1 = 0;}    
302E:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3030:  BSF    F93.1
3032:  BTFSS  F81.1
3034:  BRA    3058
....................       {  if(Flanco3 == 0)  
3036:  BTFSC  34.7
3038:  BRA    3056
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
303A:  BSF    34.7
303C:  DECF   1A,F
303E:  MOVLW  1E
3040:  MOVLB  1
3042:  MOVWF  x1B
3044:  MOVLB  0
3046:  CALL   08E2
304A:  MOVLW  0C
304C:  MOVLB  1
304E:  MOVWF  x15
3050:  MOVLB  0
3052:  CALL   0A5E
....................          else 
3056:  BRA    305A
....................             {Flanco3 = 0;}     
3058:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
305A:  MOVLW  0B
305C:  SUBWF  1A,W
305E:  CLRF   03
3060:  ADDLW  3A
3062:  MOVWF  FE9
3064:  MOVLW  00
3066:  ADDWFC 03,W
3068:  MOVWF  FEA
306A:  BTFSC  FEF.7
306C:  BRA    3070
306E:  BRA    3084
....................        {clave[unidad-11]=9;} 
3070:  MOVLW  0B
3072:  SUBWF  1A,W
3074:  CLRF   03
3076:  ADDLW  3A
3078:  MOVWF  FE9
307A:  MOVLW  00
307C:  ADDWFC 03,W
307E:  MOVWF  FEA
3080:  MOVLW  09
3082:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3084:  MOVLW  0B
3086:  SUBWF  1A,W
3088:  CLRF   03
308A:  ADDLW  3A
308C:  MOVWF  FE9
308E:  MOVLW  00
3090:  ADDWFC 03,W
3092:  MOVWF  FEA
3094:  BTFSC  FEF.7
3096:  BRA    30B0
3098:  MOVF   FEF,W
309A:  SUBLW  09
309C:  BC    30B0
....................        {clave[unidad-11]=0;} 
309E:  MOVLW  0B
30A0:  SUBWF  1A,W
30A2:  CLRF   03
30A4:  ADDLW  3A
30A6:  MOVWF  FE9
30A8:  MOVLW  00
30AA:  ADDWFC 03,W
30AC:  MOVWF  FEA
30AE:  CLRF   FEF
....................        if(unidad<11) 
30B0:  MOVF   1A,W
30B2:  SUBLW  0A
30B4:  BNC   30BE
....................        {Menu=5;unidad=11;} 
30B6:  MOVLW  05
30B8:  MOVWF  17
30BA:  MOVLW  0B
30BC:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
30BE:  MOVFF  1A,116
30C2:  MOVLW  04
30C4:  MOVLB  1
30C6:  MOVWF  x17
30C8:  MOVLB  0
30CA:  CALL   09EC
....................        lcd_putc(t[2]); 
30CE:  MOVFF  39,115
30D2:  CALL   0A5E
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
30D6:  MOVF   1A,W
30D8:  SUBLW  0E
30DA:  BTFSC  FD8.0
30DC:  BRA    3246
....................        { 
....................             lcd_gotoxy(1,1); 
30DE:  MOVLW  01
30E0:  MOVLB  1
30E2:  MOVWF  x16
30E4:  MOVWF  x17
30E6:  MOVLB  0
30E8:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
30EC:  MOVLW  BA
30EE:  MOVWF  FF6
30F0:  MOVLW  05
30F2:  MOVWF  FF7
30F4:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
30F8:  MOVLW  01
30FA:  MOVLB  1
30FC:  MOVWF  x16
30FE:  MOVLW  02
3100:  MOVWF  x17
3102:  MOVLB  0
3104:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
3108:  MOVLW  D0
310A:  MOVWF  FF6
310C:  MOVLW  05
310E:  MOVWF  FF7
3110:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
3114:  MOVLW  01
3116:  MOVLB  1
3118:  MOVWF  x16
311A:  MOVLW  03
311C:  MOVWF  x17
311E:  MOVLB  0
3120:  CALL   09EC
....................             printf(lcd_putc,"     Almacenada     "); 
3124:  MOVLW  E6
3126:  MOVWF  FF6
3128:  MOVLW  05
312A:  MOVWF  FF7
312C:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
3130:  MOVLW  01
3132:  MOVLB  1
3134:  MOVWF  x16
3136:  MOVLW  04
3138:  MOVWF  x17
313A:  MOVLB  0
313C:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
3140:  MOVLW  FC
3142:  MOVWF  FF6
3144:  MOVLW  05
3146:  MOVWF  FF7
3148:  CALL   0EEA
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
314C:  CLRF   FA9
314E:  MOVFF  3A,FA8
3152:  BCF    FA6.6
3154:  BCF    FA6.7
3156:  BSF    FA6.2
3158:  MOVF   FF2,W
315A:  MOVWF  00
315C:  BCF    FF2.7
315E:  MOVLB  F
3160:  MOVLW  55
3162:  MOVWF  FA7
3164:  MOVLW  AA
3166:  MOVWF  FA7
3168:  BSF    FA6.1
316A:  BTFSC  FA6.1
316C:  BRA    316A
316E:  BCF    FA6.2
3170:  MOVF   00,W
3172:  IORWF  FF2,F
3174:  MOVLW  14
3176:  MOVLB  1
3178:  MOVWF  x1B
317A:  MOVLB  0
317C:  CALL   08E2
3180:  MOVLW  01
3182:  MOVWF  FA9
3184:  MOVFF  3B,FA8
3188:  BCF    FA6.6
318A:  BCF    FA6.7
318C:  BSF    FA6.2
318E:  MOVF   FF2,W
3190:  MOVWF  00
3192:  BCF    FF2.7
3194:  MOVLB  F
3196:  MOVLW  55
3198:  MOVWF  FA7
319A:  MOVLW  AA
319C:  MOVWF  FA7
319E:  BSF    FA6.1
31A0:  BTFSC  FA6.1
31A2:  BRA    31A0
31A4:  BCF    FA6.2
31A6:  MOVF   00,W
31A8:  IORWF  FF2,F
31AA:  MOVLW  14
31AC:  MOVLB  1
31AE:  MOVWF  x1B
31B0:  MOVLB  0
31B2:  CALL   08E2
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
31B6:  MOVLW  02
31B8:  MOVWF  FA9
31BA:  MOVFF  3C,FA8
31BE:  BCF    FA6.6
31C0:  BCF    FA6.7
31C2:  BSF    FA6.2
31C4:  MOVF   FF2,W
31C6:  MOVWF  00
31C8:  BCF    FF2.7
31CA:  MOVLB  F
31CC:  MOVLW  55
31CE:  MOVWF  FA7
31D0:  MOVLW  AA
31D2:  MOVWF  FA7
31D4:  BSF    FA6.1
31D6:  BTFSC  FA6.1
31D8:  BRA    31D6
31DA:  BCF    FA6.2
31DC:  MOVF   00,W
31DE:  IORWF  FF2,F
31E0:  MOVLW  14
31E2:  MOVLB  1
31E4:  MOVWF  x1B
31E6:  MOVLB  0
31E8:  CALL   08E2
31EC:  MOVLW  03
31EE:  MOVWF  FA9
31F0:  MOVFF  3D,FA8
31F4:  BCF    FA6.6
31F6:  BCF    FA6.7
31F8:  BSF    FA6.2
31FA:  MOVF   FF2,W
31FC:  MOVWF  00
31FE:  BCF    FF2.7
3200:  MOVLB  F
3202:  MOVLW  55
3204:  MOVWF  FA7
3206:  MOVLW  AA
3208:  MOVWF  FA7
320A:  BSF    FA6.1
320C:  BTFSC  FA6.1
320E:  BRA    320C
3210:  BCF    FA6.2
3212:  MOVF   00,W
3214:  IORWF  FF2,F
3216:  MOVLW  14
3218:  MOVLB  1
321A:  MOVWF  x1B
321C:  MOVLB  0
321E:  CALL   08E2
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3222:  MOVLW  02
3224:  MOVLB  1
3226:  MOVWF  x00
3228:  MOVLW  FA
322A:  MOVWF  x1B
322C:  MOVLB  0
322E:  CALL   08E2
3232:  MOVLB  1
3234:  DECFSZ x00,F
3236:  BRA    3228
3238:  MOVLW  01
323A:  MOVWF  17
323C:  CLRF   36
323E:  MOVLW  02
3240:  MOVWF  1B
3242:  MOVWF  1D
3244:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
3246:  MOVF   1A,W
3248:  SUBLW  0B
324A:  BC    326E
324C:  MOVF   1A,W
324E:  SUBLW  0D
3250:  BNC   326E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3252:  MOVLW  01
3254:  SUBWF  1A,W
3256:  MOVLB  1
3258:  MOVWF  x00
325A:  MOVWF  x16
325C:  MOVLW  04
325E:  MOVWF  x17
3260:  MOVLB  0
3262:  CALL   09EC
....................             lcd_putc(t[1]); 
3266:  MOVFF  38,115
326A:  CALL   0A5E
326E:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
3270:  MOVF   17,W
3272:  SUBLW  06
3274:  BTFSS  FD8.2
3276:  BRA    33E6
....................    { 
....................    lcd_gotoxy(1,2); 
3278:  MOVLW  01
327A:  MOVWF  x16
327C:  MOVLW  02
327E:  MOVWF  x17
3280:  MOVLB  0
3282:  CALL   09EC
....................    printf(lcd_putc,"     Media Movil    "); 
3286:  MOVLW  12
3288:  MOVWF  FF6
328A:  MOVLW  06
328C:  MOVWF  FF7
328E:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
3292:  MOVLW  01
3294:  MOVLB  1
3296:  MOVWF  x16
3298:  MOVLW  03
329A:  MOVWF  x17
329C:  MOVLB  0
329E:  CALL   09EC
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
32A2:  MOVLW  28
32A4:  MOVWF  FF6
32A6:  MOVLW  06
32A8:  MOVWF  FF7
32AA:  MOVLW  07
32AC:  MOVLB  1
32AE:  MOVWF  x08
32B0:  MOVLB  0
32B2:  CALL   0F0A
32B6:  MOVFF  2A,100
32BA:  MOVLW  01
32BC:  MOVLB  1
32BE:  MOVWF  x01
32C0:  MOVLB  0
32C2:  CALL   0F5E
32C6:  MOVLW  20
32C8:  MOVLB  1
32CA:  MOVWF  x15
32CC:  MOVLB  0
32CE:  CALL   0A5E
32D2:  MOVLW  20
32D4:  MOVLB  1
32D6:  MOVWF  x15
32D8:  MOVLB  0
32DA:  CALL   0A5E
32DE:  MOVLW  20
32E0:  MOVLB  1
32E2:  MOVWF  x15
32E4:  MOVLB  0
32E6:  CALL   0A5E
....................     
....................    if(MediaMovil>12) 
32EA:  MOVF   2A,W
32EC:  SUBLW  0C
32EE:  BC    32F4
....................    {MediaMovil=12;} 
32F0:  MOVLW  0C
32F2:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
32F4:  MOVF   2A,F
32F6:  BNZ   32FC
....................    {MediaMovil=1;} 
32F8:  MOVLW  01
32FA:  MOVWF  2A
....................     
....................       if(UP)//Si oprime hacia arriba 
32FC:  BSF    F93.3
32FE:  BTFSS  F81.3
3300:  BRA    331A
....................       {  if(Flanco == 0)  
3302:  BTFSC  34.4
3304:  BRA    3318
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
3306:  MOVLW  01
3308:  ADDWF  2A,F
330A:  BSF    34.4
330C:  MOVLW  1E
330E:  MOVLB  1
3310:  MOVWF  x1B
3312:  MOVLB  0
3314:  CALL   08E2
....................          else 
3318:  BRA    331C
....................             {Flanco = 0;} 
331A:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
331C:  BSF    F93.2
331E:  BTFSS  F81.2
3320:  BRA    333A
....................       {  if(Flanco2 == 0)  
3322:  BTFSC  34.6
3324:  BRA    3338
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
3326:  MOVLW  01
3328:  SUBWF  2A,F
332A:  BSF    34.6
332C:  MOVLW  1E
332E:  MOVLB  1
3330:  MOVWF  x1B
3332:  MOVLB  0
3334:  CALL   08E2
....................          else 
3338:  BRA    333C
....................             {Flanco2 = 0;} 
333A:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
333C:  BSF    F93.0
333E:  BTFSS  F81.0
3340:  BRA    33A4
....................       {  if(Flanco1 == 0)  
3342:  BTFSC  34.5
3344:  BRA    33A2
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3346:  MOVLW  01
3348:  MOVWF  17
334A:  CLRF   36
334C:  MOVLW  02
334E:  MOVWF  1B
3350:  MOVWF  1D
3352:  MOVLW  0B
3354:  MOVWF  1A
3356:  MOVLW  02
3358:  MOVLB  1
335A:  MOVWF  x00
335C:  MOVLW  FA
335E:  MOVWF  x1B
3360:  MOVLB  0
3362:  CALL   08E2
3366:  MOVLB  1
3368:  DECFSZ x00,F
336A:  BRA    335C
336C:  MOVLW  0C
336E:  MOVWF  x15
3370:  MOVLB  0
3372:  CALL   0A5E
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
3376:  MOVLW  2A
3378:  MOVWF  FA9
337A:  MOVFF  2A,FA8
337E:  BCF    FA6.6
3380:  BCF    FA6.7
3382:  BSF    FA6.2
3384:  MOVF   FF2,W
3386:  MOVWF  00
3388:  BCF    FF2.7
338A:  MOVLB  F
338C:  MOVLW  55
338E:  MOVWF  FA7
3390:  MOVLW  AA
3392:  MOVWF  FA7
3394:  BSF    FA6.1
3396:  BTFSC  FA6.1
3398:  BRA    3396
339A:  BCF    FA6.2
339C:  MOVF   00,W
339E:  IORWF  FF2,F
33A0:  MOVLB  0
....................             }} 
....................          else 
33A2:  BRA    33A6
....................             {Flanco1 = 0;}    
33A4:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
33A6:  BSF    F93.1
33A8:  BTFSS  F81.1
33AA:  BRA    33E2
....................       {  if(Flanco3 == 0)  
33AC:  BTFSC  34.7
33AE:  BRA    33E0
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
33B0:  MOVLW  01
33B2:  MOVWF  17
33B4:  CLRF   36
33B6:  MOVLW  02
33B8:  MOVWF  1B
33BA:  MOVWF  1D
33BC:  MOVLW  0B
33BE:  MOVWF  1A
33C0:  MOVLW  02
33C2:  MOVLB  1
33C4:  MOVWF  x00
33C6:  MOVLW  FA
33C8:  MOVWF  x1B
33CA:  MOVLB  0
33CC:  CALL   08E2
33D0:  MOVLB  1
33D2:  DECFSZ x00,F
33D4:  BRA    33C6
33D6:  MOVLW  0C
33D8:  MOVWF  x15
33DA:  MOVLB  0
33DC:  CALL   0A5E
....................          else 
33E0:  BRA    33E4
....................             {Flanco3 = 0;}   
33E2:  BCF    34.7
33E4:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
33E6:  MOVF   17,W
33E8:  SUBLW  07
33EA:  BTFSS  FD8.2
33EC:  BRA    37DC
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
33EE:  MOVLW  01
33F0:  MOVWF  x16
33F2:  MOVWF  x17
33F4:  MOVLB  0
33F6:  CALL   09EC
....................    printf(lcd_putc,"  Zero Point Config "); 
33FA:  MOVLW  38
33FC:  MOVWF  FF6
33FE:  MOVLW  06
3400:  MOVWF  FF7
3402:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
3406:  MOVLW  01
3408:  MOVLB  1
340A:  MOVWF  x16
340C:  MOVLW  02
340E:  MOVWF  x17
3410:  MOVLB  0
3412:  CALL   09EC
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
3416:  MOVLW  4E
3418:  MOVWF  FF6
341A:  MOVLW  06
341C:  MOVWF  FF7
341E:  MOVLW  08
3420:  MOVLB  1
3422:  MOVWF  x08
3424:  MOVLB  0
3426:  CALL   0F0A
342A:  MOVLW  01
342C:  MOVWF  FE9
342E:  MOVFF  8E,10B
3432:  MOVFF  8D,10A
3436:  MOVFF  8C,109
343A:  MOVFF  8B,108
343E:  MOVLB  1
3440:  MOVWF  x0C
3442:  MOVLB  0
3444:  CALL   1386
3448:  MOVLW  5B
344A:  MOVWF  FF6
344C:  MOVLW  06
344E:  MOVWF  FF7
3450:  MOVLW  08
3452:  MOVLB  1
3454:  MOVWF  x08
3456:  MOVLB  0
3458:  CALL   0F0A
....................    lcd_gotoxy(1,3); 
345C:  MOVLW  01
345E:  MOVLB  1
3460:  MOVWF  x16
3462:  MOVLW  03
3464:  MOVWF  x17
3466:  MOVLB  0
3468:  CALL   09EC
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
346C:  MOVLB  1
346E:  CLRF   x04
3470:  MOVLB  0
3472:  CALL   15F2
3476:  MOVFF  00,100
347A:  MOVFF  01,101
347E:  MOVFF  02,102
3482:  MOVFF  03,103
3486:  MOVLW  5A
3488:  MOVLB  1
348A:  MOVWF  x15
348C:  MOVLB  0
348E:  CALL   0A5E
3492:  MOVLW  46
3494:  MOVLB  1
3496:  MOVWF  x15
3498:  MOVLB  0
349A:  CALL   0A5E
349E:  MOVLW  3D
34A0:  MOVLB  1
34A2:  MOVWF  x15
34A4:  MOVLB  0
34A6:  CALL   0A5E
34AA:  MOVLW  01
34AC:  MOVWF  FE9
34AE:  MOVFF  4D,10B
34B2:  MOVFF  4C,10A
34B6:  MOVFF  4B,109
34BA:  MOVFF  4A,108
34BE:  MOVLB  1
34C0:  CLRF   x0C
34C2:  MOVLB  0
34C4:  CALL   1386
34C8:  MOVLW  6C
34CA:  MOVWF  FF6
34CC:  MOVLW  06
34CE:  MOVWF  FF7
34D0:  MOVLW  05
34D2:  MOVLB  1
34D4:  MOVWF  x08
34D6:  MOVLB  0
34D8:  CALL   0F0A
34DC:  MOVLW  01
34DE:  MOVWF  FE9
34E0:  MOVFF  103,10B
34E4:  MOVFF  102,10A
34E8:  MOVFF  101,109
34EC:  MOVFF  100,108
34F0:  MOVLB  1
34F2:  CLRF   x0C
34F4:  MOVLB  0
34F6:  CALL   1386
....................    lcd_gotoxy(1,4); 
34FA:  MOVLW  01
34FC:  MOVLB  1
34FE:  MOVWF  x16
3500:  MOVLW  04
3502:  MOVWF  x17
3504:  MOVLB  0
3506:  CALL   09EC
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
350A:  MOVLW  78
350C:  MOVWF  FF6
350E:  MOVLW  06
3510:  MOVWF  FF7
3512:  MOVLW  0C
3514:  MOVLB  1
3516:  MOVWF  x08
3518:  MOVLB  0
351A:  CALL   0F0A
351E:  MOVLW  01
3520:  MOVWF  FE9
3522:  MOVFF  BE,10B
3526:  MOVFF  BD,10A
352A:  MOVFF  BC,109
352E:  MOVFF  BB,108
3532:  MOVLB  1
3534:  CLRF   x0C
3536:  MOVLB  0
3538:  CALL   1386
....................      
....................       if(RIGHT)// Si oprime derecha 
353C:  BSF    F93.0
353E:  BTFSS  F81.0
3540:  BRA    379A
....................       {  if(Flanco1 == 0)  
3542:  BTFSC  34.5
3544:  BRA    3798
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3546:  MOVLW  01
3548:  MOVWF  17
354A:  CLRF   36
354C:  MOVLW  02
354E:  MOVWF  1B
3550:  MOVWF  1D
3552:  MOVLW  0B
3554:  MOVWF  1A
3556:  MOVLW  02
3558:  MOVLB  1
355A:  MOVWF  x00
355C:  MOVLW  FA
355E:  MOVWF  x1B
3560:  MOVLB  0
3562:  CALL   08E2
3566:  MOVLB  1
3568:  DECFSZ x00,F
356A:  BRA    355C
356C:  MOVLW  0C
356E:  MOVWF  x15
3570:  MOVLB  0
3572:  CALL   0A5E
....................             Diferencia=zero_fabrica-sensores(0); 
3576:  MOVLB  1
3578:  CLRF   x04
357A:  MOVLB  0
357C:  CALL   15F2
3580:  MOVFF  FEA,101
3584:  MOVFF  FE9,100
3588:  BSF    FD8.1
358A:  MOVFF  4D,105
358E:  MOVFF  4C,104
3592:  MOVFF  4B,103
3596:  MOVFF  4A,102
359A:  MOVFF  03,109
359E:  MOVFF  02,108
35A2:  MOVFF  01,107
35A6:  MOVFF  00,106
35AA:  CALL   0C5E
35AE:  MOVFF  101,FEA
35B2:  MOVFF  100,FE9
35B6:  MOVFF  03,BE
35BA:  MOVFF  02,BD
35BE:  MOVFF  01,BC
35C2:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
35C6:  MOVLB  1
35C8:  CLRF   x02
35CA:  CLRF   x01
35CC:  CLRF   x00
35CE:  MOVLB  0
35D0:  CLRF   xFF
35D2:  MOVFF  BE,106
35D6:  MOVFF  BD,105
35DA:  MOVFF  BC,104
35DE:  MOVFF  BB,103
35E2:  CALL   1538
35E6:  BC    35EA
35E8:  BNZ   3618
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
35EA:  MOVLW  0A
35EC:  MOVWF  2B
35EE:  MOVLW  32
35F0:  MOVWF  FA9
35F2:  MOVFF  2B,FA8
35F6:  BCF    FA6.6
35F8:  BCF    FA6.7
35FA:  BSF    FA6.2
35FC:  MOVF   FF2,W
35FE:  MOVWF  00
3600:  BCF    FF2.7
3602:  MOVLB  F
3604:  MOVLW  55
3606:  MOVWF  FA7
3608:  MOVLW  AA
360A:  MOVWF  FA7
360C:  BSF    FA6.1
360E:  BTFSC  FA6.1
3610:  BRA    360E
3612:  BCF    FA6.2
3614:  MOVF   00,W
3616:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
3618:  MOVFF  BE,102
361C:  MOVFF  BD,101
3620:  MOVFF  BC,100
3624:  MOVFF  BB,FF
3628:  MOVLB  1
362A:  CLRF   x06
362C:  CLRF   x05
362E:  CLRF   x04
3630:  CLRF   x03
3632:  MOVLB  0
3634:  CALL   1538
3638:  BNC   366A
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
363A:  MOVLW  14
363C:  MOVWF  2B
363E:  MOVLW  32
3640:  MOVWF  FA9
3642:  MOVFF  2B,FA8
3646:  BCF    FA6.6
3648:  BCF    FA6.7
364A:  BSF    FA6.2
364C:  MOVF   FF2,W
364E:  MOVWF  00
3650:  BCF    FF2.7
3652:  MOVLB  F
3654:  MOVLW  55
3656:  MOVWF  FA7
3658:  MOVLW  AA
365A:  MOVWF  FA7
365C:  BSF    FA6.1
365E:  BTFSC  FA6.1
3660:  BRA    365E
3662:  BCF    FA6.2
3664:  MOVF   00,W
3666:  IORWF  FF2,F
3668:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
366A:  MOVFF  BB,00
366E:  MOVFF  BC,01
3672:  MOVFF  BD,02
3676:  MOVFF  BE,03
367A:  BCF    01.7
367C:  MOVFF  BE,BE
3680:  MOVFF  BD,BD
3684:  MOVFF  01,BC
3688:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
368C:  MOVFF  BE,B6
3690:  MOVFF  BD,B5
3694:  MOVFF  BC,B4
3698:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
369C:  MOVFF  B6,102
36A0:  MOVFF  B5,101
36A4:  MOVFF  B4,100
36A8:  MOVFF  B3,FF
36AC:  CALL   15B6
36B0:  MOVFF  01,24
....................             Temporal1=Temporal1-Entero1; 
36B4:  MOVLB  1
36B6:  CLRF   x0A
36B8:  MOVFF  24,109
36BC:  MOVLB  0
36BE:  CALL   0ACA
36C2:  BSF    FD8.1
36C4:  MOVFF  B6,105
36C8:  MOVFF  B5,104
36CC:  MOVFF  B4,103
36D0:  MOVFF  B3,102
36D4:  MOVFF  03,109
36D8:  MOVFF  02,108
36DC:  MOVFF  01,107
36E0:  MOVFF  00,106
36E4:  CALL   0C5E
36E8:  MOVFF  03,B6
36EC:  MOVFF  02,B5
36F0:  MOVFF  01,B4
36F4:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
36F8:  MOVFF  B6,118
36FC:  MOVFF  B5,117
3700:  MOVFF  B4,116
3704:  MOVFF  B3,115
3708:  MOVLB  1
370A:  CLRF   x1C
370C:  CLRF   x1B
370E:  MOVLW  48
3710:  MOVWF  x1A
3712:  MOVLW  85
3714:  MOVWF  x19
3716:  MOVLB  0
3718:  CALL   11CC
371C:  MOVFF  03,BA
3720:  MOVFF  02,B9
3724:  MOVFF  01,B8
3728:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
372C:  MOVFF  BA,102
3730:  MOVFF  B9,101
3734:  MOVFF  B8,100
3738:  MOVFF  B7,FF
373C:  CALL   15B6
3740:  MOVFF  01,25
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
3744:  MOVLW  3C
3746:  MOVWF  FA9
3748:  MOVFF  24,FA8
374C:  BCF    FA6.6
374E:  BCF    FA6.7
3750:  BSF    FA6.2
3752:  MOVF   FF2,W
3754:  MOVWF  00
3756:  BCF    FF2.7
3758:  MOVLB  F
375A:  MOVLW  55
375C:  MOVWF  FA7
375E:  MOVLW  AA
3760:  MOVWF  FA7
3762:  BSF    FA6.1
3764:  BTFSC  FA6.1
3766:  BRA    3764
3768:  BCF    FA6.2
376A:  MOVF   00,W
376C:  IORWF  FF2,F
376E:  MOVLW  3D
3770:  MOVWF  FA9
3772:  MOVFF  25,FA8
3776:  BCF    FA6.6
3778:  BCF    FA6.7
377A:  BSF    FA6.2
377C:  MOVF   FF2,W
377E:  MOVWF  00
3780:  BCF    FF2.7
3782:  MOVLW  55
3784:  MOVWF  FA7
3786:  MOVLW  AA
3788:  MOVWF  FA7
378A:  BSF    FA6.1
378C:  BTFSC  FA6.1
378E:  BRA    378C
3790:  BCF    FA6.2
3792:  MOVF   00,W
3794:  IORWF  FF2,F
3796:  MOVLB  0
....................             }} 
....................          else 
3798:  BRA    379C
....................             {Flanco1 = 0;}    
379A:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
379C:  BSF    F93.1
379E:  BTFSS  F81.1
37A0:  BRA    37D8
....................       {  if(Flanco3 == 0)  
37A2:  BTFSC  34.7
37A4:  BRA    37D6
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
37A6:  MOVLW  01
37A8:  MOVWF  17
37AA:  CLRF   36
37AC:  MOVLW  02
37AE:  MOVWF  1B
37B0:  MOVWF  1D
37B2:  MOVLW  0B
37B4:  MOVWF  1A
37B6:  MOVLW  02
37B8:  MOVLB  1
37BA:  MOVWF  x00
37BC:  MOVLW  FA
37BE:  MOVWF  x1B
37C0:  MOVLB  0
37C2:  CALL   08E2
37C6:  MOVLB  1
37C8:  DECFSZ x00,F
37CA:  BRA    37BC
37CC:  MOVLW  0C
37CE:  MOVWF  x15
37D0:  MOVLB  0
37D2:  CALL   0A5E
....................          else 
37D6:  BRA    37DA
....................             {Flanco3 = 0;}   
37D8:  BCF    34.7
37DA:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
37DC:  MOVF   17,W
37DE:  SUBLW  08
37E0:  BTFSS  FD8.2
37E2:  BRA    3D34
....................    { 
....................    lcd_gotoxy(1,1); 
37E4:  MOVLW  01
37E6:  MOVWF  x16
37E8:  MOVWF  x17
37EA:  MOVLB  0
37EC:  CALL   09EC
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
37F0:  MOVLB  1
37F2:  CLRF   x04
37F4:  MOVLB  0
37F6:  CALL   15F2
37FA:  MOVFF  00,100
37FE:  MOVFF  01,101
3802:  MOVFF  02,102
3806:  MOVFF  03,103
380A:  MOVLW  8A
380C:  MOVWF  FF6
380E:  MOVLW  06
3810:  MOVWF  FF7
3812:  MOVLW  0A
3814:  MOVLB  1
3816:  MOVWF  x08
3818:  MOVLB  0
381A:  CALL   0F0A
381E:  MOVLW  01
3820:  MOVWF  FE9
3822:  MOVFF  103,10B
3826:  MOVFF  102,10A
382A:  MOVFF  101,109
382E:  MOVFF  100,108
3832:  MOVLB  1
3834:  CLRF   x0C
3836:  MOVLB  0
3838:  CALL   1386
383C:  MOVLW  20
383E:  MOVLB  1
3840:  MOVWF  x15
3842:  MOVLB  0
3844:  CALL   0A5E
3848:  MOVLW  20
384A:  MOVLB  1
384C:  MOVWF  x15
384E:  MOVLB  0
3850:  CALL   0A5E
....................    lcd_gotoxy(1,2); 
3854:  MOVLW  01
3856:  MOVLB  1
3858:  MOVWF  x16
385A:  MOVLW  02
385C:  MOVWF  x17
385E:  MOVLB  0
3860:  CALL   09EC
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
3864:  MOVLB  1
3866:  CLRF   x0A
3868:  MOVFF  29,109
386C:  MOVLB  0
386E:  CALL   0ACA
3872:  MOVFF  00,100
3876:  MOVFF  01,101
387A:  MOVFF  02,102
387E:  MOVFF  03,103
3882:  MOVFF  03,107
3886:  MOVFF  02,106
388A:  MOVFF  01,105
388E:  MOVFF  00,104
3892:  MOVLB  1
3894:  CLRF   x0B
3896:  CLRF   x0A
3898:  MOVLW  7F
389A:  MOVWF  x09
389C:  MOVLW  86
389E:  MOVWF  x08
38A0:  MOVLB  0
38A2:  CALL   0B00
38A6:  MOVLB  1
38A8:  CLRF   x18
38AA:  CLRF   x17
38AC:  MOVLW  48
38AE:  MOVWF  x16
38B0:  MOVLW  85
38B2:  MOVWF  x15
38B4:  MOVFF  03,11C
38B8:  MOVFF  02,11B
38BC:  MOVFF  01,11A
38C0:  MOVFF  00,119
38C4:  MOVLB  0
38C6:  CALL   11CC
38CA:  MOVFF  00,100
38CE:  MOVFF  01,101
38D2:  MOVFF  02,102
38D6:  MOVFF  03,103
38DA:  MOVLW  01
38DC:  MOVLB  1
38DE:  MOVWF  x04
38E0:  MOVLB  0
38E2:  CALL   15F2
38E6:  MOVFF  00,104
38EA:  MOVFF  01,105
38EE:  MOVFF  02,106
38F2:  MOVFF  03,107
38F6:  MOVLW  9C
38F8:  MOVWF  FF6
38FA:  MOVLW  06
38FC:  MOVWF  FF7
38FE:  MOVLW  05
3900:  MOVLB  1
3902:  MOVWF  x08
3904:  MOVLB  0
3906:  CALL   0F0A
390A:  MOVLW  01
390C:  MOVWF  FE9
390E:  MOVFF  103,10B
3912:  MOVFF  102,10A
3916:  MOVFF  101,109
391A:  MOVFF  100,108
391E:  MOVLB  1
3920:  CLRF   x0C
3922:  MOVLB  0
3924:  CALL   1386
3928:  MOVLW  25
392A:  MOVLB  1
392C:  MOVWF  x15
392E:  MOVLB  0
3930:  CALL   0A5E
3934:  MOVLW  A8
3936:  MOVWF  FF6
3938:  MOVLW  06
393A:  MOVWF  FF7
393C:  MOVLW  04
393E:  MOVLB  1
3940:  MOVWF  x08
3942:  MOVLB  0
3944:  CALL   0F0A
3948:  MOVLW  01
394A:  MOVWF  FE9
394C:  MOVFF  107,10B
3950:  MOVFF  106,10A
3954:  MOVFF  105,109
3958:  MOVFF  104,108
395C:  MOVLB  1
395E:  CLRF   x0C
3960:  MOVLB  0
3962:  CALL   1386
3966:  MOVLW  20
3968:  MOVLB  1
396A:  MOVWF  x15
396C:  MOVLB  0
396E:  CALL   0A5E
....................    lcd_gotoxy(1,3); 
3972:  MOVLW  01
3974:  MOVLB  1
3976:  MOVWF  x16
3978:  MOVLW  03
397A:  MOVWF  x17
397C:  MOVLB  0
397E:  CALL   09EC
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
3982:  MOVLW  02
3984:  MOVLB  1
3986:  MOVWF  x04
3988:  MOVLB  0
398A:  CALL   15F2
398E:  MOVFF  00,100
3992:  MOVFF  01,101
3996:  MOVFF  02,102
399A:  MOVFF  03,103
399E:  MOVFF  03,107
39A2:  MOVFF  02,106
39A6:  MOVFF  01,105
39AA:  MOVFF  00,104
39AE:  MOVLB  1
39B0:  CLRF   x0B
39B2:  MOVLW  C0
39B4:  MOVWF  x0A
39B6:  MOVLW  7F
39B8:  MOVWF  x09
39BA:  MOVLW  88
39BC:  MOVWF  x08
39BE:  MOVLB  0
39C0:  CALL   0B00
39C4:  MOVLB  1
39C6:  CLRF   x18
39C8:  CLRF   x17
39CA:  MOVLW  48
39CC:  MOVWF  x16
39CE:  MOVLW  85
39D0:  MOVWF  x15
39D2:  MOVFF  03,11C
39D6:  MOVFF  02,11B
39DA:  MOVFF  01,11A
39DE:  MOVFF  00,119
39E2:  MOVLB  0
39E4:  CALL   11CC
39E8:  MOVFF  00,100
39EC:  MOVFF  01,101
39F0:  MOVFF  02,102
39F4:  MOVFF  03,103
39F8:  MOVLW  B4
39FA:  MOVWF  FF6
39FC:  MOVLW  06
39FE:  MOVWF  FF7
3A00:  MOVLW  04
3A02:  MOVLB  1
3A04:  MOVWF  x08
3A06:  MOVLB  0
3A08:  CALL   0F0A
3A0C:  MOVLW  01
3A0E:  MOVWF  FE9
3A10:  MOVFF  8E,10B
3A14:  MOVFF  8D,10A
3A18:  MOVFF  8C,109
3A1C:  MOVFF  8B,108
3A20:  MOVLB  1
3A22:  MOVWF  x0C
3A24:  MOVLB  0
3A26:  CALL   1386
3A2A:  MOVLW  BD
3A2C:  MOVWF  FF6
3A2E:  MOVLW  06
3A30:  MOVWF  FF7
3A32:  MOVLW  0A
3A34:  MOVLB  1
3A36:  MOVWF  x08
3A38:  MOVLB  0
3A3A:  CALL   0F0A
3A3E:  MOVLW  01
3A40:  MOVWF  FE9
3A42:  MOVFF  103,10B
3A46:  MOVFF  102,10A
3A4A:  MOVFF  101,109
3A4E:  MOVFF  100,108
3A52:  MOVLB  1
3A54:  CLRF   x0C
3A56:  MOVLB  0
3A58:  CALL   1386
....................    lcd_gotoxy(1,4); 
3A5C:  MOVLW  01
3A5E:  MOVLB  1
3A60:  MOVWF  x16
3A62:  MOVLW  04
3A64:  MOVWF  x17
3A66:  MOVLB  0
3A68:  CALL   09EC
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
3A6C:  MOVLW  CE
3A6E:  MOVWF  FF6
3A70:  MOVLW  06
3A72:  MOVWF  FF7
3A74:  MOVLW  09
3A76:  MOVLB  1
3A78:  MOVWF  x08
3A7A:  MOVLB  0
3A7C:  CALL   0F0A
3A80:  MOVLW  89
3A82:  MOVWF  FE9
3A84:  MOVFF  C2,10B
3A88:  MOVFF  C1,10A
3A8C:  MOVFF  C0,109
3A90:  MOVFF  BF,108
3A94:  MOVLW  02
3A96:  MOVLB  1
3A98:  MOVWF  x0C
3A9A:  MOVLB  0
3A9C:  CALL   1386
3AA0:  MOVLW  20
3AA2:  MOVLB  1
3AA4:  MOVWF  x15
3AA6:  MOVLB  0
3AA8:  CALL   0A5E
....................        
....................       if(UP)//Si oprime hacia arriba 
3AAC:  BSF    F93.3
3AAE:  BTFSS  F81.3
3AB0:  BRA    3B26
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
3AB2:  BCF    FD8.1
3AB4:  MOVFF  C2,105
3AB8:  MOVFF  C1,104
3ABC:  MOVFF  C0,103
3AC0:  MOVFF  BF,102
3AC4:  MOVLW  0A
3AC6:  MOVLB  1
3AC8:  MOVWF  x09
3ACA:  MOVLW  D7
3ACC:  MOVWF  x08
3ACE:  MOVLW  23
3AD0:  MOVWF  x07
3AD2:  MOVLW  78
3AD4:  MOVWF  x06
3AD6:  MOVLB  0
3AD8:  CALL   0C5E
3ADC:  MOVFF  03,C2
3AE0:  MOVFF  02,C1
3AE4:  MOVFF  01,C0
3AE8:  MOVFF  00,BF
3AEC:  MOVLW  32
3AEE:  MOVLB  1
3AF0:  MOVWF  x1B
3AF2:  MOVLB  0
3AF4:  CALL   08E2
....................          if(Ajuste1>30.0) 
3AF8:  MOVLB  1
3AFA:  CLRF   x02
3AFC:  CLRF   x01
3AFE:  MOVLW  70
3B00:  MOVWF  x00
3B02:  MOVLW  83
3B04:  MOVLB  0
3B06:  MOVWF  xFF
3B08:  MOVFF  C2,106
3B0C:  MOVFF  C1,105
3B10:  MOVFF  C0,104
3B14:  MOVFF  BF,103
3B18:  CALL   1538
3B1C:  BNC   3B26
....................          {Ajuste1=0.0;} 
3B1E:  CLRF   xC2
3B20:  CLRF   xC1
3B22:  CLRF   xC0
3B24:  CLRF   xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3B26:  BSF    F93.2
3B28:  BTFSS  F81.2
3B2A:  BRA    3B9C
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
3B2C:  BSF    FD8.1
3B2E:  MOVFF  C2,105
3B32:  MOVFF  C1,104
3B36:  MOVFF  C0,103
3B3A:  MOVFF  BF,102
3B3E:  MOVLW  0A
3B40:  MOVLB  1
3B42:  MOVWF  x09
3B44:  MOVLW  D7
3B46:  MOVWF  x08
3B48:  MOVLW  23
3B4A:  MOVWF  x07
3B4C:  MOVLW  78
3B4E:  MOVWF  x06
3B50:  MOVLB  0
3B52:  CALL   0C5E
3B56:  MOVFF  03,C2
3B5A:  MOVFF  02,C1
3B5E:  MOVFF  01,C0
3B62:  MOVFF  00,BF
3B66:  MOVLW  32
3B68:  MOVLB  1
3B6A:  MOVWF  x1B
3B6C:  MOVLB  0
3B6E:  CALL   08E2
....................          if(Ajuste1<0.0) 
3B72:  MOVFF  C2,102
3B76:  MOVFF  C1,101
3B7A:  MOVFF  C0,100
3B7E:  MOVFF  BF,FF
3B82:  MOVLB  1
3B84:  CLRF   x06
3B86:  CLRF   x05
3B88:  CLRF   x04
3B8A:  CLRF   x03
3B8C:  MOVLB  0
3B8E:  CALL   1538
3B92:  BNC   3B9C
....................          {Ajuste1=0.0;} 
3B94:  CLRF   xC2
3B96:  CLRF   xC1
3B98:  CLRF   xC0
3B9A:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
3B9C:  BSF    F93.0
3B9E:  BTFSS  F81.0
3BA0:  BRA    3CF2
....................       {  if(Flanco1 == 0)  
3BA2:  BTFSC  34.5
3BA4:  BRA    3CF0
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3BA6:  MOVLW  01
3BA8:  MOVWF  17
3BAA:  CLRF   36
3BAC:  MOVLW  02
3BAE:  MOVWF  1B
3BB0:  MOVWF  1D
3BB2:  MOVLW  0B
3BB4:  MOVWF  1A
3BB6:  MOVLW  1E
3BB8:  MOVLB  1
3BBA:  MOVWF  x1B
3BBC:  MOVLB  0
3BBE:  CALL   08E2
3BC2:  MOVLW  0C
3BC4:  MOVLB  1
3BC6:  MOVWF  x15
3BC8:  MOVLB  0
3BCA:  CALL   0A5E
....................             Temporal=Ajuste1; 
3BCE:  MOVFF  C2,AA
3BD2:  MOVFF  C1,A9
3BD6:  MOVFF  C0,A8
3BDA:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
3BDE:  MOVFF  C2,102
3BE2:  MOVFF  C1,101
3BE6:  MOVFF  C0,100
3BEA:  MOVFF  BF,FF
3BEE:  CALL   15B6
3BF2:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
3BF6:  MOVLB  1
3BF8:  CLRF   x0A
3BFA:  MOVFF  21,109
3BFE:  MOVLB  0
3C00:  CALL   0ACA
3C04:  BSF    FD8.1
3C06:  MOVFF  AA,105
3C0A:  MOVFF  A9,104
3C0E:  MOVFF  A8,103
3C12:  MOVFF  A7,102
3C16:  MOVFF  03,109
3C1A:  MOVFF  02,108
3C1E:  MOVFF  01,107
3C22:  MOVFF  00,106
3C26:  CALL   0C5E
3C2A:  MOVFF  03,AA
3C2E:  MOVFF  02,A9
3C32:  MOVFF  01,A8
3C36:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
3C3A:  MOVFF  AA,118
3C3E:  MOVFF  A9,117
3C42:  MOVFF  A8,116
3C46:  MOVFF  A7,115
3C4A:  MOVLB  1
3C4C:  CLRF   x1C
3C4E:  CLRF   x1B
3C50:  MOVLW  48
3C52:  MOVWF  x1A
3C54:  MOVLW  85
3C56:  MOVWF  x19
3C58:  MOVLB  0
3C5A:  CALL   11CC
3C5E:  MOVFF  03,AE
3C62:  MOVFF  02,AD
3C66:  MOVFF  01,AC
3C6A:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
3C6E:  MOVFF  AE,102
3C72:  MOVFF  AD,101
3C76:  MOVFF  AC,100
3C7A:  MOVFF  AB,FF
3C7E:  CALL   15B6
3C82:  MOVFF  01,22
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
3C86:  MOVLW  19
3C88:  MOVWF  FA9
3C8A:  MOVFF  21,FA8
3C8E:  BCF    FA6.6
3C90:  BCF    FA6.7
3C92:  BSF    FA6.2
3C94:  MOVF   FF2,W
3C96:  MOVWF  00
3C98:  BCF    FF2.7
3C9A:  MOVLB  F
3C9C:  MOVLW  55
3C9E:  MOVWF  FA7
3CA0:  MOVLW  AA
3CA2:  MOVWF  FA7
3CA4:  BSF    FA6.1
3CA6:  BTFSC  FA6.1
3CA8:  BRA    3CA6
3CAA:  BCF    FA6.2
3CAC:  MOVF   00,W
3CAE:  IORWF  FF2,F
3CB0:  MOVLW  1A
3CB2:  MOVWF  FA9
3CB4:  MOVFF  22,FA8
3CB8:  BCF    FA6.6
3CBA:  BCF    FA6.7
3CBC:  BSF    FA6.2
3CBE:  MOVF   FF2,W
3CC0:  MOVWF  00
3CC2:  BCF    FF2.7
3CC4:  MOVLW  55
3CC6:  MOVWF  FA7
3CC8:  MOVLW  AA
3CCA:  MOVWF  FA7
3CCC:  BSF    FA6.1
3CCE:  BTFSC  FA6.1
3CD0:  BRA    3CCE
3CD2:  BCF    FA6.2
3CD4:  MOVF   00,W
3CD6:  IORWF  FF2,F
....................             delay_ms(1000); 
3CD8:  MOVLW  04
3CDA:  MOVLB  1
3CDC:  MOVWF  x00
3CDE:  MOVLW  FA
3CE0:  MOVWF  x1B
3CE2:  MOVLB  0
3CE4:  CALL   08E2
3CE8:  MOVLB  1
3CEA:  DECFSZ x00,F
3CEC:  BRA    3CDE
3CEE:  MOVLB  0
....................             }} 
....................          else 
3CF0:  BRA    3CF4
....................             {Flanco1 = 0;}    
3CF2:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3CF4:  BSF    F93.1
3CF6:  BTFSS  F81.1
3CF8:  BRA    3D30
....................       {  if(Flanco3 == 0)  
3CFA:  BTFSC  34.7
3CFC:  BRA    3D2E
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3CFE:  MOVLW  01
3D00:  MOVWF  17
3D02:  CLRF   36
3D04:  MOVLW  02
3D06:  MOVWF  1B
3D08:  MOVWF  1D
3D0A:  MOVLW  0B
3D0C:  MOVWF  1A
3D0E:  MOVLW  02
3D10:  MOVLB  1
3D12:  MOVWF  x00
3D14:  MOVLW  FA
3D16:  MOVWF  x1B
3D18:  MOVLB  0
3D1A:  CALL   08E2
3D1E:  MOVLB  1
3D20:  DECFSZ x00,F
3D22:  BRA    3D14
3D24:  MOVLW  0C
3D26:  MOVWF  x15
3D28:  MOVLB  0
3D2A:  CALL   0A5E
....................          else 
3D2E:  BRA    3D32
....................             {Flanco3 = 0;}   
3D30:  BCF    34.7
3D32:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
3D34:  MOVF   17,W
3D36:  SUBLW  09
3D38:  BTFSS  FD8.2
3D3A:  BRA    4382
....................    { 
....................    lcd_gotoxy(1,1); 
3D3C:  MOVLW  01
3D3E:  MOVWF  x16
3D40:  MOVWF  x17
3D42:  MOVLB  0
3D44:  CALL   09EC
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
3D48:  MOVLB  1
3D4A:  CLRF   x0A
3D4C:  MOVFF  29,109
3D50:  MOVLB  0
3D52:  CALL   0ACA
3D56:  MOVFF  00,100
3D5A:  MOVFF  01,101
3D5E:  MOVFF  02,102
3D62:  MOVFF  03,103
3D66:  MOVFF  03,107
3D6A:  MOVFF  02,106
3D6E:  MOVFF  01,105
3D72:  MOVFF  00,104
3D76:  MOVLB  1
3D78:  CLRF   x0B
3D7A:  CLRF   x0A
3D7C:  MOVLW  7F
3D7E:  MOVWF  x09
3D80:  MOVLW  86
3D82:  MOVWF  x08
3D84:  MOVLB  0
3D86:  CALL   0B00
3D8A:  MOVLB  1
3D8C:  CLRF   x18
3D8E:  CLRF   x17
3D90:  MOVLW  48
3D92:  MOVWF  x16
3D94:  MOVLW  85
3D96:  MOVWF  x15
3D98:  MOVFF  03,11C
3D9C:  MOVFF  02,11B
3DA0:  MOVFF  01,11A
3DA4:  MOVFF  00,119
3DA8:  MOVLB  0
3DAA:  CALL   11CC
3DAE:  MOVFF  00,100
3DB2:  MOVFF  01,101
3DB6:  MOVFF  02,102
3DBA:  MOVFF  03,103
3DBE:  MOVLW  DE
3DC0:  MOVWF  FF6
3DC2:  MOVLW  06
3DC4:  MOVWF  FF7
3DC6:  MOVLW  0D
3DC8:  MOVLB  1
3DCA:  MOVWF  x08
3DCC:  MOVLB  0
3DCE:  CALL   0F0A
3DD2:  MOVLW  01
3DD4:  MOVWF  FE9
3DD6:  MOVFF  103,10B
3DDA:  MOVFF  102,10A
3DDE:  MOVFF  101,109
3DE2:  MOVFF  100,108
3DE6:  MOVLB  1
3DE8:  CLRF   x0C
3DEA:  MOVLB  0
3DEC:  CALL   1386
3DF0:  MOVLW  25
3DF2:  MOVLB  1
3DF4:  MOVWF  x15
3DF6:  MOVLB  0
3DF8:  CALL   0A5E
3DFC:  MOVLW  20
3DFE:  MOVLB  1
3E00:  MOVWF  x15
3E02:  MOVLB  0
3E04:  CALL   0A5E
....................  
....................    lcd_gotoxy(1,4); 
3E08:  MOVLW  01
3E0A:  MOVLB  1
3E0C:  MOVWF  x16
3E0E:  MOVLW  04
3E10:  MOVWF  x17
3E12:  MOVLB  0
3E14:  CALL   09EC
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
3E18:  MOVLW  02
3E1A:  MOVLB  1
3E1C:  MOVWF  x04
3E1E:  MOVLB  0
3E20:  CALL   15F2
3E24:  MOVFF  00,100
3E28:  MOVFF  01,101
3E2C:  MOVFF  02,102
3E30:  MOVFF  03,103
3E34:  MOVFF  03,107
3E38:  MOVFF  02,106
3E3C:  MOVFF  01,105
3E40:  MOVFF  00,104
3E44:  MOVLB  1
3E46:  CLRF   x0B
3E48:  MOVLW  C0
3E4A:  MOVWF  x0A
3E4C:  MOVLW  7F
3E4E:  MOVWF  x09
3E50:  MOVLW  88
3E52:  MOVWF  x08
3E54:  MOVLB  0
3E56:  CALL   0B00
3E5A:  MOVLB  1
3E5C:  CLRF   x18
3E5E:  CLRF   x17
3E60:  MOVLW  48
3E62:  MOVWF  x16
3E64:  MOVLW  85
3E66:  MOVWF  x15
3E68:  MOVFF  03,11C
3E6C:  MOVFF  02,11B
3E70:  MOVFF  01,11A
3E74:  MOVFF  00,119
3E78:  MOVLB  0
3E7A:  CALL   11CC
3E7E:  MOVFF  00,100
3E82:  MOVFF  01,101
3E86:  MOVFF  02,102
3E8A:  MOVFF  03,103
3E8E:  MOVLW  F4
3E90:  MOVWF  FF6
3E92:  MOVLW  06
3E94:  MOVWF  FF7
3E96:  MOVLW  04
3E98:  MOVLB  1
3E9A:  MOVWF  x08
3E9C:  MOVLB  0
3E9E:  CALL   0F0A
3EA2:  MOVLW  01
3EA4:  MOVWF  FE9
3EA6:  MOVFF  8E,10B
3EAA:  MOVFF  8D,10A
3EAE:  MOVFF  8C,109
3EB2:  MOVFF  8B,108
3EB6:  MOVLB  1
3EB8:  MOVWF  x0C
3EBA:  MOVLB  0
3EBC:  CALL   1386
3EC0:  MOVLW  FD
3EC2:  MOVWF  FF6
3EC4:  MOVLW  06
3EC6:  MOVWF  FF7
3EC8:  MOVLW  0A
3ECA:  MOVLB  1
3ECC:  MOVWF  x08
3ECE:  MOVLB  0
3ED0:  CALL   0F0A
3ED4:  MOVLW  01
3ED6:  MOVWF  FE9
3ED8:  MOVFF  103,10B
3EDC:  MOVFF  102,10A
3EE0:  MOVFF  101,109
3EE4:  MOVFF  100,108
3EE8:  MOVLB  1
3EEA:  CLRF   x0C
3EEC:  MOVLB  0
3EEE:  CALL   1386
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
3EF2:  BTFSC  4E.1
3EF4:  BRA    4054
3EF6:  BTFSC  4E.2
3EF8:  BRA    4054
3EFA:  BTFSC  4E.3
3EFC:  BRA    4054
....................       { 
....................          if(UP)//Si oprime hacia arriba 
3EFE:  BSF    F93.3
3F00:  BTFSS  F81.3
3F02:  BRA    3F5E
....................          { 
....................             delay_ms(500); 
3F04:  MOVLW  02
3F06:  MOVLB  1
3F08:  MOVWF  x00
3F0A:  MOVLW  FA
3F0C:  MOVWF  x1B
3F0E:  MOVLB  0
3F10:  CALL   08E2
3F14:  MOVLB  1
3F16:  DECFSZ x00,F
3F18:  BRA    3F0A
....................             if(UP) 
3F1A:  BSF    F93.3
3F1C:  BTFSS  F81.3
3F1E:  BRA    3F5C
....................             { 
....................                lcd_gotoxy(1,2); 
3F20:  MOVLW  01
3F22:  MOVWF  x16
3F24:  MOVLW  02
3F26:  MOVWF  x17
3F28:  MOVLB  0
3F2A:  CALL   09EC
....................                printf(lcd_putc,"   Modo Manual  "); 
3F2E:  MOVLW  0E
3F30:  MOVWF  FF6
3F32:  MOVLW  07
3F34:  MOVWF  FF7
3F36:  CALL   0EEA
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
3F3A:  BSF    4E.1
3F3C:  BCF    4E.2
3F3E:  BCF    4E.3
3F40:  MOVLW  0A
3F42:  MOVWF  2C
3F44:  MOVWF  2E
....................                delay_ms(1000); 
3F46:  MOVLW  04
3F48:  MOVLB  1
3F4A:  MOVWF  x00
3F4C:  MOVLW  FA
3F4E:  MOVWF  x1B
3F50:  MOVLB  0
3F52:  CALL   08E2
3F56:  MOVLB  1
3F58:  DECFSZ x00,F
3F5A:  BRA    3F4C
3F5C:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
3F5E:  BSF    F93.2
3F60:  BTFSS  F81.2
3F62:  BRA    3FBE
....................          { 
....................             delay_ms(500); 
3F64:  MOVLW  02
3F66:  MOVLB  1
3F68:  MOVWF  x00
3F6A:  MOVLW  FA
3F6C:  MOVWF  x1B
3F6E:  MOVLB  0
3F70:  CALL   08E2
3F74:  MOVLB  1
3F76:  DECFSZ x00,F
3F78:  BRA    3F6A
....................             if(DOWN) 
3F7A:  BSF    F93.2
3F7C:  BTFSS  F81.2
3F7E:  BRA    3FBC
....................             { 
....................                lcd_gotoxy(1,2); 
3F80:  MOVLW  01
3F82:  MOVWF  x16
3F84:  MOVLW  02
3F86:  MOVWF  x17
3F88:  MOVLB  0
3F8A:  CALL   09EC
....................                printf(lcd_putc,"   Modo Auto   "); 
3F8E:  MOVLW  20
3F90:  MOVWF  FF6
3F92:  MOVLW  07
3F94:  MOVWF  FF7
3F96:  CALL   0EEA
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
3F9A:  BSF    4E.2
3F9C:  BCF    4E.1
3F9E:  BCF    4E.3
3FA0:  MOVLW  0A
3FA2:  MOVWF  2D
3FA4:  MOVWF  2E
....................                delay_ms(1000); 
3FA6:  MOVLW  04
3FA8:  MOVLB  1
3FAA:  MOVWF  x00
3FAC:  MOVLW  FA
3FAE:  MOVWF  x1B
3FB0:  MOVLB  0
3FB2:  CALL   08E2
3FB6:  MOVLB  1
3FB8:  DECFSZ x00,F
3FBA:  BRA    3FAC
3FBC:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
3FBE:  BSF    F93.0
3FC0:  BTFSS  F81.0
3FC2:  BRA    401E
....................          { 
....................             delay_ms(500); 
3FC4:  MOVLW  02
3FC6:  MOVLB  1
3FC8:  MOVWF  x00
3FCA:  MOVLW  FA
3FCC:  MOVWF  x1B
3FCE:  MOVLB  0
3FD0:  CALL   08E2
3FD4:  MOVLB  1
3FD6:  DECFSZ x00,F
3FD8:  BRA    3FCA
....................             if(RIGHT) 
3FDA:  BSF    F93.0
3FDC:  BTFSS  F81.0
3FDE:  BRA    401C
....................             { 
....................                lcd_gotoxy(1,2); 
3FE0:  MOVLW  01
3FE2:  MOVWF  x16
3FE4:  MOVLW  02
3FE6:  MOVWF  x17
3FE8:  MOVLB  0
3FEA:  CALL   09EC
....................                printf(lcd_putc,"   Modo Semi   "); 
3FEE:  MOVLW  30
3FF0:  MOVWF  FF6
3FF2:  MOVLW  07
3FF4:  MOVWF  FF7
3FF6:  CALL   0EEA
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
3FFA:  BSF    4E.3
3FFC:  BCF    4E.1
3FFE:  BCF    4E.2
4000:  MOVLW  0A
4002:  MOVWF  2C
4004:  MOVWF  2D
....................                delay_ms(1000); 
4006:  MOVLW  04
4008:  MOVLB  1
400A:  MOVWF  x00
400C:  MOVLW  FA
400E:  MOVWF  x1B
4010:  MOVLB  0
4012:  CALL   08E2
4016:  MOVLB  1
4018:  DECFSZ x00,F
401A:  BRA    400C
401C:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
401E:  BSF    F93.1
4020:  BTFSS  F81.1
4022:  BRA    4054
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4024:  MOVLW  01
4026:  MOVWF  17
4028:  CLRF   36
402A:  MOVLW  02
402C:  MOVWF  1B
402E:  MOVWF  1D
4030:  MOVLW  0B
4032:  MOVWF  1A
4034:  MOVLW  02
4036:  MOVLB  1
4038:  MOVWF  x00
403A:  MOVLW  FA
403C:  MOVWF  x1B
403E:  MOVLB  0
4040:  CALL   08E2
4044:  MOVLB  1
4046:  DECFSZ x00,F
4048:  BRA    403A
404A:  MOVLW  0C
404C:  MOVWF  x15
404E:  MOVLB  0
4050:  CALL   0A5E
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4054:  BTFSC  4E.1
4056:  BRA    4060
4058:  MOVF   2D,W
405A:  SUBLW  14
405C:  BTFSS  FD8.2
405E:  BRA    4188
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4060:  BCF    4E.2
4062:  BCF    4E.3
4064:  MOVLW  0A
4066:  MOVWF  2C
4068:  MOVWF  2E
....................          lcd_gotoxy(1,2); 
406A:  MOVLW  01
406C:  MOVLB  1
406E:  MOVWF  x16
4070:  MOVLW  02
4072:  MOVWF  x17
4074:  MOVLB  0
4076:  CALL   09EC
....................          printf(lcd_putc,"   Modo Manual  "); 
407A:  MOVLW  40
407C:  MOVWF  FF6
407E:  MOVLW  07
4080:  MOVWF  FF7
4082:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
4086:  MOVLW  01
4088:  MOVLB  1
408A:  MOVWF  x16
408C:  MOVLW  03
408E:  MOVWF  x17
4090:  MOVLB  0
4092:  CALL   09EC
....................          printf(lcd_putc,"    Seleccionado    "); 
4096:  MOVLW  52
4098:  MOVWF  FF6
409A:  MOVLW  07
409C:  MOVWF  FF7
409E:  CALL   0EEA
....................          if(LEFT) 
40A2:  BSF    F93.1
40A4:  BTFSS  F81.1
40A6:  BRA    4188
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
40A8:  BCF    4E.1
40AA:  MOVLW  14
40AC:  MOVWF  2D
40AE:  MOVLW  0A
40B0:  MOVWF  2C
40B2:  MOVWF  2E
40B4:  MOVLW  02
40B6:  MOVLB  1
40B8:  MOVWF  x00
40BA:  MOVLW  FA
40BC:  MOVWF  x1B
40BE:  MOVLB  0
40C0:  CALL   08E2
40C4:  MOVLB  1
40C6:  DECFSZ x00,F
40C8:  BRA    40BA
40CA:  MOVLW  0C
40CC:  MOVWF  x15
40CE:  MOVLB  0
40D0:  CALL   0A5E
40D4:  MOVLW  FE
40D6:  MOVLB  1
40D8:  MOVWF  x00
40DA:  MOVLB  0
40DC:  CALL   164A
40E0:  MOVLW  FE
40E2:  MOVWF  29
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
40E4:  MOVLW  0A
40E6:  MOVWF  FA9
40E8:  MOVFF  2D,FA8
40EC:  BCF    FA6.6
40EE:  BCF    FA6.7
40F0:  BSF    FA6.2
40F2:  MOVF   FF2,W
40F4:  MOVWF  00
40F6:  BCF    FF2.7
40F8:  MOVLB  F
40FA:  MOVLW  55
40FC:  MOVWF  FA7
40FE:  MOVLW  AA
4100:  MOVWF  FA7
4102:  BSF    FA6.1
4104:  BTFSC  FA6.1
4106:  BRA    4104
4108:  BCF    FA6.2
410A:  MOVF   00,W
410C:  IORWF  FF2,F
410E:  MOVLW  0C
4110:  MOVWF  FA9
4112:  MOVFF  2E,FA8
4116:  BCF    FA6.6
4118:  BCF    FA6.7
411A:  BSF    FA6.2
411C:  MOVF   FF2,W
411E:  MOVWF  00
4120:  BCF    FF2.7
4122:  MOVLW  55
4124:  MOVWF  FA7
4126:  MOVLW  AA
4128:  MOVWF  FA7
412A:  BSF    FA6.1
412C:  BTFSC  FA6.1
412E:  BRA    412C
4130:  BCF    FA6.2
4132:  MOVF   00,W
4134:  IORWF  FF2,F
4136:  MOVLW  0B
4138:  MOVWF  FA9
413A:  MOVFF  2C,FA8
413E:  BCF    FA6.6
4140:  BCF    FA6.7
4142:  BSF    FA6.2
4144:  MOVF   FF2,W
4146:  MOVWF  00
4148:  BCF    FF2.7
414A:  MOVLW  55
414C:  MOVWF  FA7
414E:  MOVLW  AA
4150:  MOVWF  FA7
4152:  BSF    FA6.1
4154:  BTFSC  FA6.1
4156:  BRA    4154
4158:  BCF    FA6.2
415A:  MOVF   00,W
415C:  IORWF  FF2,F
415E:  MOVLW  0D
4160:  MOVWF  FA9
4162:  MOVFF  29,FA8
4166:  BCF    FA6.6
4168:  BCF    FA6.7
416A:  BSF    FA6.2
416C:  MOVF   FF2,W
416E:  MOVWF  00
4170:  BCF    FF2.7
4172:  MOVLW  55
4174:  MOVWF  FA7
4176:  MOVLW  AA
4178:  MOVWF  FA7
417A:  BSF    FA6.1
417C:  BTFSC  FA6.1
417E:  BRA    417C
4180:  BCF    FA6.2
4182:  MOVF   00,W
4184:  IORWF  FF2,F
4186:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
4188:  BTFSC  4E.2
418A:  BRA    4192
418C:  MOVF   2C,W
418E:  SUBLW  14
4190:  BNZ   425A
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
4192:  BCF    4E.1
4194:  BCF    4E.3
4196:  MOVLW  0A
4198:  MOVWF  2E
419A:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
419C:  MOVLW  01
419E:  MOVLB  1
41A0:  MOVWF  x16
41A2:  MOVLW  02
41A4:  MOVWF  x17
41A6:  MOVLB  0
41A8:  CALL   09EC
....................          printf(lcd_putc,"   Modo Auto   "); 
41AC:  MOVLW  68
41AE:  MOVWF  FF6
41B0:  MOVLW  07
41B2:  MOVWF  FF7
41B4:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
41B8:  MOVLW  01
41BA:  MOVLB  1
41BC:  MOVWF  x16
41BE:  MOVLW  03
41C0:  MOVWF  x17
41C2:  MOVLB  0
41C4:  CALL   09EC
....................          printf(lcd_putc,"    Seleccionado    "); 
41C8:  MOVLW  78
41CA:  MOVWF  FF6
41CC:  MOVLW  07
41CE:  MOVWF  FF7
41D0:  CALL   0EEA
....................          if(LEFT) 
41D4:  BSF    F93.1
41D6:  BTFSS  F81.1
41D8:  BRA    425A
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
41DA:  BCF    4E.2
41DC:  MOVLW  14
41DE:  MOVWF  2C
41E0:  MOVLW  0A
41E2:  MOVWF  2E
41E4:  MOVWF  2D
41E6:  MOVLW  02
41E8:  MOVLB  1
41EA:  MOVWF  x00
41EC:  MOVLW  FA
41EE:  MOVWF  x1B
41F0:  MOVLB  0
41F2:  CALL   08E2
41F6:  MOVLB  1
41F8:  DECFSZ x00,F
41FA:  BRA    41EC
41FC:  MOVLW  0C
41FE:  MOVWF  x15
4200:  MOVLB  0
4202:  CALL   0A5E
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
4206:  MOVLW  0B
4208:  MOVWF  FA9
420A:  MOVFF  2C,FA8
420E:  BCF    FA6.6
4210:  BCF    FA6.7
4212:  BSF    FA6.2
4214:  MOVF   FF2,W
4216:  MOVWF  00
4218:  BCF    FF2.7
421A:  MOVLB  F
421C:  MOVLW  55
421E:  MOVWF  FA7
4220:  MOVLW  AA
4222:  MOVWF  FA7
4224:  BSF    FA6.1
4226:  BTFSC  FA6.1
4228:  BRA    4226
422A:  BCF    FA6.2
422C:  MOVF   00,W
422E:  IORWF  FF2,F
4230:  MOVLW  0C
4232:  MOVWF  FA9
4234:  MOVFF  2E,FA8
4238:  BCF    FA6.6
423A:  BCF    FA6.7
423C:  BSF    FA6.2
423E:  MOVF   FF2,W
4240:  MOVWF  00
4242:  BCF    FF2.7
4244:  MOVLW  55
4246:  MOVWF  FA7
4248:  MOVLW  AA
424A:  MOVWF  FA7
424C:  BSF    FA6.1
424E:  BTFSC  FA6.1
4250:  BRA    424E
4252:  BCF    FA6.2
4254:  MOVF   00,W
4256:  IORWF  FF2,F
4258:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
425A:  BTFSC  4E.3
425C:  BRA    4266
425E:  MOVF   2E,W
4260:  SUBLW  14
4262:  BTFSS  FD8.2
4264:  BRA    4380
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4266:  BCF    4E.1
4268:  BCF    4E.2
426A:  MOVLW  0A
426C:  MOVWF  2C
426E:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
4270:  MOVLW  01
4272:  MOVLB  1
4274:  MOVWF  x16
4276:  MOVLW  02
4278:  MOVWF  x17
427A:  MOVLB  0
427C:  CALL   09EC
....................          printf(lcd_putc,"   Modo Semi   "); 
4280:  MOVLW  8E
4282:  MOVWF  FF6
4284:  MOVLW  07
4286:  MOVWF  FF7
4288:  CALL   0EEA
....................          if(UP) 
428C:  BSF    F93.3
428E:  BTFSS  F81.3
4290:  BRA    4294
....................          { 
....................             tmp++; 
4292:  INCF   29,F
....................              
....................          } 
....................           
....................          if(DOWN) 
4294:  BSF    F93.2
4296:  BTFSS  F81.2
4298:  BRA    429C
....................          { 
....................             tmp--; 
429A:  DECF   29,F
....................          } 
....................          ValorSemi=tmp; 
429C:  MOVFF  29,2F
....................          ajustar_damper(tmp); 
42A0:  MOVFF  29,100
42A4:  CALL   164A
....................          if(LEFT) 
42A8:  BSF    F93.1
42AA:  BTFSS  F81.1
42AC:  BRA    4380
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
42AE:  MOVLW  0D
42B0:  MOVWF  FA9
42B2:  MOVFF  29,FA8
42B6:  BCF    FA6.6
42B8:  BCF    FA6.7
42BA:  BSF    FA6.2
42BC:  MOVF   FF2,W
42BE:  MOVWF  00
42C0:  BCF    FF2.7
42C2:  MOVLB  F
42C4:  MOVLW  55
42C6:  MOVWF  FA7
42C8:  MOVLW  AA
42CA:  MOVWF  FA7
42CC:  BSF    FA6.1
42CE:  BTFSC  FA6.1
42D0:  BRA    42CE
42D2:  BCF    FA6.2
42D4:  MOVF   00,W
42D6:  IORWF  FF2,F
42D8:  BCF    4E.3
42DA:  MOVLW  14
42DC:  MOVWF  2E
42DE:  MOVLW  0A
42E0:  MOVWF  2C
42E2:  MOVWF  2D
42E4:  MOVLW  02
42E6:  MOVLB  1
42E8:  MOVWF  x00
42EA:  MOVLW  FA
42EC:  MOVWF  x1B
42EE:  MOVLB  0
42F0:  CALL   08E2
42F4:  MOVLB  1
42F6:  DECFSZ x00,F
42F8:  BRA    42EA
42FA:  MOVLW  0C
42FC:  MOVWF  x15
42FE:  MOVLB  0
4300:  CALL   0A5E
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
4304:  MOVLW  0C
4306:  MOVWF  FA9
4308:  MOVFF  2E,FA8
430C:  BCF    FA6.6
430E:  BCF    FA6.7
4310:  BSF    FA6.2
4312:  MOVF   FF2,W
4314:  MOVWF  00
4316:  BCF    FF2.7
4318:  MOVLB  F
431A:  MOVLW  55
431C:  MOVWF  FA7
431E:  MOVLW  AA
4320:  MOVWF  FA7
4322:  BSF    FA6.1
4324:  BTFSC  FA6.1
4326:  BRA    4324
4328:  BCF    FA6.2
432A:  MOVF   00,W
432C:  IORWF  FF2,F
432E:  MOVLW  0B
4330:  MOVWF  FA9
4332:  MOVFF  2C,FA8
4336:  BCF    FA6.6
4338:  BCF    FA6.7
433A:  BSF    FA6.2
433C:  MOVF   FF2,W
433E:  MOVWF  00
4340:  BCF    FF2.7
4342:  MOVLW  55
4344:  MOVWF  FA7
4346:  MOVLW  AA
4348:  MOVWF  FA7
434A:  BSF    FA6.1
434C:  BTFSC  FA6.1
434E:  BRA    434C
4350:  BCF    FA6.2
4352:  MOVF   00,W
4354:  IORWF  FF2,F
4356:  MOVLW  0A
4358:  MOVWF  FA9
435A:  MOVFF  2D,FA8
435E:  BCF    FA6.6
4360:  BCF    FA6.7
4362:  BSF    FA6.2
4364:  MOVF   FF2,W
4366:  MOVWF  00
4368:  BCF    FF2.7
436A:  MOVLW  55
436C:  MOVWF  FA7
436E:  MOVLW  AA
4370:  MOVWF  FA7
4372:  BSF    FA6.1
4374:  BTFSC  FA6.1
4376:  BRA    4374
4378:  BCF    FA6.2
437A:  MOVF   00,W
437C:  IORWF  FF2,F
437E:  MOVLB  0
4380:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
4382:  MOVF   17,W
4384:  SUBLW  14
4386:  BTFSS  FD8.2
4388:  BRA    461C
....................    { 
....................       if(Lectura2==1) 
438A:  BTFSS  35.6
438C:  BRA    43E2
....................       { 
....................       lcd_gotoxy(1,1);                      
438E:  MOVLW  01
4390:  MOVWF  x16
4392:  MOVWF  x17
4394:  MOVLB  0
4396:  CALL   09EC
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
439A:  MOVLW  9E
439C:  MOVWF  FF6
439E:  MOVLW  07
43A0:  MOVWF  FF7
43A2:  CALL   0EEA
....................       lcd_gotoxy(1,2); 
43A6:  MOVLW  01
43A8:  MOVLB  1
43AA:  MOVWF  x16
43AC:  MOVLW  02
43AE:  MOVWF  x17
43B0:  MOVLB  0
43B2:  CALL   09EC
....................       printf(lcd_putc,"Damp= Opc."); 
43B6:  MOVLW  A8
43B8:  MOVWF  FF6
43BA:  MOVLW  07
43BC:  MOVWF  FF7
43BE:  CALL   0EEA
....................       //printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
....................       lcd_gotoxy(1,3); 
43C2:  MOVLW  01
43C4:  MOVLB  1
43C6:  MOVWF  x16
43C8:  MOVLW  03
43CA:  MOVWF  x17
43CC:  MOVLB  0
43CE:  CALL   09EC
....................       printf(lcd_putc,"InFlow= Opc."); 
43D2:  MOVLW  B4
43D4:  MOVWF  FF6
43D6:  MOVLW  07
43D8:  MOVWF  FF7
43DA:  CALL   0EEA
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       Lectura2=0; 
43DE:  BCF    35.6
43E0:  MOVLB  1
....................       } 
....................        
....................       if(horas>=60) 
43E2:  MOVF   32,W
43E4:  SUBLW  3B
43E6:  BC    4406
....................       { 
....................          lcd_gotoxy(10,1);                      
43E8:  MOVLW  0A
43EA:  MOVWF  x16
43EC:  MOVLW  01
43EE:  MOVWF  x17
43F0:  MOVLB  0
43F2:  CALL   09EC
....................          printf(lcd_putc,"Filtro:Opc.");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
43F6:  MOVLW  C2
43F8:  MOVWF  FF6
43FA:  MOVLW  07
43FC:  MOVWF  FF7
43FE:  CALL   0EEA
....................          //printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................       else 
4402:  BRA    4420
4404:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
4406:  MOVLW  0A
4408:  MOVWF  x16
440A:  MOVLW  01
440C:  MOVWF  x17
440E:  MOVLB  0
4410:  CALL   09EC
....................          printf(lcd_putc,"Filtro:Opc.");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
4414:  MOVLW  CE
4416:  MOVWF  FF6
4418:  MOVLW  07
441A:  MOVWF  FF7
441C:  CALL   0EEA
....................          //printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................        
....................       if(iniciodamper==0) 
4420:  BTFSC  4E.0
4422:  BRA    4444
....................       { 
....................          flag_iniciodamper=1; 
4424:  BSF    35.7
....................          lcd_gotoxy(11,2); 
4426:  MOVLW  0B
4428:  MOVLB  1
442A:  MOVWF  x16
442C:  MOVLW  02
442E:  MOVWF  x17
4430:  MOVLB  0
4432:  CALL   09EC
....................          printf(lcd_putc,"Flujo=Opc."); 
4436:  MOVLW  DA
4438:  MOVWF  FF6
443A:  MOVLW  07
443C:  MOVWF  FF7
443E:  CALL   0EEA
....................          //printf(lcd_putc,"Flujo=Ajus"); 
....................       } 
....................       else 
4442:  BRA    44E6
....................       { 
....................          flag_iniciodamper=0; 
4444:  BCF    35.7
....................          if(Flujo<0.5) 
4446:  MOVFF  8E,102
444A:  MOVFF  8D,101
444E:  MOVFF  8C,100
4452:  MOVFF  8B,FF
4456:  MOVLB  1
4458:  CLRF   x06
445A:  CLRF   x05
445C:  CLRF   x04
445E:  MOVLW  7E
4460:  MOVWF  x03
4462:  MOVLB  0
4464:  CALL   1538
4468:  BNC   4488
....................          { 
....................             lcd_gotoxy(11,2); 
446A:  MOVLW  0B
446C:  MOVLB  1
446E:  MOVWF  x16
4470:  MOVLW  02
4472:  MOVWF  x17
4474:  MOVLB  0
4476:  CALL   09EC
....................             printf(lcd_putc,"Flujo=Opc.");       
447A:  MOVLW  E6
447C:  MOVWF  FF6
447E:  MOVLW  07
4480:  MOVWF  FF7
4482:  CALL   0EEA
....................             //printf(lcd_putc,"Flujo=Bajo"); 
....................          } 
....................          else 
4486:  BRA    44E6
....................          { 
....................             if(Flujo>2.0) 
4488:  MOVLB  1
448A:  CLRF   x02
448C:  CLRF   x01
448E:  CLRF   x00
4490:  MOVLW  80
4492:  MOVLB  0
4494:  MOVWF  xFF
4496:  MOVFF  8E,106
449A:  MOVFF  8D,105
449E:  MOVFF  8C,104
44A2:  MOVFF  8B,103
44A6:  CALL   1538
44AA:  BNC   44CA
....................             { 
....................                lcd_gotoxy(11,2); 
44AC:  MOVLW  0B
44AE:  MOVLB  1
44B0:  MOVWF  x16
44B2:  MOVLW  02
44B4:  MOVWF  x17
44B6:  MOVLB  0
44B8:  CALL   09EC
....................                printf(lcd_putc,"Flujo=Opc."); 
44BC:  MOVLW  F2
44BE:  MOVWF  FF6
44C0:  MOVLW  07
44C2:  MOVWF  FF7
44C4:  CALL   0EEA
....................                //printf(lcd_putc,"Flujo=Alto"); 
....................             } 
....................             else 
44C8:  BRA    44E6
....................             { 
....................                lcd_gotoxy(11,2); 
44CA:  MOVLW  0B
44CC:  MOVLB  1
44CE:  MOVWF  x16
44D0:  MOVLW  02
44D2:  MOVWF  x17
44D4:  MOVLB  0
44D6:  CALL   09EC
....................                printf(lcd_putc,"Flujo=Opc. ");       
44DA:  MOVLW  FE
44DC:  MOVWF  FF6
44DE:  MOVLW  07
44E0:  MOVWF  FF7
44E2:  CALL   0EEA
....................                //printf(lcd_putc,"Flujo=OK  "); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
44E6:  BTFSS  34.0
44E8:  BRA    450C
....................       { 
....................          Luz_Blanca_on; 
44EA:  BSF    F8A.4
44EC:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
44EE:  MOVLW  01
44F0:  MOVLB  1
44F2:  MOVWF  x16
44F4:  MOVLW  04
44F6:  MOVWF  x17
44F8:  MOVLB  0
44FA:  CALL   09EC
....................          printf(lcd_putc,"Luz:ON "); 
44FE:  MOVLW  0A
4500:  MOVWF  FF6
4502:  MOVLW  08
4504:  MOVWF  FF7
4506:  CALL   0EEA
....................       } 
....................       else 
450A:  BRA    452C
....................       { 
....................          Luz_Blanca_off; 
450C:  BCF    F8A.4
450E:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
4510:  MOVLW  01
4512:  MOVLB  1
4514:  MOVWF  x16
4516:  MOVLW  04
4518:  MOVWF  x17
451A:  MOVLB  0
451C:  CALL   09EC
....................          printf(lcd_putc,"Luz:OFF "); 
4520:  MOVLW  12
4522:  MOVWF  FF6
4524:  MOVLW  08
4526:  MOVWF  FF7
4528:  CALL   0EEA
....................       } 
....................        
....................       if(estadomv==1) 
452C:  BTFSS  34.1
452E:  BRA    4552
....................       { 
....................          lcd_gotoxy(10,4); 
4530:  MOVLW  0A
4532:  MOVLB  1
4534:  MOVWF  x16
4536:  MOVLW  04
4538:  MOVWF  x17
453A:  MOVLB  0
453C:  CALL   09EC
....................          Motor_on;   
4540:  BSF    F8A.5
4542:  BCF    F93.5
....................          printf(lcd_putc,"Motor:ON "); 
4544:  MOVLW  1C
4546:  MOVWF  FF6
4548:  MOVLW  08
454A:  MOVWF  FF7
454C:  CALL   0EEA
....................       } 
....................       else 
4550:  BRA    4572
....................       { 
....................          Motor_off;      
4552:  BCF    F8A.5
4554:  BCF    F93.5
....................          lcd_gotoxy(10,4); 
4556:  MOVLW  0A
4558:  MOVLB  1
455A:  MOVWF  x16
455C:  MOVLW  04
455E:  MOVWF  x17
4560:  MOVLB  0
4562:  CALL   09EC
....................          printf(lcd_putc,"Motor:OFF ");  
4566:  MOVLW  26
4568:  MOVWF  FF6
456A:  MOVLW  08
456C:  MOVWF  FF7
456E:  CALL   0EEA
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
4572:  BSF    F93.2
4574:  BTFSS  F81.2
4576:  BRA    458E
....................       {  if(Flanco == 0)  
4578:  BTFSC  34.4
457A:  BRA    458C
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
457C:  BSF    34.4
457E:  MOVLW  C8
4580:  MOVLB  1
4582:  MOVWF  x1B
4584:  MOVLB  0
4586:  CALL   08E2
458A:  BTG    34.0
....................          else 
458C:  BRA    4590
....................             {Flanco = 0;} 
458E:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
4590:  BSF    F93.1
4592:  BTFSS  F81.1
4594:  BRA    45DA
....................       {   
....................          if(Flanco2 == 0) 
4596:  BTFSC  34.6
4598:  BRA    45D8
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
459A:  BSF    34.6
459C:  MOVLW  C8
459E:  MOVLB  1
45A0:  MOVWF  x1B
45A2:  MOVLB  0
45A4:  CALL   08E2
45A8:  BTG    34.1
....................             if(estadomv==1) 
45AA:  BTFSS  34.1
45AC:  BRA    45C4
....................             { 
....................                Motor_on;         
45AE:  BSF    F8A.5
45B0:  BCF    F93.5
....................                delay_ms(150); 
45B2:  MOVLW  96
45B4:  MOVLB  1
45B6:  MOVWF  x1B
45B8:  MOVLB  0
45BA:  CALL   08E2
....................                lcd_init(); 
45BE:  CALL   0980
....................             } 
....................             else 
45C2:  BRA    45D8
....................             { 
....................                Motor_off; 
45C4:  BCF    F8A.5
45C6:  BCF    F93.5
....................                delay_ms(150); 
45C8:  MOVLW  96
45CA:  MOVLB  1
45CC:  MOVWF  x1B
45CE:  MOVLB  0
45D0:  CALL   08E2
....................                lcd_init(); 
45D4:  CALL   0980
....................             } 
....................          } 
....................       } 
....................       else 
45D8:  BRA    45DC
....................       { 
....................          Flanco2 = 0; 
45DA:  BCF    34.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
45DC:  BSF    F93.3
45DE:  BTFSS  F81.3
45E0:  BRA    4618
....................       {  if(Flanco1 == 0)  
45E2:  BTFSC  34.5
45E4:  BRA    4616
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
45E6:  MOVLW  02
45E8:  MOVLB  1
45EA:  MOVWF  x00
45EC:  MOVLW  FA
45EE:  MOVWF  x1B
45F0:  MOVLB  0
45F2:  CALL   08E2
45F6:  MOVLB  1
45F8:  DECFSZ x00,F
45FA:  BRA    45EC
45FC:  MOVLW  0C
45FE:  MOVWF  x15
4600:  MOVLB  0
4602:  CALL   0A5E
4606:  MOVLW  01
4608:  MOVWF  17
460A:  CLRF   36
460C:  MOVLW  02
460E:  MOVWF  1B
4610:  MOVWF  1D
4612:  MOVLW  0B
4614:  MOVWF  1A
....................          else 
4616:  BRA    461A
....................             {Flanco1 = 0;}    
4618:  BCF    34.5
461A:  MOVLB  1
....................           
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
461C:  MOVF   17,W
461E:  SUBLW  1E
4620:  BTFSS  FD8.2
4622:  BRA    4792
....................       lcd_gotoxy(1,1); 
4624:  MOVLW  01
4626:  MOVWF  x16
4628:  MOVWF  x17
462A:  MOVLB  0
462C:  CALL   09EC
....................       printf(lcd_putc,"     Apagando     "); 
4630:  MOVLW  32
4632:  MOVWF  FF6
4634:  MOVLW  08
4636:  MOVWF  FF7
4638:  CALL   0EEA
....................       lcd_gotoxy(1,2); 
463C:  MOVLW  01
463E:  MOVLB  1
4640:  MOVWF  x16
4642:  MOVLW  02
4644:  MOVWF  x17
4646:  MOVLB  0
4648:  CALL   09EC
....................       printf(lcd_putc,"      Cabina      "); 
464C:  MOVLW  46
464E:  MOVWF  FF6
4650:  MOVLW  08
4652:  MOVWF  FF7
4654:  CALL   0EEA
....................        
....................       lcd_gotoxy(1,3); 
4658:  MOVLW  01
465A:  MOVLB  1
465C:  MOVWF  x16
465E:  MOVLW  03
4660:  MOVWF  x17
4662:  MOVLB  0
4664:  CALL   09EC
....................       printf(lcd_putc," Espere"); 
4668:  MOVLW  5A
466A:  MOVWF  FF6
466C:  MOVLW  08
466E:  MOVWF  FF7
4670:  CALL   0EEA
....................        
....................       if(Lectura==1) 
4674:  BTFSS  35.5
4676:  BRA    478E
....................       {ajustar_damper(0); 
4678:  MOVLB  1
467A:  CLRF   x00
467C:  MOVLB  0
467E:  CALL   164A
....................        
....................          if(n<8) 
4682:  MOVF   26,W
4684:  SUBLW  07
4686:  BNC   46AC
....................          { 
....................             lcd_gotoxy(9+n,3); 
4688:  MOVLW  09
468A:  ADDWF  26,W
468C:  MOVLB  1
468E:  MOVWF  x00
4690:  MOVWF  x16
4692:  MOVLW  03
4694:  MOVWF  x17
4696:  MOVLB  0
4698:  CALL   09EC
....................             printf(lcd_putc,"."); 
469C:  MOVLW  2E
469E:  MOVLB  1
46A0:  MOVWF  x15
46A2:  MOVLB  0
46A4:  CALL   0A5E
....................             n++; 
46A8:  INCF   26,F
....................          } 
....................          else 
46AA:  BRA    478C
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
46AC:  MOVLW  46
46AE:  MOVWF  FA9
46B0:  MOVFF  30,FA8
46B4:  BCF    FA6.6
46B6:  BCF    FA6.7
46B8:  BSF    FA6.2
46BA:  MOVF   FF2,W
46BC:  MOVWF  00
46BE:  BCF    FF2.7
46C0:  MOVLB  F
46C2:  MOVLW  55
46C4:  MOVWF  FA7
46C6:  MOVLW  AA
46C8:  MOVWF  FA7
46CA:  BSF    FA6.1
46CC:  BTFSC  FA6.1
46CE:  BRA    46CC
46D0:  BCF    FA6.2
46D2:  MOVF   00,W
46D4:  IORWF  FF2,F
46D6:  MOVLW  47
46D8:  MOVWF  FA9
46DA:  MOVFF  31,FA8
46DE:  BCF    FA6.6
46E0:  BCF    FA6.7
46E2:  BSF    FA6.2
46E4:  MOVF   FF2,W
46E6:  MOVWF  00
46E8:  BCF    FF2.7
46EA:  MOVLW  55
46EC:  MOVWF  FA7
46EE:  MOVLW  AA
46F0:  MOVWF  FA7
46F2:  BSF    FA6.1
46F4:  BTFSC  FA6.1
46F6:  BRA    46F4
46F8:  BCF    FA6.2
46FA:  MOVF   00,W
46FC:  IORWF  FF2,F
46FE:  MOVLW  48
4700:  MOVWF  FA9
4702:  MOVFF  32,FA8
4706:  BCF    FA6.6
4708:  BCF    FA6.7
470A:  BSF    FA6.2
470C:  MOVF   FF2,W
470E:  MOVWF  00
4710:  BCF    FF2.7
4712:  MOVLW  55
4714:  MOVWF  FA7
4716:  MOVLW  AA
4718:  MOVWF  FA7
471A:  BSF    FA6.1
471C:  BTFSC  FA6.1
471E:  BRA    471C
4720:  BCF    FA6.2
4722:  MOVF   00,W
4724:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
4726:  MOVLW  0C
4728:  MOVLB  1
472A:  MOVWF  x15
472C:  MOVLB  0
472E:  CALL   0A5E
....................             lcd_gotoxy(1,2); 
4732:  MOVLW  01
4734:  MOVLB  1
4736:  MOVWF  x16
4738:  MOVLW  02
473A:  MOVWF  x17
473C:  MOVLB  0
473E:  CALL   09EC
....................             printf(lcd_putc,"     Proceso      "); 
4742:  MOVLW  62
4744:  MOVWF  FF6
4746:  MOVLW  08
4748:  MOVWF  FF7
474A:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
474E:  MOVLW  01
4750:  MOVLB  1
4752:  MOVWF  x16
4754:  MOVLW  03
4756:  MOVWF  x17
4758:  MOVLB  0
475A:  CALL   09EC
....................             printf(lcd_putc,"    Finalizado    "); 
475E:  MOVLW  76
4760:  MOVWF  FF6
4762:  MOVLW  08
4764:  MOVWF  FF7
4766:  CALL   0EEA
....................             delay_ms(2000); 
476A:  MOVLW  08
476C:  MOVLB  1
476E:  MOVWF  x00
4770:  MOVLW  FA
4772:  MOVWF  x1B
4774:  MOVLB  0
4776:  CALL   08E2
477A:  MOVLB  1
477C:  DECFSZ x00,F
477E:  BRA    4770
....................             printf(lcd_putc,"\f"); 
4780:  MOVLW  0C
4782:  MOVWF  x15
4784:  MOVLB  0
4786:  CALL   0A5E
....................             reset_cpu(); 
478A:  RESET
....................          } 
....................        
....................        
....................       Lectura=0; 
478C:  BCF    35.5
....................       }   
....................    } 
478E:  MOVLB  1
4790:  BRA    461C
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
4792:  MOVF   17,W
4794:  SUBLW  28
4796:  BNZ   4872
....................    lcd_gotoxy(1,1); 
4798:  MOVLW  01
479A:  MOVWF  x16
479C:  MOVWF  x17
479E:  MOVLB  0
47A0:  CALL   09EC
....................    printf(lcd_putc,"   Desea apagar     "); 
47A4:  MOVLW  8A
47A6:  MOVWF  FF6
47A8:  MOVLW  08
47AA:  MOVWF  FF7
47AC:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
47B0:  MOVLW  01
47B2:  MOVLB  1
47B4:  MOVWF  x16
47B6:  MOVLW  02
47B8:  MOVWF  x17
47BA:  MOVLB  0
47BC:  CALL   09EC
....................    printf(lcd_putc,"     la cabina      "); 
47C0:  MOVLW  A0
47C2:  MOVWF  FF6
47C4:  MOVLW  08
47C6:  MOVWF  FF7
47C8:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
47CC:  MOVLW  01
47CE:  MOVLB  1
47D0:  MOVWF  x16
47D2:  MOVLW  03
47D4:  MOVWF  x17
47D6:  MOVLB  0
47D8:  CALL   09EC
....................    printf(lcd_putc,"   > Aceptar        "); 
47DC:  MOVLW  B6
47DE:  MOVWF  FF6
47E0:  MOVLW  08
47E2:  MOVWF  FF7
47E4:  CALL   0EEA
....................    lcd_gotoxy(1,4); 
47E8:  MOVLW  01
47EA:  MOVLB  1
47EC:  MOVWF  x16
47EE:  MOVLW  04
47F0:  MOVWF  x17
47F2:  MOVLB  0
47F4:  CALL   09EC
....................    printf(lcd_putc,"   < Cancelar       "); 
47F8:  MOVLW  CC
47FA:  MOVWF  FF6
47FC:  MOVLW  08
47FE:  MOVWF  FF7
4800:  CALL   0EEA
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
4804:  BSF    F93.0
4806:  BTFSS  F81.0
4808:  BRA    482E
....................       {  if(Flanco1 == 0)  
480A:  BTFSC  34.5
480C:  BRA    482C
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
480E:  BSF    34.5
4810:  MOVLW  1E
4812:  MOVWF  17
4814:  MOVFF  20,100
4818:  CALL   0ED6
481C:  BCF    F8A.6
481E:  BCF    F93.6
4820:  MOVLW  0C
4822:  MOVLB  1
4824:  MOVWF  x15
4826:  MOVLB  0
4828:  CALL   0A5E
....................             }} 
....................          else 
482C:  BRA    4830
....................             {Flanco1 = 0;}    
482E:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4830:  BSF    F93.1
4832:  BTFSS  F81.1
4834:  BRA    486E
....................       {  if(Flanco3 == 0)  
4836:  BTFSC  34.7
4838:  BRA    486C
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
483A:  BSF    34.7
483C:  MOVLW  14
483E:  MOVWF  17
4840:  CLRF   36
4842:  MOVLW  02
4844:  MOVWF  1B
4846:  MOVWF  1D
4848:  MOVLW  0B
484A:  MOVWF  1A
484C:  MOVLW  02
484E:  MOVLB  1
4850:  MOVWF  x00
4852:  MOVLW  FA
4854:  MOVWF  x1B
4856:  MOVLB  0
4858:  CALL   08E2
485C:  MOVLB  1
485E:  DECFSZ x00,F
4860:  BRA    4852
4862:  MOVLW  0C
4864:  MOVWF  x15
4866:  MOVLB  0
4868:  CALL   0A5E
....................          else 
486C:  BRA    4870
....................             {Flanco3 = 0;}     
486E:  BCF    34.7
4870:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(tiemporeset>=20) 
4872:  MOVF   33,W
4874:  SUBLW  13
4876:  BC    4882
....................    { 
....................       lcd_init(); 
4878:  MOVLB  0
487A:  CALL   0980
....................       tiemporeset=0; 
487E:  CLRF   33
4880:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
4882:  BTFSS  35.3
4884:  BRA    4892
....................       {intensidadpantalla(0);sleep();} 
4886:  CLRF   x00
4888:  MOVLB  0
488A:  CALL   0ED6
488E:  SLEEP 
4890:  MOVLB  1
.................... /* 
....................    if(Menu!=0 || Menu!=30) 
....................    { 
....................       if(Lectura==1) 
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
....................         if(iniciodamper==1) 
....................         { 
....................             controlar_flujo(); 
....................           
....................             if(Flujo<0.5 && iniciodamper==1 && Menu==20) 
....................             { 
....................                flag_latencia=1; 
....................                 
....................                if(Latencia==1) 
....................                { 
....................                   if(estadoalarma==1) 
....................                   { 
....................                      Alarma_on; 
....................                   } 
....................                   else 
....................                   { 
....................                      Alarma_off; 
....................                   } 
....................                   estadopantalla=!estadopantalla; 
....................                   if(estadopantalla==1) 
....................                   {intensidadpantalla(contraste);} 
....................                   else 
....................                   {intensidadpantalla(0);} 
....................                } 
....................             } 
....................             else 
....................             { 
....................                intensidadpantalla(contraste);Alarma_off; 
....................                if(Flujo>=0.5) 
....................                { 
....................                   Latencia=0;t_latencia=0;flag_latencia=0; 
....................                } 
....................             } 
....................         } 
....................         else 
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
....................         } 
....................          Lectura=0; 
....................       }      
....................  
....................    }  */    
....................     
....................    if(t_iniciodamper>=18000) 
4892:  MOVF   56,W
4894:  SUBLW  45
4896:  BC    48A6
4898:  XORLW  FF
489A:  BNZ   48A2
489C:  MOVF   55,W
489E:  SUBLW  4F
48A0:  BC    48A6
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
48A2:  BSF    4E.0
48A4:  BCF    35.7
....................    } 
....................     
....................    } 
48A6:  GOTO   1D08
.................... } 
48AA:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
