CCS PCH C Compiler, Version 4.104, 5967               17-ene.-17 10:44

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2017\Cabina Extractora 150 UNAL\Firmware\Cabina_Extractora.lst

               ROM used: 18690 bytes (57%)
                         Largest free fragment is 14074
               RAM used: 263 (13%) at main() level
                         293 (14%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   164E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
08E2:  MOVLW  01
08E4:  MOVWF  FEA
08E6:  MOVLW  1B
08E8:  MOVWF  FE9
08EA:  MOVF   FEF,W
08EC:  BZ    090A
08EE:  MOVLW  0F
08F0:  MOVWF  01
08F2:  CLRF   00
08F4:  DECFSZ 00,F
08F6:  BRA    08F4
08F8:  DECFSZ 01,F
08FA:  BRA    08F2
08FC:  MOVLW  8F
08FE:  MOVWF  00
0900:  DECFSZ 00,F
0902:  BRA    0900
0904:  NOP   
0906:  DECFSZ FEF,F
0908:  BRA    08EE
090A:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
090C:  MOVLB  1
090E:  SWAPF  x1C,W
0910:  ANDLW  F0
0912:  MOVWF  00
0914:  MOVLW  0F
0916:  ANDWF  F83,W
0918:  IORWF  00,W
091A:  MOVWF  F83
....................       delay_cycles(25); 
091C:  MOVLW  08
091E:  MOVWF  00
0920:  DECFSZ 00,F
0922:  BRA    0920
....................       lcd.enable = 1; 
0924:  BSF    F83.2
....................       delay_us(55); 
0926:  MOVLW  DB
0928:  MOVWF  00
092A:  DECFSZ 00,F
092C:  BRA    092A
092E:  BRA    0930
....................       lcd.enable = 0; 
0930:  BCF    F83.2
.................... } 
0932:  MOVLB  0
0934:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0936:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0938:  MOVLW  01
093A:  MOVLB  1
093C:  MOVWF  x1B
093E:  MOVLB  0
0940:  RCALL  08E2
....................       lcd.rs = address; 
0942:  MOVLB  1
0944:  BTFSS  x19.0
0946:  BCF    F83.0
0948:  BTFSC  x19.0
094A:  BSF    F83.0
....................       delay_cycles(25); 
094C:  MOVLW  08
094E:  MOVWF  00
0950:  DECFSZ 00,F
0952:  BRA    0950
....................       lcd.rw = 0; 
0954:  BCF    F83.1
....................       delay_cycles(25); 
0956:  MOVLW  08
0958:  MOVWF  00
095A:  DECFSZ 00,F
095C:  BRA    095A
....................       lcd.enable = 0; 
095E:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0960:  SWAPF  x1A,W
0962:  MOVWF  x1B
0964:  MOVLW  0F
0966:  ANDWF  x1B,F
0968:  MOVFF  11B,11C
096C:  MOVLB  0
096E:  RCALL  090C
....................       lcd_send_nibble(n & 0xf); 
0970:  MOVLB  1
0972:  MOVF   x1A,W
0974:  ANDLW  0F
0976:  MOVWF  x1B
0978:  MOVWF  x1C
097A:  MOVLB  0
097C:  RCALL  090C
.................... } 
097E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0980:  MOVLW  00
0982:  MOVWF  F95
....................     lcd.rs = 0; 
0984:  BCF    F83.0
....................     lcd.rw = 0; 
0986:  BCF    F83.1
....................     lcd.enable = 0; 
0988:  BCF    F83.2
....................     delay_ms(15); 
098A:  MOVLW  0F
098C:  MOVLB  1
098E:  MOVWF  x1B
0990:  MOVLB  0
0992:  RCALL  08E2
....................     for(i=1;i<=3;++i) { 
0994:  MOVLW  01
0996:  MOVWF  xFF
0998:  MOVF   xFF,W
099A:  SUBLW  03
099C:  BNC   09B6
....................        lcd_send_nibble(3); 
099E:  MOVLW  03
09A0:  MOVLB  1
09A2:  MOVWF  x1C
09A4:  MOVLB  0
09A6:  RCALL  090C
....................        delay_ms(5); 
09A8:  MOVLW  05
09AA:  MOVLB  1
09AC:  MOVWF  x1B
09AE:  MOVLB  0
09B0:  RCALL  08E2
....................     } 
09B2:  INCF   xFF,F
09B4:  BRA    0998
....................     lcd_send_nibble(2); 
09B6:  MOVLW  02
09B8:  MOVLB  1
09BA:  MOVWF  x1C
09BC:  MOVLB  0
09BE:  RCALL  090C
....................     for(i=0;i<=3;++i) 
09C0:  CLRF   xFF
09C2:  MOVF   xFF,W
09C4:  SUBLW  03
09C6:  BNC   09EA
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
09C8:  CLRF   03
09CA:  MOVF   xFF,W
09CC:  MOVFF  FF2,100
09D0:  BCF    FF2.7
09D2:  CALL   0096
09D6:  MOVLB  1
09D8:  BTFSC  x00.7
09DA:  BSF    FF2.7
09DC:  MOVWF  x00
09DE:  CLRF   x19
09E0:  MOVWF  x1A
09E2:  MOVLB  0
09E4:  RCALL  0936
09E6:  INCF   xFF,F
09E8:  BRA    09C2
.................... } 
09EA:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
09EC:  MOVLW  01
09EE:  MOVLB  1
09F0:  SUBWF  x17,W
09F2:  ADDLW  FC
09F4:  BC    0A20
09F6:  ADDLW  04
09F8:  MOVLB  0
09FA:  GOTO   0A32
....................      case 1 : address=0x80;break; 
09FE:  MOVLW  80
0A00:  MOVLB  1
0A02:  MOVWF  x18
0A04:  BRA    0A20
....................      case 2 : address=0xc0;break; 
0A06:  MOVLW  C0
0A08:  MOVLB  1
0A0A:  MOVWF  x18
0A0C:  BRA    0A20
....................      case 3 : address=0x94;break; 
0A0E:  MOVLW  94
0A10:  MOVLB  1
0A12:  MOVWF  x18
0A14:  BRA    0A20
....................      case 4 : address=0xd4;break; 
0A16:  MOVLW  D4
0A18:  MOVLB  1
0A1A:  MOVWF  x18
0A1C:  BRA    0A20
0A1E:  MOVLB  1
....................    } 
....................    address+=x-1; 
0A20:  MOVLW  01
0A22:  SUBWF  x16,W
0A24:  ADDWF  x18,F
....................    lcd_send_byte(0,address); 
0A26:  CLRF   x19
0A28:  MOVFF  118,11A
0A2C:  MOVLB  0
0A2E:  RCALL  0936
.................... } 
0A30:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A5E:  MOVLB  1
0A60:  MOVF   x15,W
0A62:  SUBLW  F1
0A64:  BNZ   0A6A
....................     c=238; 
0A66:  MOVLW  EE
0A68:  MOVWF  x15
....................    switch (c) { 
0A6A:  MOVF   x15,W
0A6C:  XORLW  0C
0A6E:  MOVLB  0
0A70:  BZ    0A7C
0A72:  XORLW  06
0A74:  BZ    0A98
0A76:  XORLW  02
0A78:  BZ    0AAA
0A7A:  BRA    0AB8
....................      case '\f'   : lcd_send_byte(0,1); 
0A7C:  MOVLB  1
0A7E:  CLRF   x19
0A80:  MOVLW  01
0A82:  MOVWF  x1A
0A84:  MOVLB  0
0A86:  RCALL  0936
....................                    lcdline=1; 
0A88:  MOVLW  01
0A8A:  MOVWF  16
....................                    delay_ms(2); 
0A8C:  MOVLW  02
0A8E:  MOVLB  1
0A90:  MOVWF  x1B
0A92:  MOVLB  0
0A94:  RCALL  08E2
....................                                            break; 
0A96:  BRA    0AC8
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A98:  INCF   16,F
0A9A:  MOVLW  01
0A9C:  MOVLB  1
0A9E:  MOVWF  x16
0AA0:  MOVFF  16,117
0AA4:  MOVLB  0
0AA6:  RCALL  09EC
0AA8:  BRA    0AC8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0AAA:  MOVLB  1
0AAC:  CLRF   x19
0AAE:  MOVLW  10
0AB0:  MOVWF  x1A
0AB2:  MOVLB  0
0AB4:  RCALL  0936
0AB6:  BRA    0AC8
....................      default     : lcd_send_byte(1,c);     break; 
0AB8:  MOVLW  01
0ABA:  MOVLB  1
0ABC:  MOVWF  x19
0ABE:  MOVFF  115,11A
0AC2:  MOVLB  0
0AC4:  RCALL  0936
0AC6:  BRA    0AC8
....................    } 
.................... } 
0AC8:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=200, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
15F0:  MOVLB  1
15F2:  RLCF   x04,W
15F4:  MOVWF  00
15F6:  RLCF   00,F
15F8:  MOVLW  FC
15FA:  ANDWF  00,F
15FC:  MOVFF  00,01
1600:  MOVF   FC2,W
1602:  ANDLW  C3
1604:  IORWF  00,W
1606:  MOVWF  FC2
1608:  MOVLW  0A
160A:  MOVWF  x1B
160C:  MOVLB  0
160E:  CALL   08E2
1612:  BSF    FC2.1
1614:  BTFSC  FC2.1
1616:  BRA    1614
1618:  MOVFF  FC4,10A
161C:  MOVFF  FC3,109
1620:  MOVLB  0
1622:  CALL   0ACA
1626:  MOVFF  03,108
162A:  MOVFF  02,107
162E:  MOVFF  01,106
1632:  MOVFF  00,105
1636:  MOVFF  105,00
163A:  MOVFF  106,01
163E:  MOVFF  107,02
1642:  MOVFF  108,03
.................... } 
1646:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0ED6:  MOVLB  1
0ED8:  MOVF   x00,F
0EDA:  BNZ   0EE2
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
0EDC:  BCF    F8B.1
0EDE:  BCF    F94.1
....................    } 
....................    else 
0EE0:  BRA    0EE6
....................    { 
....................       Pantalla_on; 
0EE2:  BSF    F8B.1
0EE4:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0EE6:  MOVLB  0
0EE8:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
....................     Voltaje1=sensores(1)*5/1023; 
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
....................     x_cubo=x_uno*x_cuadrado; 
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
....................     if(Velocidad<0.0) 
....................      {Velocidad=0.0;} 
....................       
....................      if(l>=media) 
....................        {l=0;} 
....................       
....................      promedio[l]=Velocidad;l++; 
....................      Flujo2=0; 
....................         for(h=0;h<=(media-1);h++) 
....................         { 
....................            Flujo2+=promedio[h]; 
....................         }  
....................            Flujo2=(Flujo2/media)*Ajuste1;  
....................            return Flujo2; 
.................... } 
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
....................       if(error<0.2&&error>-0.2) 
....................       {} 
....................       else 
....................       { 
....................          if(error>0.0) 
....................          {tmp+=1;} 
....................                 
....................          if(error<-0.0) 
....................          {tmp-=1;}   
....................       } 
....................        
....................       if(tmp>251) 
....................       {tmp=251;} 
....................       if(tmp<4)          
....................       {tmp=4;}       
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Manual==20) 
....................    { 
....................       tmp=251; 
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Semi==20) 
....................    { 
....................       set_pwm1_duty (ValorSemi); 
....................    } 
.................... } 
.................... /* 
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
....................       { 
....................       delay_ms(500); 
....................          if(input(PIN_B0)) 
....................          { 
....................             lcd_init(); 
....................             intensidadpantalla(contraste); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
....................             delay_ms(2000); 
....................             printf(lcd_putc,"\f"); 
....................             inicio=1; 
....................             Menu=0; 
....................             ModoSleep=0; 
....................             delay_ms(500); 
....................          } 
....................       } 
.................... }*/ 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................  
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   50,F
....................    tiempos2++; 
00C2:  INCF   53,F
00C4:  BTFSC  FD8.2
00C6:  INCF   54,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   52,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   51,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    35.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  35.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   51,F
00E0:  BTFSC  FD8.2
00E2:  INCF   52,F
....................    } 
....................     
....................    if(tiempos2==20) 
00E4:  MOVF   53,W
00E6:  SUBLW  14
00E8:  BNZ   00F4
00EA:  MOVF   54,F
00EC:  BNZ   00F4
....................    {tiempos2=0;Lectura2=1;} 
00EE:  CLRF   54
00F0:  CLRF   53
00F2:  BSF    35.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00F4:  MOVF   4F,W
00F6:  SUBLW  C8
00F8:  BNZ   0124
00FA:  MOVF   50,F
00FC:  BNZ   0124
....................    {tiempos=0;tiemporeset++; 
00FE:  CLRF   50
0100:  CLRF   4F
0102:  INCF   33,F
....................         Lectura=1; 
0104:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
0106:  BTFSS  34.1
0108:  BRA    0124
010A:  BTFSS  35.2
010C:  BRA    0124
....................          { 
....................             segundos++; 
010E:  INCF   30,F
....................           
....................          if(segundos==60) 
0110:  MOVF   30,W
0112:  SUBLW  3C
0114:  BNZ   011A
....................          { 
....................             segundos=0;minutos++; 
0116:  CLRF   30
0118:  INCF   31,F
....................          } 
....................           
....................          if(minutos==60) 
011A:  MOVF   31,W
011C:  SUBLW  3C
011E:  BNZ   0124
....................          { 
....................             minutos=0;horas++; 
0120:  CLRF   31
0122:  INCF   32,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
0124:  BCF    F9E.0
0126:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
103C:  MOVLB  1
103E:  DECFSZ x01,W
1040:  BRA    107A
....................    {if(estadoalarma==0) 
1042:  BTFSC  34.2
1044:  BRA    105E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1046:  MOVLW  02
1048:  MOVWF  x16
104A:  MOVFF  102,117
104E:  MOVLB  0
1050:  RCALL  09EC
1052:  MOVLW  2A
1054:  MOVWF  FF6
1056:  MOVLW  01
1058:  MOVWF  FF7
105A:  RCALL  0EEA
105C:  MOVLB  1
....................    if(estadoalarma==1) 
105E:  BTFSS  34.2
1060:  BRA    107A
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1062:  MOVLW  02
1064:  MOVWF  x16
1066:  MOVFF  102,117
106A:  MOVLB  0
106C:  RCALL  09EC
106E:  MOVLW  3E
1070:  MOVWF  FF6
1072:  MOVLW  01
1074:  MOVWF  FF7
1076:  RCALL  0EEA
1078:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
107A:  MOVF   x01,W
107C:  SUBLW  02
107E:  BNZ   1098
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
1080:  MOVLW  02
1082:  MOVWF  x16
1084:  MOVFF  102,117
1088:  MOVLB  0
108A:  RCALL  09EC
108C:  MOVLW  52
108E:  MOVWF  FF6
1090:  MOVLW  01
1092:  MOVWF  FF7
1094:  RCALL  0EEA
1096:  MOVLB  1
....................     
....................    if(x==3) 
1098:  MOVF   x01,W
109A:  SUBLW  03
109C:  BNZ   10B6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
109E:  MOVLW  02
10A0:  MOVWF  x16
10A2:  MOVFF  102,117
10A6:  MOVLB  0
10A8:  RCALL  09EC
10AA:  MOVLW  66
10AC:  MOVWF  FF6
10AE:  MOVLW  01
10B0:  MOVWF  FF7
10B2:  RCALL  0EEA
10B4:  MOVLB  1
....................     
....................    if(x==4) 
10B6:  MOVF   x01,W
10B8:  SUBLW  04
10BA:  BNZ   10D4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
10BC:  MOVLW  02
10BE:  MOVWF  x16
10C0:  MOVFF  102,117
10C4:  MOVLB  0
10C6:  RCALL  09EC
10C8:  MOVLW  7A
10CA:  MOVWF  FF6
10CC:  MOVLW  01
10CE:  MOVWF  FF7
10D0:  RCALL  0EEA
10D2:  MOVLB  1
....................     
....................    if(x==5) 
10D4:  MOVF   x01,W
10D6:  SUBLW  05
10D8:  BNZ   10F2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
10DA:  MOVLW  02
10DC:  MOVWF  x16
10DE:  MOVFF  102,117
10E2:  MOVLB  0
10E4:  RCALL  09EC
10E6:  MOVLW  8E
10E8:  MOVWF  FF6
10EA:  MOVLW  01
10EC:  MOVWF  FF7
10EE:  RCALL  0EEA
10F0:  MOVLB  1
....................     
....................    if(x==6) 
10F2:  MOVF   x01,W
10F4:  SUBLW  06
10F6:  BNZ   1110
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
10F8:  MOVLW  02
10FA:  MOVWF  x16
10FC:  MOVFF  102,117
1100:  MOVLB  0
1102:  RCALL  09EC
1104:  MOVLW  A2
1106:  MOVWF  FF6
1108:  MOVLW  01
110A:  MOVWF  FF7
110C:  RCALL  0EEA
110E:  MOVLB  1
....................     
....................    if(x==7) 
1110:  MOVF   x01,W
1112:  SUBLW  07
1114:  BNZ   112E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1116:  MOVLW  02
1118:  MOVWF  x16
111A:  MOVFF  102,117
111E:  MOVLB  0
1120:  RCALL  09EC
1122:  MOVLW  B6
1124:  MOVWF  FF6
1126:  MOVLW  01
1128:  MOVWF  FF7
112A:  RCALL  0EEA
112C:  MOVLB  1
....................     
....................    if(x==8) 
112E:  MOVF   x01,W
1130:  SUBLW  08
1132:  BNZ   114C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
1134:  MOVLW  02
1136:  MOVWF  x16
1138:  MOVFF  102,117
113C:  MOVLB  0
113E:  RCALL  09EC
1140:  MOVLW  CA
1142:  MOVWF  FF6
1144:  MOVLW  01
1146:  MOVWF  FF7
1148:  RCALL  0EEA
114A:  MOVLB  1
.................... } 
114C:  MOVLB  0
114E:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1648:  MOVFF  100,FBE
.................... } 
164C:  RETLW  00
....................  
.................... void main () 
.................... { 
164E:  CLRF   FF8
1650:  BCF    FD0.7
1652:  BSF    07.7
1654:  CLRF   FEA
1656:  CLRF   FE9
1658:  MOVLW  C8
165A:  MOVWF  17
165C:  MOVLW  09
165E:  MOVWF  18
1660:  MOVLW  02
1662:  MOVWF  19
1664:  MOVLW  0B
1666:  MOVWF  1A
1668:  MOVLW  02
166A:  MOVWF  1B
166C:  MOVLW  03
166E:  MOVWF  1C
1670:  MOVLW  02
1672:  MOVWF  1D
1674:  MOVWF  1E
1676:  MOVLW  04
1678:  MOVWF  1F
167A:  MOVLW  0A
167C:  MOVWF  20
167E:  CLRF   21
1680:  CLRF   22
1682:  CLRF   23
1684:  CLRF   24
1686:  CLRF   25
1688:  CLRF   26
168A:  CLRF   27
168C:  CLRF   28
168E:  MOVWF  29
1690:  CLRF   2A
1692:  MOVWF  2B
1694:  MOVWF  2C
1696:  MOVWF  2D
1698:  MOVWF  2E
169A:  CLRF   2F
169C:  CLRF   30
169E:  CLRF   31
16A0:  CLRF   32
16A2:  CLRF   33
16A4:  BCF    34.0
16A6:  BCF    34.1
16A8:  BCF    34.2
16AA:  BCF    34.3
16AC:  BCF    34.4
16AE:  BCF    34.5
16B0:  BCF    34.6
16B2:  BCF    34.7
16B4:  BCF    35.0
16B6:  BCF    35.1
16B8:  BCF    35.2
16BA:  CLRF   36
16BC:  CLRF   45
16BE:  CLRF   44
16C0:  CLRF   43
16C2:  CLRF   42
16C4:  CLRF   49
16C6:  CLRF   48
16C8:  CLRF   47
16CA:  CLRF   46
16CC:  CLRF   4D
16CE:  CLRF   4C
16D0:  MOVLW  4B
16D2:  MOVWF  4B
16D4:  MOVLW  86
16D6:  MOVWF  4A
16D8:  BCF    35.4
16DA:  BCF    35.5
16DC:  BCF    35.6
16DE:  BCF    35.7
16E0:  BCF    4E.0
16E2:  BCF    4E.1
16E4:  BCF    4E.2
16E6:  BCF    4E.3
16E8:  CLRF   50
16EA:  CLRF   4F
16EC:  CLRF   52
16EE:  CLRF   51
16F0:  CLRF   54
16F2:  CLRF   53
16F4:  CLRF   56
16F6:  CLRF   55
16F8:  CLRF   5A
16FA:  MOVLW  E0
16FC:  MOVWF  59
16FE:  MOVLW  5D
1700:  MOVWF  58
1702:  MOVLW  8A
1704:  MOVWF  57
1706:  CLRF   5E
1708:  MOVLW  C0
170A:  MOVWF  5D
170C:  MOVLW  28
170E:  MOVWF  5C
1710:  MOVLW  89
1712:  MOVWF  5B
1714:  MOVLW  33
1716:  MOVWF  x62
1718:  MOVLW  13
171A:  MOVWF  x61
171C:  MOVLW  15
171E:  MOVWF  x60
1720:  MOVLW  87
1722:  MOVWF  5F
1724:  CLRF   x66
1726:  CLRF   x65
1728:  CLRF   x64
172A:  CLRF   x63
172C:  CLRF   x6A
172E:  CLRF   x69
1730:  CLRF   x68
1732:  CLRF   x67
1734:  CLRF   x6E
1736:  CLRF   x6D
1738:  MOVLW  7A
173A:  MOVWF  x6C
173C:  MOVLW  88
173E:  MOVWF  x6B
1740:  CLRF   x72
1742:  CLRF   x71
1744:  CLRF   x70
1746:  CLRF   x6F
1748:  CLRF   x76
174A:  CLRF   x75
174C:  CLRF   x74
174E:  CLRF   x73
1750:  CLRF   x7A
1752:  CLRF   x79
1754:  CLRF   x78
1756:  CLRF   x77
1758:  MOVLW  19
175A:  MOVWF  x7E
175C:  MOVLW  53
175E:  MOVWF  x7D
1760:  MOVLW  18
1762:  MOVWF  x7C
1764:  MOVLW  68
1766:  MOVWF  x7B
1768:  MOVLW  E9
176A:  MOVWF  x82
176C:  MOVLW  BD
176E:  MOVWF  x81
1770:  MOVLW  C6
1772:  MOVWF  x80
1774:  MOVLW  71
1776:  MOVWF  x7F
1778:  MOVLW  BE
177A:  MOVWF  x86
177C:  MOVLW  96
177E:  MOVWF  x85
1780:  MOVLW  24
1782:  MOVWF  x84
1784:  MOVLW  7A
1786:  MOVWF  x83
1788:  MOVLW  F3
178A:  MOVWF  x8A
178C:  MOVLW  5A
178E:  MOVWF  x89
1790:  MOVLW  AB
1792:  MOVWF  x88
1794:  MOVLW  81
1796:  MOVWF  x87
1798:  CLRF   x8E
179A:  CLRF   x8D
179C:  CLRF   x8C
179E:  CLRF   x8B
17A0:  CLRF   x92
17A2:  CLRF   x91
17A4:  CLRF   x90
17A6:  CLRF   x8F
17A8:  CLRF   x96
17AA:  CLRF   x95
17AC:  CLRF   x94
17AE:  CLRF   x93
17B0:  CLRF   x9A
17B2:  CLRF   x99
17B4:  CLRF   x98
17B6:  CLRF   x97
17B8:  CLRF   x9E
17BA:  CLRF   x9D
17BC:  CLRF   x9C
17BE:  CLRF   x9B
17C0:  CLRF   xA2
17C2:  CLRF   xA1
17C4:  CLRF   xA0
17C6:  CLRF   x9F
17C8:  MOVLW  8B
17CA:  MOVWF  xA6
17CC:  MOVLW  FD
17CE:  MOVWF  xA5
17D0:  MOVLW  65
17D2:  MOVWF  xA4
17D4:  MOVLW  7C
17D6:  MOVWF  xA3
17D8:  CLRF   xAA
17DA:  CLRF   xA9
17DC:  CLRF   xA8
17DE:  CLRF   xA7
17E0:  CLRF   xAE
17E2:  CLRF   xAD
17E4:  CLRF   xAC
17E6:  CLRF   xAB
17E8:  CLRF   xB2
17EA:  CLRF   xB1
17EC:  CLRF   xB0
17EE:  CLRF   xAF
17F0:  CLRF   xB6
17F2:  CLRF   xB5
17F4:  CLRF   xB4
17F6:  CLRF   xB3
17F8:  CLRF   xBA
17FA:  CLRF   xB9
17FC:  CLRF   xB8
17FE:  CLRF   xB7
1800:  CLRF   xBE
1802:  CLRF   xBD
1804:  CLRF   xBC
1806:  CLRF   xBB
1808:  CLRF   xC2
180A:  CLRF   xC1
180C:  CLRF   xC0
180E:  MOVLW  7F
1810:  MOVWF  xBF
1812:  CLRF   xC6
1814:  CLRF   xC5
1816:  MOVLW  24
1818:  MOVWF  xC4
181A:  MOVLW  88
181C:  MOVWF  xC3
181E:  CLRF   xCA
1820:  CLRF   xC9
1822:  CLRF   xC8
1824:  CLRF   xC7
1826:  CLRF   xCE
1828:  CLRF   xCD
182A:  CLRF   xCC
182C:  CLRF   xCB
182E:  MOVF   FC1,W
1830:  ANDLW  C0
1832:  IORLW  0F
1834:  MOVWF  FC1
1836:  MOVLW  07
1838:  MOVWF  FB4
183A:  MOVLW  3E
183C:  MOVWF  37
183E:  MOVLW  20
1840:  MOVWF  38
1842:  MOVLW  5E
1844:  MOVWF  39
1846:  CLRF   3A
1848:  CLRF   3B
184A:  CLRF   3C
184C:  CLRF   3D
184E:  CLRF   3E
1850:  CLRF   3F
1852:  CLRF   40
1854:  CLRF   41
1856:  CLRF   xCF
1858:  CLRF   xD0
185A:  CLRF   xD1
185C:  CLRF   xD2
185E:  CLRF   xD3
1860:  CLRF   xD4
1862:  CLRF   xD5
1864:  CLRF   xD6
1866:  CLRF   xD7
1868:  CLRF   xD8
186A:  CLRF   xD9
186C:  CLRF   xDA
186E:  CLRF   xDB
1870:  CLRF   xDC
1872:  CLRF   xDD
1874:  CLRF   xDE
1876:  CLRF   xDF
1878:  CLRF   xE0
187A:  CLRF   xE1
187C:  CLRF   xE2
187E:  CLRF   xE3
1880:  CLRF   xE4
1882:  CLRF   xE5
1884:  CLRF   xE6
1886:  CLRF   xE7
1888:  CLRF   xE8
188A:  CLRF   xE9
188C:  CLRF   xEA
188E:  CLRF   xEB
1890:  CLRF   xEC
1892:  CLRF   xED
1894:  CLRF   xEE
1896:  CLRF   xEF
1898:  CLRF   xF0
189A:  CLRF   xF1
189C:  CLRF   xF2
189E:  CLRF   xF3
18A0:  CLRF   xF4
18A2:  CLRF   xF5
18A4:  CLRF   xF6
18A6:  CLRF   xF7
18A8:  CLRF   xF8
18AA:  CLRF   xF9
18AC:  CLRF   xFA
18AE:  CLRF   xFB
18B0:  CLRF   xFC
18B2:  CLRF   xFD
18B4:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
18B6:  MOVF   FC1,W
18B8:  ANDLW  C0
18BA:  IORLW  0B
18BC:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
18BE:  BCF    FC0.0
18C0:  BSF    FC0.1
18C2:  BCF    FC0.2
18C4:  BSF    FC0.7
18C6:  BSF    FC2.0
....................    output_d(0);  
18C8:  CLRF   F95
18CA:  CLRF   F8C
....................    ModoSleep=1; 
18CC:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
18CE:  MOVLW  85
18D0:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
18D2:  BSF    F9D.0
....................    //enable_interrupts(INT_EXT_L2H); 
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
18D4:  MOVLW  00
18D6:  IORLW  05
18D8:  MOVWF  FCA
18DA:  MOVLW  FF
18DC:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
18DE:  BCF    F94.2
18E0:  BCF    F8B.2
18E2:  BCF    F96.6
18E4:  MOVLW  0C
18E6:  MOVWF  FBD
18E8:  CLRF   FB7
18EA:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
18EC:  MOVLW  C0
18EE:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
18F0:  CLRF   FBE
....................    lcd_init(); 
18F2:  CALL   0980
....................    printf(lcd_putc,"\f"); 
18F6:  MOVLW  0C
18F8:  MOVLB  1
18FA:  MOVWF  x15
18FC:  MOVLB  0
18FE:  CALL   0A5E
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1902:  MOVFF  FF2,100
1906:  BCF    FF2.7
1908:  CLRF   FA9
190A:  BCF    FA6.6
190C:  BCF    FA6.7
190E:  BSF    FA6.0
1910:  MOVF   FA8,W
1912:  MOVLB  1
1914:  BTFSC  x00.7
1916:  BSF    FF2.7
1918:  MOVWF  3E
191A:  MOVLW  14
191C:  MOVWF  x1B
191E:  MOVLB  0
1920:  CALL   08E2
1924:  MOVFF  FF2,100
1928:  BCF    FF2.7
192A:  MOVLW  01
192C:  MOVWF  FA9
192E:  BCF    FA6.6
1930:  BCF    FA6.7
1932:  BSF    FA6.0
1934:  MOVF   FA8,W
1936:  MOVLB  1
1938:  BTFSC  x00.7
193A:  BSF    FF2.7
193C:  MOVWF  3F
193E:  MOVLW  14
1940:  MOVWF  x1B
1942:  MOVLB  0
1944:  CALL   08E2
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1948:  MOVFF  FF2,100
194C:  BCF    FF2.7
194E:  MOVLW  02
1950:  MOVWF  FA9
1952:  BCF    FA6.6
1954:  BCF    FA6.7
1956:  BSF    FA6.0
1958:  MOVF   FA8,W
195A:  MOVLB  1
195C:  BTFSC  x00.7
195E:  BSF    FF2.7
1960:  MOVWF  40
1962:  MOVLW  14
1964:  MOVWF  x1B
1966:  MOVLB  0
1968:  CALL   08E2
196C:  MOVFF  FF2,100
1970:  BCF    FF2.7
1972:  MOVLW  03
1974:  MOVWF  FA9
1976:  BCF    FA6.6
1978:  BCF    FA6.7
197A:  BSF    FA6.0
197C:  MOVF   FA8,W
197E:  MOVLB  1
1980:  BTFSC  x00.7
1982:  BSF    FF2.7
1984:  MOVWF  41
1986:  MOVLW  14
1988:  MOVWF  x1B
198A:  MOVLB  0
198C:  CALL   08E2
....................    estadoalarma=read_eeprom(5); 
1990:  MOVFF  FF2,100
1994:  BCF    FF2.7
1996:  MOVLW  05
1998:  MOVWF  FA9
199A:  BCF    FA6.6
199C:  BCF    FA6.7
199E:  BSF    FA6.0
19A0:  MOVF   FA8,W
19A2:  MOVLB  1
19A4:  BTFSC  x00.7
19A6:  BSF    FF2.7
19A8:  MOVWF  01
19AA:  BCF    34.2
19AC:  BTFSC  01.0
19AE:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
19B0:  MOVFF  FF2,100
19B4:  BCF    FF2.7
19B6:  MOVLW  0A
19B8:  MOVWF  FA9
19BA:  BCF    FA6.6
19BC:  BCF    FA6.7
19BE:  BSF    FA6.0
19C0:  MOVF   FA8,W
19C2:  BTFSC  x00.7
19C4:  BSF    FF2.7
19C6:  MOVWF  2D
19C8:  MOVFF  FF2,100
19CC:  BCF    FF2.7
19CE:  MOVLW  0B
19D0:  MOVWF  FA9
19D2:  BCF    FA6.6
19D4:  BCF    FA6.7
19D6:  BSF    FA6.0
19D8:  MOVF   FA8,W
19DA:  BTFSC  x00.7
19DC:  BSF    FF2.7
19DE:  MOVWF  2C
19E0:  MOVFF  FF2,100
19E4:  BCF    FF2.7
19E6:  MOVLW  0C
19E8:  MOVWF  FA9
19EA:  BCF    FA6.6
19EC:  BCF    FA6.7
19EE:  BSF    FA6.0
19F0:  MOVF   FA8,W
19F2:  BTFSC  x00.7
19F4:  BSF    FF2.7
19F6:  MOVWF  2E
19F8:  MOVFF  FF2,100
19FC:  BCF    FF2.7
19FE:  MOVLW  0D
1A00:  MOVWF  FA9
1A02:  BCF    FA6.6
1A04:  BCF    FA6.7
1A06:  BSF    FA6.0
1A08:  MOVF   FA8,W
1A0A:  BTFSC  x00.7
1A0C:  BSF    FF2.7
1A0E:  MOVWF  2F
1A10:  MOVFF  2F,29
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
1A14:  MOVFF  FF2,100
1A18:  BCF    FF2.7
1A1A:  MOVLW  19
1A1C:  MOVWF  FA9
1A1E:  BCF    FA6.6
1A20:  BCF    FA6.7
1A22:  BSF    FA6.0
1A24:  MOVF   FA8,W
1A26:  BTFSC  x00.7
1A28:  BSF    FF2.7
1A2A:  MOVWF  21
....................    Temporal=read_eeprom(26); 
1A2C:  MOVFF  FF2,100
1A30:  BCF    FF2.7
1A32:  MOVLW  1A
1A34:  MOVWF  FA9
1A36:  BCF    FA6.6
1A38:  BCF    FA6.7
1A3A:  BSF    FA6.0
1A3C:  MOVF   FA8,W
1A3E:  BTFSC  x00.7
1A40:  BSF    FF2.7
1A42:  CLRF   x0A
1A44:  MOVWF  x09
1A46:  MOVLB  0
1A48:  CALL   0ACA
1A4C:  MOVFF  03,AA
1A50:  MOVFF  02,A9
1A54:  MOVFF  01,A8
1A58:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1A5C:  MOVFF  AA,107
1A60:  MOVFF  A9,106
1A64:  MOVFF  A8,105
1A68:  MOVFF  A7,104
1A6C:  MOVLB  1
1A6E:  CLRF   x0B
1A70:  CLRF   x0A
1A72:  MOVLW  48
1A74:  MOVWF  x09
1A76:  MOVLW  85
1A78:  MOVWF  x08
1A7A:  MOVLB  0
1A7C:  CALL   0B00
1A80:  MOVFF  03,AA
1A84:  MOVFF  02,A9
1A88:  MOVFF  01,A8
1A8C:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
1A90:  MOVLB  1
1A92:  CLRF   x0A
1A94:  MOVFF  21,109
1A98:  MOVLB  0
1A9A:  CALL   0ACA
1A9E:  BCF    FD8.1
1AA0:  MOVFF  03,105
1AA4:  MOVFF  02,104
1AA8:  MOVFF  01,103
1AAC:  MOVFF  00,102
1AB0:  MOVFF  AA,109
1AB4:  MOVFF  A9,108
1AB8:  MOVFF  A8,107
1ABC:  MOVFF  A7,106
1AC0:  CALL   0C5E
1AC4:  MOVFF  03,C2
1AC8:  MOVFF  02,C1
1ACC:  MOVFF  01,C0
1AD0:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
1AD4:  MOVFF  FF2,100
1AD8:  BCF    FF2.7
1ADA:  MOVLW  28
1ADC:  MOVWF  FA9
1ADE:  BCF    FA6.6
1AE0:  BCF    FA6.7
1AE2:  BSF    FA6.0
1AE4:  MOVF   FA8,W
1AE6:  MOVLB  1
1AE8:  BTFSC  x00.7
1AEA:  BSF    FF2.7
1AEC:  MOVWF  21
....................    Temporal=read_eeprom(41); 
1AEE:  MOVFF  FF2,100
1AF2:  BCF    FF2.7
1AF4:  MOVLW  29
1AF6:  MOVWF  FA9
1AF8:  BCF    FA6.6
1AFA:  BCF    FA6.7
1AFC:  BSF    FA6.0
1AFE:  MOVF   FA8,W
1B00:  BTFSC  x00.7
1B02:  BSF    FF2.7
1B04:  CLRF   x0A
1B06:  MOVWF  x09
1B08:  MOVLB  0
1B0A:  CALL   0ACA
1B0E:  MOVFF  03,AA
1B12:  MOVFF  02,A9
1B16:  MOVFF  01,A8
1B1A:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1B1E:  MOVFF  AA,107
1B22:  MOVFF  A9,106
1B26:  MOVFF  A8,105
1B2A:  MOVFF  A7,104
1B2E:  MOVLB  1
1B30:  CLRF   x0B
1B32:  CLRF   x0A
1B34:  MOVLW  48
1B36:  MOVWF  x09
1B38:  MOVLW  85
1B3A:  MOVWF  x08
1B3C:  MOVLB  0
1B3E:  CALL   0B00
1B42:  MOVFF  03,AA
1B46:  MOVFF  02,A9
1B4A:  MOVFF  01,A8
1B4E:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
1B52:  MOVLB  1
1B54:  CLRF   x0A
1B56:  MOVFF  21,109
1B5A:  MOVLB  0
1B5C:  CALL   0ACA
1B60:  BCF    FD8.1
1B62:  MOVFF  03,105
1B66:  MOVFF  02,104
1B6A:  MOVFF  01,103
1B6E:  MOVFF  00,102
1B72:  MOVFF  AA,109
1B76:  MOVFF  A9,108
1B7A:  MOVFF  A8,107
1B7E:  MOVFF  A7,106
1B82:  CALL   0C5E
1B86:  MOVFF  03,45
1B8A:  MOVFF  02,44
1B8E:  MOVFF  01,43
1B92:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1B96:  MOVFF  FF2,100
1B9A:  BCF    FF2.7
1B9C:  MOVLW  3C
1B9E:  MOVWF  FA9
1BA0:  BCF    FA6.6
1BA2:  BCF    FA6.7
1BA4:  BSF    FA6.0
1BA6:  MOVF   FA8,W
1BA8:  MOVLB  1
1BAA:  BTFSC  x00.7
1BAC:  BSF    FF2.7
1BAE:  MOVWF  24
....................    Temporal1=read_eeprom(61); 
1BB0:  MOVFF  FF2,100
1BB4:  BCF    FF2.7
1BB6:  MOVLW  3D
1BB8:  MOVWF  FA9
1BBA:  BCF    FA6.6
1BBC:  BCF    FA6.7
1BBE:  BSF    FA6.0
1BC0:  MOVF   FA8,W
1BC2:  BTFSC  x00.7
1BC4:  BSF    FF2.7
1BC6:  CLRF   x0A
1BC8:  MOVWF  x09
1BCA:  MOVLB  0
1BCC:  CALL   0ACA
1BD0:  MOVFF  03,B6
1BD4:  MOVFF  02,B5
1BD8:  MOVFF  01,B4
1BDC:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
1BE0:  MOVFF  B6,107
1BE4:  MOVFF  B5,106
1BE8:  MOVFF  B4,105
1BEC:  MOVFF  B3,104
1BF0:  MOVLB  1
1BF2:  CLRF   x0B
1BF4:  CLRF   x0A
1BF6:  MOVLW  48
1BF8:  MOVWF  x09
1BFA:  MOVLW  85
1BFC:  MOVWF  x08
1BFE:  MOVLB  0
1C00:  CALL   0B00
1C04:  MOVFF  03,B6
1C08:  MOVFF  02,B5
1C0C:  MOVFF  01,B4
1C10:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
1C14:  MOVLB  1
1C16:  CLRF   x0A
1C18:  MOVFF  24,109
1C1C:  MOVLB  0
1C1E:  CALL   0ACA
1C22:  BCF    FD8.1
1C24:  MOVFF  03,105
1C28:  MOVFF  02,104
1C2C:  MOVFF  01,103
1C30:  MOVFF  00,102
1C34:  MOVFF  B6,109
1C38:  MOVFF  B5,108
1C3C:  MOVFF  B4,107
1C40:  MOVFF  B3,106
1C44:  CALL   0C5E
1C48:  MOVFF  03,BE
1C4C:  MOVFF  02,BD
1C50:  MOVFF  01,BC
1C54:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
1C58:  MOVFF  FF2,100
1C5C:  BCF    FF2.7
1C5E:  MOVLW  32
1C60:  MOVWF  FA9
1C62:  BCF    FA6.6
1C64:  BCF    FA6.7
1C66:  BSF    FA6.0
1C68:  MOVF   FA8,W
1C6A:  MOVLB  1
1C6C:  BTFSC  x00.7
1C6E:  BSF    FF2.7
1C70:  MOVWF  2B
....................  
....................    MediaMovil=read_eeprom(42); 
1C72:  MOVFF  FF2,100
1C76:  BCF    FF2.7
1C78:  MOVLW  2A
1C7A:  MOVWF  FA9
1C7C:  BCF    FA6.6
1C7E:  BCF    FA6.7
1C80:  BSF    FA6.0
1C82:  MOVF   FA8,W
1C84:  BTFSC  x00.7
1C86:  BSF    FF2.7
1C88:  MOVWF  2A
....................    if(MediaMovil>12) 
1C8A:  MOVF   2A,W
1C8C:  SUBLW  0C
1C8E:  BC    1C94
....................    {MediaMovil=12;} 
1C90:  MOVLW  0C
1C92:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
1C94:  MOVF   2A,F
1C96:  BNZ   1C9C
....................    {MediaMovil=1;} 
1C98:  MOVLW  01
1C9A:  MOVWF  2A
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
1C9C:  MOVFF  FF2,100
1CA0:  BCF    FF2.7
1CA2:  MOVLW  46
1CA4:  MOVWF  FA9
1CA6:  BCF    FA6.6
1CA8:  BCF    FA6.7
1CAA:  BSF    FA6.0
1CAC:  MOVF   FA8,W
1CAE:  BTFSC  x00.7
1CB0:  BSF    FF2.7
1CB2:  MOVWF  30
1CB4:  MOVFF  FF2,100
1CB8:  BCF    FF2.7
1CBA:  MOVLW  47
1CBC:  MOVWF  FA9
1CBE:  BCF    FA6.6
1CC0:  BCF    FA6.7
1CC2:  BSF    FA6.0
1CC4:  MOVF   FA8,W
1CC6:  BTFSC  x00.7
1CC8:  BSF    FF2.7
1CCA:  MOVWF  31
1CCC:  MOVFF  FF2,100
1CD0:  BCF    FF2.7
1CD2:  MOVLW  48
1CD4:  MOVWF  FA9
1CD6:  BCF    FA6.6
1CD8:  BCF    FA6.7
1CDA:  BSF    FA6.0
1CDC:  MOVF   FA8,W
1CDE:  BTFSC  x00.7
1CE0:  BSF    FF2.7
1CE2:  MOVWF  32
1CE4:  MOVFF  FF2,100
1CE8:  BCF    FF2.7
1CEA:  MOVLW  49
1CEC:  MOVWF  FA9
1CEE:  BCF    FA6.6
1CF0:  BCF    FA6.7
1CF2:  BSF    FA6.0
1CF4:  MOVF   FA8,W
1CF6:  BTFSC  x00.7
1CF8:  BSF    FF2.7
1CFA:  MOVWF  01
1CFC:  BCF    35.2
1CFE:  BTFSC  01.0
1D00:  BSF    35.2
....................    Menu=200; 
1D02:  MOVLW  C8
1D04:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
1D06:  MOVF   17,W
1D08:  SUBLW  C8
1D0A:  BNZ   1DF0
....................       intensidadpantalla(0); 
1D0C:  CLRF   x00
1D0E:  MOVLB  0
1D10:  CALL   0ED6
....................       if(inicio==0) 
1D14:  BTFSC  35.4
1D16:  BRA    1DEC
....................       { 
....................       delay_ms(500); 
1D18:  MOVLW  02
1D1A:  MOVLB  1
1D1C:  MOVWF  x00
1D1E:  MOVLW  FA
1D20:  MOVWF  x1B
1D22:  MOVLB  0
1D24:  CALL   08E2
1D28:  MOVLB  1
1D2A:  DECFSZ x00,F
1D2C:  BRA    1D1E
....................          if(input(PIN_B0)) 
1D2E:  BSF    F93.0
1D30:  BTFSS  F81.0
1D32:  BRA    1DEC
....................          { 
....................             lcd_init(); 
1D34:  MOVLB  0
1D36:  CALL   0980
....................             intensidadpantalla(contraste); 
1D3A:  MOVFF  20,100
1D3E:  CALL   0ED6
....................             lcd_gotoxy(1,1); 
1D42:  MOVLW  01
1D44:  MOVLB  1
1D46:  MOVWF  x16
1D48:  MOVWF  x17
1D4A:  MOVLB  0
1D4C:  CALL   09EC
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
1D50:  MOVLW  DE
1D52:  MOVWF  FF6
1D54:  MOVLW  01
1D56:  MOVWF  FF7
1D58:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
1D5C:  MOVLW  01
1D5E:  MOVLB  1
1D60:  MOVWF  x16
1D62:  MOVLW  02
1D64:  MOVWF  x17
1D66:  MOVLB  0
1D68:  CALL   09EC
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1D6C:  MOVLW  F4
1D6E:  MOVWF  FF6
1D70:  MOVLW  01
1D72:  MOVWF  FF7
1D74:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
1D78:  MOVLW  01
1D7A:  MOVLB  1
1D7C:  MOVWF  x16
1D7E:  MOVLW  03
1D80:  MOVWF  x17
1D82:  MOVLB  0
1D84:  CALL   09EC
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
1D88:  MOVLW  0A
1D8A:  MOVWF  FF6
1D8C:  MOVLW  02
1D8E:  MOVWF  FF7
1D90:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
1D94:  MOVLW  01
1D96:  MOVLB  1
1D98:  MOVWF  x16
1D9A:  MOVLW  04
1D9C:  MOVWF  x17
1D9E:  MOVLB  0
1DA0:  CALL   09EC
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1DA4:  MOVLW  20
1DA6:  MOVWF  FF6
1DA8:  MOVLW  02
1DAA:  MOVWF  FF7
1DAC:  CALL   0EEA
....................             delay_ms(2000); 
1DB0:  MOVLW  08
1DB2:  MOVLB  1
1DB4:  MOVWF  x00
1DB6:  MOVLW  FA
1DB8:  MOVWF  x1B
1DBA:  MOVLB  0
1DBC:  CALL   08E2
1DC0:  MOVLB  1
1DC2:  DECFSZ x00,F
1DC4:  BRA    1DB6
....................             printf(lcd_putc,"\f"); 
1DC6:  MOVLW  0C
1DC8:  MOVWF  x15
1DCA:  MOVLB  0
1DCC:  CALL   0A5E
....................             inicio=1; 
1DD0:  BSF    35.4
....................             Menu=0; 
1DD2:  CLRF   17
....................             ModoSleep=0; 
1DD4:  BCF    35.3
....................             delay_ms(500); 
1DD6:  MOVLW  02
1DD8:  MOVLB  1
1DDA:  MOVWF  x00
1DDC:  MOVLW  FA
1DDE:  MOVWF  x1B
1DE0:  MOVLB  0
1DE2:  CALL   08E2
1DE6:  MOVLB  1
1DE8:  DECFSZ x00,F
1DEA:  BRA    1DDC
....................          } 
....................       } 
....................    } 
1DEC:  MOVLB  1
1DEE:  BRA    1D06
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1DF0:  MOVF   17,F
1DF2:  BTFSS  FD8.2
1DF4:  BRA    2254
....................    flag_latencia=1;set_pwm1_duty(0); 
1DF6:  BSF    35.0
1DF8:  CLRF   FBE
....................       if(Latencia==1) 
1DFA:  BTFSS  35.1
1DFC:  BRA    1E0C
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1DFE:  MOVLW  0C
1E00:  MOVWF  x15
1E02:  MOVLB  0
1E04:  CALL   0A5E
1E08:  RESET
1E0A:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
1E0C:  MOVLW  01
1E0E:  MOVWF  x16
1E10:  MOVWF  x17
1E12:  MOVLB  0
1E14:  CALL   09EC
....................    printf(lcd_putc,"     Ingrese        "); 
1E18:  MOVLW  36
1E1A:  MOVWF  FF6
1E1C:  MOVLW  02
1E1E:  MOVWF  FF7
1E20:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
1E24:  MOVLW  01
1E26:  MOVLB  1
1E28:  MOVWF  x16
1E2A:  MOVLW  02
1E2C:  MOVWF  x17
1E2E:  MOVLB  0
1E30:  CALL   09EC
....................    printf(lcd_putc,"    Contraseña      "); 
1E34:  MOVLW  4C
1E36:  MOVWF  FF6
1E38:  MOVLW  02
1E3A:  MOVWF  FF7
1E3C:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
1E40:  MOVLW  01
1E42:  MOVLB  1
1E44:  MOVWF  x16
1E46:  MOVLW  03
1E48:  MOVWF  x17
1E4A:  MOVLB  0
1E4C:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1E50:  MOVLW  62
1E52:  MOVWF  FF6
1E54:  MOVLW  02
1E56:  MOVWF  FF7
1E58:  MOVLW  0A
1E5A:  MOVLB  1
1E5C:  MOVWF  x08
1E5E:  MOVLB  0
1E60:  CALL   0F0A
1E64:  MOVFF  3A,100
1E68:  MOVLW  1F
1E6A:  MOVLB  1
1E6C:  MOVWF  x01
1E6E:  MOVLB  0
1E70:  CALL   0F5E
1E74:  MOVFF  3B,100
1E78:  MOVLW  1F
1E7A:  MOVLB  1
1E7C:  MOVWF  x01
1E7E:  MOVLB  0
1E80:  CALL   0F5E
1E84:  MOVFF  3C,100
1E88:  MOVLW  1F
1E8A:  MOVLB  1
1E8C:  MOVWF  x01
1E8E:  MOVLB  0
1E90:  CALL   0F5E
1E94:  MOVFF  3D,100
1E98:  MOVLW  1F
1E9A:  MOVLB  1
1E9C:  MOVWF  x01
1E9E:  MOVLB  0
1EA0:  CALL   0F5E
1EA4:  MOVLW  20
1EA6:  MOVLB  1
1EA8:  MOVWF  x15
1EAA:  MOVLB  0
1EAC:  CALL   0A5E
1EB0:  MOVLW  20
1EB2:  MOVLB  1
1EB4:  MOVWF  x15
1EB6:  MOVLB  0
1EB8:  CALL   0A5E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1EBC:  BSF    F93.3
1EBE:  BTFSS  F81.3
1EC0:  BRA    1EEC
....................       {  if(Flanco == 0)  
1EC2:  BTFSC  34.4
1EC4:  BRA    1EEA
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
1EC6:  MOVLW  0B
1EC8:  SUBWF  1A,W
1ECA:  CLRF   03
1ECC:  ADDLW  3A
1ECE:  MOVWF  FE9
1ED0:  MOVLW  00
1ED2:  ADDWFC 03,W
1ED4:  MOVWF  FEA
1ED6:  INCF   FEF,F
1ED8:  BSF    34.4
1EDA:  MOVLW  1E
1EDC:  MOVLB  1
1EDE:  MOVWF  x1B
1EE0:  MOVLB  0
1EE2:  CALL   08E2
1EE6:  CLRF   52
1EE8:  CLRF   51
....................          else 
1EEA:  BRA    1EEE
....................             {Flanco = 0;} 
1EEC:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1EEE:  BSF    F93.2
1EF0:  BTFSS  F81.2
1EF2:  BRA    1F1E
....................       {  if(Flanco2 == 0)  
1EF4:  BTFSC  34.6
1EF6:  BRA    1F1C
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
1EF8:  MOVLW  0B
1EFA:  SUBWF  1A,W
1EFC:  CLRF   03
1EFE:  ADDLW  3A
1F00:  MOVWF  FE9
1F02:  MOVLW  00
1F04:  ADDWFC 03,W
1F06:  MOVWF  FEA
1F08:  DECF   FEF,F
1F0A:  BSF    34.6
1F0C:  MOVLW  1E
1F0E:  MOVLB  1
1F10:  MOVWF  x1B
1F12:  MOVLB  0
1F14:  CALL   08E2
1F18:  CLRF   52
1F1A:  CLRF   51
....................          else 
1F1C:  BRA    1F20
....................             {Flanco2 = 0;} 
1F1E:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1F20:  BSF    F93.0
1F22:  BTFSS  F81.0
1F24:  BRA    1F4C
....................       {  if(Flanco1 == 0)  
1F26:  BTFSC  34.5
1F28:  BRA    1F4A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F2A:  BSF    34.5
1F2C:  INCF   1A,F
1F2E:  MOVLW  1E
1F30:  MOVLB  1
1F32:  MOVWF  x1B
1F34:  MOVLB  0
1F36:  CALL   08E2
1F3A:  MOVLW  0C
1F3C:  MOVLB  1
1F3E:  MOVWF  x15
1F40:  MOVLB  0
1F42:  CALL   0A5E
1F46:  CLRF   52
1F48:  CLRF   51
....................          else 
1F4A:  BRA    1F4E
....................             {Flanco1 = 0;}    
1F4C:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
1F4E:  BSF    F93.1
1F50:  BTFSS  F81.1
1F52:  BRA    1F7A
....................       {  if(Flanco3 == 0)  
1F54:  BTFSC  34.7
1F56:  BRA    1F78
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F58:  BSF    34.7
1F5A:  DECF   1A,F
1F5C:  MOVLW  1E
1F5E:  MOVLB  1
1F60:  MOVWF  x1B
1F62:  MOVLB  0
1F64:  CALL   08E2
1F68:  MOVLW  0C
1F6A:  MOVLB  1
1F6C:  MOVWF  x15
1F6E:  MOVLB  0
1F70:  CALL   0A5E
1F74:  CLRF   52
1F76:  CLRF   51
....................          else 
1F78:  BRA    1F7C
....................             {Flanco3 = 0;}     
1F7A:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1F7C:  MOVLW  0B
1F7E:  SUBWF  1A,W
1F80:  CLRF   03
1F82:  ADDLW  3A
1F84:  MOVWF  FE9
1F86:  MOVLW  00
1F88:  ADDWFC 03,W
1F8A:  MOVWF  FEA
1F8C:  BTFSC  FEF.7
1F8E:  BRA    1F92
1F90:  BRA    1FA6
....................        {clave[unidad-11]=9;} 
1F92:  MOVLW  0B
1F94:  SUBWF  1A,W
1F96:  CLRF   03
1F98:  ADDLW  3A
1F9A:  MOVWF  FE9
1F9C:  MOVLW  00
1F9E:  ADDWFC 03,W
1FA0:  MOVWF  FEA
1FA2:  MOVLW  09
1FA4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1FA6:  MOVLW  0B
1FA8:  SUBWF  1A,W
1FAA:  CLRF   03
1FAC:  ADDLW  3A
1FAE:  MOVWF  FE9
1FB0:  MOVLW  00
1FB2:  ADDWFC 03,W
1FB4:  MOVWF  FEA
1FB6:  BTFSC  FEF.7
1FB8:  BRA    1FD2
1FBA:  MOVF   FEF,W
1FBC:  SUBLW  09
1FBE:  BC    1FD2
....................        {clave[unidad-11]=0;} 
1FC0:  MOVLW  0B
1FC2:  SUBWF  1A,W
1FC4:  CLRF   03
1FC6:  ADDLW  3A
1FC8:  MOVWF  FE9
1FCA:  MOVLW  00
1FCC:  ADDWFC 03,W
1FCE:  MOVWF  FEA
1FD0:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1FD2:  MOVF   1A,W
1FD4:  SUBLW  0A
1FD6:  BNC   1FDC
....................        {unidad=11;} 
1FD8:  MOVLW  0B
1FDA:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1FDC:  MOVFF  1A,116
1FE0:  MOVLW  04
1FE2:  MOVLB  1
1FE4:  MOVWF  x17
1FE6:  MOVLB  0
1FE8:  CALL   09EC
....................        lcd_putc(t[2]); 
1FEC:  MOVFF  39,115
1FF0:  CALL   0A5E
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1FF4:  MOVF   1A,W
1FF6:  SUBLW  0E
1FF8:  BTFSC  FD8.0
1FFA:  BRA    2228
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1FFC:  MOVF   3A,W
1FFE:  SUBLW  03
2000:  BNZ   20E4
2002:  MOVF   3B,W
2004:  SUBLW  08
2006:  BNZ   20E4
2008:  MOVF   3C,W
200A:  SUBLW  09
200C:  BNZ   20E4
200E:  MOVF   3D,W
2010:  SUBLW  02
2012:  BNZ   20E4
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2014:  CLRF   FA9
2016:  CLRF   FA8
2018:  BCF    FA6.6
201A:  BCF    FA6.7
201C:  BSF    FA6.2
201E:  MOVF   FF2,W
2020:  MOVWF  00
2022:  BCF    FF2.7
2024:  MOVLB  F
2026:  MOVLW  55
2028:  MOVWF  FA7
202A:  MOVLW  AA
202C:  MOVWF  FA7
202E:  BSF    FA6.1
2030:  BTFSC  FA6.1
2032:  BRA    2030
2034:  BCF    FA6.2
2036:  MOVF   00,W
2038:  IORWF  FF2,F
203A:  MOVLW  14
203C:  MOVLB  1
203E:  MOVWF  x1B
2040:  MOVLB  0
2042:  CALL   08E2
2046:  MOVLW  01
2048:  MOVWF  FA9
204A:  CLRF   FA8
204C:  BCF    FA6.6
204E:  BCF    FA6.7
2050:  BSF    FA6.2
2052:  MOVF   FF2,W
2054:  MOVWF  00
2056:  BCF    FF2.7
2058:  MOVLB  F
205A:  MOVLW  55
205C:  MOVWF  FA7
205E:  MOVLW  AA
2060:  MOVWF  FA7
2062:  BSF    FA6.1
2064:  BTFSC  FA6.1
2066:  BRA    2064
2068:  BCF    FA6.2
206A:  MOVF   00,W
206C:  IORWF  FF2,F
206E:  MOVLW  14
2070:  MOVLB  1
2072:  MOVWF  x1B
2074:  MOVLB  0
2076:  CALL   08E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
207A:  MOVLW  02
207C:  MOVWF  FA9
207E:  CLRF   FA8
2080:  BCF    FA6.6
2082:  BCF    FA6.7
2084:  BSF    FA6.2
2086:  MOVF   FF2,W
2088:  MOVWF  00
208A:  BCF    FF2.7
208C:  MOVLB  F
208E:  MOVLW  55
2090:  MOVWF  FA7
2092:  MOVLW  AA
2094:  MOVWF  FA7
2096:  BSF    FA6.1
2098:  BTFSC  FA6.1
209A:  BRA    2098
209C:  BCF    FA6.2
209E:  MOVF   00,W
20A0:  IORWF  FF2,F
20A2:  MOVLW  14
20A4:  MOVLB  1
20A6:  MOVWF  x1B
20A8:  MOVLB  0
20AA:  CALL   08E2
20AE:  MOVLW  03
20B0:  MOVWF  FA9
20B2:  CLRF   FA8
20B4:  BCF    FA6.6
20B6:  BCF    FA6.7
20B8:  BSF    FA6.2
20BA:  MOVF   FF2,W
20BC:  MOVWF  00
20BE:  BCF    FF2.7
20C0:  MOVLB  F
20C2:  MOVLW  55
20C4:  MOVWF  FA7
20C6:  MOVLW  AA
20C8:  MOVWF  FA7
20CA:  BSF    FA6.1
20CC:  BTFSC  FA6.1
20CE:  BRA    20CC
20D0:  BCF    FA6.2
20D2:  MOVF   00,W
20D4:  IORWF  FF2,F
20D6:  MOVLW  14
20D8:  MOVLB  1
20DA:  MOVWF  x1B
20DC:  MOVLB  0
20DE:  CALL   08E2
....................              reset_cpu();} 
20E2:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
20E4:  MOVF   3E,W
20E6:  SUBWF  3A,W
20E8:  BNZ   21A2
20EA:  MOVF   3F,W
20EC:  SUBWF  3B,W
20EE:  BNZ   21A2
20F0:  MOVF   40,W
20F2:  SUBWF  3C,W
20F4:  BNZ   21A2
20F6:  MOVF   41,W
20F8:  SUBWF  3D,W
20FA:  BNZ   21A2
....................             {lcd_gotoxy(1,1); 
20FC:  MOVLW  01
20FE:  MOVLB  1
2100:  MOVWF  x16
2102:  MOVWF  x17
2104:  MOVLB  0
2106:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
210A:  MOVLW  78
210C:  MOVWF  FF6
210E:  MOVLW  02
2110:  MOVWF  FF7
2112:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
2116:  MOVLW  01
2118:  MOVLB  1
211A:  MOVWF  x16
211C:  MOVLW  02
211E:  MOVWF  x17
2120:  MOVLB  0
2122:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña    "); 
2126:  MOVLW  8C
2128:  MOVWF  FF6
212A:  MOVLW  02
212C:  MOVWF  FF7
212E:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2132:  MOVLW  01
2134:  MOVLB  1
2136:  MOVWF  x16
2138:  MOVLW  03
213A:  MOVWF  x17
213C:  MOVLB  0
213E:  CALL   09EC
....................             printf(lcd_putc,"      Correcta     "); 
2142:  MOVLW  A0
2144:  MOVWF  FF6
2146:  MOVLW  02
2148:  MOVWF  FF7
214A:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
214E:  MOVLW  01
2150:  MOVLB  1
2152:  MOVWF  x16
2154:  MOVLW  04
2156:  MOVWF  x17
2158:  MOVLB  0
215A:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
215E:  MOVLW  B4
2160:  MOVWF  FF6
2162:  MOVLW  02
2164:  MOVWF  FF7
2166:  CALL   0EEA
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
216A:  MOVLW  02
216C:  MOVLB  1
216E:  MOVWF  x00
2170:  MOVLW  FA
2172:  MOVWF  x1B
2174:  MOVLB  0
2176:  CALL   08E2
217A:  MOVLB  1
217C:  DECFSZ x00,F
217E:  BRA    2170
2180:  MOVLW  14
2182:  MOVWF  17
2184:  MOVLW  0B
2186:  MOVWF  1A
2188:  MOVLW  0C
218A:  MOVWF  x15
218C:  MOVLB  0
218E:  CALL   0A5E
2192:  BSF    F8A.7
2194:  BCF    F93.7
2196:  BCF    35.0
2198:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
219A:  CLRF   52
219C:  CLRF   51
219E:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
21A0:  BRA    2228
....................          {lcd_gotoxy(1,1); 
21A2:  MOVLW  01
21A4:  MOVLB  1
21A6:  MOVWF  x16
21A8:  MOVWF  x17
21AA:  MOVLB  0
21AC:  CALL   09EC
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
21B0:  MOVLW  01
21B2:  MOVLB  1
21B4:  MOVWF  x16
21B6:  MOVLW  02
21B8:  MOVWF  x17
21BA:  MOVLB  0
21BC:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña    "); 
21C0:  MOVLW  C8
21C2:  MOVWF  FF6
21C4:  MOVLW  02
21C6:  MOVWF  FF7
21C8:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
21CC:  MOVLW  01
21CE:  MOVLB  1
21D0:  MOVWF  x16
21D2:  MOVLW  03
21D4:  MOVWF  x17
21D6:  MOVLB  0
21D8:  CALL   09EC
....................             printf(lcd_putc,"     Incorrecta    "); 
21DC:  MOVLW  DC
21DE:  MOVWF  FF6
21E0:  MOVLW  02
21E2:  MOVWF  FF7
21E4:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
21E8:  MOVLW  01
21EA:  MOVLB  1
21EC:  MOVWF  x16
21EE:  MOVLW  04
21F0:  MOVWF  x17
21F2:  MOVLB  0
21F4:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
21F8:  MOVLW  F0
21FA:  MOVWF  FF6
21FC:  MOVLW  02
21FE:  MOVWF  FF7
2200:  CALL   0EEA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2204:  MOVLW  02
2206:  MOVLB  1
2208:  MOVWF  x00
220A:  MOVLW  FA
220C:  MOVWF  x1B
220E:  MOVLB  0
2210:  CALL   08E2
2214:  MOVLB  1
2216:  DECFSZ x00,F
2218:  BRA    220A
221A:  MOVLW  0B
221C:  MOVWF  1A
221E:  MOVLW  0C
2220:  MOVWF  x15
2222:  MOVLB  0
2224:  CALL   0A5E
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
2228:  MOVF   1A,W
222A:  SUBLW  0B
222C:  BC    2250
222E:  MOVF   1A,W
2230:  SUBLW  0D
2232:  BNC   2250
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2234:  MOVLW  01
2236:  SUBWF  1A,W
2238:  MOVLB  1
223A:  MOVWF  x00
223C:  MOVWF  x16
223E:  MOVLW  04
2240:  MOVWF  x17
2242:  MOVLB  0
2244:  CALL   09EC
....................             lcd_putc(t[1]); 
2248:  MOVFF  38,115
224C:  CALL   0A5E
....................           } 
....................  
....................    } 
2250:  MOVLB  1
2252:  BRA    1DF0
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2254:  DECFSZ 17,W
2256:  BRA    2492
....................       if(paso<0) 
2258:  BTFSC  36.7
225A:  BRA    225E
225C:  BRA    2260
....................         {paso=0;} 
225E:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
2260:  MOVLW  01
2262:  MOVWF  x16
2264:  MOVWF  x17
2266:  MOVLB  0
2268:  CALL   09EC
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
226C:  MOVLW  04
226E:  MOVWF  FF6
2270:  MOVLW  03
2272:  MOVWF  FF7
2274:  CALL   0EEA
....................     
....................    if(UP)//Si oprime hacia arriba 
2278:  BSF    F93.3
227A:  BTFSS  F81.3
227C:  BRA    229C
....................       {  if(Flanco == 0)  
227E:  BTFSC  34.4
2280:  BRA    229A
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
2282:  DECF   1D,F
2284:  DECF   1B,F
2286:  MOVLW  01
2288:  ADDWF  1B,W
228A:  MOVWF  1C
228C:  BSF    34.4
228E:  MOVLW  1E
2290:  MOVLB  1
2292:  MOVWF  x1B
2294:  MOVLB  0
2296:  CALL   08E2
....................          else 
229A:  BRA    229E
....................             {Flanco = 0;} 
229C:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
229E:  BSF    F93.2
22A0:  BTFSS  F81.2
22A2:  BRA    22C2
....................       {  if(Flanco2 == 0)  
22A4:  BTFSC  34.6
22A6:  BRA    22C0
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
22A8:  INCF   1D,F
22AA:  INCF   1B,F
22AC:  MOVLW  01
22AE:  SUBWF  1B,W
22B0:  MOVWF  1C
22B2:  BSF    34.6
22B4:  MOVLW  1E
22B6:  MOVLB  1
22B8:  MOVWF  x1B
22BA:  MOVLB  0
22BC:  CALL   08E2
....................          else 
22C0:  BRA    22C4
....................             {Flanco2 = 0;} 
22C2:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
22C4:  MOVF   1D,W
22C6:  SUBWF  1F,W
22C8:  BC    22DA
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
22CA:  INCF   36,F
22CC:  MOVFF  1D,1F
22D0:  MOVLW  02
22D2:  SUBWF  1F,W
22D4:  MOVWF  1E
22D6:  MOVLW  04
22D8:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
22DA:  MOVF   1E,W
22DC:  SUBWF  1D,W
22DE:  BC    22F0
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
22E0:  DECF   36,F
22E2:  MOVFF  1D,1E
22E6:  MOVLW  02
22E8:  ADDWF  1E,W
22EA:  MOVWF  1F
22EC:  MOVLW  02
22EE:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
22F0:  MOVF   1D,W
22F2:  SUBWF  18,W
22F4:  BC    2308
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
22F6:  MOVFF  19,1D
22FA:  MOVLW  02
22FC:  MOVWF  1B
22FE:  CLRF   36
2300:  MOVFF  1D,1E
2304:  ADDWF  1E,W
2306:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
2308:  MOVF   19,W
230A:  SUBWF  1D,W
230C:  BC    2324
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
230E:  MOVFF  18,1D
2312:  MOVLW  04
2314:  MOVWF  1B
2316:  SUBWF  18,W
2318:  MOVWF  36
231A:  MOVFF  1D,1F
231E:  MOVLW  02
2320:  SUBWF  1F,W
2322:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
2324:  MOVLW  01
2326:  ADDWF  36,W
2328:  MOVLB  1
232A:  MOVWF  x00
232C:  MOVWF  x01
232E:  MOVLW  02
2330:  MOVWF  x02
2332:  MOVLB  0
2334:  CALL   103C
....................         mensajes(2+paso,3); 
2338:  MOVLW  02
233A:  ADDWF  36,W
233C:  MOVLB  1
233E:  MOVWF  x00
2340:  MOVWF  x01
2342:  MOVLW  03
2344:  MOVWF  x02
2346:  MOVLB  0
2348:  CALL   103C
....................         mensajes(3+paso,4); 
234C:  MOVLW  03
234E:  ADDWF  36,W
2350:  MOVLB  1
2352:  MOVWF  x00
2354:  MOVWF  x01
2356:  MOVLW  04
2358:  MOVWF  x02
235A:  MOVLB  0
235C:  CALL   103C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2360:  MOVLW  01
2362:  MOVLB  1
2364:  MOVWF  x16
2366:  MOVFF  1B,117
236A:  MOVLB  0
236C:  CALL   09EC
....................         lcd_putc(t[0]); 
2370:  MOVFF  37,115
2374:  CALL   0A5E
....................  
....................         if(Flecha==2) 
2378:  MOVF   1B,W
237A:  SUBLW  02
237C:  BNZ   23AE
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
237E:  MOVLW  01
2380:  MOVLB  1
2382:  MOVWF  x16
2384:  MOVLW  04
2386:  MOVWF  x17
2388:  MOVLB  0
238A:  CALL   09EC
....................             lcd_putc(t[1]); 
238E:  MOVFF  38,115
2392:  CALL   0A5E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2396:  MOVLW  01
2398:  MOVLB  1
239A:  MOVWF  x16
239C:  MOVLW  03
239E:  MOVWF  x17
23A0:  MOVLB  0
23A2:  CALL   09EC
....................             lcd_putc(t[1]); 
23A6:  MOVFF  38,115
23AA:  CALL   0A5E
....................           } 
....................          
....................         if(Flecha==4) 
23AE:  MOVF   1B,W
23B0:  SUBLW  04
23B2:  BNZ   23E4
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
23B4:  MOVLW  01
23B6:  MOVLB  1
23B8:  MOVWF  x16
23BA:  MOVLW  02
23BC:  MOVWF  x17
23BE:  MOVLB  0
23C0:  CALL   09EC
....................             lcd_putc(t[1]); 
23C4:  MOVFF  38,115
23C8:  CALL   0A5E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
23CC:  MOVLW  01
23CE:  MOVLB  1
23D0:  MOVWF  x16
23D2:  MOVLW  03
23D4:  MOVWF  x17
23D6:  MOVLB  0
23D8:  CALL   09EC
....................             lcd_putc(t[1]); 
23DC:  MOVFF  38,115
23E0:  CALL   0A5E
....................           } 
....................          
....................         if(Flecha==3) 
23E4:  MOVF   1B,W
23E6:  SUBLW  03
23E8:  BNZ   241A
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
23EA:  MOVLW  01
23EC:  MOVLB  1
23EE:  MOVWF  x16
23F0:  MOVLW  04
23F2:  MOVWF  x17
23F4:  MOVLB  0
23F6:  CALL   09EC
....................             lcd_putc(t[1]); 
23FA:  MOVFF  38,115
23FE:  CALL   0A5E
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2402:  MOVLW  01
2404:  MOVLB  1
2406:  MOVWF  x16
2408:  MOVLW  02
240A:  MOVWF  x17
240C:  MOVLB  0
240E:  CALL   09EC
....................             lcd_putc(t[1]); 
2412:  MOVFF  38,115
2416:  CALL   0A5E
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
241A:  BSF    F93.0
241C:  BTFSS  F81.0
241E:  BRA    245C
....................       {  if(Flanco1 == 0)  
2420:  BTFSC  34.5
2422:  BRA    245A
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
2424:  MOVFF  1D,17
2428:  MOVLW  03
242A:  MOVWF  1B
242C:  MOVLW  02
242E:  MOVLB  1
2430:  MOVWF  x00
2432:  MOVLW  FA
2434:  MOVWF  x1B
2436:  MOVLB  0
2438:  CALL   08E2
243C:  MOVLB  1
243E:  DECFSZ x00,F
2440:  BRA    2432
2442:  MOVLW  0C
2444:  MOVWF  x15
2446:  MOVLB  0
2448:  CALL   0A5E
....................             if(Menu==6) 
244C:  MOVF   17,W
244E:  SUBLW  06
2450:  BNZ   245A
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
2452:  CLRF   3A
2454:  CLRF   3B
2456:  CLRF   3C
2458:  CLRF   3D
....................          else 
245A:  BRA    245E
....................             {Flanco1 = 0;}   
245C:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
245E:  BSF    F93.1
2460:  BTFSS  F81.1
2462:  BRA    248E
....................       {  if(Flanco3 == 0)  
2464:  BTFSC  34.7
2466:  BRA    248C
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
2468:  MOVLW  02
246A:  MOVLB  1
246C:  MOVWF  x00
246E:  MOVLW  FA
2470:  MOVWF  x1B
2472:  MOVLB  0
2474:  CALL   08E2
2478:  MOVLB  1
247A:  DECFSZ x00,F
247C:  BRA    246E
247E:  MOVLW  14
2480:  MOVWF  17
2482:  MOVLW  0C
2484:  MOVWF  x15
2486:  MOVLB  0
2488:  CALL   0A5E
....................          else 
248C:  BRA    2490
....................             {Flanco3 = 0;}                
248E:  BCF    34.7
2490:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
2492:  MOVF   17,W
2494:  SUBLW  02
2496:  BTFSS  FD8.2
2498:  BRA    25E6
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
249A:  BTG    34.2
249C:  BSF    34.5
249E:  MOVLW  01
24A0:  MOVWF  17
24A2:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
24A4:  BTFSS  34.2
24A6:  BRA    2518
....................             {estadoalarma=1; 
24A8:  BSF    34.2
....................                lcd_gotoxy(1,1); 
24AA:  MOVLW  01
24AC:  MOVWF  x16
24AE:  MOVWF  x17
24B0:  MOVLB  0
24B2:  CALL   09EC
....................                printf(lcd_putc,"                    "); 
24B6:  MOVLW  1A
24B8:  MOVWF  FF6
24BA:  MOVLW  03
24BC:  MOVWF  FF7
24BE:  CALL   0EEA
....................                lcd_gotoxy(1,2); 
24C2:  MOVLW  01
24C4:  MOVLB  1
24C6:  MOVWF  x16
24C8:  MOVLW  02
24CA:  MOVWF  x17
24CC:  MOVLB  0
24CE:  CALL   09EC
....................                printf(lcd_putc,"        Activo      "); 
24D2:  MOVLW  30
24D4:  MOVWF  FF6
24D6:  MOVLW  03
24D8:  MOVWF  FF7
24DA:  CALL   0EEA
....................                lcd_gotoxy(1,3); 
24DE:  MOVLW  01
24E0:  MOVLB  1
24E2:  MOVWF  x16
24E4:  MOVLW  03
24E6:  MOVWF  x17
24E8:  MOVLB  0
24EA:  CALL   09EC
....................                printf(lcd_putc,"        Alarma      "); 
24EE:  MOVLW  46
24F0:  MOVWF  FF6
24F2:  MOVLW  03
24F4:  MOVWF  FF7
24F6:  CALL   0EEA
....................                lcd_gotoxy(1,4); 
24FA:  MOVLW  01
24FC:  MOVLB  1
24FE:  MOVWF  x16
2500:  MOVLW  04
2502:  MOVWF  x17
2504:  MOVLB  0
2506:  CALL   09EC
....................                printf(lcd_putc,"                    ");} 
250A:  MOVLW  5C
250C:  MOVWF  FF6
250E:  MOVLW  03
2510:  MOVWF  FF7
2512:  CALL   0EEA
2516:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
2518:  BTFSC  34.2
251A:  BRA    258C
....................             {estadoalarma=0; 
251C:  BCF    34.2
....................                lcd_gotoxy(1,1); 
251E:  MOVLW  01
2520:  MOVWF  x16
2522:  MOVWF  x17
2524:  MOVLB  0
2526:  CALL   09EC
....................                printf(lcd_putc,"                    "); 
252A:  MOVLW  72
252C:  MOVWF  FF6
252E:  MOVLW  03
2530:  MOVWF  FF7
2532:  CALL   0EEA
....................                lcd_gotoxy(1,2); 
2536:  MOVLW  01
2538:  MOVLB  1
253A:  MOVWF  x16
253C:  MOVLW  02
253E:  MOVWF  x17
2540:  MOVLB  0
2542:  CALL   09EC
....................                printf(lcd_putc,"      Desactivo     "); 
2546:  MOVLW  88
2548:  MOVWF  FF6
254A:  MOVLW  03
254C:  MOVWF  FF7
254E:  CALL   0EEA
....................                lcd_gotoxy(1,3); 
2552:  MOVLW  01
2554:  MOVLB  1
2556:  MOVWF  x16
2558:  MOVLW  03
255A:  MOVWF  x17
255C:  MOVLB  0
255E:  CALL   09EC
....................                printf(lcd_putc,"       Alarma       "); 
2562:  MOVLW  9E
2564:  MOVWF  FF6
2566:  MOVLW  03
2568:  MOVWF  FF7
256A:  CALL   0EEA
....................                lcd_gotoxy(1,4); 
256E:  MOVLW  01
2570:  MOVLB  1
2572:  MOVWF  x16
2574:  MOVLW  04
2576:  MOVWF  x17
2578:  MOVLB  0
257A:  CALL   09EC
....................                printf(lcd_putc,"                    ");} 
257E:  MOVLW  B4
2580:  MOVWF  FF6
2582:  MOVLW  03
2584:  MOVWF  FF7
2586:  CALL   0EEA
258A:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
258C:  MOVLW  00
258E:  BTFSC  34.2
2590:  MOVLW  01
2592:  MOVWF  x00
2594:  MOVLW  05
2596:  MOVWF  FA9
2598:  MOVFF  100,FA8
259C:  BCF    FA6.6
259E:  BCF    FA6.7
25A0:  BSF    FA6.2
25A2:  MOVF   FF2,W
25A4:  MOVWF  00
25A6:  BCF    FF2.7
25A8:  MOVLB  F
25AA:  MOVLW  55
25AC:  MOVWF  FA7
25AE:  MOVLW  AA
25B0:  MOVWF  FA7
25B2:  BSF    FA6.1
25B4:  BTFSC  FA6.1
25B6:  BRA    25B4
25B8:  BCF    FA6.2
25BA:  MOVF   00,W
25BC:  IORWF  FF2,F
25BE:  MOVLW  02
25C0:  MOVLB  1
25C2:  MOVWF  x00
25C4:  MOVLW  FA
25C6:  MOVWF  x1B
25C8:  MOVLB  0
25CA:  CALL   08E2
25CE:  MOVLB  1
25D0:  DECFSZ x00,F
25D2:  BRA    25C4
25D4:  MOVLW  02
25D6:  MOVWF  1B
25D8:  MOVWF  1D
25DA:  MOVLW  0C
25DC:  MOVWF  x15
25DE:  MOVLB  0
25E0:  CALL   0A5E
25E4:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
25E6:  MOVF   17,W
25E8:  SUBLW  03
25EA:  BTFSS  FD8.2
25EC:  BRA    2886
....................    lcd_gotoxy(1,1); 
25EE:  MOVLW  01
25F0:  MOVWF  x16
25F2:  MOVWF  x17
25F4:  MOVLB  0
25F6:  CALL   09EC
....................    printf(lcd_putc,"  Duracion Actual   ");                           
25FA:  MOVLW  CA
25FC:  MOVWF  FF6
25FE:  MOVLW  03
2600:  MOVWF  FF7
2602:  CALL   0EEA
....................    lcd_gotoxy(1,2);                                                   
2606:  MOVLW  01
2608:  MOVLB  1
260A:  MOVWF  x16
260C:  MOVLW  02
260E:  MOVWF  x17
2610:  MOVLB  0
2612:  CALL   09EC
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
2616:  MOVLW  E0
2618:  MOVWF  FF6
261A:  MOVLW  03
261C:  MOVWF  FF7
261E:  MOVLW  09
2620:  MOVLB  1
2622:  MOVWF  x08
2624:  MOVLB  0
2626:  CALL   0F0A
262A:  MOVFF  32,FF
262E:  MOVLW  01
2630:  MOVLB  1
2632:  MOVWF  x00
2634:  MOVLB  0
2636:  CALL   1150
263A:  MOVLW  3A
263C:  MOVLB  1
263E:  MOVWF  x15
2640:  MOVLB  0
2642:  CALL   0A5E
2646:  MOVFF  31,FF
264A:  MOVLW  01
264C:  MOVLB  1
264E:  MOVWF  x00
2650:  MOVLB  0
2652:  CALL   1150
2656:  MOVLW  3A
2658:  MOVLB  1
265A:  MOVWF  x15
265C:  MOVLB  0
265E:  CALL   0A5E
2662:  MOVFF  30,FF
2666:  MOVLW  01
2668:  MOVLB  1
266A:  MOVWF  x00
266C:  MOVLB  0
266E:  CALL   1150
2672:  MOVLW  20
2674:  MOVLB  1
2676:  MOVWF  x15
2678:  MOVLB  0
267A:  CALL   0A5E
....................     
....................    if(flag_filtro==1) 
267E:  BTFSS  35.2
2680:  BRA    26A0
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2682:  MOVLW  01
2684:  MOVLB  1
2686:  MOVWF  x16
2688:  MOVLW  03
268A:  MOVWF  x17
268C:  MOVLB  0
268E:  CALL   09EC
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
2692:  MOVLW  FA
2694:  MOVWF  FF6
2696:  MOVLW  03
2698:  MOVWF  FF7
269A:  CALL   0EEA
....................    } 
....................    else 
269E:  BRA    26BC
....................    { 
....................       lcd_gotoxy(1,3);                                                  
26A0:  MOVLW  01
26A2:  MOVLB  1
26A4:  MOVWF  x16
26A6:  MOVLW  03
26A8:  MOVWF  x17
26AA:  MOVLB  0
26AC:  CALL   09EC
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
26B0:  MOVLW  10
26B2:  MOVWF  FF6
26B4:  MOVLW  04
26B6:  MOVWF  FF7
26B8:  CALL   0EEA
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
26BC:  MOVLW  01
26BE:  MOVLB  1
26C0:  MOVWF  x16
26C2:  MOVLW  04
26C4:  MOVWF  x17
26C6:  MOVLB  0
26C8:  CALL   09EC
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
26CC:  MOVLW  26
26CE:  MOVWF  FF6
26D0:  MOVLW  04
26D2:  MOVWF  FF7
26D4:  CALL   0EEA
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
26D8:  BSF    F93.3
26DA:  BTFSS  F81.3
26DC:  BRA    27E0
....................       {  delay_ms(200); 
26DE:  MOVLW  C8
26E0:  MOVLB  1
26E2:  MOVWF  x1B
26E4:  MOVLB  0
26E6:  CALL   08E2
....................          printf(lcd_putc,"\f"); 
26EA:  MOVLW  0C
26EC:  MOVLB  1
26EE:  MOVWF  x15
26F0:  MOVLB  0
26F2:  CALL   0A5E
....................          lcd_gotoxy(1,2); 
26F6:  MOVLW  01
26F8:  MOVLB  1
26FA:  MOVWF  x16
26FC:  MOVLW  02
26FE:  MOVWF  x17
2700:  MOVLB  0
2702:  CALL   09EC
....................          printf(lcd_putc," Reset de tiempo "); 
2706:  MOVLW  3C
2708:  MOVWF  FF6
270A:  MOVLW  04
270C:  MOVWF  FF7
270E:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
2712:  MOVLW  01
2714:  MOVLB  1
2716:  MOVWF  x16
2718:  MOVLW  03
271A:  MOVWF  x17
271C:  MOVLB  0
271E:  CALL   09EC
....................          printf(lcd_putc,"     Exitoso     "); 
2722:  MOVLW  4E
2724:  MOVWF  FF6
2726:  MOVLW  04
2728:  MOVWF  FF7
272A:  CALL   0EEA
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
272E:  MOVLW  46
2730:  MOVWF  FA9
2732:  CLRF   FA8
2734:  BCF    FA6.6
2736:  BCF    FA6.7
2738:  BSF    FA6.2
273A:  MOVF   FF2,W
273C:  MOVWF  00
273E:  BCF    FF2.7
2740:  MOVLB  F
2742:  MOVLW  55
2744:  MOVWF  FA7
2746:  MOVLW  AA
2748:  MOVWF  FA7
274A:  BSF    FA6.1
274C:  BTFSC  FA6.1
274E:  BRA    274C
2750:  BCF    FA6.2
2752:  MOVF   00,W
2754:  IORWF  FF2,F
2756:  MOVLW  47
2758:  MOVWF  FA9
275A:  CLRF   FA8
275C:  BCF    FA6.6
275E:  BCF    FA6.7
2760:  BSF    FA6.2
2762:  MOVF   FF2,W
2764:  MOVWF  00
2766:  BCF    FF2.7
2768:  MOVLW  55
276A:  MOVWF  FA7
276C:  MOVLW  AA
276E:  MOVWF  FA7
2770:  BSF    FA6.1
2772:  BTFSC  FA6.1
2774:  BRA    2772
2776:  BCF    FA6.2
2778:  MOVF   00,W
277A:  IORWF  FF2,F
277C:  MOVLW  48
277E:  MOVWF  FA9
2780:  CLRF   FA8
2782:  BCF    FA6.6
2784:  BCF    FA6.7
2786:  BSF    FA6.2
2788:  MOVF   FF2,W
278A:  MOVWF  00
278C:  BCF    FF2.7
278E:  MOVLW  55
2790:  MOVWF  FA7
2792:  MOVLW  AA
2794:  MOVWF  FA7
2796:  BSF    FA6.1
2798:  BTFSC  FA6.1
279A:  BRA    2798
279C:  BCF    FA6.2
279E:  MOVF   00,W
27A0:  IORWF  FF2,F
....................          delay_ms(700); 
27A2:  MOVLW  04
27A4:  MOVLB  1
27A6:  MOVWF  x00
27A8:  MOVLW  AF
27AA:  MOVWF  x1B
27AC:  MOVLB  0
27AE:  CALL   08E2
27B2:  MOVLB  1
27B4:  DECFSZ x00,F
27B6:  BRA    27A8
....................          segundos=0;minutos=0;horas=0; 
27B8:  CLRF   30
27BA:  CLRF   31
27BC:  CLRF   32
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
27BE:  MOVLW  1E
27C0:  MOVWF  x1B
27C2:  MOVLB  0
27C4:  CALL   08E2
27C8:  MOVLW  01
27CA:  MOVWF  17
27CC:  CLRF   36
27CE:  MOVLW  02
27D0:  MOVWF  1B
27D2:  MOVWF  1D
27D4:  MOVLW  0C
27D6:  MOVLB  1
27D8:  MOVWF  x15
27DA:  MOVLB  0
27DC:  CALL   0A5E
....................       } 
....................        
....................       if(RIGHT) 
27E0:  BSF    F93.0
27E2:  BTFSS  F81.0
27E4:  BRA    2848
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
27E6:  BTG    35.2
27E8:  MOVLW  00
27EA:  BTFSC  35.2
27EC:  MOVLW  01
27EE:  MOVLB  1
27F0:  MOVWF  x00
27F2:  MOVLW  49
27F4:  MOVWF  FA9
27F6:  MOVFF  100,FA8
27FA:  BCF    FA6.6
27FC:  BCF    FA6.7
27FE:  BSF    FA6.2
2800:  MOVF   FF2,W
2802:  MOVWF  00
2804:  BCF    FF2.7
2806:  MOVLB  F
2808:  MOVLW  55
280A:  MOVWF  FA7
280C:  MOVLW  AA
280E:  MOVWF  FA7
2810:  BSF    FA6.1
2812:  BTFSC  FA6.1
2814:  BRA    2812
2816:  BCF    FA6.2
2818:  MOVF   00,W
281A:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
281C:  MOVLW  02
281E:  MOVLB  1
2820:  MOVWF  x00
2822:  MOVLW  FA
2824:  MOVWF  x1B
2826:  MOVLB  0
2828:  CALL   08E2
282C:  MOVLB  1
282E:  DECFSZ x00,F
2830:  BRA    2822
2832:  MOVLW  01
2834:  MOVWF  17
2836:  CLRF   36
2838:  MOVLW  02
283A:  MOVWF  1B
283C:  MOVWF  1D
283E:  MOVLW  0C
2840:  MOVWF  x15
2842:  MOVLB  0
2844:  CALL   0A5E
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
2848:  BSF    F93.1
284A:  BTFSS  F81.1
284C:  BRA    2882
....................       {  if(Flanco3 == 0)  
284E:  BTFSC  34.7
2850:  BRA    2880
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
2852:  BSF    34.7
2854:  MOVLW  02
2856:  MOVLB  1
2858:  MOVWF  x00
285A:  MOVLW  FA
285C:  MOVWF  x1B
285E:  MOVLB  0
2860:  CALL   08E2
2864:  MOVLB  1
2866:  DECFSZ x00,F
2868:  BRA    285A
286A:  MOVLW  01
286C:  MOVWF  17
286E:  CLRF   36
2870:  MOVLW  02
2872:  MOVWF  1B
2874:  MOVWF  1D
2876:  MOVLW  0C
2878:  MOVWF  x15
287A:  MOVLB  0
287C:  CALL   0A5E
....................          else 
2880:  BRA    2884
....................             {Flanco3 = 0;}       
2882:  BCF    34.7
2884:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
2886:  MOVF   17,W
2888:  SUBLW  04
288A:  BTFSS  FD8.2
288C:  BRA    2BA2
....................    lcd_gotoxy(1,2); 
288E:  MOVLW  01
2890:  MOVWF  x16
2892:  MOVLW  02
2894:  MOVWF  x17
2896:  MOVLB  0
2898:  CALL   09EC
....................    printf(lcd_putc,"      Setpoint      "); 
289C:  MOVLW  60
289E:  MOVWF  FF6
28A0:  MOVLW  04
28A2:  MOVWF  FF7
28A4:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
28A8:  MOVLW  01
28AA:  MOVLB  1
28AC:  MOVWF  x16
28AE:  MOVLW  03
28B0:  MOVWF  x17
28B2:  MOVLB  0
28B4:  CALL   09EC
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
28B8:  MOVLW  76
28BA:  MOVWF  FF6
28BC:  MOVLW  04
28BE:  MOVWF  FF7
28C0:  MOVLW  07
28C2:  MOVLB  1
28C4:  MOVWF  x08
28C6:  MOVLB  0
28C8:  CALL   0F0A
28CC:  MOVLW  89
28CE:  MOVWF  FE9
28D0:  MOVFF  45,10B
28D4:  MOVFF  44,10A
28D8:  MOVFF  43,109
28DC:  MOVFF  42,108
28E0:  MOVLW  02
28E2:  MOVLB  1
28E4:  MOVWF  x0C
28E6:  MOVLB  0
28E8:  CALL   1384
28EC:  MOVLW  20
28EE:  MOVLB  1
28F0:  MOVWF  x15
28F2:  MOVLB  0
28F4:  CALL   0A5E
28F8:  MOVLW  20
28FA:  MOVLB  1
28FC:  MOVWF  x15
28FE:  MOVLB  0
2900:  CALL   0A5E
2904:  MOVLW  20
2906:  MOVLB  1
2908:  MOVWF  x15
290A:  MOVLB  0
290C:  CALL   0A5E
....................     
....................    if(setpoint>2.0) 
2910:  MOVLB  1
2912:  CLRF   x02
2914:  CLRF   x01
2916:  CLRF   x00
2918:  MOVLW  80
291A:  MOVLB  0
291C:  MOVWF  xFF
291E:  MOVFF  45,106
2922:  MOVFF  44,105
2926:  MOVFF  43,104
292A:  MOVFF  42,103
292E:  CALL   1536
2932:  BNC   293E
....................    {setpoint=2.0;} 
2934:  CLRF   45
2936:  CLRF   44
2938:  CLRF   43
293A:  MOVLW  80
293C:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
293E:  MOVFF  45,102
2942:  MOVFF  44,101
2946:  MOVFF  43,100
294A:  MOVFF  42,FF
294E:  MOVLB  1
2950:  CLRF   x06
2952:  CLRF   x05
2954:  CLRF   x04
2956:  MOVLW  7E
2958:  MOVWF  x03
295A:  MOVLB  0
295C:  CALL   1536
2960:  BNC   296C
....................    {setpoint=0.5;} 
2962:  CLRF   45
2964:  CLRF   44
2966:  CLRF   43
2968:  MOVLW  7E
296A:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
296C:  BSF    F93.3
296E:  BTFSS  F81.3
2970:  BRA    29C0
....................       {  if(Flanco == 0)  
2972:  BTFSC  34.4
2974:  BRA    29BE
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
2976:  BCF    FD8.1
2978:  MOVFF  45,105
297C:  MOVFF  44,104
2980:  MOVFF  43,103
2984:  MOVFF  42,102
2988:  MOVLW  CD
298A:  MOVLB  1
298C:  MOVWF  x09
298E:  MOVLW  CC
2990:  MOVWF  x08
2992:  MOVLW  4C
2994:  MOVWF  x07
2996:  MOVLW  7B
2998:  MOVWF  x06
299A:  MOVLB  0
299C:  CALL   0C5E
29A0:  MOVFF  03,45
29A4:  MOVFF  02,44
29A8:  MOVFF  01,43
29AC:  MOVFF  00,42
29B0:  BSF    34.4
29B2:  MOVLW  1E
29B4:  MOVLB  1
29B6:  MOVWF  x1B
29B8:  MOVLB  0
29BA:  CALL   08E2
....................          else 
29BE:  BRA    29C2
....................             {Flanco = 0;} 
29C0:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
29C2:  BSF    F93.2
29C4:  BTFSS  F81.2
29C6:  BRA    2A16
....................       {  if(Flanco2 == 0)  
29C8:  BTFSC  34.6
29CA:  BRA    2A14
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
29CC:  BSF    FD8.1
29CE:  MOVFF  45,105
29D2:  MOVFF  44,104
29D6:  MOVFF  43,103
29DA:  MOVFF  42,102
29DE:  MOVLW  CD
29E0:  MOVLB  1
29E2:  MOVWF  x09
29E4:  MOVLW  CC
29E6:  MOVWF  x08
29E8:  MOVLW  4C
29EA:  MOVWF  x07
29EC:  MOVLW  7B
29EE:  MOVWF  x06
29F0:  MOVLB  0
29F2:  CALL   0C5E
29F6:  MOVFF  03,45
29FA:  MOVFF  02,44
29FE:  MOVFF  01,43
2A02:  MOVFF  00,42
2A06:  BSF    34.6
2A08:  MOVLW  1E
2A0A:  MOVLB  1
2A0C:  MOVWF  x1B
2A0E:  MOVLB  0
2A10:  CALL   08E2
....................          else 
2A14:  BRA    2A18
....................             {Flanco2 = 0;} 
2A16:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
2A18:  BSF    F93.0
2A1A:  BTFSS  F81.0
2A1C:  BRA    2B60
....................       {  if(Flanco1 == 0)  
2A1E:  BTFSC  34.5
2A20:  BRA    2B5E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2A22:  MOVLW  01
2A24:  MOVWF  17
2A26:  CLRF   36
2A28:  MOVLW  02
2A2A:  MOVWF  1B
2A2C:  MOVWF  1D
2A2E:  MOVLW  0B
2A30:  MOVWF  1A
2A32:  MOVLW  02
2A34:  MOVLB  1
2A36:  MOVWF  x00
2A38:  MOVLW  FA
2A3A:  MOVWF  x1B
2A3C:  MOVLB  0
2A3E:  CALL   08E2
2A42:  MOVLB  1
2A44:  DECFSZ x00,F
2A46:  BRA    2A38
2A48:  MOVLW  0C
2A4A:  MOVWF  x15
2A4C:  MOVLB  0
2A4E:  CALL   0A5E
....................             Temporal=setpoint; 
2A52:  MOVFF  45,AA
2A56:  MOVFF  44,A9
2A5A:  MOVFF  43,A8
2A5E:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
2A62:  MOVFF  45,102
2A66:  MOVFF  44,101
2A6A:  MOVFF  43,100
2A6E:  MOVFF  42,FF
2A72:  CALL   15B4
2A76:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
2A7A:  MOVLB  1
2A7C:  CLRF   x0A
2A7E:  MOVFF  21,109
2A82:  MOVLB  0
2A84:  CALL   0ACA
2A88:  BSF    FD8.1
2A8A:  MOVFF  AA,105
2A8E:  MOVFF  A9,104
2A92:  MOVFF  A8,103
2A96:  MOVFF  A7,102
2A9A:  MOVFF  03,109
2A9E:  MOVFF  02,108
2AA2:  MOVFF  01,107
2AA6:  MOVFF  00,106
2AAA:  CALL   0C5E
2AAE:  MOVFF  03,AA
2AB2:  MOVFF  02,A9
2AB6:  MOVFF  01,A8
2ABA:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
2ABE:  MOVFF  AA,118
2AC2:  MOVFF  A9,117
2AC6:  MOVFF  A8,116
2ACA:  MOVFF  A7,115
2ACE:  MOVLB  1
2AD0:  CLRF   x1C
2AD2:  CLRF   x1B
2AD4:  MOVLW  48
2AD6:  MOVWF  x1A
2AD8:  MOVLW  85
2ADA:  MOVWF  x19
2ADC:  MOVLB  0
2ADE:  CALL   11CA
2AE2:  MOVFF  03,AE
2AE6:  MOVFF  02,AD
2AEA:  MOVFF  01,AC
2AEE:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
2AF2:  MOVFF  AE,102
2AF6:  MOVFF  AD,101
2AFA:  MOVFF  AC,100
2AFE:  MOVFF  AB,FF
2B02:  CALL   15B4
2B06:  MOVFF  01,23
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
2B0A:  MOVLW  28
2B0C:  MOVWF  FA9
2B0E:  MOVFF  21,FA8
2B12:  BCF    FA6.6
2B14:  BCF    FA6.7
2B16:  BSF    FA6.2
2B18:  MOVF   FF2,W
2B1A:  MOVWF  00
2B1C:  BCF    FF2.7
2B1E:  MOVLB  F
2B20:  MOVLW  55
2B22:  MOVWF  FA7
2B24:  MOVLW  AA
2B26:  MOVWF  FA7
2B28:  BSF    FA6.1
2B2A:  BTFSC  FA6.1
2B2C:  BRA    2B2A
2B2E:  BCF    FA6.2
2B30:  MOVF   00,W
2B32:  IORWF  FF2,F
2B34:  MOVLW  29
2B36:  MOVWF  FA9
2B38:  MOVFF  23,FA8
2B3C:  BCF    FA6.6
2B3E:  BCF    FA6.7
2B40:  BSF    FA6.2
2B42:  MOVF   FF2,W
2B44:  MOVWF  00
2B46:  BCF    FF2.7
2B48:  MOVLW  55
2B4A:  MOVWF  FA7
2B4C:  MOVLW  AA
2B4E:  MOVWF  FA7
2B50:  BSF    FA6.1
2B52:  BTFSC  FA6.1
2B54:  BRA    2B52
2B56:  BCF    FA6.2
2B58:  MOVF   00,W
2B5A:  IORWF  FF2,F
2B5C:  MOVLB  0
....................             }} 
....................          else 
2B5E:  BRA    2B62
....................             {Flanco1 = 0;}    
2B60:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2B62:  BSF    F93.1
2B64:  BTFSS  F81.1
2B66:  BRA    2B9E
....................       {  if(Flanco3 == 0)  
2B68:  BTFSC  34.7
2B6A:  BRA    2B9C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
2B6C:  MOVLW  01
2B6E:  MOVWF  17
2B70:  CLRF   36
2B72:  MOVLW  02
2B74:  MOVWF  1B
2B76:  MOVWF  1D
2B78:  MOVLW  0B
2B7A:  MOVWF  1A
2B7C:  MOVLW  02
2B7E:  MOVLB  1
2B80:  MOVWF  x00
2B82:  MOVLW  FA
2B84:  MOVWF  x1B
2B86:  MOVLB  0
2B88:  CALL   08E2
2B8C:  MOVLB  1
2B8E:  DECFSZ x00,F
2B90:  BRA    2B82
2B92:  MOVLW  0C
2B94:  MOVWF  x15
2B96:  MOVLB  0
2B98:  CALL   0A5E
....................          else 
2B9C:  BRA    2BA0
....................             {Flanco3 = 0;}     
2B9E:  BCF    34.7
2BA0:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
2BA2:  MOVF   17,W
2BA4:  SUBLW  05
2BA6:  BTFSS  FD8.2
2BA8:  BRA    2F1A
....................    lcd_gotoxy(1,1); 
2BAA:  MOVLW  01
2BAC:  MOVWF  x16
2BAE:  MOVWF  x17
2BB0:  MOVLB  0
2BB2:  CALL   09EC
....................    printf(lcd_putc,"      Ingrese       "); 
2BB6:  MOVLW  86
2BB8:  MOVWF  FF6
2BBA:  MOVLW  04
2BBC:  MOVWF  FF7
2BBE:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
2BC2:  MOVLW  01
2BC4:  MOVLB  1
2BC6:  MOVWF  x16
2BC8:  MOVLW  02
2BCA:  MOVWF  x17
2BCC:  MOVLB  0
2BCE:  CALL   09EC
....................    printf(lcd_putc," Contraseña Actual  "); 
2BD2:  MOVLW  9C
2BD4:  MOVWF  FF6
2BD6:  MOVLW  04
2BD8:  MOVWF  FF7
2BDA:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
2BDE:  MOVLW  01
2BE0:  MOVLB  1
2BE2:  MOVWF  x16
2BE4:  MOVLW  03
2BE6:  MOVWF  x17
2BE8:  MOVLB  0
2BEA:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2BEE:  MOVLW  B2
2BF0:  MOVWF  FF6
2BF2:  MOVLW  04
2BF4:  MOVWF  FF7
2BF6:  MOVLW  0A
2BF8:  MOVLB  1
2BFA:  MOVWF  x08
2BFC:  MOVLB  0
2BFE:  CALL   0F0A
2C02:  MOVFF  3A,100
2C06:  MOVLW  1F
2C08:  MOVLB  1
2C0A:  MOVWF  x01
2C0C:  MOVLB  0
2C0E:  CALL   0F5E
2C12:  MOVFF  3B,100
2C16:  MOVLW  1F
2C18:  MOVLB  1
2C1A:  MOVWF  x01
2C1C:  MOVLB  0
2C1E:  CALL   0F5E
2C22:  MOVFF  3C,100
2C26:  MOVLW  1F
2C28:  MOVLB  1
2C2A:  MOVWF  x01
2C2C:  MOVLB  0
2C2E:  CALL   0F5E
2C32:  MOVFF  3D,100
2C36:  MOVLW  1F
2C38:  MOVLB  1
2C3A:  MOVWF  x01
2C3C:  MOVLB  0
2C3E:  CALL   0F5E
2C42:  MOVLW  20
2C44:  MOVLB  1
2C46:  MOVWF  x15
2C48:  MOVLB  0
2C4A:  CALL   0A5E
2C4E:  MOVLW  20
2C50:  MOVLB  1
2C52:  MOVWF  x15
2C54:  MOVLB  0
2C56:  CALL   0A5E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2C5A:  BSF    F93.3
2C5C:  BTFSS  F81.3
2C5E:  BRA    2C86
....................       {  if(Flanco == 0)  
2C60:  BTFSC  34.4
2C62:  BRA    2C84
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2C64:  MOVLW  0B
2C66:  SUBWF  1A,W
2C68:  CLRF   03
2C6A:  ADDLW  3A
2C6C:  MOVWF  FE9
2C6E:  MOVLW  00
2C70:  ADDWFC 03,W
2C72:  MOVWF  FEA
2C74:  INCF   FEF,F
2C76:  BSF    34.4
2C78:  MOVLW  1E
2C7A:  MOVLB  1
2C7C:  MOVWF  x1B
2C7E:  MOVLB  0
2C80:  CALL   08E2
....................          else 
2C84:  BRA    2C88
....................             {Flanco = 0;} 
2C86:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2C88:  BSF    F93.2
2C8A:  BTFSS  F81.2
2C8C:  BRA    2CB4
....................       {  if(Flanco2 == 0)  
2C8E:  BTFSC  34.6
2C90:  BRA    2CB2
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2C92:  MOVLW  0B
2C94:  SUBWF  1A,W
2C96:  CLRF   03
2C98:  ADDLW  3A
2C9A:  MOVWF  FE9
2C9C:  MOVLW  00
2C9E:  ADDWFC 03,W
2CA0:  MOVWF  FEA
2CA2:  DECF   FEF,F
2CA4:  BSF    34.6
2CA6:  MOVLW  1E
2CA8:  MOVLB  1
2CAA:  MOVWF  x1B
2CAC:  MOVLB  0
2CAE:  CALL   08E2
....................          else 
2CB2:  BRA    2CB6
....................             {Flanco2 = 0;} 
2CB4:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
2CB6:  BSF    F93.0
2CB8:  BTFSS  F81.0
2CBA:  BRA    2CE6
....................       {  if(Flanco1 == 0)  
2CBC:  BTFSC  34.5
2CBE:  BRA    2CE4
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
2CC0:  BSF    34.5
2CC2:  INCF   1A,F
2CC4:  MOVLW  02
2CC6:  MOVLB  1
2CC8:  MOVWF  x00
2CCA:  MOVLW  FA
2CCC:  MOVWF  x1B
2CCE:  MOVLB  0
2CD0:  CALL   08E2
2CD4:  MOVLB  1
2CD6:  DECFSZ x00,F
2CD8:  BRA    2CCA
2CDA:  MOVLW  0C
2CDC:  MOVWF  x15
2CDE:  MOVLB  0
2CE0:  CALL   0A5E
....................          else 
2CE4:  BRA    2CE8
....................             {Flanco1 = 0;}    
2CE6:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2CE8:  BSF    F93.1
2CEA:  BTFSS  F81.1
2CEC:  BRA    2D18
....................       {  if(Flanco3 == 0)  
2CEE:  BTFSC  34.7
2CF0:  BRA    2D16
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
2CF2:  BSF    34.7
2CF4:  DECF   1A,F
2CF6:  MOVLW  02
2CF8:  MOVLB  1
2CFA:  MOVWF  x00
2CFC:  MOVLW  FA
2CFE:  MOVWF  x1B
2D00:  MOVLB  0
2D02:  CALL   08E2
2D06:  MOVLB  1
2D08:  DECFSZ x00,F
2D0A:  BRA    2CFC
2D0C:  MOVLW  0C
2D0E:  MOVWF  x15
2D10:  MOVLB  0
2D12:  CALL   0A5E
....................          else 
2D16:  BRA    2D1A
....................             {Flanco3 = 0;}     
2D18:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2D1A:  MOVLW  0B
2D1C:  SUBWF  1A,W
2D1E:  CLRF   03
2D20:  ADDLW  3A
2D22:  MOVWF  FE9
2D24:  MOVLW  00
2D26:  ADDWFC 03,W
2D28:  MOVWF  FEA
2D2A:  BTFSC  FEF.7
2D2C:  BRA    2D30
2D2E:  BRA    2D44
....................        {clave[unidad-11]=9;} 
2D30:  MOVLW  0B
2D32:  SUBWF  1A,W
2D34:  CLRF   03
2D36:  ADDLW  3A
2D38:  MOVWF  FE9
2D3A:  MOVLW  00
2D3C:  ADDWFC 03,W
2D3E:  MOVWF  FEA
2D40:  MOVLW  09
2D42:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2D44:  MOVLW  0B
2D46:  SUBWF  1A,W
2D48:  CLRF   03
2D4A:  ADDLW  3A
2D4C:  MOVWF  FE9
2D4E:  MOVLW  00
2D50:  ADDWFC 03,W
2D52:  MOVWF  FEA
2D54:  BTFSC  FEF.7
2D56:  BRA    2D70
2D58:  MOVF   FEF,W
2D5A:  SUBLW  09
2D5C:  BC    2D70
....................        {clave[unidad-11]=0;} 
2D5E:  MOVLW  0B
2D60:  SUBWF  1A,W
2D62:  CLRF   03
2D64:  ADDLW  3A
2D66:  MOVWF  FE9
2D68:  MOVLW  00
2D6A:  ADDWFC 03,W
2D6C:  MOVWF  FEA
2D6E:  CLRF   FEF
....................        if(unidad<11) 
2D70:  MOVF   1A,W
2D72:  SUBLW  0A
2D74:  BNC   2D86
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
2D76:  MOVLW  01
2D78:  MOVWF  17
2D7A:  CLRF   36
2D7C:  MOVLW  02
2D7E:  MOVWF  1B
2D80:  MOVWF  1D
2D82:  MOVLW  0B
2D84:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2D86:  MOVFF  1A,116
2D8A:  MOVLW  04
2D8C:  MOVLB  1
2D8E:  MOVWF  x17
2D90:  MOVLB  0
2D92:  CALL   09EC
....................        lcd_putc(t[2]); 
2D96:  MOVFF  39,115
2D9A:  CALL   0A5E
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2D9E:  MOVF   1A,W
2DA0:  SUBLW  0E
2DA2:  BTFSC  FD8.0
2DA4:  BRA    2EF0
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2DA6:  MOVF   3E,W
2DA8:  SUBWF  3A,W
2DAA:  BNZ   2E5E
2DAC:  MOVF   3F,W
2DAE:  SUBWF  3B,W
2DB0:  BNZ   2E5E
2DB2:  MOVF   40,W
2DB4:  SUBWF  3C,W
2DB6:  BNZ   2E5E
2DB8:  MOVF   41,W
2DBA:  SUBWF  3D,W
2DBC:  BNZ   2E5E
....................             {lcd_gotoxy(1,1); 
2DBE:  MOVLW  01
2DC0:  MOVLB  1
2DC2:  MOVWF  x16
2DC4:  MOVWF  x17
2DC6:  MOVLB  0
2DC8:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2DCC:  MOVLW  C8
2DCE:  MOVWF  FF6
2DD0:  MOVLW  04
2DD2:  MOVWF  FF7
2DD4:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
2DD8:  MOVLW  01
2DDA:  MOVLB  1
2DDC:  MOVWF  x16
2DDE:  MOVLW  02
2DE0:  MOVWF  x17
2DE2:  MOVLB  0
2DE4:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
2DE8:  MOVLW  DE
2DEA:  MOVWF  FF6
2DEC:  MOVLW  04
2DEE:  MOVWF  FF7
2DF0:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2DF4:  MOVLW  01
2DF6:  MOVLB  1
2DF8:  MOVWF  x16
2DFA:  MOVLW  03
2DFC:  MOVWF  x17
2DFE:  MOVLB  0
2E00:  CALL   09EC
....................             printf(lcd_putc,"      Correcta      "); 
2E04:  MOVLW  F4
2E06:  MOVWF  FF6
2E08:  MOVLW  04
2E0A:  MOVWF  FF7
2E0C:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2E10:  MOVLW  01
2E12:  MOVLB  1
2E14:  MOVWF  x16
2E16:  MOVLW  04
2E18:  MOVWF  x17
2E1A:  MOVLB  0
2E1C:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2E20:  MOVLW  0A
2E22:  MOVWF  FF6
2E24:  MOVLW  05
2E26:  MOVWF  FF7
2E28:  CALL   0EEA
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
2E2C:  MOVLW  02
2E2E:  MOVLB  1
2E30:  MOVWF  x00
2E32:  MOVLW  FA
2E34:  MOVWF  x1B
2E36:  MOVLB  0
2E38:  CALL   08E2
2E3C:  MOVLB  1
2E3E:  DECFSZ x00,F
2E40:  BRA    2E32
2E42:  MOVLW  33
2E44:  MOVWF  17
2E46:  MOVLW  0B
2E48:  MOVWF  1A
2E4A:  MOVLW  0C
2E4C:  MOVWF  x15
2E4E:  MOVLB  0
2E50:  CALL   0A5E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2E54:  CLRF   3A
2E56:  CLRF   3B
2E58:  CLRF   3C
2E5A:  CLRF   3D
....................          else 
2E5C:  BRA    2EF0
....................          {lcd_gotoxy(1,1); 
2E5E:  MOVLW  01
2E60:  MOVLB  1
2E62:  MOVWF  x16
2E64:  MOVWF  x17
2E66:  MOVLB  0
2E68:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2E6C:  MOVLW  20
2E6E:  MOVWF  FF6
2E70:  MOVLW  05
2E72:  MOVWF  FF7
2E74:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
2E78:  MOVLW  01
2E7A:  MOVLB  1
2E7C:  MOVWF  x16
2E7E:  MOVLW  02
2E80:  MOVWF  x17
2E82:  MOVLB  0
2E84:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
2E88:  MOVLW  36
2E8A:  MOVWF  FF6
2E8C:  MOVLW  05
2E8E:  MOVWF  FF7
2E90:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2E94:  MOVLW  01
2E96:  MOVLB  1
2E98:  MOVWF  x16
2E9A:  MOVLW  03
2E9C:  MOVWF  x17
2E9E:  MOVLB  0
2EA0:  CALL   09EC
....................             printf(lcd_putc,"     Incorrecta     "); 
2EA4:  MOVLW  4C
2EA6:  MOVWF  FF6
2EA8:  MOVLW  05
2EAA:  MOVWF  FF7
2EAC:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2EB0:  MOVLW  01
2EB2:  MOVLB  1
2EB4:  MOVWF  x16
2EB6:  MOVLW  04
2EB8:  MOVWF  x17
2EBA:  MOVLB  0
2EBC:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2EC0:  MOVLW  62
2EC2:  MOVWF  FF6
2EC4:  MOVLW  05
2EC6:  MOVWF  FF7
2EC8:  CALL   0EEA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2ECC:  MOVLW  02
2ECE:  MOVLB  1
2ED0:  MOVWF  x00
2ED2:  MOVLW  FA
2ED4:  MOVWF  x1B
2ED6:  MOVLB  0
2ED8:  CALL   08E2
2EDC:  MOVLB  1
2EDE:  DECFSZ x00,F
2EE0:  BRA    2ED2
2EE2:  MOVLW  0B
2EE4:  MOVWF  1A
2EE6:  MOVLW  0C
2EE8:  MOVWF  x15
2EEA:  MOVLB  0
2EEC:  CALL   0A5E
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2EF0:  MOVF   1A,W
2EF2:  SUBLW  0B
2EF4:  BC    2F18
2EF6:  MOVF   1A,W
2EF8:  SUBLW  0D
2EFA:  BNC   2F18
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2EFC:  MOVLW  01
2EFE:  SUBWF  1A,W
2F00:  MOVLB  1
2F02:  MOVWF  x00
2F04:  MOVWF  x16
2F06:  MOVLW  04
2F08:  MOVWF  x17
2F0A:  MOVLB  0
2F0C:  CALL   09EC
....................             lcd_putc(t[1]); 
2F10:  MOVFF  38,115
2F14:  CALL   0A5E
2F18:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2F1A:  MOVF   17,W
2F1C:  SUBLW  33
2F1E:  BTFSS  FD8.2
2F20:  BRA    3298
....................    lcd_gotoxy(1,1); 
2F22:  MOVLW  01
2F24:  MOVWF  x16
2F26:  MOVWF  x17
2F28:  MOVLB  0
2F2A:  CALL   09EC
....................    printf(lcd_putc,"     Ingrese        "); 
2F2E:  MOVLW  78
2F30:  MOVWF  FF6
2F32:  MOVLW  05
2F34:  MOVWF  FF7
2F36:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
2F3A:  MOVLW  01
2F3C:  MOVLB  1
2F3E:  MOVWF  x16
2F40:  MOVLW  02
2F42:  MOVWF  x17
2F44:  MOVLB  0
2F46:  CALL   09EC
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2F4A:  MOVLW  8E
2F4C:  MOVWF  FF6
2F4E:  MOVLW  05
2F50:  MOVWF  FF7
2F52:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
2F56:  MOVLW  01
2F58:  MOVLB  1
2F5A:  MOVWF  x16
2F5C:  MOVLW  03
2F5E:  MOVWF  x17
2F60:  MOVLB  0
2F62:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F66:  MOVLW  A4
2F68:  MOVWF  FF6
2F6A:  MOVLW  05
2F6C:  MOVWF  FF7
2F6E:  MOVLW  0A
2F70:  MOVLB  1
2F72:  MOVWF  x08
2F74:  MOVLB  0
2F76:  CALL   0F0A
2F7A:  MOVFF  3A,100
2F7E:  MOVLW  1F
2F80:  MOVLB  1
2F82:  MOVWF  x01
2F84:  MOVLB  0
2F86:  CALL   0F5E
2F8A:  MOVFF  3B,100
2F8E:  MOVLW  1F
2F90:  MOVLB  1
2F92:  MOVWF  x01
2F94:  MOVLB  0
2F96:  CALL   0F5E
2F9A:  MOVFF  3C,100
2F9E:  MOVLW  1F
2FA0:  MOVLB  1
2FA2:  MOVWF  x01
2FA4:  MOVLB  0
2FA6:  CALL   0F5E
2FAA:  MOVFF  3D,100
2FAE:  MOVLW  1F
2FB0:  MOVLB  1
2FB2:  MOVWF  x01
2FB4:  MOVLB  0
2FB6:  CALL   0F5E
2FBA:  MOVLW  20
2FBC:  MOVLB  1
2FBE:  MOVWF  x15
2FC0:  MOVLB  0
2FC2:  CALL   0A5E
2FC6:  MOVLW  20
2FC8:  MOVLB  1
2FCA:  MOVWF  x15
2FCC:  MOVLB  0
2FCE:  CALL   0A5E
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
2FD2:  BSF    F93.3
2FD4:  BTFSS  F81.3
2FD6:  BRA    2FFE
....................       {  if(Flanco == 0)  
2FD8:  BTFSC  34.4
2FDA:  BRA    2FFC
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2FDC:  MOVLW  0B
2FDE:  SUBWF  1A,W
2FE0:  CLRF   03
2FE2:  ADDLW  3A
2FE4:  MOVWF  FE9
2FE6:  MOVLW  00
2FE8:  ADDWFC 03,W
2FEA:  MOVWF  FEA
2FEC:  INCF   FEF,F
2FEE:  BSF    34.4
2FF0:  MOVLW  1E
2FF2:  MOVLB  1
2FF4:  MOVWF  x1B
2FF6:  MOVLB  0
2FF8:  CALL   08E2
....................          else 
2FFC:  BRA    3000
....................             {Flanco = 0;} 
2FFE:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3000:  BSF    F93.2
3002:  BTFSS  F81.2
3004:  BRA    302C
....................       {  if(Flanco2 == 0)  
3006:  BTFSC  34.6
3008:  BRA    302A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
300A:  MOVLW  0B
300C:  SUBWF  1A,W
300E:  CLRF   03
3010:  ADDLW  3A
3012:  MOVWF  FE9
3014:  MOVLW  00
3016:  ADDWFC 03,W
3018:  MOVWF  FEA
301A:  DECF   FEF,F
301C:  BSF    34.6
301E:  MOVLW  1E
3020:  MOVLB  1
3022:  MOVWF  x1B
3024:  MOVLB  0
3026:  CALL   08E2
....................          else 
302A:  BRA    302E
....................             {Flanco2 = 0;} 
302C:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
302E:  BSF    F93.0
3030:  BTFSS  F81.0
3032:  BRA    3056
....................       {  if(Flanco1 == 0)  
3034:  BTFSC  34.5
3036:  BRA    3054
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3038:  BSF    34.5
303A:  INCF   1A,F
303C:  MOVLW  1E
303E:  MOVLB  1
3040:  MOVWF  x1B
3042:  MOVLB  0
3044:  CALL   08E2
3048:  MOVLW  0C
304A:  MOVLB  1
304C:  MOVWF  x15
304E:  MOVLB  0
3050:  CALL   0A5E
....................          else 
3054:  BRA    3058
....................             {Flanco1 = 0;}    
3056:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3058:  BSF    F93.1
305A:  BTFSS  F81.1
305C:  BRA    3080
....................       {  if(Flanco3 == 0)  
305E:  BTFSC  34.7
3060:  BRA    307E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3062:  BSF    34.7
3064:  DECF   1A,F
3066:  MOVLW  1E
3068:  MOVLB  1
306A:  MOVWF  x1B
306C:  MOVLB  0
306E:  CALL   08E2
3072:  MOVLW  0C
3074:  MOVLB  1
3076:  MOVWF  x15
3078:  MOVLB  0
307A:  CALL   0A5E
....................          else 
307E:  BRA    3082
....................             {Flanco3 = 0;}     
3080:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3082:  MOVLW  0B
3084:  SUBWF  1A,W
3086:  CLRF   03
3088:  ADDLW  3A
308A:  MOVWF  FE9
308C:  MOVLW  00
308E:  ADDWFC 03,W
3090:  MOVWF  FEA
3092:  BTFSC  FEF.7
3094:  BRA    3098
3096:  BRA    30AC
....................        {clave[unidad-11]=9;} 
3098:  MOVLW  0B
309A:  SUBWF  1A,W
309C:  CLRF   03
309E:  ADDLW  3A
30A0:  MOVWF  FE9
30A2:  MOVLW  00
30A4:  ADDWFC 03,W
30A6:  MOVWF  FEA
30A8:  MOVLW  09
30AA:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
30AC:  MOVLW  0B
30AE:  SUBWF  1A,W
30B0:  CLRF   03
30B2:  ADDLW  3A
30B4:  MOVWF  FE9
30B6:  MOVLW  00
30B8:  ADDWFC 03,W
30BA:  MOVWF  FEA
30BC:  BTFSC  FEF.7
30BE:  BRA    30D8
30C0:  MOVF   FEF,W
30C2:  SUBLW  09
30C4:  BC    30D8
....................        {clave[unidad-11]=0;} 
30C6:  MOVLW  0B
30C8:  SUBWF  1A,W
30CA:  CLRF   03
30CC:  ADDLW  3A
30CE:  MOVWF  FE9
30D0:  MOVLW  00
30D2:  ADDWFC 03,W
30D4:  MOVWF  FEA
30D6:  CLRF   FEF
....................        if(unidad<11) 
30D8:  MOVF   1A,W
30DA:  SUBLW  0A
30DC:  BNC   30E6
....................        {Menu=5;unidad=11;} 
30DE:  MOVLW  05
30E0:  MOVWF  17
30E2:  MOVLW  0B
30E4:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
30E6:  MOVFF  1A,116
30EA:  MOVLW  04
30EC:  MOVLB  1
30EE:  MOVWF  x17
30F0:  MOVLB  0
30F2:  CALL   09EC
....................        lcd_putc(t[2]); 
30F6:  MOVFF  39,115
30FA:  CALL   0A5E
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
30FE:  MOVF   1A,W
3100:  SUBLW  0E
3102:  BTFSC  FD8.0
3104:  BRA    326E
....................        { 
....................             lcd_gotoxy(1,1); 
3106:  MOVLW  01
3108:  MOVLB  1
310A:  MOVWF  x16
310C:  MOVWF  x17
310E:  MOVLB  0
3110:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
3114:  MOVLW  BA
3116:  MOVWF  FF6
3118:  MOVLW  05
311A:  MOVWF  FF7
311C:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
3120:  MOVLW  01
3122:  MOVLB  1
3124:  MOVWF  x16
3126:  MOVLW  02
3128:  MOVWF  x17
312A:  MOVLB  0
312C:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
3130:  MOVLW  D0
3132:  MOVWF  FF6
3134:  MOVLW  05
3136:  MOVWF  FF7
3138:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
313C:  MOVLW  01
313E:  MOVLB  1
3140:  MOVWF  x16
3142:  MOVLW  03
3144:  MOVWF  x17
3146:  MOVLB  0
3148:  CALL   09EC
....................             printf(lcd_putc,"     Almacenada     "); 
314C:  MOVLW  E6
314E:  MOVWF  FF6
3150:  MOVLW  05
3152:  MOVWF  FF7
3154:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
3158:  MOVLW  01
315A:  MOVLB  1
315C:  MOVWF  x16
315E:  MOVLW  04
3160:  MOVWF  x17
3162:  MOVLB  0
3164:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
3168:  MOVLW  FC
316A:  MOVWF  FF6
316C:  MOVLW  05
316E:  MOVWF  FF7
3170:  CALL   0EEA
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3174:  CLRF   FA9
3176:  MOVFF  3A,FA8
317A:  BCF    FA6.6
317C:  BCF    FA6.7
317E:  BSF    FA6.2
3180:  MOVF   FF2,W
3182:  MOVWF  00
3184:  BCF    FF2.7
3186:  MOVLB  F
3188:  MOVLW  55
318A:  MOVWF  FA7
318C:  MOVLW  AA
318E:  MOVWF  FA7
3190:  BSF    FA6.1
3192:  BTFSC  FA6.1
3194:  BRA    3192
3196:  BCF    FA6.2
3198:  MOVF   00,W
319A:  IORWF  FF2,F
319C:  MOVLW  14
319E:  MOVLB  1
31A0:  MOVWF  x1B
31A2:  MOVLB  0
31A4:  CALL   08E2
31A8:  MOVLW  01
31AA:  MOVWF  FA9
31AC:  MOVFF  3B,FA8
31B0:  BCF    FA6.6
31B2:  BCF    FA6.7
31B4:  BSF    FA6.2
31B6:  MOVF   FF2,W
31B8:  MOVWF  00
31BA:  BCF    FF2.7
31BC:  MOVLB  F
31BE:  MOVLW  55
31C0:  MOVWF  FA7
31C2:  MOVLW  AA
31C4:  MOVWF  FA7
31C6:  BSF    FA6.1
31C8:  BTFSC  FA6.1
31CA:  BRA    31C8
31CC:  BCF    FA6.2
31CE:  MOVF   00,W
31D0:  IORWF  FF2,F
31D2:  MOVLW  14
31D4:  MOVLB  1
31D6:  MOVWF  x1B
31D8:  MOVLB  0
31DA:  CALL   08E2
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
31DE:  MOVLW  02
31E0:  MOVWF  FA9
31E2:  MOVFF  3C,FA8
31E6:  BCF    FA6.6
31E8:  BCF    FA6.7
31EA:  BSF    FA6.2
31EC:  MOVF   FF2,W
31EE:  MOVWF  00
31F0:  BCF    FF2.7
31F2:  MOVLB  F
31F4:  MOVLW  55
31F6:  MOVWF  FA7
31F8:  MOVLW  AA
31FA:  MOVWF  FA7
31FC:  BSF    FA6.1
31FE:  BTFSC  FA6.1
3200:  BRA    31FE
3202:  BCF    FA6.2
3204:  MOVF   00,W
3206:  IORWF  FF2,F
3208:  MOVLW  14
320A:  MOVLB  1
320C:  MOVWF  x1B
320E:  MOVLB  0
3210:  CALL   08E2
3214:  MOVLW  03
3216:  MOVWF  FA9
3218:  MOVFF  3D,FA8
321C:  BCF    FA6.6
321E:  BCF    FA6.7
3220:  BSF    FA6.2
3222:  MOVF   FF2,W
3224:  MOVWF  00
3226:  BCF    FF2.7
3228:  MOVLB  F
322A:  MOVLW  55
322C:  MOVWF  FA7
322E:  MOVLW  AA
3230:  MOVWF  FA7
3232:  BSF    FA6.1
3234:  BTFSC  FA6.1
3236:  BRA    3234
3238:  BCF    FA6.2
323A:  MOVF   00,W
323C:  IORWF  FF2,F
323E:  MOVLW  14
3240:  MOVLB  1
3242:  MOVWF  x1B
3244:  MOVLB  0
3246:  CALL   08E2
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
324A:  MOVLW  02
324C:  MOVLB  1
324E:  MOVWF  x00
3250:  MOVLW  FA
3252:  MOVWF  x1B
3254:  MOVLB  0
3256:  CALL   08E2
325A:  MOVLB  1
325C:  DECFSZ x00,F
325E:  BRA    3250
3260:  MOVLW  01
3262:  MOVWF  17
3264:  CLRF   36
3266:  MOVLW  02
3268:  MOVWF  1B
326A:  MOVWF  1D
326C:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
326E:  MOVF   1A,W
3270:  SUBLW  0B
3272:  BC    3296
3274:  MOVF   1A,W
3276:  SUBLW  0D
3278:  BNC   3296
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
327A:  MOVLW  01
327C:  SUBWF  1A,W
327E:  MOVLB  1
3280:  MOVWF  x00
3282:  MOVWF  x16
3284:  MOVLW  04
3286:  MOVWF  x17
3288:  MOVLB  0
328A:  CALL   09EC
....................             lcd_putc(t[1]); 
328E:  MOVFF  38,115
3292:  CALL   0A5E
3296:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
3298:  MOVF   17,W
329A:  SUBLW  06
329C:  BTFSS  FD8.2
329E:  BRA    340E
....................    { 
....................    lcd_gotoxy(1,2); 
32A0:  MOVLW  01
32A2:  MOVWF  x16
32A4:  MOVLW  02
32A6:  MOVWF  x17
32A8:  MOVLB  0
32AA:  CALL   09EC
....................    printf(lcd_putc,"     Media Movil    "); 
32AE:  MOVLW  12
32B0:  MOVWF  FF6
32B2:  MOVLW  06
32B4:  MOVWF  FF7
32B6:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
32BA:  MOVLW  01
32BC:  MOVLB  1
32BE:  MOVWF  x16
32C0:  MOVLW  03
32C2:  MOVWF  x17
32C4:  MOVLB  0
32C6:  CALL   09EC
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
32CA:  MOVLW  28
32CC:  MOVWF  FF6
32CE:  MOVLW  06
32D0:  MOVWF  FF7
32D2:  MOVLW  07
32D4:  MOVLB  1
32D6:  MOVWF  x08
32D8:  MOVLB  0
32DA:  CALL   0F0A
32DE:  MOVFF  2A,100
32E2:  MOVLW  01
32E4:  MOVLB  1
32E6:  MOVWF  x01
32E8:  MOVLB  0
32EA:  CALL   0F5E
32EE:  MOVLW  20
32F0:  MOVLB  1
32F2:  MOVWF  x15
32F4:  MOVLB  0
32F6:  CALL   0A5E
32FA:  MOVLW  20
32FC:  MOVLB  1
32FE:  MOVWF  x15
3300:  MOVLB  0
3302:  CALL   0A5E
3306:  MOVLW  20
3308:  MOVLB  1
330A:  MOVWF  x15
330C:  MOVLB  0
330E:  CALL   0A5E
....................     
....................    if(MediaMovil>12) 
3312:  MOVF   2A,W
3314:  SUBLW  0C
3316:  BC    331C
....................    {MediaMovil=12;} 
3318:  MOVLW  0C
331A:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
331C:  MOVF   2A,F
331E:  BNZ   3324
....................    {MediaMovil=1;} 
3320:  MOVLW  01
3322:  MOVWF  2A
....................     
....................       if(UP)//Si oprime hacia arriba 
3324:  BSF    F93.3
3326:  BTFSS  F81.3
3328:  BRA    3342
....................       {  if(Flanco == 0)  
332A:  BTFSC  34.4
332C:  BRA    3340
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
332E:  MOVLW  01
3330:  ADDWF  2A,F
3332:  BSF    34.4
3334:  MOVLW  1E
3336:  MOVLB  1
3338:  MOVWF  x1B
333A:  MOVLB  0
333C:  CALL   08E2
....................          else 
3340:  BRA    3344
....................             {Flanco = 0;} 
3342:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3344:  BSF    F93.2
3346:  BTFSS  F81.2
3348:  BRA    3362
....................       {  if(Flanco2 == 0)  
334A:  BTFSC  34.6
334C:  BRA    3360
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
334E:  MOVLW  01
3350:  SUBWF  2A,F
3352:  BSF    34.6
3354:  MOVLW  1E
3356:  MOVLB  1
3358:  MOVWF  x1B
335A:  MOVLB  0
335C:  CALL   08E2
....................          else 
3360:  BRA    3364
....................             {Flanco2 = 0;} 
3362:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3364:  BSF    F93.0
3366:  BTFSS  F81.0
3368:  BRA    33CC
....................       {  if(Flanco1 == 0)  
336A:  BTFSC  34.5
336C:  BRA    33CA
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
336E:  MOVLW  01
3370:  MOVWF  17
3372:  CLRF   36
3374:  MOVLW  02
3376:  MOVWF  1B
3378:  MOVWF  1D
337A:  MOVLW  0B
337C:  MOVWF  1A
337E:  MOVLW  02
3380:  MOVLB  1
3382:  MOVWF  x00
3384:  MOVLW  FA
3386:  MOVWF  x1B
3388:  MOVLB  0
338A:  CALL   08E2
338E:  MOVLB  1
3390:  DECFSZ x00,F
3392:  BRA    3384
3394:  MOVLW  0C
3396:  MOVWF  x15
3398:  MOVLB  0
339A:  CALL   0A5E
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
339E:  MOVLW  2A
33A0:  MOVWF  FA9
33A2:  MOVFF  2A,FA8
33A6:  BCF    FA6.6
33A8:  BCF    FA6.7
33AA:  BSF    FA6.2
33AC:  MOVF   FF2,W
33AE:  MOVWF  00
33B0:  BCF    FF2.7
33B2:  MOVLB  F
33B4:  MOVLW  55
33B6:  MOVWF  FA7
33B8:  MOVLW  AA
33BA:  MOVWF  FA7
33BC:  BSF    FA6.1
33BE:  BTFSC  FA6.1
33C0:  BRA    33BE
33C2:  BCF    FA6.2
33C4:  MOVF   00,W
33C6:  IORWF  FF2,F
33C8:  MOVLB  0
....................             }} 
....................          else 
33CA:  BRA    33CE
....................             {Flanco1 = 0;}    
33CC:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
33CE:  BSF    F93.1
33D0:  BTFSS  F81.1
33D2:  BRA    340A
....................       {  if(Flanco3 == 0)  
33D4:  BTFSC  34.7
33D6:  BRA    3408
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
33D8:  MOVLW  01
33DA:  MOVWF  17
33DC:  CLRF   36
33DE:  MOVLW  02
33E0:  MOVWF  1B
33E2:  MOVWF  1D
33E4:  MOVLW  0B
33E6:  MOVWF  1A
33E8:  MOVLW  02
33EA:  MOVLB  1
33EC:  MOVWF  x00
33EE:  MOVLW  FA
33F0:  MOVWF  x1B
33F2:  MOVLB  0
33F4:  CALL   08E2
33F8:  MOVLB  1
33FA:  DECFSZ x00,F
33FC:  BRA    33EE
33FE:  MOVLW  0C
3400:  MOVWF  x15
3402:  MOVLB  0
3404:  CALL   0A5E
....................          else 
3408:  BRA    340C
....................             {Flanco3 = 0;}   
340A:  BCF    34.7
340C:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
340E:  MOVF   17,W
3410:  SUBLW  07
3412:  BTFSS  FD8.2
3414:  BRA    3804
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
3416:  MOVLW  01
3418:  MOVWF  x16
341A:  MOVWF  x17
341C:  MOVLB  0
341E:  CALL   09EC
....................    printf(lcd_putc,"  Zero Point Config "); 
3422:  MOVLW  38
3424:  MOVWF  FF6
3426:  MOVLW  06
3428:  MOVWF  FF7
342A:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
342E:  MOVLW  01
3430:  MOVLB  1
3432:  MOVWF  x16
3434:  MOVLW  02
3436:  MOVWF  x17
3438:  MOVLB  0
343A:  CALL   09EC
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
343E:  MOVLW  4E
3440:  MOVWF  FF6
3442:  MOVLW  06
3444:  MOVWF  FF7
3446:  MOVLW  08
3448:  MOVLB  1
344A:  MOVWF  x08
344C:  MOVLB  0
344E:  CALL   0F0A
3452:  MOVLW  01
3454:  MOVWF  FE9
3456:  MOVFF  8E,10B
345A:  MOVFF  8D,10A
345E:  MOVFF  8C,109
3462:  MOVFF  8B,108
3466:  MOVLB  1
3468:  MOVWF  x0C
346A:  MOVLB  0
346C:  CALL   1384
3470:  MOVLW  5B
3472:  MOVWF  FF6
3474:  MOVLW  06
3476:  MOVWF  FF7
3478:  MOVLW  08
347A:  MOVLB  1
347C:  MOVWF  x08
347E:  MOVLB  0
3480:  CALL   0F0A
....................    lcd_gotoxy(1,3); 
3484:  MOVLW  01
3486:  MOVLB  1
3488:  MOVWF  x16
348A:  MOVLW  03
348C:  MOVWF  x17
348E:  MOVLB  0
3490:  CALL   09EC
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
3494:  MOVLB  1
3496:  CLRF   x04
3498:  MOVLB  0
349A:  CALL   15F0
349E:  MOVFF  00,100
34A2:  MOVFF  01,101
34A6:  MOVFF  02,102
34AA:  MOVFF  03,103
34AE:  MOVLW  5A
34B0:  MOVLB  1
34B2:  MOVWF  x15
34B4:  MOVLB  0
34B6:  CALL   0A5E
34BA:  MOVLW  46
34BC:  MOVLB  1
34BE:  MOVWF  x15
34C0:  MOVLB  0
34C2:  CALL   0A5E
34C6:  MOVLW  3D
34C8:  MOVLB  1
34CA:  MOVWF  x15
34CC:  MOVLB  0
34CE:  CALL   0A5E
34D2:  MOVLW  01
34D4:  MOVWF  FE9
34D6:  MOVFF  4D,10B
34DA:  MOVFF  4C,10A
34DE:  MOVFF  4B,109
34E2:  MOVFF  4A,108
34E6:  MOVLB  1
34E8:  CLRF   x0C
34EA:  MOVLB  0
34EC:  CALL   1384
34F0:  MOVLW  6C
34F2:  MOVWF  FF6
34F4:  MOVLW  06
34F6:  MOVWF  FF7
34F8:  MOVLW  05
34FA:  MOVLB  1
34FC:  MOVWF  x08
34FE:  MOVLB  0
3500:  CALL   0F0A
3504:  MOVLW  01
3506:  MOVWF  FE9
3508:  MOVFF  103,10B
350C:  MOVFF  102,10A
3510:  MOVFF  101,109
3514:  MOVFF  100,108
3518:  MOVLB  1
351A:  CLRF   x0C
351C:  MOVLB  0
351E:  CALL   1384
....................    lcd_gotoxy(1,4); 
3522:  MOVLW  01
3524:  MOVLB  1
3526:  MOVWF  x16
3528:  MOVLW  04
352A:  MOVWF  x17
352C:  MOVLB  0
352E:  CALL   09EC
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
3532:  MOVLW  78
3534:  MOVWF  FF6
3536:  MOVLW  06
3538:  MOVWF  FF7
353A:  MOVLW  0C
353C:  MOVLB  1
353E:  MOVWF  x08
3540:  MOVLB  0
3542:  CALL   0F0A
3546:  MOVLW  01
3548:  MOVWF  FE9
354A:  MOVFF  BE,10B
354E:  MOVFF  BD,10A
3552:  MOVFF  BC,109
3556:  MOVFF  BB,108
355A:  MOVLB  1
355C:  CLRF   x0C
355E:  MOVLB  0
3560:  CALL   1384
....................      
....................       if(RIGHT)// Si oprime derecha 
3564:  BSF    F93.0
3566:  BTFSS  F81.0
3568:  BRA    37C2
....................       {  if(Flanco1 == 0)  
356A:  BTFSC  34.5
356C:  BRA    37C0
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
356E:  MOVLW  01
3570:  MOVWF  17
3572:  CLRF   36
3574:  MOVLW  02
3576:  MOVWF  1B
3578:  MOVWF  1D
357A:  MOVLW  0B
357C:  MOVWF  1A
357E:  MOVLW  02
3580:  MOVLB  1
3582:  MOVWF  x00
3584:  MOVLW  FA
3586:  MOVWF  x1B
3588:  MOVLB  0
358A:  CALL   08E2
358E:  MOVLB  1
3590:  DECFSZ x00,F
3592:  BRA    3584
3594:  MOVLW  0C
3596:  MOVWF  x15
3598:  MOVLB  0
359A:  CALL   0A5E
....................             Diferencia=zero_fabrica-sensores(0); 
359E:  MOVLB  1
35A0:  CLRF   x04
35A2:  MOVLB  0
35A4:  CALL   15F0
35A8:  MOVFF  FEA,101
35AC:  MOVFF  FE9,100
35B0:  BSF    FD8.1
35B2:  MOVFF  4D,105
35B6:  MOVFF  4C,104
35BA:  MOVFF  4B,103
35BE:  MOVFF  4A,102
35C2:  MOVFF  03,109
35C6:  MOVFF  02,108
35CA:  MOVFF  01,107
35CE:  MOVFF  00,106
35D2:  CALL   0C5E
35D6:  MOVFF  101,FEA
35DA:  MOVFF  100,FE9
35DE:  MOVFF  03,BE
35E2:  MOVFF  02,BD
35E6:  MOVFF  01,BC
35EA:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
35EE:  MOVLB  1
35F0:  CLRF   x02
35F2:  CLRF   x01
35F4:  CLRF   x00
35F6:  MOVLB  0
35F8:  CLRF   xFF
35FA:  MOVFF  BE,106
35FE:  MOVFF  BD,105
3602:  MOVFF  BC,104
3606:  MOVFF  BB,103
360A:  CALL   1536
360E:  BC    3612
3610:  BNZ   3640
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
3612:  MOVLW  0A
3614:  MOVWF  2B
3616:  MOVLW  32
3618:  MOVWF  FA9
361A:  MOVFF  2B,FA8
361E:  BCF    FA6.6
3620:  BCF    FA6.7
3622:  BSF    FA6.2
3624:  MOVF   FF2,W
3626:  MOVWF  00
3628:  BCF    FF2.7
362A:  MOVLB  F
362C:  MOVLW  55
362E:  MOVWF  FA7
3630:  MOVLW  AA
3632:  MOVWF  FA7
3634:  BSF    FA6.1
3636:  BTFSC  FA6.1
3638:  BRA    3636
363A:  BCF    FA6.2
363C:  MOVF   00,W
363E:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
3640:  MOVFF  BE,102
3644:  MOVFF  BD,101
3648:  MOVFF  BC,100
364C:  MOVFF  BB,FF
3650:  MOVLB  1
3652:  CLRF   x06
3654:  CLRF   x05
3656:  CLRF   x04
3658:  CLRF   x03
365A:  MOVLB  0
365C:  CALL   1536
3660:  BNC   3692
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
3662:  MOVLW  14
3664:  MOVWF  2B
3666:  MOVLW  32
3668:  MOVWF  FA9
366A:  MOVFF  2B,FA8
366E:  BCF    FA6.6
3670:  BCF    FA6.7
3672:  BSF    FA6.2
3674:  MOVF   FF2,W
3676:  MOVWF  00
3678:  BCF    FF2.7
367A:  MOVLB  F
367C:  MOVLW  55
367E:  MOVWF  FA7
3680:  MOVLW  AA
3682:  MOVWF  FA7
3684:  BSF    FA6.1
3686:  BTFSC  FA6.1
3688:  BRA    3686
368A:  BCF    FA6.2
368C:  MOVF   00,W
368E:  IORWF  FF2,F
3690:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
3692:  MOVFF  BB,00
3696:  MOVFF  BC,01
369A:  MOVFF  BD,02
369E:  MOVFF  BE,03
36A2:  BCF    01.7
36A4:  MOVFF  BE,BE
36A8:  MOVFF  BD,BD
36AC:  MOVFF  01,BC
36B0:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
36B4:  MOVFF  BE,B6
36B8:  MOVFF  BD,B5
36BC:  MOVFF  BC,B4
36C0:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
36C4:  MOVFF  B6,102
36C8:  MOVFF  B5,101
36CC:  MOVFF  B4,100
36D0:  MOVFF  B3,FF
36D4:  CALL   15B4
36D8:  MOVFF  01,24
....................             Temporal1=Temporal1-Entero1; 
36DC:  MOVLB  1
36DE:  CLRF   x0A
36E0:  MOVFF  24,109
36E4:  MOVLB  0
36E6:  CALL   0ACA
36EA:  BSF    FD8.1
36EC:  MOVFF  B6,105
36F0:  MOVFF  B5,104
36F4:  MOVFF  B4,103
36F8:  MOVFF  B3,102
36FC:  MOVFF  03,109
3700:  MOVFF  02,108
3704:  MOVFF  01,107
3708:  MOVFF  00,106
370C:  CALL   0C5E
3710:  MOVFF  03,B6
3714:  MOVFF  02,B5
3718:  MOVFF  01,B4
371C:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
3720:  MOVFF  B6,118
3724:  MOVFF  B5,117
3728:  MOVFF  B4,116
372C:  MOVFF  B3,115
3730:  MOVLB  1
3732:  CLRF   x1C
3734:  CLRF   x1B
3736:  MOVLW  48
3738:  MOVWF  x1A
373A:  MOVLW  85
373C:  MOVWF  x19
373E:  MOVLB  0
3740:  CALL   11CA
3744:  MOVFF  03,BA
3748:  MOVFF  02,B9
374C:  MOVFF  01,B8
3750:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
3754:  MOVFF  BA,102
3758:  MOVFF  B9,101
375C:  MOVFF  B8,100
3760:  MOVFF  B7,FF
3764:  CALL   15B4
3768:  MOVFF  01,25
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
376C:  MOVLW  3C
376E:  MOVWF  FA9
3770:  MOVFF  24,FA8
3774:  BCF    FA6.6
3776:  BCF    FA6.7
3778:  BSF    FA6.2
377A:  MOVF   FF2,W
377C:  MOVWF  00
377E:  BCF    FF2.7
3780:  MOVLB  F
3782:  MOVLW  55
3784:  MOVWF  FA7
3786:  MOVLW  AA
3788:  MOVWF  FA7
378A:  BSF    FA6.1
378C:  BTFSC  FA6.1
378E:  BRA    378C
3790:  BCF    FA6.2
3792:  MOVF   00,W
3794:  IORWF  FF2,F
3796:  MOVLW  3D
3798:  MOVWF  FA9
379A:  MOVFF  25,FA8
379E:  BCF    FA6.6
37A0:  BCF    FA6.7
37A2:  BSF    FA6.2
37A4:  MOVF   FF2,W
37A6:  MOVWF  00
37A8:  BCF    FF2.7
37AA:  MOVLW  55
37AC:  MOVWF  FA7
37AE:  MOVLW  AA
37B0:  MOVWF  FA7
37B2:  BSF    FA6.1
37B4:  BTFSC  FA6.1
37B6:  BRA    37B4
37B8:  BCF    FA6.2
37BA:  MOVF   00,W
37BC:  IORWF  FF2,F
37BE:  MOVLB  0
....................             }} 
....................          else 
37C0:  BRA    37C4
....................             {Flanco1 = 0;}    
37C2:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
37C4:  BSF    F93.1
37C6:  BTFSS  F81.1
37C8:  BRA    3800
....................       {  if(Flanco3 == 0)  
37CA:  BTFSC  34.7
37CC:  BRA    37FE
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
37CE:  MOVLW  01
37D0:  MOVWF  17
37D2:  CLRF   36
37D4:  MOVLW  02
37D6:  MOVWF  1B
37D8:  MOVWF  1D
37DA:  MOVLW  0B
37DC:  MOVWF  1A
37DE:  MOVLW  02
37E0:  MOVLB  1
37E2:  MOVWF  x00
37E4:  MOVLW  FA
37E6:  MOVWF  x1B
37E8:  MOVLB  0
37EA:  CALL   08E2
37EE:  MOVLB  1
37F0:  DECFSZ x00,F
37F2:  BRA    37E4
37F4:  MOVLW  0C
37F6:  MOVWF  x15
37F8:  MOVLB  0
37FA:  CALL   0A5E
....................          else 
37FE:  BRA    3802
....................             {Flanco3 = 0;}   
3800:  BCF    34.7
3802:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
3804:  MOVF   17,W
3806:  SUBLW  08
3808:  BTFSS  FD8.2
380A:  BRA    3D5C
....................    { 
....................    lcd_gotoxy(1,1); 
380C:  MOVLW  01
380E:  MOVWF  x16
3810:  MOVWF  x17
3812:  MOVLB  0
3814:  CALL   09EC
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
3818:  MOVLB  1
381A:  CLRF   x04
381C:  MOVLB  0
381E:  CALL   15F0
3822:  MOVFF  00,100
3826:  MOVFF  01,101
382A:  MOVFF  02,102
382E:  MOVFF  03,103
3832:  MOVLW  8A
3834:  MOVWF  FF6
3836:  MOVLW  06
3838:  MOVWF  FF7
383A:  MOVLW  0A
383C:  MOVLB  1
383E:  MOVWF  x08
3840:  MOVLB  0
3842:  CALL   0F0A
3846:  MOVLW  01
3848:  MOVWF  FE9
384A:  MOVFF  103,10B
384E:  MOVFF  102,10A
3852:  MOVFF  101,109
3856:  MOVFF  100,108
385A:  MOVLB  1
385C:  CLRF   x0C
385E:  MOVLB  0
3860:  CALL   1384
3864:  MOVLW  20
3866:  MOVLB  1
3868:  MOVWF  x15
386A:  MOVLB  0
386C:  CALL   0A5E
3870:  MOVLW  20
3872:  MOVLB  1
3874:  MOVWF  x15
3876:  MOVLB  0
3878:  CALL   0A5E
....................    lcd_gotoxy(1,2); 
387C:  MOVLW  01
387E:  MOVLB  1
3880:  MOVWF  x16
3882:  MOVLW  02
3884:  MOVWF  x17
3886:  MOVLB  0
3888:  CALL   09EC
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
388C:  MOVLB  1
388E:  CLRF   x0A
3890:  MOVFF  29,109
3894:  MOVLB  0
3896:  CALL   0ACA
389A:  MOVFF  00,100
389E:  MOVFF  01,101
38A2:  MOVFF  02,102
38A6:  MOVFF  03,103
38AA:  MOVFF  03,107
38AE:  MOVFF  02,106
38B2:  MOVFF  01,105
38B6:  MOVFF  00,104
38BA:  MOVLB  1
38BC:  CLRF   x0B
38BE:  CLRF   x0A
38C0:  MOVLW  7F
38C2:  MOVWF  x09
38C4:  MOVLW  86
38C6:  MOVWF  x08
38C8:  MOVLB  0
38CA:  CALL   0B00
38CE:  MOVLB  1
38D0:  CLRF   x18
38D2:  CLRF   x17
38D4:  MOVLW  48
38D6:  MOVWF  x16
38D8:  MOVLW  85
38DA:  MOVWF  x15
38DC:  MOVFF  03,11C
38E0:  MOVFF  02,11B
38E4:  MOVFF  01,11A
38E8:  MOVFF  00,119
38EC:  MOVLB  0
38EE:  CALL   11CA
38F2:  MOVFF  00,100
38F6:  MOVFF  01,101
38FA:  MOVFF  02,102
38FE:  MOVFF  03,103
3902:  MOVLW  01
3904:  MOVLB  1
3906:  MOVWF  x04
3908:  MOVLB  0
390A:  CALL   15F0
390E:  MOVFF  00,104
3912:  MOVFF  01,105
3916:  MOVFF  02,106
391A:  MOVFF  03,107
391E:  MOVLW  9C
3920:  MOVWF  FF6
3922:  MOVLW  06
3924:  MOVWF  FF7
3926:  MOVLW  05
3928:  MOVLB  1
392A:  MOVWF  x08
392C:  MOVLB  0
392E:  CALL   0F0A
3932:  MOVLW  01
3934:  MOVWF  FE9
3936:  MOVFF  103,10B
393A:  MOVFF  102,10A
393E:  MOVFF  101,109
3942:  MOVFF  100,108
3946:  MOVLB  1
3948:  CLRF   x0C
394A:  MOVLB  0
394C:  CALL   1384
3950:  MOVLW  25
3952:  MOVLB  1
3954:  MOVWF  x15
3956:  MOVLB  0
3958:  CALL   0A5E
395C:  MOVLW  A8
395E:  MOVWF  FF6
3960:  MOVLW  06
3962:  MOVWF  FF7
3964:  MOVLW  04
3966:  MOVLB  1
3968:  MOVWF  x08
396A:  MOVLB  0
396C:  CALL   0F0A
3970:  MOVLW  01
3972:  MOVWF  FE9
3974:  MOVFF  107,10B
3978:  MOVFF  106,10A
397C:  MOVFF  105,109
3980:  MOVFF  104,108
3984:  MOVLB  1
3986:  CLRF   x0C
3988:  MOVLB  0
398A:  CALL   1384
398E:  MOVLW  20
3990:  MOVLB  1
3992:  MOVWF  x15
3994:  MOVLB  0
3996:  CALL   0A5E
....................    lcd_gotoxy(1,3); 
399A:  MOVLW  01
399C:  MOVLB  1
399E:  MOVWF  x16
39A0:  MOVLW  03
39A2:  MOVWF  x17
39A4:  MOVLB  0
39A6:  CALL   09EC
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
39AA:  MOVLW  02
39AC:  MOVLB  1
39AE:  MOVWF  x04
39B0:  MOVLB  0
39B2:  CALL   15F0
39B6:  MOVFF  00,100
39BA:  MOVFF  01,101
39BE:  MOVFF  02,102
39C2:  MOVFF  03,103
39C6:  MOVFF  03,107
39CA:  MOVFF  02,106
39CE:  MOVFF  01,105
39D2:  MOVFF  00,104
39D6:  MOVLB  1
39D8:  CLRF   x0B
39DA:  MOVLW  C0
39DC:  MOVWF  x0A
39DE:  MOVLW  7F
39E0:  MOVWF  x09
39E2:  MOVLW  88
39E4:  MOVWF  x08
39E6:  MOVLB  0
39E8:  CALL   0B00
39EC:  MOVLB  1
39EE:  CLRF   x18
39F0:  CLRF   x17
39F2:  MOVLW  48
39F4:  MOVWF  x16
39F6:  MOVLW  85
39F8:  MOVWF  x15
39FA:  MOVFF  03,11C
39FE:  MOVFF  02,11B
3A02:  MOVFF  01,11A
3A06:  MOVFF  00,119
3A0A:  MOVLB  0
3A0C:  CALL   11CA
3A10:  MOVFF  00,100
3A14:  MOVFF  01,101
3A18:  MOVFF  02,102
3A1C:  MOVFF  03,103
3A20:  MOVLW  B4
3A22:  MOVWF  FF6
3A24:  MOVLW  06
3A26:  MOVWF  FF7
3A28:  MOVLW  04
3A2A:  MOVLB  1
3A2C:  MOVWF  x08
3A2E:  MOVLB  0
3A30:  CALL   0F0A
3A34:  MOVLW  01
3A36:  MOVWF  FE9
3A38:  MOVFF  8E,10B
3A3C:  MOVFF  8D,10A
3A40:  MOVFF  8C,109
3A44:  MOVFF  8B,108
3A48:  MOVLB  1
3A4A:  MOVWF  x0C
3A4C:  MOVLB  0
3A4E:  CALL   1384
3A52:  MOVLW  BD
3A54:  MOVWF  FF6
3A56:  MOVLW  06
3A58:  MOVWF  FF7
3A5A:  MOVLW  0A
3A5C:  MOVLB  1
3A5E:  MOVWF  x08
3A60:  MOVLB  0
3A62:  CALL   0F0A
3A66:  MOVLW  01
3A68:  MOVWF  FE9
3A6A:  MOVFF  103,10B
3A6E:  MOVFF  102,10A
3A72:  MOVFF  101,109
3A76:  MOVFF  100,108
3A7A:  MOVLB  1
3A7C:  CLRF   x0C
3A7E:  MOVLB  0
3A80:  CALL   1384
....................    lcd_gotoxy(1,4); 
3A84:  MOVLW  01
3A86:  MOVLB  1
3A88:  MOVWF  x16
3A8A:  MOVLW  04
3A8C:  MOVWF  x17
3A8E:  MOVLB  0
3A90:  CALL   09EC
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
3A94:  MOVLW  CE
3A96:  MOVWF  FF6
3A98:  MOVLW  06
3A9A:  MOVWF  FF7
3A9C:  MOVLW  09
3A9E:  MOVLB  1
3AA0:  MOVWF  x08
3AA2:  MOVLB  0
3AA4:  CALL   0F0A
3AA8:  MOVLW  89
3AAA:  MOVWF  FE9
3AAC:  MOVFF  C2,10B
3AB0:  MOVFF  C1,10A
3AB4:  MOVFF  C0,109
3AB8:  MOVFF  BF,108
3ABC:  MOVLW  02
3ABE:  MOVLB  1
3AC0:  MOVWF  x0C
3AC2:  MOVLB  0
3AC4:  CALL   1384
3AC8:  MOVLW  20
3ACA:  MOVLB  1
3ACC:  MOVWF  x15
3ACE:  MOVLB  0
3AD0:  CALL   0A5E
....................        
....................       if(UP)//Si oprime hacia arriba 
3AD4:  BSF    F93.3
3AD6:  BTFSS  F81.3
3AD8:  BRA    3B4E
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
3ADA:  BCF    FD8.1
3ADC:  MOVFF  C2,105
3AE0:  MOVFF  C1,104
3AE4:  MOVFF  C0,103
3AE8:  MOVFF  BF,102
3AEC:  MOVLW  0A
3AEE:  MOVLB  1
3AF0:  MOVWF  x09
3AF2:  MOVLW  D7
3AF4:  MOVWF  x08
3AF6:  MOVLW  23
3AF8:  MOVWF  x07
3AFA:  MOVLW  78
3AFC:  MOVWF  x06
3AFE:  MOVLB  0
3B00:  CALL   0C5E
3B04:  MOVFF  03,C2
3B08:  MOVFF  02,C1
3B0C:  MOVFF  01,C0
3B10:  MOVFF  00,BF
3B14:  MOVLW  32
3B16:  MOVLB  1
3B18:  MOVWF  x1B
3B1A:  MOVLB  0
3B1C:  CALL   08E2
....................          if(Ajuste1>30.0) 
3B20:  MOVLB  1
3B22:  CLRF   x02
3B24:  CLRF   x01
3B26:  MOVLW  70
3B28:  MOVWF  x00
3B2A:  MOVLW  83
3B2C:  MOVLB  0
3B2E:  MOVWF  xFF
3B30:  MOVFF  C2,106
3B34:  MOVFF  C1,105
3B38:  MOVFF  C0,104
3B3C:  MOVFF  BF,103
3B40:  CALL   1536
3B44:  BNC   3B4E
....................          {Ajuste1=0.0;} 
3B46:  CLRF   xC2
3B48:  CLRF   xC1
3B4A:  CLRF   xC0
3B4C:  CLRF   xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3B4E:  BSF    F93.2
3B50:  BTFSS  F81.2
3B52:  BRA    3BC4
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
3B54:  BSF    FD8.1
3B56:  MOVFF  C2,105
3B5A:  MOVFF  C1,104
3B5E:  MOVFF  C0,103
3B62:  MOVFF  BF,102
3B66:  MOVLW  0A
3B68:  MOVLB  1
3B6A:  MOVWF  x09
3B6C:  MOVLW  D7
3B6E:  MOVWF  x08
3B70:  MOVLW  23
3B72:  MOVWF  x07
3B74:  MOVLW  78
3B76:  MOVWF  x06
3B78:  MOVLB  0
3B7A:  CALL   0C5E
3B7E:  MOVFF  03,C2
3B82:  MOVFF  02,C1
3B86:  MOVFF  01,C0
3B8A:  MOVFF  00,BF
3B8E:  MOVLW  32
3B90:  MOVLB  1
3B92:  MOVWF  x1B
3B94:  MOVLB  0
3B96:  CALL   08E2
....................          if(Ajuste1<0.0) 
3B9A:  MOVFF  C2,102
3B9E:  MOVFF  C1,101
3BA2:  MOVFF  C0,100
3BA6:  MOVFF  BF,FF
3BAA:  MOVLB  1
3BAC:  CLRF   x06
3BAE:  CLRF   x05
3BB0:  CLRF   x04
3BB2:  CLRF   x03
3BB4:  MOVLB  0
3BB6:  CALL   1536
3BBA:  BNC   3BC4
....................          {Ajuste1=0.0;} 
3BBC:  CLRF   xC2
3BBE:  CLRF   xC1
3BC0:  CLRF   xC0
3BC2:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
3BC4:  BSF    F93.0
3BC6:  BTFSS  F81.0
3BC8:  BRA    3D1A
....................       {  if(Flanco1 == 0)  
3BCA:  BTFSC  34.5
3BCC:  BRA    3D18
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3BCE:  MOVLW  01
3BD0:  MOVWF  17
3BD2:  CLRF   36
3BD4:  MOVLW  02
3BD6:  MOVWF  1B
3BD8:  MOVWF  1D
3BDA:  MOVLW  0B
3BDC:  MOVWF  1A
3BDE:  MOVLW  1E
3BE0:  MOVLB  1
3BE2:  MOVWF  x1B
3BE4:  MOVLB  0
3BE6:  CALL   08E2
3BEA:  MOVLW  0C
3BEC:  MOVLB  1
3BEE:  MOVWF  x15
3BF0:  MOVLB  0
3BF2:  CALL   0A5E
....................             Temporal=Ajuste1; 
3BF6:  MOVFF  C2,AA
3BFA:  MOVFF  C1,A9
3BFE:  MOVFF  C0,A8
3C02:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
3C06:  MOVFF  C2,102
3C0A:  MOVFF  C1,101
3C0E:  MOVFF  C0,100
3C12:  MOVFF  BF,FF
3C16:  CALL   15B4
3C1A:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
3C1E:  MOVLB  1
3C20:  CLRF   x0A
3C22:  MOVFF  21,109
3C26:  MOVLB  0
3C28:  CALL   0ACA
3C2C:  BSF    FD8.1
3C2E:  MOVFF  AA,105
3C32:  MOVFF  A9,104
3C36:  MOVFF  A8,103
3C3A:  MOVFF  A7,102
3C3E:  MOVFF  03,109
3C42:  MOVFF  02,108
3C46:  MOVFF  01,107
3C4A:  MOVFF  00,106
3C4E:  CALL   0C5E
3C52:  MOVFF  03,AA
3C56:  MOVFF  02,A9
3C5A:  MOVFF  01,A8
3C5E:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
3C62:  MOVFF  AA,118
3C66:  MOVFF  A9,117
3C6A:  MOVFF  A8,116
3C6E:  MOVFF  A7,115
3C72:  MOVLB  1
3C74:  CLRF   x1C
3C76:  CLRF   x1B
3C78:  MOVLW  48
3C7A:  MOVWF  x1A
3C7C:  MOVLW  85
3C7E:  MOVWF  x19
3C80:  MOVLB  0
3C82:  CALL   11CA
3C86:  MOVFF  03,AE
3C8A:  MOVFF  02,AD
3C8E:  MOVFF  01,AC
3C92:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
3C96:  MOVFF  AE,102
3C9A:  MOVFF  AD,101
3C9E:  MOVFF  AC,100
3CA2:  MOVFF  AB,FF
3CA6:  CALL   15B4
3CAA:  MOVFF  01,22
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
3CAE:  MOVLW  19
3CB0:  MOVWF  FA9
3CB2:  MOVFF  21,FA8
3CB6:  BCF    FA6.6
3CB8:  BCF    FA6.7
3CBA:  BSF    FA6.2
3CBC:  MOVF   FF2,W
3CBE:  MOVWF  00
3CC0:  BCF    FF2.7
3CC2:  MOVLB  F
3CC4:  MOVLW  55
3CC6:  MOVWF  FA7
3CC8:  MOVLW  AA
3CCA:  MOVWF  FA7
3CCC:  BSF    FA6.1
3CCE:  BTFSC  FA6.1
3CD0:  BRA    3CCE
3CD2:  BCF    FA6.2
3CD4:  MOVF   00,W
3CD6:  IORWF  FF2,F
3CD8:  MOVLW  1A
3CDA:  MOVWF  FA9
3CDC:  MOVFF  22,FA8
3CE0:  BCF    FA6.6
3CE2:  BCF    FA6.7
3CE4:  BSF    FA6.2
3CE6:  MOVF   FF2,W
3CE8:  MOVWF  00
3CEA:  BCF    FF2.7
3CEC:  MOVLW  55
3CEE:  MOVWF  FA7
3CF0:  MOVLW  AA
3CF2:  MOVWF  FA7
3CF4:  BSF    FA6.1
3CF6:  BTFSC  FA6.1
3CF8:  BRA    3CF6
3CFA:  BCF    FA6.2
3CFC:  MOVF   00,W
3CFE:  IORWF  FF2,F
....................             delay_ms(1000); 
3D00:  MOVLW  04
3D02:  MOVLB  1
3D04:  MOVWF  x00
3D06:  MOVLW  FA
3D08:  MOVWF  x1B
3D0A:  MOVLB  0
3D0C:  CALL   08E2
3D10:  MOVLB  1
3D12:  DECFSZ x00,F
3D14:  BRA    3D06
3D16:  MOVLB  0
....................             }} 
....................          else 
3D18:  BRA    3D1C
....................             {Flanco1 = 0;}    
3D1A:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3D1C:  BSF    F93.1
3D1E:  BTFSS  F81.1
3D20:  BRA    3D58
....................       {  if(Flanco3 == 0)  
3D22:  BTFSC  34.7
3D24:  BRA    3D56
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3D26:  MOVLW  01
3D28:  MOVWF  17
3D2A:  CLRF   36
3D2C:  MOVLW  02
3D2E:  MOVWF  1B
3D30:  MOVWF  1D
3D32:  MOVLW  0B
3D34:  MOVWF  1A
3D36:  MOVLW  02
3D38:  MOVLB  1
3D3A:  MOVWF  x00
3D3C:  MOVLW  FA
3D3E:  MOVWF  x1B
3D40:  MOVLB  0
3D42:  CALL   08E2
3D46:  MOVLB  1
3D48:  DECFSZ x00,F
3D4A:  BRA    3D3C
3D4C:  MOVLW  0C
3D4E:  MOVWF  x15
3D50:  MOVLB  0
3D52:  CALL   0A5E
....................          else 
3D56:  BRA    3D5A
....................             {Flanco3 = 0;}   
3D58:  BCF    34.7
3D5A:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
3D5C:  MOVF   17,W
3D5E:  SUBLW  09
3D60:  BTFSS  FD8.2
3D62:  BRA    43AA
....................    { 
....................    lcd_gotoxy(1,1); 
3D64:  MOVLW  01
3D66:  MOVWF  x16
3D68:  MOVWF  x17
3D6A:  MOVLB  0
3D6C:  CALL   09EC
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
3D70:  MOVLB  1
3D72:  CLRF   x0A
3D74:  MOVFF  29,109
3D78:  MOVLB  0
3D7A:  CALL   0ACA
3D7E:  MOVFF  00,100
3D82:  MOVFF  01,101
3D86:  MOVFF  02,102
3D8A:  MOVFF  03,103
3D8E:  MOVFF  03,107
3D92:  MOVFF  02,106
3D96:  MOVFF  01,105
3D9A:  MOVFF  00,104
3D9E:  MOVLB  1
3DA0:  CLRF   x0B
3DA2:  CLRF   x0A
3DA4:  MOVLW  7F
3DA6:  MOVWF  x09
3DA8:  MOVLW  86
3DAA:  MOVWF  x08
3DAC:  MOVLB  0
3DAE:  CALL   0B00
3DB2:  MOVLB  1
3DB4:  CLRF   x18
3DB6:  CLRF   x17
3DB8:  MOVLW  48
3DBA:  MOVWF  x16
3DBC:  MOVLW  85
3DBE:  MOVWF  x15
3DC0:  MOVFF  03,11C
3DC4:  MOVFF  02,11B
3DC8:  MOVFF  01,11A
3DCC:  MOVFF  00,119
3DD0:  MOVLB  0
3DD2:  CALL   11CA
3DD6:  MOVFF  00,100
3DDA:  MOVFF  01,101
3DDE:  MOVFF  02,102
3DE2:  MOVFF  03,103
3DE6:  MOVLW  DE
3DE8:  MOVWF  FF6
3DEA:  MOVLW  06
3DEC:  MOVWF  FF7
3DEE:  MOVLW  0D
3DF0:  MOVLB  1
3DF2:  MOVWF  x08
3DF4:  MOVLB  0
3DF6:  CALL   0F0A
3DFA:  MOVLW  01
3DFC:  MOVWF  FE9
3DFE:  MOVFF  103,10B
3E02:  MOVFF  102,10A
3E06:  MOVFF  101,109
3E0A:  MOVFF  100,108
3E0E:  MOVLB  1
3E10:  CLRF   x0C
3E12:  MOVLB  0
3E14:  CALL   1384
3E18:  MOVLW  25
3E1A:  MOVLB  1
3E1C:  MOVWF  x15
3E1E:  MOVLB  0
3E20:  CALL   0A5E
3E24:  MOVLW  20
3E26:  MOVLB  1
3E28:  MOVWF  x15
3E2A:  MOVLB  0
3E2C:  CALL   0A5E
....................  
....................    lcd_gotoxy(1,4); 
3E30:  MOVLW  01
3E32:  MOVLB  1
3E34:  MOVWF  x16
3E36:  MOVLW  04
3E38:  MOVWF  x17
3E3A:  MOVLB  0
3E3C:  CALL   09EC
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
3E40:  MOVLW  02
3E42:  MOVLB  1
3E44:  MOVWF  x04
3E46:  MOVLB  0
3E48:  CALL   15F0
3E4C:  MOVFF  00,100
3E50:  MOVFF  01,101
3E54:  MOVFF  02,102
3E58:  MOVFF  03,103
3E5C:  MOVFF  03,107
3E60:  MOVFF  02,106
3E64:  MOVFF  01,105
3E68:  MOVFF  00,104
3E6C:  MOVLB  1
3E6E:  CLRF   x0B
3E70:  MOVLW  C0
3E72:  MOVWF  x0A
3E74:  MOVLW  7F
3E76:  MOVWF  x09
3E78:  MOVLW  88
3E7A:  MOVWF  x08
3E7C:  MOVLB  0
3E7E:  CALL   0B00
3E82:  MOVLB  1
3E84:  CLRF   x18
3E86:  CLRF   x17
3E88:  MOVLW  48
3E8A:  MOVWF  x16
3E8C:  MOVLW  85
3E8E:  MOVWF  x15
3E90:  MOVFF  03,11C
3E94:  MOVFF  02,11B
3E98:  MOVFF  01,11A
3E9C:  MOVFF  00,119
3EA0:  MOVLB  0
3EA2:  CALL   11CA
3EA6:  MOVFF  00,100
3EAA:  MOVFF  01,101
3EAE:  MOVFF  02,102
3EB2:  MOVFF  03,103
3EB6:  MOVLW  F4
3EB8:  MOVWF  FF6
3EBA:  MOVLW  06
3EBC:  MOVWF  FF7
3EBE:  MOVLW  04
3EC0:  MOVLB  1
3EC2:  MOVWF  x08
3EC4:  MOVLB  0
3EC6:  CALL   0F0A
3ECA:  MOVLW  01
3ECC:  MOVWF  FE9
3ECE:  MOVFF  8E,10B
3ED2:  MOVFF  8D,10A
3ED6:  MOVFF  8C,109
3EDA:  MOVFF  8B,108
3EDE:  MOVLB  1
3EE0:  MOVWF  x0C
3EE2:  MOVLB  0
3EE4:  CALL   1384
3EE8:  MOVLW  FD
3EEA:  MOVWF  FF6
3EEC:  MOVLW  06
3EEE:  MOVWF  FF7
3EF0:  MOVLW  0A
3EF2:  MOVLB  1
3EF4:  MOVWF  x08
3EF6:  MOVLB  0
3EF8:  CALL   0F0A
3EFC:  MOVLW  01
3EFE:  MOVWF  FE9
3F00:  MOVFF  103,10B
3F04:  MOVFF  102,10A
3F08:  MOVFF  101,109
3F0C:  MOVFF  100,108
3F10:  MOVLB  1
3F12:  CLRF   x0C
3F14:  MOVLB  0
3F16:  CALL   1384
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
3F1A:  BTFSC  4E.1
3F1C:  BRA    407C
3F1E:  BTFSC  4E.2
3F20:  BRA    407C
3F22:  BTFSC  4E.3
3F24:  BRA    407C
....................       { 
....................          if(UP)//Si oprime hacia arriba 
3F26:  BSF    F93.3
3F28:  BTFSS  F81.3
3F2A:  BRA    3F86
....................          { 
....................             delay_ms(500); 
3F2C:  MOVLW  02
3F2E:  MOVLB  1
3F30:  MOVWF  x00
3F32:  MOVLW  FA
3F34:  MOVWF  x1B
3F36:  MOVLB  0
3F38:  CALL   08E2
3F3C:  MOVLB  1
3F3E:  DECFSZ x00,F
3F40:  BRA    3F32
....................             if(UP) 
3F42:  BSF    F93.3
3F44:  BTFSS  F81.3
3F46:  BRA    3F84
....................             { 
....................                lcd_gotoxy(1,2); 
3F48:  MOVLW  01
3F4A:  MOVWF  x16
3F4C:  MOVLW  02
3F4E:  MOVWF  x17
3F50:  MOVLB  0
3F52:  CALL   09EC
....................                printf(lcd_putc,"   Modo Manual  "); 
3F56:  MOVLW  0E
3F58:  MOVWF  FF6
3F5A:  MOVLW  07
3F5C:  MOVWF  FF7
3F5E:  CALL   0EEA
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
3F62:  BSF    4E.1
3F64:  BCF    4E.2
3F66:  BCF    4E.3
3F68:  MOVLW  0A
3F6A:  MOVWF  2C
3F6C:  MOVWF  2E
....................                delay_ms(1000); 
3F6E:  MOVLW  04
3F70:  MOVLB  1
3F72:  MOVWF  x00
3F74:  MOVLW  FA
3F76:  MOVWF  x1B
3F78:  MOVLB  0
3F7A:  CALL   08E2
3F7E:  MOVLB  1
3F80:  DECFSZ x00,F
3F82:  BRA    3F74
3F84:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
3F86:  BSF    F93.2
3F88:  BTFSS  F81.2
3F8A:  BRA    3FE6
....................          { 
....................             delay_ms(500); 
3F8C:  MOVLW  02
3F8E:  MOVLB  1
3F90:  MOVWF  x00
3F92:  MOVLW  FA
3F94:  MOVWF  x1B
3F96:  MOVLB  0
3F98:  CALL   08E2
3F9C:  MOVLB  1
3F9E:  DECFSZ x00,F
3FA0:  BRA    3F92
....................             if(DOWN) 
3FA2:  BSF    F93.2
3FA4:  BTFSS  F81.2
3FA6:  BRA    3FE4
....................             { 
....................                lcd_gotoxy(1,2); 
3FA8:  MOVLW  01
3FAA:  MOVWF  x16
3FAC:  MOVLW  02
3FAE:  MOVWF  x17
3FB0:  MOVLB  0
3FB2:  CALL   09EC
....................                printf(lcd_putc,"   Modo Auto   "); 
3FB6:  MOVLW  20
3FB8:  MOVWF  FF6
3FBA:  MOVLW  07
3FBC:  MOVWF  FF7
3FBE:  CALL   0EEA
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
3FC2:  BSF    4E.2
3FC4:  BCF    4E.1
3FC6:  BCF    4E.3
3FC8:  MOVLW  0A
3FCA:  MOVWF  2D
3FCC:  MOVWF  2E
....................                delay_ms(1000); 
3FCE:  MOVLW  04
3FD0:  MOVLB  1
3FD2:  MOVWF  x00
3FD4:  MOVLW  FA
3FD6:  MOVWF  x1B
3FD8:  MOVLB  0
3FDA:  CALL   08E2
3FDE:  MOVLB  1
3FE0:  DECFSZ x00,F
3FE2:  BRA    3FD4
3FE4:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
3FE6:  BSF    F93.0
3FE8:  BTFSS  F81.0
3FEA:  BRA    4046
....................          { 
....................             delay_ms(500); 
3FEC:  MOVLW  02
3FEE:  MOVLB  1
3FF0:  MOVWF  x00
3FF2:  MOVLW  FA
3FF4:  MOVWF  x1B
3FF6:  MOVLB  0
3FF8:  CALL   08E2
3FFC:  MOVLB  1
3FFE:  DECFSZ x00,F
4000:  BRA    3FF2
....................             if(RIGHT) 
4002:  BSF    F93.0
4004:  BTFSS  F81.0
4006:  BRA    4044
....................             { 
....................                lcd_gotoxy(1,2); 
4008:  MOVLW  01
400A:  MOVWF  x16
400C:  MOVLW  02
400E:  MOVWF  x17
4010:  MOVLB  0
4012:  CALL   09EC
....................                printf(lcd_putc,"   Modo Semi   "); 
4016:  MOVLW  30
4018:  MOVWF  FF6
401A:  MOVLW  07
401C:  MOVWF  FF7
401E:  CALL   0EEA
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4022:  BSF    4E.3
4024:  BCF    4E.1
4026:  BCF    4E.2
4028:  MOVLW  0A
402A:  MOVWF  2C
402C:  MOVWF  2D
....................                delay_ms(1000); 
402E:  MOVLW  04
4030:  MOVLB  1
4032:  MOVWF  x00
4034:  MOVLW  FA
4036:  MOVWF  x1B
4038:  MOVLB  0
403A:  CALL   08E2
403E:  MOVLB  1
4040:  DECFSZ x00,F
4042:  BRA    4034
4044:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
4046:  BSF    F93.1
4048:  BTFSS  F81.1
404A:  BRA    407C
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
404C:  MOVLW  01
404E:  MOVWF  17
4050:  CLRF   36
4052:  MOVLW  02
4054:  MOVWF  1B
4056:  MOVWF  1D
4058:  MOVLW  0B
405A:  MOVWF  1A
405C:  MOVLW  02
405E:  MOVLB  1
4060:  MOVWF  x00
4062:  MOVLW  FA
4064:  MOVWF  x1B
4066:  MOVLB  0
4068:  CALL   08E2
406C:  MOVLB  1
406E:  DECFSZ x00,F
4070:  BRA    4062
4072:  MOVLW  0C
4074:  MOVWF  x15
4076:  MOVLB  0
4078:  CALL   0A5E
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
407C:  BTFSC  4E.1
407E:  BRA    4088
4080:  MOVF   2D,W
4082:  SUBLW  14
4084:  BTFSS  FD8.2
4086:  BRA    41B0
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4088:  BCF    4E.2
408A:  BCF    4E.3
408C:  MOVLW  0A
408E:  MOVWF  2C
4090:  MOVWF  2E
....................          lcd_gotoxy(1,2); 
4092:  MOVLW  01
4094:  MOVLB  1
4096:  MOVWF  x16
4098:  MOVLW  02
409A:  MOVWF  x17
409C:  MOVLB  0
409E:  CALL   09EC
....................          printf(lcd_putc,"   Modo Manual  "); 
40A2:  MOVLW  40
40A4:  MOVWF  FF6
40A6:  MOVLW  07
40A8:  MOVWF  FF7
40AA:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
40AE:  MOVLW  01
40B0:  MOVLB  1
40B2:  MOVWF  x16
40B4:  MOVLW  03
40B6:  MOVWF  x17
40B8:  MOVLB  0
40BA:  CALL   09EC
....................          printf(lcd_putc,"    Seleccionado    "); 
40BE:  MOVLW  52
40C0:  MOVWF  FF6
40C2:  MOVLW  07
40C4:  MOVWF  FF7
40C6:  CALL   0EEA
....................          if(LEFT) 
40CA:  BSF    F93.1
40CC:  BTFSS  F81.1
40CE:  BRA    41B0
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
40D0:  BCF    4E.1
40D2:  MOVLW  14
40D4:  MOVWF  2D
40D6:  MOVLW  0A
40D8:  MOVWF  2C
40DA:  MOVWF  2E
40DC:  MOVLW  02
40DE:  MOVLB  1
40E0:  MOVWF  x00
40E2:  MOVLW  FA
40E4:  MOVWF  x1B
40E6:  MOVLB  0
40E8:  CALL   08E2
40EC:  MOVLB  1
40EE:  DECFSZ x00,F
40F0:  BRA    40E2
40F2:  MOVLW  0C
40F4:  MOVWF  x15
40F6:  MOVLB  0
40F8:  CALL   0A5E
40FC:  MOVLW  FE
40FE:  MOVLB  1
4100:  MOVWF  x00
4102:  MOVLB  0
4104:  CALL   1648
4108:  MOVLW  FE
410A:  MOVWF  29
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
410C:  MOVLW  0A
410E:  MOVWF  FA9
4110:  MOVFF  2D,FA8
4114:  BCF    FA6.6
4116:  BCF    FA6.7
4118:  BSF    FA6.2
411A:  MOVF   FF2,W
411C:  MOVWF  00
411E:  BCF    FF2.7
4120:  MOVLB  F
4122:  MOVLW  55
4124:  MOVWF  FA7
4126:  MOVLW  AA
4128:  MOVWF  FA7
412A:  BSF    FA6.1
412C:  BTFSC  FA6.1
412E:  BRA    412C
4130:  BCF    FA6.2
4132:  MOVF   00,W
4134:  IORWF  FF2,F
4136:  MOVLW  0C
4138:  MOVWF  FA9
413A:  MOVFF  2E,FA8
413E:  BCF    FA6.6
4140:  BCF    FA6.7
4142:  BSF    FA6.2
4144:  MOVF   FF2,W
4146:  MOVWF  00
4148:  BCF    FF2.7
414A:  MOVLW  55
414C:  MOVWF  FA7
414E:  MOVLW  AA
4150:  MOVWF  FA7
4152:  BSF    FA6.1
4154:  BTFSC  FA6.1
4156:  BRA    4154
4158:  BCF    FA6.2
415A:  MOVF   00,W
415C:  IORWF  FF2,F
415E:  MOVLW  0B
4160:  MOVWF  FA9
4162:  MOVFF  2C,FA8
4166:  BCF    FA6.6
4168:  BCF    FA6.7
416A:  BSF    FA6.2
416C:  MOVF   FF2,W
416E:  MOVWF  00
4170:  BCF    FF2.7
4172:  MOVLW  55
4174:  MOVWF  FA7
4176:  MOVLW  AA
4178:  MOVWF  FA7
417A:  BSF    FA6.1
417C:  BTFSC  FA6.1
417E:  BRA    417C
4180:  BCF    FA6.2
4182:  MOVF   00,W
4184:  IORWF  FF2,F
4186:  MOVLW  0D
4188:  MOVWF  FA9
418A:  MOVFF  29,FA8
418E:  BCF    FA6.6
4190:  BCF    FA6.7
4192:  BSF    FA6.2
4194:  MOVF   FF2,W
4196:  MOVWF  00
4198:  BCF    FF2.7
419A:  MOVLW  55
419C:  MOVWF  FA7
419E:  MOVLW  AA
41A0:  MOVWF  FA7
41A2:  BSF    FA6.1
41A4:  BTFSC  FA6.1
41A6:  BRA    41A4
41A8:  BCF    FA6.2
41AA:  MOVF   00,W
41AC:  IORWF  FF2,F
41AE:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
41B0:  BTFSC  4E.2
41B2:  BRA    41BA
41B4:  MOVF   2C,W
41B6:  SUBLW  14
41B8:  BNZ   4282
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
41BA:  BCF    4E.1
41BC:  BCF    4E.3
41BE:  MOVLW  0A
41C0:  MOVWF  2E
41C2:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
41C4:  MOVLW  01
41C6:  MOVLB  1
41C8:  MOVWF  x16
41CA:  MOVLW  02
41CC:  MOVWF  x17
41CE:  MOVLB  0
41D0:  CALL   09EC
....................          printf(lcd_putc,"   Modo Auto   "); 
41D4:  MOVLW  68
41D6:  MOVWF  FF6
41D8:  MOVLW  07
41DA:  MOVWF  FF7
41DC:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
41E0:  MOVLW  01
41E2:  MOVLB  1
41E4:  MOVWF  x16
41E6:  MOVLW  03
41E8:  MOVWF  x17
41EA:  MOVLB  0
41EC:  CALL   09EC
....................          printf(lcd_putc,"    Seleccionado    "); 
41F0:  MOVLW  78
41F2:  MOVWF  FF6
41F4:  MOVLW  07
41F6:  MOVWF  FF7
41F8:  CALL   0EEA
....................          if(LEFT) 
41FC:  BSF    F93.1
41FE:  BTFSS  F81.1
4200:  BRA    4282
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
4202:  BCF    4E.2
4204:  MOVLW  14
4206:  MOVWF  2C
4208:  MOVLW  0A
420A:  MOVWF  2E
420C:  MOVWF  2D
420E:  MOVLW  02
4210:  MOVLB  1
4212:  MOVWF  x00
4214:  MOVLW  FA
4216:  MOVWF  x1B
4218:  MOVLB  0
421A:  CALL   08E2
421E:  MOVLB  1
4220:  DECFSZ x00,F
4222:  BRA    4214
4224:  MOVLW  0C
4226:  MOVWF  x15
4228:  MOVLB  0
422A:  CALL   0A5E
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
422E:  MOVLW  0B
4230:  MOVWF  FA9
4232:  MOVFF  2C,FA8
4236:  BCF    FA6.6
4238:  BCF    FA6.7
423A:  BSF    FA6.2
423C:  MOVF   FF2,W
423E:  MOVWF  00
4240:  BCF    FF2.7
4242:  MOVLB  F
4244:  MOVLW  55
4246:  MOVWF  FA7
4248:  MOVLW  AA
424A:  MOVWF  FA7
424C:  BSF    FA6.1
424E:  BTFSC  FA6.1
4250:  BRA    424E
4252:  BCF    FA6.2
4254:  MOVF   00,W
4256:  IORWF  FF2,F
4258:  MOVLW  0C
425A:  MOVWF  FA9
425C:  MOVFF  2E,FA8
4260:  BCF    FA6.6
4262:  BCF    FA6.7
4264:  BSF    FA6.2
4266:  MOVF   FF2,W
4268:  MOVWF  00
426A:  BCF    FF2.7
426C:  MOVLW  55
426E:  MOVWF  FA7
4270:  MOVLW  AA
4272:  MOVWF  FA7
4274:  BSF    FA6.1
4276:  BTFSC  FA6.1
4278:  BRA    4276
427A:  BCF    FA6.2
427C:  MOVF   00,W
427E:  IORWF  FF2,F
4280:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
4282:  BTFSC  4E.3
4284:  BRA    428E
4286:  MOVF   2E,W
4288:  SUBLW  14
428A:  BTFSS  FD8.2
428C:  BRA    43A8
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
428E:  BCF    4E.1
4290:  BCF    4E.2
4292:  MOVLW  0A
4294:  MOVWF  2C
4296:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
4298:  MOVLW  01
429A:  MOVLB  1
429C:  MOVWF  x16
429E:  MOVLW  02
42A0:  MOVWF  x17
42A2:  MOVLB  0
42A4:  CALL   09EC
....................          printf(lcd_putc,"   Modo Semi   "); 
42A8:  MOVLW  8E
42AA:  MOVWF  FF6
42AC:  MOVLW  07
42AE:  MOVWF  FF7
42B0:  CALL   0EEA
....................          if(UP) 
42B4:  BSF    F93.3
42B6:  BTFSS  F81.3
42B8:  BRA    42BC
....................          { 
....................             tmp++; 
42BA:  INCF   29,F
....................              
....................          } 
....................           
....................          if(DOWN) 
42BC:  BSF    F93.2
42BE:  BTFSS  F81.2
42C0:  BRA    42C4
....................          { 
....................             tmp--; 
42C2:  DECF   29,F
....................          } 
....................          ValorSemi=tmp; 
42C4:  MOVFF  29,2F
....................          ajustar_damper(tmp); 
42C8:  MOVFF  29,100
42CC:  CALL   1648
....................          if(LEFT) 
42D0:  BSF    F93.1
42D2:  BTFSS  F81.1
42D4:  BRA    43A8
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
42D6:  MOVLW  0D
42D8:  MOVWF  FA9
42DA:  MOVFF  29,FA8
42DE:  BCF    FA6.6
42E0:  BCF    FA6.7
42E2:  BSF    FA6.2
42E4:  MOVF   FF2,W
42E6:  MOVWF  00
42E8:  BCF    FF2.7
42EA:  MOVLB  F
42EC:  MOVLW  55
42EE:  MOVWF  FA7
42F0:  MOVLW  AA
42F2:  MOVWF  FA7
42F4:  BSF    FA6.1
42F6:  BTFSC  FA6.1
42F8:  BRA    42F6
42FA:  BCF    FA6.2
42FC:  MOVF   00,W
42FE:  IORWF  FF2,F
4300:  BCF    4E.3
4302:  MOVLW  14
4304:  MOVWF  2E
4306:  MOVLW  0A
4308:  MOVWF  2C
430A:  MOVWF  2D
430C:  MOVLW  02
430E:  MOVLB  1
4310:  MOVWF  x00
4312:  MOVLW  FA
4314:  MOVWF  x1B
4316:  MOVLB  0
4318:  CALL   08E2
431C:  MOVLB  1
431E:  DECFSZ x00,F
4320:  BRA    4312
4322:  MOVLW  0C
4324:  MOVWF  x15
4326:  MOVLB  0
4328:  CALL   0A5E
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
432C:  MOVLW  0C
432E:  MOVWF  FA9
4330:  MOVFF  2E,FA8
4334:  BCF    FA6.6
4336:  BCF    FA6.7
4338:  BSF    FA6.2
433A:  MOVF   FF2,W
433C:  MOVWF  00
433E:  BCF    FF2.7
4340:  MOVLB  F
4342:  MOVLW  55
4344:  MOVWF  FA7
4346:  MOVLW  AA
4348:  MOVWF  FA7
434A:  BSF    FA6.1
434C:  BTFSC  FA6.1
434E:  BRA    434C
4350:  BCF    FA6.2
4352:  MOVF   00,W
4354:  IORWF  FF2,F
4356:  MOVLW  0B
4358:  MOVWF  FA9
435A:  MOVFF  2C,FA8
435E:  BCF    FA6.6
4360:  BCF    FA6.7
4362:  BSF    FA6.2
4364:  MOVF   FF2,W
4366:  MOVWF  00
4368:  BCF    FF2.7
436A:  MOVLW  55
436C:  MOVWF  FA7
436E:  MOVLW  AA
4370:  MOVWF  FA7
4372:  BSF    FA6.1
4374:  BTFSC  FA6.1
4376:  BRA    4374
4378:  BCF    FA6.2
437A:  MOVF   00,W
437C:  IORWF  FF2,F
437E:  MOVLW  0A
4380:  MOVWF  FA9
4382:  MOVFF  2D,FA8
4386:  BCF    FA6.6
4388:  BCF    FA6.7
438A:  BSF    FA6.2
438C:  MOVF   FF2,W
438E:  MOVWF  00
4390:  BCF    FF2.7
4392:  MOVLW  55
4394:  MOVWF  FA7
4396:  MOVLW  AA
4398:  MOVWF  FA7
439A:  BSF    FA6.1
439C:  BTFSC  FA6.1
439E:  BRA    439C
43A0:  BCF    FA6.2
43A2:  MOVF   00,W
43A4:  IORWF  FF2,F
43A6:  MOVLB  0
43A8:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
43AA:  MOVF   17,W
43AC:  SUBLW  14
43AE:  BTFSS  FD8.2
43B0:  BRA    4676
....................    { 
....................       if(Lectura2==1) 
43B2:  BTFSS  35.6
43B4:  BRA    440A
....................       { 
....................       lcd_gotoxy(1,1);                      
43B6:  MOVLW  01
43B8:  MOVWF  x16
43BA:  MOVWF  x17
43BC:  MOVLB  0
43BE:  CALL   09EC
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
43C2:  MOVLW  9E
43C4:  MOVWF  FF6
43C6:  MOVLW  07
43C8:  MOVWF  FF7
43CA:  CALL   0EEA
....................       lcd_gotoxy(1,2); 
43CE:  MOVLW  01
43D0:  MOVLB  1
43D2:  MOVWF  x16
43D4:  MOVLW  02
43D6:  MOVWF  x17
43D8:  MOVLB  0
43DA:  CALL   09EC
....................       printf(lcd_putc,"Damp= Opc."); 
43DE:  MOVLW  A8
43E0:  MOVWF  FF6
43E2:  MOVLW  07
43E4:  MOVWF  FF7
43E6:  CALL   0EEA
....................       //printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
....................       lcd_gotoxy(1,3); 
43EA:  MOVLW  01
43EC:  MOVLB  1
43EE:  MOVWF  x16
43F0:  MOVLW  03
43F2:  MOVWF  x17
43F4:  MOVLB  0
43F6:  CALL   09EC
....................       printf(lcd_putc,"InFlow= Opc."); 
43FA:  MOVLW  B4
43FC:  MOVWF  FF6
43FE:  MOVLW  07
4400:  MOVWF  FF7
4402:  CALL   0EEA
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       Lectura2=0; 
4406:  BCF    35.6
4408:  MOVLB  1
....................       } 
....................        
....................       if(horas>=60) 
440A:  MOVF   32,W
440C:  SUBLW  3B
440E:  BC    442E
....................       { 
....................          lcd_gotoxy(10,1);                      
4410:  MOVLW  0A
4412:  MOVWF  x16
4414:  MOVLW  01
4416:  MOVWF  x17
4418:  MOVLB  0
441A:  CALL   09EC
....................          printf(lcd_putc,"Filtro:Opc.");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
441E:  MOVLW  C2
4420:  MOVWF  FF6
4422:  MOVLW  07
4424:  MOVWF  FF7
4426:  CALL   0EEA
....................          //printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................       else 
442A:  BRA    4448
442C:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
442E:  MOVLW  0A
4430:  MOVWF  x16
4432:  MOVLW  01
4434:  MOVWF  x17
4436:  MOVLB  0
4438:  CALL   09EC
....................          printf(lcd_putc,"Filtro:Opc.");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
443C:  MOVLW  CE
443E:  MOVWF  FF6
4440:  MOVLW  07
4442:  MOVWF  FF7
4444:  CALL   0EEA
....................          //printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................        
....................       if(iniciodamper==0) 
4448:  BTFSC  4E.0
444A:  BRA    446C
....................       { 
....................          flag_iniciodamper=1; 
444C:  BSF    35.7
....................          lcd_gotoxy(11,2); 
444E:  MOVLW  0B
4450:  MOVLB  1
4452:  MOVWF  x16
4454:  MOVLW  02
4456:  MOVWF  x17
4458:  MOVLB  0
445A:  CALL   09EC
....................          printf(lcd_putc,"Flujo=Opc."); 
445E:  MOVLW  DA
4460:  MOVWF  FF6
4462:  MOVLW  07
4464:  MOVWF  FF7
4466:  CALL   0EEA
....................          //printf(lcd_putc,"Flujo=Ajus"); 
....................       } 
....................       else 
446A:  BRA    450E
....................       { 
....................          flag_iniciodamper=0; 
446C:  BCF    35.7
....................          if(Flujo<0.5) 
446E:  MOVFF  8E,102
4472:  MOVFF  8D,101
4476:  MOVFF  8C,100
447A:  MOVFF  8B,FF
447E:  MOVLB  1
4480:  CLRF   x06
4482:  CLRF   x05
4484:  CLRF   x04
4486:  MOVLW  7E
4488:  MOVWF  x03
448A:  MOVLB  0
448C:  CALL   1536
4490:  BNC   44B0
....................          { 
....................             lcd_gotoxy(11,2); 
4492:  MOVLW  0B
4494:  MOVLB  1
4496:  MOVWF  x16
4498:  MOVLW  02
449A:  MOVWF  x17
449C:  MOVLB  0
449E:  CALL   09EC
....................             printf(lcd_putc,"Flujo=Opc.");       
44A2:  MOVLW  E6
44A4:  MOVWF  FF6
44A6:  MOVLW  07
44A8:  MOVWF  FF7
44AA:  CALL   0EEA
....................             //printf(lcd_putc,"Flujo=Bajo"); 
....................          } 
....................          else 
44AE:  BRA    450E
....................          { 
....................             if(Flujo>2.0) 
44B0:  MOVLB  1
44B2:  CLRF   x02
44B4:  CLRF   x01
44B6:  CLRF   x00
44B8:  MOVLW  80
44BA:  MOVLB  0
44BC:  MOVWF  xFF
44BE:  MOVFF  8E,106
44C2:  MOVFF  8D,105
44C6:  MOVFF  8C,104
44CA:  MOVFF  8B,103
44CE:  CALL   1536
44D2:  BNC   44F2
....................             { 
....................                lcd_gotoxy(11,2); 
44D4:  MOVLW  0B
44D6:  MOVLB  1
44D8:  MOVWF  x16
44DA:  MOVLW  02
44DC:  MOVWF  x17
44DE:  MOVLB  0
44E0:  CALL   09EC
....................                printf(lcd_putc,"Flujo=Opc."); 
44E4:  MOVLW  F2
44E6:  MOVWF  FF6
44E8:  MOVLW  07
44EA:  MOVWF  FF7
44EC:  CALL   0EEA
....................                //printf(lcd_putc,"Flujo=Alto"); 
....................             } 
....................             else 
44F0:  BRA    450E
....................             { 
....................                lcd_gotoxy(11,2); 
44F2:  MOVLW  0B
44F4:  MOVLB  1
44F6:  MOVWF  x16
44F8:  MOVLW  02
44FA:  MOVWF  x17
44FC:  MOVLB  0
44FE:  CALL   09EC
....................                printf(lcd_putc,"Flujo=Opc. ");       
4502:  MOVLW  FE
4504:  MOVWF  FF6
4506:  MOVLW  07
4508:  MOVWF  FF7
450A:  CALL   0EEA
....................                //printf(lcd_putc,"Flujo=OK  "); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
450E:  BTFSS  34.0
4510:  BRA    4534
....................       { 
....................          Luz_Blanca_on; 
4512:  BSF    F8A.4
4514:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
4516:  MOVLW  01
4518:  MOVLB  1
451A:  MOVWF  x16
451C:  MOVLW  04
451E:  MOVWF  x17
4520:  MOVLB  0
4522:  CALL   09EC
....................          printf(lcd_putc,"Luz:ON "); 
4526:  MOVLW  0A
4528:  MOVWF  FF6
452A:  MOVLW  08
452C:  MOVWF  FF7
452E:  CALL   0EEA
....................       } 
....................       else 
4532:  BRA    4554
....................       { 
....................          Luz_Blanca_off; 
4534:  BCF    F8A.4
4536:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
4538:  MOVLW  01
453A:  MOVLB  1
453C:  MOVWF  x16
453E:  MOVLW  04
4540:  MOVWF  x17
4542:  MOVLB  0
4544:  CALL   09EC
....................          printf(lcd_putc,"Luz:OFF "); 
4548:  MOVLW  12
454A:  MOVWF  FF6
454C:  MOVLW  08
454E:  MOVWF  FF7
4550:  CALL   0EEA
....................       } 
....................        
....................       if(estadomv==1) 
4554:  BTFSS  34.1
4556:  BRA    457A
....................       { 
....................          lcd_gotoxy(10,4); 
4558:  MOVLW  0A
455A:  MOVLB  1
455C:  MOVWF  x16
455E:  MOVLW  04
4560:  MOVWF  x17
4562:  MOVLB  0
4564:  CALL   09EC
....................          Motor_on;   
4568:  BSF    F8A.5
456A:  BCF    F93.5
....................          printf(lcd_putc,"Motor:ON "); 
456C:  MOVLW  1C
456E:  MOVWF  FF6
4570:  MOVLW  08
4572:  MOVWF  FF7
4574:  CALL   0EEA
....................       } 
....................       else 
4578:  BRA    459A
....................       { 
....................          Motor_off;      
457A:  BCF    F8A.5
457C:  BCF    F93.5
....................          lcd_gotoxy(10,4); 
457E:  MOVLW  0A
4580:  MOVLB  1
4582:  MOVWF  x16
4584:  MOVLW  04
4586:  MOVWF  x17
4588:  MOVLB  0
458A:  CALL   09EC
....................          printf(lcd_putc,"Motor:OFF ");  
458E:  MOVLW  26
4590:  MOVWF  FF6
4592:  MOVLW  08
4594:  MOVWF  FF7
4596:  CALL   0EEA
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
459A:  BSF    F93.2
459C:  BTFSS  F81.2
459E:  BRA    45B6
....................       {  if(Flanco == 0)  
45A0:  BTFSC  34.4
45A2:  BRA    45B4
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
45A4:  BSF    34.4
45A6:  MOVLW  C8
45A8:  MOVLB  1
45AA:  MOVWF  x1B
45AC:  MOVLB  0
45AE:  CALL   08E2
45B2:  BTG    34.0
....................          else 
45B4:  BRA    45B8
....................             {Flanco = 0;} 
45B6:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
45B8:  BSF    F93.1
45BA:  BTFSS  F81.1
45BC:  BRA    4602
....................       {   
....................          if(Flanco2 == 0) 
45BE:  BTFSC  34.6
45C0:  BRA    4600
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
45C2:  BSF    34.6
45C4:  MOVLW  C8
45C6:  MOVLB  1
45C8:  MOVWF  x1B
45CA:  MOVLB  0
45CC:  CALL   08E2
45D0:  BTG    34.1
....................             if(estadomv==1) 
45D2:  BTFSS  34.1
45D4:  BRA    45EC
....................             { 
....................                Motor_on;         
45D6:  BSF    F8A.5
45D8:  BCF    F93.5
....................                delay_ms(150); 
45DA:  MOVLW  96
45DC:  MOVLB  1
45DE:  MOVWF  x1B
45E0:  MOVLB  0
45E2:  CALL   08E2
....................                lcd_init(); 
45E6:  CALL   0980
....................             } 
....................             else 
45EA:  BRA    4600
....................             { 
....................                Motor_off; 
45EC:  BCF    F8A.5
45EE:  BCF    F93.5
....................                delay_ms(150); 
45F0:  MOVLW  96
45F2:  MOVLB  1
45F4:  MOVWF  x1B
45F6:  MOVLB  0
45F8:  CALL   08E2
....................                lcd_init(); 
45FC:  CALL   0980
....................             } 
....................          } 
....................       } 
....................       else 
4600:  BRA    4604
....................       { 
....................          Flanco2 = 0; 
4602:  BCF    34.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
4604:  BSF    F93.3
4606:  BTFSS  F81.3
4608:  BRA    4640
....................       {  if(Flanco1 == 0)  
460A:  BTFSC  34.5
460C:  BRA    463E
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
460E:  MOVLW  02
4610:  MOVLB  1
4612:  MOVWF  x00
4614:  MOVLW  FA
4616:  MOVWF  x1B
4618:  MOVLB  0
461A:  CALL   08E2
461E:  MOVLB  1
4620:  DECFSZ x00,F
4622:  BRA    4614
4624:  MOVLW  0C
4626:  MOVWF  x15
4628:  MOVLB  0
462A:  CALL   0A5E
462E:  MOVLW  01
4630:  MOVWF  17
4632:  CLRF   36
4634:  MOVLW  02
4636:  MOVWF  1B
4638:  MOVWF  1D
463A:  MOVLW  0B
463C:  MOVWF  1A
....................          else 
463E:  BRA    4642
....................             {Flanco1 = 0;}    
4640:  BCF    34.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
4642:  BSF    F93.0
4644:  BTFSS  F81.0
4646:  BRA    4672
....................       {  if(Flanco3 == 0)  
4648:  BTFSC  34.7
464A:  BRA    4670
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
464C:  MOVLW  02
464E:  MOVLB  1
4650:  MOVWF  x00
4652:  MOVLW  FA
4654:  MOVWF  x1B
4656:  MOVLB  0
4658:  CALL   08E2
465C:  MOVLB  1
465E:  DECFSZ x00,F
4660:  BRA    4652
4662:  MOVLW  0C
4664:  MOVWF  x15
4666:  MOVLB  0
4668:  CALL   0A5E
466C:  MOVLW  28
466E:  MOVWF  17
....................          else 
4670:  BRA    4674
....................             {Flanco3 = 0;}     
4672:  BCF    34.7
4674:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
4676:  MOVF   17,W
4678:  SUBLW  1E
467A:  BTFSS  FD8.2
467C:  BRA    47EC
....................       lcd_gotoxy(1,1); 
467E:  MOVLW  01
4680:  MOVWF  x16
4682:  MOVWF  x17
4684:  MOVLB  0
4686:  CALL   09EC
....................       printf(lcd_putc,"     Apagando     "); 
468A:  MOVLW  32
468C:  MOVWF  FF6
468E:  MOVLW  08
4690:  MOVWF  FF7
4692:  CALL   0EEA
....................       lcd_gotoxy(1,2); 
4696:  MOVLW  01
4698:  MOVLB  1
469A:  MOVWF  x16
469C:  MOVLW  02
469E:  MOVWF  x17
46A0:  MOVLB  0
46A2:  CALL   09EC
....................       printf(lcd_putc,"      Cabina      "); 
46A6:  MOVLW  46
46A8:  MOVWF  FF6
46AA:  MOVLW  08
46AC:  MOVWF  FF7
46AE:  CALL   0EEA
....................        
....................       lcd_gotoxy(1,3); 
46B2:  MOVLW  01
46B4:  MOVLB  1
46B6:  MOVWF  x16
46B8:  MOVLW  03
46BA:  MOVWF  x17
46BC:  MOVLB  0
46BE:  CALL   09EC
....................       printf(lcd_putc," Espere"); 
46C2:  MOVLW  5A
46C4:  MOVWF  FF6
46C6:  MOVLW  08
46C8:  MOVWF  FF7
46CA:  CALL   0EEA
....................        
....................       if(Lectura==1) 
46CE:  BTFSS  35.5
46D0:  BRA    47E8
....................       {ajustar_damper(0); 
46D2:  MOVLB  1
46D4:  CLRF   x00
46D6:  MOVLB  0
46D8:  CALL   1648
....................        
....................          if(n<8) 
46DC:  MOVF   26,W
46DE:  SUBLW  07
46E0:  BNC   4706
....................          { 
....................             lcd_gotoxy(9+n,3); 
46E2:  MOVLW  09
46E4:  ADDWF  26,W
46E6:  MOVLB  1
46E8:  MOVWF  x00
46EA:  MOVWF  x16
46EC:  MOVLW  03
46EE:  MOVWF  x17
46F0:  MOVLB  0
46F2:  CALL   09EC
....................             printf(lcd_putc,"."); 
46F6:  MOVLW  2E
46F8:  MOVLB  1
46FA:  MOVWF  x15
46FC:  MOVLB  0
46FE:  CALL   0A5E
....................             n++; 
4702:  INCF   26,F
....................          } 
....................          else 
4704:  BRA    47E6
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
4706:  MOVLW  46
4708:  MOVWF  FA9
470A:  MOVFF  30,FA8
470E:  BCF    FA6.6
4710:  BCF    FA6.7
4712:  BSF    FA6.2
4714:  MOVF   FF2,W
4716:  MOVWF  00
4718:  BCF    FF2.7
471A:  MOVLB  F
471C:  MOVLW  55
471E:  MOVWF  FA7
4720:  MOVLW  AA
4722:  MOVWF  FA7
4724:  BSF    FA6.1
4726:  BTFSC  FA6.1
4728:  BRA    4726
472A:  BCF    FA6.2
472C:  MOVF   00,W
472E:  IORWF  FF2,F
4730:  MOVLW  47
4732:  MOVWF  FA9
4734:  MOVFF  31,FA8
4738:  BCF    FA6.6
473A:  BCF    FA6.7
473C:  BSF    FA6.2
473E:  MOVF   FF2,W
4740:  MOVWF  00
4742:  BCF    FF2.7
4744:  MOVLW  55
4746:  MOVWF  FA7
4748:  MOVLW  AA
474A:  MOVWF  FA7
474C:  BSF    FA6.1
474E:  BTFSC  FA6.1
4750:  BRA    474E
4752:  BCF    FA6.2
4754:  MOVF   00,W
4756:  IORWF  FF2,F
4758:  MOVLW  48
475A:  MOVWF  FA9
475C:  MOVFF  32,FA8
4760:  BCF    FA6.6
4762:  BCF    FA6.7
4764:  BSF    FA6.2
4766:  MOVF   FF2,W
4768:  MOVWF  00
476A:  BCF    FF2.7
476C:  MOVLW  55
476E:  MOVWF  FA7
4770:  MOVLW  AA
4772:  MOVWF  FA7
4774:  BSF    FA6.1
4776:  BTFSC  FA6.1
4778:  BRA    4776
477A:  BCF    FA6.2
477C:  MOVF   00,W
477E:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
4780:  MOVLW  0C
4782:  MOVLB  1
4784:  MOVWF  x15
4786:  MOVLB  0
4788:  CALL   0A5E
....................             lcd_gotoxy(1,2); 
478C:  MOVLW  01
478E:  MOVLB  1
4790:  MOVWF  x16
4792:  MOVLW  02
4794:  MOVWF  x17
4796:  MOVLB  0
4798:  CALL   09EC
....................             printf(lcd_putc,"     Proceso      "); 
479C:  MOVLW  62
479E:  MOVWF  FF6
47A0:  MOVLW  08
47A2:  MOVWF  FF7
47A4:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
47A8:  MOVLW  01
47AA:  MOVLB  1
47AC:  MOVWF  x16
47AE:  MOVLW  03
47B0:  MOVWF  x17
47B2:  MOVLB  0
47B4:  CALL   09EC
....................             printf(lcd_putc,"    Finalizado    "); 
47B8:  MOVLW  76
47BA:  MOVWF  FF6
47BC:  MOVLW  08
47BE:  MOVWF  FF7
47C0:  CALL   0EEA
....................             delay_ms(2000); 
47C4:  MOVLW  08
47C6:  MOVLB  1
47C8:  MOVWF  x00
47CA:  MOVLW  FA
47CC:  MOVWF  x1B
47CE:  MOVLB  0
47D0:  CALL   08E2
47D4:  MOVLB  1
47D6:  DECFSZ x00,F
47D8:  BRA    47CA
....................             printf(lcd_putc,"\f"); 
47DA:  MOVLW  0C
47DC:  MOVWF  x15
47DE:  MOVLB  0
47E0:  CALL   0A5E
....................             reset_cpu(); 
47E4:  RESET
....................          } 
....................        
....................        
....................       Lectura=0; 
47E6:  BCF    35.5
....................       }   
....................    } 
47E8:  MOVLB  1
47EA:  BRA    4676
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
47EC:  MOVF   17,W
47EE:  SUBLW  28
47F0:  BNZ   48CC
....................    lcd_gotoxy(1,1); 
47F2:  MOVLW  01
47F4:  MOVWF  x16
47F6:  MOVWF  x17
47F8:  MOVLB  0
47FA:  CALL   09EC
....................    printf(lcd_putc,"   Desea apagar     "); 
47FE:  MOVLW  8A
4800:  MOVWF  FF6
4802:  MOVLW  08
4804:  MOVWF  FF7
4806:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
480A:  MOVLW  01
480C:  MOVLB  1
480E:  MOVWF  x16
4810:  MOVLW  02
4812:  MOVWF  x17
4814:  MOVLB  0
4816:  CALL   09EC
....................    printf(lcd_putc,"     la cabina      "); 
481A:  MOVLW  A0
481C:  MOVWF  FF6
481E:  MOVLW  08
4820:  MOVWF  FF7
4822:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
4826:  MOVLW  01
4828:  MOVLB  1
482A:  MOVWF  x16
482C:  MOVLW  03
482E:  MOVWF  x17
4830:  MOVLB  0
4832:  CALL   09EC
....................    printf(lcd_putc,"   > Aceptar        "); 
4836:  MOVLW  B6
4838:  MOVWF  FF6
483A:  MOVLW  08
483C:  MOVWF  FF7
483E:  CALL   0EEA
....................    lcd_gotoxy(1,4); 
4842:  MOVLW  01
4844:  MOVLB  1
4846:  MOVWF  x16
4848:  MOVLW  04
484A:  MOVWF  x17
484C:  MOVLB  0
484E:  CALL   09EC
....................    printf(lcd_putc,"   < Cancelar       "); 
4852:  MOVLW  CC
4854:  MOVWF  FF6
4856:  MOVLW  08
4858:  MOVWF  FF7
485A:  CALL   0EEA
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
485E:  BSF    F93.0
4860:  BTFSS  F81.0
4862:  BRA    4888
....................       {  if(Flanco1 == 0)  
4864:  BTFSC  34.5
4866:  BRA    4886
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
4868:  BSF    34.5
486A:  MOVLW  1E
486C:  MOVWF  17
486E:  MOVFF  20,100
4872:  CALL   0ED6
4876:  BCF    F8A.6
4878:  BCF    F93.6
487A:  MOVLW  0C
487C:  MOVLB  1
487E:  MOVWF  x15
4880:  MOVLB  0
4882:  CALL   0A5E
....................             }} 
....................          else 
4886:  BRA    488A
....................             {Flanco1 = 0;}    
4888:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
488A:  BSF    F93.1
488C:  BTFSS  F81.1
488E:  BRA    48C8
....................       {  if(Flanco3 == 0)  
4890:  BTFSC  34.7
4892:  BRA    48C6
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4894:  BSF    34.7
4896:  MOVLW  14
4898:  MOVWF  17
489A:  CLRF   36
489C:  MOVLW  02
489E:  MOVWF  1B
48A0:  MOVWF  1D
48A2:  MOVLW  0B
48A4:  MOVWF  1A
48A6:  MOVLW  02
48A8:  MOVLB  1
48AA:  MOVWF  x00
48AC:  MOVLW  FA
48AE:  MOVWF  x1B
48B0:  MOVLB  0
48B2:  CALL   08E2
48B6:  MOVLB  1
48B8:  DECFSZ x00,F
48BA:  BRA    48AC
48BC:  MOVLW  0C
48BE:  MOVWF  x15
48C0:  MOVLB  0
48C2:  CALL   0A5E
....................          else 
48C6:  BRA    48CA
....................             {Flanco3 = 0;}     
48C8:  BCF    34.7
48CA:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(tiemporeset>=20) 
48CC:  MOVF   33,W
48CE:  SUBLW  13
48D0:  BC    48DC
....................    { 
....................       lcd_init(); 
48D2:  MOVLB  0
48D4:  CALL   0980
....................       tiemporeset=0; 
48D8:  CLRF   33
48DA:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
48DC:  BTFSS  35.3
48DE:  BRA    48EC
....................       {intensidadpantalla(0);sleep();} 
48E0:  CLRF   x00
48E2:  MOVLB  0
48E4:  CALL   0ED6
48E8:  SLEEP 
48EA:  MOVLB  1
.................... /* 
....................    if(Menu!=0 || Menu!=30) 
....................    { 
....................       if(Lectura==1) 
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
....................         if(iniciodamper==1) 
....................         { 
....................             controlar_flujo(); 
....................           
....................             if(Flujo<0.5 && iniciodamper==1 && Menu==20) 
....................             { 
....................                flag_latencia=1; 
....................                 
....................                if(Latencia==1) 
....................                { 
....................                   if(estadoalarma==1) 
....................                   { 
....................                      Alarma_on; 
....................                   } 
....................                   else 
....................                   { 
....................                      Alarma_off; 
....................                   } 
....................                   estadopantalla=!estadopantalla; 
....................                   if(estadopantalla==1) 
....................                   {intensidadpantalla(contraste);} 
....................                   else 
....................                   {intensidadpantalla(0);} 
....................                } 
....................             } 
....................             else 
....................             { 
....................                intensidadpantalla(contraste);Alarma_off; 
....................                if(Flujo>=0.5) 
....................                { 
....................                   Latencia=0;t_latencia=0;flag_latencia=0; 
....................                } 
....................             } 
....................         } 
....................         else 
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
....................         } 
....................          Lectura=0; 
....................       }      
....................  
....................    }  */    
....................     
....................    if(t_iniciodamper>=18000) 
48EC:  MOVF   56,W
48EE:  SUBLW  45
48F0:  BC    4900
48F2:  XORLW  FF
48F4:  BNZ   48FC
48F6:  MOVF   55,W
48F8:  SUBLW  4F
48FA:  BC    4900
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
48FC:  BSF    4E.0
48FE:  BCF    35.7
....................    } 
....................     
....................    } 
4900:  GOTO   1D06
.................... } 
4904:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
