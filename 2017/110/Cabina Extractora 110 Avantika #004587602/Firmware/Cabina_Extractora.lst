CCS PCH C Compiler, Version 4.104, 5967               14-abr.-16 07:20

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2016\Proyecto CAR\Cabina Extractora con Sensor Aire y Filtro-Damper\Cabinas CAR\Firmware\Cabina\Cabina_Extractora.lst

               ROM used: 24914 bytes (76%)
                         Largest free fragment is 7850
               RAM used: 273 (13%) at main() level
                         313 (15%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2516
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0A5E:  MOVLW  01
0A60:  MOVWF  FEA
0A62:  MOVLW  24
0A64:  MOVWF  FE9
0A66:  MOVF   FEF,W
0A68:  BZ    0A86
0A6A:  MOVLW  0F
0A6C:  MOVWF  01
0A6E:  CLRF   00
0A70:  DECFSZ 00,F
0A72:  BRA    0A70
0A74:  DECFSZ 01,F
0A76:  BRA    0A6E
0A78:  MOVLW  8F
0A7A:  MOVWF  00
0A7C:  DECFSZ 00,F
0A7E:  BRA    0A7C
0A80:  NOP   
0A82:  DECFSZ FEF,F
0A84:  BRA    0A6A
0A86:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN rw;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0A88:  MOVLB  1
0A8A:  SWAPF  x25,W
0A8C:  ANDLW  F0
0A8E:  MOVWF  00
0A90:  MOVLW  0F
0A92:  ANDWF  F83,W
0A94:  IORWF  00,W
0A96:  MOVWF  F83
....................       delay_cycles(25); 
0A98:  MOVLW  08
0A9A:  MOVWF  00
0A9C:  DECFSZ 00,F
0A9E:  BRA    0A9C
....................       lcd.enable = 1; 
0AA0:  BSF    F83.2
....................       delay_us(55); 
0AA2:  MOVLW  DB
0AA4:  MOVWF  00
0AA6:  DECFSZ 00,F
0AA8:  BRA    0AA6
0AAA:  BRA    0AAC
....................       lcd.enable = 0; 
0AAC:  BCF    F83.2
.................... } 
0AAE:  MOVLB  0
0AB0:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0AB2:  BCF    F83.0
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(2); 
0AB4:  MOVLW  02
0AB6:  MOVLB  1
0AB8:  MOVWF  x24
0ABA:  MOVLB  0
0ABC:  RCALL  0A5E
....................       lcd.rs = address; 
0ABE:  MOVLB  1
0AC0:  BTFSS  x22.0
0AC2:  BCF    F83.0
0AC4:  BTFSC  x22.0
0AC6:  BSF    F83.0
....................       delay_cycles(25); 
0AC8:  MOVLW  08
0ACA:  MOVWF  00
0ACC:  DECFSZ 00,F
0ACE:  BRA    0ACC
....................       lcd.rw = 0; 
0AD0:  BCF    F83.1
....................       delay_cycles(25); 
0AD2:  MOVLW  08
0AD4:  MOVWF  00
0AD6:  DECFSZ 00,F
0AD8:  BRA    0AD6
....................       lcd.enable = 0; 
0ADA:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0ADC:  SWAPF  x23,W
0ADE:  MOVWF  x24
0AE0:  MOVLW  0F
0AE2:  ANDWF  x24,F
0AE4:  MOVFF  124,125
0AE8:  MOVLB  0
0AEA:  RCALL  0A88
....................       lcd_send_nibble(n & 0xf); 
0AEC:  MOVLB  1
0AEE:  MOVF   x23,W
0AF0:  ANDLW  0F
0AF2:  MOVWF  x24
0AF4:  MOVWF  x25
0AF6:  MOVLB  0
0AF8:  RCALL  0A88
.................... } 
0AFA:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0AFC:  MOVLW  00
0AFE:  MOVWF  F95
....................     lcd.rs = 0; 
0B00:  BCF    F83.0
....................     lcd.rw = 0; 
0B02:  BCF    F83.1
....................     lcd.enable = 0; 
0B04:  BCF    F83.2
....................     delay_ms(15); 
0B06:  MOVLW  0F
0B08:  MOVLB  1
0B0A:  MOVWF  x24
0B0C:  MOVLB  0
0B0E:  RCALL  0A5E
....................     for(i=1;i<=3;++i) { 
0B10:  MOVLW  01
0B12:  MOVLB  1
0B14:  MOVWF  x09
0B16:  MOVF   x09,W
0B18:  SUBLW  03
0B1A:  BNC   0B34
....................        lcd_send_nibble(3); 
0B1C:  MOVLW  03
0B1E:  MOVWF  x25
0B20:  MOVLB  0
0B22:  RCALL  0A88
....................        delay_ms(5); 
0B24:  MOVLW  05
0B26:  MOVLB  1
0B28:  MOVWF  x24
0B2A:  MOVLB  0
0B2C:  RCALL  0A5E
....................     } 
0B2E:  MOVLB  1
0B30:  INCF   x09,F
0B32:  BRA    0B16
....................     lcd_send_nibble(2); 
0B34:  MOVLW  02
0B36:  MOVWF  x25
0B38:  MOVLB  0
0B3A:  RCALL  0A88
....................     for(i=0;i<=3;++i) 
0B3C:  MOVLB  1
0B3E:  CLRF   x09
0B40:  MOVF   x09,W
0B42:  SUBLW  03
0B44:  BNC   0B6C
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0B46:  CLRF   03
0B48:  MOVF   x09,W
0B4A:  MOVFF  FF2,10A
0B4E:  BCF    FF2.7
0B50:  MOVLB  0
0B52:  CALL   0096
0B56:  MOVLB  1
0B58:  BTFSC  x0A.7
0B5A:  BSF    FF2.7
0B5C:  MOVWF  x0A
0B5E:  CLRF   x22
0B60:  MOVWF  x23
0B62:  MOVLB  0
0B64:  RCALL  0AB2
0B66:  MOVLB  1
0B68:  INCF   x09,F
0B6A:  BRA    0B40
.................... } 
0B6C:  MOVLB  0
0B6E:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0B70:  MOVLW  01
0B72:  MOVLB  1
0B74:  SUBWF  x20,W
0B76:  ADDLW  FC
0B78:  BC    0BA4
0B7A:  ADDLW  04
0B7C:  MOVLB  0
0B7E:  GOTO   0BB6
....................      case 1 : address=0x80;break; 
0B82:  MOVLW  80
0B84:  MOVLB  1
0B86:  MOVWF  x21
0B88:  BRA    0BA4
....................      case 2 : address=0xc0;break; 
0B8A:  MOVLW  C0
0B8C:  MOVLB  1
0B8E:  MOVWF  x21
0B90:  BRA    0BA4
....................      case 3 : address=0x94;break; 
0B92:  MOVLW  94
0B94:  MOVLB  1
0B96:  MOVWF  x21
0B98:  BRA    0BA4
....................      case 4 : address=0xd4;break; 
0B9A:  MOVLW  D4
0B9C:  MOVLB  1
0B9E:  MOVWF  x21
0BA0:  BRA    0BA4
0BA2:  MOVLB  1
....................    } 
....................    address+=x-1; 
0BA4:  MOVLW  01
0BA6:  SUBWF  x1F,W
0BA8:  ADDWF  x21,F
....................    lcd_send_byte(0,address); 
0BAA:  CLRF   x22
0BAC:  MOVFF  121,123
0BB0:  MOVLB  0
0BB2:  RCALL  0AB2
.................... } 
0BB4:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0BE2:  MOVLB  1
0BE4:  MOVF   x1E,W
0BE6:  SUBLW  F1
0BE8:  BNZ   0BEE
....................     c=238; 
0BEA:  MOVLW  EE
0BEC:  MOVWF  x1E
....................    switch (c) { 
0BEE:  MOVF   x1E,W
0BF0:  XORLW  0C
0BF2:  MOVLB  0
0BF4:  BZ    0C00
0BF6:  XORLW  06
0BF8:  BZ    0C1C
0BFA:  XORLW  02
0BFC:  BZ    0C2E
0BFE:  BRA    0C3C
....................      case '\f'   : lcd_send_byte(0,1); 
0C00:  MOVLB  1
0C02:  CLRF   x22
0C04:  MOVLW  01
0C06:  MOVWF  x23
0C08:  MOVLB  0
0C0A:  RCALL  0AB2
....................                    lcdline=1; 
0C0C:  MOVLW  01
0C0E:  MOVWF  16
....................                    delay_ms(2); 
0C10:  MOVLW  02
0C12:  MOVLB  1
0C14:  MOVWF  x24
0C16:  MOVLB  0
0C18:  RCALL  0A5E
....................                                            break; 
0C1A:  BRA    0C4C
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0C1C:  INCF   16,F
0C1E:  MOVLW  01
0C20:  MOVLB  1
0C22:  MOVWF  x1F
0C24:  MOVFF  16,120
0C28:  MOVLB  0
0C2A:  RCALL  0B70
0C2C:  BRA    0C4C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0C2E:  MOVLB  1
0C30:  CLRF   x22
0C32:  MOVLW  10
0C34:  MOVWF  x23
0C36:  MOVLB  0
0C38:  RCALL  0AB2
0C3A:  BRA    0C4C
....................      default     : lcd_send_byte(1,c);     break; 
0C3C:  MOVLW  01
0C3E:  MOVLB  1
0C40:  MOVWF  x22
0C42:  MOVFF  11E,123
0C46:  MOVLB  0
0C48:  RCALL  0AB2
0C4A:  BRA    0C4C
....................    } 
.................... } 
0C4C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
185C:  MOVFF  111,115
1860:  MOVFF  110,114
1864:  MOVFF  10F,113
1868:  MOVFF  10E,112
....................  
....................    if (y != 1.0) 
186C:  MOVFF  115,126
1870:  MOVFF  114,125
1874:  MOVFF  113,124
1878:  MOVFF  112,123
187C:  MOVLB  1
187E:  CLRF   x2A
1880:  CLRF   x29
1882:  CLRF   x28
1884:  MOVLW  7F
1886:  MOVWF  x27
1888:  MOVLB  0
188A:  RCALL  16F8
188C:  BTFSC  FD8.2
188E:  BRA    1D10
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
1890:  MOVLW  01
1892:  MOVLB  1
1894:  MOVWF  x24
1896:  MOVLW  12
1898:  MOVWF  FE9
189A:  MOVFF  124,FEA
189E:  MOVLW  7E
18A0:  MOVWF  FEF
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
18A2:  BSF    FD8.1
18A4:  MOVFF  115,12A
18A8:  MOVFF  114,129
18AC:  MOVFF  113,128
18B0:  MOVFF  112,127
18B4:  CLRF   x2E
18B6:  CLRF   x2D
18B8:  CLRF   x2C
18BA:  MOVLW  7F
18BC:  MOVWF  x2B
18BE:  MOVLB  0
18C0:  CALL   0DE2
18C4:  MOVFF  00,123
18C8:  MOVFF  01,124
18CC:  MOVFF  02,125
18D0:  MOVFF  03,126
18D4:  BCF    FD8.1
18D6:  MOVFF  115,12A
18DA:  MOVFF  114,129
18DE:  MOVFF  113,128
18E2:  MOVFF  112,127
18E6:  MOVLB  1
18E8:  CLRF   x2E
18EA:  CLRF   x2D
18EC:  CLRF   x2C
18EE:  MOVLW  7F
18F0:  MOVWF  x2B
18F2:  MOVLB  0
18F4:  CALL   0DE2
18F8:  MOVFF  126,12A
18FC:  MOVFF  125,129
1900:  MOVFF  124,128
1904:  MOVFF  123,127
1908:  MOVFF  03,12E
190C:  MOVFF  02,12D
1910:  MOVFF  01,12C
1914:  MOVFF  00,12B
1918:  CALL   0C84
191C:  MOVFF  03,115
1920:  MOVFF  02,114
1924:  MOVFF  01,113
1928:  MOVFF  00,112
....................  
....................       y2=y*y; 
192C:  MOVFF  115,126
1930:  MOVFF  114,125
1934:  MOVFF  113,124
1938:  MOVFF  112,123
193C:  MOVFF  115,12A
1940:  MOVFF  114,129
1944:  MOVFF  113,128
1948:  MOVFF  112,127
194C:  RCALL  138C
194E:  MOVFF  03,121
1952:  MOVFF  02,120
1956:  MOVFF  01,11F
195A:  MOVFF  00,11E
....................  
....................       res = pl[0]*y2 + pl[1]; 
195E:  MOVLW  BC
1960:  MOVLB  1
1962:  MOVWF  x26
1964:  MOVLW  24
1966:  MOVWF  x25
1968:  MOVLW  67
196A:  MOVWF  x24
196C:  MOVLW  7D
196E:  MOVWF  x23
1970:  MOVFF  121,12A
1974:  MOVFF  120,129
1978:  MOVFF  11F,128
197C:  MOVFF  11E,127
1980:  MOVLB  0
1982:  RCALL  138C
1984:  MOVFF  00,123
1988:  MOVFF  01,124
198C:  MOVFF  02,125
1990:  MOVFF  03,126
1994:  BCF    FD8.1
1996:  MOVFF  03,12A
199A:  MOVFF  02,129
199E:  MOVFF  01,128
19A2:  MOVFF  00,127
19A6:  MOVLW  E3
19A8:  MOVLB  1
19AA:  MOVWF  x2E
19AC:  MOVLW  E4
19AE:  MOVWF  x2D
19B0:  MOVLW  90
19B2:  MOVWF  x2C
19B4:  MOVLW  82
19B6:  MOVWF  x2B
19B8:  MOVLB  0
19BA:  CALL   0DE2
19BE:  MOVFF  03,119
19C2:  MOVFF  02,118
19C6:  MOVFF  01,117
19CA:  MOVFF  00,116
....................       res = res*y2 + pl[2]; 
19CE:  MOVFF  119,126
19D2:  MOVFF  118,125
19D6:  MOVFF  117,124
19DA:  MOVFF  116,123
19DE:  MOVFF  121,12A
19E2:  MOVFF  120,129
19E6:  MOVFF  11F,128
19EA:  MOVFF  11E,127
19EE:  RCALL  138C
19F0:  MOVFF  00,123
19F4:  MOVFF  01,124
19F8:  MOVFF  02,125
19FC:  MOVFF  03,126
1A00:  BCF    FD8.1
1A02:  MOVFF  03,12A
1A06:  MOVFF  02,129
1A0A:  MOVFF  01,128
1A0E:  MOVFF  00,127
1A12:  MOVLW  1C
1A14:  MOVLB  1
1A16:  MOVWF  x2E
1A18:  MOVLW  87
1A1A:  MOVWF  x2D
1A1C:  MOVLW  57
1A1E:  MOVWF  x2C
1A20:  MOVLW  83
1A22:  MOVWF  x2B
1A24:  MOVLB  0
1A26:  CALL   0DE2
1A2A:  MOVFF  03,119
1A2E:  MOVFF  02,118
1A32:  MOVFF  01,117
1A36:  MOVFF  00,116
....................       res = res*y2 + pl[3]; 
1A3A:  MOVFF  119,126
1A3E:  MOVFF  118,125
1A42:  MOVFF  117,124
1A46:  MOVFF  116,123
1A4A:  MOVFF  121,12A
1A4E:  MOVFF  120,129
1A52:  MOVFF  11F,128
1A56:  MOVFF  11E,127
1A5A:  RCALL  138C
1A5C:  MOVFF  00,123
1A60:  MOVFF  01,124
1A64:  MOVFF  02,125
1A68:  MOVFF  03,126
1A6C:  BCF    FD8.1
1A6E:  MOVFF  03,12A
1A72:  MOVFF  02,129
1A76:  MOVFF  01,128
1A7A:  MOVFF  00,127
1A7E:  MOVLW  AB
1A80:  MOVLB  1
1A82:  MOVWF  x2E
1A84:  MOVLW  E1
1A86:  MOVWF  x2D
1A88:  MOVLW  9E
1A8A:  MOVWF  x2C
1A8C:  MOVLW  83
1A8E:  MOVWF  x2B
1A90:  MOVLB  0
1A92:  CALL   0DE2
1A96:  MOVFF  03,119
1A9A:  MOVFF  02,118
1A9E:  MOVFF  01,117
1AA2:  MOVFF  00,116
....................  
....................       r = ql[0]*y2 + ql[1]; 
1AA6:  MOVLB  1
1AA8:  CLRF   x26
1AAA:  CLRF   x25
1AAC:  CLRF   x24
1AAE:  MOVLW  7F
1AB0:  MOVWF  x23
1AB2:  MOVFF  121,12A
1AB6:  MOVFF  120,129
1ABA:  MOVFF  11F,128
1ABE:  MOVFF  11E,127
1AC2:  MOVLB  0
1AC4:  RCALL  138C
1AC6:  MOVFF  00,123
1ACA:  MOVFF  01,124
1ACE:  MOVFF  02,125
1AD2:  MOVFF  03,126
1AD6:  BCF    FD8.1
1AD8:  MOVFF  03,12A
1ADC:  MOVFF  02,129
1AE0:  MOVFF  01,128
1AE4:  MOVFF  00,127
1AE8:  MOVLW  B4
1AEA:  MOVLB  1
1AEC:  MOVWF  x2E
1AEE:  MOVLW  2A
1AF0:  MOVWF  x2D
1AF2:  MOVLW  82
1AF4:  MOVWF  x2C
1AF6:  MOVWF  x2B
1AF8:  MOVLB  0
1AFA:  CALL   0DE2
1AFE:  MOVFF  03,11D
1B02:  MOVFF  02,11C
1B06:  MOVFF  01,11B
1B0A:  MOVFF  00,11A
....................       r = r*y2 + ql[2]; 
1B0E:  MOVFF  11D,126
1B12:  MOVFF  11C,125
1B16:  MOVFF  11B,124
1B1A:  MOVFF  11A,123
1B1E:  MOVFF  121,12A
1B22:  MOVFF  120,129
1B26:  MOVFF  11F,128
1B2A:  MOVFF  11E,127
1B2E:  RCALL  138C
1B30:  MOVFF  00,123
1B34:  MOVFF  01,124
1B38:  MOVFF  02,125
1B3C:  MOVFF  03,126
1B40:  BCF    FD8.1
1B42:  MOVFF  03,12A
1B46:  MOVFF  02,129
1B4A:  MOVFF  01,128
1B4E:  MOVFF  00,127
1B52:  MOVLW  80
1B54:  MOVLB  1
1B56:  MOVWF  x2E
1B58:  MOVLW  3E
1B5A:  MOVWF  x2D
1B5C:  MOVLW  06
1B5E:  MOVWF  x2C
1B60:  MOVLW  83
1B62:  MOVWF  x2B
1B64:  MOVLB  0
1B66:  CALL   0DE2
1B6A:  MOVFF  03,11D
1B6E:  MOVFF  02,11C
1B72:  MOVFF  01,11B
1B76:  MOVFF  00,11A
....................       r = r*y2 + ql[3]; 
1B7A:  MOVFF  11D,126
1B7E:  MOVFF  11C,125
1B82:  MOVFF  11B,124
1B86:  MOVFF  11A,123
1B8A:  MOVFF  121,12A
1B8E:  MOVFF  120,129
1B92:  MOVFF  11F,128
1B96:  MOVFF  11E,127
1B9A:  CALL   138C
1B9E:  MOVFF  00,123
1BA2:  MOVFF  01,124
1BA6:  MOVFF  02,125
1BAA:  MOVFF  03,126
1BAE:  BCF    FD8.1
1BB0:  MOVFF  03,12A
1BB4:  MOVFF  02,129
1BB8:  MOVFF  01,128
1BBC:  MOVFF  00,127
1BC0:  MOVLW  AB
1BC2:  MOVLB  1
1BC4:  MOVWF  x2E
1BC6:  MOVLW  E1
1BC8:  MOVWF  x2D
1BCA:  MOVLW  9E
1BCC:  MOVWF  x2C
1BCE:  MOVLW  82
1BD0:  MOVWF  x2B
1BD2:  MOVLB  0
1BD4:  CALL   0DE2
1BD8:  MOVFF  03,11D
1BDC:  MOVFF  02,11C
1BE0:  MOVFF  01,11B
1BE4:  MOVFF  00,11A
....................  
....................       res = y*res/r; 
1BE8:  MOVFF  115,126
1BEC:  MOVFF  114,125
1BF0:  MOVFF  113,124
1BF4:  MOVFF  112,123
1BF8:  MOVFF  119,12A
1BFC:  MOVFF  118,129
1C00:  MOVFF  117,128
1C04:  MOVFF  116,127
1C08:  CALL   138C
1C0C:  MOVFF  00,123
1C10:  MOVFF  01,124
1C14:  MOVFF  02,125
1C18:  MOVFF  03,126
1C1C:  MOVFF  03,12A
1C20:  MOVFF  02,129
1C24:  MOVFF  01,128
1C28:  MOVFF  00,127
1C2C:  MOVFF  11D,12E
1C30:  MOVFF  11C,12D
1C34:  MOVFF  11B,12C
1C38:  MOVFF  11A,12B
1C3C:  CALL   0C84
1C40:  MOVFF  03,119
1C44:  MOVFF  02,118
1C48:  MOVFF  01,117
1C4C:  MOVFF  00,116
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
1C50:  MOVLW  01
1C52:  MOVLB  1
1C54:  MOVWF  x24
1C56:  MOVLW  0E
1C58:  MOVWF  FE9
1C5A:  MOVFF  124,FEA
1C5E:  MOVLW  7E
1C60:  SUBWF  FEF,W
1C62:  MOVWF  x22
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
1C64:  BTFSC  x22.7
1C66:  BRA    1C6A
1C68:  BRA    1C92
....................          r = -(float32)-n; 
1C6A:  MOVLW  00
1C6C:  BSF    FD8.0
1C6E:  SUBFWB x22,W
1C70:  CLRF   x24
1C72:  MOVWF  x23
1C74:  BTFSC  x23.7
1C76:  DECF   x24,F
1C78:  MOVLB  0
1C7A:  RCALL  180C
1C7C:  MOVFF  00,11A
1C80:  MOVF   01,W
1C82:  XORLW  80
1C84:  MOVLB  1
1C86:  MOVWF  x1B
1C88:  MOVFF  02,11C
1C8C:  MOVFF  03,11D
....................       else 
1C90:  BRA    1CB2
....................          r = (float32)n; 
1C92:  CLRF   x24
1C94:  MOVFF  122,123
1C98:  BTFSC  x23.7
1C9A:  DECF   x24,F
1C9C:  MOVLB  0
1C9E:  RCALL  180C
1CA0:  MOVFF  03,11D
1CA4:  MOVFF  02,11C
1CA8:  MOVFF  01,11B
1CAC:  MOVFF  00,11A
1CB0:  MOVLB  1
....................  
....................       res += r*LN2; 
1CB2:  MOVFF  11D,126
1CB6:  MOVFF  11C,125
1CBA:  MOVFF  11B,124
1CBE:  MOVFF  11A,123
1CC2:  MOVLW  18
1CC4:  MOVWF  x2A
1CC6:  MOVLW  72
1CC8:  MOVWF  x29
1CCA:  MOVLW  31
1CCC:  MOVWF  x28
1CCE:  MOVLW  7E
1CD0:  MOVWF  x27
1CD2:  MOVLB  0
1CD4:  CALL   138C
1CD8:  BCF    FD8.1
1CDA:  MOVFF  119,12A
1CDE:  MOVFF  118,129
1CE2:  MOVFF  117,128
1CE6:  MOVFF  116,127
1CEA:  MOVFF  03,12E
1CEE:  MOVFF  02,12D
1CF2:  MOVFF  01,12C
1CF6:  MOVFF  00,12B
1CFA:  CALL   0DE2
1CFE:  MOVFF  03,119
1D02:  MOVFF  02,118
1D06:  MOVFF  01,117
1D0A:  MOVFF  00,116
....................    } 
....................  
....................    else 
1D0E:  BRA    1D1C
....................       res = 0.0; 
1D10:  MOVLB  1
1D12:  CLRF   x19
1D14:  CLRF   x18
1D16:  CLRF   x17
1D18:  CLRF   x16
1D1A:  MOVLB  0
....................  
....................    return(res); 
1D1C:  MOVFF  116,00
1D20:  MOVFF  117,01
1D24:  MOVFF  118,02
1D28:  MOVFF  119,03
.................... } 
1D2C:  GOTO   1F08 (RETURN)
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=11,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 FeedbackDamper=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
17AE:  MOVLB  1
17B0:  RLCF   x0D,W
17B2:  MOVWF  00
17B4:  RLCF   00,F
17B6:  MOVLW  FC
17B8:  ANDWF  00,F
17BA:  MOVFF  00,01
17BE:  MOVF   FC2,W
17C0:  ANDLW  C3
17C2:  IORWF  00,W
17C4:  MOVWF  FC2
17C6:  MOVLW  0A
17C8:  MOVWF  x24
17CA:  MOVLB  0
17CC:  CALL   0A5E
17D0:  BSF    FC2.1
17D2:  BTFSC  FC2.1
17D4:  BRA    17D2
17D6:  MOVFF  FC4,113
17DA:  MOVFF  FC3,112
17DE:  MOVLB  0
17E0:  CALL   0C4E
17E4:  MOVFF  03,111
17E8:  MOVFF  02,110
17EC:  MOVFF  01,10F
17F0:  MOVFF  00,10E
17F4:  MOVFF  10E,00
17F8:  MOVFF  10F,01
17FC:  MOVFF  110,02
1800:  MOVFF  111,03
.................... } 
1804:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
105A:  MOVLB  1
105C:  MOVF   x09,F
105E:  BNZ   1066
....................    { 
....................       Pantalla_off; 
1060:  BCF    F8B.1
1062:  BCF    F94.1
....................    } 
....................    else 
1064:  BRA    106A
....................    { 
....................       Pantalla_on; 
1066:  BSF    F8B.1
1068:  BCF    F94.1
....................    } 
.................... } 
106A:  MOVLB  0
106C:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
*
1D30:  MOVLB  1
1D32:  CLRF   x0D
1D34:  MOVLB  0
1D36:  RCALL  17AE
1D38:  MOVFF  00,10A
1D3C:  MOVFF  01,10B
1D40:  MOVFF  02,10C
1D44:  MOVFF  03,10D
1D48:  MOVFF  03,126
1D4C:  MOVFF  02,125
1D50:  MOVFF  01,124
1D54:  MOVFF  00,123
1D58:  MOVLB  1
1D5A:  CLRF   x2A
1D5C:  CLRF   x29
1D5E:  MOVLW  20
1D60:  MOVWF  x28
1D62:  MOVLW  81
1D64:  MOVWF  x27
1D66:  MOVLB  0
1D68:  CALL   138C
1D6C:  MOVFF  00,10A
1D70:  MOVFF  01,10B
1D74:  MOVFF  02,10C
1D78:  MOVFF  03,10D
1D7C:  MOVFF  03,12A
1D80:  MOVFF  02,129
1D84:  MOVFF  01,128
1D88:  MOVFF  00,127
1D8C:  MOVLB  1
1D8E:  CLRF   x2E
1D90:  MOVLW  C0
1D92:  MOVWF  x2D
1D94:  MOVLW  7F
1D96:  MOVWF  x2C
1D98:  MOVLW  88
1D9A:  MOVWF  x2B
1D9C:  MOVLB  0
1D9E:  CALL   0C84
1DA2:  MOVFF  03,80
1DA6:  MOVFF  02,7F
1DAA:  MOVFF  01,7E
1DAE:  MOVFF  00,7D
....................     Voltaje1=sensores(1)*5/1023; 
1DB2:  MOVLW  01
1DB4:  MOVLB  1
1DB6:  MOVWF  x0D
1DB8:  MOVLB  0
1DBA:  RCALL  17AE
1DBC:  MOVFF  00,10A
1DC0:  MOVFF  01,10B
1DC4:  MOVFF  02,10C
1DC8:  MOVFF  03,10D
1DCC:  MOVFF  03,126
1DD0:  MOVFF  02,125
1DD4:  MOVFF  01,124
1DD8:  MOVFF  00,123
1DDC:  MOVLB  1
1DDE:  CLRF   x2A
1DE0:  CLRF   x29
1DE2:  MOVLW  20
1DE4:  MOVWF  x28
1DE6:  MOVLW  81
1DE8:  MOVWF  x27
1DEA:  MOVLB  0
1DEC:  CALL   138C
1DF0:  MOVFF  00,10A
1DF4:  MOVFF  01,10B
1DF8:  MOVFF  02,10C
1DFC:  MOVFF  03,10D
1E00:  MOVFF  03,12A
1E04:  MOVFF  02,129
1E08:  MOVFF  01,128
1E0C:  MOVFF  00,127
1E10:  MOVLB  1
1E12:  CLRF   x2E
1E14:  MOVLW  C0
1E16:  MOVWF  x2D
1E18:  MOVLW  7F
1E1A:  MOVWF  x2C
1E1C:  MOVLW  88
1E1E:  MOVWF  x2B
1E20:  MOVLB  0
1E22:  CALL   0C84
1E26:  MOVFF  03,84
1E2A:  MOVFF  02,83
1E2E:  MOVFF  01,82
1E32:  MOVFF  00,81
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
1E36:  MOVLB  1
1E38:  CLRF   x2A
1E3A:  CLRF   x29
1E3C:  MOVLW  20
1E3E:  MOVWF  x28
1E40:  MOVLW  81
1E42:  MOVWF  x27
1E44:  MOVFF  84,12E
1E48:  MOVFF  83,12D
1E4C:  MOVFF  82,12C
1E50:  MOVFF  81,12B
1E54:  MOVLB  0
1E56:  CALL   0C84
1E5A:  MOVFF  00,10A
1E5E:  MOVFF  01,10B
1E62:  MOVFF  02,10C
1E66:  MOVFF  03,10D
1E6A:  BSF    FD8.1
1E6C:  MOVFF  03,12A
1E70:  MOVFF  02,129
1E74:  MOVFF  01,128
1E78:  MOVFF  00,127
1E7C:  MOVLB  1
1E7E:  CLRF   x2E
1E80:  CLRF   x2D
1E82:  CLRF   x2C
1E84:  MOVLW  7F
1E86:  MOVWF  x2B
1E88:  MOVLB  0
1E8A:  CALL   0DE2
1E8E:  MOVFF  78,12A
1E92:  MOVFF  77,129
1E96:  MOVFF  76,128
1E9A:  MOVFF  75,127
1E9E:  MOVFF  03,12E
1EA2:  MOVFF  02,12D
1EA6:  MOVFF  01,12C
1EAA:  MOVFF  00,12B
1EAE:  CALL   0C84
1EB2:  MOVFF  03,7C
1EB6:  MOVFF  02,7B
1EBA:  MOVFF  01,7A
1EBE:  MOVFF  00,79
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
1EC2:  MOVFF  7C,12A
1EC6:  MOVFF  7B,129
1ECA:  MOVFF  7A,128
1ECE:  MOVFF  79,127
1ED2:  MOVFF  68,12E
1ED6:  MOVFF  67,12D
1EDA:  MOVFF  66,12C
1EDE:  MOVFF  65,12B
1EE2:  CALL   0C84
1EE6:  MOVFF  00,10A
1EEA:  MOVFF  01,10B
1EEE:  MOVFF  02,10C
1EF2:  MOVFF  03,10D
1EF6:  MOVFF  03,111
1EFA:  MOVFF  02,110
1EFE:  MOVFF  01,10F
1F02:  MOVFF  00,10E
1F06:  BRA    185C
1F08:  MOVFF  00,10A
1F0C:  MOVFF  01,10B
1F10:  MOVFF  02,10C
1F14:  MOVFF  03,10D
1F18:  MOVFF  03,12A
1F1C:  MOVFF  02,129
1F20:  MOVFF  01,128
1F24:  MOVFF  00,127
1F28:  MOVFF  64,12E
1F2C:  MOVFF  63,12D
1F30:  MOVFF  62,12C
1F34:  MOVFF  61,12B
1F38:  CALL   0C84
1F3C:  MOVFF  00,10A
1F40:  MOVFF  01,10B
1F44:  MOVFF  02,10C
1F48:  MOVFF  03,10D
1F4C:  MOVLB  1
1F4E:  CLRF   x2A
1F50:  CLRF   x29
1F52:  CLRF   x28
1F54:  MOVLW  7F
1F56:  MOVWF  x27
1F58:  MOVFF  6C,12E
1F5C:  MOVFF  6B,12D
1F60:  MOVFF  6A,12C
1F64:  MOVFF  69,12B
1F68:  MOVLB  0
1F6A:  CALL   0C84
1F6E:  MOVFF  FEA,10F
1F72:  MOVFF  FE9,10E
1F76:  BCF    FD8.1
1F78:  MOVFF  10D,12A
1F7C:  MOVFF  10C,129
1F80:  MOVFF  10B,128
1F84:  MOVFF  10A,127
1F88:  MOVFF  03,12E
1F8C:  MOVFF  02,12D
1F90:  MOVFF  01,12C
1F94:  MOVFF  00,12B
1F98:  CALL   0DE2
1F9C:  MOVFF  10F,FEA
1FA0:  MOVFF  10E,FE9
1FA4:  MOVLB  1
1FA6:  CLRF   x2A
1FA8:  CLRF   x29
1FAA:  CLRF   x28
1FAC:  MOVLW  7F
1FAE:  MOVWF  x27
1FB0:  MOVFF  03,12E
1FB4:  MOVFF  02,12D
1FB8:  MOVFF  01,12C
1FBC:  MOVFF  00,12B
1FC0:  MOVLB  0
1FC2:  CALL   0C84
1FC6:  MOVFF  03,70
1FCA:  MOVFF  02,6F
1FCE:  MOVFF  01,6E
1FD2:  MOVFF  00,6D
....................     TC=TK-273.15; 
1FD6:  BSF    FD8.1
1FD8:  MOVFF  70,12A
1FDC:  MOVFF  6F,129
1FE0:  MOVFF  6E,128
1FE4:  MOVFF  6D,127
1FE8:  MOVLW  33
1FEA:  MOVLB  1
1FEC:  MOVWF  x2E
1FEE:  MOVLW  93
1FF0:  MOVWF  x2D
1FF2:  MOVLW  08
1FF4:  MOVWF  x2C
1FF6:  MOVLW  87
1FF8:  MOVWF  x2B
1FFA:  MOVLB  0
1FFC:  CALL   0DE2
2000:  MOVFF  03,74
2004:  MOVFF  02,73
2008:  MOVFF  01,72
200C:  MOVFF  00,71
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
2010:  MOVF   2E,W
2012:  SUBLW  0A
2014:  BNZ   2076
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
2016:  MOVLB  1
2018:  CLRF   x0D
201A:  MOVLB  0
201C:  CALL   17AE
2020:  MOVFF  00,10A
2024:  MOVFF  01,10B
2028:  MOVFF  02,10C
202C:  MOVFF  03,10D
2030:  MOVFF  FEA,10F
2034:  MOVFF  FE9,10E
2038:  BCF    FD8.1
203A:  MOVFF  03,12A
203E:  MOVFF  02,129
2042:  MOVFF  01,128
2046:  MOVFF  00,127
204A:  MOVFF  C8,12E
204E:  MOVFF  C7,12D
2052:  MOVFF  C6,12C
2056:  MOVFF  C5,12B
205A:  CALL   0DE2
205E:  MOVFF  10F,FEA
2062:  MOVFF  10E,FE9
2066:  MOVFF  03,A4
206A:  MOVFF  02,A3
206E:  MOVFF  01,A2
2072:  MOVFF  00,A1
....................     } 
....................     if(negativo==20) 
2076:  MOVF   2E,W
2078:  SUBLW  14
207A:  BNZ   20DC
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
207C:  MOVLB  1
207E:  CLRF   x0D
2080:  MOVLB  0
2082:  CALL   17AE
2086:  MOVFF  00,10A
208A:  MOVFF  01,10B
208E:  MOVFF  02,10C
2092:  MOVFF  03,10D
2096:  MOVFF  FEA,10F
209A:  MOVFF  FE9,10E
209E:  BSF    FD8.1
20A0:  MOVFF  03,12A
20A4:  MOVFF  02,129
20A8:  MOVFF  01,128
20AC:  MOVFF  00,127
20B0:  MOVFF  C8,12E
20B4:  MOVFF  C7,12D
20B8:  MOVFF  C6,12C
20BC:  MOVFF  C5,12B
20C0:  CALL   0DE2
20C4:  MOVFF  10F,FEA
20C8:  MOVFF  10E,FE9
20CC:  MOVFF  03,A4
20D0:  MOVFF  02,A3
20D4:  MOVFF  01,A2
20D8:  MOVFF  00,A1
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
20DC:  MOVFF  A4,126
20E0:  MOVFF  A3,125
20E4:  MOVFF  A2,124
20E8:  MOVFF  A1,123
20EC:  MOVFF  A4,12A
20F0:  MOVFF  A3,129
20F4:  MOVFF  A2,128
20F8:  MOVFF  A1,127
20FC:  CALL   138C
2100:  MOVFF  03,A8
2104:  MOVFF  02,A7
2108:  MOVFF  01,A6
210C:  MOVFF  00,A5
....................     x_cubo=x_uno*x_cuadrado; 
2110:  MOVFF  A4,126
2114:  MOVFF  A3,125
2118:  MOVFF  A2,124
211C:  MOVFF  A1,123
2120:  MOVFF  A8,12A
2124:  MOVFF  A7,129
2128:  MOVFF  A6,128
212C:  MOVFF  A5,127
2130:  CALL   138C
2134:  MOVFF  03,AC
2138:  MOVFF  02,AB
213C:  MOVFF  01,AA
2140:  MOVFF  00,A9
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
2144:  MOVFF  AC,126
2148:  MOVFF  AB,125
214C:  MOVFF  AA,124
2150:  MOVFF  A9,123
2154:  MOVFF  88,12A
2158:  MOVFF  87,129
215C:  MOVFF  86,128
2160:  MOVFF  85,127
2164:  CALL   138C
2168:  MOVFF  00,10A
216C:  MOVFF  01,10B
2170:  MOVFF  02,10C
2174:  MOVFF  03,10D
2178:  MOVFF  A8,126
217C:  MOVFF  A7,125
2180:  MOVFF  A6,124
2184:  MOVFF  A5,123
2188:  MOVFF  8C,12A
218C:  MOVFF  8B,129
2190:  MOVFF  8A,128
2194:  MOVFF  89,127
2198:  CALL   138C
219C:  BCF    FD8.1
219E:  MOVFF  10D,12A
21A2:  MOVFF  10C,129
21A6:  MOVFF  10B,128
21AA:  MOVFF  10A,127
21AE:  MOVFF  03,12E
21B2:  MOVFF  02,12D
21B6:  MOVFF  01,12C
21BA:  MOVFF  00,12B
21BE:  CALL   0DE2
21C2:  MOVFF  00,10A
21C6:  MOVFF  01,10B
21CA:  MOVFF  02,10C
21CE:  MOVFF  03,10D
21D2:  MOVFF  A4,126
21D6:  MOVFF  A3,125
21DA:  MOVFF  A2,124
21DE:  MOVFF  A1,123
21E2:  MOVFF  90,12A
21E6:  MOVFF  8F,129
21EA:  MOVFF  8E,128
21EE:  MOVFF  8D,127
21F2:  CALL   138C
21F6:  BCF    FD8.1
21F8:  MOVFF  10D,12A
21FC:  MOVFF  10C,129
2200:  MOVFF  10B,128
2204:  MOVFF  10A,127
2208:  MOVFF  03,12E
220C:  MOVFF  02,12D
2210:  MOVFF  01,12C
2214:  MOVFF  00,12B
2218:  CALL   0DE2
221C:  MOVFF  00,10A
2220:  MOVFF  01,10B
2224:  MOVFF  02,10C
2228:  MOVFF  03,10D
222C:  BCF    FD8.1
222E:  MOVFF  03,12A
2232:  MOVFF  02,129
2236:  MOVFF  01,128
223A:  MOVFF  00,127
223E:  MOVFF  94,12E
2242:  MOVFF  93,12D
2246:  MOVFF  92,12C
224A:  MOVFF  91,12B
224E:  CALL   0DE2
2252:  MOVFF  03,BC
2256:  MOVFF  02,BB
225A:  MOVFF  01,BA
225E:  MOVFF  00,B9
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
2262:  BSF    FD8.1
2264:  MOVFF  BC,12A
2268:  MOVFF  BB,129
226C:  MOVFF  BA,128
2270:  MOVFF  B9,127
2274:  MOVLW  0A
2276:  MOVLB  1
2278:  MOVWF  x2E
227A:  MOVLW  D7
227C:  MOVWF  x2D
227E:  MOVLW  23
2280:  MOVWF  x2C
2282:  MOVLW  7B
2284:  MOVWF  x2B
2286:  MOVLB  0
2288:  CALL   0DE2
228C:  MOVFF  03,BC
2290:  MOVFF  02,BB
2294:  MOVFF  01,BA
2298:  MOVFF  00,B9
....................     if(Velocidad<0.0) 
229C:  MOVFF  BC,126
22A0:  MOVFF  BB,125
22A4:  MOVFF  BA,124
22A8:  MOVFF  B9,123
22AC:  MOVLB  1
22AE:  CLRF   x2A
22B0:  CLRF   x29
22B2:  CLRF   x28
22B4:  CLRF   x27
22B6:  MOVLB  0
22B8:  CALL   16F8
22BC:  BNC   22C6
....................      {Velocidad=0.0;} 
22BE:  CLRF   xBC
22C0:  CLRF   xBB
22C2:  CLRF   xBA
22C4:  CLRF   xB9
....................       
....................      if(l>=media) 
22C6:  MOVLB  1
22C8:  MOVF   x09,W
22CA:  SUBWF  2A,W
22CC:  BNC   22D0
....................        {l=0;} 
22CE:  CLRF   2A
....................       
....................      promedio[l]=Velocidad;l++; 
22D0:  MOVF   2A,W
22D2:  MULLW  04
22D4:  MOVF   FF3,W
22D6:  CLRF   03
22D8:  ADDLW  D9
22DA:  MOVWF  FE9
22DC:  MOVLW  00
22DE:  ADDWFC 03,W
22E0:  MOVWF  FEA
22E2:  MOVFF  B9,FEF
22E6:  MOVFF  BA,FEC
22EA:  MOVFF  BB,FEC
22EE:  MOVFF  BC,FEC
22F2:  INCF   2A,F
....................      Flujo2=0; 
22F4:  MOVLB  0
22F6:  CLRF   x9C
22F8:  CLRF   x9B
22FA:  CLRF   x9A
22FC:  CLRF   x99
....................         for(h=0;h<=(media-1);h++) 
22FE:  CLRF   2B
2300:  MOVLW  01
2302:  MOVLB  1
2304:  SUBWF  x09,W
2306:  SUBWF  2B,W
2308:  BZ    230C
230A:  BC    237C
....................         { 
....................            Flujo2+=promedio[h]; 
230C:  MOVF   2B,W
230E:  MULLW  04
2310:  MOVF   FF3,W
2312:  CLRF   03
2314:  ADDLW  D9
2316:  MOVWF  FE9
2318:  MOVLW  00
231A:  ADDWFC 03,W
231C:  MOVWF  FEA
231E:  MOVFF  FEF,00
2322:  MOVFF  FEC,01
2326:  MOVFF  FEC,02
232A:  MOVFF  FEC,03
232E:  MOVFF  FEA,10B
2332:  MOVFF  FE9,10A
2336:  BCF    FD8.1
2338:  MOVFF  9C,12A
233C:  MOVFF  9B,129
2340:  MOVFF  9A,128
2344:  MOVFF  99,127
2348:  MOVFF  03,12E
234C:  MOVFF  02,12D
2350:  MOVFF  01,12C
2354:  MOVFF  00,12B
2358:  MOVLB  0
235A:  CALL   0DE2
235E:  MOVFF  10B,FEA
2362:  MOVFF  10A,FE9
2366:  MOVFF  03,9C
236A:  MOVFF  02,9B
236E:  MOVFF  01,9A
2372:  MOVFF  00,99
....................         }  
2376:  INCF   2B,F
2378:  BRA    2300
237A:  MOVLB  1
....................            Flujo2=(Flujo2/media)*Ajuste1;  
237C:  CLRF   x13
237E:  MOVFF  109,112
2382:  MOVLB  0
2384:  CALL   0C4E
2388:  MOVFF  9C,12A
238C:  MOVFF  9B,129
2390:  MOVFF  9A,128
2394:  MOVFF  99,127
2398:  MOVFF  03,12E
239C:  MOVFF  02,12D
23A0:  MOVFF  01,12C
23A4:  MOVFF  00,12B
23A8:  CALL   0C84
23AC:  MOVFF  00,10A
23B0:  MOVFF  01,10B
23B4:  MOVFF  02,10C
23B8:  MOVFF  03,10D
23BC:  MOVFF  03,126
23C0:  MOVFF  02,125
23C4:  MOVFF  01,124
23C8:  MOVFF  00,123
23CC:  MOVFF  CC,12A
23D0:  MOVFF  CB,129
23D4:  MOVFF  CA,128
23D8:  MOVFF  C9,127
23DC:  CALL   138C
23E0:  MOVFF  03,9C
23E4:  MOVFF  02,9B
23E8:  MOVFF  01,9A
23EC:  MOVFF  00,99
....................            return Flujo2; 
23F0:  MOVFF  99,00
23F4:  MOVFF  9A,01
23F8:  MOVFF  9B,02
23FC:  MOVFF  9C,03
.................... } 
2400:  RETLW  00
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
2402:  MOVF   2F,W
2404:  SUBLW  14
2406:  BTFSS  FD8.2
2408:  BRA    24FC
240A:  BTFSS  3E.1
240C:  BRA    24FC
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
240E:  BSF    FD8.1
2410:  MOVFF  4F,12A
2414:  MOVFF  4E,129
2418:  MOVFF  4D,128
241C:  MOVFF  4C,127
2420:  MOVFF  98,12E
2424:  MOVFF  97,12D
2428:  MOVFF  96,12C
242C:  MOVFF  95,12B
2430:  CALL   0DE2
2434:  MOVFF  03,D8
2438:  MOVFF  02,D7
243C:  MOVFF  01,D6
2440:  MOVFF  00,D5
....................       if(error<0.2&&error>-0.2) 
2444:  MOVFF  D8,126
2448:  MOVFF  D7,125
244C:  MOVFF  D6,124
2450:  MOVFF  D5,123
2454:  MOVLW  CD
2456:  MOVLB  1
2458:  MOVWF  x2A
245A:  MOVLW  CC
245C:  MOVWF  x29
245E:  MOVLW  4C
2460:  MOVWF  x28
2462:  MOVLW  7C
2464:  MOVWF  x27
2466:  MOVLB  0
2468:  CALL   16F8
246C:  BNC   2498
246E:  MOVLW  CD
2470:  MOVLB  1
2472:  MOVWF  x26
2474:  MOVLW  CC
2476:  MOVWF  x25
2478:  MOVWF  x24
247A:  MOVLW  7C
247C:  MOVWF  x23
247E:  MOVFF  D8,12A
2482:  MOVFF  D7,129
2486:  MOVFF  D6,128
248A:  MOVFF  D5,127
248E:  MOVLB  0
2490:  CALL   16F8
2494:  BNC   2498
....................       {} 
....................       else 
2496:  BRA    24E4
....................       { 
....................          if(error>0.0) 
2498:  MOVLB  1
249A:  CLRF   x26
249C:  CLRF   x25
249E:  CLRF   x24
24A0:  CLRF   x23
24A2:  MOVFF  D8,12A
24A6:  MOVFF  D7,129
24AA:  MOVFF  D6,128
24AE:  MOVFF  D5,127
24B2:  MOVLB  0
24B4:  CALL   16F8
24B8:  BNC   24BE
....................          {tmp+=1;} 
24BA:  MOVLW  01
24BC:  ADDWF  2C,F
....................                 
....................          if(error<-0.0) 
24BE:  MOVFF  D8,126
24C2:  MOVFF  D7,125
24C6:  MOVFF  D6,124
24CA:  MOVFF  D5,123
24CE:  MOVLB  1
24D0:  CLRF   x2A
24D2:  CLRF   x29
24D4:  CLRF   x28
24D6:  CLRF   x27
24D8:  MOVLB  0
24DA:  CALL   16F8
24DE:  BNC   24E4
....................          {tmp-=1;}   
24E0:  MOVLW  01
24E2:  SUBWF  2C,F
....................       } 
....................        
....................       if(tmp>251) 
24E4:  MOVF   2C,W
24E6:  SUBLW  FB
24E8:  BC    24EE
....................       {tmp=251;} 
24EA:  MOVLW  FB
24EC:  MOVWF  2C
....................       if(tmp<4)          
24EE:  MOVF   2C,W
24F0:  SUBLW  03
24F2:  BNC   24F8
....................       {tmp=4;}       
24F4:  MOVLW  04
24F6:  MOVWF  2C
....................       set_pwm1_duty (tmp); 
24F8:  MOVFF  2C,FBE
....................    } 
....................     
....................    if(Manual==20) 
24FC:  MOVF   30,W
24FE:  SUBLW  14
2500:  BNZ   250A
....................    { 
....................       tmp=251; 
2502:  MOVLW  FB
2504:  MOVWF  2C
....................       set_pwm1_duty (tmp); 
2506:  MOVFF  2C,FBE
....................    } 
....................     
....................    if(Semi==20) 
250A:  MOVF   31,W
250C:  SUBLW  14
250E:  BNZ   2514
....................    { 
....................       set_pwm1_duty (ValorSemi); 
2510:  MOVFF  32,FBE
....................    } 
.................... } 
2514:  RETLW  00
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................     
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   59,F
00BE:  BTFSC  FD8.2
00C0:  INCF   5A,F
....................    tiempos2++; 
00C2:  INCF   5D,F
00C4:  BTFSC  FD8.2
00C6:  INCF   5E,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   5C,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   5B,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    3F.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  3F.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   5B,F
00E0:  BTFSC  FD8.2
00E2:  INCF   5C,F
....................    } 
....................     
....................    if(tiempos2==20) 
00E4:  MOVF   5D,W
00E6:  SUBLW  14
00E8:  BNZ   00F4
00EA:  MOVF   5E,F
00EC:  BNZ   00F4
....................    {tiempos2=0;Lectura2=1;} 
00EE:  CLRF   5E
00F0:  CLRF   5D
00F2:  BSF    3F.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00F4:  MOVF   59,W
00F6:  SUBLW  C8
00F8:  BNZ   015E
00FA:  MOVF   5A,F
00FC:  BNZ   015E
....................    { 
....................       tiempos=0;tiemporeset++; 
00FE:  CLRF   5A
0100:  CLRF   59
0102:  INCF   36,F
....................       Lectura=1; 
0104:  BSF    3F.5
....................           
....................       if(estadomv==1 && flag_filtro==1) 
0106:  BTFSS  3E.1
0108:  BRA    0122
010A:  BTFSS  3F.2
010C:  BRA    0122
....................       {   
....................          if(segundos==60) 
010E:  MOVF   33,W
0110:  SUBLW  3C
0112:  BNZ   0118
....................          { 
....................             segundos=0;minutos++; 
0114:  CLRF   33
0116:  INCF   34,F
....................          } 
....................           
....................          if(minutos==60) 
0118:  MOVF   34,W
011A:  SUBLW  3C
011C:  BNZ   0122
....................          { 
....................             minutos=0;horas++; 
011E:  CLRF   34
0120:  INCF   35,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1) 
0122:  BTFSS  58.4
0124:  BRA    0144
....................       { 
....................          if(purga_segundos>0) 
0126:  MOVF   37,F
0128:  BZ    012E
....................          { 
....................             purga_segundos--; 
012A:  DECF   37,F
....................          } 
....................          else 
012C:  BRA    0144
....................          { 
....................             if(purga_minutos>0) 
012E:  MOVF   22,F
0130:  BZ    013A
....................             { 
....................                purga_minutos--; 
0132:  DECF   22,F
....................                purga_segundos=59; 
0134:  MOVLW  3B
0136:  MOVWF  37
....................             } 
....................             else 
0138:  BRA    0144
....................             { 
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0;Motor_on;Menu=20; 
013A:  BCF    58.4
013C:  BSF    F8A.5
013E:  BCF    F93.5
0140:  MOVLW  14
0142:  MOVWF  17
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1) 
0144:  BTFSS  58.5
0146:  BRA    015E
....................       { 
....................          if(ppurga_segundos>0) 
0148:  MOVF   39,F
014A:  BZ    0150
....................          { 
....................             ppurga_segundos--; 
014C:  DECF   39,F
....................          } 
....................          else 
014E:  BRA    015E
....................          { 
....................             if(ppurga_minutos>0) 
0150:  MOVF   3B,F
0152:  BZ    015C
....................             { 
....................                ppurga_minutos--; 
0154:  DECF   3B,F
....................                ppurga_segundos=59; 
0156:  MOVLW  3B
0158:  MOVWF  39
....................             } 
....................             else 
015A:  BRA    015E
....................             { 
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
015C:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
015E:  BCF    F9E.0
0160:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
11C0:  MOVLB  1
11C2:  DECFSZ x0A,W
11C4:  BRA    11FE
....................    {if(estadoalarma==0) 
11C6:  BTFSC  3E.2
11C8:  BRA    11E2
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
11CA:  MOVLW  02
11CC:  MOVWF  x1F
11CE:  MOVFF  10B,120
11D2:  MOVLB  0
11D4:  RCALL  0B70
11D6:  MOVLW  64
11D8:  MOVWF  FF6
11DA:  MOVLW  01
11DC:  MOVWF  FF7
11DE:  RCALL  106E
11E0:  MOVLB  1
....................    if(estadoalarma==1) 
11E2:  BTFSS  3E.2
11E4:  BRA    11FE
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
11E6:  MOVLW  02
11E8:  MOVWF  x1F
11EA:  MOVFF  10B,120
11EE:  MOVLB  0
11F0:  RCALL  0B70
11F2:  MOVLW  78
11F4:  MOVWF  FF6
11F6:  MOVLW  01
11F8:  MOVWF  FF7
11FA:  RCALL  106E
11FC:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
11FE:  MOVF   x0A,W
1200:  SUBLW  02
1202:  BNZ   121C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
1204:  MOVLW  02
1206:  MOVWF  x1F
1208:  MOVFF  10B,120
120C:  MOVLB  0
120E:  RCALL  0B70
1210:  MOVLW  8C
1212:  MOVWF  FF6
1214:  MOVLW  01
1216:  MOVWF  FF7
1218:  RCALL  106E
121A:  MOVLB  1
....................     
....................    if(x==3) 
121C:  MOVF   x0A,W
121E:  SUBLW  03
1220:  BNZ   123A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
1222:  MOVLW  02
1224:  MOVWF  x1F
1226:  MOVFF  10B,120
122A:  MOVLB  0
122C:  RCALL  0B70
122E:  MOVLW  A0
1230:  MOVWF  FF6
1232:  MOVLW  01
1234:  MOVWF  FF7
1236:  RCALL  106E
1238:  MOVLB  1
....................     
....................    if(x==4) 
123A:  MOVF   x0A,W
123C:  SUBLW  04
123E:  BNZ   1258
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1240:  MOVLW  02
1242:  MOVWF  x1F
1244:  MOVFF  10B,120
1248:  MOVLB  0
124A:  RCALL  0B70
124C:  MOVLW  B4
124E:  MOVWF  FF6
1250:  MOVLW  01
1252:  MOVWF  FF7
1254:  RCALL  106E
1256:  MOVLB  1
....................     
....................    if(x==5) 
1258:  MOVF   x0A,W
125A:  SUBLW  05
125C:  BNZ   1276
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
125E:  MOVLW  02
1260:  MOVWF  x1F
1262:  MOVFF  10B,120
1266:  MOVLB  0
1268:  RCALL  0B70
126A:  MOVLW  C8
126C:  MOVWF  FF6
126E:  MOVLW  01
1270:  MOVWF  FF7
1272:  RCALL  106E
1274:  MOVLB  1
....................     
....................    if(x==6) 
1276:  MOVF   x0A,W
1278:  SUBLW  06
127A:  BNZ   1294
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
127C:  MOVLW  02
127E:  MOVWF  x1F
1280:  MOVFF  10B,120
1284:  MOVLB  0
1286:  RCALL  0B70
1288:  MOVLW  DC
128A:  MOVWF  FF6
128C:  MOVLW  01
128E:  MOVWF  FF7
1290:  RCALL  106E
1292:  MOVLB  1
....................     
....................    if(x==7) 
1294:  MOVF   x0A,W
1296:  SUBLW  07
1298:  BNZ   12B2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
129A:  MOVLW  02
129C:  MOVWF  x1F
129E:  MOVFF  10B,120
12A2:  MOVLB  0
12A4:  RCALL  0B70
12A6:  MOVLW  F0
12A8:  MOVWF  FF6
12AA:  MOVLW  01
12AC:  MOVWF  FF7
12AE:  RCALL  106E
12B0:  MOVLB  1
....................     
....................    if(x==8) 
12B2:  MOVF   x0A,W
12B4:  SUBLW  08
12B6:  BNZ   12D0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
12B8:  MOVLW  02
12BA:  MOVWF  x1F
12BC:  MOVFF  10B,120
12C0:  MOVLB  0
12C2:  RCALL  0B70
12C4:  MOVLW  04
12C6:  MOVWF  FF6
12C8:  MOVLW  02
12CA:  MOVWF  FF7
12CC:  RCALL  106E
12CE:  MOVLB  1
....................     
....................    if(x==9) 
12D0:  MOVF   x0A,W
12D2:  SUBLW  09
12D4:  BNZ   12EE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
12D6:  MOVLW  02
12D8:  MOVWF  x1F
12DA:  MOVFF  10B,120
12DE:  MOVLB  0
12E0:  RCALL  0B70
12E2:  MOVLW  18
12E4:  MOVWF  FF6
12E6:  MOVLW  02
12E8:  MOVWF  FF7
12EA:  RCALL  106E
12EC:  MOVLB  1
....................     
....................    if(x==10) 
12EE:  MOVF   x0A,W
12F0:  SUBLW  0A
12F2:  BNZ   130C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
12F4:  MOVLW  02
12F6:  MOVWF  x1F
12F8:  MOVFF  10B,120
12FC:  MOVLB  0
12FE:  RCALL  0B70
1300:  MOVLW  2C
1302:  MOVWF  FF6
1304:  MOVLW  02
1306:  MOVWF  FF7
1308:  RCALL  106E
130A:  MOVLB  1
.................... } 
130C:  MOVLB  0
130E:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1806:  MOVFF  109,FBE
.................... } 
180A:  RETLW  00
....................  
.................... void main () 
.................... { 
*
2516:  CLRF   FF8
2518:  BCF    FD0.7
251A:  BSF    07.7
251C:  CLRF   FEA
251E:  CLRF   FE9
2520:  MOVLW  64
2522:  MOVWF  17
2524:  MOVLW  0B
2526:  MOVWF  18
2528:  MOVLW  02
252A:  MOVWF  19
252C:  MOVLW  0B
252E:  MOVWF  1A
2530:  MOVLW  02
2532:  MOVWF  1B
2534:  MOVLW  03
2536:  MOVWF  1C
2538:  MOVLW  02
253A:  MOVWF  1D
253C:  MOVWF  1E
253E:  MOVLW  04
2540:  MOVWF  1F
2542:  MOVLW  0A
2544:  MOVWF  20
2546:  MOVLW  01
2548:  MOVWF  21
254A:  CLRF   22
254C:  CLRF   23
254E:  CLRF   24
2550:  CLRF   25
2552:  CLRF   26
2554:  CLRF   27
2556:  CLRF   28
2558:  CLRF   29
255A:  CLRF   2A
255C:  CLRF   2B
255E:  MOVLW  0A
2560:  MOVWF  2C
2562:  CLRF   2D
2564:  MOVWF  2E
2566:  MOVWF  2F
2568:  MOVWF  30
256A:  MOVWF  31
256C:  CLRF   32
256E:  CLRF   33
2570:  CLRF   34
2572:  CLRF   35
2574:  CLRF   36
2576:  CLRF   37
2578:  CLRF   38
257A:  CLRF   39
257C:  CLRF   3A
257E:  CLRF   3B
2580:  CLRF   3C
2582:  CLRF   3D
2584:  BCF    3E.0
2586:  BCF    3E.1
2588:  BCF    3E.2
258A:  BCF    3E.3
258C:  BCF    3E.4
258E:  BCF    3E.5
2590:  BCF    3E.6
2592:  BCF    3E.7
2594:  BCF    3F.0
2596:  BCF    3F.1
2598:  BCF    3F.2
259A:  CLRF   40
259C:  CLRF   4F
259E:  CLRF   4E
25A0:  CLRF   4D
25A2:  CLRF   4C
25A4:  CLRF   53
25A6:  CLRF   52
25A8:  CLRF   51
25AA:  CLRF   50
25AC:  CLRF   57
25AE:  CLRF   56
25B0:  MOVLW  4B
25B2:  MOVWF  55
25B4:  MOVLW  86
25B6:  MOVWF  54
25B8:  BCF    3F.4
25BA:  BCF    3F.5
25BC:  BCF    3F.6
25BE:  BCF    3F.7
25C0:  BCF    58.0
25C2:  BCF    58.1
25C4:  BCF    58.2
25C6:  BCF    58.3
25C8:  BCF    58.4
25CA:  BCF    58.5
25CC:  CLRF   5A
25CE:  CLRF   59
25D0:  CLRF   5C
25D2:  CLRF   5B
25D4:  CLRF   5E
25D6:  CLRF   5D
25D8:  CLRF   x60
25DA:  CLRF   5F
25DC:  CLRF   x64
25DE:  MOVLW  E0
25E0:  MOVWF  x63
25E2:  MOVLW  5D
25E4:  MOVWF  x62
25E6:  MOVLW  8A
25E8:  MOVWF  x61
25EA:  CLRF   x68
25EC:  MOVLW  C0
25EE:  MOVWF  x67
25F0:  MOVLW  28
25F2:  MOVWF  x66
25F4:  MOVLW  89
25F6:  MOVWF  x65
25F8:  MOVLW  33
25FA:  MOVWF  x6C
25FC:  MOVLW  13
25FE:  MOVWF  x6B
2600:  MOVLW  15
2602:  MOVWF  x6A
2604:  MOVLW  87
2606:  MOVWF  x69
2608:  CLRF   x70
260A:  CLRF   x6F
260C:  CLRF   x6E
260E:  CLRF   x6D
2610:  CLRF   x74
2612:  CLRF   x73
2614:  CLRF   x72
2616:  CLRF   x71
2618:  CLRF   x78
261A:  CLRF   x77
261C:  MOVLW  7A
261E:  MOVWF  x76
2620:  MOVLW  88
2622:  MOVWF  x75
2624:  CLRF   x7C
2626:  CLRF   x7B
2628:  CLRF   x7A
262A:  CLRF   x79
262C:  CLRF   x80
262E:  CLRF   x7F
2630:  CLRF   x7E
2632:  CLRF   x7D
2634:  CLRF   x84
2636:  CLRF   x83
2638:  CLRF   x82
263A:  CLRF   x81
263C:  MOVLW  19
263E:  MOVWF  x88
2640:  MOVLW  53
2642:  MOVWF  x87
2644:  MOVLW  18
2646:  MOVWF  x86
2648:  MOVLW  68
264A:  MOVWF  x85
264C:  MOVLW  E9
264E:  MOVWF  x8C
2650:  MOVLW  BD
2652:  MOVWF  x8B
2654:  MOVLW  C6
2656:  MOVWF  x8A
2658:  MOVLW  71
265A:  MOVWF  x89
265C:  MOVLW  BE
265E:  MOVWF  x90
2660:  MOVLW  96
2662:  MOVWF  x8F
2664:  MOVLW  24
2666:  MOVWF  x8E
2668:  MOVLW  7A
266A:  MOVWF  x8D
266C:  MOVLW  F3
266E:  MOVWF  x94
2670:  MOVLW  5A
2672:  MOVWF  x93
2674:  MOVLW  AB
2676:  MOVWF  x92
2678:  MOVLW  81
267A:  MOVWF  x91
267C:  CLRF   x98
267E:  CLRF   x97
2680:  CLRF   x96
2682:  CLRF   x95
2684:  CLRF   x9C
2686:  CLRF   x9B
2688:  CLRF   x9A
268A:  CLRF   x99
268C:  CLRF   xA0
268E:  CLRF   x9F
2690:  CLRF   x9E
2692:  CLRF   x9D
2694:  CLRF   xA4
2696:  CLRF   xA3
2698:  CLRF   xA2
269A:  CLRF   xA1
269C:  CLRF   xA8
269E:  CLRF   xA7
26A0:  CLRF   xA6
26A2:  CLRF   xA5
26A4:  CLRF   xAC
26A6:  CLRF   xAB
26A8:  CLRF   xAA
26AA:  CLRF   xA9
26AC:  MOVLW  8B
26AE:  MOVWF  xB0
26B0:  MOVLW  FD
26B2:  MOVWF  xAF
26B4:  MOVLW  65
26B6:  MOVWF  xAE
26B8:  MOVLW  7C
26BA:  MOVWF  xAD
26BC:  CLRF   xB4
26BE:  CLRF   xB3
26C0:  CLRF   xB2
26C2:  CLRF   xB1
26C4:  CLRF   xB8
26C6:  CLRF   xB7
26C8:  CLRF   xB6
26CA:  CLRF   xB5
26CC:  CLRF   xBC
26CE:  CLRF   xBB
26D0:  CLRF   xBA
26D2:  CLRF   xB9
26D4:  CLRF   xC0
26D6:  CLRF   xBF
26D8:  CLRF   xBE
26DA:  CLRF   xBD
26DC:  CLRF   xC4
26DE:  CLRF   xC3
26E0:  CLRF   xC2
26E2:  CLRF   xC1
26E4:  CLRF   xC8
26E6:  CLRF   xC7
26E8:  CLRF   xC6
26EA:  CLRF   xC5
26EC:  CLRF   xCC
26EE:  CLRF   xCB
26F0:  CLRF   xCA
26F2:  MOVLW  7F
26F4:  MOVWF  xC9
26F6:  CLRF   xD0
26F8:  CLRF   xCF
26FA:  MOVLW  24
26FC:  MOVWF  xCE
26FE:  MOVLW  88
2700:  MOVWF  xCD
2702:  CLRF   xD4
2704:  CLRF   xD3
2706:  CLRF   xD2
2708:  CLRF   xD1
270A:  CLRF   xD8
270C:  CLRF   xD7
270E:  CLRF   xD6
2710:  CLRF   xD5
2712:  MOVF   FC1,W
2714:  ANDLW  C0
2716:  IORLW  0F
2718:  MOVWF  FC1
271A:  MOVLW  07
271C:  MOVWF  FB4
271E:  MOVLW  3E
2720:  MOVWF  41
2722:  MOVLW  20
2724:  MOVWF  42
2726:  MOVLW  5E
2728:  MOVWF  43
272A:  CLRF   44
272C:  CLRF   45
272E:  CLRF   46
2730:  CLRF   47
2732:  CLRF   48
2734:  CLRF   49
2736:  CLRF   4A
2738:  CLRF   4B
273A:  CLRF   xD9
273C:  CLRF   xDA
273E:  CLRF   xDB
2740:  CLRF   xDC
2742:  CLRF   xDD
2744:  CLRF   xDE
2746:  CLRF   xDF
2748:  CLRF   xE0
274A:  CLRF   xE1
274C:  CLRF   xE2
274E:  CLRF   xE3
2750:  CLRF   xE4
2752:  CLRF   xE5
2754:  CLRF   xE6
2756:  CLRF   xE7
2758:  CLRF   xE8
275A:  CLRF   xE9
275C:  CLRF   xEA
275E:  CLRF   xEB
2760:  CLRF   xEC
2762:  CLRF   xED
2764:  CLRF   xEE
2766:  CLRF   xEF
2768:  CLRF   xF0
276A:  CLRF   xF1
276C:  CLRF   xF2
276E:  CLRF   xF3
2770:  CLRF   xF4
2772:  CLRF   xF5
2774:  CLRF   xF6
2776:  CLRF   xF7
2778:  CLRF   xF8
277A:  CLRF   xF9
277C:  CLRF   xFA
277E:  CLRF   xFB
2780:  CLRF   xFC
2782:  CLRF   xFD
2784:  CLRF   xFE
2786:  CLRF   xFF
2788:  MOVLB  1
278A:  CLRF   x00
278C:  CLRF   x01
278E:  CLRF   x02
2790:  CLRF   x03
2792:  CLRF   x04
2794:  CLRF   x05
2796:  CLRF   x06
2798:  CLRF   x07
279A:  CLRF   x08
....................    setup_adc_ports(AN0_TO_AN3); 
279C:  MOVF   FC1,W
279E:  ANDLW  C0
27A0:  IORLW  0B
27A2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
27A4:  BCF    FC0.0
27A6:  BSF    FC0.1
27A8:  BCF    FC0.2
27AA:  BSF    FC0.7
27AC:  BSF    FC2.0
....................    output_d(0);  
27AE:  CLRF   F95
27B0:  CLRF   F8C
....................    ModoSleep=1; 
27B2:  BSF    3F.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
27B4:  MOVLW  85
27B6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
27B8:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
27BA:  MOVLW  00
27BC:  IORLW  05
27BE:  MOVWF  FCA
27C0:  MOVLW  FF
27C2:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
27C4:  BCF    F94.2
27C6:  BCF    F8B.2
27C8:  BCF    F96.6
27CA:  MOVLW  0C
27CC:  MOVWF  FBD
27CE:  CLRF   FB7
27D0:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
27D2:  MOVLW  C0
27D4:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
27D6:  CLRF   FBE
....................    lcd_init(); 
27D8:  MOVLB  0
27DA:  CALL   0AFC
....................    printf(lcd_putc,"\f"); 
27DE:  MOVLW  0C
27E0:  MOVLB  1
27E2:  MOVWF  x1E
27E4:  MOVLB  0
27E6:  CALL   0BE2
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
27EA:  MOVFF  FF2,109
27EE:  BCF    FF2.7
27F0:  CLRF   FA9
27F2:  BCF    FA6.6
27F4:  BCF    FA6.7
27F6:  BSF    FA6.0
27F8:  MOVF   FA8,W
27FA:  MOVLB  1
27FC:  BTFSC  x09.7
27FE:  BSF    FF2.7
2800:  MOVWF  48
2802:  MOVLW  14
2804:  MOVWF  x24
2806:  MOVLB  0
2808:  CALL   0A5E
280C:  MOVFF  FF2,109
2810:  BCF    FF2.7
2812:  MOVLW  01
2814:  MOVWF  FA9
2816:  BCF    FA6.6
2818:  BCF    FA6.7
281A:  BSF    FA6.0
281C:  MOVF   FA8,W
281E:  MOVLB  1
2820:  BTFSC  x09.7
2822:  BSF    FF2.7
2824:  MOVWF  49
2826:  MOVLW  14
2828:  MOVWF  x24
282A:  MOVLB  0
282C:  CALL   0A5E
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
2830:  MOVFF  FF2,109
2834:  BCF    FF2.7
2836:  MOVLW  02
2838:  MOVWF  FA9
283A:  BCF    FA6.6
283C:  BCF    FA6.7
283E:  BSF    FA6.0
2840:  MOVF   FA8,W
2842:  MOVLB  1
2844:  BTFSC  x09.7
2846:  BSF    FF2.7
2848:  MOVWF  4A
284A:  MOVLW  14
284C:  MOVWF  x24
284E:  MOVLB  0
2850:  CALL   0A5E
2854:  MOVFF  FF2,109
2858:  BCF    FF2.7
285A:  MOVLW  03
285C:  MOVWF  FA9
285E:  BCF    FA6.6
2860:  BCF    FA6.7
2862:  BSF    FA6.0
2864:  MOVF   FA8,W
2866:  MOVLB  1
2868:  BTFSC  x09.7
286A:  BSF    FF2.7
286C:  MOVWF  4B
286E:  MOVLW  14
2870:  MOVWF  x24
2872:  MOVLB  0
2874:  CALL   0A5E
....................    estadoalarma=read_eeprom(5); 
2878:  MOVFF  FF2,109
287C:  BCF    FF2.7
287E:  MOVLW  05
2880:  MOVWF  FA9
2882:  BCF    FA6.6
2884:  BCF    FA6.7
2886:  BSF    FA6.0
2888:  MOVF   FA8,W
288A:  MOVLB  1
288C:  BTFSC  x09.7
288E:  BSF    FF2.7
2890:  MOVWF  01
2892:  BCF    3E.2
2894:  BTFSC  01.0
2896:  BSF    3E.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
2898:  MOVFF  FF2,109
289C:  BCF    FF2.7
289E:  MOVLW  0A
28A0:  MOVWF  FA9
28A2:  BCF    FA6.6
28A4:  BCF    FA6.7
28A6:  BSF    FA6.0
28A8:  MOVF   FA8,W
28AA:  BTFSC  x09.7
28AC:  BSF    FF2.7
28AE:  MOVWF  30
28B0:  MOVFF  FF2,109
28B4:  BCF    FF2.7
28B6:  MOVLW  0B
28B8:  MOVWF  FA9
28BA:  BCF    FA6.6
28BC:  BCF    FA6.7
28BE:  BSF    FA6.0
28C0:  MOVF   FA8,W
28C2:  BTFSC  x09.7
28C4:  BSF    FF2.7
28C6:  MOVWF  2F
28C8:  MOVFF  FF2,109
28CC:  BCF    FF2.7
28CE:  MOVLW  0C
28D0:  MOVWF  FA9
28D2:  BCF    FA6.6
28D4:  BCF    FA6.7
28D6:  BSF    FA6.0
28D8:  MOVF   FA8,W
28DA:  BTFSC  x09.7
28DC:  BSF    FF2.7
28DE:  MOVWF  31
28E0:  MOVFF  FF2,109
28E4:  BCF    FF2.7
28E6:  MOVLW  0D
28E8:  MOVWF  FA9
28EA:  BCF    FA6.6
28EC:  BCF    FA6.7
28EE:  BSF    FA6.0
28F0:  MOVF   FA8,W
28F2:  BTFSC  x09.7
28F4:  BSF    FF2.7
28F6:  MOVWF  32
28F8:  MOVFF  32,2C
....................  
....................    purga_minutos=read_eeprom(20);purga_segundos=read_eeprom(21); 
28FC:  MOVFF  FF2,109
2900:  BCF    FF2.7
2902:  MOVLW  14
2904:  MOVWF  FA9
2906:  BCF    FA6.6
2908:  BCF    FA6.7
290A:  BSF    FA6.0
290C:  MOVF   FA8,W
290E:  BTFSC  x09.7
2910:  BSF    FF2.7
2912:  MOVWF  22
2914:  MOVFF  FF2,109
2918:  BCF    FF2.7
291A:  MOVLW  15
291C:  MOVWF  FA9
291E:  BCF    FA6.6
2920:  BCF    FA6.7
2922:  BSF    FA6.0
2924:  MOVF   FA8,W
2926:  BTFSC  x09.7
2928:  BSF    FF2.7
292A:  MOVWF  37
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
292C:  MOVFF  22,23
2930:  MOVFF  37,38
....................    ppurga_minutos=read_eeprom(22);ppurga_segundos=read_eeprom(23); 
2934:  MOVFF  FF2,109
2938:  BCF    FF2.7
293A:  MOVLW  16
293C:  MOVWF  FA9
293E:  BCF    FA6.6
2940:  BCF    FA6.7
2942:  BSF    FA6.0
2944:  MOVF   FA8,W
2946:  BTFSC  x09.7
2948:  BSF    FF2.7
294A:  MOVWF  3B
294C:  MOVFF  FF2,109
2950:  BCF    FF2.7
2952:  MOVLW  17
2954:  MOVWF  FA9
2956:  BCF    FA6.6
2958:  BCF    FA6.7
295A:  BSF    FA6.0
295C:  MOVF   FA8,W
295E:  BTFSC  x09.7
2960:  BSF    FF2.7
2962:  MOVWF  39
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
2964:  MOVFF  3B,3C
2968:  MOVFF  39,3A
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
296C:  MOVFF  FF2,109
2970:  BCF    FF2.7
2972:  MOVLW  19
2974:  MOVWF  FA9
2976:  BCF    FA6.6
2978:  BCF    FA6.7
297A:  BSF    FA6.0
297C:  MOVF   FA8,W
297E:  BTFSC  x09.7
2980:  BSF    FF2.7
2982:  MOVWF  24
....................    Temporal=read_eeprom(26); 
2984:  MOVFF  FF2,109
2988:  BCF    FF2.7
298A:  MOVLW  1A
298C:  MOVWF  FA9
298E:  BCF    FA6.6
2990:  BCF    FA6.7
2992:  BSF    FA6.0
2994:  MOVF   FA8,W
2996:  BTFSC  x09.7
2998:  BSF    FF2.7
299A:  CLRF   x13
299C:  MOVWF  x12
299E:  MOVLB  0
29A0:  CALL   0C4E
29A4:  MOVFF  03,B4
29A8:  MOVFF  02,B3
29AC:  MOVFF  01,B2
29B0:  MOVFF  00,B1
....................    Temporal=Temporal/100.0; 
29B4:  MOVFF  B4,12A
29B8:  MOVFF  B3,129
29BC:  MOVFF  B2,128
29C0:  MOVFF  B1,127
29C4:  MOVLB  1
29C6:  CLRF   x2E
29C8:  CLRF   x2D
29CA:  MOVLW  48
29CC:  MOVWF  x2C
29CE:  MOVLW  85
29D0:  MOVWF  x2B
29D2:  MOVLB  0
29D4:  CALL   0C84
29D8:  MOVFF  03,B4
29DC:  MOVFF  02,B3
29E0:  MOVFF  01,B2
29E4:  MOVFF  00,B1
....................    Ajuste1=Entero+Temporal; 
29E8:  MOVLB  1
29EA:  CLRF   x13
29EC:  MOVFF  24,112
29F0:  MOVLB  0
29F2:  CALL   0C4E
29F6:  BCF    FD8.1
29F8:  MOVFF  03,12A
29FC:  MOVFF  02,129
2A00:  MOVFF  01,128
2A04:  MOVFF  00,127
2A08:  MOVFF  B4,12E
2A0C:  MOVFF  B3,12D
2A10:  MOVFF  B2,12C
2A14:  MOVFF  B1,12B
2A18:  CALL   0DE2
2A1C:  MOVFF  03,CC
2A20:  MOVFF  02,CB
2A24:  MOVFF  01,CA
2A28:  MOVFF  00,C9
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
2A2C:  MOVFF  FF2,109
2A30:  BCF    FF2.7
2A32:  MOVLW  28
2A34:  MOVWF  FA9
2A36:  BCF    FA6.6
2A38:  BCF    FA6.7
2A3A:  BSF    FA6.0
2A3C:  MOVF   FA8,W
2A3E:  MOVLB  1
2A40:  BTFSC  x09.7
2A42:  BSF    FF2.7
2A44:  MOVWF  24
....................    Temporal=read_eeprom(41); 
2A46:  MOVFF  FF2,109
2A4A:  BCF    FF2.7
2A4C:  MOVLW  29
2A4E:  MOVWF  FA9
2A50:  BCF    FA6.6
2A52:  BCF    FA6.7
2A54:  BSF    FA6.0
2A56:  MOVF   FA8,W
2A58:  BTFSC  x09.7
2A5A:  BSF    FF2.7
2A5C:  CLRF   x13
2A5E:  MOVWF  x12
2A60:  MOVLB  0
2A62:  CALL   0C4E
2A66:  MOVFF  03,B4
2A6A:  MOVFF  02,B3
2A6E:  MOVFF  01,B2
2A72:  MOVFF  00,B1
....................    Temporal=Temporal/100.0; 
2A76:  MOVFF  B4,12A
2A7A:  MOVFF  B3,129
2A7E:  MOVFF  B2,128
2A82:  MOVFF  B1,127
2A86:  MOVLB  1
2A88:  CLRF   x2E
2A8A:  CLRF   x2D
2A8C:  MOVLW  48
2A8E:  MOVWF  x2C
2A90:  MOVLW  85
2A92:  MOVWF  x2B
2A94:  MOVLB  0
2A96:  CALL   0C84
2A9A:  MOVFF  03,B4
2A9E:  MOVFF  02,B3
2AA2:  MOVFF  01,B2
2AA6:  MOVFF  00,B1
....................    setpoint=Entero+Temporal; 
2AAA:  MOVLB  1
2AAC:  CLRF   x13
2AAE:  MOVFF  24,112
2AB2:  MOVLB  0
2AB4:  CALL   0C4E
2AB8:  BCF    FD8.1
2ABA:  MOVFF  03,12A
2ABE:  MOVFF  02,129
2AC2:  MOVFF  01,128
2AC6:  MOVFF  00,127
2ACA:  MOVFF  B4,12E
2ACE:  MOVFF  B3,12D
2AD2:  MOVFF  B2,12C
2AD6:  MOVFF  B1,12B
2ADA:  CALL   0DE2
2ADE:  MOVFF  03,4F
2AE2:  MOVFF  02,4E
2AE6:  MOVFF  01,4D
2AEA:  MOVFF  00,4C
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
2AEE:  MOVFF  FF2,109
2AF2:  BCF    FF2.7
2AF4:  MOVLW  3C
2AF6:  MOVWF  FA9
2AF8:  BCF    FA6.6
2AFA:  BCF    FA6.7
2AFC:  BSF    FA6.0
2AFE:  MOVF   FA8,W
2B00:  MOVLB  1
2B02:  BTFSC  x09.7
2B04:  BSF    FF2.7
2B06:  MOVWF  27
....................    Temporal1=read_eeprom(61); 
2B08:  MOVFF  FF2,109
2B0C:  BCF    FF2.7
2B0E:  MOVLW  3D
2B10:  MOVWF  FA9
2B12:  BCF    FA6.6
2B14:  BCF    FA6.7
2B16:  BSF    FA6.0
2B18:  MOVF   FA8,W
2B1A:  BTFSC  x09.7
2B1C:  BSF    FF2.7
2B1E:  CLRF   x13
2B20:  MOVWF  x12
2B22:  MOVLB  0
2B24:  CALL   0C4E
2B28:  MOVFF  03,C0
2B2C:  MOVFF  02,BF
2B30:  MOVFF  01,BE
2B34:  MOVFF  00,BD
....................    Temporal1=Temporal1/100.0; 
2B38:  MOVFF  C0,12A
2B3C:  MOVFF  BF,129
2B40:  MOVFF  BE,128
2B44:  MOVFF  BD,127
2B48:  MOVLB  1
2B4A:  CLRF   x2E
2B4C:  CLRF   x2D
2B4E:  MOVLW  48
2B50:  MOVWF  x2C
2B52:  MOVLW  85
2B54:  MOVWF  x2B
2B56:  MOVLB  0
2B58:  CALL   0C84
2B5C:  MOVFF  03,C0
2B60:  MOVFF  02,BF
2B64:  MOVFF  01,BE
2B68:  MOVFF  00,BD
....................    Diferencia=Entero1+Temporal1; 
2B6C:  MOVLB  1
2B6E:  CLRF   x13
2B70:  MOVFF  27,112
2B74:  MOVLB  0
2B76:  CALL   0C4E
2B7A:  BCF    FD8.1
2B7C:  MOVFF  03,12A
2B80:  MOVFF  02,129
2B84:  MOVFF  01,128
2B88:  MOVFF  00,127
2B8C:  MOVFF  C0,12E
2B90:  MOVFF  BF,12D
2B94:  MOVFF  BE,12C
2B98:  MOVFF  BD,12B
2B9C:  CALL   0DE2
2BA0:  MOVFF  03,C8
2BA4:  MOVFF  02,C7
2BA8:  MOVFF  01,C6
2BAC:  MOVFF  00,C5
....................     
....................    negativo=read_eeprom(50); 
2BB0:  MOVFF  FF2,109
2BB4:  BCF    FF2.7
2BB6:  MOVLW  32
2BB8:  MOVWF  FA9
2BBA:  BCF    FA6.6
2BBC:  BCF    FA6.7
2BBE:  BSF    FA6.0
2BC0:  MOVF   FA8,W
2BC2:  MOVLB  1
2BC4:  BTFSC  x09.7
2BC6:  BSF    FF2.7
2BC8:  MOVWF  2E
....................  
....................    MediaMovil=read_eeprom(42); 
2BCA:  MOVFF  FF2,109
2BCE:  BCF    FF2.7
2BD0:  MOVLW  2A
2BD2:  MOVWF  FA9
2BD4:  BCF    FA6.6
2BD6:  BCF    FA6.7
2BD8:  BSF    FA6.0
2BDA:  MOVF   FA8,W
2BDC:  BTFSC  x09.7
2BDE:  BSF    FF2.7
2BE0:  MOVWF  2D
....................    if(MediaMovil>12) 
2BE2:  MOVF   2D,W
2BE4:  SUBLW  0C
2BE6:  BC    2BEC
....................    {MediaMovil=12;} 
2BE8:  MOVLW  0C
2BEA:  MOVWF  2D
....................     
....................    if(MediaMovil<1) 
2BEC:  MOVF   2D,F
2BEE:  BNZ   2BF4
....................    {MediaMovil=1;} 
2BF0:  MOVLW  01
2BF2:  MOVWF  2D
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
2BF4:  MOVFF  FF2,109
2BF8:  BCF    FF2.7
2BFA:  MOVLW  46
2BFC:  MOVWF  FA9
2BFE:  BCF    FA6.6
2C00:  BCF    FA6.7
2C02:  BSF    FA6.0
2C04:  MOVF   FA8,W
2C06:  BTFSC  x09.7
2C08:  BSF    FF2.7
2C0A:  MOVWF  33
2C0C:  MOVFF  FF2,109
2C10:  BCF    FF2.7
2C12:  MOVLW  47
2C14:  MOVWF  FA9
2C16:  BCF    FA6.6
2C18:  BCF    FA6.7
2C1A:  BSF    FA6.0
2C1C:  MOVF   FA8,W
2C1E:  BTFSC  x09.7
2C20:  BSF    FF2.7
2C22:  MOVWF  34
2C24:  MOVFF  FF2,109
2C28:  BCF    FF2.7
2C2A:  MOVLW  48
2C2C:  MOVWF  FA9
2C2E:  BCF    FA6.6
2C30:  BCF    FA6.7
2C32:  BSF    FA6.0
2C34:  MOVF   FA8,W
2C36:  BTFSC  x09.7
2C38:  BSF    FF2.7
2C3A:  MOVWF  35
2C3C:  MOVFF  FF2,109
2C40:  BCF    FF2.7
2C42:  MOVLW  49
2C44:  MOVWF  FA9
2C46:  BCF    FA6.6
2C48:  BCF    FA6.7
2C4A:  BSF    FA6.0
2C4C:  MOVF   FA8,W
2C4E:  BTFSC  x09.7
2C50:  BSF    FF2.7
2C52:  MOVWF  01
2C54:  BCF    3F.2
2C56:  BTFSC  01.0
2C58:  BSF    3F.2
....................    Menu=200; 
2C5A:  MOVLW  C8
2C5C:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
2C5E:  MOVF   17,W
2C60:  SUBLW  C8
2C62:  BNZ   2D3C
....................       if(inicio==0) 
2C64:  BTFSC  3F.4
2C66:  BRA    2D3A
....................       { 
....................       delay_ms(500); 
2C68:  MOVLW  02
2C6A:  MOVWF  x09
2C6C:  MOVLW  FA
2C6E:  MOVWF  x24
2C70:  MOVLB  0
2C72:  CALL   0A5E
2C76:  MOVLB  1
2C78:  DECFSZ x09,F
2C7A:  BRA    2C6C
....................          if(input(PIN_B0)) 
2C7C:  BSF    F93.0
2C7E:  BTFSS  F81.0
2C80:  BRA    2D3A
....................          { 
....................             lcd_init(); 
2C82:  MOVLB  0
2C84:  CALL   0AFC
....................             intensidadpantalla(contraste); 
2C88:  MOVFF  20,109
2C8C:  CALL   105A
....................             lcd_gotoxy(1,1); 
2C90:  MOVLW  01
2C92:  MOVLB  1
2C94:  MOVWF  x1F
2C96:  MOVWF  x20
2C98:  MOVLB  0
2C9A:  CALL   0B70
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
2C9E:  MOVLW  40
2CA0:  MOVWF  FF6
2CA2:  MOVLW  02
2CA4:  MOVWF  FF7
2CA6:  CALL   106E
....................             lcd_gotoxy(1,2); 
2CAA:  MOVLW  01
2CAC:  MOVLB  1
2CAE:  MOVWF  x1F
2CB0:  MOVLW  02
2CB2:  MOVWF  x20
2CB4:  MOVLB  0
2CB6:  CALL   0B70
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
2CBA:  MOVLW  56
2CBC:  MOVWF  FF6
2CBE:  MOVLW  02
2CC0:  MOVWF  FF7
2CC2:  CALL   106E
....................             lcd_gotoxy(1,3); 
2CC6:  MOVLW  01
2CC8:  MOVLB  1
2CCA:  MOVWF  x1F
2CCC:  MOVLW  03
2CCE:  MOVWF  x20
2CD0:  MOVLB  0
2CD2:  CALL   0B70
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
2CD6:  MOVLW  6C
2CD8:  MOVWF  FF6
2CDA:  MOVLW  02
2CDC:  MOVWF  FF7
2CDE:  CALL   106E
....................             lcd_gotoxy(1,4); 
2CE2:  MOVLW  01
2CE4:  MOVLB  1
2CE6:  MOVWF  x1F
2CE8:  MOVLW  04
2CEA:  MOVWF  x20
2CEC:  MOVLB  0
2CEE:  CALL   0B70
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
2CF2:  MOVLW  82
2CF4:  MOVWF  FF6
2CF6:  MOVLW  02
2CF8:  MOVWF  FF7
2CFA:  CALL   106E
....................             delay_ms(2000); 
2CFE:  MOVLW  08
2D00:  MOVLB  1
2D02:  MOVWF  x09
2D04:  MOVLW  FA
2D06:  MOVWF  x24
2D08:  MOVLB  0
2D0A:  CALL   0A5E
2D0E:  MOVLB  1
2D10:  DECFSZ x09,F
2D12:  BRA    2D04
....................             printf(lcd_putc,"\f"); 
2D14:  MOVLW  0C
2D16:  MOVWF  x1E
2D18:  MOVLB  0
2D1A:  CALL   0BE2
....................             inicio=1; 
2D1E:  BSF    3F.4
....................             Menu=0; 
2D20:  CLRF   17
....................             ModoSleep=0; 
2D22:  BCF    3F.3
....................             delay_ms(500); 
2D24:  MOVLW  02
2D26:  MOVLB  1
2D28:  MOVWF  x09
2D2A:  MOVLW  FA
2D2C:  MOVWF  x24
2D2E:  MOVLB  0
2D30:  CALL   0A5E
2D34:  MOVLB  1
2D36:  DECFSZ x09,F
2D38:  BRA    2D2A
....................          } 
....................       } 
....................    } 
2D3A:  BRA    2C5E
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2D3C:  MOVF   17,F
2D3E:  BTFSS  FD8.2
2D40:  BRA    31A2
....................    flag_latencia=1;set_pwm1_duty(0); 
2D42:  BSF    3F.0
2D44:  CLRF   FBE
....................       if(Latencia==1) 
2D46:  BTFSS  3F.1
2D48:  BRA    2D58
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
2D4A:  MOVLW  0C
2D4C:  MOVWF  x1E
2D4E:  MOVLB  0
2D50:  CALL   0BE2
2D54:  RESET
2D56:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
2D58:  MOVLW  01
2D5A:  MOVWF  x1F
2D5C:  MOVWF  x20
2D5E:  MOVLB  0
2D60:  CALL   0B70
....................    printf(lcd_putc,"     Ingrese        "); 
2D64:  MOVLW  98
2D66:  MOVWF  FF6
2D68:  MOVLW  02
2D6A:  MOVWF  FF7
2D6C:  CALL   106E
....................    lcd_gotoxy(1,2); 
2D70:  MOVLW  01
2D72:  MOVLB  1
2D74:  MOVWF  x1F
2D76:  MOVLW  02
2D78:  MOVWF  x20
2D7A:  MOVLB  0
2D7C:  CALL   0B70
....................    printf(lcd_putc,"    Contraseña      "); 
2D80:  MOVLW  AE
2D82:  MOVWF  FF6
2D84:  MOVLW  02
2D86:  MOVWF  FF7
2D88:  CALL   106E
....................    lcd_gotoxy(1,3); 
2D8C:  MOVLW  01
2D8E:  MOVLB  1
2D90:  MOVWF  x1F
2D92:  MOVLW  03
2D94:  MOVWF  x20
2D96:  MOVLB  0
2D98:  CALL   0B70
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2D9C:  MOVLW  C4
2D9E:  MOVWF  FF6
2DA0:  MOVLW  02
2DA2:  MOVWF  FF7
2DA4:  MOVLW  0A
2DA6:  MOVLB  1
2DA8:  MOVWF  x11
2DAA:  MOVLB  0
2DAC:  CALL   108E
2DB0:  MOVFF  44,109
2DB4:  MOVLW  1F
2DB6:  MOVLB  1
2DB8:  MOVWF  x0A
2DBA:  MOVLB  0
2DBC:  CALL   10E2
2DC0:  MOVFF  45,109
2DC4:  MOVLW  1F
2DC6:  MOVLB  1
2DC8:  MOVWF  x0A
2DCA:  MOVLB  0
2DCC:  CALL   10E2
2DD0:  MOVFF  46,109
2DD4:  MOVLW  1F
2DD6:  MOVLB  1
2DD8:  MOVWF  x0A
2DDA:  MOVLB  0
2DDC:  CALL   10E2
2DE0:  MOVFF  47,109
2DE4:  MOVLW  1F
2DE6:  MOVLB  1
2DE8:  MOVWF  x0A
2DEA:  MOVLB  0
2DEC:  CALL   10E2
2DF0:  MOVLW  20
2DF2:  MOVLB  1
2DF4:  MOVWF  x1E
2DF6:  MOVLB  0
2DF8:  CALL   0BE2
2DFC:  MOVLW  20
2DFE:  MOVLB  1
2E00:  MOVWF  x1E
2E02:  MOVLB  0
2E04:  CALL   0BE2
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2E08:  BSF    F93.3
2E0A:  BTFSS  F81.3
2E0C:  BRA    2E38
....................       {  if(Flanco == 0)  
2E0E:  BTFSC  3E.4
2E10:  BRA    2E36
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
2E12:  MOVLW  0B
2E14:  SUBWF  1A,W
2E16:  CLRF   03
2E18:  ADDLW  44
2E1A:  MOVWF  FE9
2E1C:  MOVLW  00
2E1E:  ADDWFC 03,W
2E20:  MOVWF  FEA
2E22:  INCF   FEF,F
2E24:  BSF    3E.4
2E26:  MOVLW  1E
2E28:  MOVLB  1
2E2A:  MOVWF  x24
2E2C:  MOVLB  0
2E2E:  CALL   0A5E
2E32:  CLRF   5C
2E34:  CLRF   5B
....................          else 
2E36:  BRA    2E3A
....................             {Flanco = 0;} 
2E38:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2E3A:  BSF    F93.2
2E3C:  BTFSS  F81.2
2E3E:  BRA    2E6A
....................       {  if(Flanco2 == 0)  
2E40:  BTFSC  3E.6
2E42:  BRA    2E68
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
2E44:  MOVLW  0B
2E46:  SUBWF  1A,W
2E48:  CLRF   03
2E4A:  ADDLW  44
2E4C:  MOVWF  FE9
2E4E:  MOVLW  00
2E50:  ADDWFC 03,W
2E52:  MOVWF  FEA
2E54:  DECF   FEF,F
2E56:  BSF    3E.6
2E58:  MOVLW  1E
2E5A:  MOVLB  1
2E5C:  MOVWF  x24
2E5E:  MOVLB  0
2E60:  CALL   0A5E
2E64:  CLRF   5C
2E66:  CLRF   5B
....................          else 
2E68:  BRA    2E6C
....................             {Flanco2 = 0;} 
2E6A:  BCF    3E.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
2E6C:  BSF    F93.0
2E6E:  BTFSS  F81.0
2E70:  BRA    2E98
....................       {  if(Flanco1 == 0)  
2E72:  BTFSC  3E.5
2E74:  BRA    2E96
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2E76:  BSF    3E.5
2E78:  INCF   1A,F
2E7A:  MOVLW  1E
2E7C:  MOVLB  1
2E7E:  MOVWF  x24
2E80:  MOVLB  0
2E82:  CALL   0A5E
2E86:  MOVLW  0C
2E88:  MOVLB  1
2E8A:  MOVWF  x1E
2E8C:  MOVLB  0
2E8E:  CALL   0BE2
2E92:  CLRF   5C
2E94:  CLRF   5B
....................          else 
2E96:  BRA    2E9A
....................             {Flanco1 = 0;}    
2E98:  BCF    3E.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
2E9A:  BSF    F93.1
2E9C:  BTFSS  F81.1
2E9E:  BRA    2EC6
....................       {  if(Flanco3 == 0)  
2EA0:  BTFSC  3E.7
2EA2:  BRA    2EC4
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
2EA4:  BSF    3E.7
2EA6:  DECF   1A,F
2EA8:  MOVLW  1E
2EAA:  MOVLB  1
2EAC:  MOVWF  x24
2EAE:  MOVLB  0
2EB0:  CALL   0A5E
2EB4:  MOVLW  0C
2EB6:  MOVLB  1
2EB8:  MOVWF  x1E
2EBA:  MOVLB  0
2EBC:  CALL   0BE2
2EC0:  CLRF   5C
2EC2:  CLRF   5B
....................          else 
2EC4:  BRA    2EC8
....................             {Flanco3 = 0;}     
2EC6:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2EC8:  MOVLW  0B
2ECA:  SUBWF  1A,W
2ECC:  CLRF   03
2ECE:  ADDLW  44
2ED0:  MOVWF  FE9
2ED2:  MOVLW  00
2ED4:  ADDWFC 03,W
2ED6:  MOVWF  FEA
2ED8:  BTFSC  FEF.7
2EDA:  BRA    2EDE
2EDC:  BRA    2EF2
....................        {clave[unidad-11]=9;} 
2EDE:  MOVLW  0B
2EE0:  SUBWF  1A,W
2EE2:  CLRF   03
2EE4:  ADDLW  44
2EE6:  MOVWF  FE9
2EE8:  MOVLW  00
2EEA:  ADDWFC 03,W
2EEC:  MOVWF  FEA
2EEE:  MOVLW  09
2EF0:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2EF2:  MOVLW  0B
2EF4:  SUBWF  1A,W
2EF6:  CLRF   03
2EF8:  ADDLW  44
2EFA:  MOVWF  FE9
2EFC:  MOVLW  00
2EFE:  ADDWFC 03,W
2F00:  MOVWF  FEA
2F02:  BTFSC  FEF.7
2F04:  BRA    2F1E
2F06:  MOVF   FEF,W
2F08:  SUBLW  09
2F0A:  BC    2F1E
....................        {clave[unidad-11]=0;} 
2F0C:  MOVLW  0B
2F0E:  SUBWF  1A,W
2F10:  CLRF   03
2F12:  ADDLW  44
2F14:  MOVWF  FE9
2F16:  MOVLW  00
2F18:  ADDWFC 03,W
2F1A:  MOVWF  FEA
2F1C:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2F1E:  MOVF   1A,W
2F20:  SUBLW  0A
2F22:  BNC   2F28
....................        {unidad=11;} 
2F24:  MOVLW  0B
2F26:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2F28:  MOVFF  1A,11F
2F2C:  MOVLW  04
2F2E:  MOVLB  1
2F30:  MOVWF  x20
2F32:  MOVLB  0
2F34:  CALL   0B70
....................        lcd_putc(t[2]); 
2F38:  MOVFF  43,11E
2F3C:  CALL   0BE2
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2F40:  MOVF   1A,W
2F42:  SUBLW  0E
2F44:  BTFSC  FD8.0
2F46:  BRA    3176
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
2F48:  MOVF   44,W
2F4A:  SUBLW  03
2F4C:  BNZ   3030
2F4E:  MOVF   45,W
2F50:  SUBLW  08
2F52:  BNZ   3030
2F54:  MOVF   46,W
2F56:  SUBLW  09
2F58:  BNZ   3030
2F5A:  MOVF   47,W
2F5C:  SUBLW  02
2F5E:  BNZ   3030
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2F60:  CLRF   FA9
2F62:  CLRF   FA8
2F64:  BCF    FA6.6
2F66:  BCF    FA6.7
2F68:  BSF    FA6.2
2F6A:  MOVF   FF2,W
2F6C:  MOVWF  00
2F6E:  BCF    FF2.7
2F70:  MOVLB  F
2F72:  MOVLW  55
2F74:  MOVWF  FA7
2F76:  MOVLW  AA
2F78:  MOVWF  FA7
2F7A:  BSF    FA6.1
2F7C:  BTFSC  FA6.1
2F7E:  BRA    2F7C
2F80:  BCF    FA6.2
2F82:  MOVF   00,W
2F84:  IORWF  FF2,F
2F86:  MOVLW  14
2F88:  MOVLB  1
2F8A:  MOVWF  x24
2F8C:  MOVLB  0
2F8E:  CALL   0A5E
2F92:  MOVLW  01
2F94:  MOVWF  FA9
2F96:  CLRF   FA8
2F98:  BCF    FA6.6
2F9A:  BCF    FA6.7
2F9C:  BSF    FA6.2
2F9E:  MOVF   FF2,W
2FA0:  MOVWF  00
2FA2:  BCF    FF2.7
2FA4:  MOVLB  F
2FA6:  MOVLW  55
2FA8:  MOVWF  FA7
2FAA:  MOVLW  AA
2FAC:  MOVWF  FA7
2FAE:  BSF    FA6.1
2FB0:  BTFSC  FA6.1
2FB2:  BRA    2FB0
2FB4:  BCF    FA6.2
2FB6:  MOVF   00,W
2FB8:  IORWF  FF2,F
2FBA:  MOVLW  14
2FBC:  MOVLB  1
2FBE:  MOVWF  x24
2FC0:  MOVLB  0
2FC2:  CALL   0A5E
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2FC6:  MOVLW  02
2FC8:  MOVWF  FA9
2FCA:  CLRF   FA8
2FCC:  BCF    FA6.6
2FCE:  BCF    FA6.7
2FD0:  BSF    FA6.2
2FD2:  MOVF   FF2,W
2FD4:  MOVWF  00
2FD6:  BCF    FF2.7
2FD8:  MOVLB  F
2FDA:  MOVLW  55
2FDC:  MOVWF  FA7
2FDE:  MOVLW  AA
2FE0:  MOVWF  FA7
2FE2:  BSF    FA6.1
2FE4:  BTFSC  FA6.1
2FE6:  BRA    2FE4
2FE8:  BCF    FA6.2
2FEA:  MOVF   00,W
2FEC:  IORWF  FF2,F
2FEE:  MOVLW  14
2FF0:  MOVLB  1
2FF2:  MOVWF  x24
2FF4:  MOVLB  0
2FF6:  CALL   0A5E
2FFA:  MOVLW  03
2FFC:  MOVWF  FA9
2FFE:  CLRF   FA8
3000:  BCF    FA6.6
3002:  BCF    FA6.7
3004:  BSF    FA6.2
3006:  MOVF   FF2,W
3008:  MOVWF  00
300A:  BCF    FF2.7
300C:  MOVLB  F
300E:  MOVLW  55
3010:  MOVWF  FA7
3012:  MOVLW  AA
3014:  MOVWF  FA7
3016:  BSF    FA6.1
3018:  BTFSC  FA6.1
301A:  BRA    3018
301C:  BCF    FA6.2
301E:  MOVF   00,W
3020:  IORWF  FF2,F
3022:  MOVLW  14
3024:  MOVLB  1
3026:  MOVWF  x24
3028:  MOVLB  0
302A:  CALL   0A5E
....................              reset_cpu();} 
302E:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
3030:  MOVF   48,W
3032:  SUBWF  44,W
3034:  BNZ   30F0
3036:  MOVF   49,W
3038:  SUBWF  45,W
303A:  BNZ   30F0
303C:  MOVF   4A,W
303E:  SUBWF  46,W
3040:  BNZ   30F0
3042:  MOVF   4B,W
3044:  SUBWF  47,W
3046:  BNZ   30F0
....................             {lcd_gotoxy(1,1); 
3048:  MOVLW  01
304A:  MOVLB  1
304C:  MOVWF  x1F
304E:  MOVWF  x20
3050:  MOVLB  0
3052:  CALL   0B70
....................             printf(lcd_putc,"                   "); 
3056:  MOVLW  DA
3058:  MOVWF  FF6
305A:  MOVLW  02
305C:  MOVWF  FF7
305E:  CALL   106E
....................             lcd_gotoxy(1,2); 
3062:  MOVLW  01
3064:  MOVLB  1
3066:  MOVWF  x1F
3068:  MOVLW  02
306A:  MOVWF  x20
306C:  MOVLB  0
306E:  CALL   0B70
....................             printf(lcd_putc,"     Contraseña    "); 
3072:  MOVLW  EE
3074:  MOVWF  FF6
3076:  MOVLW  02
3078:  MOVWF  FF7
307A:  CALL   106E
....................             lcd_gotoxy(1,3); 
307E:  MOVLW  01
3080:  MOVLB  1
3082:  MOVWF  x1F
3084:  MOVLW  03
3086:  MOVWF  x20
3088:  MOVLB  0
308A:  CALL   0B70
....................             printf(lcd_putc,"      Correcta     "); 
308E:  MOVLW  02
3090:  MOVWF  FF6
3092:  MOVLW  03
3094:  MOVWF  FF7
3096:  CALL   106E
....................             lcd_gotoxy(1,4); 
309A:  MOVLW  01
309C:  MOVLB  1
309E:  MOVWF  x1F
30A0:  MOVLW  04
30A2:  MOVWF  x20
30A4:  MOVLB  0
30A6:  CALL   0B70
....................             printf(lcd_putc,"                   "); 
30AA:  MOVLW  16
30AC:  MOVWF  FF6
30AE:  MOVLW  03
30B0:  MOVWF  FF7
30B2:  CALL   106E
....................             delay_ms(500);Menu=50;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
30B6:  MOVLW  02
30B8:  MOVLB  1
30BA:  MOVWF  x09
30BC:  MOVLW  FA
30BE:  MOVWF  x24
30C0:  MOVLB  0
30C2:  CALL   0A5E
30C6:  MOVLB  1
30C8:  DECFSZ x09,F
30CA:  BRA    30BC
30CC:  MOVLW  32
30CE:  MOVWF  17
30D0:  MOVLW  0B
30D2:  MOVWF  1A
30D4:  MOVLW  0C
30D6:  MOVWF  x1E
30D8:  MOVLB  0
30DA:  CALL   0BE2
30DE:  BSF    F8A.7
30E0:  BCF    F93.7
30E2:  BCF    3F.0
30E4:  BCF    3F.1
30E6:  BSF    58.4
....................             t_latencia=0;flag_iniciodamper=1;} 
30E8:  CLRF   5C
30EA:  CLRF   5B
30EC:  BSF    3F.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
30EE:  BRA    3176
....................          {lcd_gotoxy(1,1); 
30F0:  MOVLW  01
30F2:  MOVLB  1
30F4:  MOVWF  x1F
30F6:  MOVWF  x20
30F8:  MOVLB  0
30FA:  CALL   0B70
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
30FE:  MOVLW  01
3100:  MOVLB  1
3102:  MOVWF  x1F
3104:  MOVLW  02
3106:  MOVWF  x20
3108:  MOVLB  0
310A:  CALL   0B70
....................             printf(lcd_putc,"     Contraseña    "); 
310E:  MOVLW  2A
3110:  MOVWF  FF6
3112:  MOVLW  03
3114:  MOVWF  FF7
3116:  CALL   106E
....................             lcd_gotoxy(1,3); 
311A:  MOVLW  01
311C:  MOVLB  1
311E:  MOVWF  x1F
3120:  MOVLW  03
3122:  MOVWF  x20
3124:  MOVLB  0
3126:  CALL   0B70
....................             printf(lcd_putc,"     Incorrecta    "); 
312A:  MOVLW  3E
312C:  MOVWF  FF6
312E:  MOVLW  03
3130:  MOVWF  FF7
3132:  CALL   106E
....................             lcd_gotoxy(1,4); 
3136:  MOVLW  01
3138:  MOVLB  1
313A:  MOVWF  x1F
313C:  MOVLW  04
313E:  MOVWF  x20
3140:  MOVLB  0
3142:  CALL   0B70
....................             printf(lcd_putc,"                   "); 
3146:  MOVLW  52
3148:  MOVWF  FF6
314A:  MOVLW  03
314C:  MOVWF  FF7
314E:  CALL   106E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3152:  MOVLW  02
3154:  MOVLB  1
3156:  MOVWF  x09
3158:  MOVLW  FA
315A:  MOVWF  x24
315C:  MOVLB  0
315E:  CALL   0A5E
3162:  MOVLB  1
3164:  DECFSZ x09,F
3166:  BRA    3158
3168:  MOVLW  0B
316A:  MOVWF  1A
316C:  MOVLW  0C
316E:  MOVWF  x1E
3170:  MOVLB  0
3172:  CALL   0BE2
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
3176:  MOVF   1A,W
3178:  SUBLW  0B
317A:  BC    319E
317C:  MOVF   1A,W
317E:  SUBLW  0D
3180:  BNC   319E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3182:  MOVLW  01
3184:  SUBWF  1A,W
3186:  MOVLB  1
3188:  MOVWF  x09
318A:  MOVWF  x1F
318C:  MOVLW  04
318E:  MOVWF  x20
3190:  MOVLB  0
3192:  CALL   0B70
....................             lcd_putc(t[1]); 
3196:  MOVFF  42,11E
319A:  CALL   0BE2
....................           } 
....................  
....................    } 
319E:  MOVLB  1
31A0:  BRA    2D3C
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
31A2:  DECFSZ 17,W
31A4:  BRA    33E0
....................       if(paso<0) 
31A6:  BTFSC  40.7
31A8:  BRA    31AC
31AA:  BRA    31AE
....................         {paso=0;} 
31AC:  CLRF   40
....................     
....................    lcd_gotoxy(1,1); 
31AE:  MOVLW  01
31B0:  MOVWF  x1F
31B2:  MOVWF  x20
31B4:  MOVLB  0
31B6:  CALL   0B70
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
31BA:  MOVLW  66
31BC:  MOVWF  FF6
31BE:  MOVLW  03
31C0:  MOVWF  FF7
31C2:  CALL   106E
....................     
....................       if(UP)//Si oprime hacia arriba 
31C6:  BSF    F93.3
31C8:  BTFSS  F81.3
31CA:  BRA    31EA
....................       {  if(Flanco == 0)  
31CC:  BTFSC  3E.4
31CE:  BRA    31E8
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
31D0:  DECF   1D,F
31D2:  DECF   1B,F
31D4:  MOVLW  01
31D6:  ADDWF  1B,W
31D8:  MOVWF  1C
31DA:  BSF    3E.4
31DC:  MOVLW  1E
31DE:  MOVLB  1
31E0:  MOVWF  x24
31E2:  MOVLB  0
31E4:  CALL   0A5E
....................          else 
31E8:  BRA    31EC
....................             {Flanco = 0;} 
31EA:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
31EC:  BSF    F93.2
31EE:  BTFSS  F81.2
31F0:  BRA    3210
....................       {  if(Flanco2 == 0)  
31F2:  BTFSC  3E.6
31F4:  BRA    320E
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
31F6:  INCF   1D,F
31F8:  INCF   1B,F
31FA:  MOVLW  01
31FC:  SUBWF  1B,W
31FE:  MOVWF  1C
3200:  BSF    3E.6
3202:  MOVLW  1E
3204:  MOVLB  1
3206:  MOVWF  x24
3208:  MOVLB  0
320A:  CALL   0A5E
....................          else 
320E:  BRA    3212
....................             {Flanco2 = 0;} 
3210:  BCF    3E.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
3212:  MOVF   1D,W
3214:  SUBWF  1F,W
3216:  BC    3228
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
3218:  INCF   40,F
321A:  MOVFF  1D,1F
321E:  MOVLW  02
3220:  SUBWF  1F,W
3222:  MOVWF  1E
3224:  MOVLW  04
3226:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
3228:  MOVF   1E,W
322A:  SUBWF  1D,W
322C:  BC    323E
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
322E:  DECF   40,F
3230:  MOVFF  1D,1E
3234:  MOVLW  02
3236:  ADDWF  1E,W
3238:  MOVWF  1F
323A:  MOVLW  02
323C:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
323E:  MOVF   1D,W
3240:  SUBWF  18,W
3242:  BC    3256
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
3244:  MOVFF  19,1D
3248:  MOVLW  02
324A:  MOVWF  1B
324C:  CLRF   40
324E:  MOVFF  1D,1E
3252:  ADDWF  1E,W
3254:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
3256:  MOVF   19,W
3258:  SUBWF  1D,W
325A:  BC    3272
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
325C:  MOVFF  18,1D
3260:  MOVLW  04
3262:  MOVWF  1B
3264:  SUBWF  18,W
3266:  MOVWF  40
3268:  MOVFF  1D,1F
326C:  MOVLW  02
326E:  SUBWF  1F,W
3270:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
3272:  MOVLW  01
3274:  ADDWF  40,W
3276:  MOVLB  1
3278:  MOVWF  x09
327A:  MOVWF  x0A
327C:  MOVLW  02
327E:  MOVWF  x0B
3280:  MOVLB  0
3282:  CALL   11C0
....................         mensajes(2+paso,3); 
3286:  MOVLW  02
3288:  ADDWF  40,W
328A:  MOVLB  1
328C:  MOVWF  x09
328E:  MOVWF  x0A
3290:  MOVLW  03
3292:  MOVWF  x0B
3294:  MOVLB  0
3296:  CALL   11C0
....................         mensajes(3+paso,4); 
329A:  MOVLW  03
329C:  ADDWF  40,W
329E:  MOVLB  1
32A0:  MOVWF  x09
32A2:  MOVWF  x0A
32A4:  MOVLW  04
32A6:  MOVWF  x0B
32A8:  MOVLB  0
32AA:  CALL   11C0
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
32AE:  MOVLW  01
32B0:  MOVLB  1
32B2:  MOVWF  x1F
32B4:  MOVFF  1B,120
32B8:  MOVLB  0
32BA:  CALL   0B70
....................         lcd_putc(t[0]); 
32BE:  MOVFF  41,11E
32C2:  CALL   0BE2
....................  
....................         if(Flecha==2) 
32C6:  MOVF   1B,W
32C8:  SUBLW  02
32CA:  BNZ   32FC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
32CC:  MOVLW  01
32CE:  MOVLB  1
32D0:  MOVWF  x1F
32D2:  MOVLW  04
32D4:  MOVWF  x20
32D6:  MOVLB  0
32D8:  CALL   0B70
....................             lcd_putc(t[1]); 
32DC:  MOVFF  42,11E
32E0:  CALL   0BE2
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
32E4:  MOVLW  01
32E6:  MOVLB  1
32E8:  MOVWF  x1F
32EA:  MOVLW  03
32EC:  MOVWF  x20
32EE:  MOVLB  0
32F0:  CALL   0B70
....................             lcd_putc(t[1]); 
32F4:  MOVFF  42,11E
32F8:  CALL   0BE2
....................           } 
....................          
....................         if(Flecha==4) 
32FC:  MOVF   1B,W
32FE:  SUBLW  04
3300:  BNZ   3332
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3302:  MOVLW  01
3304:  MOVLB  1
3306:  MOVWF  x1F
3308:  MOVLW  02
330A:  MOVWF  x20
330C:  MOVLB  0
330E:  CALL   0B70
....................             lcd_putc(t[1]); 
3312:  MOVFF  42,11E
3316:  CALL   0BE2
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
331A:  MOVLW  01
331C:  MOVLB  1
331E:  MOVWF  x1F
3320:  MOVLW  03
3322:  MOVWF  x20
3324:  MOVLB  0
3326:  CALL   0B70
....................             lcd_putc(t[1]); 
332A:  MOVFF  42,11E
332E:  CALL   0BE2
....................           } 
....................          
....................         if(Flecha==3) 
3332:  MOVF   1B,W
3334:  SUBLW  03
3336:  BNZ   3368
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3338:  MOVLW  01
333A:  MOVLB  1
333C:  MOVWF  x1F
333E:  MOVLW  04
3340:  MOVWF  x20
3342:  MOVLB  0
3344:  CALL   0B70
....................             lcd_putc(t[1]); 
3348:  MOVFF  42,11E
334C:  CALL   0BE2
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3350:  MOVLW  01
3352:  MOVLB  1
3354:  MOVWF  x1F
3356:  MOVLW  02
3358:  MOVWF  x20
335A:  MOVLB  0
335C:  CALL   0B70
....................             lcd_putc(t[1]); 
3360:  MOVFF  42,11E
3364:  CALL   0BE2
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
3368:  BSF    F93.0
336A:  BTFSS  F81.0
336C:  BRA    33AA
....................       {  if(Flanco1 == 0)  
336E:  BTFSC  3E.5
3370:  BRA    33A8
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
3372:  MOVFF  1D,17
3376:  MOVLW  03
3378:  MOVWF  1B
337A:  MOVLW  02
337C:  MOVLB  1
337E:  MOVWF  x09
3380:  MOVLW  FA
3382:  MOVWF  x24
3384:  MOVLB  0
3386:  CALL   0A5E
338A:  MOVLB  1
338C:  DECFSZ x09,F
338E:  BRA    3380
3390:  MOVLW  0C
3392:  MOVWF  x1E
3394:  MOVLB  0
3396:  CALL   0BE2
....................             if(Menu==6) 
339A:  MOVF   17,W
339C:  SUBLW  06
339E:  BNZ   33A8
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
33A0:  CLRF   44
33A2:  CLRF   45
33A4:  CLRF   46
33A6:  CLRF   47
....................          else 
33A8:  BRA    33AC
....................             {Flanco1 = 0;}   
33AA:  BCF    3E.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
33AC:  BSF    F93.1
33AE:  BTFSS  F81.1
33B0:  BRA    33DC
....................       {  if(Flanco3 == 0)  
33B2:  BTFSC  3E.7
33B4:  BRA    33DA
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
33B6:  MOVLW  02
33B8:  MOVLB  1
33BA:  MOVWF  x09
33BC:  MOVLW  FA
33BE:  MOVWF  x24
33C0:  MOVLB  0
33C2:  CALL   0A5E
33C6:  MOVLB  1
33C8:  DECFSZ x09,F
33CA:  BRA    33BC
33CC:  MOVLW  14
33CE:  MOVWF  17
33D0:  MOVLW  0C
33D2:  MOVWF  x1E
33D4:  MOVLB  0
33D6:  CALL   0BE2
....................          else 
33DA:  BRA    33DE
....................             {Flanco3 = 0;}                
33DC:  BCF    3E.7
33DE:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
33E0:  MOVF   17,W
33E2:  SUBLW  02
33E4:  BTFSS  FD8.2
33E6:  BRA    3534
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
33E8:  BTG    3E.2
33EA:  BSF    3E.5
33EC:  MOVLW  01
33EE:  MOVWF  17
33F0:  CLRF   40
....................                        
....................             if(estadoalarma==1) 
33F2:  BTFSS  3E.2
33F4:  BRA    3466
....................             {estadoalarma=1; 
33F6:  BSF    3E.2
....................                lcd_gotoxy(1,1); 
33F8:  MOVLW  01
33FA:  MOVWF  x1F
33FC:  MOVWF  x20
33FE:  MOVLB  0
3400:  CALL   0B70
....................                printf(lcd_putc,"                    "); 
3404:  MOVLW  7C
3406:  MOVWF  FF6
3408:  MOVLW  03
340A:  MOVWF  FF7
340C:  CALL   106E
....................                lcd_gotoxy(1,2); 
3410:  MOVLW  01
3412:  MOVLB  1
3414:  MOVWF  x1F
3416:  MOVLW  02
3418:  MOVWF  x20
341A:  MOVLB  0
341C:  CALL   0B70
....................                printf(lcd_putc,"        Activo      "); 
3420:  MOVLW  92
3422:  MOVWF  FF6
3424:  MOVLW  03
3426:  MOVWF  FF7
3428:  CALL   106E
....................                lcd_gotoxy(1,3); 
342C:  MOVLW  01
342E:  MOVLB  1
3430:  MOVWF  x1F
3432:  MOVLW  03
3434:  MOVWF  x20
3436:  MOVLB  0
3438:  CALL   0B70
....................                printf(lcd_putc,"        Alarma      "); 
343C:  MOVLW  A8
343E:  MOVWF  FF6
3440:  MOVLW  03
3442:  MOVWF  FF7
3444:  CALL   106E
....................                lcd_gotoxy(1,4); 
3448:  MOVLW  01
344A:  MOVLB  1
344C:  MOVWF  x1F
344E:  MOVLW  04
3450:  MOVWF  x20
3452:  MOVLB  0
3454:  CALL   0B70
....................                printf(lcd_putc,"                    ");} 
3458:  MOVLW  BE
345A:  MOVWF  FF6
345C:  MOVLW  03
345E:  MOVWF  FF7
3460:  CALL   106E
3464:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
3466:  BTFSC  3E.2
3468:  BRA    34DA
....................             {estadoalarma=0; 
346A:  BCF    3E.2
....................                lcd_gotoxy(1,1); 
346C:  MOVLW  01
346E:  MOVWF  x1F
3470:  MOVWF  x20
3472:  MOVLB  0
3474:  CALL   0B70
....................                printf(lcd_putc,"                    "); 
3478:  MOVLW  D4
347A:  MOVWF  FF6
347C:  MOVLW  03
347E:  MOVWF  FF7
3480:  CALL   106E
....................                lcd_gotoxy(1,2); 
3484:  MOVLW  01
3486:  MOVLB  1
3488:  MOVWF  x1F
348A:  MOVLW  02
348C:  MOVWF  x20
348E:  MOVLB  0
3490:  CALL   0B70
....................                printf(lcd_putc,"      Desactivo     "); 
3494:  MOVLW  EA
3496:  MOVWF  FF6
3498:  MOVLW  03
349A:  MOVWF  FF7
349C:  CALL   106E
....................                lcd_gotoxy(1,3); 
34A0:  MOVLW  01
34A2:  MOVLB  1
34A4:  MOVWF  x1F
34A6:  MOVLW  03
34A8:  MOVWF  x20
34AA:  MOVLB  0
34AC:  CALL   0B70
....................                printf(lcd_putc,"       Alarma       "); 
34B0:  MOVLW  00
34B2:  MOVWF  FF6
34B4:  MOVLW  04
34B6:  MOVWF  FF7
34B8:  CALL   106E
....................                lcd_gotoxy(1,4); 
34BC:  MOVLW  01
34BE:  MOVLB  1
34C0:  MOVWF  x1F
34C2:  MOVLW  04
34C4:  MOVWF  x20
34C6:  MOVLB  0
34C8:  CALL   0B70
....................                printf(lcd_putc,"                    ");} 
34CC:  MOVLW  16
34CE:  MOVWF  FF6
34D0:  MOVLW  04
34D2:  MOVWF  FF7
34D4:  CALL   106E
34D8:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
34DA:  MOVLW  00
34DC:  BTFSC  3E.2
34DE:  MOVLW  01
34E0:  MOVWF  x09
34E2:  MOVLW  05
34E4:  MOVWF  FA9
34E6:  MOVFF  109,FA8
34EA:  BCF    FA6.6
34EC:  BCF    FA6.7
34EE:  BSF    FA6.2
34F0:  MOVF   FF2,W
34F2:  MOVWF  00
34F4:  BCF    FF2.7
34F6:  MOVLB  F
34F8:  MOVLW  55
34FA:  MOVWF  FA7
34FC:  MOVLW  AA
34FE:  MOVWF  FA7
3500:  BSF    FA6.1
3502:  BTFSC  FA6.1
3504:  BRA    3502
3506:  BCF    FA6.2
3508:  MOVF   00,W
350A:  IORWF  FF2,F
350C:  MOVLW  04
350E:  MOVLB  1
3510:  MOVWF  x09
3512:  MOVLW  FA
3514:  MOVWF  x24
3516:  MOVLB  0
3518:  CALL   0A5E
351C:  MOVLB  1
351E:  DECFSZ x09,F
3520:  BRA    3512
3522:  MOVLW  02
3524:  MOVWF  1B
3526:  MOVWF  1D
3528:  MOVLW  0C
352A:  MOVWF  x1E
352C:  MOVLB  0
352E:  CALL   0BE2
3532:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
3534:  MOVF   17,W
3536:  SUBLW  03
3538:  BTFSS  FD8.2
353A:  BRA    37D4
....................    lcd_gotoxy(1,1); 
353C:  MOVLW  01
353E:  MOVWF  x1F
3540:  MOVWF  x20
3542:  MOVLB  0
3544:  CALL   0B70
....................    printf(lcd_putc,"  Duracion Actual   ");                           
3548:  MOVLW  2C
354A:  MOVWF  FF6
354C:  MOVLW  04
354E:  MOVWF  FF7
3550:  CALL   106E
....................    lcd_gotoxy(1,2);                                                   
3554:  MOVLW  01
3556:  MOVLB  1
3558:  MOVWF  x1F
355A:  MOVLW  02
355C:  MOVWF  x20
355E:  MOVLB  0
3560:  CALL   0B70
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
3564:  MOVLW  42
3566:  MOVWF  FF6
3568:  MOVLW  04
356A:  MOVWF  FF7
356C:  MOVLW  09
356E:  MOVLB  1
3570:  MOVWF  x11
3572:  MOVLB  0
3574:  CALL   108E
3578:  MOVFF  35,109
357C:  MOVLW  01
357E:  MOVLB  1
3580:  MOVWF  x0A
3582:  MOVLB  0
3584:  CALL   1310
3588:  MOVLW  3A
358A:  MOVLB  1
358C:  MOVWF  x1E
358E:  MOVLB  0
3590:  CALL   0BE2
3594:  MOVFF  34,109
3598:  MOVLW  01
359A:  MOVLB  1
359C:  MOVWF  x0A
359E:  MOVLB  0
35A0:  CALL   1310
35A4:  MOVLW  3A
35A6:  MOVLB  1
35A8:  MOVWF  x1E
35AA:  MOVLB  0
35AC:  CALL   0BE2
35B0:  MOVFF  33,109
35B4:  MOVLW  01
35B6:  MOVLB  1
35B8:  MOVWF  x0A
35BA:  MOVLB  0
35BC:  CALL   1310
35C0:  MOVLW  20
35C2:  MOVLB  1
35C4:  MOVWF  x1E
35C6:  MOVLB  0
35C8:  CALL   0BE2
....................     
....................    if(flag_filtro==1) 
35CC:  BTFSS  3F.2
35CE:  BRA    35EE
....................    { 
....................       lcd_gotoxy(1,3);                                                  
35D0:  MOVLW  01
35D2:  MOVLB  1
35D4:  MOVWF  x1F
35D6:  MOVLW  03
35D8:  MOVWF  x20
35DA:  MOVLB  0
35DC:  CALL   0B70
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
35E0:  MOVLW  5C
35E2:  MOVWF  FF6
35E4:  MOVLW  04
35E6:  MOVWF  FF7
35E8:  CALL   106E
....................    } 
....................    else 
35EC:  BRA    360A
....................    { 
....................       lcd_gotoxy(1,3);                                                  
35EE:  MOVLW  01
35F0:  MOVLB  1
35F2:  MOVWF  x1F
35F4:  MOVLW  03
35F6:  MOVWF  x20
35F8:  MOVLB  0
35FA:  CALL   0B70
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
35FE:  MOVLW  72
3600:  MOVWF  FF6
3602:  MOVLW  04
3604:  MOVWF  FF7
3606:  CALL   106E
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
360A:  MOVLW  01
360C:  MOVLB  1
360E:  MOVWF  x1F
3610:  MOVLW  04
3612:  MOVWF  x20
3614:  MOVLB  0
3616:  CALL   0B70
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
361A:  MOVLW  88
361C:  MOVWF  FF6
361E:  MOVLW  04
3620:  MOVWF  FF7
3622:  CALL   106E
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
3626:  BSF    F93.3
3628:  BTFSS  F81.3
362A:  BRA    372E
....................       {  delay_ms(200); 
362C:  MOVLW  C8
362E:  MOVLB  1
3630:  MOVWF  x24
3632:  MOVLB  0
3634:  CALL   0A5E
....................          printf(lcd_putc,"\f"); 
3638:  MOVLW  0C
363A:  MOVLB  1
363C:  MOVWF  x1E
363E:  MOVLB  0
3640:  CALL   0BE2
....................          lcd_gotoxy(1,2); 
3644:  MOVLW  01
3646:  MOVLB  1
3648:  MOVWF  x1F
364A:  MOVLW  02
364C:  MOVWF  x20
364E:  MOVLB  0
3650:  CALL   0B70
....................          printf(lcd_putc," Reset de tiempo "); 
3654:  MOVLW  9E
3656:  MOVWF  FF6
3658:  MOVLW  04
365A:  MOVWF  FF7
365C:  CALL   106E
....................          lcd_gotoxy(1,3); 
3660:  MOVLW  01
3662:  MOVLB  1
3664:  MOVWF  x1F
3666:  MOVLW  03
3668:  MOVWF  x20
366A:  MOVLB  0
366C:  CALL   0B70
....................          printf(lcd_putc,"     Exitoso     "); 
3670:  MOVLW  B0
3672:  MOVWF  FF6
3674:  MOVLW  04
3676:  MOVWF  FF7
3678:  CALL   106E
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
367C:  MOVLW  46
367E:  MOVWF  FA9
3680:  CLRF   FA8
3682:  BCF    FA6.6
3684:  BCF    FA6.7
3686:  BSF    FA6.2
3688:  MOVF   FF2,W
368A:  MOVWF  00
368C:  BCF    FF2.7
368E:  MOVLB  F
3690:  MOVLW  55
3692:  MOVWF  FA7
3694:  MOVLW  AA
3696:  MOVWF  FA7
3698:  BSF    FA6.1
369A:  BTFSC  FA6.1
369C:  BRA    369A
369E:  BCF    FA6.2
36A0:  MOVF   00,W
36A2:  IORWF  FF2,F
36A4:  MOVLW  47
36A6:  MOVWF  FA9
36A8:  CLRF   FA8
36AA:  BCF    FA6.6
36AC:  BCF    FA6.7
36AE:  BSF    FA6.2
36B0:  MOVF   FF2,W
36B2:  MOVWF  00
36B4:  BCF    FF2.7
36B6:  MOVLW  55
36B8:  MOVWF  FA7
36BA:  MOVLW  AA
36BC:  MOVWF  FA7
36BE:  BSF    FA6.1
36C0:  BTFSC  FA6.1
36C2:  BRA    36C0
36C4:  BCF    FA6.2
36C6:  MOVF   00,W
36C8:  IORWF  FF2,F
36CA:  MOVLW  48
36CC:  MOVWF  FA9
36CE:  CLRF   FA8
36D0:  BCF    FA6.6
36D2:  BCF    FA6.7
36D4:  BSF    FA6.2
36D6:  MOVF   FF2,W
36D8:  MOVWF  00
36DA:  BCF    FF2.7
36DC:  MOVLW  55
36DE:  MOVWF  FA7
36E0:  MOVLW  AA
36E2:  MOVWF  FA7
36E4:  BSF    FA6.1
36E6:  BTFSC  FA6.1
36E8:  BRA    36E6
36EA:  BCF    FA6.2
36EC:  MOVF   00,W
36EE:  IORWF  FF2,F
....................          delay_ms(700); 
36F0:  MOVLW  04
36F2:  MOVLB  1
36F4:  MOVWF  x09
36F6:  MOVLW  AF
36F8:  MOVWF  x24
36FA:  MOVLB  0
36FC:  CALL   0A5E
3700:  MOVLB  1
3702:  DECFSZ x09,F
3704:  BRA    36F6
....................          segundos=0;minutos=0;horas=0; 
3706:  CLRF   33
3708:  CLRF   34
370A:  CLRF   35
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
370C:  MOVLW  1E
370E:  MOVWF  x24
3710:  MOVLB  0
3712:  CALL   0A5E
3716:  MOVLW  01
3718:  MOVWF  17
371A:  CLRF   40
371C:  MOVLW  02
371E:  MOVWF  1B
3720:  MOVWF  1D
3722:  MOVLW  0C
3724:  MOVLB  1
3726:  MOVWF  x1E
3728:  MOVLB  0
372A:  CALL   0BE2
....................       } 
....................        
....................       if(RIGHT) 
372E:  BSF    F93.0
3730:  BTFSS  F81.0
3732:  BRA    3796
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
3734:  BTG    3F.2
3736:  MOVLW  00
3738:  BTFSC  3F.2
373A:  MOVLW  01
373C:  MOVLB  1
373E:  MOVWF  x09
3740:  MOVLW  49
3742:  MOVWF  FA9
3744:  MOVFF  109,FA8
3748:  BCF    FA6.6
374A:  BCF    FA6.7
374C:  BSF    FA6.2
374E:  MOVF   FF2,W
3750:  MOVWF  00
3752:  BCF    FF2.7
3754:  MOVLB  F
3756:  MOVLW  55
3758:  MOVWF  FA7
375A:  MOVLW  AA
375C:  MOVWF  FA7
375E:  BSF    FA6.1
3760:  BTFSC  FA6.1
3762:  BRA    3760
3764:  BCF    FA6.2
3766:  MOVF   00,W
3768:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
376A:  MOVLW  02
376C:  MOVLB  1
376E:  MOVWF  x09
3770:  MOVLW  FA
3772:  MOVWF  x24
3774:  MOVLB  0
3776:  CALL   0A5E
377A:  MOVLB  1
377C:  DECFSZ x09,F
377E:  BRA    3770
3780:  MOVLW  01
3782:  MOVWF  17
3784:  CLRF   40
3786:  MOVLW  02
3788:  MOVWF  1B
378A:  MOVWF  1D
378C:  MOVLW  0C
378E:  MOVWF  x1E
3790:  MOVLB  0
3792:  CALL   0BE2
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
3796:  BSF    F93.1
3798:  BTFSS  F81.1
379A:  BRA    37D0
....................       {  if(Flanco3 == 0)  
379C:  BTFSC  3E.7
379E:  BRA    37CE
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
37A0:  BSF    3E.7
37A2:  MOVLW  02
37A4:  MOVLB  1
37A6:  MOVWF  x09
37A8:  MOVLW  FA
37AA:  MOVWF  x24
37AC:  MOVLB  0
37AE:  CALL   0A5E
37B2:  MOVLB  1
37B4:  DECFSZ x09,F
37B6:  BRA    37A8
37B8:  MOVLW  01
37BA:  MOVWF  17
37BC:  CLRF   40
37BE:  MOVLW  02
37C0:  MOVWF  1B
37C2:  MOVWF  1D
37C4:  MOVLW  0C
37C6:  MOVWF  x1E
37C8:  MOVLB  0
37CA:  CALL   0BE2
....................          else 
37CE:  BRA    37D2
....................             {Flanco3 = 0;}       
37D0:  BCF    3E.7
37D2:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
37D4:  MOVF   17,W
37D6:  SUBLW  04
37D8:  BTFSS  FD8.2
37DA:  BRA    3AF0
....................    lcd_gotoxy(1,2); 
37DC:  MOVLW  01
37DE:  MOVWF  x1F
37E0:  MOVLW  02
37E2:  MOVWF  x20
37E4:  MOVLB  0
37E6:  CALL   0B70
....................    printf(lcd_putc,"      Setpoint      "); 
37EA:  MOVLW  C2
37EC:  MOVWF  FF6
37EE:  MOVLW  04
37F0:  MOVWF  FF7
37F2:  CALL   106E
....................    lcd_gotoxy(1,3); 
37F6:  MOVLW  01
37F8:  MOVLB  1
37FA:  MOVWF  x1F
37FC:  MOVLW  03
37FE:  MOVWF  x20
3800:  MOVLB  0
3802:  CALL   0B70
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
3806:  MOVLW  D8
3808:  MOVWF  FF6
380A:  MOVLW  04
380C:  MOVWF  FF7
380E:  MOVLW  07
3810:  MOVLB  1
3812:  MOVWF  x11
3814:  MOVLB  0
3816:  CALL   108E
381A:  MOVLW  89
381C:  MOVWF  FE9
381E:  MOVFF  4F,114
3822:  MOVFF  4E,113
3826:  MOVFF  4D,112
382A:  MOVFF  4C,111
382E:  MOVLW  02
3830:  MOVLB  1
3832:  MOVWF  x15
3834:  MOVLB  0
3836:  CALL   1546
383A:  MOVLW  20
383C:  MOVLB  1
383E:  MOVWF  x1E
3840:  MOVLB  0
3842:  CALL   0BE2
3846:  MOVLW  20
3848:  MOVLB  1
384A:  MOVWF  x1E
384C:  MOVLB  0
384E:  CALL   0BE2
3852:  MOVLW  20
3854:  MOVLB  1
3856:  MOVWF  x1E
3858:  MOVLB  0
385A:  CALL   0BE2
....................     
....................    if(setpoint>2.0) 
385E:  MOVLB  1
3860:  CLRF   x26
3862:  CLRF   x25
3864:  CLRF   x24
3866:  MOVLW  80
3868:  MOVWF  x23
386A:  MOVFF  4F,12A
386E:  MOVFF  4E,129
3872:  MOVFF  4D,128
3876:  MOVFF  4C,127
387A:  MOVLB  0
387C:  CALL   16F8
3880:  BNC   388C
....................    {setpoint=2.0;} 
3882:  CLRF   4F
3884:  CLRF   4E
3886:  CLRF   4D
3888:  MOVLW  80
388A:  MOVWF  4C
....................     
....................    if(setpoint<0.5) 
388C:  MOVFF  4F,126
3890:  MOVFF  4E,125
3894:  MOVFF  4D,124
3898:  MOVFF  4C,123
389C:  MOVLB  1
389E:  CLRF   x2A
38A0:  CLRF   x29
38A2:  CLRF   x28
38A4:  MOVLW  7E
38A6:  MOVWF  x27
38A8:  MOVLB  0
38AA:  CALL   16F8
38AE:  BNC   38BA
....................    {setpoint=0.5;} 
38B0:  CLRF   4F
38B2:  CLRF   4E
38B4:  CLRF   4D
38B6:  MOVLW  7E
38B8:  MOVWF  4C
....................     
....................       if(UP)//Si oprime hacia arriba 
38BA:  BSF    F93.3
38BC:  BTFSS  F81.3
38BE:  BRA    390E
....................       {  if(Flanco == 0)  
38C0:  BTFSC  3E.4
38C2:  BRA    390C
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
38C4:  BCF    FD8.1
38C6:  MOVFF  4F,12A
38CA:  MOVFF  4E,129
38CE:  MOVFF  4D,128
38D2:  MOVFF  4C,127
38D6:  MOVLW  CD
38D8:  MOVLB  1
38DA:  MOVWF  x2E
38DC:  MOVLW  CC
38DE:  MOVWF  x2D
38E0:  MOVLW  4C
38E2:  MOVWF  x2C
38E4:  MOVLW  7B
38E6:  MOVWF  x2B
38E8:  MOVLB  0
38EA:  CALL   0DE2
38EE:  MOVFF  03,4F
38F2:  MOVFF  02,4E
38F6:  MOVFF  01,4D
38FA:  MOVFF  00,4C
38FE:  BSF    3E.4
3900:  MOVLW  1E
3902:  MOVLB  1
3904:  MOVWF  x24
3906:  MOVLB  0
3908:  CALL   0A5E
....................          else 
390C:  BRA    3910
....................             {Flanco = 0;} 
390E:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3910:  BSF    F93.2
3912:  BTFSS  F81.2
3914:  BRA    3964
....................       {  if(Flanco2 == 0)  
3916:  BTFSC  3E.6
3918:  BRA    3962
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
391A:  BSF    FD8.1
391C:  MOVFF  4F,12A
3920:  MOVFF  4E,129
3924:  MOVFF  4D,128
3928:  MOVFF  4C,127
392C:  MOVLW  CD
392E:  MOVLB  1
3930:  MOVWF  x2E
3932:  MOVLW  CC
3934:  MOVWF  x2D
3936:  MOVLW  4C
3938:  MOVWF  x2C
393A:  MOVLW  7B
393C:  MOVWF  x2B
393E:  MOVLB  0
3940:  CALL   0DE2
3944:  MOVFF  03,4F
3948:  MOVFF  02,4E
394C:  MOVFF  01,4D
3950:  MOVFF  00,4C
3954:  BSF    3E.6
3956:  MOVLW  1E
3958:  MOVLB  1
395A:  MOVWF  x24
395C:  MOVLB  0
395E:  CALL   0A5E
....................          else 
3962:  BRA    3966
....................             {Flanco2 = 0;} 
3964:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3966:  BSF    F93.0
3968:  BTFSS  F81.0
396A:  BRA    3AAE
....................       {  if(Flanco1 == 0)  
396C:  BTFSC  3E.5
396E:  BRA    3AAC
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3970:  MOVLW  01
3972:  MOVWF  17
3974:  CLRF   40
3976:  MOVLW  02
3978:  MOVWF  1B
397A:  MOVWF  1D
397C:  MOVLW  0B
397E:  MOVWF  1A
3980:  MOVLW  02
3982:  MOVLB  1
3984:  MOVWF  x09
3986:  MOVLW  FA
3988:  MOVWF  x24
398A:  MOVLB  0
398C:  CALL   0A5E
3990:  MOVLB  1
3992:  DECFSZ x09,F
3994:  BRA    3986
3996:  MOVLW  0C
3998:  MOVWF  x1E
399A:  MOVLB  0
399C:  CALL   0BE2
....................             Temporal=setpoint; 
39A0:  MOVFF  4F,B4
39A4:  MOVFF  4E,B3
39A8:  MOVFF  4D,B2
39AC:  MOVFF  4C,B1
....................             Entero=(int)setpoint; 
39B0:  MOVFF  4F,10C
39B4:  MOVFF  4E,10B
39B8:  MOVFF  4D,10A
39BC:  MOVFF  4C,109
39C0:  CALL   1772
39C4:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
39C8:  MOVLB  1
39CA:  CLRF   x13
39CC:  MOVFF  24,112
39D0:  MOVLB  0
39D2:  CALL   0C4E
39D6:  BSF    FD8.1
39D8:  MOVFF  B4,12A
39DC:  MOVFF  B3,129
39E0:  MOVFF  B2,128
39E4:  MOVFF  B1,127
39E8:  MOVFF  03,12E
39EC:  MOVFF  02,12D
39F0:  MOVFF  01,12C
39F4:  MOVFF  00,12B
39F8:  CALL   0DE2
39FC:  MOVFF  03,B4
3A00:  MOVFF  02,B3
3A04:  MOVFF  01,B2
3A08:  MOVFF  00,B1
....................             Temporal2=Temporal*100.0; 
3A0C:  MOVFF  B4,126
3A10:  MOVFF  B3,125
3A14:  MOVFF  B2,124
3A18:  MOVFF  B1,123
3A1C:  MOVLB  1
3A1E:  CLRF   x2A
3A20:  CLRF   x29
3A22:  MOVLW  48
3A24:  MOVWF  x28
3A26:  MOVLW  85
3A28:  MOVWF  x27
3A2A:  MOVLB  0
3A2C:  CALL   138C
3A30:  MOVFF  03,B8
3A34:  MOVFF  02,B7
3A38:  MOVFF  01,B6
3A3C:  MOVFF  00,B5
....................             Decimal2=(int8)Temporal2; 
3A40:  MOVFF  B8,10C
3A44:  MOVFF  B7,10B
3A48:  MOVFF  B6,10A
3A4C:  MOVFF  B5,109
3A50:  CALL   1772
3A54:  MOVFF  01,26
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
3A58:  MOVLW  28
3A5A:  MOVWF  FA9
3A5C:  MOVFF  24,FA8
3A60:  BCF    FA6.6
3A62:  BCF    FA6.7
3A64:  BSF    FA6.2
3A66:  MOVF   FF2,W
3A68:  MOVWF  00
3A6A:  BCF    FF2.7
3A6C:  MOVLB  F
3A6E:  MOVLW  55
3A70:  MOVWF  FA7
3A72:  MOVLW  AA
3A74:  MOVWF  FA7
3A76:  BSF    FA6.1
3A78:  BTFSC  FA6.1
3A7A:  BRA    3A78
3A7C:  BCF    FA6.2
3A7E:  MOVF   00,W
3A80:  IORWF  FF2,F
3A82:  MOVLW  29
3A84:  MOVWF  FA9
3A86:  MOVFF  26,FA8
3A8A:  BCF    FA6.6
3A8C:  BCF    FA6.7
3A8E:  BSF    FA6.2
3A90:  MOVF   FF2,W
3A92:  MOVWF  00
3A94:  BCF    FF2.7
3A96:  MOVLW  55
3A98:  MOVWF  FA7
3A9A:  MOVLW  AA
3A9C:  MOVWF  FA7
3A9E:  BSF    FA6.1
3AA0:  BTFSC  FA6.1
3AA2:  BRA    3AA0
3AA4:  BCF    FA6.2
3AA6:  MOVF   00,W
3AA8:  IORWF  FF2,F
3AAA:  MOVLB  0
....................             }} 
....................          else 
3AAC:  BRA    3AB0
....................             {Flanco1 = 0;}    
3AAE:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3AB0:  BSF    F93.1
3AB2:  BTFSS  F81.1
3AB4:  BRA    3AEC
....................       {  if(Flanco3 == 0)  
3AB6:  BTFSC  3E.7
3AB8:  BRA    3AEA
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3ABA:  MOVLW  01
3ABC:  MOVWF  17
3ABE:  CLRF   40
3AC0:  MOVLW  02
3AC2:  MOVWF  1B
3AC4:  MOVWF  1D
3AC6:  MOVLW  0B
3AC8:  MOVWF  1A
3ACA:  MOVLW  02
3ACC:  MOVLB  1
3ACE:  MOVWF  x09
3AD0:  MOVLW  FA
3AD2:  MOVWF  x24
3AD4:  MOVLB  0
3AD6:  CALL   0A5E
3ADA:  MOVLB  1
3ADC:  DECFSZ x09,F
3ADE:  BRA    3AD0
3AE0:  MOVLW  0C
3AE2:  MOVWF  x1E
3AE4:  MOVLB  0
3AE6:  CALL   0BE2
....................          else 
3AEA:  BRA    3AEE
....................             {Flanco3 = 0;}     
3AEC:  BCF    3E.7
3AEE:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
3AF0:  MOVF   17,W
3AF2:  SUBLW  05
3AF4:  BTFSS  FD8.2
3AF6:  BRA    3E68
....................    lcd_gotoxy(1,1); 
3AF8:  MOVLW  01
3AFA:  MOVWF  x1F
3AFC:  MOVWF  x20
3AFE:  MOVLB  0
3B00:  CALL   0B70
....................    printf(lcd_putc,"      Ingrese       "); 
3B04:  MOVLW  E8
3B06:  MOVWF  FF6
3B08:  MOVLW  04
3B0A:  MOVWF  FF7
3B0C:  CALL   106E
....................    lcd_gotoxy(1,2); 
3B10:  MOVLW  01
3B12:  MOVLB  1
3B14:  MOVWF  x1F
3B16:  MOVLW  02
3B18:  MOVWF  x20
3B1A:  MOVLB  0
3B1C:  CALL   0B70
....................    printf(lcd_putc," Contraseña Actual  "); 
3B20:  MOVLW  FE
3B22:  MOVWF  FF6
3B24:  MOVLW  04
3B26:  MOVWF  FF7
3B28:  CALL   106E
....................    lcd_gotoxy(1,3); 
3B2C:  MOVLW  01
3B2E:  MOVLB  1
3B30:  MOVWF  x1F
3B32:  MOVLW  03
3B34:  MOVWF  x20
3B36:  MOVLB  0
3B38:  CALL   0B70
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3B3C:  MOVLW  14
3B3E:  MOVWF  FF6
3B40:  MOVLW  05
3B42:  MOVWF  FF7
3B44:  MOVLW  0A
3B46:  MOVLB  1
3B48:  MOVWF  x11
3B4A:  MOVLB  0
3B4C:  CALL   108E
3B50:  MOVFF  44,109
3B54:  MOVLW  1F
3B56:  MOVLB  1
3B58:  MOVWF  x0A
3B5A:  MOVLB  0
3B5C:  CALL   10E2
3B60:  MOVFF  45,109
3B64:  MOVLW  1F
3B66:  MOVLB  1
3B68:  MOVWF  x0A
3B6A:  MOVLB  0
3B6C:  CALL   10E2
3B70:  MOVFF  46,109
3B74:  MOVLW  1F
3B76:  MOVLB  1
3B78:  MOVWF  x0A
3B7A:  MOVLB  0
3B7C:  CALL   10E2
3B80:  MOVFF  47,109
3B84:  MOVLW  1F
3B86:  MOVLB  1
3B88:  MOVWF  x0A
3B8A:  MOVLB  0
3B8C:  CALL   10E2
3B90:  MOVLW  20
3B92:  MOVLB  1
3B94:  MOVWF  x1E
3B96:  MOVLB  0
3B98:  CALL   0BE2
3B9C:  MOVLW  20
3B9E:  MOVLB  1
3BA0:  MOVWF  x1E
3BA2:  MOVLB  0
3BA4:  CALL   0BE2
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
3BA8:  BSF    F93.3
3BAA:  BTFSS  F81.3
3BAC:  BRA    3BD4
....................       {  if(Flanco == 0)  
3BAE:  BTFSC  3E.4
3BB0:  BRA    3BD2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3BB2:  MOVLW  0B
3BB4:  SUBWF  1A,W
3BB6:  CLRF   03
3BB8:  ADDLW  44
3BBA:  MOVWF  FE9
3BBC:  MOVLW  00
3BBE:  ADDWFC 03,W
3BC0:  MOVWF  FEA
3BC2:  INCF   FEF,F
3BC4:  BSF    3E.4
3BC6:  MOVLW  1E
3BC8:  MOVLB  1
3BCA:  MOVWF  x24
3BCC:  MOVLB  0
3BCE:  CALL   0A5E
....................          else 
3BD2:  BRA    3BD6
....................             {Flanco = 0;} 
3BD4:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3BD6:  BSF    F93.2
3BD8:  BTFSS  F81.2
3BDA:  BRA    3C02
....................       {  if(Flanco2 == 0)  
3BDC:  BTFSC  3E.6
3BDE:  BRA    3C00
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3BE0:  MOVLW  0B
3BE2:  SUBWF  1A,W
3BE4:  CLRF   03
3BE6:  ADDLW  44
3BE8:  MOVWF  FE9
3BEA:  MOVLW  00
3BEC:  ADDWFC 03,W
3BEE:  MOVWF  FEA
3BF0:  DECF   FEF,F
3BF2:  BSF    3E.6
3BF4:  MOVLW  1E
3BF6:  MOVLB  1
3BF8:  MOVWF  x24
3BFA:  MOVLB  0
3BFC:  CALL   0A5E
....................          else 
3C00:  BRA    3C04
....................             {Flanco2 = 0;} 
3C02:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3C04:  BSF    F93.0
3C06:  BTFSS  F81.0
3C08:  BRA    3C34
....................       {  if(Flanco1 == 0)  
3C0A:  BTFSC  3E.5
3C0C:  BRA    3C32
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
3C0E:  BSF    3E.5
3C10:  INCF   1A,F
3C12:  MOVLW  02
3C14:  MOVLB  1
3C16:  MOVWF  x09
3C18:  MOVLW  FA
3C1A:  MOVWF  x24
3C1C:  MOVLB  0
3C1E:  CALL   0A5E
3C22:  MOVLB  1
3C24:  DECFSZ x09,F
3C26:  BRA    3C18
3C28:  MOVLW  0C
3C2A:  MOVWF  x1E
3C2C:  MOVLB  0
3C2E:  CALL   0BE2
....................          else 
3C32:  BRA    3C36
....................             {Flanco1 = 0;}    
3C34:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3C36:  BSF    F93.1
3C38:  BTFSS  F81.1
3C3A:  BRA    3C66
....................       {  if(Flanco3 == 0)  
3C3C:  BTFSC  3E.7
3C3E:  BRA    3C64
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
3C40:  BSF    3E.7
3C42:  DECF   1A,F
3C44:  MOVLW  02
3C46:  MOVLB  1
3C48:  MOVWF  x09
3C4A:  MOVLW  FA
3C4C:  MOVWF  x24
3C4E:  MOVLB  0
3C50:  CALL   0A5E
3C54:  MOVLB  1
3C56:  DECFSZ x09,F
3C58:  BRA    3C4A
3C5A:  MOVLW  0C
3C5C:  MOVWF  x1E
3C5E:  MOVLB  0
3C60:  CALL   0BE2
....................          else 
3C64:  BRA    3C68
....................             {Flanco3 = 0;}     
3C66:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3C68:  MOVLW  0B
3C6A:  SUBWF  1A,W
3C6C:  CLRF   03
3C6E:  ADDLW  44
3C70:  MOVWF  FE9
3C72:  MOVLW  00
3C74:  ADDWFC 03,W
3C76:  MOVWF  FEA
3C78:  BTFSC  FEF.7
3C7A:  BRA    3C7E
3C7C:  BRA    3C92
....................        {clave[unidad-11]=9;} 
3C7E:  MOVLW  0B
3C80:  SUBWF  1A,W
3C82:  CLRF   03
3C84:  ADDLW  44
3C86:  MOVWF  FE9
3C88:  MOVLW  00
3C8A:  ADDWFC 03,W
3C8C:  MOVWF  FEA
3C8E:  MOVLW  09
3C90:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3C92:  MOVLW  0B
3C94:  SUBWF  1A,W
3C96:  CLRF   03
3C98:  ADDLW  44
3C9A:  MOVWF  FE9
3C9C:  MOVLW  00
3C9E:  ADDWFC 03,W
3CA0:  MOVWF  FEA
3CA2:  BTFSC  FEF.7
3CA4:  BRA    3CBE
3CA6:  MOVF   FEF,W
3CA8:  SUBLW  09
3CAA:  BC    3CBE
....................        {clave[unidad-11]=0;} 
3CAC:  MOVLW  0B
3CAE:  SUBWF  1A,W
3CB0:  CLRF   03
3CB2:  ADDLW  44
3CB4:  MOVWF  FE9
3CB6:  MOVLW  00
3CB8:  ADDWFC 03,W
3CBA:  MOVWF  FEA
3CBC:  CLRF   FEF
....................        if(unidad<11) 
3CBE:  MOVF   1A,W
3CC0:  SUBLW  0A
3CC2:  BNC   3CD4
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
3CC4:  MOVLW  01
3CC6:  MOVWF  17
3CC8:  CLRF   40
3CCA:  MOVLW  02
3CCC:  MOVWF  1B
3CCE:  MOVWF  1D
3CD0:  MOVLW  0B
3CD2:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
3CD4:  MOVFF  1A,11F
3CD8:  MOVLW  04
3CDA:  MOVLB  1
3CDC:  MOVWF  x20
3CDE:  MOVLB  0
3CE0:  CALL   0B70
....................        lcd_putc(t[2]); 
3CE4:  MOVFF  43,11E
3CE8:  CALL   0BE2
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3CEC:  MOVF   1A,W
3CEE:  SUBLW  0E
3CF0:  BTFSC  FD8.0
3CF2:  BRA    3E3E
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
3CF4:  MOVF   48,W
3CF6:  SUBWF  44,W
3CF8:  BNZ   3DAC
3CFA:  MOVF   49,W
3CFC:  SUBWF  45,W
3CFE:  BNZ   3DAC
3D00:  MOVF   4A,W
3D02:  SUBWF  46,W
3D04:  BNZ   3DAC
3D06:  MOVF   4B,W
3D08:  SUBWF  47,W
3D0A:  BNZ   3DAC
....................             {lcd_gotoxy(1,1); 
3D0C:  MOVLW  01
3D0E:  MOVLB  1
3D10:  MOVWF  x1F
3D12:  MOVWF  x20
3D14:  MOVLB  0
3D16:  CALL   0B70
....................             printf(lcd_putc,"                    "); 
3D1A:  MOVLW  2A
3D1C:  MOVWF  FF6
3D1E:  MOVLW  05
3D20:  MOVWF  FF7
3D22:  CALL   106E
....................             lcd_gotoxy(1,2); 
3D26:  MOVLW  01
3D28:  MOVLB  1
3D2A:  MOVWF  x1F
3D2C:  MOVLW  02
3D2E:  MOVWF  x20
3D30:  MOVLB  0
3D32:  CALL   0B70
....................             printf(lcd_putc,"     Contraseña     "); 
3D36:  MOVLW  40
3D38:  MOVWF  FF6
3D3A:  MOVLW  05
3D3C:  MOVWF  FF7
3D3E:  CALL   106E
....................             lcd_gotoxy(1,3); 
3D42:  MOVLW  01
3D44:  MOVLB  1
3D46:  MOVWF  x1F
3D48:  MOVLW  03
3D4A:  MOVWF  x20
3D4C:  MOVLB  0
3D4E:  CALL   0B70
....................             printf(lcd_putc,"      Correcta      "); 
3D52:  MOVLW  56
3D54:  MOVWF  FF6
3D56:  MOVLW  05
3D58:  MOVWF  FF7
3D5A:  CALL   106E
....................             lcd_gotoxy(1,4); 
3D5E:  MOVLW  01
3D60:  MOVLB  1
3D62:  MOVWF  x1F
3D64:  MOVLW  04
3D66:  MOVWF  x20
3D68:  MOVLB  0
3D6A:  CALL   0B70
....................             printf(lcd_putc,"                    "); 
3D6E:  MOVLW  6C
3D70:  MOVWF  FF6
3D72:  MOVLW  05
3D74:  MOVWF  FF7
3D76:  CALL   106E
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
3D7A:  MOVLW  02
3D7C:  MOVLB  1
3D7E:  MOVWF  x09
3D80:  MOVLW  FA
3D82:  MOVWF  x24
3D84:  MOVLB  0
3D86:  CALL   0A5E
3D8A:  MOVLB  1
3D8C:  DECFSZ x09,F
3D8E:  BRA    3D80
3D90:  MOVLW  33
3D92:  MOVWF  17
3D94:  MOVLW  0B
3D96:  MOVWF  1A
3D98:  MOVLW  0C
3D9A:  MOVWF  x1E
3D9C:  MOVLB  0
3D9E:  CALL   0BE2
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
3DA2:  CLRF   44
3DA4:  CLRF   45
3DA6:  CLRF   46
3DA8:  CLRF   47
....................          else 
3DAA:  BRA    3E3E
....................          {lcd_gotoxy(1,1); 
3DAC:  MOVLW  01
3DAE:  MOVLB  1
3DB0:  MOVWF  x1F
3DB2:  MOVWF  x20
3DB4:  MOVLB  0
3DB6:  CALL   0B70
....................             printf(lcd_putc,"                    "); 
3DBA:  MOVLW  82
3DBC:  MOVWF  FF6
3DBE:  MOVLW  05
3DC0:  MOVWF  FF7
3DC2:  CALL   106E
....................             lcd_gotoxy(1,2); 
3DC6:  MOVLW  01
3DC8:  MOVLB  1
3DCA:  MOVWF  x1F
3DCC:  MOVLW  02
3DCE:  MOVWF  x20
3DD0:  MOVLB  0
3DD2:  CALL   0B70
....................             printf(lcd_putc,"     Contraseña     "); 
3DD6:  MOVLW  98
3DD8:  MOVWF  FF6
3DDA:  MOVLW  05
3DDC:  MOVWF  FF7
3DDE:  CALL   106E
....................             lcd_gotoxy(1,3); 
3DE2:  MOVLW  01
3DE4:  MOVLB  1
3DE6:  MOVWF  x1F
3DE8:  MOVLW  03
3DEA:  MOVWF  x20
3DEC:  MOVLB  0
3DEE:  CALL   0B70
....................             printf(lcd_putc,"     Incorrecta     "); 
3DF2:  MOVLW  AE
3DF4:  MOVWF  FF6
3DF6:  MOVLW  05
3DF8:  MOVWF  FF7
3DFA:  CALL   106E
....................             lcd_gotoxy(1,4); 
3DFE:  MOVLW  01
3E00:  MOVLB  1
3E02:  MOVWF  x1F
3E04:  MOVLW  04
3E06:  MOVWF  x20
3E08:  MOVLB  0
3E0A:  CALL   0B70
....................             printf(lcd_putc,"                    "); 
3E0E:  MOVLW  C4
3E10:  MOVWF  FF6
3E12:  MOVLW  05
3E14:  MOVWF  FF7
3E16:  CALL   106E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
3E1A:  MOVLW  02
3E1C:  MOVLB  1
3E1E:  MOVWF  x09
3E20:  MOVLW  FA
3E22:  MOVWF  x24
3E24:  MOVLB  0
3E26:  CALL   0A5E
3E2A:  MOVLB  1
3E2C:  DECFSZ x09,F
3E2E:  BRA    3E20
3E30:  MOVLW  0B
3E32:  MOVWF  1A
3E34:  MOVLW  0C
3E36:  MOVWF  x1E
3E38:  MOVLB  0
3E3A:  CALL   0BE2
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
3E3E:  MOVF   1A,W
3E40:  SUBLW  0B
3E42:  BC    3E66
3E44:  MOVF   1A,W
3E46:  SUBLW  0D
3E48:  BNC   3E66
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3E4A:  MOVLW  01
3E4C:  SUBWF  1A,W
3E4E:  MOVLB  1
3E50:  MOVWF  x09
3E52:  MOVWF  x1F
3E54:  MOVLW  04
3E56:  MOVWF  x20
3E58:  MOVLB  0
3E5A:  CALL   0B70
....................             lcd_putc(t[1]); 
3E5E:  MOVFF  42,11E
3E62:  CALL   0BE2
3E66:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3E68:  MOVF   17,W
3E6A:  SUBLW  33
3E6C:  BTFSS  FD8.2
3E6E:  BRA    41E6
....................    lcd_gotoxy(1,1); 
3E70:  MOVLW  01
3E72:  MOVWF  x1F
3E74:  MOVWF  x20
3E76:  MOVLB  0
3E78:  CALL   0B70
....................    printf(lcd_putc,"     Ingrese        "); 
3E7C:  MOVLW  DA
3E7E:  MOVWF  FF6
3E80:  MOVLW  05
3E82:  MOVWF  FF7
3E84:  CALL   106E
....................    lcd_gotoxy(1,2); 
3E88:  MOVLW  01
3E8A:  MOVLB  1
3E8C:  MOVWF  x1F
3E8E:  MOVLW  02
3E90:  MOVWF  x20
3E92:  MOVLB  0
3E94:  CALL   0B70
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
3E98:  MOVLW  F0
3E9A:  MOVWF  FF6
3E9C:  MOVLW  05
3E9E:  MOVWF  FF7
3EA0:  CALL   106E
....................    lcd_gotoxy(1,3); 
3EA4:  MOVLW  01
3EA6:  MOVLB  1
3EA8:  MOVWF  x1F
3EAA:  MOVLW  03
3EAC:  MOVWF  x20
3EAE:  MOVLB  0
3EB0:  CALL   0B70
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3EB4:  MOVLW  06
3EB6:  MOVWF  FF6
3EB8:  MOVLW  06
3EBA:  MOVWF  FF7
3EBC:  MOVLW  0A
3EBE:  MOVLB  1
3EC0:  MOVWF  x11
3EC2:  MOVLB  0
3EC4:  CALL   108E
3EC8:  MOVFF  44,109
3ECC:  MOVLW  1F
3ECE:  MOVLB  1
3ED0:  MOVWF  x0A
3ED2:  MOVLB  0
3ED4:  CALL   10E2
3ED8:  MOVFF  45,109
3EDC:  MOVLW  1F
3EDE:  MOVLB  1
3EE0:  MOVWF  x0A
3EE2:  MOVLB  0
3EE4:  CALL   10E2
3EE8:  MOVFF  46,109
3EEC:  MOVLW  1F
3EEE:  MOVLB  1
3EF0:  MOVWF  x0A
3EF2:  MOVLB  0
3EF4:  CALL   10E2
3EF8:  MOVFF  47,109
3EFC:  MOVLW  1F
3EFE:  MOVLB  1
3F00:  MOVWF  x0A
3F02:  MOVLB  0
3F04:  CALL   10E2
3F08:  MOVLW  20
3F0A:  MOVLB  1
3F0C:  MOVWF  x1E
3F0E:  MOVLB  0
3F10:  CALL   0BE2
3F14:  MOVLW  20
3F16:  MOVLB  1
3F18:  MOVWF  x1E
3F1A:  MOVLB  0
3F1C:  CALL   0BE2
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
3F20:  BSF    F93.3
3F22:  BTFSS  F81.3
3F24:  BRA    3F4C
....................       {  if(Flanco == 0)  
3F26:  BTFSC  3E.4
3F28:  BRA    3F4A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
3F2A:  MOVLW  0B
3F2C:  SUBWF  1A,W
3F2E:  CLRF   03
3F30:  ADDLW  44
3F32:  MOVWF  FE9
3F34:  MOVLW  00
3F36:  ADDWFC 03,W
3F38:  MOVWF  FEA
3F3A:  INCF   FEF,F
3F3C:  BSF    3E.4
3F3E:  MOVLW  1E
3F40:  MOVLB  1
3F42:  MOVWF  x24
3F44:  MOVLB  0
3F46:  CALL   0A5E
....................          else 
3F4A:  BRA    3F4E
....................             {Flanco = 0;} 
3F4C:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3F4E:  BSF    F93.2
3F50:  BTFSS  F81.2
3F52:  BRA    3F7A
....................       {  if(Flanco2 == 0)  
3F54:  BTFSC  3E.6
3F56:  BRA    3F78
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
3F58:  MOVLW  0B
3F5A:  SUBWF  1A,W
3F5C:  CLRF   03
3F5E:  ADDLW  44
3F60:  MOVWF  FE9
3F62:  MOVLW  00
3F64:  ADDWFC 03,W
3F66:  MOVWF  FEA
3F68:  DECF   FEF,F
3F6A:  BSF    3E.6
3F6C:  MOVLW  1E
3F6E:  MOVLB  1
3F70:  MOVWF  x24
3F72:  MOVLB  0
3F74:  CALL   0A5E
....................          else 
3F78:  BRA    3F7C
....................             {Flanco2 = 0;} 
3F7A:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
3F7C:  BSF    F93.0
3F7E:  BTFSS  F81.0
3F80:  BRA    3FA4
....................       {  if(Flanco1 == 0)  
3F82:  BTFSC  3E.5
3F84:  BRA    3FA2
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
3F86:  BSF    3E.5
3F88:  INCF   1A,F
3F8A:  MOVLW  1E
3F8C:  MOVLB  1
3F8E:  MOVWF  x24
3F90:  MOVLB  0
3F92:  CALL   0A5E
3F96:  MOVLW  0C
3F98:  MOVLB  1
3F9A:  MOVWF  x1E
3F9C:  MOVLB  0
3F9E:  CALL   0BE2
....................          else 
3FA2:  BRA    3FA6
....................             {Flanco1 = 0;}    
3FA4:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3FA6:  BSF    F93.1
3FA8:  BTFSS  F81.1
3FAA:  BRA    3FCE
....................       {  if(Flanco3 == 0)  
3FAC:  BTFSC  3E.7
3FAE:  BRA    3FCC
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3FB0:  BSF    3E.7
3FB2:  DECF   1A,F
3FB4:  MOVLW  1E
3FB6:  MOVLB  1
3FB8:  MOVWF  x24
3FBA:  MOVLB  0
3FBC:  CALL   0A5E
3FC0:  MOVLW  0C
3FC2:  MOVLB  1
3FC4:  MOVWF  x1E
3FC6:  MOVLB  0
3FC8:  CALL   0BE2
....................          else 
3FCC:  BRA    3FD0
....................             {Flanco3 = 0;}     
3FCE:  BCF    3E.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3FD0:  MOVLW  0B
3FD2:  SUBWF  1A,W
3FD4:  CLRF   03
3FD6:  ADDLW  44
3FD8:  MOVWF  FE9
3FDA:  MOVLW  00
3FDC:  ADDWFC 03,W
3FDE:  MOVWF  FEA
3FE0:  BTFSC  FEF.7
3FE2:  BRA    3FE6
3FE4:  BRA    3FFA
....................        {clave[unidad-11]=9;} 
3FE6:  MOVLW  0B
3FE8:  SUBWF  1A,W
3FEA:  CLRF   03
3FEC:  ADDLW  44
3FEE:  MOVWF  FE9
3FF0:  MOVLW  00
3FF2:  ADDWFC 03,W
3FF4:  MOVWF  FEA
3FF6:  MOVLW  09
3FF8:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
3FFA:  MOVLW  0B
3FFC:  SUBWF  1A,W
3FFE:  CLRF   03
4000:  ADDLW  44
4002:  MOVWF  FE9
4004:  MOVLW  00
4006:  ADDWFC 03,W
4008:  MOVWF  FEA
400A:  BTFSC  FEF.7
400C:  BRA    4026
400E:  MOVF   FEF,W
4010:  SUBLW  09
4012:  BC    4026
....................        {clave[unidad-11]=0;} 
4014:  MOVLW  0B
4016:  SUBWF  1A,W
4018:  CLRF   03
401A:  ADDLW  44
401C:  MOVWF  FE9
401E:  MOVLW  00
4020:  ADDWFC 03,W
4022:  MOVWF  FEA
4024:  CLRF   FEF
....................        if(unidad<11) 
4026:  MOVF   1A,W
4028:  SUBLW  0A
402A:  BNC   4034
....................        {Menu=5;unidad=11;} 
402C:  MOVLW  05
402E:  MOVWF  17
4030:  MOVLW  0B
4032:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
4034:  MOVFF  1A,11F
4038:  MOVLW  04
403A:  MOVLB  1
403C:  MOVWF  x20
403E:  MOVLB  0
4040:  CALL   0B70
....................        lcd_putc(t[2]); 
4044:  MOVFF  43,11E
4048:  CALL   0BE2
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
404C:  MOVF   1A,W
404E:  SUBLW  0E
4050:  BTFSC  FD8.0
4052:  BRA    41BC
....................        { 
....................             lcd_gotoxy(1,1); 
4054:  MOVLW  01
4056:  MOVLB  1
4058:  MOVWF  x1F
405A:  MOVWF  x20
405C:  MOVLB  0
405E:  CALL   0B70
....................             printf(lcd_putc,"                    "); 
4062:  MOVLW  1C
4064:  MOVWF  FF6
4066:  MOVLW  06
4068:  MOVWF  FF7
406A:  CALL   106E
....................             lcd_gotoxy(1,2); 
406E:  MOVLW  01
4070:  MOVLB  1
4072:  MOVWF  x1F
4074:  MOVLW  02
4076:  MOVWF  x20
4078:  MOVLB  0
407A:  CALL   0B70
....................             printf(lcd_putc,"     Contraseña     "); 
407E:  MOVLW  32
4080:  MOVWF  FF6
4082:  MOVLW  06
4084:  MOVWF  FF7
4086:  CALL   106E
....................             lcd_gotoxy(1,3); 
408A:  MOVLW  01
408C:  MOVLB  1
408E:  MOVWF  x1F
4090:  MOVLW  03
4092:  MOVWF  x20
4094:  MOVLB  0
4096:  CALL   0B70
....................             printf(lcd_putc,"     Almacenada     "); 
409A:  MOVLW  48
409C:  MOVWF  FF6
409E:  MOVLW  06
40A0:  MOVWF  FF7
40A2:  CALL   106E
....................             lcd_gotoxy(1,4); 
40A6:  MOVLW  01
40A8:  MOVLB  1
40AA:  MOVWF  x1F
40AC:  MOVLW  04
40AE:  MOVWF  x20
40B0:  MOVLB  0
40B2:  CALL   0B70
....................             printf(lcd_putc,"                    "); 
40B6:  MOVLW  5E
40B8:  MOVWF  FF6
40BA:  MOVLW  06
40BC:  MOVWF  FF7
40BE:  CALL   106E
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
40C2:  CLRF   FA9
40C4:  MOVFF  44,FA8
40C8:  BCF    FA6.6
40CA:  BCF    FA6.7
40CC:  BSF    FA6.2
40CE:  MOVF   FF2,W
40D0:  MOVWF  00
40D2:  BCF    FF2.7
40D4:  MOVLB  F
40D6:  MOVLW  55
40D8:  MOVWF  FA7
40DA:  MOVLW  AA
40DC:  MOVWF  FA7
40DE:  BSF    FA6.1
40E0:  BTFSC  FA6.1
40E2:  BRA    40E0
40E4:  BCF    FA6.2
40E6:  MOVF   00,W
40E8:  IORWF  FF2,F
40EA:  MOVLW  14
40EC:  MOVLB  1
40EE:  MOVWF  x24
40F0:  MOVLB  0
40F2:  CALL   0A5E
40F6:  MOVLW  01
40F8:  MOVWF  FA9
40FA:  MOVFF  45,FA8
40FE:  BCF    FA6.6
4100:  BCF    FA6.7
4102:  BSF    FA6.2
4104:  MOVF   FF2,W
4106:  MOVWF  00
4108:  BCF    FF2.7
410A:  MOVLB  F
410C:  MOVLW  55
410E:  MOVWF  FA7
4110:  MOVLW  AA
4112:  MOVWF  FA7
4114:  BSF    FA6.1
4116:  BTFSC  FA6.1
4118:  BRA    4116
411A:  BCF    FA6.2
411C:  MOVF   00,W
411E:  IORWF  FF2,F
4120:  MOVLW  14
4122:  MOVLB  1
4124:  MOVWF  x24
4126:  MOVLB  0
4128:  CALL   0A5E
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
412C:  MOVLW  02
412E:  MOVWF  FA9
4130:  MOVFF  46,FA8
4134:  BCF    FA6.6
4136:  BCF    FA6.7
4138:  BSF    FA6.2
413A:  MOVF   FF2,W
413C:  MOVWF  00
413E:  BCF    FF2.7
4140:  MOVLB  F
4142:  MOVLW  55
4144:  MOVWF  FA7
4146:  MOVLW  AA
4148:  MOVWF  FA7
414A:  BSF    FA6.1
414C:  BTFSC  FA6.1
414E:  BRA    414C
4150:  BCF    FA6.2
4152:  MOVF   00,W
4154:  IORWF  FF2,F
4156:  MOVLW  14
4158:  MOVLB  1
415A:  MOVWF  x24
415C:  MOVLB  0
415E:  CALL   0A5E
4162:  MOVLW  03
4164:  MOVWF  FA9
4166:  MOVFF  47,FA8
416A:  BCF    FA6.6
416C:  BCF    FA6.7
416E:  BSF    FA6.2
4170:  MOVF   FF2,W
4172:  MOVWF  00
4174:  BCF    FF2.7
4176:  MOVLB  F
4178:  MOVLW  55
417A:  MOVWF  FA7
417C:  MOVLW  AA
417E:  MOVWF  FA7
4180:  BSF    FA6.1
4182:  BTFSC  FA6.1
4184:  BRA    4182
4186:  BCF    FA6.2
4188:  MOVF   00,W
418A:  IORWF  FF2,F
418C:  MOVLW  14
418E:  MOVLB  1
4190:  MOVWF  x24
4192:  MOVLB  0
4194:  CALL   0A5E
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
4198:  MOVLW  02
419A:  MOVLB  1
419C:  MOVWF  x09
419E:  MOVLW  FA
41A0:  MOVWF  x24
41A2:  MOVLB  0
41A4:  CALL   0A5E
41A8:  MOVLB  1
41AA:  DECFSZ x09,F
41AC:  BRA    419E
41AE:  MOVLW  01
41B0:  MOVWF  17
41B2:  CLRF   40
41B4:  MOVLW  02
41B6:  MOVWF  1B
41B8:  MOVWF  1D
41BA:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
41BC:  MOVF   1A,W
41BE:  SUBLW  0B
41C0:  BC    41E4
41C2:  MOVF   1A,W
41C4:  SUBLW  0D
41C6:  BNC   41E4
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
41C8:  MOVLW  01
41CA:  SUBWF  1A,W
41CC:  MOVLB  1
41CE:  MOVWF  x09
41D0:  MOVWF  x1F
41D2:  MOVLW  04
41D4:  MOVWF  x20
41D6:  MOVLB  0
41D8:  CALL   0B70
....................             lcd_putc(t[1]); 
41DC:  MOVFF  42,11E
41E0:  CALL   0BE2
41E4:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
41E6:  MOVF   17,W
41E8:  SUBLW  06
41EA:  BTFSS  FD8.2
41EC:  BRA    435C
....................    { 
....................    lcd_gotoxy(1,2); 
41EE:  MOVLW  01
41F0:  MOVWF  x1F
41F2:  MOVLW  02
41F4:  MOVWF  x20
41F6:  MOVLB  0
41F8:  CALL   0B70
....................    printf(lcd_putc,"     Media Movil    "); 
41FC:  MOVLW  74
41FE:  MOVWF  FF6
4200:  MOVLW  06
4202:  MOVWF  FF7
4204:  CALL   106E
....................    lcd_gotoxy(1,3); 
4208:  MOVLW  01
420A:  MOVLB  1
420C:  MOVWF  x1F
420E:  MOVLW  03
4210:  MOVWF  x20
4212:  MOVLB  0
4214:  CALL   0B70
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
4218:  MOVLW  8A
421A:  MOVWF  FF6
421C:  MOVLW  06
421E:  MOVWF  FF7
4220:  MOVLW  07
4222:  MOVLB  1
4224:  MOVWF  x11
4226:  MOVLB  0
4228:  CALL   108E
422C:  MOVFF  2D,109
4230:  MOVLW  01
4232:  MOVLB  1
4234:  MOVWF  x0A
4236:  MOVLB  0
4238:  CALL   10E2
423C:  MOVLW  20
423E:  MOVLB  1
4240:  MOVWF  x1E
4242:  MOVLB  0
4244:  CALL   0BE2
4248:  MOVLW  20
424A:  MOVLB  1
424C:  MOVWF  x1E
424E:  MOVLB  0
4250:  CALL   0BE2
4254:  MOVLW  20
4256:  MOVLB  1
4258:  MOVWF  x1E
425A:  MOVLB  0
425C:  CALL   0BE2
....................     
....................    if(MediaMovil>12) 
4260:  MOVF   2D,W
4262:  SUBLW  0C
4264:  BC    426A
....................    {MediaMovil=12;} 
4266:  MOVLW  0C
4268:  MOVWF  2D
....................     
....................    if(MediaMovil<1) 
426A:  MOVF   2D,F
426C:  BNZ   4272
....................    {MediaMovil=1;} 
426E:  MOVLW  01
4270:  MOVWF  2D
....................     
....................       if(UP)//Si oprime hacia arriba 
4272:  BSF    F93.3
4274:  BTFSS  F81.3
4276:  BRA    4290
....................       {  if(Flanco == 0)  
4278:  BTFSC  3E.4
427A:  BRA    428E
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
427C:  MOVLW  01
427E:  ADDWF  2D,F
4280:  BSF    3E.4
4282:  MOVLW  1E
4284:  MOVLB  1
4286:  MOVWF  x24
4288:  MOVLB  0
428A:  CALL   0A5E
....................          else 
428E:  BRA    4292
....................             {Flanco = 0;} 
4290:  BCF    3E.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4292:  BSF    F93.2
4294:  BTFSS  F81.2
4296:  BRA    42B0
....................       {  if(Flanco2 == 0)  
4298:  BTFSC  3E.6
429A:  BRA    42AE
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
429C:  MOVLW  01
429E:  SUBWF  2D,F
42A0:  BSF    3E.6
42A2:  MOVLW  1E
42A4:  MOVLB  1
42A6:  MOVWF  x24
42A8:  MOVLB  0
42AA:  CALL   0A5E
....................          else 
42AE:  BRA    42B2
....................             {Flanco2 = 0;} 
42B0:  BCF    3E.6
....................     
....................       if(RIGHT)// Si oprime derecha 
42B2:  BSF    F93.0
42B4:  BTFSS  F81.0
42B6:  BRA    431A
....................       {  if(Flanco1 == 0)  
42B8:  BTFSC  3E.5
42BA:  BRA    4318
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
42BC:  MOVLW  01
42BE:  MOVWF  17
42C0:  CLRF   40
42C2:  MOVLW  02
42C4:  MOVWF  1B
42C6:  MOVWF  1D
42C8:  MOVLW  0B
42CA:  MOVWF  1A
42CC:  MOVLW  02
42CE:  MOVLB  1
42D0:  MOVWF  x09
42D2:  MOVLW  FA
42D4:  MOVWF  x24
42D6:  MOVLB  0
42D8:  CALL   0A5E
42DC:  MOVLB  1
42DE:  DECFSZ x09,F
42E0:  BRA    42D2
42E2:  MOVLW  0C
42E4:  MOVWF  x1E
42E6:  MOVLB  0
42E8:  CALL   0BE2
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
42EC:  MOVLW  2A
42EE:  MOVWF  FA9
42F0:  MOVFF  2D,FA8
42F4:  BCF    FA6.6
42F6:  BCF    FA6.7
42F8:  BSF    FA6.2
42FA:  MOVF   FF2,W
42FC:  MOVWF  00
42FE:  BCF    FF2.7
4300:  MOVLB  F
4302:  MOVLW  55
4304:  MOVWF  FA7
4306:  MOVLW  AA
4308:  MOVWF  FA7
430A:  BSF    FA6.1
430C:  BTFSC  FA6.1
430E:  BRA    430C
4310:  BCF    FA6.2
4312:  MOVF   00,W
4314:  IORWF  FF2,F
4316:  MOVLB  0
....................             }} 
....................          else 
4318:  BRA    431C
....................             {Flanco1 = 0;}    
431A:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
431C:  BSF    F93.1
431E:  BTFSS  F81.1
4320:  BRA    4358
....................       {  if(Flanco3 == 0)  
4322:  BTFSC  3E.7
4324:  BRA    4356
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4326:  MOVLW  01
4328:  MOVWF  17
432A:  CLRF   40
432C:  MOVLW  02
432E:  MOVWF  1B
4330:  MOVWF  1D
4332:  MOVLW  0B
4334:  MOVWF  1A
4336:  MOVLW  02
4338:  MOVLB  1
433A:  MOVWF  x09
433C:  MOVLW  FA
433E:  MOVWF  x24
4340:  MOVLB  0
4342:  CALL   0A5E
4346:  MOVLB  1
4348:  DECFSZ x09,F
434A:  BRA    433C
434C:  MOVLW  0C
434E:  MOVWF  x1E
4350:  MOVLB  0
4352:  CALL   0BE2
....................          else 
4356:  BRA    435A
....................             {Flanco3 = 0;}   
4358:  BCF    3E.7
435A:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
435C:  MOVF   17,W
435E:  SUBLW  07
4360:  BTFSS  FD8.2
4362:  BRA    4752
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
4364:  MOVLW  01
4366:  MOVWF  x1F
4368:  MOVWF  x20
436A:  MOVLB  0
436C:  CALL   0B70
....................    printf(lcd_putc,"  Zero Point Config "); 
4370:  MOVLW  9A
4372:  MOVWF  FF6
4374:  MOVLW  06
4376:  MOVWF  FF7
4378:  CALL   106E
....................    lcd_gotoxy(1,2); 
437C:  MOVLW  01
437E:  MOVLB  1
4380:  MOVWF  x1F
4382:  MOVLW  02
4384:  MOVWF  x20
4386:  MOVLB  0
4388:  CALL   0B70
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
438C:  MOVLW  B0
438E:  MOVWF  FF6
4390:  MOVLW  06
4392:  MOVWF  FF7
4394:  MOVLW  08
4396:  MOVLB  1
4398:  MOVWF  x11
439A:  MOVLB  0
439C:  CALL   108E
43A0:  MOVLW  01
43A2:  MOVWF  FE9
43A4:  MOVFF  98,114
43A8:  MOVFF  97,113
43AC:  MOVFF  96,112
43B0:  MOVFF  95,111
43B4:  MOVLB  1
43B6:  MOVWF  x15
43B8:  MOVLB  0
43BA:  CALL   1546
43BE:  MOVLW  BD
43C0:  MOVWF  FF6
43C2:  MOVLW  06
43C4:  MOVWF  FF7
43C6:  MOVLW  08
43C8:  MOVLB  1
43CA:  MOVWF  x11
43CC:  MOVLB  0
43CE:  CALL   108E
....................    lcd_gotoxy(1,3); 
43D2:  MOVLW  01
43D4:  MOVLB  1
43D6:  MOVWF  x1F
43D8:  MOVLW  03
43DA:  MOVWF  x20
43DC:  MOVLB  0
43DE:  CALL   0B70
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
43E2:  MOVLB  1
43E4:  CLRF   x0D
43E6:  MOVLB  0
43E8:  CALL   17AE
43EC:  MOVFF  00,109
43F0:  MOVFF  01,10A
43F4:  MOVFF  02,10B
43F8:  MOVFF  03,10C
43FC:  MOVLW  5A
43FE:  MOVLB  1
4400:  MOVWF  x1E
4402:  MOVLB  0
4404:  CALL   0BE2
4408:  MOVLW  46
440A:  MOVLB  1
440C:  MOVWF  x1E
440E:  MOVLB  0
4410:  CALL   0BE2
4414:  MOVLW  3D
4416:  MOVLB  1
4418:  MOVWF  x1E
441A:  MOVLB  0
441C:  CALL   0BE2
4420:  MOVLW  01
4422:  MOVWF  FE9
4424:  MOVFF  57,114
4428:  MOVFF  56,113
442C:  MOVFF  55,112
4430:  MOVFF  54,111
4434:  MOVLB  1
4436:  CLRF   x15
4438:  MOVLB  0
443A:  CALL   1546
443E:  MOVLW  CE
4440:  MOVWF  FF6
4442:  MOVLW  06
4444:  MOVWF  FF7
4446:  MOVLW  05
4448:  MOVLB  1
444A:  MOVWF  x11
444C:  MOVLB  0
444E:  CALL   108E
4452:  MOVLW  01
4454:  MOVWF  FE9
4456:  MOVFF  10C,114
445A:  MOVFF  10B,113
445E:  MOVFF  10A,112
4462:  MOVFF  109,111
4466:  MOVLB  1
4468:  CLRF   x15
446A:  MOVLB  0
446C:  CALL   1546
....................    lcd_gotoxy(1,4); 
4470:  MOVLW  01
4472:  MOVLB  1
4474:  MOVWF  x1F
4476:  MOVLW  04
4478:  MOVWF  x20
447A:  MOVLB  0
447C:  CALL   0B70
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
4480:  MOVLW  DA
4482:  MOVWF  FF6
4484:  MOVLW  06
4486:  MOVWF  FF7
4488:  MOVLW  0C
448A:  MOVLB  1
448C:  MOVWF  x11
448E:  MOVLB  0
4490:  CALL   108E
4494:  MOVLW  01
4496:  MOVWF  FE9
4498:  MOVFF  C8,114
449C:  MOVFF  C7,113
44A0:  MOVFF  C6,112
44A4:  MOVFF  C5,111
44A8:  MOVLB  1
44AA:  CLRF   x15
44AC:  MOVLB  0
44AE:  CALL   1546
....................      
....................       if(RIGHT)// Si oprime derecha 
44B2:  BSF    F93.0
44B4:  BTFSS  F81.0
44B6:  BRA    4710
....................       {  if(Flanco1 == 0)  
44B8:  BTFSC  3E.5
44BA:  BRA    470E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
44BC:  MOVLW  01
44BE:  MOVWF  17
44C0:  CLRF   40
44C2:  MOVLW  02
44C4:  MOVWF  1B
44C6:  MOVWF  1D
44C8:  MOVLW  0B
44CA:  MOVWF  1A
44CC:  MOVLW  02
44CE:  MOVLB  1
44D0:  MOVWF  x09
44D2:  MOVLW  FA
44D4:  MOVWF  x24
44D6:  MOVLB  0
44D8:  CALL   0A5E
44DC:  MOVLB  1
44DE:  DECFSZ x09,F
44E0:  BRA    44D2
44E2:  MOVLW  0C
44E4:  MOVWF  x1E
44E6:  MOVLB  0
44E8:  CALL   0BE2
....................             Diferencia=zero_fabrica-sensores(0); 
44EC:  MOVLB  1
44EE:  CLRF   x0D
44F0:  MOVLB  0
44F2:  CALL   17AE
44F6:  MOVFF  FEA,10A
44FA:  MOVFF  FE9,109
44FE:  BSF    FD8.1
4500:  MOVFF  57,12A
4504:  MOVFF  56,129
4508:  MOVFF  55,128
450C:  MOVFF  54,127
4510:  MOVFF  03,12E
4514:  MOVFF  02,12D
4518:  MOVFF  01,12C
451C:  MOVFF  00,12B
4520:  CALL   0DE2
4524:  MOVFF  10A,FEA
4528:  MOVFF  109,FE9
452C:  MOVFF  03,C8
4530:  MOVFF  02,C7
4534:  MOVFF  01,C6
4538:  MOVFF  00,C5
....................              
....................             if(Diferencia>=0) 
453C:  MOVLB  1
453E:  CLRF   x26
4540:  CLRF   x25
4542:  CLRF   x24
4544:  CLRF   x23
4546:  MOVFF  C8,12A
454A:  MOVFF  C7,129
454E:  MOVFF  C6,128
4552:  MOVFF  C5,127
4556:  MOVLB  0
4558:  CALL   16F8
455C:  BC    4560
455E:  BNZ   458E
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
4560:  MOVLW  0A
4562:  MOVWF  2E
4564:  MOVLW  32
4566:  MOVWF  FA9
4568:  MOVFF  2E,FA8
456C:  BCF    FA6.6
456E:  BCF    FA6.7
4570:  BSF    FA6.2
4572:  MOVF   FF2,W
4574:  MOVWF  00
4576:  BCF    FF2.7
4578:  MOVLB  F
457A:  MOVLW  55
457C:  MOVWF  FA7
457E:  MOVLW  AA
4580:  MOVWF  FA7
4582:  BSF    FA6.1
4584:  BTFSC  FA6.1
4586:  BRA    4584
4588:  BCF    FA6.2
458A:  MOVF   00,W
458C:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
458E:  MOVFF  C8,126
4592:  MOVFF  C7,125
4596:  MOVFF  C6,124
459A:  MOVFF  C5,123
459E:  MOVLB  1
45A0:  CLRF   x2A
45A2:  CLRF   x29
45A4:  CLRF   x28
45A6:  CLRF   x27
45A8:  MOVLB  0
45AA:  CALL   16F8
45AE:  BNC   45E0
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
45B0:  MOVLW  14
45B2:  MOVWF  2E
45B4:  MOVLW  32
45B6:  MOVWF  FA9
45B8:  MOVFF  2E,FA8
45BC:  BCF    FA6.6
45BE:  BCF    FA6.7
45C0:  BSF    FA6.2
45C2:  MOVF   FF2,W
45C4:  MOVWF  00
45C6:  BCF    FF2.7
45C8:  MOVLB  F
45CA:  MOVLW  55
45CC:  MOVWF  FA7
45CE:  MOVLW  AA
45D0:  MOVWF  FA7
45D2:  BSF    FA6.1
45D4:  BTFSC  FA6.1
45D6:  BRA    45D4
45D8:  BCF    FA6.2
45DA:  MOVF   00,W
45DC:  IORWF  FF2,F
45DE:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
45E0:  MOVFF  C5,00
45E4:  MOVFF  C6,01
45E8:  MOVFF  C7,02
45EC:  MOVFF  C8,03
45F0:  BCF    01.7
45F2:  MOVFF  C8,C8
45F6:  MOVFF  C7,C7
45FA:  MOVFF  01,C6
45FE:  MOVFF  C5,C5
....................             Temporal1=Diferencia; 
4602:  MOVFF  C8,C0
4606:  MOVFF  C7,BF
460A:  MOVFF  C6,BE
460E:  MOVFF  C5,BD
....................             Entero1=(int)Temporal1; 
4612:  MOVFF  C0,10C
4616:  MOVFF  BF,10B
461A:  MOVFF  BE,10A
461E:  MOVFF  BD,109
4622:  CALL   1772
4626:  MOVFF  01,27
....................             Temporal1=Temporal1-Entero1; 
462A:  MOVLB  1
462C:  CLRF   x13
462E:  MOVFF  27,112
4632:  MOVLB  0
4634:  CALL   0C4E
4638:  BSF    FD8.1
463A:  MOVFF  C0,12A
463E:  MOVFF  BF,129
4642:  MOVFF  BE,128
4646:  MOVFF  BD,127
464A:  MOVFF  03,12E
464E:  MOVFF  02,12D
4652:  MOVFF  01,12C
4656:  MOVFF  00,12B
465A:  CALL   0DE2
465E:  MOVFF  03,C0
4662:  MOVFF  02,BF
4666:  MOVFF  01,BE
466A:  MOVFF  00,BD
....................             Temporal12=Temporal1*100.0; 
466E:  MOVFF  C0,126
4672:  MOVFF  BF,125
4676:  MOVFF  BE,124
467A:  MOVFF  BD,123
467E:  MOVLB  1
4680:  CLRF   x2A
4682:  CLRF   x29
4684:  MOVLW  48
4686:  MOVWF  x28
4688:  MOVLW  85
468A:  MOVWF  x27
468C:  MOVLB  0
468E:  CALL   138C
4692:  MOVFF  03,C4
4696:  MOVFF  02,C3
469A:  MOVFF  01,C2
469E:  MOVFF  00,C1
....................             Decimal12=(int8)Temporal12; 
46A2:  MOVFF  C4,10C
46A6:  MOVFF  C3,10B
46AA:  MOVFF  C2,10A
46AE:  MOVFF  C1,109
46B2:  CALL   1772
46B6:  MOVFF  01,28
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
46BA:  MOVLW  3C
46BC:  MOVWF  FA9
46BE:  MOVFF  27,FA8
46C2:  BCF    FA6.6
46C4:  BCF    FA6.7
46C6:  BSF    FA6.2
46C8:  MOVF   FF2,W
46CA:  MOVWF  00
46CC:  BCF    FF2.7
46CE:  MOVLB  F
46D0:  MOVLW  55
46D2:  MOVWF  FA7
46D4:  MOVLW  AA
46D6:  MOVWF  FA7
46D8:  BSF    FA6.1
46DA:  BTFSC  FA6.1
46DC:  BRA    46DA
46DE:  BCF    FA6.2
46E0:  MOVF   00,W
46E2:  IORWF  FF2,F
46E4:  MOVLW  3D
46E6:  MOVWF  FA9
46E8:  MOVFF  28,FA8
46EC:  BCF    FA6.6
46EE:  BCF    FA6.7
46F0:  BSF    FA6.2
46F2:  MOVF   FF2,W
46F4:  MOVWF  00
46F6:  BCF    FF2.7
46F8:  MOVLW  55
46FA:  MOVWF  FA7
46FC:  MOVLW  AA
46FE:  MOVWF  FA7
4700:  BSF    FA6.1
4702:  BTFSC  FA6.1
4704:  BRA    4702
4706:  BCF    FA6.2
4708:  MOVF   00,W
470A:  IORWF  FF2,F
470C:  MOVLB  0
....................             }} 
....................          else 
470E:  BRA    4712
....................             {Flanco1 = 0;}    
4710:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4712:  BSF    F93.1
4714:  BTFSS  F81.1
4716:  BRA    474E
....................       {  if(Flanco3 == 0)  
4718:  BTFSC  3E.7
471A:  BRA    474C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
471C:  MOVLW  01
471E:  MOVWF  17
4720:  CLRF   40
4722:  MOVLW  02
4724:  MOVWF  1B
4726:  MOVWF  1D
4728:  MOVLW  0B
472A:  MOVWF  1A
472C:  MOVLW  02
472E:  MOVLB  1
4730:  MOVWF  x09
4732:  MOVLW  FA
4734:  MOVWF  x24
4736:  MOVLB  0
4738:  CALL   0A5E
473C:  MOVLB  1
473E:  DECFSZ x09,F
4740:  BRA    4732
4742:  MOVLW  0C
4744:  MOVWF  x1E
4746:  MOVLB  0
4748:  CALL   0BE2
....................          else 
474C:  BRA    4750
....................             {Flanco3 = 0;}   
474E:  BCF    3E.7
4750:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
4752:  MOVF   17,W
4754:  SUBLW  08
4756:  BTFSS  FD8.2
4758:  BRA    4CAA
....................    { 
....................    lcd_gotoxy(1,1); 
475A:  MOVLW  01
475C:  MOVWF  x1F
475E:  MOVWF  x20
4760:  MOVLB  0
4762:  CALL   0B70
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4766:  MOVLB  1
4768:  CLRF   x0D
476A:  MOVLB  0
476C:  CALL   17AE
4770:  MOVFF  00,109
4774:  MOVFF  01,10A
4778:  MOVFF  02,10B
477C:  MOVFF  03,10C
4780:  MOVLW  EC
4782:  MOVWF  FF6
4784:  MOVLW  06
4786:  MOVWF  FF7
4788:  MOVLW  0A
478A:  MOVLB  1
478C:  MOVWF  x11
478E:  MOVLB  0
4790:  CALL   108E
4794:  MOVLW  01
4796:  MOVWF  FE9
4798:  MOVFF  10C,114
479C:  MOVFF  10B,113
47A0:  MOVFF  10A,112
47A4:  MOVFF  109,111
47A8:  MOVLB  1
47AA:  CLRF   x15
47AC:  MOVLB  0
47AE:  CALL   1546
47B2:  MOVLW  20
47B4:  MOVLB  1
47B6:  MOVWF  x1E
47B8:  MOVLB  0
47BA:  CALL   0BE2
47BE:  MOVLW  20
47C0:  MOVLB  1
47C2:  MOVWF  x1E
47C4:  MOVLB  0
47C6:  CALL   0BE2
....................    lcd_gotoxy(1,2); 
47CA:  MOVLW  01
47CC:  MOVLB  1
47CE:  MOVWF  x1F
47D0:  MOVLW  02
47D2:  MOVWF  x20
47D4:  MOVLB  0
47D6:  CALL   0B70
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
47DA:  MOVLB  1
47DC:  CLRF   x13
47DE:  MOVFF  2C,112
47E2:  MOVLB  0
47E4:  CALL   0C4E
47E8:  MOVFF  00,109
47EC:  MOVFF  01,10A
47F0:  MOVFF  02,10B
47F4:  MOVFF  03,10C
47F8:  MOVFF  03,12A
47FC:  MOVFF  02,129
4800:  MOVFF  01,128
4804:  MOVFF  00,127
4808:  MOVLB  1
480A:  CLRF   x2E
480C:  CLRF   x2D
480E:  MOVLW  7F
4810:  MOVWF  x2C
4812:  MOVLW  86
4814:  MOVWF  x2B
4816:  MOVLB  0
4818:  CALL   0C84
481C:  MOVLB  1
481E:  CLRF   x26
4820:  CLRF   x25
4822:  MOVLW  48
4824:  MOVWF  x24
4826:  MOVLW  85
4828:  MOVWF  x23
482A:  MOVFF  03,12A
482E:  MOVFF  02,129
4832:  MOVFF  01,128
4836:  MOVFF  00,127
483A:  MOVLB  0
483C:  CALL   138C
4840:  MOVFF  00,109
4844:  MOVFF  01,10A
4848:  MOVFF  02,10B
484C:  MOVFF  03,10C
4850:  MOVLW  01
4852:  MOVLB  1
4854:  MOVWF  x0D
4856:  MOVLB  0
4858:  CALL   17AE
485C:  MOVFF  00,10D
4860:  MOVFF  01,10E
4864:  MOVFF  02,10F
4868:  MOVFF  03,110
486C:  MOVLW  FE
486E:  MOVWF  FF6
4870:  MOVLW  06
4872:  MOVWF  FF7
4874:  MOVLW  05
4876:  MOVLB  1
4878:  MOVWF  x11
487A:  MOVLB  0
487C:  CALL   108E
4880:  MOVLW  01
4882:  MOVWF  FE9
4884:  MOVFF  10C,114
4888:  MOVFF  10B,113
488C:  MOVFF  10A,112
4890:  MOVFF  109,111
4894:  MOVLB  1
4896:  CLRF   x15
4898:  MOVLB  0
489A:  CALL   1546
489E:  MOVLW  25
48A0:  MOVLB  1
48A2:  MOVWF  x1E
48A4:  MOVLB  0
48A6:  CALL   0BE2
48AA:  MOVLW  0A
48AC:  MOVWF  FF6
48AE:  MOVLW  07
48B0:  MOVWF  FF7
48B2:  MOVLW  04
48B4:  MOVLB  1
48B6:  MOVWF  x11
48B8:  MOVLB  0
48BA:  CALL   108E
48BE:  MOVLW  01
48C0:  MOVWF  FE9
48C2:  MOVFF  110,114
48C6:  MOVFF  10F,113
48CA:  MOVFF  10E,112
48CE:  MOVFF  10D,111
48D2:  MOVLB  1
48D4:  CLRF   x15
48D6:  MOVLB  0
48D8:  CALL   1546
48DC:  MOVLW  20
48DE:  MOVLB  1
48E0:  MOVWF  x1E
48E2:  MOVLB  0
48E4:  CALL   0BE2
....................    lcd_gotoxy(1,3); 
48E8:  MOVLW  01
48EA:  MOVLB  1
48EC:  MOVWF  x1F
48EE:  MOVLW  03
48F0:  MOVWF  x20
48F2:  MOVLB  0
48F4:  CALL   0B70
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
48F8:  MOVLW  02
48FA:  MOVLB  1
48FC:  MOVWF  x0D
48FE:  MOVLB  0
4900:  CALL   17AE
4904:  MOVFF  00,109
4908:  MOVFF  01,10A
490C:  MOVFF  02,10B
4910:  MOVFF  03,10C
4914:  MOVFF  03,12A
4918:  MOVFF  02,129
491C:  MOVFF  01,128
4920:  MOVFF  00,127
4924:  MOVLB  1
4926:  CLRF   x2E
4928:  MOVLW  C0
492A:  MOVWF  x2D
492C:  MOVLW  7F
492E:  MOVWF  x2C
4930:  MOVLW  88
4932:  MOVWF  x2B
4934:  MOVLB  0
4936:  CALL   0C84
493A:  MOVLB  1
493C:  CLRF   x26
493E:  CLRF   x25
4940:  MOVLW  48
4942:  MOVWF  x24
4944:  MOVLW  85
4946:  MOVWF  x23
4948:  MOVFF  03,12A
494C:  MOVFF  02,129
4950:  MOVFF  01,128
4954:  MOVFF  00,127
4958:  MOVLB  0
495A:  CALL   138C
495E:  MOVFF  00,109
4962:  MOVFF  01,10A
4966:  MOVFF  02,10B
496A:  MOVFF  03,10C
496E:  MOVLW  16
4970:  MOVWF  FF6
4972:  MOVLW  07
4974:  MOVWF  FF7
4976:  MOVLW  04
4978:  MOVLB  1
497A:  MOVWF  x11
497C:  MOVLB  0
497E:  CALL   108E
4982:  MOVLW  01
4984:  MOVWF  FE9
4986:  MOVFF  98,114
498A:  MOVFF  97,113
498E:  MOVFF  96,112
4992:  MOVFF  95,111
4996:  MOVLB  1
4998:  MOVWF  x15
499A:  MOVLB  0
499C:  CALL   1546
49A0:  MOVLW  1F
49A2:  MOVWF  FF6
49A4:  MOVLW  07
49A6:  MOVWF  FF7
49A8:  MOVLW  0A
49AA:  MOVLB  1
49AC:  MOVWF  x11
49AE:  MOVLB  0
49B0:  CALL   108E
49B4:  MOVLW  01
49B6:  MOVWF  FE9
49B8:  MOVFF  10C,114
49BC:  MOVFF  10B,113
49C0:  MOVFF  10A,112
49C4:  MOVFF  109,111
49C8:  MOVLB  1
49CA:  CLRF   x15
49CC:  MOVLB  0
49CE:  CALL   1546
....................    lcd_gotoxy(1,4); 
49D2:  MOVLW  01
49D4:  MOVLB  1
49D6:  MOVWF  x1F
49D8:  MOVLW  04
49DA:  MOVWF  x20
49DC:  MOVLB  0
49DE:  CALL   0B70
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
49E2:  MOVLW  30
49E4:  MOVWF  FF6
49E6:  MOVLW  07
49E8:  MOVWF  FF7
49EA:  MOVLW  09
49EC:  MOVLB  1
49EE:  MOVWF  x11
49F0:  MOVLB  0
49F2:  CALL   108E
49F6:  MOVLW  89
49F8:  MOVWF  FE9
49FA:  MOVFF  CC,114
49FE:  MOVFF  CB,113
4A02:  MOVFF  CA,112
4A06:  MOVFF  C9,111
4A0A:  MOVLW  02
4A0C:  MOVLB  1
4A0E:  MOVWF  x15
4A10:  MOVLB  0
4A12:  CALL   1546
4A16:  MOVLW  20
4A18:  MOVLB  1
4A1A:  MOVWF  x1E
4A1C:  MOVLB  0
4A1E:  CALL   0BE2
....................        
....................       if(UP)//Si oprime hacia arriba 
4A22:  BSF    F93.3
4A24:  BTFSS  F81.3
4A26:  BRA    4A9C
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
4A28:  BCF    FD8.1
4A2A:  MOVFF  CC,12A
4A2E:  MOVFF  CB,129
4A32:  MOVFF  CA,128
4A36:  MOVFF  C9,127
4A3A:  MOVLW  0A
4A3C:  MOVLB  1
4A3E:  MOVWF  x2E
4A40:  MOVLW  D7
4A42:  MOVWF  x2D
4A44:  MOVLW  23
4A46:  MOVWF  x2C
4A48:  MOVLW  78
4A4A:  MOVWF  x2B
4A4C:  MOVLB  0
4A4E:  CALL   0DE2
4A52:  MOVFF  03,CC
4A56:  MOVFF  02,CB
4A5A:  MOVFF  01,CA
4A5E:  MOVFF  00,C9
4A62:  MOVLW  32
4A64:  MOVLB  1
4A66:  MOVWF  x24
4A68:  MOVLB  0
4A6A:  CALL   0A5E
....................          if(Ajuste1>30.0) 
4A6E:  MOVLB  1
4A70:  CLRF   x26
4A72:  CLRF   x25
4A74:  MOVLW  70
4A76:  MOVWF  x24
4A78:  MOVLW  83
4A7A:  MOVWF  x23
4A7C:  MOVFF  CC,12A
4A80:  MOVFF  CB,129
4A84:  MOVFF  CA,128
4A88:  MOVFF  C9,127
4A8C:  MOVLB  0
4A8E:  CALL   16F8
4A92:  BNC   4A9C
....................          {Ajuste1=0.0;} 
4A94:  CLRF   xCC
4A96:  CLRF   xCB
4A98:  CLRF   xCA
4A9A:  CLRF   xC9
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4A9C:  BSF    F93.2
4A9E:  BTFSS  F81.2
4AA0:  BRA    4B12
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
4AA2:  BSF    FD8.1
4AA4:  MOVFF  CC,12A
4AA8:  MOVFF  CB,129
4AAC:  MOVFF  CA,128
4AB0:  MOVFF  C9,127
4AB4:  MOVLW  0A
4AB6:  MOVLB  1
4AB8:  MOVWF  x2E
4ABA:  MOVLW  D7
4ABC:  MOVWF  x2D
4ABE:  MOVLW  23
4AC0:  MOVWF  x2C
4AC2:  MOVLW  78
4AC4:  MOVWF  x2B
4AC6:  MOVLB  0
4AC8:  CALL   0DE2
4ACC:  MOVFF  03,CC
4AD0:  MOVFF  02,CB
4AD4:  MOVFF  01,CA
4AD8:  MOVFF  00,C9
4ADC:  MOVLW  32
4ADE:  MOVLB  1
4AE0:  MOVWF  x24
4AE2:  MOVLB  0
4AE4:  CALL   0A5E
....................          if(Ajuste1<0.0) 
4AE8:  MOVFF  CC,126
4AEC:  MOVFF  CB,125
4AF0:  MOVFF  CA,124
4AF4:  MOVFF  C9,123
4AF8:  MOVLB  1
4AFA:  CLRF   x2A
4AFC:  CLRF   x29
4AFE:  CLRF   x28
4B00:  CLRF   x27
4B02:  MOVLB  0
4B04:  CALL   16F8
4B08:  BNC   4B12
....................          {Ajuste1=0.0;} 
4B0A:  CLRF   xCC
4B0C:  CLRF   xCB
4B0E:  CLRF   xCA
4B10:  CLRF   xC9
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
4B12:  BSF    F93.0
4B14:  BTFSS  F81.0
4B16:  BRA    4C68
....................       {  if(Flanco1 == 0)  
4B18:  BTFSC  3E.5
4B1A:  BRA    4C66
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4B1C:  MOVLW  01
4B1E:  MOVWF  17
4B20:  CLRF   40
4B22:  MOVLW  02
4B24:  MOVWF  1B
4B26:  MOVWF  1D
4B28:  MOVLW  0B
4B2A:  MOVWF  1A
4B2C:  MOVLW  1E
4B2E:  MOVLB  1
4B30:  MOVWF  x24
4B32:  MOVLB  0
4B34:  CALL   0A5E
4B38:  MOVLW  0C
4B3A:  MOVLB  1
4B3C:  MOVWF  x1E
4B3E:  MOVLB  0
4B40:  CALL   0BE2
....................             Temporal=Ajuste1; 
4B44:  MOVFF  CC,B4
4B48:  MOVFF  CB,B3
4B4C:  MOVFF  CA,B2
4B50:  MOVFF  C9,B1
....................             Entero=(int)Ajuste1; 
4B54:  MOVFF  CC,10C
4B58:  MOVFF  CB,10B
4B5C:  MOVFF  CA,10A
4B60:  MOVFF  C9,109
4B64:  CALL   1772
4B68:  MOVFF  01,24
....................             Temporal=Temporal-Entero; 
4B6C:  MOVLB  1
4B6E:  CLRF   x13
4B70:  MOVFF  24,112
4B74:  MOVLB  0
4B76:  CALL   0C4E
4B7A:  BSF    FD8.1
4B7C:  MOVFF  B4,12A
4B80:  MOVFF  B3,129
4B84:  MOVFF  B2,128
4B88:  MOVFF  B1,127
4B8C:  MOVFF  03,12E
4B90:  MOVFF  02,12D
4B94:  MOVFF  01,12C
4B98:  MOVFF  00,12B
4B9C:  CALL   0DE2
4BA0:  MOVFF  03,B4
4BA4:  MOVFF  02,B3
4BA8:  MOVFF  01,B2
4BAC:  MOVFF  00,B1
....................             Temporal2=Temporal*100.0; 
4BB0:  MOVFF  B4,126
4BB4:  MOVFF  B3,125
4BB8:  MOVFF  B2,124
4BBC:  MOVFF  B1,123
4BC0:  MOVLB  1
4BC2:  CLRF   x2A
4BC4:  CLRF   x29
4BC6:  MOVLW  48
4BC8:  MOVWF  x28
4BCA:  MOVLW  85
4BCC:  MOVWF  x27
4BCE:  MOVLB  0
4BD0:  CALL   138C
4BD4:  MOVFF  03,B8
4BD8:  MOVFF  02,B7
4BDC:  MOVFF  01,B6
4BE0:  MOVFF  00,B5
....................             Decimal1=(int8)Temporal2; 
4BE4:  MOVFF  B8,10C
4BE8:  MOVFF  B7,10B
4BEC:  MOVFF  B6,10A
4BF0:  MOVFF  B5,109
4BF4:  CALL   1772
4BF8:  MOVFF  01,25
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
4BFC:  MOVLW  19
4BFE:  MOVWF  FA9
4C00:  MOVFF  24,FA8
4C04:  BCF    FA6.6
4C06:  BCF    FA6.7
4C08:  BSF    FA6.2
4C0A:  MOVF   FF2,W
4C0C:  MOVWF  00
4C0E:  BCF    FF2.7
4C10:  MOVLB  F
4C12:  MOVLW  55
4C14:  MOVWF  FA7
4C16:  MOVLW  AA
4C18:  MOVWF  FA7
4C1A:  BSF    FA6.1
4C1C:  BTFSC  FA6.1
4C1E:  BRA    4C1C
4C20:  BCF    FA6.2
4C22:  MOVF   00,W
4C24:  IORWF  FF2,F
4C26:  MOVLW  1A
4C28:  MOVWF  FA9
4C2A:  MOVFF  25,FA8
4C2E:  BCF    FA6.6
4C30:  BCF    FA6.7
4C32:  BSF    FA6.2
4C34:  MOVF   FF2,W
4C36:  MOVWF  00
4C38:  BCF    FF2.7
4C3A:  MOVLW  55
4C3C:  MOVWF  FA7
4C3E:  MOVLW  AA
4C40:  MOVWF  FA7
4C42:  BSF    FA6.1
4C44:  BTFSC  FA6.1
4C46:  BRA    4C44
4C48:  BCF    FA6.2
4C4A:  MOVF   00,W
4C4C:  IORWF  FF2,F
....................             delay_ms(1000); 
4C4E:  MOVLW  04
4C50:  MOVLB  1
4C52:  MOVWF  x09
4C54:  MOVLW  FA
4C56:  MOVWF  x24
4C58:  MOVLB  0
4C5A:  CALL   0A5E
4C5E:  MOVLB  1
4C60:  DECFSZ x09,F
4C62:  BRA    4C54
4C64:  MOVLB  0
....................             }} 
....................          else 
4C66:  BRA    4C6A
....................             {Flanco1 = 0;}    
4C68:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
4C6A:  BSF    F93.1
4C6C:  BTFSS  F81.1
4C6E:  BRA    4CA6
....................       {  if(Flanco3 == 0)  
4C70:  BTFSC  3E.7
4C72:  BRA    4CA4
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4C74:  MOVLW  01
4C76:  MOVWF  17
4C78:  CLRF   40
4C7A:  MOVLW  02
4C7C:  MOVWF  1B
4C7E:  MOVWF  1D
4C80:  MOVLW  0B
4C82:  MOVWF  1A
4C84:  MOVLW  02
4C86:  MOVLB  1
4C88:  MOVWF  x09
4C8A:  MOVLW  FA
4C8C:  MOVWF  x24
4C8E:  MOVLB  0
4C90:  CALL   0A5E
4C94:  MOVLB  1
4C96:  DECFSZ x09,F
4C98:  BRA    4C8A
4C9A:  MOVLW  0C
4C9C:  MOVWF  x1E
4C9E:  MOVLB  0
4CA0:  CALL   0BE2
....................          else 
4CA4:  BRA    4CA8
....................             {Flanco3 = 0;}   
4CA6:  BCF    3E.7
4CA8:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
4CAA:  MOVF   17,W
4CAC:  SUBLW  09
4CAE:  BTFSS  FD8.2
4CB0:  BRA    52F8
....................    { 
....................    lcd_gotoxy(1,1); 
4CB2:  MOVLW  01
4CB4:  MOVWF  x1F
4CB6:  MOVWF  x20
4CB8:  MOVLB  0
4CBA:  CALL   0B70
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
4CBE:  MOVLB  1
4CC0:  CLRF   x13
4CC2:  MOVFF  2C,112
4CC6:  MOVLB  0
4CC8:  CALL   0C4E
4CCC:  MOVFF  00,109
4CD0:  MOVFF  01,10A
4CD4:  MOVFF  02,10B
4CD8:  MOVFF  03,10C
4CDC:  MOVFF  03,12A
4CE0:  MOVFF  02,129
4CE4:  MOVFF  01,128
4CE8:  MOVFF  00,127
4CEC:  MOVLB  1
4CEE:  CLRF   x2E
4CF0:  CLRF   x2D
4CF2:  MOVLW  7F
4CF4:  MOVWF  x2C
4CF6:  MOVLW  86
4CF8:  MOVWF  x2B
4CFA:  MOVLB  0
4CFC:  CALL   0C84
4D00:  MOVLB  1
4D02:  CLRF   x26
4D04:  CLRF   x25
4D06:  MOVLW  48
4D08:  MOVWF  x24
4D0A:  MOVLW  85
4D0C:  MOVWF  x23
4D0E:  MOVFF  03,12A
4D12:  MOVFF  02,129
4D16:  MOVFF  01,128
4D1A:  MOVFF  00,127
4D1E:  MOVLB  0
4D20:  CALL   138C
4D24:  MOVFF  00,109
4D28:  MOVFF  01,10A
4D2C:  MOVFF  02,10B
4D30:  MOVFF  03,10C
4D34:  MOVLW  40
4D36:  MOVWF  FF6
4D38:  MOVLW  07
4D3A:  MOVWF  FF7
4D3C:  MOVLW  0D
4D3E:  MOVLB  1
4D40:  MOVWF  x11
4D42:  MOVLB  0
4D44:  CALL   108E
4D48:  MOVLW  01
4D4A:  MOVWF  FE9
4D4C:  MOVFF  10C,114
4D50:  MOVFF  10B,113
4D54:  MOVFF  10A,112
4D58:  MOVFF  109,111
4D5C:  MOVLB  1
4D5E:  CLRF   x15
4D60:  MOVLB  0
4D62:  CALL   1546
4D66:  MOVLW  25
4D68:  MOVLB  1
4D6A:  MOVWF  x1E
4D6C:  MOVLB  0
4D6E:  CALL   0BE2
4D72:  MOVLW  20
4D74:  MOVLB  1
4D76:  MOVWF  x1E
4D78:  MOVLB  0
4D7A:  CALL   0BE2
....................  
....................    lcd_gotoxy(1,4); 
4D7E:  MOVLW  01
4D80:  MOVLB  1
4D82:  MOVWF  x1F
4D84:  MOVLW  04
4D86:  MOVWF  x20
4D88:  MOVLB  0
4D8A:  CALL   0B70
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
4D8E:  MOVLW  02
4D90:  MOVLB  1
4D92:  MOVWF  x0D
4D94:  MOVLB  0
4D96:  CALL   17AE
4D9A:  MOVFF  00,109
4D9E:  MOVFF  01,10A
4DA2:  MOVFF  02,10B
4DA6:  MOVFF  03,10C
4DAA:  MOVFF  03,12A
4DAE:  MOVFF  02,129
4DB2:  MOVFF  01,128
4DB6:  MOVFF  00,127
4DBA:  MOVLB  1
4DBC:  CLRF   x2E
4DBE:  MOVLW  C0
4DC0:  MOVWF  x2D
4DC2:  MOVLW  7F
4DC4:  MOVWF  x2C
4DC6:  MOVLW  88
4DC8:  MOVWF  x2B
4DCA:  MOVLB  0
4DCC:  CALL   0C84
4DD0:  MOVLB  1
4DD2:  CLRF   x26
4DD4:  CLRF   x25
4DD6:  MOVLW  48
4DD8:  MOVWF  x24
4DDA:  MOVLW  85
4DDC:  MOVWF  x23
4DDE:  MOVFF  03,12A
4DE2:  MOVFF  02,129
4DE6:  MOVFF  01,128
4DEA:  MOVFF  00,127
4DEE:  MOVLB  0
4DF0:  CALL   138C
4DF4:  MOVFF  00,109
4DF8:  MOVFF  01,10A
4DFC:  MOVFF  02,10B
4E00:  MOVFF  03,10C
4E04:  MOVLW  56
4E06:  MOVWF  FF6
4E08:  MOVLW  07
4E0A:  MOVWF  FF7
4E0C:  MOVLW  04
4E0E:  MOVLB  1
4E10:  MOVWF  x11
4E12:  MOVLB  0
4E14:  CALL   108E
4E18:  MOVLW  01
4E1A:  MOVWF  FE9
4E1C:  MOVFF  98,114
4E20:  MOVFF  97,113
4E24:  MOVFF  96,112
4E28:  MOVFF  95,111
4E2C:  MOVLB  1
4E2E:  MOVWF  x15
4E30:  MOVLB  0
4E32:  CALL   1546
4E36:  MOVLW  5F
4E38:  MOVWF  FF6
4E3A:  MOVLW  07
4E3C:  MOVWF  FF7
4E3E:  MOVLW  0A
4E40:  MOVLB  1
4E42:  MOVWF  x11
4E44:  MOVLB  0
4E46:  CALL   108E
4E4A:  MOVLW  01
4E4C:  MOVWF  FE9
4E4E:  MOVFF  10C,114
4E52:  MOVFF  10B,113
4E56:  MOVFF  10A,112
4E5A:  MOVFF  109,111
4E5E:  MOVLB  1
4E60:  CLRF   x15
4E62:  MOVLB  0
4E64:  CALL   1546
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
4E68:  BTFSC  58.1
4E6A:  BRA    4FCA
4E6C:  BTFSC  58.2
4E6E:  BRA    4FCA
4E70:  BTFSC  58.3
4E72:  BRA    4FCA
....................       { 
....................          if(UP)//Si oprime hacia arriba 
4E74:  BSF    F93.3
4E76:  BTFSS  F81.3
4E78:  BRA    4ED4
....................          { 
....................             delay_ms(500); 
4E7A:  MOVLW  02
4E7C:  MOVLB  1
4E7E:  MOVWF  x09
4E80:  MOVLW  FA
4E82:  MOVWF  x24
4E84:  MOVLB  0
4E86:  CALL   0A5E
4E8A:  MOVLB  1
4E8C:  DECFSZ x09,F
4E8E:  BRA    4E80
....................             if(UP) 
4E90:  BSF    F93.3
4E92:  BTFSS  F81.3
4E94:  BRA    4ED2
....................             { 
....................                lcd_gotoxy(1,2); 
4E96:  MOVLW  01
4E98:  MOVWF  x1F
4E9A:  MOVLW  02
4E9C:  MOVWF  x20
4E9E:  MOVLB  0
4EA0:  CALL   0B70
....................                printf(lcd_putc,"   Modo Manual  "); 
4EA4:  MOVLW  70
4EA6:  MOVWF  FF6
4EA8:  MOVLW  07
4EAA:  MOVWF  FF7
4EAC:  CALL   106E
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4EB0:  BSF    58.1
4EB2:  BCF    58.2
4EB4:  BCF    58.3
4EB6:  MOVLW  0A
4EB8:  MOVWF  2F
4EBA:  MOVWF  31
....................                delay_ms(1000); 
4EBC:  MOVLW  04
4EBE:  MOVLB  1
4EC0:  MOVWF  x09
4EC2:  MOVLW  FA
4EC4:  MOVWF  x24
4EC6:  MOVLB  0
4EC8:  CALL   0A5E
4ECC:  MOVLB  1
4ECE:  DECFSZ x09,F
4ED0:  BRA    4EC2
4ED2:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
4ED4:  BSF    F93.2
4ED6:  BTFSS  F81.2
4ED8:  BRA    4F34
....................          { 
....................             delay_ms(500); 
4EDA:  MOVLW  02
4EDC:  MOVLB  1
4EDE:  MOVWF  x09
4EE0:  MOVLW  FA
4EE2:  MOVWF  x24
4EE4:  MOVLB  0
4EE6:  CALL   0A5E
4EEA:  MOVLB  1
4EEC:  DECFSZ x09,F
4EEE:  BRA    4EE0
....................             if(DOWN) 
4EF0:  BSF    F93.2
4EF2:  BTFSS  F81.2
4EF4:  BRA    4F32
....................             { 
....................                lcd_gotoxy(1,2); 
4EF6:  MOVLW  01
4EF8:  MOVWF  x1F
4EFA:  MOVLW  02
4EFC:  MOVWF  x20
4EFE:  MOVLB  0
4F00:  CALL   0B70
....................                printf(lcd_putc,"   Modo Auto   "); 
4F04:  MOVLW  82
4F06:  MOVWF  FF6
4F08:  MOVLW  07
4F0A:  MOVWF  FF7
4F0C:  CALL   106E
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
4F10:  BSF    58.2
4F12:  BCF    58.1
4F14:  BCF    58.3
4F16:  MOVLW  0A
4F18:  MOVWF  30
4F1A:  MOVWF  31
....................                delay_ms(1000); 
4F1C:  MOVLW  04
4F1E:  MOVLB  1
4F20:  MOVWF  x09
4F22:  MOVLW  FA
4F24:  MOVWF  x24
4F26:  MOVLB  0
4F28:  CALL   0A5E
4F2C:  MOVLB  1
4F2E:  DECFSZ x09,F
4F30:  BRA    4F22
4F32:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
4F34:  BSF    F93.0
4F36:  BTFSS  F81.0
4F38:  BRA    4F94
....................          { 
....................             delay_ms(500); 
4F3A:  MOVLW  02
4F3C:  MOVLB  1
4F3E:  MOVWF  x09
4F40:  MOVLW  FA
4F42:  MOVWF  x24
4F44:  MOVLB  0
4F46:  CALL   0A5E
4F4A:  MOVLB  1
4F4C:  DECFSZ x09,F
4F4E:  BRA    4F40
....................             if(RIGHT) 
4F50:  BSF    F93.0
4F52:  BTFSS  F81.0
4F54:  BRA    4F92
....................             { 
....................                lcd_gotoxy(1,2); 
4F56:  MOVLW  01
4F58:  MOVWF  x1F
4F5A:  MOVLW  02
4F5C:  MOVWF  x20
4F5E:  MOVLB  0
4F60:  CALL   0B70
....................                printf(lcd_putc,"   Modo Semi   "); 
4F64:  MOVLW  92
4F66:  MOVWF  FF6
4F68:  MOVLW  07
4F6A:  MOVWF  FF7
4F6C:  CALL   106E
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4F70:  BSF    58.3
4F72:  BCF    58.1
4F74:  BCF    58.2
4F76:  MOVLW  0A
4F78:  MOVWF  2F
4F7A:  MOVWF  30
....................                delay_ms(1000); 
4F7C:  MOVLW  04
4F7E:  MOVLB  1
4F80:  MOVWF  x09
4F82:  MOVLW  FA
4F84:  MOVWF  x24
4F86:  MOVLB  0
4F88:  CALL   0A5E
4F8C:  MOVLB  1
4F8E:  DECFSZ x09,F
4F90:  BRA    4F82
4F92:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
4F94:  BSF    F93.1
4F96:  BTFSS  F81.1
4F98:  BRA    4FCA
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4F9A:  MOVLW  01
4F9C:  MOVWF  17
4F9E:  CLRF   40
4FA0:  MOVLW  02
4FA2:  MOVWF  1B
4FA4:  MOVWF  1D
4FA6:  MOVLW  0B
4FA8:  MOVWF  1A
4FAA:  MOVLW  02
4FAC:  MOVLB  1
4FAE:  MOVWF  x09
4FB0:  MOVLW  FA
4FB2:  MOVWF  x24
4FB4:  MOVLB  0
4FB6:  CALL   0A5E
4FBA:  MOVLB  1
4FBC:  DECFSZ x09,F
4FBE:  BRA    4FB0
4FC0:  MOVLW  0C
4FC2:  MOVWF  x1E
4FC4:  MOVLB  0
4FC6:  CALL   0BE2
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4FCA:  BTFSC  58.1
4FCC:  BRA    4FD6
4FCE:  MOVF   30,W
4FD0:  SUBLW  14
4FD2:  BTFSS  FD8.2
4FD4:  BRA    50FE
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
4FD6:  BCF    58.2
4FD8:  BCF    58.3
4FDA:  MOVLW  0A
4FDC:  MOVWF  2F
4FDE:  MOVWF  31
....................          lcd_gotoxy(1,2); 
4FE0:  MOVLW  01
4FE2:  MOVLB  1
4FE4:  MOVWF  x1F
4FE6:  MOVLW  02
4FE8:  MOVWF  x20
4FEA:  MOVLB  0
4FEC:  CALL   0B70
....................          printf(lcd_putc,"   Modo Manual  "); 
4FF0:  MOVLW  A2
4FF2:  MOVWF  FF6
4FF4:  MOVLW  07
4FF6:  MOVWF  FF7
4FF8:  CALL   106E
....................          lcd_gotoxy(1,3); 
4FFC:  MOVLW  01
4FFE:  MOVLB  1
5000:  MOVWF  x1F
5002:  MOVLW  03
5004:  MOVWF  x20
5006:  MOVLB  0
5008:  CALL   0B70
....................          printf(lcd_putc,"    Seleccionado    "); 
500C:  MOVLW  B4
500E:  MOVWF  FF6
5010:  MOVLW  07
5012:  MOVWF  FF7
5014:  CALL   106E
....................          if(LEFT) 
5018:  BSF    F93.1
501A:  BTFSS  F81.1
501C:  BRA    50FE
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
501E:  BCF    58.1
5020:  MOVLW  14
5022:  MOVWF  30
5024:  MOVLW  0A
5026:  MOVWF  2F
5028:  MOVWF  31
502A:  MOVLW  02
502C:  MOVLB  1
502E:  MOVWF  x09
5030:  MOVLW  FA
5032:  MOVWF  x24
5034:  MOVLB  0
5036:  CALL   0A5E
503A:  MOVLB  1
503C:  DECFSZ x09,F
503E:  BRA    5030
5040:  MOVLW  0C
5042:  MOVWF  x1E
5044:  MOVLB  0
5046:  CALL   0BE2
504A:  MOVLW  FE
504C:  MOVLB  1
504E:  MOVWF  x09
5050:  MOVLB  0
5052:  CALL   1806
5056:  MOVLW  FE
5058:  MOVWF  2C
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
505A:  MOVLW  0A
505C:  MOVWF  FA9
505E:  MOVFF  30,FA8
5062:  BCF    FA6.6
5064:  BCF    FA6.7
5066:  BSF    FA6.2
5068:  MOVF   FF2,W
506A:  MOVWF  00
506C:  BCF    FF2.7
506E:  MOVLB  F
5070:  MOVLW  55
5072:  MOVWF  FA7
5074:  MOVLW  AA
5076:  MOVWF  FA7
5078:  BSF    FA6.1
507A:  BTFSC  FA6.1
507C:  BRA    507A
507E:  BCF    FA6.2
5080:  MOVF   00,W
5082:  IORWF  FF2,F
5084:  MOVLW  0C
5086:  MOVWF  FA9
5088:  MOVFF  31,FA8
508C:  BCF    FA6.6
508E:  BCF    FA6.7
5090:  BSF    FA6.2
5092:  MOVF   FF2,W
5094:  MOVWF  00
5096:  BCF    FF2.7
5098:  MOVLW  55
509A:  MOVWF  FA7
509C:  MOVLW  AA
509E:  MOVWF  FA7
50A0:  BSF    FA6.1
50A2:  BTFSC  FA6.1
50A4:  BRA    50A2
50A6:  BCF    FA6.2
50A8:  MOVF   00,W
50AA:  IORWF  FF2,F
50AC:  MOVLW  0B
50AE:  MOVWF  FA9
50B0:  MOVFF  2F,FA8
50B4:  BCF    FA6.6
50B6:  BCF    FA6.7
50B8:  BSF    FA6.2
50BA:  MOVF   FF2,W
50BC:  MOVWF  00
50BE:  BCF    FF2.7
50C0:  MOVLW  55
50C2:  MOVWF  FA7
50C4:  MOVLW  AA
50C6:  MOVWF  FA7
50C8:  BSF    FA6.1
50CA:  BTFSC  FA6.1
50CC:  BRA    50CA
50CE:  BCF    FA6.2
50D0:  MOVF   00,W
50D2:  IORWF  FF2,F
50D4:  MOVLW  0D
50D6:  MOVWF  FA9
50D8:  MOVFF  2C,FA8
50DC:  BCF    FA6.6
50DE:  BCF    FA6.7
50E0:  BSF    FA6.2
50E2:  MOVF   FF2,W
50E4:  MOVWF  00
50E6:  BCF    FF2.7
50E8:  MOVLW  55
50EA:  MOVWF  FA7
50EC:  MOVLW  AA
50EE:  MOVWF  FA7
50F0:  BSF    FA6.1
50F2:  BTFSC  FA6.1
50F4:  BRA    50F2
50F6:  BCF    FA6.2
50F8:  MOVF   00,W
50FA:  IORWF  FF2,F
50FC:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
50FE:  BTFSC  58.2
5100:  BRA    5108
5102:  MOVF   2F,W
5104:  SUBLW  14
5106:  BNZ   51D0
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
5108:  BCF    58.1
510A:  BCF    58.3
510C:  MOVLW  0A
510E:  MOVWF  31
5110:  MOVWF  30
....................          lcd_gotoxy(1,2); 
5112:  MOVLW  01
5114:  MOVLB  1
5116:  MOVWF  x1F
5118:  MOVLW  02
511A:  MOVWF  x20
511C:  MOVLB  0
511E:  CALL   0B70
....................          printf(lcd_putc,"   Modo Auto   "); 
5122:  MOVLW  CA
5124:  MOVWF  FF6
5126:  MOVLW  07
5128:  MOVWF  FF7
512A:  CALL   106E
....................          lcd_gotoxy(1,3); 
512E:  MOVLW  01
5130:  MOVLB  1
5132:  MOVWF  x1F
5134:  MOVLW  03
5136:  MOVWF  x20
5138:  MOVLB  0
513A:  CALL   0B70
....................          printf(lcd_putc,"    Seleccionado    "); 
513E:  MOVLW  DA
5140:  MOVWF  FF6
5142:  MOVLW  07
5144:  MOVWF  FF7
5146:  CALL   106E
....................          if(LEFT) 
514A:  BSF    F93.1
514C:  BTFSS  F81.1
514E:  BRA    51D0
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5150:  BCF    58.2
5152:  MOVLW  14
5154:  MOVWF  2F
5156:  MOVLW  0A
5158:  MOVWF  31
515A:  MOVWF  30
515C:  MOVLW  02
515E:  MOVLB  1
5160:  MOVWF  x09
5162:  MOVLW  FA
5164:  MOVWF  x24
5166:  MOVLB  0
5168:  CALL   0A5E
516C:  MOVLB  1
516E:  DECFSZ x09,F
5170:  BRA    5162
5172:  MOVLW  0C
5174:  MOVWF  x1E
5176:  MOVLB  0
5178:  CALL   0BE2
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
517C:  MOVLW  0B
517E:  MOVWF  FA9
5180:  MOVFF  2F,FA8
5184:  BCF    FA6.6
5186:  BCF    FA6.7
5188:  BSF    FA6.2
518A:  MOVF   FF2,W
518C:  MOVWF  00
518E:  BCF    FF2.7
5190:  MOVLB  F
5192:  MOVLW  55
5194:  MOVWF  FA7
5196:  MOVLW  AA
5198:  MOVWF  FA7
519A:  BSF    FA6.1
519C:  BTFSC  FA6.1
519E:  BRA    519C
51A0:  BCF    FA6.2
51A2:  MOVF   00,W
51A4:  IORWF  FF2,F
51A6:  MOVLW  0C
51A8:  MOVWF  FA9
51AA:  MOVFF  31,FA8
51AE:  BCF    FA6.6
51B0:  BCF    FA6.7
51B2:  BSF    FA6.2
51B4:  MOVF   FF2,W
51B6:  MOVWF  00
51B8:  BCF    FF2.7
51BA:  MOVLW  55
51BC:  MOVWF  FA7
51BE:  MOVLW  AA
51C0:  MOVWF  FA7
51C2:  BSF    FA6.1
51C4:  BTFSC  FA6.1
51C6:  BRA    51C4
51C8:  BCF    FA6.2
51CA:  MOVF   00,W
51CC:  IORWF  FF2,F
51CE:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
51D0:  BTFSC  58.3
51D2:  BRA    51DC
51D4:  MOVF   31,W
51D6:  SUBLW  14
51D8:  BTFSS  FD8.2
51DA:  BRA    52F6
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
51DC:  BCF    58.1
51DE:  BCF    58.2
51E0:  MOVLW  0A
51E2:  MOVWF  2F
51E4:  MOVWF  30
....................          lcd_gotoxy(1,2); 
51E6:  MOVLW  01
51E8:  MOVLB  1
51EA:  MOVWF  x1F
51EC:  MOVLW  02
51EE:  MOVWF  x20
51F0:  MOVLB  0
51F2:  CALL   0B70
....................          printf(lcd_putc,"   Modo Semi   "); 
51F6:  MOVLW  F0
51F8:  MOVWF  FF6
51FA:  MOVLW  07
51FC:  MOVWF  FF7
51FE:  CALL   106E
....................          if(UP) 
5202:  BSF    F93.3
5204:  BTFSS  F81.3
5206:  BRA    520A
....................          { 
....................             tmp++; 
5208:  INCF   2C,F
....................              
....................          } 
....................           
....................          if(DOWN) 
520A:  BSF    F93.2
520C:  BTFSS  F81.2
520E:  BRA    5212
....................          { 
....................             tmp--; 
5210:  DECF   2C,F
....................          } 
....................          ValorSemi=tmp; 
5212:  MOVFF  2C,32
....................          ajustar_damper(tmp); 
5216:  MOVFF  2C,109
521A:  CALL   1806
....................          if(LEFT) 
521E:  BSF    F93.1
5220:  BTFSS  F81.1
5222:  BRA    52F6
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
5224:  MOVLW  0D
5226:  MOVWF  FA9
5228:  MOVFF  2C,FA8
522C:  BCF    FA6.6
522E:  BCF    FA6.7
5230:  BSF    FA6.2
5232:  MOVF   FF2,W
5234:  MOVWF  00
5236:  BCF    FF2.7
5238:  MOVLB  F
523A:  MOVLW  55
523C:  MOVWF  FA7
523E:  MOVLW  AA
5240:  MOVWF  FA7
5242:  BSF    FA6.1
5244:  BTFSC  FA6.1
5246:  BRA    5244
5248:  BCF    FA6.2
524A:  MOVF   00,W
524C:  IORWF  FF2,F
524E:  BCF    58.3
5250:  MOVLW  14
5252:  MOVWF  31
5254:  MOVLW  0A
5256:  MOVWF  2F
5258:  MOVWF  30
525A:  MOVLW  02
525C:  MOVLB  1
525E:  MOVWF  x09
5260:  MOVLW  FA
5262:  MOVWF  x24
5264:  MOVLB  0
5266:  CALL   0A5E
526A:  MOVLB  1
526C:  DECFSZ x09,F
526E:  BRA    5260
5270:  MOVLW  0C
5272:  MOVWF  x1E
5274:  MOVLB  0
5276:  CALL   0BE2
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
527A:  MOVLW  0C
527C:  MOVWF  FA9
527E:  MOVFF  31,FA8
5282:  BCF    FA6.6
5284:  BCF    FA6.7
5286:  BSF    FA6.2
5288:  MOVF   FF2,W
528A:  MOVWF  00
528C:  BCF    FF2.7
528E:  MOVLB  F
5290:  MOVLW  55
5292:  MOVWF  FA7
5294:  MOVLW  AA
5296:  MOVWF  FA7
5298:  BSF    FA6.1
529A:  BTFSC  FA6.1
529C:  BRA    529A
529E:  BCF    FA6.2
52A0:  MOVF   00,W
52A2:  IORWF  FF2,F
52A4:  MOVLW  0B
52A6:  MOVWF  FA9
52A8:  MOVFF  2F,FA8
52AC:  BCF    FA6.6
52AE:  BCF    FA6.7
52B0:  BSF    FA6.2
52B2:  MOVF   FF2,W
52B4:  MOVWF  00
52B6:  BCF    FF2.7
52B8:  MOVLW  55
52BA:  MOVWF  FA7
52BC:  MOVLW  AA
52BE:  MOVWF  FA7
52C0:  BSF    FA6.1
52C2:  BTFSC  FA6.1
52C4:  BRA    52C2
52C6:  BCF    FA6.2
52C8:  MOVF   00,W
52CA:  IORWF  FF2,F
52CC:  MOVLW  0A
52CE:  MOVWF  FA9
52D0:  MOVFF  30,FA8
52D4:  BCF    FA6.6
52D6:  BCF    FA6.7
52D8:  BSF    FA6.2
52DA:  MOVF   FF2,W
52DC:  MOVWF  00
52DE:  BCF    FF2.7
52E0:  MOVLW  55
52E2:  MOVWF  FA7
52E4:  MOVLW  AA
52E6:  MOVWF  FA7
52E8:  BSF    FA6.1
52EA:  BTFSC  FA6.1
52EC:  BRA    52EA
52EE:  BCF    FA6.2
52F0:  MOVF   00,W
52F2:  IORWF  FF2,F
52F4:  MOVLB  0
52F6:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //----------------Menu10--------------------------------------------------------------- 
....................    if(Menu == 10)// Menu de Tiempo de Purga 
52F8:  MOVF   17,W
52FA:  SUBLW  0A
52FC:  BTFSS  FD8.2
52FE:  BRA    55CA
....................    { 
....................       lcd_gotoxy(1,1); 
5300:  MOVLW  01
5302:  MOVWF  x1F
5304:  MOVWF  x20
5306:  MOVLB  0
5308:  CALL   0B70
....................       printf(lcd_putc,"     Tiempo  de      "); 
530C:  MOVLW  00
530E:  MOVWF  FF6
5310:  MOVLW  08
5312:  MOVWF  FF7
5314:  CALL   106E
....................       lcd_gotoxy(1,2); 
5318:  MOVLW  01
531A:  MOVLB  1
531C:  MOVWF  x1F
531E:  MOVLW  02
5320:  MOVWF  x20
5322:  MOVLB  0
5324:  CALL   0B70
....................       printf(lcd_putc,"       Purga         "); 
5328:  MOVLW  16
532A:  MOVWF  FF6
532C:  MOVLW  08
532E:  MOVWF  FF7
5330:  CALL   106E
....................       lcd_gotoxy(6,3); 
5334:  MOVLW  06
5336:  MOVLB  1
5338:  MOVWF  x1F
533A:  MOVLW  03
533C:  MOVWF  x20
533E:  MOVLB  0
5340:  CALL   0B70
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
5344:  MOVFF  23,109
5348:  MOVLW  01
534A:  MOVLB  1
534C:  MOVWF  x0A
534E:  MOVLB  0
5350:  CALL   1310
5354:  MOVLW  3A
5356:  MOVLB  1
5358:  MOVWF  x1E
535A:  MOVLB  0
535C:  CALL   0BE2
5360:  MOVFF  38,109
5364:  MOVLW  01
5366:  MOVLB  1
5368:  MOVWF  x0A
536A:  MOVLB  0
536C:  CALL   1310
5370:  MOVLW  35
5372:  MOVWF  FF6
5374:  MOVLW  08
5376:  MOVWF  FF7
5378:  MOVLW  08
537A:  MOVLB  1
537C:  MOVWF  x11
537E:  MOVLB  0
5380:  CALL   108E
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
5384:  MOVLW  06
5386:  ADDWF  21,W
5388:  MOVLB  1
538A:  MOVWF  x09
538C:  MOVWF  x1F
538E:  MOVLW  04
5390:  MOVWF  x20
5392:  MOVLB  0
5394:  CALL   0B70
....................       lcd_putc(t[2]); 
5398:  MOVFF  43,11E
539C:  CALL   0BE2
....................        
....................       if(unidad2<1) 
53A0:  MOVF   21,F
53A2:  BNZ   53AE
....................          unidad2==1; 
53A4:  DECFSZ 21,W
53A6:  BRA    53AA
53A8:  BRA    53AE
53AA:  MOVLW  00
53AC:  BRA    53AE
....................       if(unidad2>3) 
53AE:  MOVF   21,W
53B0:  SUBLW  03
53B2:  BC    53BE
....................          unidad2==3;    
53B4:  MOVF   21,W
53B6:  SUBLW  03
53B8:  BZ    53BE
53BA:  MOVLW  00
53BC:  BRA    53BE
....................        
....................       if(UP) 
53BE:  BSF    F93.3
53C0:  BTFSS  F81.3
53C2:  BRA    540E
....................       { 
....................          if(unidad2==1) 
53C4:  DECFSZ 21,W
53C6:  BRA    53E8
....................          { 
....................             if(purga_minutos_pro<61) 
53C8:  MOVF   23,W
53CA:  SUBLW  3C
53CC:  BNC   53E8
....................             { 
....................                purga_minutos_pro++;delay_ms(300); 
53CE:  INCF   23,F
53D0:  MOVLW  02
53D2:  MOVLB  1
53D4:  MOVWF  x09
53D6:  MOVLW  96
53D8:  MOVWF  x24
53DA:  MOVLB  0
53DC:  CALL   0A5E
53E0:  MOVLB  1
53E2:  DECFSZ x09,F
53E4:  BRA    53D6
53E6:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
53E8:  MOVF   21,W
53EA:  SUBLW  03
53EC:  BNZ   540E
....................          { 
....................             if(purga_segundos_pro<60) 
53EE:  MOVF   38,W
53F0:  SUBLW  3B
53F2:  BNC   540E
....................             { 
....................                purga_segundos_pro++;delay_ms(300); 
53F4:  INCF   38,F
53F6:  MOVLW  02
53F8:  MOVLB  1
53FA:  MOVWF  x09
53FC:  MOVLW  96
53FE:  MOVWF  x24
5400:  MOVLB  0
5402:  CALL   0A5E
5406:  MOVLB  1
5408:  DECFSZ x09,F
540A:  BRA    53FC
540C:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
540E:  BSF    F93.2
5410:  BTFSS  F81.2
5412:  BRA    54A0
....................       { 
....................          if(unidad2==1) 
5414:  DECFSZ 21,W
5416:  BRA    545A
....................          { 
....................             if(purga_minutos_pro>1) 
5418:  MOVF   23,W
541A:  SUBLW  01
541C:  BC    5438
....................             { 
....................                purga_minutos_pro--;delay_ms(300); 
541E:  DECF   23,F
5420:  MOVLW  02
5422:  MOVLB  1
5424:  MOVWF  x09
5426:  MOVLW  96
5428:  MOVWF  x24
542A:  MOVLB  0
542C:  CALL   0A5E
5430:  MOVLB  1
5432:  DECFSZ x09,F
5434:  BRA    5426
5436:  MOVLB  0
....................             } 
....................              
....................             if(purga_minutos_pro>60) 
5438:  MOVF   23,W
543A:  SUBLW  3C
543C:  BC    545A
....................             { 
....................                purga_minutos_pro=60;delay_ms(300); 
543E:  MOVLW  3C
5440:  MOVWF  23
5442:  MOVLW  02
5444:  MOVLB  1
5446:  MOVWF  x09
5448:  MOVLW  96
544A:  MOVWF  x24
544C:  MOVLB  0
544E:  CALL   0A5E
5452:  MOVLB  1
5454:  DECFSZ x09,F
5456:  BRA    5448
5458:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
545A:  MOVF   21,W
545C:  SUBLW  03
545E:  BNZ   54A0
....................          { 
....................             if(purga_segundos_pro>0) 
5460:  MOVF   38,F
5462:  BZ    547E
....................             { 
....................                purga_segundos_pro--;delay_ms(300); 
5464:  DECF   38,F
5466:  MOVLW  02
5468:  MOVLB  1
546A:  MOVWF  x09
546C:  MOVLW  96
546E:  MOVWF  x24
5470:  MOVLB  0
5472:  CALL   0A5E
5476:  MOVLB  1
5478:  DECFSZ x09,F
547A:  BRA    546C
547C:  MOVLB  0
....................             } 
....................              
....................             if(purga_segundos_pro>59) 
547E:  MOVF   38,W
5480:  SUBLW  3B
5482:  BC    54A0
....................             { 
....................                purga_segundos_pro=59;delay_ms(300); 
5484:  MOVLW  3B
5486:  MOVWF  38
5488:  MOVLW  02
548A:  MOVLB  1
548C:  MOVWF  x09
548E:  MOVLW  96
5490:  MOVWF  x24
5492:  MOVLB  0
5494:  CALL   0A5E
5498:  MOVLB  1
549A:  DECFSZ x09,F
549C:  BRA    548E
549E:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
54A0:  BSF    F93.0
54A2:  BTFSS  F81.0
54A4:  BRA    54E0
....................       { 
....................          if(unidad2==1) 
54A6:  DECFSZ 21,W
54A8:  BRA    54B0
....................          { 
....................             unidad2=3; 
54AA:  MOVLW  03
54AC:  MOVWF  21
....................          } 
....................          else 
54AE:  BRA    54C0
....................          { 
....................             if(unidad2==3) 
54B0:  MOVF   21,W
54B2:  SUBLW  03
54B4:  BNZ   54BC
....................             { 
....................                unidad2=1; 
54B6:  MOVLW  01
54B8:  MOVWF  21
....................             } 
....................             else 
54BA:  BRA    54C0
....................             { 
....................                unidad2=3; 
54BC:  MOVLW  03
54BE:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
54C0:  MOVLW  02
54C2:  MOVLB  1
54C4:  MOVWF  x09
54C6:  MOVLW  FA
54C8:  MOVWF  x24
54CA:  MOVLB  0
54CC:  CALL   0A5E
54D0:  MOVLB  1
54D2:  DECFSZ x09,F
54D4:  BRA    54C6
....................          printf(lcd_putc,"\f"); 
54D6:  MOVLW  0C
54D8:  MOVWF  x1E
54DA:  MOVLB  0
54DC:  CALL   0BE2
....................       } 
....................        
....................       if(LEFT) 
54E0:  BSF    F93.1
54E2:  BTFSS  F81.1
54E4:  BRA    55C8
....................       { 
....................          delay_ms(200); 
54E6:  MOVLW  C8
54E8:  MOVLB  1
54EA:  MOVWF  x24
54EC:  MOVLB  0
54EE:  CALL   0A5E
....................          printf(lcd_putc,"\f"); 
54F2:  MOVLW  0C
54F4:  MOVLB  1
54F6:  MOVWF  x1E
54F8:  MOVLB  0
54FA:  CALL   0BE2
....................          lcd_gotoxy(1,2); 
54FE:  MOVLW  01
5500:  MOVLB  1
5502:  MOVWF  x1F
5504:  MOVLW  02
5506:  MOVWF  x20
5508:  MOVLB  0
550A:  CALL   0B70
....................          printf(lcd_putc,"Tiempo Almacenado"); 
550E:  MOVLW  3E
5510:  MOVWF  FF6
5512:  MOVLW  08
5514:  MOVWF  FF7
5516:  CALL   106E
....................          lcd_gotoxy(1,3); 
551A:  MOVLW  01
551C:  MOVLB  1
551E:  MOVWF  x1F
5520:  MOVLW  03
5522:  MOVWF  x20
5524:  MOVLB  0
5526:  CALL   0B70
....................          printf(lcd_putc,"  Correctamente  "); 
552A:  MOVLW  50
552C:  MOVWF  FF6
552E:  MOVLW  08
5530:  MOVWF  FF7
5532:  CALL   106E
....................          write_eeprom(20,purga_minutos_pro);write_eeprom(21,purga_segundos_pro); 
5536:  MOVLW  14
5538:  MOVWF  FA9
553A:  MOVFF  23,FA8
553E:  BCF    FA6.6
5540:  BCF    FA6.7
5542:  BSF    FA6.2
5544:  MOVF   FF2,W
5546:  MOVWF  00
5548:  BCF    FF2.7
554A:  MOVLB  F
554C:  MOVLW  55
554E:  MOVWF  FA7
5550:  MOVLW  AA
5552:  MOVWF  FA7
5554:  BSF    FA6.1
5556:  BTFSC  FA6.1
5558:  BRA    5556
555A:  BCF    FA6.2
555C:  MOVF   00,W
555E:  IORWF  FF2,F
5560:  MOVLW  15
5562:  MOVWF  FA9
5564:  MOVFF  38,FA8
5568:  BCF    FA6.6
556A:  BCF    FA6.7
556C:  BSF    FA6.2
556E:  MOVF   FF2,W
5570:  MOVWF  00
5572:  BCF    FF2.7
5574:  MOVLW  55
5576:  MOVWF  FA7
5578:  MOVLW  AA
557A:  MOVWF  FA7
557C:  BSF    FA6.1
557E:  BTFSC  FA6.1
5580:  BRA    557E
5582:  BCF    FA6.2
5584:  MOVF   00,W
5586:  IORWF  FF2,F
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
5588:  MOVFF  23,22
558C:  MOVFF  38,37
....................          delay_ms(700); 
5590:  MOVLW  04
5592:  MOVLB  1
5594:  MOVWF  x09
5596:  MOVLW  AF
5598:  MOVWF  x24
559A:  MOVLB  0
559C:  CALL   0A5E
55A0:  MOVLB  1
55A2:  DECFSZ x09,F
55A4:  BRA    5596
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
55A6:  MOVLW  1E
55A8:  MOVWF  x24
55AA:  MOVLB  0
55AC:  CALL   0A5E
55B0:  MOVLW  01
55B2:  MOVWF  17
55B4:  CLRF   40
55B6:  MOVLW  02
55B8:  MOVWF  1B
55BA:  MOVWF  1D
55BC:  MOVLW  0C
55BE:  MOVLB  1
55C0:  MOVWF  x1E
55C2:  MOVLB  0
55C4:  CALL   0BE2
55C8:  MOVLB  1
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu10--------------------------------------------------------------- 
....................  
.................... //----------------Menu11--------------------------------------------------------------- 
....................    if(Menu == 11)// Menu de Tiempo de Post-Purga 
55CA:  MOVF   17,W
55CC:  SUBLW  0B
55CE:  BTFSS  FD8.2
55D0:  BRA    5896
....................    { 
....................       lcd_gotoxy(1,1); 
55D2:  MOVLW  01
55D4:  MOVWF  x1F
55D6:  MOVWF  x20
55D8:  MOVLB  0
55DA:  CALL   0B70
....................       printf(lcd_putc,"     Tiempo  de      "); 
55DE:  MOVLW  62
55E0:  MOVWF  FF6
55E2:  MOVLW  08
55E4:  MOVWF  FF7
55E6:  CALL   106E
....................       lcd_gotoxy(1,2); 
55EA:  MOVLW  01
55EC:  MOVLB  1
55EE:  MOVWF  x1F
55F0:  MOVLW  02
55F2:  MOVWF  x20
55F4:  MOVLB  0
55F6:  CALL   0B70
....................       printf(lcd_putc,"     Post-Purga      "); 
55FA:  MOVLW  78
55FC:  MOVWF  FF6
55FE:  MOVLW  08
5600:  MOVWF  FF7
5602:  CALL   106E
....................       lcd_gotoxy(6,3); 
5606:  MOVLW  06
5608:  MOVLB  1
560A:  MOVWF  x1F
560C:  MOVLW  03
560E:  MOVWF  x20
5610:  MOVLB  0
5612:  CALL   0B70
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
5616:  MOVFF  3C,109
561A:  MOVLW  01
561C:  MOVLB  1
561E:  MOVWF  x0A
5620:  MOVLB  0
5622:  CALL   1310
5626:  MOVLW  3A
5628:  MOVLB  1
562A:  MOVWF  x1E
562C:  MOVLB  0
562E:  CALL   0BE2
5632:  MOVFF  3A,109
5636:  MOVLW  01
5638:  MOVLB  1
563A:  MOVWF  x0A
563C:  MOVLB  0
563E:  CALL   1310
5642:  MOVLW  97
5644:  MOVWF  FF6
5646:  MOVLW  08
5648:  MOVWF  FF7
564A:  MOVLW  08
564C:  MOVLB  1
564E:  MOVWF  x11
5650:  MOVLB  0
5652:  CALL   108E
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
5656:  MOVLW  06
5658:  ADDWF  21,W
565A:  MOVLB  1
565C:  MOVWF  x09
565E:  MOVWF  x1F
5660:  MOVLW  04
5662:  MOVWF  x20
5664:  MOVLB  0
5666:  CALL   0B70
....................       lcd_putc(t[2]); 
566A:  MOVFF  43,11E
566E:  CALL   0BE2
....................       if(unidad2<1) 
5672:  MOVF   21,F
5674:  BNZ   5680
....................          unidad2==1; 
5676:  DECFSZ 21,W
5678:  BRA    567C
567A:  BRA    5680
567C:  MOVLW  00
567E:  BRA    5680
....................       if(unidad2>3) 
5680:  MOVF   21,W
5682:  SUBLW  03
5684:  BC    5690
....................          unidad2==3;    
5686:  MOVF   21,W
5688:  SUBLW  03
568A:  BZ    5690
568C:  MOVLW  00
568E:  BRA    5690
....................        
....................       if(UP) 
5690:  BSF    F93.3
5692:  BTFSS  F81.3
5694:  BRA    56E0
....................       { 
....................          if(unidad2==1) 
5696:  DECFSZ 21,W
5698:  BRA    56BA
....................          { 
....................             if(ppurga_minutos_pro<61) 
569A:  MOVF   3C,W
569C:  SUBLW  3C
569E:  BNC   56BA
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
56A0:  INCF   3C,F
56A2:  MOVLW  02
56A4:  MOVLB  1
56A6:  MOVWF  x09
56A8:  MOVLW  96
56AA:  MOVWF  x24
56AC:  MOVLB  0
56AE:  CALL   0A5E
56B2:  MOVLB  1
56B4:  DECFSZ x09,F
56B6:  BRA    56A8
56B8:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
56BA:  MOVF   21,W
56BC:  SUBLW  03
56BE:  BNZ   56E0
....................          { 
....................             if(ppurga_segundos_pro<60) 
56C0:  MOVF   3A,W
56C2:  SUBLW  3B
56C4:  BNC   56E0
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
56C6:  INCF   3A,F
56C8:  MOVLW  02
56CA:  MOVLB  1
56CC:  MOVWF  x09
56CE:  MOVLW  96
56D0:  MOVWF  x24
56D2:  MOVLB  0
56D4:  CALL   0A5E
56D8:  MOVLB  1
56DA:  DECFSZ x09,F
56DC:  BRA    56CE
56DE:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
56E0:  BSF    F93.2
56E2:  BTFSS  F81.2
56E4:  BRA    5772
....................       { 
....................          if(unidad2==1) 
56E6:  DECFSZ 21,W
56E8:  BRA    572C
....................          { 
....................             if(ppurga_minutos_pro>1) 
56EA:  MOVF   3C,W
56EC:  SUBLW  01
56EE:  BC    570A
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
56F0:  DECF   3C,F
56F2:  MOVLW  02
56F4:  MOVLB  1
56F6:  MOVWF  x09
56F8:  MOVLW  96
56FA:  MOVWF  x24
56FC:  MOVLB  0
56FE:  CALL   0A5E
5702:  MOVLB  1
5704:  DECFSZ x09,F
5706:  BRA    56F8
5708:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
570A:  MOVF   3C,W
570C:  SUBLW  3C
570E:  BC    572C
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
5710:  MOVLW  3C
5712:  MOVWF  3C
5714:  MOVLW  02
5716:  MOVLB  1
5718:  MOVWF  x09
571A:  MOVLW  96
571C:  MOVWF  x24
571E:  MOVLB  0
5720:  CALL   0A5E
5724:  MOVLB  1
5726:  DECFSZ x09,F
5728:  BRA    571A
572A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
572C:  MOVF   21,W
572E:  SUBLW  03
5730:  BNZ   5772
....................          { 
....................             if(ppurga_segundos_pro>0) 
5732:  MOVF   3A,F
5734:  BZ    5750
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
5736:  DECF   3A,F
5738:  MOVLW  02
573A:  MOVLB  1
573C:  MOVWF  x09
573E:  MOVLW  96
5740:  MOVWF  x24
5742:  MOVLB  0
5744:  CALL   0A5E
5748:  MOVLB  1
574A:  DECFSZ x09,F
574C:  BRA    573E
574E:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
5750:  MOVF   3A,W
5752:  SUBLW  3B
5754:  BC    5772
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
5756:  MOVLW  3B
5758:  MOVWF  3A
575A:  MOVLW  02
575C:  MOVLB  1
575E:  MOVWF  x09
5760:  MOVLW  96
5762:  MOVWF  x24
5764:  MOVLB  0
5766:  CALL   0A5E
576A:  MOVLB  1
576C:  DECFSZ x09,F
576E:  BRA    5760
5770:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
5772:  BSF    F93.0
5774:  BTFSS  F81.0
5776:  BRA    57AC
....................       { 
....................          if(unidad2==1) 
5778:  DECFSZ 21,W
577A:  BRA    5782
....................          { 
....................             unidad2=3; 
577C:  MOVLW  03
577E:  MOVWF  21
....................          } 
....................          else 
5780:  BRA    578C
....................          { 
....................             if(unidad2==3) 
5782:  MOVF   21,W
5784:  SUBLW  03
5786:  BNZ   578C
....................             { 
....................                unidad2=1; 
5788:  MOVLW  01
578A:  MOVWF  21
....................             } 
....................          } 
....................          delay_ms(500); 
578C:  MOVLW  02
578E:  MOVLB  1
5790:  MOVWF  x09
5792:  MOVLW  FA
5794:  MOVWF  x24
5796:  MOVLB  0
5798:  CALL   0A5E
579C:  MOVLB  1
579E:  DECFSZ x09,F
57A0:  BRA    5792
....................          printf(lcd_putc,"\f"); 
57A2:  MOVLW  0C
57A4:  MOVWF  x1E
57A6:  MOVLB  0
57A8:  CALL   0BE2
....................       } 
....................        
....................       if(LEFT) 
57AC:  BSF    F93.1
57AE:  BTFSS  F81.1
57B0:  BRA    5894
....................       { 
....................          delay_ms(200); 
57B2:  MOVLW  C8
57B4:  MOVLB  1
57B6:  MOVWF  x24
57B8:  MOVLB  0
57BA:  CALL   0A5E
....................          printf(lcd_putc,"\f"); 
57BE:  MOVLW  0C
57C0:  MOVLB  1
57C2:  MOVWF  x1E
57C4:  MOVLB  0
57C6:  CALL   0BE2
....................          lcd_gotoxy(1,2); 
57CA:  MOVLW  01
57CC:  MOVLB  1
57CE:  MOVWF  x1F
57D0:  MOVLW  02
57D2:  MOVWF  x20
57D4:  MOVLB  0
57D6:  CALL   0B70
....................          printf(lcd_putc,"Tiempo Almacenado"); 
57DA:  MOVLW  A0
57DC:  MOVWF  FF6
57DE:  MOVLW  08
57E0:  MOVWF  FF7
57E2:  CALL   106E
....................          lcd_gotoxy(1,3); 
57E6:  MOVLW  01
57E8:  MOVLB  1
57EA:  MOVWF  x1F
57EC:  MOVLW  03
57EE:  MOVWF  x20
57F0:  MOVLB  0
57F2:  CALL   0B70
....................          printf(lcd_putc,"  Correctamente  "); 
57F6:  MOVLW  B2
57F8:  MOVWF  FF6
57FA:  MOVLW  08
57FC:  MOVWF  FF7
57FE:  CALL   106E
....................          write_eeprom(22,ppurga_minutos_pro);write_eeprom(23,ppurga_segundos_pro); 
5802:  MOVLW  16
5804:  MOVWF  FA9
5806:  MOVFF  3C,FA8
580A:  BCF    FA6.6
580C:  BCF    FA6.7
580E:  BSF    FA6.2
5810:  MOVF   FF2,W
5812:  MOVWF  00
5814:  BCF    FF2.7
5816:  MOVLB  F
5818:  MOVLW  55
581A:  MOVWF  FA7
581C:  MOVLW  AA
581E:  MOVWF  FA7
5820:  BSF    FA6.1
5822:  BTFSC  FA6.1
5824:  BRA    5822
5826:  BCF    FA6.2
5828:  MOVF   00,W
582A:  IORWF  FF2,F
582C:  MOVLW  17
582E:  MOVWF  FA9
5830:  MOVFF  3A,FA8
5834:  BCF    FA6.6
5836:  BCF    FA6.7
5838:  BSF    FA6.2
583A:  MOVF   FF2,W
583C:  MOVWF  00
583E:  BCF    FF2.7
5840:  MOVLW  55
5842:  MOVWF  FA7
5844:  MOVLW  AA
5846:  MOVWF  FA7
5848:  BSF    FA6.1
584A:  BTFSC  FA6.1
584C:  BRA    584A
584E:  BCF    FA6.2
5850:  MOVF   00,W
5852:  IORWF  FF2,F
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
5854:  MOVFF  3C,3B
5858:  MOVFF  3A,39
....................          delay_ms(700); 
585C:  MOVLW  04
585E:  MOVLB  1
5860:  MOVWF  x09
5862:  MOVLW  AF
5864:  MOVWF  x24
5866:  MOVLB  0
5868:  CALL   0A5E
586C:  MOVLB  1
586E:  DECFSZ x09,F
5870:  BRA    5862
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
5872:  MOVLW  1E
5874:  MOVWF  x24
5876:  MOVLB  0
5878:  CALL   0A5E
587C:  MOVLW  01
587E:  MOVWF  17
5880:  CLRF   40
5882:  MOVLW  02
5884:  MOVWF  1B
5886:  MOVWF  1D
5888:  MOVLW  0C
588A:  MOVLB  1
588C:  MOVWF  x1E
588E:  MOVLB  0
5890:  CALL   0BE2
5894:  MOVLB  1
....................       }   
....................         
....................    } 
.................... //----------------Fin-Menu11--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
5896:  MOVF   17,W
5898:  SUBLW  14
589A:  BTFSS  FD8.2
589C:  BRA    5BBC
....................    { 
....................       if(Lectura2==1) 
589E:  BTFSS  3F.6
58A0:  BRA    5954
....................       { 
....................       lcd_gotoxy(1,1);                      
58A2:  MOVLW  01
58A4:  MOVWF  x1F
58A6:  MOVWF  x20
58A8:  MOVLB  0
58AA:  CALL   0B70
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
58AE:  MOVLW  C4
58B0:  MOVWF  FF6
58B2:  MOVLW  08
58B4:  MOVWF  FF7
58B6:  CALL   106E
....................       lcd_gotoxy(1,2); 
58BA:  MOVLW  01
58BC:  MOVLB  1
58BE:  MOVWF  x1F
58C0:  MOVLW  02
58C2:  MOVWF  x20
58C4:  MOVLB  0
58C6:  CALL   0B70
....................       //printf(lcd_putc,"Ext=%2.0f%%",(100*((float)tmp/255))); 
....................       printf(lcd_putc,"Ext= %03u%%",FeedbackDamper); 
58CA:  MOVLW  CE
58CC:  MOVWF  FF6
58CE:  MOVLW  08
58D0:  MOVWF  FF7
58D2:  MOVLW  05
58D4:  MOVLB  1
58D6:  MOVWF  x11
58D8:  MOVLB  0
58DA:  CALL   108E
58DE:  MOVFF  3D,109
58E2:  MOVLW  03
58E4:  MOVLB  1
58E6:  MOVWF  x0A
58E8:  MOVLB  0
58EA:  CALL   1310
58EE:  MOVLW  25
58F0:  MOVLB  1
58F2:  MOVWF  x1E
58F4:  MOVLB  0
58F6:  CALL   0BE2
....................       lcd_gotoxy(1,3); 
58FA:  MOVLW  01
58FC:  MOVLB  1
58FE:  MOVWF  x1F
5900:  MOVLW  03
5902:  MOVWF  x20
5904:  MOVLB  0
5906:  CALL   0B70
....................       printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
590A:  MOVLW  DA
590C:  MOVWF  FF6
590E:  MOVLW  08
5910:  MOVWF  FF7
5912:  MOVLW  08
5914:  MOVLB  1
5916:  MOVWF  x11
5918:  MOVLB  0
591A:  CALL   108E
591E:  MOVLW  01
5920:  MOVWF  FE9
5922:  MOVFF  98,114
5926:  MOVFF  97,113
592A:  MOVFF  96,112
592E:  MOVFF  95,111
5932:  MOVLB  1
5934:  MOVWF  x15
5936:  MOVLB  0
5938:  CALL   1546
593C:  MOVLW  E7
593E:  MOVWF  FF6
5940:  MOVLW  08
5942:  MOVWF  FF7
5944:  MOVLW  07
5946:  MOVLB  1
5948:  MOVWF  x11
594A:  MOVLB  0
594C:  CALL   108E
....................       Lectura2=0; 
5950:  BCF    3F.6
5952:  MOVLB  1
....................       } 
....................        
....................       if(flag_filtro==1) 
5954:  BTFSS  3F.2
5956:  BRA    599A
....................       { 
....................          if(horas>=60) 
5958:  MOVF   35,W
595A:  SUBLW  3B
595C:  BC    597C
....................          { 
....................             lcd_gotoxy(10,1);                      
595E:  MOVLW  0A
5960:  MOVWF  x1F
5962:  MOVLW  01
5964:  MOVWF  x20
5966:  MOVLB  0
5968:  CALL   0B70
....................             printf(lcd_putc,"Filtro:CAM"); 
596C:  MOVLW  F0
596E:  MOVWF  FF6
5970:  MOVLW  08
5972:  MOVWF  FF7
5974:  CALL   106E
....................          } 
....................          else 
5978:  BRA    5996
597A:  MOVLB  1
....................          { 
....................             lcd_gotoxy(10,1);                      
597C:  MOVLW  0A
597E:  MOVWF  x1F
5980:  MOVLW  01
5982:  MOVWF  x20
5984:  MOVLB  0
5986:  CALL   0B70
....................             printf(lcd_putc,"Filtro:OK "); 
598A:  MOVLW  FC
598C:  MOVWF  FF6
598E:  MOVLW  08
5990:  MOVWF  FF7
5992:  CALL   106E
....................          } 
....................       } 
....................       else 
5996:  BRA    59B4
5998:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
599A:  MOVLW  0A
599C:  MOVWF  x1F
599E:  MOVLW  01
59A0:  MOVWF  x20
59A2:  MOVLB  0
59A4:  CALL   0B70
....................          printf(lcd_putc,"Filtro:---"); 
59A8:  MOVLW  08
59AA:  MOVWF  FF6
59AC:  MOVLW  09
59AE:  MOVWF  FF7
59B0:  CALL   106E
....................       } 
....................           
....................       if(Flujo<0.5) 
59B4:  MOVFF  98,126
59B8:  MOVFF  97,125
59BC:  MOVFF  96,124
59C0:  MOVFF  95,123
59C4:  MOVLB  1
59C6:  CLRF   x2A
59C8:  CLRF   x29
59CA:  CLRF   x28
59CC:  MOVLW  7E
59CE:  MOVWF  x27
59D0:  MOVLB  0
59D2:  CALL   16F8
59D6:  BNC   59F6
....................       { 
....................          lcd_gotoxy(11,2); 
59D8:  MOVLW  0B
59DA:  MOVLB  1
59DC:  MOVWF  x1F
59DE:  MOVLW  02
59E0:  MOVWF  x20
59E2:  MOVLB  0
59E4:  CALL   0B70
....................          printf(lcd_putc,"Flujo=Bajo");       
59E8:  MOVLW  14
59EA:  MOVWF  FF6
59EC:  MOVLW  09
59EE:  MOVWF  FF7
59F0:  CALL   106E
....................       } 
....................       else 
59F4:  BRA    5A54
....................       { 
....................          if(Flujo>2.0) 
59F6:  MOVLB  1
59F8:  CLRF   x26
59FA:  CLRF   x25
59FC:  CLRF   x24
59FE:  MOVLW  80
5A00:  MOVWF  x23
5A02:  MOVFF  98,12A
5A06:  MOVFF  97,129
5A0A:  MOVFF  96,128
5A0E:  MOVFF  95,127
5A12:  MOVLB  0
5A14:  CALL   16F8
5A18:  BNC   5A38
....................          { 
....................             lcd_gotoxy(11,2); 
5A1A:  MOVLW  0B
5A1C:  MOVLB  1
5A1E:  MOVWF  x1F
5A20:  MOVLW  02
5A22:  MOVWF  x20
5A24:  MOVLB  0
5A26:  CALL   0B70
....................             printf(lcd_putc,"Flujo=Alto");                
5A2A:  MOVLW  20
5A2C:  MOVWF  FF6
5A2E:  MOVLW  09
5A30:  MOVWF  FF7
5A32:  CALL   106E
....................          } 
....................          else 
5A36:  BRA    5A54
....................          { 
....................             lcd_gotoxy(11,2); 
5A38:  MOVLW  0B
5A3A:  MOVLB  1
5A3C:  MOVWF  x1F
5A3E:  MOVLW  02
5A40:  MOVWF  x20
5A42:  MOVLB  0
5A44:  CALL   0B70
....................             printf(lcd_putc,"Flujo=OK  ");       
5A48:  MOVLW  2C
5A4A:  MOVWF  FF6
5A4C:  MOVLW  09
5A4E:  MOVWF  FF7
5A50:  CALL   106E
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
5A54:  BTFSS  3E.0
5A56:  BRA    5A7A
....................       { 
....................          Luz_Blanca_on; 
5A58:  BSF    F8A.4
5A5A:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5A5C:  MOVLW  01
5A5E:  MOVLB  1
5A60:  MOVWF  x1F
5A62:  MOVLW  04
5A64:  MOVWF  x20
5A66:  MOVLB  0
5A68:  CALL   0B70
....................          printf(lcd_putc,"Luz:ON "); 
5A6C:  MOVLW  38
5A6E:  MOVWF  FF6
5A70:  MOVLW  09
5A72:  MOVWF  FF7
5A74:  CALL   106E
....................       } 
....................       else 
5A78:  BRA    5A9A
....................       { 
....................          Luz_Blanca_off; 
5A7A:  BCF    F8A.4
5A7C:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5A7E:  MOVLW  01
5A80:  MOVLB  1
5A82:  MOVWF  x1F
5A84:  MOVLW  04
5A86:  MOVWF  x20
5A88:  MOVLB  0
5A8A:  CALL   0B70
....................          printf(lcd_putc,"Luz:OFF "); 
5A8E:  MOVLW  40
5A90:  MOVWF  FF6
5A92:  MOVLW  09
5A94:  MOVWF  FF7
5A96:  CALL   106E
....................       } 
....................        
....................       if(estadomv==1) 
5A9A:  BTFSS  3E.1
5A9C:  BRA    5ABC
....................       { 
....................          lcd_gotoxy(10,4); 
5A9E:  MOVLW  0A
5AA0:  MOVLB  1
5AA2:  MOVWF  x1F
5AA4:  MOVLW  04
5AA6:  MOVWF  x20
5AA8:  MOVLB  0
5AAA:  CALL   0B70
....................          printf(lcd_putc,"Motor:ON "); 
5AAE:  MOVLW  4A
5AB0:  MOVWF  FF6
5AB2:  MOVLW  09
5AB4:  MOVWF  FF7
5AB6:  CALL   106E
....................       } 
....................       else 
5ABA:  BRA    5AE0
....................       { 
....................          if(iniciodamper==1) 
5ABC:  BTFSS  58.0
5ABE:  BRA    5AC4
....................          { 
....................             Motor_off;      
5AC0:  BCF    F8A.5
5AC2:  BCF    F93.5
....................          } 
....................          lcd_gotoxy(10,4); 
5AC4:  MOVLW  0A
5AC6:  MOVLB  1
5AC8:  MOVWF  x1F
5ACA:  MOVLW  04
5ACC:  MOVWF  x20
5ACE:  MOVLB  0
5AD0:  CALL   0B70
....................          printf(lcd_putc,"Motor:OFF ");  
5AD4:  MOVLW  54
5AD6:  MOVWF  FF6
5AD8:  MOVLW  09
5ADA:  MOVWF  FF7
5ADC:  CALL   106E
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
5AE0:  BSF    F93.2
5AE2:  BTFSS  F81.2
5AE4:  BRA    5AFC
....................       {  if(Flanco == 0)  
5AE6:  BTFSC  3E.4
5AE8:  BRA    5AFA
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
5AEA:  BSF    3E.4
5AEC:  MOVLW  C8
5AEE:  MOVLB  1
5AF0:  MOVWF  x24
5AF2:  MOVLB  0
5AF4:  CALL   0A5E
5AF8:  BTG    3E.0
....................          else 
5AFA:  BRA    5AFE
....................             {Flanco = 0;} 
5AFC:  BCF    3E.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
5AFE:  BSF    F93.1
5B00:  BTFSS  F81.1
5B02:  BRA    5B48
....................       {   
....................          if(Flanco2 == 0) 
5B04:  BTFSC  3E.6
5B06:  BRA    5B46
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
5B08:  BSF    3E.6
5B0A:  MOVLW  C8
5B0C:  MOVLB  1
5B0E:  MOVWF  x24
5B10:  MOVLB  0
5B12:  CALL   0A5E
5B16:  BTG    3E.1
....................             if(estadomv==1) 
5B18:  BTFSS  3E.1
5B1A:  BRA    5B32
....................             { 
....................                Motor_on; 
5B1C:  BSF    F8A.5
5B1E:  BCF    F93.5
....................                delay_ms(150); 
5B20:  MOVLW  96
5B22:  MOVLB  1
5B24:  MOVWF  x24
5B26:  MOVLB  0
5B28:  CALL   0A5E
....................                lcd_init(); 
5B2C:  CALL   0AFC
....................             } 
....................             else 
5B30:  BRA    5B46
....................             { 
....................                Motor_off; 
5B32:  BCF    F8A.5
5B34:  BCF    F93.5
....................                delay_ms(150); 
5B36:  MOVLW  96
5B38:  MOVLB  1
5B3A:  MOVWF  x24
5B3C:  MOVLB  0
5B3E:  CALL   0A5E
....................                lcd_init(); 
5B42:  CALL   0AFC
....................             } 
....................          } 
....................       } 
....................       else 
5B46:  BRA    5B4A
....................       { 
....................          Flanco2 = 0; 
5B48:  BCF    3E.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
5B4A:  BSF    F93.3
5B4C:  BTFSS  F81.3
5B4E:  BRA    5B86
....................       {  if(Flanco1 == 0)  
5B50:  BTFSC  3E.5
5B52:  BRA    5B84
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
5B54:  MOVLW  02
5B56:  MOVLB  1
5B58:  MOVWF  x09
5B5A:  MOVLW  FA
5B5C:  MOVWF  x24
5B5E:  MOVLB  0
5B60:  CALL   0A5E
5B64:  MOVLB  1
5B66:  DECFSZ x09,F
5B68:  BRA    5B5A
5B6A:  MOVLW  0C
5B6C:  MOVWF  x1E
5B6E:  MOVLB  0
5B70:  CALL   0BE2
5B74:  MOVLW  01
5B76:  MOVWF  17
5B78:  CLRF   40
5B7A:  MOVLW  02
5B7C:  MOVWF  1B
5B7E:  MOVWF  1D
5B80:  MOVLW  0B
5B82:  MOVWF  1A
....................          else 
5B84:  BRA    5B88
....................             {Flanco1 = 0;}    
5B86:  BCF    3E.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
5B88:  BSF    F93.0
5B8A:  BTFSS  F81.0
5B8C:  BRA    5BB8
....................       {  if(Flanco3 == 0)  
5B8E:  BTFSC  3E.7
5B90:  BRA    5BB6
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
5B92:  MOVLW  02
5B94:  MOVLB  1
5B96:  MOVWF  x09
5B98:  MOVLW  FA
5B9A:  MOVWF  x24
5B9C:  MOVLB  0
5B9E:  CALL   0A5E
5BA2:  MOVLB  1
5BA4:  DECFSZ x09,F
5BA6:  BRA    5B98
5BA8:  MOVLW  0C
5BAA:  MOVWF  x1E
5BAC:  MOVLB  0
5BAE:  CALL   0BE2
5BB2:  MOVLW  28
5BB4:  MOVWF  17
....................          else 
5BB6:  BRA    5BBA
....................             {Flanco3 = 0;}     
5BB8:  BCF    3E.7
5BBA:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
5BBC:  MOVF   17,W
5BBE:  SUBLW  1E
5BC0:  BTFSS  FD8.2
5BC2:  BRA    5DEC
....................       lcd_gotoxy(1,1); 
5BC4:  MOVLW  01
5BC6:  MOVWF  x1F
5BC8:  MOVWF  x20
5BCA:  MOVLB  0
5BCC:  CALL   0B70
....................       printf(lcd_putc,"    !Post-Purga!    "); 
5BD0:  MOVLW  60
5BD2:  MOVWF  FF6
5BD4:  MOVLW  09
5BD6:  MOVWF  FF7
5BD8:  CALL   106E
....................       lcd_gotoxy(1,2); 
5BDC:  MOVLW  01
5BDE:  MOVLB  1
5BE0:  MOVWF  x1F
5BE2:  MOVLW  02
5BE4:  MOVWF  x20
5BE6:  MOVLB  0
5BE8:  CALL   0B70
....................       printf(lcd_putc,"                    "); 
5BEC:  MOVLW  76
5BEE:  MOVWF  FF6
5BF0:  MOVLW  09
5BF2:  MOVWF  FF7
5BF4:  CALL   106E
....................       lcd_gotoxy(1,3); 
5BF8:  MOVLW  01
5BFA:  MOVLB  1
5BFC:  MOVWF  x1F
5BFE:  MOVLW  03
5C00:  MOVWF  x20
5C02:  MOVLB  0
5C04:  CALL   0B70
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
5C08:  MOVLW  8C
5C0A:  MOVWF  FF6
5C0C:  MOVLW  09
5C0E:  MOVWF  FF7
5C10:  MOVLW  06
5C12:  MOVLB  1
5C14:  MOVWF  x11
5C16:  MOVLB  0
5C18:  CALL   108E
5C1C:  MOVFF  3B,109
5C20:  MOVLW  01
5C22:  MOVLB  1
5C24:  MOVWF  x0A
5C26:  MOVLB  0
5C28:  CALL   1310
5C2C:  MOVLW  3A
5C2E:  MOVLB  1
5C30:  MOVWF  x1E
5C32:  MOVLB  0
5C34:  CALL   0BE2
5C38:  MOVFF  39,109
5C3C:  MOVLW  01
5C3E:  MOVLB  1
5C40:  MOVWF  x0A
5C42:  MOVLB  0
5C44:  CALL   1310
5C48:  MOVLW  20
5C4A:  MOVLB  1
5C4C:  MOVWF  x1E
5C4E:  MOVLB  0
5C50:  CALL   0BE2
5C54:  MOVLW  20
5C56:  MOVLB  1
5C58:  MOVWF  x1E
5C5A:  MOVLB  0
5C5C:  CALL   0BE2
....................            
....................       if(Lectura==1) 
5C60:  BTFSS  3F.5
5C62:  BRA    5DE8
....................       { 
....................          Luz_Blanca_off; 
5C64:  BCF    F8A.4
5C66:  BCF    F93.4
....................          ajustar_damper(0); 
5C68:  MOVLB  1
5C6A:  CLRF   x09
5C6C:  MOVLB  0
5C6E:  CALL   1806
....................           
....................          if(sensores(2)<512) 
5C72:  MOVLW  02
5C74:  MOVLB  1
5C76:  MOVWF  x0D
5C78:  MOVLB  0
5C7A:  CALL   17AE
5C7E:  MOVFF  00,109
5C82:  MOVFF  01,10A
5C86:  MOVFF  02,10B
5C8A:  MOVFF  03,10C
5C8E:  MOVFF  03,126
5C92:  MOVFF  02,125
5C96:  MOVFF  01,124
5C9A:  MOVFF  00,123
5C9E:  MOVLB  1
5CA0:  CLRF   x2A
5CA2:  CLRF   x29
5CA4:  CLRF   x28
5CA6:  MOVLW  88
5CA8:  MOVWF  x27
5CAA:  MOVLB  0
5CAC:  CALL   16F8
5CB0:  BNC   5CB8
....................          { 
....................             Motor_off; 
5CB2:  BCF    F8A.5
5CB4:  BCF    F93.5
....................          } 
....................          else 
5CB6:  BRA    5CBC
....................          { 
....................             Motor_on; 
5CB8:  BSF    F8A.5
5CBA:  BCF    F93.5
....................          } 
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
5CBC:  MOVLW  02
5CBE:  MOVLB  1
5CC0:  MOVWF  x0D
5CC2:  MOVLB  0
5CC4:  CALL   17AE
5CC8:  MOVFF  00,109
5CCC:  MOVFF  01,10A
5CD0:  MOVFF  02,10B
5CD4:  MOVFF  03,10C
5CD8:  MOVFF  03,126
5CDC:  MOVFF  02,125
5CE0:  MOVFF  01,124
5CE4:  MOVFF  00,123
5CE8:  MOVLB  1
5CEA:  CLRF   x2A
5CEC:  CLRF   x29
5CEE:  MOVLW  40
5CF0:  MOVWF  x28
5CF2:  MOVLW  81
5CF4:  MOVWF  x27
5CF6:  MOVLB  0
5CF8:  CALL   16F8
5CFC:  BNC   5DE6
5CFE:  MOVF   39,F
5D00:  BNZ   5DE6
5D02:  MOVF   3B,F
5D04:  BNZ   5DE6
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
5D06:  MOVLW  46
5D08:  MOVWF  FA9
5D0A:  MOVFF  33,FA8
5D0E:  BCF    FA6.6
5D10:  BCF    FA6.7
5D12:  BSF    FA6.2
5D14:  MOVF   FF2,W
5D16:  MOVWF  00
5D18:  BCF    FF2.7
5D1A:  MOVLB  F
5D1C:  MOVLW  55
5D1E:  MOVWF  FA7
5D20:  MOVLW  AA
5D22:  MOVWF  FA7
5D24:  BSF    FA6.1
5D26:  BTFSC  FA6.1
5D28:  BRA    5D26
5D2A:  BCF    FA6.2
5D2C:  MOVF   00,W
5D2E:  IORWF  FF2,F
5D30:  MOVLW  47
5D32:  MOVWF  FA9
5D34:  MOVFF  34,FA8
5D38:  BCF    FA6.6
5D3A:  BCF    FA6.7
5D3C:  BSF    FA6.2
5D3E:  MOVF   FF2,W
5D40:  MOVWF  00
5D42:  BCF    FF2.7
5D44:  MOVLW  55
5D46:  MOVWF  FA7
5D48:  MOVLW  AA
5D4A:  MOVWF  FA7
5D4C:  BSF    FA6.1
5D4E:  BTFSC  FA6.1
5D50:  BRA    5D4E
5D52:  BCF    FA6.2
5D54:  MOVF   00,W
5D56:  IORWF  FF2,F
5D58:  MOVLW  48
5D5A:  MOVWF  FA9
5D5C:  MOVFF  35,FA8
5D60:  BCF    FA6.6
5D62:  BCF    FA6.7
5D64:  BSF    FA6.2
5D66:  MOVF   FF2,W
5D68:  MOVWF  00
5D6A:  BCF    FF2.7
5D6C:  MOVLW  55
5D6E:  MOVWF  FA7
5D70:  MOVLW  AA
5D72:  MOVWF  FA7
5D74:  BSF    FA6.1
5D76:  BTFSC  FA6.1
5D78:  BRA    5D76
5D7A:  BCF    FA6.2
5D7C:  MOVF   00,W
5D7E:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
5D80:  MOVLW  0C
5D82:  MOVLB  1
5D84:  MOVWF  x1E
5D86:  MOVLB  0
5D88:  CALL   0BE2
....................             lcd_gotoxy(1,2); 
5D8C:  MOVLW  01
5D8E:  MOVLB  1
5D90:  MOVWF  x1F
5D92:  MOVLW  02
5D94:  MOVWF  x20
5D96:  MOVLB  0
5D98:  CALL   0B70
....................             printf(lcd_putc,"     Proceso      "); 
5D9C:  MOVLW  9E
5D9E:  MOVWF  FF6
5DA0:  MOVLW  09
5DA2:  MOVWF  FF7
5DA4:  CALL   106E
....................             lcd_gotoxy(1,3); 
5DA8:  MOVLW  01
5DAA:  MOVLB  1
5DAC:  MOVWF  x1F
5DAE:  MOVLW  03
5DB0:  MOVWF  x20
5DB2:  MOVLB  0
5DB4:  CALL   0B70
....................             printf(lcd_putc,"    Finalizado    "); 
5DB8:  MOVLW  B2
5DBA:  MOVWF  FF6
5DBC:  MOVLW  09
5DBE:  MOVWF  FF7
5DC0:  CALL   106E
....................             delay_ms(2000); 
5DC4:  MOVLW  08
5DC6:  MOVLB  1
5DC8:  MOVWF  x09
5DCA:  MOVLW  FA
5DCC:  MOVWF  x24
5DCE:  MOVLB  0
5DD0:  CALL   0A5E
5DD4:  MOVLB  1
5DD6:  DECFSZ x09,F
5DD8:  BRA    5DCA
....................             printf(lcd_putc,"\f"); 
5DDA:  MOVLW  0C
5DDC:  MOVWF  x1E
5DDE:  MOVLB  0
5DE0:  CALL   0BE2
....................             reset_cpu(); 
5DE4:  RESET
....................          } 
....................          Lectura=0; 
5DE6:  BCF    3F.5
....................       } 
....................        
....................    } 
5DE8:  MOVLB  1
5DEA:  BRA    5BBC
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
5DEC:  MOVF   17,W
5DEE:  SUBLW  28
5DF0:  BNZ   5ECE
....................    lcd_gotoxy(1,1); 
5DF2:  MOVLW  01
5DF4:  MOVWF  x1F
5DF6:  MOVWF  x20
5DF8:  MOVLB  0
5DFA:  CALL   0B70
....................    printf(lcd_putc,"   Desea apagar     "); 
5DFE:  MOVLW  C6
5E00:  MOVWF  FF6
5E02:  MOVLW  09
5E04:  MOVWF  FF7
5E06:  CALL   106E
....................    lcd_gotoxy(1,2); 
5E0A:  MOVLW  01
5E0C:  MOVLB  1
5E0E:  MOVWF  x1F
5E10:  MOVLW  02
5E12:  MOVWF  x20
5E14:  MOVLB  0
5E16:  CALL   0B70
....................    printf(lcd_putc,"     la cabina      "); 
5E1A:  MOVLW  DC
5E1C:  MOVWF  FF6
5E1E:  MOVLW  09
5E20:  MOVWF  FF7
5E22:  CALL   106E
....................    lcd_gotoxy(1,3); 
5E26:  MOVLW  01
5E28:  MOVLB  1
5E2A:  MOVWF  x1F
5E2C:  MOVLW  03
5E2E:  MOVWF  x20
5E30:  MOVLB  0
5E32:  CALL   0B70
....................    printf(lcd_putc,"   > Aceptar        "); 
5E36:  MOVLW  F2
5E38:  MOVWF  FF6
5E3A:  MOVLW  09
5E3C:  MOVWF  FF7
5E3E:  CALL   106E
....................    lcd_gotoxy(1,4); 
5E42:  MOVLW  01
5E44:  MOVLB  1
5E46:  MOVWF  x1F
5E48:  MOVLW  04
5E4A:  MOVWF  x20
5E4C:  MOVLB  0
5E4E:  CALL   0B70
....................    printf(lcd_putc,"   < Cancelar       "); 
5E52:  MOVLW  08
5E54:  MOVWF  FF6
5E56:  MOVLW  0A
5E58:  MOVWF  FF7
5E5A:  CALL   106E
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
5E5E:  BSF    F93.0
5E60:  BTFSS  F81.0
5E62:  BRA    5E8A
....................       {  if(Flanco1 == 0)  
5E64:  BTFSC  3E.5
5E66:  BRA    5E88
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
5E68:  BSF    3E.5
5E6A:  MOVLW  1E
5E6C:  MOVWF  17
5E6E:  MOVFF  20,109
5E72:  CALL   105A
5E76:  BCF    F8A.6
5E78:  BCF    F93.6
5E7A:  MOVLW  0C
5E7C:  MOVLB  1
5E7E:  MOVWF  x1E
5E80:  MOVLB  0
5E82:  CALL   0BE2
5E86:  BSF    58.5
....................             }} 
....................          else 
5E88:  BRA    5E8C
....................             {Flanco1 = 0;}    
5E8A:  BCF    3E.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
5E8C:  BSF    F93.1
5E8E:  BTFSS  F81.1
5E90:  BRA    5ECA
....................       {  if(Flanco3 == 0)  
5E92:  BTFSC  3E.7
5E94:  BRA    5EC8
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
5E96:  BSF    3E.7
5E98:  MOVLW  14
5E9A:  MOVWF  17
5E9C:  CLRF   40
5E9E:  MOVLW  02
5EA0:  MOVWF  1B
5EA2:  MOVWF  1D
5EA4:  MOVLW  0B
5EA6:  MOVWF  1A
5EA8:  MOVLW  02
5EAA:  MOVLB  1
5EAC:  MOVWF  x09
5EAE:  MOVLW  FA
5EB0:  MOVWF  x24
5EB2:  MOVLB  0
5EB4:  CALL   0A5E
5EB8:  MOVLB  1
5EBA:  DECFSZ x09,F
5EBC:  BRA    5EAE
5EBE:  MOVLW  0C
5EC0:  MOVWF  x1E
5EC2:  MOVLB  0
5EC4:  CALL   0BE2
....................          else 
5EC8:  BRA    5ECC
....................             {Flanco3 = 0;}     
5ECA:  BCF    3E.7
5ECC:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
.................... //----------------Menu50--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de Purga 
5ECE:  MOVF   17,W
5ED0:  SUBLW  32
5ED2:  BTFSS  FD8.2
5ED4:  BRA    5FD6
....................    lcd_gotoxy(1,1); 
5ED6:  MOVLW  01
5ED8:  MOVWF  x1F
5EDA:  MOVWF  x20
5EDC:  MOVLB  0
5EDE:  CALL   0B70
....................    printf(lcd_putc,"      !Purga!       "); 
5EE2:  MOVLW  1E
5EE4:  MOVWF  FF6
5EE6:  MOVLW  0A
5EE8:  MOVWF  FF7
5EEA:  CALL   106E
....................    lcd_gotoxy(1,2); 
5EEE:  MOVLW  01
5EF0:  MOVLB  1
5EF2:  MOVWF  x1F
5EF4:  MOVLW  02
5EF6:  MOVWF  x20
5EF8:  MOVLB  0
5EFA:  CALL   0B70
....................    printf(lcd_putc,"                    "); 
5EFE:  MOVLW  34
5F00:  MOVWF  FF6
5F02:  MOVLW  0A
5F04:  MOVWF  FF7
5F06:  CALL   106E
....................    lcd_gotoxy(1,3); 
5F0A:  MOVLW  01
5F0C:  MOVLB  1
5F0E:  MOVWF  x1F
5F10:  MOVLW  03
5F12:  MOVWF  x20
5F14:  MOVLB  0
5F16:  CALL   0B70
....................    printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
5F1A:  MOVLW  4A
5F1C:  MOVWF  FF6
5F1E:  MOVLW  0A
5F20:  MOVWF  FF7
5F22:  MOVLW  06
5F24:  MOVLB  1
5F26:  MOVWF  x11
5F28:  MOVLB  0
5F2A:  CALL   108E
5F2E:  MOVFF  22,109
5F32:  MOVLW  01
5F34:  MOVLB  1
5F36:  MOVWF  x0A
5F38:  MOVLB  0
5F3A:  CALL   1310
5F3E:  MOVLW  3A
5F40:  MOVLB  1
5F42:  MOVWF  x1E
5F44:  MOVLB  0
5F46:  CALL   0BE2
5F4A:  MOVFF  37,109
5F4E:  MOVLW  01
5F50:  MOVLB  1
5F52:  MOVWF  x0A
5F54:  MOVLB  0
5F56:  CALL   1310
5F5A:  MOVLW  20
5F5C:  MOVLB  1
5F5E:  MOVWF  x1E
5F60:  MOVLB  0
5F62:  CALL   0BE2
5F66:  MOVLW  20
5F68:  MOVLB  1
5F6A:  MOVWF  x1E
5F6C:  MOVLB  0
5F6E:  CALL   0BE2
5F72:  MOVLW  20
5F74:  MOVLB  1
5F76:  MOVWF  x1E
5F78:  MOVLB  0
5F7A:  CALL   0BE2
....................         
....................    if(RIGHT) 
5F7E:  BSF    F93.0
5F80:  BTFSS  F81.0
5F82:  BRA    5FAC
....................    { 
....................       delay_ms(1000); 
5F84:  MOVLW  04
5F86:  MOVLB  1
5F88:  MOVWF  x09
5F8A:  MOVLW  FA
5F8C:  MOVWF  x24
5F8E:  MOVLB  0
5F90:  CALL   0A5E
5F94:  MOVLB  1
5F96:  DECFSZ x09,F
5F98:  BRA    5F8A
....................       if(RIGHT) 
5F9A:  BSF    F93.0
5F9C:  BTFSS  F81.0
5F9E:  BRA    5FAA
....................       { 
....................          tiempo_purga=0;Motor_on;Menu=20; 
5FA0:  BCF    58.4
5FA2:  BSF    F8A.5
5FA4:  BCF    F93.5
5FA6:  MOVLW  14
5FA8:  MOVWF  17
5FAA:  MOVLB  0
....................       } 
....................    } 
....................    if(Lectura==1) 
5FAC:  BTFSS  3F.5
5FAE:  BRA    5FD4
....................    { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
5FB0:  MOVFF  2D,109
5FB4:  CALL   1D30
5FB8:  MOVFF  03,98
5FBC:  MOVFF  02,97
5FC0:  MOVFF  01,96
5FC4:  MOVFF  00,95
....................         controlar_flujo();     
5FC8:  CALL   2402
....................         Motor_on; 
5FCC:  BSF    F8A.5
5FCE:  BCF    F93.5
....................         Luz_Blanca_off; 
5FD0:  BCF    F8A.4
5FD2:  BCF    F93.4
5FD4:  MOVLB  1
....................    } 
....................    }       
.................... //----------------Fin-Menu50---------------------------------------------------------------   
....................  
....................    if(tiemporeset>=20) 
5FD6:  MOVF   36,W
5FD8:  SUBLW  13
5FDA:  BC    5FE6
....................    { 
....................       lcd_init(); 
5FDC:  MOVLB  0
5FDE:  CALL   0AFC
....................       tiemporeset=0; 
5FE2:  CLRF   36
5FE4:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
5FE6:  BTFSS  3F.3
5FE8:  BRA    5FF6
....................       {intensidadpantalla(0);sleep();} 
5FEA:  CLRF   x09
5FEC:  MOVLB  0
5FEE:  CALL   105A
5FF2:  SLEEP 
5FF4:  MOVLB  1
....................  
....................    if(Menu!=0 || Menu!=30) 
5FF6:  MOVF   17,F
5FF8:  BNZ   6002
5FFA:  MOVF   17,W
5FFC:  SUBLW  1E
5FFE:  BTFSC  FD8.2
6000:  BRA    6138
....................    { 
....................       if(Lectura==1) 
6002:  BTFSS  3F.5
6004:  BRA    6134
....................       { 
....................          FeedbackDamper=(int8)(100*(sensores(2)/1023)); 
6006:  MOVLW  02
6008:  MOVWF  x0D
600A:  MOVLB  0
600C:  CALL   17AE
6010:  MOVFF  00,109
6014:  MOVFF  01,10A
6018:  MOVFF  02,10B
601C:  MOVFF  03,10C
6020:  MOVFF  03,12A
6024:  MOVFF  02,129
6028:  MOVFF  01,128
602C:  MOVFF  00,127
6030:  MOVLB  1
6032:  CLRF   x2E
6034:  MOVLW  C0
6036:  MOVWF  x2D
6038:  MOVLW  7F
603A:  MOVWF  x2C
603C:  MOVLW  88
603E:  MOVWF  x2B
6040:  MOVLB  0
6042:  CALL   0C84
6046:  MOVLB  1
6048:  CLRF   x26
604A:  CLRF   x25
604C:  MOVLW  48
604E:  MOVWF  x24
6050:  MOVLW  85
6052:  MOVWF  x23
6054:  MOVFF  03,12A
6058:  MOVFF  02,129
605C:  MOVFF  01,128
6060:  MOVFF  00,127
6064:  MOVLB  0
6066:  CALL   138C
606A:  MOVFF  03,10C
606E:  MOVFF  02,10B
6072:  MOVFF  01,10A
6076:  MOVFF  00,109
607A:  CALL   1772
607E:  MOVFF  01,3D
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
6082:  MOVFF  2D,109
6086:  CALL   1D30
608A:  MOVFF  03,98
608E:  MOVFF  02,97
6092:  MOVFF  01,96
6096:  MOVFF  00,95
....................          controlar_flujo(); 
609A:  CALL   2402
....................           
....................          if(Flujo<0.5 && Menu==20) 
609E:  MOVFF  98,126
60A2:  MOVFF  97,125
60A6:  MOVFF  96,124
60AA:  MOVFF  95,123
60AE:  MOVLB  1
60B0:  CLRF   x2A
60B2:  CLRF   x29
60B4:  CLRF   x28
60B6:  MOVLW  7E
60B8:  MOVWF  x27
60BA:  MOVLB  0
60BC:  CALL   16F8
60C0:  BNC   60F8
60C2:  MOVF   17,W
60C4:  SUBLW  14
60C6:  BNZ   60F8
....................          { 
....................               flag_latencia=1; 
60C8:  BSF    3F.0
....................                
....................               if(Latencia==1) 
60CA:  BTFSS  3F.1
60CC:  BRA    60F6
....................               { 
....................                  if(estadoalarma==1) 
60CE:  BTFSS  3E.2
60D0:  BRA    60D8
....................                  { 
....................                     Alarma_on; 
60D2:  BSF    F8A.6
60D4:  BCF    F93.6
....................                  } 
....................                  else 
60D6:  BRA    60DC
....................                  { 
....................                     Alarma_off; 
60D8:  BCF    F8A.6
60DA:  BCF    F93.6
....................                  } 
....................                  estadopantalla=!estadopantalla; 
60DC:  BTG    3E.3
....................                  if(estadopantalla==1) 
60DE:  BTFSS  3E.3
60E0:  BRA    60EC
....................                  {intensidadpantalla(contraste);} 
60E2:  MOVFF  20,109
60E6:  CALL   105A
....................                  else 
60EA:  BRA    60F6
....................                  {intensidadpantalla(0);} 
60EC:  MOVLB  1
60EE:  CLRF   x09
60F0:  MOVLB  0
60F2:  CALL   105A
....................                } 
....................             } 
....................          else 
60F6:  BRA    6132
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
60F8:  MOVFF  20,109
60FC:  CALL   105A
6100:  BCF    F8A.6
6102:  BCF    F93.6
....................             if(Flujo>=0.5) 
6104:  MOVLB  1
6106:  CLRF   x26
6108:  CLRF   x25
610A:  CLRF   x24
610C:  MOVLW  7E
610E:  MOVWF  x23
6110:  MOVFF  98,12A
6114:  MOVFF  97,129
6118:  MOVFF  96,128
611C:  MOVFF  95,127
6120:  MOVLB  0
6122:  CALL   16F8
6126:  BC    612A
6128:  BNZ   6132
....................             { 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
612A:  BCF    3F.1
612C:  CLRF   5C
612E:  CLRF   5B
6130:  BCF    3F.0
6132:  MOVLB  1
....................             } 
....................          } 
....................       } 
....................       Lectura=0; 
6134:  BCF    3F.5
....................    }    
....................    else 
6136:  BRA    6150
....................    { 
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
6138:  MOVFF  20,109
613C:  MOVLB  0
613E:  CALL   105A
6142:  BCF    F8A.6
6144:  BCF    F93.6
6146:  BCF    3F.1
6148:  CLRF   5C
614A:  CLRF   5B
614C:  BCF    3F.0
614E:  MOVLB  1
....................    } 
....................  
....................    }        
6150:  GOTO   2C5E
.................... } 
....................  
6154:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
