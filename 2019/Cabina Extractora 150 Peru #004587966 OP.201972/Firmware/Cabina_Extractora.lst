CCS PCH C Compiler, Version 4.104, 5967               26-jun.-19 15:24

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2019\Cabina Extractora 120 Peru #004587965 OP.201971\Firmware\Cabina_Extractora.lst

               ROM used: 23896 bytes (73%)
                         Largest free fragment is 8868
               RAM used: 262 (13%) at main() level
                         295 (14%) worst case
               Stack:    8 worst case (7 in main + 1 for interrupts)

*
0000:  GOTO   543A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0978
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////              JUDAPIES-dielecingenieria.com                         //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#define SIMU 1 
.................... #ifdef SIMU 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,NODEBUG,MCLR,NOVREGEN// PLL1 para 4 MHz 
.................... #use delay(clock=20000000) 
.................... #else 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0B3C:  MOVLW  01
0B3E:  MOVWF  FEA
0B40:  MOVLW  1D
0B42:  MOVWF  FE9
0B44:  MOVF   FEF,W
0B46:  BZ    0B64
0B48:  MOVLW  0F
0B4A:  MOVWF  01
0B4C:  CLRF   00
0B4E:  DECFSZ 00,F
0B50:  BRA    0B4E
0B52:  DECFSZ 01,F
0B54:  BRA    0B4C
0B56:  MOVLW  8F
0B58:  MOVWF  00
0B5A:  DECFSZ 00,F
0B5C:  BRA    0B5A
0B5E:  NOP   
0B60:  DECFSZ FEF,F
0B62:  BRA    0B48
0B64:  RETLW  00
.................... #define FAST 1 
.................... #endif 
....................  
.................... #define use_portd_lcd TRUE 
.................... #include <LCD420PIC18F.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //           LIBRERIA PARA CONTROL DE LCD 4X20 con PIC 18F4550                // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //      Se debe llamar a este archivo mediante #include <LCD420PIC18_RyP.c>   // 
.................... //                                                                            // 
.................... //      Es necesariodefinir el puerto a utilizar para el teclado mediante:    // 
.................... //      #define use_portb_lcd TRUE   //para el puerto B                       // 
.................... //      #define use_portd_lcd TRUE   //para el puerto D                       // 
.................... //                                                                            // 
.................... //      FUNCIONES:                                                            // 
.................... //      void lcd_init(void);         //Inicializa el lcd.                     // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //                            RobotyPic 2013                                  // 
.................... //                    http://robotypic.blogspot.com/                          // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... //Elección del puerto y pines 
....................  
.................... #ifdef use_portd_lcd 
....................  
.................... #define LCD_DB4  PIN_D4 
.................... #define LCD_DB5  PIN_D5 
.................... #define LCD_DB6  PIN_D6 
.................... #define LCD_DB7  PIN_D7 
.................... #define LCD_E    PIN_D2 
.................... #define LCD_RS   PIN_D0 
.................... #define LCD_RW   PIN_D1 
....................  
.................... #else 
....................  
.................... #define LCD_DB4  PIN_B4 
.................... #define LCD_DB5  PIN_B5 
.................... #define LCD_DB6  PIN_B6 
.................... #define LCD_DB7  PIN_B7 
.................... #define LCD_E    PIN_B2 
.................... #define LCD_RS   PIN_B0 
.................... #define LCD_RW   PIN_B1 
....................  
.................... #endif 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW  1     
....................  
.................... // If you use the PLL of Microcontroller to increase the 
.................... // clock to 48MHz use this define, else comment out the 
.................... // following line. 
....................  
.................... #define lcd_type 2 
.................... #define lcd_line_two 0x40 
....................  
.................... BYTE lcdline; 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                      // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0B66:  MOVLB  1
0B68:  BTFSC  x1E.0
0B6A:  BRA    0B70
0B6C:  BCF    F8C.4
0B6E:  BRA    0B72
0B70:  BSF    F8C.4
0B72:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0B74:  BTFSC  x1E.1
0B76:  BRA    0B7C
0B78:  BCF    F8C.5
0B7A:  BRA    0B7E
0B7C:  BSF    F8C.5
0B7E:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4));   
0B80:  BTFSC  x1E.2
0B82:  BRA    0B88
0B84:  BCF    F8C.6
0B86:  BRA    0B8A
0B88:  BSF    F8C.6
0B8A:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8));   
0B8C:  BTFSC  x1E.3
0B8E:  BRA    0B94
0B90:  BCF    F8C.7
0B92:  BRA    0B96
0B94:  BSF    F8C.7
0B96:  BCF    F95.7
....................  
....................  #ifdef FAST 
....................  delay_cycles(25); 
0B98:  MOVLW  08
0B9A:  MOVWF  00
0B9C:  DECFSZ 00,F
0B9E:  BRA    0B9C
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  output_high(LCD_E); 
0BA0:  BCF    F95.2
0BA2:  BSF    F8C.2
....................  #ifdef FAST 
....................  delay_us(50); 
0BA4:  MOVLW  C7
0BA6:  MOVWF  00
0BA8:  DECFSZ 00,F
0BAA:  BRA    0BA8
0BAC:  BRA    0BAE
....................  #else 
....................  delay_us(2); 
....................  #endif 
....................  output_low(LCD_E); 
0BAE:  BCF    F95.2
0BB0:  BCF    F8C.2
.................... } 
0BB2:  MOVLB  0
0BB4:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................    
.................... output_high(LCD_E); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................   
.................... output_low(LCD_E); 
....................    
.................... return(retval);   
.................... }   
.................... #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0BB6:  BCF    F95.0
0BB8:  BCF    F8C.0
....................  
.................... //#ifdef USE_LCD_RW 
.................... //while(bit_test(lcd_read_byte(),7)) ; 
.................... //#else 
.................... #ifdef FAST 
.................... delay_ms(2);  
0BBA:  MOVLW  02
0BBC:  MOVLB  1
0BBE:  MOVWF  x1D
0BC0:  MOVLB  0
0BC2:  RCALL  0B3C
.................... #else 
.................... delay_us(60); 
.................... #endif 
.................... //#endif 
....................  
.................... if(address) 
0BC4:  MOVLB  1
0BC6:  MOVF   x1B,F
0BC8:  BZ    0BD0
....................   output_high(LCD_RS); 
0BCA:  BCF    F95.0
0BCC:  BSF    F8C.0
.................... else 
0BCE:  BRA    0BD4
....................   output_low(LCD_RS); 
0BD0:  BCF    F95.0
0BD2:  BCF    F8C.0
....................   
....................  #ifdef FAST 
....................  delay_cycles(25); 
0BD4:  MOVLW  08
0BD6:  MOVWF  00
0BD8:  DECFSZ 00,F
0BDA:  BRA    0BD8
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0BDC:  BCF    F95.1
0BDE:  BCF    F8C.1
.................... #ifdef FAST 
....................  delay_cycles(25); 
0BE0:  MOVLW  08
0BE2:  MOVWF  00
0BE4:  DECFSZ 00,F
0BE6:  BRA    0BE4
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0BE8:  BCF    F95.2
0BEA:  BCF    F8C.2
....................  
.................... lcd_send_nibble(n >> 4); 
0BEC:  SWAPF  x1C,W
0BEE:  MOVWF  x1D
0BF0:  MOVLW  0F
0BF2:  ANDWF  x1D,F
0BF4:  MOVFF  11D,11E
0BF8:  MOVLB  0
0BFA:  RCALL  0B66
.................... lcd_send_nibble(n & 0xf); 
0BFC:  MOVLB  1
0BFE:  MOVF   x1C,W
0C00:  ANDLW  0F
0C02:  MOVWF  x1D
0C04:  MOVWF  x1E
0C06:  MOVLB  0
0C08:  RCALL  0B66
.................... } 
0C0A:  RETLW  00
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0C0C:  BCF    F95.0
0C0E:  BCF    F8C.0
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0C10:  BCF    F95.1
0C12:  BCF    F8C.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
0C14:  BCF    F95.2
0C16:  BCF    F8C.2
....................  
.................... delay_ms(15); 
0C18:  MOVLW  0F
0C1A:  MOVLB  1
0C1C:  MOVWF  x1D
0C1E:  MOVLB  0
0C20:  RCALL  0B3C
....................  
.................... for(i=0 ;i < 3; i++) 
0C22:  MOVLB  1
0C24:  CLRF   x02
0C26:  MOVF   x02,W
0C28:  SUBLW  02
0C2A:  BNC   0C44
....................   { 
....................     lcd_send_nibble(0x03); 
0C2C:  MOVLW  03
0C2E:  MOVWF  x1E
0C30:  MOVLB  0
0C32:  RCALL  0B66
....................     delay_ms(5); 
0C34:  MOVLW  05
0C36:  MOVLB  1
0C38:  MOVWF  x1D
0C3A:  MOVLB  0
0C3C:  RCALL  0B3C
....................   } 
0C3E:  MOVLB  1
0C40:  INCF   x02,F
0C42:  BRA    0C26
....................  
.................... lcd_send_nibble(0x02); 
0C44:  MOVLW  02
0C46:  MOVWF  x1E
0C48:  MOVLB  0
0C4A:  RCALL  0B66
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0C4C:  MOVLB  1
0C4E:  CLRF   x02
0C50:  MOVF   x02,W
0C52:  SUBLW  03
0C54:  BNC   0C7C
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0C56:  CLRF   03
0C58:  MOVF   x02,W
0C5A:  MOVFF  FF2,103
0C5E:  BCF    FF2.7
0C60:  MOVLB  0
0C62:  CALL   0096
0C66:  MOVLB  1
0C68:  BTFSC  x03.7
0C6A:  BSF    FF2.7
0C6C:  MOVWF  x03
0C6E:  CLRF   x1B
0C70:  MOVWF  x1C
0C72:  MOVLB  0
0C74:  RCALL  0BB6
....................    
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
....................     #endif 
....................   } 
0C76:  MOVLB  1
0C78:  INCF   x02,F
0C7A:  BRA    0C50
....................  
.................... } 
0C7C:  MOVLB  0
0C7E:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) 
.................... { 
....................   BYTE address; 
....................   
....................  
....................   switch(y) 
....................   { 
0C80:  MOVLW  01
0C82:  MOVLB  1
0C84:  SUBWF  x19,W
0C86:  ADDLW  FC
0C88:  BC    0CC4
0C8A:  ADDLW  04
0C8C:  MOVLB  0
0C8E:  GOTO   0CD6
....................     case 1 : address=0x80; 
0C92:  MOVLW  80
0C94:  MOVLB  1
0C96:  MOVWF  x1A
....................     lcdline=1; 
0C98:  MOVLW  01
0C9A:  MOVWF  16
....................     break; 
0C9C:  BRA    0CC4
....................     case 2 : address=0xc0; 
0C9E:  MOVLW  C0
0CA0:  MOVLB  1
0CA2:  MOVWF  x1A
....................     lcdline=2; 
0CA4:  MOVLW  02
0CA6:  MOVWF  16
....................     break; 
0CA8:  BRA    0CC4
....................     case 3 : address=0x94; 
0CAA:  MOVLW  94
0CAC:  MOVLB  1
0CAE:  MOVWF  x1A
....................     lcdline=3; 
0CB0:  MOVLW  03
0CB2:  MOVWF  16
....................     break; 
0CB4:  BRA    0CC4
....................     case 4 : address=0xd4; 
0CB6:  MOVLW  D4
0CB8:  MOVLB  1
0CBA:  MOVWF  x1A
....................     lcdline=4; 
0CBC:  MOVLW  04
0CBE:  MOVWF  16
....................     break; 
0CC0:  BRA    0CC4
0CC2:  MOVLB  1
....................   } 
....................  
....................   address+=x-1; 
0CC4:  MOVLW  01
0CC6:  SUBWF  x18,W
0CC8:  ADDWF  x1A,F
....................   lcd_send_byte(0,address); 
0CCA:  CLRF   x1B
0CCC:  MOVFF  11A,11C
0CD0:  MOVLB  0
0CD2:  RCALL  0BB6
.................... } 
0CD4:  RETLW  00
....................  
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    if(c=='ñ') 
*
0D02:  MOVLB  1
0D04:  MOVF   x17,W
0D06:  SUBLW  F1
0D08:  BNZ   0D0E
....................     c=238; 
0D0A:  MOVLW  EE
0D0C:  MOVWF  x17
....................  switch(c) 
....................   { 
0D0E:  MOVF   x17,W
0D10:  XORLW  0C
0D12:  MOVLB  0
0D14:  BZ    0D20
0D16:  XORLW  06
0D18:  BZ    0D3C
0D1A:  XORLW  02
0D1C:  BZ    0D60
0D1E:  BRA    0D6E
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0D20:  MOVLB  1
0D22:  CLRF   x1B
0D24:  MOVLW  01
0D26:  MOVWF  x1C
0D28:  MOVLB  0
0D2A:  RCALL  0BB6
....................       lcdline=1; 
0D2C:  MOVLW  01
0D2E:  MOVWF  16
....................       delay_ms(2); 
0D30:  MOVLW  02
0D32:  MOVLB  1
0D34:  MOVWF  x1D
0D36:  MOVLB  0
0D38:  RCALL  0B3C
....................       break; 
0D3A:  BRA    0D7E
....................    
....................     case '\n': 
....................       lcd_gotoxy(1,++lcdline); 
0D3C:  INCF   16,F
0D3E:  MOVLW  01
0D40:  MOVLB  1
0D42:  MOVWF  x18
0D44:  MOVFF  16,119
0D48:  MOVLB  0
0D4A:  RCALL  0C80
....................       if (lcdline>4) lcd_gotoxy(1,1); 
0D4C:  MOVF   16,W
0D4E:  SUBLW  04
0D50:  BC    0D5E
0D52:  MOVLW  01
0D54:  MOVLB  1
0D56:  MOVWF  x18
0D58:  MOVWF  x19
0D5A:  MOVLB  0
0D5C:  RCALL  0C80
....................       break; 
0D5E:  BRA    0D7E
....................    
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
0D60:  MOVLB  1
0D62:  CLRF   x1B
0D64:  MOVLW  10
0D66:  MOVWF  x1C
0D68:  MOVLB  0
0D6A:  RCALL  0BB6
....................       break; 
0D6C:  BRA    0D7E
....................    
....................     default: 
....................       lcd_send_byte(1,c); 
0D6E:  MOVLW  01
0D70:  MOVLB  1
0D72:  MOVWF  x1B
0D74:  MOVFF  117,11C
0D78:  MOVLB  0
0D7A:  RCALL  0BB6
....................       break; 
0D7C:  BRA    0D7E
....................   } 
.................... } 
0D7E:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... //while(bit_test(lcd_read_byte(),7));  
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... //#include <LCD420.c> 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... //#define DAMPER 1 
.................... #define VARIADOR 1 
.................... //#define FLUJOS 1 
....................  
.................... // Definición de teclado - NO 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   LEFT          !input(PIN_E2) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   UP            !input(PIN_A5) 
.................... #define   ALARMA        !input(PIN_A3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Aux_on            output_bit(PIN_B6,1) 
.................... #define   Aux_off           output_bit(PIN_B6,0) 
.................... #define   Alarma_on         output_bit(PIN_B7,1) 
.................... #define   Alarma_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C7,1) 
.................... #define   Pantalla_off      output_bit(PIN_C7,0) 
....................  
.................... int8 v=0; 
.................... float vel=0.0; 
.................... int8 Menu=100,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Entero1=0,l=0,l2=0,h=0,h2=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0,Opcion=1; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 setpoint=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... short imprimio=0,Ruido=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float zero_fabrica=203.0; 
.................... short Lectura=0,Lectura2=0,flag_iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,Dif16=0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float promedio2[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... int8 n_opcionH=8; 
....................  
.................... #include <Funciones.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... void ajuste_vel(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
47C4:  MOVFF  102,FBE
.................... } 
47C8:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
3E60:  MOVLB  1
3E62:  RLCF   x13,W
3E64:  MOVWF  00
3E66:  RLCF   00,F
3E68:  MOVLW  FC
3E6A:  ANDWF  00,F
3E6C:  MOVFF  00,01
3E70:  MOVF   FC2,W
3E72:  ANDLW  C3
3E74:  IORWF  00,W
3E76:  MOVWF  FC2
3E78:  MOVLW  0A
3E7A:  MOVWF  x1D
3E7C:  MOVLB  0
3E7E:  CALL   0B3C
3E82:  BSF    FC2.1
3E84:  BTFSC  FC2.1
3E86:  BRA    3E84
3E88:  MOVFF  FC4,119
3E8C:  MOVFF  FC3,118
3E90:  MOVLB  0
3E92:  CALL   0DCE
3E96:  MOVFF  03,117
3E9A:  MOVFF  02,116
3E9E:  MOVFF  01,115
3EA2:  MOVFF  00,114
3EA6:  MOVFF  114,00
3EAA:  MOVFF  115,01
3EAE:  MOVFF  116,02
3EB2:  MOVFF  117,03
.................... } 
3EB6:  RETLW  00
....................  
.................... float leeTemperatura(int8 media){ 
*
4A36:  MOVLB  1
4A38:  CLRF   x06
4A3A:  CLRF   x05
4A3C:  CLRF   x04
4A3E:  CLRF   x03
4A40:  CLRF   x0A
4A42:  CLRF   x09
4A44:  CLRF   x08
4A46:  CLRF   x07
4A48:  CLRF   x0E
4A4A:  CLRF   x0D
4A4C:  CLRF   x0C
4A4E:  CLRF   x0B
4A50:  CLRF   x12
4A52:  CLRF   x11
4A54:  CLRF   x10
4A56:  CLRF   x0F
....................    float ADC=0,V=0,T=0,Tempera=0; 
....................    ADC=sensores(0); 
4A58:  CLRF   x13
4A5A:  MOVLB  0
4A5C:  CALL   3E60
4A60:  MOVFF  03,106
4A64:  MOVFF  02,105
4A68:  MOVFF  01,104
4A6C:  MOVFF  00,103
....................    V=5*ADC/1023; 
4A70:  MOVLB  1
4A72:  CLRF   x1A
4A74:  CLRF   x19
4A76:  MOVLW  20
4A78:  MOVWF  x18
4A7A:  MOVLW  81
4A7C:  MOVWF  x17
4A7E:  MOVFF  106,11E
4A82:  MOVFF  105,11D
4A86:  MOVFF  104,11C
4A8A:  MOVFF  103,11B
4A8E:  MOVLB  0
4A90:  CALL   3AF4
4A94:  MOVFF  00,113
4A98:  MOVFF  01,114
4A9C:  MOVFF  02,115
4AA0:  MOVFF  03,116
4AA4:  MOVFF  03,11A
4AA8:  MOVFF  02,119
4AAC:  MOVFF  01,118
4AB0:  MOVFF  00,117
4AB4:  MOVLB  1
4AB6:  CLRF   x1E
4AB8:  MOVLW  C0
4ABA:  MOVWF  x1D
4ABC:  MOVLW  7F
4ABE:  MOVWF  x1C
4AC0:  MOVLW  88
4AC2:  MOVWF  x1B
4AC4:  MOVLB  0
4AC6:  CALL   0E04
4ACA:  MOVFF  03,10A
4ACE:  MOVFF  02,109
4AD2:  MOVFF  01,108
4AD6:  MOVFF  00,107
....................    T=V/0.01; 
4ADA:  MOVFF  10A,11A
4ADE:  MOVFF  109,119
4AE2:  MOVFF  108,118
4AE6:  MOVFF  107,117
4AEA:  MOVLW  0A
4AEC:  MOVLB  1
4AEE:  MOVWF  x1E
4AF0:  MOVLW  D7
4AF2:  MOVWF  x1D
4AF4:  MOVLW  23
4AF6:  MOVWF  x1C
4AF8:  MOVLW  78
4AFA:  MOVWF  x1B
4AFC:  MOVLB  0
4AFE:  CALL   0E04
4B02:  MOVFF  03,10E
4B06:  MOVFF  02,10D
4B0A:  MOVFF  01,10C
4B0E:  MOVFF  00,10B
....................    if(l2>media) 
4B12:  MOVF   2C,W
4B14:  MOVLB  1
4B16:  SUBWF  x02,W
4B18:  BC    4B1C
....................       l2=0; 
4B1A:  CLRF   2C
....................        
....................    promedio2[l2]=T;l2++; 
4B1C:  MOVF   2C,W
4B1E:  MULLW  04
4B20:  MOVF   FF3,W
4B22:  CLRF   03
4B24:  ADDLW  D1
4B26:  MOVWF  FE9
4B28:  MOVLW  00
4B2A:  ADDWFC 03,W
4B2C:  MOVWF  FEA
4B2E:  MOVFF  10B,FEF
4B32:  MOVFF  10C,FEC
4B36:  MOVFF  10D,FEC
4B3A:  MOVFF  10E,FEC
4B3E:  INCF   2C,F
....................    Tempera=0; 
4B40:  CLRF   x12
4B42:  CLRF   x11
4B44:  CLRF   x10
4B46:  CLRF   x0F
....................       
....................      for(h2=0;h2<=(media-1);h2++){ 
4B48:  CLRF   2E
4B4A:  MOVLW  01
4B4C:  SUBWF  x02,W
4B4E:  SUBWF  2E,W
4B50:  BZ    4B54
4B52:  BC    4BC4
....................         Tempera+=promedio2[h2]; 
4B54:  MOVF   2E,W
4B56:  MULLW  04
4B58:  MOVF   FF3,W
4B5A:  CLRF   03
4B5C:  ADDLW  D1
4B5E:  MOVWF  FE9
4B60:  MOVLW  00
4B62:  ADDWFC 03,W
4B64:  MOVWF  FEA
4B66:  MOVFF  FEF,00
4B6A:  MOVFF  FEC,01
4B6E:  MOVFF  FEC,02
4B72:  MOVFF  FEC,03
4B76:  MOVFF  FEA,114
4B7A:  MOVFF  FE9,113
4B7E:  BCF    FD8.1
4B80:  MOVFF  112,118
4B84:  MOVFF  111,117
4B88:  MOVFF  110,116
4B8C:  MOVFF  10F,115
4B90:  MOVFF  03,11C
4B94:  MOVFF  02,11B
4B98:  MOVFF  01,11A
4B9C:  MOVFF  00,119
4BA0:  MOVLB  0
4BA2:  CALL   0F62
4BA6:  MOVFF  114,FEA
4BAA:  MOVFF  113,FE9
4BAE:  MOVFF  03,112
4BB2:  MOVFF  02,111
4BB6:  MOVFF  01,110
4BBA:  MOVFF  00,10F
....................      }       
4BBE:  INCF   2E,F
4BC0:  MOVLB  1
4BC2:  BRA    4B4A
....................    return Tempera; 
4BC4:  MOVFF  10F,00
4BC8:  MOVFF  110,01
4BCC:  MOVFF  111,02
4BD0:  MOVFF  112,03
.................... } 
4BD4:  MOVLB  0
4BD6:  GOTO   59F0 (RETURN)
....................  
.................... void intensidadpantalla(int x){ 
....................    if(x==0)    
*
0B28:  MOVLB  1
0B2A:  MOVF   x02,F
0B2C:  BNZ   0B34
....................       Pantalla_off; 
0B2E:  BCF    F8B.7
0B30:  BCF    F94.7
....................    else 
0B32:  BRA    0B38
....................       Pantalla_on; 
0B34:  BSF    F8B.7
0B36:  BCF    F94.7
.................... } 
0B38:  MOVLB  0
0B3A:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media){ 
....................     //Voltaje0=sensores(0)*5/1023; 
....................     //Voltaje1=sensores(1)*5/1023; 
....................     //Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     //TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     //TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................      
....................     if(negativo==10) 
*
4F38:  MOVF   31,W
4F3A:  SUBLW  0A
4F3C:  BNZ   4FA2
....................       x_uno=sensores(1)+Diferencia; 
4F3E:  MOVLW  01
4F40:  MOVLB  1
4F42:  MOVWF  x13
4F44:  MOVLB  0
4F46:  CALL   3E60
4F4A:  MOVFF  00,103
4F4E:  MOVFF  01,104
4F52:  MOVFF  02,105
4F56:  MOVFF  03,106
4F5A:  MOVFF  FEA,108
4F5E:  MOVFF  FE9,107
4F62:  BCF    FD8.1
4F64:  MOVFF  03,118
4F68:  MOVFF  02,117
4F6C:  MOVFF  01,116
4F70:  MOVFF  00,115
4F74:  MOVFF  98,11C
4F78:  MOVFF  97,11B
4F7C:  MOVFF  96,11A
4F80:  MOVFF  95,119
4F84:  CALL   0F62
4F88:  MOVFF  108,FEA
4F8C:  MOVFF  107,FE9
4F90:  MOVFF  03,7C
4F94:  MOVFF  02,7B
4F98:  MOVFF  01,7A
4F9C:  MOVFF  00,79
....................     else if(negativo==20) 
4FA0:  BRA    500A
4FA2:  MOVF   31,W
4FA4:  SUBLW  14
4FA6:  BNZ   500A
....................       x_uno=sensores(1)-Diferencia; 
4FA8:  MOVLW  01
4FAA:  MOVLB  1
4FAC:  MOVWF  x13
4FAE:  MOVLB  0
4FB0:  CALL   3E60
4FB4:  MOVFF  00,103
4FB8:  MOVFF  01,104
4FBC:  MOVFF  02,105
4FC0:  MOVFF  03,106
4FC4:  MOVFF  FEA,108
4FC8:  MOVFF  FE9,107
4FCC:  BSF    FD8.1
4FCE:  MOVFF  03,118
4FD2:  MOVFF  02,117
4FD6:  MOVFF  01,116
4FDA:  MOVFF  00,115
4FDE:  MOVFF  98,11C
4FE2:  MOVFF  97,11B
4FE6:  MOVFF  96,11A
4FEA:  MOVFF  95,119
4FEE:  CALL   0F62
4FF2:  MOVFF  108,FEA
4FF6:  MOVFF  107,FE9
4FFA:  MOVFF  03,7C
4FFE:  MOVFF  02,7B
5002:  MOVFF  01,7A
5006:  MOVFF  00,79
....................      
....................     x_cuadrado=x_uno*x_uno; 
500A:  MOVFF  7C,11A
500E:  MOVFF  7B,119
5012:  MOVFF  7A,118
5016:  MOVFF  79,117
501A:  MOVFF  7C,11E
501E:  MOVFF  7B,11D
5022:  MOVFF  7A,11C
5026:  MOVFF  79,11B
502A:  CALL   3AF4
502E:  MOVFF  03,80
5032:  MOVFF  02,7F
5036:  MOVFF  01,7E
503A:  MOVFF  00,7D
....................     x_cubo=x_uno*x_cuadrado; 
503E:  MOVFF  7C,11A
5042:  MOVFF  7B,119
5046:  MOVFF  7A,118
504A:  MOVFF  79,117
504E:  MOVFF  80,11E
5052:  MOVFF  7F,11D
5056:  MOVFF  7E,11C
505A:  MOVFF  7D,11B
505E:  CALL   3AF4
5062:  MOVFF  03,84
5066:  MOVFF  02,83
506A:  MOVFF  01,82
506E:  MOVFF  00,81
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
5072:  MOVFF  84,11A
5076:  MOVFF  83,119
507A:  MOVFF  82,118
507E:  MOVFF  81,117
5082:  MOVFF  60,11E
5086:  MOVFF  5F,11D
508A:  MOVFF  5E,11C
508E:  MOVFF  5D,11B
5092:  CALL   3AF4
5096:  MOVFF  00,103
509A:  MOVFF  01,104
509E:  MOVFF  02,105
50A2:  MOVFF  03,106
50A6:  MOVFF  80,11A
50AA:  MOVFF  7F,119
50AE:  MOVFF  7E,118
50B2:  MOVFF  7D,117
50B6:  MOVFF  64,11E
50BA:  MOVFF  63,11D
50BE:  MOVFF  62,11C
50C2:  MOVFF  61,11B
50C6:  CALL   3AF4
50CA:  BCF    FD8.1
50CC:  MOVFF  106,118
50D0:  MOVFF  105,117
50D4:  MOVFF  104,116
50D8:  MOVFF  103,115
50DC:  MOVFF  03,11C
50E0:  MOVFF  02,11B
50E4:  MOVFF  01,11A
50E8:  MOVFF  00,119
50EC:  CALL   0F62
50F0:  MOVFF  00,103
50F4:  MOVFF  01,104
50F8:  MOVFF  02,105
50FC:  MOVFF  03,106
5100:  MOVFF  7C,11A
5104:  MOVFF  7B,119
5108:  MOVFF  7A,118
510C:  MOVFF  79,117
5110:  MOVFF  68,11E
5114:  MOVFF  67,11D
5118:  MOVFF  66,11C
511C:  MOVFF  65,11B
5120:  CALL   3AF4
5124:  BCF    FD8.1
5126:  MOVFF  106,118
512A:  MOVFF  105,117
512E:  MOVFF  104,116
5132:  MOVFF  103,115
5136:  MOVFF  03,11C
513A:  MOVFF  02,11B
513E:  MOVFF  01,11A
5142:  MOVFF  00,119
5146:  CALL   0F62
514A:  MOVFF  00,103
514E:  MOVFF  01,104
5152:  MOVFF  02,105
5156:  MOVFF  03,106
515A:  BCF    FD8.1
515C:  MOVFF  03,118
5160:  MOVFF  02,117
5164:  MOVFF  01,116
5168:  MOVFF  00,115
516C:  MOVFF  6C,11C
5170:  MOVFF  6B,11B
5174:  MOVFF  6A,11A
5178:  MOVFF  69,119
517C:  CALL   0F62
5180:  MOVFF  03,90
5184:  MOVFF  02,8F
5188:  MOVFF  01,8E
518C:  MOVFF  00,8D
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
5190:  BSF    FD8.1
5192:  MOVFF  90,118
5196:  MOVFF  8F,117
519A:  MOVFF  8E,116
519E:  MOVFF  8D,115
51A2:  MOVLW  0A
51A4:  MOVLB  1
51A6:  MOVWF  x1C
51A8:  MOVLW  D7
51AA:  MOVWF  x1B
51AC:  MOVLW  23
51AE:  MOVWF  x1A
51B0:  MOVLW  7B
51B2:  MOVWF  x19
51B4:  MOVLB  0
51B6:  CALL   0F62
51BA:  MOVFF  03,90
51BE:  MOVFF  02,8F
51C2:  MOVFF  01,8E
51C6:  MOVFF  00,8D
....................      
....................     if(Velocidad<0.0) 
51CA:  MOVFF  90,109
51CE:  MOVFF  8F,108
51D2:  MOVFF  8E,107
51D6:  MOVFF  8D,106
51DA:  MOVLB  1
51DC:  CLRF   x0D
51DE:  CLRF   x0C
51E0:  CLRF   x0B
51E2:  CLRF   x0A
51E4:  MOVLB  0
51E6:  CALL   166A
51EA:  BNC   51F4
....................       Velocidad=0.0; 
51EC:  CLRF   x90
51EE:  CLRF   x8F
51F0:  CLRF   x8E
51F2:  CLRF   x8D
....................       
....................      if(l>=media) 
51F4:  MOVLB  1
51F6:  MOVF   x02,W
51F8:  SUBWF  2B,W
51FA:  BNC   51FE
....................        l=0; 
51FC:  CLRF   2B
....................       
....................      promedio[l]=Velocidad;l++; 
51FE:  MOVF   2B,W
5200:  MULLW  04
5202:  MOVF   FF3,W
5204:  CLRF   03
5206:  ADDLW  A1
5208:  MOVWF  FE9
520A:  MOVLW  00
520C:  ADDWFC 03,W
520E:  MOVWF  FEA
5210:  MOVFF  8D,FEF
5214:  MOVFF  8E,FEC
5218:  MOVFF  8F,FEC
521C:  MOVFF  90,FEC
5220:  INCF   2B,F
....................      Flujo2=0; 
5222:  MOVLB  0
5224:  CLRF   x74
5226:  CLRF   x73
5228:  CLRF   x72
522A:  CLRF   x71
....................       
....................      for(h=0;h<=(media-1);h++){ 
522C:  CLRF   2D
522E:  MOVLW  01
5230:  MOVLB  1
5232:  SUBWF  x02,W
5234:  SUBWF  2D,W
5236:  BZ    523A
5238:  BC    52AA
....................         Flujo2+=promedio[h]; 
523A:  MOVF   2D,W
523C:  MULLW  04
523E:  MOVF   FF3,W
5240:  CLRF   03
5242:  ADDLW  A1
5244:  MOVWF  FE9
5246:  MOVLW  00
5248:  ADDWFC 03,W
524A:  MOVWF  FEA
524C:  MOVFF  FEF,00
5250:  MOVFF  FEC,01
5254:  MOVFF  FEC,02
5258:  MOVFF  FEC,03
525C:  MOVFF  FEA,104
5260:  MOVFF  FE9,103
5264:  BCF    FD8.1
5266:  MOVFF  74,118
526A:  MOVFF  73,117
526E:  MOVFF  72,116
5272:  MOVFF  71,115
5276:  MOVFF  03,11C
527A:  MOVFF  02,11B
527E:  MOVFF  01,11A
5282:  MOVFF  00,119
5286:  MOVLB  0
5288:  CALL   0F62
528C:  MOVFF  104,FEA
5290:  MOVFF  103,FE9
5294:  MOVFF  03,74
5298:  MOVFF  02,73
529C:  MOVFF  01,72
52A0:  MOVFF  00,71
....................      }  
52A4:  INCF   2D,F
52A6:  BRA    522E
52A8:  MOVLB  1
....................    
....................      Flujo2=(Flujo2/media)*Ajuste1; 
52AA:  CLRF   x19
52AC:  MOVFF  102,118
52B0:  MOVLB  0
52B2:  CALL   0DCE
52B6:  MOVFF  74,11A
52BA:  MOVFF  73,119
52BE:  MOVFF  72,118
52C2:  MOVFF  71,117
52C6:  MOVFF  03,11E
52CA:  MOVFF  02,11D
52CE:  MOVFF  01,11C
52D2:  MOVFF  00,11B
52D6:  CALL   0E04
52DA:  MOVFF  00,103
52DE:  MOVFF  01,104
52E2:  MOVFF  02,105
52E6:  MOVFF  03,106
52EA:  MOVFF  03,11A
52EE:  MOVFF  02,119
52F2:  MOVFF  01,118
52F6:  MOVFF  00,117
52FA:  MOVFF  9C,11E
52FE:  MOVFF  9B,11D
5302:  MOVFF  9A,11C
5306:  MOVFF  99,11B
530A:  CALL   3AF4
530E:  MOVFF  03,74
5312:  MOVFF  02,73
5316:  MOVFF  01,72
531A:  MOVFF  00,71
....................      return Flujo2; 
531E:  MOVFF  71,00
5322:  MOVFF  72,01
5326:  MOVFF  73,02
532A:  MOVFF  74,03
.................... } 
532E:  RETLW  00
....................  
.................... void controlar_flujo(void){ 
....................    if(Automa==20 && estadomv==1){ 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
....................       if(error<0.2&&error>-0.2){ 
....................       }else{ 
....................          if(error>0.0) 
....................             tmp+=1; 
....................                 
....................          if(error<-0.0) 
....................             tmp-=1;   
....................       } 
....................        
....................       if(tmp>251) 
....................          tmp=251; 
....................       if(tmp<4)          
....................          tmp=4;       
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Manual==20){ 
....................       tmp=251; 
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Semi==20){ 
....................       set_pwm1_duty (ValorSemi); 
....................    } 
.................... } 
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
.................... } 
....................  
.................... void SalidasOff(void){ 
....................    set_pwm1_duty(0); 
*
0B14:  CLRF   FBE
....................    Luz_Blanca_off; 
0B16:  BCF    F8A.4
0B18:  BCF    F93.4
....................    Motor_off; 
0B1A:  BCF    F8A.5
0B1C:  BCF    F93.5
....................    Aux_off; 
0B1E:  BCF    F8A.6
0B20:  BCF    F93.6
....................    Alarma_off; 
0B22:  BCF    F8A.7
0B24:  BCF    F93.7
.................... } 
0B26:  RETLW  00
....................  
.................... void ConfigInicial(void){ 
....................    setup_adc_ports(AN0_TO_AN1); 
*
0D80:  MOVF   FC1,W
0D82:  ANDLW  C0
0D84:  IORLW  0D
0D86:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0D88:  BCF    FC0.0
0D8A:  BSF    FC0.1
0D8C:  BCF    FC0.2
0D8E:  BSF    FC0.7
0D90:  BSF    FC2.0
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0D92:  MOVLW  85
0D94:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0D96:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_16, 255, 16);  
0D98:  MOVLW  78
0D9A:  IORLW  06
0D9C:  MOVWF  FCA
0D9E:  MOVLW  FF
0DA0:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
0DA2:  BCF    F94.2
0DA4:  BCF    F8B.2
0DA6:  BCF    F96.6
0DA8:  MOVLW  0C
0DAA:  MOVWF  FBD
0DAC:  CLRF   FB7
0DAE:  CLRF   FB6
....................    enable_interrupts(GLOBAL);    
0DB0:  MOVLW  C0
0DB2:  IORWF  FF2,F
....................    SalidasOff(); 
0DB4:  RCALL  0B14
....................    intensidadpantalla(0); 
0DB6:  MOVLB  1
0DB8:  CLRF   x02
0DBA:  MOVLB  0
0DBC:  RCALL  0B28
....................    lcd_init(); 
0DBE:  RCALL  0C0C
....................    printf(lcd_putc,"\f"); 
0DC0:  MOVLW  0C
0DC2:  MOVLB  1
0DC4:  MOVWF  x17
0DC6:  MOVLB  0
0DC8:  RCALL  0D02
.................... } 
0DCA:  GOTO   569A (RETURN)
....................  
.................... void LeeEEPROM(void){ 
.................... // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(100);delay_ms(20);  
*
11DA:  MOVFF  FF2,102
11DE:  BCF    FF2.7
11E0:  MOVLW  64
11E2:  MOVWF  FA9
11E4:  BCF    FA6.6
11E6:  BCF    FA6.7
11E8:  BSF    FA6.0
11EA:  MOVF   FA8,W
11EC:  MOVLB  1
11EE:  BTFSC  x02.7
11F0:  BSF    FF2.7
11F2:  MOVWF  4C
11F4:  MOVLW  14
11F6:  MOVWF  x1D
11F8:  MOVLB  0
11FA:  RCALL  0B3C
....................    contrasena[1]=read_eeprom(101);delay_ms(20); 
11FC:  MOVFF  FF2,102
1200:  BCF    FF2.7
1202:  MOVLW  65
1204:  MOVWF  FA9
1206:  BCF    FA6.6
1208:  BCF    FA6.7
120A:  BSF    FA6.0
120C:  MOVF   FA8,W
120E:  MOVLB  1
1210:  BTFSC  x02.7
1212:  BSF    FF2.7
1214:  MOVWF  4D
1216:  MOVLW  14
1218:  MOVWF  x1D
121A:  MOVLB  0
121C:  RCALL  0B3C
....................    contrasena[2]=read_eeprom(102);delay_ms(20);  
121E:  MOVFF  FF2,102
1222:  BCF    FF2.7
1224:  MOVLW  66
1226:  MOVWF  FA9
1228:  BCF    FA6.6
122A:  BCF    FA6.7
122C:  BSF    FA6.0
122E:  MOVF   FA8,W
1230:  MOVLB  1
1232:  BTFSC  x02.7
1234:  BSF    FF2.7
1236:  MOVWF  4E
1238:  MOVLW  14
123A:  MOVWF  x1D
123C:  MOVLB  0
123E:  RCALL  0B3C
....................    contrasena[3]=read_eeprom(103);delay_ms(20); 
1240:  MOVFF  FF2,102
1244:  BCF    FF2.7
1246:  MOVLW  67
1248:  MOVWF  FA9
124A:  BCF    FA6.6
124C:  BCF    FA6.7
124E:  BSF    FA6.0
1250:  MOVF   FA8,W
1252:  MOVLB  1
1254:  BTFSC  x02.7
1256:  BSF    FF2.7
1258:  MOVWF  4F
125A:  MOVLW  14
125C:  MOVWF  x1D
125E:  MOVLB  0
1260:  RCALL  0B3C
....................    estadoalarma=read_eeprom(5);delay_ms(20); 
1262:  MOVFF  FF2,102
1266:  BCF    FF2.7
1268:  MOVLW  05
126A:  MOVWF  FA9
126C:  BCF    FA6.6
126E:  BCF    FA6.7
1270:  BSF    FA6.0
1272:  MOVF   FA8,W
1274:  MOVLB  1
1276:  BTFSC  x02.7
1278:  BSF    FF2.7
127A:  MOVWF  01
127C:  BCF    42.2
127E:  BTFSC  01.0
1280:  BSF    42.2
1282:  MOVLW  14
1284:  MOVWF  x1D
1286:  MOVLB  0
1288:  RCALL  0B3C
....................    Manual=read_eeprom(10);delay_ms(20); 
128A:  MOVFF  FF2,102
128E:  BCF    FF2.7
1290:  MOVLW  0A
1292:  MOVWF  FA9
1294:  BCF    FA6.6
1296:  BCF    FA6.7
1298:  BSF    FA6.0
129A:  MOVF   FA8,W
129C:  MOVLB  1
129E:  BTFSC  x02.7
12A0:  BSF    FF2.7
12A2:  MOVWF  33
12A4:  MOVLW  14
12A6:  MOVWF  x1D
12A8:  MOVLB  0
12AA:  RCALL  0B3C
....................    Automa=read_eeprom(11);delay_ms(20); 
12AC:  MOVFF  FF2,102
12B0:  BCF    FF2.7
12B2:  MOVLW  0B
12B4:  MOVWF  FA9
12B6:  BCF    FA6.6
12B8:  BCF    FA6.7
12BA:  BSF    FA6.0
12BC:  MOVF   FA8,W
12BE:  MOVLB  1
12C0:  BTFSC  x02.7
12C2:  BSF    FF2.7
12C4:  MOVWF  32
12C6:  MOVLW  14
12C8:  MOVWF  x1D
12CA:  MOVLB  0
12CC:  RCALL  0B3C
....................    Semi=read_eeprom(12);delay_ms(20); 
12CE:  MOVFF  FF2,102
12D2:  BCF    FF2.7
12D4:  MOVLW  0C
12D6:  MOVWF  FA9
12D8:  BCF    FA6.6
12DA:  BCF    FA6.7
12DC:  BSF    FA6.0
12DE:  MOVF   FA8,W
12E0:  MOVLB  1
12E2:  BTFSC  x02.7
12E4:  BSF    FF2.7
12E6:  MOVWF  34
12E8:  MOVLW  14
12EA:  MOVWF  x1D
12EC:  MOVLB  0
12EE:  RCALL  0B3C
....................    ValorSemi=read_eeprom(13);delay_ms(20); 
12F0:  MOVFF  FF2,102
12F4:  BCF    FF2.7
12F6:  MOVLW  0D
12F8:  MOVWF  FA9
12FA:  BCF    FA6.6
12FC:  BCF    FA6.7
12FE:  BSF    FA6.0
1300:  MOVF   FA8,W
1302:  MOVLB  1
1304:  BTFSC  x02.7
1306:  BSF    FF2.7
1308:  MOVWF  35
130A:  MOVLW  14
130C:  MOVWF  x1D
130E:  MOVLB  0
1310:  RCALL  0B3C
....................    tmp=ValorSemi; 
1312:  MOVFF  35,2F
....................  
....................    purga_minutos=read_eeprom(20);delay_ms(20); 
1316:  MOVFF  FF2,102
131A:  BCF    FF2.7
131C:  MOVLW  14
131E:  MOVWF  FA9
1320:  BCF    FA6.6
1322:  BCF    FA6.7
1324:  BSF    FA6.0
1326:  MOVF   FA8,W
1328:  MOVLB  1
132A:  BTFSC  x02.7
132C:  BSF    FF2.7
132E:  MOVWF  26
1330:  MOVLW  14
1332:  MOVWF  x1D
1334:  MOVLB  0
1336:  RCALL  0B3C
....................    purga_segundos=read_eeprom(21);delay_ms(20); 
1338:  MOVFF  FF2,102
133C:  BCF    FF2.7
133E:  MOVLW  15
1340:  MOVWF  FA9
1342:  BCF    FA6.6
1344:  BCF    FA6.7
1346:  BSF    FA6.0
1348:  MOVF   FA8,W
134A:  MOVLB  1
134C:  BTFSC  x02.7
134E:  BSF    FF2.7
1350:  MOVWF  3B
1352:  MOVLW  14
1354:  MOVWF  x1D
1356:  MOVLB  0
1358:  CALL   0B3C
....................    ppurga_minutos=read_eeprom(22);delay_ms(20); 
135C:  MOVFF  FF2,102
1360:  BCF    FF2.7
1362:  MOVLW  16
1364:  MOVWF  FA9
1366:  BCF    FA6.6
1368:  BCF    FA6.7
136A:  BSF    FA6.0
136C:  MOVF   FA8,W
136E:  MOVLB  1
1370:  BTFSC  x02.7
1372:  BSF    FF2.7
1374:  MOVWF  3F
1376:  MOVLW  14
1378:  MOVWF  x1D
137A:  MOVLB  0
137C:  CALL   0B3C
....................    ppurga_segundos=read_eeprom(23);delay_ms(20); 
1380:  MOVFF  FF2,102
1384:  BCF    FF2.7
1386:  MOVLW  17
1388:  MOVWF  FA9
138A:  BCF    FA6.6
138C:  BCF    FA6.7
138E:  BSF    FA6.0
1390:  MOVF   FA8,W
1392:  MOVLB  1
1394:  BTFSC  x02.7
1396:  BSF    FF2.7
1398:  MOVWF  3D
139A:  MOVLW  14
139C:  MOVWF  x1D
139E:  MOVLB  0
13A0:  CALL   0B3C
....................        
....................    Entero=read_eeprom(25);delay_ms(20);//Decimal1=read_eeprom(26); 
13A4:  MOVFF  FF2,102
13A8:  BCF    FF2.7
13AA:  MOVLW  19
13AC:  MOVWF  FA9
13AE:  BCF    FA6.6
13B0:  BCF    FA6.7
13B2:  BSF    FA6.0
13B4:  MOVF   FA8,W
13B6:  MOVLB  1
13B8:  BTFSC  x02.7
13BA:  BSF    FF2.7
13BC:  MOVWF  28
13BE:  MOVLW  14
13C0:  MOVWF  x1D
13C2:  MOVLB  0
13C4:  CALL   0B3C
....................    Temporal=read_eeprom(26);delay_ms(20); 
13C8:  MOVFF  FF2,102
13CC:  BCF    FF2.7
13CE:  MOVLW  1A
13D0:  MOVWF  FA9
13D2:  BCF    FA6.6
13D4:  BCF    FA6.7
13D6:  BSF    FA6.0
13D8:  MOVF   FA8,W
13DA:  MOVLB  1
13DC:  BTFSC  x02.7
13DE:  BSF    FF2.7
13E0:  CLRF   x19
13E2:  MOVWF  x18
13E4:  MOVLB  0
13E6:  RCALL  0DCE
13E8:  MOVFF  03,88
13EC:  MOVFF  02,87
13F0:  MOVFF  01,86
13F4:  MOVFF  00,85
13F8:  MOVLW  14
13FA:  MOVLB  1
13FC:  MOVWF  x1D
13FE:  MOVLB  0
1400:  CALL   0B3C
....................    Temporal=Temporal/10.0; 
1404:  MOVFF  88,11A
1408:  MOVFF  87,119
140C:  MOVFF  86,118
1410:  MOVFF  85,117
1414:  MOVLB  1
1416:  CLRF   x1E
1418:  CLRF   x1D
141A:  MOVLW  20
141C:  MOVWF  x1C
141E:  MOVLW  82
1420:  MOVWF  x1B
1422:  MOVLB  0
1424:  RCALL  0E04
1426:  MOVFF  03,88
142A:  MOVFF  02,87
142E:  MOVFF  01,86
1432:  MOVFF  00,85
....................    Ajuste1=Entero+Temporal; 
1436:  MOVLB  1
1438:  CLRF   x19
143A:  MOVFF  28,118
143E:  MOVLB  0
1440:  RCALL  0DCE
1442:  BCF    FD8.1
1444:  MOVFF  03,118
1448:  MOVFF  02,117
144C:  MOVFF  01,116
1450:  MOVFF  00,115
1454:  MOVFF  88,11C
1458:  MOVFF  87,11B
145C:  MOVFF  86,11A
1460:  MOVFF  85,119
1464:  RCALL  0F62
1466:  MOVFF  03,9C
146A:  MOVFF  02,9B
146E:  MOVFF  01,9A
1472:  MOVFF  00,99
....................     
....................    Entero=read_eeprom(40);delay_ms(20);//Decimal2=read_eeprom(41); 
1476:  MOVFF  FF2,102
147A:  BCF    FF2.7
147C:  MOVLW  28
147E:  MOVWF  FA9
1480:  BCF    FA6.6
1482:  BCF    FA6.7
1484:  BSF    FA6.0
1486:  MOVF   FA8,W
1488:  MOVLB  1
148A:  BTFSC  x02.7
148C:  BSF    FF2.7
148E:  MOVWF  28
1490:  MOVLW  14
1492:  MOVWF  x1D
1494:  MOVLB  0
1496:  CALL   0B3C
....................    Temporal=read_eeprom(41);delay_ms(20); 
149A:  MOVFF  FF2,102
149E:  BCF    FF2.7
14A0:  MOVLW  29
14A2:  MOVWF  FA9
14A4:  BCF    FA6.6
14A6:  BCF    FA6.7
14A8:  BSF    FA6.0
14AA:  MOVF   FA8,W
14AC:  MOVLB  1
14AE:  BTFSC  x02.7
14B0:  BSF    FF2.7
14B2:  CLRF   x19
14B4:  MOVWF  x18
14B6:  MOVLB  0
14B8:  RCALL  0DCE
14BA:  MOVFF  03,88
14BE:  MOVFF  02,87
14C2:  MOVFF  01,86
14C6:  MOVFF  00,85
14CA:  MOVLW  14
14CC:  MOVLB  1
14CE:  MOVWF  x1D
14D0:  MOVLB  0
14D2:  CALL   0B3C
....................    Temporal=Temporal/10.0; 
14D6:  MOVFF  88,11A
14DA:  MOVFF  87,119
14DE:  MOVFF  86,118
14E2:  MOVFF  85,117
14E6:  MOVLB  1
14E8:  CLRF   x1E
14EA:  CLRF   x1D
14EC:  MOVLW  20
14EE:  MOVWF  x1C
14F0:  MOVLW  82
14F2:  MOVWF  x1B
14F4:  MOVLB  0
14F6:  RCALL  0E04
14F8:  MOVFF  03,88
14FC:  MOVFF  02,87
1500:  MOVFF  01,86
1504:  MOVFF  00,85
....................    //setpoint=Entero+Temporal; 
....................    setpoint=Entero; 
1508:  MOVFF  28,41
....................    MediaMovil=read_eeprom(42);delay_ms(20); 
150C:  MOVFF  FF2,102
1510:  BCF    FF2.7
1512:  MOVLW  2A
1514:  MOVWF  FA9
1516:  BCF    FA6.6
1518:  BCF    FA6.7
151A:  BSF    FA6.0
151C:  MOVF   FA8,W
151E:  MOVLB  1
1520:  BTFSC  x02.7
1522:  BSF    FF2.7
1524:  MOVWF  30
1526:  MOVLW  14
1528:  MOVWF  x1D
152A:  MOVLB  0
152C:  CALL   0B3C
....................    
....................    negativo=read_eeprom(50);delay_ms(20); 
1530:  MOVFF  FF2,102
1534:  BCF    FF2.7
1536:  MOVLW  32
1538:  MOVWF  FA9
153A:  BCF    FA6.6
153C:  BCF    FA6.7
153E:  BSF    FA6.0
1540:  MOVF   FA8,W
1542:  MOVLB  1
1544:  BTFSC  x02.7
1546:  BSF    FF2.7
1548:  MOVWF  31
154A:  MOVLW  14
154C:  MOVWF  x1D
154E:  MOVLB  0
1550:  CALL   0B3C
....................     
....................    Entero1=read_eeprom(60);delay_ms(20);//Decimal2=read_eeprom(41); 
1554:  MOVFF  FF2,102
1558:  BCF    FF2.7
155A:  MOVLW  3C
155C:  MOVWF  FA9
155E:  BCF    FA6.6
1560:  BCF    FA6.7
1562:  BSF    FA6.0
1564:  MOVF   FA8,W
1566:  MOVLB  1
1568:  BTFSC  x02.7
156A:  BSF    FF2.7
156C:  MOVWF  2A
156E:  MOVLW  14
1570:  MOVWF  x1D
1572:  MOVLB  0
1574:  CALL   0B3C
....................    Temporal1=read_eeprom(61);delay_ms(20); 
1578:  MOVFF  FF2,102
157C:  BCF    FF2.7
157E:  MOVLW  3D
1580:  MOVWF  FA9
1582:  BCF    FA6.6
1584:  BCF    FA6.7
1586:  BSF    FA6.0
1588:  MOVF   FA8,W
158A:  MOVLB  1
158C:  BTFSC  x02.7
158E:  BSF    FF2.7
1590:  CLRF   x19
1592:  MOVWF  x18
1594:  MOVLB  0
1596:  RCALL  0DCE
1598:  MOVFF  03,94
159C:  MOVFF  02,93
15A0:  MOVFF  01,92
15A4:  MOVFF  00,91
15A8:  MOVLW  14
15AA:  MOVLB  1
15AC:  MOVWF  x1D
15AE:  MOVLB  0
15B0:  CALL   0B3C
....................    Diferencia=make16(Temporal1,Entero1); 
15B4:  MOVFF  91,119
15B8:  MOVFF  2A,118
15BC:  MOVLB  0
15BE:  RCALL  0DCE
15C0:  MOVFF  03,98
15C4:  MOVFF  02,97
15C8:  MOVFF  01,96
15CC:  MOVFF  00,95
....................     
....................    segundos=read_eeprom(70);delay_ms(20); 
15D0:  MOVFF  FF2,102
15D4:  BCF    FF2.7
15D6:  MOVLW  46
15D8:  MOVWF  FA9
15DA:  BCF    FA6.6
15DC:  BCF    FA6.7
15DE:  BSF    FA6.0
15E0:  MOVF   FA8,W
15E2:  MOVLB  1
15E4:  BTFSC  x02.7
15E6:  BSF    FF2.7
15E8:  MOVWF  37
15EA:  MOVLW  14
15EC:  MOVWF  x1D
15EE:  MOVLB  0
15F0:  CALL   0B3C
....................    minutos=read_eeprom(71);delay_ms(20); 
15F4:  MOVFF  FF2,102
15F8:  BCF    FF2.7
15FA:  MOVLW  47
15FC:  MOVWF  FA9
15FE:  BCF    FA6.6
1600:  BCF    FA6.7
1602:  BSF    FA6.0
1604:  MOVF   FA8,W
1606:  MOVLB  1
1608:  BTFSC  x02.7
160A:  BSF    FF2.7
160C:  MOVWF  38
160E:  MOVLW  14
1610:  MOVWF  x1D
1612:  MOVLB  0
1614:  CALL   0B3C
....................    horas=read_eeprom(72);delay_ms(20); 
1618:  MOVFF  FF2,102
161C:  BCF    FF2.7
161E:  MOVLW  48
1620:  MOVWF  FA9
1622:  BCF    FA6.6
1624:  BCF    FA6.7
1626:  BSF    FA6.0
1628:  MOVF   FA8,W
162A:  MOVLB  1
162C:  BTFSC  x02.7
162E:  BSF    FF2.7
1630:  MOVWF  39
1632:  MOVLW  14
1634:  MOVWF  x1D
1636:  MOVLB  0
1638:  CALL   0B3C
....................    flag_filtro=read_eeprom(73);delay_ms(20); 
163C:  MOVFF  FF2,102
1640:  BCF    FF2.7
1642:  MOVLW  49
1644:  MOVWF  FA9
1646:  BCF    FA6.6
1648:  BCF    FA6.7
164A:  BSF    FA6.0
164C:  MOVF   FA8,W
164E:  MOVLB  1
1650:  BTFSC  x02.7
1652:  BSF    FF2.7
1654:  MOVWF  01
1656:  BCF    43.2
1658:  BTFSC  01.0
165A:  BSF    43.2
165C:  MOVLW  14
165E:  MOVWF  x1D
1660:  MOVLB  0
1662:  CALL   0B3C
.................... } 
1666:  GOTO   569E (RETURN)
....................  
.................... void LimitaValores(void){ 
....................    if(contrasena[0]>9 || contrasena[0]<0){ 
*
16E4:  BTFSC  4C.7
16E6:  BRA    16EE
16E8:  MOVF   4C,W
16EA:  SUBLW  09
16EC:  BNC   16F4
16EE:  BTFSC  4C.7
16F0:  BRA    16F4
16F2:  BRA    172A
....................       contrasena[0]=0;write_eeprom(100,0);delay_ms(20); 
16F4:  CLRF   4C
16F6:  MOVLW  64
16F8:  MOVWF  FA9
16FA:  CLRF   FA8
16FC:  BCF    FA6.6
16FE:  BCF    FA6.7
1700:  BSF    FA6.2
1702:  MOVF   FF2,W
1704:  MOVWF  00
1706:  BCF    FF2.7
1708:  MOVLB  F
170A:  MOVLW  55
170C:  MOVWF  FA7
170E:  MOVLW  AA
1710:  MOVWF  FA7
1712:  BSF    FA6.1
1714:  BTFSC  FA6.1
1716:  BRA    1714
1718:  BCF    FA6.2
171A:  MOVF   00,W
171C:  IORWF  FF2,F
171E:  MOVLW  14
1720:  MOVLB  1
1722:  MOVWF  x1D
1724:  MOVLB  0
1726:  CALL   0B3C
....................    } 
....................    if(contrasena[1]>9 || contrasena[1]<0){ 
172A:  BTFSC  4D.7
172C:  BRA    1734
172E:  MOVF   4D,W
1730:  SUBLW  09
1732:  BNC   173A
1734:  BTFSC  4D.7
1736:  BRA    173A
1738:  BRA    1770
....................       contrasena[1]=0;write_eeprom(101,0);delay_ms(20); 
173A:  CLRF   4D
173C:  MOVLW  65
173E:  MOVWF  FA9
1740:  CLRF   FA8
1742:  BCF    FA6.6
1744:  BCF    FA6.7
1746:  BSF    FA6.2
1748:  MOVF   FF2,W
174A:  MOVWF  00
174C:  BCF    FF2.7
174E:  MOVLB  F
1750:  MOVLW  55
1752:  MOVWF  FA7
1754:  MOVLW  AA
1756:  MOVWF  FA7
1758:  BSF    FA6.1
175A:  BTFSC  FA6.1
175C:  BRA    175A
175E:  BCF    FA6.2
1760:  MOVF   00,W
1762:  IORWF  FF2,F
1764:  MOVLW  14
1766:  MOVLB  1
1768:  MOVWF  x1D
176A:  MOVLB  0
176C:  CALL   0B3C
....................    } 
....................    if(contrasena[2]>9 || contrasena[2]<0){ 
1770:  BTFSC  4E.7
1772:  BRA    177A
1774:  MOVF   4E,W
1776:  SUBLW  09
1778:  BNC   1780
177A:  BTFSC  4E.7
177C:  BRA    1780
177E:  BRA    17B6
....................       contrasena[2]=0;write_eeprom(102,0);delay_ms(20); 
1780:  CLRF   4E
1782:  MOVLW  66
1784:  MOVWF  FA9
1786:  CLRF   FA8
1788:  BCF    FA6.6
178A:  BCF    FA6.7
178C:  BSF    FA6.2
178E:  MOVF   FF2,W
1790:  MOVWF  00
1792:  BCF    FF2.7
1794:  MOVLB  F
1796:  MOVLW  55
1798:  MOVWF  FA7
179A:  MOVLW  AA
179C:  MOVWF  FA7
179E:  BSF    FA6.1
17A0:  BTFSC  FA6.1
17A2:  BRA    17A0
17A4:  BCF    FA6.2
17A6:  MOVF   00,W
17A8:  IORWF  FF2,F
17AA:  MOVLW  14
17AC:  MOVLB  1
17AE:  MOVWF  x1D
17B0:  MOVLB  0
17B2:  CALL   0B3C
....................    } 
....................    if(contrasena[3]>9 || contrasena[3]<0){ 
17B6:  BTFSC  4F.7
17B8:  BRA    17C0
17BA:  MOVF   4F,W
17BC:  SUBLW  09
17BE:  BNC   17C6
17C0:  BTFSC  4F.7
17C2:  BRA    17C6
17C4:  BRA    17FC
....................       contrasena[3]=0;write_eeprom(103,0);delay_ms(20); 
17C6:  CLRF   4F
17C8:  MOVLW  67
17CA:  MOVWF  FA9
17CC:  CLRF   FA8
17CE:  BCF    FA6.6
17D0:  BCF    FA6.7
17D2:  BSF    FA6.2
17D4:  MOVF   FF2,W
17D6:  MOVWF  00
17D8:  BCF    FF2.7
17DA:  MOVLB  F
17DC:  MOVLW  55
17DE:  MOVWF  FA7
17E0:  MOVLW  AA
17E2:  MOVWF  FA7
17E4:  BSF    FA6.1
17E6:  BTFSC  FA6.1
17E8:  BRA    17E6
17EA:  BCF    FA6.2
17EC:  MOVF   00,W
17EE:  IORWF  FF2,F
17F0:  MOVLW  14
17F2:  MOVLB  1
17F4:  MOVWF  x1D
17F6:  MOVLB  0
17F8:  CALL   0B3C
....................    } 
....................    if(estadoalarma>1){ 
17FC:  MOVLW  00
17FE:  BTFSC  42.2
1800:  MOVLW  01
1802:  SUBLW  01
1804:  BC    183E
....................       estadoalarma=1;write_eeprom(5,1);delay_ms(20); 
1806:  BSF    42.2
1808:  MOVLW  05
180A:  MOVWF  FA9
180C:  MOVLW  01
180E:  MOVWF  FA8
1810:  BCF    FA6.6
1812:  BCF    FA6.7
1814:  BSF    FA6.2
1816:  MOVF   FF2,W
1818:  MOVWF  00
181A:  BCF    FF2.7
181C:  MOVLB  F
181E:  MOVLW  55
1820:  MOVWF  FA7
1822:  MOVLW  AA
1824:  MOVWF  FA7
1826:  BSF    FA6.1
1828:  BTFSC  FA6.1
182A:  BRA    1828
182C:  BCF    FA6.2
182E:  MOVF   00,W
1830:  IORWF  FF2,F
1832:  MOVLW  14
1834:  MOVLB  1
1836:  MOVWF  x1D
1838:  MOVLB  0
183A:  CALL   0B3C
....................    } 
....................    if(Manual>20){ 
183E:  MOVF   33,W
1840:  SUBLW  14
1842:  BC    187E
....................       Manual=20;write_eeprom(10,20);delay_ms(20); 
1844:  MOVLW  14
1846:  MOVWF  33
1848:  MOVLW  0A
184A:  MOVWF  FA9
184C:  MOVLW  14
184E:  MOVWF  FA8
1850:  BCF    FA6.6
1852:  BCF    FA6.7
1854:  BSF    FA6.2
1856:  MOVF   FF2,W
1858:  MOVWF  00
185A:  BCF    FF2.7
185C:  MOVLB  F
185E:  MOVLW  55
1860:  MOVWF  FA7
1862:  MOVLW  AA
1864:  MOVWF  FA7
1866:  BSF    FA6.1
1868:  BTFSC  FA6.1
186A:  BRA    1868
186C:  BCF    FA6.2
186E:  MOVF   00,W
1870:  IORWF  FF2,F
1872:  MOVLW  14
1874:  MOVLB  1
1876:  MOVWF  x1D
1878:  MOVLB  0
187A:  CALL   0B3C
....................    } 
....................    if(Automa>20){ 
187E:  MOVF   32,W
1880:  SUBLW  14
1882:  BC    18BE
....................       Manual=10;write_eeprom(11,10);delay_ms(20); 
1884:  MOVLW  0A
1886:  MOVWF  33
1888:  MOVLW  0B
188A:  MOVWF  FA9
188C:  MOVLW  0A
188E:  MOVWF  FA8
1890:  BCF    FA6.6
1892:  BCF    FA6.7
1894:  BSF    FA6.2
1896:  MOVF   FF2,W
1898:  MOVWF  00
189A:  BCF    FF2.7
189C:  MOVLB  F
189E:  MOVLW  55
18A0:  MOVWF  FA7
18A2:  MOVLW  AA
18A4:  MOVWF  FA7
18A6:  BSF    FA6.1
18A8:  BTFSC  FA6.1
18AA:  BRA    18A8
18AC:  BCF    FA6.2
18AE:  MOVF   00,W
18B0:  IORWF  FF2,F
18B2:  MOVLW  14
18B4:  MOVLB  1
18B6:  MOVWF  x1D
18B8:  MOVLB  0
18BA:  CALL   0B3C
....................    } 
....................    if(Semi>20){ 
18BE:  MOVF   34,W
18C0:  SUBLW  14
18C2:  BC    18FE
....................       Semi=10;write_eeprom(12,10);delay_ms(20); 
18C4:  MOVLW  0A
18C6:  MOVWF  34
18C8:  MOVLW  0C
18CA:  MOVWF  FA9
18CC:  MOVLW  0A
18CE:  MOVWF  FA8
18D0:  BCF    FA6.6
18D2:  BCF    FA6.7
18D4:  BSF    FA6.2
18D6:  MOVF   FF2,W
18D8:  MOVWF  00
18DA:  BCF    FF2.7
18DC:  MOVLB  F
18DE:  MOVLW  55
18E0:  MOVWF  FA7
18E2:  MOVLW  AA
18E4:  MOVWF  FA7
18E6:  BSF    FA6.1
18E8:  BTFSC  FA6.1
18EA:  BRA    18E8
18EC:  BCF    FA6.2
18EE:  MOVF   00,W
18F0:  IORWF  FF2,F
18F2:  MOVLW  14
18F4:  MOVLB  1
18F6:  MOVWF  x1D
18F8:  MOVLB  0
18FA:  CALL   0B3C
....................    } 
....................    if(purga_minutos>59){ 
18FE:  MOVF   26,W
1900:  SUBLW  3B
1902:  BC    193E
....................       purga_minutos=2;write_eeprom(20,2);delay_ms(20); 
1904:  MOVLW  02
1906:  MOVWF  26
1908:  MOVLW  14
190A:  MOVWF  FA9
190C:  MOVLW  02
190E:  MOVWF  FA8
1910:  BCF    FA6.6
1912:  BCF    FA6.7
1914:  BSF    FA6.2
1916:  MOVF   FF2,W
1918:  MOVWF  00
191A:  BCF    FF2.7
191C:  MOVLB  F
191E:  MOVLW  55
1920:  MOVWF  FA7
1922:  MOVLW  AA
1924:  MOVWF  FA7
1926:  BSF    FA6.1
1928:  BTFSC  FA6.1
192A:  BRA    1928
192C:  BCF    FA6.2
192E:  MOVF   00,W
1930:  IORWF  FF2,F
1932:  MOVLW  14
1934:  MOVLB  1
1936:  MOVWF  x1D
1938:  MOVLB  0
193A:  CALL   0B3C
....................    } 
....................    if(purga_segundos>59){ 
193E:  MOVF   3B,W
1940:  SUBLW  3B
1942:  BC    197A
....................       purga_segundos=0;write_eeprom(21,0);delay_ms(20); 
1944:  CLRF   3B
1946:  MOVLW  15
1948:  MOVWF  FA9
194A:  CLRF   FA8
194C:  BCF    FA6.6
194E:  BCF    FA6.7
1950:  BSF    FA6.2
1952:  MOVF   FF2,W
1954:  MOVWF  00
1956:  BCF    FF2.7
1958:  MOVLB  F
195A:  MOVLW  55
195C:  MOVWF  FA7
195E:  MOVLW  AA
1960:  MOVWF  FA7
1962:  BSF    FA6.1
1964:  BTFSC  FA6.1
1966:  BRA    1964
1968:  BCF    FA6.2
196A:  MOVF   00,W
196C:  IORWF  FF2,F
196E:  MOVLW  14
1970:  MOVLB  1
1972:  MOVWF  x1D
1974:  MOVLB  0
1976:  CALL   0B3C
....................    } 
....................    if(ppurga_minutos>59){ 
197A:  MOVF   3F,W
197C:  SUBLW  3B
197E:  BC    19BA
....................       ppurga_minutos=2;write_eeprom(22,2);delay_ms(20); 
1980:  MOVLW  02
1982:  MOVWF  3F
1984:  MOVLW  16
1986:  MOVWF  FA9
1988:  MOVLW  02
198A:  MOVWF  FA8
198C:  BCF    FA6.6
198E:  BCF    FA6.7
1990:  BSF    FA6.2
1992:  MOVF   FF2,W
1994:  MOVWF  00
1996:  BCF    FF2.7
1998:  MOVLB  F
199A:  MOVLW  55
199C:  MOVWF  FA7
199E:  MOVLW  AA
19A0:  MOVWF  FA7
19A2:  BSF    FA6.1
19A4:  BTFSC  FA6.1
19A6:  BRA    19A4
19A8:  BCF    FA6.2
19AA:  MOVF   00,W
19AC:  IORWF  FF2,F
19AE:  MOVLW  14
19B0:  MOVLB  1
19B2:  MOVWF  x1D
19B4:  MOVLB  0
19B6:  CALL   0B3C
....................    } 
....................    if(ppurga_segundos>59){ 
19BA:  MOVF   3D,W
19BC:  SUBLW  3B
19BE:  BC    19F6
....................       ppurga_segundos=0;write_eeprom(23,0);delay_ms(20); 
19C0:  CLRF   3D
19C2:  MOVLW  17
19C4:  MOVWF  FA9
19C6:  CLRF   FA8
19C8:  BCF    FA6.6
19CA:  BCF    FA6.7
19CC:  BSF    FA6.2
19CE:  MOVF   FF2,W
19D0:  MOVWF  00
19D2:  BCF    FF2.7
19D4:  MOVLB  F
19D6:  MOVLW  55
19D8:  MOVWF  FA7
19DA:  MOVLW  AA
19DC:  MOVWF  FA7
19DE:  BSF    FA6.1
19E0:  BTFSC  FA6.1
19E2:  BRA    19E0
19E4:  BCF    FA6.2
19E6:  MOVF   00,W
19E8:  IORWF  FF2,F
19EA:  MOVLW  14
19EC:  MOVLB  1
19EE:  MOVWF  x1D
19F0:  MOVLB  0
19F2:  CALL   0B3C
....................    } 
....................    if(Ajuste1>20.0){ 
19F6:  MOVLB  1
19F8:  CLRF   x09
19FA:  CLRF   x08
19FC:  MOVLW  20
19FE:  MOVWF  x07
1A00:  MOVLW  83
1A02:  MOVWF  x06
1A04:  MOVFF  9C,10D
1A08:  MOVFF  9B,10C
1A0C:  MOVFF  9A,10B
1A10:  MOVFF  99,10A
1A14:  MOVLB  0
1A16:  RCALL  166A
1A18:  BNC   1A8E
....................       Ajuste1=1.0;write_eeprom(25,1);delay_ms(20);write_eeprom(26,0);delay_ms(20); 
1A1A:  CLRF   x9C
1A1C:  CLRF   x9B
1A1E:  CLRF   x9A
1A20:  MOVLW  7F
1A22:  MOVWF  x99
1A24:  MOVLW  19
1A26:  MOVWF  FA9
1A28:  MOVLW  01
1A2A:  MOVWF  FA8
1A2C:  BCF    FA6.6
1A2E:  BCF    FA6.7
1A30:  BSF    FA6.2
1A32:  MOVF   FF2,W
1A34:  MOVWF  00
1A36:  BCF    FF2.7
1A38:  MOVLB  F
1A3A:  MOVLW  55
1A3C:  MOVWF  FA7
1A3E:  MOVLW  AA
1A40:  MOVWF  FA7
1A42:  BSF    FA6.1
1A44:  BTFSC  FA6.1
1A46:  BRA    1A44
1A48:  BCF    FA6.2
1A4A:  MOVF   00,W
1A4C:  IORWF  FF2,F
1A4E:  MOVLW  14
1A50:  MOVLB  1
1A52:  MOVWF  x1D
1A54:  MOVLB  0
1A56:  CALL   0B3C
1A5A:  MOVLW  1A
1A5C:  MOVWF  FA9
1A5E:  CLRF   FA8
1A60:  BCF    FA6.6
1A62:  BCF    FA6.7
1A64:  BSF    FA6.2
1A66:  MOVF   FF2,W
1A68:  MOVWF  00
1A6A:  BCF    FF2.7
1A6C:  MOVLB  F
1A6E:  MOVLW  55
1A70:  MOVWF  FA7
1A72:  MOVLW  AA
1A74:  MOVWF  FA7
1A76:  BSF    FA6.1
1A78:  BTFSC  FA6.1
1A7A:  BRA    1A78
1A7C:  BCF    FA6.2
1A7E:  MOVF   00,W
1A80:  IORWF  FF2,F
1A82:  MOVLW  14
1A84:  MOVLB  1
1A86:  MOVWF  x1D
1A88:  MOVLB  0
1A8A:  CALL   0B3C
....................    } 
....................    if(MediaMovil>12){ 
1A8E:  MOVF   30,W
1A90:  SUBLW  0C
1A92:  BC    1ACE
....................       MediaMovil=10;write_eeprom(42,10);delay_ms(20); 
1A94:  MOVLW  0A
1A96:  MOVWF  30
1A98:  MOVLW  2A
1A9A:  MOVWF  FA9
1A9C:  MOVLW  0A
1A9E:  MOVWF  FA8
1AA0:  BCF    FA6.6
1AA2:  BCF    FA6.7
1AA4:  BSF    FA6.2
1AA6:  MOVF   FF2,W
1AA8:  MOVWF  00
1AAA:  BCF    FF2.7
1AAC:  MOVLB  F
1AAE:  MOVLW  55
1AB0:  MOVWF  FA7
1AB2:  MOVLW  AA
1AB4:  MOVWF  FA7
1AB6:  BSF    FA6.1
1AB8:  BTFSC  FA6.1
1ABA:  BRA    1AB8
1ABC:  BCF    FA6.2
1ABE:  MOVF   00,W
1AC0:  IORWF  FF2,F
1AC2:  MOVLW  14
1AC4:  MOVLB  1
1AC6:  MOVWF  x1D
1AC8:  MOVLB  0
1ACA:  CALL   0B3C
....................    } 
....................    if(negativo>20){ 
1ACE:  MOVF   31,W
1AD0:  SUBLW  14
1AD2:  BC    1B0E
....................       negativo=10;write_eeprom(50,10);delay_ms(20); 
1AD4:  MOVLW  0A
1AD6:  MOVWF  31
1AD8:  MOVLW  32
1ADA:  MOVWF  FA9
1ADC:  MOVLW  0A
1ADE:  MOVWF  FA8
1AE0:  BCF    FA6.6
1AE2:  BCF    FA6.7
1AE4:  BSF    FA6.2
1AE6:  MOVF   FF2,W
1AE8:  MOVWF  00
1AEA:  BCF    FF2.7
1AEC:  MOVLB  F
1AEE:  MOVLW  55
1AF0:  MOVWF  FA7
1AF2:  MOVLW  AA
1AF4:  MOVWF  FA7
1AF6:  BSF    FA6.1
1AF8:  BTFSC  FA6.1
1AFA:  BRA    1AF8
1AFC:  BCF    FA6.2
1AFE:  MOVF   00,W
1B00:  IORWF  FF2,F
1B02:  MOVLW  14
1B04:  MOVLB  1
1B06:  MOVWF  x1D
1B08:  MOVLB  0
1B0A:  CALL   0B3C
....................    } 
....................    if(Diferencia>600){ 
1B0E:  MOVLB  1
1B10:  CLRF   x09
1B12:  CLRF   x08
1B14:  MOVLW  16
1B16:  MOVWF  x07
1B18:  MOVLW  88
1B1A:  MOVWF  x06
1B1C:  MOVFF  98,10D
1B20:  MOVFF  97,10C
1B24:  MOVFF  96,10B
1B28:  MOVFF  95,10A
1B2C:  MOVLB  0
1B2E:  RCALL  166A
1B30:  BNC   1BA2
....................       Diferencia=0;write_eeprom(60,0);delay_ms(20);write_eeprom(61,0);delay_ms(20); 
1B32:  CLRF   x98
1B34:  CLRF   x97
1B36:  CLRF   x96
1B38:  CLRF   x95
1B3A:  MOVLW  3C
1B3C:  MOVWF  FA9
1B3E:  CLRF   FA8
1B40:  BCF    FA6.6
1B42:  BCF    FA6.7
1B44:  BSF    FA6.2
1B46:  MOVF   FF2,W
1B48:  MOVWF  00
1B4A:  BCF    FF2.7
1B4C:  MOVLB  F
1B4E:  MOVLW  55
1B50:  MOVWF  FA7
1B52:  MOVLW  AA
1B54:  MOVWF  FA7
1B56:  BSF    FA6.1
1B58:  BTFSC  FA6.1
1B5A:  BRA    1B58
1B5C:  BCF    FA6.2
1B5E:  MOVF   00,W
1B60:  IORWF  FF2,F
1B62:  MOVLW  14
1B64:  MOVLB  1
1B66:  MOVWF  x1D
1B68:  MOVLB  0
1B6A:  CALL   0B3C
1B6E:  MOVLW  3D
1B70:  MOVWF  FA9
1B72:  CLRF   FA8
1B74:  BCF    FA6.6
1B76:  BCF    FA6.7
1B78:  BSF    FA6.2
1B7A:  MOVF   FF2,W
1B7C:  MOVWF  00
1B7E:  BCF    FF2.7
1B80:  MOVLB  F
1B82:  MOVLW  55
1B84:  MOVWF  FA7
1B86:  MOVLW  AA
1B88:  MOVWF  FA7
1B8A:  BSF    FA6.1
1B8C:  BTFSC  FA6.1
1B8E:  BRA    1B8C
1B90:  BCF    FA6.2
1B92:  MOVF   00,W
1B94:  IORWF  FF2,F
1B96:  MOVLW  14
1B98:  MOVLB  1
1B9A:  MOVWF  x1D
1B9C:  MOVLB  0
1B9E:  CALL   0B3C
....................    } 
....................    if(segundos>60){ 
1BA2:  MOVF   37,W
1BA4:  SUBLW  3C
1BA6:  BC    1BDE
....................       segundos=0;write_eeprom(70,0);delay_ms(20); 
1BA8:  CLRF   37
1BAA:  MOVLW  46
1BAC:  MOVWF  FA9
1BAE:  CLRF   FA8
1BB0:  BCF    FA6.6
1BB2:  BCF    FA6.7
1BB4:  BSF    FA6.2
1BB6:  MOVF   FF2,W
1BB8:  MOVWF  00
1BBA:  BCF    FF2.7
1BBC:  MOVLB  F
1BBE:  MOVLW  55
1BC0:  MOVWF  FA7
1BC2:  MOVLW  AA
1BC4:  MOVWF  FA7
1BC6:  BSF    FA6.1
1BC8:  BTFSC  FA6.1
1BCA:  BRA    1BC8
1BCC:  BCF    FA6.2
1BCE:  MOVF   00,W
1BD0:  IORWF  FF2,F
1BD2:  MOVLW  14
1BD4:  MOVLB  1
1BD6:  MOVWF  x1D
1BD8:  MOVLB  0
1BDA:  CALL   0B3C
....................    } 
....................    if(minutos>60){ 
1BDE:  MOVF   38,W
1BE0:  SUBLW  3C
1BE2:  BC    1C1A
....................       minutos=0;write_eeprom(71,0);delay_ms(20); 
1BE4:  CLRF   38
1BE6:  MOVLW  47
1BE8:  MOVWF  FA9
1BEA:  CLRF   FA8
1BEC:  BCF    FA6.6
1BEE:  BCF    FA6.7
1BF0:  BSF    FA6.2
1BF2:  MOVF   FF2,W
1BF4:  MOVWF  00
1BF6:  BCF    FF2.7
1BF8:  MOVLB  F
1BFA:  MOVLW  55
1BFC:  MOVWF  FA7
1BFE:  MOVLW  AA
1C00:  MOVWF  FA7
1C02:  BSF    FA6.1
1C04:  BTFSC  FA6.1
1C06:  BRA    1C04
1C08:  BCF    FA6.2
1C0A:  MOVF   00,W
1C0C:  IORWF  FF2,F
1C0E:  MOVLW  14
1C10:  MOVLB  1
1C12:  MOVWF  x1D
1C14:  MOVLB  0
1C16:  CALL   0B3C
....................    } 
....................    if(horas>60){ 
1C1A:  MOVF   39,W
1C1C:  SUBLW  3C
1C1E:  BC    1C56
....................       horas=0;write_eeprom(72,0);delay_ms(20); 
1C20:  CLRF   39
1C22:  MOVLW  48
1C24:  MOVWF  FA9
1C26:  CLRF   FA8
1C28:  BCF    FA6.6
1C2A:  BCF    FA6.7
1C2C:  BSF    FA6.2
1C2E:  MOVF   FF2,W
1C30:  MOVWF  00
1C32:  BCF    FF2.7
1C34:  MOVLB  F
1C36:  MOVLW  55
1C38:  MOVWF  FA7
1C3A:  MOVLW  AA
1C3C:  MOVWF  FA7
1C3E:  BSF    FA6.1
1C40:  BTFSC  FA6.1
1C42:  BRA    1C40
1C44:  BCF    FA6.2
1C46:  MOVF   00,W
1C48:  IORWF  FF2,F
1C4A:  MOVLW  14
1C4C:  MOVLB  1
1C4E:  MOVWF  x1D
1C50:  MOVLB  0
1C52:  CALL   0B3C
....................    } 
....................    if(flag_filtro>1){ 
1C56:  MOVLW  00
1C58:  BTFSC  43.2
1C5A:  MOVLW  01
1C5C:  SUBLW  01
1C5E:  BC    1C96
....................       flag_filtro=0;write_eeprom(73,0);delay_ms(20); 
1C60:  BCF    43.2
1C62:  MOVLW  49
1C64:  MOVWF  FA9
1C66:  CLRF   FA8
1C68:  BCF    FA6.6
1C6A:  BCF    FA6.7
1C6C:  BSF    FA6.2
1C6E:  MOVF   FF2,W
1C70:  MOVWF  00
1C72:  BCF    FF2.7
1C74:  MOVLB  F
1C76:  MOVLW  55
1C78:  MOVWF  FA7
1C7A:  MOVLW  AA
1C7C:  MOVWF  FA7
1C7E:  BSF    FA6.1
1C80:  BTFSC  FA6.1
1C82:  BRA    1C80
1C84:  BCF    FA6.2
1C86:  MOVF   00,W
1C88:  IORWF  FF2,F
1C8A:  MOVLW  14
1C8C:  MOVLB  1
1C8E:  MOVWF  x1D
1C90:  MOVLB  0
1C92:  CALL   0B3C
....................    } 
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
1C96:  MOVFF  26,27
1C9A:  MOVFF  3B,3C
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
1C9E:  MOVFF  3F,40
1CA2:  MOVFF  3D,3E
.................... } 
1CA6:  GOTO   56A2 (RETURN)
....................  
.................... void EnciendeMotor(void){ 
....................    if(!input_state(PIN_B5)){ 
*
4C00:  BTFSC  F81.5
4C02:  BRA    4C20
....................       delay_ms(100); 
4C04:  MOVLW  64
4C06:  MOVLB  1
4C08:  MOVWF  x1D
4C0A:  MOVLB  0
4C0C:  CALL   0B3C
....................       lcd_init(); 
4C10:  CALL   0C0C
....................       delay_ms(100); 
4C14:  MOVLW  64
4C16:  MOVLB  1
4C18:  MOVWF  x1D
4C1A:  MOVLB  0
4C1C:  CALL   0B3C
....................    } 
....................    Motor_on; 
4C20:  BSF    F8A.5
4C22:  BCF    F93.5
.................... } 
4C24:  RETLW  00
....................  
.................... void ApagaMotor(void){ 
....................    if(input_state(PIN_B5)){ 
*
4BDA:  BTFSS  F81.5
4BDC:  BRA    4BFA
....................       delay_ms(100); 
4BDE:  MOVLW  64
4BE0:  MOVLB  1
4BE2:  MOVWF  x1D
4BE4:  MOVLB  0
4BE6:  CALL   0B3C
....................       lcd_init(); 
4BEA:  CALL   0C0C
....................       delay_ms(100); 
4BEE:  MOVLW  64
4BF0:  MOVLB  1
4BF2:  MOVWF  x1D
4BF4:  MOVLB  0
4BF6:  CALL   0B3C
....................    } 
....................    Motor_off; 
4BFA:  BCF    F8A.5
4BFC:  BCF    F93.5
.................... } 
4BFE:  RETLW  00
....................  
.................... void MensajeGuardado(void){ 
....................    printf(lcd_putc,"\f"); 
*
2A0C:  MOVLW  0C
2A0E:  MOVLB  1
2A10:  MOVWF  x17
2A12:  MOVLB  0
2A14:  CALL   0D02
....................    lcd_gotoxy(1,2); 
2A18:  MOVLW  01
2A1A:  MOVLB  1
2A1C:  MOVWF  x18
2A1E:  MOVLW  02
2A20:  MOVWF  x19
2A22:  MOVLB  0
2A24:  CALL   0C80
....................    printf(lcd_putc," !Valor Almacenado  "); 
2A28:  MOVLW  B4
2A2A:  MOVWF  FF6
2A2C:  MOVLW  00
2A2E:  MOVWF  FF7
2A30:  CALL   1CAA
....................    lcd_gotoxy(1,4); 
2A34:  MOVLW  01
2A36:  MOVLB  1
2A38:  MOVWF  x18
2A3A:  MOVLW  04
2A3C:  MOVWF  x19
2A3E:  MOVLB  0
2A40:  CALL   0C80
....................    printf(lcd_putc,"                    "); 
2A44:  MOVLW  CA
2A46:  MOVWF  FF6
2A48:  MOVLW  00
2A4A:  MOVWF  FF7
2A4C:  CALL   1CAA
....................    lcd_gotoxy(1,3); 
2A50:  MOVLW  01
2A52:  MOVLB  1
2A54:  MOVWF  x18
2A56:  MOVLW  03
2A58:  MOVWF  x19
2A5A:  MOVLB  0
2A5C:  CALL   0C80
....................    printf(lcd_putc,"    Correctamente!  "); 
2A60:  MOVLW  E0
2A62:  MOVWF  FF6
2A64:  MOVLW  00
2A66:  MOVWF  FF7
2A68:  CALL   1CAA
....................    lcd_gotoxy(1,1); 
2A6C:  MOVLW  01
2A6E:  MOVLB  1
2A70:  MOVWF  x18
2A72:  MOVWF  x19
2A74:  MOVLB  0
2A76:  CALL   0C80
....................    printf(lcd_putc,"                    "); 
2A7A:  MOVLW  F6
2A7C:  MOVWF  FF6
2A7E:  MOVLW  00
2A80:  MOVWF  FF7
2A82:  CALL   1CAA
....................    delay_ms(2000); 
2A86:  MOVLW  08
2A88:  MOVLB  1
2A8A:  MOVWF  x02
2A8C:  MOVLW  FA
2A8E:  MOVWF  x1D
2A90:  MOVLB  0
2A92:  CALL   0B3C
2A96:  MOVLB  1
2A98:  DECFSZ x02,F
2A9A:  BRA    2A8C
....................    printf(lcd_putc,"\f"); 
2A9C:  MOVLW  0C
2A9E:  MOVWF  x17
2AA0:  MOVLB  0
2AA2:  CALL   0D02
.................... } 
2AA6:  RETLW  00
....................  
.................... void Refresco(void){ 
....................    delay_ms(100); 
....................    lcd_init(); 
....................    delay_ms(100); 
.................... } 
....................  
....................  
.................... #include <Menu.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................      
....................    if(x==1) 
*
223C:  MOVLB  1
223E:  DECFSZ x03,W
2240:  BRA    227E
....................    {if(estadoalarma==0) 
2242:  BTFSC  42.2
2244:  BRA    2260
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
2246:  MOVLW  02
2248:  MOVWF  x18
224A:  MOVFF  104,119
224E:  MOVLB  0
2250:  CALL   0C80
2254:  MOVLW  0C
2256:  MOVWF  FF6
2258:  MOVLW  01
225A:  MOVWF  FF7
225C:  RCALL  1CAA
225E:  MOVLB  1
....................    if(estadoalarma==1) 
2260:  BTFSS  42.2
2262:  BRA    227E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
2264:  MOVLW  02
2266:  MOVWF  x18
2268:  MOVFF  104,119
226C:  MOVLB  0
226E:  CALL   0C80
2272:  MOVLW  20
2274:  MOVWF  FF6
2276:  MOVLW  01
2278:  MOVWF  FF7
227A:  RCALL  1CAA
227C:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
227E:  MOVF   x03,W
2280:  SUBLW  02
2282:  BNZ   229E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
2284:  MOVLW  02
2286:  MOVWF  x18
2288:  MOVFF  104,119
228C:  MOVLB  0
228E:  CALL   0C80
2292:  MOVLW  34
2294:  MOVWF  FF6
2296:  MOVLW  01
2298:  MOVWF  FF7
229A:  RCALL  1CAA
229C:  MOVLB  1
....................     
....................    if(x==3) 
229E:  MOVF   x03,W
22A0:  SUBLW  03
22A2:  BNZ   22BE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Filtro      ");} 
22A4:  MOVLW  02
22A6:  MOVWF  x18
22A8:  MOVFF  104,119
22AC:  MOVLB  0
22AE:  CALL   0C80
22B2:  MOVLW  48
22B4:  MOVWF  FF6
22B6:  MOVLW  01
22B8:  MOVWF  FF7
22BA:  RCALL  1CAA
22BC:  MOVLB  1
....................     
....................    if(x==4) 
22BE:  MOVF   x03,W
22C0:  SUBLW  04
22C2:  BNZ   22DE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
22C4:  MOVLW  02
22C6:  MOVWF  x18
22C8:  MOVFF  104,119
22CC:  MOVLB  0
22CE:  CALL   0C80
22D2:  MOVLW  5C
22D4:  MOVWF  FF6
22D6:  MOVLW  01
22D8:  MOVWF  FF7
22DA:  RCALL  1CAA
22DC:  MOVLB  1
....................     
....................    if(x==5) 
22DE:  MOVF   x03,W
22E0:  SUBLW  05
22E2:  BNZ   22FE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
22E4:  MOVLW  02
22E6:  MOVWF  x18
22E8:  MOVFF  104,119
22EC:  MOVLB  0
22EE:  CALL   0C80
22F2:  MOVLW  70
22F4:  MOVWF  FF6
22F6:  MOVLW  01
22F8:  MOVWF  FF7
22FA:  RCALL  1CAA
22FC:  MOVLB  1
....................     
....................    if(x==6) 
22FE:  MOVF   x03,W
2300:  SUBLW  06
2302:  BNZ   231E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
2304:  MOVLW  02
2306:  MOVWF  x18
2308:  MOVFF  104,119
230C:  MOVLB  0
230E:  CALL   0C80
2312:  MOVLW  84
2314:  MOVWF  FF6
2316:  MOVLW  01
2318:  MOVWF  FF7
231A:  RCALL  1CAA
231C:  MOVLB  1
....................     
....................    if(x==7) 
231E:  MOVF   x03,W
2320:  SUBLW  07
2322:  BNZ   233E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Servicio           ");} 
2324:  MOVLW  02
2326:  MOVWF  x18
2328:  MOVFF  104,119
232C:  MOVLB  0
232E:  CALL   0C80
2332:  MOVLW  98
2334:  MOVWF  FF6
2336:  MOVLW  01
2338:  MOVWF  FF7
233A:  RCALL  1CAA
233C:  MOVLB  1
.................... } 
233E:  MOVLB  0
2340:  RETLW  00
....................  
.................... short SolicitaContrasena(int8 MenuAct,int8 MenuAnt,int8 MenuPos,cont0,cont1,cont2,cont3){ 
....................       lcd_gotoxy(1,1); 
*
1DA4:  MOVLW  01
1DA6:  MOVLB  1
1DA8:  MOVWF  x18
1DAA:  MOVWF  x19
1DAC:  MOVLB  0
1DAE:  CALL   0C80
....................       printf(lcd_putc,"     Ingrese        "); 
1DB2:  MOVLW  AC
1DB4:  MOVWF  FF6
1DB6:  MOVLW  01
1DB8:  MOVWF  FF7
1DBA:  RCALL  1CAA
....................       lcd_gotoxy(1,2); 
1DBC:  MOVLW  01
1DBE:  MOVLB  1
1DC0:  MOVWF  x18
1DC2:  MOVLW  02
1DC4:  MOVWF  x19
1DC6:  MOVLB  0
1DC8:  CALL   0C80
....................       printf(lcd_putc,"    Contraseña      "); 
1DCC:  MOVLW  C2
1DCE:  MOVWF  FF6
1DD0:  MOVLW  01
1DD2:  MOVWF  FF7
1DD4:  RCALL  1CAA
....................       lcd_gotoxy(1,3); 
1DD6:  MOVLW  01
1DD8:  MOVLB  1
1DDA:  MOVWF  x18
1DDC:  MOVLW  03
1DDE:  MOVWF  x19
1DE0:  MOVLB  0
1DE2:  CALL   0C80
....................       printf(lcd_putc,"    CLAVE=%u%u%u%u  ",clave[0],clave[1],clave[2],clave[3]); 
1DE6:  MOVLW  D8
1DE8:  MOVWF  FF6
1DEA:  MOVLW  01
1DEC:  MOVWF  FF7
1DEE:  MOVLW  0A
1DF0:  MOVLB  1
1DF2:  MOVWF  x0A
1DF4:  MOVLB  0
1DF6:  RCALL  1CCC
1DF8:  MOVFF  48,109
1DFC:  MOVLW  1B
1DFE:  MOVLB  1
1E00:  MOVWF  x0A
1E02:  MOVLB  0
1E04:  RCALL  1D22
1E06:  MOVFF  49,109
1E0A:  MOVLW  1B
1E0C:  MOVLB  1
1E0E:  MOVWF  x0A
1E10:  MOVLB  0
1E12:  RCALL  1D22
1E14:  MOVFF  4A,109
1E18:  MOVLW  1B
1E1A:  MOVLB  1
1E1C:  MOVWF  x0A
1E1E:  MOVLB  0
1E20:  RCALL  1D22
1E22:  MOVFF  4B,109
1E26:  MOVLW  1B
1E28:  MOVLB  1
1E2A:  MOVWF  x0A
1E2C:  MOVLB  0
1E2E:  RCALL  1D22
1E30:  MOVLW  20
1E32:  MOVLB  1
1E34:  MOVWF  x17
1E36:  MOVLB  0
1E38:  CALL   0D02
1E3C:  MOVLW  20
1E3E:  MOVLB  1
1E40:  MOVWF  x17
1E42:  MOVLB  0
1E44:  CALL   0D02
....................        
....................       if(UP){//Si oprime hacia arriba 
1E48:  BSF    F92.5
1E4A:  BTFSC  F80.5
1E4C:  BRA    1E8A
....................          delay_ms(20); 
1E4E:  MOVLW  14
1E50:  MOVLB  1
1E52:  MOVWF  x1D
1E54:  MOVLB  0
1E56:  CALL   0B3C
....................          if(UP && Flanco == 0){ 
1E5A:  BSF    F92.5
1E5C:  BTFSC  F80.5
1E5E:  BRA    1E88
1E60:  BTFSC  42.4
1E62:  BRA    1E88
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0; 
1E64:  MOVLW  0B
1E66:  SUBWF  1E,W
1E68:  CLRF   03
1E6A:  ADDLW  48
1E6C:  MOVWF  FE9
1E6E:  MOVLW  00
1E70:  ADDWFC 03,W
1E72:  MOVWF  FEA
1E74:  INCF   FEF,F
1E76:  BSF    42.4
1E78:  MOVLW  1E
1E7A:  MOVLB  1
1E7C:  MOVWF  x1D
1E7E:  MOVLB  0
1E80:  CALL   0B3C
1E84:  CLRF   58
1E86:  CLRF   57
....................          } 
....................       }else{ 
1E88:  BRA    1E8C
....................          Flanco = 0; 
1E8A:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo   
1E8C:  BSF    F96.0
1E8E:  BTFSC  F84.0
1E90:  BRA    1ECA
....................          delay_ms(20); 
1E92:  MOVLW  14
1E94:  MOVLB  1
1E96:  MOVWF  x1D
1E98:  MOVLB  0
1E9A:  CALL   0B3C
....................          if(DOWN){// && Flanco2 == 0){ 
1E9E:  BSF    F96.0
1EA0:  BTFSC  F84.0
1EA2:  BRA    1EC8
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0; 
1EA4:  MOVLW  0B
1EA6:  SUBWF  1E,W
1EA8:  CLRF   03
1EAA:  ADDLW  48
1EAC:  MOVWF  FE9
1EAE:  MOVLW  00
1EB0:  ADDWFC 03,W
1EB2:  MOVWF  FEA
1EB4:  DECF   FEF,F
1EB6:  BSF    42.6
1EB8:  MOVLW  1E
1EBA:  MOVLB  1
1EBC:  MOVWF  x1D
1EBE:  MOVLB  0
1EC0:  CALL   0B3C
1EC4:  CLRF   58
1EC6:  CLRF   57
....................          } 
....................       }else{ 
1EC8:  BRA    1ECC
....................          Flanco2 = 0; 
1ECA:  BCF    42.6
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
1ECC:  BSF    F96.1
1ECE:  BTFSC  F84.1
1ED0:  BRA    1F0A
....................          delay_ms(20); 
1ED2:  MOVLW  14
1ED4:  MOVLB  1
1ED6:  MOVWF  x1D
1ED8:  MOVLB  0
1EDA:  CALL   0B3C
....................          if(RIGHT && Flanco1 == 0){ 
1EDE:  BSF    F96.1
1EE0:  BTFSC  F84.1
1EE2:  BRA    1F08
1EE4:  BTFSC  42.5
1EE6:  BRA    1F08
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
1EE8:  BSF    42.5
1EEA:  INCF   1E,F
1EEC:  MOVLW  1E
1EEE:  MOVLB  1
1EF0:  MOVWF  x1D
1EF2:  MOVLB  0
1EF4:  CALL   0B3C
1EF8:  MOVLW  0C
1EFA:  MOVLB  1
1EFC:  MOVWF  x17
1EFE:  MOVLB  0
1F00:  CALL   0D02
1F04:  CLRF   58
1F06:  CLRF   57
....................          } 
....................       }else{ 
1F08:  BRA    1F0C
....................          Flanco1 = 0; 
1F0A:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si Oprime izquierda 
1F0C:  BSF    F96.2
1F0E:  BTFSC  F84.2
1F10:  BRA    1F4A
....................          delay_ms(20); 
1F12:  MOVLW  14
1F14:  MOVLB  1
1F16:  MOVWF  x1D
1F18:  MOVLB  0
1F1A:  CALL   0B3C
....................          if(LEFT && Flanco3 == 0){ 
1F1E:  BSF    F96.2
1F20:  BTFSC  F84.2
1F22:  BRA    1F48
1F24:  BTFSC  42.7
1F26:  BRA    1F48
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
1F28:  BSF    42.7
1F2A:  DECF   1E,F
1F2C:  MOVLW  1E
1F2E:  MOVLB  1
1F30:  MOVWF  x1D
1F32:  MOVLB  0
1F34:  CALL   0B3C
1F38:  MOVLW  0C
1F3A:  MOVLB  1
1F3C:  MOVWF  x17
1F3E:  MOVLB  0
1F40:  CALL   0D02
1F44:  CLRF   58
1F46:  CLRF   57
....................          } 
....................       }else{ 
1F48:  BRA    1F4C
....................          Flanco3 = 0; 
1F4A:  BCF    42.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1F4C:  MOVLW  0B
1F4E:  SUBWF  1E,W
1F50:  CLRF   03
1F52:  ADDLW  48
1F54:  MOVWF  FE9
1F56:  MOVLW  00
1F58:  ADDWFC 03,W
1F5A:  MOVWF  FEA
1F5C:  BTFSC  FEF.7
1F5E:  BRA    1F62
1F60:  BRA    1F76
....................          clave[unidad-11]=9; 
1F62:  MOVLW  0B
1F64:  SUBWF  1E,W
1F66:  CLRF   03
1F68:  ADDLW  48
1F6A:  MOVWF  FE9
1F6C:  MOVLW  00
1F6E:  ADDWFC 03,W
1F70:  MOVWF  FEA
1F72:  MOVLW  09
1F74:  MOVWF  FEF
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1F76:  MOVLW  0B
1F78:  SUBWF  1E,W
1F7A:  CLRF   03
1F7C:  ADDLW  48
1F7E:  MOVWF  FE9
1F80:  MOVLW  00
1F82:  ADDWFC 03,W
1F84:  MOVWF  FEA
1F86:  BTFSC  FEF.7
1F88:  BRA    1FA2
1F8A:  MOVF   FEF,W
1F8C:  SUBLW  09
1F8E:  BC    1FA2
....................          clave[unidad-11]=0; 
1F90:  MOVLW  0B
1F92:  SUBWF  1E,W
1F94:  CLRF   03
1F96:  ADDLW  48
1F98:  MOVWF  FE9
1F9A:  MOVLW  00
1F9C:  ADDWFC 03,W
1F9E:  MOVWF  FEA
1FA0:  CLRF   FEF
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1FA2:  MOVF   1E,W
1FA4:  SUBLW  0A
1FA6:  BNC   1FBC
....................          unidad=11; 
1FA8:  MOVLW  0B
1FAA:  MOVWF  1E
....................          Menu=MenuAnt; 
1FAC:  MOVFF  103,1C
....................          paso=0;Flecha=2;Flecha2=2;unidad=11; 
1FB0:  CLRF   44
1FB2:  MOVLW  02
1FB4:  MOVWF  1F
1FB6:  MOVWF  21
1FB8:  MOVLW  0B
1FBA:  MOVWF  1E
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1FBC:  MOVFF  1E,118
1FC0:  MOVLW  04
1FC2:  MOVLB  1
1FC4:  MOVWF  x19
1FC6:  MOVLB  0
1FC8:  CALL   0C80
....................       lcd_putc(t[2]); 
1FCC:  MOVFF  47,117
1FD0:  CALL   0D02
....................        
....................       if(unidad>11&&unidad<14){ 
1FD4:  MOVF   1E,W
1FD6:  SUBLW  0B
1FD8:  BC    1FFC
1FDA:  MOVF   1E,W
1FDC:  SUBLW  0D
1FDE:  BNC   1FFC
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1FE0:  MOVLW  01
1FE2:  SUBWF  1E,W
1FE4:  MOVLB  1
1FE6:  MOVWF  x09
1FE8:  MOVWF  x18
1FEA:  MOVLW  04
1FEC:  MOVWF  x19
1FEE:  MOVLB  0
1FF0:  CALL   0C80
....................          lcd_putc(t[1]); 
1FF4:  MOVFF  46,117
1FF8:  CALL   0D02
....................       } 
....................        
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1FFC:  MOVF   1E,W
1FFE:  SUBLW  0E
2000:  BTFSC  FD8.0
2002:  BRA    2238
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2&&MenuAct==0){ // Si Ingresa clave para reset general del sistema. 
2004:  MOVF   48,W
2006:  SUBLW  03
2008:  BTFSS  FD8.2
200A:  BRA    20FE
200C:  MOVF   49,W
200E:  SUBLW  08
2010:  BTFSS  FD8.2
2012:  BRA    20FE
2014:  MOVF   4A,W
2016:  SUBLW  09
2018:  BNZ   20FE
201A:  MOVF   4B,W
201C:  SUBLW  02
201E:  BNZ   20FE
2020:  MOVLB  1
2022:  MOVF   x02,F
2024:  BTFSC  FD8.2
2026:  BRA    202C
2028:  MOVLB  0
202A:  BRA    20FE
....................              write_eeprom(100,0);delay_ms(20);write_eeprom(101,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
202C:  MOVLW  64
202E:  MOVWF  FA9
2030:  CLRF   FA8
2032:  BCF    FA6.6
2034:  BCF    FA6.7
2036:  BSF    FA6.2
2038:  MOVF   FF2,W
203A:  MOVWF  00
203C:  BCF    FF2.7
203E:  MOVLB  F
2040:  MOVLW  55
2042:  MOVWF  FA7
2044:  MOVLW  AA
2046:  MOVWF  FA7
2048:  BSF    FA6.1
204A:  BTFSC  FA6.1
204C:  BRA    204A
204E:  BCF    FA6.2
2050:  MOVF   00,W
2052:  IORWF  FF2,F
2054:  MOVLW  14
2056:  MOVLB  1
2058:  MOVWF  x1D
205A:  MOVLB  0
205C:  CALL   0B3C
2060:  MOVLW  65
2062:  MOVWF  FA9
2064:  CLRF   FA8
2066:  BCF    FA6.6
2068:  BCF    FA6.7
206A:  BSF    FA6.2
206C:  MOVF   FF2,W
206E:  MOVWF  00
2070:  BCF    FF2.7
2072:  MOVLB  F
2074:  MOVLW  55
2076:  MOVWF  FA7
2078:  MOVLW  AA
207A:  MOVWF  FA7
207C:  BSF    FA6.1
207E:  BTFSC  FA6.1
2080:  BRA    207E
2082:  BCF    FA6.2
2084:  MOVF   00,W
2086:  IORWF  FF2,F
2088:  MOVLW  14
208A:  MOVLB  1
208C:  MOVWF  x1D
208E:  MOVLB  0
2090:  CALL   0B3C
....................              write_eeprom(102,0);delay_ms(20);write_eeprom(103,0);delay_ms(20); 
2094:  MOVLW  66
2096:  MOVWF  FA9
2098:  CLRF   FA8
209A:  BCF    FA6.6
209C:  BCF    FA6.7
209E:  BSF    FA6.2
20A0:  MOVF   FF2,W
20A2:  MOVWF  00
20A4:  BCF    FF2.7
20A6:  MOVLB  F
20A8:  MOVLW  55
20AA:  MOVWF  FA7
20AC:  MOVLW  AA
20AE:  MOVWF  FA7
20B0:  BSF    FA6.1
20B2:  BTFSC  FA6.1
20B4:  BRA    20B2
20B6:  BCF    FA6.2
20B8:  MOVF   00,W
20BA:  IORWF  FF2,F
20BC:  MOVLW  14
20BE:  MOVLB  1
20C0:  MOVWF  x1D
20C2:  MOVLB  0
20C4:  CALL   0B3C
20C8:  MOVLW  67
20CA:  MOVWF  FA9
20CC:  CLRF   FA8
20CE:  BCF    FA6.6
20D0:  BCF    FA6.7
20D2:  BSF    FA6.2
20D4:  MOVF   FF2,W
20D6:  MOVWF  00
20D8:  BCF    FF2.7
20DA:  MOVLB  F
20DC:  MOVLW  55
20DE:  MOVWF  FA7
20E0:  MOVLW  AA
20E2:  MOVWF  FA7
20E4:  BSF    FA6.1
20E6:  BTFSC  FA6.1
20E8:  BRA    20E6
20EA:  BCF    FA6.2
20EC:  MOVF   00,W
20EE:  IORWF  FF2,F
20F0:  MOVLW  14
20F2:  MOVLB  1
20F4:  MOVWF  x1D
20F6:  MOVLB  0
20F8:  CALL   0B3C
....................              reset_cpu(); 
20FC:  RESET
....................          } 
....................              
....................          if(clave[0]==cont0 && clave[1]==cont1 && clave[2]==cont2 && clave[3]==cont3){ // Si las claves coinciden pasa a Menu Principal. 
20FE:  MOVLB  1
2100:  MOVF   x05,W
2102:  SUBWF  48,W
2104:  BNZ   21AA
2106:  MOVF   x06,W
2108:  SUBWF  49,W
210A:  BNZ   21AA
210C:  MOVF   x07,W
210E:  SUBWF  4A,W
2110:  BNZ   21AA
2112:  MOVF   x08,W
2114:  SUBWF  4B,W
2116:  BNZ   21AA
....................             lcd_gotoxy(1,1); 
2118:  MOVLW  01
211A:  MOVWF  x18
211C:  MOVWF  x19
211E:  MOVLB  0
2120:  CALL   0C80
....................             printf(lcd_putc,"                   "); 
2124:  MOVLW  EE
2126:  MOVWF  FF6
2128:  MOVLW  01
212A:  MOVWF  FF7
212C:  RCALL  1CAA
....................             lcd_gotoxy(1,2); 
212E:  MOVLW  01
2130:  MOVLB  1
2132:  MOVWF  x18
2134:  MOVLW  02
2136:  MOVWF  x19
2138:  MOVLB  0
213A:  CALL   0C80
....................             printf(lcd_putc,"     Contraseña    "); 
213E:  MOVLW  02
2140:  MOVWF  FF6
2142:  MOVLW  02
2144:  MOVWF  FF7
2146:  RCALL  1CAA
....................             lcd_gotoxy(1,3); 
2148:  MOVLW  01
214A:  MOVLB  1
214C:  MOVWF  x18
214E:  MOVLW  03
2150:  MOVWF  x19
2152:  MOVLB  0
2154:  CALL   0C80
....................             printf(lcd_putc,"      Correcta     "); 
2158:  MOVLW  16
215A:  MOVWF  FF6
215C:  MOVLW  02
215E:  MOVWF  FF7
2160:  RCALL  1CAA
....................             lcd_gotoxy(1,4); 
2162:  MOVLW  01
2164:  MOVLB  1
2166:  MOVWF  x18
2168:  MOVLW  04
216A:  MOVWF  x19
216C:  MOVLB  0
216E:  CALL   0C80
....................             printf(lcd_putc,"                   "); 
2172:  MOVLW  2A
2174:  MOVWF  FF6
2176:  MOVLW  02
2178:  MOVWF  FF7
217A:  RCALL  1CAA
....................             delay_ms(500); 
217C:  MOVLW  02
217E:  MOVLB  1
2180:  MOVWF  x09
2182:  MOVLW  FA
2184:  MOVWF  x1D
2186:  MOVLB  0
2188:  CALL   0B3C
218C:  MOVLB  1
218E:  DECFSZ x09,F
2190:  BRA    2182
....................             Menu=MenuPos;unidad=11; 
2192:  MOVFF  104,1C
2196:  MOVLW  0B
2198:  MOVWF  1E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
219A:  CLRF   48
219C:  CLRF   49
219E:  CLRF   4A
21A0:  CLRF   4B
....................             return 1; 
21A2:  MOVLW  01
21A4:  MOVWF  01
21A6:  BRA    2238
....................          }else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
21A8:  BRA    2238
....................             lcd_gotoxy(1,1); 
21AA:  MOVLW  01
21AC:  MOVWF  x18
21AE:  MOVWF  x19
21B0:  MOVLB  0
21B2:  CALL   0C80
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
21B6:  MOVLW  01
21B8:  MOVLB  1
21BA:  MOVWF  x18
21BC:  MOVLW  02
21BE:  MOVWF  x19
21C0:  MOVLB  0
21C2:  CALL   0C80
....................             printf(lcd_putc,"     Contraseña    "); 
21C6:  MOVLW  3E
21C8:  MOVWF  FF6
21CA:  MOVLW  02
21CC:  MOVWF  FF7
21CE:  RCALL  1CAA
....................             lcd_gotoxy(1,3); 
21D0:  MOVLW  01
21D2:  MOVLB  1
21D4:  MOVWF  x18
21D6:  MOVLW  03
21D8:  MOVWF  x19
21DA:  MOVLB  0
21DC:  CALL   0C80
....................             printf(lcd_putc,"     Incorrecta    "); 
21E0:  MOVLW  52
21E2:  MOVWF  FF6
21E4:  MOVLW  02
21E6:  MOVWF  FF7
21E8:  RCALL  1CAA
....................             lcd_gotoxy(1,4); 
21EA:  MOVLW  01
21EC:  MOVLB  1
21EE:  MOVWF  x18
21F0:  MOVLW  04
21F2:  MOVWF  x19
21F4:  MOVLB  0
21F6:  CALL   0C80
....................             printf(lcd_putc,"                   "); 
21FA:  MOVLW  66
21FC:  MOVWF  FF6
21FE:  MOVLW  02
2200:  MOVWF  FF7
2202:  RCALL  1CAA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
2204:  MOVLW  02
2206:  MOVLB  1
2208:  MOVWF  x09
220A:  MOVLW  FA
220C:  MOVWF  x1D
220E:  MOVLB  0
2210:  CALL   0B3C
2214:  MOVLB  1
2216:  DECFSZ x09,F
2218:  BRA    220A
221A:  MOVLW  0B
221C:  MOVWF  1E
221E:  MOVLW  0C
2220:  MOVWF  x17
2222:  MOVLB  0
2224:  CALL   0D02
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2228:  CLRF   48
222A:  CLRF   49
222C:  CLRF   4A
222E:  CLRF   4B
....................             return 0; 
2230:  MOVLW  00
2232:  MOVWF  01
2234:  MOVLB  1
2236:  BRA    2238
2238:  MOVLB  0
....................          } 
....................       }      
.................... } 
223A:  RETLW  00
....................  
.................... void MenuPrincipal(){ 
....................       lcd_gotoxy(1,1); 
*
2342:  MOVLW  01
2344:  MOVLB  1
2346:  MOVWF  x18
2348:  MOVWF  x19
234A:  MOVLB  0
234C:  CALL   0C80
....................       printf(lcd_putc,"---MENU PRINCIPAL---"); 
2350:  MOVLW  7A
2352:  MOVWF  FF6
2354:  MOVLW  02
2356:  MOVWF  FF7
2358:  RCALL  1CAA
....................     
....................       if(UP){//Si oprime hacia arriba 
235A:  BSF    F92.5
235C:  BTFSC  F80.5
235E:  BRA    2390
....................          delay_ms(20); 
2360:  MOVLW  14
2362:  MOVLB  1
2364:  MOVWF  x1D
2366:  MOVLB  0
2368:  CALL   0B3C
....................          if(UP && Flanco == 0){ 
236C:  BSF    F92.5
236E:  BTFSC  F80.5
2370:  BRA    238E
2372:  BTFSC  42.4
2374:  BRA    238E
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2376:  DECF   21,F
2378:  DECF   1F,F
237A:  MOVLW  01
237C:  ADDWF  1F,W
237E:  MOVWF  20
2380:  BSF    42.4
2382:  MOVLW  1E
2384:  MOVLB  1
2386:  MOVWF  x1D
2388:  MOVLB  0
238A:  CALL   0B3C
....................          } 
....................       }else{ 
238E:  BRA    2392
....................          Flanco = 0; 
2390:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2392:  BSF    F96.0
2394:  BTFSC  F84.0
2396:  BRA    23C8
....................          delay_ms(20); 
2398:  MOVLW  14
239A:  MOVLB  1
239C:  MOVWF  x1D
239E:  MOVLB  0
23A0:  CALL   0B3C
....................          if(DOWN && Flanco2 == 0){ 
23A4:  BSF    F96.0
23A6:  BTFSC  F84.0
23A8:  BRA    23C6
23AA:  BTFSC  42.6
23AC:  BRA    23C6
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
23AE:  INCF   21,F
23B0:  INCF   1F,F
23B2:  MOVLW  01
23B4:  SUBWF  1F,W
23B6:  MOVWF  20
23B8:  BSF    42.6
23BA:  MOVLW  1E
23BC:  MOVLB  1
23BE:  MOVWF  x1D
23C0:  MOVLB  0
23C2:  CALL   0B3C
....................          } 
....................       }else{ 
23C6:  BRA    23CA
....................          Flanco2 = 0; 
23C8:  BCF    42.6
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH) 
23CA:  MOVF   21,W
23CC:  SUBWF  23,W
23CE:  BC    23E0
....................       {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
23D0:  INCF   44,F
23D2:  MOVFF  21,23
23D6:  MOVLW  02
23D8:  SUBWF  23,W
23DA:  MOVWF  22
23DC:  MOVLW  04
23DE:  MOVWF  1F
....................          
....................       if(Flecha2<nMenuL) 
23E0:  MOVF   22,W
23E2:  SUBWF  21,W
23E4:  BC    23F6
....................       {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
23E6:  DECF   44,F
23E8:  MOVFF  21,22
23EC:  MOVLW  02
23EE:  ADDWF  22,W
23F0:  MOVWF  23
23F2:  MOVLW  02
23F4:  MOVWF  1F
....................          
....................       if(Flecha2>n_opcionH) 
23F6:  MOVF   21,W
23F8:  MOVLB  1
23FA:  SUBWF  x01,W
23FC:  BC    2410
....................       {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
23FE:  MOVFF  1D,21
2402:  MOVLW  02
2404:  MOVWF  1F
2406:  CLRF   44
2408:  MOVFF  21,22
240C:  ADDWF  22,W
240E:  MOVWF  23
....................        
....................       if(Flecha2<n_opcionL) 
2410:  MOVF   1D,W
2412:  SUBWF  21,W
2414:  BC    242C
....................       {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
2416:  MOVFF  101,21
241A:  MOVLW  04
241C:  MOVWF  1F
241E:  SUBWF  x01,W
2420:  MOVWF  44
2422:  MOVFF  21,23
2426:  MOVLW  02
2428:  SUBWF  23,W
242A:  MOVWF  22
....................           
....................       if(paso<0) 
242C:  BTFSC  44.7
242E:  BRA    2432
2430:  BRA    2434
....................          paso=0; 
2432:  CLRF   44
....................        
....................       mensajes(1+paso,2); 
2434:  MOVLW  01
2436:  ADDWF  44,W
2438:  MOVWF  x02
243A:  MOVWF  x03
243C:  MOVLW  02
243E:  MOVWF  x04
2440:  MOVLB  0
2442:  RCALL  223C
....................       mensajes(2+paso,3); 
2444:  MOVLW  02
2446:  ADDWF  44,W
2448:  MOVLB  1
244A:  MOVWF  x02
244C:  MOVWF  x03
244E:  MOVLW  03
2450:  MOVWF  x04
2452:  MOVLB  0
2454:  RCALL  223C
....................       mensajes(3+paso,4); 
2456:  MOVLW  03
2458:  ADDWF  44,W
245A:  MOVLB  1
245C:  MOVWF  x02
245E:  MOVWF  x03
2460:  MOVLW  04
2462:  MOVWF  x04
2464:  MOVLB  0
2466:  RCALL  223C
....................  
....................       lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2468:  MOVLW  01
246A:  MOVLB  1
246C:  MOVWF  x18
246E:  MOVFF  1F,119
2472:  MOVLB  0
2474:  CALL   0C80
....................       lcd_putc(t[0]); 
2478:  MOVFF  45,117
247C:  CALL   0D02
....................  
....................       if(Flecha==2){ 
2480:  MOVF   1F,W
2482:  SUBLW  02
2484:  BNZ   24B6
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2486:  MOVLW  01
2488:  MOVLB  1
248A:  MOVWF  x18
248C:  MOVLW  04
248E:  MOVWF  x19
2490:  MOVLB  0
2492:  CALL   0C80
....................          lcd_putc(t[1]); 
2496:  MOVFF  46,117
249A:  CALL   0D02
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
249E:  MOVLW  01
24A0:  MOVLB  1
24A2:  MOVWF  x18
24A4:  MOVLW  03
24A6:  MOVWF  x19
24A8:  MOVLB  0
24AA:  CALL   0C80
....................          lcd_putc(t[1]); 
24AE:  MOVFF  46,117
24B2:  CALL   0D02
....................       } 
....................          
....................       if(Flecha==4){ 
24B6:  MOVF   1F,W
24B8:  SUBLW  04
24BA:  BNZ   24EC
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
24BC:  MOVLW  01
24BE:  MOVLB  1
24C0:  MOVWF  x18
24C2:  MOVLW  02
24C4:  MOVWF  x19
24C6:  MOVLB  0
24C8:  CALL   0C80
....................          lcd_putc(t[1]); 
24CC:  MOVFF  46,117
24D0:  CALL   0D02
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
24D4:  MOVLW  01
24D6:  MOVLB  1
24D8:  MOVWF  x18
24DA:  MOVLW  03
24DC:  MOVWF  x19
24DE:  MOVLB  0
24E0:  CALL   0C80
....................          lcd_putc(t[1]); 
24E4:  MOVFF  46,117
24E8:  CALL   0D02
....................       } 
....................          
....................       if(Flecha==3){ 
24EC:  MOVF   1F,W
24EE:  SUBLW  03
24F0:  BNZ   2522
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
24F2:  MOVLW  01
24F4:  MOVLB  1
24F6:  MOVWF  x18
24F8:  MOVLW  04
24FA:  MOVWF  x19
24FC:  MOVLB  0
24FE:  CALL   0C80
....................          lcd_putc(t[1]); 
2502:  MOVFF  46,117
2506:  CALL   0D02
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
250A:  MOVLW  01
250C:  MOVLB  1
250E:  MOVWF  x18
2510:  MOVLW  02
2512:  MOVWF  x19
2514:  MOVLB  0
2516:  CALL   0C80
....................          lcd_putc(t[1]); 
251A:  MOVFF  46,117
251E:  CALL   0D02
....................       } 
....................  
....................       if(RIGHT){// Si oprime derecha 
2522:  BSF    F96.1
2524:  BTFSC  F84.1
2526:  BRA    2578
....................          delay_ms(20); 
2528:  MOVLW  14
252A:  MOVLB  1
252C:  MOVWF  x1D
252E:  MOVLB  0
2530:  CALL   0B3C
....................          if(RIGHT && Flanco1 == 0) { 
2534:  BSF    F96.1
2536:  BTFSC  F84.1
2538:  BRA    2576
253A:  BTFSC  42.5
253C:  BRA    2576
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
253E:  BSF    42.5
2540:  MOVFF  21,1C
2544:  MOVLW  03
2546:  MOVWF  1F
2548:  MOVLW  02
254A:  MOVLB  1
254C:  MOVWF  x02
254E:  MOVLW  FA
2550:  MOVWF  x1D
2552:  MOVLB  0
2554:  CALL   0B3C
2558:  MOVLB  1
255A:  DECFSZ x02,F
255C:  BRA    254E
255E:  MOVLW  0C
2560:  MOVWF  x17
2562:  MOVLB  0
2564:  CALL   0D02
....................             if(Menu==6){ 
2568:  MOVF   1C,W
256A:  SUBLW  06
256C:  BNZ   2576
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
256E:  CLRF   48
2570:  CLRF   49
2572:  CLRF   4A
2574:  CLRF   4B
....................             } 
....................          } 
....................       }else{ 
2576:  BRA    257A
....................          Flanco1 = 0; 
2578:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
257A:  BSF    F96.2
257C:  BTFSC  F84.2
257E:  BRA    25BC
....................          delay_ms(20); 
2580:  MOVLW  14
2582:  MOVLB  1
2584:  MOVWF  x1D
2586:  MOVLB  0
2588:  CALL   0B3C
....................          if(LEFT && Flanco3 == 0) { 
258C:  BSF    F96.2
258E:  BTFSC  F84.2
2590:  BRA    25BA
2592:  BTFSC  42.7
2594:  BRA    25BA
....................             /*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f"); 
2596:  MOVLW  02
2598:  MOVLB  1
259A:  MOVWF  x02
259C:  MOVLW  FA
259E:  MOVWF  x1D
25A0:  MOVLB  0
25A2:  CALL   0B3C
25A6:  MOVLB  1
25A8:  DECFSZ x02,F
25AA:  BRA    259C
25AC:  MOVLW  14
25AE:  MOVWF  1C
25B0:  MOVLW  0C
25B2:  MOVWF  x17
25B4:  MOVLB  0
25B6:  CALL   0D02
....................          } 
....................       }else{ 
25BA:  BRA    25BE
....................          Flanco3 = 0; 
25BC:  BCF    42.7
....................       } 
.................... } 
25BE:  GOTO   5804 (RETURN)
....................  
.................... void MenuFiltro(){ 
....................    lcd_gotoxy(1,1); 
*
2712:  MOVLW  01
2714:  MOVLB  1
2716:  MOVWF  x18
2718:  MOVWF  x19
271A:  MOVLB  0
271C:  CALL   0C80
....................       printf(lcd_putc,"  Duracion Actual   ");                           
2720:  MOVLW  90
2722:  MOVWF  FF6
2724:  MOVLW  02
2726:  MOVWF  FF7
2728:  CALL   1CAA
....................       lcd_gotoxy(1,2);                                                   
272C:  MOVLW  01
272E:  MOVLB  1
2730:  MOVWF  x18
2732:  MOVLW  02
2734:  MOVWF  x19
2736:  MOVLB  0
2738:  CALL   0C80
....................       printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
273C:  MOVLW  A6
273E:  MOVWF  FF6
2740:  MOVLW  02
2742:  MOVWF  FF7
2744:  MOVLW  09
2746:  MOVLB  1
2748:  MOVWF  x0A
274A:  MOVLB  0
274C:  CALL   1CCC
2750:  MOVFF  39,109
2754:  MOVLW  01
2756:  MOVLB  1
2758:  MOVWF  x0A
275A:  MOVLB  0
275C:  CALL   1D22
2760:  MOVLW  3A
2762:  MOVLB  1
2764:  MOVWF  x17
2766:  MOVLB  0
2768:  CALL   0D02
276C:  MOVFF  38,109
2770:  MOVLW  01
2772:  MOVLB  1
2774:  MOVWF  x0A
2776:  MOVLB  0
2778:  CALL   1D22
277C:  MOVLW  3A
277E:  MOVLB  1
2780:  MOVWF  x17
2782:  MOVLB  0
2784:  CALL   0D02
2788:  MOVFF  37,109
278C:  MOVLW  01
278E:  MOVLB  1
2790:  MOVWF  x0A
2792:  MOVLB  0
2794:  CALL   1D22
2798:  MOVLW  20
279A:  MOVLB  1
279C:  MOVWF  x17
279E:  MOVLB  0
27A0:  CALL   0D02
....................        
....................       if(flag_filtro==1){ 
27A4:  BTFSS  43.2
27A6:  BRA    27C6
....................          lcd_gotoxy(1,3);                                                  
27A8:  MOVLW  01
27AA:  MOVLB  1
27AC:  MOVWF  x18
27AE:  MOVLW  03
27B0:  MOVWF  x19
27B2:  MOVLB  0
27B4:  CALL   0C80
....................          printf(lcd_putc,"DESACTIVAR= Oprima >");                         
27B8:  MOVLW  C0
27BA:  MOVWF  FF6
27BC:  MOVLW  02
27BE:  MOVWF  FF7
27C0:  CALL   1CAA
....................       }else{ 
27C4:  BRA    27E2
....................          lcd_gotoxy(1,3);                                                  
27C6:  MOVLW  01
27C8:  MOVLB  1
27CA:  MOVWF  x18
27CC:  MOVLW  03
27CE:  MOVWF  x19
27D0:  MOVLB  0
27D2:  CALL   0C80
....................          printf(lcd_putc," ACTIVAR= Oprima >  ");                         
27D6:  MOVLW  D6
27D8:  MOVWF  FF6
27DA:  MOVLW  02
27DC:  MOVWF  FF7
27DE:  CALL   1CAA
....................       } 
....................     
....................       lcd_gotoxy(1,4);                                                  
27E2:  MOVLW  01
27E4:  MOVLB  1
27E6:  MOVWF  x18
27E8:  MOVLW  04
27EA:  MOVWF  x19
27EC:  MOVLB  0
27EE:  CALL   0C80
....................       printf(lcd_putc," RESET= Oprima ^    ");                                                                                    
27F2:  MOVLW  EC
27F4:  MOVWF  FF6
27F6:  MOVLW  02
27F8:  MOVWF  FF7
27FA:  CALL   1CAA
....................     
....................       if(UP){//Si oprime hacia arriba 
27FE:  BSF    F92.5
2800:  BTFSC  F80.5
2802:  BRA    2934
....................          delay_ms(20); 
2804:  MOVLW  14
2806:  MOVLB  1
2808:  MOVWF  x1D
280A:  MOVLB  0
280C:  CALL   0B3C
....................          if(UP){ 
2810:  BSF    F92.5
2812:  BTFSC  F80.5
2814:  BRA    2934
....................             printf(lcd_putc,"\f"); 
2816:  MOVLW  0C
2818:  MOVLB  1
281A:  MOVWF  x17
281C:  MOVLB  0
281E:  CALL   0D02
....................             lcd_gotoxy(1,2); 
2822:  MOVLW  01
2824:  MOVLB  1
2826:  MOVWF  x18
2828:  MOVLW  02
282A:  MOVWF  x19
282C:  MOVLB  0
282E:  CALL   0C80
....................             printf(lcd_putc," Reset de tiempo "); 
2832:  MOVLW  02
2834:  MOVWF  FF6
2836:  MOVLW  03
2838:  MOVWF  FF7
283A:  CALL   1CAA
....................             lcd_gotoxy(1,3); 
283E:  MOVLW  01
2840:  MOVLB  1
2842:  MOVWF  x18
2844:  MOVLW  03
2846:  MOVWF  x19
2848:  MOVLB  0
284A:  CALL   0C80
....................             printf(lcd_putc,"     Exitoso     "); 
284E:  MOVLW  14
2850:  MOVWF  FF6
2852:  MOVLW  03
2854:  MOVWF  FF7
2856:  CALL   1CAA
....................             write_eeprom(70,0);delay_ms(20); 
285A:  MOVLW  46
285C:  MOVWF  FA9
285E:  CLRF   FA8
2860:  BCF    FA6.6
2862:  BCF    FA6.7
2864:  BSF    FA6.2
2866:  MOVF   FF2,W
2868:  MOVWF  00
286A:  BCF    FF2.7
286C:  MOVLB  F
286E:  MOVLW  55
2870:  MOVWF  FA7
2872:  MOVLW  AA
2874:  MOVWF  FA7
2876:  BSF    FA6.1
2878:  BTFSC  FA6.1
287A:  BRA    2878
287C:  BCF    FA6.2
287E:  MOVF   00,W
2880:  IORWF  FF2,F
2882:  MOVLW  14
2884:  MOVLB  1
2886:  MOVWF  x1D
2888:  MOVLB  0
288A:  CALL   0B3C
....................             write_eeprom(71,0);delay_ms(20); 
288E:  MOVLW  47
2890:  MOVWF  FA9
2892:  CLRF   FA8
2894:  BCF    FA6.6
2896:  BCF    FA6.7
2898:  BSF    FA6.2
289A:  MOVF   FF2,W
289C:  MOVWF  00
289E:  BCF    FF2.7
28A0:  MOVLB  F
28A2:  MOVLW  55
28A4:  MOVWF  FA7
28A6:  MOVLW  AA
28A8:  MOVWF  FA7
28AA:  BSF    FA6.1
28AC:  BTFSC  FA6.1
28AE:  BRA    28AC
28B0:  BCF    FA6.2
28B2:  MOVF   00,W
28B4:  IORWF  FF2,F
28B6:  MOVLW  14
28B8:  MOVLB  1
28BA:  MOVWF  x1D
28BC:  MOVLB  0
28BE:  CALL   0B3C
....................             write_eeprom(72,0);delay_ms(20); 
28C2:  MOVLW  48
28C4:  MOVWF  FA9
28C6:  CLRF   FA8
28C8:  BCF    FA6.6
28CA:  BCF    FA6.7
28CC:  BSF    FA6.2
28CE:  MOVF   FF2,W
28D0:  MOVWF  00
28D2:  BCF    FF2.7
28D4:  MOVLB  F
28D6:  MOVLW  55
28D8:  MOVWF  FA7
28DA:  MOVLW  AA
28DC:  MOVWF  FA7
28DE:  BSF    FA6.1
28E0:  BTFSC  FA6.1
28E2:  BRA    28E0
28E4:  BCF    FA6.2
28E6:  MOVF   00,W
28E8:  IORWF  FF2,F
28EA:  MOVLW  14
28EC:  MOVLB  1
28EE:  MOVWF  x1D
28F0:  MOVLB  0
28F2:  CALL   0B3C
....................             delay_ms(700); 
28F6:  MOVLW  04
28F8:  MOVLB  1
28FA:  MOVWF  x02
28FC:  MOVLW  AF
28FE:  MOVWF  x1D
2900:  MOVLB  0
2902:  CALL   0B3C
2906:  MOVLB  1
2908:  DECFSZ x02,F
290A:  BRA    28FC
....................             segundos=0;minutos=0;horas=0; 
290C:  CLRF   37
290E:  CLRF   38
2910:  CLRF   39
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2912:  MOVLW  1E
2914:  MOVWF  x1D
2916:  MOVLB  0
2918:  CALL   0B3C
291C:  MOVLW  01
291E:  MOVWF  1C
2920:  CLRF   44
2922:  MOVLW  02
2924:  MOVWF  1F
2926:  MOVWF  21
2928:  MOVLW  0C
292A:  MOVLB  1
292C:  MOVWF  x17
292E:  MOVLB  0
2930:  CALL   0D02
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
2934:  BSF    F96.1
2936:  BTFSC  F84.1
2938:  BRA    29BA
....................          delay_ms(20); 
293A:  MOVLW  14
293C:  MOVLB  1
293E:  MOVWF  x1D
2940:  MOVLB  0
2942:  CALL   0B3C
....................          if(RIGHT){ 
2946:  BSF    F96.1
2948:  BTFSC  F84.1
294A:  BRA    29BA
....................             flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro);delay_ms(20); 
294C:  BTG    43.2
294E:  MOVLW  00
2950:  BTFSC  43.2
2952:  MOVLW  01
2954:  MOVLB  1
2956:  MOVWF  x02
2958:  MOVLW  49
295A:  MOVWF  FA9
295C:  MOVFF  102,FA8
2960:  BCF    FA6.6
2962:  BCF    FA6.7
2964:  BSF    FA6.2
2966:  MOVF   FF2,W
2968:  MOVWF  00
296A:  BCF    FF2.7
296C:  MOVLB  F
296E:  MOVLW  55
2970:  MOVWF  FA7
2972:  MOVLW  AA
2974:  MOVWF  FA7
2976:  BSF    FA6.1
2978:  BTFSC  FA6.1
297A:  BRA    2978
297C:  BCF    FA6.2
297E:  MOVF   00,W
2980:  IORWF  FF2,F
2982:  MOVLW  14
2984:  MOVLB  1
2986:  MOVWF  x1D
2988:  MOVLB  0
298A:  CALL   0B3C
....................             delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
298E:  MOVLW  02
2990:  MOVLB  1
2992:  MOVWF  x02
2994:  MOVLW  FA
2996:  MOVWF  x1D
2998:  MOVLB  0
299A:  CALL   0B3C
299E:  MOVLB  1
29A0:  DECFSZ x02,F
29A2:  BRA    2994
29A4:  MOVLW  01
29A6:  MOVWF  1C
29A8:  CLRF   44
29AA:  MOVLW  02
29AC:  MOVWF  1F
29AE:  MOVWF  21
29B0:  MOVLW  0C
29B2:  MOVWF  x17
29B4:  MOVLB  0
29B6:  CALL   0D02
....................          } 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
29BA:  BSF    F96.2
29BC:  BTFSC  F84.2
29BE:  BRA    2A06
....................          delay_ms(20); 
29C0:  MOVLW  14
29C2:  MOVLB  1
29C4:  MOVWF  x1D
29C6:  MOVLB  0
29C8:  CALL   0B3C
....................          if(LEFT && Flanco3 == 0) { 
29CC:  BSF    F96.2
29CE:  BTFSC  F84.2
29D0:  BRA    2A04
29D2:  BTFSC  42.7
29D4:  BRA    2A04
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
29D6:  BSF    42.7
29D8:  MOVLW  02
29DA:  MOVLB  1
29DC:  MOVWF  x02
29DE:  MOVLW  FA
29E0:  MOVWF  x1D
29E2:  MOVLB  0
29E4:  CALL   0B3C
29E8:  MOVLB  1
29EA:  DECFSZ x02,F
29EC:  BRA    29DE
29EE:  MOVLW  01
29F0:  MOVWF  1C
29F2:  CLRF   44
29F4:  MOVLW  02
29F6:  MOVWF  1F
29F8:  MOVWF  21
29FA:  MOVLW  0C
29FC:  MOVWF  x17
29FE:  MOVLB  0
2A00:  CALL   0D02
....................          } 
....................       }else{ 
2A04:  BRA    2A08
....................          Flanco3 = 0; 
2A06:  BCF    42.7
....................       } 
.................... } 
2A08:  GOTO   5818 (RETURN)
....................  
.................... void MenuSetpoint(){ 
....................       lcd_gotoxy(1,2); 
*
2AA8:  MOVLW  01
2AAA:  MOVLB  1
2AAC:  MOVWF  x18
2AAE:  MOVLW  02
2AB0:  MOVWF  x19
2AB2:  MOVLB  0
2AB4:  CALL   0C80
....................       printf(lcd_putc," Tiempo de Filtro"); 
2AB8:  MOVLW  26
2ABA:  MOVWF  FF6
2ABC:  MOVLW  03
2ABE:  MOVWF  FF7
2AC0:  CALL   1CAA
....................       lcd_gotoxy(1,3); 
2AC4:  MOVLW  01
2AC6:  MOVLB  1
2AC8:  MOVWF  x18
2ACA:  MOVLW  03
2ACC:  MOVWF  x19
2ACE:  MOVLB  0
2AD0:  CALL   0C80
....................       printf(lcd_putc,"       %03u   ",setpoint); 
2AD4:  MOVLW  38
2AD6:  MOVWF  FF6
2AD8:  MOVLW  03
2ADA:  MOVWF  FF7
2ADC:  MOVLW  07
2ADE:  MOVLB  1
2AE0:  MOVWF  x0A
2AE2:  MOVLB  0
2AE4:  CALL   1CCC
2AE8:  MOVFF  41,109
2AEC:  MOVLW  03
2AEE:  MOVLB  1
2AF0:  MOVWF  x0A
2AF2:  MOVLB  0
2AF4:  CALL   1D22
2AF8:  MOVLW  20
2AFA:  MOVLB  1
2AFC:  MOVWF  x17
2AFE:  MOVLB  0
2B00:  CALL   0D02
2B04:  MOVLW  20
2B06:  MOVLB  1
2B08:  MOVWF  x17
2B0A:  MOVLB  0
2B0C:  CALL   0D02
2B10:  MOVLW  20
2B12:  MOVLB  1
2B14:  MOVWF  x17
2B16:  MOVLB  0
2B18:  CALL   0D02
....................     
....................       if(setpoint<10) 
2B1C:  MOVF   41,W
2B1E:  SUBLW  09
2B20:  BNC   2B26
....................          setpoint=10; 
2B22:  MOVLW  0A
2B24:  MOVWF  41
....................     
....................       if(UP){//Si oprime hacia arriba 
2B26:  BSF    F92.5
2B28:  BTFSC  F80.5
2B2A:  BRA    2B4A
....................          delay_ms(20); 
2B2C:  MOVLW  14
2B2E:  MOVLB  1
2B30:  MOVWF  x1D
2B32:  MOVLB  0
2B34:  CALL   0B3C
....................          if(UP && Flanco == 0) { 
2B38:  BSF    F92.5
2B3A:  BTFSC  F80.5
2B3C:  BRA    2B48
2B3E:  BTFSC  42.4
2B40:  BRA    2B48
....................             setpoint+=1;Flanco = 1; 
2B42:  MOVLW  01
2B44:  ADDWF  41,F
2B46:  BSF    42.4
....................          } 
....................       }else{ 
2B48:  BRA    2B4C
....................          Flanco = 0; 
2B4A:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2B4C:  BSF    F96.0
2B4E:  BTFSC  F84.0
2B50:  BRA    2B70
....................          delay_ms(20); 
2B52:  MOVLW  14
2B54:  MOVLB  1
2B56:  MOVWF  x1D
2B58:  MOVLB  0
2B5A:  CALL   0B3C
....................          if(DOWN && Flanco2 == 0) { 
2B5E:  BSF    F96.0
2B60:  BTFSC  F84.0
2B62:  BRA    2B6E
2B64:  BTFSC  42.6
2B66:  BRA    2B6E
....................             setpoint-=1;Flanco2 = 1; 
2B68:  MOVLW  01
2B6A:  SUBWF  41,F
2B6C:  BSF    42.6
....................          } 
....................       }else{ 
2B6E:  BRA    2B72
....................          Flanco2 = 0; 
2B70:  BCF    42.6
....................       } 
....................     
....................       if(RIGHT || LEFT){// Si oprime derecha 
2B72:  BSF    F96.1
2B74:  BTFSS  F84.1
2B76:  BRA    2B7E
2B78:  BSF    F96.2
2B7A:  BTFSC  F84.2
2B7C:  BRA    2C04
....................          delay_ms(20); 
2B7E:  MOVLW  14
2B80:  MOVLB  1
2B82:  MOVWF  x1D
2B84:  MOVLB  0
2B86:  CALL   0B3C
....................          if((RIGHT || LEFT)&& Flanco1 == 0){ 
2B8A:  BSF    F96.1
2B8C:  BTFSS  F84.1
2B8E:  BRA    2B96
2B90:  BSF    F96.2
2B92:  BTFSC  F84.2
2B94:  BRA    2C02
2B96:  BTFSC  42.5
2B98:  BRA    2C02
....................             /*Flanco1 = 1;*/ 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2B9A:  MOVLW  01
2B9C:  MOVWF  1C
2B9E:  CLRF   44
2BA0:  MOVLW  02
2BA2:  MOVWF  1F
2BA4:  MOVWF  21
2BA6:  MOVLW  0B
2BA8:  MOVWF  1E
2BAA:  MOVLW  02
2BAC:  MOVLB  1
2BAE:  MOVWF  x02
2BB0:  MOVLW  FA
2BB2:  MOVWF  x1D
2BB4:  MOVLB  0
2BB6:  CALL   0B3C
2BBA:  MOVLB  1
2BBC:  DECFSZ x02,F
2BBE:  BRA    2BB0
2BC0:  MOVLW  0C
2BC2:  MOVWF  x17
2BC4:  MOVLB  0
2BC6:  CALL   0D02
....................             /*Temporal=setpoint; 
....................             Entero=(int)setpoint; 
....................             Temporal=Temporal-Entero; 
....................             Temporal2=Temporal*10.0; 
....................             Decimal2=(int8)Temporal2;*/ 
....................             write_eeprom(40,setpoint);delay_ms(20); 
2BCA:  MOVLW  28
2BCC:  MOVWF  FA9
2BCE:  MOVFF  41,FA8
2BD2:  BCF    FA6.6
2BD4:  BCF    FA6.7
2BD6:  BSF    FA6.2
2BD8:  MOVF   FF2,W
2BDA:  MOVWF  00
2BDC:  BCF    FF2.7
2BDE:  MOVLB  F
2BE0:  MOVLW  55
2BE2:  MOVWF  FA7
2BE4:  MOVLW  AA
2BE6:  MOVWF  FA7
2BE8:  BSF    FA6.1
2BEA:  BTFSC  FA6.1
2BEC:  BRA    2BEA
2BEE:  BCF    FA6.2
2BF0:  MOVF   00,W
2BF2:  IORWF  FF2,F
2BF4:  MOVLW  14
2BF6:  MOVLB  1
2BF8:  MOVWF  x1D
2BFA:  MOVLB  0
2BFC:  CALL   0B3C
....................             //write_eeprom(41,Decimal2);delay_ms(20);//Guardar valor de Setpoint en eeprom 
....................             MensajeGuardado(); 
2C00:  RCALL  2A0C
....................          } 
....................       }else{ 
2C02:  BRA    2C06
....................          Flanco1 = 0; 
2C04:  BCF    42.5
....................       } 
.................... } 
2C06:  GOTO   5822 (RETURN)
....................  
.................... void MenuAlarma(){ 
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
*
25C2:  BTG    42.2
25C4:  BSF    42.5
25C6:  MOVLW  01
25C8:  MOVWF  1C
25CA:  CLRF   44
....................                        
....................             if(estadoalarma==1){ 
25CC:  BTFSS  42.2
25CE:  BRA    2640
....................                estadoalarma=1; 
25D0:  BSF    42.2
....................                lcd_gotoxy(1,1); 
25D2:  MOVLW  01
25D4:  MOVLB  1
25D6:  MOVWF  x18
25D8:  MOVWF  x19
25DA:  MOVLB  0
25DC:  CALL   0C80
....................                printf(lcd_putc,"                    "); 
25E0:  MOVLW  48
25E2:  MOVWF  FF6
25E4:  MOVLW  03
25E6:  MOVWF  FF7
25E8:  CALL   1CAA
....................                lcd_gotoxy(1,2); 
25EC:  MOVLW  01
25EE:  MOVLB  1
25F0:  MOVWF  x18
25F2:  MOVLW  02
25F4:  MOVWF  x19
25F6:  MOVLB  0
25F8:  CALL   0C80
....................                printf(lcd_putc,"        Activo      "); 
25FC:  MOVLW  5E
25FE:  MOVWF  FF6
2600:  MOVLW  03
2602:  MOVWF  FF7
2604:  CALL   1CAA
....................                lcd_gotoxy(1,3); 
2608:  MOVLW  01
260A:  MOVLB  1
260C:  MOVWF  x18
260E:  MOVLW  03
2610:  MOVWF  x19
2612:  MOVLB  0
2614:  CALL   0C80
....................                printf(lcd_putc,"        Alarma      "); 
2618:  MOVLW  74
261A:  MOVWF  FF6
261C:  MOVLW  03
261E:  MOVWF  FF7
2620:  CALL   1CAA
....................                lcd_gotoxy(1,4); 
2624:  MOVLW  01
2626:  MOVLB  1
2628:  MOVWF  x18
262A:  MOVLW  04
262C:  MOVWF  x19
262E:  MOVLB  0
2630:  CALL   0C80
....................                printf(lcd_putc,"                    "); 
2634:  MOVLW  8A
2636:  MOVWF  FF6
2638:  MOVLW  03
263A:  MOVWF  FF7
263C:  CALL   1CAA
....................             } 
....................                 
....................             if(estadoalarma==0){ 
2640:  BTFSC  42.2
2642:  BRA    26B4
....................                estadoalarma=0; 
2644:  BCF    42.2
....................                lcd_gotoxy(1,1); 
2646:  MOVLW  01
2648:  MOVLB  1
264A:  MOVWF  x18
264C:  MOVWF  x19
264E:  MOVLB  0
2650:  CALL   0C80
....................                printf(lcd_putc,"                    "); 
2654:  MOVLW  A0
2656:  MOVWF  FF6
2658:  MOVLW  03
265A:  MOVWF  FF7
265C:  CALL   1CAA
....................                lcd_gotoxy(1,2); 
2660:  MOVLW  01
2662:  MOVLB  1
2664:  MOVWF  x18
2666:  MOVLW  02
2668:  MOVWF  x19
266A:  MOVLB  0
266C:  CALL   0C80
....................                printf(lcd_putc,"      Desactivo     "); 
2670:  MOVLW  B6
2672:  MOVWF  FF6
2674:  MOVLW  03
2676:  MOVWF  FF7
2678:  CALL   1CAA
....................                lcd_gotoxy(1,3); 
267C:  MOVLW  01
267E:  MOVLB  1
2680:  MOVWF  x18
2682:  MOVLW  03
2684:  MOVWF  x19
2686:  MOVLB  0
2688:  CALL   0C80
....................                printf(lcd_putc,"       Alarma       "); 
268C:  MOVLW  CC
268E:  MOVWF  FF6
2690:  MOVLW  03
2692:  MOVWF  FF7
2694:  CALL   1CAA
....................                lcd_gotoxy(1,4); 
2698:  MOVLW  01
269A:  MOVLB  1
269C:  MOVWF  x18
269E:  MOVLW  04
26A0:  MOVWF  x19
26A2:  MOVLB  0
26A4:  CALL   0C80
....................                printf(lcd_putc,"                    "); 
26A8:  MOVLW  E2
26AA:  MOVWF  FF6
26AC:  MOVLW  03
26AE:  MOVWF  FF7
26B0:  CALL   1CAA
....................             } 
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
26B4:  MOVLW  00
26B6:  BTFSC  42.2
26B8:  MOVLW  01
26BA:  MOVLB  1
26BC:  MOVWF  x02
26BE:  MOVLW  05
26C0:  MOVWF  FA9
26C2:  MOVFF  102,FA8
26C6:  BCF    FA6.6
26C8:  BCF    FA6.7
26CA:  BSF    FA6.2
26CC:  MOVF   FF2,W
26CE:  MOVWF  00
26D0:  BCF    FF2.7
26D2:  MOVLB  F
26D4:  MOVLW  55
26D6:  MOVWF  FA7
26D8:  MOVLW  AA
26DA:  MOVWF  FA7
26DC:  BSF    FA6.1
26DE:  BTFSC  FA6.1
26E0:  BRA    26DE
26E2:  BCF    FA6.2
26E4:  MOVF   00,W
26E6:  IORWF  FF2,F
26E8:  MOVLW  04
26EA:  MOVLB  1
26EC:  MOVWF  x02
26EE:  MOVLW  FA
26F0:  MOVWF  x1D
26F2:  MOVLB  0
26F4:  CALL   0B3C
26F8:  MOVLB  1
26FA:  DECFSZ x02,F
26FC:  BRA    26EE
26FE:  MOVLW  02
2700:  MOVWF  1F
2702:  MOVWF  21
2704:  MOVLW  0C
2706:  MOVWF  x17
2708:  MOVLB  0
270A:  CALL   0D02
.................... } 
270E:  GOTO   580E (RETURN)
....................  
.................... void MenuMedia(){ 
....................    lcd_gotoxy(1,2); 
*
397C:  MOVLW  01
397E:  MOVLB  1
3980:  MOVWF  x18
3982:  MOVLW  02
3984:  MOVWF  x19
3986:  MOVLB  0
3988:  CALL   0C80
....................       printf(lcd_putc,"     Media Movil    "); 
398C:  MOVLW  F8
398E:  MOVWF  FF6
3990:  MOVLW  03
3992:  MOVWF  FF7
3994:  CALL   1CAA
....................       lcd_gotoxy(1,3); 
3998:  MOVLW  01
399A:  MOVLB  1
399C:  MOVWF  x18
399E:  MOVLW  03
39A0:  MOVWF  x19
39A2:  MOVLB  0
39A4:  CALL   0C80
....................       printf(lcd_putc,"       %02i   ",MediaMovil); 
39A8:  MOVLW  0E
39AA:  MOVWF  FF6
39AC:  MOVLW  04
39AE:  MOVWF  FF7
39B0:  MOVLW  07
39B2:  MOVLB  1
39B4:  MOVWF  x0A
39B6:  MOVLB  0
39B8:  CALL   1CCC
39BC:  MOVFF  30,103
39C0:  MOVLW  01
39C2:  MOVLB  1
39C4:  MOVWF  x04
39C6:  MOVLB  0
39C8:  CALL   2C0A
39CC:  MOVLW  20
39CE:  MOVLB  1
39D0:  MOVWF  x17
39D2:  MOVLB  0
39D4:  CALL   0D02
39D8:  MOVLW  20
39DA:  MOVLB  1
39DC:  MOVWF  x17
39DE:  MOVLB  0
39E0:  CALL   0D02
39E4:  MOVLW  20
39E6:  MOVLB  1
39E8:  MOVWF  x17
39EA:  MOVLB  0
39EC:  CALL   0D02
....................        
....................       if(MediaMovil>12) 
39F0:  MOVF   30,W
39F2:  SUBLW  0C
39F4:  BC    39FA
....................          MediaMovil=12; 
39F6:  MOVLW  0C
39F8:  MOVWF  30
....................     
....................       if(MediaMovil<1) 
39FA:  MOVF   30,F
39FC:  BNZ   3A02
....................          MediaMovil=1; 
39FE:  MOVLW  01
3A00:  MOVWF  30
....................     
....................       if(UP){//Si oprime hacia arriba 
3A02:  BSF    F92.5
3A04:  BTFSC  F80.5
3A06:  BRA    3A32
....................          delay_ms(20); 
3A08:  MOVLW  14
3A0A:  MOVLB  1
3A0C:  MOVWF  x1D
3A0E:  MOVLB  0
3A10:  CALL   0B3C
....................          if(UP && Flanco == 0) { 
3A14:  BSF    F92.5
3A16:  BTFSC  F80.5
3A18:  BRA    3A30
3A1A:  BTFSC  42.4
3A1C:  BRA    3A30
....................             MediaMovil+=1;Flanco = 1;delay_ms(30); 
3A1E:  MOVLW  01
3A20:  ADDWF  30,F
3A22:  BSF    42.4
3A24:  MOVLW  1E
3A26:  MOVLB  1
3A28:  MOVWF  x1D
3A2A:  MOVLB  0
3A2C:  CALL   0B3C
....................          } 
....................       }else{ 
3A30:  BRA    3A34
....................          Flanco = 0; 
3A32:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3A34:  BSF    F96.0
3A36:  BTFSC  F84.0
3A38:  BRA    3A64
....................          delay_ms(20); 
3A3A:  MOVLW  14
3A3C:  MOVLB  1
3A3E:  MOVWF  x1D
3A40:  MOVLB  0
3A42:  CALL   0B3C
....................          if(DOWN && Flanco2 == 0){ 
3A46:  BSF    F96.0
3A48:  BTFSC  F84.0
3A4A:  BRA    3A62
3A4C:  BTFSC  42.6
3A4E:  BRA    3A62
....................             MediaMovil-=1;Flanco2 = 1;delay_ms(30); 
3A50:  MOVLW  01
3A52:  SUBWF  30,F
3A54:  BSF    42.6
3A56:  MOVLW  1E
3A58:  MOVLB  1
3A5A:  MOVWF  x1D
3A5C:  MOVLB  0
3A5E:  CALL   0B3C
....................          } 
....................       }else{ 
3A62:  BRA    3A66
....................          Flanco2 = 0; 
3A64:  BCF    42.6
....................       } 
....................     
....................       if(LEFT){// Si oprime derecha 
3A66:  BSF    F96.2
3A68:  BTFSC  F84.2
3A6A:  BRA    3AEE
....................          delay_ms(20); 
3A6C:  MOVLW  14
3A6E:  MOVLB  1
3A70:  MOVWF  x1D
3A72:  MOVLB  0
3A74:  CALL   0B3C
....................          if(LEFT && Flanco1 == 0) { 
3A78:  BSF    F96.2
3A7A:  BTFSC  F84.2
3A7C:  BRA    3AEC
3A7E:  BTFSC  42.5
3A80:  BRA    3AEC
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3A82:  MOVLW  01
3A84:  MOVWF  1C
3A86:  CLRF   44
3A88:  MOVLW  02
3A8A:  MOVWF  1F
3A8C:  MOVWF  21
3A8E:  MOVLW  0B
3A90:  MOVWF  1E
3A92:  MOVLW  02
3A94:  MOVLB  1
3A96:  MOVWF  x02
3A98:  MOVLW  FA
3A9A:  MOVWF  x1D
3A9C:  MOVLB  0
3A9E:  CALL   0B3C
3AA2:  MOVLB  1
3AA4:  DECFSZ x02,F
3AA6:  BRA    3A98
3AA8:  MOVLW  0C
3AAA:  MOVWF  x17
3AAC:  MOVLB  0
3AAE:  CALL   0D02
....................             write_eeprom(42,MediaMovil);delay_ms(20);//Guardar valor de Setpoint en eeprom 
3AB2:  MOVLW  2A
3AB4:  MOVWF  FA9
3AB6:  MOVFF  30,FA8
3ABA:  BCF    FA6.6
3ABC:  BCF    FA6.7
3ABE:  BSF    FA6.2
3AC0:  MOVF   FF2,W
3AC2:  MOVWF  00
3AC4:  BCF    FF2.7
3AC6:  MOVLB  F
3AC8:  MOVLW  55
3ACA:  MOVWF  FA7
3ACC:  MOVLW  AA
3ACE:  MOVWF  FA7
3AD0:  BSF    FA6.1
3AD2:  BTFSC  FA6.1
3AD4:  BRA    3AD2
3AD6:  BCF    FA6.2
3AD8:  MOVF   00,W
3ADA:  IORWF  FF2,F
3ADC:  MOVLW  14
3ADE:  MOVLB  1
3AE0:  MOVWF  x1D
3AE2:  MOVLB  0
3AE4:  CALL   0B3C
....................             MensajeGuardado(); 
3AE8:  CALL   2A0C
....................          } 
....................       }else{ 
3AEC:  BRA    3AF0
....................          Flanco1 = 0; 
3AEE:  BCF    42.5
....................       } 
.................... } 
3AF0:  GOTO   58B6 (RETURN)
....................  
.................... void MenuPuntoCero(){ 
....................    lcd_gotoxy(1,1); 
*
3EF4:  MOVLW  01
3EF6:  MOVLB  1
3EF8:  MOVWF  x18
3EFA:  MOVWF  x19
3EFC:  MOVLB  0
3EFE:  CALL   0C80
....................       printf(lcd_putc,"  Zero Point Config "); 
3F02:  MOVLW  1E
3F04:  MOVWF  FF6
3F06:  MOVLW  04
3F08:  MOVWF  FF7
3F0A:  CALL   1CAA
....................       lcd_gotoxy(1,2); 
3F0E:  MOVLW  01
3F10:  MOVLB  1
3F12:  MOVWF  x18
3F14:  MOVLW  02
3F16:  MOVWF  x19
3F18:  MOVLB  0
3F1A:  CALL   0C80
....................       printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
3F1E:  MOVLW  34
3F20:  MOVWF  FF6
3F22:  MOVLW  04
3F24:  MOVWF  FF7
3F26:  MOVLW  08
3F28:  MOVLB  1
3F2A:  MOVWF  x0A
3F2C:  MOVLB  0
3F2E:  CALL   1CCC
3F32:  MOVLW  01
3F34:  MOVWF  FE9
3F36:  MOVFF  70,10D
3F3A:  MOVFF  6F,10C
3F3E:  MOVFF  6E,10B
3F42:  MOVFF  6D,10A
3F46:  MOVLB  1
3F48:  MOVWF  x0E
3F4A:  MOVLB  0
3F4C:  RCALL  3CAE
3F4E:  MOVLW  41
3F50:  MOVWF  FF6
3F52:  MOVLW  04
3F54:  MOVWF  FF7
3F56:  MOVLW  08
3F58:  MOVLB  1
3F5A:  MOVWF  x0A
3F5C:  MOVLB  0
3F5E:  CALL   1CCC
....................       lcd_gotoxy(1,3); 
3F62:  MOVLW  01
3F64:  MOVLB  1
3F66:  MOVWF  x18
3F68:  MOVLW  03
3F6A:  MOVWF  x19
3F6C:  MOVLB  0
3F6E:  CALL   0C80
....................       printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
3F72:  MOVLB  1
3F74:  CLRF   x13
3F76:  MOVLB  0
3F78:  RCALL  3E60
3F7A:  MOVFF  00,102
3F7E:  MOVFF  01,103
3F82:  MOVFF  02,104
3F86:  MOVFF  03,105
3F8A:  MOVLW  5A
3F8C:  MOVLB  1
3F8E:  MOVWF  x17
3F90:  MOVLB  0
3F92:  CALL   0D02
3F96:  MOVLW  46
3F98:  MOVLB  1
3F9A:  MOVWF  x17
3F9C:  MOVLB  0
3F9E:  CALL   0D02
3FA2:  MOVLW  3D
3FA4:  MOVLB  1
3FA6:  MOVWF  x17
3FA8:  MOVLB  0
3FAA:  CALL   0D02
3FAE:  MOVLW  01
3FB0:  MOVWF  FE9
3FB2:  MOVFF  53,10D
3FB6:  MOVFF  52,10C
3FBA:  MOVFF  51,10B
3FBE:  MOVFF  50,10A
3FC2:  MOVLB  1
3FC4:  CLRF   x0E
3FC6:  MOVLB  0
3FC8:  RCALL  3CAE
3FCA:  MOVLW  52
3FCC:  MOVWF  FF6
3FCE:  MOVLW  04
3FD0:  MOVWF  FF7
3FD2:  MOVLW  05
3FD4:  MOVLB  1
3FD6:  MOVWF  x0A
3FD8:  MOVLB  0
3FDA:  CALL   1CCC
3FDE:  MOVLW  01
3FE0:  MOVWF  FE9
3FE2:  MOVFF  105,10D
3FE6:  MOVFF  104,10C
3FEA:  MOVFF  103,10B
3FEE:  MOVFF  102,10A
3FF2:  MOVLB  1
3FF4:  CLRF   x0E
3FF6:  MOVLB  0
3FF8:  RCALL  3CAE
....................       lcd_gotoxy(1,4); 
3FFA:  MOVLW  01
3FFC:  MOVLB  1
3FFE:  MOVWF  x18
4000:  MOVLW  04
4002:  MOVWF  x19
4004:  MOVLB  0
4006:  CALL   0C80
....................       printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
400A:  MOVLW  5E
400C:  MOVWF  FF6
400E:  MOVLW  04
4010:  MOVWF  FF7
4012:  MOVLW  0C
4014:  MOVLB  1
4016:  MOVWF  x0A
4018:  MOVLB  0
401A:  CALL   1CCC
401E:  MOVLW  01
4020:  MOVWF  FE9
4022:  MOVFF  98,10D
4026:  MOVFF  97,10C
402A:  MOVFF  96,10B
402E:  MOVFF  95,10A
4032:  MOVLB  1
4034:  CLRF   x0E
4036:  MOVLB  0
4038:  RCALL  3CAE
....................      
....................       if(RIGHT){// Si oprime derecha 
403A:  BSF    F96.1
403C:  BTFSC  F84.1
403E:  BRA    4244
....................          delay_ms(20); 
4040:  MOVLW  14
4042:  MOVLB  1
4044:  MOVWF  x1D
4046:  MOVLB  0
4048:  CALL   0B3C
....................          if(RIGHT && Flanco1 == 0) { 
404C:  BSF    F96.1
404E:  BTFSC  F84.1
4050:  BRA    4242
4052:  BTFSC  42.5
4054:  BRA    4242
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4056:  MOVLW  01
4058:  MOVWF  1C
405A:  CLRF   44
405C:  MOVLW  02
405E:  MOVWF  1F
4060:  MOVWF  21
4062:  MOVLW  0B
4064:  MOVWF  1E
4066:  MOVLW  02
4068:  MOVLB  1
406A:  MOVWF  x02
406C:  MOVLW  FA
406E:  MOVWF  x1D
4070:  MOVLB  0
4072:  CALL   0B3C
4076:  MOVLB  1
4078:  DECFSZ x02,F
407A:  BRA    406C
407C:  MOVLW  0C
407E:  MOVWF  x17
4080:  MOVLB  0
4082:  CALL   0D02
....................             Diferencia=zero_fabrica-sensores(0); 
4086:  MOVLB  1
4088:  CLRF   x13
408A:  MOVLB  0
408C:  RCALL  3E60
408E:  MOVFF  FEA,103
4092:  MOVFF  FE9,102
4096:  BSF    FD8.1
4098:  MOVFF  53,118
409C:  MOVFF  52,117
40A0:  MOVFF  51,116
40A4:  MOVFF  50,115
40A8:  MOVFF  03,11C
40AC:  MOVFF  02,11B
40B0:  MOVFF  01,11A
40B4:  MOVFF  00,119
40B8:  CALL   0F62
40BC:  MOVFF  103,FEA
40C0:  MOVFF  102,FE9
40C4:  MOVFF  03,98
40C8:  MOVFF  02,97
40CC:  MOVFF  01,96
40D0:  MOVFF  00,95
....................              
....................             if(Diferencia>=0){ 
40D4:  MOVLB  1
40D6:  CLRF   x09
40D8:  CLRF   x08
40DA:  CLRF   x07
40DC:  CLRF   x06
40DE:  MOVFF  98,10D
40E2:  MOVFF  97,10C
40E6:  MOVFF  96,10B
40EA:  MOVFF  95,10A
40EE:  MOVLB  0
40F0:  CALL   166A
40F4:  BC    40F8
40F6:  BNZ   4132
....................                negativo=10;write_eeprom(50,negativo);delay_ms(20); 
40F8:  MOVLW  0A
40FA:  MOVWF  31
40FC:  MOVLW  32
40FE:  MOVWF  FA9
4100:  MOVFF  31,FA8
4104:  BCF    FA6.6
4106:  BCF    FA6.7
4108:  BSF    FA6.2
410A:  MOVF   FF2,W
410C:  MOVWF  00
410E:  BCF    FF2.7
4110:  MOVLB  F
4112:  MOVLW  55
4114:  MOVWF  FA7
4116:  MOVLW  AA
4118:  MOVWF  FA7
411A:  BSF    FA6.1
411C:  BTFSC  FA6.1
411E:  BRA    411C
4120:  BCF    FA6.2
4122:  MOVF   00,W
4124:  IORWF  FF2,F
4126:  MOVLW  14
4128:  MOVLB  1
412A:  MOVWF  x1D
412C:  MOVLB  0
412E:  CALL   0B3C
....................             } 
....................             if(Diferencia<0){ 
4132:  MOVFF  98,109
4136:  MOVFF  97,108
413A:  MOVFF  96,107
413E:  MOVFF  95,106
4142:  MOVLB  1
4144:  CLRF   x0D
4146:  CLRF   x0C
4148:  CLRF   x0B
414A:  CLRF   x0A
414C:  MOVLB  0
414E:  CALL   166A
4152:  BNC   418E
....................                negativo=20;write_eeprom(50,negativo);delay_ms(20); 
4154:  MOVLW  14
4156:  MOVWF  31
4158:  MOVLW  32
415A:  MOVWF  FA9
415C:  MOVFF  31,FA8
4160:  BCF    FA6.6
4162:  BCF    FA6.7
4164:  BSF    FA6.2
4166:  MOVF   FF2,W
4168:  MOVWF  00
416A:  BCF    FF2.7
416C:  MOVLB  F
416E:  MOVLW  55
4170:  MOVWF  FA7
4172:  MOVLW  AA
4174:  MOVWF  FA7
4176:  BSF    FA6.1
4178:  BTFSC  FA6.1
417A:  BRA    4178
417C:  BCF    FA6.2
417E:  MOVF   00,W
4180:  IORWF  FF2,F
4182:  MOVLW  14
4184:  MOVLB  1
4186:  MOVWF  x1D
4188:  MOVLB  0
418A:  CALL   0B3C
....................             } 
....................             Diferencia=abs(Diferencia); 
418E:  MOVFF  95,00
4192:  MOVFF  96,01
4196:  MOVFF  97,02
419A:  MOVFF  98,03
419E:  BCF    01.7
41A0:  MOVFF  98,98
41A4:  MOVFF  97,97
41A8:  MOVFF  01,96
41AC:  MOVFF  95,95
....................             Dif16=(int16)Diferencia; 
41B0:  MOVFF  98,105
41B4:  MOVFF  97,104
41B8:  MOVFF  96,103
41BC:  MOVFF  95,102
41C0:  RCALL  3EB8
41C2:  MOVFF  02,5C
41C6:  MOVFF  01,5B
....................              
....................             write_eeprom(60,make8(Dif16,0));delay_ms(20); 
41CA:  MOVFF  5B,102
41CE:  MOVLW  3C
41D0:  MOVWF  FA9
41D2:  MOVFF  102,FA8
41D6:  BCF    FA6.6
41D8:  BCF    FA6.7
41DA:  BSF    FA6.2
41DC:  MOVF   FF2,W
41DE:  MOVWF  00
41E0:  BCF    FF2.7
41E2:  MOVLB  F
41E4:  MOVLW  55
41E6:  MOVWF  FA7
41E8:  MOVLW  AA
41EA:  MOVWF  FA7
41EC:  BSF    FA6.1
41EE:  BTFSC  FA6.1
41F0:  BRA    41EE
41F2:  BCF    FA6.2
41F4:  MOVF   00,W
41F6:  IORWF  FF2,F
41F8:  MOVLW  14
41FA:  MOVLB  1
41FC:  MOVWF  x1D
41FE:  MOVLB  0
4200:  CALL   0B3C
....................             write_eeprom(61,make8(Dif16,1));delay_ms(20);//Guardar valor de Setpoint en eeprom 
4204:  MOVFF  5C,102
4208:  MOVLW  3D
420A:  MOVWF  FA9
420C:  MOVFF  102,FA8
4210:  BCF    FA6.6
4212:  BCF    FA6.7
4214:  BSF    FA6.2
4216:  MOVF   FF2,W
4218:  MOVWF  00
421A:  BCF    FF2.7
421C:  MOVLB  F
421E:  MOVLW  55
4220:  MOVWF  FA7
4222:  MOVLW  AA
4224:  MOVWF  FA7
4226:  BSF    FA6.1
4228:  BTFSC  FA6.1
422A:  BRA    4228
422C:  BCF    FA6.2
422E:  MOVF   00,W
4230:  IORWF  FF2,F
4232:  MOVLW  14
4234:  MOVLB  1
4236:  MOVWF  x1D
4238:  MOVLB  0
423A:  CALL   0B3C
....................             MensajeGuardado(); 
423E:  CALL   2A0C
....................          } 
....................       }else{ 
4242:  BRA    4246
....................          Flanco1 = 0; 
4244:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
4246:  BSF    F96.2
4248:  BTFSC  F84.2
424A:  BRA    4294
....................          delay_ms(20); 
424C:  MOVLW  14
424E:  MOVLB  1
4250:  MOVWF  x1D
4252:  MOVLB  0
4254:  CALL   0B3C
....................          if(LEFT && Flanco3 == 0) { 
4258:  BSF    F96.2
425A:  BTFSC  F84.2
425C:  BRA    4292
425E:  BTFSC  42.7
4260:  BRA    4292
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4262:  MOVLW  01
4264:  MOVWF  1C
4266:  CLRF   44
4268:  MOVLW  02
426A:  MOVWF  1F
426C:  MOVWF  21
426E:  MOVLW  0B
4270:  MOVWF  1E
4272:  MOVLW  02
4274:  MOVLB  1
4276:  MOVWF  x02
4278:  MOVLW  FA
427A:  MOVWF  x1D
427C:  MOVLB  0
427E:  CALL   0B3C
4282:  MOVLB  1
4284:  DECFSZ x02,F
4286:  BRA    4278
4288:  MOVLW  0C
428A:  MOVWF  x17
428C:  MOVLB  0
428E:  CALL   0D02
....................          } 
....................       }else{ 
4292:  BRA    4296
....................          Flanco3 = 0; 
4294:  BCF    42.7
....................       } 
.................... } 
4296:  GOTO   58C0 (RETURN)
....................  
.................... void MenuMantenimiento(){ 
....................    lcd_gotoxy(1,1); 
429A:  MOVLW  01
429C:  MOVLB  1
429E:  MOVWF  x18
42A0:  MOVWF  x19
42A2:  MOVLB  0
42A4:  CALL   0C80
....................       printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
42A8:  MOVLB  1
42AA:  CLRF   x13
42AC:  MOVLB  0
42AE:  RCALL  3E60
42B0:  MOVFF  00,102
42B4:  MOVFF  01,103
42B8:  MOVFF  02,104
42BC:  MOVFF  03,105
42C0:  MOVLW  70
42C2:  MOVWF  FF6
42C4:  MOVLW  04
42C6:  MOVWF  FF7
42C8:  MOVLW  0A
42CA:  MOVLB  1
42CC:  MOVWF  x0A
42CE:  MOVLB  0
42D0:  CALL   1CCC
42D4:  MOVLW  01
42D6:  MOVWF  FE9
42D8:  MOVFF  105,10D
42DC:  MOVFF  104,10C
42E0:  MOVFF  103,10B
42E4:  MOVFF  102,10A
42E8:  MOVLB  1
42EA:  CLRF   x0E
42EC:  MOVLB  0
42EE:  RCALL  3CAE
42F0:  MOVLW  20
42F2:  MOVLB  1
42F4:  MOVWF  x17
42F6:  MOVLB  0
42F8:  CALL   0D02
42FC:  MOVLW  20
42FE:  MOVLB  1
4300:  MOVWF  x17
4302:  MOVLB  0
4304:  CALL   0D02
....................       lcd_gotoxy(1,2); 
4308:  MOVLW  01
430A:  MOVLB  1
430C:  MOVWF  x18
430E:  MOVLW  02
4310:  MOVWF  x19
4312:  MOVLB  0
4314:  CALL   0C80
....................       printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
4318:  MOVLB  1
431A:  CLRF   x19
431C:  MOVFF  2F,118
4320:  MOVLB  0
4322:  CALL   0DCE
4326:  MOVFF  00,102
432A:  MOVFF  01,103
432E:  MOVFF  02,104
4332:  MOVFF  03,105
4336:  MOVFF  03,11A
433A:  MOVFF  02,119
433E:  MOVFF  01,118
4342:  MOVFF  00,117
4346:  MOVLB  1
4348:  CLRF   x1E
434A:  CLRF   x1D
434C:  MOVLW  7F
434E:  MOVWF  x1C
4350:  MOVLW  86
4352:  MOVWF  x1B
4354:  MOVLB  0
4356:  CALL   0E04
435A:  MOVLB  1
435C:  CLRF   x1A
435E:  CLRF   x19
4360:  MOVLW  48
4362:  MOVWF  x18
4364:  MOVLW  85
4366:  MOVWF  x17
4368:  MOVFF  03,11E
436C:  MOVFF  02,11D
4370:  MOVFF  01,11C
4374:  MOVFF  00,11B
4378:  MOVLB  0
437A:  CALL   3AF4
437E:  MOVFF  00,102
4382:  MOVFF  01,103
4386:  MOVFF  02,104
438A:  MOVFF  03,105
438E:  MOVLW  01
4390:  MOVLB  1
4392:  MOVWF  x13
4394:  MOVLB  0
4396:  RCALL  3E60
4398:  MOVFF  00,106
439C:  MOVFF  01,107
43A0:  MOVFF  02,108
43A4:  MOVFF  03,109
43A8:  MOVLW  82
43AA:  MOVWF  FF6
43AC:  MOVLW  04
43AE:  MOVWF  FF7
43B0:  MOVLW  05
43B2:  MOVLB  1
43B4:  MOVWF  x0A
43B6:  MOVLB  0
43B8:  CALL   1CCC
43BC:  MOVLW  01
43BE:  MOVWF  FE9
43C0:  MOVFF  105,10D
43C4:  MOVFF  104,10C
43C8:  MOVFF  103,10B
43CC:  MOVFF  102,10A
43D0:  MOVLB  1
43D2:  CLRF   x0E
43D4:  MOVLB  0
43D6:  RCALL  3CAE
43D8:  MOVLW  25
43DA:  MOVLB  1
43DC:  MOVWF  x17
43DE:  MOVLB  0
43E0:  CALL   0D02
43E4:  MOVLW  8E
43E6:  MOVWF  FF6
43E8:  MOVLW  04
43EA:  MOVWF  FF7
43EC:  MOVLW  04
43EE:  MOVLB  1
43F0:  MOVWF  x0A
43F2:  MOVLB  0
43F4:  CALL   1CCC
43F8:  MOVLW  01
43FA:  MOVWF  FE9
43FC:  MOVFF  109,10D
4400:  MOVFF  108,10C
4404:  MOVFF  107,10B
4408:  MOVFF  106,10A
440C:  MOVLB  1
440E:  CLRF   x0E
4410:  MOVLB  0
4412:  RCALL  3CAE
4414:  MOVLW  20
4416:  MOVLB  1
4418:  MOVWF  x17
441A:  MOVLB  0
441C:  CALL   0D02
....................       lcd_gotoxy(1,3); 
4420:  MOVLW  01
4422:  MOVLB  1
4424:  MOVWF  x18
4426:  MOVLW  03
4428:  MOVWF  x19
442A:  MOVLB  0
442C:  CALL   0C80
....................       printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
4430:  MOVLW  02
4432:  MOVLB  1
4434:  MOVWF  x13
4436:  MOVLB  0
4438:  RCALL  3E60
443A:  MOVFF  00,102
443E:  MOVFF  01,103
4442:  MOVFF  02,104
4446:  MOVFF  03,105
444A:  MOVFF  03,11A
444E:  MOVFF  02,119
4452:  MOVFF  01,118
4456:  MOVFF  00,117
445A:  MOVLB  1
445C:  CLRF   x1E
445E:  MOVLW  C0
4460:  MOVWF  x1D
4462:  MOVLW  7F
4464:  MOVWF  x1C
4466:  MOVLW  88
4468:  MOVWF  x1B
446A:  MOVLB  0
446C:  CALL   0E04
4470:  MOVLB  1
4472:  CLRF   x1A
4474:  CLRF   x19
4476:  MOVLW  48
4478:  MOVWF  x18
447A:  MOVLW  85
447C:  MOVWF  x17
447E:  MOVFF  03,11E
4482:  MOVFF  02,11D
4486:  MOVFF  01,11C
448A:  MOVFF  00,11B
448E:  MOVLB  0
4490:  CALL   3AF4
4494:  MOVFF  00,102
4498:  MOVFF  01,103
449C:  MOVFF  02,104
44A0:  MOVFF  03,105
44A4:  MOVLW  9A
44A6:  MOVWF  FF6
44A8:  MOVLW  04
44AA:  MOVWF  FF7
44AC:  MOVLW  04
44AE:  MOVLB  1
44B0:  MOVWF  x0A
44B2:  MOVLB  0
44B4:  CALL   1CCC
44B8:  MOVLW  01
44BA:  MOVWF  FE9
44BC:  MOVFF  70,10D
44C0:  MOVFF  6F,10C
44C4:  MOVFF  6E,10B
44C8:  MOVFF  6D,10A
44CC:  MOVLB  1
44CE:  MOVWF  x0E
44D0:  MOVLB  0
44D2:  CALL   3CAE
44D6:  MOVLW  A3
44D8:  MOVWF  FF6
44DA:  MOVLW  04
44DC:  MOVWF  FF7
44DE:  MOVLW  0A
44E0:  MOVLB  1
44E2:  MOVWF  x0A
44E4:  MOVLB  0
44E6:  CALL   1CCC
44EA:  MOVLW  01
44EC:  MOVWF  FE9
44EE:  MOVFF  105,10D
44F2:  MOVFF  104,10C
44F6:  MOVFF  103,10B
44FA:  MOVFF  102,10A
44FE:  MOVLB  1
4500:  CLRF   x0E
4502:  MOVLB  0
4504:  CALL   3CAE
....................       lcd_gotoxy(1,4); 
4508:  MOVLW  01
450A:  MOVLB  1
450C:  MOVWF  x18
450E:  MOVLW  04
4510:  MOVWF  x19
4512:  MOVLB  0
4514:  CALL   0C80
....................       printf(lcd_putc,"Ajuste1= %2.1f ",Ajuste1); 
4518:  MOVLW  B4
451A:  MOVWF  FF6
451C:  MOVLW  04
451E:  MOVWF  FF7
4520:  MOVLW  09
4522:  MOVLB  1
4524:  MOVWF  x0A
4526:  MOVLB  0
4528:  CALL   1CCC
452C:  MOVLW  01
452E:  MOVWF  FE9
4530:  MOVFF  9C,10D
4534:  MOVFF  9B,10C
4538:  MOVFF  9A,10B
453C:  MOVFF  99,10A
4540:  MOVLB  1
4542:  MOVWF  x0E
4544:  MOVLB  0
4546:  CALL   3CAE
454A:  MOVLW  20
454C:  MOVLB  1
454E:  MOVWF  x17
4550:  MOVLB  0
4552:  CALL   0D02
....................        
....................       if(Ajuste1>30.0) 
4556:  MOVLB  1
4558:  CLRF   x09
455A:  CLRF   x08
455C:  MOVLW  70
455E:  MOVWF  x07
4560:  MOVLW  83
4562:  MOVWF  x06
4564:  MOVFF  9C,10D
4568:  MOVFF  9B,10C
456C:  MOVFF  9A,10B
4570:  MOVFF  99,10A
4574:  MOVLB  0
4576:  CALL   166A
457A:  BNC   4584
....................          Ajuste1=0.0; 
457C:  CLRF   x9C
457E:  CLRF   x9B
4580:  CLRF   x9A
4582:  CLRF   x99
....................           
....................       if(Ajuste1<0.0) 
4584:  MOVFF  9C,109
4588:  MOVFF  9B,108
458C:  MOVFF  9A,107
4590:  MOVFF  99,106
4594:  MOVLB  1
4596:  CLRF   x0D
4598:  CLRF   x0C
459A:  CLRF   x0B
459C:  CLRF   x0A
459E:  MOVLB  0
45A0:  CALL   166A
45A4:  BNC   45AE
....................          {Ajuste1=0.0;} 
45A6:  CLRF   x9C
45A8:  CLRF   x9B
45AA:  CLRF   x9A
45AC:  CLRF   x99
....................        
....................       if(UP){//Si oprime hacia arriba 
45AE:  BSF    F92.5
45B0:  BTFSC  F80.5
45B2:  BRA    4600
....................          delay_ms(50); 
45B4:  MOVLW  32
45B6:  MOVLB  1
45B8:  MOVWF  x1D
45BA:  MOVLB  0
45BC:  CALL   0B3C
....................          if(UP){ 
45C0:  BSF    F92.5
45C2:  BTFSC  F80.5
45C4:  BRA    4600
....................             Ajuste1+=0.1; 
45C6:  BCF    FD8.1
45C8:  MOVFF  9C,118
45CC:  MOVFF  9B,117
45D0:  MOVFF  9A,116
45D4:  MOVFF  99,115
45D8:  MOVLW  CD
45DA:  MOVLB  1
45DC:  MOVWF  x1C
45DE:  MOVLW  CC
45E0:  MOVWF  x1B
45E2:  MOVLW  4C
45E4:  MOVWF  x1A
45E6:  MOVLW  7B
45E8:  MOVWF  x19
45EA:  MOVLB  0
45EC:  CALL   0F62
45F0:  MOVFF  03,9C
45F4:  MOVFF  02,9B
45F8:  MOVFF  01,9A
45FC:  MOVFF  00,99
....................          } 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
4600:  BSF    F96.0
4602:  BTFSC  F84.0
4604:  BRA    4652
....................          delay_ms(50); 
4606:  MOVLW  32
4608:  MOVLB  1
460A:  MOVWF  x1D
460C:  MOVLB  0
460E:  CALL   0B3C
....................          if(DOWN){ 
4612:  BSF    F96.0
4614:  BTFSC  F84.0
4616:  BRA    4652
....................             Ajuste1-=0.1; 
4618:  BSF    FD8.1
461A:  MOVFF  9C,118
461E:  MOVFF  9B,117
4622:  MOVFF  9A,116
4626:  MOVFF  99,115
462A:  MOVLW  CD
462C:  MOVLB  1
462E:  MOVWF  x1C
4630:  MOVLW  CC
4632:  MOVWF  x1B
4634:  MOVLW  4C
4636:  MOVWF  x1A
4638:  MOVLW  7B
463A:  MOVWF  x19
463C:  MOVLB  0
463E:  CALL   0F62
4642:  MOVFF  03,9C
4646:  MOVFF  02,9B
464A:  MOVFF  01,9A
464E:  MOVFF  00,99
....................          } 
....................       } 
....................        
....................       if(LEFT){// Si oprime derecha 
4652:  BSF    F96.2
4654:  BTFSC  F84.2
4656:  BRA    47BE
....................          delay_ms(20); 
4658:  MOVLW  14
465A:  MOVLB  1
465C:  MOVWF  x1D
465E:  MOVLB  0
4660:  CALL   0B3C
....................          if(LEFT && Flanco1 == 0) { 
4664:  BSF    F96.2
4666:  BTFSC  F84.2
4668:  BRA    47BC
466A:  BTFSC  42.5
466C:  BRA    47BC
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
466E:  MOVLW  01
4670:  MOVWF  1C
4672:  CLRF   44
4674:  MOVLW  02
4676:  MOVWF  1F
4678:  MOVWF  21
467A:  MOVLW  0B
467C:  MOVWF  1E
467E:  MOVLW  1E
4680:  MOVLB  1
4682:  MOVWF  x1D
4684:  MOVLB  0
4686:  CALL   0B3C
468A:  MOVLW  0C
468C:  MOVLB  1
468E:  MOVWF  x17
4690:  MOVLB  0
4692:  CALL   0D02
....................             Temporal=Ajuste1; 
4696:  MOVFF  9C,88
469A:  MOVFF  9B,87
469E:  MOVFF  9A,86
46A2:  MOVFF  99,85
....................             Entero=(int)Ajuste1; 
46A6:  MOVFF  9C,105
46AA:  MOVFF  9B,104
46AE:  MOVFF  9A,103
46B2:  MOVFF  99,102
46B6:  RCALL  3EB8
46B8:  MOVFF  01,28
....................             Temporal=Temporal-Entero; 
46BC:  MOVLB  1
46BE:  CLRF   x19
46C0:  MOVFF  28,118
46C4:  MOVLB  0
46C6:  CALL   0DCE
46CA:  BSF    FD8.1
46CC:  MOVFF  88,118
46D0:  MOVFF  87,117
46D4:  MOVFF  86,116
46D8:  MOVFF  85,115
46DC:  MOVFF  03,11C
46E0:  MOVFF  02,11B
46E4:  MOVFF  01,11A
46E8:  MOVFF  00,119
46EC:  CALL   0F62
46F0:  MOVFF  03,88
46F4:  MOVFF  02,87
46F8:  MOVFF  01,86
46FC:  MOVFF  00,85
....................             Temporal2=Temporal*10.0; 
4700:  MOVFF  88,11A
4704:  MOVFF  87,119
4708:  MOVFF  86,118
470C:  MOVFF  85,117
4710:  MOVLB  1
4712:  CLRF   x1E
4714:  CLRF   x1D
4716:  MOVLW  20
4718:  MOVWF  x1C
471A:  MOVLW  82
471C:  MOVWF  x1B
471E:  MOVLB  0
4720:  CALL   3AF4
4724:  MOVFF  03,8C
4728:  MOVFF  02,8B
472C:  MOVFF  01,8A
4730:  MOVFF  00,89
....................             Decimal1=(int8)Temporal2; 
4734:  MOVFF  8C,105
4738:  MOVFF  8B,104
473C:  MOVFF  8A,103
4740:  MOVFF  89,102
4744:  CALL   3EB8
4748:  MOVFF  01,29
....................             write_eeprom(25,Entero);delay_ms(20); 
474C:  MOVLW  19
474E:  MOVWF  FA9
4750:  MOVFF  28,FA8
4754:  BCF    FA6.6
4756:  BCF    FA6.7
4758:  BSF    FA6.2
475A:  MOVF   FF2,W
475C:  MOVWF  00
475E:  BCF    FF2.7
4760:  MOVLB  F
4762:  MOVLW  55
4764:  MOVWF  FA7
4766:  MOVLW  AA
4768:  MOVWF  FA7
476A:  BSF    FA6.1
476C:  BTFSC  FA6.1
476E:  BRA    476C
4770:  BCF    FA6.2
4772:  MOVF   00,W
4774:  IORWF  FF2,F
4776:  MOVLW  14
4778:  MOVLB  1
477A:  MOVWF  x1D
477C:  MOVLB  0
477E:  CALL   0B3C
....................             write_eeprom(26,Decimal1);delay_ms(20); 
4782:  MOVLW  1A
4784:  MOVWF  FA9
4786:  MOVFF  29,FA8
478A:  BCF    FA6.6
478C:  BCF    FA6.7
478E:  BSF    FA6.2
4790:  MOVF   FF2,W
4792:  MOVWF  00
4794:  BCF    FF2.7
4796:  MOVLB  F
4798:  MOVLW  55
479A:  MOVWF  FA7
479C:  MOVLW  AA
479E:  MOVWF  FA7
47A0:  BSF    FA6.1
47A2:  BTFSC  FA6.1
47A4:  BRA    47A2
47A6:  BCF    FA6.2
47A8:  MOVF   00,W
47AA:  IORWF  FF2,F
47AC:  MOVLW  14
47AE:  MOVLB  1
47B0:  MOVWF  x1D
47B2:  MOVLB  0
47B4:  CALL   0B3C
....................             MensajeGuardado(); 
47B8:  CALL   2A0C
....................          } 
....................       }else{ 
47BC:  BRA    47C0
....................          Flanco1 = 0; 
47BE:  BCF    42.5
....................       } 
....................              
.................... } 
47C0:  GOTO   58CA (RETURN)
....................  
.................... void MenuModo(){ 
....................    lcd_gotoxy(1,1); 
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
....................  
....................    lcd_gotoxy(1,4); 
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
....................        
....................          if(UP && DOWN){ 
....................             delay_ms(20); 
....................             if(UP && DOWN){ 
....................                ModoAuto=0; 
....................                ModoManual=1; 
....................                ModoSemi=0; 
....................                Automa=10; 
....................                Semi=10; 
....................                Manual=20; 
....................             } 
....................          } 
....................           
....................          if(DOWN && RIGHT){ 
....................             delay_ms(20); 
....................             if(DOWN && RIGHT){ 
....................                ModoAuto=1; 
....................                ModoManual=0; 
....................                ModoSemi=0; 
....................                Automa=20; 
....................                Semi=10; 
....................                Manual=10; 
....................             } 
....................          } 
....................           
....................          if(UP && RIGHT){ 
....................             delay_ms(20); 
....................             if(UP && RIGHT){ 
....................                ModoAuto=0; 
....................                ModoManual=0; 
....................                ModoSemi=1; 
....................                Automa=10; 
....................                Semi=20; 
....................                Manual=10; 
....................             } 
....................          } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Manual  "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................          
....................       if(ModoAuto == 1 || Automa==20) 
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Auto   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Semi   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"  Ajuste Valor    "); 
....................          if(UP){ 
....................             delay_ms(20); 
....................             if(UP) 
....................                tmp++; 
....................          } 
....................           
....................          if(DOWN){ 
....................             delay_ms(20); 
....................             if(DOWN) 
....................                tmp--; 
....................          } 
....................           
....................          ValorSemi=tmp; 
....................          ajustar_damper(tmp); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                write_eeprom(13,tmp);delay_ms(20);ModoSemi=0;ModoAuto=0;ModoManual=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       }  
.................... } 
....................  
.................... void MenuTiempoPurga(){ 
....................    lcd_gotoxy(1,1); 
*
30FC:  MOVLW  01
30FE:  MOVLB  1
3100:  MOVWF  x18
3102:  MOVWF  x19
3104:  MOVLB  0
3106:  CALL   0C80
....................       printf(lcd_putc,"     Tiempo  de      "); 
310A:  MOVLW  66
310C:  MOVWF  FF6
310E:  MOVLW  05
3110:  MOVWF  FF7
3112:  CALL   1CAA
....................       lcd_gotoxy(1,2); 
3116:  MOVLW  01
3118:  MOVLB  1
311A:  MOVWF  x18
311C:  MOVLW  02
311E:  MOVWF  x19
3120:  MOVLB  0
3122:  CALL   0C80
....................       printf(lcd_putc,"       Purga         "); 
3126:  MOVLW  7C
3128:  MOVWF  FF6
312A:  MOVLW  05
312C:  MOVWF  FF7
312E:  CALL   1CAA
....................       lcd_gotoxy(6,3); 
3132:  MOVLW  06
3134:  MOVLB  1
3136:  MOVWF  x18
3138:  MOVLW  03
313A:  MOVWF  x19
313C:  MOVLB  0
313E:  CALL   0C80
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
3142:  MOVFF  27,109
3146:  MOVLW  01
3148:  MOVLB  1
314A:  MOVWF  x0A
314C:  MOVLB  0
314E:  CALL   1D22
3152:  MOVLW  3A
3154:  MOVLB  1
3156:  MOVWF  x17
3158:  MOVLB  0
315A:  CALL   0D02
315E:  MOVFF  3C,109
3162:  MOVLW  01
3164:  MOVLB  1
3166:  MOVWF  x0A
3168:  MOVLB  0
316A:  CALL   1D22
316E:  MOVLW  9B
3170:  MOVWF  FF6
3172:  MOVLW  05
3174:  MOVWF  FF7
3176:  MOVLW  08
3178:  MOVLB  1
317A:  MOVWF  x0A
317C:  MOVLB  0
317E:  CALL   1CCC
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
3182:  MOVLW  06
3184:  ADDWF  25,W
3186:  MOVLB  1
3188:  MOVWF  x02
318A:  MOVWF  x18
318C:  MOVLW  04
318E:  MOVWF  x19
3190:  MOVLB  0
3192:  CALL   0C80
....................       lcd_putc(t[2]); 
3196:  MOVFF  47,117
319A:  CALL   0D02
....................        
....................       if(unidad2<1) 
319E:  MOVF   25,F
31A0:  BNZ   31A6
....................          unidad2=1; 
31A2:  MOVLW  01
31A4:  MOVWF  25
....................       if(unidad2>3) 
31A6:  MOVF   25,W
31A8:  SUBLW  03
31AA:  BC    31B0
....................          unidad2=3;    
31AC:  MOVLW  03
31AE:  MOVWF  25
....................        
....................       if(UP){ 
31B0:  BSF    F92.5
31B2:  BTFSC  F80.5
31B4:  BRA    3200
....................          if(unidad2==1){ 
31B6:  DECFSZ 25,W
31B8:  BRA    31DA
....................             if(purga_minutos_pro<61){ 
31BA:  MOVF   27,W
31BC:  SUBLW  3C
31BE:  BNC   31DA
....................                purga_minutos_pro++;delay_ms(300); 
31C0:  INCF   27,F
31C2:  MOVLW  02
31C4:  MOVLB  1
31C6:  MOVWF  x02
31C8:  MOVLW  96
31CA:  MOVWF  x1D
31CC:  MOVLB  0
31CE:  CALL   0B3C
31D2:  MOVLB  1
31D4:  DECFSZ x02,F
31D6:  BRA    31C8
31D8:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
31DA:  MOVF   25,W
31DC:  SUBLW  03
31DE:  BNZ   3200
....................             if(purga_segundos_pro<60){ 
31E0:  MOVF   3C,W
31E2:  SUBLW  3B
31E4:  BNC   3200
....................                purga_segundos_pro++;delay_ms(300); 
31E6:  INCF   3C,F
31E8:  MOVLW  02
31EA:  MOVLB  1
31EC:  MOVWF  x02
31EE:  MOVLW  96
31F0:  MOVWF  x1D
31F2:  MOVLB  0
31F4:  CALL   0B3C
31F8:  MOVLB  1
31FA:  DECFSZ x02,F
31FC:  BRA    31EE
31FE:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
3200:  BSF    F96.0
3202:  BTFSC  F84.0
3204:  BRA    3292
....................          if(unidad2==1){ 
3206:  DECFSZ 25,W
3208:  BRA    324C
....................             if(purga_minutos_pro>1){ 
320A:  MOVF   27,W
320C:  SUBLW  01
320E:  BC    322A
....................                purga_minutos_pro--;delay_ms(300); 
3210:  DECF   27,F
3212:  MOVLW  02
3214:  MOVLB  1
3216:  MOVWF  x02
3218:  MOVLW  96
321A:  MOVWF  x1D
321C:  MOVLB  0
321E:  CALL   0B3C
3222:  MOVLB  1
3224:  DECFSZ x02,F
3226:  BRA    3218
3228:  MOVLB  0
....................             } 
....................              
....................             if(purga_minutos_pro>60){ 
322A:  MOVF   27,W
322C:  SUBLW  3C
322E:  BC    324C
....................                purga_minutos_pro=60;delay_ms(300); 
3230:  MOVLW  3C
3232:  MOVWF  27
3234:  MOVLW  02
3236:  MOVLB  1
3238:  MOVWF  x02
323A:  MOVLW  96
323C:  MOVWF  x1D
323E:  MOVLB  0
3240:  CALL   0B3C
3244:  MOVLB  1
3246:  DECFSZ x02,F
3248:  BRA    323A
324A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
324C:  MOVF   25,W
324E:  SUBLW  03
3250:  BNZ   3292
....................             if(purga_segundos_pro>0){ 
3252:  MOVF   3C,F
3254:  BZ    3270
....................                purga_segundos_pro--;delay_ms(300); 
3256:  DECF   3C,F
3258:  MOVLW  02
325A:  MOVLB  1
325C:  MOVWF  x02
325E:  MOVLW  96
3260:  MOVWF  x1D
3262:  MOVLB  0
3264:  CALL   0B3C
3268:  MOVLB  1
326A:  DECFSZ x02,F
326C:  BRA    325E
326E:  MOVLB  0
....................             } 
....................              
....................             if(purga_segundos_pro>59){ 
3270:  MOVF   3C,W
3272:  SUBLW  3B
3274:  BC    3292
....................                purga_segundos_pro=59;delay_ms(300); 
3276:  MOVLW  3B
3278:  MOVWF  3C
327A:  MOVLW  02
327C:  MOVLB  1
327E:  MOVWF  x02
3280:  MOVLW  96
3282:  MOVWF  x1D
3284:  MOVLB  0
3286:  CALL   0B3C
328A:  MOVLB  1
328C:  DECFSZ x02,F
328E:  BRA    3280
3290:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
3292:  BSF    F96.1
3294:  BTFSC  F84.1
3296:  BRA    32D2
....................          if(unidad2==1){ 
3298:  DECFSZ 25,W
329A:  BRA    32A2
....................             unidad2=3; 
329C:  MOVLW  03
329E:  MOVWF  25
....................          }else{ 
32A0:  BRA    32B2
....................             if(unidad2==3){ 
32A2:  MOVF   25,W
32A4:  SUBLW  03
32A6:  BNZ   32AE
....................                unidad2=1; 
32A8:  MOVLW  01
32AA:  MOVWF  25
....................             }else{ 
32AC:  BRA    32B2
....................                unidad2=3; 
32AE:  MOVLW  03
32B0:  MOVWF  25
....................             } 
....................          } 
....................          delay_ms(500); 
32B2:  MOVLW  02
32B4:  MOVLB  1
32B6:  MOVWF  x02
32B8:  MOVLW  FA
32BA:  MOVWF  x1D
32BC:  MOVLB  0
32BE:  CALL   0B3C
32C2:  MOVLB  1
32C4:  DECFSZ x02,F
32C6:  BRA    32B8
....................          printf(lcd_putc,"\f"); 
32C8:  MOVLW  0C
32CA:  MOVWF  x17
32CC:  MOVLB  0
32CE:  CALL   0D02
....................       } 
....................        
....................       if(LEFT) 
32D2:  BSF    F96.2
32D4:  BTFSC  F84.2
32D6:  BRA    33D4
....................       { 
....................          delay_ms(200); 
32D8:  MOVLW  C8
32DA:  MOVLB  1
32DC:  MOVWF  x1D
32DE:  MOVLB  0
32E0:  CALL   0B3C
....................          printf(lcd_putc,"\f"); 
32E4:  MOVLW  0C
32E6:  MOVLB  1
32E8:  MOVWF  x17
32EA:  MOVLB  0
32EC:  CALL   0D02
....................          lcd_gotoxy(1,2); 
32F0:  MOVLW  01
32F2:  MOVLB  1
32F4:  MOVWF  x18
32F6:  MOVLW  02
32F8:  MOVWF  x19
32FA:  MOVLB  0
32FC:  CALL   0C80
....................          printf(lcd_putc,"Tiempo Almacenado"); 
3300:  MOVLW  A4
3302:  MOVWF  FF6
3304:  MOVLW  05
3306:  MOVWF  FF7
3308:  CALL   1CAA
....................          lcd_gotoxy(1,3); 
330C:  MOVLW  01
330E:  MOVLB  1
3310:  MOVWF  x18
3312:  MOVLW  03
3314:  MOVWF  x19
3316:  MOVLB  0
3318:  CALL   0C80
....................          printf(lcd_putc,"  Correctamente  "); 
331C:  MOVLW  B6
331E:  MOVWF  FF6
3320:  MOVLW  05
3322:  MOVWF  FF7
3324:  CALL   1CAA
....................          write_eeprom(20,purga_minutos_pro);delay_ms(30); 
3328:  MOVLW  14
332A:  MOVWF  FA9
332C:  MOVFF  27,FA8
3330:  BCF    FA6.6
3332:  BCF    FA6.7
3334:  BSF    FA6.2
3336:  MOVF   FF2,W
3338:  MOVWF  00
333A:  BCF    FF2.7
333C:  MOVLB  F
333E:  MOVLW  55
3340:  MOVWF  FA7
3342:  MOVLW  AA
3344:  MOVWF  FA7
3346:  BSF    FA6.1
3348:  BTFSC  FA6.1
334A:  BRA    3348
334C:  BCF    FA6.2
334E:  MOVF   00,W
3350:  IORWF  FF2,F
3352:  MOVLW  1E
3354:  MOVLB  1
3356:  MOVWF  x1D
3358:  MOVLB  0
335A:  CALL   0B3C
....................          write_eeprom(21,purga_segundos_pro);delay_ms(30); 
335E:  MOVLW  15
3360:  MOVWF  FA9
3362:  MOVFF  3C,FA8
3366:  BCF    FA6.6
3368:  BCF    FA6.7
336A:  BSF    FA6.2
336C:  MOVF   FF2,W
336E:  MOVWF  00
3370:  BCF    FF2.7
3372:  MOVLB  F
3374:  MOVLW  55
3376:  MOVWF  FA7
3378:  MOVLW  AA
337A:  MOVWF  FA7
337C:  BSF    FA6.1
337E:  BTFSC  FA6.1
3380:  BRA    337E
3382:  BCF    FA6.2
3384:  MOVF   00,W
3386:  IORWF  FF2,F
3388:  MOVLW  1E
338A:  MOVLB  1
338C:  MOVWF  x1D
338E:  MOVLB  0
3390:  CALL   0B3C
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
3394:  MOVFF  27,26
3398:  MOVFF  3C,3B
....................          delay_ms(700); 
339C:  MOVLW  04
339E:  MOVLB  1
33A0:  MOVWF  x02
33A2:  MOVLW  AF
33A4:  MOVWF  x1D
33A6:  MOVLB  0
33A8:  CALL   0B3C
33AC:  MOVLB  1
33AE:  DECFSZ x02,F
33B0:  BRA    33A2
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
33B2:  MOVLW  1E
33B4:  MOVWF  x1D
33B6:  MOVLB  0
33B8:  CALL   0B3C
33BC:  MOVLW  01
33BE:  MOVWF  1C
33C0:  CLRF   44
33C2:  MOVLW  02
33C4:  MOVWF  1F
33C6:  MOVWF  21
33C8:  MOVLW  0C
33CA:  MOVLB  1
33CC:  MOVWF  x17
33CE:  MOVLB  0
33D0:  CALL   0D02
....................       }   
.................... } 
33D4:  GOTO   5860 (RETURN)
....................  
.................... void MenuTiempoPostPurga(){ 
....................    lcd_gotoxy(1,1); 
33D8:  MOVLW  01
33DA:  MOVLB  1
33DC:  MOVWF  x18
33DE:  MOVWF  x19
33E0:  MOVLB  0
33E2:  CALL   0C80
....................       printf(lcd_putc,"     Tiempo  de      "); 
33E6:  MOVLW  C8
33E8:  MOVWF  FF6
33EA:  MOVLW  05
33EC:  MOVWF  FF7
33EE:  CALL   1CAA
....................       lcd_gotoxy(1,2); 
33F2:  MOVLW  01
33F4:  MOVLB  1
33F6:  MOVWF  x18
33F8:  MOVLW  02
33FA:  MOVWF  x19
33FC:  MOVLB  0
33FE:  CALL   0C80
....................       printf(lcd_putc,"     Post-Purga      "); 
3402:  MOVLW  DE
3404:  MOVWF  FF6
3406:  MOVLW  05
3408:  MOVWF  FF7
340A:  CALL   1CAA
....................       lcd_gotoxy(6,3); 
340E:  MOVLW  06
3410:  MOVLB  1
3412:  MOVWF  x18
3414:  MOVLW  03
3416:  MOVWF  x19
3418:  MOVLB  0
341A:  CALL   0C80
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
341E:  MOVFF  40,109
3422:  MOVLW  01
3424:  MOVLB  1
3426:  MOVWF  x0A
3428:  MOVLB  0
342A:  CALL   1D22
342E:  MOVLW  3A
3430:  MOVLB  1
3432:  MOVWF  x17
3434:  MOVLB  0
3436:  CALL   0D02
343A:  MOVFF  3E,109
343E:  MOVLW  01
3440:  MOVLB  1
3442:  MOVWF  x0A
3444:  MOVLB  0
3446:  CALL   1D22
344A:  MOVLW  FD
344C:  MOVWF  FF6
344E:  MOVLW  05
3450:  MOVWF  FF7
3452:  MOVLW  08
3454:  MOVLB  1
3456:  MOVWF  x0A
3458:  MOVLB  0
345A:  CALL   1CCC
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
345E:  MOVLW  06
3460:  ADDWF  25,W
3462:  MOVLB  1
3464:  MOVWF  x02
3466:  MOVWF  x18
3468:  MOVLW  04
346A:  MOVWF  x19
346C:  MOVLB  0
346E:  CALL   0C80
....................       lcd_putc(t[2]); 
3472:  MOVFF  47,117
3476:  CALL   0D02
....................       if(unidad2<1) 
347A:  MOVF   25,F
347C:  BNZ   3482
....................          unidad2=1; 
347E:  MOVLW  01
3480:  MOVWF  25
....................       if(unidad2>3) 
3482:  MOVF   25,W
3484:  SUBLW  03
3486:  BC    348C
....................          unidad2=3;    
3488:  MOVLW  03
348A:  MOVWF  25
....................        
....................       if(UP) 
348C:  BSF    F92.5
348E:  BTFSC  F80.5
3490:  BRA    34DC
....................       { 
....................          if(unidad2==1) 
3492:  DECFSZ 25,W
3494:  BRA    34B6
....................          { 
....................             if(ppurga_minutos_pro<61) 
3496:  MOVF   40,W
3498:  SUBLW  3C
349A:  BNC   34B6
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
349C:  INCF   40,F
349E:  MOVLW  02
34A0:  MOVLB  1
34A2:  MOVWF  x02
34A4:  MOVLW  96
34A6:  MOVWF  x1D
34A8:  MOVLB  0
34AA:  CALL   0B3C
34AE:  MOVLB  1
34B0:  DECFSZ x02,F
34B2:  BRA    34A4
34B4:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
34B6:  MOVF   25,W
34B8:  SUBLW  03
34BA:  BNZ   34DC
....................          { 
....................             if(ppurga_segundos_pro<60) 
34BC:  MOVF   3E,W
34BE:  SUBLW  3B
34C0:  BNC   34DC
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
34C2:  INCF   3E,F
34C4:  MOVLW  02
34C6:  MOVLB  1
34C8:  MOVWF  x02
34CA:  MOVLW  96
34CC:  MOVWF  x1D
34CE:  MOVLB  0
34D0:  CALL   0B3C
34D4:  MOVLB  1
34D6:  DECFSZ x02,F
34D8:  BRA    34CA
34DA:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
34DC:  BSF    F96.0
34DE:  BTFSC  F84.0
34E0:  BRA    356E
....................       { 
....................          if(unidad2==1) 
34E2:  DECFSZ 25,W
34E4:  BRA    3528
....................          { 
....................             if(ppurga_minutos_pro>1) 
34E6:  MOVF   40,W
34E8:  SUBLW  01
34EA:  BC    3506
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
34EC:  DECF   40,F
34EE:  MOVLW  02
34F0:  MOVLB  1
34F2:  MOVWF  x02
34F4:  MOVLW  96
34F6:  MOVWF  x1D
34F8:  MOVLB  0
34FA:  CALL   0B3C
34FE:  MOVLB  1
3500:  DECFSZ x02,F
3502:  BRA    34F4
3504:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
3506:  MOVF   40,W
3508:  SUBLW  3C
350A:  BC    3528
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
350C:  MOVLW  3C
350E:  MOVWF  40
3510:  MOVLW  02
3512:  MOVLB  1
3514:  MOVWF  x02
3516:  MOVLW  96
3518:  MOVWF  x1D
351A:  MOVLB  0
351C:  CALL   0B3C
3520:  MOVLB  1
3522:  DECFSZ x02,F
3524:  BRA    3516
3526:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
3528:  MOVF   25,W
352A:  SUBLW  03
352C:  BNZ   356E
....................          { 
....................             if(ppurga_segundos_pro>0) 
352E:  MOVF   3E,F
3530:  BZ    354C
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
3532:  DECF   3E,F
3534:  MOVLW  02
3536:  MOVLB  1
3538:  MOVWF  x02
353A:  MOVLW  96
353C:  MOVWF  x1D
353E:  MOVLB  0
3540:  CALL   0B3C
3544:  MOVLB  1
3546:  DECFSZ x02,F
3548:  BRA    353A
354A:  MOVLB  0
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
354C:  MOVF   3E,W
354E:  SUBLW  3B
3550:  BC    356E
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
3552:  MOVLW  3B
3554:  MOVWF  3E
3556:  MOVLW  02
3558:  MOVLB  1
355A:  MOVWF  x02
355C:  MOVLW  96
355E:  MOVWF  x1D
3560:  MOVLB  0
3562:  CALL   0B3C
3566:  MOVLB  1
3568:  DECFSZ x02,F
356A:  BRA    355C
356C:  MOVLB  0
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
356E:  BSF    F96.1
3570:  BTFSC  F84.1
3572:  BRA    35A8
....................       { 
....................          if(unidad2==1) 
3574:  DECFSZ 25,W
3576:  BRA    357E
....................          { 
....................             unidad2=3; 
3578:  MOVLW  03
357A:  MOVWF  25
....................          } 
....................          else 
357C:  BRA    3588
....................          { 
....................             if(unidad2==3) 
357E:  MOVF   25,W
3580:  SUBLW  03
3582:  BNZ   3588
....................             { 
....................                unidad2=1; 
3584:  MOVLW  01
3586:  MOVWF  25
....................             } 
....................          } 
....................          delay_ms(500); 
3588:  MOVLW  02
358A:  MOVLB  1
358C:  MOVWF  x02
358E:  MOVLW  FA
3590:  MOVWF  x1D
3592:  MOVLB  0
3594:  CALL   0B3C
3598:  MOVLB  1
359A:  DECFSZ x02,F
359C:  BRA    358E
....................          printf(lcd_putc,"\f"); 
359E:  MOVLW  0C
35A0:  MOVWF  x17
35A2:  MOVLB  0
35A4:  CALL   0D02
....................       } 
....................        
....................       if(LEFT) 
35A8:  BSF    F96.2
35AA:  BTFSC  F84.2
35AC:  BRA    36AA
....................       { 
....................          delay_ms(200); 
35AE:  MOVLW  C8
35B0:  MOVLB  1
35B2:  MOVWF  x1D
35B4:  MOVLB  0
35B6:  CALL   0B3C
....................          printf(lcd_putc,"\f"); 
35BA:  MOVLW  0C
35BC:  MOVLB  1
35BE:  MOVWF  x17
35C0:  MOVLB  0
35C2:  CALL   0D02
....................          lcd_gotoxy(1,2); 
35C6:  MOVLW  01
35C8:  MOVLB  1
35CA:  MOVWF  x18
35CC:  MOVLW  02
35CE:  MOVWF  x19
35D0:  MOVLB  0
35D2:  CALL   0C80
....................          printf(lcd_putc,"Tiempo Almacenado"); 
35D6:  MOVLW  06
35D8:  MOVWF  FF6
35DA:  MOVLW  06
35DC:  MOVWF  FF7
35DE:  CALL   1CAA
....................          lcd_gotoxy(1,3); 
35E2:  MOVLW  01
35E4:  MOVLB  1
35E6:  MOVWF  x18
35E8:  MOVLW  03
35EA:  MOVWF  x19
35EC:  MOVLB  0
35EE:  CALL   0C80
....................          printf(lcd_putc,"  Correctamente  "); 
35F2:  MOVLW  18
35F4:  MOVWF  FF6
35F6:  MOVLW  06
35F8:  MOVWF  FF7
35FA:  CALL   1CAA
....................          write_eeprom(22,ppurga_minutos_pro);delay_ms(20); 
35FE:  MOVLW  16
3600:  MOVWF  FA9
3602:  MOVFF  40,FA8
3606:  BCF    FA6.6
3608:  BCF    FA6.7
360A:  BSF    FA6.2
360C:  MOVF   FF2,W
360E:  MOVWF  00
3610:  BCF    FF2.7
3612:  MOVLB  F
3614:  MOVLW  55
3616:  MOVWF  FA7
3618:  MOVLW  AA
361A:  MOVWF  FA7
361C:  BSF    FA6.1
361E:  BTFSC  FA6.1
3620:  BRA    361E
3622:  BCF    FA6.2
3624:  MOVF   00,W
3626:  IORWF  FF2,F
3628:  MOVLW  14
362A:  MOVLB  1
362C:  MOVWF  x1D
362E:  MOVLB  0
3630:  CALL   0B3C
....................          write_eeprom(23,ppurga_segundos_pro);delay_ms(20); 
3634:  MOVLW  17
3636:  MOVWF  FA9
3638:  MOVFF  3E,FA8
363C:  BCF    FA6.6
363E:  BCF    FA6.7
3640:  BSF    FA6.2
3642:  MOVF   FF2,W
3644:  MOVWF  00
3646:  BCF    FF2.7
3648:  MOVLB  F
364A:  MOVLW  55
364C:  MOVWF  FA7
364E:  MOVLW  AA
3650:  MOVWF  FA7
3652:  BSF    FA6.1
3654:  BTFSC  FA6.1
3656:  BRA    3654
3658:  BCF    FA6.2
365A:  MOVF   00,W
365C:  IORWF  FF2,F
365E:  MOVLW  14
3660:  MOVLB  1
3662:  MOVWF  x1D
3664:  MOVLB  0
3666:  CALL   0B3C
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
366A:  MOVFF  40,3F
366E:  MOVFF  3E,3D
....................          delay_ms(700); 
3672:  MOVLW  04
3674:  MOVLB  1
3676:  MOVWF  x02
3678:  MOVLW  AF
367A:  MOVWF  x1D
367C:  MOVLB  0
367E:  CALL   0B3C
3682:  MOVLB  1
3684:  DECFSZ x02,F
3686:  BRA    3678
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3688:  MOVLW  1E
368A:  MOVWF  x1D
368C:  MOVLB  0
368E:  CALL   0B3C
3692:  MOVLW  01
3694:  MOVWF  1C
3696:  CLRF   44
3698:  MOVLW  02
369A:  MOVWF  1F
369C:  MOVWF  21
369E:  MOVLW  0C
36A0:  MOVLB  1
36A2:  MOVWF  x17
36A4:  MOVLB  0
36A6:  CALL   0D02
....................       }   
.................... } 
36AA:  GOTO   586A (RETURN)
....................  
.................... void MenuPostPurga(){ 
....................    lcd_gotoxy(1,1); 
*
4C26:  MOVLW  01
4C28:  MOVLB  1
4C2A:  MOVWF  x18
4C2C:  MOVWF  x19
4C2E:  MOVLB  0
4C30:  CALL   0C80
....................       printf(lcd_putc,"    !Post-Purga!    "); 
4C34:  MOVLW  2A
4C36:  MOVWF  FF6
4C38:  MOVLW  06
4C3A:  MOVWF  FF7
4C3C:  CALL   1CAA
....................       lcd_gotoxy(1,2); 
4C40:  MOVLW  01
4C42:  MOVLB  1
4C44:  MOVWF  x18
4C46:  MOVLW  02
4C48:  MOVWF  x19
4C4A:  MOVLB  0
4C4C:  CALL   0C80
....................       printf(lcd_putc,"                    "); 
4C50:  MOVLW  40
4C52:  MOVWF  FF6
4C54:  MOVLW  06
4C56:  MOVWF  FF7
4C58:  CALL   1CAA
....................       lcd_gotoxy(1,3); 
4C5C:  MOVLW  01
4C5E:  MOVLB  1
4C60:  MOVWF  x18
4C62:  MOVLW  03
4C64:  MOVWF  x19
4C66:  MOVLB  0
4C68:  CALL   0C80
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
4C6C:  MOVLW  56
4C6E:  MOVWF  FF6
4C70:  MOVLW  06
4C72:  MOVWF  FF7
4C74:  MOVLW  06
4C76:  MOVLB  1
4C78:  MOVWF  x0A
4C7A:  MOVLB  0
4C7C:  CALL   1CCC
4C80:  MOVFF  3F,109
4C84:  MOVLW  01
4C86:  MOVLB  1
4C88:  MOVWF  x0A
4C8A:  MOVLB  0
4C8C:  CALL   1D22
4C90:  MOVLW  3A
4C92:  MOVLB  1
4C94:  MOVWF  x17
4C96:  MOVLB  0
4C98:  CALL   0D02
4C9C:  MOVFF  3D,109
4CA0:  MOVLW  01
4CA2:  MOVLB  1
4CA4:  MOVWF  x0A
4CA6:  MOVLB  0
4CA8:  CALL   1D22
4CAC:  MOVLW  20
4CAE:  MOVLB  1
4CB0:  MOVWF  x17
4CB2:  MOVLB  0
4CB4:  CALL   0D02
4CB8:  MOVLW  20
4CBA:  MOVLB  1
4CBC:  MOVWF  x17
4CBE:  MOVLB  0
4CC0:  CALL   0D02
....................       Motor_on; 
4CC4:  BSF    F8A.5
4CC6:  BCF    F93.5
....................            
....................       if(Lectura==1) 
4CC8:  BTFSS  43.5
4CCA:  BRA    4E30
....................       { 
....................          Luz_Blanca_off; 
4CCC:  BCF    F8A.4
4CCE:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
4CD0:  MOVLW  02
4CD2:  MOVLB  1
4CD4:  MOVWF  x13
4CD6:  MOVLB  0
4CD8:  CALL   3E60
4CDC:  MOVFF  00,102
4CE0:  MOVFF  01,103
4CE4:  MOVFF  02,104
4CE8:  MOVFF  03,105
4CEC:  MOVFF  03,109
4CF0:  MOVFF  02,108
4CF4:  MOVFF  01,107
4CF8:  MOVFF  00,106
4CFC:  MOVLB  1
4CFE:  CLRF   x0D
4D00:  CLRF   x0C
4D02:  MOVLW  40
4D04:  MOVWF  x0B
4D06:  MOVLW  81
4D08:  MOVWF  x0A
4D0A:  MOVLB  0
4D0C:  CALL   166A
4D10:  BTFSS  FD8.0
4D12:  BRA    4E2E
4D14:  MOVF   3D,F
4D16:  BTFSS  FD8.2
4D18:  BRA    4E2E
4D1A:  MOVF   3F,F
4D1C:  BTFSS  FD8.2
4D1E:  BRA    4E2E
....................          { 
....................             write_eeprom(70,segundos);delay_ms(20); 
4D20:  MOVLW  46
4D22:  MOVWF  FA9
4D24:  MOVFF  37,FA8
4D28:  BCF    FA6.6
4D2A:  BCF    FA6.7
4D2C:  BSF    FA6.2
4D2E:  MOVF   FF2,W
4D30:  MOVWF  00
4D32:  BCF    FF2.7
4D34:  MOVLB  F
4D36:  MOVLW  55
4D38:  MOVWF  FA7
4D3A:  MOVLW  AA
4D3C:  MOVWF  FA7
4D3E:  BSF    FA6.1
4D40:  BTFSC  FA6.1
4D42:  BRA    4D40
4D44:  BCF    FA6.2
4D46:  MOVF   00,W
4D48:  IORWF  FF2,F
4D4A:  MOVLW  14
4D4C:  MOVLB  1
4D4E:  MOVWF  x1D
4D50:  MOVLB  0
4D52:  CALL   0B3C
....................             write_eeprom(71,minutos);delay_ms(20); 
4D56:  MOVLW  47
4D58:  MOVWF  FA9
4D5A:  MOVFF  38,FA8
4D5E:  BCF    FA6.6
4D60:  BCF    FA6.7
4D62:  BSF    FA6.2
4D64:  MOVF   FF2,W
4D66:  MOVWF  00
4D68:  BCF    FF2.7
4D6A:  MOVLB  F
4D6C:  MOVLW  55
4D6E:  MOVWF  FA7
4D70:  MOVLW  AA
4D72:  MOVWF  FA7
4D74:  BSF    FA6.1
4D76:  BTFSC  FA6.1
4D78:  BRA    4D76
4D7A:  BCF    FA6.2
4D7C:  MOVF   00,W
4D7E:  IORWF  FF2,F
4D80:  MOVLW  14
4D82:  MOVLB  1
4D84:  MOVWF  x1D
4D86:  MOVLB  0
4D88:  CALL   0B3C
....................             write_eeprom(72,horas);delay_ms(20); 
4D8C:  MOVLW  48
4D8E:  MOVWF  FA9
4D90:  MOVFF  39,FA8
4D94:  BCF    FA6.6
4D96:  BCF    FA6.7
4D98:  BSF    FA6.2
4D9A:  MOVF   FF2,W
4D9C:  MOVWF  00
4D9E:  BCF    FF2.7
4DA0:  MOVLB  F
4DA2:  MOVLW  55
4DA4:  MOVWF  FA7
4DA6:  MOVLW  AA
4DA8:  MOVWF  FA7
4DAA:  BSF    FA6.1
4DAC:  BTFSC  FA6.1
4DAE:  BRA    4DAC
4DB0:  BCF    FA6.2
4DB2:  MOVF   00,W
4DB4:  IORWF  FF2,F
4DB6:  MOVLW  14
4DB8:  MOVLB  1
4DBA:  MOVWF  x1D
4DBC:  MOVLB  0
4DBE:  CALL   0B3C
....................             printf(lcd_putc,"\f"); 
4DC2:  MOVLW  0C
4DC4:  MOVLB  1
4DC6:  MOVWF  x17
4DC8:  MOVLB  0
4DCA:  CALL   0D02
....................             lcd_gotoxy(1,2); 
4DCE:  MOVLW  01
4DD0:  MOVLB  1
4DD2:  MOVWF  x18
4DD4:  MOVLW  02
4DD6:  MOVWF  x19
4DD8:  MOVLB  0
4DDA:  CALL   0C80
....................             printf(lcd_putc,"     Proceso      "); 
4DDE:  MOVLW  68
4DE0:  MOVWF  FF6
4DE2:  MOVLW  06
4DE4:  MOVWF  FF7
4DE6:  CALL   1CAA
....................             lcd_gotoxy(1,3); 
4DEA:  MOVLW  01
4DEC:  MOVLB  1
4DEE:  MOVWF  x18
4DF0:  MOVLW  03
4DF2:  MOVWF  x19
4DF4:  MOVLB  0
4DF6:  CALL   0C80
....................             printf(lcd_putc,"    Finalizado    "); 
4DFA:  MOVLW  7C
4DFC:  MOVWF  FF6
4DFE:  MOVLW  06
4E00:  MOVWF  FF7
4E02:  CALL   1CAA
....................             delay_ms(2000); 
4E06:  MOVLW  08
4E08:  MOVLB  1
4E0A:  MOVWF  x02
4E0C:  MOVLW  FA
4E0E:  MOVWF  x1D
4E10:  MOVLB  0
4E12:  CALL   0B3C
4E16:  MOVLB  1
4E18:  DECFSZ x02,F
4E1A:  BRA    4E0C
....................             printf(lcd_putc,"\f"); 
4E1C:  MOVLW  0C
4E1E:  MOVWF  x17
4E20:  MOVLB  0
4E22:  CALL   0D02
....................             #ifdef VARIADOR 
....................             ajuste_vel(tmp); 
4E26:  MOVFF  2F,102
4E2A:  RCALL  47C4
....................             #endif             
....................             reset_cpu(); 
4E2C:  RESET
....................          } 
....................          Lectura=0; 
4E2E:  BCF    43.5
....................       } 
.................... }    
4E30:  GOTO   5CB0 (RETURN)
....................  
.................... void MenuApagado(){ 
....................    lcd_gotoxy(1,1); 
4E34:  MOVLW  01
4E36:  MOVLB  1
4E38:  MOVWF  x18
4E3A:  MOVWF  x19
4E3C:  MOVLB  0
4E3E:  CALL   0C80
....................    printf(lcd_putc,"   Desea apagar     "); 
4E42:  MOVLW  90
4E44:  MOVWF  FF6
4E46:  MOVLW  06
4E48:  MOVWF  FF7
4E4A:  CALL   1CAA
....................    lcd_gotoxy(1,2); 
4E4E:  MOVLW  01
4E50:  MOVLB  1
4E52:  MOVWF  x18
4E54:  MOVLW  02
4E56:  MOVWF  x19
4E58:  MOVLB  0
4E5A:  CALL   0C80
....................    printf(lcd_putc,"     la cabina      "); 
4E5E:  MOVLW  A6
4E60:  MOVWF  FF6
4E62:  MOVLW  06
4E64:  MOVWF  FF7
4E66:  CALL   1CAA
....................    lcd_gotoxy(1,3); 
4E6A:  MOVLW  01
4E6C:  MOVLB  1
4E6E:  MOVWF  x18
4E70:  MOVLW  03
4E72:  MOVWF  x19
4E74:  MOVLB  0
4E76:  CALL   0C80
....................    printf(lcd_putc,"   > Aceptar        "); 
4E7A:  MOVLW  BC
4E7C:  MOVWF  FF6
4E7E:  MOVLW  06
4E80:  MOVWF  FF7
4E82:  CALL   1CAA
....................    lcd_gotoxy(1,4); 
4E86:  MOVLW  01
4E88:  MOVLB  1
4E8A:  MOVWF  x18
4E8C:  MOVLW  04
4E8E:  MOVWF  x19
4E90:  MOVLB  0
4E92:  CALL   0C80
....................    printf(lcd_putc,"   < Cancelar       "); 
4E96:  MOVLW  D2
4E98:  MOVWF  FF6
4E9A:  MOVLW  06
4E9C:  MOVWF  FF7
4E9E:  CALL   1CAA
....................    
....................     
....................       if(RIGHT){// Si oprime derecha 
4EA2:  BSF    F96.1
4EA4:  BTFSC  F84.1
4EA6:  BRA    4EE0
....................          delay_ms(20); 
4EA8:  MOVLW  14
4EAA:  MOVLB  1
4EAC:  MOVWF  x1D
4EAE:  MOVLB  0
4EB0:  CALL   0B3C
....................          if(RIGHT && Flanco1 == 0){ 
4EB4:  BSF    F96.1
4EB6:  BTFSC  F84.1
4EB8:  BRA    4EDE
4EBA:  BTFSC  42.5
4EBC:  BRA    4EDE
....................             Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
4EBE:  BSF    42.5
4EC0:  MOVLW  1E
4EC2:  MOVWF  1C
4EC4:  MOVFF  24,102
4EC8:  CALL   0B28
4ECC:  BCF    F8A.7
4ECE:  BCF    F93.7
4ED0:  MOVLW  0C
4ED2:  MOVLB  1
4ED4:  MOVWF  x17
4ED6:  MOVLB  0
4ED8:  CALL   0D02
4EDC:  BSF    54.4
....................          } 
....................       }else{ 
4EDE:  BRA    4EE2
....................          Flanco1 = 0; 
4EE0:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
4EE2:  BSF    F96.2
4EE4:  BTFSC  F84.2
4EE6:  BRA    4F32
....................          delay_ms(20); 
4EE8:  MOVLW  14
4EEA:  MOVLB  1
4EEC:  MOVWF  x1D
4EEE:  MOVLB  0
4EF0:  CALL   0B3C
....................          if(LEFT && Flanco3 == 0){ 
4EF4:  BSF    F96.2
4EF6:  BTFSC  F84.2
4EF8:  BRA    4F30
4EFA:  BTFSC  42.7
4EFC:  BRA    4F30
....................             Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4EFE:  BSF    42.7
4F00:  MOVLW  14
4F02:  MOVWF  1C
4F04:  CLRF   44
4F06:  MOVLW  02
4F08:  MOVWF  1F
4F0A:  MOVWF  21
4F0C:  MOVLW  0B
4F0E:  MOVWF  1E
4F10:  MOVLW  02
4F12:  MOVLB  1
4F14:  MOVWF  x02
4F16:  MOVLW  FA
4F18:  MOVWF  x1D
4F1A:  MOVLB  0
4F1C:  CALL   0B3C
4F20:  MOVLB  1
4F22:  DECFSZ x02,F
4F24:  BRA    4F16
4F26:  MOVLW  0C
4F28:  MOVWF  x17
4F2A:  MOVLB  0
4F2C:  CALL   0D02
....................          } 
....................       }else{ 
4F30:  BRA    4F34
....................          Flanco3 = 0; 
4F32:  BCF    42.7
....................       } 
.................... } 
4F34:  GOTO   5CBA (RETURN)
....................  
.................... void MenuPurga(){ 
....................    lcd_gotoxy(1,1); 
*
5330:  MOVLW  01
5332:  MOVLB  1
5334:  MOVWF  x18
5336:  MOVWF  x19
5338:  MOVLB  0
533A:  CALL   0C80
....................       printf(lcd_putc,"      !Purga!       "); 
533E:  MOVLW  E8
5340:  MOVWF  FF6
5342:  MOVLW  06
5344:  MOVWF  FF7
5346:  CALL   1CAA
....................       lcd_gotoxy(1,2); 
534A:  MOVLW  01
534C:  MOVLB  1
534E:  MOVWF  x18
5350:  MOVLW  02
5352:  MOVWF  x19
5354:  MOVLB  0
5356:  CALL   0C80
....................       printf(lcd_putc,"                    "); 
535A:  MOVLW  FE
535C:  MOVWF  FF6
535E:  MOVLW  06
5360:  MOVWF  FF7
5362:  CALL   1CAA
....................       lcd_gotoxy(1,3); 
5366:  MOVLW  01
5368:  MOVLB  1
536A:  MOVWF  x18
536C:  MOVLW  03
536E:  MOVWF  x19
5370:  MOVLB  0
5372:  CALL   0C80
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
5376:  MOVLW  14
5378:  MOVWF  FF6
537A:  MOVLW  07
537C:  MOVWF  FF7
537E:  MOVLW  06
5380:  MOVLB  1
5382:  MOVWF  x0A
5384:  MOVLB  0
5386:  CALL   1CCC
538A:  MOVFF  26,109
538E:  MOVLW  01
5390:  MOVLB  1
5392:  MOVWF  x0A
5394:  MOVLB  0
5396:  CALL   1D22
539A:  MOVLW  3A
539C:  MOVLB  1
539E:  MOVWF  x17
53A0:  MOVLB  0
53A2:  CALL   0D02
53A6:  MOVFF  3B,109
53AA:  MOVLW  01
53AC:  MOVLB  1
53AE:  MOVWF  x0A
53B0:  MOVLB  0
53B2:  CALL   1D22
53B6:  MOVLW  20
53B8:  MOVLB  1
53BA:  MOVWF  x17
53BC:  MOVLB  0
53BE:  CALL   0D02
53C2:  MOVLW  20
53C4:  MOVLB  1
53C6:  MOVWF  x17
53C8:  MOVLB  0
53CA:  CALL   0D02
53CE:  MOVLW  20
53D0:  MOVLB  1
53D2:  MOVWF  x17
53D4:  MOVLB  0
53D6:  CALL   0D02
....................         
....................       if(LEFT){ 
53DA:  BSF    F96.2
53DC:  BTFSC  F84.2
53DE:  BRA    5408
....................          delay_ms(1000); 
53E0:  MOVLW  04
53E2:  MOVLB  1
53E4:  MOVWF  x02
53E6:  MOVLW  FA
53E8:  MOVWF  x1D
53EA:  MOVLB  0
53EC:  CALL   0B3C
53F0:  MOVLB  1
53F2:  DECFSZ x02,F
53F4:  BRA    53E6
....................          if(LEFT){ 
53F6:  BSF    F96.2
53F8:  BTFSC  F84.2
53FA:  BRA    540A
....................             tiempo_purga=0; 
53FC:  BCF    54.3
....................             EnciendeMotor();//Motor_on; 
53FE:  MOVLB  0
5400:  CALL   4C00
....................             Menu=20; 
5404:  MOVLW  14
5406:  MOVWF  1C
5408:  MOVLB  1
....................          } 
....................       } 
....................        
....................       #ifdef DAMPER 
....................       controlar_flujo(); 
....................       #endif 
....................        
....................       #ifdef VARIADOR 
....................       ajuste_vel(tmp); 
540A:  MOVFF  2F,102
540E:  MOVLB  0
5410:  CALL   47C4
....................       #endif 
....................       Motor_on; 
5414:  BSF    F8A.5
5416:  BCF    F93.5
....................       //EnciendeMotor(); 
....................       Luz_Blanca_off; 
5418:  BCF    F8A.4
541A:  BCF    F93.4
....................          
....................       if(Lectura==1){ 
541C:  BTFSS  43.5
541E:  BRA    5436
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
5420:  MOVFF  30,102
5424:  RCALL  4F38
5426:  MOVFF  03,70
542A:  MOVFF  02,6F
542E:  MOVFF  01,6E
5432:  MOVFF  00,6D
....................       } 
.................... } 
5436:  GOTO   5CC4 (RETURN)
....................  
.................... void MenuCambioClave(){ 
....................    lcd_gotoxy(1,1); 
*
2CF4:  MOVLW  01
2CF6:  MOVLB  1
2CF8:  MOVWF  x18
2CFA:  MOVWF  x19
2CFC:  MOVLB  0
2CFE:  CALL   0C80
....................       printf(lcd_putc,"     Ingrese        "); 
2D02:  MOVLW  28
2D04:  MOVWF  FF6
2D06:  MOVLW  07
2D08:  MOVWF  FF7
2D0A:  CALL   1CAA
....................       lcd_gotoxy(1,2); 
2D0E:  MOVLW  01
2D10:  MOVLB  1
2D12:  MOVWF  x18
2D14:  MOVLW  02
2D16:  MOVWF  x19
2D18:  MOVLB  0
2D1A:  CALL   0C80
....................       printf(lcd_putc,"  Contraseña Nueva  "); 
2D1E:  MOVLW  3E
2D20:  MOVWF  FF6
2D22:  MOVLW  07
2D24:  MOVWF  FF7
2D26:  CALL   1CAA
....................       lcd_gotoxy(1,3); 
2D2A:  MOVLW  01
2D2C:  MOVLB  1
2D2E:  MOVWF  x18
2D30:  MOVLW  03
2D32:  MOVWF  x19
2D34:  MOVLB  0
2D36:  CALL   0C80
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2D3A:  MOVLW  54
2D3C:  MOVWF  FF6
2D3E:  MOVLW  07
2D40:  MOVWF  FF7
2D42:  MOVLW  0A
2D44:  MOVLB  1
2D46:  MOVWF  x0A
2D48:  MOVLB  0
2D4A:  CALL   1CCC
2D4E:  MOVFF  48,103
2D52:  MOVLW  1F
2D54:  MOVLB  1
2D56:  MOVWF  x04
2D58:  MOVLB  0
2D5A:  RCALL  2C0A
2D5C:  MOVFF  49,103
2D60:  MOVLW  1F
2D62:  MOVLB  1
2D64:  MOVWF  x04
2D66:  MOVLB  0
2D68:  RCALL  2C0A
2D6A:  MOVFF  4A,103
2D6E:  MOVLW  1F
2D70:  MOVLB  1
2D72:  MOVWF  x04
2D74:  MOVLB  0
2D76:  RCALL  2C0A
2D78:  MOVFF  4B,103
2D7C:  MOVLW  1F
2D7E:  MOVLB  1
2D80:  MOVWF  x04
2D82:  MOVLB  0
2D84:  RCALL  2C0A
2D86:  MOVLW  20
2D88:  MOVLB  1
2D8A:  MOVWF  x17
2D8C:  MOVLB  0
2D8E:  CALL   0D02
2D92:  MOVLW  20
2D94:  MOVLB  1
2D96:  MOVWF  x17
2D98:  MOVLB  0
2D9A:  CALL   0D02
....................     
....................        
....................       if(UP){//Si oprime hacia arriba 
2D9E:  BSF    F92.5
2DA0:  BTFSC  F80.5
2DA2:  BRA    2DDC
....................          delay_ms(20); 
2DA4:  MOVLW  14
2DA6:  MOVLB  1
2DA8:  MOVWF  x1D
2DAA:  MOVLB  0
2DAC:  CALL   0B3C
....................          if(UP && Flanco == 0) { 
2DB0:  BSF    F92.5
2DB2:  BTFSC  F80.5
2DB4:  BRA    2DDA
2DB6:  BTFSC  42.4
2DB8:  BRA    2DDA
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
2DBA:  MOVLW  0B
2DBC:  SUBWF  1E,W
2DBE:  CLRF   03
2DC0:  ADDLW  48
2DC2:  MOVWF  FE9
2DC4:  MOVLW  00
2DC6:  ADDWFC 03,W
2DC8:  MOVWF  FEA
2DCA:  INCF   FEF,F
2DCC:  BSF    42.4
2DCE:  MOVLW  1E
2DD0:  MOVLB  1
2DD2:  MOVWF  x1D
2DD4:  MOVLB  0
2DD6:  CALL   0B3C
....................          } 
....................       }else{ 
2DDA:  BRA    2DDE
....................          Flanco = 0; 
2DDC:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2DDE:  BSF    F96.0
2DE0:  BTFSC  F84.0
2DE2:  BRA    2E1C
....................          delay_ms(20); 
2DE4:  MOVLW  14
2DE6:  MOVLB  1
2DE8:  MOVWF  x1D
2DEA:  MOVLB  0
2DEC:  CALL   0B3C
....................          if(DOWN && Flanco2 == 0) { 
2DF0:  BSF    F96.0
2DF2:  BTFSC  F84.0
2DF4:  BRA    2E1A
2DF6:  BTFSC  42.6
2DF8:  BRA    2E1A
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
2DFA:  MOVLW  0B
2DFC:  SUBWF  1E,W
2DFE:  CLRF   03
2E00:  ADDLW  48
2E02:  MOVWF  FE9
2E04:  MOVLW  00
2E06:  ADDWFC 03,W
2E08:  MOVWF  FEA
2E0A:  DECF   FEF,F
2E0C:  BSF    42.6
2E0E:  MOVLW  1E
2E10:  MOVLB  1
2E12:  MOVWF  x1D
2E14:  MOVLB  0
2E16:  CALL   0B3C
....................          } 
....................       }else{ 
2E1A:  BRA    2E1E
....................          Flanco2 = 0; 
2E1C:  BCF    42.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime Derecha 
2E1E:  BSF    F96.1
2E20:  BTFSC  F84.1
2E22:  BRA    2E58
....................          delay_ms(20); 
2E24:  MOVLW  14
2E26:  MOVLB  1
2E28:  MOVWF  x1D
2E2A:  MOVLB  0
2E2C:  CALL   0B3C
....................          if(RIGHT && Flanco1 == 0) { 
2E30:  BSF    F96.1
2E32:  BTFSC  F84.1
2E34:  BRA    2E56
2E36:  BTFSC  42.5
2E38:  BRA    2E56
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
2E3A:  BSF    42.5
2E3C:  INCF   1E,F
2E3E:  MOVLW  1E
2E40:  MOVLB  1
2E42:  MOVWF  x1D
2E44:  MOVLB  0
2E46:  CALL   0B3C
2E4A:  MOVLW  0C
2E4C:  MOVLB  1
2E4E:  MOVWF  x17
2E50:  MOVLB  0
2E52:  CALL   0D02
....................          } 
....................       }else{ 
2E56:  BRA    2E5A
....................          Flanco1 = 0; 
2E58:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
2E5A:  BSF    F96.2
2E5C:  BTFSC  F84.2
2E5E:  BRA    2E94
....................          delay_ms(20); 
2E60:  MOVLW  14
2E62:  MOVLB  1
2E64:  MOVWF  x1D
2E66:  MOVLB  0
2E68:  CALL   0B3C
....................          if(LEFT && Flanco3 == 0) { 
2E6C:  BSF    F96.2
2E6E:  BTFSC  F84.2
2E70:  BRA    2E92
2E72:  BTFSC  42.7
2E74:  BRA    2E92
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
2E76:  BSF    42.7
2E78:  DECF   1E,F
2E7A:  MOVLW  1E
2E7C:  MOVLB  1
2E7E:  MOVWF  x1D
2E80:  MOVLB  0
2E82:  CALL   0B3C
2E86:  MOVLW  0C
2E88:  MOVLB  1
2E8A:  MOVWF  x17
2E8C:  MOVLB  0
2E8E:  CALL   0D02
....................          } 
....................       }else{ 
2E92:  BRA    2E96
....................          Flanco3 = 0; 
2E94:  BCF    42.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2E96:  MOVLW  0B
2E98:  SUBWF  1E,W
2E9A:  CLRF   03
2E9C:  ADDLW  48
2E9E:  MOVWF  FE9
2EA0:  MOVLW  00
2EA2:  ADDWFC 03,W
2EA4:  MOVWF  FEA
2EA6:  BTFSC  FEF.7
2EA8:  BRA    2EAC
2EAA:  BRA    2EC0
....................          clave[unidad-11]=9; 
2EAC:  MOVLW  0B
2EAE:  SUBWF  1E,W
2EB0:  CLRF   03
2EB2:  ADDLW  48
2EB4:  MOVWF  FE9
2EB6:  MOVLW  00
2EB8:  ADDWFC 03,W
2EBA:  MOVWF  FEA
2EBC:  MOVLW  09
2EBE:  MOVWF  FEF
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2EC0:  MOVLW  0B
2EC2:  SUBWF  1E,W
2EC4:  CLRF   03
2EC6:  ADDLW  48
2EC8:  MOVWF  FE9
2ECA:  MOVLW  00
2ECC:  ADDWFC 03,W
2ECE:  MOVWF  FEA
2ED0:  BTFSC  FEF.7
2ED2:  BRA    2EEC
2ED4:  MOVF   FEF,W
2ED6:  SUBLW  09
2ED8:  BC    2EEC
....................          clave[unidad-11]=0; 
2EDA:  MOVLW  0B
2EDC:  SUBWF  1E,W
2EDE:  CLRF   03
2EE0:  ADDLW  48
2EE2:  MOVWF  FE9
2EE4:  MOVLW  00
2EE6:  ADDWFC 03,W
2EE8:  MOVWF  FEA
2EEA:  CLRF   FEF
....................           
....................       if(unidad<11){ 
2EEC:  MOVF   1E,W
2EEE:  SUBLW  0A
2EF0:  BNC   2F2A
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2EF2:  MOVLW  02
2EF4:  MOVLB  1
2EF6:  MOVWF  x02
2EF8:  MOVLW  FA
2EFA:  MOVWF  x1D
2EFC:  MOVLB  0
2EFE:  CALL   0B3C
2F02:  MOVLB  1
2F04:  DECFSZ x02,F
2F06:  BRA    2EF8
2F08:  MOVLW  01
2F0A:  MOVWF  1C
2F0C:  CLRF   44
2F0E:  MOVLW  02
2F10:  MOVWF  1F
2F12:  MOVWF  21
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2F14:  CLRF   48
2F16:  CLRF   49
2F18:  CLRF   4A
2F1A:  CLRF   4B
....................          printf(lcd_putc,"\f");unidad=11; 
2F1C:  MOVLW  0C
2F1E:  MOVWF  x17
2F20:  MOVLB  0
2F22:  CALL   0D02
2F26:  MOVLW  0B
2F28:  MOVWF  1E
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2F2A:  MOVFF  1E,118
2F2E:  MOVLW  04
2F30:  MOVLB  1
2F32:  MOVWF  x19
2F34:  MOVLB  0
2F36:  CALL   0C80
....................       lcd_putc(t[2]); 
2F3A:  MOVFF  47,117
2F3E:  CALL   0D02
....................       if(unidad>14){// Si ya ingreso la nueva contraseña. 
2F42:  MOVF   1E,W
2F44:  SUBLW  0E
2F46:  BTFSC  FD8.0
2F48:  BRA    30D0
....................          lcd_gotoxy(1,1); 
2F4A:  MOVLW  01
2F4C:  MOVLB  1
2F4E:  MOVWF  x18
2F50:  MOVWF  x19
2F52:  MOVLB  0
2F54:  CALL   0C80
....................          printf(lcd_putc,"                    "); 
2F58:  MOVLW  6A
2F5A:  MOVWF  FF6
2F5C:  MOVLW  07
2F5E:  MOVWF  FF7
2F60:  CALL   1CAA
....................          lcd_gotoxy(1,2); 
2F64:  MOVLW  01
2F66:  MOVLB  1
2F68:  MOVWF  x18
2F6A:  MOVLW  02
2F6C:  MOVWF  x19
2F6E:  MOVLB  0
2F70:  CALL   0C80
....................          printf(lcd_putc,"     Contraseña     "); 
2F74:  MOVLW  80
2F76:  MOVWF  FF6
2F78:  MOVLW  07
2F7A:  MOVWF  FF7
2F7C:  CALL   1CAA
....................          lcd_gotoxy(1,3); 
2F80:  MOVLW  01
2F82:  MOVLB  1
2F84:  MOVWF  x18
2F86:  MOVLW  03
2F88:  MOVWF  x19
2F8A:  MOVLB  0
2F8C:  CALL   0C80
....................          printf(lcd_putc,"     Almacenada     "); 
2F90:  MOVLW  96
2F92:  MOVWF  FF6
2F94:  MOVLW  07
2F96:  MOVWF  FF7
2F98:  CALL   1CAA
....................          lcd_gotoxy(1,4); 
2F9C:  MOVLW  01
2F9E:  MOVLB  1
2FA0:  MOVWF  x18
2FA2:  MOVLW  04
2FA4:  MOVWF  x19
2FA6:  MOVLB  0
2FA8:  CALL   0C80
....................          printf(lcd_putc,"                    "); 
2FAC:  MOVLW  AC
2FAE:  MOVWF  FF6
2FB0:  MOVLW  07
2FB2:  MOVWF  FF7
2FB4:  CALL   1CAA
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2FB8:  MOVFF  48,4C
2FBC:  MOVFF  49,4D
2FC0:  MOVFF  4A,4E
2FC4:  MOVFF  4B,4F
....................          write_eeprom(100,clave[0]);delay_ms(20);write_eeprom(101,clave[1]);delay_ms(20); 
2FC8:  MOVLW  64
2FCA:  MOVWF  FA9
2FCC:  MOVFF  48,FA8
2FD0:  BCF    FA6.6
2FD2:  BCF    FA6.7
2FD4:  BSF    FA6.2
2FD6:  MOVF   FF2,W
2FD8:  MOVWF  00
2FDA:  BCF    FF2.7
2FDC:  MOVLB  F
2FDE:  MOVLW  55
2FE0:  MOVWF  FA7
2FE2:  MOVLW  AA
2FE4:  MOVWF  FA7
2FE6:  BSF    FA6.1
2FE8:  BTFSC  FA6.1
2FEA:  BRA    2FE8
2FEC:  BCF    FA6.2
2FEE:  MOVF   00,W
2FF0:  IORWF  FF2,F
2FF2:  MOVLW  14
2FF4:  MOVLB  1
2FF6:  MOVWF  x1D
2FF8:  MOVLB  0
2FFA:  CALL   0B3C
2FFE:  MOVLW  65
3000:  MOVWF  FA9
3002:  MOVFF  49,FA8
3006:  BCF    FA6.6
3008:  BCF    FA6.7
300A:  BSF    FA6.2
300C:  MOVF   FF2,W
300E:  MOVWF  00
3010:  BCF    FF2.7
3012:  MOVLB  F
3014:  MOVLW  55
3016:  MOVWF  FA7
3018:  MOVLW  AA
301A:  MOVWF  FA7
301C:  BSF    FA6.1
301E:  BTFSC  FA6.1
3020:  BRA    301E
3022:  BCF    FA6.2
3024:  MOVF   00,W
3026:  IORWF  FF2,F
3028:  MOVLW  14
302A:  MOVLB  1
302C:  MOVWF  x1D
302E:  MOVLB  0
3030:  CALL   0B3C
....................          write_eeprom(102,clave[2]);delay_ms(20);write_eeprom(103,clave[3]);delay_ms(20); 
3034:  MOVLW  66
3036:  MOVWF  FA9
3038:  MOVFF  4A,FA8
303C:  BCF    FA6.6
303E:  BCF    FA6.7
3040:  BSF    FA6.2
3042:  MOVF   FF2,W
3044:  MOVWF  00
3046:  BCF    FF2.7
3048:  MOVLB  F
304A:  MOVLW  55
304C:  MOVWF  FA7
304E:  MOVLW  AA
3050:  MOVWF  FA7
3052:  BSF    FA6.1
3054:  BTFSC  FA6.1
3056:  BRA    3054
3058:  BCF    FA6.2
305A:  MOVF   00,W
305C:  IORWF  FF2,F
305E:  MOVLW  14
3060:  MOVLB  1
3062:  MOVWF  x1D
3064:  MOVLB  0
3066:  CALL   0B3C
306A:  MOVLW  67
306C:  MOVWF  FA9
306E:  MOVFF  4B,FA8
3072:  BCF    FA6.6
3074:  BCF    FA6.7
3076:  BSF    FA6.2
3078:  MOVF   FF2,W
307A:  MOVWF  00
307C:  BCF    FF2.7
307E:  MOVLB  F
3080:  MOVLW  55
3082:  MOVWF  FA7
3084:  MOVLW  AA
3086:  MOVWF  FA7
3088:  BSF    FA6.1
308A:  BTFSC  FA6.1
308C:  BRA    308A
308E:  BCF    FA6.2
3090:  MOVF   00,W
3092:  IORWF  FF2,F
3094:  MOVLW  14
3096:  MOVLB  1
3098:  MOVWF  x1D
309A:  MOVLB  0
309C:  CALL   0B3C
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
30A0:  MOVLW  02
30A2:  MOVLB  1
30A4:  MOVWF  x02
30A6:  MOVLW  FA
30A8:  MOVWF  x1D
30AA:  MOVLB  0
30AC:  CALL   0B3C
30B0:  MOVLB  1
30B2:  DECFSZ x02,F
30B4:  BRA    30A6
30B6:  MOVLW  01
30B8:  MOVWF  1C
30BA:  CLRF   44
30BC:  MOVLW  02
30BE:  MOVWF  1F
30C0:  MOVWF  21
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
30C2:  CLRF   48
30C4:  CLRF   49
30C6:  CLRF   4A
30C8:  CLRF   4B
....................          unidad=11; 
30CA:  MOVLW  0B
30CC:  MOVWF  1E
30CE:  MOVLB  0
....................       } 
....................        
....................       if(unidad>11&&unidad<14){ 
30D0:  MOVF   1E,W
30D2:  SUBLW  0B
30D4:  BC    30F8
30D6:  MOVF   1E,W
30D8:  SUBLW  0D
30DA:  BNC   30F8
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
30DC:  MOVLW  01
30DE:  SUBWF  1E,W
30E0:  MOVLB  1
30E2:  MOVWF  x02
30E4:  MOVWF  x18
30E6:  MOVLW  04
30E8:  MOVWF  x19
30EA:  MOVLB  0
30EC:  CALL   0C80
....................          lcd_putc(t[1]); 
30F0:  MOVFF  46,117
30F4:  CALL   0D02
....................       } 
.................... } 
30F8:  GOTO   5856 (RETURN)
....................  
.................... void MenuVelocidad(){ 
....................       lcd_gotoxy(1,2); 
*
47CA:  MOVLW  01
47CC:  MOVLB  1
47CE:  MOVWF  x18
47D0:  MOVLW  02
47D2:  MOVWF  x19
47D4:  MOVLB  0
47D6:  CALL   0C80
....................       printf(lcd_putc,"  Velocidad Motor=  "); 
47DA:  MOVLW  C2
47DC:  MOVWF  FF6
47DE:  MOVLW  07
47E0:  MOVWF  FF7
47E2:  CALL   1CAA
....................        
....................       vel=((float)tmp/254)*100; 
47E6:  MOVLB  1
47E8:  CLRF   x19
47EA:  MOVFF  2F,118
47EE:  MOVLB  0
47F0:  CALL   0DCE
47F4:  MOVFF  00,102
47F8:  MOVFF  01,103
47FC:  MOVFF  02,104
4800:  MOVFF  03,105
4804:  MOVFF  03,11A
4808:  MOVFF  02,119
480C:  MOVFF  01,118
4810:  MOVFF  00,117
4814:  MOVLB  1
4816:  CLRF   x1E
4818:  CLRF   x1D
481A:  MOVLW  7E
481C:  MOVWF  x1C
481E:  MOVLW  86
4820:  MOVWF  x1B
4822:  MOVLB  0
4824:  CALL   0E04
4828:  MOVFF  00,102
482C:  MOVFF  01,103
4830:  MOVFF  02,104
4834:  MOVFF  03,105
4838:  MOVFF  03,11A
483C:  MOVFF  02,119
4840:  MOVFF  01,118
4844:  MOVFF  00,117
4848:  MOVLB  1
484A:  CLRF   x1E
484C:  CLRF   x1D
484E:  MOVLW  48
4850:  MOVWF  x1C
4852:  MOVLW  85
4854:  MOVWF  x1B
4856:  MOVLB  0
4858:  CALL   3AF4
485C:  MOVFF  03,1B
4860:  MOVFF  02,1A
4864:  MOVFF  01,19
4868:  MOVFF  00,18
....................       v=(int8)vel; 
486C:  MOVFF  1B,105
4870:  MOVFF  1A,104
4874:  MOVFF  19,103
4878:  MOVFF  18,102
487C:  CALL   3EB8
4880:  MOVFF  01,17
....................       lcd_gotoxy(1,3); 
4884:  MOVLW  01
4886:  MOVLB  1
4888:  MOVWF  x18
488A:  MOVLW  03
488C:  MOVWF  x19
488E:  MOVLB  0
4890:  CALL   0C80
....................       printf(lcd_putc,"        %i%%        ",v); 
4894:  MOVLW  D8
4896:  MOVWF  FF6
4898:  MOVLW  07
489A:  MOVWF  FF7
489C:  MOVLW  08
489E:  MOVLB  1
48A0:  MOVWF  x0A
48A2:  MOVLB  0
48A4:  CALL   1CCC
48A8:  MOVFF  17,103
48AC:  MOVLW  1F
48AE:  MOVLB  1
48B0:  MOVWF  x04
48B2:  MOVLB  0
48B4:  CALL   2C0A
48B8:  MOVLW  25
48BA:  MOVLB  1
48BC:  MOVWF  x17
48BE:  MOVLB  0
48C0:  CALL   0D02
48C4:  MOVLW  E4
48C6:  MOVWF  FF6
48C8:  MOVLW  07
48CA:  MOVWF  FF7
48CC:  MOVLW  08
48CE:  MOVLB  1
48D0:  MOVWF  x0A
48D2:  MOVLB  0
48D4:  CALL   1CCC
....................  
....................       if(tmp<1) 
48D8:  MOVF   2F,F
48DA:  BNZ   48E0
....................       {tmp=1;} 
48DC:  MOVLW  01
48DE:  MOVWF  2F
....................     
....................       if(tmp>254) 
48E0:  MOVF   2F,W
48E2:  SUBLW  FE
48E4:  BC    48EA
....................       {tmp=254;} 
48E6:  MOVLW  FE
48E8:  MOVWF  2F
....................        
....................       if(UP){//Si oprime hacia arriba 
48EA:  BSF    F92.5
48EC:  BTFSC  F80.5
48EE:  BRA    4918
....................          delay_ms(20); 
48F0:  MOVLW  14
48F2:  MOVLB  1
48F4:  MOVWF  x1D
48F6:  MOVLB  0
48F8:  CALL   0B3C
....................          if(UP) { 
48FC:  BSF    F92.5
48FE:  BTFSC  F80.5
4900:  BRA    4918
....................             tmp+=1;delay_ms(30); 
4902:  MOVLW  01
4904:  ADDWF  2F,F
4906:  MOVLW  1E
4908:  MOVLB  1
490A:  MOVWF  x1D
490C:  MOVLB  0
490E:  CALL   0B3C
....................             ajuste_vel(tmp); 
4912:  MOVFF  2F,102
4916:  RCALL  47C4
....................          } 
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia abajo 
4918:  BSF    F96.0
491A:  BTFSC  F84.0
491C:  BRA    4946
....................          delay_ms(20); 
491E:  MOVLW  14
4920:  MOVLB  1
4922:  MOVWF  x1D
4924:  MOVLB  0
4926:  CALL   0B3C
....................          if(DOWN) { 
492A:  BSF    F96.0
492C:  BTFSC  F84.0
492E:  BRA    4946
....................             tmp-=1;delay_ms(30); 
4930:  MOVLW  01
4932:  SUBWF  2F,F
4934:  MOVLW  1E
4936:  MOVLB  1
4938:  MOVWF  x1D
493A:  MOVLB  0
493C:  CALL   0B3C
....................             ajuste_vel(tmp); 
4940:  MOVFF  2F,102
4944:  RCALL  47C4
....................          } 
....................       } 
....................        
....................       if(LEFT){//Si oprime hacia abajo 
4946:  BSF    F96.2
4948:  BTFSC  F84.2
494A:  BRA    4A30
....................          delay_ms(20); 
494C:  MOVLW  14
494E:  MOVLB  1
4950:  MOVWF  x1D
4952:  MOVLB  0
4954:  CALL   0B3C
....................          if(LEFT) { 
4958:  BSF    F96.2
495A:  BTFSC  F84.2
495C:  BRA    4A30
....................             ajuste_vel(tmp); 
495E:  MOVFF  2F,102
4962:  RCALL  47C4
....................             write_eeprom(13,tmp);delay_ms(500); 
4964:  MOVLW  0D
4966:  MOVWF  FA9
4968:  MOVFF  2F,FA8
496C:  BCF    FA6.6
496E:  BCF    FA6.7
4970:  BSF    FA6.2
4972:  MOVF   FF2,W
4974:  MOVWF  00
4976:  BCF    FF2.7
4978:  MOVLB  F
497A:  MOVLW  55
497C:  MOVWF  FA7
497E:  MOVLW  AA
4980:  MOVWF  FA7
4982:  BSF    FA6.1
4984:  BTFSC  FA6.1
4986:  BRA    4984
4988:  BCF    FA6.2
498A:  MOVF   00,W
498C:  IORWF  FF2,F
498E:  MOVLW  02
4990:  MOVLB  1
4992:  MOVWF  x02
4994:  MOVLW  FA
4996:  MOVWF  x1D
4998:  MOVLB  0
499A:  CALL   0B3C
499E:  MOVLB  1
49A0:  DECFSZ x02,F
49A2:  BRA    4994
....................             lcd_gotoxy(1,2); 
49A4:  MOVLW  01
49A6:  MOVWF  x18
49A8:  MOVLW  02
49AA:  MOVWF  x19
49AC:  MOVLB  0
49AE:  CALL   0C80
....................             delay_ms(500); 
49B2:  MOVLW  02
49B4:  MOVLB  1
49B6:  MOVWF  x02
49B8:  MOVLW  FA
49BA:  MOVWF  x1D
49BC:  MOVLB  0
49BE:  CALL   0B3C
49C2:  MOVLB  1
49C4:  DECFSZ x02,F
49C6:  BRA    49B8
....................             printf(lcd_putc,"\f"); 
49C8:  MOVLW  0C
49CA:  MOVWF  x17
49CC:  MOVLB  0
49CE:  CALL   0D02
....................             lcd_gotoxy(1,2); 
49D2:  MOVLW  01
49D4:  MOVLB  1
49D6:  MOVWF  x18
49D8:  MOVLW  02
49DA:  MOVWF  x19
49DC:  MOVLB  0
49DE:  CALL   0C80
....................             printf(lcd_putc,"  Valor almacenado  "); 
49E2:  MOVLW  EE
49E4:  MOVWF  FF6
49E6:  MOVLW  07
49E8:  MOVWF  FF7
49EA:  CALL   1CAA
....................             lcd_gotoxy(1,3); 
49EE:  MOVLW  01
49F0:  MOVLB  1
49F2:  MOVWF  x18
49F4:  MOVLW  03
49F6:  MOVWF  x19
49F8:  MOVLB  0
49FA:  CALL   0C80
....................             printf(lcd_putc,"   Correctamente   "); 
49FE:  MOVLW  04
4A00:  MOVWF  FF6
4A02:  MOVLW  08
4A04:  MOVWF  FF7
4A06:  CALL   1CAA
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500); 
4A0A:  MOVLW  01
4A0C:  MOVWF  1C
4A0E:  CLRF   44
4A10:  MOVLW  02
4A12:  MOVWF  1F
4A14:  MOVWF  21
4A16:  MOVLW  0B
4A18:  MOVWF  1E
4A1A:  MOVLW  02
4A1C:  MOVLB  1
4A1E:  MOVWF  x02
4A20:  MOVLW  FA
4A22:  MOVWF  x1D
4A24:  MOVLB  0
4A26:  CALL   0B3C
4A2A:  MOVLB  1
4A2C:  DECFSZ x02,F
4A2E:  BRA    4A20
4A30:  MOVLB  0
....................          } 
....................       } 
.................... } 
4A32:  GOTO   58D4 (RETURN)
....................  
.................... void MenuServicio(){ 
....................       if(Opcion<1) 
*
36AE:  MOVF   36,F
36B0:  BNZ   36B6
....................          Opcion=4; 
36B2:  MOVLW  04
36B4:  MOVWF  36
....................       if(Opcion>4) 
36B6:  MOVF   36,W
36B8:  SUBLW  04
36BA:  BC    36C0
....................          Opcion=1; 
36BC:  MOVLW  01
36BE:  MOVWF  36
....................           
....................       if(Opcion==1){ 
36C0:  DECFSZ 36,W
36C2:  BRA    3734
....................          lcd_gotoxy(1,1);printf(lcd_putc,">Media Movil        "); 
36C4:  MOVLW  01
36C6:  MOVLB  1
36C8:  MOVWF  x18
36CA:  MOVWF  x19
36CC:  MOVLB  0
36CE:  CALL   0C80
36D2:  MOVLW  18
36D4:  MOVWF  FF6
36D6:  MOVLW  08
36D8:  MOVWF  FF7
36DA:  CALL   1CAA
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
36DE:  MOVLW  01
36E0:  MOVLB  1
36E2:  MOVWF  x18
36E4:  MOVLW  02
36E6:  MOVWF  x19
36E8:  MOVLB  0
36EA:  CALL   0C80
36EE:  MOVLW  2E
36F0:  MOVWF  FF6
36F2:  MOVLW  08
36F4:  MOVWF  FF7
36F6:  CALL   1CAA
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
36FA:  MOVLW  01
36FC:  MOVLB  1
36FE:  MOVWF  x18
3700:  MOVLW  03
3702:  MOVWF  x19
3704:  MOVLB  0
3706:  CALL   0C80
370A:  MOVLW  44
370C:  MOVWF  FF6
370E:  MOVLW  08
3710:  MOVWF  FF7
3712:  CALL   1CAA
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Salida Analoga     "); 
3716:  MOVLW  01
3718:  MOVLB  1
371A:  MOVWF  x18
371C:  MOVLW  04
371E:  MOVWF  x19
3720:  MOVLB  0
3722:  CALL   0C80
3726:  MOVLW  5A
3728:  MOVWF  FF6
372A:  MOVLW  08
372C:  MOVWF  FF7
372E:  CALL   1CAA
....................          #endif   
....................       }else if(Opcion==2){ 
3732:  BRA    3894
3734:  MOVF   36,W
3736:  SUBLW  02
3738:  BNZ   37AA
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
373A:  MOVLW  01
373C:  MOVLB  1
373E:  MOVWF  x18
3740:  MOVWF  x19
3742:  MOVLB  0
3744:  CALL   0C80
3748:  MOVLW  70
374A:  MOVWF  FF6
374C:  MOVLW  08
374E:  MOVWF  FF7
3750:  CALL   1CAA
....................          lcd_gotoxy(1,2);printf(lcd_putc,">Punto Cero         "); 
3754:  MOVLW  01
3756:  MOVLB  1
3758:  MOVWF  x18
375A:  MOVLW  02
375C:  MOVWF  x19
375E:  MOVLB  0
3760:  CALL   0C80
3764:  MOVLW  86
3766:  MOVWF  FF6
3768:  MOVLW  08
376A:  MOVWF  FF7
376C:  CALL   1CAA
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
3770:  MOVLW  01
3772:  MOVLB  1
3774:  MOVWF  x18
3776:  MOVLW  03
3778:  MOVWF  x19
377A:  MOVLB  0
377C:  CALL   0C80
3780:  MOVLW  9C
3782:  MOVWF  FF6
3784:  MOVLW  08
3786:  MOVWF  FF7
3788:  CALL   1CAA
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Salida Analoga     "); 
378C:  MOVLW  01
378E:  MOVLB  1
3790:  MOVWF  x18
3792:  MOVLW  04
3794:  MOVWF  x19
3796:  MOVLB  0
3798:  CALL   0C80
379C:  MOVLW  B2
379E:  MOVWF  FF6
37A0:  MOVLW  08
37A2:  MOVWF  FF7
37A4:  CALL   1CAA
....................          #endif   
....................       }else if(Opcion==3){ 
37A8:  BRA    3894
37AA:  MOVF   36,W
37AC:  SUBLW  03
37AE:  BNZ   3820
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
37B0:  MOVLW  01
37B2:  MOVLB  1
37B4:  MOVWF  x18
37B6:  MOVWF  x19
37B8:  MOVLB  0
37BA:  CALL   0C80
37BE:  MOVLW  C8
37C0:  MOVWF  FF6
37C2:  MOVLW  08
37C4:  MOVWF  FF7
37C6:  CALL   1CAA
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
37CA:  MOVLW  01
37CC:  MOVLB  1
37CE:  MOVWF  x18
37D0:  MOVLW  02
37D2:  MOVWF  x19
37D4:  MOVLB  0
37D6:  CALL   0C80
37DA:  MOVLW  DE
37DC:  MOVWF  FF6
37DE:  MOVLW  08
37E0:  MOVWF  FF7
37E2:  CALL   1CAA
....................          lcd_gotoxy(1,3);printf(lcd_putc,">Mantenimiento      "); 
37E6:  MOVLW  01
37E8:  MOVLB  1
37EA:  MOVWF  x18
37EC:  MOVLW  03
37EE:  MOVWF  x19
37F0:  MOVLB  0
37F2:  CALL   0C80
37F6:  MOVLW  F4
37F8:  MOVWF  FF6
37FA:  MOVLW  08
37FC:  MOVWF  FF7
37FE:  CALL   1CAA
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Salida Analoga     "); 
3802:  MOVLW  01
3804:  MOVLB  1
3806:  MOVWF  x18
3808:  MOVLW  04
380A:  MOVWF  x19
380C:  MOVLB  0
380E:  CALL   0C80
3812:  MOVLW  0A
3814:  MOVWF  FF6
3816:  MOVLW  09
3818:  MOVWF  FF7
381A:  CALL   1CAA
....................          #endif   
....................       }else if(Opcion==4){ 
381E:  BRA    3894
3820:  MOVF   36,W
3822:  SUBLW  04
3824:  BNZ   3894
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
3826:  MOVLW  01
3828:  MOVLB  1
382A:  MOVWF  x18
382C:  MOVWF  x19
382E:  MOVLB  0
3830:  CALL   0C80
3834:  MOVLW  20
3836:  MOVWF  FF6
3838:  MOVLW  09
383A:  MOVWF  FF7
383C:  CALL   1CAA
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
3840:  MOVLW  01
3842:  MOVLB  1
3844:  MOVWF  x18
3846:  MOVLW  02
3848:  MOVWF  x19
384A:  MOVLB  0
384C:  CALL   0C80
3850:  MOVLW  36
3852:  MOVWF  FF6
3854:  MOVLW  09
3856:  MOVWF  FF7
3858:  CALL   1CAA
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
385C:  MOVLW  01
385E:  MOVLB  1
3860:  MOVWF  x18
3862:  MOVLW  03
3864:  MOVWF  x19
3866:  MOVLB  0
3868:  CALL   0C80
386C:  MOVLW  4C
386E:  MOVWF  FF6
3870:  MOVLW  09
3872:  MOVWF  FF7
3874:  CALL   1CAA
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc,">Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc,">Salida Analoga     "); 
3878:  MOVLW  01
387A:  MOVLB  1
387C:  MOVWF  x18
387E:  MOVLW  04
3880:  MOVWF  x19
3882:  MOVLB  0
3884:  CALL   0C80
3888:  MOVLW  62
388A:  MOVWF  FF6
388C:  MOVLW  09
388E:  MOVWF  FF7
3890:  CALL   1CAA
....................          #endif    
....................       } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3894:  BSF    F92.5
3896:  BTFSC  F80.5
3898:  BRA    38BA
....................          delay_ms(20); 
389A:  MOVLW  14
389C:  MOVLB  1
389E:  MOVWF  x1D
38A0:  MOVLB  0
38A2:  CALL   0B3C
....................          if(UP) { 
38A6:  BSF    F92.5
38A8:  BTFSC  F80.5
38AA:  BRA    38BA
....................             delay_ms(30); 
38AC:  MOVLW  1E
38AE:  MOVLB  1
38B0:  MOVWF  x1D
38B2:  MOVLB  0
38B4:  CALL   0B3C
....................             Opcion--; 
38B8:  DECF   36,F
....................          } 
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia abajo 
38BA:  BSF    F96.0
38BC:  BTFSC  F84.0
38BE:  BRA    38E0
....................          delay_ms(20); 
38C0:  MOVLW  14
38C2:  MOVLB  1
38C4:  MOVWF  x1D
38C6:  MOVLB  0
38C8:  CALL   0B3C
....................          if(DOWN) { 
38CC:  BSF    F96.0
38CE:  BTFSC  F84.0
38D0:  BRA    38E0
....................             delay_ms(30);             
38D2:  MOVLW  1E
38D4:  MOVLB  1
38D6:  MOVWF  x1D
38D8:  MOVLB  0
38DA:  CALL   0B3C
....................             Opcion++; 
38DE:  INCF   36,F
....................          } 
....................       } 
....................        
....................       if(RIGHT){//Si oprime hacia abajo 
38E0:  BSF    F96.1
38E2:  BTFSC  F84.1
38E4:  BRA    3930
....................          delay_ms(20); 
38E6:  MOVLW  14
38E8:  MOVLB  1
38EA:  MOVWF  x1D
38EC:  MOVLB  0
38EE:  CALL   0B3C
....................          if(RIGHT) { 
38F2:  BSF    F96.1
38F4:  BTFSC  F84.1
38F6:  BRA    3924
....................             if(Opcion==1){ 
38F8:  DECFSZ 36,W
38FA:  BRA    3902
....................                Menu=9; 
38FC:  MOVLW  09
38FE:  MOVWF  1C
....................             }else if(Opcion==2){ 
3900:  BRA    3924
3902:  MOVF   36,W
3904:  SUBLW  02
3906:  BNZ   390E
....................                Menu=10; 
3908:  MOVLW  0A
390A:  MOVWF  1C
....................             }else if(Opcion==3){ 
390C:  BRA    3924
390E:  MOVF   36,W
3910:  SUBLW  03
3912:  BNZ   391A
....................                Menu=11; 
3914:  MOVLW  0B
3916:  MOVWF  1C
....................             }else if(Opcion==4){ 
3918:  BRA    3924
391A:  MOVF   36,W
391C:  SUBLW  04
391E:  BNZ   3924
....................                Menu=12; 
3920:  MOVLW  0C
3922:  MOVWF  1C
....................             } 
....................          } 
....................          printf(lcd_putc,"\f"); 
3924:  MOVLW  0C
3926:  MOVLB  1
3928:  MOVWF  x17
392A:  MOVLB  0
392C:  CALL   0D02
....................       } 
....................        
....................       if(LEFT){//Si oprime hacia abajo 
3930:  BSF    F96.2
3932:  BTFSC  F84.2
3934:  BRA    3978
....................          delay_ms(20); 
3936:  MOVLW  14
3938:  MOVLB  1
393A:  MOVWF  x1D
393C:  MOVLB  0
393E:  CALL   0B3C
....................          if(LEFT) { 
3942:  BSF    F96.2
3944:  BTFSC  F84.2
3946:  BRA    3978
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3948:  MOVLW  01
394A:  MOVWF  1C
394C:  CLRF   44
394E:  MOVLW  02
3950:  MOVWF  1F
3952:  MOVWF  21
3954:  MOVLW  0B
3956:  MOVWF  1E
3958:  MOVLW  02
395A:  MOVLB  1
395C:  MOVWF  x02
395E:  MOVLW  FA
3960:  MOVWF  x1D
3962:  MOVLB  0
3964:  CALL   0B3C
3968:  MOVLB  1
396A:  DECFSZ x02,F
396C:  BRA    395E
396E:  MOVLW  0C
3970:  MOVWF  x17
3972:  MOVLB  0
3974:  CALL   0D02
....................          } 
....................       } 
.................... } 
3978:  GOTO   58AC (RETURN)
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    #ifdef SIMU 
....................    set_timer1(40536);  // 5  ms 
....................    #else 
....................    set_timer1(5536);  // 5  ms 
*
0978:  MOVLW  15
097A:  MOVWF  FCF
097C:  MOVLW  A0
097E:  MOVWF  FCE
....................    #endif 
....................    tiempos++; 
0980:  INCF   55,F
0982:  BTFSC  FD8.2
0984:  INCF   56,F
....................    tiempos2++; 
0986:  INCF   59,F
0988:  BTFSC  FD8.2
098A:  INCF   5A,F
....................     
....................    if(t_latencia>=3000) 
098C:  MOVF   58,W
098E:  SUBLW  0A
0990:  BC    099E
0992:  XORLW  FF
0994:  BNZ   099C
0996:  MOVF   57,W
0998:  SUBLW  B7
099A:  BC    099E
....................       Latencia=1; 
099C:  BSF    43.1
....................     
....................    if(flag_latencia==1) 
099E:  BTFSS  43.0
09A0:  BRA    09A8
....................       t_latencia++;          
09A2:  INCF   57,F
09A4:  BTFSC  FD8.2
09A6:  INCF   58,F
....................     
....................    if(tiempos2>=200){ 
09A8:  MOVF   5A,F
09AA:  BNZ   09B2
09AC:  MOVF   59,W
09AE:  SUBLW  C7
09B0:  BC    09B8
....................       tiempos2=0;Lectura2=1; 
09B2:  CLRF   5A
09B4:  CLRF   59
09B6:  BSF    43.6
....................    } 
....................     
....................    if(tiempos>=200){   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
09B8:  MOVF   56,F
09BA:  BNZ   09C2
09BC:  MOVF   55,W
09BE:  SUBLW  C7
09C0:  BC    0A28
....................       tiempos=0;tiemporeset++; 
09C2:  CLRF   56
09C4:  CLRF   55
09C6:  INCF   3A,F
....................       Lectura=1; 
09C8:  BSF    43.5
....................           
....................       if(estadomv==1 && flag_filtro==1){   
09CA:  BTFSS  42.1
09CC:  BRA    09E8
09CE:  BTFSS  43.2
09D0:  BRA    09E8
....................          segundos++; 
09D2:  INCF   37,F
....................          if(segundos==60){ 
09D4:  MOVF   37,W
09D6:  SUBLW  3C
09D8:  BNZ   09DE
....................             segundos=0;minutos++; 
09DA:  CLRF   37
09DC:  INCF   38,F
....................          }  
....................          if(minutos==60){ 
09DE:  MOVF   38,W
09E0:  SUBLW  3C
09E2:  BNZ   09E8
....................             minutos=0;horas++; 
09E4:  CLRF   38
09E6:  INCF   39,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1){ 
09E8:  BTFSS  54.3
09EA:  BRA    0A0E
....................          if(purga_segundos>0){ 
09EC:  MOVF   3B,F
09EE:  BZ    09F4
....................             purga_segundos--; 
09F0:  DECF   3B,F
....................          }else{ 
09F2:  BRA    0A0E
....................             if(purga_minutos>0){ 
09F4:  MOVF   26,F
09F6:  BZ    0A00
....................                purga_minutos--; 
09F8:  DECF   26,F
....................                purga_segundos=59; 
09FA:  MOVLW  3B
09FC:  MOVWF  3B
....................             }else{ 
09FE:  BRA    0A0E
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0; 
0A00:  BCF    54.3
....................                //Motor_on; 
....................                //EnciendeMotor(); 
....................                Menu=20; 
0A02:  MOVLW  14
0A04:  MOVWF  1C
....................                Luz_Blanca_on; 
0A06:  BSF    F8A.4
0A08:  BCF    F93.4
....................                estadomv=1; 
0A0A:  BSF    42.1
....................                estadofl=1; 
0A0C:  BSF    42.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1){ 
0A0E:  BTFSS  54.4
0A10:  BRA    0A28
....................          if(ppurga_segundos>0){ 
0A12:  MOVF   3D,F
0A14:  BZ    0A1A
....................             ppurga_segundos--; 
0A16:  DECF   3D,F
....................          }else{ 
0A18:  BRA    0A28
....................             if(ppurga_minutos>0){ 
0A1A:  MOVF   3F,F
0A1C:  BZ    0A26
....................                ppurga_minutos--; 
0A1E:  DECF   3F,F
....................                ppurga_segundos=59; 
0A20:  MOVLW  3B
0A22:  MOVWF  3D
....................             }else{ 
0A24:  BRA    0A28
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0A26:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0A28:  BCF    F9E.0
0A2A:  GOTO   0054
.................... void main () 
.................... {   
*
543A:  CLRF   FF8
543C:  BCF    FD0.7
543E:  BSF    07.7
5440:  CLRF   FEA
5442:  CLRF   FE9
5444:  CLRF   17
5446:  CLRF   1B
5448:  CLRF   1A
544A:  CLRF   19
544C:  CLRF   18
544E:  MOVLW  64
5450:  MOVWF  1C
5452:  MOVLW  02
5454:  MOVWF  1D
5456:  MOVLW  0B
5458:  MOVWF  1E
545A:  MOVLW  02
545C:  MOVWF  1F
545E:  MOVLW  03
5460:  MOVWF  20
5462:  MOVLW  02
5464:  MOVWF  21
5466:  MOVWF  22
5468:  MOVLW  04
546A:  MOVWF  23
546C:  MOVLW  0A
546E:  MOVWF  24
5470:  MOVLW  01
5472:  MOVWF  25
5474:  CLRF   26
5476:  CLRF   27
5478:  CLRF   28
547A:  CLRF   29
547C:  CLRF   2A
547E:  CLRF   2B
5480:  CLRF   2C
5482:  CLRF   2D
5484:  CLRF   2E
5486:  MOVLW  0A
5488:  MOVWF  2F
548A:  CLRF   30
548C:  MOVWF  31
548E:  MOVWF  32
5490:  MOVWF  33
5492:  MOVWF  34
5494:  CLRF   35
5496:  MOVLW  01
5498:  MOVWF  36
549A:  CLRF   37
549C:  CLRF   38
549E:  CLRF   39
54A0:  CLRF   3A
54A2:  CLRF   3B
54A4:  CLRF   3C
54A6:  CLRF   3D
54A8:  CLRF   3E
54AA:  CLRF   3F
54AC:  CLRF   40
54AE:  CLRF   41
54B0:  BCF    42.0
54B2:  BCF    42.1
54B4:  BCF    42.2
54B6:  BCF    42.3
54B8:  BCF    42.4
54BA:  BCF    42.5
54BC:  BCF    42.6
54BE:  BCF    42.7
54C0:  BCF    43.0
54C2:  BCF    43.1
54C4:  BCF    43.2
54C6:  BCF    43.3
54C8:  BCF    43.4
54CA:  CLRF   44
54CC:  CLRF   53
54CE:  CLRF   52
54D0:  MOVLW  4B
54D2:  MOVWF  51
54D4:  MOVLW  86
54D6:  MOVWF  50
54D8:  BCF    43.5
54DA:  BCF    43.6
54DC:  BCF    43.7
54DE:  BCF    54.0
54E0:  BCF    54.1
54E2:  BCF    54.2
54E4:  BCF    54.3
54E6:  BCF    54.4
54E8:  CLRF   56
54EA:  CLRF   55
54EC:  CLRF   58
54EE:  CLRF   57
54F0:  CLRF   5A
54F2:  CLRF   59
54F4:  CLRF   5C
54F6:  CLRF   5B
54F8:  MOVLW  19
54FA:  MOVWF  x60
54FC:  MOVLW  53
54FE:  MOVWF  5F
5500:  MOVLW  18
5502:  MOVWF  5E
5504:  MOVLW  68
5506:  MOVWF  5D
5508:  MOVLW  E9
550A:  MOVWF  x64
550C:  MOVLW  BD
550E:  MOVWF  x63
5510:  MOVLW  C6
5512:  MOVWF  x62
5514:  MOVLW  71
5516:  MOVWF  x61
5518:  MOVLW  BE
551A:  MOVWF  x68
551C:  MOVLW  96
551E:  MOVWF  x67
5520:  MOVLW  24
5522:  MOVWF  x66
5524:  MOVLW  7A
5526:  MOVWF  x65
5528:  MOVLW  F3
552A:  MOVWF  x6C
552C:  MOVLW  5A
552E:  MOVWF  x6B
5530:  MOVLW  AB
5532:  MOVWF  x6A
5534:  MOVLW  81
5536:  MOVWF  x69
5538:  CLRF   x70
553A:  CLRF   x6F
553C:  CLRF   x6E
553E:  CLRF   x6D
5540:  CLRF   x74
5542:  CLRF   x73
5544:  CLRF   x72
5546:  CLRF   x71
5548:  CLRF   x78
554A:  CLRF   x77
554C:  CLRF   x76
554E:  CLRF   x75
5550:  CLRF   x7C
5552:  CLRF   x7B
5554:  CLRF   x7A
5556:  CLRF   x79
5558:  CLRF   x80
555A:  CLRF   x7F
555C:  CLRF   x7E
555E:  CLRF   x7D
5560:  CLRF   x84
5562:  CLRF   x83
5564:  CLRF   x82
5566:  CLRF   x81
5568:  CLRF   x88
556A:  CLRF   x87
556C:  CLRF   x86
556E:  CLRF   x85
5570:  CLRF   x8C
5572:  CLRF   x8B
5574:  CLRF   x8A
5576:  CLRF   x89
5578:  CLRF   x90
557A:  CLRF   x8F
557C:  CLRF   x8E
557E:  CLRF   x8D
5580:  CLRF   x94
5582:  CLRF   x93
5584:  CLRF   x92
5586:  CLRF   x91
5588:  CLRF   x98
558A:  CLRF   x97
558C:  CLRF   x96
558E:  CLRF   x95
5590:  CLRF   x9C
5592:  CLRF   x9B
5594:  CLRF   x9A
5596:  MOVLW  7F
5598:  MOVWF  x99
559A:  CLRF   xA0
559C:  CLRF   x9F
559E:  CLRF   x9E
55A0:  CLRF   x9D
55A2:  MOVLW  08
55A4:  MOVLB  1
55A6:  MOVWF  x01
55A8:  MOVF   FC1,W
55AA:  ANDLW  C0
55AC:  IORLW  0F
55AE:  MOVWF  FC1
55B0:  MOVLW  07
55B2:  MOVWF  FB4
55B4:  MOVLW  3E
55B6:  MOVWF  45
55B8:  MOVLW  20
55BA:  MOVWF  46
55BC:  MOVLW  5E
55BE:  MOVWF  47
55C0:  CLRF   48
55C2:  CLRF   49
55C4:  CLRF   4A
55C6:  CLRF   4B
55C8:  CLRF   4C
55CA:  CLRF   4D
55CC:  CLRF   4E
55CE:  CLRF   4F
55D0:  MOVLB  0
55D2:  CLRF   xA1
55D4:  CLRF   xA2
55D6:  CLRF   xA3
55D8:  CLRF   xA4
55DA:  CLRF   xA5
55DC:  CLRF   xA6
55DE:  CLRF   xA7
55E0:  CLRF   xA8
55E2:  CLRF   xA9
55E4:  CLRF   xAA
55E6:  CLRF   xAB
55E8:  CLRF   xAC
55EA:  CLRF   xAD
55EC:  CLRF   xAE
55EE:  CLRF   xAF
55F0:  CLRF   xB0
55F2:  CLRF   xB1
55F4:  CLRF   xB2
55F6:  CLRF   xB3
55F8:  CLRF   xB4
55FA:  CLRF   xB5
55FC:  CLRF   xB6
55FE:  CLRF   xB7
5600:  CLRF   xB8
5602:  CLRF   xB9
5604:  CLRF   xBA
5606:  CLRF   xBB
5608:  CLRF   xBC
560A:  CLRF   xBD
560C:  CLRF   xBE
560E:  CLRF   xBF
5610:  CLRF   xC0
5612:  CLRF   xC1
5614:  CLRF   xC2
5616:  CLRF   xC3
5618:  CLRF   xC4
561A:  CLRF   xC5
561C:  CLRF   xC6
561E:  CLRF   xC7
5620:  CLRF   xC8
5622:  CLRF   xC9
5624:  CLRF   xCA
5626:  CLRF   xCB
5628:  CLRF   xCC
562A:  CLRF   xCD
562C:  CLRF   xCE
562E:  CLRF   xCF
5630:  CLRF   xD0
5632:  CLRF   xD1
5634:  CLRF   xD2
5636:  CLRF   xD3
5638:  CLRF   xD4
563A:  CLRF   xD5
563C:  CLRF   xD6
563E:  CLRF   xD7
5640:  CLRF   xD8
5642:  CLRF   xD9
5644:  CLRF   xDA
5646:  CLRF   xDB
5648:  CLRF   xDC
564A:  CLRF   xDD
564C:  CLRF   xDE
564E:  CLRF   xDF
5650:  CLRF   xE0
5652:  CLRF   xE1
5654:  CLRF   xE2
5656:  CLRF   xE3
5658:  CLRF   xE4
565A:  CLRF   xE5
565C:  CLRF   xE6
565E:  CLRF   xE7
5660:  CLRF   xE8
5662:  CLRF   xE9
5664:  CLRF   xEA
5666:  CLRF   xEB
5668:  CLRF   xEC
566A:  CLRF   xED
566C:  CLRF   xEE
566E:  CLRF   xEF
5670:  CLRF   xF0
5672:  CLRF   xF1
5674:  CLRF   xF2
5676:  CLRF   xF3
5678:  CLRF   xF4
567A:  CLRF   xF5
567C:  CLRF   xF6
567E:  CLRF   xF7
5680:  CLRF   xF8
5682:  CLRF   xF9
5684:  CLRF   xFA
5686:  CLRF   xFB
5688:  CLRF   xFC
568A:  CLRF   xFD
568C:  CLRF   xFE
568E:  CLRF   xFF
5690:  MOVLB  1
5692:  CLRF   x00
....................    ConfigInicial(); 
5694:  MOVLB  0
5696:  GOTO   0D80
....................    LeeEEPROM();             
569A:  GOTO   11DA
....................    LimitaValores();  
569E:  GOTO   16E4
....................    Menu=200; 
56A2:  MOVLW  C8
56A4:  MOVWF  1C
....................    SalidasOff(); 
56A6:  CALL   0B14
....................    while(true){ 
....................  
....................    while(Menu==200){ 
56AA:  MOVF   1C,W
56AC:  SUBLW  C8
56AE:  BNZ   579E
....................       SalidasOff(); 
56B0:  CALL   0B14
....................       if(RIGHT){ 
56B4:  BSF    F96.1
56B6:  BTFSC  F84.1
56B8:  BRA    579C
....................          delay_ms(1000); 
56BA:  MOVLW  04
56BC:  MOVLB  1
56BE:  MOVWF  x02
56C0:  MOVLW  FA
56C2:  MOVWF  x1D
56C4:  MOVLB  0
56C6:  CALL   0B3C
56CA:  MOVLB  1
56CC:  DECFSZ x02,F
56CE:  BRA    56C0
....................          if(RIGHT){    
56D0:  BSF    F96.1
56D2:  BTFSC  F84.1
56D4:  BRA    579A
....................             lcd_init(); 
56D6:  MOVLB  0
56D8:  CALL   0C0C
....................             intensidadpantalla(1); 
56DC:  MOVLW  01
56DE:  MOVLB  1
56E0:  MOVWF  x02
56E2:  MOVLB  0
56E4:  CALL   0B28
....................             lcd_gotoxy(1,1); 
56E8:  MOVLW  01
56EA:  MOVLB  1
56EC:  MOVWF  x18
56EE:  MOVWF  x19
56F0:  MOVLB  0
56F2:  CALL   0C80
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
56F6:  MOVLW  2E
56F8:  MOVWF  FF6
56FA:  MOVLW  0A
56FC:  MOVWF  FF7
56FE:  CALL   1CAA
....................             lcd_gotoxy(1,2); 
5702:  MOVLW  01
5704:  MOVLB  1
5706:  MOVWF  x18
5708:  MOVLW  02
570A:  MOVWF  x19
570C:  MOVLB  0
570E:  CALL   0C80
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
5712:  MOVLW  44
5714:  MOVWF  FF6
5716:  MOVLW  0A
5718:  MOVWF  FF7
571A:  CALL   1CAA
....................             lcd_gotoxy(1,3); 
571E:  MOVLW  01
5720:  MOVLB  1
5722:  MOVWF  x18
5724:  MOVLW  03
5726:  MOVWF  x19
5728:  MOVLB  0
572A:  CALL   0C80
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
572E:  MOVLW  5A
5730:  MOVWF  FF6
5732:  MOVLW  0A
5734:  MOVWF  FF7
5736:  CALL   1CAA
....................             lcd_gotoxy(1,4); 
573A:  MOVLW  01
573C:  MOVLB  1
573E:  MOVWF  x18
5740:  MOVLW  04
5742:  MOVWF  x19
5744:  MOVLB  0
5746:  CALL   0C80
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
574A:  MOVLW  70
574C:  MOVWF  FF6
574E:  MOVLW  0A
5750:  MOVWF  FF7
5752:  CALL   1CAA
....................             delay_ms(2000); 
5756:  MOVLW  08
5758:  MOVLB  1
575A:  MOVWF  x02
575C:  MOVLW  FA
575E:  MOVWF  x1D
5760:  MOVLB  0
5762:  CALL   0B3C
5766:  MOVLB  1
5768:  DECFSZ x02,F
576A:  BRA    575C
....................             printf(lcd_putc,"\f"); 
576C:  MOVLW  0C
576E:  MOVWF  x17
5770:  MOVLB  0
5772:  CALL   0D02
....................             Menu=0; 
5776:  CLRF   1C
....................             printf(lcd_putc,"\f"); 
5778:  MOVLW  0C
577A:  MOVLB  1
577C:  MOVWF  x17
577E:  MOVLB  0
5780:  CALL   0D02
....................             delay_ms(500); 
5784:  MOVLW  02
5786:  MOVLB  1
5788:  MOVWF  x02
578A:  MOVLW  FA
578C:  MOVWF  x1D
578E:  MOVLB  0
5790:  CALL   0B3C
5794:  MOVLB  1
5796:  DECFSZ x02,F
5798:  BRA    578A
579A:  MOVLB  0
....................          } 
....................       } 
....................    } 
579C:  BRA    56AA
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................     while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
579E:  MOVF   1C,F
57A0:  BNZ   57FC
....................       flag_latencia=1; 
57A2:  BSF    43.0
....................       SalidasOff(); 
57A4:  CALL   0B14
....................       if(Latencia==1){ 
57A8:  BTFSS  43.1
57AA:  BRA    57BA
....................          printf(lcd_putc,"\f");reset_cpu(); 
57AC:  MOVLW  0C
57AE:  MOVLB  1
57B0:  MOVWF  x17
57B2:  MOVLB  0
57B4:  CALL   0D02
57B8:  RESET
....................       } 
....................        
....................       if(SolicitaContrasena(0,0,50,contrasena[0],contrasena[1],contrasena[2],contrasena[3])==1){ 
57BA:  MOVLB  1
57BC:  CLRF   x02
57BE:  CLRF   x03
57C0:  MOVLW  32
57C2:  MOVWF  x04
57C4:  MOVFF  4C,105
57C8:  MOVFF  4D,106
57CC:  MOVFF  4E,107
57D0:  MOVFF  4F,108
57D4:  MOVLB  0
57D6:  CALL   1DA4
57DA:  DECFSZ 01,W
57DC:  BRA    57FA
....................          printf(lcd_putc,"\f");Aux_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
57DE:  MOVLW  0C
57E0:  MOVLB  1
57E2:  MOVWF  x17
57E4:  MOVLB  0
57E6:  CALL   0D02
57EA:  BSF    F8A.6
57EC:  BCF    F93.6
57EE:  BCF    43.0
57F0:  BCF    43.1
57F2:  BSF    54.3
....................          t_latencia=0;flag_iniciodamper=1;  
57F4:  CLRF   58
57F6:  CLRF   57
57F8:  BSF    43.7
....................       } 
....................    } 
57FA:  BRA    579E
....................     
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
57FC:  DECFSZ 1C,W
57FE:  BRA    5804
....................       MenuPrincipal(); 
5800:  GOTO   2342
....................    } 
....................  
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
5804:  MOVF   1C,W
5806:  SUBLW  02
5808:  BNZ   580E
....................       MenuAlarma(); 
580A:  GOTO   25C2
....................    }       
....................  
....................    if(Menu == 3){ // Menu de Configuracion de Tiempos de Filtro 
580E:  MOVF   1C,W
5810:  SUBLW  03
5812:  BNZ   5818
....................       MenuFiltro();   
5814:  GOTO   2712
....................    } 
....................     
....................    if(Menu == 4){ // Menu de Configuracion de Tiempo de vida de filtro 
5818:  MOVF   1C,W
581A:  SUBLW  04
581C:  BNZ   5822
....................       MenuSetpoint();   
581E:  GOTO   2AA8
....................    } 
....................     
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
5822:  MOVF   1C,W
5824:  SUBLW  05
5826:  BNZ   584C
....................       SolicitaContrasena(5,1,51,contrasena[0],contrasena[1],contrasena[2],contrasena[3]); 
5828:  MOVLW  05
582A:  MOVLB  1
582C:  MOVWF  x02
582E:  MOVLW  01
5830:  MOVWF  x03
5832:  MOVLW  33
5834:  MOVWF  x04
5836:  MOVFF  4C,105
583A:  MOVFF  4D,106
583E:  MOVFF  4E,107
5842:  MOVFF  4F,108
5846:  MOVLB  0
5848:  CALL   1DA4
....................    }       
....................  
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
584C:  MOVF   1C,W
584E:  SUBLW  33
5850:  BNZ   5856
....................       MenuCambioClave(); 
5852:  GOTO   2CF4
....................    }       
....................     
....................    if(Menu == 6){ 
5856:  MOVF   1C,W
5858:  SUBLW  06
585A:  BNZ   5860
....................       MenuTiempoPurga(); 
585C:  GOTO   30FC
....................    } 
....................     
....................    if(Menu == 7){ 
5860:  MOVF   1C,W
5862:  SUBLW  07
5864:  BNZ   586A
....................       MenuTiempoPostPurga(); 
5866:  GOTO   33D8
....................    } 
....................     
....................    if(Menu == 8){ 
586A:  MOVF   1C,W
586C:  SUBLW  08
586E:  BNZ   58A2
....................       while(SolicitaContrasena(8,1,71,4,4,4,4)==0 && Menu==8){} 
5870:  MOVLW  08
5872:  MOVLB  1
5874:  MOVWF  x02
5876:  MOVLW  01
5878:  MOVWF  x03
587A:  MOVLW  47
587C:  MOVWF  x04
587E:  MOVLW  04
5880:  MOVWF  x05
5882:  MOVWF  x06
5884:  MOVWF  x07
5886:  MOVWF  x08
5888:  MOVLB  0
588A:  CALL   1DA4
588E:  MOVF   01,F
5890:  BNZ   589A
5892:  MOVF   1C,W
5894:  SUBLW  08
5896:  BNZ   589A
5898:  BRA    5870
....................       clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
589A:  CLRF   48
589C:  CLRF   49
589E:  CLRF   4A
58A0:  CLRF   4B
....................    } 
....................     
....................    if(Menu == 71){ 
58A2:  MOVF   1C,W
58A4:  SUBLW  47
58A6:  BNZ   58AC
....................       MenuServicio(); 
58A8:  GOTO   36AE
....................    } 
....................  
....................    if(Menu == 9){ 
58AC:  MOVF   1C,W
58AE:  SUBLW  09
58B0:  BNZ   58B6
....................       MenuMedia(); 
58B2:  GOTO   397C
....................    } 
....................  
....................    if(Menu == 10){// Menu de configuración de punto zero.    
58B6:  MOVF   1C,W
58B8:  SUBLW  0A
58BA:  BNZ   58C0
....................       MenuPuntoCero(); 
58BC:  GOTO   3EF4
....................    } 
....................  
....................    if(Menu == 11){// Menu de Mantenimiento 
58C0:  MOVF   1C,W
58C2:  SUBLW  0B
58C4:  BNZ   58CA
....................       MenuMantenimiento(); 
58C6:  GOTO   429A
....................    } 
....................     
....................    #ifdef DAMPER 
....................    if(Menu == 12){// Menu de Modo 
....................       MenuModo(); 
....................    } 
....................    #endif 
....................     
....................    #ifdef VARIADOR 
....................    if(Menu == 12){// Menu de Modo 
58CA:  MOVF   1C,W
58CC:  SUBLW  0C
58CE:  BNZ   58D4
....................       MenuVelocidad(); 
58D0:  GOTO   47CA
....................    } 
....................    #endif 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................    if(Menu==20){ 
58D4:  MOVF   1C,W
58D6:  SUBLW  14
58D8:  BTFSS  FD8.2
58DA:  BRA    5CA6
....................        
....................       if(Lectura2==1){ 
58DC:  BTFSS  43.6
58DE:  BRA    5A92
....................           
....................          lcd_gotoxy(1,1);                      
58E0:  MOVLW  01
58E2:  MOVLB  1
58E4:  MOVWF  x18
58E6:  MOVWF  x19
58E8:  MOVLB  0
58EA:  CALL   0C80
....................          printf(lcd_putc,"JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
58EE:  MOVLW  86
58F0:  MOVWF  FF6
58F2:  MOVLW  0A
58F4:  MOVWF  FF7
58F6:  CALL   1CAA
....................          
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,2); 
58FA:  MOVLW  01
58FC:  MOVLB  1
58FE:  MOVWF  x18
5900:  MOVLW  02
5902:  MOVWF  x19
5904:  MOVLB  0
5906:  CALL   0C80
....................          vel=((float)tmp/254)*100; 
590A:  MOVLB  1
590C:  CLRF   x19
590E:  MOVFF  2F,118
5912:  MOVLB  0
5914:  CALL   0DCE
5918:  MOVFF  00,102
591C:  MOVFF  01,103
5920:  MOVFF  02,104
5924:  MOVFF  03,105
5928:  MOVFF  03,11A
592C:  MOVFF  02,119
5930:  MOVFF  01,118
5934:  MOVFF  00,117
5938:  MOVLB  1
593A:  CLRF   x1E
593C:  CLRF   x1D
593E:  MOVLW  7E
5940:  MOVWF  x1C
5942:  MOVLW  86
5944:  MOVWF  x1B
5946:  MOVLB  0
5948:  CALL   0E04
594C:  MOVFF  00,102
5950:  MOVFF  01,103
5954:  MOVFF  02,104
5958:  MOVFF  03,105
595C:  MOVFF  03,11A
5960:  MOVFF  02,119
5964:  MOVFF  01,118
5968:  MOVFF  00,117
596C:  MOVLB  1
596E:  CLRF   x1E
5970:  CLRF   x1D
5972:  MOVLW  48
5974:  MOVWF  x1C
5976:  MOVLW  85
5978:  MOVWF  x1B
597A:  MOVLB  0
597C:  CALL   3AF4
5980:  MOVFF  03,1B
5984:  MOVFF  02,1A
5988:  MOVFF  01,19
598C:  MOVFF  00,18
....................          printf(lcd_putc,"Ext:%03i%%",(int8)vel); 
5990:  MOVFF  1B,105
5994:  MOVFF  1A,104
5998:  MOVFF  19,103
599C:  MOVFF  18,102
59A0:  CALL   3EB8
59A4:  MOVFF  01,102
59A8:  MOVLW  8E
59AA:  MOVWF  FF6
59AC:  MOVLW  0A
59AE:  MOVWF  FF7
59B0:  MOVLW  04
59B2:  MOVLB  1
59B4:  MOVWF  x0A
59B6:  MOVLB  0
59B8:  CALL   1CCC
59BC:  MOVFF  102,103
59C0:  MOVLW  03
59C2:  MOVLB  1
59C4:  MOVWF  x04
59C6:  MOVLB  0
59C8:  CALL   2C0A
59CC:  MOVLW  25
59CE:  MOVLB  1
59D0:  MOVWF  x17
59D2:  MOVLB  0
59D4:  CALL   0D02
....................          #endif 
....................           
....................          #ifdef DAMPER 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"Ext:%2.0f%%",(100*((float)tmp/255)));          
....................          #endif 
....................           
....................          #ifdef FLUJO 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"InFlow: %2.1f (m/s) ",Flujo); 
....................           
....................          if(Flujo<0.5){ 
....................             lcd_gotoxy(11,2); 
....................             printf(lcd_putc,"Flujo:Bajo");       
....................          }else{ 
....................             if(Flujo>2.0){ 
....................                lcd_gotoxy(11,2); 
....................                printf(lcd_putc,"Flujo:Alto");                
....................             }else{ 
....................                lcd_gotoxy(11,2); 
....................                printf(lcd_putc,"Flujo:OK  ");       
....................             } 
....................          } 
....................          #else 
....................          lcd_gotoxy(1,3); 
59D8:  MOVLW  01
59DA:  MOVLB  1
59DC:  MOVWF  x18
59DE:  MOVLW  03
59E0:  MOVWF  x19
59E2:  MOVLB  0
59E4:  CALL   0C80
....................          printf(lcd_putc,"Temperatura: %2.0f C",leeTemperatura(MediaMovil)); 
59E8:  MOVFF  30,102
59EC:  GOTO   4A36
59F0:  MOVFF  00,102
59F4:  MOVFF  01,103
59F8:  MOVFF  02,104
59FC:  MOVFF  03,105
5A00:  MOVLW  9A
5A02:  MOVWF  FF6
5A04:  MOVLW  0A
5A06:  MOVWF  FF7
5A08:  MOVLW  0D
5A0A:  MOVLB  1
5A0C:  MOVWF  x0A
5A0E:  MOVLB  0
5A10:  CALL   1CCC
5A14:  MOVLW  01
5A16:  MOVWF  FE9
5A18:  MOVFF  105,10D
5A1C:  MOVFF  104,10C
5A20:  MOVFF  103,10B
5A24:  MOVFF  102,10A
5A28:  MOVLB  1
5A2A:  CLRF   x0E
5A2C:  MOVLB  0
5A2E:  CALL   3CAE
5A32:  MOVLW  20
5A34:  MOVLB  1
5A36:  MOVWF  x17
5A38:  MOVLB  0
5A3A:  CALL   0D02
5A3E:  MOVLW  43
5A40:  MOVLB  1
5A42:  MOVWF  x17
5A44:  MOVLB  0
5A46:  CALL   0D02
....................          if(ALARMA){ 
5A4A:  BSF    F92.3
5A4C:  BTFSC  F80.3
5A4E:  BRA    5A72
....................             estadomv=0; 
5A50:  BCF    42.1
....................             estadofl=1; 
5A52:  BSF    42.0
....................             lcd_gotoxy(11,2); 
5A54:  MOVLW  0B
5A56:  MOVLB  1
5A58:  MOVWF  x18
5A5A:  MOVLW  02
5A5C:  MOVWF  x19
5A5E:  MOVLB  0
5A60:  CALL   0C80
....................             printf(lcd_putc,"Alarma:EV1"); 
5A64:  MOVLW  B0
5A66:  MOVWF  FF6
5A68:  MOVLW  0A
5A6A:  MOVWF  FF7
5A6C:  CALL   1CAA
....................          }else{ 
5A70:  BRA    5A8E
....................             lcd_gotoxy(11,2); 
5A72:  MOVLW  0B
5A74:  MOVLB  1
5A76:  MOVWF  x18
5A78:  MOVLW  02
5A7A:  MOVWF  x19
5A7C:  MOVLB  0
5A7E:  CALL   0C80
....................             printf(lcd_putc,"Alarma:---"); 
5A82:  MOVLW  BC
5A84:  MOVWF  FF6
5A86:  MOVLW  0A
5A88:  MOVWF  FF7
5A8A:  CALL   1CAA
....................          } 
....................          #endif 
....................          imprimio=1; 
5A8E:  BSF    43.3
....................          Lectura2=0; 
5A90:  BCF    43.6
....................       } 
....................        
....................       if(flag_filtro==1){ 
5A92:  BTFSS  43.2
5A94:  BRA    5AD8
....................          if(horas>=setpoint){ 
5A96:  MOVF   41,W
5A98:  SUBWF  39,W
5A9A:  BNC   5ABA
....................             lcd_gotoxy(10,1);                      
5A9C:  MOVLW  0A
5A9E:  MOVLB  1
5AA0:  MOVWF  x18
5AA2:  MOVLW  01
5AA4:  MOVWF  x19
5AA6:  MOVLB  0
5AA8:  CALL   0C80
....................             printf(lcd_putc,"Filtro:CAM"); 
5AAC:  MOVLW  C8
5AAE:  MOVWF  FF6
5AB0:  MOVLW  0A
5AB2:  MOVWF  FF7
5AB4:  CALL   1CAA
....................          }else{ 
5AB8:  BRA    5AD6
....................             lcd_gotoxy(10,1);                      
5ABA:  MOVLW  0A
5ABC:  MOVLB  1
5ABE:  MOVWF  x18
5AC0:  MOVLW  01
5AC2:  MOVWF  x19
5AC4:  MOVLB  0
5AC6:  CALL   0C80
....................             printf(lcd_putc,"Filtro:OK "); 
5ACA:  MOVLW  D4
5ACC:  MOVWF  FF6
5ACE:  MOVLW  0A
5AD0:  MOVWF  FF7
5AD2:  CALL   1CAA
....................          } 
....................       }else{ 
5AD6:  BRA    5AF4
....................          lcd_gotoxy(10,1);                      
5AD8:  MOVLW  0A
5ADA:  MOVLB  1
5ADC:  MOVWF  x18
5ADE:  MOVLW  01
5AE0:  MOVWF  x19
5AE2:  MOVLB  0
5AE4:  CALL   0C80
....................          printf(lcd_putc,"Filtro:---"); 
5AE8:  MOVLW  E0
5AEA:  MOVWF  FF6
5AEC:  MOVLW  0A
5AEE:  MOVWF  FF7
5AF0:  CALL   1CAA
....................       } 
....................        
....................       if(estadofl==1){ 
5AF4:  BTFSS  42.0
5AF6:  BRA    5B1A
....................          Luz_Blanca_on; 
5AF8:  BSF    F8A.4
5AFA:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5AFC:  MOVLW  01
5AFE:  MOVLB  1
5B00:  MOVWF  x18
5B02:  MOVLW  04
5B04:  MOVWF  x19
5B06:  MOVLB  0
5B08:  CALL   0C80
....................          printf(lcd_putc,"Luz:ON "); 
5B0C:  MOVLW  EC
5B0E:  MOVWF  FF6
5B10:  MOVLW  0A
5B12:  MOVWF  FF7
5B14:  CALL   1CAA
....................       }else{ 
5B18:  BRA    5B3A
....................          Luz_Blanca_off; 
5B1A:  BCF    F8A.4
5B1C:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
5B1E:  MOVLW  01
5B20:  MOVLB  1
5B22:  MOVWF  x18
5B24:  MOVLW  04
5B26:  MOVWF  x19
5B28:  MOVLB  0
5B2A:  CALL   0C80
....................          printf(lcd_putc,"Luz:OFF "); 
5B2E:  MOVLW  F4
5B30:  MOVWF  FF6
5B32:  MOVLW  0A
5B34:  MOVWF  FF7
5B36:  CALL   1CAA
....................       } 
....................        
....................       if(estadomv==1){ 
5B3A:  BTFSS  42.1
5B3C:  BRA    5B64
....................          lcd_gotoxy(10,4); 
5B3E:  MOVLW  0A
5B40:  MOVLB  1
5B42:  MOVWF  x18
5B44:  MOVLW  04
5B46:  MOVWF  x19
5B48:  MOVLB  0
5B4A:  CALL   0C80
....................          printf(lcd_putc,"Motor:ON "); 
5B4E:  MOVLW  FE
5B50:  MOVWF  FF6
5B52:  MOVLW  0A
5B54:  MOVWF  FF7
5B56:  CALL   1CAA
....................          #ifdef VARIADOR 
....................          ajuste_vel(tmp); 
5B5A:  MOVFF  2F,102
5B5E:  CALL   47C4
....................          #endif 
....................       }else{ 
5B62:  BRA    5B84
....................          #ifdef DAMPER 
....................          if(iniciodamper==1){ 
....................             //Motor_off;      
....................             ApagaMotor(); 
....................          } 
....................          #else 
....................          ApagaMotor(); 
5B64:  CALL   4BDA
....................          #endif 
....................          lcd_gotoxy(10,4); 
5B68:  MOVLW  0A
5B6A:  MOVLB  1
5B6C:  MOVWF  x18
5B6E:  MOVLW  04
5B70:  MOVWF  x19
5B72:  MOVLB  0
5B74:  CALL   0C80
....................          printf(lcd_putc,"Motor:OFF ");  
5B78:  MOVLW  08
5B7A:  MOVWF  FF6
5B7C:  MOVLW  0B
5B7E:  MOVWF  FF7
5B80:  CALL   1CAA
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia Abajo 
5B84:  BSF    F96.0
5B86:  BTFSC  F84.0
5B88:  BRA    5BB2
....................          delay_ms(20); 
5B8A:  MOVLW  14
5B8C:  MOVLB  1
5B8E:  MOVWF  x1D
5B90:  MOVLB  0
5B92:  CALL   0B3C
....................          if(DOWN && Flanco == 0){ 
5B96:  BSF    F96.0
5B98:  BTFSC  F84.0
5B9A:  BRA    5BB0
5B9C:  BTFSC  42.4
5B9E:  BRA    5BB0
....................             Flanco = 1;delay_ms(200);estadofl=!estadofl; 
5BA0:  BSF    42.4
5BA2:  MOVLW  C8
5BA4:  MOVLB  1
5BA6:  MOVWF  x1D
5BA8:  MOVLB  0
5BAA:  CALL   0B3C
5BAE:  BTG    42.0
....................          } 
....................       }else{ 
5BB0:  BRA    5BB4
....................          Flanco = 0; 
5BB2:  BCF    42.4
....................       } 
....................              
....................       if(LEFT){//Si oprime hacia Izquierda 
5BB4:  BSF    F96.2
5BB6:  BTFSC  F84.2
5BB8:  BRA    5C10
....................          delay_ms(20); 
5BBA:  MOVLW  14
5BBC:  MOVLB  1
5BBE:  MOVWF  x1D
5BC0:  MOVLB  0
5BC2:  CALL   0B3C
....................          if(LEFT && Flanco2 == 0){ 
5BC6:  BSF    F96.2
5BC8:  BTFSC  F84.2
5BCA:  BRA    5C0E
5BCC:  BTFSC  42.6
5BCE:  BRA    5C0E
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
5BD0:  BSF    42.6
5BD2:  MOVLW  C8
5BD4:  MOVLB  1
5BD6:  MOVWF  x1D
5BD8:  MOVLB  0
5BDA:  CALL   0B3C
5BDE:  BTG    42.1
....................             if(estadomv==1){ 
5BE0:  BTFSS  42.1
5BE2:  BRA    5BFA
....................                //Motor_on; 
....................                EnciendeMotor(); 
5BE4:  CALL   4C00
....................                delay_ms(150); 
5BE8:  MOVLW  96
5BEA:  MOVLB  1
5BEC:  MOVWF  x1D
5BEE:  MOVLB  0
5BF0:  CALL   0B3C
....................                lcd_init(); 
5BF4:  CALL   0C0C
....................             }else{ 
5BF8:  BRA    5C0E
....................                //Motor_off; 
....................                ApagaMotor(); 
5BFA:  CALL   4BDA
....................                delay_ms(150); 
5BFE:  MOVLW  96
5C00:  MOVLB  1
5C02:  MOVWF  x1D
5C04:  MOVLB  0
5C06:  CALL   0B3C
....................                lcd_init(); 
5C0A:  CALL   0C0C
....................             } 
....................          } 
....................       }else{ 
5C0E:  BRA    5C12
....................          Flanco2 = 0; 
5C10:  BCF    42.6
....................       } 
....................     
....................       if(UP){// Si oprime Arriba 
5C12:  BSF    F92.5
5C14:  BTFSC  F80.5
5C16:  BRA    5C60
....................          delay_ms(20); 
5C18:  MOVLW  14
5C1A:  MOVLB  1
5C1C:  MOVWF  x1D
5C1E:  MOVLB  0
5C20:  CALL   0B3C
....................          if(UP && Flanco1 == 0) { 
5C24:  BSF    F92.5
5C26:  BTFSC  F80.5
5C28:  BRA    5C5E
5C2A:  BTFSC  42.5
5C2C:  BRA    5C5E
....................             /*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
5C2E:  MOVLW  02
5C30:  MOVLB  1
5C32:  MOVWF  x02
5C34:  MOVLW  FA
5C36:  MOVWF  x1D
5C38:  MOVLB  0
5C3A:  CALL   0B3C
5C3E:  MOVLB  1
5C40:  DECFSZ x02,F
5C42:  BRA    5C34
5C44:  MOVLW  0C
5C46:  MOVWF  x17
5C48:  MOVLB  0
5C4A:  CALL   0D02
5C4E:  MOVLW  01
5C50:  MOVWF  1C
5C52:  CLRF   44
5C54:  MOVLW  02
5C56:  MOVWF  1F
5C58:  MOVWF  21
5C5A:  MOVLW  0B
5C5C:  MOVWF  1E
....................          } 
....................       }else{ 
5C5E:  BRA    5C62
....................          Flanco1 = 0; 
5C60:  BCF    42.5
....................       } 
....................              
....................       if(RIGHT){// Si oprime Derecha 
5C62:  BSF    F96.1
5C64:  BTFSC  F84.1
5C66:  BRA    5CA4
....................          delay_ms(20); 
5C68:  MOVLW  14
5C6A:  MOVLB  1
5C6C:  MOVWF  x1D
5C6E:  MOVLB  0
5C70:  CALL   0B3C
....................          if(RIGHT && Flanco3 == 0){ 
5C74:  BSF    F96.1
5C76:  BTFSC  F84.1
5C78:  BRA    5CA2
5C7A:  BTFSC  42.7
5C7C:  BRA    5CA2
....................             delay_ms(500);printf(lcd_putc,"\f");Menu=40; 
5C7E:  MOVLW  02
5C80:  MOVLB  1
5C82:  MOVWF  x02
5C84:  MOVLW  FA
5C86:  MOVWF  x1D
5C88:  MOVLB  0
5C8A:  CALL   0B3C
5C8E:  MOVLB  1
5C90:  DECFSZ x02,F
5C92:  BRA    5C84
5C94:  MOVLW  0C
5C96:  MOVWF  x17
5C98:  MOVLB  0
5C9A:  CALL   0D02
5C9E:  MOVLW  28
5CA0:  MOVWF  1C
....................          } 
....................       }else{ 
5CA2:  BRA    5CA6
....................          Flanco3 = 0; 
5CA4:  BCF    42.7
....................       } 
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
....................    if(Menu == 30){ 
5CA6:  MOVF   1C,W
5CA8:  SUBLW  1E
5CAA:  BNZ   5CB0
....................       MenuPostPurga(); 
5CAC:  GOTO   4C26
....................    } 
....................  
....................    if(Menu == 40){ // Menu de apagado de cabina 
5CB0:  MOVF   1C,W
5CB2:  SUBLW  28
5CB4:  BNZ   5CBA
....................       MenuApagado(); 
5CB6:  GOTO   4E34
....................    }       
....................  
....................    if(Menu == 50){ // Menu de Purga 
5CBA:  MOVF   1C,W
5CBC:  SUBLW  32
5CBE:  BNZ   5CC4
....................       MenuPurga(); 
5CC0:  GOTO   5330
....................    }       
....................  
....................    if(tiemporeset>=60){ 
5CC4:  MOVF   3A,W
5CC6:  SUBLW  3B
5CC8:  BC    5CD0
....................       lcd_init(); 
5CCA:  CALL   0C0C
....................       tiemporeset=0; 
5CCE:  CLRF   3A
....................    }  
....................  
....................    if(Menu!=0 || Menu!=30){ 
5CD0:  MOVF   1C,F
5CD2:  BNZ   5CDA
5CD4:  MOVF   1C,W
5CD6:  SUBLW  1E
5CD8:  BZ    5D3E
....................       if(Lectura==1){ 
5CDA:  BTFSS  43.5
5CDC:  BRA    5D3A
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
5CDE:  MOVFF  30,102
5CE2:  CALL   4F38
5CE6:  MOVFF  03,70
5CEA:  MOVFF  02,6F
5CEE:  MOVFF  01,6E
5CF2:  MOVFF  00,6D
....................          #ifdef DAMPER 
....................          controlar_flujo(); 
....................          #endif 
....................           
....................          #ifdef FLUJOS 
....................          if(Flujo<0.5 && Menu==20){ 
....................               flag_latencia=1;  
....................               if(Latencia==1){ 
....................                  if(estadoalarma==1){ 
....................                     //Alarma_on; 
....................                     output_toggle(PIN_B7); 
....................                     estadopantalla=!estadopantalla; 
....................                  }else{ 
....................                     Alarma_off; 
....................                     estadopantalla=1; 
....................                  } 
....................                  if(estadopantalla==1) 
....................                   intensidadpantalla(contraste); 
....................                  else 
....................                   intensidadpantalla(0); 
....................                } 
....................             } 
....................          else{ 
....................             intensidadpantalla(contraste);Alarma_off; 
....................             if(Flujo>=0.5){ 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
....................             } 
....................          } 
....................          #else 
....................          if(estadomv==0 && estadofl==1 && Menu==20){ 
5CF6:  BTFSC  42.1
5CF8:  BRA    5D2E
5CFA:  BTFSS  42.0
5CFC:  BRA    5D2E
5CFE:  MOVF   1C,W
5D00:  SUBLW  14
5D02:  BNZ   5D2E
....................              if(estadoalarma==1){ 
5D04:  BTFSS  42.2
5D06:  BRA    5D0E
....................                 //Alarma_on; 
....................                 output_toggle(PIN_B7); 
5D08:  BCF    F93.7
5D0A:  BTG    F8A.7
....................              }else{ 
5D0C:  BRA    5D12
....................                 Alarma_off; 
5D0E:  BCF    F8A.7
5D10:  BCF    F93.7
....................              } 
....................              estadopantalla=!estadopantalla; 
5D12:  BTG    42.3
....................              if(estadopantalla==1) 
5D14:  BTFSS  42.3
5D16:  BRA    5D22
....................               intensidadpantalla(contraste); 
5D18:  MOVFF  24,102
5D1C:  CALL   0B28
....................              else 
5D20:  BRA    5D2C
....................               intensidadpantalla(0); 
5D22:  MOVLB  1
5D24:  CLRF   x02
5D26:  MOVLB  0
5D28:  CALL   0B28
....................          }else{ 
5D2C:  BRA    5D3A
....................             intensidadpantalla(contraste);Alarma_off; 
5D2E:  MOVFF  24,102
5D32:  CALL   0B28
5D36:  BCF    F8A.7
5D38:  BCF    F93.7
....................          } 
....................          #endif 
....................       } 
....................       Lectura=0; 
5D3A:  BCF    43.5
....................    }else{ 
5D3C:  BRA    5D52
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
5D3E:  MOVFF  24,102
5D42:  CALL   0B28
5D46:  BCF    F8A.7
5D48:  BCF    F93.7
5D4A:  BCF    43.1
5D4C:  CLRF   58
5D4E:  CLRF   57
5D50:  BCF    43.0
....................    } 
....................     
....................    if(Ruido){ 
5D52:  BTFSS  43.4
5D54:  BRA    5D58
.................... //      Refresco(); 
....................       imprimio=0; 
5D56:  BCF    43.3
....................    } 
....................  
....................    }        
5D58:  BRA    56AA
.................... } 
....................  
5D5A:  SLEEP 

Configuration Fuses:
   Word  1: CE24   IESO FCMEN HSPLL PLL5 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
