CCS PCH C Compiler, Version 4.104, 5967               07-mar.-19 16:05

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2019\Cabina Extractora 150 Flujo Vent Externo Intertek #0045879XX\Firmware\Cabina_Extractora.lst

               ROM used: 20392 bytes (62%)
                         Largest free fragment is 12372
               RAM used: 218 (11%) at main() level
                         250 (12%) worst case
               Stack:    8 worst case (7 in main + 1 for interrupts)

*
0000:  GOTO   46EC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0954
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////              JUDAPIES-dielecingenieria.com                         //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#define SIMU 1 
.................... #ifdef SIMU 
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=4000000) 
.................... #else 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0B20:  CLRF   FEA
0B22:  MOVLW  F1
0B24:  MOVWF  FE9
0B26:  MOVF   FEF,W
0B28:  BZ    0B46
0B2A:  MOVLW  0F
0B2C:  MOVWF  01
0B2E:  CLRF   00
0B30:  DECFSZ 00,F
0B32:  BRA    0B30
0B34:  DECFSZ 01,F
0B36:  BRA    0B2E
0B38:  MOVLW  8F
0B3A:  MOVWF  00
0B3C:  DECFSZ 00,F
0B3E:  BRA    0B3C
0B40:  NOP   
0B42:  DECFSZ FEF,F
0B44:  BRA    0B2A
0B46:  RETLW  00
.................... #define FAST 1 
.................... #endif 
....................  
.................... #define use_portd_lcd TRUE 
.................... #include <LCD420PIC18F.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //           LIBRERIA PARA CONTROL DE LCD 4X20 con PIC 18F4550                // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //      Se debe llamar a este archivo mediante #include <LCD420PIC18_RyP.c>   // 
.................... //                                                                            // 
.................... //      Es necesariodefinir el puerto a utilizar para el teclado mediante:    // 
.................... //      #define use_portb_lcd TRUE   //para el puerto B                       // 
.................... //      #define use_portd_lcd TRUE   //para el puerto D                       // 
.................... //                                                                            // 
.................... //      FUNCIONES:                                                            // 
.................... //      void lcd_init(void);         //Inicializa el lcd.                     // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //                            RobotyPic 2013                                  // 
.................... //                    http://robotypic.blogspot.com/                          // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... //Elección del puerto y pines 
....................  
.................... #ifdef use_portd_lcd 
....................  
.................... #define LCD_DB4  PIN_D4 
.................... #define LCD_DB5  PIN_D5 
.................... #define LCD_DB6  PIN_D6 
.................... #define LCD_DB7  PIN_D7 
.................... #define LCD_E    PIN_D2 
.................... #define LCD_RS   PIN_D0 
.................... #define LCD_RW   PIN_D1 
....................  
.................... #else 
....................  
.................... #define LCD_DB4  PIN_B4 
.................... #define LCD_DB5  PIN_B5 
.................... #define LCD_DB6  PIN_B6 
.................... #define LCD_DB7  PIN_B7 
.................... #define LCD_E    PIN_B2 
.................... #define LCD_RS   PIN_B0 
.................... #define LCD_RW   PIN_B1 
....................  
.................... #endif 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW  1     
....................  
.................... // If you use the PLL of Microcontroller to increase the 
.................... // clock to 48MHz use this define, else comment out the 
.................... // following line. 
....................  
.................... #define lcd_type 2 
.................... #define lcd_line_two 0x40 
....................  
.................... BYTE lcdline; 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                      // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0B48:  BTFSC  xF2.0
0B4A:  BRA    0B50
0B4C:  BCF    F8C.4
0B4E:  BRA    0B52
0B50:  BSF    F8C.4
0B52:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0B54:  BTFSC  xF2.1
0B56:  BRA    0B5C
0B58:  BCF    F8C.5
0B5A:  BRA    0B5E
0B5C:  BSF    F8C.5
0B5E:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4));   
0B60:  BTFSC  xF2.2
0B62:  BRA    0B68
0B64:  BCF    F8C.6
0B66:  BRA    0B6A
0B68:  BSF    F8C.6
0B6A:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8));   
0B6C:  BTFSC  xF2.3
0B6E:  BRA    0B74
0B70:  BCF    F8C.7
0B72:  BRA    0B76
0B74:  BSF    F8C.7
0B76:  BCF    F95.7
....................  
....................  #ifdef FAST 
....................  delay_cycles(25); 
0B78:  MOVLW  08
0B7A:  MOVWF  00
0B7C:  DECFSZ 00,F
0B7E:  BRA    0B7C
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  output_high(LCD_E); 
0B80:  BCF    F95.2
0B82:  BSF    F8C.2
....................  #ifdef FAST 
....................  delay_us(50); 
0B84:  MOVLW  C7
0B86:  MOVWF  00
0B88:  DECFSZ 00,F
0B8A:  BRA    0B88
0B8C:  BRA    0B8E
....................  #else 
....................  delay_us(2); 
....................  #endif 
....................  output_low(LCD_E); 
0B8E:  BCF    F95.2
0B90:  BCF    F8C.2
.................... } 
0B92:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................    
.................... output_high(LCD_E); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................   
.................... output_low(LCD_E); 
....................    
.................... return(retval);   
.................... }   
.................... #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0B94:  BCF    F95.0
0B96:  BCF    F8C.0
....................  
.................... //#ifdef USE_LCD_RW 
.................... //while(bit_test(lcd_read_byte(),7)) ; 
.................... //#else 
.................... #ifdef FAST 
.................... delay_ms(2);  
0B98:  MOVLW  02
0B9A:  MOVWF  xF1
0B9C:  RCALL  0B20
.................... #else 
.................... delay_us(60); 
.................... #endif 
.................... //#endif 
....................  
.................... if(address) 
0B9E:  MOVF   xEF,F
0BA0:  BZ    0BA8
....................   output_high(LCD_RS); 
0BA2:  BCF    F95.0
0BA4:  BSF    F8C.0
.................... else 
0BA6:  BRA    0BAC
....................   output_low(LCD_RS); 
0BA8:  BCF    F95.0
0BAA:  BCF    F8C.0
....................   
....................  #ifdef FAST 
....................  delay_cycles(25); 
0BAC:  MOVLW  08
0BAE:  MOVWF  00
0BB0:  DECFSZ 00,F
0BB2:  BRA    0BB0
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0BB4:  BCF    F95.1
0BB6:  BCF    F8C.1
.................... #ifdef FAST 
....................  delay_cycles(25); 
0BB8:  MOVLW  08
0BBA:  MOVWF  00
0BBC:  DECFSZ 00,F
0BBE:  BRA    0BBC
....................  #else 
....................  delay_cycles(1); 
....................  #endif 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0BC0:  BCF    F95.2
0BC2:  BCF    F8C.2
....................  
.................... lcd_send_nibble(n >> 4); 
0BC4:  SWAPF  xF0,W
0BC6:  MOVWF  xF1
0BC8:  MOVLW  0F
0BCA:  ANDWF  xF1,F
0BCC:  MOVFF  F1,F2
0BD0:  RCALL  0B48
.................... lcd_send_nibble(n & 0xf); 
0BD2:  MOVF   xF0,W
0BD4:  ANDLW  0F
0BD6:  MOVWF  xF1
0BD8:  MOVWF  xF2
0BDA:  RCALL  0B48
.................... } 
0BDC:  RETLW  00
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0BDE:  BCF    F95.0
0BE0:  BCF    F8C.0
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0BE2:  BCF    F95.1
0BE4:  BCF    F8C.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
0BE6:  BCF    F95.2
0BE8:  BCF    F8C.2
....................  
.................... delay_ms(15); 
0BEA:  MOVLW  0F
0BEC:  MOVWF  xF1
0BEE:  RCALL  0B20
....................  
.................... for(i=0 ;i < 3; i++) 
0BF0:  CLRF   xD6
0BF2:  MOVF   xD6,W
0BF4:  SUBLW  02
0BF6:  BNC   0C08
....................   { 
....................     lcd_send_nibble(0x03); 
0BF8:  MOVLW  03
0BFA:  MOVWF  xF2
0BFC:  RCALL  0B48
....................     delay_ms(5); 
0BFE:  MOVLW  05
0C00:  MOVWF  xF1
0C02:  RCALL  0B20
....................   } 
0C04:  INCF   xD6,F
0C06:  BRA    0BF2
....................  
.................... lcd_send_nibble(0x02); 
0C08:  MOVLW  02
0C0A:  MOVWF  xF2
0C0C:  RCALL  0B48
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0C0E:  CLRF   xD6
0C10:  MOVF   xD6,W
0C12:  SUBLW  03
0C14:  BNC   0C34
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0C16:  CLRF   03
0C18:  MOVF   xD6,W
0C1A:  MOVFF  FF2,D7
0C1E:  BCF    FF2.7
0C20:  CALL   0096
0C24:  BTFSC  xD7.7
0C26:  BSF    FF2.7
0C28:  MOVWF  xD7
0C2A:  CLRF   xEF
0C2C:  MOVWF  xF0
0C2E:  RCALL  0B94
....................    
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
....................     #endif 
....................   } 
0C30:  INCF   xD6,F
0C32:  BRA    0C10
....................  
.................... } 
0C34:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) 
.................... { 
....................   BYTE address; 
....................   
....................  
....................   switch(y) 
....................   { 
0C36:  MOVLW  01
0C38:  SUBWF  xED,W
0C3A:  ADDLW  FC
0C3C:  BC    0C6C
0C3E:  ADDLW  04
0C40:  GOTO   0C7C
....................     case 1 : address=0x80; 
0C44:  MOVLW  80
0C46:  MOVWF  xEE
....................     lcdline=1; 
0C48:  MOVLW  01
0C4A:  MOVWF  16
....................     break; 
0C4C:  BRA    0C6C
....................     case 2 : address=0xc0; 
0C4E:  MOVLW  C0
0C50:  MOVWF  xEE
....................     lcdline=2; 
0C52:  MOVLW  02
0C54:  MOVWF  16
....................     break; 
0C56:  BRA    0C6C
....................     case 3 : address=0x94; 
0C58:  MOVLW  94
0C5A:  MOVWF  xEE
....................     lcdline=3; 
0C5C:  MOVLW  03
0C5E:  MOVWF  16
....................     break; 
0C60:  BRA    0C6C
....................     case 4 : address=0xd4; 
0C62:  MOVLW  D4
0C64:  MOVWF  xEE
....................     lcdline=4; 
0C66:  MOVLW  04
0C68:  MOVWF  16
....................     break; 
0C6A:  BRA    0C6C
....................   } 
....................  
....................   address+=x-1; 
0C6C:  MOVLW  01
0C6E:  SUBWF  xEC,W
0C70:  ADDWF  xEE,F
....................   lcd_send_byte(0,address); 
0C72:  CLRF   xEF
0C74:  MOVFF  EE,F0
0C78:  RCALL  0B94
.................... } 
0C7A:  RETLW  00
....................  
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    if(c=='ñ') 
*
0CA8:  MOVF   xEB,W
0CAA:  SUBLW  F1
0CAC:  BNZ   0CB2
....................     c=238; 
0CAE:  MOVLW  EE
0CB0:  MOVWF  xEB
....................  switch(c) 
....................   { 
0CB2:  MOVF   xEB,W
0CB4:  XORLW  0C
0CB6:  BZ    0CC2
0CB8:  XORLW  06
0CBA:  BZ    0CD6
0CBC:  XORLW  02
0CBE:  BZ    0CF2
0CC0:  BRA    0CFC
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0CC2:  CLRF   xEF
0CC4:  MOVLW  01
0CC6:  MOVWF  xF0
0CC8:  RCALL  0B94
....................       lcdline=1; 
0CCA:  MOVLW  01
0CCC:  MOVWF  16
....................       delay_ms(2); 
0CCE:  MOVLW  02
0CD0:  MOVWF  xF1
0CD2:  RCALL  0B20
....................       break; 
0CD4:  BRA    0D08
....................    
....................     case '\n': 
....................       lcd_gotoxy(1,++lcdline); 
0CD6:  INCF   16,F
0CD8:  MOVLW  01
0CDA:  MOVWF  xEC
0CDC:  MOVFF  16,ED
0CE0:  RCALL  0C36
....................       if (lcdline>4) lcd_gotoxy(1,1); 
0CE2:  MOVF   16,W
0CE4:  SUBLW  04
0CE6:  BC    0CF0
0CE8:  MOVLW  01
0CEA:  MOVWF  xEC
0CEC:  MOVWF  xED
0CEE:  RCALL  0C36
....................       break; 
0CF0:  BRA    0D08
....................    
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
0CF2:  CLRF   xEF
0CF4:  MOVLW  10
0CF6:  MOVWF  xF0
0CF8:  RCALL  0B94
....................       break; 
0CFA:  BRA    0D08
....................    
....................     default: 
....................       lcd_send_byte(1,c); 
0CFC:  MOVLW  01
0CFE:  MOVWF  xEF
0D00:  MOVFF  EB,F0
0D04:  RCALL  0B94
....................       break; 
0D06:  BRA    0D08
....................   } 
.................... } 
0D08:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... //while(bit_test(lcd_read_byte(),7));  
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... //#include <LCD420.c> 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... //#define DAMPER 1 
.................... #define VARIADOR 1 
....................  
.................... // Definición de teclado - NO 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   UP            input(PIN_A5) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Alarma_on         output_bit(PIN_B6,1) 
.................... #define   Alarma_off        output_bit(PIN_B6,0) 
.................... #define   Damper_on         output_bit(PIN_B7,1) 
.................... #define   Damper_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 v=0; 
.................... float vel=0.0; 
.................... int8 Menu=100,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=6,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0,Opcion=1; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 FeedbackDamper=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... short imprimio=0,Ruido=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero_fabrica=203.0; 
.................... short ModoSleep,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,Dif16=0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
.................... char letra;  
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... int8 n_opcionH=6; 
....................  
.................... #include <Funciones.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... void ajuste_vel(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
3CE6:  MOVFF  D6,FBE
.................... } 
3CEA:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
345E:  RLCF   xDA,W
3460:  MOVWF  00
3462:  RLCF   00,F
3464:  MOVLW  FC
3466:  ANDWF  00,F
3468:  MOVFF  00,01
346C:  MOVF   FC2,W
346E:  ANDLW  C3
3470:  IORWF  00,W
3472:  MOVWF  FC2
3474:  MOVLW  0A
3476:  MOVWF  xF1
3478:  CALL   0B20
347C:  BSF    FC2.1
347E:  BTFSC  FC2.1
3480:  BRA    347E
3482:  MOVFF  FC4,03
3486:  MOVFF  FC3,DF
348A:  MOVFF  FC4,E0
348E:  CALL   0D54
3492:  MOVFF  03,DE
3496:  MOVFF  02,DD
349A:  MOVFF  01,DC
349E:  MOVFF  00,DB
34A2:  MOVFF  DB,00
34A6:  MOVFF  DC,01
34AA:  MOVFF  DD,02
34AE:  MOVFF  DE,03
.................... } 
34B2:  RETLW  00
....................  
.................... void intensidadpantalla(int x){ 
....................    if(x==0)    
*
0B10:  MOVF   xD6,F
0B12:  BNZ   0B1A
....................       Pantalla_off; 
0B14:  BCF    F8B.1
0B16:  BCF    F94.1
....................    else 
0B18:  BRA    0B1E
....................       Pantalla_on; 
0B1A:  BSF    F8B.1
0B1C:  BCF    F94.1
.................... } 
0B1E:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media){ 
....................     //Voltaje0=sensores(0)*5/1023; 
....................     //Voltaje1=sensores(1)*5/1023; 
....................     //Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     //TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     //TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................      
....................     if(negativo==10) 
*
4240:  MOVF   30,W
4242:  SUBLW  0A
4244:  BNZ   42A4
....................       x_uno=sensores(0)+Diferencia; 
4246:  CLRF   xDA
4248:  CALL   345E
424C:  MOVFF  00,D7
4250:  MOVFF  01,D8
4254:  MOVFF  02,D9
4258:  MOVFF  03,DA
425C:  MOVFF  FEA,DC
4260:  MOVFF  FE9,DB
4264:  BCF    FD8.1
4266:  MOVFF  03,E0
426A:  MOVFF  02,DF
426E:  MOVFF  01,DE
4272:  MOVFF  00,DD
4276:  MOVFF  9C,E4
427A:  MOVFF  9B,E3
427E:  MOVFF  9A,E2
4282:  MOVFF  99,E1
4286:  CALL   0EE4
428A:  MOVFF  DC,FEA
428E:  MOVFF  DB,FE9
4292:  MOVFF  03,80
4296:  MOVFF  02,7F
429A:  MOVFF  01,7E
429E:  MOVFF  00,7D
....................     else if(negativo==20) 
42A2:  BRA    4306
42A4:  MOVF   30,W
42A6:  SUBLW  14
42A8:  BNZ   4306
....................       x_uno=sensores(0)-Diferencia; 
42AA:  CLRF   xDA
42AC:  CALL   345E
42B0:  MOVFF  00,D7
42B4:  MOVFF  01,D8
42B8:  MOVFF  02,D9
42BC:  MOVFF  03,DA
42C0:  MOVFF  FEA,DC
42C4:  MOVFF  FE9,DB
42C8:  BSF    FD8.1
42CA:  MOVFF  03,E0
42CE:  MOVFF  02,DF
42D2:  MOVFF  01,DE
42D6:  MOVFF  00,DD
42DA:  MOVFF  9C,E4
42DE:  MOVFF  9B,E3
42E2:  MOVFF  9A,E2
42E6:  MOVFF  99,E1
42EA:  CALL   0EE4
42EE:  MOVFF  DC,FEA
42F2:  MOVFF  DB,FE9
42F6:  MOVFF  03,80
42FA:  MOVFF  02,7F
42FE:  MOVFF  01,7E
4302:  MOVFF  00,7D
....................      
....................     x_cuadrado=x_uno*x_uno; 
4306:  MOVFF  80,EE
430A:  MOVFF  7F,ED
430E:  MOVFF  7E,EC
4312:  MOVFF  7D,EB
4316:  MOVFF  80,F2
431A:  MOVFF  7F,F1
431E:  MOVFF  7E,F0
4322:  MOVFF  7D,EF
4326:  CALL   312C
432A:  MOVFF  03,84
432E:  MOVFF  02,83
4332:  MOVFF  01,82
4336:  MOVFF  00,81
....................     x_cubo=x_uno*x_cuadrado; 
433A:  MOVFF  80,EE
433E:  MOVFF  7F,ED
4342:  MOVFF  7E,EC
4346:  MOVFF  7D,EB
434A:  MOVFF  84,F2
434E:  MOVFF  83,F1
4352:  MOVFF  82,F0
4356:  MOVFF  81,EF
435A:  CALL   312C
435E:  MOVFF  03,88
4362:  MOVFF  02,87
4366:  MOVFF  01,86
436A:  MOVFF  00,85
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
436E:  MOVFF  88,EE
4372:  MOVFF  87,ED
4376:  MOVFF  86,EC
437A:  MOVFF  85,EB
437E:  MOVFF  64,F2
4382:  MOVFF  63,F1
4386:  MOVFF  62,F0
438A:  MOVFF  61,EF
438E:  CALL   312C
4392:  MOVFF  00,D7
4396:  MOVFF  01,D8
439A:  MOVFF  02,D9
439E:  MOVFF  03,DA
43A2:  MOVFF  84,EE
43A6:  MOVFF  83,ED
43AA:  MOVFF  82,EC
43AE:  MOVFF  81,EB
43B2:  MOVFF  68,F2
43B6:  MOVFF  67,F1
43BA:  MOVFF  66,F0
43BE:  MOVFF  65,EF
43C2:  CALL   312C
43C6:  BCF    FD8.1
43C8:  MOVFF  DA,E0
43CC:  MOVFF  D9,DF
43D0:  MOVFF  D8,DE
43D4:  MOVFF  D7,DD
43D8:  MOVFF  03,E4
43DC:  MOVFF  02,E3
43E0:  MOVFF  01,E2
43E4:  MOVFF  00,E1
43E8:  CALL   0EE4
43EC:  MOVFF  00,D7
43F0:  MOVFF  01,D8
43F4:  MOVFF  02,D9
43F8:  MOVFF  03,DA
43FC:  MOVFF  80,EE
4400:  MOVFF  7F,ED
4404:  MOVFF  7E,EC
4408:  MOVFF  7D,EB
440C:  MOVFF  6C,F2
4410:  MOVFF  6B,F1
4414:  MOVFF  6A,F0
4418:  MOVFF  69,EF
441C:  CALL   312C
4420:  BCF    FD8.1
4422:  MOVFF  DA,E0
4426:  MOVFF  D9,DF
442A:  MOVFF  D8,DE
442E:  MOVFF  D7,DD
4432:  MOVFF  03,E4
4436:  MOVFF  02,E3
443A:  MOVFF  01,E2
443E:  MOVFF  00,E1
4442:  CALL   0EE4
4446:  MOVFF  00,D7
444A:  MOVFF  01,D8
444E:  MOVFF  02,D9
4452:  MOVFF  03,DA
4456:  BCF    FD8.1
4458:  MOVFF  03,E0
445C:  MOVFF  02,DF
4460:  MOVFF  01,DE
4464:  MOVFF  00,DD
4468:  MOVFF  70,E4
446C:  MOVFF  6F,E3
4470:  MOVFF  6E,E2
4474:  MOVFF  6D,E1
4478:  CALL   0EE4
447C:  MOVFF  03,94
4480:  MOVFF  02,93
4484:  MOVFF  01,92
4488:  MOVFF  00,91
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
448C:  BSF    FD8.1
448E:  MOVFF  94,E0
4492:  MOVFF  93,DF
4496:  MOVFF  92,DE
449A:  MOVFF  91,DD
449E:  MOVLW  0A
44A0:  MOVWF  xE4
44A2:  MOVLW  D7
44A4:  MOVWF  xE3
44A6:  MOVLW  23
44A8:  MOVWF  xE2
44AA:  MOVLW  7B
44AC:  MOVWF  xE1
44AE:  CALL   0EE4
44B2:  MOVFF  03,94
44B6:  MOVFF  02,93
44BA:  MOVFF  01,92
44BE:  MOVFF  00,91
....................      
....................     if(Velocidad<0.0) 
44C2:  MOVFF  94,DD
44C6:  MOVFF  93,DC
44CA:  MOVFF  92,DB
44CE:  MOVFF  91,DA
44D2:  CLRF   xE1
44D4:  CLRF   xE0
44D6:  CLRF   xDF
44D8:  CLRF   xDE
44DA:  CALL   15A2
44DE:  BNC   44E8
....................       Velocidad=0.0; 
44E0:  CLRF   x94
44E2:  CLRF   x93
44E4:  CLRF   x92
44E6:  CLRF   x91
....................       
....................      if(l>=media) 
44E8:  MOVF   xD6,W
44EA:  SUBWF  2C,W
44EC:  BNC   44F0
....................        l=0; 
44EE:  CLRF   2C
....................       
....................      promedio[l]=Velocidad;l++; 
44F0:  MOVF   2C,W
44F2:  MULLW  04
44F4:  MOVF   FF3,W
44F6:  CLRF   03
44F8:  ADDLW  A5
44FA:  MOVWF  FE9
44FC:  MOVLW  00
44FE:  ADDWFC 03,W
4500:  MOVWF  FEA
4502:  MOVFF  91,FEF
4506:  MOVFF  92,FEC
450A:  MOVFF  93,FEC
450E:  MOVFF  94,FEC
4512:  INCF   2C,F
....................      Flujo2=0; 
4514:  CLRF   x78
4516:  CLRF   x77
4518:  CLRF   x76
451A:  CLRF   x75
....................       
....................      for(h=0;h<=(media-1);h++){ 
451C:  CLRF   2D
451E:  MOVLW  01
4520:  SUBWF  xD6,W
4522:  SUBWF  2D,W
4524:  BZ    4528
4526:  BC    4594
....................         Flujo2+=promedio[h]; 
4528:  MOVF   2D,W
452A:  MULLW  04
452C:  MOVF   FF3,W
452E:  CLRF   03
4530:  ADDLW  A5
4532:  MOVWF  FE9
4534:  MOVLW  00
4536:  ADDWFC 03,W
4538:  MOVWF  FEA
453A:  MOVFF  FEF,00
453E:  MOVFF  FEC,01
4542:  MOVFF  FEC,02
4546:  MOVFF  FEC,03
454A:  MOVFF  FEA,D8
454E:  MOVFF  FE9,D7
4552:  BCF    FD8.1
4554:  MOVFF  78,E0
4558:  MOVFF  77,DF
455C:  MOVFF  76,DE
4560:  MOVFF  75,DD
4564:  MOVFF  03,E4
4568:  MOVFF  02,E3
456C:  MOVFF  01,E2
4570:  MOVFF  00,E1
4574:  CALL   0EE4
4578:  MOVFF  D8,FEA
457C:  MOVFF  D7,FE9
4580:  MOVFF  03,78
4584:  MOVFF  02,77
4588:  MOVFF  01,76
458C:  MOVFF  00,75
....................      }  
4590:  INCF   2D,F
4592:  BRA    451E
....................    
....................      Flujo2=(Flujo2/media)*Ajuste1; 
4594:  CLRF   xE0
4596:  MOVFF  D6,DF
459A:  CALL   0D54
459E:  MOVFF  78,DD
45A2:  MOVFF  77,DC
45A6:  MOVFF  76,DB
45AA:  MOVFF  75,DA
45AE:  MOVFF  03,E1
45B2:  MOVFF  02,E0
45B6:  MOVFF  01,DF
45BA:  MOVFF  00,DE
45BE:  CALL   0D8A
45C2:  MOVFF  00,D7
45C6:  MOVFF  01,D8
45CA:  MOVFF  02,D9
45CE:  MOVFF  03,DA
45D2:  MOVFF  03,EE
45D6:  MOVFF  02,ED
45DA:  MOVFF  01,EC
45DE:  MOVFF  00,EB
45E2:  MOVFF  A0,F2
45E6:  MOVFF  9F,F1
45EA:  MOVFF  9E,F0
45EE:  MOVFF  9D,EF
45F2:  CALL   312C
45F6:  MOVFF  03,78
45FA:  MOVFF  02,77
45FE:  MOVFF  01,76
4602:  MOVFF  00,75
....................      return Flujo2; 
4606:  MOVFF  75,00
460A:  MOVFF  76,01
460E:  MOVFF  77,02
4612:  MOVFF  78,03
.................... } 
4616:  RETLW  00
....................  
.................... void controlar_flujo(void){ 
....................    if(Automa==20 && estadomv==1){ 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
....................       if(error<0.2&&error>-0.2){ 
....................       }else{ 
....................          if(error>0.0) 
....................             tmp+=1; 
....................                 
....................          if(error<-0.0) 
....................             tmp-=1;   
....................       } 
....................        
....................       if(tmp>251) 
....................          tmp=251; 
....................       if(tmp<4)          
....................          tmp=4;       
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Manual==20){ 
....................       tmp=251; 
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Semi==20){ 
....................       set_pwm1_duty (ValorSemi); 
....................    } 
.................... } 
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................      
....................    if(x==1) 
*
20B2:  DECFSZ xD7,W
20B4:  BRA    20EA
....................    {if(estadoalarma==0) 
20B6:  BTFSC  41.2
20B8:  BRA    20D0
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
20BA:  MOVLW  02
20BC:  MOVWF  xEC
20BE:  MOVFF  D8,ED
20C2:  CALL   0C36
20C6:  MOVLW  B4
20C8:  MOVWF  FF6
20CA:  MOVLW  00
20CC:  MOVWF  FF7
20CE:  RCALL  1BE2
....................    if(estadoalarma==1) 
20D0:  BTFSS  41.2
20D2:  BRA    20EA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
20D4:  MOVLW  02
20D6:  MOVWF  xEC
20D8:  MOVFF  D8,ED
20DC:  CALL   0C36
20E0:  MOVLW  C8
20E2:  MOVWF  FF6
20E4:  MOVLW  00
20E6:  MOVWF  FF7
20E8:  RCALL  1BE2
....................    } 
....................     
....................    if(x==2) 
20EA:  MOVF   xD7,W
20EC:  SUBLW  02
20EE:  BNZ   2106
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
20F0:  MOVLW  02
20F2:  MOVWF  xEC
20F4:  MOVFF  D8,ED
20F8:  CALL   0C36
20FC:  MOVLW  DC
20FE:  MOVWF  FF6
2100:  MOVLW  00
2102:  MOVWF  FF7
2104:  RCALL  1BE2
....................     
....................    //if(x==3) 
....................    //{lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
....................     
....................    //if(x==4) 
....................    //{lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
....................     
....................    if(x==3) 
2106:  MOVF   xD7,W
2108:  SUBLW  03
210A:  BNZ   2122
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
210C:  MOVLW  02
210E:  MOVWF  xEC
2110:  MOVFF  D8,ED
2114:  CALL   0C36
2118:  MOVLW  F0
211A:  MOVWF  FF6
211C:  MOVLW  00
211E:  MOVWF  FF7
2120:  RCALL  1BE2
....................     
....................    if(x==4) 
2122:  MOVF   xD7,W
2124:  SUBLW  04
2126:  BNZ   213E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
2128:  MOVLW  02
212A:  MOVWF  xEC
212C:  MOVFF  D8,ED
2130:  CALL   0C36
2134:  MOVLW  04
2136:  MOVWF  FF6
2138:  MOVLW  01
213A:  MOVWF  FF7
213C:  RCALL  1BE2
....................     
....................    if(x==5) 
213E:  MOVF   xD7,W
2140:  SUBLW  05
2142:  BNZ   215A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Servicio           ");} 
2144:  MOVLW  02
2146:  MOVWF  xEC
2148:  MOVFF  D8,ED
214C:  CALL   0C36
2150:  MOVLW  18
2152:  MOVWF  FF6
2154:  MOVLW  01
2156:  MOVWF  FF7
2158:  RCALL  1BE2
.................... } 
215A:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
.................... } 
....................  
.................... void SalidasOff(void){ 
....................    set_pwm1_duty(0); 
*
0AFC:  CLRF   FBE
....................    Luz_Blanca_off; 
0AFE:  BCF    F8A.4
0B00:  BCF    F93.4
....................    Motor_off; 
0B02:  BCF    F8A.5
0B04:  BCF    F93.5
....................    Damper_off; 
0B06:  BCF    F8A.7
0B08:  BCF    F93.7
....................    Alarma_off; 
0B0A:  BCF    F8A.6
0B0C:  BCF    F93.6
.................... } 
0B0E:  RETLW  00
....................  
.................... void ConfigInicial(void){ 
....................    setup_adc_ports(AN0_TO_AN3); 
*
0D0A:  MOVF   FC1,W
0D0C:  ANDLW  C0
0D0E:  IORLW  0B
0D10:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0D12:  BCF    FC0.0
0D14:  BSF    FC0.1
0D16:  BCF    FC0.2
0D18:  BSF    FC0.7
0D1A:  BSF    FC2.0
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0D1C:  MOVLW  85
0D1E:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0D20:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
0D22:  MOVLW  00
0D24:  IORLW  05
0D26:  MOVWF  FCA
0D28:  MOVLW  FF
0D2A:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
0D2C:  BCF    F94.2
0D2E:  BCF    F8B.2
0D30:  BCF    F96.6
0D32:  MOVLW  0C
0D34:  MOVWF  FBD
0D36:  CLRF   FB7
0D38:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
0D3A:  MOVLW  C0
0D3C:  IORWF  FF2,F
....................    output_d(0); 
0D3E:  CLRF   F95
0D40:  CLRF   F8C
....................    SalidasOff(); 
0D42:  RCALL  0AFC
....................    intensidadpantalla(0); 
0D44:  CLRF   xD6
0D46:  RCALL  0B10
....................    lcd_init(); 
0D48:  RCALL  0BDE
....................    printf(lcd_putc,"\f"); 
0D4A:  MOVLW  0C
0D4C:  MOVWF  xEB
0D4E:  RCALL  0CA8
.................... } 
0D50:  GOTO   48EC (RETURN)
....................  
.................... void LeeEEPROM(void){ 
.................... // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20);  
*
114E:  MOVFF  FF2,D6
1152:  BCF    FF2.7
1154:  CLRF   FA9
1156:  BCF    FA6.6
1158:  BCF    FA6.7
115A:  BSF    FA6.0
115C:  MOVF   FA8,W
115E:  BTFSC  xD6.7
1160:  BSF    FF2.7
1162:  MOVWF  4B
1164:  MOVLW  14
1166:  MOVWF  xF1
1168:  RCALL  0B20
....................    contrasena[1]=read_eeprom(1);delay_ms(20); 
116A:  MOVFF  FF2,D6
116E:  BCF    FF2.7
1170:  MOVLW  01
1172:  MOVWF  FA9
1174:  BCF    FA6.6
1176:  BCF    FA6.7
1178:  BSF    FA6.0
117A:  MOVF   FA8,W
117C:  BTFSC  xD6.7
117E:  BSF    FF2.7
1180:  MOVWF  4C
1182:  MOVLW  14
1184:  MOVWF  xF1
1186:  RCALL  0B20
....................    contrasena[2]=read_eeprom(2);delay_ms(20);  
1188:  MOVFF  FF2,D6
118C:  BCF    FF2.7
118E:  MOVLW  02
1190:  MOVWF  FA9
1192:  BCF    FA6.6
1194:  BCF    FA6.7
1196:  BSF    FA6.0
1198:  MOVF   FA8,W
119A:  BTFSC  xD6.7
119C:  BSF    FF2.7
119E:  MOVWF  4D
11A0:  MOVLW  14
11A2:  MOVWF  xF1
11A4:  RCALL  0B20
....................    contrasena[3]=read_eeprom(3);delay_ms(20); 
11A6:  MOVFF  FF2,D6
11AA:  BCF    FF2.7
11AC:  MOVLW  03
11AE:  MOVWF  FA9
11B0:  BCF    FA6.6
11B2:  BCF    FA6.7
11B4:  BSF    FA6.0
11B6:  MOVF   FA8,W
11B8:  BTFSC  xD6.7
11BA:  BSF    FF2.7
11BC:  MOVWF  4E
11BE:  MOVLW  14
11C0:  MOVWF  xF1
11C2:  RCALL  0B20
....................    estadoalarma=read_eeprom(5);delay_ms(20); 
11C4:  MOVFF  FF2,D6
11C8:  BCF    FF2.7
11CA:  MOVLW  05
11CC:  MOVWF  FA9
11CE:  BCF    FA6.6
11D0:  BCF    FA6.7
11D2:  BSF    FA6.0
11D4:  MOVF   FA8,W
11D6:  BTFSC  xD6.7
11D8:  BSF    FF2.7
11DA:  MOVWF  01
11DC:  BCF    41.2
11DE:  BTFSC  01.0
11E0:  BSF    41.2
11E2:  MOVLW  14
11E4:  MOVWF  xF1
11E6:  RCALL  0B20
....................    Manual=read_eeprom(10);delay_ms(20); 
11E8:  MOVFF  FF2,D6
11EC:  BCF    FF2.7
11EE:  MOVLW  0A
11F0:  MOVWF  FA9
11F2:  BCF    FA6.6
11F4:  BCF    FA6.7
11F6:  BSF    FA6.0
11F8:  MOVF   FA8,W
11FA:  BTFSC  xD6.7
11FC:  BSF    FF2.7
11FE:  MOVWF  32
1200:  MOVLW  14
1202:  MOVWF  xF1
1204:  RCALL  0B20
....................    Automa=read_eeprom(11);delay_ms(20); 
1206:  MOVFF  FF2,D6
120A:  BCF    FF2.7
120C:  MOVLW  0B
120E:  MOVWF  FA9
1210:  BCF    FA6.6
1212:  BCF    FA6.7
1214:  BSF    FA6.0
1216:  MOVF   FA8,W
1218:  BTFSC  xD6.7
121A:  BSF    FF2.7
121C:  MOVWF  31
121E:  MOVLW  14
1220:  MOVWF  xF1
1222:  RCALL  0B20
....................    Semi=read_eeprom(12);delay_ms(20); 
1224:  MOVFF  FF2,D6
1228:  BCF    FF2.7
122A:  MOVLW  0C
122C:  MOVWF  FA9
122E:  BCF    FA6.6
1230:  BCF    FA6.7
1232:  BSF    FA6.0
1234:  MOVF   FA8,W
1236:  BTFSC  xD6.7
1238:  BSF    FF2.7
123A:  MOVWF  33
123C:  MOVLW  14
123E:  MOVWF  xF1
1240:  RCALL  0B20
....................    ValorSemi=read_eeprom(13);delay_ms(20); 
1242:  MOVFF  FF2,D6
1246:  BCF    FF2.7
1248:  MOVLW  0D
124A:  MOVWF  FA9
124C:  BCF    FA6.6
124E:  BCF    FA6.7
1250:  BSF    FA6.0
1252:  MOVF   FA8,W
1254:  BTFSC  xD6.7
1256:  BSF    FF2.7
1258:  MOVWF  34
125A:  MOVLW  14
125C:  MOVWF  xF1
125E:  RCALL  0B20
....................    tmp=ValorSemi; 
1260:  MOVFF  34,2E
....................  
....................    purga_minutos=read_eeprom(20);delay_ms(20); 
1264:  MOVFF  FF2,D6
1268:  BCF    FF2.7
126A:  MOVLW  14
126C:  MOVWF  FA9
126E:  BCF    FA6.6
1270:  BCF    FA6.7
1272:  BSF    FA6.0
1274:  MOVF   FA8,W
1276:  BTFSC  xD6.7
1278:  BSF    FF2.7
127A:  MOVWF  26
127C:  MOVLW  14
127E:  MOVWF  xF1
1280:  RCALL  0B20
....................    purga_segundos=read_eeprom(21);delay_ms(20); 
1282:  MOVFF  FF2,D6
1286:  BCF    FF2.7
1288:  MOVLW  15
128A:  MOVWF  FA9
128C:  BCF    FA6.6
128E:  BCF    FA6.7
1290:  BSF    FA6.0
1292:  MOVF   FA8,W
1294:  BTFSC  xD6.7
1296:  BSF    FF2.7
1298:  MOVWF  3A
129A:  MOVLW  14
129C:  MOVWF  xF1
129E:  RCALL  0B20
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
12A0:  MOVFF  26,27
12A4:  MOVFF  3A,3B
....................    ppurga_minutos=read_eeprom(22);delay_ms(20); 
12A8:  MOVFF  FF2,D6
12AC:  BCF    FF2.7
12AE:  MOVLW  16
12B0:  MOVWF  FA9
12B2:  BCF    FA6.6
12B4:  BCF    FA6.7
12B6:  BSF    FA6.0
12B8:  MOVF   FA8,W
12BA:  BTFSC  xD6.7
12BC:  BSF    FF2.7
12BE:  MOVWF  3E
12C0:  MOVLW  14
12C2:  MOVWF  xF1
12C4:  RCALL  0B20
....................    ppurga_segundos=read_eeprom(23);delay_ms(20); 
12C6:  MOVFF  FF2,D6
12CA:  BCF    FF2.7
12CC:  MOVLW  17
12CE:  MOVWF  FA9
12D0:  BCF    FA6.6
12D2:  BCF    FA6.7
12D4:  BSF    FA6.0
12D6:  MOVF   FA8,W
12D8:  BTFSC  xD6.7
12DA:  BSF    FF2.7
12DC:  MOVWF  3C
12DE:  MOVLW  14
12E0:  MOVWF  xF1
12E2:  RCALL  0B20
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
12E4:  MOVFF  3E,3F
12E8:  MOVFF  3C,3D
....................        
....................    Entero=read_eeprom(25);delay_ms(20);//Decimal1=read_eeprom(26); 
12EC:  MOVFF  FF2,D6
12F0:  BCF    FF2.7
12F2:  MOVLW  19
12F4:  MOVWF  FA9
12F6:  BCF    FA6.6
12F8:  BCF    FA6.7
12FA:  BSF    FA6.0
12FC:  MOVF   FA8,W
12FE:  BTFSC  xD6.7
1300:  BSF    FF2.7
1302:  MOVWF  28
1304:  MOVLW  14
1306:  MOVWF  xF1
1308:  RCALL  0B20
....................    Temporal=read_eeprom(26);delay_ms(20); 
130A:  MOVFF  FF2,D6
130E:  BCF    FF2.7
1310:  MOVLW  1A
1312:  MOVWF  FA9
1314:  BCF    FA6.6
1316:  BCF    FA6.7
1318:  BSF    FA6.0
131A:  MOVF   FA8,W
131C:  BTFSC  xD6.7
131E:  BSF    FF2.7
1320:  CLRF   xE0
1322:  MOVWF  xDF
1324:  RCALL  0D54
1326:  MOVFF  03,8C
132A:  MOVFF  02,8B
132E:  MOVFF  01,8A
1332:  MOVFF  00,89
1336:  MOVLW  14
1338:  MOVWF  xF1
133A:  CALL   0B20
....................    Temporal=Temporal/10.0; 
133E:  MOVFF  8C,DD
1342:  MOVFF  8B,DC
1346:  MOVFF  8A,DB
134A:  MOVFF  89,DA
134E:  CLRF   xE1
1350:  CLRF   xE0
1352:  MOVLW  20
1354:  MOVWF  xDF
1356:  MOVLW  82
1358:  MOVWF  xDE
135A:  RCALL  0D8A
135C:  MOVFF  03,8C
1360:  MOVFF  02,8B
1364:  MOVFF  01,8A
1368:  MOVFF  00,89
....................    Ajuste1=Entero+Temporal; 
136C:  CLRF   xE0
136E:  MOVFF  28,DF
1372:  RCALL  0D54
1374:  BCF    FD8.1
1376:  MOVFF  03,E0
137A:  MOVFF  02,DF
137E:  MOVFF  01,DE
1382:  MOVFF  00,DD
1386:  MOVFF  8C,E4
138A:  MOVFF  8B,E3
138E:  MOVFF  8A,E2
1392:  MOVFF  89,E1
1396:  RCALL  0EE4
1398:  MOVFF  03,A0
139C:  MOVFF  02,9F
13A0:  MOVFF  01,9E
13A4:  MOVFF  00,9D
....................     
....................    Entero=read_eeprom(40);delay_ms(20);//Decimal2=read_eeprom(41); 
13A8:  MOVFF  FF2,D6
13AC:  BCF    FF2.7
13AE:  MOVLW  28
13B0:  MOVWF  FA9
13B2:  BCF    FA6.6
13B4:  BCF    FA6.7
13B6:  BSF    FA6.0
13B8:  MOVF   FA8,W
13BA:  BTFSC  xD6.7
13BC:  BSF    FF2.7
13BE:  MOVWF  28
13C0:  MOVLW  14
13C2:  MOVWF  xF1
13C4:  CALL   0B20
....................    Temporal=read_eeprom(41);delay_ms(20); 
13C8:  MOVFF  FF2,D6
13CC:  BCF    FF2.7
13CE:  MOVLW  29
13D0:  MOVWF  FA9
13D2:  BCF    FA6.6
13D4:  BCF    FA6.7
13D6:  BSF    FA6.0
13D8:  MOVF   FA8,W
13DA:  BTFSC  xD6.7
13DC:  BSF    FF2.7
13DE:  CLRF   xE0
13E0:  MOVWF  xDF
13E2:  RCALL  0D54
13E4:  MOVFF  03,8C
13E8:  MOVFF  02,8B
13EC:  MOVFF  01,8A
13F0:  MOVFF  00,89
13F4:  MOVLW  14
13F6:  MOVWF  xF1
13F8:  CALL   0B20
....................    Temporal=Temporal/10.0; 
13FC:  MOVFF  8C,DD
1400:  MOVFF  8B,DC
1404:  MOVFF  8A,DB
1408:  MOVFF  89,DA
140C:  CLRF   xE1
140E:  CLRF   xE0
1410:  MOVLW  20
1412:  MOVWF  xDF
1414:  MOVLW  82
1416:  MOVWF  xDE
1418:  RCALL  0D8A
141A:  MOVFF  03,8C
141E:  MOVFF  02,8B
1422:  MOVFF  01,8A
1426:  MOVFF  00,89
....................    setpoint=Entero+Temporal; 
142A:  CLRF   xE0
142C:  MOVFF  28,DF
1430:  RCALL  0D54
1432:  BCF    FD8.1
1434:  MOVFF  03,E0
1438:  MOVFF  02,DF
143C:  MOVFF  01,DE
1440:  MOVFF  00,DD
1444:  MOVFF  8C,E4
1448:  MOVFF  8B,E3
144C:  MOVFF  8A,E2
1450:  MOVFF  89,E1
1454:  RCALL  0EE4
1456:  MOVFF  03,52
145A:  MOVFF  02,51
145E:  MOVFF  01,50
1462:  MOVFF  00,4F
....................    MediaMovil=read_eeprom(42);delay_ms(20); 
1466:  MOVFF  FF2,D6
146A:  BCF    FF2.7
146C:  MOVLW  2A
146E:  MOVWF  FA9
1470:  BCF    FA6.6
1472:  BCF    FA6.7
1474:  BSF    FA6.0
1476:  MOVF   FA8,W
1478:  BTFSC  xD6.7
147A:  BSF    FF2.7
147C:  MOVWF  2F
147E:  MOVLW  14
1480:  MOVWF  xF1
1482:  CALL   0B20
....................    
....................    negativo=read_eeprom(50);delay_ms(20); 
1486:  MOVFF  FF2,D6
148A:  BCF    FF2.7
148C:  MOVLW  32
148E:  MOVWF  FA9
1490:  BCF    FA6.6
1492:  BCF    FA6.7
1494:  BSF    FA6.0
1496:  MOVF   FA8,W
1498:  BTFSC  xD6.7
149A:  BSF    FF2.7
149C:  MOVWF  30
149E:  MOVLW  14
14A0:  MOVWF  xF1
14A2:  CALL   0B20
....................     
....................    Entero1=read_eeprom(60);delay_ms(20);//Decimal2=read_eeprom(41); 
14A6:  MOVFF  FF2,D6
14AA:  BCF    FF2.7
14AC:  MOVLW  3C
14AE:  MOVWF  FA9
14B0:  BCF    FA6.6
14B2:  BCF    FA6.7
14B4:  BSF    FA6.0
14B6:  MOVF   FA8,W
14B8:  BTFSC  xD6.7
14BA:  BSF    FF2.7
14BC:  MOVWF  2B
14BE:  MOVLW  14
14C0:  MOVWF  xF1
14C2:  CALL   0B20
....................    Temporal1=read_eeprom(61);delay_ms(20); 
14C6:  MOVFF  FF2,D6
14CA:  BCF    FF2.7
14CC:  MOVLW  3D
14CE:  MOVWF  FA9
14D0:  BCF    FA6.6
14D2:  BCF    FA6.7
14D4:  BSF    FA6.0
14D6:  MOVF   FA8,W
14D8:  BTFSC  xD6.7
14DA:  BSF    FF2.7
14DC:  CLRF   xE0
14DE:  MOVWF  xDF
14E0:  RCALL  0D54
14E2:  MOVFF  03,98
14E6:  MOVFF  02,97
14EA:  MOVFF  01,96
14EE:  MOVFF  00,95
14F2:  MOVLW  14
14F4:  MOVWF  xF1
14F6:  CALL   0B20
....................    Diferencia=make16(Temporal1,Entero1); 
14FA:  MOVFF  95,03
14FE:  MOVFF  2B,DF
1502:  MOVFF  95,E0
1506:  RCALL  0D54
1508:  MOVFF  03,9C
150C:  MOVFF  02,9B
1510:  MOVFF  01,9A
1514:  MOVFF  00,99
....................     
....................    segundos=read_eeprom(70);delay_ms(20); 
1518:  MOVFF  FF2,D6
151C:  BCF    FF2.7
151E:  MOVLW  46
1520:  MOVWF  FA9
1522:  BCF    FA6.6
1524:  BCF    FA6.7
1526:  BSF    FA6.0
1528:  MOVF   FA8,W
152A:  BTFSC  xD6.7
152C:  BSF    FF2.7
152E:  MOVWF  36
1530:  MOVLW  14
1532:  MOVWF  xF1
1534:  CALL   0B20
....................    minutos=read_eeprom(71);delay_ms(20); 
1538:  MOVFF  FF2,D6
153C:  BCF    FF2.7
153E:  MOVLW  47
1540:  MOVWF  FA9
1542:  BCF    FA6.6
1544:  BCF    FA6.7
1546:  BSF    FA6.0
1548:  MOVF   FA8,W
154A:  BTFSC  xD6.7
154C:  BSF    FF2.7
154E:  MOVWF  37
1550:  MOVLW  14
1552:  MOVWF  xF1
1554:  CALL   0B20
....................    horas=read_eeprom(72);delay_ms(20); 
1558:  MOVFF  FF2,D6
155C:  BCF    FF2.7
155E:  MOVLW  48
1560:  MOVWF  FA9
1562:  BCF    FA6.6
1564:  BCF    FA6.7
1566:  BSF    FA6.0
1568:  MOVF   FA8,W
156A:  BTFSC  xD6.7
156C:  BSF    FF2.7
156E:  MOVWF  38
1570:  MOVLW  14
1572:  MOVWF  xF1
1574:  CALL   0B20
....................    flag_filtro=read_eeprom(73);delay_ms(20); 
1578:  MOVFF  FF2,D6
157C:  BCF    FF2.7
157E:  MOVLW  49
1580:  MOVWF  FA9
1582:  BCF    FA6.6
1584:  BCF    FA6.7
1586:  BSF    FA6.0
1588:  MOVF   FA8,W
158A:  BTFSC  xD6.7
158C:  BSF    FF2.7
158E:  MOVWF  01
1590:  BCF    42.2
1592:  BTFSC  01.0
1594:  BSF    42.2
1596:  MOVLW  14
1598:  MOVWF  xF1
159A:  CALL   0B20
.................... } 
159E:  GOTO   48F0 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................    if(contrasena[0]>9 || contrasena[0]<0){ 
*
1618:  MOVF   4B,W
161A:  SUBLW  09
161C:  BC    1656
161E:  BRA    1624
1620:  BTFSS  00.0
1622:  BRA    1656
....................       contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
1624:  CLRF   4B
1626:  CLRF   FA9
1628:  CLRF   FA8
162A:  BCF    FA6.6
162C:  BCF    FA6.7
162E:  BSF    FA6.2
1630:  MOVF   FF2,W
1632:  MOVWF  00
1634:  BCF    FF2.7
1636:  MOVLB  F
1638:  MOVLW  55
163A:  MOVWF  FA7
163C:  MOVLW  AA
163E:  MOVWF  FA7
1640:  BSF    FA6.1
1642:  BTFSC  FA6.1
1644:  BRA    1642
1646:  BCF    FA6.2
1648:  MOVF   00,W
164A:  IORWF  FF2,F
164C:  MOVLW  14
164E:  MOVLB  0
1650:  MOVWF  xF1
1652:  CALL   0B20
....................    } 
....................    if(contrasena[1]>9 || contrasena[1]<0){ 
1656:  MOVF   4C,W
1658:  SUBLW  09
165A:  BC    1696
165C:  BRA    1662
165E:  BTFSS  00.0
1660:  BRA    1696
....................       contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
1662:  CLRF   4C
1664:  MOVLW  01
1666:  MOVWF  FA9
1668:  CLRF   FA8
166A:  BCF    FA6.6
166C:  BCF    FA6.7
166E:  BSF    FA6.2
1670:  MOVF   FF2,W
1672:  MOVWF  00
1674:  BCF    FF2.7
1676:  MOVLB  F
1678:  MOVLW  55
167A:  MOVWF  FA7
167C:  MOVLW  AA
167E:  MOVWF  FA7
1680:  BSF    FA6.1
1682:  BTFSC  FA6.1
1684:  BRA    1682
1686:  BCF    FA6.2
1688:  MOVF   00,W
168A:  IORWF  FF2,F
168C:  MOVLW  14
168E:  MOVLB  0
1690:  MOVWF  xF1
1692:  CALL   0B20
....................    } 
....................    if(contrasena[2]>9 || contrasena[2]<0){ 
1696:  MOVF   4D,W
1698:  SUBLW  09
169A:  BC    16D6
169C:  BRA    16A2
169E:  BTFSS  00.0
16A0:  BRA    16D6
....................       contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
16A2:  CLRF   4D
16A4:  MOVLW  02
16A6:  MOVWF  FA9
16A8:  CLRF   FA8
16AA:  BCF    FA6.6
16AC:  BCF    FA6.7
16AE:  BSF    FA6.2
16B0:  MOVF   FF2,W
16B2:  MOVWF  00
16B4:  BCF    FF2.7
16B6:  MOVLB  F
16B8:  MOVLW  55
16BA:  MOVWF  FA7
16BC:  MOVLW  AA
16BE:  MOVWF  FA7
16C0:  BSF    FA6.1
16C2:  BTFSC  FA6.1
16C4:  BRA    16C2
16C6:  BCF    FA6.2
16C8:  MOVF   00,W
16CA:  IORWF  FF2,F
16CC:  MOVLW  14
16CE:  MOVLB  0
16D0:  MOVWF  xF1
16D2:  CALL   0B20
....................    } 
....................    if(contrasena[3]>9 || contrasena[3]<0){ 
16D6:  MOVF   4E,W
16D8:  SUBLW  09
16DA:  BC    1716
16DC:  BRA    16E2
16DE:  BTFSS  00.0
16E0:  BRA    1716
....................       contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
16E2:  CLRF   4E
16E4:  MOVLW  03
16E6:  MOVWF  FA9
16E8:  CLRF   FA8
16EA:  BCF    FA6.6
16EC:  BCF    FA6.7
16EE:  BSF    FA6.2
16F0:  MOVF   FF2,W
16F2:  MOVWF  00
16F4:  BCF    FF2.7
16F6:  MOVLB  F
16F8:  MOVLW  55
16FA:  MOVWF  FA7
16FC:  MOVLW  AA
16FE:  MOVWF  FA7
1700:  BSF    FA6.1
1702:  BTFSC  FA6.1
1704:  BRA    1702
1706:  BCF    FA6.2
1708:  MOVF   00,W
170A:  IORWF  FF2,F
170C:  MOVLW  14
170E:  MOVLB  0
1710:  MOVWF  xF1
1712:  CALL   0B20
....................    } 
....................    if(estadoalarma>1){ 
1716:  MOVLW  00
1718:  BTFSC  41.2
171A:  MOVLW  01
171C:  SUBLW  01
171E:  BC    1756
....................       estadoalarma=1;write_eeprom(5,1);delay_ms(20); 
1720:  BSF    41.2
1722:  MOVLW  05
1724:  MOVWF  FA9
1726:  MOVLW  01
1728:  MOVWF  FA8
172A:  BCF    FA6.6
172C:  BCF    FA6.7
172E:  BSF    FA6.2
1730:  MOVF   FF2,W
1732:  MOVWF  00
1734:  BCF    FF2.7
1736:  MOVLB  F
1738:  MOVLW  55
173A:  MOVWF  FA7
173C:  MOVLW  AA
173E:  MOVWF  FA7
1740:  BSF    FA6.1
1742:  BTFSC  FA6.1
1744:  BRA    1742
1746:  BCF    FA6.2
1748:  MOVF   00,W
174A:  IORWF  FF2,F
174C:  MOVLW  14
174E:  MOVLB  0
1750:  MOVWF  xF1
1752:  CALL   0B20
....................    } 
....................    if(Manual>20){ 
1756:  MOVF   32,W
1758:  SUBLW  14
175A:  BC    1794
....................       Manual=20;write_eeprom(10,20);delay_ms(20); 
175C:  MOVLW  14
175E:  MOVWF  32
1760:  MOVLW  0A
1762:  MOVWF  FA9
1764:  MOVLW  14
1766:  MOVWF  FA8
1768:  BCF    FA6.6
176A:  BCF    FA6.7
176C:  BSF    FA6.2
176E:  MOVF   FF2,W
1770:  MOVWF  00
1772:  BCF    FF2.7
1774:  MOVLB  F
1776:  MOVLW  55
1778:  MOVWF  FA7
177A:  MOVLW  AA
177C:  MOVWF  FA7
177E:  BSF    FA6.1
1780:  BTFSC  FA6.1
1782:  BRA    1780
1784:  BCF    FA6.2
1786:  MOVF   00,W
1788:  IORWF  FF2,F
178A:  MOVLW  14
178C:  MOVLB  0
178E:  MOVWF  xF1
1790:  CALL   0B20
....................    } 
....................    if(Automa>20){ 
1794:  MOVF   31,W
1796:  SUBLW  14
1798:  BC    17D2
....................       Manual=10;write_eeprom(11,10);delay_ms(20); 
179A:  MOVLW  0A
179C:  MOVWF  32
179E:  MOVLW  0B
17A0:  MOVWF  FA9
17A2:  MOVLW  0A
17A4:  MOVWF  FA8
17A6:  BCF    FA6.6
17A8:  BCF    FA6.7
17AA:  BSF    FA6.2
17AC:  MOVF   FF2,W
17AE:  MOVWF  00
17B0:  BCF    FF2.7
17B2:  MOVLB  F
17B4:  MOVLW  55
17B6:  MOVWF  FA7
17B8:  MOVLW  AA
17BA:  MOVWF  FA7
17BC:  BSF    FA6.1
17BE:  BTFSC  FA6.1
17C0:  BRA    17BE
17C2:  BCF    FA6.2
17C4:  MOVF   00,W
17C6:  IORWF  FF2,F
17C8:  MOVLW  14
17CA:  MOVLB  0
17CC:  MOVWF  xF1
17CE:  CALL   0B20
....................    } 
....................    if(Semi>20){ 
17D2:  MOVF   33,W
17D4:  SUBLW  14
17D6:  BC    1810
....................       Semi=10;write_eeprom(12,10);delay_ms(20); 
17D8:  MOVLW  0A
17DA:  MOVWF  33
17DC:  MOVLW  0C
17DE:  MOVWF  FA9
17E0:  MOVLW  0A
17E2:  MOVWF  FA8
17E4:  BCF    FA6.6
17E6:  BCF    FA6.7
17E8:  BSF    FA6.2
17EA:  MOVF   FF2,W
17EC:  MOVWF  00
17EE:  BCF    FF2.7
17F0:  MOVLB  F
17F2:  MOVLW  55
17F4:  MOVWF  FA7
17F6:  MOVLW  AA
17F8:  MOVWF  FA7
17FA:  BSF    FA6.1
17FC:  BTFSC  FA6.1
17FE:  BRA    17FC
1800:  BCF    FA6.2
1802:  MOVF   00,W
1804:  IORWF  FF2,F
1806:  MOVLW  14
1808:  MOVLB  0
180A:  MOVWF  xF1
180C:  CALL   0B20
....................    } 
....................    if(purga_minutos>59){ 
1810:  MOVF   26,W
1812:  SUBLW  3B
1814:  BC    184E
....................       purga_minutos=2;write_eeprom(20,2);delay_ms(20); 
1816:  MOVLW  02
1818:  MOVWF  26
181A:  MOVLW  14
181C:  MOVWF  FA9
181E:  MOVLW  02
1820:  MOVWF  FA8
1822:  BCF    FA6.6
1824:  BCF    FA6.7
1826:  BSF    FA6.2
1828:  MOVF   FF2,W
182A:  MOVWF  00
182C:  BCF    FF2.7
182E:  MOVLB  F
1830:  MOVLW  55
1832:  MOVWF  FA7
1834:  MOVLW  AA
1836:  MOVWF  FA7
1838:  BSF    FA6.1
183A:  BTFSC  FA6.1
183C:  BRA    183A
183E:  BCF    FA6.2
1840:  MOVF   00,W
1842:  IORWF  FF2,F
1844:  MOVLW  14
1846:  MOVLB  0
1848:  MOVWF  xF1
184A:  CALL   0B20
....................    } 
....................    if(purga_segundos>59){ 
184E:  MOVF   3A,W
1850:  SUBLW  3B
1852:  BC    1888
....................       purga_segundos=0;write_eeprom(21,0);delay_ms(20); 
1854:  CLRF   3A
1856:  MOVLW  15
1858:  MOVWF  FA9
185A:  CLRF   FA8
185C:  BCF    FA6.6
185E:  BCF    FA6.7
1860:  BSF    FA6.2
1862:  MOVF   FF2,W
1864:  MOVWF  00
1866:  BCF    FF2.7
1868:  MOVLB  F
186A:  MOVLW  55
186C:  MOVWF  FA7
186E:  MOVLW  AA
1870:  MOVWF  FA7
1872:  BSF    FA6.1
1874:  BTFSC  FA6.1
1876:  BRA    1874
1878:  BCF    FA6.2
187A:  MOVF   00,W
187C:  IORWF  FF2,F
187E:  MOVLW  14
1880:  MOVLB  0
1882:  MOVWF  xF1
1884:  CALL   0B20
....................    } 
....................    if(ppurga_minutos>59){ 
1888:  MOVF   3E,W
188A:  SUBLW  3B
188C:  BC    18C6
....................       ppurga_minutos=2;write_eeprom(22,2);delay_ms(20); 
188E:  MOVLW  02
1890:  MOVWF  3E
1892:  MOVLW  16
1894:  MOVWF  FA9
1896:  MOVLW  02
1898:  MOVWF  FA8
189A:  BCF    FA6.6
189C:  BCF    FA6.7
189E:  BSF    FA6.2
18A0:  MOVF   FF2,W
18A2:  MOVWF  00
18A4:  BCF    FF2.7
18A6:  MOVLB  F
18A8:  MOVLW  55
18AA:  MOVWF  FA7
18AC:  MOVLW  AA
18AE:  MOVWF  FA7
18B0:  BSF    FA6.1
18B2:  BTFSC  FA6.1
18B4:  BRA    18B2
18B6:  BCF    FA6.2
18B8:  MOVF   00,W
18BA:  IORWF  FF2,F
18BC:  MOVLW  14
18BE:  MOVLB  0
18C0:  MOVWF  xF1
18C2:  CALL   0B20
....................    } 
....................    if(ppurga_segundos>59){ 
18C6:  MOVF   3C,W
18C8:  SUBLW  3B
18CA:  BC    1900
....................       ppurga_segundos=0;write_eeprom(23,0);delay_ms(20); 
18CC:  CLRF   3C
18CE:  MOVLW  17
18D0:  MOVWF  FA9
18D2:  CLRF   FA8
18D4:  BCF    FA6.6
18D6:  BCF    FA6.7
18D8:  BSF    FA6.2
18DA:  MOVF   FF2,W
18DC:  MOVWF  00
18DE:  BCF    FF2.7
18E0:  MOVLB  F
18E2:  MOVLW  55
18E4:  MOVWF  FA7
18E6:  MOVLW  AA
18E8:  MOVWF  FA7
18EA:  BSF    FA6.1
18EC:  BTFSC  FA6.1
18EE:  BRA    18EC
18F0:  BCF    FA6.2
18F2:  MOVF   00,W
18F4:  IORWF  FF2,F
18F6:  MOVLW  14
18F8:  MOVLB  0
18FA:  MOVWF  xF1
18FC:  CALL   0B20
....................    } 
....................    if(Ajuste1>20.0){ 
1900:  CLRF   xDD
1902:  CLRF   xDC
1904:  MOVLW  20
1906:  MOVWF  xDB
1908:  MOVLW  83
190A:  MOVWF  xDA
190C:  MOVFF  A0,E1
1910:  MOVFF  9F,E0
1914:  MOVFF  9E,DF
1918:  MOVFF  9D,DE
191C:  RCALL  15A2
191E:  BNC   1990
....................       Ajuste1=1.0;write_eeprom(25,1);delay_ms(20);write_eeprom(26,0);delay_ms(20); 
1920:  CLRF   xA0
1922:  CLRF   x9F
1924:  CLRF   x9E
1926:  MOVLW  7F
1928:  MOVWF  x9D
192A:  MOVLW  19
192C:  MOVWF  FA9
192E:  MOVLW  01
1930:  MOVWF  FA8
1932:  BCF    FA6.6
1934:  BCF    FA6.7
1936:  BSF    FA6.2
1938:  MOVF   FF2,W
193A:  MOVWF  00
193C:  BCF    FF2.7
193E:  MOVLB  F
1940:  MOVLW  55
1942:  MOVWF  FA7
1944:  MOVLW  AA
1946:  MOVWF  FA7
1948:  BSF    FA6.1
194A:  BTFSC  FA6.1
194C:  BRA    194A
194E:  BCF    FA6.2
1950:  MOVF   00,W
1952:  IORWF  FF2,F
1954:  MOVLW  14
1956:  MOVLB  0
1958:  MOVWF  xF1
195A:  CALL   0B20
195E:  MOVLW  1A
1960:  MOVWF  FA9
1962:  CLRF   FA8
1964:  BCF    FA6.6
1966:  BCF    FA6.7
1968:  BSF    FA6.2
196A:  MOVF   FF2,W
196C:  MOVWF  00
196E:  BCF    FF2.7
1970:  MOVLB  F
1972:  MOVLW  55
1974:  MOVWF  FA7
1976:  MOVLW  AA
1978:  MOVWF  FA7
197A:  BSF    FA6.1
197C:  BTFSC  FA6.1
197E:  BRA    197C
1980:  BCF    FA6.2
1982:  MOVF   00,W
1984:  IORWF  FF2,F
1986:  MOVLW  14
1988:  MOVLB  0
198A:  MOVWF  xF1
198C:  CALL   0B20
....................    } 
....................    if(setpoint>2.0){ 
1990:  CLRF   xDD
1992:  CLRF   xDC
1994:  CLRF   xDB
1996:  MOVLW  80
1998:  MOVWF  xDA
199A:  MOVFF  52,E1
199E:  MOVFF  51,E0
19A2:  MOVFF  50,DF
19A6:  MOVFF  4F,DE
19AA:  RCALL  15A2
19AC:  BNC   1A24
....................       setpoint=0.6;write_eeprom(40,0);delay_ms(20);write_eeprom(41,6);delay_ms(20); 
19AE:  MOVLW  9A
19B0:  MOVWF  52
19B2:  MOVLW  99
19B4:  MOVWF  51
19B6:  MOVLW  19
19B8:  MOVWF  50
19BA:  MOVLW  7E
19BC:  MOVWF  4F
19BE:  MOVLW  28
19C0:  MOVWF  FA9
19C2:  CLRF   FA8
19C4:  BCF    FA6.6
19C6:  BCF    FA6.7
19C8:  BSF    FA6.2
19CA:  MOVF   FF2,W
19CC:  MOVWF  00
19CE:  BCF    FF2.7
19D0:  MOVLB  F
19D2:  MOVLW  55
19D4:  MOVWF  FA7
19D6:  MOVLW  AA
19D8:  MOVWF  FA7
19DA:  BSF    FA6.1
19DC:  BTFSC  FA6.1
19DE:  BRA    19DC
19E0:  BCF    FA6.2
19E2:  MOVF   00,W
19E4:  IORWF  FF2,F
19E6:  MOVLW  14
19E8:  MOVLB  0
19EA:  MOVWF  xF1
19EC:  CALL   0B20
19F0:  MOVLW  29
19F2:  MOVWF  FA9
19F4:  MOVLW  06
19F6:  MOVWF  FA8
19F8:  BCF    FA6.6
19FA:  BCF    FA6.7
19FC:  BSF    FA6.2
19FE:  MOVF   FF2,W
1A00:  MOVWF  00
1A02:  BCF    FF2.7
1A04:  MOVLB  F
1A06:  MOVLW  55
1A08:  MOVWF  FA7
1A0A:  MOVLW  AA
1A0C:  MOVWF  FA7
1A0E:  BSF    FA6.1
1A10:  BTFSC  FA6.1
1A12:  BRA    1A10
1A14:  BCF    FA6.2
1A16:  MOVF   00,W
1A18:  IORWF  FF2,F
1A1A:  MOVLW  14
1A1C:  MOVLB  0
1A1E:  MOVWF  xF1
1A20:  CALL   0B20
....................    } 
....................    if(MediaMovil>12){ 
1A24:  MOVF   2F,W
1A26:  SUBLW  0C
1A28:  BC    1A62
....................       MediaMovil=10;write_eeprom(42,10);delay_ms(20); 
1A2A:  MOVLW  0A
1A2C:  MOVWF  2F
1A2E:  MOVLW  2A
1A30:  MOVWF  FA9
1A32:  MOVLW  0A
1A34:  MOVWF  FA8
1A36:  BCF    FA6.6
1A38:  BCF    FA6.7
1A3A:  BSF    FA6.2
1A3C:  MOVF   FF2,W
1A3E:  MOVWF  00
1A40:  BCF    FF2.7
1A42:  MOVLB  F
1A44:  MOVLW  55
1A46:  MOVWF  FA7
1A48:  MOVLW  AA
1A4A:  MOVWF  FA7
1A4C:  BSF    FA6.1
1A4E:  BTFSC  FA6.1
1A50:  BRA    1A4E
1A52:  BCF    FA6.2
1A54:  MOVF   00,W
1A56:  IORWF  FF2,F
1A58:  MOVLW  14
1A5A:  MOVLB  0
1A5C:  MOVWF  xF1
1A5E:  CALL   0B20
....................    } 
....................    if(negativo>20){ 
1A62:  MOVF   30,W
1A64:  SUBLW  14
1A66:  BC    1AA0
....................       negativo=10;write_eeprom(50,10);delay_ms(20); 
1A68:  MOVLW  0A
1A6A:  MOVWF  30
1A6C:  MOVLW  32
1A6E:  MOVWF  FA9
1A70:  MOVLW  0A
1A72:  MOVWF  FA8
1A74:  BCF    FA6.6
1A76:  BCF    FA6.7
1A78:  BSF    FA6.2
1A7A:  MOVF   FF2,W
1A7C:  MOVWF  00
1A7E:  BCF    FF2.7
1A80:  MOVLB  F
1A82:  MOVLW  55
1A84:  MOVWF  FA7
1A86:  MOVLW  AA
1A88:  MOVWF  FA7
1A8A:  BSF    FA6.1
1A8C:  BTFSC  FA6.1
1A8E:  BRA    1A8C
1A90:  BCF    FA6.2
1A92:  MOVF   00,W
1A94:  IORWF  FF2,F
1A96:  MOVLW  14
1A98:  MOVLB  0
1A9A:  MOVWF  xF1
1A9C:  CALL   0B20
....................    } 
....................    if(Diferencia>600){ 
1AA0:  CLRF   xDD
1AA2:  CLRF   xDC
1AA4:  MOVLW  16
1AA6:  MOVWF  xDB
1AA8:  MOVLW  88
1AAA:  MOVWF  xDA
1AAC:  MOVFF  9C,E1
1AB0:  MOVFF  9B,E0
1AB4:  MOVFF  9A,DF
1AB8:  MOVFF  99,DE
1ABC:  RCALL  15A2
1ABE:  BNC   1B2C
....................       Diferencia=0;write_eeprom(60,0);delay_ms(20);write_eeprom(61,0);delay_ms(20); 
1AC0:  CLRF   x9C
1AC2:  CLRF   x9B
1AC4:  CLRF   x9A
1AC6:  CLRF   x99
1AC8:  MOVLW  3C
1ACA:  MOVWF  FA9
1ACC:  CLRF   FA8
1ACE:  BCF    FA6.6
1AD0:  BCF    FA6.7
1AD2:  BSF    FA6.2
1AD4:  MOVF   FF2,W
1AD6:  MOVWF  00
1AD8:  BCF    FF2.7
1ADA:  MOVLB  F
1ADC:  MOVLW  55
1ADE:  MOVWF  FA7
1AE0:  MOVLW  AA
1AE2:  MOVWF  FA7
1AE4:  BSF    FA6.1
1AE6:  BTFSC  FA6.1
1AE8:  BRA    1AE6
1AEA:  BCF    FA6.2
1AEC:  MOVF   00,W
1AEE:  IORWF  FF2,F
1AF0:  MOVLW  14
1AF2:  MOVLB  0
1AF4:  MOVWF  xF1
1AF6:  CALL   0B20
1AFA:  MOVLW  3D
1AFC:  MOVWF  FA9
1AFE:  CLRF   FA8
1B00:  BCF    FA6.6
1B02:  BCF    FA6.7
1B04:  BSF    FA6.2
1B06:  MOVF   FF2,W
1B08:  MOVWF  00
1B0A:  BCF    FF2.7
1B0C:  MOVLB  F
1B0E:  MOVLW  55
1B10:  MOVWF  FA7
1B12:  MOVLW  AA
1B14:  MOVWF  FA7
1B16:  BSF    FA6.1
1B18:  BTFSC  FA6.1
1B1A:  BRA    1B18
1B1C:  BCF    FA6.2
1B1E:  MOVF   00,W
1B20:  IORWF  FF2,F
1B22:  MOVLW  14
1B24:  MOVLB  0
1B26:  MOVWF  xF1
1B28:  CALL   0B20
....................    } 
....................    if(segundos>60){ 
1B2C:  MOVF   36,W
1B2E:  SUBLW  3C
1B30:  BC    1B66
....................       segundos=0;write_eeprom(70,0);delay_ms(20); 
1B32:  CLRF   36
1B34:  MOVLW  46
1B36:  MOVWF  FA9
1B38:  CLRF   FA8
1B3A:  BCF    FA6.6
1B3C:  BCF    FA6.7
1B3E:  BSF    FA6.2
1B40:  MOVF   FF2,W
1B42:  MOVWF  00
1B44:  BCF    FF2.7
1B46:  MOVLB  F
1B48:  MOVLW  55
1B4A:  MOVWF  FA7
1B4C:  MOVLW  AA
1B4E:  MOVWF  FA7
1B50:  BSF    FA6.1
1B52:  BTFSC  FA6.1
1B54:  BRA    1B52
1B56:  BCF    FA6.2
1B58:  MOVF   00,W
1B5A:  IORWF  FF2,F
1B5C:  MOVLW  14
1B5E:  MOVLB  0
1B60:  MOVWF  xF1
1B62:  CALL   0B20
....................    } 
....................    if(minutos>60){ 
1B66:  MOVF   37,W
1B68:  SUBLW  3C
1B6A:  BC    1BA0
....................       minutos=0;write_eeprom(71,0);delay_ms(20); 
1B6C:  CLRF   37
1B6E:  MOVLW  47
1B70:  MOVWF  FA9
1B72:  CLRF   FA8
1B74:  BCF    FA6.6
1B76:  BCF    FA6.7
1B78:  BSF    FA6.2
1B7A:  MOVF   FF2,W
1B7C:  MOVWF  00
1B7E:  BCF    FF2.7
1B80:  MOVLB  F
1B82:  MOVLW  55
1B84:  MOVWF  FA7
1B86:  MOVLW  AA
1B88:  MOVWF  FA7
1B8A:  BSF    FA6.1
1B8C:  BTFSC  FA6.1
1B8E:  BRA    1B8C
1B90:  BCF    FA6.2
1B92:  MOVF   00,W
1B94:  IORWF  FF2,F
1B96:  MOVLW  14
1B98:  MOVLB  0
1B9A:  MOVWF  xF1
1B9C:  CALL   0B20
....................    } 
....................    if(flag_filtro>1){ 
1BA0:  MOVLW  00
1BA2:  BTFSC  42.2
1BA4:  MOVLW  01
1BA6:  SUBLW  01
1BA8:  BC    1BDE
....................       flag_filtro=0;write_eeprom(73,0);delay_ms(20); 
1BAA:  BCF    42.2
1BAC:  MOVLW  49
1BAE:  MOVWF  FA9
1BB0:  CLRF   FA8
1BB2:  BCF    FA6.6
1BB4:  BCF    FA6.7
1BB6:  BSF    FA6.2
1BB8:  MOVF   FF2,W
1BBA:  MOVWF  00
1BBC:  BCF    FF2.7
1BBE:  MOVLB  F
1BC0:  MOVLW  55
1BC2:  MOVWF  FA7
1BC4:  MOVLW  AA
1BC6:  MOVWF  FA7
1BC8:  BSF    FA6.1
1BCA:  BTFSC  FA6.1
1BCC:  BRA    1BCA
1BCE:  BCF    FA6.2
1BD0:  MOVF   00,W
1BD2:  IORWF  FF2,F
1BD4:  MOVLW  14
1BD6:  MOVLB  0
1BD8:  MOVWF  xF1
1BDA:  CALL   0B20
....................    } 
.................... } 
1BDE:  GOTO   48F4 (RETURN)
....................  
.................... void EnciendeMotor(void){ 
....................    if(!input_state(PIN_B5)){ 
*
3F7A:  BTFSC  F81.5
3F7C:  BRA    3F92
....................       delay_ms(100); 
3F7E:  MOVLW  64
3F80:  MOVWF  xF1
3F82:  CALL   0B20
....................       lcd_init(); 
3F86:  CALL   0BDE
....................       delay_ms(100); 
3F8A:  MOVLW  64
3F8C:  MOVWF  xF1
3F8E:  CALL   0B20
....................    } 
....................    Motor_on; 
3F92:  BSF    F8A.5
3F94:  BCF    F93.5
.................... } 
3F96:  RETLW  00
....................  
.................... void ApagaMotor(void){ 
....................    if(input_state(PIN_B5)){ 
*
3F5C:  BTFSS  F81.5
3F5E:  BRA    3F74
....................       delay_ms(100); 
3F60:  MOVLW  64
3F62:  MOVWF  xF1
3F64:  CALL   0B20
....................       lcd_init(); 
3F68:  CALL   0BDE
....................       delay_ms(100); 
3F6C:  MOVLW  64
3F6E:  MOVWF  xF1
3F70:  CALL   0B20
....................    } 
....................    Motor_off; 
3F74:  BCF    F8A.5
3F76:  BCF    F93.5
.................... } 
3F78:  RETLW  00
....................  
.................... void MensajeGuardado(void){ 
....................    printf(lcd_putc,"\f"); 
*
2F2E:  MOVLW  0C
2F30:  MOVWF  xEB
2F32:  CALL   0CA8
....................    lcd_gotoxy(1,2); 
2F36:  MOVLW  01
2F38:  MOVWF  xEC
2F3A:  MOVLW  02
2F3C:  MOVWF  xED
2F3E:  CALL   0C36
....................    printf(lcd_putc," !Valor Almacenado  "); 
2F42:  MOVLW  2C
2F44:  MOVWF  FF6
2F46:  MOVLW  01
2F48:  MOVWF  FF7
2F4A:  CALL   1BE2
....................    lcd_gotoxy(1,4); 
2F4E:  MOVLW  01
2F50:  MOVWF  xEC
2F52:  MOVLW  04
2F54:  MOVWF  xED
2F56:  CALL   0C36
....................    printf(lcd_putc,"                    "); 
2F5A:  MOVLW  42
2F5C:  MOVWF  FF6
2F5E:  MOVLW  01
2F60:  MOVWF  FF7
2F62:  CALL   1BE2
....................    lcd_gotoxy(1,3); 
2F66:  MOVLW  01
2F68:  MOVWF  xEC
2F6A:  MOVLW  03
2F6C:  MOVWF  xED
2F6E:  CALL   0C36
....................    printf(lcd_putc,"    Correctamente!  "); 
2F72:  MOVLW  58
2F74:  MOVWF  FF6
2F76:  MOVLW  01
2F78:  MOVWF  FF7
2F7A:  CALL   1BE2
....................    lcd_gotoxy(1,1); 
2F7E:  MOVLW  01
2F80:  MOVWF  xEC
2F82:  MOVWF  xED
2F84:  CALL   0C36
....................    printf(lcd_putc,"                    "); 
2F88:  MOVLW  6E
2F8A:  MOVWF  FF6
2F8C:  MOVLW  01
2F8E:  MOVWF  FF7
2F90:  CALL   1BE2
....................    delay_ms(2000); 
2F94:  MOVLW  08
2F96:  MOVWF  xD6
2F98:  MOVLW  FA
2F9A:  MOVWF  xF1
2F9C:  CALL   0B20
2FA0:  DECFSZ xD6,F
2FA2:  BRA    2F98
....................    printf(lcd_putc,"\f"); 
2FA4:  MOVLW  0C
2FA6:  MOVWF  xEB
2FA8:  CALL   0CA8
.................... } 
2FAC:  RETLW  00
....................  
.................... void Refresco(void){ 
....................    delay_ms(100); 
....................    lcd_init(); 
....................    delay_ms(100); 
.................... } 
....................  
.................... short SolicitaContrasena(int8 MenuAct,int8 MenuAnt,int8 MenuPos,cont0,cont1,cont2,cont3){ 
....................       lcd_gotoxy(1,1); 
*
1CB8:  MOVLW  01
1CBA:  MOVWF  xEC
1CBC:  MOVWF  xED
1CBE:  CALL   0C36
....................       printf(lcd_putc,"     Ingrese        "); 
1CC2:  MOVLW  84
1CC4:  MOVWF  FF6
1CC6:  MOVLW  01
1CC8:  MOVWF  FF7
1CCA:  RCALL  1BE2
....................       lcd_gotoxy(1,2); 
1CCC:  MOVLW  01
1CCE:  MOVWF  xEC
1CD0:  MOVLW  02
1CD2:  MOVWF  xED
1CD4:  CALL   0C36
....................       printf(lcd_putc,"    Contraseña      "); 
1CD8:  MOVLW  9A
1CDA:  MOVWF  FF6
1CDC:  MOVLW  01
1CDE:  MOVWF  FF7
1CE0:  RCALL  1BE2
....................       lcd_gotoxy(1,3); 
1CE2:  MOVLW  01
1CE4:  MOVWF  xEC
1CE6:  MOVLW  03
1CE8:  MOVWF  xED
1CEA:  CALL   0C36
....................       printf(lcd_putc,"    CLAVE=%u%u%u%u  ",clave[0],clave[1],clave[2],clave[3]); 
1CEE:  MOVLW  B0
1CF0:  MOVWF  FF6
1CF2:  MOVLW  01
1CF4:  MOVWF  FF7
1CF6:  MOVLW  0A
1CF8:  MOVWF  xDE
1CFA:  RCALL  1C04
1CFC:  MOVFF  47,DD
1D00:  MOVLW  1B
1D02:  MOVWF  xDE
1D04:  RCALL  1C4C
1D06:  MOVFF  48,DD
1D0A:  MOVLW  1B
1D0C:  MOVWF  xDE
1D0E:  RCALL  1C4C
1D10:  MOVFF  49,DD
1D14:  MOVLW  1B
1D16:  MOVWF  xDE
1D18:  RCALL  1C4C
1D1A:  MOVFF  4A,DD
1D1E:  MOVLW  1B
1D20:  MOVWF  xDE
1D22:  RCALL  1C4C
1D24:  MOVLW  20
1D26:  MOVWF  xEB
1D28:  CALL   0CA8
1D2C:  MOVLW  20
1D2E:  MOVWF  xEB
1D30:  CALL   0CA8
....................        
....................       if(UP){//Si oprime hacia arriba 
1D34:  BSF    F92.5
1D36:  BTFSS  F80.5
1D38:  BRA    1D6E
....................          delay_ms(20); 
1D3A:  MOVLW  14
1D3C:  MOVWF  xF1
1D3E:  CALL   0B20
....................          if(UP && Flanco == 0){ 
1D42:  BSF    F92.5
1D44:  BTFSS  F80.5
1D46:  BRA    1D6C
1D48:  BTFSC  41.4
1D4A:  BRA    1D6C
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0; 
1D4C:  MOVLW  0B
1D4E:  SUBWF  1E,W
1D50:  CLRF   03
1D52:  ADDLW  47
1D54:  MOVWF  FE9
1D56:  MOVLW  00
1D58:  ADDWFC 03,W
1D5A:  MOVWF  FEA
1D5C:  INCF   FEF,F
1D5E:  BSF    41.4
1D60:  MOVLW  1E
1D62:  MOVWF  xF1
1D64:  CALL   0B20
1D68:  CLRF   5B
1D6A:  CLRF   5A
....................          } 
....................       }else{ 
1D6C:  BRA    1D70
....................          Flanco = 0; 
1D6E:  BCF    41.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo   
1D70:  BSF    F96.0
1D72:  BTFSS  F84.0
1D74:  BRA    1DA6
....................          delay_ms(20); 
1D76:  MOVLW  14
1D78:  MOVWF  xF1
1D7A:  CALL   0B20
....................          if(DOWN){// && Flanco2 == 0){ 
1D7E:  BSF    F96.0
1D80:  BTFSS  F84.0
1D82:  BRA    1DA4
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0; 
1D84:  MOVLW  0B
1D86:  SUBWF  1E,W
1D88:  CLRF   03
1D8A:  ADDLW  47
1D8C:  MOVWF  FE9
1D8E:  MOVLW  00
1D90:  ADDWFC 03,W
1D92:  MOVWF  FEA
1D94:  DECF   FEF,F
1D96:  BSF    41.6
1D98:  MOVLW  1E
1D9A:  MOVWF  xF1
1D9C:  CALL   0B20
1DA0:  CLRF   5B
1DA2:  CLRF   5A
....................          } 
....................       }else{ 
1DA4:  BRA    1DA8
....................          Flanco2 = 0; 
1DA6:  BCF    41.6
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
1DA8:  BSF    F96.1
1DAA:  BTFSS  F84.1
1DAC:  BRA    1DDA
....................          delay_ms(20); 
1DAE:  MOVLW  14
1DB0:  MOVWF  xF1
1DB2:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0){ 
1DB6:  BSF    F96.1
1DB8:  BTFSS  F84.1
1DBA:  BRA    1DD8
1DBC:  BTFSC  41.5
1DBE:  BRA    1DD8
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
1DC0:  BSF    41.5
1DC2:  INCF   1E,F
1DC4:  MOVLW  1E
1DC6:  MOVWF  xF1
1DC8:  CALL   0B20
1DCC:  MOVLW  0C
1DCE:  MOVWF  xEB
1DD0:  CALL   0CA8
1DD4:  CLRF   5B
1DD6:  CLRF   5A
....................          } 
....................       }else{ 
1DD8:  BRA    1DDC
....................          Flanco1 = 0; 
1DDA:  BCF    41.5
....................       } 
....................              
....................       if(LEFT){// Si Oprime izquierda 
1DDC:  BSF    F96.2
1DDE:  BTFSS  F84.2
1DE0:  BRA    1E0E
....................          delay_ms(20); 
1DE2:  MOVLW  14
1DE4:  MOVWF  xF1
1DE6:  CALL   0B20
....................          if(LEFT && Flanco3 == 0){ 
1DEA:  BSF    F96.2
1DEC:  BTFSS  F84.2
1DEE:  BRA    1E0C
1DF0:  BTFSC  41.7
1DF2:  BRA    1E0C
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
1DF4:  BSF    41.7
1DF6:  DECF   1E,F
1DF8:  MOVLW  1E
1DFA:  MOVWF  xF1
1DFC:  CALL   0B20
1E00:  MOVLW  0C
1E02:  MOVWF  xEB
1E04:  CALL   0CA8
1E08:  CLRF   5B
1E0A:  CLRF   5A
....................          } 
....................       }else{ 
1E0C:  BRA    1E10
....................          Flanco3 = 0; 
1E0E:  BCF    41.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1E10:  MOVLW  0B
1E12:  SUBWF  1E,W
1E14:  CLRF   03
1E16:  ADDLW  47
1E18:  MOVWF  FE9
1E1A:  MOVLW  00
1E1C:  ADDWFC 03,W
1E1E:  MOVWF  FEA
1E20:  BTFSC  FEF.7
1E22:  BRA    1E26
1E24:  BRA    1E3A
....................          clave[unidad-11]=9; 
1E26:  MOVLW  0B
1E28:  SUBWF  1E,W
1E2A:  CLRF   03
1E2C:  ADDLW  47
1E2E:  MOVWF  FE9
1E30:  MOVLW  00
1E32:  ADDWFC 03,W
1E34:  MOVWF  FEA
1E36:  MOVLW  09
1E38:  MOVWF  FEF
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1E3A:  MOVLW  0B
1E3C:  SUBWF  1E,W
1E3E:  CLRF   03
1E40:  ADDLW  47
1E42:  MOVWF  FE9
1E44:  MOVLW  00
1E46:  ADDWFC 03,W
1E48:  MOVWF  FEA
1E4A:  BTFSC  FEF.7
1E4C:  BRA    1E66
1E4E:  MOVF   FEF,W
1E50:  SUBLW  09
1E52:  BC    1E66
....................          clave[unidad-11]=0; 
1E54:  MOVLW  0B
1E56:  SUBWF  1E,W
1E58:  CLRF   03
1E5A:  ADDLW  47
1E5C:  MOVWF  FE9
1E5E:  MOVLW  00
1E60:  ADDWFC 03,W
1E62:  MOVWF  FEA
1E64:  CLRF   FEF
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1E66:  MOVF   1E,W
1E68:  SUBLW  0A
1E6A:  BNC   1E80
....................          unidad=11; 
1E6C:  MOVLW  0B
1E6E:  MOVWF  1E
....................          Menu=MenuAnt; 
1E70:  MOVFF  D7,1C
....................          paso=0;Flecha=2;Flecha2=2;unidad=11; 
1E74:  CLRF   43
1E76:  MOVLW  02
1E78:  MOVWF  1F
1E7A:  MOVWF  21
1E7C:  MOVLW  0B
1E7E:  MOVWF  1E
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1E80:  MOVFF  1E,EC
1E84:  MOVLW  04
1E86:  MOVWF  xED
1E88:  CALL   0C36
....................       lcd_putc(t[2]); 
1E8C:  MOVFF  46,EB
1E90:  CALL   0CA8
....................        
....................       if(unidad>11&&unidad<14){ 
1E94:  MOVF   1E,W
1E96:  SUBLW  0B
1E98:  BC    1EB8
1E9A:  MOVF   1E,W
1E9C:  SUBLW  0D
1E9E:  BNC   1EB8
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1EA0:  MOVLW  01
1EA2:  SUBWF  1E,W
1EA4:  MOVWF  xDD
1EA6:  MOVWF  xEC
1EA8:  MOVLW  04
1EAA:  MOVWF  xED
1EAC:  CALL   0C36
....................          lcd_putc(t[1]); 
1EB0:  MOVFF  45,EB
1EB4:  CALL   0CA8
....................       } 
....................        
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1EB8:  MOVF   1E,W
1EBA:  SUBLW  0E
1EBC:  BTFSC  FD8.0
1EBE:  BRA    20B0
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2&&MenuAct==0){ // Si Ingresa clave para reset general del sistema. 
1EC0:  MOVF   47,W
1EC2:  SUBLW  03
1EC4:  BNZ   1FA4
1EC6:  MOVF   48,W
1EC8:  SUBLW  08
1ECA:  BNZ   1FA4
1ECC:  MOVF   49,W
1ECE:  SUBLW  09
1ED0:  BNZ   1FA4
1ED2:  MOVF   4A,W
1ED4:  SUBLW  02
1ED6:  BNZ   1FA4
1ED8:  MOVF   xD6,F
1EDA:  BNZ   1FA4
....................              write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1EDC:  CLRF   FA9
1EDE:  CLRF   FA8
1EE0:  BCF    FA6.6
1EE2:  BCF    FA6.7
1EE4:  BSF    FA6.2
1EE6:  MOVF   FF2,W
1EE8:  MOVWF  00
1EEA:  BCF    FF2.7
1EEC:  MOVLB  F
1EEE:  MOVLW  55
1EF0:  MOVWF  FA7
1EF2:  MOVLW  AA
1EF4:  MOVWF  FA7
1EF6:  BSF    FA6.1
1EF8:  BTFSC  FA6.1
1EFA:  BRA    1EF8
1EFC:  BCF    FA6.2
1EFE:  MOVF   00,W
1F00:  IORWF  FF2,F
1F02:  MOVLW  14
1F04:  MOVLB  0
1F06:  MOVWF  xF1
1F08:  CALL   0B20
1F0C:  MOVLW  01
1F0E:  MOVWF  FA9
1F10:  CLRF   FA8
1F12:  BCF    FA6.6
1F14:  BCF    FA6.7
1F16:  BSF    FA6.2
1F18:  MOVF   FF2,W
1F1A:  MOVWF  00
1F1C:  BCF    FF2.7
1F1E:  MOVLB  F
1F20:  MOVLW  55
1F22:  MOVWF  FA7
1F24:  MOVLW  AA
1F26:  MOVWF  FA7
1F28:  BSF    FA6.1
1F2A:  BTFSC  FA6.1
1F2C:  BRA    1F2A
1F2E:  BCF    FA6.2
1F30:  MOVF   00,W
1F32:  IORWF  FF2,F
1F34:  MOVLW  14
1F36:  MOVLB  0
1F38:  MOVWF  xF1
1F3A:  CALL   0B20
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1F3E:  MOVLW  02
1F40:  MOVWF  FA9
1F42:  CLRF   FA8
1F44:  BCF    FA6.6
1F46:  BCF    FA6.7
1F48:  BSF    FA6.2
1F4A:  MOVF   FF2,W
1F4C:  MOVWF  00
1F4E:  BCF    FF2.7
1F50:  MOVLB  F
1F52:  MOVLW  55
1F54:  MOVWF  FA7
1F56:  MOVLW  AA
1F58:  MOVWF  FA7
1F5A:  BSF    FA6.1
1F5C:  BTFSC  FA6.1
1F5E:  BRA    1F5C
1F60:  BCF    FA6.2
1F62:  MOVF   00,W
1F64:  IORWF  FF2,F
1F66:  MOVLW  14
1F68:  MOVLB  0
1F6A:  MOVWF  xF1
1F6C:  CALL   0B20
1F70:  MOVLW  03
1F72:  MOVWF  FA9
1F74:  CLRF   FA8
1F76:  BCF    FA6.6
1F78:  BCF    FA6.7
1F7A:  BSF    FA6.2
1F7C:  MOVF   FF2,W
1F7E:  MOVWF  00
1F80:  BCF    FF2.7
1F82:  MOVLB  F
1F84:  MOVLW  55
1F86:  MOVWF  FA7
1F88:  MOVLW  AA
1F8A:  MOVWF  FA7
1F8C:  BSF    FA6.1
1F8E:  BTFSC  FA6.1
1F90:  BRA    1F8E
1F92:  BCF    FA6.2
1F94:  MOVF   00,W
1F96:  IORWF  FF2,F
1F98:  MOVLW  14
1F9A:  MOVLB  0
1F9C:  MOVWF  xF1
1F9E:  CALL   0B20
....................              reset_cpu(); 
1FA2:  RESET
....................          } 
....................              
....................          if(clave[0]==cont0 && clave[1]==cont1 && clave[2]==cont2 && clave[3]==cont3){ // Si las claves coinciden pasa a Menu Principal. 
1FA4:  MOVF   xD9,W
1FA6:  SUBWF  47,W
1FA8:  BNZ   203A
1FAA:  MOVF   xDA,W
1FAC:  SUBWF  48,W
1FAE:  BNZ   203A
1FB0:  MOVF   xDB,W
1FB2:  SUBWF  49,W
1FB4:  BNZ   203A
1FB6:  MOVF   xDC,W
1FB8:  SUBWF  4A,W
1FBA:  BNZ   203A
....................             lcd_gotoxy(1,1); 
1FBC:  MOVLW  01
1FBE:  MOVWF  xEC
1FC0:  MOVWF  xED
1FC2:  CALL   0C36
....................             printf(lcd_putc,"                   "); 
1FC6:  MOVLW  C6
1FC8:  MOVWF  FF6
1FCA:  MOVLW  01
1FCC:  MOVWF  FF7
1FCE:  RCALL  1BE2
....................             lcd_gotoxy(1,2); 
1FD0:  MOVLW  01
1FD2:  MOVWF  xEC
1FD4:  MOVLW  02
1FD6:  MOVWF  xED
1FD8:  CALL   0C36
....................             printf(lcd_putc,"     Contraseña    "); 
1FDC:  MOVLW  DA
1FDE:  MOVWF  FF6
1FE0:  MOVLW  01
1FE2:  MOVWF  FF7
1FE4:  RCALL  1BE2
....................             lcd_gotoxy(1,3); 
1FE6:  MOVLW  01
1FE8:  MOVWF  xEC
1FEA:  MOVLW  03
1FEC:  MOVWF  xED
1FEE:  CALL   0C36
....................             printf(lcd_putc,"      Correcta     "); 
1FF2:  MOVLW  EE
1FF4:  MOVWF  FF6
1FF6:  MOVLW  01
1FF8:  MOVWF  FF7
1FFA:  RCALL  1BE2
....................             lcd_gotoxy(1,4); 
1FFC:  MOVLW  01
1FFE:  MOVWF  xEC
2000:  MOVLW  04
2002:  MOVWF  xED
2004:  CALL   0C36
....................             printf(lcd_putc,"                   "); 
2008:  MOVLW  02
200A:  MOVWF  FF6
200C:  MOVLW  02
200E:  MOVWF  FF7
2010:  RCALL  1BE2
....................             delay_ms(500); 
2012:  MOVLW  02
2014:  MOVWF  xDD
2016:  MOVLW  FA
2018:  MOVWF  xF1
201A:  CALL   0B20
201E:  DECFSZ xDD,F
2020:  BRA    2016
....................             Menu=MenuPos;unidad=11; 
2022:  MOVFF  D8,1C
2026:  MOVLW  0B
2028:  MOVWF  1E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
202A:  CLRF   47
202C:  CLRF   48
202E:  CLRF   49
2030:  CLRF   4A
....................             return 1; 
2032:  MOVLW  01
2034:  MOVWF  01
2036:  BRA    20B0
....................          }else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2038:  BRA    20B0
....................             lcd_gotoxy(1,1); 
203A:  MOVLW  01
203C:  MOVWF  xEC
203E:  MOVWF  xED
2040:  CALL   0C36
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2044:  MOVLW  01
2046:  MOVWF  xEC
2048:  MOVLW  02
204A:  MOVWF  xED
204C:  CALL   0C36
....................             printf(lcd_putc,"     Contraseña    "); 
2050:  MOVLW  16
2052:  MOVWF  FF6
2054:  MOVLW  02
2056:  MOVWF  FF7
2058:  RCALL  1BE2
....................             lcd_gotoxy(1,3); 
205A:  MOVLW  01
205C:  MOVWF  xEC
205E:  MOVLW  03
2060:  MOVWF  xED
2062:  CALL   0C36
....................             printf(lcd_putc,"     Incorrecta    "); 
2066:  MOVLW  2A
2068:  MOVWF  FF6
206A:  MOVLW  02
206C:  MOVWF  FF7
206E:  RCALL  1BE2
....................             lcd_gotoxy(1,4); 
2070:  MOVLW  01
2072:  MOVWF  xEC
2074:  MOVLW  04
2076:  MOVWF  xED
2078:  CALL   0C36
....................             printf(lcd_putc,"                   "); 
207C:  MOVLW  3E
207E:  MOVWF  FF6
2080:  MOVLW  02
2082:  MOVWF  FF7
2084:  RCALL  1BE2
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
2086:  MOVLW  02
2088:  MOVWF  xDD
208A:  MOVLW  FA
208C:  MOVWF  xF1
208E:  CALL   0B20
2092:  DECFSZ xDD,F
2094:  BRA    208A
2096:  MOVLW  0B
2098:  MOVWF  1E
209A:  MOVLW  0C
209C:  MOVWF  xEB
209E:  CALL   0CA8
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
20A2:  CLRF   47
20A4:  CLRF   48
20A6:  CLRF   49
20A8:  CLRF   4A
....................             return 0; 
20AA:  MOVLW  00
20AC:  MOVWF  01
20AE:  BRA    20B0
....................          } 
....................       }      
.................... } 
20B0:  RETLW  00
....................  
.................... void MenuPrincipal(){ 
....................       lcd_gotoxy(1,1); 
*
215C:  MOVLW  01
215E:  MOVWF  xEC
2160:  MOVWF  xED
2162:  CALL   0C36
....................       printf(lcd_putc,"---MENU PRINCIPAL---"); 
2166:  MOVLW  52
2168:  MOVWF  FF6
216A:  MOVLW  02
216C:  MOVWF  FF7
216E:  RCALL  1BE2
....................     
....................       if(UP){//Si oprime hacia arriba 
2170:  BSF    F92.5
2172:  BTFSS  F80.5
2174:  BRA    219E
....................          delay_ms(20); 
2176:  MOVLW  14
2178:  MOVWF  xF1
217A:  CALL   0B20
....................          if(UP && Flanco == 0){ 
217E:  BSF    F92.5
2180:  BTFSS  F80.5
2182:  BRA    219C
2184:  BTFSC  41.4
2186:  BRA    219C
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2188:  DECF   21,F
218A:  DECF   1F,F
218C:  MOVLW  01
218E:  ADDWF  1F,W
2190:  MOVWF  20
2192:  BSF    41.4
2194:  MOVLW  1E
2196:  MOVWF  xF1
2198:  CALL   0B20
....................          } 
....................       }else{ 
219C:  BRA    21A0
....................          Flanco = 0; 
219E:  BCF    41.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
21A0:  BSF    F96.0
21A2:  BTFSS  F84.0
21A4:  BRA    21CE
....................          delay_ms(20); 
21A6:  MOVLW  14
21A8:  MOVWF  xF1
21AA:  CALL   0B20
....................          if(DOWN && Flanco2 == 0){ 
21AE:  BSF    F96.0
21B0:  BTFSS  F84.0
21B2:  BRA    21CC
21B4:  BTFSC  41.6
21B6:  BRA    21CC
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
21B8:  INCF   21,F
21BA:  INCF   1F,F
21BC:  MOVLW  01
21BE:  SUBWF  1F,W
21C0:  MOVWF  20
21C2:  BSF    41.6
21C4:  MOVLW  1E
21C6:  MOVWF  xF1
21C8:  CALL   0B20
....................          } 
....................       }else{ 
21CC:  BRA    21D0
....................          Flanco2 = 0; 
21CE:  BCF    41.6
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH) 
21D0:  MOVF   21,W
21D2:  SUBWF  23,W
21D4:  BC    21E6
....................       {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
21D6:  INCF   43,F
21D8:  MOVFF  21,23
21DC:  MOVLW  02
21DE:  SUBWF  23,W
21E0:  MOVWF  22
21E2:  MOVLW  04
21E4:  MOVWF  1F
....................          
....................       if(Flecha2<nMenuL) 
21E6:  MOVF   22,W
21E8:  SUBWF  21,W
21EA:  BC    21FC
....................       {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
21EC:  DECF   43,F
21EE:  MOVFF  21,22
21F2:  MOVLW  02
21F4:  ADDWF  22,W
21F6:  MOVWF  23
21F8:  MOVLW  02
21FA:  MOVWF  1F
....................          
....................       if(Flecha2>n_opcionH) 
21FC:  MOVF   21,W
21FE:  SUBWF  xD5,W
2200:  BC    2214
....................       {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2202:  MOVFF  1D,21
2206:  MOVLW  02
2208:  MOVWF  1F
220A:  CLRF   43
220C:  MOVFF  21,22
2210:  ADDWF  22,W
2212:  MOVWF  23
....................        
....................       if(Flecha2<n_opcionL) 
2214:  MOVF   1D,W
2216:  SUBWF  21,W
2218:  BC    2230
....................       {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
221A:  MOVFF  D5,21
221E:  MOVLW  04
2220:  MOVWF  1F
2222:  SUBWF  xD5,W
2224:  MOVWF  43
2226:  MOVFF  21,23
222A:  MOVLW  02
222C:  SUBWF  23,W
222E:  MOVWF  22
....................           
....................       if(paso<0) 
2230:  BTFSC  43.7
2232:  BRA    2236
2234:  BRA    2238
....................          paso=0; 
2236:  CLRF   43
....................        
....................       mensajes(1+paso,2); 
2238:  MOVLW  01
223A:  ADDWF  43,W
223C:  MOVWF  xD6
223E:  MOVWF  xD7
2240:  MOVLW  02
2242:  MOVWF  xD8
2244:  RCALL  20B2
....................       mensajes(2+paso,3); 
2246:  MOVLW  02
2248:  ADDWF  43,W
224A:  MOVWF  xD6
224C:  MOVWF  xD7
224E:  MOVLW  03
2250:  MOVWF  xD8
2252:  RCALL  20B2
....................       mensajes(3+paso,4); 
2254:  MOVLW  03
2256:  ADDWF  43,W
2258:  MOVWF  xD6
225A:  MOVWF  xD7
225C:  MOVLW  04
225E:  MOVWF  xD8
2260:  RCALL  20B2
....................  
....................       lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2262:  MOVLW  01
2264:  MOVWF  xEC
2266:  MOVFF  1F,ED
226A:  CALL   0C36
....................       lcd_putc(t[0]); 
226E:  MOVFF  44,EB
2272:  CALL   0CA8
....................  
....................       if(Flecha==2){ 
2276:  MOVF   1F,W
2278:  SUBLW  02
227A:  BNZ   22A4
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
227C:  MOVLW  01
227E:  MOVWF  xEC
2280:  MOVLW  04
2282:  MOVWF  xED
2284:  CALL   0C36
....................          lcd_putc(t[1]); 
2288:  MOVFF  45,EB
228C:  CALL   0CA8
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2290:  MOVLW  01
2292:  MOVWF  xEC
2294:  MOVLW  03
2296:  MOVWF  xED
2298:  CALL   0C36
....................          lcd_putc(t[1]); 
229C:  MOVFF  45,EB
22A0:  CALL   0CA8
....................       } 
....................          
....................       if(Flecha==4){ 
22A4:  MOVF   1F,W
22A6:  SUBLW  04
22A8:  BNZ   22D2
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
22AA:  MOVLW  01
22AC:  MOVWF  xEC
22AE:  MOVLW  02
22B0:  MOVWF  xED
22B2:  CALL   0C36
....................          lcd_putc(t[1]); 
22B6:  MOVFF  45,EB
22BA:  CALL   0CA8
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
22BE:  MOVLW  01
22C0:  MOVWF  xEC
22C2:  MOVLW  03
22C4:  MOVWF  xED
22C6:  CALL   0C36
....................          lcd_putc(t[1]); 
22CA:  MOVFF  45,EB
22CE:  CALL   0CA8
....................       } 
....................          
....................       if(Flecha==3){ 
22D2:  MOVF   1F,W
22D4:  SUBLW  03
22D6:  BNZ   2300
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
22D8:  MOVLW  01
22DA:  MOVWF  xEC
22DC:  MOVLW  04
22DE:  MOVWF  xED
22E0:  CALL   0C36
....................          lcd_putc(t[1]); 
22E4:  MOVFF  45,EB
22E8:  CALL   0CA8
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
22EC:  MOVLW  01
22EE:  MOVWF  xEC
22F0:  MOVLW  02
22F2:  MOVWF  xED
22F4:  CALL   0C36
....................          lcd_putc(t[1]); 
22F8:  MOVFF  45,EB
22FC:  CALL   0CA8
....................       } 
....................  
....................       if(RIGHT){// Si oprime derecha 
2300:  BSF    F96.1
2302:  BTFSS  F84.1
2304:  BRA    234A
....................          delay_ms(20); 
2306:  MOVLW  14
2308:  MOVWF  xF1
230A:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
230E:  BSF    F96.1
2310:  BTFSS  F84.1
2312:  BRA    2348
2314:  BTFSC  41.5
2316:  BRA    2348
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
2318:  BSF    41.5
231A:  MOVFF  21,1C
231E:  MOVLW  03
2320:  MOVWF  1F
2322:  MOVLW  02
2324:  MOVWF  xD6
2326:  MOVLW  FA
2328:  MOVWF  xF1
232A:  CALL   0B20
232E:  DECFSZ xD6,F
2330:  BRA    2326
2332:  MOVLW  0C
2334:  MOVWF  xEB
2336:  CALL   0CA8
....................             if(Menu==6){ 
233A:  MOVF   1C,W
233C:  SUBLW  06
233E:  BNZ   2348
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2340:  CLRF   47
2342:  CLRF   48
2344:  CLRF   49
2346:  CLRF   4A
....................             } 
....................          } 
....................       }else{ 
2348:  BRA    234C
....................          Flanco1 = 0; 
234A:  BCF    41.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
234C:  BSF    F96.2
234E:  BTFSS  F84.2
2350:  BRA    2382
....................          delay_ms(20); 
2352:  MOVLW  14
2354:  MOVWF  xF1
2356:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
235A:  BSF    F96.2
235C:  BTFSS  F84.2
235E:  BRA    2380
2360:  BTFSC  41.7
2362:  BRA    2380
....................             /*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f"); 
2364:  MOVLW  02
2366:  MOVWF  xD6
2368:  MOVLW  FA
236A:  MOVWF  xF1
236C:  CALL   0B20
2370:  DECFSZ xD6,F
2372:  BRA    2368
2374:  MOVLW  14
2376:  MOVWF  1C
2378:  MOVLW  0C
237A:  MOVWF  xEB
237C:  CALL   0CA8
....................          } 
....................       }else{ 
2380:  BRA    2384
....................          Flanco3 = 0; 
2382:  BCF    41.7
....................       } 
.................... } 
2384:  GOTO   4A2C (RETURN)
....................  
.................... void MenuFiltro(){ 
....................    lcd_gotoxy(1,1); 
*
24AA:  MOVLW  01
24AC:  MOVWF  xEC
24AE:  MOVWF  xED
24B0:  CALL   0C36
....................       printf(lcd_putc,"  Duracion Actual   ");                           
24B4:  MOVLW  68
24B6:  MOVWF  FF6
24B8:  MOVLW  02
24BA:  MOVWF  FF7
24BC:  CALL   1BE2
....................       lcd_gotoxy(1,2);                                                   
24C0:  MOVLW  01
24C2:  MOVWF  xEC
24C4:  MOVLW  02
24C6:  MOVWF  xED
24C8:  CALL   0C36
....................       printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
24CC:  MOVLW  7E
24CE:  MOVWF  FF6
24D0:  MOVLW  02
24D2:  MOVWF  FF7
24D4:  MOVLW  09
24D6:  MOVWF  xDE
24D8:  CALL   1C04
24DC:  MOVFF  38,DD
24E0:  MOVLW  01
24E2:  MOVWF  xDE
24E4:  CALL   1C4C
24E8:  MOVLW  3A
24EA:  MOVWF  xEB
24EC:  CALL   0CA8
24F0:  MOVFF  37,DD
24F4:  MOVLW  01
24F6:  MOVWF  xDE
24F8:  CALL   1C4C
24FC:  MOVLW  3A
24FE:  MOVWF  xEB
2500:  CALL   0CA8
2504:  MOVFF  36,DD
2508:  MOVLW  01
250A:  MOVWF  xDE
250C:  CALL   1C4C
2510:  MOVLW  20
2512:  MOVWF  xEB
2514:  CALL   0CA8
....................        
....................       if(flag_filtro==1){ 
2518:  BTFSS  42.2
251A:  BRA    2536
....................          lcd_gotoxy(1,3);                                                  
251C:  MOVLW  01
251E:  MOVWF  xEC
2520:  MOVLW  03
2522:  MOVWF  xED
2524:  CALL   0C36
....................          printf(lcd_putc,"DESACTIVAR= Oprima >");                         
2528:  MOVLW  98
252A:  MOVWF  FF6
252C:  MOVLW  02
252E:  MOVWF  FF7
2530:  CALL   1BE2
....................       }else{ 
2534:  BRA    254E
....................          lcd_gotoxy(1,3);                                                  
2536:  MOVLW  01
2538:  MOVWF  xEC
253A:  MOVLW  03
253C:  MOVWF  xED
253E:  CALL   0C36
....................          printf(lcd_putc," ACTIVAR= Oprima >  ");                         
2542:  MOVLW  AE
2544:  MOVWF  FF6
2546:  MOVLW  02
2548:  MOVWF  FF7
254A:  CALL   1BE2
....................       } 
....................     
....................       lcd_gotoxy(1,4);                                                  
254E:  MOVLW  01
2550:  MOVWF  xEC
2552:  MOVLW  04
2554:  MOVWF  xED
2556:  CALL   0C36
....................       printf(lcd_putc," RESET= Oprima ^    ");                                                                                    
255A:  MOVLW  C4
255C:  MOVWF  FF6
255E:  MOVLW  02
2560:  MOVWF  FF7
2562:  CALL   1BE2
....................     
....................       if(UP){//Si oprime hacia arriba 
2566:  BSF    F92.5
2568:  BTFSS  F80.5
256A:  BRA    267A
....................          delay_ms(20); 
256C:  MOVLW  14
256E:  MOVWF  xF1
2570:  CALL   0B20
....................          if(UP){ 
2574:  BSF    F92.5
2576:  BTFSS  F80.5
2578:  BRA    267A
....................             printf(lcd_putc,"\f"); 
257A:  MOVLW  0C
257C:  MOVWF  xEB
257E:  CALL   0CA8
....................             lcd_gotoxy(1,2); 
2582:  MOVLW  01
2584:  MOVWF  xEC
2586:  MOVLW  02
2588:  MOVWF  xED
258A:  CALL   0C36
....................             printf(lcd_putc," Reset de tiempo "); 
258E:  MOVLW  DA
2590:  MOVWF  FF6
2592:  MOVLW  02
2594:  MOVWF  FF7
2596:  CALL   1BE2
....................             lcd_gotoxy(1,3); 
259A:  MOVLW  01
259C:  MOVWF  xEC
259E:  MOVLW  03
25A0:  MOVWF  xED
25A2:  CALL   0C36
....................             printf(lcd_putc,"     Exitoso     "); 
25A6:  MOVLW  EC
25A8:  MOVWF  FF6
25AA:  MOVLW  02
25AC:  MOVWF  FF7
25AE:  CALL   1BE2
....................             write_eeprom(70,0);delay_ms(20); 
25B2:  MOVLW  46
25B4:  MOVWF  FA9
25B6:  CLRF   FA8
25B8:  BCF    FA6.6
25BA:  BCF    FA6.7
25BC:  BSF    FA6.2
25BE:  MOVF   FF2,W
25C0:  MOVWF  00
25C2:  BCF    FF2.7
25C4:  MOVLB  F
25C6:  MOVLW  55
25C8:  MOVWF  FA7
25CA:  MOVLW  AA
25CC:  MOVWF  FA7
25CE:  BSF    FA6.1
25D0:  BTFSC  FA6.1
25D2:  BRA    25D0
25D4:  BCF    FA6.2
25D6:  MOVF   00,W
25D8:  IORWF  FF2,F
25DA:  MOVLW  14
25DC:  MOVLB  0
25DE:  MOVWF  xF1
25E0:  CALL   0B20
....................             write_eeprom(71,0);delay_ms(20); 
25E4:  MOVLW  47
25E6:  MOVWF  FA9
25E8:  CLRF   FA8
25EA:  BCF    FA6.6
25EC:  BCF    FA6.7
25EE:  BSF    FA6.2
25F0:  MOVF   FF2,W
25F2:  MOVWF  00
25F4:  BCF    FF2.7
25F6:  MOVLB  F
25F8:  MOVLW  55
25FA:  MOVWF  FA7
25FC:  MOVLW  AA
25FE:  MOVWF  FA7
2600:  BSF    FA6.1
2602:  BTFSC  FA6.1
2604:  BRA    2602
2606:  BCF    FA6.2
2608:  MOVF   00,W
260A:  IORWF  FF2,F
260C:  MOVLW  14
260E:  MOVLB  0
2610:  MOVWF  xF1
2612:  CALL   0B20
....................             write_eeprom(72,0);delay_ms(20); 
2616:  MOVLW  48
2618:  MOVWF  FA9
261A:  CLRF   FA8
261C:  BCF    FA6.6
261E:  BCF    FA6.7
2620:  BSF    FA6.2
2622:  MOVF   FF2,W
2624:  MOVWF  00
2626:  BCF    FF2.7
2628:  MOVLB  F
262A:  MOVLW  55
262C:  MOVWF  FA7
262E:  MOVLW  AA
2630:  MOVWF  FA7
2632:  BSF    FA6.1
2634:  BTFSC  FA6.1
2636:  BRA    2634
2638:  BCF    FA6.2
263A:  MOVF   00,W
263C:  IORWF  FF2,F
263E:  MOVLW  14
2640:  MOVLB  0
2642:  MOVWF  xF1
2644:  CALL   0B20
....................             delay_ms(700); 
2648:  MOVLW  04
264A:  MOVWF  xD6
264C:  MOVLW  AF
264E:  MOVWF  xF1
2650:  CALL   0B20
2654:  DECFSZ xD6,F
2656:  BRA    264C
....................             segundos=0;minutos=0;horas=0; 
2658:  CLRF   36
265A:  CLRF   37
265C:  CLRF   38
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
265E:  MOVLW  1E
2660:  MOVWF  xF1
2662:  CALL   0B20
2666:  MOVLW  01
2668:  MOVWF  1C
266A:  CLRF   43
266C:  MOVLW  02
266E:  MOVWF  1F
2670:  MOVWF  21
2672:  MOVLW  0C
2674:  MOVWF  xEB
2676:  CALL   0CA8
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
267A:  BSF    F96.1
267C:  BTFSS  F84.1
267E:  BRA    26F0
....................          delay_ms(20); 
2680:  MOVLW  14
2682:  MOVWF  xF1
2684:  CALL   0B20
....................          if(RIGHT){ 
2688:  BSF    F96.1
268A:  BTFSS  F84.1
268C:  BRA    26F0
....................             flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro);delay_ms(20); 
268E:  BTG    42.2
2690:  MOVLW  00
2692:  BTFSC  42.2
2694:  MOVLW  01
2696:  MOVWF  xD6
2698:  MOVLW  49
269A:  MOVWF  FA9
269C:  MOVFF  D6,FA8
26A0:  BCF    FA6.6
26A2:  BCF    FA6.7
26A4:  BSF    FA6.2
26A6:  MOVF   FF2,W
26A8:  MOVWF  00
26AA:  BCF    FF2.7
26AC:  MOVLB  F
26AE:  MOVLW  55
26B0:  MOVWF  FA7
26B2:  MOVLW  AA
26B4:  MOVWF  FA7
26B6:  BSF    FA6.1
26B8:  BTFSC  FA6.1
26BA:  BRA    26B8
26BC:  BCF    FA6.2
26BE:  MOVF   00,W
26C0:  IORWF  FF2,F
26C2:  MOVLW  14
26C4:  MOVLB  0
26C6:  MOVWF  xF1
26C8:  CALL   0B20
....................             delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
26CC:  MOVLW  02
26CE:  MOVWF  xD6
26D0:  MOVLW  FA
26D2:  MOVWF  xF1
26D4:  CALL   0B20
26D8:  DECFSZ xD6,F
26DA:  BRA    26D0
26DC:  MOVLW  01
26DE:  MOVWF  1C
26E0:  CLRF   43
26E2:  MOVLW  02
26E4:  MOVWF  1F
26E6:  MOVWF  21
26E8:  MOVLW  0C
26EA:  MOVWF  xEB
26EC:  CALL   0CA8
....................          } 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
26F0:  BSF    F96.2
26F2:  BTFSS  F84.2
26F4:  BRA    2730
....................          delay_ms(20); 
26F6:  MOVLW  14
26F8:  MOVWF  xF1
26FA:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
26FE:  BSF    F96.2
2700:  BTFSS  F84.2
2702:  BRA    272E
2704:  BTFSC  41.7
2706:  BRA    272E
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2708:  BSF    41.7
270A:  MOVLW  02
270C:  MOVWF  xD6
270E:  MOVLW  FA
2710:  MOVWF  xF1
2712:  CALL   0B20
2716:  DECFSZ xD6,F
2718:  BRA    270E
271A:  MOVLW  01
271C:  MOVWF  1C
271E:  CLRF   43
2720:  MOVLW  02
2722:  MOVWF  1F
2724:  MOVWF  21
2726:  MOVLW  0C
2728:  MOVWF  xEB
272A:  CALL   0CA8
....................          } 
....................       }else{ 
272E:  BRA    2732
....................          Flanco3 = 0; 
2730:  BCF    41.7
....................       } 
.................... } 
2732:  GOTO   4A40 (RETURN)
....................  
.................... void MenuSetpoint(){ 
....................    lcd_gotoxy(1,2); 
....................       printf(lcd_putc," Setpoint de  Flujo "); 
....................       lcd_gotoxy(1,3); 
....................       printf(lcd_putc,"       %2.2f   ",setpoint); 
....................     
....................       if(setpoint>2.0) 
....................          setpoint=2.0; 
....................     
....................       if(setpoint<0.5) 
....................          setpoint=0.5; 
....................     
....................       if(UP){//Si oprime hacia arriba 
....................          delay_ms(20); 
....................          if(UP && Flanco == 0) { 
....................             setpoint+=0.1;Flanco = 1; 
....................          } 
....................       }else{ 
....................          Flanco = 0; 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
....................          delay_ms(20); 
....................          if(DOWN && Flanco2 == 0) { 
....................             setpoint-=0.1;Flanco2 = 1; 
....................          } 
....................       }else{ 
....................          Flanco2 = 0; 
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
....................          delay_ms(20); 
....................          if(RIGHT && Flanco1 == 0){ 
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................             Temporal=setpoint; 
....................             Entero=(int)setpoint; 
....................             Temporal=Temporal-Entero; 
....................             Temporal2=Temporal*10.0; 
....................             Decimal2=(int8)Temporal2; 
....................             write_eeprom(40,Entero);delay_ms(20); 
....................             write_eeprom(41,Decimal2);delay_ms(20);//Guardar valor de Setpoint en eeprom 
....................             MensajeGuardado(); 
....................          } 
....................       }else{ 
....................          Flanco1 = 0; 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
....................          delay_ms(20); 
....................          if(LEFT && Flanco3 == 0) { 
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
....................          } 
....................       }else{ 
....................          Flanco3 = 0; 
....................       }     
.................... } 
....................  
.................... void MenuAlarma(){ 
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
*
2388:  BTG    41.2
238A:  BSF    41.5
238C:  MOVLW  01
238E:  MOVWF  1C
2390:  CLRF   43
....................                        
....................             if(estadoalarma==1){ 
2392:  BTFSS  41.2
2394:  BRA    23F0
....................                estadoalarma=1; 
2396:  BSF    41.2
....................                lcd_gotoxy(1,1); 
2398:  MOVLW  01
239A:  MOVWF  xEC
239C:  MOVWF  xED
239E:  CALL   0C36
....................                printf(lcd_putc,"                    "); 
23A2:  MOVLW  24
23A4:  MOVWF  FF6
23A6:  MOVLW  03
23A8:  MOVWF  FF7
23AA:  RCALL  1BE2
....................                lcd_gotoxy(1,2); 
23AC:  MOVLW  01
23AE:  MOVWF  xEC
23B0:  MOVLW  02
23B2:  MOVWF  xED
23B4:  CALL   0C36
....................                printf(lcd_putc,"        Activo      "); 
23B8:  MOVLW  3A
23BA:  MOVWF  FF6
23BC:  MOVLW  03
23BE:  MOVWF  FF7
23C0:  RCALL  1BE2
....................                lcd_gotoxy(1,3); 
23C2:  MOVLW  01
23C4:  MOVWF  xEC
23C6:  MOVLW  03
23C8:  MOVWF  xED
23CA:  CALL   0C36
....................                printf(lcd_putc,"        Alarma      "); 
23CE:  MOVLW  50
23D0:  MOVWF  FF6
23D2:  MOVLW  03
23D4:  MOVWF  FF7
23D6:  RCALL  1BE2
....................                lcd_gotoxy(1,4); 
23D8:  MOVLW  01
23DA:  MOVWF  xEC
23DC:  MOVLW  04
23DE:  MOVWF  xED
23E0:  CALL   0C36
....................                printf(lcd_putc,"                    "); 
23E4:  MOVLW  66
23E6:  MOVWF  FF6
23E8:  MOVLW  03
23EA:  MOVWF  FF7
23EC:  CALL   1BE2
....................             } 
....................                 
....................             if(estadoalarma==0){ 
23F0:  BTFSC  41.2
23F2:  BRA    2454
....................                estadoalarma=0; 
23F4:  BCF    41.2
....................                lcd_gotoxy(1,1); 
23F6:  MOVLW  01
23F8:  MOVWF  xEC
23FA:  MOVWF  xED
23FC:  CALL   0C36
....................                printf(lcd_putc,"                    "); 
2400:  MOVLW  7C
2402:  MOVWF  FF6
2404:  MOVLW  03
2406:  MOVWF  FF7
2408:  CALL   1BE2
....................                lcd_gotoxy(1,2); 
240C:  MOVLW  01
240E:  MOVWF  xEC
2410:  MOVLW  02
2412:  MOVWF  xED
2414:  CALL   0C36
....................                printf(lcd_putc,"      Desactivo     "); 
2418:  MOVLW  92
241A:  MOVWF  FF6
241C:  MOVLW  03
241E:  MOVWF  FF7
2420:  CALL   1BE2
....................                lcd_gotoxy(1,3); 
2424:  MOVLW  01
2426:  MOVWF  xEC
2428:  MOVLW  03
242A:  MOVWF  xED
242C:  CALL   0C36
....................                printf(lcd_putc,"       Alarma       "); 
2430:  MOVLW  A8
2432:  MOVWF  FF6
2434:  MOVLW  03
2436:  MOVWF  FF7
2438:  CALL   1BE2
....................                lcd_gotoxy(1,4); 
243C:  MOVLW  01
243E:  MOVWF  xEC
2440:  MOVLW  04
2442:  MOVWF  xED
2444:  CALL   0C36
....................                printf(lcd_putc,"                    "); 
2448:  MOVLW  BE
244A:  MOVWF  FF6
244C:  MOVLW  03
244E:  MOVWF  FF7
2450:  CALL   1BE2
....................             } 
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2454:  MOVLW  00
2456:  BTFSC  41.2
2458:  MOVLW  01
245A:  MOVWF  xD6
245C:  MOVLW  05
245E:  MOVWF  FA9
2460:  MOVFF  D6,FA8
2464:  BCF    FA6.6
2466:  BCF    FA6.7
2468:  BSF    FA6.2
246A:  MOVF   FF2,W
246C:  MOVWF  00
246E:  BCF    FF2.7
2470:  MOVLB  F
2472:  MOVLW  55
2474:  MOVWF  FA7
2476:  MOVLW  AA
2478:  MOVWF  FA7
247A:  BSF    FA6.1
247C:  BTFSC  FA6.1
247E:  BRA    247C
2480:  BCF    FA6.2
2482:  MOVF   00,W
2484:  IORWF  FF2,F
2486:  MOVLW  04
2488:  MOVLB  0
248A:  MOVWF  xD6
248C:  MOVLW  FA
248E:  MOVWF  xF1
2490:  CALL   0B20
2494:  DECFSZ xD6,F
2496:  BRA    248C
2498:  MOVLW  02
249A:  MOVWF  1F
249C:  MOVWF  21
249E:  MOVLW  0C
24A0:  MOVWF  xEB
24A2:  CALL   0CA8
.................... } 
24A6:  GOTO   4A36 (RETURN)
....................  
.................... void MenuMedia(){ 
....................    lcd_gotoxy(1,2); 
*
2FAE:  MOVLW  01
2FB0:  MOVWF  xEC
2FB2:  MOVLW  02
2FB4:  MOVWF  xED
2FB6:  CALL   0C36
....................       printf(lcd_putc,"     Media Movil    "); 
2FBA:  MOVLW  D4
2FBC:  MOVWF  FF6
2FBE:  MOVLW  03
2FC0:  MOVWF  FF7
2FC2:  CALL   1BE2
....................       lcd_gotoxy(1,3); 
2FC6:  MOVLW  01
2FC8:  MOVWF  xEC
2FCA:  MOVLW  03
2FCC:  MOVWF  xED
2FCE:  CALL   0C36
....................       printf(lcd_putc,"       %02i   ",MediaMovil); 
2FD2:  MOVLW  EA
2FD4:  MOVWF  FF6
2FD6:  MOVLW  03
2FD8:  MOVWF  FF7
2FDA:  MOVLW  07
2FDC:  MOVWF  xDE
2FDE:  CALL   1C04
2FE2:  MOVFF  2F,D7
2FE6:  MOVLW  01
2FE8:  MOVWF  xD8
2FEA:  RCALL  2E5A
2FEC:  MOVLW  20
2FEE:  MOVWF  xEB
2FF0:  CALL   0CA8
2FF4:  MOVLW  20
2FF6:  MOVWF  xEB
2FF8:  CALL   0CA8
2FFC:  MOVLW  20
2FFE:  MOVWF  xEB
3000:  CALL   0CA8
....................        
....................       if(MediaMovil>12) 
3004:  MOVF   2F,W
3006:  SUBLW  0C
3008:  BC    300E
....................          MediaMovil=12; 
300A:  MOVLW  0C
300C:  MOVWF  2F
....................     
....................       if(MediaMovil<1) 
300E:  MOVF   2F,F
3010:  BNZ   3016
....................          MediaMovil=1; 
3012:  MOVLW  01
3014:  MOVWF  2F
....................     
....................       if(UP){//Si oprime hacia arriba 
3016:  BSF    F92.5
3018:  BTFSS  F80.5
301A:  BRA    303E
....................          delay_ms(20); 
301C:  MOVLW  14
301E:  MOVWF  xF1
3020:  CALL   0B20
....................          if(UP && Flanco == 0) { 
3024:  BSF    F92.5
3026:  BTFSS  F80.5
3028:  BRA    303C
302A:  BTFSC  41.4
302C:  BRA    303C
....................             MediaMovil+=1;Flanco = 1;delay_ms(30); 
302E:  MOVLW  01
3030:  ADDWF  2F,F
3032:  BSF    41.4
3034:  MOVLW  1E
3036:  MOVWF  xF1
3038:  CALL   0B20
....................          } 
....................       }else{ 
303C:  BRA    3040
....................          Flanco = 0; 
303E:  BCF    41.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3040:  BSF    F96.0
3042:  BTFSS  F84.0
3044:  BRA    3068
....................          delay_ms(20); 
3046:  MOVLW  14
3048:  MOVWF  xF1
304A:  CALL   0B20
....................          if(DOWN && Flanco2 == 0){ 
304E:  BSF    F96.0
3050:  BTFSS  F84.0
3052:  BRA    3066
3054:  BTFSC  41.6
3056:  BRA    3066
....................             MediaMovil-=1;Flanco2 = 1;delay_ms(30); 
3058:  MOVLW  01
305A:  SUBWF  2F,F
305C:  BSF    41.6
305E:  MOVLW  1E
3060:  MOVWF  xF1
3062:  CALL   0B20
....................          } 
....................       }else{ 
3066:  BRA    306A
....................          Flanco2 = 0; 
3068:  BCF    41.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
306A:  BSF    F96.1
306C:  BTFSS  F84.1
306E:  BRA    30E2
....................          delay_ms(20); 
3070:  MOVLW  14
3072:  MOVWF  xF1
3074:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
3078:  BSF    F96.1
307A:  BTFSS  F84.1
307C:  BRA    30E0
307E:  BTFSC  41.5
3080:  BRA    30E0
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3082:  MOVLW  01
3084:  MOVWF  1C
3086:  CLRF   43
3088:  MOVLW  02
308A:  MOVWF  1F
308C:  MOVWF  21
308E:  MOVLW  0B
3090:  MOVWF  1E
3092:  MOVLW  02
3094:  MOVWF  xD6
3096:  MOVLW  FA
3098:  MOVWF  xF1
309A:  CALL   0B20
309E:  DECFSZ xD6,F
30A0:  BRA    3096
30A2:  MOVLW  0C
30A4:  MOVWF  xEB
30A6:  CALL   0CA8
....................             write_eeprom(42,MediaMovil);delay_ms(20);//Guardar valor de Setpoint en eeprom 
30AA:  MOVLW  2A
30AC:  MOVWF  FA9
30AE:  MOVFF  2F,FA8
30B2:  BCF    FA6.6
30B4:  BCF    FA6.7
30B6:  BSF    FA6.2
30B8:  MOVF   FF2,W
30BA:  MOVWF  00
30BC:  BCF    FF2.7
30BE:  MOVLB  F
30C0:  MOVLW  55
30C2:  MOVWF  FA7
30C4:  MOVLW  AA
30C6:  MOVWF  FA7
30C8:  BSF    FA6.1
30CA:  BTFSC  FA6.1
30CC:  BRA    30CA
30CE:  BCF    FA6.2
30D0:  MOVF   00,W
30D2:  IORWF  FF2,F
30D4:  MOVLW  14
30D6:  MOVLB  0
30D8:  MOVWF  xF1
30DA:  CALL   0B20
....................             MensajeGuardado(); 
30DE:  RCALL  2F2E
....................          } 
....................       }else{ 
30E0:  BRA    30E4
....................          Flanco1 = 0; 
30E2:  BCF    41.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
30E4:  BSF    F96.2
30E6:  BTFSS  F84.2
30E8:  BRA    3126
....................          delay_ms(20); 
30EA:  MOVLW  14
30EC:  MOVWF  xF1
30EE:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
30F2:  BSF    F96.2
30F4:  BTFSS  F84.2
30F6:  BRA    3124
30F8:  BTFSC  41.7
30FA:  BRA    3124
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
30FC:  MOVLW  01
30FE:  MOVWF  1C
3100:  CLRF   43
3102:  MOVLW  02
3104:  MOVWF  1F
3106:  MOVWF  21
3108:  MOVLW  0B
310A:  MOVWF  1E
310C:  MOVLW  02
310E:  MOVWF  xD6
3110:  MOVLW  FA
3112:  MOVWF  xF1
3114:  CALL   0B20
3118:  DECFSZ xD6,F
311A:  BRA    3110
311C:  MOVLW  0C
311E:  MOVWF  xEB
3120:  CALL   0CA8
....................          } 
....................       }else{ 
3124:  BRA    3128
....................          Flanco3 = 0; 
3126:  BCF    41.7
....................       } 
.................... } 
3128:  GOTO   4A9C (RETURN)
....................  
.................... void MenuPuntoCero(){ 
....................    lcd_gotoxy(1,1); 
*
34EC:  MOVLW  01
34EE:  MOVWF  xEC
34F0:  MOVWF  xED
34F2:  CALL   0C36
....................       printf(lcd_putc,"  Zero Point Config "); 
34F6:  MOVLW  FA
34F8:  MOVWF  FF6
34FA:  MOVLW  03
34FC:  MOVWF  FF7
34FE:  CALL   1BE2
....................       lcd_gotoxy(1,2); 
3502:  MOVLW  01
3504:  MOVWF  xEC
3506:  MOVLW  02
3508:  MOVWF  xED
350A:  CALL   0C36
....................       printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
350E:  MOVLW  10
3510:  MOVWF  FF6
3512:  MOVLW  04
3514:  MOVWF  FF7
3516:  MOVLW  08
3518:  MOVWF  xDE
351A:  CALL   1C04
351E:  MOVLW  01
3520:  MOVWF  FE9
3522:  MOVFF  74,E1
3526:  MOVFF  73,E0
352A:  MOVFF  72,DF
352E:  MOVFF  71,DE
3532:  MOVWF  xE2
3534:  RCALL  32D8
3536:  MOVLW  1D
3538:  MOVWF  FF6
353A:  MOVLW  04
353C:  MOVWF  FF7
353E:  MOVLW  08
3540:  MOVWF  xDE
3542:  CALL   1C04
....................       lcd_gotoxy(1,3); 
3546:  MOVLW  01
3548:  MOVWF  xEC
354A:  MOVLW  03
354C:  MOVWF  xED
354E:  CALL   0C36
....................       printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
3552:  CLRF   xDA
3554:  RCALL  345E
3556:  MOVFF  00,D6
355A:  MOVFF  01,D7
355E:  MOVFF  02,D8
3562:  MOVFF  03,D9
3566:  MOVLW  5A
3568:  MOVWF  xEB
356A:  CALL   0CA8
356E:  MOVLW  46
3570:  MOVWF  xEB
3572:  CALL   0CA8
3576:  MOVLW  3D
3578:  MOVWF  xEB
357A:  CALL   0CA8
357E:  MOVLW  01
3580:  MOVWF  FE9
3582:  MOVFF  56,E1
3586:  MOVFF  55,E0
358A:  MOVFF  54,DF
358E:  MOVFF  53,DE
3592:  CLRF   xE2
3594:  RCALL  32D8
3596:  MOVLW  2E
3598:  MOVWF  FF6
359A:  MOVLW  04
359C:  MOVWF  FF7
359E:  MOVLW  05
35A0:  MOVWF  xDE
35A2:  CALL   1C04
35A6:  MOVLW  01
35A8:  MOVWF  FE9
35AA:  MOVFF  D9,E1
35AE:  MOVFF  D8,E0
35B2:  MOVFF  D7,DF
35B6:  MOVFF  D6,DE
35BA:  CLRF   xE2
35BC:  RCALL  32D8
....................       lcd_gotoxy(1,4); 
35BE:  MOVLW  01
35C0:  MOVWF  xEC
35C2:  MOVLW  04
35C4:  MOVWF  xED
35C6:  CALL   0C36
....................       printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
35CA:  MOVLW  3A
35CC:  MOVWF  FF6
35CE:  MOVLW  04
35D0:  MOVWF  FF7
35D2:  MOVLW  0C
35D4:  MOVWF  xDE
35D6:  CALL   1C04
35DA:  MOVLW  01
35DC:  MOVWF  FE9
35DE:  MOVFF  9C,E1
35E2:  MOVFF  9B,E0
35E6:  MOVFF  9A,DF
35EA:  MOVFF  99,DE
35EE:  CLRF   xE2
35F0:  RCALL  32D8
....................      
....................       if(RIGHT){// Si oprime derecha 
35F2:  BSF    F96.1
35F4:  BTFSS  F84.1
35F6:  BRA    37DC
....................          delay_ms(20); 
35F8:  MOVLW  14
35FA:  MOVWF  xF1
35FC:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
3600:  BSF    F96.1
3602:  BTFSS  F84.1
3604:  BRA    37DA
3606:  BTFSC  41.5
3608:  BRA    37DA
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
360A:  MOVLW  01
360C:  MOVWF  1C
360E:  CLRF   43
3610:  MOVLW  02
3612:  MOVWF  1F
3614:  MOVWF  21
3616:  MOVLW  0B
3618:  MOVWF  1E
361A:  MOVLW  02
361C:  MOVWF  xD6
361E:  MOVLW  FA
3620:  MOVWF  xF1
3622:  CALL   0B20
3626:  DECFSZ xD6,F
3628:  BRA    361E
362A:  MOVLW  0C
362C:  MOVWF  xEB
362E:  CALL   0CA8
....................             Diferencia=zero_fabrica-sensores(0); 
3632:  CLRF   xDA
3634:  RCALL  345E
3636:  MOVFF  FEA,D7
363A:  MOVFF  FE9,D6
363E:  BSF    FD8.1
3640:  MOVFF  56,E0
3644:  MOVFF  55,DF
3648:  MOVFF  54,DE
364C:  MOVFF  53,DD
3650:  MOVFF  03,E4
3654:  MOVFF  02,E3
3658:  MOVFF  01,E2
365C:  MOVFF  00,E1
3660:  CALL   0EE4
3664:  MOVFF  D7,FEA
3668:  MOVFF  D6,FE9
366C:  MOVFF  03,9C
3670:  MOVFF  02,9B
3674:  MOVFF  01,9A
3678:  MOVFF  00,99
....................              
....................             if(Diferencia>=0){ 
367C:  CLRF   xDD
367E:  CLRF   xDC
3680:  CLRF   xDB
3682:  CLRF   xDA
3684:  MOVFF  9C,E1
3688:  MOVFF  9B,E0
368C:  MOVFF  9A,DF
3690:  MOVFF  99,DE
3694:  CALL   15A2
3698:  BC    369C
369A:  BNZ   36D4
....................                negativo=10;write_eeprom(50,negativo);delay_ms(20); 
369C:  MOVLW  0A
369E:  MOVWF  30
36A0:  MOVLW  32
36A2:  MOVWF  FA9
36A4:  MOVFF  30,FA8
36A8:  BCF    FA6.6
36AA:  BCF    FA6.7
36AC:  BSF    FA6.2
36AE:  MOVF   FF2,W
36B0:  MOVWF  00
36B2:  BCF    FF2.7
36B4:  MOVLB  F
36B6:  MOVLW  55
36B8:  MOVWF  FA7
36BA:  MOVLW  AA
36BC:  MOVWF  FA7
36BE:  BSF    FA6.1
36C0:  BTFSC  FA6.1
36C2:  BRA    36C0
36C4:  BCF    FA6.2
36C6:  MOVF   00,W
36C8:  IORWF  FF2,F
36CA:  MOVLW  14
36CC:  MOVLB  0
36CE:  MOVWF  xF1
36D0:  CALL   0B20
....................             } 
....................             if(Diferencia<0){ 
36D4:  MOVFF  9C,DD
36D8:  MOVFF  9B,DC
36DC:  MOVFF  9A,DB
36E0:  MOVFF  99,DA
36E4:  CLRF   xE1
36E6:  CLRF   xE0
36E8:  CLRF   xDF
36EA:  CLRF   xDE
36EC:  CALL   15A2
36F0:  BNC   372A
....................                negativo=20;write_eeprom(50,negativo);delay_ms(20); 
36F2:  MOVLW  14
36F4:  MOVWF  30
36F6:  MOVLW  32
36F8:  MOVWF  FA9
36FA:  MOVFF  30,FA8
36FE:  BCF    FA6.6
3700:  BCF    FA6.7
3702:  BSF    FA6.2
3704:  MOVF   FF2,W
3706:  MOVWF  00
3708:  BCF    FF2.7
370A:  MOVLB  F
370C:  MOVLW  55
370E:  MOVWF  FA7
3710:  MOVLW  AA
3712:  MOVWF  FA7
3714:  BSF    FA6.1
3716:  BTFSC  FA6.1
3718:  BRA    3716
371A:  BCF    FA6.2
371C:  MOVF   00,W
371E:  IORWF  FF2,F
3720:  MOVLW  14
3722:  MOVLB  0
3724:  MOVWF  xF1
3726:  CALL   0B20
....................             } 
....................             Diferencia=abs(Diferencia); 
372A:  MOVFF  99,00
372E:  MOVFF  9A,01
3732:  MOVFF  9B,02
3736:  MOVFF  9C,03
373A:  BCF    01.7
373C:  MOVFF  9C,9C
3740:  MOVFF  9B,9B
3744:  MOVFF  01,9A
3748:  MOVFF  99,99
....................             Dif16=(int16)Diferencia; 
374C:  MOVFF  9C,D9
3750:  MOVFF  9B,D8
3754:  MOVFF  9A,D7
3758:  MOVFF  99,D6
375C:  RCALL  34B4
375E:  MOVFF  02,5F
3762:  MOVFF  01,5E
....................              
....................             write_eeprom(60,make8(Dif16,0));delay_ms(20); 
3766:  MOVFF  5E,D6
376A:  MOVLW  3C
376C:  MOVWF  FA9
376E:  MOVFF  D6,FA8
3772:  BCF    FA6.6
3774:  BCF    FA6.7
3776:  BSF    FA6.2
3778:  MOVF   FF2,W
377A:  MOVWF  00
377C:  BCF    FF2.7
377E:  MOVLB  F
3780:  MOVLW  55
3782:  MOVWF  FA7
3784:  MOVLW  AA
3786:  MOVWF  FA7
3788:  BSF    FA6.1
378A:  BTFSC  FA6.1
378C:  BRA    378A
378E:  BCF    FA6.2
3790:  MOVF   00,W
3792:  IORWF  FF2,F
3794:  MOVLW  14
3796:  MOVLB  0
3798:  MOVWF  xF1
379A:  CALL   0B20
....................             write_eeprom(61,make8(Dif16,1));delay_ms(20);//Guardar valor de Setpoint en eeprom 
379E:  MOVFF  5F,D6
37A2:  MOVLW  3D
37A4:  MOVWF  FA9
37A6:  MOVFF  D6,FA8
37AA:  BCF    FA6.6
37AC:  BCF    FA6.7
37AE:  BSF    FA6.2
37B0:  MOVF   FF2,W
37B2:  MOVWF  00
37B4:  BCF    FF2.7
37B6:  MOVLB  F
37B8:  MOVLW  55
37BA:  MOVWF  FA7
37BC:  MOVLW  AA
37BE:  MOVWF  FA7
37C0:  BSF    FA6.1
37C2:  BTFSC  FA6.1
37C4:  BRA    37C2
37C6:  BCF    FA6.2
37C8:  MOVF   00,W
37CA:  IORWF  FF2,F
37CC:  MOVLW  14
37CE:  MOVLB  0
37D0:  MOVWF  xF1
37D2:  CALL   0B20
....................             MensajeGuardado(); 
37D6:  CALL   2F2E
....................          } 
....................       }else{ 
37DA:  BRA    37DE
....................          Flanco1 = 0; 
37DC:  BCF    41.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
37DE:  BSF    F96.2
37E0:  BTFSS  F84.2
37E2:  BRA    3820
....................          delay_ms(20); 
37E4:  MOVLW  14
37E6:  MOVWF  xF1
37E8:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
37EC:  BSF    F96.2
37EE:  BTFSS  F84.2
37F0:  BRA    381E
37F2:  BTFSC  41.7
37F4:  BRA    381E
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
37F6:  MOVLW  01
37F8:  MOVWF  1C
37FA:  CLRF   43
37FC:  MOVLW  02
37FE:  MOVWF  1F
3800:  MOVWF  21
3802:  MOVLW  0B
3804:  MOVWF  1E
3806:  MOVLW  02
3808:  MOVWF  xD6
380A:  MOVLW  FA
380C:  MOVWF  xF1
380E:  CALL   0B20
3812:  DECFSZ xD6,F
3814:  BRA    380A
3816:  MOVLW  0C
3818:  MOVWF  xEB
381A:  CALL   0CA8
....................          } 
....................       }else{ 
381E:  BRA    3822
....................          Flanco3 = 0; 
3820:  BCF    41.7
....................       } 
.................... } 
3822:  GOTO   4AA6 (RETURN)
....................  
.................... void MenuMantenimiento(){ 
....................    lcd_gotoxy(1,1); 
3826:  MOVLW  01
3828:  MOVWF  xEC
382A:  MOVWF  xED
382C:  CALL   0C36
....................       printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
3830:  CLRF   xDA
3832:  RCALL  345E
3834:  MOVFF  00,D6
3838:  MOVFF  01,D7
383C:  MOVFF  02,D8
3840:  MOVFF  03,D9
3844:  MOVLW  4C
3846:  MOVWF  FF6
3848:  MOVLW  04
384A:  MOVWF  FF7
384C:  MOVLW  0A
384E:  MOVWF  xDE
3850:  CALL   1C04
3854:  MOVLW  01
3856:  MOVWF  FE9
3858:  MOVFF  D9,E1
385C:  MOVFF  D8,E0
3860:  MOVFF  D7,DF
3864:  MOVFF  D6,DE
3868:  CLRF   xE2
386A:  RCALL  32D8
386C:  MOVLW  20
386E:  MOVWF  xEB
3870:  CALL   0CA8
3874:  MOVLW  20
3876:  MOVWF  xEB
3878:  CALL   0CA8
....................       lcd_gotoxy(1,2); 
387C:  MOVLW  01
387E:  MOVWF  xEC
3880:  MOVLW  02
3882:  MOVWF  xED
3884:  CALL   0C36
....................       printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
3888:  CLRF   xE0
388A:  MOVFF  2E,DF
388E:  CALL   0D54
3892:  MOVFF  00,D6
3896:  MOVFF  01,D7
389A:  MOVFF  02,D8
389E:  MOVFF  03,D9
38A2:  MOVFF  03,DD
38A6:  MOVFF  02,DC
38AA:  MOVFF  01,DB
38AE:  MOVFF  00,DA
38B2:  CLRF   xE1
38B4:  CLRF   xE0
38B6:  MOVLW  7F
38B8:  MOVWF  xDF
38BA:  MOVLW  86
38BC:  MOVWF  xDE
38BE:  CALL   0D8A
38C2:  CLRF   xEE
38C4:  CLRF   xED
38C6:  MOVLW  48
38C8:  MOVWF  xEC
38CA:  MOVLW  85
38CC:  MOVWF  xEB
38CE:  MOVFF  03,F2
38D2:  MOVFF  02,F1
38D6:  MOVFF  01,F0
38DA:  MOVFF  00,EF
38DE:  RCALL  312C
38E0:  MOVFF  00,D6
38E4:  MOVFF  01,D7
38E8:  MOVFF  02,D8
38EC:  MOVFF  03,D9
38F0:  MOVLW  01
38F2:  MOVWF  xDA
38F4:  RCALL  345E
38F6:  MOVFF  00,DA
38FA:  MOVFF  01,DB
38FE:  MOVFF  02,DC
3902:  MOVFF  03,DD
3906:  MOVLW  5E
3908:  MOVWF  FF6
390A:  MOVLW  04
390C:  MOVWF  FF7
390E:  MOVLW  05
3910:  MOVWF  xDE
3912:  CALL   1C04
3916:  MOVLW  01
3918:  MOVWF  FE9
391A:  MOVFF  D9,E1
391E:  MOVFF  D8,E0
3922:  MOVFF  D7,DF
3926:  MOVFF  D6,DE
392A:  CLRF   xE2
392C:  RCALL  32D8
392E:  MOVLW  25
3930:  MOVWF  xEB
3932:  CALL   0CA8
3936:  MOVLW  6A
3938:  MOVWF  FF6
393A:  MOVLW  04
393C:  MOVWF  FF7
393E:  MOVLW  04
3940:  MOVWF  xDE
3942:  CALL   1C04
3946:  MOVLW  01
3948:  MOVWF  FE9
394A:  MOVFF  DD,E1
394E:  MOVFF  DC,E0
3952:  MOVFF  DB,DF
3956:  MOVFF  DA,DE
395A:  CLRF   xE2
395C:  RCALL  32D8
395E:  MOVLW  20
3960:  MOVWF  xEB
3962:  CALL   0CA8
....................       lcd_gotoxy(1,3); 
3966:  MOVLW  01
3968:  MOVWF  xEC
396A:  MOVLW  03
396C:  MOVWF  xED
396E:  CALL   0C36
....................       printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
3972:  MOVLW  02
3974:  MOVWF  xDA
3976:  RCALL  345E
3978:  MOVFF  00,D6
397C:  MOVFF  01,D7
3980:  MOVFF  02,D8
3984:  MOVFF  03,D9
3988:  MOVFF  03,DD
398C:  MOVFF  02,DC
3990:  MOVFF  01,DB
3994:  MOVFF  00,DA
3998:  CLRF   xE1
399A:  MOVLW  C0
399C:  MOVWF  xE0
399E:  MOVLW  7F
39A0:  MOVWF  xDF
39A2:  MOVLW  88
39A4:  MOVWF  xDE
39A6:  CALL   0D8A
39AA:  CLRF   xEE
39AC:  CLRF   xED
39AE:  MOVLW  48
39B0:  MOVWF  xEC
39B2:  MOVLW  85
39B4:  MOVWF  xEB
39B6:  MOVFF  03,F2
39BA:  MOVFF  02,F1
39BE:  MOVFF  01,F0
39C2:  MOVFF  00,EF
39C6:  CALL   312C
39CA:  MOVFF  00,D6
39CE:  MOVFF  01,D7
39D2:  MOVFF  02,D8
39D6:  MOVFF  03,D9
39DA:  MOVLW  76
39DC:  MOVWF  FF6
39DE:  MOVLW  04
39E0:  MOVWF  FF7
39E2:  MOVLW  04
39E4:  MOVWF  xDE
39E6:  CALL   1C04
39EA:  MOVLW  01
39EC:  MOVWF  FE9
39EE:  MOVFF  74,E1
39F2:  MOVFF  73,E0
39F6:  MOVFF  72,DF
39FA:  MOVFF  71,DE
39FE:  MOVWF  xE2
3A00:  RCALL  32D8
3A02:  MOVLW  7F
3A04:  MOVWF  FF6
3A06:  MOVLW  04
3A08:  MOVWF  FF7
3A0A:  MOVLW  0A
3A0C:  MOVWF  xDE
3A0E:  CALL   1C04
3A12:  MOVLW  01
3A14:  MOVWF  FE9
3A16:  MOVFF  D9,E1
3A1A:  MOVFF  D8,E0
3A1E:  MOVFF  D7,DF
3A22:  MOVFF  D6,DE
3A26:  CLRF   xE2
3A28:  RCALL  32D8
....................       lcd_gotoxy(1,4); 
3A2A:  MOVLW  01
3A2C:  MOVWF  xEC
3A2E:  MOVLW  04
3A30:  MOVWF  xED
3A32:  CALL   0C36
....................       printf(lcd_putc,"Ajuste1= %2.1f ",Ajuste1); 
3A36:  MOVLW  90
3A38:  MOVWF  FF6
3A3A:  MOVLW  04
3A3C:  MOVWF  FF7
3A3E:  MOVLW  09
3A40:  MOVWF  xDE
3A42:  CALL   1C04
3A46:  MOVLW  01
3A48:  MOVWF  FE9
3A4A:  MOVFF  A0,E1
3A4E:  MOVFF  9F,E0
3A52:  MOVFF  9E,DF
3A56:  MOVFF  9D,DE
3A5A:  MOVWF  xE2
3A5C:  RCALL  32D8
3A5E:  MOVLW  20
3A60:  MOVWF  xEB
3A62:  CALL   0CA8
....................        
....................       if(Ajuste1>30.0) 
3A66:  CLRF   xDD
3A68:  CLRF   xDC
3A6A:  MOVLW  70
3A6C:  MOVWF  xDB
3A6E:  MOVLW  83
3A70:  MOVWF  xDA
3A72:  MOVFF  A0,E1
3A76:  MOVFF  9F,E0
3A7A:  MOVFF  9E,DF
3A7E:  MOVFF  9D,DE
3A82:  CALL   15A2
3A86:  BNC   3A90
....................          Ajuste1=0.0; 
3A88:  CLRF   xA0
3A8A:  CLRF   x9F
3A8C:  CLRF   x9E
3A8E:  CLRF   x9D
....................           
....................       if(Ajuste1<0.0) 
3A90:  MOVFF  A0,DD
3A94:  MOVFF  9F,DC
3A98:  MOVFF  9E,DB
3A9C:  MOVFF  9D,DA
3AA0:  CLRF   xE1
3AA2:  CLRF   xE0
3AA4:  CLRF   xDF
3AA6:  CLRF   xDE
3AA8:  CALL   15A2
3AAC:  BNC   3AB6
....................          {Ajuste1=0.0;} 
3AAE:  CLRF   xA0
3AB0:  CLRF   x9F
3AB2:  CLRF   x9E
3AB4:  CLRF   x9D
....................        
....................       if(UP){//Si oprime hacia arriba 
3AB6:  BSF    F92.5
3AB8:  BTFSS  F80.5
3ABA:  BRA    3B00
....................          delay_ms(50); 
3ABC:  MOVLW  32
3ABE:  MOVWF  xF1
3AC0:  CALL   0B20
....................          if(UP){ 
3AC4:  BSF    F92.5
3AC6:  BTFSS  F80.5
3AC8:  BRA    3B00
....................             Ajuste1+=0.1; 
3ACA:  BCF    FD8.1
3ACC:  MOVFF  A0,E0
3AD0:  MOVFF  9F,DF
3AD4:  MOVFF  9E,DE
3AD8:  MOVFF  9D,DD
3ADC:  MOVLW  CD
3ADE:  MOVWF  xE4
3AE0:  MOVLW  CC
3AE2:  MOVWF  xE3
3AE4:  MOVLW  4C
3AE6:  MOVWF  xE2
3AE8:  MOVLW  7B
3AEA:  MOVWF  xE1
3AEC:  CALL   0EE4
3AF0:  MOVFF  03,A0
3AF4:  MOVFF  02,9F
3AF8:  MOVFF  01,9E
3AFC:  MOVFF  00,9D
....................          } 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3B00:  BSF    F96.0
3B02:  BTFSS  F84.0
3B04:  BRA    3B4A
....................          delay_ms(50); 
3B06:  MOVLW  32
3B08:  MOVWF  xF1
3B0A:  CALL   0B20
....................          if(DOWN){ 
3B0E:  BSF    F96.0
3B10:  BTFSS  F84.0
3B12:  BRA    3B4A
....................             Ajuste1-=0.1; 
3B14:  BSF    FD8.1
3B16:  MOVFF  A0,E0
3B1A:  MOVFF  9F,DF
3B1E:  MOVFF  9E,DE
3B22:  MOVFF  9D,DD
3B26:  MOVLW  CD
3B28:  MOVWF  xE4
3B2A:  MOVLW  CC
3B2C:  MOVWF  xE3
3B2E:  MOVLW  4C
3B30:  MOVWF  xE2
3B32:  MOVLW  7B
3B34:  MOVWF  xE1
3B36:  CALL   0EE4
3B3A:  MOVFF  03,A0
3B3E:  MOVFF  02,9F
3B42:  MOVFF  01,9E
3B46:  MOVFF  00,9D
....................          } 
....................       } 
....................        
....................       if(RIGHT){// Si oprime derecha 
3B4A:  BSF    F96.1
3B4C:  BTFSS  F84.1
3B4E:  BRA    3C9C
....................          delay_ms(20); 
3B50:  MOVLW  14
3B52:  MOVWF  xF1
3B54:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
3B58:  BSF    F96.1
3B5A:  BTFSS  F84.1
3B5C:  BRA    3C9A
3B5E:  BTFSC  41.5
3B60:  BRA    3C9A
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3B62:  MOVLW  01
3B64:  MOVWF  1C
3B66:  CLRF   43
3B68:  MOVLW  02
3B6A:  MOVWF  1F
3B6C:  MOVWF  21
3B6E:  MOVLW  0B
3B70:  MOVWF  1E
3B72:  MOVLW  1E
3B74:  MOVWF  xF1
3B76:  CALL   0B20
3B7A:  MOVLW  0C
3B7C:  MOVWF  xEB
3B7E:  CALL   0CA8
....................             Temporal=Ajuste1; 
3B82:  MOVFF  A0,8C
3B86:  MOVFF  9F,8B
3B8A:  MOVFF  9E,8A
3B8E:  MOVFF  9D,89
....................             Entero=(int)Ajuste1; 
3B92:  MOVFF  A0,D9
3B96:  MOVFF  9F,D8
3B9A:  MOVFF  9E,D7
3B9E:  MOVFF  9D,D6
3BA2:  RCALL  34B4
3BA4:  MOVFF  01,28
....................             Temporal=Temporal-Entero; 
3BA8:  CLRF   xE0
3BAA:  MOVFF  28,DF
3BAE:  CALL   0D54
3BB2:  BSF    FD8.1
3BB4:  MOVFF  8C,E0
3BB8:  MOVFF  8B,DF
3BBC:  MOVFF  8A,DE
3BC0:  MOVFF  89,DD
3BC4:  MOVFF  03,E4
3BC8:  MOVFF  02,E3
3BCC:  MOVFF  01,E2
3BD0:  MOVFF  00,E1
3BD4:  CALL   0EE4
3BD8:  MOVFF  03,8C
3BDC:  MOVFF  02,8B
3BE0:  MOVFF  01,8A
3BE4:  MOVFF  00,89
....................             Temporal2=Temporal*10.0; 
3BE8:  MOVFF  8C,EE
3BEC:  MOVFF  8B,ED
3BF0:  MOVFF  8A,EC
3BF4:  MOVFF  89,EB
3BF8:  CLRF   xF2
3BFA:  CLRF   xF1
3BFC:  MOVLW  20
3BFE:  MOVWF  xF0
3C00:  MOVLW  82
3C02:  MOVWF  xEF
3C04:  CALL   312C
3C08:  MOVFF  03,90
3C0C:  MOVFF  02,8F
3C10:  MOVFF  01,8E
3C14:  MOVFF  00,8D
....................             Decimal1=(int8)Temporal2; 
3C18:  MOVFF  90,D9
3C1C:  MOVFF  8F,D8
3C20:  MOVFF  8E,D7
3C24:  MOVFF  8D,D6
3C28:  RCALL  34B4
3C2A:  MOVFF  01,29
....................             write_eeprom(25,Entero);delay_ms(20); 
3C2E:  MOVLW  19
3C30:  MOVWF  FA9
3C32:  MOVFF  28,FA8
3C36:  BCF    FA6.6
3C38:  BCF    FA6.7
3C3A:  BSF    FA6.2
3C3C:  MOVF   FF2,W
3C3E:  MOVWF  00
3C40:  BCF    FF2.7
3C42:  MOVLB  F
3C44:  MOVLW  55
3C46:  MOVWF  FA7
3C48:  MOVLW  AA
3C4A:  MOVWF  FA7
3C4C:  BSF    FA6.1
3C4E:  BTFSC  FA6.1
3C50:  BRA    3C4E
3C52:  BCF    FA6.2
3C54:  MOVF   00,W
3C56:  IORWF  FF2,F
3C58:  MOVLW  14
3C5A:  MOVLB  0
3C5C:  MOVWF  xF1
3C5E:  CALL   0B20
....................             write_eeprom(26,Decimal1);delay_ms(20); 
3C62:  MOVLW  1A
3C64:  MOVWF  FA9
3C66:  MOVFF  29,FA8
3C6A:  BCF    FA6.6
3C6C:  BCF    FA6.7
3C6E:  BSF    FA6.2
3C70:  MOVF   FF2,W
3C72:  MOVWF  00
3C74:  BCF    FF2.7
3C76:  MOVLB  F
3C78:  MOVLW  55
3C7A:  MOVWF  FA7
3C7C:  MOVLW  AA
3C7E:  MOVWF  FA7
3C80:  BSF    FA6.1
3C82:  BTFSC  FA6.1
3C84:  BRA    3C82
3C86:  BCF    FA6.2
3C88:  MOVF   00,W
3C8A:  IORWF  FF2,F
3C8C:  MOVLW  14
3C8E:  MOVLB  0
3C90:  MOVWF  xF1
3C92:  CALL   0B20
....................             MensajeGuardado(); 
3C96:  CALL   2F2E
....................          } 
....................       }else{ 
3C9A:  BRA    3C9E
....................          Flanco1 = 0; 
3C9C:  BCF    41.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3C9E:  BSF    F96.2
3CA0:  BTFSS  F84.2
3CA2:  BRA    3CE0
....................          delay_ms(20); 
3CA4:  MOVLW  14
3CA6:  MOVWF  xF1
3CA8:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
3CAC:  BSF    F96.2
3CAE:  BTFSS  F84.2
3CB0:  BRA    3CDE
3CB2:  BTFSC  41.7
3CB4:  BRA    3CDE
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3CB6:  MOVLW  01
3CB8:  MOVWF  1C
3CBA:  CLRF   43
3CBC:  MOVLW  02
3CBE:  MOVWF  1F
3CC0:  MOVWF  21
3CC2:  MOVLW  0B
3CC4:  MOVWF  1E
3CC6:  MOVLW  02
3CC8:  MOVWF  xD6
3CCA:  MOVLW  FA
3CCC:  MOVWF  xF1
3CCE:  CALL   0B20
3CD2:  DECFSZ xD6,F
3CD4:  BRA    3CCA
3CD6:  MOVLW  0C
3CD8:  MOVWF  xEB
3CDA:  CALL   0CA8
....................          } 
....................       }else{ 
3CDE:  BRA    3CE2
....................          Flanco3 = 0; 
3CE0:  BCF    41.7
....................       } 
.................... } 
3CE2:  GOTO   4AB0 (RETURN)
....................  
.................... void MenuModo(){ 
....................    lcd_gotoxy(1,1); 
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
....................  
....................    lcd_gotoxy(1,4); 
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
....................        
....................          if(UP && DOWN){ 
....................             delay_ms(20); 
....................             if(UP && DOWN){ 
....................                ModoAuto=0; 
....................                ModoManual=1; 
....................                ModoSemi=0; 
....................                Automa=10; 
....................                Semi=10; 
....................                Manual=20; 
....................             } 
....................          } 
....................           
....................          if(DOWN && RIGHT){ 
....................             delay_ms(20); 
....................             if(DOWN && RIGHT){ 
....................                ModoAuto=1; 
....................                ModoManual=0; 
....................                ModoSemi=0; 
....................                Automa=20; 
....................                Semi=10; 
....................                Manual=10; 
....................             } 
....................          } 
....................           
....................          if(UP && RIGHT){ 
....................             delay_ms(20); 
....................             if(UP && RIGHT){ 
....................                ModoAuto=0; 
....................                ModoManual=0; 
....................                ModoSemi=1; 
....................                Automa=10; 
....................                Semi=20; 
....................                Manual=10; 
....................             } 
....................          } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Manual  "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................          
....................       if(ModoAuto == 1 || Automa==20) 
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Auto   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Semi   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"  Ajuste Valor    "); 
....................          if(UP){ 
....................             delay_ms(20); 
....................             if(UP) 
....................                tmp++; 
....................          } 
....................           
....................          if(DOWN){ 
....................             delay_ms(20); 
....................             if(DOWN) 
....................                tmp--; 
....................          } 
....................           
....................          ValorSemi=tmp; 
....................          ajustar_damper(tmp); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                write_eeprom(13,tmp);delay_ms(20);ModoSemi=0;ModoAuto=0;ModoManual=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       }  
.................... } 
....................  
.................... void MenuTiempoPurga(){ 
....................    lcd_gotoxy(1,1); 
*
2736:  MOVLW  01
2738:  MOVWF  xEC
273A:  MOVWF  xED
273C:  CALL   0C36
....................       printf(lcd_putc,"     Tiempo  de      "); 
2740:  MOVLW  42
2742:  MOVWF  FF6
2744:  MOVLW  05
2746:  MOVWF  FF7
2748:  CALL   1BE2
....................       lcd_gotoxy(1,2); 
274C:  MOVLW  01
274E:  MOVWF  xEC
2750:  MOVLW  02
2752:  MOVWF  xED
2754:  CALL   0C36
....................       printf(lcd_putc,"       Purga         "); 
2758:  MOVLW  58
275A:  MOVWF  FF6
275C:  MOVLW  05
275E:  MOVWF  FF7
2760:  CALL   1BE2
....................       lcd_gotoxy(6,3); 
2764:  MOVLW  06
2766:  MOVWF  xEC
2768:  MOVLW  03
276A:  MOVWF  xED
276C:  CALL   0C36
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
2770:  MOVFF  27,DD
2774:  MOVLW  01
2776:  MOVWF  xDE
2778:  CALL   1C4C
277C:  MOVLW  3A
277E:  MOVWF  xEB
2780:  CALL   0CA8
2784:  MOVFF  3B,DD
2788:  MOVLW  01
278A:  MOVWF  xDE
278C:  CALL   1C4C
2790:  MOVLW  77
2792:  MOVWF  FF6
2794:  MOVLW  05
2796:  MOVWF  FF7
2798:  MOVLW  08
279A:  MOVWF  xDE
279C:  CALL   1C04
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
27A0:  MOVLW  06
27A2:  ADDWF  25,W
27A4:  MOVWF  xD6
27A6:  MOVWF  xEC
27A8:  MOVLW  04
27AA:  MOVWF  xED
27AC:  CALL   0C36
....................       lcd_putc(t[2]); 
27B0:  MOVFF  46,EB
27B4:  CALL   0CA8
....................        
....................       if(unidad2<1) 
27B8:  MOVF   25,F
27BA:  BNZ   27C0
....................          unidad2=1; 
27BC:  MOVLW  01
27BE:  MOVWF  25
....................       if(unidad2>3) 
27C0:  MOVF   25,W
27C2:  SUBLW  03
27C4:  BC    27CA
....................          unidad2=3;    
27C6:  MOVLW  03
27C8:  MOVWF  25
....................        
....................       if(UP){ 
27CA:  BSF    F92.5
27CC:  BTFSS  F80.5
27CE:  BRA    280A
....................          if(unidad2==1){ 
27D0:  DECFSZ 25,W
27D2:  BRA    27EC
....................             if(purga_minutos_pro<61){ 
27D4:  MOVF   27,W
27D6:  SUBLW  3C
27D8:  BNC   27EC
....................                purga_minutos_pro++;delay_ms(300); 
27DA:  INCF   27,F
27DC:  MOVLW  02
27DE:  MOVWF  xD6
27E0:  MOVLW  96
27E2:  MOVWF  xF1
27E4:  CALL   0B20
27E8:  DECFSZ xD6,F
27EA:  BRA    27E0
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
27EC:  MOVF   25,W
27EE:  SUBLW  03
27F0:  BNZ   280A
....................             if(purga_segundos_pro<60){ 
27F2:  MOVF   3B,W
27F4:  SUBLW  3B
27F6:  BNC   280A
....................                purga_segundos_pro++;delay_ms(300); 
27F8:  INCF   3B,F
27FA:  MOVLW  02
27FC:  MOVWF  xD6
27FE:  MOVLW  96
2800:  MOVWF  xF1
2802:  CALL   0B20
2806:  DECFSZ xD6,F
2808:  BRA    27FE
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
280A:  BSF    F96.0
280C:  BTFSS  F84.0
280E:  BRA    287C
....................          if(unidad2==1){ 
2810:  DECFSZ 25,W
2812:  BRA    2846
....................             if(purga_minutos_pro>1){ 
2814:  MOVF   27,W
2816:  SUBLW  01
2818:  BC    282C
....................                purga_minutos_pro--;delay_ms(300); 
281A:  DECF   27,F
281C:  MOVLW  02
281E:  MOVWF  xD6
2820:  MOVLW  96
2822:  MOVWF  xF1
2824:  CALL   0B20
2828:  DECFSZ xD6,F
282A:  BRA    2820
....................             } 
....................              
....................             if(purga_minutos_pro>60){ 
282C:  MOVF   27,W
282E:  SUBLW  3C
2830:  BC    2846
....................                purga_minutos_pro=60;delay_ms(300); 
2832:  MOVLW  3C
2834:  MOVWF  27
2836:  MOVLW  02
2838:  MOVWF  xD6
283A:  MOVLW  96
283C:  MOVWF  xF1
283E:  CALL   0B20
2842:  DECFSZ xD6,F
2844:  BRA    283A
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
2846:  MOVF   25,W
2848:  SUBLW  03
284A:  BNZ   287C
....................             if(purga_segundos_pro>0){ 
284C:  MOVF   3B,F
284E:  BZ    2862
....................                purga_segundos_pro--;delay_ms(300); 
2850:  DECF   3B,F
2852:  MOVLW  02
2854:  MOVWF  xD6
2856:  MOVLW  96
2858:  MOVWF  xF1
285A:  CALL   0B20
285E:  DECFSZ xD6,F
2860:  BRA    2856
....................             } 
....................              
....................             if(purga_segundos_pro>59){ 
2862:  MOVF   3B,W
2864:  SUBLW  3B
2866:  BC    287C
....................                purga_segundos_pro=59;delay_ms(300); 
2868:  MOVLW  3B
286A:  MOVWF  3B
286C:  MOVLW  02
286E:  MOVWF  xD6
2870:  MOVLW  96
2872:  MOVWF  xF1
2874:  CALL   0B20
2878:  DECFSZ xD6,F
287A:  BRA    2870
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
287C:  BSF    F96.1
287E:  BTFSS  F84.1
2880:  BRA    28B4
....................          if(unidad2==1){ 
2882:  DECFSZ 25,W
2884:  BRA    288C
....................             unidad2=3; 
2886:  MOVLW  03
2888:  MOVWF  25
....................          }else{ 
288A:  BRA    289C
....................             if(unidad2==3){ 
288C:  MOVF   25,W
288E:  SUBLW  03
2890:  BNZ   2898
....................                unidad2=1; 
2892:  MOVLW  01
2894:  MOVWF  25
....................             }else{ 
2896:  BRA    289C
....................                unidad2=3; 
2898:  MOVLW  03
289A:  MOVWF  25
....................             } 
....................          } 
....................          delay_ms(500); 
289C:  MOVLW  02
289E:  MOVWF  xD6
28A0:  MOVLW  FA
28A2:  MOVWF  xF1
28A4:  CALL   0B20
28A8:  DECFSZ xD6,F
28AA:  BRA    28A0
....................          printf(lcd_putc,"\f"); 
28AC:  MOVLW  0C
28AE:  MOVWF  xEB
28B0:  CALL   0CA8
....................       } 
....................        
....................       if(LEFT) 
28B4:  BSF    F96.2
28B6:  BTFSS  F84.2
28B8:  BRA    2996
....................       { 
....................          delay_ms(200); 
28BA:  MOVLW  C8
28BC:  MOVWF  xF1
28BE:  CALL   0B20
....................          printf(lcd_putc,"\f"); 
28C2:  MOVLW  0C
28C4:  MOVWF  xEB
28C6:  CALL   0CA8
....................          lcd_gotoxy(1,2); 
28CA:  MOVLW  01
28CC:  MOVWF  xEC
28CE:  MOVLW  02
28D0:  MOVWF  xED
28D2:  CALL   0C36
....................          printf(lcd_putc,"Tiempo Almacenado"); 
28D6:  MOVLW  80
28D8:  MOVWF  FF6
28DA:  MOVLW  05
28DC:  MOVWF  FF7
28DE:  CALL   1BE2
....................          lcd_gotoxy(1,3); 
28E2:  MOVLW  01
28E4:  MOVWF  xEC
28E6:  MOVLW  03
28E8:  MOVWF  xED
28EA:  CALL   0C36
....................          printf(lcd_putc,"  Correctamente  "); 
28EE:  MOVLW  92
28F0:  MOVWF  FF6
28F2:  MOVLW  05
28F4:  MOVWF  FF7
28F6:  CALL   1BE2
....................          write_eeprom(20,purga_minutos_pro);delay_ms(30); 
28FA:  MOVLW  14
28FC:  MOVWF  FA9
28FE:  MOVFF  27,FA8
2902:  BCF    FA6.6
2904:  BCF    FA6.7
2906:  BSF    FA6.2
2908:  MOVF   FF2,W
290A:  MOVWF  00
290C:  BCF    FF2.7
290E:  MOVLB  F
2910:  MOVLW  55
2912:  MOVWF  FA7
2914:  MOVLW  AA
2916:  MOVWF  FA7
2918:  BSF    FA6.1
291A:  BTFSC  FA6.1
291C:  BRA    291A
291E:  BCF    FA6.2
2920:  MOVF   00,W
2922:  IORWF  FF2,F
2924:  MOVLW  1E
2926:  MOVLB  0
2928:  MOVWF  xF1
292A:  CALL   0B20
....................          write_eeprom(21,purga_segundos_pro);delay_ms(30); 
292E:  MOVLW  15
2930:  MOVWF  FA9
2932:  MOVFF  3B,FA8
2936:  BCF    FA6.6
2938:  BCF    FA6.7
293A:  BSF    FA6.2
293C:  MOVF   FF2,W
293E:  MOVWF  00
2940:  BCF    FF2.7
2942:  MOVLB  F
2944:  MOVLW  55
2946:  MOVWF  FA7
2948:  MOVLW  AA
294A:  MOVWF  FA7
294C:  BSF    FA6.1
294E:  BTFSC  FA6.1
2950:  BRA    294E
2952:  BCF    FA6.2
2954:  MOVF   00,W
2956:  IORWF  FF2,F
2958:  MOVLW  1E
295A:  MOVLB  0
295C:  MOVWF  xF1
295E:  CALL   0B20
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
2962:  MOVFF  27,26
2966:  MOVFF  3B,3A
....................          delay_ms(700); 
296A:  MOVLW  04
296C:  MOVWF  xD6
296E:  MOVLW  AF
2970:  MOVWF  xF1
2972:  CALL   0B20
2976:  DECFSZ xD6,F
2978:  BRA    296E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
297A:  MOVLW  1E
297C:  MOVWF  xF1
297E:  CALL   0B20
2982:  MOVLW  01
2984:  MOVWF  1C
2986:  CLRF   43
2988:  MOVLW  02
298A:  MOVWF  1F
298C:  MOVWF  21
298E:  MOVLW  0C
2990:  MOVWF  xEB
2992:  CALL   0CA8
....................       }   
.................... } 
2996:  GOTO   4A4A (RETURN)
....................  
.................... void MenuTiempoPostPurga(){ 
....................    lcd_gotoxy(1,1); 
299A:  MOVLW  01
299C:  MOVWF  xEC
299E:  MOVWF  xED
29A0:  CALL   0C36
....................       printf(lcd_putc,"     Tiempo  de      "); 
29A4:  MOVLW  A4
29A6:  MOVWF  FF6
29A8:  MOVLW  05
29AA:  MOVWF  FF7
29AC:  CALL   1BE2
....................       lcd_gotoxy(1,2); 
29B0:  MOVLW  01
29B2:  MOVWF  xEC
29B4:  MOVLW  02
29B6:  MOVWF  xED
29B8:  CALL   0C36
....................       printf(lcd_putc,"     Post-Purga      "); 
29BC:  MOVLW  BA
29BE:  MOVWF  FF6
29C0:  MOVLW  05
29C2:  MOVWF  FF7
29C4:  CALL   1BE2
....................       lcd_gotoxy(6,3); 
29C8:  MOVLW  06
29CA:  MOVWF  xEC
29CC:  MOVLW  03
29CE:  MOVWF  xED
29D0:  CALL   0C36
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
29D4:  MOVFF  3F,DD
29D8:  MOVLW  01
29DA:  MOVWF  xDE
29DC:  CALL   1C4C
29E0:  MOVLW  3A
29E2:  MOVWF  xEB
29E4:  CALL   0CA8
29E8:  MOVFF  3D,DD
29EC:  MOVLW  01
29EE:  MOVWF  xDE
29F0:  CALL   1C4C
29F4:  MOVLW  D9
29F6:  MOVWF  FF6
29F8:  MOVLW  05
29FA:  MOVWF  FF7
29FC:  MOVLW  08
29FE:  MOVWF  xDE
2A00:  CALL   1C04
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2A04:  MOVLW  06
2A06:  ADDWF  25,W
2A08:  MOVWF  xD6
2A0A:  MOVWF  xEC
2A0C:  MOVLW  04
2A0E:  MOVWF  xED
2A10:  CALL   0C36
....................       lcd_putc(t[2]); 
2A14:  MOVFF  46,EB
2A18:  CALL   0CA8
....................       if(unidad2<1) 
2A1C:  MOVF   25,F
2A1E:  BNZ   2A24
....................          unidad2=1; 
2A20:  MOVLW  01
2A22:  MOVWF  25
....................       if(unidad2>3) 
2A24:  MOVF   25,W
2A26:  SUBLW  03
2A28:  BC    2A2E
....................          unidad2=3;    
2A2A:  MOVLW  03
2A2C:  MOVWF  25
....................        
....................       if(UP) 
2A2E:  BSF    F92.5
2A30:  BTFSS  F80.5
2A32:  BRA    2A6E
....................       { 
....................          if(unidad2==1) 
2A34:  DECFSZ 25,W
2A36:  BRA    2A50
....................          { 
....................             if(ppurga_minutos_pro<61) 
2A38:  MOVF   3F,W
2A3A:  SUBLW  3C
2A3C:  BNC   2A50
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
2A3E:  INCF   3F,F
2A40:  MOVLW  02
2A42:  MOVWF  xD6
2A44:  MOVLW  96
2A46:  MOVWF  xF1
2A48:  CALL   0B20
2A4C:  DECFSZ xD6,F
2A4E:  BRA    2A44
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
2A50:  MOVF   25,W
2A52:  SUBLW  03
2A54:  BNZ   2A6E
....................          { 
....................             if(ppurga_segundos_pro<60) 
2A56:  MOVF   3D,W
2A58:  SUBLW  3B
2A5A:  BNC   2A6E
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
2A5C:  INCF   3D,F
2A5E:  MOVLW  02
2A60:  MOVWF  xD6
2A62:  MOVLW  96
2A64:  MOVWF  xF1
2A66:  CALL   0B20
2A6A:  DECFSZ xD6,F
2A6C:  BRA    2A62
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
2A6E:  BSF    F96.0
2A70:  BTFSS  F84.0
2A72:  BRA    2AE0
....................       { 
....................          if(unidad2==1) 
2A74:  DECFSZ 25,W
2A76:  BRA    2AAA
....................          { 
....................             if(ppurga_minutos_pro>1) 
2A78:  MOVF   3F,W
2A7A:  SUBLW  01
2A7C:  BC    2A90
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
2A7E:  DECF   3F,F
2A80:  MOVLW  02
2A82:  MOVWF  xD6
2A84:  MOVLW  96
2A86:  MOVWF  xF1
2A88:  CALL   0B20
2A8C:  DECFSZ xD6,F
2A8E:  BRA    2A84
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
2A90:  MOVF   3F,W
2A92:  SUBLW  3C
2A94:  BC    2AAA
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
2A96:  MOVLW  3C
2A98:  MOVWF  3F
2A9A:  MOVLW  02
2A9C:  MOVWF  xD6
2A9E:  MOVLW  96
2AA0:  MOVWF  xF1
2AA2:  CALL   0B20
2AA6:  DECFSZ xD6,F
2AA8:  BRA    2A9E
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
2AAA:  MOVF   25,W
2AAC:  SUBLW  03
2AAE:  BNZ   2AE0
....................          { 
....................             if(ppurga_segundos_pro>0) 
2AB0:  MOVF   3D,F
2AB2:  BZ    2AC6
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
2AB4:  DECF   3D,F
2AB6:  MOVLW  02
2AB8:  MOVWF  xD6
2ABA:  MOVLW  96
2ABC:  MOVWF  xF1
2ABE:  CALL   0B20
2AC2:  DECFSZ xD6,F
2AC4:  BRA    2ABA
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
2AC6:  MOVF   3D,W
2AC8:  SUBLW  3B
2ACA:  BC    2AE0
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
2ACC:  MOVLW  3B
2ACE:  MOVWF  3D
2AD0:  MOVLW  02
2AD2:  MOVWF  xD6
2AD4:  MOVLW  96
2AD6:  MOVWF  xF1
2AD8:  CALL   0B20
2ADC:  DECFSZ xD6,F
2ADE:  BRA    2AD4
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
2AE0:  BSF    F96.1
2AE2:  BTFSS  F84.1
2AE4:  BRA    2B12
....................       { 
....................          if(unidad2==1) 
2AE6:  DECFSZ 25,W
2AE8:  BRA    2AF0
....................          { 
....................             unidad2=3; 
2AEA:  MOVLW  03
2AEC:  MOVWF  25
....................          } 
....................          else 
2AEE:  BRA    2AFA
....................          { 
....................             if(unidad2==3) 
2AF0:  MOVF   25,W
2AF2:  SUBLW  03
2AF4:  BNZ   2AFA
....................             { 
....................                unidad2=1; 
2AF6:  MOVLW  01
2AF8:  MOVWF  25
....................             } 
....................          } 
....................          delay_ms(500); 
2AFA:  MOVLW  02
2AFC:  MOVWF  xD6
2AFE:  MOVLW  FA
2B00:  MOVWF  xF1
2B02:  CALL   0B20
2B06:  DECFSZ xD6,F
2B08:  BRA    2AFE
....................          printf(lcd_putc,"\f"); 
2B0A:  MOVLW  0C
2B0C:  MOVWF  xEB
2B0E:  CALL   0CA8
....................       } 
....................        
....................       if(LEFT) 
2B12:  BSF    F96.2
2B14:  BTFSS  F84.2
2B16:  BRA    2BF4
....................       { 
....................          delay_ms(200); 
2B18:  MOVLW  C8
2B1A:  MOVWF  xF1
2B1C:  CALL   0B20
....................          printf(lcd_putc,"\f"); 
2B20:  MOVLW  0C
2B22:  MOVWF  xEB
2B24:  CALL   0CA8
....................          lcd_gotoxy(1,2); 
2B28:  MOVLW  01
2B2A:  MOVWF  xEC
2B2C:  MOVLW  02
2B2E:  MOVWF  xED
2B30:  CALL   0C36
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2B34:  MOVLW  E2
2B36:  MOVWF  FF6
2B38:  MOVLW  05
2B3A:  MOVWF  FF7
2B3C:  CALL   1BE2
....................          lcd_gotoxy(1,3); 
2B40:  MOVLW  01
2B42:  MOVWF  xEC
2B44:  MOVLW  03
2B46:  MOVWF  xED
2B48:  CALL   0C36
....................          printf(lcd_putc,"  Correctamente  "); 
2B4C:  MOVLW  F4
2B4E:  MOVWF  FF6
2B50:  MOVLW  05
2B52:  MOVWF  FF7
2B54:  CALL   1BE2
....................          write_eeprom(22,ppurga_minutos_pro);delay_ms(20); 
2B58:  MOVLW  16
2B5A:  MOVWF  FA9
2B5C:  MOVFF  3F,FA8
2B60:  BCF    FA6.6
2B62:  BCF    FA6.7
2B64:  BSF    FA6.2
2B66:  MOVF   FF2,W
2B68:  MOVWF  00
2B6A:  BCF    FF2.7
2B6C:  MOVLB  F
2B6E:  MOVLW  55
2B70:  MOVWF  FA7
2B72:  MOVLW  AA
2B74:  MOVWF  FA7
2B76:  BSF    FA6.1
2B78:  BTFSC  FA6.1
2B7A:  BRA    2B78
2B7C:  BCF    FA6.2
2B7E:  MOVF   00,W
2B80:  IORWF  FF2,F
2B82:  MOVLW  14
2B84:  MOVLB  0
2B86:  MOVWF  xF1
2B88:  CALL   0B20
....................          write_eeprom(23,ppurga_segundos_pro);delay_ms(20); 
2B8C:  MOVLW  17
2B8E:  MOVWF  FA9
2B90:  MOVFF  3D,FA8
2B94:  BCF    FA6.6
2B96:  BCF    FA6.7
2B98:  BSF    FA6.2
2B9A:  MOVF   FF2,W
2B9C:  MOVWF  00
2B9E:  BCF    FF2.7
2BA0:  MOVLB  F
2BA2:  MOVLW  55
2BA4:  MOVWF  FA7
2BA6:  MOVLW  AA
2BA8:  MOVWF  FA7
2BAA:  BSF    FA6.1
2BAC:  BTFSC  FA6.1
2BAE:  BRA    2BAC
2BB0:  BCF    FA6.2
2BB2:  MOVF   00,W
2BB4:  IORWF  FF2,F
2BB6:  MOVLW  14
2BB8:  MOVLB  0
2BBA:  MOVWF  xF1
2BBC:  CALL   0B20
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
2BC0:  MOVFF  3F,3E
2BC4:  MOVFF  3D,3C
....................          delay_ms(700); 
2BC8:  MOVLW  04
2BCA:  MOVWF  xD6
2BCC:  MOVLW  AF
2BCE:  MOVWF  xF1
2BD0:  CALL   0B20
2BD4:  DECFSZ xD6,F
2BD6:  BRA    2BCC
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2BD8:  MOVLW  1E
2BDA:  MOVWF  xF1
2BDC:  CALL   0B20
2BE0:  MOVLW  01
2BE2:  MOVWF  1C
2BE4:  CLRF   43
2BE6:  MOVLW  02
2BE8:  MOVWF  1F
2BEA:  MOVWF  21
2BEC:  MOVLW  0C
2BEE:  MOVWF  xEB
2BF0:  CALL   0CA8
....................       }   
.................... } 
2BF4:  GOTO   4A54 (RETURN)
....................  
.................... void MenuPostPurga(){ 
....................    lcd_gotoxy(1,1); 
*
3F98:  MOVLW  01
3F9A:  MOVWF  xEC
3F9C:  MOVWF  xED
3F9E:  CALL   0C36
....................       printf(lcd_putc,"    !Post-Purga!    "); 
3FA2:  MOVLW  06
3FA4:  MOVWF  FF6
3FA6:  MOVLW  06
3FA8:  MOVWF  FF7
3FAA:  CALL   1BE2
....................       lcd_gotoxy(1,2); 
3FAE:  MOVLW  01
3FB0:  MOVWF  xEC
3FB2:  MOVLW  02
3FB4:  MOVWF  xED
3FB6:  CALL   0C36
....................       printf(lcd_putc,"                    "); 
3FBA:  MOVLW  1C
3FBC:  MOVWF  FF6
3FBE:  MOVLW  06
3FC0:  MOVWF  FF7
3FC2:  CALL   1BE2
....................       lcd_gotoxy(1,3); 
3FC6:  MOVLW  01
3FC8:  MOVWF  xEC
3FCA:  MOVLW  03
3FCC:  MOVWF  xED
3FCE:  CALL   0C36
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
3FD2:  MOVLW  32
3FD4:  MOVWF  FF6
3FD6:  MOVLW  06
3FD8:  MOVWF  FF7
3FDA:  MOVLW  06
3FDC:  MOVWF  xDE
3FDE:  CALL   1C04
3FE2:  MOVFF  3E,DD
3FE6:  MOVLW  01
3FE8:  MOVWF  xDE
3FEA:  CALL   1C4C
3FEE:  MOVLW  3A
3FF0:  MOVWF  xEB
3FF2:  CALL   0CA8
3FF6:  MOVFF  3C,DD
3FFA:  MOVLW  01
3FFC:  MOVWF  xDE
3FFE:  CALL   1C4C
4002:  MOVLW  20
4004:  MOVWF  xEB
4006:  CALL   0CA8
400A:  MOVLW  20
400C:  MOVWF  xEB
400E:  CALL   0CA8
....................       Motor_on; 
4012:  BSF    F8A.5
4014:  BCF    F93.5
....................            
....................       if(Lectura==1) 
4016:  BTFSS  42.6
4018:  BRA    415C
....................       { 
....................          Luz_Blanca_off; 
401A:  BCF    F8A.4
401C:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
401E:  MOVLW  02
4020:  MOVWF  xDA
4022:  CALL   345E
4026:  MOVFF  00,D6
402A:  MOVFF  01,D7
402E:  MOVFF  02,D8
4032:  MOVFF  03,D9
4036:  MOVFF  03,DD
403A:  MOVFF  02,DC
403E:  MOVFF  01,DB
4042:  MOVFF  00,DA
4046:  CLRF   xE1
4048:  CLRF   xE0
404A:  MOVLW  40
404C:  MOVWF  xDF
404E:  MOVLW  81
4050:  MOVWF  xDE
4052:  CALL   15A2
4056:  BTFSS  FD8.0
4058:  BRA    415A
405A:  MOVF   3C,F
405C:  BTFSS  FD8.2
405E:  BRA    415A
4060:  MOVF   3E,F
4062:  BTFSS  FD8.2
4064:  BRA    415A
....................          { 
....................             write_eeprom(70,segundos);delay_ms(20); 
4066:  MOVLW  46
4068:  MOVWF  FA9
406A:  MOVFF  36,FA8
406E:  BCF    FA6.6
4070:  BCF    FA6.7
4072:  BSF    FA6.2
4074:  MOVF   FF2,W
4076:  MOVWF  00
4078:  BCF    FF2.7
407A:  MOVLB  F
407C:  MOVLW  55
407E:  MOVWF  FA7
4080:  MOVLW  AA
4082:  MOVWF  FA7
4084:  BSF    FA6.1
4086:  BTFSC  FA6.1
4088:  BRA    4086
408A:  BCF    FA6.2
408C:  MOVF   00,W
408E:  IORWF  FF2,F
4090:  MOVLW  14
4092:  MOVLB  0
4094:  MOVWF  xF1
4096:  CALL   0B20
....................             write_eeprom(71,minutos);delay_ms(20); 
409A:  MOVLW  47
409C:  MOVWF  FA9
409E:  MOVFF  37,FA8
40A2:  BCF    FA6.6
40A4:  BCF    FA6.7
40A6:  BSF    FA6.2
40A8:  MOVF   FF2,W
40AA:  MOVWF  00
40AC:  BCF    FF2.7
40AE:  MOVLB  F
40B0:  MOVLW  55
40B2:  MOVWF  FA7
40B4:  MOVLW  AA
40B6:  MOVWF  FA7
40B8:  BSF    FA6.1
40BA:  BTFSC  FA6.1
40BC:  BRA    40BA
40BE:  BCF    FA6.2
40C0:  MOVF   00,W
40C2:  IORWF  FF2,F
40C4:  MOVLW  14
40C6:  MOVLB  0
40C8:  MOVWF  xF1
40CA:  CALL   0B20
....................             write_eeprom(72,horas);delay_ms(20); 
40CE:  MOVLW  48
40D0:  MOVWF  FA9
40D2:  MOVFF  38,FA8
40D6:  BCF    FA6.6
40D8:  BCF    FA6.7
40DA:  BSF    FA6.2
40DC:  MOVF   FF2,W
40DE:  MOVWF  00
40E0:  BCF    FF2.7
40E2:  MOVLB  F
40E4:  MOVLW  55
40E6:  MOVWF  FA7
40E8:  MOVLW  AA
40EA:  MOVWF  FA7
40EC:  BSF    FA6.1
40EE:  BTFSC  FA6.1
40F0:  BRA    40EE
40F2:  BCF    FA6.2
40F4:  MOVF   00,W
40F6:  IORWF  FF2,F
40F8:  MOVLW  14
40FA:  MOVLB  0
40FC:  MOVWF  xF1
40FE:  CALL   0B20
....................             printf(lcd_putc,"\f"); 
4102:  MOVLW  0C
4104:  MOVWF  xEB
4106:  CALL   0CA8
....................             lcd_gotoxy(1,2); 
410A:  MOVLW  01
410C:  MOVWF  xEC
410E:  MOVLW  02
4110:  MOVWF  xED
4112:  CALL   0C36
....................             printf(lcd_putc,"     Proceso      "); 
4116:  MOVLW  44
4118:  MOVWF  FF6
411A:  MOVLW  06
411C:  MOVWF  FF7
411E:  CALL   1BE2
....................             lcd_gotoxy(1,3); 
4122:  MOVLW  01
4124:  MOVWF  xEC
4126:  MOVLW  03
4128:  MOVWF  xED
412A:  CALL   0C36
....................             printf(lcd_putc,"    Finalizado    "); 
412E:  MOVLW  58
4130:  MOVWF  FF6
4132:  MOVLW  06
4134:  MOVWF  FF7
4136:  CALL   1BE2
....................             delay_ms(2000); 
413A:  MOVLW  08
413C:  MOVWF  xD6
413E:  MOVLW  FA
4140:  MOVWF  xF1
4142:  CALL   0B20
4146:  DECFSZ xD6,F
4148:  BRA    413E
....................             printf(lcd_putc,"\f"); 
414A:  MOVLW  0C
414C:  MOVWF  xEB
414E:  CALL   0CA8
....................             #ifdef VARIADOR 
....................             ajuste_vel(tmp); 
4152:  MOVFF  2E,D6
4156:  RCALL  3CE6
....................             #endif             
....................             reset_cpu(); 
4158:  RESET
....................          } 
....................          Lectura=0; 
415A:  BCF    42.6
....................       } 
.................... }    
415C:  GOTO   4E46 (RETURN)
....................  
.................... void MenuApagado(){ 
....................    lcd_gotoxy(1,1); 
4160:  MOVLW  01
4162:  MOVWF  xEC
4164:  MOVWF  xED
4166:  CALL   0C36
....................    printf(lcd_putc,"   Desea apagar     "); 
416A:  MOVLW  6C
416C:  MOVWF  FF6
416E:  MOVLW  06
4170:  MOVWF  FF7
4172:  CALL   1BE2
....................    lcd_gotoxy(1,2); 
4176:  MOVLW  01
4178:  MOVWF  xEC
417A:  MOVLW  02
417C:  MOVWF  xED
417E:  CALL   0C36
....................    printf(lcd_putc,"     la cabina      "); 
4182:  MOVLW  82
4184:  MOVWF  FF6
4186:  MOVLW  06
4188:  MOVWF  FF7
418A:  CALL   1BE2
....................    lcd_gotoxy(1,3); 
418E:  MOVLW  01
4190:  MOVWF  xEC
4192:  MOVLW  03
4194:  MOVWF  xED
4196:  CALL   0C36
....................    printf(lcd_putc,"   > Aceptar        "); 
419A:  MOVLW  98
419C:  MOVWF  FF6
419E:  MOVLW  06
41A0:  MOVWF  FF7
41A2:  CALL   1BE2
....................    lcd_gotoxy(1,4); 
41A6:  MOVLW  01
41A8:  MOVWF  xEC
41AA:  MOVLW  04
41AC:  MOVWF  xED
41AE:  CALL   0C36
....................    printf(lcd_putc,"   < Cancelar       "); 
41B2:  MOVLW  AE
41B4:  MOVWF  FF6
41B6:  MOVLW  06
41B8:  MOVWF  FF7
41BA:  CALL   1BE2
....................    
....................     
....................       if(RIGHT){// Si oprime derecha 
41BE:  BSF    F96.1
41C0:  BTFSS  F84.1
41C2:  BRA    41F4
....................          delay_ms(20); 
41C4:  MOVLW  14
41C6:  MOVWF  xF1
41C8:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0){ 
41CC:  BSF    F96.1
41CE:  BTFSS  F84.1
41D0:  BRA    41F2
41D2:  BTFSC  41.5
41D4:  BRA    41F2
....................             Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
41D6:  BSF    41.5
41D8:  MOVLW  1E
41DA:  MOVWF  1C
41DC:  MOVFF  24,D6
41E0:  CALL   0B10
41E4:  BCF    F8A.6
41E6:  BCF    F93.6
41E8:  MOVLW  0C
41EA:  MOVWF  xEB
41EC:  CALL   0CA8
41F0:  BSF    57.6
....................          } 
....................       }else{ 
41F2:  BRA    41F6
....................          Flanco1 = 0; 
41F4:  BCF    41.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
41F6:  BSF    F96.2
41F8:  BTFSS  F84.2
41FA:  BRA    423A
....................          delay_ms(20); 
41FC:  MOVLW  14
41FE:  MOVWF  xF1
4200:  CALL   0B20
....................          if(LEFT && Flanco3 == 0){ 
4204:  BSF    F96.2
4206:  BTFSS  F84.2
4208:  BRA    4238
420A:  BTFSC  41.7
420C:  BRA    4238
....................             Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
420E:  BSF    41.7
4210:  MOVLW  14
4212:  MOVWF  1C
4214:  CLRF   43
4216:  MOVLW  02
4218:  MOVWF  1F
421A:  MOVWF  21
421C:  MOVLW  0B
421E:  MOVWF  1E
4220:  MOVLW  02
4222:  MOVWF  xD6
4224:  MOVLW  FA
4226:  MOVWF  xF1
4228:  CALL   0B20
422C:  DECFSZ xD6,F
422E:  BRA    4224
4230:  MOVLW  0C
4232:  MOVWF  xEB
4234:  CALL   0CA8
....................          } 
....................       }else{ 
4238:  BRA    423C
....................          Flanco3 = 0; 
423A:  BCF    41.7
....................       } 
.................... } 
423C:  GOTO   4E50 (RETURN)
....................  
.................... void MenuPurga(){ 
....................    lcd_gotoxy(1,1); 
*
4618:  MOVLW  01
461A:  MOVWF  xEC
461C:  MOVWF  xED
461E:  CALL   0C36
....................       printf(lcd_putc,"      !Purga!       "); 
4622:  MOVLW  C4
4624:  MOVWF  FF6
4626:  MOVLW  06
4628:  MOVWF  FF7
462A:  CALL   1BE2
....................       lcd_gotoxy(1,2); 
462E:  MOVLW  01
4630:  MOVWF  xEC
4632:  MOVLW  02
4634:  MOVWF  xED
4636:  CALL   0C36
....................       printf(lcd_putc,"                    "); 
463A:  MOVLW  DA
463C:  MOVWF  FF6
463E:  MOVLW  06
4640:  MOVWF  FF7
4642:  CALL   1BE2
....................       lcd_gotoxy(1,3); 
4646:  MOVLW  01
4648:  MOVWF  xEC
464A:  MOVLW  03
464C:  MOVWF  xED
464E:  CALL   0C36
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
4652:  MOVLW  F0
4654:  MOVWF  FF6
4656:  MOVLW  06
4658:  MOVWF  FF7
465A:  MOVLW  06
465C:  MOVWF  xDE
465E:  CALL   1C04
4662:  MOVFF  26,DD
4666:  MOVLW  01
4668:  MOVWF  xDE
466A:  CALL   1C4C
466E:  MOVLW  3A
4670:  MOVWF  xEB
4672:  CALL   0CA8
4676:  MOVFF  3A,DD
467A:  MOVLW  01
467C:  MOVWF  xDE
467E:  CALL   1C4C
4682:  MOVLW  20
4684:  MOVWF  xEB
4686:  CALL   0CA8
468A:  MOVLW  20
468C:  MOVWF  xEB
468E:  CALL   0CA8
4692:  MOVLW  20
4694:  MOVWF  xEB
4696:  CALL   0CA8
....................         
....................       if(LEFT){ 
469A:  BSF    F96.2
469C:  BTFSS  F84.2
469E:  BRA    46BE
....................          delay_ms(1000); 
46A0:  MOVLW  04
46A2:  MOVWF  xD6
46A4:  MOVLW  FA
46A6:  MOVWF  xF1
46A8:  CALL   0B20
46AC:  DECFSZ xD6,F
46AE:  BRA    46A4
....................          if(LEFT){ 
46B0:  BSF    F96.2
46B2:  BTFSS  F84.2
46B4:  BRA    46BE
....................             tiempo_purga=0; 
46B6:  BCF    57.5
....................             EnciendeMotor();//Motor_on; 
46B8:  RCALL  3F7A
....................             Menu=20; 
46BA:  MOVLW  14
46BC:  MOVWF  1C
....................          } 
....................       } 
....................        
....................       #ifdef DAMPER 
....................       controlar_flujo(); 
....................       #endif 
....................        
....................       #ifdef VARIADOR 
....................       ajuste_vel(tmp); 
46BE:  MOVFF  2E,D6
46C2:  CALL   3CE6
....................       #endif 
....................       Motor_on; 
46C6:  BSF    F8A.5
46C8:  BCF    F93.5
....................       //EnciendeMotor(); 
....................       Luz_Blanca_off; 
46CA:  BCF    F8A.4
46CC:  BCF    F93.4
....................          
....................       if(Lectura==1){ 
46CE:  BTFSS  42.6
46D0:  BRA    46E8
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
46D2:  MOVFF  2F,D6
46D6:  RCALL  4240
46D8:  MOVFF  03,74
46DC:  MOVFF  02,73
46E0:  MOVFF  01,72
46E4:  MOVFF  00,71
....................       } 
.................... } 
46E8:  GOTO   4E5A (RETURN)
....................  
.................... void MenuCambioClave(){ 
....................    lcd_gotoxy(1,1); 
....................       printf(lcd_putc,"     Ingrese        "); 
....................       lcd_gotoxy(1,2); 
....................       printf(lcd_putc,"  Contraseña Nueva  "); 
....................       lcd_gotoxy(1,3); 
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
....................     
....................        
....................       if(UP){//Si oprime hacia arriba 
....................          delay_ms(20); 
....................          if(UP && Flanco == 0) { 
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
....................          } 
....................       }else{ 
....................          Flanco = 0; 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
....................          delay_ms(20); 
....................          if(DOWN && Flanco2 == 0) { 
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
....................          } 
....................       }else{ 
....................          Flanco2 = 0; 
....................       } 
....................     
....................       if(RIGHT){// Si oprime Derecha 
....................          delay_ms(20); 
....................          if(RIGHT && Flanco1 == 0) { 
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
....................          } 
....................       }else{ 
....................          Flanco1 = 0; 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
....................          delay_ms(20); 
....................          if(LEFT && Flanco3 == 0) { 
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
....................          } 
....................       }else{ 
....................          Flanco3 = 0; 
....................       } 
....................              
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
....................          clave[unidad-11]=9; 
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
....................          clave[unidad-11]=0; 
....................           
....................       if(unidad<11){ 
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
....................          printf(lcd_putc,"\f");unidad=11; 
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
....................       lcd_putc(t[2]); 
....................       if(unidad>14){// Si ya ingreso la nueva contraseña. 
....................          lcd_gotoxy(1,1); 
....................          printf(lcd_putc,"                    "); 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"     Contraseña     "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"     Almacenada     "); 
....................          lcd_gotoxy(1,4); 
....................          printf(lcd_putc,"                    "); 
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
....................          unidad=11; 
....................       } 
....................        
....................       if(unidad>11&&unidad<14){ 
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
....................          lcd_putc(t[1]); 
....................       } 
.................... } 
....................  
.................... void MenuVelocidad(){ 
....................       lcd_gotoxy(1,2); 
*
3CEC:  MOVLW  01
3CEE:  MOVWF  xEC
3CF0:  MOVLW  02
3CF2:  MOVWF  xED
3CF4:  CALL   0C36
....................       printf(lcd_putc,"  Velocidad Motor=  "); 
3CF8:  MOVLW  9E
3CFA:  MOVWF  FF6
3CFC:  MOVLW  07
3CFE:  MOVWF  FF7
3D00:  CALL   1BE2
....................        
....................       vel=((float)tmp/254)*100; 
3D04:  CLRF   xE0
3D06:  MOVFF  2E,DF
3D0A:  CALL   0D54
3D0E:  MOVFF  00,D6
3D12:  MOVFF  01,D7
3D16:  MOVFF  02,D8
3D1A:  MOVFF  03,D9
3D1E:  MOVFF  03,DD
3D22:  MOVFF  02,DC
3D26:  MOVFF  01,DB
3D2A:  MOVFF  00,DA
3D2E:  CLRF   xE1
3D30:  CLRF   xE0
3D32:  MOVLW  7E
3D34:  MOVWF  xDF
3D36:  MOVLW  86
3D38:  MOVWF  xDE
3D3A:  CALL   0D8A
3D3E:  MOVFF  00,D6
3D42:  MOVFF  01,D7
3D46:  MOVFF  02,D8
3D4A:  MOVFF  03,D9
3D4E:  MOVFF  03,EE
3D52:  MOVFF  02,ED
3D56:  MOVFF  01,EC
3D5A:  MOVFF  00,EB
3D5E:  CLRF   xF2
3D60:  CLRF   xF1
3D62:  MOVLW  48
3D64:  MOVWF  xF0
3D66:  MOVLW  85
3D68:  MOVWF  xEF
3D6A:  CALL   312C
3D6E:  MOVFF  03,1B
3D72:  MOVFF  02,1A
3D76:  MOVFF  01,19
3D7A:  MOVFF  00,18
....................       v=(int8)vel; 
3D7E:  MOVFF  1B,D9
3D82:  MOVFF  1A,D8
3D86:  MOVFF  19,D7
3D8A:  MOVFF  18,D6
3D8E:  CALL   34B4
3D92:  MOVFF  01,17
....................       lcd_gotoxy(1,3); 
3D96:  MOVLW  01
3D98:  MOVWF  xEC
3D9A:  MOVLW  03
3D9C:  MOVWF  xED
3D9E:  CALL   0C36
....................       printf(lcd_putc,"        %i%%        ",v); 
3DA2:  MOVLW  B4
3DA4:  MOVWF  FF6
3DA6:  MOVLW  07
3DA8:  MOVWF  FF7
3DAA:  MOVLW  08
3DAC:  MOVWF  xDE
3DAE:  CALL   1C04
3DB2:  MOVFF  17,D7
3DB6:  MOVLW  1F
3DB8:  MOVWF  xD8
3DBA:  CALL   2E5A
3DBE:  MOVLW  25
3DC0:  MOVWF  xEB
3DC2:  CALL   0CA8
3DC6:  MOVLW  C0
3DC8:  MOVWF  FF6
3DCA:  MOVLW  07
3DCC:  MOVWF  FF7
3DCE:  MOVLW  08
3DD0:  MOVWF  xDE
3DD2:  CALL   1C04
....................  
....................       if(tmp<1) 
3DD6:  MOVF   2E,F
3DD8:  BNZ   3DDE
....................       {tmp=1;} 
3DDA:  MOVLW  01
3DDC:  MOVWF  2E
....................     
....................       if(tmp>254) 
3DDE:  MOVF   2E,W
3DE0:  SUBLW  FE
3DE2:  BC    3DE8
....................       {tmp=254;} 
3DE4:  MOVLW  FE
3DE6:  MOVWF  2E
....................        
....................       if(UP){//Si oprime hacia arriba 
3DE8:  BSF    F92.5
3DEA:  BTFSS  F80.5
3DEC:  BRA    3E0E
....................          delay_ms(20); 
3DEE:  MOVLW  14
3DF0:  MOVWF  xF1
3DF2:  CALL   0B20
....................          if(UP) { 
3DF6:  BSF    F92.5
3DF8:  BTFSS  F80.5
3DFA:  BRA    3E0E
....................             tmp+=1;delay_ms(30); 
3DFC:  MOVLW  01
3DFE:  ADDWF  2E,F
3E00:  MOVLW  1E
3E02:  MOVWF  xF1
3E04:  CALL   0B20
....................             ajuste_vel(tmp); 
3E08:  MOVFF  2E,D6
3E0C:  RCALL  3CE6
....................          } 
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia abajo 
3E0E:  BSF    F96.0
3E10:  BTFSS  F84.0
3E12:  BRA    3E34
....................          delay_ms(20); 
3E14:  MOVLW  14
3E16:  MOVWF  xF1
3E18:  CALL   0B20
....................          if(DOWN) { 
3E1C:  BSF    F96.0
3E1E:  BTFSS  F84.0
3E20:  BRA    3E34
....................             tmp-=1;delay_ms(30); 
3E22:  MOVLW  01
3E24:  SUBWF  2E,F
3E26:  MOVLW  1E
3E28:  MOVWF  xF1
3E2A:  CALL   0B20
....................             ajuste_vel(tmp); 
3E2E:  MOVFF  2E,D6
3E32:  RCALL  3CE6
....................          } 
....................       } 
....................        
....................       if(RIGHT){//Si oprime hacia abajo 
3E34:  BSF    F96.1
3E36:  BTFSS  F84.1
3E38:  BRA    3EFE
....................          delay_ms(20); 
3E3A:  MOVLW  14
3E3C:  MOVWF  xF1
3E3E:  CALL   0B20
....................          if(RIGHT) { 
3E42:  BSF    F96.1
3E44:  BTFSS  F84.1
3E46:  BRA    3EFE
....................             ajuste_vel(tmp); 
3E48:  MOVFF  2E,D6
3E4C:  RCALL  3CE6
....................             write_eeprom(13,tmp);delay_ms(500); 
3E4E:  MOVLW  0D
3E50:  MOVWF  FA9
3E52:  MOVFF  2E,FA8
3E56:  BCF    FA6.6
3E58:  BCF    FA6.7
3E5A:  BSF    FA6.2
3E5C:  MOVF   FF2,W
3E5E:  MOVWF  00
3E60:  BCF    FF2.7
3E62:  MOVLB  F
3E64:  MOVLW  55
3E66:  MOVWF  FA7
3E68:  MOVLW  AA
3E6A:  MOVWF  FA7
3E6C:  BSF    FA6.1
3E6E:  BTFSC  FA6.1
3E70:  BRA    3E6E
3E72:  BCF    FA6.2
3E74:  MOVF   00,W
3E76:  IORWF  FF2,F
3E78:  MOVLW  02
3E7A:  MOVLB  0
3E7C:  MOVWF  xD6
3E7E:  MOVLW  FA
3E80:  MOVWF  xF1
3E82:  CALL   0B20
3E86:  DECFSZ xD6,F
3E88:  BRA    3E7E
....................             lcd_gotoxy(1,2); 
3E8A:  MOVLW  01
3E8C:  MOVWF  xEC
3E8E:  MOVLW  02
3E90:  MOVWF  xED
3E92:  CALL   0C36
....................             delay_ms(500); 
3E96:  MOVLW  02
3E98:  MOVWF  xD6
3E9A:  MOVLW  FA
3E9C:  MOVWF  xF1
3E9E:  CALL   0B20
3EA2:  DECFSZ xD6,F
3EA4:  BRA    3E9A
....................             printf(lcd_putc,"\f"); 
3EA6:  MOVLW  0C
3EA8:  MOVWF  xEB
3EAA:  CALL   0CA8
....................             lcd_gotoxy(1,2); 
3EAE:  MOVLW  01
3EB0:  MOVWF  xEC
3EB2:  MOVLW  02
3EB4:  MOVWF  xED
3EB6:  CALL   0C36
....................             printf(lcd_putc,"  Valor almacenado  "); 
3EBA:  MOVLW  CA
3EBC:  MOVWF  FF6
3EBE:  MOVLW  07
3EC0:  MOVWF  FF7
3EC2:  CALL   1BE2
....................             lcd_gotoxy(1,3); 
3EC6:  MOVLW  01
3EC8:  MOVWF  xEC
3ECA:  MOVLW  03
3ECC:  MOVWF  xED
3ECE:  CALL   0C36
....................             printf(lcd_putc,"   Correctamente   "); 
3ED2:  MOVLW  E0
3ED4:  MOVWF  FF6
3ED6:  MOVLW  07
3ED8:  MOVWF  FF7
3EDA:  CALL   1BE2
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500); 
3EDE:  MOVLW  01
3EE0:  MOVWF  1C
3EE2:  CLRF   43
3EE4:  MOVLW  02
3EE6:  MOVWF  1F
3EE8:  MOVWF  21
3EEA:  MOVLW  0B
3EEC:  MOVWF  1E
3EEE:  MOVLW  02
3EF0:  MOVWF  xD6
3EF2:  MOVLW  FA
3EF4:  MOVWF  xF1
3EF6:  CALL   0B20
3EFA:  DECFSZ xD6,F
3EFC:  BRA    3EF2
....................          } 
....................       } 
....................        
....................       if(LEFT){//Si oprime hacia abajo 
3EFE:  BSF    F96.2
3F00:  BTFSS  F84.2
3F02:  BRA    3F58
....................          delay_ms(20); 
3F04:  MOVLW  14
3F06:  MOVWF  xF1
3F08:  CALL   0B20
....................          if(LEFT) { 
3F0C:  BSF    F96.2
3F0E:  BTFSS  F84.2
3F10:  BRA    3F58
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3F12:  MOVLW  01
3F14:  MOVWF  1C
3F16:  CLRF   43
3F18:  MOVLW  02
3F1A:  MOVWF  1F
3F1C:  MOVWF  21
3F1E:  MOVLW  0B
3F20:  MOVWF  1E
3F22:  MOVLW  02
3F24:  MOVWF  xD6
3F26:  MOVLW  FA
3F28:  MOVWF  xF1
3F2A:  CALL   0B20
3F2E:  DECFSZ xD6,F
3F30:  BRA    3F26
3F32:  MOVLW  0C
3F34:  MOVWF  xEB
3F36:  CALL   0CA8
....................             tmp=read_eeprom(13); 
3F3A:  MOVFF  FF2,D6
3F3E:  BCF    FF2.7
3F40:  MOVLW  0D
3F42:  MOVWF  FA9
3F44:  BCF    FA6.6
3F46:  BCF    FA6.7
3F48:  BSF    FA6.0
3F4A:  MOVF   FA8,W
3F4C:  BTFSC  xD6.7
3F4E:  BSF    FF2.7
3F50:  MOVWF  2E
....................             ajuste_vel(tmp); 
3F52:  MOVFF  2E,D6
3F56:  RCALL  3CE6
....................          } 
....................       } 
.................... } 
3F58:  GOTO   4ABA (RETURN)
....................  
.................... void MenuServicio(){ 
....................       if(Opcion<1) 
*
2BF8:  MOVF   35,F
2BFA:  BNZ   2C00
....................          Opcion=4; 
2BFC:  MOVLW  04
2BFE:  MOVWF  35
....................       if(Opcion>4) 
2C00:  MOVF   35,W
2C02:  SUBLW  04
2C04:  BC    2C0A
....................          Opcion=1; 
2C06:  MOVLW  01
2C08:  MOVWF  35
....................           
....................       if(Opcion==1){ 
2C0A:  DECFSZ 35,W
2C0C:  BRA    2C6E
....................          lcd_gotoxy(1,1);printf(lcd_putc,">Media Movil        "); 
2C0E:  MOVLW  01
2C10:  MOVWF  xEC
2C12:  MOVWF  xED
2C14:  CALL   0C36
2C18:  MOVLW  F4
2C1A:  MOVWF  FF6
2C1C:  MOVLW  07
2C1E:  MOVWF  FF7
2C20:  CALL   1BE2
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
2C24:  MOVLW  01
2C26:  MOVWF  xEC
2C28:  MOVLW  02
2C2A:  MOVWF  xED
2C2C:  CALL   0C36
2C30:  MOVLW  0A
2C32:  MOVWF  FF6
2C34:  MOVLW  08
2C36:  MOVWF  FF7
2C38:  CALL   1BE2
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
2C3C:  MOVLW  01
2C3E:  MOVWF  xEC
2C40:  MOVLW  03
2C42:  MOVWF  xED
2C44:  CALL   0C36
2C48:  MOVLW  20
2C4A:  MOVWF  FF6
2C4C:  MOVLW  08
2C4E:  MOVWF  FF7
2C50:  CALL   1BE2
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Velocidad          "); 
2C54:  MOVLW  01
2C56:  MOVWF  xEC
2C58:  MOVLW  04
2C5A:  MOVWF  xED
2C5C:  CALL   0C36
2C60:  MOVLW  36
2C62:  MOVWF  FF6
2C64:  MOVLW  08
2C66:  MOVWF  FF7
2C68:  CALL   1BE2
....................          #endif   
....................       }else if(Opcion==2){ 
2C6C:  BRA    2D9E
2C6E:  MOVF   35,W
2C70:  SUBLW  02
2C72:  BNZ   2CD4
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
2C74:  MOVLW  01
2C76:  MOVWF  xEC
2C78:  MOVWF  xED
2C7A:  CALL   0C36
2C7E:  MOVLW  4C
2C80:  MOVWF  FF6
2C82:  MOVLW  08
2C84:  MOVWF  FF7
2C86:  CALL   1BE2
....................          lcd_gotoxy(1,2);printf(lcd_putc,">Punto Cero         "); 
2C8A:  MOVLW  01
2C8C:  MOVWF  xEC
2C8E:  MOVLW  02
2C90:  MOVWF  xED
2C92:  CALL   0C36
2C96:  MOVLW  62
2C98:  MOVWF  FF6
2C9A:  MOVLW  08
2C9C:  MOVWF  FF7
2C9E:  CALL   1BE2
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
2CA2:  MOVLW  01
2CA4:  MOVWF  xEC
2CA6:  MOVLW  03
2CA8:  MOVWF  xED
2CAA:  CALL   0C36
2CAE:  MOVLW  78
2CB0:  MOVWF  FF6
2CB2:  MOVLW  08
2CB4:  MOVWF  FF7
2CB6:  CALL   1BE2
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Velocidad          "); 
2CBA:  MOVLW  01
2CBC:  MOVWF  xEC
2CBE:  MOVLW  04
2CC0:  MOVWF  xED
2CC2:  CALL   0C36
2CC6:  MOVLW  8E
2CC8:  MOVWF  FF6
2CCA:  MOVLW  08
2CCC:  MOVWF  FF7
2CCE:  CALL   1BE2
....................          #endif   
....................       }else if(Opcion==3){ 
2CD2:  BRA    2D9E
2CD4:  MOVF   35,W
2CD6:  SUBLW  03
2CD8:  BNZ   2D3A
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
2CDA:  MOVLW  01
2CDC:  MOVWF  xEC
2CDE:  MOVWF  xED
2CE0:  CALL   0C36
2CE4:  MOVLW  A4
2CE6:  MOVWF  FF6
2CE8:  MOVLW  08
2CEA:  MOVWF  FF7
2CEC:  CALL   1BE2
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
2CF0:  MOVLW  01
2CF2:  MOVWF  xEC
2CF4:  MOVLW  02
2CF6:  MOVWF  xED
2CF8:  CALL   0C36
2CFC:  MOVLW  BA
2CFE:  MOVWF  FF6
2D00:  MOVLW  08
2D02:  MOVWF  FF7
2D04:  CALL   1BE2
....................          lcd_gotoxy(1,3);printf(lcd_putc,">Mantenimiento      "); 
2D08:  MOVLW  01
2D0A:  MOVWF  xEC
2D0C:  MOVLW  03
2D0E:  MOVWF  xED
2D10:  CALL   0C36
2D14:  MOVLW  D0
2D16:  MOVWF  FF6
2D18:  MOVLW  08
2D1A:  MOVWF  FF7
2D1C:  CALL   1BE2
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Velocidad          "); 
2D20:  MOVLW  01
2D22:  MOVWF  xEC
2D24:  MOVLW  04
2D26:  MOVWF  xED
2D28:  CALL   0C36
2D2C:  MOVLW  E6
2D2E:  MOVWF  FF6
2D30:  MOVLW  08
2D32:  MOVWF  FF7
2D34:  CALL   1BE2
....................          #endif   
....................       }else if(Opcion==4){ 
2D38:  BRA    2D9E
2D3A:  MOVF   35,W
2D3C:  SUBLW  04
2D3E:  BNZ   2D9E
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
2D40:  MOVLW  01
2D42:  MOVWF  xEC
2D44:  MOVWF  xED
2D46:  CALL   0C36
2D4A:  MOVLW  FC
2D4C:  MOVWF  FF6
2D4E:  MOVLW  08
2D50:  MOVWF  FF7
2D52:  CALL   1BE2
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
2D56:  MOVLW  01
2D58:  MOVWF  xEC
2D5A:  MOVLW  02
2D5C:  MOVWF  xED
2D5E:  CALL   0C36
2D62:  MOVLW  12
2D64:  MOVWF  FF6
2D66:  MOVLW  09
2D68:  MOVWF  FF7
2D6A:  CALL   1BE2
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
2D6E:  MOVLW  01
2D70:  MOVWF  xEC
2D72:  MOVLW  03
2D74:  MOVWF  xED
2D76:  CALL   0C36
2D7A:  MOVLW  28
2D7C:  MOVWF  FF6
2D7E:  MOVLW  09
2D80:  MOVWF  FF7
2D82:  CALL   1BE2
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc,">Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc,">Velocidad          "); 
2D86:  MOVLW  01
2D88:  MOVWF  xEC
2D8A:  MOVLW  04
2D8C:  MOVWF  xED
2D8E:  CALL   0C36
2D92:  MOVLW  3E
2D94:  MOVWF  FF6
2D96:  MOVLW  09
2D98:  MOVWF  FF7
2D9A:  CALL   1BE2
....................          #endif    
....................       } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2D9E:  BSF    F92.5
2DA0:  BTFSS  F80.5
2DA2:  BRA    2DBC
....................          delay_ms(20); 
2DA4:  MOVLW  14
2DA6:  MOVWF  xF1
2DA8:  CALL   0B20
....................          if(UP) { 
2DAC:  BSF    F92.5
2DAE:  BTFSS  F80.5
2DB0:  BRA    2DBC
....................             delay_ms(30); 
2DB2:  MOVLW  1E
2DB4:  MOVWF  xF1
2DB6:  CALL   0B20
....................             Opcion--; 
2DBA:  DECF   35,F
....................          } 
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia abajo 
2DBC:  BSF    F96.0
2DBE:  BTFSS  F84.0
2DC0:  BRA    2DDA
....................          delay_ms(20); 
2DC2:  MOVLW  14
2DC4:  MOVWF  xF1
2DC6:  CALL   0B20
....................          if(DOWN) { 
2DCA:  BSF    F96.0
2DCC:  BTFSS  F84.0
2DCE:  BRA    2DDA
....................             delay_ms(30);             
2DD0:  MOVLW  1E
2DD2:  MOVWF  xF1
2DD4:  CALL   0B20
....................             Opcion++; 
2DD8:  INCF   35,F
....................          } 
....................       } 
....................        
....................       if(RIGHT){//Si oprime hacia abajo 
2DDA:  BSF    F96.1
2DDC:  BTFSS  F84.1
2DDE:  BRA    2E1A
....................          delay_ms(20); 
2DE0:  MOVLW  14
2DE2:  MOVWF  xF1
2DE4:  CALL   0B20
....................          if(RIGHT) { 
2DE8:  BSF    F96.1
2DEA:  BTFSS  F84.1
2DEC:  BRA    2E1A
....................             if(Opcion==1){ 
2DEE:  DECFSZ 35,W
2DF0:  BRA    2DF8
....................                Menu=8; 
2DF2:  MOVLW  08
2DF4:  MOVWF  1C
....................             }else if(Opcion==2){ 
2DF6:  BRA    2E1A
2DF8:  MOVF   35,W
2DFA:  SUBLW  02
2DFC:  BNZ   2E04
....................                Menu=9; 
2DFE:  MOVLW  09
2E00:  MOVWF  1C
....................             }else if(Opcion==3){ 
2E02:  BRA    2E1A
2E04:  MOVF   35,W
2E06:  SUBLW  03
2E08:  BNZ   2E10
....................                Menu=10; 
2E0A:  MOVLW  0A
2E0C:  MOVWF  1C
....................             }else if(Opcion==4){ 
2E0E:  BRA    2E1A
2E10:  MOVF   35,W
2E12:  SUBLW  04
2E14:  BNZ   2E1A
....................                Menu=11; 
2E16:  MOVLW  0B
2E18:  MOVWF  1C
....................             } 
....................          } 
....................       } 
....................        
....................       if(LEFT){//Si oprime hacia abajo 
2E1A:  BSF    F96.2
2E1C:  BTFSS  F84.2
2E1E:  BRA    2E56
....................          delay_ms(20); 
2E20:  MOVLW  14
2E22:  MOVWF  xF1
2E24:  CALL   0B20
....................          if(LEFT) { 
2E28:  BSF    F96.2
2E2A:  BTFSS  F84.2
2E2C:  BRA    2E56
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2E2E:  MOVLW  01
2E30:  MOVWF  1C
2E32:  CLRF   43
2E34:  MOVLW  02
2E36:  MOVWF  1F
2E38:  MOVWF  21
2E3A:  MOVLW  0B
2E3C:  MOVWF  1E
2E3E:  MOVLW  02
2E40:  MOVWF  xD6
2E42:  MOVLW  FA
2E44:  MOVWF  xF1
2E46:  CALL   0B20
2E4A:  DECFSZ xD6,F
2E4C:  BRA    2E42
2E4E:  MOVLW  0C
2E50:  MOVWF  xEB
2E52:  CALL   0CA8
....................          } 
....................       } 
.................... } 
2E56:  GOTO   4A92 (RETURN)
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    #ifdef SIMU 
....................    set_timer1(60536);  // 5  ms 
....................    #else 
....................    set_timer1(5536);  // 5  ms 
*
0954:  MOVLW  15
0956:  MOVWF  FCF
0958:  MOVLW  A0
095A:  MOVWF  FCE
....................    #endif 
....................    tiempos++; 
095C:  INCF   58,F
095E:  BTFSC  FD8.2
0960:  INCF   59,F
....................    tiempos2++; 
0962:  INCF   5C,F
0964:  BTFSC  FD8.2
0966:  INCF   5D,F
....................     
....................    if(t_latencia>=3000) 
0968:  MOVF   5B,W
096A:  SUBLW  0A
096C:  BC    097A
096E:  XORLW  FF
0970:  BNZ   0978
0972:  MOVF   5A,W
0974:  SUBLW  B7
0976:  BC    097A
....................       Latencia=1; 
0978:  BSF    42.1
....................     
....................    if(flag_latencia==1) 
097A:  BTFSS  42.0
097C:  BRA    0984
....................       t_latencia++;          
097E:  INCF   5A,F
0980:  BTFSC  FD8.2
0982:  INCF   5B,F
....................     
....................    if(tiempos2>=200){ 
0984:  MOVF   5D,F
0986:  BNZ   098E
0988:  MOVF   5C,W
098A:  SUBLW  C7
098C:  BC    0994
....................       tiempos2=0;Lectura2=1; 
098E:  CLRF   5D
0990:  CLRF   5C
0992:  BSF    42.7
....................    } 
....................     
....................    if(tiempos>=200){   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
0994:  MOVF   59,F
0996:  BNZ   099E
0998:  MOVF   58,W
099A:  SUBLW  C7
099C:  BC    0A04
....................       tiempos=0;tiemporeset++; 
099E:  CLRF   59
09A0:  CLRF   58
09A2:  INCF   39,F
....................       Lectura=1; 
09A4:  BSF    42.6
....................           
....................       if(estadomv==1 && flag_filtro==1){   
09A6:  BTFSS  41.1
09A8:  BRA    09C4
09AA:  BTFSS  42.2
09AC:  BRA    09C4
....................          segundos++; 
09AE:  INCF   36,F
....................          if(segundos==60){ 
09B0:  MOVF   36,W
09B2:  SUBLW  3C
09B4:  BNZ   09BA
....................             segundos=0;minutos++; 
09B6:  CLRF   36
09B8:  INCF   37,F
....................          }  
....................          if(minutos==60){ 
09BA:  MOVF   37,W
09BC:  SUBLW  3C
09BE:  BNZ   09C4
....................             minutos=0;horas++; 
09C0:  CLRF   37
09C2:  INCF   38,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1){ 
09C4:  BTFSS  57.5
09C6:  BRA    09EA
....................          if(purga_segundos>0){ 
09C8:  MOVF   3A,F
09CA:  BZ    09D0
....................             purga_segundos--; 
09CC:  DECF   3A,F
....................          }else{ 
09CE:  BRA    09EA
....................             if(purga_minutos>0){ 
09D0:  MOVF   26,F
09D2:  BZ    09DC
....................                purga_minutos--; 
09D4:  DECF   26,F
....................                purga_segundos=59; 
09D6:  MOVLW  3B
09D8:  MOVWF  3A
....................             }else{ 
09DA:  BRA    09EA
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0; 
09DC:  BCF    57.5
....................                //Motor_on; 
....................                //EnciendeMotor(); 
....................                Menu=20; 
09DE:  MOVLW  14
09E0:  MOVWF  1C
....................                Luz_Blanca_on; 
09E2:  BSF    F8A.4
09E4:  BCF    F93.4
....................                estadomv=1; 
09E6:  BSF    41.1
....................                estadofl=1; 
09E8:  BSF    41.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1){ 
09EA:  BTFSS  57.6
09EC:  BRA    0A04
....................          if(ppurga_segundos>0){ 
09EE:  MOVF   3C,F
09F0:  BZ    09F6
....................             ppurga_segundos--; 
09F2:  DECF   3C,F
....................          }else{ 
09F4:  BRA    0A04
....................             if(ppurga_minutos>0){ 
09F6:  MOVF   3E,F
09F8:  BZ    0A02
....................                ppurga_minutos--; 
09FA:  DECF   3E,F
....................                ppurga_segundos=59; 
09FC:  MOVLW  3B
09FE:  MOVWF  3C
....................             }else{ 
0A00:  BRA    0A04
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0A02:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0A04:  BCF    F9E.0
0A06:  GOTO   0054
.................... void main () 
.................... {   
*
46EC:  CLRF   FF8
46EE:  BCF    FD0.7
46F0:  BSF    07.7
46F2:  CLRF   FEA
46F4:  CLRF   FE9
46F6:  CLRF   17
46F8:  CLRF   1B
46FA:  CLRF   1A
46FC:  CLRF   19
46FE:  CLRF   18
4700:  MOVLW  64
4702:  MOVWF  1C
4704:  MOVLW  02
4706:  MOVWF  1D
4708:  MOVLW  0B
470A:  MOVWF  1E
470C:  MOVLW  02
470E:  MOVWF  1F
4710:  MOVLW  03
4712:  MOVWF  20
4714:  MOVLW  02
4716:  MOVWF  21
4718:  MOVWF  22
471A:  MOVLW  06
471C:  MOVWF  23
471E:  MOVLW  0A
4720:  MOVWF  24
4722:  MOVLW  01
4724:  MOVWF  25
4726:  CLRF   26
4728:  CLRF   27
472A:  CLRF   28
472C:  CLRF   29
472E:  CLRF   2A
4730:  CLRF   2B
4732:  CLRF   2C
4734:  CLRF   2D
4736:  MOVLW  0A
4738:  MOVWF  2E
473A:  CLRF   2F
473C:  MOVWF  30
473E:  MOVWF  31
4740:  MOVWF  32
4742:  MOVWF  33
4744:  CLRF   34
4746:  MOVLW  01
4748:  MOVWF  35
474A:  CLRF   36
474C:  CLRF   37
474E:  CLRF   38
4750:  CLRF   39
4752:  CLRF   3A
4754:  CLRF   3B
4756:  CLRF   3C
4758:  CLRF   3D
475A:  CLRF   3E
475C:  CLRF   3F
475E:  CLRF   40
4760:  BCF    41.0
4762:  BCF    41.1
4764:  BCF    41.2
4766:  BCF    41.3
4768:  BCF    41.4
476A:  BCF    41.5
476C:  BCF    41.6
476E:  BCF    41.7
4770:  BCF    42.0
4772:  BCF    42.1
4774:  BCF    42.2
4776:  BCF    42.3
4778:  BCF    42.4
477A:  CLRF   43
477C:  CLRF   52
477E:  CLRF   51
4780:  CLRF   50
4782:  CLRF   4F
4784:  CLRF   56
4786:  CLRF   55
4788:  MOVLW  4B
478A:  MOVWF  54
478C:  MOVLW  86
478E:  MOVWF  53
4790:  BCF    42.6
4792:  BCF    42.7
4794:  BCF    57.0
4796:  BCF    57.1
4798:  BCF    57.2
479A:  BCF    57.3
479C:  BCF    57.4
479E:  BCF    57.5
47A0:  BCF    57.6
47A2:  CLRF   59
47A4:  CLRF   58
47A6:  CLRF   5B
47A8:  CLRF   5A
47AA:  CLRF   5D
47AC:  CLRF   5C
47AE:  CLRF   5F
47B0:  CLRF   5E
47B2:  MOVLW  19
47B4:  MOVWF  x64
47B6:  MOVLW  53
47B8:  MOVWF  x63
47BA:  MOVLW  18
47BC:  MOVWF  x62
47BE:  MOVLW  68
47C0:  MOVWF  x61
47C2:  MOVLW  E9
47C4:  MOVWF  x68
47C6:  MOVLW  BD
47C8:  MOVWF  x67
47CA:  MOVLW  C6
47CC:  MOVWF  x66
47CE:  MOVLW  71
47D0:  MOVWF  x65
47D2:  MOVLW  BE
47D4:  MOVWF  x6C
47D6:  MOVLW  96
47D8:  MOVWF  x6B
47DA:  MOVLW  24
47DC:  MOVWF  x6A
47DE:  MOVLW  7A
47E0:  MOVWF  x69
47E2:  MOVLW  F3
47E4:  MOVWF  x70
47E6:  MOVLW  5A
47E8:  MOVWF  x6F
47EA:  MOVLW  AB
47EC:  MOVWF  x6E
47EE:  MOVLW  81
47F0:  MOVWF  x6D
47F2:  CLRF   x74
47F4:  CLRF   x73
47F6:  CLRF   x72
47F8:  CLRF   x71
47FA:  CLRF   x78
47FC:  CLRF   x77
47FE:  CLRF   x76
4800:  CLRF   x75
4802:  CLRF   x7C
4804:  CLRF   x7B
4806:  CLRF   x7A
4808:  CLRF   x79
480A:  CLRF   x80
480C:  CLRF   x7F
480E:  CLRF   x7E
4810:  CLRF   x7D
4812:  CLRF   x84
4814:  CLRF   x83
4816:  CLRF   x82
4818:  CLRF   x81
481A:  CLRF   x88
481C:  CLRF   x87
481E:  CLRF   x86
4820:  CLRF   x85
4822:  CLRF   x8C
4824:  CLRF   x8B
4826:  CLRF   x8A
4828:  CLRF   x89
482A:  CLRF   x90
482C:  CLRF   x8F
482E:  CLRF   x8E
4830:  CLRF   x8D
4832:  CLRF   x94
4834:  CLRF   x93
4836:  CLRF   x92
4838:  CLRF   x91
483A:  CLRF   x98
483C:  CLRF   x97
483E:  CLRF   x96
4840:  CLRF   x95
4842:  CLRF   x9C
4844:  CLRF   x9B
4846:  CLRF   x9A
4848:  CLRF   x99
484A:  CLRF   xA0
484C:  CLRF   x9F
484E:  CLRF   x9E
4850:  MOVLW  7F
4852:  MOVWF  x9D
4854:  CLRF   xA4
4856:  CLRF   xA3
4858:  CLRF   xA2
485A:  CLRF   xA1
485C:  MOVLW  06
485E:  MOVWF  xD5
4860:  MOVF   FC1,W
4862:  ANDLW  C0
4864:  IORLW  0F
4866:  MOVWF  FC1
4868:  MOVLW  07
486A:  MOVWF  FB4
486C:  MOVLW  3E
486E:  MOVWF  44
4870:  MOVLW  20
4872:  MOVWF  45
4874:  MOVLW  5E
4876:  MOVWF  46
4878:  CLRF   47
487A:  CLRF   48
487C:  CLRF   49
487E:  CLRF   4A
4880:  CLRF   4B
4882:  CLRF   4C
4884:  CLRF   4D
4886:  CLRF   4E
4888:  CLRF   xA5
488A:  CLRF   xA6
488C:  CLRF   xA7
488E:  CLRF   xA8
4890:  CLRF   xA9
4892:  CLRF   xAA
4894:  CLRF   xAB
4896:  CLRF   xAC
4898:  CLRF   xAD
489A:  CLRF   xAE
489C:  CLRF   xAF
489E:  CLRF   xB0
48A0:  CLRF   xB1
48A2:  CLRF   xB2
48A4:  CLRF   xB3
48A6:  CLRF   xB4
48A8:  CLRF   xB5
48AA:  CLRF   xB6
48AC:  CLRF   xB7
48AE:  CLRF   xB8
48B0:  CLRF   xB9
48B2:  CLRF   xBA
48B4:  CLRF   xBB
48B6:  CLRF   xBC
48B8:  CLRF   xBD
48BA:  CLRF   xBE
48BC:  CLRF   xBF
48BE:  CLRF   xC0
48C0:  CLRF   xC1
48C2:  CLRF   xC2
48C4:  CLRF   xC3
48C6:  CLRF   xC4
48C8:  CLRF   xC5
48CA:  CLRF   xC6
48CC:  CLRF   xC7
48CE:  CLRF   xC8
48D0:  CLRF   xC9
48D2:  CLRF   xCA
48D4:  CLRF   xCB
48D6:  CLRF   xCC
48D8:  CLRF   xCD
48DA:  CLRF   xCE
48DC:  CLRF   xCF
48DE:  CLRF   xD0
48E0:  CLRF   xD1
48E2:  CLRF   xD2
48E4:  CLRF   xD3
48E6:  CLRF   xD4
....................    ConfigInicial(); 
48E8:  GOTO   0D0A
....................    LeeEEPROM();             
48EC:  GOTO   114E
....................    LimitaValores();  
48F0:  GOTO   1618
....................    Menu=200; 
48F4:  MOVLW  C8
48F6:  MOVWF  1C
....................    SalidasOff(); 
48F8:  CALL   0AFC
....................    while(true){ 
....................  
....................    while(Menu==200){ 
48FC:  MOVF   1C,W
48FE:  SUBLW  C8
4900:  BNZ   49D2
....................       SalidasOff(); 
4902:  CALL   0AFC
....................       if(RIGHT){ 
4906:  BSF    F96.1
4908:  BTFSS  F84.1
490A:  BRA    49D0
....................          delay_ms(1000); 
490C:  MOVLW  04
490E:  MOVWF  xD6
4910:  MOVLW  FA
4912:  MOVWF  xF1
4914:  CALL   0B20
4918:  DECFSZ xD6,F
491A:  BRA    4910
....................          if(RIGHT){    
491C:  BSF    F96.1
491E:  BTFSS  F84.1
4920:  BRA    49D0
....................             lcd_init(); 
4922:  CALL   0BDE
....................             intensidadpantalla(1); 
4926:  MOVLW  01
4928:  MOVWF  xD6
492A:  CALL   0B10
....................             lcd_gotoxy(1,1); 
492E:  MOVLW  01
4930:  MOVWF  xEC
4932:  MOVWF  xED
4934:  CALL   0C36
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
4938:  MOVLW  0A
493A:  MOVWF  FF6
493C:  MOVLW  0A
493E:  MOVWF  FF7
4940:  CALL   1BE2
....................             lcd_gotoxy(1,2); 
4944:  MOVLW  01
4946:  MOVWF  xEC
4948:  MOVLW  02
494A:  MOVWF  xED
494C:  CALL   0C36
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
4950:  MOVLW  20
4952:  MOVWF  FF6
4954:  MOVLW  0A
4956:  MOVWF  FF7
4958:  CALL   1BE2
....................             lcd_gotoxy(1,3); 
495C:  MOVLW  01
495E:  MOVWF  xEC
4960:  MOVLW  03
4962:  MOVWF  xED
4964:  CALL   0C36
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
4968:  MOVLW  36
496A:  MOVWF  FF6
496C:  MOVLW  0A
496E:  MOVWF  FF7
4970:  CALL   1BE2
....................             lcd_gotoxy(1,4); 
4974:  MOVLW  01
4976:  MOVWF  xEC
4978:  MOVLW  04
497A:  MOVWF  xED
497C:  CALL   0C36
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
4980:  MOVLW  4C
4982:  MOVWF  FF6
4984:  MOVLW  0A
4986:  MOVWF  FF7
4988:  CALL   1BE2
....................             delay_ms(2000); 
498C:  MOVLW  08
498E:  MOVWF  xD6
4990:  MOVLW  FA
4992:  MOVWF  xF1
4994:  CALL   0B20
4998:  DECFSZ xD6,F
499A:  BRA    4990
....................             printf(lcd_putc,"\f"); 
499C:  MOVLW  0C
499E:  MOVWF  xEB
49A0:  CALL   0CA8
....................             Menu=50; 
49A4:  MOVLW  32
49A6:  MOVWF  1C
....................             printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
49A8:  MOVLW  0C
49AA:  MOVWF  xEB
49AC:  CALL   0CA8
49B0:  BSF    F8A.7
49B2:  BCF    F93.7
49B4:  BCF    42.0
49B6:  BCF    42.1
49B8:  BSF    57.5
....................             t_latencia=0;flag_iniciodamper=1;  
49BA:  CLRF   5B
49BC:  CLRF   5A
49BE:  BSF    57.0
....................             delay_ms(500); 
49C0:  MOVLW  02
49C2:  MOVWF  xD6
49C4:  MOVLW  FA
49C6:  MOVWF  xF1
49C8:  CALL   0B20
49CC:  DECFSZ xD6,F
49CE:  BRA    49C4
....................          } 
....................       } 
....................    } 
49D0:  BRA    48FC
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................     while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
49D2:  MOVF   1C,F
49D4:  BNZ   4A24
....................       flag_latencia=1; 
49D6:  BSF    42.0
....................       SalidasOff(); 
49D8:  CALL   0AFC
....................       if(Latencia==1){ 
49DC:  BTFSS  42.1
49DE:  BRA    49EA
....................          printf(lcd_putc,"\f");reset_cpu(); 
49E0:  MOVLW  0C
49E2:  MOVWF  xEB
49E4:  CALL   0CA8
49E8:  RESET
....................       } 
....................        
....................       if(SolicitaContrasena(0,0,50,contrasena[0],contrasena[1],contrasena[2],contrasena[3])==1){ 
49EA:  CLRF   xD6
49EC:  CLRF   xD7
49EE:  MOVLW  32
49F0:  MOVWF  xD8
49F2:  MOVFF  4B,D9
49F6:  MOVFF  4C,DA
49FA:  MOVFF  4D,DB
49FE:  MOVFF  4E,DC
4A02:  CALL   1CB8
4A06:  DECFSZ 01,W
4A08:  BRA    4A22
....................          printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
4A0A:  MOVLW  0C
4A0C:  MOVWF  xEB
4A0E:  CALL   0CA8
4A12:  BSF    F8A.7
4A14:  BCF    F93.7
4A16:  BCF    42.0
4A18:  BCF    42.1
4A1A:  BSF    57.5
....................          t_latencia=0;flag_iniciodamper=1;  
4A1C:  CLRF   5B
4A1E:  CLRF   5A
4A20:  BSF    57.0
....................       } 
....................    } 
4A22:  BRA    49D2
....................     
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
4A24:  DECFSZ 1C,W
4A26:  BRA    4A2C
....................       MenuPrincipal(); 
4A28:  GOTO   215C
....................    } 
....................  
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
4A2C:  MOVF   1C,W
4A2E:  SUBLW  02
4A30:  BNZ   4A36
....................       MenuAlarma(); 
4A32:  GOTO   2388
....................    }       
....................  
....................    if(Menu == 3){ // Menu de Configuracion de Tiempos de Filtro 
4A36:  MOVF   1C,W
4A38:  SUBLW  03
4A3A:  BNZ   4A40
....................       MenuFiltro();   
4A3C:  GOTO   24AA
....................    } 
....................     
....................    if(Menu == 4){ 
4A40:  MOVF   1C,W
4A42:  SUBLW  04
4A44:  BNZ   4A4A
....................       MenuTiempoPurga(); 
4A46:  GOTO   2736
....................    } 
....................     
....................    if(Menu == 5){ 
4A4A:  MOVF   1C,W
4A4C:  SUBLW  05
4A4E:  BNZ   4A54
....................       MenuTiempoPostPurga(); 
4A50:  GOTO   299A
....................    } 
....................     
....................    if(Menu == 6){ 
4A54:  MOVF   1C,W
4A56:  SUBLW  06
4A58:  BNZ   4A88
....................       while(SolicitaContrasena(6,1,61,4,4,4,4)==0 && Menu==6){} 
4A5A:  MOVLW  06
4A5C:  MOVWF  xD6
4A5E:  MOVLW  01
4A60:  MOVWF  xD7
4A62:  MOVLW  3D
4A64:  MOVWF  xD8
4A66:  MOVLW  04
4A68:  MOVWF  xD9
4A6A:  MOVWF  xDA
4A6C:  MOVWF  xDB
4A6E:  MOVWF  xDC
4A70:  CALL   1CB8
4A74:  MOVF   01,F
4A76:  BNZ   4A80
4A78:  MOVF   1C,W
4A7A:  SUBLW  06
4A7C:  BNZ   4A80
4A7E:  BRA    4A5A
....................       clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
4A80:  CLRF   47
4A82:  CLRF   48
4A84:  CLRF   49
4A86:  CLRF   4A
....................    } 
....................     
....................    if(Menu == 61){ 
4A88:  MOVF   1C,W
4A8A:  SUBLW  3D
4A8C:  BNZ   4A92
....................       MenuServicio(); 
4A8E:  GOTO   2BF8
....................    } 
....................    //if(Menu == 5){ // Menu para Cambio de Contraseña 
....................    //   SolicitaContrasena(5,1,51,contrasena[0],contrasena[1],contrasena[2],contrasena[3]); 
....................    //}       
....................  
....................    //if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
....................       //MenuCambioClave(); 
....................    //}       
....................  
....................    if(Menu == 8){ 
4A92:  MOVF   1C,W
4A94:  SUBLW  08
4A96:  BNZ   4A9C
....................       MenuMedia(); 
4A98:  GOTO   2FAE
....................    } 
....................  
....................    if(Menu == 9){// Menu de configuración de punto zero.    
4A9C:  MOVF   1C,W
4A9E:  SUBLW  09
4AA0:  BNZ   4AA6
....................       MenuPuntoCero(); 
4AA2:  GOTO   34EC
....................    } 
....................  
....................    if(Menu == 10){// Menu de Mantenimiento 
4AA6:  MOVF   1C,W
4AA8:  SUBLW  0A
4AAA:  BNZ   4AB0
....................       MenuMantenimiento(); 
4AAC:  GOTO   3826
....................    } 
....................     
....................    #ifdef DAMPER 
....................    if(Menu == 11){// Menu de Modo 
....................       MenuModo(); 
....................    } 
....................    #endif 
....................     
....................    #ifdef VARIADOR 
....................    if(Menu == 11){// Menu de Modo 
4AB0:  MOVF   1C,W
4AB2:  SUBLW  0B
4AB4:  BNZ   4ABA
....................       MenuVelocidad(); 
4AB6:  GOTO   3CEC
....................    } 
....................    #endif 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................    if(Menu==20){ 
4ABA:  MOVF   1C,W
4ABC:  SUBLW  14
4ABE:  BTFSS  FD8.2
4AC0:  BRA    4E3C
....................       if(Lectura2==1){ 
4AC2:  BTFSS  42.7
4AC4:  BRA    4BE8
....................          /*if(imprimio){ 
....................             letra=lcd_getc(1,1); 
....................             delay_ms(1); 
....................             if(letra!='J') 
....................                Ruido=1; 
....................          }*/ 
....................        
....................          lcd_gotoxy(1,1);                      
4AC6:  MOVLW  01
4AC8:  MOVWF  xEC
4ACA:  MOVWF  xED
4ACC:  CALL   0C36
....................          printf(lcd_putc,"JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4AD0:  MOVLW  62
4AD2:  MOVWF  FF6
4AD4:  MOVLW  0A
4AD6:  MOVWF  FF7
4AD8:  CALL   1BE2
....................          
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,2); 
4ADC:  MOVLW  01
4ADE:  MOVWF  xEC
4AE0:  MOVLW  02
4AE2:  MOVWF  xED
4AE4:  CALL   0C36
....................          vel=((float)tmp/254)*100; 
4AE8:  CLRF   xE0
4AEA:  MOVFF  2E,DF
4AEE:  CALL   0D54
4AF2:  MOVFF  00,D6
4AF6:  MOVFF  01,D7
4AFA:  MOVFF  02,D8
4AFE:  MOVFF  03,D9
4B02:  MOVFF  03,DD
4B06:  MOVFF  02,DC
4B0A:  MOVFF  01,DB
4B0E:  MOVFF  00,DA
4B12:  CLRF   xE1
4B14:  CLRF   xE0
4B16:  MOVLW  7E
4B18:  MOVWF  xDF
4B1A:  MOVLW  86
4B1C:  MOVWF  xDE
4B1E:  CALL   0D8A
4B22:  MOVFF  00,D6
4B26:  MOVFF  01,D7
4B2A:  MOVFF  02,D8
4B2E:  MOVFF  03,D9
4B32:  MOVFF  03,EE
4B36:  MOVFF  02,ED
4B3A:  MOVFF  01,EC
4B3E:  MOVFF  00,EB
4B42:  CLRF   xF2
4B44:  CLRF   xF1
4B46:  MOVLW  48
4B48:  MOVWF  xF0
4B4A:  MOVLW  85
4B4C:  MOVWF  xEF
4B4E:  CALL   312C
4B52:  MOVFF  03,1B
4B56:  MOVFF  02,1A
4B5A:  MOVFF  01,19
4B5E:  MOVFF  00,18
....................          printf(lcd_putc,"Ext=%03i%%",(int8)vel); 
4B62:  MOVFF  1B,D9
4B66:  MOVFF  1A,D8
4B6A:  MOVFF  19,D7
4B6E:  MOVFF  18,D6
4B72:  CALL   34B4
4B76:  MOVFF  01,D6
4B7A:  MOVLW  6A
4B7C:  MOVWF  FF6
4B7E:  MOVLW  0A
4B80:  MOVWF  FF7
4B82:  MOVLW  04
4B84:  MOVWF  xDE
4B86:  CALL   1C04
4B8A:  MOVFF  D6,D7
4B8E:  MOVLW  03
4B90:  MOVWF  xD8
4B92:  CALL   2E5A
4B96:  MOVLW  25
4B98:  MOVWF  xEB
4B9A:  CALL   0CA8
....................          #endif 
....................           
....................          #ifdef DAMPER 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"Ext=%2.0f%%",(100*((float)tmp/255)));          
....................          #endif 
....................           
....................          lcd_gotoxy(1,3); 
4B9E:  MOVLW  01
4BA0:  MOVWF  xEC
4BA2:  MOVLW  03
4BA4:  MOVWF  xED
4BA6:  CALL   0C36
....................          printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
4BAA:  MOVLW  76
4BAC:  MOVWF  FF6
4BAE:  MOVLW  0A
4BB0:  MOVWF  FF7
4BB2:  MOVLW  08
4BB4:  MOVWF  xDE
4BB6:  CALL   1C04
4BBA:  MOVLW  01
4BBC:  MOVWF  FE9
4BBE:  MOVFF  74,E1
4BC2:  MOVFF  73,E0
4BC6:  MOVFF  72,DF
4BCA:  MOVFF  71,DE
4BCE:  MOVWF  xE2
4BD0:  CALL   32D8
4BD4:  MOVLW  83
4BD6:  MOVWF  FF6
4BD8:  MOVLW  0A
4BDA:  MOVWF  FF7
4BDC:  MOVLW  07
4BDE:  MOVWF  xDE
4BE0:  CALL   1C04
....................          imprimio=1; 
4BE4:  BSF    42.3
....................          Lectura2=0; 
4BE6:  BCF    42.7
....................       } 
....................        
....................       if(flag_filtro==1){ 
4BE8:  BTFSS  42.2
4BEA:  BRA    4C26
....................          if(horas>=60){ 
4BEC:  MOVF   38,W
4BEE:  SUBLW  3B
4BF0:  BC    4C0C
....................             lcd_gotoxy(10,1);                      
4BF2:  MOVLW  0A
4BF4:  MOVWF  xEC
4BF6:  MOVLW  01
4BF8:  MOVWF  xED
4BFA:  CALL   0C36
....................             printf(lcd_putc,"Filtro:CAM"); 
4BFE:  MOVLW  8C
4C00:  MOVWF  FF6
4C02:  MOVLW  0A
4C04:  MOVWF  FF7
4C06:  CALL   1BE2
....................          }else{ 
4C0A:  BRA    4C24
....................             lcd_gotoxy(10,1);                      
4C0C:  MOVLW  0A
4C0E:  MOVWF  xEC
4C10:  MOVLW  01
4C12:  MOVWF  xED
4C14:  CALL   0C36
....................             printf(lcd_putc,"Filtro:OK "); 
4C18:  MOVLW  98
4C1A:  MOVWF  FF6
4C1C:  MOVLW  0A
4C1E:  MOVWF  FF7
4C20:  CALL   1BE2
....................          } 
....................       }else{ 
4C24:  BRA    4C3E
....................          lcd_gotoxy(10,1);                      
4C26:  MOVLW  0A
4C28:  MOVWF  xEC
4C2A:  MOVLW  01
4C2C:  MOVWF  xED
4C2E:  CALL   0C36
....................          printf(lcd_putc,"Filtro:---"); 
4C32:  MOVLW  A4
4C34:  MOVWF  FF6
4C36:  MOVLW  0A
4C38:  MOVWF  FF7
4C3A:  CALL   1BE2
....................       } 
....................           
....................       if(Flujo<0.5){ 
4C3E:  MOVFF  74,DD
4C42:  MOVFF  73,DC
4C46:  MOVFF  72,DB
4C4A:  MOVFF  71,DA
4C4E:  CLRF   xE1
4C50:  CLRF   xE0
4C52:  CLRF   xDF
4C54:  MOVLW  7E
4C56:  MOVWF  xDE
4C58:  CALL   15A2
4C5C:  BNC   4C78
....................          lcd_gotoxy(11,2); 
4C5E:  MOVLW  0B
4C60:  MOVWF  xEC
4C62:  MOVLW  02
4C64:  MOVWF  xED
4C66:  CALL   0C36
....................          printf(lcd_putc,"Flujo=Bajo");       
4C6A:  MOVLW  B0
4C6C:  MOVWF  FF6
4C6E:  MOVLW  0A
4C70:  MOVWF  FF7
4C72:  CALL   1BE2
....................       }else{ 
4C76:  BRA    4CCA
....................          if(Flujo>2.0){ 
4C78:  CLRF   xDD
4C7A:  CLRF   xDC
4C7C:  CLRF   xDB
4C7E:  MOVLW  80
4C80:  MOVWF  xDA
4C82:  MOVFF  74,E1
4C86:  MOVFF  73,E0
4C8A:  MOVFF  72,DF
4C8E:  MOVFF  71,DE
4C92:  CALL   15A2
4C96:  BNC   4CB2
....................             lcd_gotoxy(11,2); 
4C98:  MOVLW  0B
4C9A:  MOVWF  xEC
4C9C:  MOVLW  02
4C9E:  MOVWF  xED
4CA0:  CALL   0C36
....................             printf(lcd_putc,"Flujo=Alto");                
4CA4:  MOVLW  BC
4CA6:  MOVWF  FF6
4CA8:  MOVLW  0A
4CAA:  MOVWF  FF7
4CAC:  CALL   1BE2
....................          }else{ 
4CB0:  BRA    4CCA
....................             lcd_gotoxy(11,2); 
4CB2:  MOVLW  0B
4CB4:  MOVWF  xEC
4CB6:  MOVLW  02
4CB8:  MOVWF  xED
4CBA:  CALL   0C36
....................             printf(lcd_putc,"Flujo=OK  ");       
4CBE:  MOVLW  C8
4CC0:  MOVWF  FF6
4CC2:  MOVLW  0A
4CC4:  MOVWF  FF7
4CC6:  CALL   1BE2
....................          } 
....................       } 
....................        
....................       if(estadofl==1){ 
4CCA:  BTFSS  41.0
4CCC:  BRA    4CEC
....................          Luz_Blanca_on; 
4CCE:  BSF    F8A.4
4CD0:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
4CD2:  MOVLW  01
4CD4:  MOVWF  xEC
4CD6:  MOVLW  04
4CD8:  MOVWF  xED
4CDA:  CALL   0C36
....................          printf(lcd_putc,"Luz:ON "); 
4CDE:  MOVLW  D4
4CE0:  MOVWF  FF6
4CE2:  MOVLW  0A
4CE4:  MOVWF  FF7
4CE6:  CALL   1BE2
....................       }else{ 
4CEA:  BRA    4D08
....................          Luz_Blanca_off; 
4CEC:  BCF    F8A.4
4CEE:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
4CF0:  MOVLW  01
4CF2:  MOVWF  xEC
4CF4:  MOVLW  04
4CF6:  MOVWF  xED
4CF8:  CALL   0C36
....................          printf(lcd_putc,"Luz:OFF "); 
4CFC:  MOVLW  DC
4CFE:  MOVWF  FF6
4D00:  MOVLW  0A
4D02:  MOVWF  FF7
4D04:  CALL   1BE2
....................       } 
....................        
....................       if(estadomv==1){ 
4D08:  BTFSS  41.1
4D0A:  BRA    4D2E
....................          lcd_gotoxy(10,4); 
4D0C:  MOVLW  0A
4D0E:  MOVWF  xEC
4D10:  MOVLW  04
4D12:  MOVWF  xED
4D14:  CALL   0C36
....................          printf(lcd_putc,"Motor:ON "); 
4D18:  MOVLW  E6
4D1A:  MOVWF  FF6
4D1C:  MOVLW  0A
4D1E:  MOVWF  FF7
4D20:  CALL   1BE2
....................          #ifdef VARIADOR 
....................          ajuste_vel(tmp); 
4D24:  MOVFF  2E,D6
4D28:  CALL   3CE6
....................          #endif 
....................       }else{ 
4D2C:  BRA    4D4A
....................          #ifdef DAMPER 
....................          if(iniciodamper==1){ 
....................             //Motor_off;      
....................             ApagaMotor(); 
....................          } 
....................          #else 
....................          ApagaMotor(); 
4D2E:  CALL   3F5C
....................          #endif 
....................          lcd_gotoxy(10,4); 
4D32:  MOVLW  0A
4D34:  MOVWF  xEC
4D36:  MOVLW  04
4D38:  MOVWF  xED
4D3A:  CALL   0C36
....................          printf(lcd_putc,"Motor:OFF ");  
4D3E:  MOVLW  F0
4D40:  MOVWF  FF6
4D42:  MOVLW  0A
4D44:  MOVWF  FF7
4D46:  CALL   1BE2
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia Abajo 
4D4A:  BSF    F96.0
4D4C:  BTFSS  F84.0
4D4E:  BRA    4D70
....................          delay_ms(20); 
4D50:  MOVLW  14
4D52:  MOVWF  xF1
4D54:  CALL   0B20
....................          if(DOWN && Flanco == 0){ 
4D58:  BSF    F96.0
4D5A:  BTFSS  F84.0
4D5C:  BRA    4D6E
4D5E:  BTFSC  41.4
4D60:  BRA    4D6E
....................             Flanco = 1;delay_ms(200);estadofl=!estadofl; 
4D62:  BSF    41.4
4D64:  MOVLW  C8
4D66:  MOVWF  xF1
4D68:  CALL   0B20
4D6C:  BTG    41.0
....................          } 
....................       }else{ 
4D6E:  BRA    4D72
....................          Flanco = 0; 
4D70:  BCF    41.4
....................       } 
....................              
....................       if(LEFT){//Si oprime hacia Izquierda 
4D72:  BSF    F96.2
4D74:  BTFSS  F84.2
4D76:  BRA    4DBE
....................          delay_ms(20); 
4D78:  MOVLW  14
4D7A:  MOVWF  xF1
4D7C:  CALL   0B20
....................          if(LEFT && Flanco2 == 0){ 
4D80:  BSF    F96.2
4D82:  BTFSS  F84.2
4D84:  BRA    4DBC
4D86:  BTFSC  41.6
4D88:  BRA    4DBC
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
4D8A:  BSF    41.6
4D8C:  MOVLW  C8
4D8E:  MOVWF  xF1
4D90:  CALL   0B20
4D94:  BTG    41.1
....................             if(estadomv==1){ 
4D96:  BTFSS  41.1
4D98:  BRA    4DAC
....................                //Motor_on; 
....................                EnciendeMotor(); 
4D9A:  CALL   3F7A
....................                delay_ms(150); 
4D9E:  MOVLW  96
4DA0:  MOVWF  xF1
4DA2:  CALL   0B20
....................                lcd_init(); 
4DA6:  CALL   0BDE
....................             }else{ 
4DAA:  BRA    4DBC
....................                //Motor_off; 
....................                ApagaMotor(); 
4DAC:  CALL   3F5C
....................                delay_ms(150); 
4DB0:  MOVLW  96
4DB2:  MOVWF  xF1
4DB4:  CALL   0B20
....................                lcd_init(); 
4DB8:  CALL   0BDE
....................             } 
....................          } 
....................       }else{ 
4DBC:  BRA    4DC0
....................          Flanco2 = 0; 
4DBE:  BCF    41.6
....................       } 
....................     
....................       if(UP){// Si oprime Arriba 
4DC0:  BSF    F92.5
4DC2:  BTFSS  F80.5
4DC4:  BRA    4E02
....................          delay_ms(20); 
4DC6:  MOVLW  14
4DC8:  MOVWF  xF1
4DCA:  CALL   0B20
....................          if(UP && Flanco1 == 0) { 
4DCE:  BSF    F92.5
4DD0:  BTFSS  F80.5
4DD2:  BRA    4E00
4DD4:  BTFSC  41.5
4DD6:  BRA    4E00
....................             /*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
4DD8:  MOVLW  02
4DDA:  MOVWF  xD6
4DDC:  MOVLW  FA
4DDE:  MOVWF  xF1
4DE0:  CALL   0B20
4DE4:  DECFSZ xD6,F
4DE6:  BRA    4DDC
4DE8:  MOVLW  0C
4DEA:  MOVWF  xEB
4DEC:  CALL   0CA8
4DF0:  MOVLW  01
4DF2:  MOVWF  1C
4DF4:  CLRF   43
4DF6:  MOVLW  02
4DF8:  MOVWF  1F
4DFA:  MOVWF  21
4DFC:  MOVLW  0B
4DFE:  MOVWF  1E
....................          } 
....................       }else{ 
4E00:  BRA    4E04
....................          Flanco1 = 0; 
4E02:  BCF    41.5
....................       } 
....................              
....................       if(RIGHT){// Si oprime Derecha 
4E04:  BSF    F96.1
4E06:  BTFSS  F84.1
4E08:  BRA    4E3A
....................          delay_ms(20); 
4E0A:  MOVLW  14
4E0C:  MOVWF  xF1
4E0E:  CALL   0B20
....................          if(RIGHT && Flanco3 == 0){ 
4E12:  BSF    F96.1
4E14:  BTFSS  F84.1
4E16:  BRA    4E38
4E18:  BTFSC  41.7
4E1A:  BRA    4E38
....................             delay_ms(500);printf(lcd_putc,"\f");Menu=40; 
4E1C:  MOVLW  02
4E1E:  MOVWF  xD6
4E20:  MOVLW  FA
4E22:  MOVWF  xF1
4E24:  CALL   0B20
4E28:  DECFSZ xD6,F
4E2A:  BRA    4E20
4E2C:  MOVLW  0C
4E2E:  MOVWF  xEB
4E30:  CALL   0CA8
4E34:  MOVLW  28
4E36:  MOVWF  1C
....................          } 
....................       }else{ 
4E38:  BRA    4E3C
....................          Flanco3 = 0; 
4E3A:  BCF    41.7
....................       } 
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
....................    if(Menu == 30){ 
4E3C:  MOVF   1C,W
4E3E:  SUBLW  1E
4E40:  BNZ   4E46
....................       MenuPostPurga(); 
4E42:  GOTO   3F98
....................    } 
....................  
....................    if(Menu == 40){ // Menu de apagado de cabina 
4E46:  MOVF   1C,W
4E48:  SUBLW  28
4E4A:  BNZ   4E50
....................       MenuApagado(); 
4E4C:  GOTO   4160
....................    }       
....................  
....................    if(Menu == 50){ // Menu de Purga 
4E50:  MOVF   1C,W
4E52:  SUBLW  32
4E54:  BNZ   4E5A
....................       MenuPurga(); 
4E56:  GOTO   4618
....................    }       
....................  
....................    if(tiemporeset>=60) 
4E5A:  MOVF   39,W
4E5C:  SUBLW  3B
4E5E:  BC    4E66
....................    { 
....................       lcd_init(); 
4E60:  CALL   0BDE
....................       tiemporeset=0; 
4E64:  CLRF   39
....................    }  
....................  
....................    if(Menu!=0 || Menu!=30) 
4E66:  MOVF   1C,F
4E68:  BNZ   4E72
4E6A:  MOVF   1C,W
4E6C:  SUBLW  1E
4E6E:  BTFSC  FD8.2
4E70:  BRA    4F8E
....................    { 
....................       if(Lectura==1) 
4E72:  BTFSS  42.6
4E74:  BRA    4F8A
....................       { 
....................          FeedbackDamper=(int8)(100*(sensores(2)/1023)); 
4E76:  MOVLW  02
4E78:  MOVWF  xDA
4E7A:  CALL   345E
4E7E:  MOVFF  00,D6
4E82:  MOVFF  01,D7
4E86:  MOVFF  02,D8
4E8A:  MOVFF  03,D9
4E8E:  MOVFF  03,DD
4E92:  MOVFF  02,DC
4E96:  MOVFF  01,DB
4E9A:  MOVFF  00,DA
4E9E:  CLRF   xE1
4EA0:  MOVLW  C0
4EA2:  MOVWF  xE0
4EA4:  MOVLW  7F
4EA6:  MOVWF  xDF
4EA8:  MOVLW  88
4EAA:  MOVWF  xDE
4EAC:  CALL   0D8A
4EB0:  CLRF   xEE
4EB2:  CLRF   xED
4EB4:  MOVLW  48
4EB6:  MOVWF  xEC
4EB8:  MOVLW  85
4EBA:  MOVWF  xEB
4EBC:  MOVFF  03,F2
4EC0:  MOVFF  02,F1
4EC4:  MOVFF  01,F0
4EC8:  MOVFF  00,EF
4ECC:  CALL   312C
4ED0:  MOVFF  03,D9
4ED4:  MOVFF  02,D8
4ED8:  MOVFF  01,D7
4EDC:  MOVFF  00,D6
4EE0:  CALL   34B4
4EE4:  MOVFF  01,40
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
4EE8:  MOVFF  2F,D6
4EEC:  CALL   4240
4EF0:  MOVFF  03,74
4EF4:  MOVFF  02,73
4EF8:  MOVFF  01,72
4EFC:  MOVFF  00,71
....................          #ifdef DAMPER 
....................          controlar_flujo(); 
....................          #endif 
....................           
....................          if(Flujo<0.5 && Menu==20) 
4F00:  MOVFF  74,DD
4F04:  MOVFF  73,DC
4F08:  MOVFF  72,DB
4F0C:  MOVFF  71,DA
4F10:  CLRF   xE1
4F12:  CLRF   xE0
4F14:  CLRF   xDF
4F16:  MOVLW  7E
4F18:  MOVWF  xDE
4F1A:  CALL   15A2
4F1E:  BNC   4F54
4F20:  MOVF   1C,W
4F22:  SUBLW  14
4F24:  BNZ   4F54
....................          { 
....................               flag_latencia=1; 
4F26:  BSF    42.0
....................                
....................               if(Latencia==1) 
4F28:  BTFSS  42.1
4F2A:  BRA    4F52
....................               { 
....................                  if(estadoalarma==1) 
4F2C:  BTFSS  41.2
4F2E:  BRA    4F38
....................                  { 
....................                     Alarma_on; 
4F30:  BSF    F8A.6
4F32:  BCF    F93.6
....................                     estadopantalla=!estadopantalla; 
4F34:  BTG    41.3
....................                  } 
....................                  else 
4F36:  BRA    4F3E
....................                  { 
....................                     Alarma_off; 
4F38:  BCF    F8A.6
4F3A:  BCF    F93.6
....................                     estadopantalla=1; 
4F3C:  BSF    41.3
....................                  } 
....................                  if(estadopantalla==1) 
4F3E:  BTFSS  41.3
4F40:  BRA    4F4C
....................                  {intensidadpantalla(contraste);} 
4F42:  MOVFF  24,D6
4F46:  CALL   0B10
....................                  else 
4F4A:  BRA    4F52
....................                  {intensidadpantalla(0);} 
4F4C:  CLRF   xD6
4F4E:  CALL   0B10
....................                } 
....................             } 
....................          else 
4F52:  BRA    4F8A
....................          { 
....................             intensidadpantalla(contraste);Alarma_off; 
4F54:  MOVFF  24,D6
4F58:  CALL   0B10
4F5C:  BCF    F8A.6
4F5E:  BCF    F93.6
....................             if(Flujo>=0.5) 
4F60:  CLRF   xDD
4F62:  CLRF   xDC
4F64:  CLRF   xDB
4F66:  MOVLW  7E
4F68:  MOVWF  xDA
4F6A:  MOVFF  74,E1
4F6E:  MOVFF  73,E0
4F72:  MOVFF  72,DF
4F76:  MOVFF  71,DE
4F7A:  CALL   15A2
4F7E:  BC    4F82
4F80:  BNZ   4F8A
....................             { 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
4F82:  BCF    42.1
4F84:  CLRF   5B
4F86:  CLRF   5A
4F88:  BCF    42.0
....................             } 
....................          } 
....................       } 
....................       Lectura=0; 
4F8A:  BCF    42.6
....................    }    
....................    else 
4F8C:  BRA    4FA2
....................    { 
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
4F8E:  MOVFF  24,D6
4F92:  CALL   0B10
4F96:  BCF    F8A.6
4F98:  BCF    F93.6
4F9A:  BCF    42.1
4F9C:  CLRF   5B
4F9E:  CLRF   5A
4FA0:  BCF    42.0
....................    } 
....................     
....................    if(Ruido){ 
4FA2:  BTFSS  42.4
4FA4:  BRA    4FA8
.................... //      Refresco(); 
....................       imprimio=0; 
4FA6:  BCF    42.3
....................    } 
....................  
....................    }        
4FA8:  BRA    48FC
.................... } 
....................  
4FAA:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
