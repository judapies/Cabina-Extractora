CCS PCH C Compiler, Version 4.104, 5967               28-jun.-19 07:38

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2019\Cabina Extractora 120 Artilab #004587962 OP.201986\Firmware\Cabina_Extractora.lst

               ROM used: 21344 bytes (65%)
                         Largest free fragment is 11420
               RAM used: 215 (10%) at main() level
                         247 (12%) worst case
               Stack:    8 worst case (7 in main + 1 for interrupts)

*
0000:  GOTO   4BBC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0978
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////              JUDAPIES-dielecingenieria.com                         //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #define SIMU 1 
.................... #ifdef SIMU 
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,MCLR,NOVREGEN// PLL1 para 4 MHz 
.................... #use delay(clock=4000000) 
*
0B20:  CLRF   FEA
0B22:  MOVLW  E9
0B24:  MOVWF  FE9
0B26:  MOVF   FEF,W
0B28:  BZ    0B46
0B2A:  MOVLW  01
0B2C:  MOVWF  01
0B2E:  CLRF   00
0B30:  DECFSZ 00,F
0B32:  BRA    0B30
0B34:  DECFSZ 01,F
0B36:  BRA    0B2E
0B38:  MOVLW  4A
0B3A:  MOVWF  00
0B3C:  DECFSZ 00,F
0B3E:  BRA    0B3C
0B40:  BRA    0B42
0B42:  DECFSZ FEF,F
0B44:  BRA    0B2A
0B46:  RETLW  00
.................... #else 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
.................... #define FAST 1 
.................... #endif 
....................  
.................... #define use_portd_lcd TRUE 
.................... #include <LCD420PIC18F.c> 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //           LIBRERIA PARA CONTROL DE LCD 4X20 con PIC 18F4550                // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //      Se debe llamar a este archivo mediante #include <LCD420PIC18_RyP.c>   // 
.................... //                                                                            // 
.................... //      Es necesariodefinir el puerto a utilizar para el teclado mediante:    // 
.................... //      #define use_portb_lcd TRUE   //para el puerto B                       // 
.................... //      #define use_portd_lcd TRUE   //para el puerto D                       // 
.................... //                                                                            // 
.................... //      FUNCIONES:                                                            // 
.................... //      void lcd_init(void);         //Inicializa el lcd.                     // 
.................... //                                                                            // 
.................... //                                                                            // 
.................... //                            RobotyPic 2013                                  // 
.................... //                    http://robotypic.blogspot.com/                          // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... //Elección del puerto y pines 
....................  
.................... #ifdef use_portd_lcd 
....................  
.................... #define LCD_DB4  PIN_D4 
.................... #define LCD_DB5  PIN_D5 
.................... #define LCD_DB6  PIN_D6 
.................... #define LCD_DB7  PIN_D7 
.................... #define LCD_E    PIN_D2 
.................... #define LCD_RS   PIN_D0 
.................... #define LCD_RW   PIN_D1 
....................  
.................... #else 
....................  
.................... #define LCD_DB4  PIN_B4 
.................... #define LCD_DB5  PIN_B5 
.................... #define LCD_DB6  PIN_B6 
.................... #define LCD_DB7  PIN_B7 
.................... #define LCD_E    PIN_B2 
.................... #define LCD_RS   PIN_B0 
.................... #define LCD_RW   PIN_B1 
....................  
.................... #endif 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW  1     
....................  
.................... // If you use the PLL of Microcontroller to increase the 
.................... // clock to 48MHz use this define, else comment out the 
.................... // following line. 
....................  
.................... #define lcd_type 2 
.................... #define lcd_line_two 0x40 
....................  
.................... BYTE lcdline; 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                      // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
0B48:  BTFSC  xEF.0
0B4A:  BRA    0B50
0B4C:  BCF    F8C.4
0B4E:  BRA    0B52
0B50:  BSF    F8C.4
0B52:  BCF    F95.4
....................  output_bit(LCD_DB5, !!(nibble & 2));  
0B54:  BTFSC  xEF.1
0B56:  BRA    0B5C
0B58:  BCF    F8C.5
0B5A:  BRA    0B5E
0B5C:  BSF    F8C.5
0B5E:  BCF    F95.5
....................  output_bit(LCD_DB6, !!(nibble & 4));   
0B60:  BTFSC  xEF.2
0B62:  BRA    0B68
0B64:  BCF    F8C.6
0B66:  BRA    0B6A
0B68:  BSF    F8C.6
0B6A:  BCF    F95.6
....................  output_bit(LCD_DB7, !!(nibble & 8));   
0B6C:  BTFSC  xEF.3
0B6E:  BRA    0B74
0B70:  BCF    F8C.7
0B72:  BRA    0B76
0B74:  BSF    F8C.7
0B76:  BCF    F95.7
....................  
....................  #ifdef FAST 
....................  delay_cycles(25); 
....................  #else 
....................  delay_cycles(1); 
0B78:  NOP   
....................  #endif 
....................  output_high(LCD_E); 
0B7A:  BCF    F95.2
0B7C:  BSF    F8C.2
....................  #ifdef FAST 
....................  delay_us(50); 
....................  #else 
....................  delay_us(2); 
0B7E:  BRA    0B80
....................  #endif 
....................  output_low(LCD_E); 
0B80:  BCF    F95.2
0B82:  BCF    F8C.2
.................... } 
0B84:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
....................    
.................... output_high(LCD_E); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... retval_0 = input(LCD_DB4); 
.................... retval_1 = input(LCD_DB5); 
.................... retval_2 = input(LCD_DB6); 
.................... retval_3 = input(LCD_DB7); 
....................   
.................... output_low(LCD_E); 
....................    
.................... return(retval);   
.................... }   
.................... #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
.................... #ifdef FAST 
.................... delay_cycles(25); 
.................... #else 
.................... delay_cycles(1); 
.................... #endif 
....................  
.................... high = lcd_read_nibble(); 
....................  
.................... low = lcd_read_nibble(); 
....................  
.................... return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
0B86:  BCF    F95.0
0B88:  BCF    F8C.0
....................  
.................... //#ifdef USE_LCD_RW 
.................... //while(bit_test(lcd_read_byte(),7)) ; 
.................... //#else 
.................... #ifdef FAST 
.................... delay_ms(2);  
.................... #else 
.................... delay_us(60); 
0B8A:  MOVLW  13
0B8C:  MOVWF  00
0B8E:  DECFSZ 00,F
0B90:  BRA    0B8E
0B92:  BRA    0B94
.................... #endif 
.................... //#endif 
....................  
.................... if(address) 
0B94:  MOVF   xEC,F
0B96:  BZ    0B9E
....................   output_high(LCD_RS); 
0B98:  BCF    F95.0
0B9A:  BSF    F8C.0
.................... else 
0B9C:  BRA    0BA2
....................   output_low(LCD_RS); 
0B9E:  BCF    F95.0
0BA0:  BCF    F8C.0
....................   
....................  #ifdef FAST 
....................  delay_cycles(25); 
....................  #else 
....................  delay_cycles(1); 
0BA2:  NOP   
....................  #endif 
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0BA4:  BCF    F95.1
0BA6:  BCF    F8C.1
.................... #ifdef FAST 
....................  delay_cycles(25); 
....................  #else 
....................  delay_cycles(1); 
0BA8:  NOP   
....................  #endif 
.................... #endif 
....................  
.................... output_low(LCD_E); 
0BAA:  BCF    F95.2
0BAC:  BCF    F8C.2
....................  
.................... lcd_send_nibble(n >> 4); 
0BAE:  SWAPF  xED,W
0BB0:  MOVWF  xEE
0BB2:  MOVLW  0F
0BB4:  ANDWF  xEE,F
0BB6:  MOVFF  EE,EF
0BBA:  RCALL  0B48
.................... lcd_send_nibble(n & 0xf); 
0BBC:  MOVF   xED,W
0BBE:  ANDLW  0F
0BC0:  MOVWF  xEE
0BC2:  MOVWF  xEF
0BC4:  RCALL  0B48
.................... } 
0BC6:  RETLW  00
....................  
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
0BC8:  BCF    F95.0
0BCA:  BCF    F8C.0
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0BCC:  BCF    F95.1
0BCE:  BCF    F8C.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
0BD0:  BCF    F95.2
0BD2:  BCF    F8C.2
....................  
.................... delay_ms(15); 
0BD4:  MOVLW  0F
0BD6:  MOVWF  xE9
0BD8:  RCALL  0B20
....................  
.................... for(i=0 ;i < 3; i++) 
0BDA:  CLRF   xD3
0BDC:  MOVF   xD3,W
0BDE:  SUBLW  02
0BE0:  BNC   0BF2
....................   { 
....................     lcd_send_nibble(0x03); 
0BE2:  MOVLW  03
0BE4:  MOVWF  xEF
0BE6:  RCALL  0B48
....................     delay_ms(5); 
0BE8:  MOVLW  05
0BEA:  MOVWF  xE9
0BEC:  RCALL  0B20
....................   } 
0BEE:  INCF   xD3,F
0BF0:  BRA    0BDC
....................  
.................... lcd_send_nibble(0x02); 
0BF2:  MOVLW  02
0BF4:  MOVWF  xEF
0BF6:  RCALL  0B48
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0BF8:  CLRF   xD3
0BFA:  MOVF   xD3,W
0BFC:  SUBLW  03
0BFE:  BNC   0C1E
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
0C00:  CLRF   03
0C02:  MOVF   xD3,W
0C04:  MOVFF  FF2,D4
0C08:  BCF    FF2.7
0C0A:  CALL   0096
0C0E:  BTFSC  xD4.7
0C10:  BSF    FF2.7
0C12:  MOVWF  xD4
0C14:  CLRF   xEC
0C16:  MOVWF  xED
0C18:  RCALL  0B86
....................    
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
....................     #endif 
....................   } 
0C1A:  INCF   xD3,F
0C1C:  BRA    0BFA
....................  
.................... } 
0C1E:  RETLW  00
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) 
.................... { 
....................   BYTE address; 
....................   
....................  
....................   switch(y) 
....................   { 
0C20:  MOVLW  01
0C22:  SUBWF  xEA,W
0C24:  ADDLW  FC
0C26:  BC    0C56
0C28:  ADDLW  04
0C2A:  GOTO   0C66
....................     case 1 : address=0x80; 
0C2E:  MOVLW  80
0C30:  MOVWF  xEB
....................     lcdline=1; 
0C32:  MOVLW  01
0C34:  MOVWF  16
....................     break; 
0C36:  BRA    0C56
....................     case 2 : address=0xc0; 
0C38:  MOVLW  C0
0C3A:  MOVWF  xEB
....................     lcdline=2; 
0C3C:  MOVLW  02
0C3E:  MOVWF  16
....................     break; 
0C40:  BRA    0C56
....................     case 3 : address=0x94; 
0C42:  MOVLW  94
0C44:  MOVWF  xEB
....................     lcdline=3; 
0C46:  MOVLW  03
0C48:  MOVWF  16
....................     break; 
0C4A:  BRA    0C56
....................     case 4 : address=0xd4; 
0C4C:  MOVLW  D4
0C4E:  MOVWF  xEB
....................     lcdline=4; 
0C50:  MOVLW  04
0C52:  MOVWF  16
....................     break; 
0C54:  BRA    0C56
....................   } 
....................  
....................   address+=x-1; 
0C56:  MOVLW  01
0C58:  SUBWF  xE9,W
0C5A:  ADDWF  xEB,F
....................   lcd_send_byte(0,address); 
0C5C:  CLRF   xEC
0C5E:  MOVFF  EB,ED
0C62:  RCALL  0B86
.................... } 
0C64:  RETLW  00
....................  
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    if(c=='ñ') 
*
0C92:  MOVF   xE8,W
0C94:  SUBLW  F1
0C96:  BNZ   0C9C
....................     c=238; 
0C98:  MOVLW  EE
0C9A:  MOVWF  xE8
....................  switch(c) 
....................   { 
0C9C:  MOVF   xE8,W
0C9E:  XORLW  0C
0CA0:  BZ    0CAC
0CA2:  XORLW  06
0CA4:  BZ    0CC0
0CA6:  XORLW  02
0CA8:  BZ    0CDC
0CAA:  BRA    0CE6
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0CAC:  CLRF   xEC
0CAE:  MOVLW  01
0CB0:  MOVWF  xED
0CB2:  RCALL  0B86
....................       lcdline=1; 
0CB4:  MOVLW  01
0CB6:  MOVWF  16
....................       delay_ms(2); 
0CB8:  MOVLW  02
0CBA:  MOVWF  xE9
0CBC:  RCALL  0B20
....................       break; 
0CBE:  BRA    0CF2
....................    
....................     case '\n': 
....................       lcd_gotoxy(1,++lcdline); 
0CC0:  INCF   16,F
0CC2:  MOVLW  01
0CC4:  MOVWF  xE9
0CC6:  MOVFF  16,EA
0CCA:  RCALL  0C20
....................       if (lcdline>4) lcd_gotoxy(1,1); 
0CCC:  MOVF   16,W
0CCE:  SUBLW  04
0CD0:  BC    0CDA
0CD2:  MOVLW  01
0CD4:  MOVWF  xE9
0CD6:  MOVWF  xEA
0CD8:  RCALL  0C20
....................       break; 
0CDA:  BRA    0CF2
....................    
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
0CDC:  CLRF   xEC
0CDE:  MOVLW  10
0CE0:  MOVWF  xED
0CE2:  RCALL  0B86
....................       break; 
0CE4:  BRA    0CF2
....................    
....................     default: 
....................       lcd_send_byte(1,c); 
0CE6:  MOVLW  01
0CE8:  MOVWF  xEC
0CEA:  MOVFF  E8,ED
0CEE:  RCALL  0B86
....................       break; 
0CF0:  BRA    0CF2
....................   } 
.................... } 
0CF2:  RETLW  00
....................  
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... //while(bit_test(lcd_read_byte(),7));  
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... //#include <LCD420.c> 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... //#define DAMPER 1 
.................... #define VARIADOR 1 
.................... //#define FLUJOS 1 
....................  
.................... // Definición de teclado - NO 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   LEFT          !input(PIN_E2) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   UP            !input(PIN_A5) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Motor_on          output_bit(PIN_B5,1) 
.................... #define   Motor_off         output_bit(PIN_B5,0) 
.................... #define   Aux_on            output_bit(PIN_B6,1) 
.................... #define   Aux_off           output_bit(PIN_B6,0) 
.................... #define   Alarma_on         output_bit(PIN_B7,1) 
.................... #define   Alarma_off        output_bit(PIN_B7,0) 
.................... #define   Pantalla_on       output_bit(PIN_C7,1) 
.................... #define   Pantalla_off      output_bit(PIN_C7,0) 
....................  
.................... int8 v=0; 
.................... float vel=0.0; 
.................... int8 Menu=100,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10,unidad2=1,purga_minutos=0,purga_minutos_pro=0; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0,Opcion=1; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0,purga_segundos=0,purga_segundos_pro=0,ppurga_segundos=0,ppurga_segundos_pro=0,ppurga_minutos=0,ppurga_minutos_pro=0; 
.................... int8 FeedbackDamper=0,setpoint=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... short imprimio=0,Ruido=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float zero_fabrica=203.0; 
.................... short ModoSleep,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0,tiempo_purga=0,tiempo_ppurga=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,Dif16=0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
.................... char letra;  
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... int8 n_opcionH=8; 
....................  
.................... #include <Funciones.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... void ajuste_vel(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
4150:  MOVFF  D3,FBE
.................... } 
4154:  RETLW  00
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
38C8:  RLCF   xDB,W
38CA:  MOVWF  00
38CC:  RLCF   00,F
38CE:  MOVLW  FC
38D0:  ANDWF  00,F
38D2:  MOVFF  00,01
38D6:  MOVF   FC2,W
38D8:  ANDLW  C3
38DA:  IORWF  00,W
38DC:  MOVWF  FC2
38DE:  MOVLW  0A
38E0:  MOVWF  xE9
38E2:  CALL   0B20
38E6:  BSF    FC2.1
38E8:  BTFSC  FC2.1
38EA:  BRA    38E8
38EC:  MOVFF  FC4,03
38F0:  MOVFF  FC3,E0
38F4:  MOVFF  FC4,E1
38F8:  CALL   0D3A
38FC:  MOVFF  03,DF
3900:  MOVFF  02,DE
3904:  MOVFF  01,DD
3908:  MOVFF  00,DC
390C:  MOVFF  DC,00
3910:  MOVFF  DD,01
3914:  MOVFF  DE,02
3918:  MOVFF  DF,03
.................... } 
391C:  RETLW  00
....................  
.................... float leeTemperatura(){ 
*
4378:  CLRF   xD6
437A:  CLRF   xD5
437C:  CLRF   xD4
437E:  CLRF   xD3
4380:  CLRF   xDA
4382:  CLRF   xD9
4384:  CLRF   xD8
4386:  CLRF   xD7
....................    float ADC=0,V=0; 
....................    ADC=sensores(0); 
4388:  CLRF   xDB
438A:  CALL   38C8
438E:  MOVFF  03,D6
4392:  MOVFF  02,D5
4396:  MOVFF  01,D4
439A:  MOVFF  00,D3
....................    V=5*ADC/1023; 
439E:  CLRF   xEB
43A0:  CLRF   xEA
43A2:  MOVLW  20
43A4:  MOVWF  xE9
43A6:  MOVLW  81
43A8:  MOVWF  xE8
43AA:  MOVFF  D6,EF
43AE:  MOVFF  D5,EE
43B2:  MOVFF  D4,ED
43B6:  MOVFF  D3,EC
43BA:  CALL   3596
43BE:  MOVFF  00,DB
43C2:  MOVFF  01,DC
43C6:  MOVFF  02,DD
43CA:  MOVFF  03,DE
43CE:  MOVFF  03,E2
43D2:  MOVFF  02,E1
43D6:  MOVFF  01,E0
43DA:  MOVFF  00,DF
43DE:  CLRF   xE6
43E0:  MOVLW  C0
43E2:  MOVWF  xE5
43E4:  MOVLW  7F
43E6:  MOVWF  xE4
43E8:  MOVLW  88
43EA:  MOVWF  xE3
43EC:  CALL   0D70
43F0:  MOVFF  03,DA
43F4:  MOVFF  02,D9
43F8:  MOVFF  01,D8
43FC:  MOVFF  00,D7
....................    return V/0.01; 
4400:  MOVFF  DA,E2
4404:  MOVFF  D9,E1
4408:  MOVFF  D8,E0
440C:  MOVFF  D7,DF
4410:  MOVLW  0A
4412:  MOVWF  xE6
4414:  MOVLW  D7
4416:  MOVWF  xE5
4418:  MOVLW  23
441A:  MOVWF  xE4
441C:  MOVLW  78
441E:  MOVWF  xE3
4420:  CALL   0D70
.................... } 
4424:  GOTO   50A0 (RETURN)
....................  
.................... void intensidadpantalla(int x){ 
....................    if(x==0)    
*
0B10:  MOVF   xD3,F
0B12:  BNZ   0B1A
....................       Pantalla_off; 
0B14:  BCF    F8B.7
0B16:  BCF    F94.7
....................    else 
0B18:  BRA    0B1E
....................       Pantalla_on; 
0B1A:  BSF    F8B.7
0B1C:  BCF    F94.7
.................... } 
0B1E:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media){ 
....................     //Voltaje0=sensores(0)*5/1023; 
....................     //Voltaje1=sensores(1)*5/1023; 
....................     //Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     //TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     //TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................      
....................     if(negativo==10) 
*
470C:  MOVF   30,W
470E:  SUBLW  0A
4710:  BNZ   4772
....................       x_uno=sensores(1)+Diferencia; 
4712:  MOVLW  01
4714:  MOVWF  xDB
4716:  CALL   38C8
471A:  MOVFF  00,D4
471E:  MOVFF  01,D5
4722:  MOVFF  02,D6
4726:  MOVFF  03,D7
472A:  MOVFF  FEA,D9
472E:  MOVFF  FE9,D8
4732:  BCF    FD8.1
4734:  MOVFF  03,DD
4738:  MOVFF  02,DC
473C:  MOVFF  01,DB
4740:  MOVFF  00,DA
4744:  MOVFF  99,E1
4748:  MOVFF  98,E0
474C:  MOVFF  97,DF
4750:  MOVFF  96,DE
4754:  CALL   0ECA
4758:  MOVFF  D9,FEA
475C:  MOVFF  D8,FE9
4760:  MOVFF  03,7D
4764:  MOVFF  02,7C
4768:  MOVFF  01,7B
476C:  MOVFF  00,7A
....................     else if(negativo==20) 
4770:  BRA    47D6
4772:  MOVF   30,W
4774:  SUBLW  14
4776:  BNZ   47D6
....................       x_uno=sensores(1)-Diferencia; 
4778:  MOVLW  01
477A:  MOVWF  xDB
477C:  CALL   38C8
4780:  MOVFF  00,D4
4784:  MOVFF  01,D5
4788:  MOVFF  02,D6
478C:  MOVFF  03,D7
4790:  MOVFF  FEA,D9
4794:  MOVFF  FE9,D8
4798:  BSF    FD8.1
479A:  MOVFF  03,DD
479E:  MOVFF  02,DC
47A2:  MOVFF  01,DB
47A6:  MOVFF  00,DA
47AA:  MOVFF  99,E1
47AE:  MOVFF  98,E0
47B2:  MOVFF  97,DF
47B6:  MOVFF  96,DE
47BA:  CALL   0ECA
47BE:  MOVFF  D9,FEA
47C2:  MOVFF  D8,FE9
47C6:  MOVFF  03,7D
47CA:  MOVFF  02,7C
47CE:  MOVFF  01,7B
47D2:  MOVFF  00,7A
....................      
....................     x_cuadrado=x_uno*x_uno; 
47D6:  MOVFF  7D,EB
47DA:  MOVFF  7C,EA
47DE:  MOVFF  7B,E9
47E2:  MOVFF  7A,E8
47E6:  MOVFF  7D,EF
47EA:  MOVFF  7C,EE
47EE:  MOVFF  7B,ED
47F2:  MOVFF  7A,EC
47F6:  CALL   3596
47FA:  MOVFF  03,81
47FE:  MOVFF  02,80
4802:  MOVFF  01,7F
4806:  MOVFF  00,7E
....................     x_cubo=x_uno*x_cuadrado; 
480A:  MOVFF  7D,EB
480E:  MOVFF  7C,EA
4812:  MOVFF  7B,E9
4816:  MOVFF  7A,E8
481A:  MOVFF  81,EF
481E:  MOVFF  80,EE
4822:  MOVFF  7F,ED
4826:  MOVFF  7E,EC
482A:  CALL   3596
482E:  MOVFF  03,85
4832:  MOVFF  02,84
4836:  MOVFF  01,83
483A:  MOVFF  00,82
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
483E:  MOVFF  85,EB
4842:  MOVFF  84,EA
4846:  MOVFF  83,E9
484A:  MOVFF  82,E8
484E:  MOVFF  61,EF
4852:  MOVFF  60,EE
4856:  MOVFF  5F,ED
485A:  MOVFF  5E,EC
485E:  CALL   3596
4862:  MOVFF  00,D4
4866:  MOVFF  01,D5
486A:  MOVFF  02,D6
486E:  MOVFF  03,D7
4872:  MOVFF  81,EB
4876:  MOVFF  80,EA
487A:  MOVFF  7F,E9
487E:  MOVFF  7E,E8
4882:  MOVFF  65,EF
4886:  MOVFF  64,EE
488A:  MOVFF  63,ED
488E:  MOVFF  62,EC
4892:  CALL   3596
4896:  BCF    FD8.1
4898:  MOVFF  D7,DD
489C:  MOVFF  D6,DC
48A0:  MOVFF  D5,DB
48A4:  MOVFF  D4,DA
48A8:  MOVFF  03,E1
48AC:  MOVFF  02,E0
48B0:  MOVFF  01,DF
48B4:  MOVFF  00,DE
48B8:  CALL   0ECA
48BC:  MOVFF  00,D4
48C0:  MOVFF  01,D5
48C4:  MOVFF  02,D6
48C8:  MOVFF  03,D7
48CC:  MOVFF  7D,EB
48D0:  MOVFF  7C,EA
48D4:  MOVFF  7B,E9
48D8:  MOVFF  7A,E8
48DC:  MOVFF  69,EF
48E0:  MOVFF  68,EE
48E4:  MOVFF  67,ED
48E8:  MOVFF  66,EC
48EC:  CALL   3596
48F0:  BCF    FD8.1
48F2:  MOVFF  D7,DD
48F6:  MOVFF  D6,DC
48FA:  MOVFF  D5,DB
48FE:  MOVFF  D4,DA
4902:  MOVFF  03,E1
4906:  MOVFF  02,E0
490A:  MOVFF  01,DF
490E:  MOVFF  00,DE
4912:  CALL   0ECA
4916:  MOVFF  00,D4
491A:  MOVFF  01,D5
491E:  MOVFF  02,D6
4922:  MOVFF  03,D7
4926:  BCF    FD8.1
4928:  MOVFF  03,DD
492C:  MOVFF  02,DC
4930:  MOVFF  01,DB
4934:  MOVFF  00,DA
4938:  MOVFF  6D,E1
493C:  MOVFF  6C,E0
4940:  MOVFF  6B,DF
4944:  MOVFF  6A,DE
4948:  CALL   0ECA
494C:  MOVFF  03,91
4950:  MOVFF  02,90
4954:  MOVFF  01,8F
4958:  MOVFF  00,8E
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
495C:  BSF    FD8.1
495E:  MOVFF  91,DD
4962:  MOVFF  90,DC
4966:  MOVFF  8F,DB
496A:  MOVFF  8E,DA
496E:  MOVLW  0A
4970:  MOVWF  xE1
4972:  MOVLW  D7
4974:  MOVWF  xE0
4976:  MOVLW  23
4978:  MOVWF  xDF
497A:  MOVLW  7B
497C:  MOVWF  xDE
497E:  CALL   0ECA
4982:  MOVFF  03,91
4986:  MOVFF  02,90
498A:  MOVFF  01,8F
498E:  MOVFF  00,8E
....................      
....................     if(Velocidad<0.0) 
4992:  MOVFF  91,DA
4996:  MOVFF  90,D9
499A:  MOVFF  8F,D8
499E:  MOVFF  8E,D7
49A2:  CLRF   xDE
49A4:  CLRF   xDD
49A6:  CLRF   xDC
49A8:  CLRF   xDB
49AA:  CALL   1540
49AE:  BNC   49B8
....................       Velocidad=0.0; 
49B0:  CLRF   x91
49B2:  CLRF   x90
49B4:  CLRF   x8F
49B6:  CLRF   x8E
....................       
....................      if(l>=media) 
49B8:  MOVF   xD3,W
49BA:  SUBWF  2C,W
49BC:  BNC   49C0
....................        l=0; 
49BE:  CLRF   2C
....................       
....................      promedio[l]=Velocidad;l++; 
49C0:  MOVF   2C,W
49C2:  MULLW  04
49C4:  MOVF   FF3,W
49C6:  CLRF   03
49C8:  ADDLW  A2
49CA:  MOVWF  FE9
49CC:  MOVLW  00
49CE:  ADDWFC 03,W
49D0:  MOVWF  FEA
49D2:  MOVFF  8E,FEF
49D6:  MOVFF  8F,FEC
49DA:  MOVFF  90,FEC
49DE:  MOVFF  91,FEC
49E2:  INCF   2C,F
....................      Flujo2=0; 
49E4:  CLRF   x75
49E6:  CLRF   x74
49E8:  CLRF   x73
49EA:  CLRF   x72
....................       
....................      for(h=0;h<=(media-1);h++){ 
49EC:  CLRF   2D
49EE:  MOVLW  01
49F0:  SUBWF  xD3,W
49F2:  SUBWF  2D,W
49F4:  BZ    49F8
49F6:  BC    4A64
....................         Flujo2+=promedio[h]; 
49F8:  MOVF   2D,W
49FA:  MULLW  04
49FC:  MOVF   FF3,W
49FE:  CLRF   03
4A00:  ADDLW  A2
4A02:  MOVWF  FE9
4A04:  MOVLW  00
4A06:  ADDWFC 03,W
4A08:  MOVWF  FEA
4A0A:  MOVFF  FEF,00
4A0E:  MOVFF  FEC,01
4A12:  MOVFF  FEC,02
4A16:  MOVFF  FEC,03
4A1A:  MOVFF  FEA,D5
4A1E:  MOVFF  FE9,D4
4A22:  BCF    FD8.1
4A24:  MOVFF  75,DD
4A28:  MOVFF  74,DC
4A2C:  MOVFF  73,DB
4A30:  MOVFF  72,DA
4A34:  MOVFF  03,E1
4A38:  MOVFF  02,E0
4A3C:  MOVFF  01,DF
4A40:  MOVFF  00,DE
4A44:  CALL   0ECA
4A48:  MOVFF  D5,FEA
4A4C:  MOVFF  D4,FE9
4A50:  MOVFF  03,75
4A54:  MOVFF  02,74
4A58:  MOVFF  01,73
4A5C:  MOVFF  00,72
....................      }  
4A60:  INCF   2D,F
4A62:  BRA    49EE
....................    
....................      Flujo2=(Flujo2/media)*Ajuste1; 
4A64:  CLRF   xE1
4A66:  MOVFF  D3,E0
4A6A:  CALL   0D3A
4A6E:  MOVFF  75,E2
4A72:  MOVFF  74,E1
4A76:  MOVFF  73,E0
4A7A:  MOVFF  72,DF
4A7E:  MOVFF  03,E6
4A82:  MOVFF  02,E5
4A86:  MOVFF  01,E4
4A8A:  MOVFF  00,E3
4A8E:  CALL   0D70
4A92:  MOVFF  00,D4
4A96:  MOVFF  01,D5
4A9A:  MOVFF  02,D6
4A9E:  MOVFF  03,D7
4AA2:  MOVFF  03,EB
4AA6:  MOVFF  02,EA
4AAA:  MOVFF  01,E9
4AAE:  MOVFF  00,E8
4AB2:  MOVFF  9D,EF
4AB6:  MOVFF  9C,EE
4ABA:  MOVFF  9B,ED
4ABE:  MOVFF  9A,EC
4AC2:  CALL   3596
4AC6:  MOVFF  03,75
4ACA:  MOVFF  02,74
4ACE:  MOVFF  01,73
4AD2:  MOVFF  00,72
....................      return Flujo2; 
4AD6:  MOVFF  72,00
4ADA:  MOVFF  73,01
4ADE:  MOVFF  74,02
4AE2:  MOVFF  75,03
.................... } 
4AE6:  RETLW  00
....................  
.................... void controlar_flujo(void){ 
....................    if(Automa==20 && estadomv==1){ 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
....................       if(error<0.2&&error>-0.2){ 
....................       }else{ 
....................          if(error>0.0) 
....................             tmp+=1; 
....................                 
....................          if(error<-0.0) 
....................             tmp-=1;   
....................       } 
....................        
....................       if(tmp>251) 
....................          tmp=251; 
....................       if(tmp<4)          
....................          tmp=4;       
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Manual==20){ 
....................       tmp=251; 
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Semi==20){ 
....................       set_pwm1_duty (ValorSemi); 
....................    } 
.................... } 
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
.................... } 
....................  
.................... void SalidasOff(void){ 
....................    set_pwm1_duty(0); 
*
0AFC:  CLRF   FBE
....................    Luz_Blanca_off; 
0AFE:  BCF    F8A.4
0B00:  BCF    F93.4
....................    Motor_off; 
0B02:  BCF    F8A.5
0B04:  BCF    F93.5
....................    Aux_off; 
0B06:  BCF    F8A.6
0B08:  BCF    F93.6
....................    Alarma_off; 
0B0A:  BCF    F8A.7
0B0C:  BCF    F93.7
.................... } 
0B0E:  RETLW  00
....................  
.................... void ConfigInicial(void){ 
....................    setup_adc_ports(AN0_TO_AN1); 
*
0CF4:  MOVF   FC1,W
0CF6:  ANDLW  C0
0CF8:  IORLW  0D
0CFA:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0CFC:  BCF    FC0.0
0CFE:  BSF    FC0.1
0D00:  BCF    FC0.2
0D02:  BSF    FC0.7
0D04:  BSF    FC2.0
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0D06:  MOVLW  85
0D08:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0D0A:  BSF    F9D.0
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
0D0C:  MOVLW  00
0D0E:  IORLW  05
0D10:  MOVWF  FCA
0D12:  MOVLW  FF
0D14:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
0D16:  BCF    F94.2
0D18:  BCF    F8B.2
0D1A:  BCF    F96.6
0D1C:  MOVLW  0C
0D1E:  MOVWF  FBD
0D20:  CLRF   FB7
0D22:  CLRF   FB6
....................    enable_interrupts(GLOBAL);    
0D24:  MOVLW  C0
0D26:  IORWF  FF2,F
....................    SalidasOff(); 
0D28:  RCALL  0AFC
....................    intensidadpantalla(0); 
0D2A:  CLRF   xD3
0D2C:  RCALL  0B10
....................    lcd_init(); 
0D2E:  RCALL  0BC8
....................    printf(lcd_putc,"\f"); 
0D30:  MOVLW  0C
0D32:  MOVWF  xE8
0D34:  RCALL  0C92
.................... } 
0D36:  GOTO   4DB6 (RETURN)
....................  
.................... void LeeEEPROM(void){ 
.................... // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(100);delay_ms(20);  
*
1134:  MOVFF  FF2,D3
1138:  BCF    FF2.7
113A:  MOVLW  64
113C:  MOVWF  FA9
113E:  BCF    FA6.6
1140:  BCF    FA6.7
1142:  BSF    FA6.0
1144:  MOVF   FA8,W
1146:  BTFSC  xD3.7
1148:  BSF    FF2.7
114A:  MOVWF  4C
114C:  MOVLW  14
114E:  MOVWF  xE9
1150:  RCALL  0B20
....................    contrasena[1]=read_eeprom(101);delay_ms(20); 
1152:  MOVFF  FF2,D3
1156:  BCF    FF2.7
1158:  MOVLW  65
115A:  MOVWF  FA9
115C:  BCF    FA6.6
115E:  BCF    FA6.7
1160:  BSF    FA6.0
1162:  MOVF   FA8,W
1164:  BTFSC  xD3.7
1166:  BSF    FF2.7
1168:  MOVWF  4D
116A:  MOVLW  14
116C:  MOVWF  xE9
116E:  RCALL  0B20
....................    contrasena[2]=read_eeprom(102);delay_ms(20);  
1170:  MOVFF  FF2,D3
1174:  BCF    FF2.7
1176:  MOVLW  66
1178:  MOVWF  FA9
117A:  BCF    FA6.6
117C:  BCF    FA6.7
117E:  BSF    FA6.0
1180:  MOVF   FA8,W
1182:  BTFSC  xD3.7
1184:  BSF    FF2.7
1186:  MOVWF  4E
1188:  MOVLW  14
118A:  MOVWF  xE9
118C:  RCALL  0B20
....................    contrasena[3]=read_eeprom(103);delay_ms(20); 
118E:  MOVFF  FF2,D3
1192:  BCF    FF2.7
1194:  MOVLW  67
1196:  MOVWF  FA9
1198:  BCF    FA6.6
119A:  BCF    FA6.7
119C:  BSF    FA6.0
119E:  MOVF   FA8,W
11A0:  BTFSC  xD3.7
11A2:  BSF    FF2.7
11A4:  MOVWF  4F
11A6:  MOVLW  14
11A8:  MOVWF  xE9
11AA:  RCALL  0B20
....................    estadoalarma=read_eeprom(5);delay_ms(20); 
11AC:  MOVFF  FF2,D3
11B0:  BCF    FF2.7
11B2:  MOVLW  05
11B4:  MOVWF  FA9
11B6:  BCF    FA6.6
11B8:  BCF    FA6.7
11BA:  BSF    FA6.0
11BC:  MOVF   FA8,W
11BE:  BTFSC  xD3.7
11C0:  BSF    FF2.7
11C2:  MOVWF  01
11C4:  BCF    42.2
11C6:  BTFSC  01.0
11C8:  BSF    42.2
11CA:  MOVLW  14
11CC:  MOVWF  xE9
11CE:  RCALL  0B20
....................    Manual=read_eeprom(10);delay_ms(20); 
11D0:  MOVFF  FF2,D3
11D4:  BCF    FF2.7
11D6:  MOVLW  0A
11D8:  MOVWF  FA9
11DA:  BCF    FA6.6
11DC:  BCF    FA6.7
11DE:  BSF    FA6.0
11E0:  MOVF   FA8,W
11E2:  BTFSC  xD3.7
11E4:  BSF    FF2.7
11E6:  MOVWF  32
11E8:  MOVLW  14
11EA:  MOVWF  xE9
11EC:  RCALL  0B20
....................    Automa=read_eeprom(11);delay_ms(20); 
11EE:  MOVFF  FF2,D3
11F2:  BCF    FF2.7
11F4:  MOVLW  0B
11F6:  MOVWF  FA9
11F8:  BCF    FA6.6
11FA:  BCF    FA6.7
11FC:  BSF    FA6.0
11FE:  MOVF   FA8,W
1200:  BTFSC  xD3.7
1202:  BSF    FF2.7
1204:  MOVWF  31
1206:  MOVLW  14
1208:  MOVWF  xE9
120A:  RCALL  0B20
....................    Semi=read_eeprom(12);delay_ms(20); 
120C:  MOVFF  FF2,D3
1210:  BCF    FF2.7
1212:  MOVLW  0C
1214:  MOVWF  FA9
1216:  BCF    FA6.6
1218:  BCF    FA6.7
121A:  BSF    FA6.0
121C:  MOVF   FA8,W
121E:  BTFSC  xD3.7
1220:  BSF    FF2.7
1222:  MOVWF  33
1224:  MOVLW  14
1226:  MOVWF  xE9
1228:  RCALL  0B20
....................    ValorSemi=read_eeprom(13);delay_ms(20); 
122A:  MOVFF  FF2,D3
122E:  BCF    FF2.7
1230:  MOVLW  0D
1232:  MOVWF  FA9
1234:  BCF    FA6.6
1236:  BCF    FA6.7
1238:  BSF    FA6.0
123A:  MOVF   FA8,W
123C:  BTFSC  xD3.7
123E:  BSF    FF2.7
1240:  MOVWF  34
1242:  MOVLW  14
1244:  MOVWF  xE9
1246:  RCALL  0B20
....................    tmp=ValorSemi; 
1248:  MOVFF  34,2E
....................  
....................    purga_minutos=read_eeprom(20);delay_ms(20); 
124C:  MOVFF  FF2,D3
1250:  BCF    FF2.7
1252:  MOVLW  14
1254:  MOVWF  FA9
1256:  BCF    FA6.6
1258:  BCF    FA6.7
125A:  BSF    FA6.0
125C:  MOVF   FA8,W
125E:  BTFSC  xD3.7
1260:  BSF    FF2.7
1262:  MOVWF  26
1264:  MOVLW  14
1266:  MOVWF  xE9
1268:  RCALL  0B20
....................    purga_segundos=read_eeprom(21);delay_ms(20); 
126A:  MOVFF  FF2,D3
126E:  BCF    FF2.7
1270:  MOVLW  15
1272:  MOVWF  FA9
1274:  BCF    FA6.6
1276:  BCF    FA6.7
1278:  BSF    FA6.0
127A:  MOVF   FA8,W
127C:  BTFSC  xD3.7
127E:  BSF    FF2.7
1280:  MOVWF  3A
1282:  MOVLW  14
1284:  MOVWF  xE9
1286:  RCALL  0B20
....................    ppurga_minutos=read_eeprom(22);delay_ms(20); 
1288:  MOVFF  FF2,D3
128C:  BCF    FF2.7
128E:  MOVLW  16
1290:  MOVWF  FA9
1292:  BCF    FA6.6
1294:  BCF    FA6.7
1296:  BSF    FA6.0
1298:  MOVF   FA8,W
129A:  BTFSC  xD3.7
129C:  BSF    FF2.7
129E:  MOVWF  3E
12A0:  MOVLW  14
12A2:  MOVWF  xE9
12A4:  RCALL  0B20
....................    ppurga_segundos=read_eeprom(23);delay_ms(20); 
12A6:  MOVFF  FF2,D3
12AA:  BCF    FF2.7
12AC:  MOVLW  17
12AE:  MOVWF  FA9
12B0:  BCF    FA6.6
12B2:  BCF    FA6.7
12B4:  BSF    FA6.0
12B6:  MOVF   FA8,W
12B8:  BTFSC  xD3.7
12BA:  BSF    FF2.7
12BC:  MOVWF  3C
12BE:  MOVLW  14
12C0:  MOVWF  xE9
12C2:  RCALL  0B20
....................        
....................    Entero=read_eeprom(25);delay_ms(20);//Decimal1=read_eeprom(26); 
12C4:  MOVFF  FF2,D3
12C8:  BCF    FF2.7
12CA:  MOVLW  19
12CC:  MOVWF  FA9
12CE:  BCF    FA6.6
12D0:  BCF    FA6.7
12D2:  BSF    FA6.0
12D4:  MOVF   FA8,W
12D6:  BTFSC  xD3.7
12D8:  BSF    FF2.7
12DA:  MOVWF  28
12DC:  MOVLW  14
12DE:  MOVWF  xE9
12E0:  RCALL  0B20
....................    Temporal=read_eeprom(26);delay_ms(20); 
12E2:  MOVFF  FF2,D3
12E6:  BCF    FF2.7
12E8:  MOVLW  1A
12EA:  MOVWF  FA9
12EC:  BCF    FA6.6
12EE:  BCF    FA6.7
12F0:  BSF    FA6.0
12F2:  MOVF   FA8,W
12F4:  BTFSC  xD3.7
12F6:  BSF    FF2.7
12F8:  CLRF   xE1
12FA:  MOVWF  xE0
12FC:  RCALL  0D3A
12FE:  MOVFF  03,89
1302:  MOVFF  02,88
1306:  MOVFF  01,87
130A:  MOVFF  00,86
130E:  MOVLW  14
1310:  MOVWF  xE9
1312:  RCALL  0B20
....................    Temporal=Temporal/10.0; 
1314:  MOVFF  89,E2
1318:  MOVFF  88,E1
131C:  MOVFF  87,E0
1320:  MOVFF  86,DF
1324:  CLRF   xE6
1326:  CLRF   xE5
1328:  MOVLW  20
132A:  MOVWF  xE4
132C:  MOVLW  82
132E:  MOVWF  xE3
1330:  RCALL  0D70
1332:  MOVFF  03,89
1336:  MOVFF  02,88
133A:  MOVFF  01,87
133E:  MOVFF  00,86
....................    Ajuste1=Entero+Temporal; 
1342:  CLRF   xE1
1344:  MOVFF  28,E0
1348:  RCALL  0D3A
134A:  BCF    FD8.1
134C:  MOVFF  03,DD
1350:  MOVFF  02,DC
1354:  MOVFF  01,DB
1358:  MOVFF  00,DA
135C:  MOVFF  89,E1
1360:  MOVFF  88,E0
1364:  MOVFF  87,DF
1368:  MOVFF  86,DE
136C:  RCALL  0ECA
136E:  MOVFF  03,9D
1372:  MOVFF  02,9C
1376:  MOVFF  01,9B
137A:  MOVFF  00,9A
....................     
....................    Entero=read_eeprom(40);delay_ms(20);//Decimal2=read_eeprom(41); 
137E:  MOVFF  FF2,D3
1382:  BCF    FF2.7
1384:  MOVLW  28
1386:  MOVWF  FA9
1388:  BCF    FA6.6
138A:  BCF    FA6.7
138C:  BSF    FA6.0
138E:  MOVF   FA8,W
1390:  BTFSC  xD3.7
1392:  BSF    FF2.7
1394:  MOVWF  28
1396:  MOVLW  14
1398:  MOVWF  xE9
139A:  CALL   0B20
....................    Temporal=read_eeprom(41);delay_ms(20); 
139E:  MOVFF  FF2,D3
13A2:  BCF    FF2.7
13A4:  MOVLW  29
13A6:  MOVWF  FA9
13A8:  BCF    FA6.6
13AA:  BCF    FA6.7
13AC:  BSF    FA6.0
13AE:  MOVF   FA8,W
13B0:  BTFSC  xD3.7
13B2:  BSF    FF2.7
13B4:  CLRF   xE1
13B6:  MOVWF  xE0
13B8:  RCALL  0D3A
13BA:  MOVFF  03,89
13BE:  MOVFF  02,88
13C2:  MOVFF  01,87
13C6:  MOVFF  00,86
13CA:  MOVLW  14
13CC:  MOVWF  xE9
13CE:  CALL   0B20
....................    Temporal=Temporal/10.0; 
13D2:  MOVFF  89,E2
13D6:  MOVFF  88,E1
13DA:  MOVFF  87,E0
13DE:  MOVFF  86,DF
13E2:  CLRF   xE6
13E4:  CLRF   xE5
13E6:  MOVLW  20
13E8:  MOVWF  xE4
13EA:  MOVLW  82
13EC:  MOVWF  xE3
13EE:  RCALL  0D70
13F0:  MOVFF  03,89
13F4:  MOVFF  02,88
13F8:  MOVFF  01,87
13FC:  MOVFF  00,86
....................    //setpoint=Entero+Temporal; 
....................    setpoint=Entero; 
1400:  MOVFF  28,41
....................    MediaMovil=read_eeprom(42);delay_ms(20); 
1404:  MOVFF  FF2,D3
1408:  BCF    FF2.7
140A:  MOVLW  2A
140C:  MOVWF  FA9
140E:  BCF    FA6.6
1410:  BCF    FA6.7
1412:  BSF    FA6.0
1414:  MOVF   FA8,W
1416:  BTFSC  xD3.7
1418:  BSF    FF2.7
141A:  MOVWF  2F
141C:  MOVLW  14
141E:  MOVWF  xE9
1420:  CALL   0B20
....................    
....................    negativo=read_eeprom(50);delay_ms(20); 
1424:  MOVFF  FF2,D3
1428:  BCF    FF2.7
142A:  MOVLW  32
142C:  MOVWF  FA9
142E:  BCF    FA6.6
1430:  BCF    FA6.7
1432:  BSF    FA6.0
1434:  MOVF   FA8,W
1436:  BTFSC  xD3.7
1438:  BSF    FF2.7
143A:  MOVWF  30
143C:  MOVLW  14
143E:  MOVWF  xE9
1440:  CALL   0B20
....................     
....................    Entero1=read_eeprom(60);delay_ms(20);//Decimal2=read_eeprom(41); 
1444:  MOVFF  FF2,D3
1448:  BCF    FF2.7
144A:  MOVLW  3C
144C:  MOVWF  FA9
144E:  BCF    FA6.6
1450:  BCF    FA6.7
1452:  BSF    FA6.0
1454:  MOVF   FA8,W
1456:  BTFSC  xD3.7
1458:  BSF    FF2.7
145A:  MOVWF  2B
145C:  MOVLW  14
145E:  MOVWF  xE9
1460:  CALL   0B20
....................    Temporal1=read_eeprom(61);delay_ms(20); 
1464:  MOVFF  FF2,D3
1468:  BCF    FF2.7
146A:  MOVLW  3D
146C:  MOVWF  FA9
146E:  BCF    FA6.6
1470:  BCF    FA6.7
1472:  BSF    FA6.0
1474:  MOVF   FA8,W
1476:  BTFSC  xD3.7
1478:  BSF    FF2.7
147A:  CLRF   xE1
147C:  MOVWF  xE0
147E:  RCALL  0D3A
1480:  MOVFF  03,95
1484:  MOVFF  02,94
1488:  MOVFF  01,93
148C:  MOVFF  00,92
1490:  MOVLW  14
1492:  MOVWF  xE9
1494:  CALL   0B20
....................    Diferencia=make16(Temporal1,Entero1); 
1498:  MOVFF  92,03
149C:  MOVFF  2B,E0
14A0:  MOVFF  92,E1
14A4:  RCALL  0D3A
14A6:  MOVFF  03,99
14AA:  MOVFF  02,98
14AE:  MOVFF  01,97
14B2:  MOVFF  00,96
....................     
....................    segundos=read_eeprom(70);delay_ms(20); 
14B6:  MOVFF  FF2,D3
14BA:  BCF    FF2.7
14BC:  MOVLW  46
14BE:  MOVWF  FA9
14C0:  BCF    FA6.6
14C2:  BCF    FA6.7
14C4:  BSF    FA6.0
14C6:  MOVF   FA8,W
14C8:  BTFSC  xD3.7
14CA:  BSF    FF2.7
14CC:  MOVWF  36
14CE:  MOVLW  14
14D0:  MOVWF  xE9
14D2:  CALL   0B20
....................    minutos=read_eeprom(71);delay_ms(20); 
14D6:  MOVFF  FF2,D3
14DA:  BCF    FF2.7
14DC:  MOVLW  47
14DE:  MOVWF  FA9
14E0:  BCF    FA6.6
14E2:  BCF    FA6.7
14E4:  BSF    FA6.0
14E6:  MOVF   FA8,W
14E8:  BTFSC  xD3.7
14EA:  BSF    FF2.7
14EC:  MOVWF  37
14EE:  MOVLW  14
14F0:  MOVWF  xE9
14F2:  CALL   0B20
....................    horas=read_eeprom(72);delay_ms(20); 
14F6:  MOVFF  FF2,D3
14FA:  BCF    FF2.7
14FC:  MOVLW  48
14FE:  MOVWF  FA9
1500:  BCF    FA6.6
1502:  BCF    FA6.7
1504:  BSF    FA6.0
1506:  MOVF   FA8,W
1508:  BTFSC  xD3.7
150A:  BSF    FF2.7
150C:  MOVWF  38
150E:  MOVLW  14
1510:  MOVWF  xE9
1512:  CALL   0B20
....................    flag_filtro=read_eeprom(73);delay_ms(20); 
1516:  MOVFF  FF2,D3
151A:  BCF    FF2.7
151C:  MOVLW  49
151E:  MOVWF  FA9
1520:  BCF    FA6.6
1522:  BCF    FA6.7
1524:  BSF    FA6.0
1526:  MOVF   FA8,W
1528:  BTFSC  xD3.7
152A:  BSF    FF2.7
152C:  MOVWF  01
152E:  BCF    43.2
1530:  BTFSC  01.0
1532:  BSF    43.2
1534:  MOVLW  14
1536:  MOVWF  xE9
1538:  CALL   0B20
.................... } 
153C:  GOTO   4DBA (RETURN)
....................  
.................... void LimitaValores(void){ 
....................    if(contrasena[0]>9 || contrasena[0]<0){ 
*
15B6:  BTFSC  4C.7
15B8:  BRA    15C0
15BA:  MOVF   4C,W
15BC:  SUBLW  09
15BE:  BNC   15C6
15C0:  BTFSC  4C.7
15C2:  BRA    15C6
15C4:  BRA    15FA
....................       contrasena[0]=0;write_eeprom(100,0);delay_ms(20); 
15C6:  CLRF   4C
15C8:  MOVLW  64
15CA:  MOVWF  FA9
15CC:  CLRF   FA8
15CE:  BCF    FA6.6
15D0:  BCF    FA6.7
15D2:  BSF    FA6.2
15D4:  MOVF   FF2,W
15D6:  MOVWF  00
15D8:  BCF    FF2.7
15DA:  MOVLB  F
15DC:  MOVLW  55
15DE:  MOVWF  FA7
15E0:  MOVLW  AA
15E2:  MOVWF  FA7
15E4:  BSF    FA6.1
15E6:  BTFSC  FA6.1
15E8:  BRA    15E6
15EA:  BCF    FA6.2
15EC:  MOVF   00,W
15EE:  IORWF  FF2,F
15F0:  MOVLW  14
15F2:  MOVLB  0
15F4:  MOVWF  xE9
15F6:  CALL   0B20
....................    } 
....................    if(contrasena[1]>9 || contrasena[1]<0){ 
15FA:  BTFSC  4D.7
15FC:  BRA    1604
15FE:  MOVF   4D,W
1600:  SUBLW  09
1602:  BNC   160A
1604:  BTFSC  4D.7
1606:  BRA    160A
1608:  BRA    163E
....................       contrasena[1]=0;write_eeprom(101,0);delay_ms(20); 
160A:  CLRF   4D
160C:  MOVLW  65
160E:  MOVWF  FA9
1610:  CLRF   FA8
1612:  BCF    FA6.6
1614:  BCF    FA6.7
1616:  BSF    FA6.2
1618:  MOVF   FF2,W
161A:  MOVWF  00
161C:  BCF    FF2.7
161E:  MOVLB  F
1620:  MOVLW  55
1622:  MOVWF  FA7
1624:  MOVLW  AA
1626:  MOVWF  FA7
1628:  BSF    FA6.1
162A:  BTFSC  FA6.1
162C:  BRA    162A
162E:  BCF    FA6.2
1630:  MOVF   00,W
1632:  IORWF  FF2,F
1634:  MOVLW  14
1636:  MOVLB  0
1638:  MOVWF  xE9
163A:  CALL   0B20
....................    } 
....................    if(contrasena[2]>9 || contrasena[2]<0){ 
163E:  BTFSC  4E.7
1640:  BRA    1648
1642:  MOVF   4E,W
1644:  SUBLW  09
1646:  BNC   164E
1648:  BTFSC  4E.7
164A:  BRA    164E
164C:  BRA    1682
....................       contrasena[2]=0;write_eeprom(102,0);delay_ms(20); 
164E:  CLRF   4E
1650:  MOVLW  66
1652:  MOVWF  FA9
1654:  CLRF   FA8
1656:  BCF    FA6.6
1658:  BCF    FA6.7
165A:  BSF    FA6.2
165C:  MOVF   FF2,W
165E:  MOVWF  00
1660:  BCF    FF2.7
1662:  MOVLB  F
1664:  MOVLW  55
1666:  MOVWF  FA7
1668:  MOVLW  AA
166A:  MOVWF  FA7
166C:  BSF    FA6.1
166E:  BTFSC  FA6.1
1670:  BRA    166E
1672:  BCF    FA6.2
1674:  MOVF   00,W
1676:  IORWF  FF2,F
1678:  MOVLW  14
167A:  MOVLB  0
167C:  MOVWF  xE9
167E:  CALL   0B20
....................    } 
....................    if(contrasena[3]>9 || contrasena[3]<0){ 
1682:  BTFSC  4F.7
1684:  BRA    168C
1686:  MOVF   4F,W
1688:  SUBLW  09
168A:  BNC   1692
168C:  BTFSC  4F.7
168E:  BRA    1692
1690:  BRA    16C6
....................       contrasena[3]=0;write_eeprom(103,0);delay_ms(20); 
1692:  CLRF   4F
1694:  MOVLW  67
1696:  MOVWF  FA9
1698:  CLRF   FA8
169A:  BCF    FA6.6
169C:  BCF    FA6.7
169E:  BSF    FA6.2
16A0:  MOVF   FF2,W
16A2:  MOVWF  00
16A4:  BCF    FF2.7
16A6:  MOVLB  F
16A8:  MOVLW  55
16AA:  MOVWF  FA7
16AC:  MOVLW  AA
16AE:  MOVWF  FA7
16B0:  BSF    FA6.1
16B2:  BTFSC  FA6.1
16B4:  BRA    16B2
16B6:  BCF    FA6.2
16B8:  MOVF   00,W
16BA:  IORWF  FF2,F
16BC:  MOVLW  14
16BE:  MOVLB  0
16C0:  MOVWF  xE9
16C2:  CALL   0B20
....................    } 
....................    if(estadoalarma>1){ 
16C6:  MOVLW  00
16C8:  BTFSC  42.2
16CA:  MOVLW  01
16CC:  SUBLW  01
16CE:  BC    1706
....................       estadoalarma=1;write_eeprom(5,1);delay_ms(20); 
16D0:  BSF    42.2
16D2:  MOVLW  05
16D4:  MOVWF  FA9
16D6:  MOVLW  01
16D8:  MOVWF  FA8
16DA:  BCF    FA6.6
16DC:  BCF    FA6.7
16DE:  BSF    FA6.2
16E0:  MOVF   FF2,W
16E2:  MOVWF  00
16E4:  BCF    FF2.7
16E6:  MOVLB  F
16E8:  MOVLW  55
16EA:  MOVWF  FA7
16EC:  MOVLW  AA
16EE:  MOVWF  FA7
16F0:  BSF    FA6.1
16F2:  BTFSC  FA6.1
16F4:  BRA    16F2
16F6:  BCF    FA6.2
16F8:  MOVF   00,W
16FA:  IORWF  FF2,F
16FC:  MOVLW  14
16FE:  MOVLB  0
1700:  MOVWF  xE9
1702:  CALL   0B20
....................    } 
....................    if(Manual>20){ 
1706:  MOVF   32,W
1708:  SUBLW  14
170A:  BC    1744
....................       Manual=20;write_eeprom(10,20);delay_ms(20); 
170C:  MOVLW  14
170E:  MOVWF  32
1710:  MOVLW  0A
1712:  MOVWF  FA9
1714:  MOVLW  14
1716:  MOVWF  FA8
1718:  BCF    FA6.6
171A:  BCF    FA6.7
171C:  BSF    FA6.2
171E:  MOVF   FF2,W
1720:  MOVWF  00
1722:  BCF    FF2.7
1724:  MOVLB  F
1726:  MOVLW  55
1728:  MOVWF  FA7
172A:  MOVLW  AA
172C:  MOVWF  FA7
172E:  BSF    FA6.1
1730:  BTFSC  FA6.1
1732:  BRA    1730
1734:  BCF    FA6.2
1736:  MOVF   00,W
1738:  IORWF  FF2,F
173A:  MOVLW  14
173C:  MOVLB  0
173E:  MOVWF  xE9
1740:  CALL   0B20
....................    } 
....................    if(Automa>20){ 
1744:  MOVF   31,W
1746:  SUBLW  14
1748:  BC    1782
....................       Manual=10;write_eeprom(11,10);delay_ms(20); 
174A:  MOVLW  0A
174C:  MOVWF  32
174E:  MOVLW  0B
1750:  MOVWF  FA9
1752:  MOVLW  0A
1754:  MOVWF  FA8
1756:  BCF    FA6.6
1758:  BCF    FA6.7
175A:  BSF    FA6.2
175C:  MOVF   FF2,W
175E:  MOVWF  00
1760:  BCF    FF2.7
1762:  MOVLB  F
1764:  MOVLW  55
1766:  MOVWF  FA7
1768:  MOVLW  AA
176A:  MOVWF  FA7
176C:  BSF    FA6.1
176E:  BTFSC  FA6.1
1770:  BRA    176E
1772:  BCF    FA6.2
1774:  MOVF   00,W
1776:  IORWF  FF2,F
1778:  MOVLW  14
177A:  MOVLB  0
177C:  MOVWF  xE9
177E:  CALL   0B20
....................    } 
....................    if(Semi>20){ 
1782:  MOVF   33,W
1784:  SUBLW  14
1786:  BC    17C0
....................       Semi=10;write_eeprom(12,10);delay_ms(20); 
1788:  MOVLW  0A
178A:  MOVWF  33
178C:  MOVLW  0C
178E:  MOVWF  FA9
1790:  MOVLW  0A
1792:  MOVWF  FA8
1794:  BCF    FA6.6
1796:  BCF    FA6.7
1798:  BSF    FA6.2
179A:  MOVF   FF2,W
179C:  MOVWF  00
179E:  BCF    FF2.7
17A0:  MOVLB  F
17A2:  MOVLW  55
17A4:  MOVWF  FA7
17A6:  MOVLW  AA
17A8:  MOVWF  FA7
17AA:  BSF    FA6.1
17AC:  BTFSC  FA6.1
17AE:  BRA    17AC
17B0:  BCF    FA6.2
17B2:  MOVF   00,W
17B4:  IORWF  FF2,F
17B6:  MOVLW  14
17B8:  MOVLB  0
17BA:  MOVWF  xE9
17BC:  CALL   0B20
....................    } 
....................    if(purga_minutos>59){ 
17C0:  MOVF   26,W
17C2:  SUBLW  3B
17C4:  BC    17FE
....................       purga_minutos=2;write_eeprom(20,2);delay_ms(20); 
17C6:  MOVLW  02
17C8:  MOVWF  26
17CA:  MOVLW  14
17CC:  MOVWF  FA9
17CE:  MOVLW  02
17D0:  MOVWF  FA8
17D2:  BCF    FA6.6
17D4:  BCF    FA6.7
17D6:  BSF    FA6.2
17D8:  MOVF   FF2,W
17DA:  MOVWF  00
17DC:  BCF    FF2.7
17DE:  MOVLB  F
17E0:  MOVLW  55
17E2:  MOVWF  FA7
17E4:  MOVLW  AA
17E6:  MOVWF  FA7
17E8:  BSF    FA6.1
17EA:  BTFSC  FA6.1
17EC:  BRA    17EA
17EE:  BCF    FA6.2
17F0:  MOVF   00,W
17F2:  IORWF  FF2,F
17F4:  MOVLW  14
17F6:  MOVLB  0
17F8:  MOVWF  xE9
17FA:  CALL   0B20
....................    } 
....................    if(purga_segundos>59){ 
17FE:  MOVF   3A,W
1800:  SUBLW  3B
1802:  BC    1838
....................       purga_segundos=0;write_eeprom(21,0);delay_ms(20); 
1804:  CLRF   3A
1806:  MOVLW  15
1808:  MOVWF  FA9
180A:  CLRF   FA8
180C:  BCF    FA6.6
180E:  BCF    FA6.7
1810:  BSF    FA6.2
1812:  MOVF   FF2,W
1814:  MOVWF  00
1816:  BCF    FF2.7
1818:  MOVLB  F
181A:  MOVLW  55
181C:  MOVWF  FA7
181E:  MOVLW  AA
1820:  MOVWF  FA7
1822:  BSF    FA6.1
1824:  BTFSC  FA6.1
1826:  BRA    1824
1828:  BCF    FA6.2
182A:  MOVF   00,W
182C:  IORWF  FF2,F
182E:  MOVLW  14
1830:  MOVLB  0
1832:  MOVWF  xE9
1834:  CALL   0B20
....................    } 
....................    if(ppurga_minutos>59){ 
1838:  MOVF   3E,W
183A:  SUBLW  3B
183C:  BC    1876
....................       ppurga_minutos=2;write_eeprom(22,2);delay_ms(20); 
183E:  MOVLW  02
1840:  MOVWF  3E
1842:  MOVLW  16
1844:  MOVWF  FA9
1846:  MOVLW  02
1848:  MOVWF  FA8
184A:  BCF    FA6.6
184C:  BCF    FA6.7
184E:  BSF    FA6.2
1850:  MOVF   FF2,W
1852:  MOVWF  00
1854:  BCF    FF2.7
1856:  MOVLB  F
1858:  MOVLW  55
185A:  MOVWF  FA7
185C:  MOVLW  AA
185E:  MOVWF  FA7
1860:  BSF    FA6.1
1862:  BTFSC  FA6.1
1864:  BRA    1862
1866:  BCF    FA6.2
1868:  MOVF   00,W
186A:  IORWF  FF2,F
186C:  MOVLW  14
186E:  MOVLB  0
1870:  MOVWF  xE9
1872:  CALL   0B20
....................    } 
....................    if(ppurga_segundos>59){ 
1876:  MOVF   3C,W
1878:  SUBLW  3B
187A:  BC    18B0
....................       ppurga_segundos=0;write_eeprom(23,0);delay_ms(20); 
187C:  CLRF   3C
187E:  MOVLW  17
1880:  MOVWF  FA9
1882:  CLRF   FA8
1884:  BCF    FA6.6
1886:  BCF    FA6.7
1888:  BSF    FA6.2
188A:  MOVF   FF2,W
188C:  MOVWF  00
188E:  BCF    FF2.7
1890:  MOVLB  F
1892:  MOVLW  55
1894:  MOVWF  FA7
1896:  MOVLW  AA
1898:  MOVWF  FA7
189A:  BSF    FA6.1
189C:  BTFSC  FA6.1
189E:  BRA    189C
18A0:  BCF    FA6.2
18A2:  MOVF   00,W
18A4:  IORWF  FF2,F
18A6:  MOVLW  14
18A8:  MOVLB  0
18AA:  MOVWF  xE9
18AC:  CALL   0B20
....................    } 
....................    if(Ajuste1>20.0){ 
18B0:  CLRF   xDA
18B2:  CLRF   xD9
18B4:  MOVLW  20
18B6:  MOVWF  xD8
18B8:  MOVLW  83
18BA:  MOVWF  xD7
18BC:  MOVFF  9D,DE
18C0:  MOVFF  9C,DD
18C4:  MOVFF  9B,DC
18C8:  MOVFF  9A,DB
18CC:  RCALL  1540
18CE:  BNC   1940
....................       Ajuste1=1.0;write_eeprom(25,1);delay_ms(20);write_eeprom(26,0);delay_ms(20); 
18D0:  CLRF   x9D
18D2:  CLRF   x9C
18D4:  CLRF   x9B
18D6:  MOVLW  7F
18D8:  MOVWF  x9A
18DA:  MOVLW  19
18DC:  MOVWF  FA9
18DE:  MOVLW  01
18E0:  MOVWF  FA8
18E2:  BCF    FA6.6
18E4:  BCF    FA6.7
18E6:  BSF    FA6.2
18E8:  MOVF   FF2,W
18EA:  MOVWF  00
18EC:  BCF    FF2.7
18EE:  MOVLB  F
18F0:  MOVLW  55
18F2:  MOVWF  FA7
18F4:  MOVLW  AA
18F6:  MOVWF  FA7
18F8:  BSF    FA6.1
18FA:  BTFSC  FA6.1
18FC:  BRA    18FA
18FE:  BCF    FA6.2
1900:  MOVF   00,W
1902:  IORWF  FF2,F
1904:  MOVLW  14
1906:  MOVLB  0
1908:  MOVWF  xE9
190A:  CALL   0B20
190E:  MOVLW  1A
1910:  MOVWF  FA9
1912:  CLRF   FA8
1914:  BCF    FA6.6
1916:  BCF    FA6.7
1918:  BSF    FA6.2
191A:  MOVF   FF2,W
191C:  MOVWF  00
191E:  BCF    FF2.7
1920:  MOVLB  F
1922:  MOVLW  55
1924:  MOVWF  FA7
1926:  MOVLW  AA
1928:  MOVWF  FA7
192A:  BSF    FA6.1
192C:  BTFSC  FA6.1
192E:  BRA    192C
1930:  BCF    FA6.2
1932:  MOVF   00,W
1934:  IORWF  FF2,F
1936:  MOVLW  14
1938:  MOVLB  0
193A:  MOVWF  xE9
193C:  CALL   0B20
....................    } 
....................    if(MediaMovil>12){ 
1940:  MOVF   2F,W
1942:  SUBLW  0C
1944:  BC    197E
....................       MediaMovil=10;write_eeprom(42,10);delay_ms(20); 
1946:  MOVLW  0A
1948:  MOVWF  2F
194A:  MOVLW  2A
194C:  MOVWF  FA9
194E:  MOVLW  0A
1950:  MOVWF  FA8
1952:  BCF    FA6.6
1954:  BCF    FA6.7
1956:  BSF    FA6.2
1958:  MOVF   FF2,W
195A:  MOVWF  00
195C:  BCF    FF2.7
195E:  MOVLB  F
1960:  MOVLW  55
1962:  MOVWF  FA7
1964:  MOVLW  AA
1966:  MOVWF  FA7
1968:  BSF    FA6.1
196A:  BTFSC  FA6.1
196C:  BRA    196A
196E:  BCF    FA6.2
1970:  MOVF   00,W
1972:  IORWF  FF2,F
1974:  MOVLW  14
1976:  MOVLB  0
1978:  MOVWF  xE9
197A:  CALL   0B20
....................    } 
....................    if(negativo>20){ 
197E:  MOVF   30,W
1980:  SUBLW  14
1982:  BC    19BC
....................       negativo=10;write_eeprom(50,10);delay_ms(20); 
1984:  MOVLW  0A
1986:  MOVWF  30
1988:  MOVLW  32
198A:  MOVWF  FA9
198C:  MOVLW  0A
198E:  MOVWF  FA8
1990:  BCF    FA6.6
1992:  BCF    FA6.7
1994:  BSF    FA6.2
1996:  MOVF   FF2,W
1998:  MOVWF  00
199A:  BCF    FF2.7
199C:  MOVLB  F
199E:  MOVLW  55
19A0:  MOVWF  FA7
19A2:  MOVLW  AA
19A4:  MOVWF  FA7
19A6:  BSF    FA6.1
19A8:  BTFSC  FA6.1
19AA:  BRA    19A8
19AC:  BCF    FA6.2
19AE:  MOVF   00,W
19B0:  IORWF  FF2,F
19B2:  MOVLW  14
19B4:  MOVLB  0
19B6:  MOVWF  xE9
19B8:  CALL   0B20
....................    } 
....................    if(Diferencia>600){ 
19BC:  CLRF   xDA
19BE:  CLRF   xD9
19C0:  MOVLW  16
19C2:  MOVWF  xD8
19C4:  MOVLW  88
19C6:  MOVWF  xD7
19C8:  MOVFF  99,DE
19CC:  MOVFF  98,DD
19D0:  MOVFF  97,DC
19D4:  MOVFF  96,DB
19D8:  RCALL  1540
19DA:  BNC   1A48
....................       Diferencia=0;write_eeprom(60,0);delay_ms(20);write_eeprom(61,0);delay_ms(20); 
19DC:  CLRF   x99
19DE:  CLRF   x98
19E0:  CLRF   x97
19E2:  CLRF   x96
19E4:  MOVLW  3C
19E6:  MOVWF  FA9
19E8:  CLRF   FA8
19EA:  BCF    FA6.6
19EC:  BCF    FA6.7
19EE:  BSF    FA6.2
19F0:  MOVF   FF2,W
19F2:  MOVWF  00
19F4:  BCF    FF2.7
19F6:  MOVLB  F
19F8:  MOVLW  55
19FA:  MOVWF  FA7
19FC:  MOVLW  AA
19FE:  MOVWF  FA7
1A00:  BSF    FA6.1
1A02:  BTFSC  FA6.1
1A04:  BRA    1A02
1A06:  BCF    FA6.2
1A08:  MOVF   00,W
1A0A:  IORWF  FF2,F
1A0C:  MOVLW  14
1A0E:  MOVLB  0
1A10:  MOVWF  xE9
1A12:  CALL   0B20
1A16:  MOVLW  3D
1A18:  MOVWF  FA9
1A1A:  CLRF   FA8
1A1C:  BCF    FA6.6
1A1E:  BCF    FA6.7
1A20:  BSF    FA6.2
1A22:  MOVF   FF2,W
1A24:  MOVWF  00
1A26:  BCF    FF2.7
1A28:  MOVLB  F
1A2A:  MOVLW  55
1A2C:  MOVWF  FA7
1A2E:  MOVLW  AA
1A30:  MOVWF  FA7
1A32:  BSF    FA6.1
1A34:  BTFSC  FA6.1
1A36:  BRA    1A34
1A38:  BCF    FA6.2
1A3A:  MOVF   00,W
1A3C:  IORWF  FF2,F
1A3E:  MOVLW  14
1A40:  MOVLB  0
1A42:  MOVWF  xE9
1A44:  CALL   0B20
....................    } 
....................    if(segundos>60){ 
1A48:  MOVF   36,W
1A4A:  SUBLW  3C
1A4C:  BC    1A82
....................       segundos=0;write_eeprom(70,0);delay_ms(20); 
1A4E:  CLRF   36
1A50:  MOVLW  46
1A52:  MOVWF  FA9
1A54:  CLRF   FA8
1A56:  BCF    FA6.6
1A58:  BCF    FA6.7
1A5A:  BSF    FA6.2
1A5C:  MOVF   FF2,W
1A5E:  MOVWF  00
1A60:  BCF    FF2.7
1A62:  MOVLB  F
1A64:  MOVLW  55
1A66:  MOVWF  FA7
1A68:  MOVLW  AA
1A6A:  MOVWF  FA7
1A6C:  BSF    FA6.1
1A6E:  BTFSC  FA6.1
1A70:  BRA    1A6E
1A72:  BCF    FA6.2
1A74:  MOVF   00,W
1A76:  IORWF  FF2,F
1A78:  MOVLW  14
1A7A:  MOVLB  0
1A7C:  MOVWF  xE9
1A7E:  CALL   0B20
....................    } 
....................    if(minutos>60){ 
1A82:  MOVF   37,W
1A84:  SUBLW  3C
1A86:  BC    1ABC
....................       minutos=0;write_eeprom(71,0);delay_ms(20); 
1A88:  CLRF   37
1A8A:  MOVLW  47
1A8C:  MOVWF  FA9
1A8E:  CLRF   FA8
1A90:  BCF    FA6.6
1A92:  BCF    FA6.7
1A94:  BSF    FA6.2
1A96:  MOVF   FF2,W
1A98:  MOVWF  00
1A9A:  BCF    FF2.7
1A9C:  MOVLB  F
1A9E:  MOVLW  55
1AA0:  MOVWF  FA7
1AA2:  MOVLW  AA
1AA4:  MOVWF  FA7
1AA6:  BSF    FA6.1
1AA8:  BTFSC  FA6.1
1AAA:  BRA    1AA8
1AAC:  BCF    FA6.2
1AAE:  MOVF   00,W
1AB0:  IORWF  FF2,F
1AB2:  MOVLW  14
1AB4:  MOVLB  0
1AB6:  MOVWF  xE9
1AB8:  CALL   0B20
....................    } 
....................    if(horas>60){ 
1ABC:  MOVF   38,W
1ABE:  SUBLW  3C
1AC0:  BC    1AF6
....................       horas=0;write_eeprom(72,0);delay_ms(20); 
1AC2:  CLRF   38
1AC4:  MOVLW  48
1AC6:  MOVWF  FA9
1AC8:  CLRF   FA8
1ACA:  BCF    FA6.6
1ACC:  BCF    FA6.7
1ACE:  BSF    FA6.2
1AD0:  MOVF   FF2,W
1AD2:  MOVWF  00
1AD4:  BCF    FF2.7
1AD6:  MOVLB  F
1AD8:  MOVLW  55
1ADA:  MOVWF  FA7
1ADC:  MOVLW  AA
1ADE:  MOVWF  FA7
1AE0:  BSF    FA6.1
1AE2:  BTFSC  FA6.1
1AE4:  BRA    1AE2
1AE6:  BCF    FA6.2
1AE8:  MOVF   00,W
1AEA:  IORWF  FF2,F
1AEC:  MOVLW  14
1AEE:  MOVLB  0
1AF0:  MOVWF  xE9
1AF2:  CALL   0B20
....................    } 
....................    if(flag_filtro>1){ 
1AF6:  MOVLW  00
1AF8:  BTFSC  43.2
1AFA:  MOVLW  01
1AFC:  SUBLW  01
1AFE:  BC    1B34
....................       flag_filtro=0;write_eeprom(73,0);delay_ms(20); 
1B00:  BCF    43.2
1B02:  MOVLW  49
1B04:  MOVWF  FA9
1B06:  CLRF   FA8
1B08:  BCF    FA6.6
1B0A:  BCF    FA6.7
1B0C:  BSF    FA6.2
1B0E:  MOVF   FF2,W
1B10:  MOVWF  00
1B12:  BCF    FF2.7
1B14:  MOVLB  F
1B16:  MOVLW  55
1B18:  MOVWF  FA7
1B1A:  MOVLW  AA
1B1C:  MOVWF  FA7
1B1E:  BSF    FA6.1
1B20:  BTFSC  FA6.1
1B22:  BRA    1B20
1B24:  BCF    FA6.2
1B26:  MOVF   00,W
1B28:  IORWF  FF2,F
1B2A:  MOVLW  14
1B2C:  MOVLB  0
1B2E:  MOVWF  xE9
1B30:  CALL   0B20
....................    } 
....................    purga_minutos_pro=purga_minutos;purga_segundos_pro=purga_segundos; 
1B34:  MOVFF  26,27
1B38:  MOVFF  3A,3B
....................    ppurga_minutos_pro=ppurga_minutos;ppurga_segundos_pro=ppurga_segundos; 
1B3C:  MOVFF  3E,3F
1B40:  MOVFF  3C,3D
.................... } 
1B44:  GOTO   4DBE (RETURN)
....................  
.................... void EnciendeMotor(void){ 
....................    if(!input_state(PIN_B5)){ 
*
4446:  BTFSC  F81.5
4448:  BRA    445E
....................       delay_ms(100); 
444A:  MOVLW  64
444C:  MOVWF  xE9
444E:  CALL   0B20
....................       lcd_init(); 
4452:  CALL   0BC8
....................       delay_ms(100); 
4456:  MOVLW  64
4458:  MOVWF  xE9
445A:  CALL   0B20
....................    } 
....................    Motor_on; 
445E:  BSF    F8A.5
4460:  BCF    F93.5
.................... } 
4462:  RETLW  00
....................  
.................... void ApagaMotor(void){ 
....................    if(input_state(PIN_B5)){ 
*
4428:  BTFSS  F81.5
442A:  BRA    4440
....................       delay_ms(100); 
442C:  MOVLW  64
442E:  MOVWF  xE9
4430:  CALL   0B20
....................       lcd_init(); 
4434:  CALL   0BC8
....................       delay_ms(100); 
4438:  MOVLW  64
443A:  MOVWF  xE9
443C:  CALL   0B20
....................    } 
....................    Motor_off; 
4440:  BCF    F8A.5
4442:  BCF    F93.5
.................... } 
4444:  RETLW  00
....................  
.................... void MensajeGuardado(void){ 
....................    printf(lcd_putc,"\f"); 
*
26DC:  MOVLW  0C
26DE:  MOVWF  xE8
26E0:  CALL   0C92
....................    lcd_gotoxy(1,2); 
26E4:  MOVLW  01
26E6:  MOVWF  xE9
26E8:  MOVLW  02
26EA:  MOVWF  xEA
26EC:  CALL   0C20
....................    printf(lcd_putc," !Valor Almacenado  "); 
26F0:  MOVLW  B4
26F2:  MOVWF  FF6
26F4:  MOVLW  00
26F6:  MOVWF  FF7
26F8:  CALL   1B48
....................    lcd_gotoxy(1,4); 
26FC:  MOVLW  01
26FE:  MOVWF  xE9
2700:  MOVLW  04
2702:  MOVWF  xEA
2704:  CALL   0C20
....................    printf(lcd_putc,"                    "); 
2708:  MOVLW  CA
270A:  MOVWF  FF6
270C:  MOVLW  00
270E:  MOVWF  FF7
2710:  CALL   1B48
....................    lcd_gotoxy(1,3); 
2714:  MOVLW  01
2716:  MOVWF  xE9
2718:  MOVLW  03
271A:  MOVWF  xEA
271C:  CALL   0C20
....................    printf(lcd_putc,"    Correctamente!  "); 
2720:  MOVLW  E0
2722:  MOVWF  FF6
2724:  MOVLW  00
2726:  MOVWF  FF7
2728:  CALL   1B48
....................    lcd_gotoxy(1,1); 
272C:  MOVLW  01
272E:  MOVWF  xE9
2730:  MOVWF  xEA
2732:  CALL   0C20
....................    printf(lcd_putc,"                    "); 
2736:  MOVLW  F6
2738:  MOVWF  FF6
273A:  MOVLW  00
273C:  MOVWF  FF7
273E:  CALL   1B48
....................    delay_ms(2000); 
2742:  MOVLW  08
2744:  MOVWF  xD3
2746:  MOVLW  FA
2748:  MOVWF  xE9
274A:  CALL   0B20
274E:  DECFSZ xD3,F
2750:  BRA    2746
....................    printf(lcd_putc,"\f"); 
2752:  MOVLW  0C
2754:  MOVWF  xE8
2756:  CALL   0C92
.................... } 
275A:  RETLW  00
....................  
.................... void Refresco(void){ 
....................    delay_ms(100); 
....................    lcd_init(); 
....................    delay_ms(100); 
.................... } 
....................  
....................  
.................... #include <Menu.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 2018 JP Bioingenieria SAS                     //// 
.................... ////         Funciones utilizadas en CEGH con F y D                     //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................      
....................    if(x==1) 
*
201A:  DECFSZ xD4,W
201C:  BRA    2052
....................    {if(estadoalarma==0) 
201E:  BTFSC  42.2
2020:  BRA    2038
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
2022:  MOVLW  02
2024:  MOVWF  xE9
2026:  MOVFF  D5,EA
202A:  CALL   0C20
202E:  MOVLW  0C
2030:  MOVWF  FF6
2032:  MOVLW  01
2034:  MOVWF  FF7
2036:  RCALL  1B48
....................    if(estadoalarma==1) 
2038:  BTFSS  42.2
203A:  BRA    2052
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
203C:  MOVLW  02
203E:  MOVWF  xE9
2040:  MOVFF  D5,EA
2044:  CALL   0C20
2048:  MOVLW  20
204A:  MOVWF  FF6
204C:  MOVLW  01
204E:  MOVWF  FF7
2050:  RCALL  1B48
....................    } 
....................     
....................    if(x==2) 
2052:  MOVF   xD4,W
2054:  SUBLW  02
2056:  BNZ   206E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
2058:  MOVLW  02
205A:  MOVWF  xE9
205C:  MOVFF  D5,EA
2060:  CALL   0C20
2064:  MOVLW  34
2066:  MOVWF  FF6
2068:  MOVLW  01
206A:  MOVWF  FF7
206C:  RCALL  1B48
....................     
....................    if(x==3) 
206E:  MOVF   xD4,W
2070:  SUBLW  03
2072:  BNZ   208A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Filtro      ");} 
2074:  MOVLW  02
2076:  MOVWF  xE9
2078:  MOVFF  D5,EA
207C:  CALL   0C20
2080:  MOVLW  48
2082:  MOVWF  FF6
2084:  MOVLW  01
2086:  MOVWF  FF7
2088:  RCALL  1B48
....................     
....................    if(x==4) 
208A:  MOVF   xD4,W
208C:  SUBLW  04
208E:  BNZ   20A6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
2090:  MOVLW  02
2092:  MOVWF  xE9
2094:  MOVFF  D5,EA
2098:  CALL   0C20
209C:  MOVLW  5C
209E:  MOVWF  FF6
20A0:  MOVLW  01
20A2:  MOVWF  FF7
20A4:  RCALL  1B48
....................     
....................    if(x==5) 
20A6:  MOVF   xD4,W
20A8:  SUBLW  05
20AA:  BNZ   20C2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo de Purga    ");} 
20AC:  MOVLW  02
20AE:  MOVWF  xE9
20B0:  MOVFF  D5,EA
20B4:  CALL   0C20
20B8:  MOVLW  70
20BA:  MOVWF  FF6
20BC:  MOVLW  01
20BE:  MOVWF  FF7
20C0:  RCALL  1B48
....................     
....................    if(x==6) 
20C2:  MOVF   xD4,W
20C4:  SUBLW  06
20C6:  BNZ   20DE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Post-Purga  ");} 
20C8:  MOVLW  02
20CA:  MOVWF  xE9
20CC:  MOVFF  D5,EA
20D0:  CALL   0C20
20D4:  MOVLW  84
20D6:  MOVWF  FF6
20D8:  MOVLW  01
20DA:  MOVWF  FF7
20DC:  RCALL  1B48
....................     
....................    if(x==7) 
20DE:  MOVF   xD4,W
20E0:  SUBLW  07
20E2:  BNZ   20FA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Servicio           ");} 
20E4:  MOVLW  02
20E6:  MOVWF  xE9
20E8:  MOVFF  D5,EA
20EC:  CALL   0C20
20F0:  MOVLW  98
20F2:  MOVWF  FF6
20F4:  MOVLW  01
20F6:  MOVWF  FF7
20F8:  RCALL  1B48
.................... } 
20FA:  RETLW  00
....................  
.................... short SolicitaContrasena(int8 MenuAct,int8 MenuAnt,int8 MenuPos,cont0,cont1,cont2,cont3){ 
....................       lcd_gotoxy(1,1); 
*
1C1E:  MOVLW  01
1C20:  MOVWF  xE9
1C22:  MOVWF  xEA
1C24:  CALL   0C20
....................       printf(lcd_putc,"     Ingrese        "); 
1C28:  MOVLW  AC
1C2A:  MOVWF  FF6
1C2C:  MOVLW  01
1C2E:  MOVWF  FF7
1C30:  RCALL  1B48
....................       lcd_gotoxy(1,2); 
1C32:  MOVLW  01
1C34:  MOVWF  xE9
1C36:  MOVLW  02
1C38:  MOVWF  xEA
1C3A:  CALL   0C20
....................       printf(lcd_putc,"    Contraseña      "); 
1C3E:  MOVLW  C2
1C40:  MOVWF  FF6
1C42:  MOVLW  01
1C44:  MOVWF  FF7
1C46:  RCALL  1B48
....................       lcd_gotoxy(1,3); 
1C48:  MOVLW  01
1C4A:  MOVWF  xE9
1C4C:  MOVLW  03
1C4E:  MOVWF  xEA
1C50:  CALL   0C20
....................       printf(lcd_putc,"    CLAVE=%u%u%u%u  ",clave[0],clave[1],clave[2],clave[3]); 
1C54:  MOVLW  D8
1C56:  MOVWF  FF6
1C58:  MOVLW  01
1C5A:  MOVWF  FF7
1C5C:  MOVLW  0A
1C5E:  MOVWF  xDB
1C60:  RCALL  1B6A
1C62:  MOVFF  48,DA
1C66:  MOVLW  1B
1C68:  MOVWF  xDB
1C6A:  RCALL  1BB2
1C6C:  MOVFF  49,DA
1C70:  MOVLW  1B
1C72:  MOVWF  xDB
1C74:  RCALL  1BB2
1C76:  MOVFF  4A,DA
1C7A:  MOVLW  1B
1C7C:  MOVWF  xDB
1C7E:  RCALL  1BB2
1C80:  MOVFF  4B,DA
1C84:  MOVLW  1B
1C86:  MOVWF  xDB
1C88:  RCALL  1BB2
1C8A:  MOVLW  20
1C8C:  MOVWF  xE8
1C8E:  CALL   0C92
1C92:  MOVLW  20
1C94:  MOVWF  xE8
1C96:  CALL   0C92
....................        
....................       if(UP){//Si oprime hacia arriba 
1C9A:  BSF    F92.5
1C9C:  BTFSC  F80.5
1C9E:  BRA    1CD4
....................          delay_ms(20); 
1CA0:  MOVLW  14
1CA2:  MOVWF  xE9
1CA4:  CALL   0B20
....................          if(UP && Flanco == 0){ 
1CA8:  BSF    F92.5
1CAA:  BTFSC  F80.5
1CAC:  BRA    1CD2
1CAE:  BTFSC  42.4
1CB0:  BRA    1CD2
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0; 
1CB2:  MOVLW  0B
1CB4:  SUBWF  1E,W
1CB6:  CLRF   03
1CB8:  ADDLW  48
1CBA:  MOVWF  FE9
1CBC:  MOVLW  00
1CBE:  ADDWFC 03,W
1CC0:  MOVWF  FEA
1CC2:  INCF   FEF,F
1CC4:  BSF    42.4
1CC6:  MOVLW  1E
1CC8:  MOVWF  xE9
1CCA:  CALL   0B20
1CCE:  CLRF   58
1CD0:  CLRF   57
....................          } 
....................       }else{ 
1CD2:  BRA    1CD6
....................          Flanco = 0; 
1CD4:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo   
1CD6:  BSF    F96.0
1CD8:  BTFSC  F84.0
1CDA:  BRA    1D0C
....................          delay_ms(20); 
1CDC:  MOVLW  14
1CDE:  MOVWF  xE9
1CE0:  CALL   0B20
....................          if(DOWN){// && Flanco2 == 0){ 
1CE4:  BSF    F96.0
1CE6:  BTFSC  F84.0
1CE8:  BRA    1D0A
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0; 
1CEA:  MOVLW  0B
1CEC:  SUBWF  1E,W
1CEE:  CLRF   03
1CF0:  ADDLW  48
1CF2:  MOVWF  FE9
1CF4:  MOVLW  00
1CF6:  ADDWFC 03,W
1CF8:  MOVWF  FEA
1CFA:  DECF   FEF,F
1CFC:  BSF    42.6
1CFE:  MOVLW  1E
1D00:  MOVWF  xE9
1D02:  CALL   0B20
1D06:  CLRF   58
1D08:  CLRF   57
....................          } 
....................       }else{ 
1D0A:  BRA    1D0E
....................          Flanco2 = 0; 
1D0C:  BCF    42.6
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
1D0E:  BSF    F96.1
1D10:  BTFSC  F84.1
1D12:  BRA    1D40
....................          delay_ms(20); 
1D14:  MOVLW  14
1D16:  MOVWF  xE9
1D18:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0){ 
1D1C:  BSF    F96.1
1D1E:  BTFSC  F84.1
1D20:  BRA    1D3E
1D22:  BTFSC  42.5
1D24:  BRA    1D3E
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
1D26:  BSF    42.5
1D28:  INCF   1E,F
1D2A:  MOVLW  1E
1D2C:  MOVWF  xE9
1D2E:  CALL   0B20
1D32:  MOVLW  0C
1D34:  MOVWF  xE8
1D36:  CALL   0C92
1D3A:  CLRF   58
1D3C:  CLRF   57
....................          } 
....................       }else{ 
1D3E:  BRA    1D42
....................          Flanco1 = 0; 
1D40:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si Oprime izquierda 
1D42:  BSF    F96.2
1D44:  BTFSC  F84.2
1D46:  BRA    1D74
....................          delay_ms(20); 
1D48:  MOVLW  14
1D4A:  MOVWF  xE9
1D4C:  CALL   0B20
....................          if(LEFT && Flanco3 == 0){ 
1D50:  BSF    F96.2
1D52:  BTFSC  F84.2
1D54:  BRA    1D72
1D56:  BTFSC  42.7
1D58:  BRA    1D72
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0; 
1D5A:  BSF    42.7
1D5C:  DECF   1E,F
1D5E:  MOVLW  1E
1D60:  MOVWF  xE9
1D62:  CALL   0B20
1D66:  MOVLW  0C
1D68:  MOVWF  xE8
1D6A:  CALL   0C92
1D6E:  CLRF   58
1D70:  CLRF   57
....................          } 
....................       }else{ 
1D72:  BRA    1D76
....................          Flanco3 = 0; 
1D74:  BCF    42.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1D76:  MOVLW  0B
1D78:  SUBWF  1E,W
1D7A:  CLRF   03
1D7C:  ADDLW  48
1D7E:  MOVWF  FE9
1D80:  MOVLW  00
1D82:  ADDWFC 03,W
1D84:  MOVWF  FEA
1D86:  BTFSC  FEF.7
1D88:  BRA    1D8C
1D8A:  BRA    1DA0
....................          clave[unidad-11]=9; 
1D8C:  MOVLW  0B
1D8E:  SUBWF  1E,W
1D90:  CLRF   03
1D92:  ADDLW  48
1D94:  MOVWF  FE9
1D96:  MOVLW  00
1D98:  ADDWFC 03,W
1D9A:  MOVWF  FEA
1D9C:  MOVLW  09
1D9E:  MOVWF  FEF
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1DA0:  MOVLW  0B
1DA2:  SUBWF  1E,W
1DA4:  CLRF   03
1DA6:  ADDLW  48
1DA8:  MOVWF  FE9
1DAA:  MOVLW  00
1DAC:  ADDWFC 03,W
1DAE:  MOVWF  FEA
1DB0:  BTFSC  FEF.7
1DB2:  BRA    1DCC
1DB4:  MOVF   FEF,W
1DB6:  SUBLW  09
1DB8:  BC    1DCC
....................          clave[unidad-11]=0; 
1DBA:  MOVLW  0B
1DBC:  SUBWF  1E,W
1DBE:  CLRF   03
1DC0:  ADDLW  48
1DC2:  MOVWF  FE9
1DC4:  MOVLW  00
1DC6:  ADDWFC 03,W
1DC8:  MOVWF  FEA
1DCA:  CLRF   FEF
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1DCC:  MOVF   1E,W
1DCE:  SUBLW  0A
1DD0:  BNC   1DE6
....................          unidad=11; 
1DD2:  MOVLW  0B
1DD4:  MOVWF  1E
....................          Menu=MenuAnt; 
1DD6:  MOVFF  D4,1C
....................          paso=0;Flecha=2;Flecha2=2;unidad=11; 
1DDA:  CLRF   44
1DDC:  MOVLW  02
1DDE:  MOVWF  1F
1DE0:  MOVWF  21
1DE2:  MOVLW  0B
1DE4:  MOVWF  1E
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DE6:  MOVFF  1E,E9
1DEA:  MOVLW  04
1DEC:  MOVWF  xEA
1DEE:  CALL   0C20
....................       lcd_putc(t[2]); 
1DF2:  MOVFF  47,E8
1DF6:  CALL   0C92
....................        
....................       if(unidad>11&&unidad<14){ 
1DFA:  MOVF   1E,W
1DFC:  SUBLW  0B
1DFE:  BC    1E1E
1E00:  MOVF   1E,W
1E02:  SUBLW  0D
1E04:  BNC   1E1E
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1E06:  MOVLW  01
1E08:  SUBWF  1E,W
1E0A:  MOVWF  xDA
1E0C:  MOVWF  xE9
1E0E:  MOVLW  04
1E10:  MOVWF  xEA
1E12:  CALL   0C20
....................          lcd_putc(t[1]); 
1E16:  MOVFF  46,E8
1E1A:  CALL   0C92
....................       } 
....................        
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1E1E:  MOVF   1E,W
1E20:  SUBLW  0E
1E22:  BTFSC  FD8.0
1E24:  BRA    2018
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2&&MenuAct==0){ // Si Ingresa clave para reset general del sistema. 
1E26:  MOVF   48,W
1E28:  SUBLW  03
1E2A:  BNZ   1F0C
1E2C:  MOVF   49,W
1E2E:  SUBLW  08
1E30:  BNZ   1F0C
1E32:  MOVF   4A,W
1E34:  SUBLW  09
1E36:  BNZ   1F0C
1E38:  MOVF   4B,W
1E3A:  SUBLW  02
1E3C:  BNZ   1F0C
1E3E:  MOVF   xD3,F
1E40:  BNZ   1F0C
....................              write_eeprom(100,0);delay_ms(20);write_eeprom(101,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E42:  MOVLW  64
1E44:  MOVWF  FA9
1E46:  CLRF   FA8
1E48:  BCF    FA6.6
1E4A:  BCF    FA6.7
1E4C:  BSF    FA6.2
1E4E:  MOVF   FF2,W
1E50:  MOVWF  00
1E52:  BCF    FF2.7
1E54:  MOVLB  F
1E56:  MOVLW  55
1E58:  MOVWF  FA7
1E5A:  MOVLW  AA
1E5C:  MOVWF  FA7
1E5E:  BSF    FA6.1
1E60:  BTFSC  FA6.1
1E62:  BRA    1E60
1E64:  BCF    FA6.2
1E66:  MOVF   00,W
1E68:  IORWF  FF2,F
1E6A:  MOVLW  14
1E6C:  MOVLB  0
1E6E:  MOVWF  xE9
1E70:  CALL   0B20
1E74:  MOVLW  65
1E76:  MOVWF  FA9
1E78:  CLRF   FA8
1E7A:  BCF    FA6.6
1E7C:  BCF    FA6.7
1E7E:  BSF    FA6.2
1E80:  MOVF   FF2,W
1E82:  MOVWF  00
1E84:  BCF    FF2.7
1E86:  MOVLB  F
1E88:  MOVLW  55
1E8A:  MOVWF  FA7
1E8C:  MOVLW  AA
1E8E:  MOVWF  FA7
1E90:  BSF    FA6.1
1E92:  BTFSC  FA6.1
1E94:  BRA    1E92
1E96:  BCF    FA6.2
1E98:  MOVF   00,W
1E9A:  IORWF  FF2,F
1E9C:  MOVLW  14
1E9E:  MOVLB  0
1EA0:  MOVWF  xE9
1EA2:  CALL   0B20
....................              write_eeprom(102,0);delay_ms(20);write_eeprom(103,0);delay_ms(20); 
1EA6:  MOVLW  66
1EA8:  MOVWF  FA9
1EAA:  CLRF   FA8
1EAC:  BCF    FA6.6
1EAE:  BCF    FA6.7
1EB0:  BSF    FA6.2
1EB2:  MOVF   FF2,W
1EB4:  MOVWF  00
1EB6:  BCF    FF2.7
1EB8:  MOVLB  F
1EBA:  MOVLW  55
1EBC:  MOVWF  FA7
1EBE:  MOVLW  AA
1EC0:  MOVWF  FA7
1EC2:  BSF    FA6.1
1EC4:  BTFSC  FA6.1
1EC6:  BRA    1EC4
1EC8:  BCF    FA6.2
1ECA:  MOVF   00,W
1ECC:  IORWF  FF2,F
1ECE:  MOVLW  14
1ED0:  MOVLB  0
1ED2:  MOVWF  xE9
1ED4:  CALL   0B20
1ED8:  MOVLW  67
1EDA:  MOVWF  FA9
1EDC:  CLRF   FA8
1EDE:  BCF    FA6.6
1EE0:  BCF    FA6.7
1EE2:  BSF    FA6.2
1EE4:  MOVF   FF2,W
1EE6:  MOVWF  00
1EE8:  BCF    FF2.7
1EEA:  MOVLB  F
1EEC:  MOVLW  55
1EEE:  MOVWF  FA7
1EF0:  MOVLW  AA
1EF2:  MOVWF  FA7
1EF4:  BSF    FA6.1
1EF6:  BTFSC  FA6.1
1EF8:  BRA    1EF6
1EFA:  BCF    FA6.2
1EFC:  MOVF   00,W
1EFE:  IORWF  FF2,F
1F00:  MOVLW  14
1F02:  MOVLB  0
1F04:  MOVWF  xE9
1F06:  CALL   0B20
....................              reset_cpu(); 
1F0A:  RESET
....................          } 
....................              
....................          if(clave[0]==cont0 && clave[1]==cont1 && clave[2]==cont2 && clave[3]==cont3){ // Si las claves coinciden pasa a Menu Principal. 
1F0C:  MOVF   xD6,W
1F0E:  SUBWF  48,W
1F10:  BNZ   1FA2
1F12:  MOVF   xD7,W
1F14:  SUBWF  49,W
1F16:  BNZ   1FA2
1F18:  MOVF   xD8,W
1F1A:  SUBWF  4A,W
1F1C:  BNZ   1FA2
1F1E:  MOVF   xD9,W
1F20:  SUBWF  4B,W
1F22:  BNZ   1FA2
....................             lcd_gotoxy(1,1); 
1F24:  MOVLW  01
1F26:  MOVWF  xE9
1F28:  MOVWF  xEA
1F2A:  CALL   0C20
....................             printf(lcd_putc,"                   "); 
1F2E:  MOVLW  EE
1F30:  MOVWF  FF6
1F32:  MOVLW  01
1F34:  MOVWF  FF7
1F36:  RCALL  1B48
....................             lcd_gotoxy(1,2); 
1F38:  MOVLW  01
1F3A:  MOVWF  xE9
1F3C:  MOVLW  02
1F3E:  MOVWF  xEA
1F40:  CALL   0C20
....................             printf(lcd_putc,"     Contraseña    "); 
1F44:  MOVLW  02
1F46:  MOVWF  FF6
1F48:  MOVLW  02
1F4A:  MOVWF  FF7
1F4C:  RCALL  1B48
....................             lcd_gotoxy(1,3); 
1F4E:  MOVLW  01
1F50:  MOVWF  xE9
1F52:  MOVLW  03
1F54:  MOVWF  xEA
1F56:  CALL   0C20
....................             printf(lcd_putc,"      Correcta     "); 
1F5A:  MOVLW  16
1F5C:  MOVWF  FF6
1F5E:  MOVLW  02
1F60:  MOVWF  FF7
1F62:  RCALL  1B48
....................             lcd_gotoxy(1,4); 
1F64:  MOVLW  01
1F66:  MOVWF  xE9
1F68:  MOVLW  04
1F6A:  MOVWF  xEA
1F6C:  CALL   0C20
....................             printf(lcd_putc,"                   "); 
1F70:  MOVLW  2A
1F72:  MOVWF  FF6
1F74:  MOVLW  02
1F76:  MOVWF  FF7
1F78:  RCALL  1B48
....................             delay_ms(500); 
1F7A:  MOVLW  02
1F7C:  MOVWF  xDA
1F7E:  MOVLW  FA
1F80:  MOVWF  xE9
1F82:  CALL   0B20
1F86:  DECFSZ xDA,F
1F88:  BRA    1F7E
....................             Menu=MenuPos;unidad=11; 
1F8A:  MOVFF  D5,1C
1F8E:  MOVLW  0B
1F90:  MOVWF  1E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
1F92:  CLRF   48
1F94:  CLRF   49
1F96:  CLRF   4A
1F98:  CLRF   4B
....................             return 1; 
1F9A:  MOVLW  01
1F9C:  MOVWF  01
1F9E:  BRA    2018
....................          }else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1FA0:  BRA    2018
....................             lcd_gotoxy(1,1); 
1FA2:  MOVLW  01
1FA4:  MOVWF  xE9
1FA6:  MOVWF  xEA
1FA8:  CALL   0C20
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1FAC:  MOVLW  01
1FAE:  MOVWF  xE9
1FB0:  MOVLW  02
1FB2:  MOVWF  xEA
1FB4:  CALL   0C20
....................             printf(lcd_putc,"     Contraseña    "); 
1FB8:  MOVLW  3E
1FBA:  MOVWF  FF6
1FBC:  MOVLW  02
1FBE:  MOVWF  FF7
1FC0:  RCALL  1B48
....................             lcd_gotoxy(1,3); 
1FC2:  MOVLW  01
1FC4:  MOVWF  xE9
1FC6:  MOVLW  03
1FC8:  MOVWF  xEA
1FCA:  CALL   0C20
....................             printf(lcd_putc,"     Incorrecta    "); 
1FCE:  MOVLW  52
1FD0:  MOVWF  FF6
1FD2:  MOVLW  02
1FD4:  MOVWF  FF7
1FD6:  RCALL  1B48
....................             lcd_gotoxy(1,4); 
1FD8:  MOVLW  01
1FDA:  MOVWF  xE9
1FDC:  MOVLW  04
1FDE:  MOVWF  xEA
1FE0:  CALL   0C20
....................             printf(lcd_putc,"                   "); 
1FE4:  MOVLW  66
1FE6:  MOVWF  FF6
1FE8:  MOVLW  02
1FEA:  MOVWF  FF7
1FEC:  RCALL  1B48
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f"); 
1FEE:  MOVLW  02
1FF0:  MOVWF  xDA
1FF2:  MOVLW  FA
1FF4:  MOVWF  xE9
1FF6:  CALL   0B20
1FFA:  DECFSZ xDA,F
1FFC:  BRA    1FF2
1FFE:  MOVLW  0B
2000:  MOVWF  1E
2002:  MOVLW  0C
2004:  MOVWF  xE8
2006:  CALL   0C92
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
200A:  CLRF   48
200C:  CLRF   49
200E:  CLRF   4A
2010:  CLRF   4B
....................             return 0; 
2012:  MOVLW  00
2014:  MOVWF  01
2016:  BRA    2018
....................          } 
....................       }      
.................... } 
2018:  RETLW  00
....................  
.................... void MenuPrincipal(){ 
....................       lcd_gotoxy(1,1); 
*
20FC:  MOVLW  01
20FE:  MOVWF  xE9
2100:  MOVWF  xEA
2102:  CALL   0C20
....................       printf(lcd_putc,"---MENU PRINCIPAL---"); 
2106:  MOVLW  7A
2108:  MOVWF  FF6
210A:  MOVLW  02
210C:  MOVWF  FF7
210E:  RCALL  1B48
....................     
....................       if(UP){//Si oprime hacia arriba 
2110:  BSF    F92.5
2112:  BTFSC  F80.5
2114:  BRA    213E
....................          delay_ms(20); 
2116:  MOVLW  14
2118:  MOVWF  xE9
211A:  CALL   0B20
....................          if(UP && Flanco == 0){ 
211E:  BSF    F92.5
2120:  BTFSC  F80.5
2122:  BRA    213C
2124:  BTFSC  42.4
2126:  BRA    213C
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
2128:  DECF   21,F
212A:  DECF   1F,F
212C:  MOVLW  01
212E:  ADDWF  1F,W
2130:  MOVWF  20
2132:  BSF    42.4
2134:  MOVLW  1E
2136:  MOVWF  xE9
2138:  CALL   0B20
....................          } 
....................       }else{ 
213C:  BRA    2140
....................          Flanco = 0; 
213E:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2140:  BSF    F96.0
2142:  BTFSC  F84.0
2144:  BRA    216E
....................          delay_ms(20); 
2146:  MOVLW  14
2148:  MOVWF  xE9
214A:  CALL   0B20
....................          if(DOWN && Flanco2 == 0){ 
214E:  BSF    F96.0
2150:  BTFSC  F84.0
2152:  BRA    216C
2154:  BTFSC  42.6
2156:  BRA    216C
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
2158:  INCF   21,F
215A:  INCF   1F,F
215C:  MOVLW  01
215E:  SUBWF  1F,W
2160:  MOVWF  20
2162:  BSF    42.6
2164:  MOVLW  1E
2166:  MOVWF  xE9
2168:  CALL   0B20
....................          } 
....................       }else{ 
216C:  BRA    2170
....................          Flanco2 = 0; 
216E:  BCF    42.6
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH) 
2170:  MOVF   21,W
2172:  SUBWF  23,W
2174:  BC    2186
....................       {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
2176:  INCF   44,F
2178:  MOVFF  21,23
217C:  MOVLW  02
217E:  SUBWF  23,W
2180:  MOVWF  22
2182:  MOVLW  04
2184:  MOVWF  1F
....................          
....................       if(Flecha2<nMenuL) 
2186:  MOVF   22,W
2188:  SUBWF  21,W
218A:  BC    219C
....................       {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
218C:  DECF   44,F
218E:  MOVFF  21,22
2192:  MOVLW  02
2194:  ADDWF  22,W
2196:  MOVWF  23
2198:  MOVLW  02
219A:  MOVWF  1F
....................          
....................       if(Flecha2>n_opcionH) 
219C:  MOVF   21,W
219E:  SUBWF  xD2,W
21A0:  BC    21B4
....................       {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
21A2:  MOVFF  1D,21
21A6:  MOVLW  02
21A8:  MOVWF  1F
21AA:  CLRF   44
21AC:  MOVFF  21,22
21B0:  ADDWF  22,W
21B2:  MOVWF  23
....................        
....................       if(Flecha2<n_opcionL) 
21B4:  MOVF   1D,W
21B6:  SUBWF  21,W
21B8:  BC    21D0
....................       {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
21BA:  MOVFF  D2,21
21BE:  MOVLW  04
21C0:  MOVWF  1F
21C2:  SUBWF  xD2,W
21C4:  MOVWF  44
21C6:  MOVFF  21,23
21CA:  MOVLW  02
21CC:  SUBWF  23,W
21CE:  MOVWF  22
....................           
....................       if(paso<0) 
21D0:  BTFSC  44.7
21D2:  BRA    21D6
21D4:  BRA    21D8
....................          paso=0; 
21D6:  CLRF   44
....................        
....................       mensajes(1+paso,2); 
21D8:  MOVLW  01
21DA:  ADDWF  44,W
21DC:  MOVWF  xD3
21DE:  MOVWF  xD4
21E0:  MOVLW  02
21E2:  MOVWF  xD5
21E4:  RCALL  201A
....................       mensajes(2+paso,3); 
21E6:  MOVLW  02
21E8:  ADDWF  44,W
21EA:  MOVWF  xD3
21EC:  MOVWF  xD4
21EE:  MOVLW  03
21F0:  MOVWF  xD5
21F2:  RCALL  201A
....................       mensajes(3+paso,4); 
21F4:  MOVLW  03
21F6:  ADDWF  44,W
21F8:  MOVWF  xD3
21FA:  MOVWF  xD4
21FC:  MOVLW  04
21FE:  MOVWF  xD5
2200:  RCALL  201A
....................  
....................       lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2202:  MOVLW  01
2204:  MOVWF  xE9
2206:  MOVFF  1F,EA
220A:  CALL   0C20
....................       lcd_putc(t[0]); 
220E:  MOVFF  45,E8
2212:  CALL   0C92
....................  
....................       if(Flecha==2){ 
2216:  MOVF   1F,W
2218:  SUBLW  02
221A:  BNZ   2244
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
221C:  MOVLW  01
221E:  MOVWF  xE9
2220:  MOVLW  04
2222:  MOVWF  xEA
2224:  CALL   0C20
....................          lcd_putc(t[1]); 
2228:  MOVFF  46,E8
222C:  CALL   0C92
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2230:  MOVLW  01
2232:  MOVWF  xE9
2234:  MOVLW  03
2236:  MOVWF  xEA
2238:  CALL   0C20
....................          lcd_putc(t[1]); 
223C:  MOVFF  46,E8
2240:  CALL   0C92
....................       } 
....................          
....................       if(Flecha==4){ 
2244:  MOVF   1F,W
2246:  SUBLW  04
2248:  BNZ   2272
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
224A:  MOVLW  01
224C:  MOVWF  xE9
224E:  MOVLW  02
2250:  MOVWF  xEA
2252:  CALL   0C20
....................          lcd_putc(t[1]); 
2256:  MOVFF  46,E8
225A:  CALL   0C92
....................          lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
225E:  MOVLW  01
2260:  MOVWF  xE9
2262:  MOVLW  03
2264:  MOVWF  xEA
2266:  CALL   0C20
....................          lcd_putc(t[1]); 
226A:  MOVFF  46,E8
226E:  CALL   0C92
....................       } 
....................          
....................       if(Flecha==3){ 
2272:  MOVF   1F,W
2274:  SUBLW  03
2276:  BNZ   22A0
....................          lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2278:  MOVLW  01
227A:  MOVWF  xE9
227C:  MOVLW  04
227E:  MOVWF  xEA
2280:  CALL   0C20
....................          lcd_putc(t[1]); 
2284:  MOVFF  46,E8
2288:  CALL   0C92
....................          lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
228C:  MOVLW  01
228E:  MOVWF  xE9
2290:  MOVLW  02
2292:  MOVWF  xEA
2294:  CALL   0C20
....................          lcd_putc(t[1]); 
2298:  MOVFF  46,E8
229C:  CALL   0C92
....................       } 
....................  
....................       if(RIGHT){// Si oprime derecha 
22A0:  BSF    F96.1
22A2:  BTFSC  F84.1
22A4:  BRA    22EA
....................          delay_ms(20); 
22A6:  MOVLW  14
22A8:  MOVWF  xE9
22AA:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
22AE:  BSF    F96.1
22B0:  BTFSC  F84.1
22B2:  BRA    22E8
22B4:  BTFSC  42.5
22B6:  BRA    22E8
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
22B8:  BSF    42.5
22BA:  MOVFF  21,1C
22BE:  MOVLW  03
22C0:  MOVWF  1F
22C2:  MOVLW  02
22C4:  MOVWF  xD3
22C6:  MOVLW  FA
22C8:  MOVWF  xE9
22CA:  CALL   0B20
22CE:  DECFSZ xD3,F
22D0:  BRA    22C6
22D2:  MOVLW  0C
22D4:  MOVWF  xE8
22D6:  CALL   0C92
....................             if(Menu==6){ 
22DA:  MOVF   1C,W
22DC:  SUBLW  06
22DE:  BNZ   22E8
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
22E0:  CLRF   48
22E2:  CLRF   49
22E4:  CLRF   4A
22E6:  CLRF   4B
....................             } 
....................          } 
....................       }else{ 
22E8:  BRA    22EC
....................          Flanco1 = 0; 
22EA:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
22EC:  BSF    F96.2
22EE:  BTFSC  F84.2
22F0:  BRA    2322
....................          delay_ms(20); 
22F2:  MOVLW  14
22F4:  MOVWF  xE9
22F6:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
22FA:  BSF    F96.2
22FC:  BTFSC  F84.2
22FE:  BRA    2320
2300:  BTFSC  42.7
2302:  BRA    2320
....................             /*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f"); 
2304:  MOVLW  02
2306:  MOVWF  xD3
2308:  MOVLW  FA
230A:  MOVWF  xE9
230C:  CALL   0B20
2310:  DECFSZ xD3,F
2312:  BRA    2308
2314:  MOVLW  14
2316:  MOVWF  1C
2318:  MOVLW  0C
231A:  MOVWF  xE8
231C:  CALL   0C92
....................          } 
....................       }else{ 
2320:  BRA    2324
....................          Flanco3 = 0; 
2322:  BCF    42.7
....................       } 
.................... } 
2324:  GOTO   4EE4 (RETURN)
....................  
.................... void MenuFiltro(){ 
....................    lcd_gotoxy(1,1); 
*
2450:  MOVLW  01
2452:  MOVWF  xE9
2454:  MOVWF  xEA
2456:  CALL   0C20
....................       printf(lcd_putc,"  Duracion Actual   ");                           
245A:  MOVLW  90
245C:  MOVWF  FF6
245E:  MOVLW  02
2460:  MOVWF  FF7
2462:  CALL   1B48
....................       lcd_gotoxy(1,2);                                                   
2466:  MOVLW  01
2468:  MOVWF  xE9
246A:  MOVLW  02
246C:  MOVWF  xEA
246E:  CALL   0C20
....................       printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
2472:  MOVLW  A6
2474:  MOVWF  FF6
2476:  MOVLW  02
2478:  MOVWF  FF7
247A:  MOVLW  09
247C:  MOVWF  xDB
247E:  CALL   1B6A
2482:  MOVFF  38,DA
2486:  MOVLW  01
2488:  MOVWF  xDB
248A:  CALL   1BB2
248E:  MOVLW  3A
2490:  MOVWF  xE8
2492:  CALL   0C92
2496:  MOVFF  37,DA
249A:  MOVLW  01
249C:  MOVWF  xDB
249E:  CALL   1BB2
24A2:  MOVLW  3A
24A4:  MOVWF  xE8
24A6:  CALL   0C92
24AA:  MOVFF  36,DA
24AE:  MOVLW  01
24B0:  MOVWF  xDB
24B2:  CALL   1BB2
24B6:  MOVLW  20
24B8:  MOVWF  xE8
24BA:  CALL   0C92
....................        
....................       if(flag_filtro==1){ 
24BE:  BTFSS  43.2
24C0:  BRA    24DC
....................          lcd_gotoxy(1,3);                                                  
24C2:  MOVLW  01
24C4:  MOVWF  xE9
24C6:  MOVLW  03
24C8:  MOVWF  xEA
24CA:  CALL   0C20
....................          printf(lcd_putc,"DESACTIVAR= Oprima >");                         
24CE:  MOVLW  C0
24D0:  MOVWF  FF6
24D2:  MOVLW  02
24D4:  MOVWF  FF7
24D6:  CALL   1B48
....................       }else{ 
24DA:  BRA    24F4
....................          lcd_gotoxy(1,3);                                                  
24DC:  MOVLW  01
24DE:  MOVWF  xE9
24E0:  MOVLW  03
24E2:  MOVWF  xEA
24E4:  CALL   0C20
....................          printf(lcd_putc," ACTIVAR= Oprima >  ");                         
24E8:  MOVLW  D6
24EA:  MOVWF  FF6
24EC:  MOVLW  02
24EE:  MOVWF  FF7
24F0:  CALL   1B48
....................       } 
....................     
....................       lcd_gotoxy(1,4);                                                  
24F4:  MOVLW  01
24F6:  MOVWF  xE9
24F8:  MOVLW  04
24FA:  MOVWF  xEA
24FC:  CALL   0C20
....................       printf(lcd_putc," RESET= Oprima ^    ");                                                                                    
2500:  MOVLW  EC
2502:  MOVWF  FF6
2504:  MOVLW  02
2506:  MOVWF  FF7
2508:  CALL   1B48
....................     
....................       if(UP){//Si oprime hacia arriba 
250C:  BSF    F92.5
250E:  BTFSC  F80.5
2510:  BRA    2620
....................          delay_ms(20); 
2512:  MOVLW  14
2514:  MOVWF  xE9
2516:  CALL   0B20
....................          if(UP){ 
251A:  BSF    F92.5
251C:  BTFSC  F80.5
251E:  BRA    2620
....................             printf(lcd_putc,"\f"); 
2520:  MOVLW  0C
2522:  MOVWF  xE8
2524:  CALL   0C92
....................             lcd_gotoxy(1,2); 
2528:  MOVLW  01
252A:  MOVWF  xE9
252C:  MOVLW  02
252E:  MOVWF  xEA
2530:  CALL   0C20
....................             printf(lcd_putc," Reset de tiempo "); 
2534:  MOVLW  02
2536:  MOVWF  FF6
2538:  MOVLW  03
253A:  MOVWF  FF7
253C:  CALL   1B48
....................             lcd_gotoxy(1,3); 
2540:  MOVLW  01
2542:  MOVWF  xE9
2544:  MOVLW  03
2546:  MOVWF  xEA
2548:  CALL   0C20
....................             printf(lcd_putc,"     Exitoso     "); 
254C:  MOVLW  14
254E:  MOVWF  FF6
2550:  MOVLW  03
2552:  MOVWF  FF7
2554:  CALL   1B48
....................             write_eeprom(70,0);delay_ms(20); 
2558:  MOVLW  46
255A:  MOVWF  FA9
255C:  CLRF   FA8
255E:  BCF    FA6.6
2560:  BCF    FA6.7
2562:  BSF    FA6.2
2564:  MOVF   FF2,W
2566:  MOVWF  00
2568:  BCF    FF2.7
256A:  MOVLB  F
256C:  MOVLW  55
256E:  MOVWF  FA7
2570:  MOVLW  AA
2572:  MOVWF  FA7
2574:  BSF    FA6.1
2576:  BTFSC  FA6.1
2578:  BRA    2576
257A:  BCF    FA6.2
257C:  MOVF   00,W
257E:  IORWF  FF2,F
2580:  MOVLW  14
2582:  MOVLB  0
2584:  MOVWF  xE9
2586:  CALL   0B20
....................             write_eeprom(71,0);delay_ms(20); 
258A:  MOVLW  47
258C:  MOVWF  FA9
258E:  CLRF   FA8
2590:  BCF    FA6.6
2592:  BCF    FA6.7
2594:  BSF    FA6.2
2596:  MOVF   FF2,W
2598:  MOVWF  00
259A:  BCF    FF2.7
259C:  MOVLB  F
259E:  MOVLW  55
25A0:  MOVWF  FA7
25A2:  MOVLW  AA
25A4:  MOVWF  FA7
25A6:  BSF    FA6.1
25A8:  BTFSC  FA6.1
25AA:  BRA    25A8
25AC:  BCF    FA6.2
25AE:  MOVF   00,W
25B0:  IORWF  FF2,F
25B2:  MOVLW  14
25B4:  MOVLB  0
25B6:  MOVWF  xE9
25B8:  CALL   0B20
....................             write_eeprom(72,0);delay_ms(20); 
25BC:  MOVLW  48
25BE:  MOVWF  FA9
25C0:  CLRF   FA8
25C2:  BCF    FA6.6
25C4:  BCF    FA6.7
25C6:  BSF    FA6.2
25C8:  MOVF   FF2,W
25CA:  MOVWF  00
25CC:  BCF    FF2.7
25CE:  MOVLB  F
25D0:  MOVLW  55
25D2:  MOVWF  FA7
25D4:  MOVLW  AA
25D6:  MOVWF  FA7
25D8:  BSF    FA6.1
25DA:  BTFSC  FA6.1
25DC:  BRA    25DA
25DE:  BCF    FA6.2
25E0:  MOVF   00,W
25E2:  IORWF  FF2,F
25E4:  MOVLW  14
25E6:  MOVLB  0
25E8:  MOVWF  xE9
25EA:  CALL   0B20
....................             delay_ms(700); 
25EE:  MOVLW  04
25F0:  MOVWF  xD3
25F2:  MOVLW  AF
25F4:  MOVWF  xE9
25F6:  CALL   0B20
25FA:  DECFSZ xD3,F
25FC:  BRA    25F2
....................             segundos=0;minutos=0;horas=0; 
25FE:  CLRF   36
2600:  CLRF   37
2602:  CLRF   38
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2604:  MOVLW  1E
2606:  MOVWF  xE9
2608:  CALL   0B20
260C:  MOVLW  01
260E:  MOVWF  1C
2610:  CLRF   44
2612:  MOVLW  02
2614:  MOVWF  1F
2616:  MOVWF  21
2618:  MOVLW  0C
261A:  MOVWF  xE8
261C:  CALL   0C92
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
2620:  BSF    F96.1
2622:  BTFSC  F84.1
2624:  BRA    2696
....................          delay_ms(20); 
2626:  MOVLW  14
2628:  MOVWF  xE9
262A:  CALL   0B20
....................          if(RIGHT){ 
262E:  BSF    F96.1
2630:  BTFSC  F84.1
2632:  BRA    2696
....................             flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro);delay_ms(20); 
2634:  BTG    43.2
2636:  MOVLW  00
2638:  BTFSC  43.2
263A:  MOVLW  01
263C:  MOVWF  xD3
263E:  MOVLW  49
2640:  MOVWF  FA9
2642:  MOVFF  D3,FA8
2646:  BCF    FA6.6
2648:  BCF    FA6.7
264A:  BSF    FA6.2
264C:  MOVF   FF2,W
264E:  MOVWF  00
2650:  BCF    FF2.7
2652:  MOVLB  F
2654:  MOVLW  55
2656:  MOVWF  FA7
2658:  MOVLW  AA
265A:  MOVWF  FA7
265C:  BSF    FA6.1
265E:  BTFSC  FA6.1
2660:  BRA    265E
2662:  BCF    FA6.2
2664:  MOVF   00,W
2666:  IORWF  FF2,F
2668:  MOVLW  14
266A:  MOVLB  0
266C:  MOVWF  xE9
266E:  CALL   0B20
....................             delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2672:  MOVLW  02
2674:  MOVWF  xD3
2676:  MOVLW  FA
2678:  MOVWF  xE9
267A:  CALL   0B20
267E:  DECFSZ xD3,F
2680:  BRA    2676
2682:  MOVLW  01
2684:  MOVWF  1C
2686:  CLRF   44
2688:  MOVLW  02
268A:  MOVWF  1F
268C:  MOVWF  21
268E:  MOVLW  0C
2690:  MOVWF  xE8
2692:  CALL   0C92
....................          } 
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
2696:  BSF    F96.2
2698:  BTFSC  F84.2
269A:  BRA    26D6
....................          delay_ms(20); 
269C:  MOVLW  14
269E:  MOVWF  xE9
26A0:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
26A4:  BSF    F96.2
26A6:  BTFSC  F84.2
26A8:  BRA    26D4
26AA:  BTFSC  42.7
26AC:  BRA    26D4
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
26AE:  BSF    42.7
26B0:  MOVLW  02
26B2:  MOVWF  xD3
26B4:  MOVLW  FA
26B6:  MOVWF  xE9
26B8:  CALL   0B20
26BC:  DECFSZ xD3,F
26BE:  BRA    26B4
26C0:  MOVLW  01
26C2:  MOVWF  1C
26C4:  CLRF   44
26C6:  MOVLW  02
26C8:  MOVWF  1F
26CA:  MOVWF  21
26CC:  MOVLW  0C
26CE:  MOVWF  xE8
26D0:  CALL   0C92
....................          } 
....................       }else{ 
26D4:  BRA    26D8
....................          Flanco3 = 0; 
26D6:  BCF    42.7
....................       } 
.................... } 
26D8:  GOTO   4EF8 (RETURN)
....................  
.................... void MenuSetpoint(){ 
....................       lcd_gotoxy(1,2); 
*
275C:  MOVLW  01
275E:  MOVWF  xE9
2760:  MOVLW  02
2762:  MOVWF  xEA
2764:  CALL   0C20
....................       printf(lcd_putc," Tiempo de Filtro"); 
2768:  MOVLW  26
276A:  MOVWF  FF6
276C:  MOVLW  03
276E:  MOVWF  FF7
2770:  CALL   1B48
....................       lcd_gotoxy(1,3); 
2774:  MOVLW  01
2776:  MOVWF  xE9
2778:  MOVLW  03
277A:  MOVWF  xEA
277C:  CALL   0C20
....................       printf(lcd_putc,"       %03u   ",setpoint); 
2780:  MOVLW  38
2782:  MOVWF  FF6
2784:  MOVLW  03
2786:  MOVWF  FF7
2788:  MOVLW  07
278A:  MOVWF  xDB
278C:  CALL   1B6A
2790:  MOVFF  41,DA
2794:  MOVLW  03
2796:  MOVWF  xDB
2798:  CALL   1BB2
279C:  MOVLW  20
279E:  MOVWF  xE8
27A0:  CALL   0C92
27A4:  MOVLW  20
27A6:  MOVWF  xE8
27A8:  CALL   0C92
27AC:  MOVLW  20
27AE:  MOVWF  xE8
27B0:  CALL   0C92
....................     
....................       if(setpoint<10) 
27B4:  MOVF   41,W
27B6:  SUBLW  09
27B8:  BNC   27BE
....................          setpoint=10; 
27BA:  MOVLW  0A
27BC:  MOVWF  41
....................     
....................       if(UP){//Si oprime hacia arriba 
27BE:  BSF    F92.5
27C0:  BTFSC  F80.5
27C2:  BRA    27DE
....................          delay_ms(20); 
27C4:  MOVLW  14
27C6:  MOVWF  xE9
27C8:  CALL   0B20
....................          if(UP && Flanco == 0) { 
27CC:  BSF    F92.5
27CE:  BTFSC  F80.5
27D0:  BRA    27DC
27D2:  BTFSC  42.4
27D4:  BRA    27DC
....................             setpoint+=1;Flanco = 1; 
27D6:  MOVLW  01
27D8:  ADDWF  41,F
27DA:  BSF    42.4
....................          } 
....................       }else{ 
27DC:  BRA    27E0
....................          Flanco = 0; 
27DE:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
27E0:  BSF    F96.0
27E2:  BTFSC  F84.0
27E4:  BRA    2800
....................          delay_ms(20); 
27E6:  MOVLW  14
27E8:  MOVWF  xE9
27EA:  CALL   0B20
....................          if(DOWN && Flanco2 == 0) { 
27EE:  BSF    F96.0
27F0:  BTFSC  F84.0
27F2:  BRA    27FE
27F4:  BTFSC  42.6
27F6:  BRA    27FE
....................             setpoint-=1;Flanco2 = 1; 
27F8:  MOVLW  01
27FA:  SUBWF  41,F
27FC:  BSF    42.6
....................          } 
....................       }else{ 
27FE:  BRA    2802
....................          Flanco2 = 0; 
2800:  BCF    42.6
....................       } 
....................     
....................       if(RIGHT || LEFT){// Si oprime derecha 
2802:  BSF    F96.1
2804:  BTFSS  F84.1
2806:  BRA    280E
2808:  BSF    F96.2
280A:  BTFSC  F84.2
280C:  BRA    2886
....................          delay_ms(20); 
280E:  MOVLW  14
2810:  MOVWF  xE9
2812:  CALL   0B20
....................          if((RIGHT || LEFT)&& Flanco1 == 0){ 
2816:  BSF    F96.1
2818:  BTFSS  F84.1
281A:  BRA    2822
281C:  BSF    F96.2
281E:  BTFSC  F84.2
2820:  BRA    2884
2822:  BTFSC  42.5
2824:  BRA    2884
....................             /*Flanco1 = 1;*/ 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2826:  MOVLW  01
2828:  MOVWF  1C
282A:  CLRF   44
282C:  MOVLW  02
282E:  MOVWF  1F
2830:  MOVWF  21
2832:  MOVLW  0B
2834:  MOVWF  1E
2836:  MOVLW  02
2838:  MOVWF  xD3
283A:  MOVLW  FA
283C:  MOVWF  xE9
283E:  CALL   0B20
2842:  DECFSZ xD3,F
2844:  BRA    283A
2846:  MOVLW  0C
2848:  MOVWF  xE8
284A:  CALL   0C92
....................             /*Temporal=setpoint; 
....................             Entero=(int)setpoint; 
....................             Temporal=Temporal-Entero; 
....................             Temporal2=Temporal*10.0; 
....................             Decimal2=(int8)Temporal2;*/ 
....................             write_eeprom(40,setpoint);delay_ms(20); 
284E:  MOVLW  28
2850:  MOVWF  FA9
2852:  MOVFF  41,FA8
2856:  BCF    FA6.6
2858:  BCF    FA6.7
285A:  BSF    FA6.2
285C:  MOVF   FF2,W
285E:  MOVWF  00
2860:  BCF    FF2.7
2862:  MOVLB  F
2864:  MOVLW  55
2866:  MOVWF  FA7
2868:  MOVLW  AA
286A:  MOVWF  FA7
286C:  BSF    FA6.1
286E:  BTFSC  FA6.1
2870:  BRA    286E
2872:  BCF    FA6.2
2874:  MOVF   00,W
2876:  IORWF  FF2,F
2878:  MOVLW  14
287A:  MOVLB  0
287C:  MOVWF  xE9
287E:  CALL   0B20
....................             //write_eeprom(41,Decimal2);delay_ms(20);//Guardar valor de Setpoint en eeprom 
....................             MensajeGuardado(); 
2882:  RCALL  26DC
....................          } 
....................       }else{ 
2884:  BRA    2888
....................          Flanco1 = 0; 
2886:  BCF    42.5
....................       } 
.................... } 
2888:  GOTO   4F02 (RETURN)
....................  
.................... void MenuAlarma(){ 
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
*
2328:  BTG    42.2
232A:  BSF    42.5
232C:  MOVLW  01
232E:  MOVWF  1C
2330:  CLRF   44
....................                        
....................             if(estadoalarma==1){ 
2332:  BTFSS  42.2
2334:  BRA    2396
....................                estadoalarma=1; 
2336:  BSF    42.2
....................                lcd_gotoxy(1,1); 
2338:  MOVLW  01
233A:  MOVWF  xE9
233C:  MOVWF  xEA
233E:  CALL   0C20
....................                printf(lcd_putc,"                    "); 
2342:  MOVLW  48
2344:  MOVWF  FF6
2346:  MOVLW  03
2348:  MOVWF  FF7
234A:  CALL   1B48
....................                lcd_gotoxy(1,2); 
234E:  MOVLW  01
2350:  MOVWF  xE9
2352:  MOVLW  02
2354:  MOVWF  xEA
2356:  CALL   0C20
....................                printf(lcd_putc,"        Activo      "); 
235A:  MOVLW  5E
235C:  MOVWF  FF6
235E:  MOVLW  03
2360:  MOVWF  FF7
2362:  CALL   1B48
....................                lcd_gotoxy(1,3); 
2366:  MOVLW  01
2368:  MOVWF  xE9
236A:  MOVLW  03
236C:  MOVWF  xEA
236E:  CALL   0C20
....................                printf(lcd_putc,"        Alarma      "); 
2372:  MOVLW  74
2374:  MOVWF  FF6
2376:  MOVLW  03
2378:  MOVWF  FF7
237A:  CALL   1B48
....................                lcd_gotoxy(1,4); 
237E:  MOVLW  01
2380:  MOVWF  xE9
2382:  MOVLW  04
2384:  MOVWF  xEA
2386:  CALL   0C20
....................                printf(lcd_putc,"                    "); 
238A:  MOVLW  8A
238C:  MOVWF  FF6
238E:  MOVLW  03
2390:  MOVWF  FF7
2392:  CALL   1B48
....................             } 
....................                 
....................             if(estadoalarma==0){ 
2396:  BTFSC  42.2
2398:  BRA    23FA
....................                estadoalarma=0; 
239A:  BCF    42.2
....................                lcd_gotoxy(1,1); 
239C:  MOVLW  01
239E:  MOVWF  xE9
23A0:  MOVWF  xEA
23A2:  CALL   0C20
....................                printf(lcd_putc,"                    "); 
23A6:  MOVLW  A0
23A8:  MOVWF  FF6
23AA:  MOVLW  03
23AC:  MOVWF  FF7
23AE:  CALL   1B48
....................                lcd_gotoxy(1,2); 
23B2:  MOVLW  01
23B4:  MOVWF  xE9
23B6:  MOVLW  02
23B8:  MOVWF  xEA
23BA:  CALL   0C20
....................                printf(lcd_putc,"      Desactivo     "); 
23BE:  MOVLW  B6
23C0:  MOVWF  FF6
23C2:  MOVLW  03
23C4:  MOVWF  FF7
23C6:  CALL   1B48
....................                lcd_gotoxy(1,3); 
23CA:  MOVLW  01
23CC:  MOVWF  xE9
23CE:  MOVLW  03
23D0:  MOVWF  xEA
23D2:  CALL   0C20
....................                printf(lcd_putc,"       Alarma       "); 
23D6:  MOVLW  CC
23D8:  MOVWF  FF6
23DA:  MOVLW  03
23DC:  MOVWF  FF7
23DE:  CALL   1B48
....................                lcd_gotoxy(1,4); 
23E2:  MOVLW  01
23E4:  MOVWF  xE9
23E6:  MOVLW  04
23E8:  MOVWF  xEA
23EA:  CALL   0C20
....................                printf(lcd_putc,"                    "); 
23EE:  MOVLW  E2
23F0:  MOVWF  FF6
23F2:  MOVLW  03
23F4:  MOVWF  FF7
23F6:  CALL   1B48
....................             } 
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
23FA:  MOVLW  00
23FC:  BTFSC  42.2
23FE:  MOVLW  01
2400:  MOVWF  xD3
2402:  MOVLW  05
2404:  MOVWF  FA9
2406:  MOVFF  D3,FA8
240A:  BCF    FA6.6
240C:  BCF    FA6.7
240E:  BSF    FA6.2
2410:  MOVF   FF2,W
2412:  MOVWF  00
2414:  BCF    FF2.7
2416:  MOVLB  F
2418:  MOVLW  55
241A:  MOVWF  FA7
241C:  MOVLW  AA
241E:  MOVWF  FA7
2420:  BSF    FA6.1
2422:  BTFSC  FA6.1
2424:  BRA    2422
2426:  BCF    FA6.2
2428:  MOVF   00,W
242A:  IORWF  FF2,F
242C:  MOVLW  04
242E:  MOVLB  0
2430:  MOVWF  xD3
2432:  MOVLW  FA
2434:  MOVWF  xE9
2436:  CALL   0B20
243A:  DECFSZ xD3,F
243C:  BRA    2432
243E:  MOVLW  02
2440:  MOVWF  1F
2442:  MOVWF  21
2444:  MOVLW  0C
2446:  MOVWF  xE8
2448:  CALL   0C92
.................... } 
244C:  GOTO   4EEE (RETURN)
....................  
.................... void MenuMedia(){ 
....................    lcd_gotoxy(1,2); 
*
3414:  MOVLW  01
3416:  MOVWF  xE9
3418:  MOVLW  02
341A:  MOVWF  xEA
341C:  CALL   0C20
....................       printf(lcd_putc,"     Media Movil    "); 
3420:  MOVLW  F8
3422:  MOVWF  FF6
3424:  MOVLW  03
3426:  MOVWF  FF7
3428:  CALL   1B48
....................       lcd_gotoxy(1,3); 
342C:  MOVLW  01
342E:  MOVWF  xE9
3430:  MOVLW  03
3432:  MOVWF  xEA
3434:  CALL   0C20
....................       printf(lcd_putc,"       %02i   ",MediaMovil); 
3438:  MOVLW  0E
343A:  MOVWF  FF6
343C:  MOVLW  04
343E:  MOVWF  FF7
3440:  MOVLW  07
3442:  MOVWF  xDB
3444:  CALL   1B6A
3448:  MOVFF  2F,D4
344C:  MOVLW  01
344E:  MOVWF  xD5
3450:  CALL   288C
3454:  MOVLW  20
3456:  MOVWF  xE8
3458:  CALL   0C92
345C:  MOVLW  20
345E:  MOVWF  xE8
3460:  CALL   0C92
3464:  MOVLW  20
3466:  MOVWF  xE8
3468:  CALL   0C92
....................        
....................       if(MediaMovil>12) 
346C:  MOVF   2F,W
346E:  SUBLW  0C
3470:  BC    3476
....................          MediaMovil=12; 
3472:  MOVLW  0C
3474:  MOVWF  2F
....................     
....................       if(MediaMovil<1) 
3476:  MOVF   2F,F
3478:  BNZ   347E
....................          MediaMovil=1; 
347A:  MOVLW  01
347C:  MOVWF  2F
....................     
....................       if(UP){//Si oprime hacia arriba 
347E:  BSF    F92.5
3480:  BTFSC  F80.5
3482:  BRA    34A6
....................          delay_ms(20); 
3484:  MOVLW  14
3486:  MOVWF  xE9
3488:  CALL   0B20
....................          if(UP && Flanco == 0) { 
348C:  BSF    F92.5
348E:  BTFSC  F80.5
3490:  BRA    34A4
3492:  BTFSC  42.4
3494:  BRA    34A4
....................             MediaMovil+=1;Flanco = 1;delay_ms(30); 
3496:  MOVLW  01
3498:  ADDWF  2F,F
349A:  BSF    42.4
349C:  MOVLW  1E
349E:  MOVWF  xE9
34A0:  CALL   0B20
....................          } 
....................       }else{ 
34A4:  BRA    34A8
....................          Flanco = 0; 
34A6:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
34A8:  BSF    F96.0
34AA:  BTFSC  F84.0
34AC:  BRA    34D0
....................          delay_ms(20); 
34AE:  MOVLW  14
34B0:  MOVWF  xE9
34B2:  CALL   0B20
....................          if(DOWN && Flanco2 == 0){ 
34B6:  BSF    F96.0
34B8:  BTFSC  F84.0
34BA:  BRA    34CE
34BC:  BTFSC  42.6
34BE:  BRA    34CE
....................             MediaMovil-=1;Flanco2 = 1;delay_ms(30); 
34C0:  MOVLW  01
34C2:  SUBWF  2F,F
34C4:  BSF    42.6
34C6:  MOVLW  1E
34C8:  MOVWF  xE9
34CA:  CALL   0B20
....................          } 
....................       }else{ 
34CE:  BRA    34D2
....................          Flanco2 = 0; 
34D0:  BCF    42.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime derecha 
34D2:  BSF    F96.1
34D4:  BTFSC  F84.1
34D6:  BRA    354C
....................          delay_ms(20); 
34D8:  MOVLW  14
34DA:  MOVWF  xE9
34DC:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
34E0:  BSF    F96.1
34E2:  BTFSC  F84.1
34E4:  BRA    354A
34E6:  BTFSC  42.5
34E8:  BRA    354A
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
34EA:  MOVLW  01
34EC:  MOVWF  1C
34EE:  CLRF   44
34F0:  MOVLW  02
34F2:  MOVWF  1F
34F4:  MOVWF  21
34F6:  MOVLW  0B
34F8:  MOVWF  1E
34FA:  MOVLW  02
34FC:  MOVWF  xD3
34FE:  MOVLW  FA
3500:  MOVWF  xE9
3502:  CALL   0B20
3506:  DECFSZ xD3,F
3508:  BRA    34FE
350A:  MOVLW  0C
350C:  MOVWF  xE8
350E:  CALL   0C92
....................             write_eeprom(42,MediaMovil);delay_ms(20);//Guardar valor de Setpoint en eeprom 
3512:  MOVLW  2A
3514:  MOVWF  FA9
3516:  MOVFF  2F,FA8
351A:  BCF    FA6.6
351C:  BCF    FA6.7
351E:  BSF    FA6.2
3520:  MOVF   FF2,W
3522:  MOVWF  00
3524:  BCF    FF2.7
3526:  MOVLB  F
3528:  MOVLW  55
352A:  MOVWF  FA7
352C:  MOVLW  AA
352E:  MOVWF  FA7
3530:  BSF    FA6.1
3532:  BTFSC  FA6.1
3534:  BRA    3532
3536:  BCF    FA6.2
3538:  MOVF   00,W
353A:  IORWF  FF2,F
353C:  MOVLW  14
353E:  MOVLB  0
3540:  MOVWF  xE9
3542:  CALL   0B20
....................             MensajeGuardado(); 
3546:  CALL   26DC
....................          } 
....................       }else{ 
354A:  BRA    354E
....................          Flanco1 = 0; 
354C:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
354E:  BSF    F96.2
3550:  BTFSC  F84.2
3552:  BRA    3590
....................          delay_ms(20); 
3554:  MOVLW  14
3556:  MOVWF  xE9
3558:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
355C:  BSF    F96.2
355E:  BTFSC  F84.2
3560:  BRA    358E
3562:  BTFSC  42.7
3564:  BRA    358E
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3566:  MOVLW  01
3568:  MOVWF  1C
356A:  CLRF   44
356C:  MOVLW  02
356E:  MOVWF  1F
3570:  MOVWF  21
3572:  MOVLW  0B
3574:  MOVWF  1E
3576:  MOVLW  02
3578:  MOVWF  xD3
357A:  MOVLW  FA
357C:  MOVWF  xE9
357E:  CALL   0B20
3582:  DECFSZ xD3,F
3584:  BRA    357A
3586:  MOVLW  0C
3588:  MOVWF  xE8
358A:  CALL   0C92
....................          } 
....................       }else{ 
358E:  BRA    3592
....................          Flanco3 = 0; 
3590:  BCF    42.7
....................       } 
.................... } 
3592:  GOTO   4F8E (RETURN)
....................  
.................... void MenuPuntoCero(){ 
....................    lcd_gotoxy(1,1); 
*
3956:  MOVLW  01
3958:  MOVWF  xE9
395A:  MOVWF  xEA
395C:  CALL   0C20
....................       printf(lcd_putc,"  Zero Point Config "); 
3960:  MOVLW  1E
3962:  MOVWF  FF6
3964:  MOVLW  04
3966:  MOVWF  FF7
3968:  CALL   1B48
....................       lcd_gotoxy(1,2); 
396C:  MOVLW  01
396E:  MOVWF  xE9
3970:  MOVLW  02
3972:  MOVWF  xEA
3974:  CALL   0C20
....................       printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
3978:  MOVLW  34
397A:  MOVWF  FF6
397C:  MOVLW  04
397E:  MOVWF  FF7
3980:  MOVLW  08
3982:  MOVWF  xDB
3984:  CALL   1B6A
3988:  MOVLW  01
398A:  MOVWF  FE9
398C:  MOVFF  71,DE
3990:  MOVFF  70,DD
3994:  MOVFF  6F,DC
3998:  MOVFF  6E,DB
399C:  MOVWF  xDF
399E:  RCALL  3742
39A0:  MOVLW  41
39A2:  MOVWF  FF6
39A4:  MOVLW  04
39A6:  MOVWF  FF7
39A8:  MOVLW  08
39AA:  MOVWF  xDB
39AC:  CALL   1B6A
....................       lcd_gotoxy(1,3); 
39B0:  MOVLW  01
39B2:  MOVWF  xE9
39B4:  MOVLW  03
39B6:  MOVWF  xEA
39B8:  CALL   0C20
....................       printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
39BC:  CLRF   xDB
39BE:  RCALL  38C8
39C0:  MOVFF  00,D3
39C4:  MOVFF  01,D4
39C8:  MOVFF  02,D5
39CC:  MOVFF  03,D6
39D0:  MOVLW  5A
39D2:  MOVWF  xE8
39D4:  CALL   0C92
39D8:  MOVLW  46
39DA:  MOVWF  xE8
39DC:  CALL   0C92
39E0:  MOVLW  3D
39E2:  MOVWF  xE8
39E4:  CALL   0C92
39E8:  MOVLW  01
39EA:  MOVWF  FE9
39EC:  MOVFF  53,DE
39F0:  MOVFF  52,DD
39F4:  MOVFF  51,DC
39F8:  MOVFF  50,DB
39FC:  CLRF   xDF
39FE:  RCALL  3742
3A00:  MOVLW  52
3A02:  MOVWF  FF6
3A04:  MOVLW  04
3A06:  MOVWF  FF7
3A08:  MOVLW  05
3A0A:  MOVWF  xDB
3A0C:  CALL   1B6A
3A10:  MOVLW  01
3A12:  MOVWF  FE9
3A14:  MOVFF  D6,DE
3A18:  MOVFF  D5,DD
3A1C:  MOVFF  D4,DC
3A20:  MOVFF  D3,DB
3A24:  CLRF   xDF
3A26:  RCALL  3742
....................       lcd_gotoxy(1,4); 
3A28:  MOVLW  01
3A2A:  MOVWF  xE9
3A2C:  MOVLW  04
3A2E:  MOVWF  xEA
3A30:  CALL   0C20
....................       printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
3A34:  MOVLW  5E
3A36:  MOVWF  FF6
3A38:  MOVLW  04
3A3A:  MOVWF  FF7
3A3C:  MOVLW  0C
3A3E:  MOVWF  xDB
3A40:  CALL   1B6A
3A44:  MOVLW  01
3A46:  MOVWF  FE9
3A48:  MOVFF  99,DE
3A4C:  MOVFF  98,DD
3A50:  MOVFF  97,DC
3A54:  MOVFF  96,DB
3A58:  CLRF   xDF
3A5A:  RCALL  3742
....................      
....................       if(RIGHT){// Si oprime derecha 
3A5C:  BSF    F96.1
3A5E:  BTFSC  F84.1
3A60:  BRA    3C46
....................          delay_ms(20); 
3A62:  MOVLW  14
3A64:  MOVWF  xE9
3A66:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
3A6A:  BSF    F96.1
3A6C:  BTFSC  F84.1
3A6E:  BRA    3C44
3A70:  BTFSC  42.5
3A72:  BRA    3C44
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3A74:  MOVLW  01
3A76:  MOVWF  1C
3A78:  CLRF   44
3A7A:  MOVLW  02
3A7C:  MOVWF  1F
3A7E:  MOVWF  21
3A80:  MOVLW  0B
3A82:  MOVWF  1E
3A84:  MOVLW  02
3A86:  MOVWF  xD3
3A88:  MOVLW  FA
3A8A:  MOVWF  xE9
3A8C:  CALL   0B20
3A90:  DECFSZ xD3,F
3A92:  BRA    3A88
3A94:  MOVLW  0C
3A96:  MOVWF  xE8
3A98:  CALL   0C92
....................             Diferencia=zero_fabrica-sensores(0); 
3A9C:  CLRF   xDB
3A9E:  RCALL  38C8
3AA0:  MOVFF  FEA,D4
3AA4:  MOVFF  FE9,D3
3AA8:  BSF    FD8.1
3AAA:  MOVFF  53,DD
3AAE:  MOVFF  52,DC
3AB2:  MOVFF  51,DB
3AB6:  MOVFF  50,DA
3ABA:  MOVFF  03,E1
3ABE:  MOVFF  02,E0
3AC2:  MOVFF  01,DF
3AC6:  MOVFF  00,DE
3ACA:  CALL   0ECA
3ACE:  MOVFF  D4,FEA
3AD2:  MOVFF  D3,FE9
3AD6:  MOVFF  03,99
3ADA:  MOVFF  02,98
3ADE:  MOVFF  01,97
3AE2:  MOVFF  00,96
....................              
....................             if(Diferencia>=0){ 
3AE6:  CLRF   xDA
3AE8:  CLRF   xD9
3AEA:  CLRF   xD8
3AEC:  CLRF   xD7
3AEE:  MOVFF  99,DE
3AF2:  MOVFF  98,DD
3AF6:  MOVFF  97,DC
3AFA:  MOVFF  96,DB
3AFE:  CALL   1540
3B02:  BC    3B06
3B04:  BNZ   3B3E
....................                negativo=10;write_eeprom(50,negativo);delay_ms(20); 
3B06:  MOVLW  0A
3B08:  MOVWF  30
3B0A:  MOVLW  32
3B0C:  MOVWF  FA9
3B0E:  MOVFF  30,FA8
3B12:  BCF    FA6.6
3B14:  BCF    FA6.7
3B16:  BSF    FA6.2
3B18:  MOVF   FF2,W
3B1A:  MOVWF  00
3B1C:  BCF    FF2.7
3B1E:  MOVLB  F
3B20:  MOVLW  55
3B22:  MOVWF  FA7
3B24:  MOVLW  AA
3B26:  MOVWF  FA7
3B28:  BSF    FA6.1
3B2A:  BTFSC  FA6.1
3B2C:  BRA    3B2A
3B2E:  BCF    FA6.2
3B30:  MOVF   00,W
3B32:  IORWF  FF2,F
3B34:  MOVLW  14
3B36:  MOVLB  0
3B38:  MOVWF  xE9
3B3A:  CALL   0B20
....................             } 
....................             if(Diferencia<0){ 
3B3E:  MOVFF  99,DA
3B42:  MOVFF  98,D9
3B46:  MOVFF  97,D8
3B4A:  MOVFF  96,D7
3B4E:  CLRF   xDE
3B50:  CLRF   xDD
3B52:  CLRF   xDC
3B54:  CLRF   xDB
3B56:  CALL   1540
3B5A:  BNC   3B94
....................                negativo=20;write_eeprom(50,negativo);delay_ms(20); 
3B5C:  MOVLW  14
3B5E:  MOVWF  30
3B60:  MOVLW  32
3B62:  MOVWF  FA9
3B64:  MOVFF  30,FA8
3B68:  BCF    FA6.6
3B6A:  BCF    FA6.7
3B6C:  BSF    FA6.2
3B6E:  MOVF   FF2,W
3B70:  MOVWF  00
3B72:  BCF    FF2.7
3B74:  MOVLB  F
3B76:  MOVLW  55
3B78:  MOVWF  FA7
3B7A:  MOVLW  AA
3B7C:  MOVWF  FA7
3B7E:  BSF    FA6.1
3B80:  BTFSC  FA6.1
3B82:  BRA    3B80
3B84:  BCF    FA6.2
3B86:  MOVF   00,W
3B88:  IORWF  FF2,F
3B8A:  MOVLW  14
3B8C:  MOVLB  0
3B8E:  MOVWF  xE9
3B90:  CALL   0B20
....................             } 
....................             Diferencia=abs(Diferencia); 
3B94:  MOVFF  96,00
3B98:  MOVFF  97,01
3B9C:  MOVFF  98,02
3BA0:  MOVFF  99,03
3BA4:  BCF    01.7
3BA6:  MOVFF  99,99
3BAA:  MOVFF  98,98
3BAE:  MOVFF  01,97
3BB2:  MOVFF  96,96
....................             Dif16=(int16)Diferencia; 
3BB6:  MOVFF  99,D6
3BBA:  MOVFF  98,D5
3BBE:  MOVFF  97,D4
3BC2:  MOVFF  96,D3
3BC6:  RCALL  391E
3BC8:  MOVFF  02,5C
3BCC:  MOVFF  01,5B
....................              
....................             write_eeprom(60,make8(Dif16,0));delay_ms(20); 
3BD0:  MOVFF  5B,D3
3BD4:  MOVLW  3C
3BD6:  MOVWF  FA9
3BD8:  MOVFF  D3,FA8
3BDC:  BCF    FA6.6
3BDE:  BCF    FA6.7
3BE0:  BSF    FA6.2
3BE2:  MOVF   FF2,W
3BE4:  MOVWF  00
3BE6:  BCF    FF2.7
3BE8:  MOVLB  F
3BEA:  MOVLW  55
3BEC:  MOVWF  FA7
3BEE:  MOVLW  AA
3BF0:  MOVWF  FA7
3BF2:  BSF    FA6.1
3BF4:  BTFSC  FA6.1
3BF6:  BRA    3BF4
3BF8:  BCF    FA6.2
3BFA:  MOVF   00,W
3BFC:  IORWF  FF2,F
3BFE:  MOVLW  14
3C00:  MOVLB  0
3C02:  MOVWF  xE9
3C04:  CALL   0B20
....................             write_eeprom(61,make8(Dif16,1));delay_ms(20);//Guardar valor de Setpoint en eeprom 
3C08:  MOVFF  5C,D3
3C0C:  MOVLW  3D
3C0E:  MOVWF  FA9
3C10:  MOVFF  D3,FA8
3C14:  BCF    FA6.6
3C16:  BCF    FA6.7
3C18:  BSF    FA6.2
3C1A:  MOVF   FF2,W
3C1C:  MOVWF  00
3C1E:  BCF    FF2.7
3C20:  MOVLB  F
3C22:  MOVLW  55
3C24:  MOVWF  FA7
3C26:  MOVLW  AA
3C28:  MOVWF  FA7
3C2A:  BSF    FA6.1
3C2C:  BTFSC  FA6.1
3C2E:  BRA    3C2C
3C30:  BCF    FA6.2
3C32:  MOVF   00,W
3C34:  IORWF  FF2,F
3C36:  MOVLW  14
3C38:  MOVLB  0
3C3A:  MOVWF  xE9
3C3C:  CALL   0B20
....................             MensajeGuardado(); 
3C40:  CALL   26DC
....................          } 
....................       }else{ 
3C44:  BRA    3C48
....................          Flanco1 = 0; 
3C46:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
3C48:  BSF    F96.2
3C4A:  BTFSC  F84.2
3C4C:  BRA    3C8A
....................          delay_ms(20); 
3C4E:  MOVLW  14
3C50:  MOVWF  xE9
3C52:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
3C56:  BSF    F96.2
3C58:  BTFSC  F84.2
3C5A:  BRA    3C88
3C5C:  BTFSC  42.7
3C5E:  BRA    3C88
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3C60:  MOVLW  01
3C62:  MOVWF  1C
3C64:  CLRF   44
3C66:  MOVLW  02
3C68:  MOVWF  1F
3C6A:  MOVWF  21
3C6C:  MOVLW  0B
3C6E:  MOVWF  1E
3C70:  MOVLW  02
3C72:  MOVWF  xD3
3C74:  MOVLW  FA
3C76:  MOVWF  xE9
3C78:  CALL   0B20
3C7C:  DECFSZ xD3,F
3C7E:  BRA    3C74
3C80:  MOVLW  0C
3C82:  MOVWF  xE8
3C84:  CALL   0C92
....................          } 
....................       }else{ 
3C88:  BRA    3C8C
....................          Flanco3 = 0; 
3C8A:  BCF    42.7
....................       } 
.................... } 
3C8C:  GOTO   4F98 (RETURN)
....................  
.................... void MenuMantenimiento(){ 
....................    lcd_gotoxy(1,1); 
3C90:  MOVLW  01
3C92:  MOVWF  xE9
3C94:  MOVWF  xEA
3C96:  CALL   0C20
....................       printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
3C9A:  CLRF   xDB
3C9C:  RCALL  38C8
3C9E:  MOVFF  00,D3
3CA2:  MOVFF  01,D4
3CA6:  MOVFF  02,D5
3CAA:  MOVFF  03,D6
3CAE:  MOVLW  70
3CB0:  MOVWF  FF6
3CB2:  MOVLW  04
3CB4:  MOVWF  FF7
3CB6:  MOVLW  0A
3CB8:  MOVWF  xDB
3CBA:  CALL   1B6A
3CBE:  MOVLW  01
3CC0:  MOVWF  FE9
3CC2:  MOVFF  D6,DE
3CC6:  MOVFF  D5,DD
3CCA:  MOVFF  D4,DC
3CCE:  MOVFF  D3,DB
3CD2:  CLRF   xDF
3CD4:  RCALL  3742
3CD6:  MOVLW  20
3CD8:  MOVWF  xE8
3CDA:  CALL   0C92
3CDE:  MOVLW  20
3CE0:  MOVWF  xE8
3CE2:  CALL   0C92
....................       lcd_gotoxy(1,2); 
3CE6:  MOVLW  01
3CE8:  MOVWF  xE9
3CEA:  MOVLW  02
3CEC:  MOVWF  xEA
3CEE:  CALL   0C20
....................       printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
3CF2:  CLRF   xE1
3CF4:  MOVFF  2E,E0
3CF8:  CALL   0D3A
3CFC:  MOVFF  00,D3
3D00:  MOVFF  01,D4
3D04:  MOVFF  02,D5
3D08:  MOVFF  03,D6
3D0C:  MOVFF  03,E2
3D10:  MOVFF  02,E1
3D14:  MOVFF  01,E0
3D18:  MOVFF  00,DF
3D1C:  CLRF   xE6
3D1E:  CLRF   xE5
3D20:  MOVLW  7F
3D22:  MOVWF  xE4
3D24:  MOVLW  86
3D26:  MOVWF  xE3
3D28:  CALL   0D70
3D2C:  CLRF   xEB
3D2E:  CLRF   xEA
3D30:  MOVLW  48
3D32:  MOVWF  xE9
3D34:  MOVLW  85
3D36:  MOVWF  xE8
3D38:  MOVFF  03,EF
3D3C:  MOVFF  02,EE
3D40:  MOVFF  01,ED
3D44:  MOVFF  00,EC
3D48:  RCALL  3596
3D4A:  MOVFF  00,D3
3D4E:  MOVFF  01,D4
3D52:  MOVFF  02,D5
3D56:  MOVFF  03,D6
3D5A:  MOVLW  01
3D5C:  MOVWF  xDB
3D5E:  RCALL  38C8
3D60:  MOVFF  00,D7
3D64:  MOVFF  01,D8
3D68:  MOVFF  02,D9
3D6C:  MOVFF  03,DA
3D70:  MOVLW  82
3D72:  MOVWF  FF6
3D74:  MOVLW  04
3D76:  MOVWF  FF7
3D78:  MOVLW  05
3D7A:  MOVWF  xDB
3D7C:  CALL   1B6A
3D80:  MOVLW  01
3D82:  MOVWF  FE9
3D84:  MOVFF  D6,DE
3D88:  MOVFF  D5,DD
3D8C:  MOVFF  D4,DC
3D90:  MOVFF  D3,DB
3D94:  CLRF   xDF
3D96:  RCALL  3742
3D98:  MOVLW  25
3D9A:  MOVWF  xE8
3D9C:  CALL   0C92
3DA0:  MOVLW  8E
3DA2:  MOVWF  FF6
3DA4:  MOVLW  04
3DA6:  MOVWF  FF7
3DA8:  MOVLW  04
3DAA:  MOVWF  xDB
3DAC:  CALL   1B6A
3DB0:  MOVLW  01
3DB2:  MOVWF  FE9
3DB4:  MOVFF  DA,DE
3DB8:  MOVFF  D9,DD
3DBC:  MOVFF  D8,DC
3DC0:  MOVFF  D7,DB
3DC4:  CLRF   xDF
3DC6:  RCALL  3742
3DC8:  MOVLW  20
3DCA:  MOVWF  xE8
3DCC:  CALL   0C92
....................       lcd_gotoxy(1,3); 
3DD0:  MOVLW  01
3DD2:  MOVWF  xE9
3DD4:  MOVLW  03
3DD6:  MOVWF  xEA
3DD8:  CALL   0C20
....................       printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
3DDC:  MOVLW  02
3DDE:  MOVWF  xDB
3DE0:  RCALL  38C8
3DE2:  MOVFF  00,D3
3DE6:  MOVFF  01,D4
3DEA:  MOVFF  02,D5
3DEE:  MOVFF  03,D6
3DF2:  MOVFF  03,E2
3DF6:  MOVFF  02,E1
3DFA:  MOVFF  01,E0
3DFE:  MOVFF  00,DF
3E02:  CLRF   xE6
3E04:  MOVLW  C0
3E06:  MOVWF  xE5
3E08:  MOVLW  7F
3E0A:  MOVWF  xE4
3E0C:  MOVLW  88
3E0E:  MOVWF  xE3
3E10:  CALL   0D70
3E14:  CLRF   xEB
3E16:  CLRF   xEA
3E18:  MOVLW  48
3E1A:  MOVWF  xE9
3E1C:  MOVLW  85
3E1E:  MOVWF  xE8
3E20:  MOVFF  03,EF
3E24:  MOVFF  02,EE
3E28:  MOVFF  01,ED
3E2C:  MOVFF  00,EC
3E30:  CALL   3596
3E34:  MOVFF  00,D3
3E38:  MOVFF  01,D4
3E3C:  MOVFF  02,D5
3E40:  MOVFF  03,D6
3E44:  MOVLW  9A
3E46:  MOVWF  FF6
3E48:  MOVLW  04
3E4A:  MOVWF  FF7
3E4C:  MOVLW  04
3E4E:  MOVWF  xDB
3E50:  CALL   1B6A
3E54:  MOVLW  01
3E56:  MOVWF  FE9
3E58:  MOVFF  71,DE
3E5C:  MOVFF  70,DD
3E60:  MOVFF  6F,DC
3E64:  MOVFF  6E,DB
3E68:  MOVWF  xDF
3E6A:  RCALL  3742
3E6C:  MOVLW  A3
3E6E:  MOVWF  FF6
3E70:  MOVLW  04
3E72:  MOVWF  FF7
3E74:  MOVLW  0A
3E76:  MOVWF  xDB
3E78:  CALL   1B6A
3E7C:  MOVLW  01
3E7E:  MOVWF  FE9
3E80:  MOVFF  D6,DE
3E84:  MOVFF  D5,DD
3E88:  MOVFF  D4,DC
3E8C:  MOVFF  D3,DB
3E90:  CLRF   xDF
3E92:  RCALL  3742
....................       lcd_gotoxy(1,4); 
3E94:  MOVLW  01
3E96:  MOVWF  xE9
3E98:  MOVLW  04
3E9A:  MOVWF  xEA
3E9C:  CALL   0C20
....................       printf(lcd_putc,"Ajuste1= %2.1f ",Ajuste1); 
3EA0:  MOVLW  B4
3EA2:  MOVWF  FF6
3EA4:  MOVLW  04
3EA6:  MOVWF  FF7
3EA8:  MOVLW  09
3EAA:  MOVWF  xDB
3EAC:  CALL   1B6A
3EB0:  MOVLW  01
3EB2:  MOVWF  FE9
3EB4:  MOVFF  9D,DE
3EB8:  MOVFF  9C,DD
3EBC:  MOVFF  9B,DC
3EC0:  MOVFF  9A,DB
3EC4:  MOVWF  xDF
3EC6:  RCALL  3742
3EC8:  MOVLW  20
3ECA:  MOVWF  xE8
3ECC:  CALL   0C92
....................        
....................       if(Ajuste1>30.0) 
3ED0:  CLRF   xDA
3ED2:  CLRF   xD9
3ED4:  MOVLW  70
3ED6:  MOVWF  xD8
3ED8:  MOVLW  83
3EDA:  MOVWF  xD7
3EDC:  MOVFF  9D,DE
3EE0:  MOVFF  9C,DD
3EE4:  MOVFF  9B,DC
3EE8:  MOVFF  9A,DB
3EEC:  CALL   1540
3EF0:  BNC   3EFA
....................          Ajuste1=0.0; 
3EF2:  CLRF   x9D
3EF4:  CLRF   x9C
3EF6:  CLRF   x9B
3EF8:  CLRF   x9A
....................           
....................       if(Ajuste1<0.0) 
3EFA:  MOVFF  9D,DA
3EFE:  MOVFF  9C,D9
3F02:  MOVFF  9B,D8
3F06:  MOVFF  9A,D7
3F0A:  CLRF   xDE
3F0C:  CLRF   xDD
3F0E:  CLRF   xDC
3F10:  CLRF   xDB
3F12:  CALL   1540
3F16:  BNC   3F20
....................          {Ajuste1=0.0;} 
3F18:  CLRF   x9D
3F1A:  CLRF   x9C
3F1C:  CLRF   x9B
3F1E:  CLRF   x9A
....................        
....................       if(UP){//Si oprime hacia arriba 
3F20:  BSF    F92.5
3F22:  BTFSC  F80.5
3F24:  BRA    3F6A
....................          delay_ms(50); 
3F26:  MOVLW  32
3F28:  MOVWF  xE9
3F2A:  CALL   0B20
....................          if(UP){ 
3F2E:  BSF    F92.5
3F30:  BTFSC  F80.5
3F32:  BRA    3F6A
....................             Ajuste1+=0.1; 
3F34:  BCF    FD8.1
3F36:  MOVFF  9D,DD
3F3A:  MOVFF  9C,DC
3F3E:  MOVFF  9B,DB
3F42:  MOVFF  9A,DA
3F46:  MOVLW  CD
3F48:  MOVWF  xE1
3F4A:  MOVLW  CC
3F4C:  MOVWF  xE0
3F4E:  MOVLW  4C
3F50:  MOVWF  xDF
3F52:  MOVLW  7B
3F54:  MOVWF  xDE
3F56:  CALL   0ECA
3F5A:  MOVFF  03,9D
3F5E:  MOVFF  02,9C
3F62:  MOVFF  01,9B
3F66:  MOVFF  00,9A
....................          } 
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3F6A:  BSF    F96.0
3F6C:  BTFSC  F84.0
3F6E:  BRA    3FB4
....................          delay_ms(50); 
3F70:  MOVLW  32
3F72:  MOVWF  xE9
3F74:  CALL   0B20
....................          if(DOWN){ 
3F78:  BSF    F96.0
3F7A:  BTFSC  F84.0
3F7C:  BRA    3FB4
....................             Ajuste1-=0.1; 
3F7E:  BSF    FD8.1
3F80:  MOVFF  9D,DD
3F84:  MOVFF  9C,DC
3F88:  MOVFF  9B,DB
3F8C:  MOVFF  9A,DA
3F90:  MOVLW  CD
3F92:  MOVWF  xE1
3F94:  MOVLW  CC
3F96:  MOVWF  xE0
3F98:  MOVLW  4C
3F9A:  MOVWF  xDF
3F9C:  MOVLW  7B
3F9E:  MOVWF  xDE
3FA0:  CALL   0ECA
3FA4:  MOVFF  03,9D
3FA8:  MOVFF  02,9C
3FAC:  MOVFF  01,9B
3FB0:  MOVFF  00,9A
....................          } 
....................       } 
....................        
....................       if(RIGHT){// Si oprime derecha 
3FB4:  BSF    F96.1
3FB6:  BTFSC  F84.1
3FB8:  BRA    4106
....................          delay_ms(20); 
3FBA:  MOVLW  14
3FBC:  MOVWF  xE9
3FBE:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
3FC2:  BSF    F96.1
3FC4:  BTFSC  F84.1
3FC6:  BRA    4104
3FC8:  BTFSC  42.5
3FCA:  BRA    4104
....................             /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3FCC:  MOVLW  01
3FCE:  MOVWF  1C
3FD0:  CLRF   44
3FD2:  MOVLW  02
3FD4:  MOVWF  1F
3FD6:  MOVWF  21
3FD8:  MOVLW  0B
3FDA:  MOVWF  1E
3FDC:  MOVLW  1E
3FDE:  MOVWF  xE9
3FE0:  CALL   0B20
3FE4:  MOVLW  0C
3FE6:  MOVWF  xE8
3FE8:  CALL   0C92
....................             Temporal=Ajuste1; 
3FEC:  MOVFF  9D,89
3FF0:  MOVFF  9C,88
3FF4:  MOVFF  9B,87
3FF8:  MOVFF  9A,86
....................             Entero=(int)Ajuste1; 
3FFC:  MOVFF  9D,D6
4000:  MOVFF  9C,D5
4004:  MOVFF  9B,D4
4008:  MOVFF  9A,D3
400C:  RCALL  391E
400E:  MOVFF  01,28
....................             Temporal=Temporal-Entero; 
4012:  CLRF   xE1
4014:  MOVFF  28,E0
4018:  CALL   0D3A
401C:  BSF    FD8.1
401E:  MOVFF  89,DD
4022:  MOVFF  88,DC
4026:  MOVFF  87,DB
402A:  MOVFF  86,DA
402E:  MOVFF  03,E1
4032:  MOVFF  02,E0
4036:  MOVFF  01,DF
403A:  MOVFF  00,DE
403E:  CALL   0ECA
4042:  MOVFF  03,89
4046:  MOVFF  02,88
404A:  MOVFF  01,87
404E:  MOVFF  00,86
....................             Temporal2=Temporal*10.0; 
4052:  MOVFF  89,EB
4056:  MOVFF  88,EA
405A:  MOVFF  87,E9
405E:  MOVFF  86,E8
4062:  CLRF   xEF
4064:  CLRF   xEE
4066:  MOVLW  20
4068:  MOVWF  xED
406A:  MOVLW  82
406C:  MOVWF  xEC
406E:  CALL   3596
4072:  MOVFF  03,8D
4076:  MOVFF  02,8C
407A:  MOVFF  01,8B
407E:  MOVFF  00,8A
....................             Decimal1=(int8)Temporal2; 
4082:  MOVFF  8D,D6
4086:  MOVFF  8C,D5
408A:  MOVFF  8B,D4
408E:  MOVFF  8A,D3
4092:  RCALL  391E
4094:  MOVFF  01,29
....................             write_eeprom(25,Entero);delay_ms(20); 
4098:  MOVLW  19
409A:  MOVWF  FA9
409C:  MOVFF  28,FA8
40A0:  BCF    FA6.6
40A2:  BCF    FA6.7
40A4:  BSF    FA6.2
40A6:  MOVF   FF2,W
40A8:  MOVWF  00
40AA:  BCF    FF2.7
40AC:  MOVLB  F
40AE:  MOVLW  55
40B0:  MOVWF  FA7
40B2:  MOVLW  AA
40B4:  MOVWF  FA7
40B6:  BSF    FA6.1
40B8:  BTFSC  FA6.1
40BA:  BRA    40B8
40BC:  BCF    FA6.2
40BE:  MOVF   00,W
40C0:  IORWF  FF2,F
40C2:  MOVLW  14
40C4:  MOVLB  0
40C6:  MOVWF  xE9
40C8:  CALL   0B20
....................             write_eeprom(26,Decimal1);delay_ms(20); 
40CC:  MOVLW  1A
40CE:  MOVWF  FA9
40D0:  MOVFF  29,FA8
40D4:  BCF    FA6.6
40D6:  BCF    FA6.7
40D8:  BSF    FA6.2
40DA:  MOVF   FF2,W
40DC:  MOVWF  00
40DE:  BCF    FF2.7
40E0:  MOVLB  F
40E2:  MOVLW  55
40E4:  MOVWF  FA7
40E6:  MOVLW  AA
40E8:  MOVWF  FA7
40EA:  BSF    FA6.1
40EC:  BTFSC  FA6.1
40EE:  BRA    40EC
40F0:  BCF    FA6.2
40F2:  MOVF   00,W
40F4:  IORWF  FF2,F
40F6:  MOVLW  14
40F8:  MOVLB  0
40FA:  MOVWF  xE9
40FC:  CALL   0B20
....................             MensajeGuardado(); 
4100:  CALL   26DC
....................          } 
....................       }else{ 
4104:  BRA    4108
....................          Flanco1 = 0; 
4106:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
4108:  BSF    F96.2
410A:  BTFSC  F84.2
410C:  BRA    414A
....................          delay_ms(20); 
410E:  MOVLW  14
4110:  MOVWF  xE9
4112:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
4116:  BSF    F96.2
4118:  BTFSC  F84.2
411A:  BRA    4148
411C:  BTFSC  42.7
411E:  BRA    4148
....................             /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4120:  MOVLW  01
4122:  MOVWF  1C
4124:  CLRF   44
4126:  MOVLW  02
4128:  MOVWF  1F
412A:  MOVWF  21
412C:  MOVLW  0B
412E:  MOVWF  1E
4130:  MOVLW  02
4132:  MOVWF  xD3
4134:  MOVLW  FA
4136:  MOVWF  xE9
4138:  CALL   0B20
413C:  DECFSZ xD3,F
413E:  BRA    4134
4140:  MOVLW  0C
4142:  MOVWF  xE8
4144:  CALL   0C92
....................          } 
....................       }else{ 
4148:  BRA    414C
....................          Flanco3 = 0; 
414A:  BCF    42.7
....................       } 
.................... } 
414C:  GOTO   4FA2 (RETURN)
....................  
.................... void MenuModo(){ 
....................    lcd_gotoxy(1,1); 
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
....................  
....................    lcd_gotoxy(1,4); 
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
....................        
....................          if(UP && DOWN){ 
....................             delay_ms(20); 
....................             if(UP && DOWN){ 
....................                ModoAuto=0; 
....................                ModoManual=1; 
....................                ModoSemi=0; 
....................                Automa=10; 
....................                Semi=10; 
....................                Manual=20; 
....................             } 
....................          } 
....................           
....................          if(DOWN && RIGHT){ 
....................             delay_ms(20); 
....................             if(DOWN && RIGHT){ 
....................                ModoAuto=1; 
....................                ModoManual=0; 
....................                ModoSemi=0; 
....................                Automa=20; 
....................                Semi=10; 
....................                Manual=10; 
....................             } 
....................          } 
....................           
....................          if(UP && RIGHT){ 
....................             delay_ms(20); 
....................             if(UP && RIGHT){ 
....................                ModoAuto=0; 
....................                ModoManual=0; 
....................                ModoSemi=1; 
....................                Automa=10; 
....................                Semi=20; 
....................                Manual=10; 
....................             } 
....................          } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Manual  "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................          
....................       if(ModoAuto == 1 || Automa==20) 
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Auto   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"    Seleccionado    "); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                ModoSemi=0;ModoAuto=0;ModoManual=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(13,tmp);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"   Modo Semi   "); 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"  Ajuste Valor    "); 
....................          if(UP){ 
....................             delay_ms(20); 
....................             if(UP) 
....................                tmp++; 
....................          } 
....................           
....................          if(DOWN){ 
....................             delay_ms(20); 
....................             if(DOWN) 
....................                tmp--; 
....................          } 
....................           
....................          ValorSemi=tmp; 
....................          ajustar_damper(tmp); 
....................          if(LEFT) 
....................          { 
....................             delay_ms(20); 
....................             if(LEFT){ 
....................                write_eeprom(13,tmp);delay_ms(20);ModoSemi=0;ModoAuto=0;ModoManual=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
....................                write_eeprom(12,Semi);delay_ms(20); 
....................                write_eeprom(11,Automa);delay_ms(20); 
....................                write_eeprom(10,Manual);delay_ms(20); 
....................                MensajeGuardado(); 
....................                Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
....................             } 
....................          }  
....................       }  
.................... } 
....................  
.................... void MenuTiempoPurga(){ 
....................    lcd_gotoxy(1,1); 
*
2CE8:  MOVLW  01
2CEA:  MOVWF  xE9
2CEC:  MOVWF  xEA
2CEE:  CALL   0C20
....................       printf(lcd_putc,"     Tiempo  de      "); 
2CF2:  MOVLW  66
2CF4:  MOVWF  FF6
2CF6:  MOVLW  05
2CF8:  MOVWF  FF7
2CFA:  CALL   1B48
....................       lcd_gotoxy(1,2); 
2CFE:  MOVLW  01
2D00:  MOVWF  xE9
2D02:  MOVLW  02
2D04:  MOVWF  xEA
2D06:  CALL   0C20
....................       printf(lcd_putc,"       Purga         "); 
2D0A:  MOVLW  7C
2D0C:  MOVWF  FF6
2D0E:  MOVLW  05
2D10:  MOVWF  FF7
2D12:  CALL   1B48
....................       lcd_gotoxy(6,3); 
2D16:  MOVLW  06
2D18:  MOVWF  xE9
2D1A:  MOVLW  03
2D1C:  MOVWF  xEA
2D1E:  CALL   0C20
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",purga_minutos_pro,purga_segundos_pro);  
2D22:  MOVFF  27,DA
2D26:  MOVLW  01
2D28:  MOVWF  xDB
2D2A:  CALL   1BB2
2D2E:  MOVLW  3A
2D30:  MOVWF  xE8
2D32:  CALL   0C92
2D36:  MOVFF  3B,DA
2D3A:  MOVLW  01
2D3C:  MOVWF  xDB
2D3E:  CALL   1BB2
2D42:  MOVLW  9B
2D44:  MOVWF  FF6
2D46:  MOVLW  05
2D48:  MOVWF  FF7
2D4A:  MOVLW  08
2D4C:  MOVWF  xDB
2D4E:  CALL   1B6A
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2D52:  MOVLW  06
2D54:  ADDWF  25,W
2D56:  MOVWF  xD3
2D58:  MOVWF  xE9
2D5A:  MOVLW  04
2D5C:  MOVWF  xEA
2D5E:  CALL   0C20
....................       lcd_putc(t[2]); 
2D62:  MOVFF  47,E8
2D66:  CALL   0C92
....................        
....................       if(unidad2<1) 
2D6A:  MOVF   25,F
2D6C:  BNZ   2D72
....................          unidad2=1; 
2D6E:  MOVLW  01
2D70:  MOVWF  25
....................       if(unidad2>3) 
2D72:  MOVF   25,W
2D74:  SUBLW  03
2D76:  BC    2D7C
....................          unidad2=3;    
2D78:  MOVLW  03
2D7A:  MOVWF  25
....................        
....................       if(UP){ 
2D7C:  BSF    F92.5
2D7E:  BTFSC  F80.5
2D80:  BRA    2DBC
....................          if(unidad2==1){ 
2D82:  DECFSZ 25,W
2D84:  BRA    2D9E
....................             if(purga_minutos_pro<61){ 
2D86:  MOVF   27,W
2D88:  SUBLW  3C
2D8A:  BNC   2D9E
....................                purga_minutos_pro++;delay_ms(300); 
2D8C:  INCF   27,F
2D8E:  MOVLW  02
2D90:  MOVWF  xD3
2D92:  MOVLW  96
2D94:  MOVWF  xE9
2D96:  CALL   0B20
2D9A:  DECFSZ xD3,F
2D9C:  BRA    2D92
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
2D9E:  MOVF   25,W
2DA0:  SUBLW  03
2DA2:  BNZ   2DBC
....................             if(purga_segundos_pro<60){ 
2DA4:  MOVF   3B,W
2DA6:  SUBLW  3B
2DA8:  BNC   2DBC
....................                purga_segundos_pro++;delay_ms(300); 
2DAA:  INCF   3B,F
2DAC:  MOVLW  02
2DAE:  MOVWF  xD3
2DB0:  MOVLW  96
2DB2:  MOVWF  xE9
2DB4:  CALL   0B20
2DB8:  DECFSZ xD3,F
2DBA:  BRA    2DB0
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN){ 
2DBC:  BSF    F96.0
2DBE:  BTFSC  F84.0
2DC0:  BRA    2E2E
....................          if(unidad2==1){ 
2DC2:  DECFSZ 25,W
2DC4:  BRA    2DF8
....................             if(purga_minutos_pro>1){ 
2DC6:  MOVF   27,W
2DC8:  SUBLW  01
2DCA:  BC    2DDE
....................                purga_minutos_pro--;delay_ms(300); 
2DCC:  DECF   27,F
2DCE:  MOVLW  02
2DD0:  MOVWF  xD3
2DD2:  MOVLW  96
2DD4:  MOVWF  xE9
2DD6:  CALL   0B20
2DDA:  DECFSZ xD3,F
2DDC:  BRA    2DD2
....................             } 
....................              
....................             if(purga_minutos_pro>60){ 
2DDE:  MOVF   27,W
2DE0:  SUBLW  3C
2DE2:  BC    2DF8
....................                purga_minutos_pro=60;delay_ms(300); 
2DE4:  MOVLW  3C
2DE6:  MOVWF  27
2DE8:  MOVLW  02
2DEA:  MOVWF  xD3
2DEC:  MOVLW  96
2DEE:  MOVWF  xE9
2DF0:  CALL   0B20
2DF4:  DECFSZ xD3,F
2DF6:  BRA    2DEC
....................             } 
....................          } 
....................           
....................          if(unidad2==3){ 
2DF8:  MOVF   25,W
2DFA:  SUBLW  03
2DFC:  BNZ   2E2E
....................             if(purga_segundos_pro>0){ 
2DFE:  MOVF   3B,F
2E00:  BZ    2E14
....................                purga_segundos_pro--;delay_ms(300); 
2E02:  DECF   3B,F
2E04:  MOVLW  02
2E06:  MOVWF  xD3
2E08:  MOVLW  96
2E0A:  MOVWF  xE9
2E0C:  CALL   0B20
2E10:  DECFSZ xD3,F
2E12:  BRA    2E08
....................             } 
....................              
....................             if(purga_segundos_pro>59){ 
2E14:  MOVF   3B,W
2E16:  SUBLW  3B
2E18:  BC    2E2E
....................                purga_segundos_pro=59;delay_ms(300); 
2E1A:  MOVLW  3B
2E1C:  MOVWF  3B
2E1E:  MOVLW  02
2E20:  MOVWF  xD3
2E22:  MOVLW  96
2E24:  MOVWF  xE9
2E26:  CALL   0B20
2E2A:  DECFSZ xD3,F
2E2C:  BRA    2E22
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT){ 
2E2E:  BSF    F96.1
2E30:  BTFSC  F84.1
2E32:  BRA    2E66
....................          if(unidad2==1){ 
2E34:  DECFSZ 25,W
2E36:  BRA    2E3E
....................             unidad2=3; 
2E38:  MOVLW  03
2E3A:  MOVWF  25
....................          }else{ 
2E3C:  BRA    2E4E
....................             if(unidad2==3){ 
2E3E:  MOVF   25,W
2E40:  SUBLW  03
2E42:  BNZ   2E4A
....................                unidad2=1; 
2E44:  MOVLW  01
2E46:  MOVWF  25
....................             }else{ 
2E48:  BRA    2E4E
....................                unidad2=3; 
2E4A:  MOVLW  03
2E4C:  MOVWF  25
....................             } 
....................          } 
....................          delay_ms(500); 
2E4E:  MOVLW  02
2E50:  MOVWF  xD3
2E52:  MOVLW  FA
2E54:  MOVWF  xE9
2E56:  CALL   0B20
2E5A:  DECFSZ xD3,F
2E5C:  BRA    2E52
....................          printf(lcd_putc,"\f"); 
2E5E:  MOVLW  0C
2E60:  MOVWF  xE8
2E62:  CALL   0C92
....................       } 
....................        
....................       if(LEFT) 
2E66:  BSF    F96.2
2E68:  BTFSC  F84.2
2E6A:  BRA    2F48
....................       { 
....................          delay_ms(200); 
2E6C:  MOVLW  C8
2E6E:  MOVWF  xE9
2E70:  CALL   0B20
....................          printf(lcd_putc,"\f"); 
2E74:  MOVLW  0C
2E76:  MOVWF  xE8
2E78:  CALL   0C92
....................          lcd_gotoxy(1,2); 
2E7C:  MOVLW  01
2E7E:  MOVWF  xE9
2E80:  MOVLW  02
2E82:  MOVWF  xEA
2E84:  CALL   0C20
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2E88:  MOVLW  A4
2E8A:  MOVWF  FF6
2E8C:  MOVLW  05
2E8E:  MOVWF  FF7
2E90:  CALL   1B48
....................          lcd_gotoxy(1,3); 
2E94:  MOVLW  01
2E96:  MOVWF  xE9
2E98:  MOVLW  03
2E9A:  MOVWF  xEA
2E9C:  CALL   0C20
....................          printf(lcd_putc,"  Correctamente  "); 
2EA0:  MOVLW  B6
2EA2:  MOVWF  FF6
2EA4:  MOVLW  05
2EA6:  MOVWF  FF7
2EA8:  CALL   1B48
....................          write_eeprom(20,purga_minutos_pro);delay_ms(30); 
2EAC:  MOVLW  14
2EAE:  MOVWF  FA9
2EB0:  MOVFF  27,FA8
2EB4:  BCF    FA6.6
2EB6:  BCF    FA6.7
2EB8:  BSF    FA6.2
2EBA:  MOVF   FF2,W
2EBC:  MOVWF  00
2EBE:  BCF    FF2.7
2EC0:  MOVLB  F
2EC2:  MOVLW  55
2EC4:  MOVWF  FA7
2EC6:  MOVLW  AA
2EC8:  MOVWF  FA7
2ECA:  BSF    FA6.1
2ECC:  BTFSC  FA6.1
2ECE:  BRA    2ECC
2ED0:  BCF    FA6.2
2ED2:  MOVF   00,W
2ED4:  IORWF  FF2,F
2ED6:  MOVLW  1E
2ED8:  MOVLB  0
2EDA:  MOVWF  xE9
2EDC:  CALL   0B20
....................          write_eeprom(21,purga_segundos_pro);delay_ms(30); 
2EE0:  MOVLW  15
2EE2:  MOVWF  FA9
2EE4:  MOVFF  3B,FA8
2EE8:  BCF    FA6.6
2EEA:  BCF    FA6.7
2EEC:  BSF    FA6.2
2EEE:  MOVF   FF2,W
2EF0:  MOVWF  00
2EF2:  BCF    FF2.7
2EF4:  MOVLB  F
2EF6:  MOVLW  55
2EF8:  MOVWF  FA7
2EFA:  MOVLW  AA
2EFC:  MOVWF  FA7
2EFE:  BSF    FA6.1
2F00:  BTFSC  FA6.1
2F02:  BRA    2F00
2F04:  BCF    FA6.2
2F06:  MOVF   00,W
2F08:  IORWF  FF2,F
2F0A:  MOVLW  1E
2F0C:  MOVLB  0
2F0E:  MOVWF  xE9
2F10:  CALL   0B20
....................          purga_minutos=purga_minutos_pro;purga_segundos=purga_segundos_pro; 
2F14:  MOVFF  27,26
2F18:  MOVFF  3B,3A
....................          delay_ms(700); 
2F1C:  MOVLW  04
2F1E:  MOVWF  xD3
2F20:  MOVLW  AF
2F22:  MOVWF  xE9
2F24:  CALL   0B20
2F28:  DECFSZ xD3,F
2F2A:  BRA    2F20
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2F2C:  MOVLW  1E
2F2E:  MOVWF  xE9
2F30:  CALL   0B20
2F34:  MOVLW  01
2F36:  MOVWF  1C
2F38:  CLRF   44
2F3A:  MOVLW  02
2F3C:  MOVWF  1F
2F3E:  MOVWF  21
2F40:  MOVLW  0C
2F42:  MOVWF  xE8
2F44:  CALL   0C92
....................       }   
.................... } 
2F48:  GOTO   4F3C (RETURN)
....................  
.................... void MenuTiempoPostPurga(){ 
....................    lcd_gotoxy(1,1); 
2F4C:  MOVLW  01
2F4E:  MOVWF  xE9
2F50:  MOVWF  xEA
2F52:  CALL   0C20
....................       printf(lcd_putc,"     Tiempo  de      "); 
2F56:  MOVLW  C8
2F58:  MOVWF  FF6
2F5A:  MOVLW  05
2F5C:  MOVWF  FF7
2F5E:  CALL   1B48
....................       lcd_gotoxy(1,2); 
2F62:  MOVLW  01
2F64:  MOVWF  xE9
2F66:  MOVLW  02
2F68:  MOVWF  xEA
2F6A:  CALL   0C20
....................       printf(lcd_putc,"     Post-Purga      "); 
2F6E:  MOVLW  DE
2F70:  MOVWF  FF6
2F72:  MOVLW  05
2F74:  MOVWF  FF7
2F76:  CALL   1B48
....................       lcd_gotoxy(6,3); 
2F7A:  MOVLW  06
2F7C:  MOVWF  xE9
2F7E:  MOVLW  03
2F80:  MOVWF  xEA
2F82:  CALL   0C20
....................       printf(lcd_putc,"%02u:%02u (M:S)  ",ppurga_minutos_pro,ppurga_segundos_pro);  
2F86:  MOVFF  3F,DA
2F8A:  MOVLW  01
2F8C:  MOVWF  xDB
2F8E:  CALL   1BB2
2F92:  MOVLW  3A
2F94:  MOVWF  xE8
2F96:  CALL   0C92
2F9A:  MOVFF  3D,DA
2F9E:  MOVLW  01
2FA0:  MOVWF  xDB
2FA2:  CALL   1BB2
2FA6:  MOVLW  FD
2FA8:  MOVWF  FF6
2FAA:  MOVLW  05
2FAC:  MOVWF  FF7
2FAE:  MOVLW  08
2FB0:  MOVWF  xDB
2FB2:  CALL   1B6A
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2FB6:  MOVLW  06
2FB8:  ADDWF  25,W
2FBA:  MOVWF  xD3
2FBC:  MOVWF  xE9
2FBE:  MOVLW  04
2FC0:  MOVWF  xEA
2FC2:  CALL   0C20
....................       lcd_putc(t[2]); 
2FC6:  MOVFF  47,E8
2FCA:  CALL   0C92
....................       if(unidad2<1) 
2FCE:  MOVF   25,F
2FD0:  BNZ   2FD6
....................          unidad2=1; 
2FD2:  MOVLW  01
2FD4:  MOVWF  25
....................       if(unidad2>3) 
2FD6:  MOVF   25,W
2FD8:  SUBLW  03
2FDA:  BC    2FE0
....................          unidad2=3;    
2FDC:  MOVLW  03
2FDE:  MOVWF  25
....................        
....................       if(UP) 
2FE0:  BSF    F92.5
2FE2:  BTFSC  F80.5
2FE4:  BRA    3020
....................       { 
....................          if(unidad2==1) 
2FE6:  DECFSZ 25,W
2FE8:  BRA    3002
....................          { 
....................             if(ppurga_minutos_pro<61) 
2FEA:  MOVF   3F,W
2FEC:  SUBLW  3C
2FEE:  BNC   3002
....................             { 
....................                ppurga_minutos_pro++;delay_ms(300); 
2FF0:  INCF   3F,F
2FF2:  MOVLW  02
2FF4:  MOVWF  xD3
2FF6:  MOVLW  96
2FF8:  MOVWF  xE9
2FFA:  CALL   0B20
2FFE:  DECFSZ xD3,F
3000:  BRA    2FF6
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
3002:  MOVF   25,W
3004:  SUBLW  03
3006:  BNZ   3020
....................          { 
....................             if(ppurga_segundos_pro<60) 
3008:  MOVF   3D,W
300A:  SUBLW  3B
300C:  BNC   3020
....................             { 
....................                ppurga_segundos_pro++;delay_ms(300); 
300E:  INCF   3D,F
3010:  MOVLW  02
3012:  MOVWF  xD3
3014:  MOVLW  96
3016:  MOVWF  xE9
3018:  CALL   0B20
301C:  DECFSZ xD3,F
301E:  BRA    3014
....................             } 
....................          } 
....................       } 
....................        
....................       if(DOWN) 
3020:  BSF    F96.0
3022:  BTFSC  F84.0
3024:  BRA    3092
....................       { 
....................          if(unidad2==1) 
3026:  DECFSZ 25,W
3028:  BRA    305C
....................          { 
....................             if(ppurga_minutos_pro>1) 
302A:  MOVF   3F,W
302C:  SUBLW  01
302E:  BC    3042
....................             { 
....................                ppurga_minutos_pro--;delay_ms(300); 
3030:  DECF   3F,F
3032:  MOVLW  02
3034:  MOVWF  xD3
3036:  MOVLW  96
3038:  MOVWF  xE9
303A:  CALL   0B20
303E:  DECFSZ xD3,F
3040:  BRA    3036
....................             } 
....................              
....................             if(ppurga_minutos_pro>60) 
3042:  MOVF   3F,W
3044:  SUBLW  3C
3046:  BC    305C
....................             { 
....................                ppurga_minutos_pro=60;delay_ms(300); 
3048:  MOVLW  3C
304A:  MOVWF  3F
304C:  MOVLW  02
304E:  MOVWF  xD3
3050:  MOVLW  96
3052:  MOVWF  xE9
3054:  CALL   0B20
3058:  DECFSZ xD3,F
305A:  BRA    3050
....................             } 
....................          } 
....................           
....................          if(unidad2==3) 
305C:  MOVF   25,W
305E:  SUBLW  03
3060:  BNZ   3092
....................          { 
....................             if(ppurga_segundos_pro>0) 
3062:  MOVF   3D,F
3064:  BZ    3078
....................             { 
....................                ppurga_segundos_pro--;delay_ms(300); 
3066:  DECF   3D,F
3068:  MOVLW  02
306A:  MOVWF  xD3
306C:  MOVLW  96
306E:  MOVWF  xE9
3070:  CALL   0B20
3074:  DECFSZ xD3,F
3076:  BRA    306C
....................             } 
....................              
....................             if(ppurga_segundos_pro>59) 
3078:  MOVF   3D,W
307A:  SUBLW  3B
307C:  BC    3092
....................             { 
....................                ppurga_segundos_pro=59;delay_ms(300); 
307E:  MOVLW  3B
3080:  MOVWF  3D
3082:  MOVLW  02
3084:  MOVWF  xD3
3086:  MOVLW  96
3088:  MOVWF  xE9
308A:  CALL   0B20
308E:  DECFSZ xD3,F
3090:  BRA    3086
....................             } 
....................          } 
....................       } 
....................        
....................       if(RIGHT) 
3092:  BSF    F96.1
3094:  BTFSC  F84.1
3096:  BRA    30C4
....................       { 
....................          if(unidad2==1) 
3098:  DECFSZ 25,W
309A:  BRA    30A2
....................          { 
....................             unidad2=3; 
309C:  MOVLW  03
309E:  MOVWF  25
....................          } 
....................          else 
30A0:  BRA    30AC
....................          { 
....................             if(unidad2==3) 
30A2:  MOVF   25,W
30A4:  SUBLW  03
30A6:  BNZ   30AC
....................             { 
....................                unidad2=1; 
30A8:  MOVLW  01
30AA:  MOVWF  25
....................             } 
....................          } 
....................          delay_ms(500); 
30AC:  MOVLW  02
30AE:  MOVWF  xD3
30B0:  MOVLW  FA
30B2:  MOVWF  xE9
30B4:  CALL   0B20
30B8:  DECFSZ xD3,F
30BA:  BRA    30B0
....................          printf(lcd_putc,"\f"); 
30BC:  MOVLW  0C
30BE:  MOVWF  xE8
30C0:  CALL   0C92
....................       } 
....................        
....................       if(LEFT) 
30C4:  BSF    F96.2
30C6:  BTFSC  F84.2
30C8:  BRA    31A6
....................       { 
....................          delay_ms(200); 
30CA:  MOVLW  C8
30CC:  MOVWF  xE9
30CE:  CALL   0B20
....................          printf(lcd_putc,"\f"); 
30D2:  MOVLW  0C
30D4:  MOVWF  xE8
30D6:  CALL   0C92
....................          lcd_gotoxy(1,2); 
30DA:  MOVLW  01
30DC:  MOVWF  xE9
30DE:  MOVLW  02
30E0:  MOVWF  xEA
30E2:  CALL   0C20
....................          printf(lcd_putc,"Tiempo Almacenado"); 
30E6:  MOVLW  06
30E8:  MOVWF  FF6
30EA:  MOVLW  06
30EC:  MOVWF  FF7
30EE:  CALL   1B48
....................          lcd_gotoxy(1,3); 
30F2:  MOVLW  01
30F4:  MOVWF  xE9
30F6:  MOVLW  03
30F8:  MOVWF  xEA
30FA:  CALL   0C20
....................          printf(lcd_putc,"  Correctamente  "); 
30FE:  MOVLW  18
3100:  MOVWF  FF6
3102:  MOVLW  06
3104:  MOVWF  FF7
3106:  CALL   1B48
....................          write_eeprom(22,ppurga_minutos_pro);delay_ms(20); 
310A:  MOVLW  16
310C:  MOVWF  FA9
310E:  MOVFF  3F,FA8
3112:  BCF    FA6.6
3114:  BCF    FA6.7
3116:  BSF    FA6.2
3118:  MOVF   FF2,W
311A:  MOVWF  00
311C:  BCF    FF2.7
311E:  MOVLB  F
3120:  MOVLW  55
3122:  MOVWF  FA7
3124:  MOVLW  AA
3126:  MOVWF  FA7
3128:  BSF    FA6.1
312A:  BTFSC  FA6.1
312C:  BRA    312A
312E:  BCF    FA6.2
3130:  MOVF   00,W
3132:  IORWF  FF2,F
3134:  MOVLW  14
3136:  MOVLB  0
3138:  MOVWF  xE9
313A:  CALL   0B20
....................          write_eeprom(23,ppurga_segundos_pro);delay_ms(20); 
313E:  MOVLW  17
3140:  MOVWF  FA9
3142:  MOVFF  3D,FA8
3146:  BCF    FA6.6
3148:  BCF    FA6.7
314A:  BSF    FA6.2
314C:  MOVF   FF2,W
314E:  MOVWF  00
3150:  BCF    FF2.7
3152:  MOVLB  F
3154:  MOVLW  55
3156:  MOVWF  FA7
3158:  MOVLW  AA
315A:  MOVWF  FA7
315C:  BSF    FA6.1
315E:  BTFSC  FA6.1
3160:  BRA    315E
3162:  BCF    FA6.2
3164:  MOVF   00,W
3166:  IORWF  FF2,F
3168:  MOVLW  14
316A:  MOVLB  0
316C:  MOVWF  xE9
316E:  CALL   0B20
....................          ppurga_minutos=ppurga_minutos_pro;ppurga_segundos=ppurga_segundos_pro; 
3172:  MOVFF  3F,3E
3176:  MOVFF  3D,3C
....................          delay_ms(700); 
317A:  MOVLW  04
317C:  MOVWF  xD3
317E:  MOVLW  AF
3180:  MOVWF  xE9
3182:  CALL   0B20
3186:  DECFSZ xD3,F
3188:  BRA    317E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
318A:  MOVLW  1E
318C:  MOVWF  xE9
318E:  CALL   0B20
3192:  MOVLW  01
3194:  MOVWF  1C
3196:  CLRF   44
3198:  MOVLW  02
319A:  MOVWF  1F
319C:  MOVWF  21
319E:  MOVLW  0C
31A0:  MOVWF  xE8
31A2:  CALL   0C92
....................       }   
.................... } 
31A6:  GOTO   4F46 (RETURN)
....................  
.................... void MenuPostPurga(){ 
....................    lcd_gotoxy(1,1); 
*
4464:  MOVLW  01
4466:  MOVWF  xE9
4468:  MOVWF  xEA
446A:  CALL   0C20
....................       printf(lcd_putc,"    !Post-Purga!    "); 
446E:  MOVLW  2A
4470:  MOVWF  FF6
4472:  MOVLW  06
4474:  MOVWF  FF7
4476:  CALL   1B48
....................       lcd_gotoxy(1,2); 
447A:  MOVLW  01
447C:  MOVWF  xE9
447E:  MOVLW  02
4480:  MOVWF  xEA
4482:  CALL   0C20
....................       printf(lcd_putc,"                    "); 
4486:  MOVLW  40
4488:  MOVWF  FF6
448A:  MOVLW  06
448C:  MOVWF  FF7
448E:  CALL   1B48
....................       lcd_gotoxy(1,3); 
4492:  MOVLW  01
4494:  MOVWF  xE9
4496:  MOVLW  03
4498:  MOVWF  xEA
449A:  CALL   0C20
....................       printf(lcd_putc,"      %02u:%02u  ",ppurga_minutos,ppurga_segundos);  
449E:  MOVLW  56
44A0:  MOVWF  FF6
44A2:  MOVLW  06
44A4:  MOVWF  FF7
44A6:  MOVLW  06
44A8:  MOVWF  xDB
44AA:  CALL   1B6A
44AE:  MOVFF  3E,DA
44B2:  MOVLW  01
44B4:  MOVWF  xDB
44B6:  CALL   1BB2
44BA:  MOVLW  3A
44BC:  MOVWF  xE8
44BE:  CALL   0C92
44C2:  MOVFF  3C,DA
44C6:  MOVLW  01
44C8:  MOVWF  xDB
44CA:  CALL   1BB2
44CE:  MOVLW  20
44D0:  MOVWF  xE8
44D2:  CALL   0C92
44D6:  MOVLW  20
44D8:  MOVWF  xE8
44DA:  CALL   0C92
....................       Motor_on; 
44DE:  BSF    F8A.5
44E0:  BCF    F93.5
....................            
....................       if(Lectura==1) 
44E2:  BTFSS  43.6
44E4:  BRA    4628
....................       { 
....................          Luz_Blanca_off; 
44E6:  BCF    F8A.4
44E8:  BCF    F93.4
....................           
....................          if(sensores(2)<6 && ppurga_segundos==0 && ppurga_minutos==0) 
44EA:  MOVLW  02
44EC:  MOVWF  xDB
44EE:  CALL   38C8
44F2:  MOVFF  00,D3
44F6:  MOVFF  01,D4
44FA:  MOVFF  02,D5
44FE:  MOVFF  03,D6
4502:  MOVFF  03,DA
4506:  MOVFF  02,D9
450A:  MOVFF  01,D8
450E:  MOVFF  00,D7
4512:  CLRF   xDE
4514:  CLRF   xDD
4516:  MOVLW  40
4518:  MOVWF  xDC
451A:  MOVLW  81
451C:  MOVWF  xDB
451E:  CALL   1540
4522:  BTFSS  FD8.0
4524:  BRA    4626
4526:  MOVF   3C,F
4528:  BTFSS  FD8.2
452A:  BRA    4626
452C:  MOVF   3E,F
452E:  BTFSS  FD8.2
4530:  BRA    4626
....................          { 
....................             write_eeprom(70,segundos);delay_ms(20); 
4532:  MOVLW  46
4534:  MOVWF  FA9
4536:  MOVFF  36,FA8
453A:  BCF    FA6.6
453C:  BCF    FA6.7
453E:  BSF    FA6.2
4540:  MOVF   FF2,W
4542:  MOVWF  00
4544:  BCF    FF2.7
4546:  MOVLB  F
4548:  MOVLW  55
454A:  MOVWF  FA7
454C:  MOVLW  AA
454E:  MOVWF  FA7
4550:  BSF    FA6.1
4552:  BTFSC  FA6.1
4554:  BRA    4552
4556:  BCF    FA6.2
4558:  MOVF   00,W
455A:  IORWF  FF2,F
455C:  MOVLW  14
455E:  MOVLB  0
4560:  MOVWF  xE9
4562:  CALL   0B20
....................             write_eeprom(71,minutos);delay_ms(20); 
4566:  MOVLW  47
4568:  MOVWF  FA9
456A:  MOVFF  37,FA8
456E:  BCF    FA6.6
4570:  BCF    FA6.7
4572:  BSF    FA6.2
4574:  MOVF   FF2,W
4576:  MOVWF  00
4578:  BCF    FF2.7
457A:  MOVLB  F
457C:  MOVLW  55
457E:  MOVWF  FA7
4580:  MOVLW  AA
4582:  MOVWF  FA7
4584:  BSF    FA6.1
4586:  BTFSC  FA6.1
4588:  BRA    4586
458A:  BCF    FA6.2
458C:  MOVF   00,W
458E:  IORWF  FF2,F
4590:  MOVLW  14
4592:  MOVLB  0
4594:  MOVWF  xE9
4596:  CALL   0B20
....................             write_eeprom(72,horas);delay_ms(20); 
459A:  MOVLW  48
459C:  MOVWF  FA9
459E:  MOVFF  38,FA8
45A2:  BCF    FA6.6
45A4:  BCF    FA6.7
45A6:  BSF    FA6.2
45A8:  MOVF   FF2,W
45AA:  MOVWF  00
45AC:  BCF    FF2.7
45AE:  MOVLB  F
45B0:  MOVLW  55
45B2:  MOVWF  FA7
45B4:  MOVLW  AA
45B6:  MOVWF  FA7
45B8:  BSF    FA6.1
45BA:  BTFSC  FA6.1
45BC:  BRA    45BA
45BE:  BCF    FA6.2
45C0:  MOVF   00,W
45C2:  IORWF  FF2,F
45C4:  MOVLW  14
45C6:  MOVLB  0
45C8:  MOVWF  xE9
45CA:  CALL   0B20
....................             printf(lcd_putc,"\f"); 
45CE:  MOVLW  0C
45D0:  MOVWF  xE8
45D2:  CALL   0C92
....................             lcd_gotoxy(1,2); 
45D6:  MOVLW  01
45D8:  MOVWF  xE9
45DA:  MOVLW  02
45DC:  MOVWF  xEA
45DE:  CALL   0C20
....................             printf(lcd_putc,"     Proceso      "); 
45E2:  MOVLW  68
45E4:  MOVWF  FF6
45E6:  MOVLW  06
45E8:  MOVWF  FF7
45EA:  CALL   1B48
....................             lcd_gotoxy(1,3); 
45EE:  MOVLW  01
45F0:  MOVWF  xE9
45F2:  MOVLW  03
45F4:  MOVWF  xEA
45F6:  CALL   0C20
....................             printf(lcd_putc,"    Finalizado    "); 
45FA:  MOVLW  7C
45FC:  MOVWF  FF6
45FE:  MOVLW  06
4600:  MOVWF  FF7
4602:  CALL   1B48
....................             delay_ms(2000); 
4606:  MOVLW  08
4608:  MOVWF  xD3
460A:  MOVLW  FA
460C:  MOVWF  xE9
460E:  CALL   0B20
4612:  DECFSZ xD3,F
4614:  BRA    460A
....................             printf(lcd_putc,"\f"); 
4616:  MOVLW  0C
4618:  MOVWF  xE8
461A:  CALL   0C92
....................             #ifdef VARIADOR 
....................             ajuste_vel(tmp); 
461E:  MOVFF  2E,D3
4622:  RCALL  4150
....................             #endif             
....................             reset_cpu(); 
4624:  RESET
....................          } 
....................          Lectura=0; 
4626:  BCF    43.6
....................       } 
.................... }    
4628:  GOTO   52C0 (RETURN)
....................  
.................... void MenuApagado(){ 
....................    lcd_gotoxy(1,1); 
462C:  MOVLW  01
462E:  MOVWF  xE9
4630:  MOVWF  xEA
4632:  CALL   0C20
....................    printf(lcd_putc,"   Desea apagar     "); 
4636:  MOVLW  90
4638:  MOVWF  FF6
463A:  MOVLW  06
463C:  MOVWF  FF7
463E:  CALL   1B48
....................    lcd_gotoxy(1,2); 
4642:  MOVLW  01
4644:  MOVWF  xE9
4646:  MOVLW  02
4648:  MOVWF  xEA
464A:  CALL   0C20
....................    printf(lcd_putc,"     la cabina      "); 
464E:  MOVLW  A6
4650:  MOVWF  FF6
4652:  MOVLW  06
4654:  MOVWF  FF7
4656:  CALL   1B48
....................    lcd_gotoxy(1,3); 
465A:  MOVLW  01
465C:  MOVWF  xE9
465E:  MOVLW  03
4660:  MOVWF  xEA
4662:  CALL   0C20
....................    printf(lcd_putc,"   > Aceptar        "); 
4666:  MOVLW  BC
4668:  MOVWF  FF6
466A:  MOVLW  06
466C:  MOVWF  FF7
466E:  CALL   1B48
....................    lcd_gotoxy(1,4); 
4672:  MOVLW  01
4674:  MOVWF  xE9
4676:  MOVLW  04
4678:  MOVWF  xEA
467A:  CALL   0C20
....................    printf(lcd_putc,"   < Cancelar       "); 
467E:  MOVLW  D2
4680:  MOVWF  FF6
4682:  MOVLW  06
4684:  MOVWF  FF7
4686:  CALL   1B48
....................    
....................     
....................       if(RIGHT){// Si oprime derecha 
468A:  BSF    F96.1
468C:  BTFSC  F84.1
468E:  BRA    46C0
....................          delay_ms(20); 
4690:  MOVLW  14
4692:  MOVWF  xE9
4694:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0){ 
4698:  BSF    F96.1
469A:  BTFSC  F84.1
469C:  BRA    46BE
469E:  BTFSC  42.5
46A0:  BRA    46BE
....................             Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f");tiempo_ppurga=1; 
46A2:  BSF    42.5
46A4:  MOVLW  1E
46A6:  MOVWF  1C
46A8:  MOVFF  24,D3
46AC:  CALL   0B10
46B0:  BCF    F8A.7
46B2:  BCF    F93.7
46B4:  MOVLW  0C
46B6:  MOVWF  xE8
46B8:  CALL   0C92
46BC:  BSF    54.6
....................          } 
....................       }else{ 
46BE:  BRA    46C2
....................          Flanco1 = 0; 
46C0:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
46C2:  BSF    F96.2
46C4:  BTFSC  F84.2
46C6:  BRA    4706
....................          delay_ms(20); 
46C8:  MOVLW  14
46CA:  MOVWF  xE9
46CC:  CALL   0B20
....................          if(LEFT && Flanco3 == 0){ 
46D0:  BSF    F96.2
46D2:  BTFSC  F84.2
46D4:  BRA    4704
46D6:  BTFSC  42.7
46D8:  BRA    4704
....................             Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
46DA:  BSF    42.7
46DC:  MOVLW  14
46DE:  MOVWF  1C
46E0:  CLRF   44
46E2:  MOVLW  02
46E4:  MOVWF  1F
46E6:  MOVWF  21
46E8:  MOVLW  0B
46EA:  MOVWF  1E
46EC:  MOVLW  02
46EE:  MOVWF  xD3
46F0:  MOVLW  FA
46F2:  MOVWF  xE9
46F4:  CALL   0B20
46F8:  DECFSZ xD3,F
46FA:  BRA    46F0
46FC:  MOVLW  0C
46FE:  MOVWF  xE8
4700:  CALL   0C92
....................          } 
....................       }else{ 
4704:  BRA    4708
....................          Flanco3 = 0; 
4706:  BCF    42.7
....................       } 
.................... } 
4708:  GOTO   52CA (RETURN)
....................  
.................... void MenuPurga(){ 
....................    lcd_gotoxy(1,1); 
*
4AE8:  MOVLW  01
4AEA:  MOVWF  xE9
4AEC:  MOVWF  xEA
4AEE:  CALL   0C20
....................       printf(lcd_putc,"      !Purga!       "); 
4AF2:  MOVLW  E8
4AF4:  MOVWF  FF6
4AF6:  MOVLW  06
4AF8:  MOVWF  FF7
4AFA:  CALL   1B48
....................       lcd_gotoxy(1,2); 
4AFE:  MOVLW  01
4B00:  MOVWF  xE9
4B02:  MOVLW  02
4B04:  MOVWF  xEA
4B06:  CALL   0C20
....................       printf(lcd_putc,"                    "); 
4B0A:  MOVLW  FE
4B0C:  MOVWF  FF6
4B0E:  MOVLW  06
4B10:  MOVWF  FF7
4B12:  CALL   1B48
....................       lcd_gotoxy(1,3); 
4B16:  MOVLW  01
4B18:  MOVWF  xE9
4B1A:  MOVLW  03
4B1C:  MOVWF  xEA
4B1E:  CALL   0C20
....................       printf(lcd_putc,"      %02u:%02u   ",purga_minutos,purga_segundos);  
4B22:  MOVLW  14
4B24:  MOVWF  FF6
4B26:  MOVLW  07
4B28:  MOVWF  FF7
4B2A:  MOVLW  06
4B2C:  MOVWF  xDB
4B2E:  CALL   1B6A
4B32:  MOVFF  26,DA
4B36:  MOVLW  01
4B38:  MOVWF  xDB
4B3A:  CALL   1BB2
4B3E:  MOVLW  3A
4B40:  MOVWF  xE8
4B42:  CALL   0C92
4B46:  MOVFF  3A,DA
4B4A:  MOVLW  01
4B4C:  MOVWF  xDB
4B4E:  CALL   1BB2
4B52:  MOVLW  20
4B54:  MOVWF  xE8
4B56:  CALL   0C92
4B5A:  MOVLW  20
4B5C:  MOVWF  xE8
4B5E:  CALL   0C92
4B62:  MOVLW  20
4B64:  MOVWF  xE8
4B66:  CALL   0C92
....................         
....................       if(LEFT){ 
4B6A:  BSF    F96.2
4B6C:  BTFSC  F84.2
4B6E:  BRA    4B8E
....................          delay_ms(1000); 
4B70:  MOVLW  04
4B72:  MOVWF  xD3
4B74:  MOVLW  FA
4B76:  MOVWF  xE9
4B78:  CALL   0B20
4B7C:  DECFSZ xD3,F
4B7E:  BRA    4B74
....................          if(LEFT){ 
4B80:  BSF    F96.2
4B82:  BTFSC  F84.2
4B84:  BRA    4B8E
....................             tiempo_purga=0; 
4B86:  BCF    54.5
....................             EnciendeMotor();//Motor_on; 
4B88:  RCALL  4446
....................             Menu=20; 
4B8A:  MOVLW  14
4B8C:  MOVWF  1C
....................          } 
....................       } 
....................        
....................       #ifdef DAMPER 
....................       controlar_flujo(); 
....................       #endif 
....................        
....................       #ifdef VARIADOR 
....................       ajuste_vel(tmp); 
4B8E:  MOVFF  2E,D3
4B92:  CALL   4150
....................       #endif 
....................       Motor_on; 
4B96:  BSF    F8A.5
4B98:  BCF    F93.5
....................       //EnciendeMotor(); 
....................       Luz_Blanca_off; 
4B9A:  BCF    F8A.4
4B9C:  BCF    F93.4
....................          
....................       if(Lectura==1){ 
4B9E:  BTFSS  43.6
4BA0:  BRA    4BB8
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
4BA2:  MOVFF  2F,D3
4BA6:  RCALL  470C
4BA8:  MOVFF  03,71
4BAC:  MOVFF  02,70
4BB0:  MOVFF  01,6F
4BB4:  MOVFF  00,6E
....................       } 
.................... } 
4BB8:  GOTO   52D2 (RETURN)
....................  
.................... void MenuCambioClave(){ 
....................    lcd_gotoxy(1,1); 
*
2960:  MOVLW  01
2962:  MOVWF  xE9
2964:  MOVWF  xEA
2966:  CALL   0C20
....................       printf(lcd_putc,"     Ingrese        "); 
296A:  MOVLW  28
296C:  MOVWF  FF6
296E:  MOVLW  07
2970:  MOVWF  FF7
2972:  CALL   1B48
....................       lcd_gotoxy(1,2); 
2976:  MOVLW  01
2978:  MOVWF  xE9
297A:  MOVLW  02
297C:  MOVWF  xEA
297E:  CALL   0C20
....................       printf(lcd_putc,"  Contraseña Nueva  "); 
2982:  MOVLW  3E
2984:  MOVWF  FF6
2986:  MOVLW  07
2988:  MOVWF  FF7
298A:  CALL   1B48
....................       lcd_gotoxy(1,3); 
298E:  MOVLW  01
2990:  MOVWF  xE9
2992:  MOVLW  03
2994:  MOVWF  xEA
2996:  CALL   0C20
....................       printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
299A:  MOVLW  54
299C:  MOVWF  FF6
299E:  MOVLW  07
29A0:  MOVWF  FF7
29A2:  MOVLW  0A
29A4:  MOVWF  xDB
29A6:  CALL   1B6A
29AA:  MOVFF  48,D4
29AE:  MOVLW  1F
29B0:  MOVWF  xD5
29B2:  RCALL  288C
29B4:  MOVFF  49,D4
29B8:  MOVLW  1F
29BA:  MOVWF  xD5
29BC:  RCALL  288C
29BE:  MOVFF  4A,D4
29C2:  MOVLW  1F
29C4:  MOVWF  xD5
29C6:  RCALL  288C
29C8:  MOVFF  4B,D4
29CC:  MOVLW  1F
29CE:  MOVWF  xD5
29D0:  RCALL  288C
29D2:  MOVLW  20
29D4:  MOVWF  xE8
29D6:  CALL   0C92
29DA:  MOVLW  20
29DC:  MOVWF  xE8
29DE:  CALL   0C92
....................     
....................        
....................       if(UP){//Si oprime hacia arriba 
29E2:  BSF    F92.5
29E4:  BTFSC  F80.5
29E6:  BRA    2A18
....................          delay_ms(20); 
29E8:  MOVLW  14
29EA:  MOVWF  xE9
29EC:  CALL   0B20
....................          if(UP && Flanco == 0) { 
29F0:  BSF    F92.5
29F2:  BTFSC  F80.5
29F4:  BRA    2A16
29F6:  BTFSC  42.4
29F8:  BRA    2A16
....................             clave[unidad-11]++;Flanco = 1;delay_ms(30); 
29FA:  MOVLW  0B
29FC:  SUBWF  1E,W
29FE:  CLRF   03
2A00:  ADDLW  48
2A02:  MOVWF  FE9
2A04:  MOVLW  00
2A06:  ADDWFC 03,W
2A08:  MOVWF  FEA
2A0A:  INCF   FEF,F
2A0C:  BSF    42.4
2A0E:  MOVLW  1E
2A10:  MOVWF  xE9
2A12:  CALL   0B20
....................          } 
....................       }else{ 
2A16:  BRA    2A1A
....................          Flanco = 0; 
2A18:  BCF    42.4
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2A1A:  BSF    F96.0
2A1C:  BTFSC  F84.0
2A1E:  BRA    2A50
....................          delay_ms(20); 
2A20:  MOVLW  14
2A22:  MOVWF  xE9
2A24:  CALL   0B20
....................          if(DOWN && Flanco2 == 0) { 
2A28:  BSF    F96.0
2A2A:  BTFSC  F84.0
2A2C:  BRA    2A4E
2A2E:  BTFSC  42.6
2A30:  BRA    2A4E
....................             clave[unidad-11]--;Flanco2 = 1;delay_ms(30); 
2A32:  MOVLW  0B
2A34:  SUBWF  1E,W
2A36:  CLRF   03
2A38:  ADDLW  48
2A3A:  MOVWF  FE9
2A3C:  MOVLW  00
2A3E:  ADDWFC 03,W
2A40:  MOVWF  FEA
2A42:  DECF   FEF,F
2A44:  BSF    42.6
2A46:  MOVLW  1E
2A48:  MOVWF  xE9
2A4A:  CALL   0B20
....................          } 
....................       }else{ 
2A4E:  BRA    2A52
....................          Flanco2 = 0; 
2A50:  BCF    42.6
....................       } 
....................     
....................       if(RIGHT){// Si oprime Derecha 
2A52:  BSF    F96.1
2A54:  BTFSC  F84.1
2A56:  BRA    2A80
....................          delay_ms(20); 
2A58:  MOVLW  14
2A5A:  MOVWF  xE9
2A5C:  CALL   0B20
....................          if(RIGHT && Flanco1 == 0) { 
2A60:  BSF    F96.1
2A62:  BTFSC  F84.1
2A64:  BRA    2A7E
2A66:  BTFSC  42.5
2A68:  BRA    2A7E
....................             Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f"); 
2A6A:  BSF    42.5
2A6C:  INCF   1E,F
2A6E:  MOVLW  1E
2A70:  MOVWF  xE9
2A72:  CALL   0B20
2A76:  MOVLW  0C
2A78:  MOVWF  xE8
2A7A:  CALL   0C92
....................          } 
....................       }else{ 
2A7E:  BRA    2A82
....................          Flanco1 = 0; 
2A80:  BCF    42.5
....................       } 
....................              
....................       if(LEFT){// Si oprime Izquierda 
2A82:  BSF    F96.2
2A84:  BTFSC  F84.2
2A86:  BRA    2AB0
....................          delay_ms(20); 
2A88:  MOVLW  14
2A8A:  MOVWF  xE9
2A8C:  CALL   0B20
....................          if(LEFT && Flanco3 == 0) { 
2A90:  BSF    F96.2
2A92:  BTFSC  F84.2
2A94:  BRA    2AAE
2A96:  BTFSC  42.7
2A98:  BRA    2AAE
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
2A9A:  BSF    42.7
2A9C:  DECF   1E,F
2A9E:  MOVLW  1E
2AA0:  MOVWF  xE9
2AA2:  CALL   0B20
2AA6:  MOVLW  0C
2AA8:  MOVWF  xE8
2AAA:  CALL   0C92
....................          } 
....................       }else{ 
2AAE:  BRA    2AB2
....................          Flanco3 = 0; 
2AB0:  BCF    42.7
....................       } 
....................              
....................       if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2AB2:  MOVLW  0B
2AB4:  SUBWF  1E,W
2AB6:  CLRF   03
2AB8:  ADDLW  48
2ABA:  MOVWF  FE9
2ABC:  MOVLW  00
2ABE:  ADDWFC 03,W
2AC0:  MOVWF  FEA
2AC2:  BTFSC  FEF.7
2AC4:  BRA    2AC8
2AC6:  BRA    2ADC
....................          clave[unidad-11]=9; 
2AC8:  MOVLW  0B
2ACA:  SUBWF  1E,W
2ACC:  CLRF   03
2ACE:  ADDLW  48
2AD0:  MOVWF  FE9
2AD2:  MOVLW  00
2AD4:  ADDWFC 03,W
2AD6:  MOVWF  FEA
2AD8:  MOVLW  09
2ADA:  MOVWF  FEF
....................       if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2ADC:  MOVLW  0B
2ADE:  SUBWF  1E,W
2AE0:  CLRF   03
2AE2:  ADDLW  48
2AE4:  MOVWF  FE9
2AE6:  MOVLW  00
2AE8:  ADDWFC 03,W
2AEA:  MOVWF  FEA
2AEC:  BTFSC  FEF.7
2AEE:  BRA    2B08
2AF0:  MOVF   FEF,W
2AF2:  SUBLW  09
2AF4:  BC    2B08
....................          clave[unidad-11]=0; 
2AF6:  MOVLW  0B
2AF8:  SUBWF  1E,W
2AFA:  CLRF   03
2AFC:  ADDLW  48
2AFE:  MOVWF  FE9
2B00:  MOVLW  00
2B02:  ADDWFC 03,W
2B04:  MOVWF  FEA
2B06:  CLRF   FEF
....................           
....................       if(unidad<11){ 
2B08:  MOVF   1E,W
2B0A:  SUBLW  0A
2B0C:  BNC   2B3E
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2B0E:  MOVLW  02
2B10:  MOVWF  xD3
2B12:  MOVLW  FA
2B14:  MOVWF  xE9
2B16:  CALL   0B20
2B1A:  DECFSZ xD3,F
2B1C:  BRA    2B12
2B1E:  MOVLW  01
2B20:  MOVWF  1C
2B22:  CLRF   44
2B24:  MOVLW  02
2B26:  MOVWF  1F
2B28:  MOVWF  21
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2B2A:  CLRF   48
2B2C:  CLRF   49
2B2E:  CLRF   4A
2B30:  CLRF   4B
....................          printf(lcd_putc,"\f");unidad=11; 
2B32:  MOVLW  0C
2B34:  MOVWF  xE8
2B36:  CALL   0C92
2B3A:  MOVLW  0B
2B3C:  MOVWF  1E
....................       } 
....................        
....................       lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2B3E:  MOVFF  1E,E9
2B42:  MOVLW  04
2B44:  MOVWF  xEA
2B46:  CALL   0C20
....................       lcd_putc(t[2]); 
2B4A:  MOVFF  47,E8
2B4E:  CALL   0C92
....................       if(unidad>14){// Si ya ingreso la nueva contraseña. 
2B52:  MOVF   1E,W
2B54:  SUBLW  0E
2B56:  BTFSC  FD8.0
2B58:  BRA    2CC0
....................          lcd_gotoxy(1,1); 
2B5A:  MOVLW  01
2B5C:  MOVWF  xE9
2B5E:  MOVWF  xEA
2B60:  CALL   0C20
....................          printf(lcd_putc,"                    "); 
2B64:  MOVLW  6A
2B66:  MOVWF  FF6
2B68:  MOVLW  07
2B6A:  MOVWF  FF7
2B6C:  CALL   1B48
....................          lcd_gotoxy(1,2); 
2B70:  MOVLW  01
2B72:  MOVWF  xE9
2B74:  MOVLW  02
2B76:  MOVWF  xEA
2B78:  CALL   0C20
....................          printf(lcd_putc,"     Contraseña     "); 
2B7C:  MOVLW  80
2B7E:  MOVWF  FF6
2B80:  MOVLW  07
2B82:  MOVWF  FF7
2B84:  CALL   1B48
....................          lcd_gotoxy(1,3); 
2B88:  MOVLW  01
2B8A:  MOVWF  xE9
2B8C:  MOVLW  03
2B8E:  MOVWF  xEA
2B90:  CALL   0C20
....................          printf(lcd_putc,"     Almacenada     "); 
2B94:  MOVLW  96
2B96:  MOVWF  FF6
2B98:  MOVLW  07
2B9A:  MOVWF  FF7
2B9C:  CALL   1B48
....................          lcd_gotoxy(1,4); 
2BA0:  MOVLW  01
2BA2:  MOVWF  xE9
2BA4:  MOVLW  04
2BA6:  MOVWF  xEA
2BA8:  CALL   0C20
....................          printf(lcd_putc,"                    "); 
2BAC:  MOVLW  AC
2BAE:  MOVWF  FF6
2BB0:  MOVLW  07
2BB2:  MOVWF  FF7
2BB4:  CALL   1B48
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2BB8:  MOVFF  48,4C
2BBC:  MOVFF  49,4D
2BC0:  MOVFF  4A,4E
2BC4:  MOVFF  4B,4F
....................          write_eeprom(100,clave[0]);delay_ms(20);write_eeprom(101,clave[1]);delay_ms(20); 
2BC8:  MOVLW  64
2BCA:  MOVWF  FA9
2BCC:  MOVFF  48,FA8
2BD0:  BCF    FA6.6
2BD2:  BCF    FA6.7
2BD4:  BSF    FA6.2
2BD6:  MOVF   FF2,W
2BD8:  MOVWF  00
2BDA:  BCF    FF2.7
2BDC:  MOVLB  F
2BDE:  MOVLW  55
2BE0:  MOVWF  FA7
2BE2:  MOVLW  AA
2BE4:  MOVWF  FA7
2BE6:  BSF    FA6.1
2BE8:  BTFSC  FA6.1
2BEA:  BRA    2BE8
2BEC:  BCF    FA6.2
2BEE:  MOVF   00,W
2BF0:  IORWF  FF2,F
2BF2:  MOVLW  14
2BF4:  MOVLB  0
2BF6:  MOVWF  xE9
2BF8:  CALL   0B20
2BFC:  MOVLW  65
2BFE:  MOVWF  FA9
2C00:  MOVFF  49,FA8
2C04:  BCF    FA6.6
2C06:  BCF    FA6.7
2C08:  BSF    FA6.2
2C0A:  MOVF   FF2,W
2C0C:  MOVWF  00
2C0E:  BCF    FF2.7
2C10:  MOVLB  F
2C12:  MOVLW  55
2C14:  MOVWF  FA7
2C16:  MOVLW  AA
2C18:  MOVWF  FA7
2C1A:  BSF    FA6.1
2C1C:  BTFSC  FA6.1
2C1E:  BRA    2C1C
2C20:  BCF    FA6.2
2C22:  MOVF   00,W
2C24:  IORWF  FF2,F
2C26:  MOVLW  14
2C28:  MOVLB  0
2C2A:  MOVWF  xE9
2C2C:  CALL   0B20
....................          write_eeprom(102,clave[2]);delay_ms(20);write_eeprom(103,clave[3]);delay_ms(20); 
2C30:  MOVLW  66
2C32:  MOVWF  FA9
2C34:  MOVFF  4A,FA8
2C38:  BCF    FA6.6
2C3A:  BCF    FA6.7
2C3C:  BSF    FA6.2
2C3E:  MOVF   FF2,W
2C40:  MOVWF  00
2C42:  BCF    FF2.7
2C44:  MOVLB  F
2C46:  MOVLW  55
2C48:  MOVWF  FA7
2C4A:  MOVLW  AA
2C4C:  MOVWF  FA7
2C4E:  BSF    FA6.1
2C50:  BTFSC  FA6.1
2C52:  BRA    2C50
2C54:  BCF    FA6.2
2C56:  MOVF   00,W
2C58:  IORWF  FF2,F
2C5A:  MOVLW  14
2C5C:  MOVLB  0
2C5E:  MOVWF  xE9
2C60:  CALL   0B20
2C64:  MOVLW  67
2C66:  MOVWF  FA9
2C68:  MOVFF  4B,FA8
2C6C:  BCF    FA6.6
2C6E:  BCF    FA6.7
2C70:  BSF    FA6.2
2C72:  MOVF   FF2,W
2C74:  MOVWF  00
2C76:  BCF    FF2.7
2C78:  MOVLB  F
2C7A:  MOVLW  55
2C7C:  MOVWF  FA7
2C7E:  MOVLW  AA
2C80:  MOVWF  FA7
2C82:  BSF    FA6.1
2C84:  BTFSC  FA6.1
2C86:  BRA    2C84
2C88:  BCF    FA6.2
2C8A:  MOVF   00,W
2C8C:  IORWF  FF2,F
2C8E:  MOVLW  14
2C90:  MOVLB  0
2C92:  MOVWF  xE9
2C94:  CALL   0B20
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2C98:  MOVLW  02
2C9A:  MOVWF  xD3
2C9C:  MOVLW  FA
2C9E:  MOVWF  xE9
2CA0:  CALL   0B20
2CA4:  DECFSZ xD3,F
2CA6:  BRA    2C9C
2CA8:  MOVLW  01
2CAA:  MOVWF  1C
2CAC:  CLRF   44
2CAE:  MOVLW  02
2CB0:  MOVWF  1F
2CB2:  MOVWF  21
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2CB4:  CLRF   48
2CB6:  CLRF   49
2CB8:  CLRF   4A
2CBA:  CLRF   4B
....................          unidad=11; 
2CBC:  MOVLW  0B
2CBE:  MOVWF  1E
....................       } 
....................        
....................       if(unidad>11&&unidad<14){ 
2CC0:  MOVF   1E,W
2CC2:  SUBLW  0B
2CC4:  BC    2CE4
2CC6:  MOVF   1E,W
2CC8:  SUBLW  0D
2CCA:  BNC   2CE4
....................          lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2CCC:  MOVLW  01
2CCE:  SUBWF  1E,W
2CD0:  MOVWF  xD3
2CD2:  MOVWF  xE9
2CD4:  MOVLW  04
2CD6:  MOVWF  xEA
2CD8:  CALL   0C20
....................          lcd_putc(t[1]); 
2CDC:  MOVFF  46,E8
2CE0:  CALL   0C92
....................       } 
.................... } 
2CE4:  GOTO   4F32 (RETURN)
....................  
.................... void MenuVelocidad(){ 
....................       lcd_gotoxy(1,2); 
*
4156:  MOVLW  01
4158:  MOVWF  xE9
415A:  MOVLW  02
415C:  MOVWF  xEA
415E:  CALL   0C20
....................       printf(lcd_putc,"  Velocidad Motor=  "); 
4162:  MOVLW  C2
4164:  MOVWF  FF6
4166:  MOVLW  07
4168:  MOVWF  FF7
416A:  CALL   1B48
....................        
....................       vel=((float)tmp/254)*100; 
416E:  CLRF   xE1
4170:  MOVFF  2E,E0
4174:  CALL   0D3A
4178:  MOVFF  00,D3
417C:  MOVFF  01,D4
4180:  MOVFF  02,D5
4184:  MOVFF  03,D6
4188:  MOVFF  03,E2
418C:  MOVFF  02,E1
4190:  MOVFF  01,E0
4194:  MOVFF  00,DF
4198:  CLRF   xE6
419A:  CLRF   xE5
419C:  MOVLW  7E
419E:  MOVWF  xE4
41A0:  MOVLW  86
41A2:  MOVWF  xE3
41A4:  CALL   0D70
41A8:  MOVFF  00,D3
41AC:  MOVFF  01,D4
41B0:  MOVFF  02,D5
41B4:  MOVFF  03,D6
41B8:  MOVFF  03,EB
41BC:  MOVFF  02,EA
41C0:  MOVFF  01,E9
41C4:  MOVFF  00,E8
41C8:  CLRF   xEF
41CA:  CLRF   xEE
41CC:  MOVLW  48
41CE:  MOVWF  xED
41D0:  MOVLW  85
41D2:  MOVWF  xEC
41D4:  CALL   3596
41D8:  MOVFF  03,1B
41DC:  MOVFF  02,1A
41E0:  MOVFF  01,19
41E4:  MOVFF  00,18
....................       v=(int8)vel; 
41E8:  MOVFF  1B,D6
41EC:  MOVFF  1A,D5
41F0:  MOVFF  19,D4
41F4:  MOVFF  18,D3
41F8:  CALL   391E
41FC:  MOVFF  01,17
....................       lcd_gotoxy(1,3); 
4200:  MOVLW  01
4202:  MOVWF  xE9
4204:  MOVLW  03
4206:  MOVWF  xEA
4208:  CALL   0C20
....................       printf(lcd_putc,"        %i%%        ",v); 
420C:  MOVLW  D8
420E:  MOVWF  FF6
4210:  MOVLW  07
4212:  MOVWF  FF7
4214:  MOVLW  08
4216:  MOVWF  xDB
4218:  CALL   1B6A
421C:  MOVFF  17,D4
4220:  MOVLW  1F
4222:  MOVWF  xD5
4224:  CALL   288C
4228:  MOVLW  25
422A:  MOVWF  xE8
422C:  CALL   0C92
4230:  MOVLW  E4
4232:  MOVWF  FF6
4234:  MOVLW  07
4236:  MOVWF  FF7
4238:  MOVLW  08
423A:  MOVWF  xDB
423C:  CALL   1B6A
....................  
....................       if(tmp<1) 
4240:  MOVF   2E,F
4242:  BNZ   4248
....................       {tmp=1;} 
4244:  MOVLW  01
4246:  MOVWF  2E
....................     
....................       if(tmp>254) 
4248:  MOVF   2E,W
424A:  SUBLW  FE
424C:  BC    4252
....................       {tmp=254;} 
424E:  MOVLW  FE
4250:  MOVWF  2E
....................        
....................       if(UP){//Si oprime hacia arriba 
4252:  BSF    F92.5
4254:  BTFSC  F80.5
4256:  BRA    4278
....................          delay_ms(20); 
4258:  MOVLW  14
425A:  MOVWF  xE9
425C:  CALL   0B20
....................          if(UP) { 
4260:  BSF    F92.5
4262:  BTFSC  F80.5
4264:  BRA    4278
....................             tmp+=1;delay_ms(30); 
4266:  MOVLW  01
4268:  ADDWF  2E,F
426A:  MOVLW  1E
426C:  MOVWF  xE9
426E:  CALL   0B20
....................             ajuste_vel(tmp); 
4272:  MOVFF  2E,D3
4276:  RCALL  4150
....................          } 
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia abajo 
4278:  BSF    F96.0
427A:  BTFSC  F84.0
427C:  BRA    429E
....................          delay_ms(20); 
427E:  MOVLW  14
4280:  MOVWF  xE9
4282:  CALL   0B20
....................          if(DOWN) { 
4286:  BSF    F96.0
4288:  BTFSC  F84.0
428A:  BRA    429E
....................             tmp-=1;delay_ms(30); 
428C:  MOVLW  01
428E:  SUBWF  2E,F
4290:  MOVLW  1E
4292:  MOVWF  xE9
4294:  CALL   0B20
....................             ajuste_vel(tmp); 
4298:  MOVFF  2E,D3
429C:  RCALL  4150
....................          } 
....................       } 
....................        
....................       if(RIGHT || LEFT){//Si oprime hacia abajo 
429E:  BSF    F96.1
42A0:  BTFSS  F84.1
42A2:  BRA    42AA
42A4:  BSF    F96.2
42A6:  BTFSC  F84.2
42A8:  BRA    4374
....................          delay_ms(20); 
42AA:  MOVLW  14
42AC:  MOVWF  xE9
42AE:  CALL   0B20
....................          if(RIGHT || LEFT) { 
42B2:  BSF    F96.1
42B4:  BTFSS  F84.1
42B6:  BRA    42BE
42B8:  BSF    F96.2
42BA:  BTFSC  F84.2
42BC:  BRA    4374
....................             ajuste_vel(tmp); 
42BE:  MOVFF  2E,D3
42C2:  RCALL  4150
....................             write_eeprom(13,tmp);delay_ms(500); 
42C4:  MOVLW  0D
42C6:  MOVWF  FA9
42C8:  MOVFF  2E,FA8
42CC:  BCF    FA6.6
42CE:  BCF    FA6.7
42D0:  BSF    FA6.2
42D2:  MOVF   FF2,W
42D4:  MOVWF  00
42D6:  BCF    FF2.7
42D8:  MOVLB  F
42DA:  MOVLW  55
42DC:  MOVWF  FA7
42DE:  MOVLW  AA
42E0:  MOVWF  FA7
42E2:  BSF    FA6.1
42E4:  BTFSC  FA6.1
42E6:  BRA    42E4
42E8:  BCF    FA6.2
42EA:  MOVF   00,W
42EC:  IORWF  FF2,F
42EE:  MOVLW  02
42F0:  MOVLB  0
42F2:  MOVWF  xD3
42F4:  MOVLW  FA
42F6:  MOVWF  xE9
42F8:  CALL   0B20
42FC:  DECFSZ xD3,F
42FE:  BRA    42F4
....................             lcd_gotoxy(1,2); 
4300:  MOVLW  01
4302:  MOVWF  xE9
4304:  MOVLW  02
4306:  MOVWF  xEA
4308:  CALL   0C20
....................             delay_ms(500); 
430C:  MOVLW  02
430E:  MOVWF  xD3
4310:  MOVLW  FA
4312:  MOVWF  xE9
4314:  CALL   0B20
4318:  DECFSZ xD3,F
431A:  BRA    4310
....................             printf(lcd_putc,"\f"); 
431C:  MOVLW  0C
431E:  MOVWF  xE8
4320:  CALL   0C92
....................             lcd_gotoxy(1,2); 
4324:  MOVLW  01
4326:  MOVWF  xE9
4328:  MOVLW  02
432A:  MOVWF  xEA
432C:  CALL   0C20
....................             printf(lcd_putc,"  Valor almacenado  "); 
4330:  MOVLW  EE
4332:  MOVWF  FF6
4334:  MOVLW  07
4336:  MOVWF  FF7
4338:  CALL   1B48
....................             lcd_gotoxy(1,3); 
433C:  MOVLW  01
433E:  MOVWF  xE9
4340:  MOVLW  03
4342:  MOVWF  xEA
4344:  CALL   0C20
....................             printf(lcd_putc,"   Correctamente   "); 
4348:  MOVLW  04
434A:  MOVWF  FF6
434C:  MOVLW  08
434E:  MOVWF  FF7
4350:  CALL   1B48
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500); 
4354:  MOVLW  01
4356:  MOVWF  1C
4358:  CLRF   44
435A:  MOVLW  02
435C:  MOVWF  1F
435E:  MOVWF  21
4360:  MOVLW  0B
4362:  MOVWF  1E
4364:  MOVLW  02
4366:  MOVWF  xD3
4368:  MOVLW  FA
436A:  MOVWF  xE9
436C:  CALL   0B20
4370:  DECFSZ xD3,F
4372:  BRA    4368
....................          } 
....................       } 
.................... } 
4374:  GOTO   4FAC (RETURN)
....................  
.................... void MenuServicio(){ 
....................       if(Opcion<1) 
*
31AA:  MOVF   35,F
31AC:  BNZ   31B2
....................          Opcion=4; 
31AE:  MOVLW  04
31B0:  MOVWF  35
....................       if(Opcion>4) 
31B2:  MOVF   35,W
31B4:  SUBLW  04
31B6:  BC    31BC
....................          Opcion=1; 
31B8:  MOVLW  01
31BA:  MOVWF  35
....................           
....................       if(Opcion==1){ 
31BC:  DECFSZ 35,W
31BE:  BRA    3220
....................          lcd_gotoxy(1,1);printf(lcd_putc,">Media Movil        "); 
31C0:  MOVLW  01
31C2:  MOVWF  xE9
31C4:  MOVWF  xEA
31C6:  CALL   0C20
31CA:  MOVLW  18
31CC:  MOVWF  FF6
31CE:  MOVLW  08
31D0:  MOVWF  FF7
31D2:  CALL   1B48
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
31D6:  MOVLW  01
31D8:  MOVWF  xE9
31DA:  MOVLW  02
31DC:  MOVWF  xEA
31DE:  CALL   0C20
31E2:  MOVLW  2E
31E4:  MOVWF  FF6
31E6:  MOVLW  08
31E8:  MOVWF  FF7
31EA:  CALL   1B48
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
31EE:  MOVLW  01
31F0:  MOVWF  xE9
31F2:  MOVLW  03
31F4:  MOVWF  xEA
31F6:  CALL   0C20
31FA:  MOVLW  44
31FC:  MOVWF  FF6
31FE:  MOVLW  08
3200:  MOVWF  FF7
3202:  CALL   1B48
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Salida Analoga     "); 
3206:  MOVLW  01
3208:  MOVWF  xE9
320A:  MOVLW  04
320C:  MOVWF  xEA
320E:  CALL   0C20
3212:  MOVLW  5A
3214:  MOVWF  FF6
3216:  MOVLW  08
3218:  MOVWF  FF7
321A:  CALL   1B48
....................          #endif   
....................       }else if(Opcion==2){ 
321E:  BRA    3350
3220:  MOVF   35,W
3222:  SUBLW  02
3224:  BNZ   3286
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
3226:  MOVLW  01
3228:  MOVWF  xE9
322A:  MOVWF  xEA
322C:  CALL   0C20
3230:  MOVLW  70
3232:  MOVWF  FF6
3234:  MOVLW  08
3236:  MOVWF  FF7
3238:  CALL   1B48
....................          lcd_gotoxy(1,2);printf(lcd_putc,">Punto Cero         "); 
323C:  MOVLW  01
323E:  MOVWF  xE9
3240:  MOVLW  02
3242:  MOVWF  xEA
3244:  CALL   0C20
3248:  MOVLW  86
324A:  MOVWF  FF6
324C:  MOVLW  08
324E:  MOVWF  FF7
3250:  CALL   1B48
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
3254:  MOVLW  01
3256:  MOVWF  xE9
3258:  MOVLW  03
325A:  MOVWF  xEA
325C:  CALL   0C20
3260:  MOVLW  9C
3262:  MOVWF  FF6
3264:  MOVLW  08
3266:  MOVWF  FF7
3268:  CALL   1B48
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Salida Analoga     "); 
326C:  MOVLW  01
326E:  MOVWF  xE9
3270:  MOVLW  04
3272:  MOVWF  xEA
3274:  CALL   0C20
3278:  MOVLW  B2
327A:  MOVWF  FF6
327C:  MOVLW  08
327E:  MOVWF  FF7
3280:  CALL   1B48
....................          #endif   
....................       }else if(Opcion==3){ 
3284:  BRA    3350
3286:  MOVF   35,W
3288:  SUBLW  03
328A:  BNZ   32EC
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
328C:  MOVLW  01
328E:  MOVWF  xE9
3290:  MOVWF  xEA
3292:  CALL   0C20
3296:  MOVLW  C8
3298:  MOVWF  FF6
329A:  MOVLW  08
329C:  MOVWF  FF7
329E:  CALL   1B48
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
32A2:  MOVLW  01
32A4:  MOVWF  xE9
32A6:  MOVLW  02
32A8:  MOVWF  xEA
32AA:  CALL   0C20
32AE:  MOVLW  DE
32B0:  MOVWF  FF6
32B2:  MOVLW  08
32B4:  MOVWF  FF7
32B6:  CALL   1B48
....................          lcd_gotoxy(1,3);printf(lcd_putc,">Mantenimiento      "); 
32BA:  MOVLW  01
32BC:  MOVWF  xE9
32BE:  MOVLW  03
32C0:  MOVWF  xEA
32C2:  CALL   0C20
32C6:  MOVLW  F4
32C8:  MOVWF  FF6
32CA:  MOVLW  08
32CC:  MOVWF  FF7
32CE:  CALL   1B48
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc," Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc," Salida Analoga     "); 
32D2:  MOVLW  01
32D4:  MOVWF  xE9
32D6:  MOVLW  04
32D8:  MOVWF  xEA
32DA:  CALL   0C20
32DE:  MOVLW  0A
32E0:  MOVWF  FF6
32E2:  MOVLW  09
32E4:  MOVWF  FF7
32E6:  CALL   1B48
....................          #endif   
....................       }else if(Opcion==4){ 
32EA:  BRA    3350
32EC:  MOVF   35,W
32EE:  SUBLW  04
32F0:  BNZ   3350
....................          lcd_gotoxy(1,1);printf(lcd_putc," Media Movil        "); 
32F2:  MOVLW  01
32F4:  MOVWF  xE9
32F6:  MOVWF  xEA
32F8:  CALL   0C20
32FC:  MOVLW  20
32FE:  MOVWF  FF6
3300:  MOVLW  09
3302:  MOVWF  FF7
3304:  CALL   1B48
....................          lcd_gotoxy(1,2);printf(lcd_putc," Punto Cero         "); 
3308:  MOVLW  01
330A:  MOVWF  xE9
330C:  MOVLW  02
330E:  MOVWF  xEA
3310:  CALL   0C20
3314:  MOVLW  36
3316:  MOVWF  FF6
3318:  MOVLW  09
331A:  MOVWF  FF7
331C:  CALL   1B48
....................          lcd_gotoxy(1,3);printf(lcd_putc," Mantenimiento      "); 
3320:  MOVLW  01
3322:  MOVWF  xE9
3324:  MOVLW  03
3326:  MOVWF  xEA
3328:  CALL   0C20
332C:  MOVLW  4C
332E:  MOVWF  FF6
3330:  MOVLW  09
3332:  MOVWF  FF7
3334:  CALL   1B48
....................          #ifdef DAMPER    
....................          lcd_gotoxy(1,4);printf(lcd_putc,">Modo               "); 
....................          #endif 
....................           
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,4);printf(lcd_putc,">Salida Analoga     "); 
3338:  MOVLW  01
333A:  MOVWF  xE9
333C:  MOVLW  04
333E:  MOVWF  xEA
3340:  CALL   0C20
3344:  MOVLW  62
3346:  MOVWF  FF6
3348:  MOVLW  09
334A:  MOVWF  FF7
334C:  CALL   1B48
....................          #endif    
....................       } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3350:  BSF    F92.5
3352:  BTFSC  F80.5
3354:  BRA    336E
....................          delay_ms(20); 
3356:  MOVLW  14
3358:  MOVWF  xE9
335A:  CALL   0B20
....................          if(UP) { 
335E:  BSF    F92.5
3360:  BTFSC  F80.5
3362:  BRA    336E
....................             delay_ms(30); 
3364:  MOVLW  1E
3366:  MOVWF  xE9
3368:  CALL   0B20
....................             Opcion--; 
336C:  DECF   35,F
....................          } 
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia abajo 
336E:  BSF    F96.0
3370:  BTFSC  F84.0
3372:  BRA    338C
....................          delay_ms(20); 
3374:  MOVLW  14
3376:  MOVWF  xE9
3378:  CALL   0B20
....................          if(DOWN) { 
337C:  BSF    F96.0
337E:  BTFSC  F84.0
3380:  BRA    338C
....................             delay_ms(30);             
3382:  MOVLW  1E
3384:  MOVWF  xE9
3386:  CALL   0B20
....................             Opcion++; 
338A:  INCF   35,F
....................          } 
....................       } 
....................        
....................       if(RIGHT){//Si oprime hacia abajo 
338C:  BSF    F96.1
338E:  BTFSC  F84.1
3390:  BRA    33D4
....................          delay_ms(20); 
3392:  MOVLW  14
3394:  MOVWF  xE9
3396:  CALL   0B20
....................          if(RIGHT) { 
339A:  BSF    F96.1
339C:  BTFSC  F84.1
339E:  BRA    33CC
....................             if(Opcion==1){ 
33A0:  DECFSZ 35,W
33A2:  BRA    33AA
....................                Menu=9; 
33A4:  MOVLW  09
33A6:  MOVWF  1C
....................             }else if(Opcion==2){ 
33A8:  BRA    33CC
33AA:  MOVF   35,W
33AC:  SUBLW  02
33AE:  BNZ   33B6
....................                Menu=10; 
33B0:  MOVLW  0A
33B2:  MOVWF  1C
....................             }else if(Opcion==3){ 
33B4:  BRA    33CC
33B6:  MOVF   35,W
33B8:  SUBLW  03
33BA:  BNZ   33C2
....................                Menu=11; 
33BC:  MOVLW  0B
33BE:  MOVWF  1C
....................             }else if(Opcion==4){ 
33C0:  BRA    33CC
33C2:  MOVF   35,W
33C4:  SUBLW  04
33C6:  BNZ   33CC
....................                Menu=12; 
33C8:  MOVLW  0C
33CA:  MOVWF  1C
....................             } 
....................          } 
....................          printf(lcd_putc,"\f"); 
33CC:  MOVLW  0C
33CE:  MOVWF  xE8
33D0:  CALL   0C92
....................       } 
....................        
....................       if(LEFT){//Si oprime hacia abajo 
33D4:  BSF    F96.2
33D6:  BTFSC  F84.2
33D8:  BRA    3410
....................          delay_ms(20); 
33DA:  MOVLW  14
33DC:  MOVWF  xE9
33DE:  CALL   0B20
....................          if(LEFT) { 
33E2:  BSF    F96.2
33E4:  BTFSC  F84.2
33E6:  BRA    3410
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
33E8:  MOVLW  01
33EA:  MOVWF  1C
33EC:  CLRF   44
33EE:  MOVLW  02
33F0:  MOVWF  1F
33F2:  MOVWF  21
33F4:  MOVLW  0B
33F6:  MOVWF  1E
33F8:  MOVLW  02
33FA:  MOVWF  xD3
33FC:  MOVLW  FA
33FE:  MOVWF  xE9
3400:  CALL   0B20
3404:  DECFSZ xD3,F
3406:  BRA    33FC
3408:  MOVLW  0C
340A:  MOVWF  xE8
340C:  CALL   0C92
....................          } 
....................       } 
.................... } 
3410:  GOTO   4F84 (RETURN)
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    #ifdef SIMU 
....................    set_timer1(40536);  // 5  ms 
*
0978:  MOVLW  9E
097A:  MOVWF  FCF
097C:  MOVLW  58
097E:  MOVWF  FCE
....................    #else 
....................    set_timer1(5536);  // 5  ms 
....................    #endif 
....................    tiempos++; 
0980:  INCF   55,F
0982:  BTFSC  FD8.2
0984:  INCF   56,F
....................    tiempos2++; 
0986:  INCF   59,F
0988:  BTFSC  FD8.2
098A:  INCF   5A,F
....................     
....................    if(t_latencia>=3000) 
098C:  MOVF   58,W
098E:  SUBLW  0A
0990:  BC    099E
0992:  XORLW  FF
0994:  BNZ   099C
0996:  MOVF   57,W
0998:  SUBLW  B7
099A:  BC    099E
....................       Latencia=1; 
099C:  BSF    43.1
....................     
....................    if(flag_latencia==1) 
099E:  BTFSS  43.0
09A0:  BRA    09A8
....................       t_latencia++;          
09A2:  INCF   57,F
09A4:  BTFSC  FD8.2
09A6:  INCF   58,F
....................     
....................    if(tiempos2>=200){ 
09A8:  MOVF   5A,F
09AA:  BNZ   09B2
09AC:  MOVF   59,W
09AE:  SUBLW  C7
09B0:  BC    09B8
....................       tiempos2=0;Lectura2=1; 
09B2:  CLRF   5A
09B4:  CLRF   59
09B6:  BSF    43.7
....................    } 
....................     
....................    if(tiempos>=200){   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
09B8:  MOVF   56,F
09BA:  BNZ   09C2
09BC:  MOVF   55,W
09BE:  SUBLW  C7
09C0:  BC    0A28
....................       tiempos=0;tiemporeset++; 
09C2:  CLRF   56
09C4:  CLRF   55
09C6:  INCF   39,F
....................       Lectura=1; 
09C8:  BSF    43.6
....................           
....................       if(estadomv==1 && flag_filtro==1){   
09CA:  BTFSS  42.1
09CC:  BRA    09E8
09CE:  BTFSS  43.2
09D0:  BRA    09E8
....................          segundos++; 
09D2:  INCF   36,F
....................          if(segundos==60){ 
09D4:  MOVF   36,W
09D6:  SUBLW  3C
09D8:  BNZ   09DE
....................             segundos=0;minutos++; 
09DA:  CLRF   36
09DC:  INCF   37,F
....................          }  
....................          if(minutos==60){ 
09DE:  MOVF   37,W
09E0:  SUBLW  3C
09E2:  BNZ   09E8
....................             minutos=0;horas++; 
09E4:  CLRF   37
09E6:  INCF   38,F
....................          } 
....................       } 
....................        
....................       if(tiempo_purga==1){ 
09E8:  BTFSS  54.5
09EA:  BRA    0A0E
....................          if(purga_segundos>0){ 
09EC:  MOVF   3A,F
09EE:  BZ    09F4
....................             purga_segundos--; 
09F0:  DECF   3A,F
....................          }else{ 
09F2:  BRA    0A0E
....................             if(purga_minutos>0){ 
09F4:  MOVF   26,F
09F6:  BZ    0A00
....................                purga_minutos--; 
09F8:  DECF   26,F
....................                purga_segundos=59; 
09FA:  MOVLW  3B
09FC:  MOVWF  3A
....................             }else{ 
09FE:  BRA    0A0E
....................                //tiempo_cumplido=1; 
....................                tiempo_purga=0; 
0A00:  BCF    54.5
....................                //Motor_on; 
....................                //EnciendeMotor(); 
....................                Menu=20; 
0A02:  MOVLW  14
0A04:  MOVWF  1C
....................                Luz_Blanca_on; 
0A06:  BSF    F8A.4
0A08:  BCF    F93.4
....................                estadomv=1; 
0A0A:  BSF    42.1
....................                estadofl=1; 
0A0C:  BSF    42.0
....................             } 
....................          } 
....................       } 
....................        
....................       if(tiempo_ppurga==1){ 
0A0E:  BTFSS  54.6
0A10:  BRA    0A28
....................          if(ppurga_segundos>0){ 
0A12:  MOVF   3C,F
0A14:  BZ    0A1A
....................             ppurga_segundos--; 
0A16:  DECF   3C,F
....................          }else{ 
0A18:  BRA    0A28
....................             if(ppurga_minutos>0){ 
0A1A:  MOVF   3E,F
0A1C:  BZ    0A26
....................                ppurga_minutos--; 
0A1E:  DECF   3E,F
....................                ppurga_segundos=59; 
0A20:  MOVLW  3B
0A22:  MOVWF  3C
....................             }else{ 
0A24:  BRA    0A28
....................                //tiempo_cumplido=1; 
....................                reset_cpu(); 
0A26:  RESET
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0A28:  BCF    F9E.0
0A2A:  GOTO   0054
.................... void main () 
.................... {   
*
4BBC:  CLRF   FF8
4BBE:  BCF    FD0.7
4BC0:  BSF    07.7
4BC2:  CLRF   FEA
4BC4:  CLRF   FE9
4BC6:  CLRF   17
4BC8:  CLRF   1B
4BCA:  CLRF   1A
4BCC:  CLRF   19
4BCE:  CLRF   18
4BD0:  MOVLW  64
4BD2:  MOVWF  1C
4BD4:  MOVLW  02
4BD6:  MOVWF  1D
4BD8:  MOVLW  0B
4BDA:  MOVWF  1E
4BDC:  MOVLW  02
4BDE:  MOVWF  1F
4BE0:  MOVLW  03
4BE2:  MOVWF  20
4BE4:  MOVLW  02
4BE6:  MOVWF  21
4BE8:  MOVWF  22
4BEA:  MOVLW  04
4BEC:  MOVWF  23
4BEE:  MOVLW  0A
4BF0:  MOVWF  24
4BF2:  MOVLW  01
4BF4:  MOVWF  25
4BF6:  CLRF   26
4BF8:  CLRF   27
4BFA:  CLRF   28
4BFC:  CLRF   29
4BFE:  CLRF   2A
4C00:  CLRF   2B
4C02:  CLRF   2C
4C04:  CLRF   2D
4C06:  MOVLW  0A
4C08:  MOVWF  2E
4C0A:  CLRF   2F
4C0C:  MOVWF  30
4C0E:  MOVWF  31
4C10:  MOVWF  32
4C12:  MOVWF  33
4C14:  CLRF   34
4C16:  MOVLW  01
4C18:  MOVWF  35
4C1A:  CLRF   36
4C1C:  CLRF   37
4C1E:  CLRF   38
4C20:  CLRF   39
4C22:  CLRF   3A
4C24:  CLRF   3B
4C26:  CLRF   3C
4C28:  CLRF   3D
4C2A:  CLRF   3E
4C2C:  CLRF   3F
4C2E:  CLRF   40
4C30:  CLRF   41
4C32:  BCF    42.0
4C34:  BCF    42.1
4C36:  BCF    42.2
4C38:  BCF    42.3
4C3A:  BCF    42.4
4C3C:  BCF    42.5
4C3E:  BCF    42.6
4C40:  BCF    42.7
4C42:  BCF    43.0
4C44:  BCF    43.1
4C46:  BCF    43.2
4C48:  BCF    43.3
4C4A:  BCF    43.4
4C4C:  CLRF   44
4C4E:  CLRF   53
4C50:  CLRF   52
4C52:  MOVLW  4B
4C54:  MOVWF  51
4C56:  MOVLW  86
4C58:  MOVWF  50
4C5A:  BCF    43.6
4C5C:  BCF    43.7
4C5E:  BCF    54.0
4C60:  BCF    54.1
4C62:  BCF    54.2
4C64:  BCF    54.3
4C66:  BCF    54.4
4C68:  BCF    54.5
4C6A:  BCF    54.6
4C6C:  CLRF   56
4C6E:  CLRF   55
4C70:  CLRF   58
4C72:  CLRF   57
4C74:  CLRF   5A
4C76:  CLRF   59
4C78:  CLRF   5C
4C7A:  CLRF   5B
4C7C:  MOVLW  19
4C7E:  MOVWF  x61
4C80:  MOVLW  53
4C82:  MOVWF  x60
4C84:  MOVLW  18
4C86:  MOVWF  5F
4C88:  MOVLW  68
4C8A:  MOVWF  5E
4C8C:  MOVLW  E9
4C8E:  MOVWF  x65
4C90:  MOVLW  BD
4C92:  MOVWF  x64
4C94:  MOVLW  C6
4C96:  MOVWF  x63
4C98:  MOVLW  71
4C9A:  MOVWF  x62
4C9C:  MOVLW  BE
4C9E:  MOVWF  x69
4CA0:  MOVLW  96
4CA2:  MOVWF  x68
4CA4:  MOVLW  24
4CA6:  MOVWF  x67
4CA8:  MOVLW  7A
4CAA:  MOVWF  x66
4CAC:  MOVLW  F3
4CAE:  MOVWF  x6D
4CB0:  MOVLW  5A
4CB2:  MOVWF  x6C
4CB4:  MOVLW  AB
4CB6:  MOVWF  x6B
4CB8:  MOVLW  81
4CBA:  MOVWF  x6A
4CBC:  CLRF   x71
4CBE:  CLRF   x70
4CC0:  CLRF   x6F
4CC2:  CLRF   x6E
4CC4:  CLRF   x75
4CC6:  CLRF   x74
4CC8:  CLRF   x73
4CCA:  CLRF   x72
4CCC:  CLRF   x79
4CCE:  CLRF   x78
4CD0:  CLRF   x77
4CD2:  CLRF   x76
4CD4:  CLRF   x7D
4CD6:  CLRF   x7C
4CD8:  CLRF   x7B
4CDA:  CLRF   x7A
4CDC:  CLRF   x81
4CDE:  CLRF   x80
4CE0:  CLRF   x7F
4CE2:  CLRF   x7E
4CE4:  CLRF   x85
4CE6:  CLRF   x84
4CE8:  CLRF   x83
4CEA:  CLRF   x82
4CEC:  CLRF   x89
4CEE:  CLRF   x88
4CF0:  CLRF   x87
4CF2:  CLRF   x86
4CF4:  CLRF   x8D
4CF6:  CLRF   x8C
4CF8:  CLRF   x8B
4CFA:  CLRF   x8A
4CFC:  CLRF   x91
4CFE:  CLRF   x90
4D00:  CLRF   x8F
4D02:  CLRF   x8E
4D04:  CLRF   x95
4D06:  CLRF   x94
4D08:  CLRF   x93
4D0A:  CLRF   x92
4D0C:  CLRF   x99
4D0E:  CLRF   x98
4D10:  CLRF   x97
4D12:  CLRF   x96
4D14:  CLRF   x9D
4D16:  CLRF   x9C
4D18:  CLRF   x9B
4D1A:  MOVLW  7F
4D1C:  MOVWF  x9A
4D1E:  CLRF   xA1
4D20:  CLRF   xA0
4D22:  CLRF   x9F
4D24:  CLRF   x9E
4D26:  MOVLW  08
4D28:  MOVWF  xD2
4D2A:  MOVF   FC1,W
4D2C:  ANDLW  C0
4D2E:  IORLW  0F
4D30:  MOVWF  FC1
4D32:  MOVLW  07
4D34:  MOVWF  FB4
4D36:  MOVLW  3E
4D38:  MOVWF  45
4D3A:  MOVLW  20
4D3C:  MOVWF  46
4D3E:  MOVLW  5E
4D40:  MOVWF  47
4D42:  CLRF   48
4D44:  CLRF   49
4D46:  CLRF   4A
4D48:  CLRF   4B
4D4A:  CLRF   4C
4D4C:  CLRF   4D
4D4E:  CLRF   4E
4D50:  CLRF   4F
4D52:  CLRF   xA2
4D54:  CLRF   xA3
4D56:  CLRF   xA4
4D58:  CLRF   xA5
4D5A:  CLRF   xA6
4D5C:  CLRF   xA7
4D5E:  CLRF   xA8
4D60:  CLRF   xA9
4D62:  CLRF   xAA
4D64:  CLRF   xAB
4D66:  CLRF   xAC
4D68:  CLRF   xAD
4D6A:  CLRF   xAE
4D6C:  CLRF   xAF
4D6E:  CLRF   xB0
4D70:  CLRF   xB1
4D72:  CLRF   xB2
4D74:  CLRF   xB3
4D76:  CLRF   xB4
4D78:  CLRF   xB5
4D7A:  CLRF   xB6
4D7C:  CLRF   xB7
4D7E:  CLRF   xB8
4D80:  CLRF   xB9
4D82:  CLRF   xBA
4D84:  CLRF   xBB
4D86:  CLRF   xBC
4D88:  CLRF   xBD
4D8A:  CLRF   xBE
4D8C:  CLRF   xBF
4D8E:  CLRF   xC0
4D90:  CLRF   xC1
4D92:  CLRF   xC2
4D94:  CLRF   xC3
4D96:  CLRF   xC4
4D98:  CLRF   xC5
4D9A:  CLRF   xC6
4D9C:  CLRF   xC7
4D9E:  CLRF   xC8
4DA0:  CLRF   xC9
4DA2:  CLRF   xCA
4DA4:  CLRF   xCB
4DA6:  CLRF   xCC
4DA8:  CLRF   xCD
4DAA:  CLRF   xCE
4DAC:  CLRF   xCF
4DAE:  CLRF   xD0
4DB0:  CLRF   xD1
....................    ConfigInicial(); 
4DB2:  GOTO   0CF4
....................    LeeEEPROM();             
4DB6:  GOTO   1134
....................    LimitaValores();  
4DBA:  GOTO   15B6
....................    Menu=200; 
4DBE:  MOVLW  C8
4DC0:  MOVWF  1C
....................    SalidasOff(); 
4DC2:  CALL   0AFC
....................    while(true){ 
....................  
....................    while(Menu==200){ 
4DC6:  MOVF   1C,W
4DC8:  SUBLW  C8
4DCA:  BNZ   4E8A
....................       SalidasOff(); 
4DCC:  CALL   0AFC
....................       if(RIGHT){ 
4DD0:  BSF    F96.1
4DD2:  BTFSC  F84.1
4DD4:  BRA    4E88
....................          delay_ms(1000); 
4DD6:  MOVLW  04
4DD8:  MOVWF  xD3
4DDA:  MOVLW  FA
4DDC:  MOVWF  xE9
4DDE:  CALL   0B20
4DE2:  DECFSZ xD3,F
4DE4:  BRA    4DDA
....................          if(RIGHT){    
4DE6:  BSF    F96.1
4DE8:  BTFSC  F84.1
4DEA:  BRA    4E88
....................             lcd_init(); 
4DEC:  CALL   0BC8
....................             intensidadpantalla(1); 
4DF0:  MOVLW  01
4DF2:  MOVWF  xD3
4DF4:  CALL   0B10
....................             lcd_gotoxy(1,1); 
4DF8:  MOVLW  01
4DFA:  MOVWF  xE9
4DFC:  MOVWF  xEA
4DFE:  CALL   0C20
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
4E02:  MOVLW  2E
4E04:  MOVWF  FF6
4E06:  MOVLW  0A
4E08:  MOVWF  FF7
4E0A:  CALL   1B48
....................             lcd_gotoxy(1,2); 
4E0E:  MOVLW  01
4E10:  MOVWF  xE9
4E12:  MOVLW  02
4E14:  MOVWF  xEA
4E16:  CALL   0C20
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
4E1A:  MOVLW  44
4E1C:  MOVWF  FF6
4E1E:  MOVLW  0A
4E20:  MOVWF  FF7
4E22:  CALL   1B48
....................             lcd_gotoxy(1,3); 
4E26:  MOVLW  01
4E28:  MOVWF  xE9
4E2A:  MOVLW  03
4E2C:  MOVWF  xEA
4E2E:  CALL   0C20
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
4E32:  MOVLW  5A
4E34:  MOVWF  FF6
4E36:  MOVLW  0A
4E38:  MOVWF  FF7
4E3A:  CALL   1B48
....................             lcd_gotoxy(1,4); 
4E3E:  MOVLW  01
4E40:  MOVWF  xE9
4E42:  MOVLW  04
4E44:  MOVWF  xEA
4E46:  CALL   0C20
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
4E4A:  MOVLW  70
4E4C:  MOVWF  FF6
4E4E:  MOVLW  0A
4E50:  MOVWF  FF7
4E52:  CALL   1B48
....................             delay_ms(2000); 
4E56:  MOVLW  08
4E58:  MOVWF  xD3
4E5A:  MOVLW  FA
4E5C:  MOVWF  xE9
4E5E:  CALL   0B20
4E62:  DECFSZ xD3,F
4E64:  BRA    4E5A
....................             printf(lcd_putc,"\f"); 
4E66:  MOVLW  0C
4E68:  MOVWF  xE8
4E6A:  CALL   0C92
....................             Menu=0; 
4E6E:  CLRF   1C
....................             printf(lcd_putc,"\f"); 
4E70:  MOVLW  0C
4E72:  MOVWF  xE8
4E74:  CALL   0C92
....................             delay_ms(500); 
4E78:  MOVLW  02
4E7A:  MOVWF  xD3
4E7C:  MOVLW  FA
4E7E:  MOVWF  xE9
4E80:  CALL   0B20
4E84:  DECFSZ xD3,F
4E86:  BRA    4E7C
....................          } 
....................       } 
....................    } 
4E88:  BRA    4DC6
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................     while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
4E8A:  MOVF   1C,F
4E8C:  BNZ   4EDC
....................       flag_latencia=1; 
4E8E:  BSF    43.0
....................       SalidasOff(); 
4E90:  CALL   0AFC
....................       if(Latencia==1){ 
4E94:  BTFSS  43.1
4E96:  BRA    4EA2
....................          printf(lcd_putc,"\f");reset_cpu(); 
4E98:  MOVLW  0C
4E9A:  MOVWF  xE8
4E9C:  CALL   0C92
4EA0:  RESET
....................       } 
....................        
....................       if(SolicitaContrasena(0,0,50,contrasena[0],contrasena[1],contrasena[2],contrasena[3])==1){ 
4EA2:  CLRF   xD3
4EA4:  CLRF   xD4
4EA6:  MOVLW  32
4EA8:  MOVWF  xD5
4EAA:  MOVFF  4C,D6
4EAE:  MOVFF  4D,D7
4EB2:  MOVFF  4E,D8
4EB6:  MOVFF  4F,D9
4EBA:  CALL   1C1E
4EBE:  DECFSZ 01,W
4EC0:  BRA    4EDA
....................          printf(lcd_putc,"\f");Aux_on;flag_latencia=0;Latencia=0;tiempo_purga=1; 
4EC2:  MOVLW  0C
4EC4:  MOVWF  xE8
4EC6:  CALL   0C92
4ECA:  BSF    F8A.6
4ECC:  BCF    F93.6
4ECE:  BCF    43.0
4ED0:  BCF    43.1
4ED2:  BSF    54.5
....................          t_latencia=0;flag_iniciodamper=1;  
4ED4:  CLRF   58
4ED6:  CLRF   57
4ED8:  BSF    54.0
....................       } 
....................    } 
4EDA:  BRA    4E8A
....................     
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
4EDC:  DECFSZ 1C,W
4EDE:  BRA    4EE4
....................       MenuPrincipal(); 
4EE0:  GOTO   20FC
....................    } 
....................  
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
4EE4:  MOVF   1C,W
4EE6:  SUBLW  02
4EE8:  BNZ   4EEE
....................       MenuAlarma(); 
4EEA:  GOTO   2328
....................    }       
....................  
....................    if(Menu == 3){ // Menu de Configuracion de Tiempos de Filtro 
4EEE:  MOVF   1C,W
4EF0:  SUBLW  03
4EF2:  BNZ   4EF8
....................       MenuFiltro();   
4EF4:  GOTO   2450
....................    } 
....................     
....................    if(Menu == 4){ // Menu de Configuracion de Tiempo de vida de filtro 
4EF8:  MOVF   1C,W
4EFA:  SUBLW  04
4EFC:  BNZ   4F02
....................       MenuSetpoint();   
4EFE:  GOTO   275C
....................    } 
....................     
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
4F02:  MOVF   1C,W
4F04:  SUBLW  05
4F06:  BNZ   4F28
....................       SolicitaContrasena(5,1,51,contrasena[0],contrasena[1],contrasena[2],contrasena[3]); 
4F08:  MOVLW  05
4F0A:  MOVWF  xD3
4F0C:  MOVLW  01
4F0E:  MOVWF  xD4
4F10:  MOVLW  33
4F12:  MOVWF  xD5
4F14:  MOVFF  4C,D6
4F18:  MOVFF  4D,D7
4F1C:  MOVFF  4E,D8
4F20:  MOVFF  4F,D9
4F24:  CALL   1C1E
....................    }       
....................  
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
4F28:  MOVF   1C,W
4F2A:  SUBLW  33
4F2C:  BNZ   4F32
....................       MenuCambioClave(); 
4F2E:  GOTO   2960
....................    }       
....................     
....................    if(Menu == 6){ 
4F32:  MOVF   1C,W
4F34:  SUBLW  06
4F36:  BNZ   4F3C
....................       MenuTiempoPurga(); 
4F38:  GOTO   2CE8
....................    } 
....................     
....................    if(Menu == 7){ 
4F3C:  MOVF   1C,W
4F3E:  SUBLW  07
4F40:  BNZ   4F46
....................       MenuTiempoPostPurga(); 
4F42:  GOTO   2F4C
....................    } 
....................     
....................    if(Menu == 8){ 
4F46:  MOVF   1C,W
4F48:  SUBLW  08
4F4A:  BNZ   4F7A
....................       while(SolicitaContrasena(8,1,71,4,4,4,4)==0 && Menu==8){} 
4F4C:  MOVLW  08
4F4E:  MOVWF  xD3
4F50:  MOVLW  01
4F52:  MOVWF  xD4
4F54:  MOVLW  47
4F56:  MOVWF  xD5
4F58:  MOVLW  04
4F5A:  MOVWF  xD6
4F5C:  MOVWF  xD7
4F5E:  MOVWF  xD8
4F60:  MOVWF  xD9
4F62:  CALL   1C1E
4F66:  MOVF   01,F
4F68:  BNZ   4F72
4F6A:  MOVF   1C,W
4F6C:  SUBLW  08
4F6E:  BNZ   4F72
4F70:  BRA    4F4C
....................       clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
4F72:  CLRF   48
4F74:  CLRF   49
4F76:  CLRF   4A
4F78:  CLRF   4B
....................    } 
....................     
....................    if(Menu == 71){ 
4F7A:  MOVF   1C,W
4F7C:  SUBLW  47
4F7E:  BNZ   4F84
....................       MenuServicio(); 
4F80:  GOTO   31AA
....................    } 
....................  
....................    if(Menu == 9){ 
4F84:  MOVF   1C,W
4F86:  SUBLW  09
4F88:  BNZ   4F8E
....................       MenuMedia(); 
4F8A:  GOTO   3414
....................    } 
....................  
....................    if(Menu == 10){// Menu de configuración de punto zero.    
4F8E:  MOVF   1C,W
4F90:  SUBLW  0A
4F92:  BNZ   4F98
....................       MenuPuntoCero(); 
4F94:  GOTO   3956
....................    } 
....................  
....................    if(Menu == 11){// Menu de Mantenimiento 
4F98:  MOVF   1C,W
4F9A:  SUBLW  0B
4F9C:  BNZ   4FA2
....................       MenuMantenimiento(); 
4F9E:  GOTO   3C90
....................    } 
....................     
....................    #ifdef DAMPER 
....................    if(Menu == 12){// Menu de Modo 
....................       MenuModo(); 
....................    } 
....................    #endif 
....................     
....................    #ifdef VARIADOR 
....................    if(Menu == 12){// Menu de Modo 
4FA2:  MOVF   1C,W
4FA4:  SUBLW  0C
4FA6:  BNZ   4FAC
....................       MenuVelocidad(); 
4FA8:  GOTO   4156
....................    } 
....................    #endif 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................    if(Menu==20){ 
4FAC:  MOVF   1C,W
4FAE:  SUBLW  14
4FB0:  BTFSS  FD8.2
4FB2:  BRA    52B6
....................       if(Lectura2==1){ 
4FB4:  BTFSS  43.7
4FB6:  BRA    50EE
....................          /*if(imprimio){ 
....................             letra=lcd_getc(1,1); 
....................             delay_ms(1); 
....................             if(letra!='J') 
....................                Ruido=1; 
....................          }*/ 
....................        
....................          lcd_gotoxy(1,1);                      
4FB8:  MOVLW  01
4FBA:  MOVWF  xE9
4FBC:  MOVWF  xEA
4FBE:  CALL   0C20
....................          printf(lcd_putc,"JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4FC2:  MOVLW  86
4FC4:  MOVWF  FF6
4FC6:  MOVLW  0A
4FC8:  MOVWF  FF7
4FCA:  CALL   1B48
....................          
....................          #ifdef VARIADOR 
....................          lcd_gotoxy(1,2); 
4FCE:  MOVLW  01
4FD0:  MOVWF  xE9
4FD2:  MOVLW  02
4FD4:  MOVWF  xEA
4FD6:  CALL   0C20
....................          vel=((float)tmp/254)*100; 
4FDA:  CLRF   xE1
4FDC:  MOVFF  2E,E0
4FE0:  CALL   0D3A
4FE4:  MOVFF  00,D3
4FE8:  MOVFF  01,D4
4FEC:  MOVFF  02,D5
4FF0:  MOVFF  03,D6
4FF4:  MOVFF  03,E2
4FF8:  MOVFF  02,E1
4FFC:  MOVFF  01,E0
5000:  MOVFF  00,DF
5004:  CLRF   xE6
5006:  CLRF   xE5
5008:  MOVLW  7E
500A:  MOVWF  xE4
500C:  MOVLW  86
500E:  MOVWF  xE3
5010:  CALL   0D70
5014:  MOVFF  00,D3
5018:  MOVFF  01,D4
501C:  MOVFF  02,D5
5020:  MOVFF  03,D6
5024:  MOVFF  03,EB
5028:  MOVFF  02,EA
502C:  MOVFF  01,E9
5030:  MOVFF  00,E8
5034:  CLRF   xEF
5036:  CLRF   xEE
5038:  MOVLW  48
503A:  MOVWF  xED
503C:  MOVLW  85
503E:  MOVWF  xEC
5040:  CALL   3596
5044:  MOVFF  03,1B
5048:  MOVFF  02,1A
504C:  MOVFF  01,19
5050:  MOVFF  00,18
....................          printf(lcd_putc,"Ext:%03i%%",(int8)vel); 
5054:  MOVFF  1B,D6
5058:  MOVFF  1A,D5
505C:  MOVFF  19,D4
5060:  MOVFF  18,D3
5064:  CALL   391E
5068:  MOVFF  01,D3
506C:  MOVLW  8E
506E:  MOVWF  FF6
5070:  MOVLW  0A
5072:  MOVWF  FF7
5074:  MOVLW  04
5076:  MOVWF  xDB
5078:  CALL   1B6A
507C:  MOVFF  D3,D4
5080:  MOVLW  03
5082:  MOVWF  xD5
5084:  CALL   288C
5088:  MOVLW  25
508A:  MOVWF  xE8
508C:  CALL   0C92
....................          #endif 
....................           
....................          #ifdef DAMPER 
....................          lcd_gotoxy(1,2); 
....................          printf(lcd_putc,"Ext:%2.0f%%",(100*((float)tmp/255)));          
....................          #endif 
....................           
....................          #ifdef FLUJO 
....................          lcd_gotoxy(1,3); 
....................          printf(lcd_putc,"InFlow: %2.1f (m/s) ",Flujo); 
....................           
....................          if(Flujo<0.5){ 
....................             lcd_gotoxy(11,2); 
....................             printf(lcd_putc,"Flujo:Bajo");       
....................          }else{ 
....................             if(Flujo>2.0){ 
....................                lcd_gotoxy(11,2); 
....................                printf(lcd_putc,"Flujo:Alto");                
....................             }else{ 
....................                lcd_gotoxy(11,2); 
....................                printf(lcd_putc,"Flujo:OK  ");       
....................             } 
....................          } 
....................          #else 
....................          lcd_gotoxy(1,3); 
5090:  MOVLW  01
5092:  MOVWF  xE9
5094:  MOVLW  03
5096:  MOVWF  xEA
5098:  CALL   0C20
....................          printf(lcd_putc,"Temperatura: %2.0f C",leeTemperatura()); 
509C:  GOTO   4378
50A0:  MOVFF  00,D3
50A4:  MOVFF  01,D4
50A8:  MOVFF  02,D5
50AC:  MOVFF  03,D6
50B0:  MOVLW  9A
50B2:  MOVWF  FF6
50B4:  MOVLW  0A
50B6:  MOVWF  FF7
50B8:  MOVLW  0D
50BA:  MOVWF  xDB
50BC:  CALL   1B6A
50C0:  MOVLW  01
50C2:  MOVWF  FE9
50C4:  MOVFF  D6,DE
50C8:  MOVFF  D5,DD
50CC:  MOVFF  D4,DC
50D0:  MOVFF  D3,DB
50D4:  CLRF   xDF
50D6:  CALL   3742
50DA:  MOVLW  20
50DC:  MOVWF  xE8
50DE:  CALL   0C92
50E2:  MOVLW  43
50E4:  MOVWF  xE8
50E6:  CALL   0C92
....................          #endif 
....................          imprimio=1; 
50EA:  BSF    43.3
....................          Lectura2=0; 
50EC:  BCF    43.7
....................       } 
....................        
....................       if(flag_filtro==1){ 
50EE:  BTFSS  43.2
50F0:  BRA    512C
....................          if(horas>=setpoint){ 
50F2:  MOVF   41,W
50F4:  SUBWF  38,W
50F6:  BNC   5112
....................             lcd_gotoxy(10,1);                      
50F8:  MOVLW  0A
50FA:  MOVWF  xE9
50FC:  MOVLW  01
50FE:  MOVWF  xEA
5100:  CALL   0C20
....................             printf(lcd_putc,"Filtro:CAM"); 
5104:  MOVLW  B0
5106:  MOVWF  FF6
5108:  MOVLW  0A
510A:  MOVWF  FF7
510C:  CALL   1B48
....................          }else{ 
5110:  BRA    512A
....................             lcd_gotoxy(10,1);                      
5112:  MOVLW  0A
5114:  MOVWF  xE9
5116:  MOVLW  01
5118:  MOVWF  xEA
511A:  CALL   0C20
....................             printf(lcd_putc,"Filtro:OK "); 
511E:  MOVLW  BC
5120:  MOVWF  FF6
5122:  MOVLW  0A
5124:  MOVWF  FF7
5126:  CALL   1B48
....................          } 
....................       }else{ 
512A:  BRA    5144
....................          lcd_gotoxy(10,1);                      
512C:  MOVLW  0A
512E:  MOVWF  xE9
5130:  MOVLW  01
5132:  MOVWF  xEA
5134:  CALL   0C20
....................          printf(lcd_putc,"Filtro:---"); 
5138:  MOVLW  C8
513A:  MOVWF  FF6
513C:  MOVLW  0A
513E:  MOVWF  FF7
5140:  CALL   1B48
....................       } 
....................        
....................       if(estadofl==1){ 
5144:  BTFSS  42.0
5146:  BRA    5166
....................          Luz_Blanca_on; 
5148:  BSF    F8A.4
514A:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
514C:  MOVLW  01
514E:  MOVWF  xE9
5150:  MOVLW  04
5152:  MOVWF  xEA
5154:  CALL   0C20
....................          printf(lcd_putc,"Luz:ON "); 
5158:  MOVLW  D4
515A:  MOVWF  FF6
515C:  MOVLW  0A
515E:  MOVWF  FF7
5160:  CALL   1B48
....................       }else{ 
5164:  BRA    5182
....................          Luz_Blanca_off; 
5166:  BCF    F8A.4
5168:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
516A:  MOVLW  01
516C:  MOVWF  xE9
516E:  MOVLW  04
5170:  MOVWF  xEA
5172:  CALL   0C20
....................          printf(lcd_putc,"Luz:OFF "); 
5176:  MOVLW  DC
5178:  MOVWF  FF6
517A:  MOVLW  0A
517C:  MOVWF  FF7
517E:  CALL   1B48
....................       } 
....................        
....................       if(estadomv==1){ 
5182:  BTFSS  42.1
5184:  BRA    51A8
....................          lcd_gotoxy(10,4); 
5186:  MOVLW  0A
5188:  MOVWF  xE9
518A:  MOVLW  04
518C:  MOVWF  xEA
518E:  CALL   0C20
....................          printf(lcd_putc,"Motor:ON "); 
5192:  MOVLW  E6
5194:  MOVWF  FF6
5196:  MOVLW  0A
5198:  MOVWF  FF7
519A:  CALL   1B48
....................          #ifdef VARIADOR 
....................          ajuste_vel(tmp); 
519E:  MOVFF  2E,D3
51A2:  CALL   4150
....................          #endif 
....................       }else{ 
51A6:  BRA    51C4
....................          #ifdef DAMPER 
....................          if(iniciodamper==1){ 
....................             //Motor_off;      
....................             ApagaMotor(); 
....................          } 
....................          #else 
....................          ApagaMotor(); 
51A8:  CALL   4428
....................          #endif 
....................          lcd_gotoxy(10,4); 
51AC:  MOVLW  0A
51AE:  MOVWF  xE9
51B0:  MOVLW  04
51B2:  MOVWF  xEA
51B4:  CALL   0C20
....................          printf(lcd_putc,"Motor:OFF ");  
51B8:  MOVLW  F0
51BA:  MOVWF  FF6
51BC:  MOVLW  0A
51BE:  MOVWF  FF7
51C0:  CALL   1B48
....................       } 
....................        
....................       if(DOWN){//Si oprime hacia Abajo 
51C4:  BSF    F96.0
51C6:  BTFSC  F84.0
51C8:  BRA    51EA
....................          delay_ms(20); 
51CA:  MOVLW  14
51CC:  MOVWF  xE9
51CE:  CALL   0B20
....................          if(DOWN && Flanco == 0){ 
51D2:  BSF    F96.0
51D4:  BTFSC  F84.0
51D6:  BRA    51E8
51D8:  BTFSC  42.4
51DA:  BRA    51E8
....................             Flanco = 1;delay_ms(200);estadofl=!estadofl; 
51DC:  BSF    42.4
51DE:  MOVLW  C8
51E0:  MOVWF  xE9
51E2:  CALL   0B20
51E6:  BTG    42.0
....................          } 
....................       }else{ 
51E8:  BRA    51EC
....................          Flanco = 0; 
51EA:  BCF    42.4
....................       } 
....................              
....................       if(LEFT){//Si oprime hacia Izquierda 
51EC:  BSF    F96.2
51EE:  BTFSC  F84.2
51F0:  BRA    5238
....................          delay_ms(20); 
51F2:  MOVLW  14
51F4:  MOVWF  xE9
51F6:  CALL   0B20
....................          if(LEFT && Flanco2 == 0){ 
51FA:  BSF    F96.2
51FC:  BTFSC  F84.2
51FE:  BRA    5236
5200:  BTFSC  42.6
5202:  BRA    5236
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
5204:  BSF    42.6
5206:  MOVLW  C8
5208:  MOVWF  xE9
520A:  CALL   0B20
520E:  BTG    42.1
....................             if(estadomv==1){ 
5210:  BTFSS  42.1
5212:  BRA    5226
....................                //Motor_on; 
....................                EnciendeMotor(); 
5214:  CALL   4446
....................                delay_ms(150); 
5218:  MOVLW  96
521A:  MOVWF  xE9
521C:  CALL   0B20
....................                lcd_init(); 
5220:  CALL   0BC8
....................             }else{ 
5224:  BRA    5236
....................                //Motor_off; 
....................                ApagaMotor(); 
5226:  CALL   4428
....................                delay_ms(150); 
522A:  MOVLW  96
522C:  MOVWF  xE9
522E:  CALL   0B20
....................                lcd_init(); 
5232:  CALL   0BC8
....................             } 
....................          } 
....................       }else{ 
5236:  BRA    523A
....................          Flanco2 = 0; 
5238:  BCF    42.6
....................       } 
....................     
....................       if(UP){// Si oprime Arriba 
523A:  BSF    F92.5
523C:  BTFSC  F80.5
523E:  BRA    527C
....................          delay_ms(20); 
5240:  MOVLW  14
5242:  MOVWF  xE9
5244:  CALL   0B20
....................          if(UP && Flanco1 == 0) { 
5248:  BSF    F92.5
524A:  BTFSC  F80.5
524C:  BRA    527A
524E:  BTFSC  42.5
5250:  BRA    527A
....................             /*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11; 
5252:  MOVLW  02
5254:  MOVWF  xD3
5256:  MOVLW  FA
5258:  MOVWF  xE9
525A:  CALL   0B20
525E:  DECFSZ xD3,F
5260:  BRA    5256
5262:  MOVLW  0C
5264:  MOVWF  xE8
5266:  CALL   0C92
526A:  MOVLW  01
526C:  MOVWF  1C
526E:  CLRF   44
5270:  MOVLW  02
5272:  MOVWF  1F
5274:  MOVWF  21
5276:  MOVLW  0B
5278:  MOVWF  1E
....................          } 
....................       }else{ 
527A:  BRA    527E
....................          Flanco1 = 0; 
527C:  BCF    42.5
....................       } 
....................              
....................       if(RIGHT){// Si oprime Derecha 
527E:  BSF    F96.1
5280:  BTFSC  F84.1
5282:  BRA    52B4
....................          delay_ms(20); 
5284:  MOVLW  14
5286:  MOVWF  xE9
5288:  CALL   0B20
....................          if(RIGHT && Flanco3 == 0){ 
528C:  BSF    F96.1
528E:  BTFSC  F84.1
5290:  BRA    52B2
5292:  BTFSC  42.7
5294:  BRA    52B2
....................             delay_ms(500);printf(lcd_putc,"\f");Menu=40; 
5296:  MOVLW  02
5298:  MOVWF  xD3
529A:  MOVLW  FA
529C:  MOVWF  xE9
529E:  CALL   0B20
52A2:  DECFSZ xD3,F
52A4:  BRA    529A
52A6:  MOVLW  0C
52A8:  MOVWF  xE8
52AA:  CALL   0C92
52AE:  MOVLW  28
52B0:  MOVWF  1C
....................          } 
....................       }else{ 
52B2:  BRA    52B6
....................          Flanco3 = 0; 
52B4:  BCF    42.7
....................       } 
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
....................    if(Menu == 30){ 
52B6:  MOVF   1C,W
52B8:  SUBLW  1E
52BA:  BNZ   52C0
....................       MenuPostPurga(); 
52BC:  GOTO   4464
....................    } 
....................  
....................    if(Menu == 40){ // Menu de apagado de cabina 
52C0:  MOVF   1C,W
52C2:  SUBLW  28
52C4:  BNZ   52CA
....................       MenuApagado(); 
52C6:  GOTO   462C
....................    }       
....................  
....................    if(Menu == 50){ // Menu de Purga 
52CA:  MOVF   1C,W
52CC:  SUBLW  32
52CE:  BNZ   52D2
....................       MenuPurga(); 
52D0:  BRA    4AE8
....................    }       
....................  
....................    if(tiemporeset>=60){ 
52D2:  MOVF   39,W
52D4:  SUBLW  3B
52D6:  BC    52DE
....................       lcd_init(); 
52D8:  CALL   0BC8
....................       tiemporeset=0; 
52DC:  CLRF   39
....................    }  
....................  
....................    if(Menu!=0 || Menu!=30){ 
52DE:  MOVF   1C,F
52E0:  BNZ   52E8
52E2:  MOVF   1C,W
52E4:  SUBLW  1E
52E6:  BZ    5346
....................       if(Lectura==1){ 
52E8:  BTFSS  43.6
52EA:  BRA    5342
....................          Flujo=Leer_Sensor_Flujo(MediaMovil); 
52EC:  MOVFF  2F,D3
52F0:  CALL   470C
52F4:  MOVFF  03,71
52F8:  MOVFF  02,70
52FC:  MOVFF  01,6F
5300:  MOVFF  00,6E
....................          #ifdef DAMPER 
....................          controlar_flujo(); 
....................          #endif 
....................           
....................          #ifdef FLUJOS 
....................          if(Flujo<0.5 && Menu==20){ 
....................               flag_latencia=1;  
....................               if(Latencia==1){ 
....................                  if(estadoalarma==1){ 
....................                     //Alarma_on; 
....................                     output_toggle(PIN_B7); 
....................                     estadopantalla=!estadopantalla; 
....................                  }else{ 
....................                     Alarma_off; 
....................                     estadopantalla=1; 
....................                  } 
....................                  if(estadopantalla==1) 
....................                   intensidadpantalla(contraste); 
....................                  else 
....................                   intensidadpantalla(0); 
....................                } 
....................             } 
....................          else{ 
....................             intensidadpantalla(contraste);Alarma_off; 
....................             if(Flujo>=0.5){ 
....................                Latencia=0;t_latencia=0;flag_latencia=0; 
....................             } 
....................          } 
....................          #else 
....................          if(horas>=setpoint && Menu==20){ 
5304:  MOVF   41,W
5306:  SUBWF  38,W
5308:  BNC   5336
530A:  MOVF   1C,W
530C:  SUBLW  14
530E:  BNZ   5336
....................              if(estadoalarma==1){ 
5310:  BTFSS  42.2
5312:  BRA    531A
....................                 //Alarma_on; 
....................                 output_toggle(PIN_B7); 
5314:  BCF    F93.7
5316:  BTG    F8A.7
....................              }else{ 
5318:  BRA    531E
....................                 Alarma_off; 
531A:  BCF    F8A.7
531C:  BCF    F93.7
....................              } 
....................              estadopantalla=!estadopantalla; 
531E:  BTG    42.3
....................              if(estadopantalla==1) 
5320:  BTFSS  42.3
5322:  BRA    532E
....................               intensidadpantalla(contraste); 
5324:  MOVFF  24,D3
5328:  CALL   0B10
....................              else 
532C:  BRA    5334
....................               intensidadpantalla(0); 
532E:  CLRF   xD3
5330:  CALL   0B10
....................          }else{ 
5334:  BRA    5342
....................             intensidadpantalla(contraste);Alarma_off; 
5336:  MOVFF  24,D3
533A:  CALL   0B10
533E:  BCF    F8A.7
5340:  BCF    F93.7
....................          } 
....................          #endif 
....................       } 
....................       Lectura=0; 
5342:  BCF    43.6
....................    }else{ 
5344:  BRA    535A
....................       intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
5346:  MOVFF  24,D3
534A:  CALL   0B10
534E:  BCF    F8A.7
5350:  BCF    F93.7
5352:  BCF    43.1
5354:  CLRF   58
5356:  CLRF   57
5358:  BCF    43.0
....................    } 
....................     
....................    if(Ruido){ 
535A:  BTFSS  43.4
535C:  BRA    5360
.................... //      Refresco(); 
....................       imprimio=0; 
535E:  BCF    43.3
....................    } 
....................  
....................    }        
5360:  BRA    4DC6
.................... } 
....................  
5362:  SLEEP 

Configuration Fuses:
   Word  1: C03F   XT IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
