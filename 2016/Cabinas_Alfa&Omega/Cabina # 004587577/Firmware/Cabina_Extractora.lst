CCS PCH C Compiler, Version 4.104, 5967               11-mar.-16 16:28

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2016\Cabina Extractora Simple\Cabina Extractora 290 - Manuelita\Firmware\Cabina_Extractora.lst

               ROM used: 18674 bytes (57%)
                         Largest free fragment is 14090
               RAM used: 263 (13%) at main() level
                         293 (14%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   164E
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina Extractora de Gases y humos. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz Blanca, Motor Ventilador, Intensidad de Pantalla, Alarma y Cambio de Contraseña. 
.................... // Tiene Lector de velocidad de aire. 
.................... // Tiene control de velocidad de aire por Damper. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
.................... //* Lectura de sensor de vidrio. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=4000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,MCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
08E2:  MOVLW  01
08E4:  MOVWF  FEA
08E6:  MOVLW  1B
08E8:  MOVWF  FE9
08EA:  MOVF   FEF,W
08EC:  BZ    090A
08EE:  MOVLW  0F
08F0:  MOVWF  01
08F2:  CLRF   00
08F4:  DECFSZ 00,F
08F6:  BRA    08F4
08F8:  DECFSZ 01,F
08FA:  BRA    08F2
08FC:  MOVLW  8F
08FE:  MOVWF  00
0900:  DECFSZ 00,F
0902:  BRA    0900
0904:  NOP   
0906:  DECFSZ FEF,F
0908:  BRA    08EE
090A:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rw;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN enable;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_cycles(25); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(25); 
....................       lcd.enable = 1; 
....................       delay_us(25); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
090C:  MOVLB  1
090E:  SWAPF  x1C,W
0910:  ANDLW  F0
0912:  MOVWF  00
0914:  MOVLW  0F
0916:  ANDWF  F83,W
0918:  IORWF  00,W
091A:  MOVWF  F83
....................       delay_cycles(25); 
091C:  MOVLW  08
091E:  MOVWF  00
0920:  DECFSZ 00,F
0922:  BRA    0920
....................       lcd.enable = 1; 
0924:  BSF    F83.2
....................       delay_us(55); 
0926:  MOVLW  DB
0928:  MOVWF  00
092A:  DECFSZ 00,F
092C:  BRA    092A
092E:  BRA    0930
....................       lcd.enable = 0; 
0930:  BCF    F83.2
.................... } 
0932:  MOVLB  0
0934:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0936:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0938:  MOVLW  01
093A:  MOVLB  1
093C:  MOVWF  x1B
093E:  MOVLB  0
0940:  RCALL  08E2
....................       lcd.rs = address; 
0942:  MOVLB  1
0944:  BTFSS  x19.0
0946:  BCF    F83.1
0948:  BTFSC  x19.0
094A:  BSF    F83.1
....................       delay_cycles(25); 
094C:  MOVLW  08
094E:  MOVWF  00
0950:  DECFSZ 00,F
0952:  BRA    0950
....................       lcd.rw = 0; 
0954:  BCF    F83.0
....................       delay_cycles(25); 
0956:  MOVLW  08
0958:  MOVWF  00
095A:  DECFSZ 00,F
095C:  BRA    095A
....................       lcd.enable = 0; 
095E:  BCF    F83.2
....................       lcd_send_nibble(n >> 4); 
0960:  SWAPF  x1A,W
0962:  MOVWF  x1B
0964:  MOVLW  0F
0966:  ANDWF  x1B,F
0968:  MOVFF  11B,11C
096C:  MOVLB  0
096E:  RCALL  090C
....................       lcd_send_nibble(n & 0xf); 
0970:  MOVLB  1
0972:  MOVF   x1A,W
0974:  ANDLW  0F
0976:  MOVWF  x1B
0978:  MOVWF  x1C
097A:  MOVLB  0
097C:  RCALL  090C
.................... } 
097E:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0980:  MOVLW  00
0982:  MOVWF  F95
....................     lcd.rs = 0; 
0984:  BCF    F83.1
....................     lcd.rw = 0; 
0986:  BCF    F83.0
....................     lcd.enable = 0; 
0988:  BCF    F83.2
....................     delay_ms(15); 
098A:  MOVLW  0F
098C:  MOVLB  1
098E:  MOVWF  x1B
0990:  MOVLB  0
0992:  RCALL  08E2
....................     for(i=1;i<=3;++i) { 
0994:  MOVLW  01
0996:  MOVWF  xFF
0998:  MOVF   xFF,W
099A:  SUBLW  03
099C:  BNC   09B6
....................        lcd_send_nibble(3); 
099E:  MOVLW  03
09A0:  MOVLB  1
09A2:  MOVWF  x1C
09A4:  MOVLB  0
09A6:  RCALL  090C
....................        delay_ms(5); 
09A8:  MOVLW  05
09AA:  MOVLB  1
09AC:  MOVWF  x1B
09AE:  MOVLB  0
09B0:  RCALL  08E2
....................     } 
09B2:  INCF   xFF,F
09B4:  BRA    0998
....................     lcd_send_nibble(2); 
09B6:  MOVLW  02
09B8:  MOVLB  1
09BA:  MOVWF  x1C
09BC:  MOVLB  0
09BE:  RCALL  090C
....................     for(i=0;i<=3;++i) 
09C0:  CLRF   xFF
09C2:  MOVF   xFF,W
09C4:  SUBLW  03
09C6:  BNC   09EA
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
09C8:  CLRF   03
09CA:  MOVF   xFF,W
09CC:  MOVFF  FF2,100
09D0:  BCF    FF2.7
09D2:  CALL   0096
09D6:  MOVLB  1
09D8:  BTFSC  x00.7
09DA:  BSF    FF2.7
09DC:  MOVWF  x00
09DE:  CLRF   x19
09E0:  MOVWF  x1A
09E2:  MOVLB  0
09E4:  RCALL  0936
09E6:  INCF   xFF,F
09E8:  BRA    09C2
.................... } 
09EA:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
09EC:  MOVLW  01
09EE:  MOVLB  1
09F0:  SUBWF  x17,W
09F2:  ADDLW  FC
09F4:  BC    0A20
09F6:  ADDLW  04
09F8:  MOVLB  0
09FA:  GOTO   0A32
....................      case 1 : address=0x80;break; 
09FE:  MOVLW  80
0A00:  MOVLB  1
0A02:  MOVWF  x18
0A04:  BRA    0A20
....................      case 2 : address=0xc0;break; 
0A06:  MOVLW  C0
0A08:  MOVLB  1
0A0A:  MOVWF  x18
0A0C:  BRA    0A20
....................      case 3 : address=0x94;break; 
0A0E:  MOVLW  94
0A10:  MOVLB  1
0A12:  MOVWF  x18
0A14:  BRA    0A20
....................      case 4 : address=0xd4;break; 
0A16:  MOVLW  D4
0A18:  MOVLB  1
0A1A:  MOVWF  x18
0A1C:  BRA    0A20
0A1E:  MOVLB  1
....................    } 
....................    address+=x-1; 
0A20:  MOVLW  01
0A22:  SUBWF  x16,W
0A24:  ADDWF  x18,F
....................    lcd_send_byte(0,address); 
0A26:  CLRF   x19
0A28:  MOVFF  118,11A
0A2C:  MOVLB  0
0A2E:  RCALL  0936
.................... } 
0A30:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
.................... if(c=='ñ') 
*
0A5E:  MOVLB  1
0A60:  MOVF   x15,W
0A62:  SUBLW  F1
0A64:  BNZ   0A6A
....................     c=238; 
0A66:  MOVLW  EE
0A68:  MOVWF  x15
....................    switch (c) { 
0A6A:  MOVF   x15,W
0A6C:  XORLW  0C
0A6E:  MOVLB  0
0A70:  BZ    0A7C
0A72:  XORLW  06
0A74:  BZ    0A98
0A76:  XORLW  02
0A78:  BZ    0AAA
0A7A:  BRA    0AB8
....................      case '\f'   : lcd_send_byte(0,1); 
0A7C:  MOVLB  1
0A7E:  CLRF   x19
0A80:  MOVLW  01
0A82:  MOVWF  x1A
0A84:  MOVLB  0
0A86:  RCALL  0936
....................                    lcdline=1; 
0A88:  MOVLW  01
0A8A:  MOVWF  16
....................                    delay_ms(2); 
0A8C:  MOVLW  02
0A8E:  MOVLB  1
0A90:  MOVWF  x1B
0A92:  MOVLB  0
0A94:  RCALL  08E2
....................                                            break; 
0A96:  BRA    0AC8
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0A98:  INCF   16,F
0A9A:  MOVLW  01
0A9C:  MOVLB  1
0A9E:  MOVWF  x16
0AA0:  MOVFF  16,117
0AA4:  MOVLB  0
0AA6:  RCALL  09EC
0AA8:  BRA    0AC8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0AAA:  MOVLB  1
0AAC:  CLRF   x19
0AAE:  MOVLW  10
0AB0:  MOVWF  x1A
0AB2:  MOVLB  0
0AB4:  RCALL  0936
0AB6:  BRA    0AC8
....................      default     : lcd_send_byte(1,c);     break; 
0AB8:  MOVLW  01
0ABA:  MOVLB  1
0ABC:  MOVWF  x19
0ABE:  MOVFF  115,11A
0AC2:  MOVLB  0
0AC4:  RCALL  0936
0AC6:  BRA    0AC8
....................    } 
.................... } 
0AC8:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   RIGHT         input(PIN_B0) 
.................... #define   LEFT          input(PIN_B1) 
.................... #define   DOWN          input(PIN_B2) 
.................... #define   UP            input(PIN_B3) 
....................  
.................... // Definición de otros puertos 
....................  
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,0) 
.................... #define   Damper_on         output_bit(PIN_B6,1) 
.................... #define   Damper_off        output_bit(PIN_B6,0) 
.................... #define   Alarma_on         output_bit(PIN_B5,1) 
.................... #define   Alarma_off        output_bit(PIN_B5,0) 
.................... #define   Motor_on          output_bit(PIN_B7,1) 
.................... #define   Motor_off         output_bit(PIN_B7,0)    
.................... #define   Pantalla_on       output_bit(PIN_C1,1) 
.................... #define   Pantalla_off      output_bit(PIN_C1,0) 
....................  
.................... int8 Menu=100, n_opcionH=9,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,contraste=10; 
.................... int8 Entero=0,Decimal1=0,Decimal2=0,Entero1=0,Decimal12=0,n=0,l=0,h=0,tmp=10,MediaMovil=0,negativo=10,Automa=10,Manual=10,Semi=10,ValorSemi=0; 
.................... int8 segundos=0,minutos=0,horas=0,tiemporeset=0; 
.................... short estadofl=0,estadomv=0,estadoalarma=0,estadopantalla=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,flag_latencia=0,Latencia=0,flag_filtro=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... float setpoint=0.0,zero=0,zero_fabrica=203.0; 
.................... short ModoSleep,inicio=0,Lectura=0,Lectura2=0,flag_iniciodamper=0,iniciodamper=0,ModoManual=0,ModoAuto=0,ModoSemi=0; 
.................... int16 tiempos=0,t_latencia=0,tiempos2=0,t_iniciodamper=0; 
.................... float Beta=3550,R25=1350,T0=298.15,TK=0,TC=0,Rdivisor=1000,Rntc=0.0,Voltaje0=0.0,Voltaje1=0.0; 
.................... //float a=24.9616,b=-175.3954,c=489.5268,d=-440.7857; 
....................   
.................... //float a=-0.00000007109886647647915,b=0.0003576135181122329,c= -0.169922240146291,d= 19.248973132140719;//Sensor 1 Posible dañado 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float Flujo=0.0,Flujo2=0.0,x=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,K=0.2246,Temporal=0.0,Temporal2=0.0,Velocidad=0.0; 
.................... float Temporal1=0.0,Temporal12=0.0,Diferencia=0.0,Ajuste1=1.0; 
.................... float Tcalibracion=656.0,correccion=0.0,error=0.0; 
.................... float promedio[12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
15F0:  MOVLB  1
15F2:  RLCF   x04,W
15F4:  MOVWF  00
15F6:  RLCF   00,F
15F8:  MOVLW  FC
15FA:  ANDWF  00,F
15FC:  MOVFF  00,01
1600:  MOVF   FC2,W
1602:  ANDLW  C3
1604:  IORWF  00,W
1606:  MOVWF  FC2
1608:  MOVLW  0A
160A:  MOVWF  x1B
160C:  MOVLB  0
160E:  CALL   08E2
1612:  BSF    FC2.1
1614:  BTFSC  FC2.1
1616:  BRA    1614
1618:  MOVFF  FC4,10A
161C:  MOVFF  FC3,109
1620:  MOVLB  0
1622:  CALL   0ACA
1626:  MOVFF  03,108
162A:  MOVFF  02,107
162E:  MOVFF  01,106
1632:  MOVFF  00,105
1636:  MOVFF  105,00
163A:  MOVFF  106,01
163E:  MOVFF  107,02
1642:  MOVFF  108,03
.................... } 
1646:  RETLW  00
....................  
.................... void intensidadpantalla(int x) 
.................... { 
....................    if(x==0) 
*
0ED6:  MOVLB  1
0ED8:  MOVF   x00,F
0EDA:  BNZ   0EE2
....................    { 
....................       //set_pwm2_duty(0); 
....................       Pantalla_off; 
0EDC:  BCF    F8B.1
0EDE:  BCF    F94.1
....................    } 
....................    else 
0EE0:  BRA    0EE6
....................    { 
....................       Pantalla_on; 
0EE2:  BSF    F8B.1
0EE4:  BCF    F94.1
....................       //set_pwm2_duty(255/(11-x)); 
....................    } 
.................... } 
0EE6:  MOVLB  0
0EE8:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     Voltaje0=sensores(0)*5/1023; 
....................     Voltaje1=sensores(1)*5/1023; 
....................     Rntc=Rdivisor/((5.0/Voltaje1)-1); 
....................     TK=1/((log(Rntc/R25)/Beta)+(1/T0)); 
....................     TC=TK-273.15; 
....................     //correccion=Tcalibracion/sensores(1);// Se hace la division inversa debido a que se lee directamente el conversor y es una NTC. 
....................     if(negativo==10) 
....................     { 
....................       x_uno=sensores(0)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(0)-Diferencia; 
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
....................     x_cubo=x_uno*x_cuadrado; 
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
....................     if(Velocidad<0.0) 
....................      {Velocidad=0.0;} 
....................       
....................      if(l>=media) 
....................        {l=0;} 
....................       
....................      promedio[l]=Velocidad;l++; 
....................      Flujo2=0; 
....................         for(h=0;h<=(media-1);h++) 
....................         { 
....................            Flujo2+=promedio[h]; 
....................         }  
....................            Flujo2=(Flujo2/media)*Ajuste1;  
....................            return Flujo2; 
.................... } 
....................  
.................... void controlar_flujo(void) 
.................... { 
....................    if(Automa==20 && estadomv==1) 
....................    { 
....................       error=setpoint-Flujo;      // Cálculo del error ****** 
....................       if(error<0.2&&error>-0.2) 
....................       {} 
....................       else 
....................       { 
....................          if(error>0.0) 
....................          {tmp+=1;} 
....................                 
....................          if(error<-0.0) 
....................          {tmp-=1;}   
....................       } 
....................        
....................       if(tmp>251) 
....................       {tmp=251;} 
....................       if(tmp<4)          
....................       {tmp=4;}       
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Manual==20) 
....................    { 
....................       tmp=251; 
....................       set_pwm1_duty (tmp); 
....................    } 
....................     
....................    if(Semi==20) 
....................    { 
....................       set_pwm1_duty (ValorSemi); 
....................    } 
.................... } 
.................... /* 
.................... #INT_EXT 
.................... void ext_isr() { 
....................       if(inicio==0) 
....................       { 
....................       delay_ms(500); 
....................          if(input(PIN_B0)) 
....................          { 
....................             lcd_init(); 
....................             intensidadpantalla(contraste); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
....................             delay_ms(2000); 
....................             printf(lcd_putc,"\f"); 
....................             inicio=1; 
....................             Menu=0; 
....................             ModoSleep=0; 
....................             delay_ms(500); 
....................          } 
....................       } 
.................... }*/ 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................  
....................    set_timer1(5536);  // 5  ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   4F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   50,F
....................    tiempos2++; 
00C2:  INCF   53,F
00C4:  BTFSC  FD8.2
00C6:  INCF   54,F
....................     
....................    if(t_latencia>=3000) 
00C8:  MOVF   52,W
00CA:  SUBLW  0A
00CC:  BC    00DA
00CE:  XORLW  FF
00D0:  BNZ   00D8
00D2:  MOVF   51,W
00D4:  SUBLW  B7
00D6:  BC    00DA
....................    {Latencia=1;} 
00D8:  BSF    35.1
....................     
....................    if(flag_latencia==1) 
00DA:  BTFSS  35.0
00DC:  BRA    00E4
....................    { 
....................       t_latencia++;          
00DE:  INCF   51,F
00E0:  BTFSC  FD8.2
00E2:  INCF   52,F
....................    } 
....................     
....................    if(tiempos2==20) 
00E4:  MOVF   53,W
00E6:  SUBLW  14
00E8:  BNZ   00F4
00EA:  MOVF   54,F
00EC:  BNZ   00F4
....................    {tiempos2=0;Lectura2=1;} 
00EE:  CLRF   54
00F0:  CLRF   53
00F2:  BSF    35.6
....................     
....................    if(tiempos==200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00F4:  MOVF   4F,W
00F6:  SUBLW  C8
00F8:  BNZ   0124
00FA:  MOVF   50,F
00FC:  BNZ   0124
....................    {tiempos=0;tiemporeset++; 
00FE:  CLRF   50
0100:  CLRF   4F
0102:  INCF   33,F
....................         Lectura=1; 
0104:  BSF    35.5
....................           
....................          if(estadomv==1 && flag_filtro==1) 
0106:  BTFSS  34.1
0108:  BRA    0124
010A:  BTFSS  35.2
010C:  BRA    0124
....................          { 
....................             segundos++; 
010E:  INCF   30,F
....................           
....................          if(segundos==60) 
0110:  MOVF   30,W
0112:  SUBLW  3C
0114:  BNZ   011A
....................          { 
....................             segundos=0;minutos++; 
0116:  CLRF   30
0118:  INCF   31,F
....................          } 
....................           
....................          if(minutos==60) 
011A:  MOVF   31,W
011C:  SUBLW  3C
011E:  BNZ   0124
....................          { 
....................             minutos=0;horas++; 
0120:  CLRF   31
0122:  INCF   32,F
....................          } 
....................          } 
....................    } 
.................... } 
....................  
0124:  BCF    F9E.0
0126:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {     
....................    if(x==1) 
*
103C:  MOVLB  1
103E:  DECFSZ x01,W
1040:  BRA    107A
....................    {if(estadoalarma==0) 
1042:  BTFSC  34.2
1044:  BRA    105E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1046:  MOVLW  02
1048:  MOVWF  x16
104A:  MOVFF  102,117
104E:  MOVLB  0
1050:  RCALL  09EC
1052:  MOVLW  2A
1054:  MOVWF  FF6
1056:  MOVLW  01
1058:  MOVWF  FF7
105A:  RCALL  0EEA
105C:  MOVLB  1
....................    if(estadoalarma==1) 
105E:  BTFSS  34.2
1060:  BRA    107A
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1062:  MOVLW  02
1064:  MOVWF  x16
1066:  MOVFF  102,117
106A:  MOVLB  0
106C:  RCALL  09EC
106E:  MOVLW  3E
1070:  MOVWF  FF6
1072:  MOVLW  01
1074:  MOVWF  FF7
1076:  RCALL  0EEA
1078:  MOVLB  1
....................    } 
....................     
....................    if(x==2) 
107A:  MOVF   x01,W
107C:  SUBLW  02
107E:  BNZ   1098
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Filtro             ");} 
1080:  MOVLW  02
1082:  MOVWF  x16
1084:  MOVFF  102,117
1088:  MOVLB  0
108A:  RCALL  09EC
108C:  MOVLW  52
108E:  MOVWF  FF6
1090:  MOVLW  01
1092:  MOVWF  FF7
1094:  RCALL  0EEA
1096:  MOVLB  1
....................     
....................    if(x==3) 
1098:  MOVF   x01,W
109A:  SUBLW  03
109C:  BNZ   10B6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Setpoint           ");} 
109E:  MOVLW  02
10A0:  MOVWF  x16
10A2:  MOVFF  102,117
10A6:  MOVLB  0
10A8:  RCALL  09EC
10AA:  MOVLW  66
10AC:  MOVWF  FF6
10AE:  MOVLW  01
10B0:  MOVWF  FF7
10B2:  RCALL  0EEA
10B4:  MOVLB  1
....................     
....................    if(x==4) 
10B6:  MOVF   x01,W
10B8:  SUBLW  04
10BA:  BNZ   10D4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
10BC:  MOVLW  02
10BE:  MOVWF  x16
10C0:  MOVFF  102,117
10C4:  MOVLB  0
10C6:  RCALL  09EC
10C8:  MOVLW  7A
10CA:  MOVWF  FF6
10CC:  MOVLW  01
10CE:  MOVWF  FF7
10D0:  RCALL  0EEA
10D2:  MOVLB  1
....................     
....................    if(x==5) 
10D4:  MOVF   x01,W
10D6:  SUBLW  05
10D8:  BNZ   10F2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Media Movil        ");} 
10DA:  MOVLW  02
10DC:  MOVWF  x16
10DE:  MOVFF  102,117
10E2:  MOVLB  0
10E4:  RCALL  09EC
10E6:  MOVLW  8E
10E8:  MOVWF  FF6
10EA:  MOVLW  01
10EC:  MOVWF  FF7
10EE:  RCALL  0EEA
10F0:  MOVLB  1
....................     
....................    if(x==6) 
10F2:  MOVF   x01,W
10F4:  SUBLW  06
10F6:  BNZ   1110
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
10F8:  MOVLW  02
10FA:  MOVWF  x16
10FC:  MOVFF  102,117
1100:  MOVLB  0
1102:  RCALL  09EC
1104:  MOVLW  A2
1106:  MOVWF  FF6
1108:  MOVLW  01
110A:  MOVWF  FF7
110C:  RCALL  0EEA
110E:  MOVLB  1
....................     
....................    if(x==7) 
1110:  MOVF   x01,W
1112:  SUBLW  07
1114:  BNZ   112E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Mantenimiento      ");} 
1116:  MOVLW  02
1118:  MOVWF  x16
111A:  MOVFF  102,117
111E:  MOVLB  0
1120:  RCALL  09EC
1122:  MOVLW  B6
1124:  MOVWF  FF6
1126:  MOVLW  01
1128:  MOVWF  FF7
112A:  RCALL  0EEA
112C:  MOVLB  1
....................     
....................    if(x==8) 
112E:  MOVF   x01,W
1130:  SUBLW  08
1132:  BNZ   114C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Modo               ");} 
1134:  MOVLW  02
1136:  MOVWF  x16
1138:  MOVFF  102,117
113C:  MOVLB  0
113E:  RCALL  09EC
1140:  MOVLW  CA
1142:  MOVWF  FF6
1144:  MOVLW  01
1146:  MOVWF  FF7
1148:  RCALL  0EEA
114A:  MOVLB  1
.................... } 
114C:  MOVLB  0
114E:  RETLW  00
....................  
.................... void ajustar_damper(int8 cicloutil){ 
....................    set_pwm1_duty (cicloutil); 
*
1648:  MOVFF  100,FBE
.................... } 
164C:  RETLW  00
....................  
.................... void main () 
.................... { 
164E:  CLRF   FF8
1650:  BCF    FD0.7
1652:  BSF    07.7
1654:  CLRF   FEA
1656:  CLRF   FE9
1658:  MOVLW  64
165A:  MOVWF  17
165C:  MOVLW  09
165E:  MOVWF  18
1660:  MOVLW  02
1662:  MOVWF  19
1664:  MOVLW  0B
1666:  MOVWF  1A
1668:  MOVLW  02
166A:  MOVWF  1B
166C:  MOVLW  03
166E:  MOVWF  1C
1670:  MOVLW  02
1672:  MOVWF  1D
1674:  MOVWF  1E
1676:  MOVLW  04
1678:  MOVWF  1F
167A:  MOVLW  0A
167C:  MOVWF  20
167E:  CLRF   21
1680:  CLRF   22
1682:  CLRF   23
1684:  CLRF   24
1686:  CLRF   25
1688:  CLRF   26
168A:  CLRF   27
168C:  CLRF   28
168E:  MOVWF  29
1690:  CLRF   2A
1692:  MOVWF  2B
1694:  MOVWF  2C
1696:  MOVWF  2D
1698:  MOVWF  2E
169A:  CLRF   2F
169C:  CLRF   30
169E:  CLRF   31
16A0:  CLRF   32
16A2:  CLRF   33
16A4:  BCF    34.0
16A6:  BCF    34.1
16A8:  BCF    34.2
16AA:  BCF    34.3
16AC:  BCF    34.4
16AE:  BCF    34.5
16B0:  BCF    34.6
16B2:  BCF    34.7
16B4:  BCF    35.0
16B6:  BCF    35.1
16B8:  BCF    35.2
16BA:  CLRF   36
16BC:  CLRF   45
16BE:  CLRF   44
16C0:  CLRF   43
16C2:  CLRF   42
16C4:  CLRF   49
16C6:  CLRF   48
16C8:  CLRF   47
16CA:  CLRF   46
16CC:  CLRF   4D
16CE:  CLRF   4C
16D0:  MOVLW  4B
16D2:  MOVWF  4B
16D4:  MOVLW  86
16D6:  MOVWF  4A
16D8:  BCF    35.4
16DA:  BCF    35.5
16DC:  BCF    35.6
16DE:  BCF    35.7
16E0:  BCF    4E.0
16E2:  BCF    4E.1
16E4:  BCF    4E.2
16E6:  BCF    4E.3
16E8:  CLRF   50
16EA:  CLRF   4F
16EC:  CLRF   52
16EE:  CLRF   51
16F0:  CLRF   54
16F2:  CLRF   53
16F4:  CLRF   56
16F6:  CLRF   55
16F8:  CLRF   5A
16FA:  MOVLW  E0
16FC:  MOVWF  59
16FE:  MOVLW  5D
1700:  MOVWF  58
1702:  MOVLW  8A
1704:  MOVWF  57
1706:  CLRF   5E
1708:  MOVLW  C0
170A:  MOVWF  5D
170C:  MOVLW  28
170E:  MOVWF  5C
1710:  MOVLW  89
1712:  MOVWF  5B
1714:  MOVLW  33
1716:  MOVWF  x62
1718:  MOVLW  13
171A:  MOVWF  x61
171C:  MOVLW  15
171E:  MOVWF  x60
1720:  MOVLW  87
1722:  MOVWF  5F
1724:  CLRF   x66
1726:  CLRF   x65
1728:  CLRF   x64
172A:  CLRF   x63
172C:  CLRF   x6A
172E:  CLRF   x69
1730:  CLRF   x68
1732:  CLRF   x67
1734:  CLRF   x6E
1736:  CLRF   x6D
1738:  MOVLW  7A
173A:  MOVWF  x6C
173C:  MOVLW  88
173E:  MOVWF  x6B
1740:  CLRF   x72
1742:  CLRF   x71
1744:  CLRF   x70
1746:  CLRF   x6F
1748:  CLRF   x76
174A:  CLRF   x75
174C:  CLRF   x74
174E:  CLRF   x73
1750:  CLRF   x7A
1752:  CLRF   x79
1754:  CLRF   x78
1756:  CLRF   x77
1758:  MOVLW  19
175A:  MOVWF  x7E
175C:  MOVLW  53
175E:  MOVWF  x7D
1760:  MOVLW  18
1762:  MOVWF  x7C
1764:  MOVLW  68
1766:  MOVWF  x7B
1768:  MOVLW  E9
176A:  MOVWF  x82
176C:  MOVLW  BD
176E:  MOVWF  x81
1770:  MOVLW  C6
1772:  MOVWF  x80
1774:  MOVLW  71
1776:  MOVWF  x7F
1778:  MOVLW  BE
177A:  MOVWF  x86
177C:  MOVLW  96
177E:  MOVWF  x85
1780:  MOVLW  24
1782:  MOVWF  x84
1784:  MOVLW  7A
1786:  MOVWF  x83
1788:  MOVLW  F3
178A:  MOVWF  x8A
178C:  MOVLW  5A
178E:  MOVWF  x89
1790:  MOVLW  AB
1792:  MOVWF  x88
1794:  MOVLW  81
1796:  MOVWF  x87
1798:  CLRF   x8E
179A:  CLRF   x8D
179C:  CLRF   x8C
179E:  CLRF   x8B
17A0:  CLRF   x92
17A2:  CLRF   x91
17A4:  CLRF   x90
17A6:  CLRF   x8F
17A8:  CLRF   x96
17AA:  CLRF   x95
17AC:  CLRF   x94
17AE:  CLRF   x93
17B0:  CLRF   x9A
17B2:  CLRF   x99
17B4:  CLRF   x98
17B6:  CLRF   x97
17B8:  CLRF   x9E
17BA:  CLRF   x9D
17BC:  CLRF   x9C
17BE:  CLRF   x9B
17C0:  CLRF   xA2
17C2:  CLRF   xA1
17C4:  CLRF   xA0
17C6:  CLRF   x9F
17C8:  MOVLW  8B
17CA:  MOVWF  xA6
17CC:  MOVLW  FD
17CE:  MOVWF  xA5
17D0:  MOVLW  65
17D2:  MOVWF  xA4
17D4:  MOVLW  7C
17D6:  MOVWF  xA3
17D8:  CLRF   xAA
17DA:  CLRF   xA9
17DC:  CLRF   xA8
17DE:  CLRF   xA7
17E0:  CLRF   xAE
17E2:  CLRF   xAD
17E4:  CLRF   xAC
17E6:  CLRF   xAB
17E8:  CLRF   xB2
17EA:  CLRF   xB1
17EC:  CLRF   xB0
17EE:  CLRF   xAF
17F0:  CLRF   xB6
17F2:  CLRF   xB5
17F4:  CLRF   xB4
17F6:  CLRF   xB3
17F8:  CLRF   xBA
17FA:  CLRF   xB9
17FC:  CLRF   xB8
17FE:  CLRF   xB7
1800:  CLRF   xBE
1802:  CLRF   xBD
1804:  CLRF   xBC
1806:  CLRF   xBB
1808:  CLRF   xC2
180A:  CLRF   xC1
180C:  CLRF   xC0
180E:  MOVLW  7F
1810:  MOVWF  xBF
1812:  CLRF   xC6
1814:  CLRF   xC5
1816:  MOVLW  24
1818:  MOVWF  xC4
181A:  MOVLW  88
181C:  MOVWF  xC3
181E:  CLRF   xCA
1820:  CLRF   xC9
1822:  CLRF   xC8
1824:  CLRF   xC7
1826:  CLRF   xCE
1828:  CLRF   xCD
182A:  CLRF   xCC
182C:  CLRF   xCB
182E:  MOVF   FC1,W
1830:  ANDLW  C0
1832:  IORLW  0F
1834:  MOVWF  FC1
1836:  MOVLW  07
1838:  MOVWF  FB4
183A:  MOVLW  3E
183C:  MOVWF  37
183E:  MOVLW  20
1840:  MOVWF  38
1842:  MOVLW  5E
1844:  MOVWF  39
1846:  CLRF   3A
1848:  CLRF   3B
184A:  CLRF   3C
184C:  CLRF   3D
184E:  CLRF   3E
1850:  CLRF   3F
1852:  CLRF   40
1854:  CLRF   41
1856:  CLRF   xCF
1858:  CLRF   xD0
185A:  CLRF   xD1
185C:  CLRF   xD2
185E:  CLRF   xD3
1860:  CLRF   xD4
1862:  CLRF   xD5
1864:  CLRF   xD6
1866:  CLRF   xD7
1868:  CLRF   xD8
186A:  CLRF   xD9
186C:  CLRF   xDA
186E:  CLRF   xDB
1870:  CLRF   xDC
1872:  CLRF   xDD
1874:  CLRF   xDE
1876:  CLRF   xDF
1878:  CLRF   xE0
187A:  CLRF   xE1
187C:  CLRF   xE2
187E:  CLRF   xE3
1880:  CLRF   xE4
1882:  CLRF   xE5
1884:  CLRF   xE6
1886:  CLRF   xE7
1888:  CLRF   xE8
188A:  CLRF   xE9
188C:  CLRF   xEA
188E:  CLRF   xEB
1890:  CLRF   xEC
1892:  CLRF   xED
1894:  CLRF   xEE
1896:  CLRF   xEF
1898:  CLRF   xF0
189A:  CLRF   xF1
189C:  CLRF   xF2
189E:  CLRF   xF3
18A0:  CLRF   xF4
18A2:  CLRF   xF5
18A4:  CLRF   xF6
18A6:  CLRF   xF7
18A8:  CLRF   xF8
18AA:  CLRF   xF9
18AC:  CLRF   xFA
18AE:  CLRF   xFB
18B0:  CLRF   xFC
18B2:  CLRF   xFD
18B4:  CLRF   xFE
....................    setup_adc_ports(AN0_TO_AN3); 
18B6:  MOVF   FC1,W
18B8:  ANDLW  C0
18BA:  IORLW  0B
18BC:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
18BE:  BCF    FC0.0
18C0:  BSF    FC0.1
18C2:  BCF    FC0.2
18C4:  BSF    FC0.7
18C6:  BSF    FC2.0
....................    output_d(0);  
18C8:  CLRF   F95
18CA:  CLRF   F8C
....................    ModoSleep=1; 
18CC:  BSF    35.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
18CE:  MOVLW  85
18D0:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
18D2:  BSF    F9D.0
....................    //enable_interrupts(INT_EXT_L2H); 
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);   // T=255 us, F=47KHz    
18D4:  MOVLW  00
18D6:  IORLW  05
18D8:  MOVWF  FCA
18DA:  MOVLW  FF
18DC:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
18DE:  BCF    F94.2
18E0:  BCF    F8B.2
18E2:  BCF    F96.6
18E4:  MOVLW  0C
18E6:  MOVWF  FBD
18E8:  CLRF   FB7
18EA:  CLRF   FB6
....................    enable_interrupts(GLOBAL); 
18EC:  MOVLW  C0
18EE:  IORWF  FF2,F
....................    set_pwm1_duty(0); 
18F0:  CLRF   FBE
....................    lcd_init(); 
18F2:  CALL   0980
....................    printf(lcd_putc,"\f"); 
18F6:  MOVLW  0C
18F8:  MOVLB  1
18FA:  MOVWF  x15
18FC:  MOVLB  0
18FE:  CALL   0A5E
....................              
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1902:  MOVFF  FF2,100
1906:  BCF    FF2.7
1908:  CLRF   FA9
190A:  BCF    FA6.6
190C:  BCF    FA6.7
190E:  BSF    FA6.0
1910:  MOVF   FA8,W
1912:  MOVLB  1
1914:  BTFSC  x00.7
1916:  BSF    FF2.7
1918:  MOVWF  3E
191A:  MOVLW  14
191C:  MOVWF  x1B
191E:  MOVLB  0
1920:  CALL   08E2
1924:  MOVFF  FF2,100
1928:  BCF    FF2.7
192A:  MOVLW  01
192C:  MOVWF  FA9
192E:  BCF    FA6.6
1930:  BCF    FA6.7
1932:  BSF    FA6.0
1934:  MOVF   FA8,W
1936:  MOVLB  1
1938:  BTFSC  x00.7
193A:  BSF    FF2.7
193C:  MOVWF  3F
193E:  MOVLW  14
1940:  MOVWF  x1B
1942:  MOVLB  0
1944:  CALL   08E2
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1948:  MOVFF  FF2,100
194C:  BCF    FF2.7
194E:  MOVLW  02
1950:  MOVWF  FA9
1952:  BCF    FA6.6
1954:  BCF    FA6.7
1956:  BSF    FA6.0
1958:  MOVF   FA8,W
195A:  MOVLB  1
195C:  BTFSC  x00.7
195E:  BSF    FF2.7
1960:  MOVWF  40
1962:  MOVLW  14
1964:  MOVWF  x1B
1966:  MOVLB  0
1968:  CALL   08E2
196C:  MOVFF  FF2,100
1970:  BCF    FF2.7
1972:  MOVLW  03
1974:  MOVWF  FA9
1976:  BCF    FA6.6
1978:  BCF    FA6.7
197A:  BSF    FA6.0
197C:  MOVF   FA8,W
197E:  MOVLB  1
1980:  BTFSC  x00.7
1982:  BSF    FF2.7
1984:  MOVWF  41
1986:  MOVLW  14
1988:  MOVWF  x1B
198A:  MOVLB  0
198C:  CALL   08E2
....................    estadoalarma=read_eeprom(5); 
1990:  MOVFF  FF2,100
1994:  BCF    FF2.7
1996:  MOVLW  05
1998:  MOVWF  FA9
199A:  BCF    FA6.6
199C:  BCF    FA6.7
199E:  BSF    FA6.0
19A0:  MOVF   FA8,W
19A2:  MOVLB  1
19A4:  BTFSC  x00.7
19A6:  BSF    FF2.7
19A8:  MOVWF  01
19AA:  BCF    34.2
19AC:  BTFSC  01.0
19AE:  BSF    34.2
....................     
....................    Manual=read_eeprom(10);Automa=read_eeprom(11);Semi=read_eeprom(12);ValorSemi=read_eeprom(13);tmp=ValorSemi; 
19B0:  MOVFF  FF2,100
19B4:  BCF    FF2.7
19B6:  MOVLW  0A
19B8:  MOVWF  FA9
19BA:  BCF    FA6.6
19BC:  BCF    FA6.7
19BE:  BSF    FA6.0
19C0:  MOVF   FA8,W
19C2:  BTFSC  x00.7
19C4:  BSF    FF2.7
19C6:  MOVWF  2D
19C8:  MOVFF  FF2,100
19CC:  BCF    FF2.7
19CE:  MOVLW  0B
19D0:  MOVWF  FA9
19D2:  BCF    FA6.6
19D4:  BCF    FA6.7
19D6:  BSF    FA6.0
19D8:  MOVF   FA8,W
19DA:  BTFSC  x00.7
19DC:  BSF    FF2.7
19DE:  MOVWF  2C
19E0:  MOVFF  FF2,100
19E4:  BCF    FF2.7
19E6:  MOVLW  0C
19E8:  MOVWF  FA9
19EA:  BCF    FA6.6
19EC:  BCF    FA6.7
19EE:  BSF    FA6.0
19F0:  MOVF   FA8,W
19F2:  BTFSC  x00.7
19F4:  BSF    FF2.7
19F6:  MOVWF  2E
19F8:  MOVFF  FF2,100
19FC:  BCF    FF2.7
19FE:  MOVLW  0D
1A00:  MOVWF  FA9
1A02:  BCF    FA6.6
1A04:  BCF    FA6.7
1A06:  BSF    FA6.0
1A08:  MOVF   FA8,W
1A0A:  BTFSC  x00.7
1A0C:  BSF    FF2.7
1A0E:  MOVWF  2F
1A10:  MOVFF  2F,29
....................        
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
1A14:  MOVFF  FF2,100
1A18:  BCF    FF2.7
1A1A:  MOVLW  19
1A1C:  MOVWF  FA9
1A1E:  BCF    FA6.6
1A20:  BCF    FA6.7
1A22:  BSF    FA6.0
1A24:  MOVF   FA8,W
1A26:  BTFSC  x00.7
1A28:  BSF    FF2.7
1A2A:  MOVWF  21
....................    Temporal=read_eeprom(26); 
1A2C:  MOVFF  FF2,100
1A30:  BCF    FF2.7
1A32:  MOVLW  1A
1A34:  MOVWF  FA9
1A36:  BCF    FA6.6
1A38:  BCF    FA6.7
1A3A:  BSF    FA6.0
1A3C:  MOVF   FA8,W
1A3E:  BTFSC  x00.7
1A40:  BSF    FF2.7
1A42:  CLRF   x0A
1A44:  MOVWF  x09
1A46:  MOVLB  0
1A48:  CALL   0ACA
1A4C:  MOVFF  03,AA
1A50:  MOVFF  02,A9
1A54:  MOVFF  01,A8
1A58:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1A5C:  MOVFF  AA,107
1A60:  MOVFF  A9,106
1A64:  MOVFF  A8,105
1A68:  MOVFF  A7,104
1A6C:  MOVLB  1
1A6E:  CLRF   x0B
1A70:  CLRF   x0A
1A72:  MOVLW  48
1A74:  MOVWF  x09
1A76:  MOVLW  85
1A78:  MOVWF  x08
1A7A:  MOVLB  0
1A7C:  CALL   0B00
1A80:  MOVFF  03,AA
1A84:  MOVFF  02,A9
1A88:  MOVFF  01,A8
1A8C:  MOVFF  00,A7
....................    Ajuste1=Entero+Temporal; 
1A90:  MOVLB  1
1A92:  CLRF   x0A
1A94:  MOVFF  21,109
1A98:  MOVLB  0
1A9A:  CALL   0ACA
1A9E:  BCF    FD8.1
1AA0:  MOVFF  03,105
1AA4:  MOVFF  02,104
1AA8:  MOVFF  01,103
1AAC:  MOVFF  00,102
1AB0:  MOVFF  AA,109
1AB4:  MOVFF  A9,108
1AB8:  MOVFF  A8,107
1ABC:  MOVFF  A7,106
1AC0:  CALL   0C5E
1AC4:  MOVFF  03,C2
1AC8:  MOVFF  02,C1
1ACC:  MOVFF  01,C0
1AD0:  MOVFF  00,BF
....................     
....................    Entero=read_eeprom(40);//Decimal2=read_eeprom(41); 
1AD4:  MOVFF  FF2,100
1AD8:  BCF    FF2.7
1ADA:  MOVLW  28
1ADC:  MOVWF  FA9
1ADE:  BCF    FA6.6
1AE0:  BCF    FA6.7
1AE2:  BSF    FA6.0
1AE4:  MOVF   FA8,W
1AE6:  MOVLB  1
1AE8:  BTFSC  x00.7
1AEA:  BSF    FF2.7
1AEC:  MOVWF  21
....................    Temporal=read_eeprom(41); 
1AEE:  MOVFF  FF2,100
1AF2:  BCF    FF2.7
1AF4:  MOVLW  29
1AF6:  MOVWF  FA9
1AF8:  BCF    FA6.6
1AFA:  BCF    FA6.7
1AFC:  BSF    FA6.0
1AFE:  MOVF   FA8,W
1B00:  BTFSC  x00.7
1B02:  BSF    FF2.7
1B04:  CLRF   x0A
1B06:  MOVWF  x09
1B08:  MOVLB  0
1B0A:  CALL   0ACA
1B0E:  MOVFF  03,AA
1B12:  MOVFF  02,A9
1B16:  MOVFF  01,A8
1B1A:  MOVFF  00,A7
....................    Temporal=Temporal/100.0; 
1B1E:  MOVFF  AA,107
1B22:  MOVFF  A9,106
1B26:  MOVFF  A8,105
1B2A:  MOVFF  A7,104
1B2E:  MOVLB  1
1B30:  CLRF   x0B
1B32:  CLRF   x0A
1B34:  MOVLW  48
1B36:  MOVWF  x09
1B38:  MOVLW  85
1B3A:  MOVWF  x08
1B3C:  MOVLB  0
1B3E:  CALL   0B00
1B42:  MOVFF  03,AA
1B46:  MOVFF  02,A9
1B4A:  MOVFF  01,A8
1B4E:  MOVFF  00,A7
....................    setpoint=Entero+Temporal; 
1B52:  MOVLB  1
1B54:  CLRF   x0A
1B56:  MOVFF  21,109
1B5A:  MOVLB  0
1B5C:  CALL   0ACA
1B60:  BCF    FD8.1
1B62:  MOVFF  03,105
1B66:  MOVFF  02,104
1B6A:  MOVFF  01,103
1B6E:  MOVFF  00,102
1B72:  MOVFF  AA,109
1B76:  MOVFF  A9,108
1B7A:  MOVFF  A8,107
1B7E:  MOVFF  A7,106
1B82:  CALL   0C5E
1B86:  MOVFF  03,45
1B8A:  MOVFF  02,44
1B8E:  MOVFF  01,43
1B92:  MOVFF  00,42
....................     
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1B96:  MOVFF  FF2,100
1B9A:  BCF    FF2.7
1B9C:  MOVLW  3C
1B9E:  MOVWF  FA9
1BA0:  BCF    FA6.6
1BA2:  BCF    FA6.7
1BA4:  BSF    FA6.0
1BA6:  MOVF   FA8,W
1BA8:  MOVLB  1
1BAA:  BTFSC  x00.7
1BAC:  BSF    FF2.7
1BAE:  MOVWF  24
....................    Temporal1=read_eeprom(61); 
1BB0:  MOVFF  FF2,100
1BB4:  BCF    FF2.7
1BB6:  MOVLW  3D
1BB8:  MOVWF  FA9
1BBA:  BCF    FA6.6
1BBC:  BCF    FA6.7
1BBE:  BSF    FA6.0
1BC0:  MOVF   FA8,W
1BC2:  BTFSC  x00.7
1BC4:  BSF    FF2.7
1BC6:  CLRF   x0A
1BC8:  MOVWF  x09
1BCA:  MOVLB  0
1BCC:  CALL   0ACA
1BD0:  MOVFF  03,B6
1BD4:  MOVFF  02,B5
1BD8:  MOVFF  01,B4
1BDC:  MOVFF  00,B3
....................    Temporal1=Temporal1/100.0; 
1BE0:  MOVFF  B6,107
1BE4:  MOVFF  B5,106
1BE8:  MOVFF  B4,105
1BEC:  MOVFF  B3,104
1BF0:  MOVLB  1
1BF2:  CLRF   x0B
1BF4:  CLRF   x0A
1BF6:  MOVLW  48
1BF8:  MOVWF  x09
1BFA:  MOVLW  85
1BFC:  MOVWF  x08
1BFE:  MOVLB  0
1C00:  CALL   0B00
1C04:  MOVFF  03,B6
1C08:  MOVFF  02,B5
1C0C:  MOVFF  01,B4
1C10:  MOVFF  00,B3
....................    Diferencia=Entero1+Temporal1; 
1C14:  MOVLB  1
1C16:  CLRF   x0A
1C18:  MOVFF  24,109
1C1C:  MOVLB  0
1C1E:  CALL   0ACA
1C22:  BCF    FD8.1
1C24:  MOVFF  03,105
1C28:  MOVFF  02,104
1C2C:  MOVFF  01,103
1C30:  MOVFF  00,102
1C34:  MOVFF  B6,109
1C38:  MOVFF  B5,108
1C3C:  MOVFF  B4,107
1C40:  MOVFF  B3,106
1C44:  CALL   0C5E
1C48:  MOVFF  03,BE
1C4C:  MOVFF  02,BD
1C50:  MOVFF  01,BC
1C54:  MOVFF  00,BB
....................     
....................    negativo=read_eeprom(50); 
1C58:  MOVFF  FF2,100
1C5C:  BCF    FF2.7
1C5E:  MOVLW  32
1C60:  MOVWF  FA9
1C62:  BCF    FA6.6
1C64:  BCF    FA6.7
1C66:  BSF    FA6.0
1C68:  MOVF   FA8,W
1C6A:  MOVLB  1
1C6C:  BTFSC  x00.7
1C6E:  BSF    FF2.7
1C70:  MOVWF  2B
....................  
....................    MediaMovil=read_eeprom(42); 
1C72:  MOVFF  FF2,100
1C76:  BCF    FF2.7
1C78:  MOVLW  2A
1C7A:  MOVWF  FA9
1C7C:  BCF    FA6.6
1C7E:  BCF    FA6.7
1C80:  BSF    FA6.0
1C82:  MOVF   FA8,W
1C84:  BTFSC  x00.7
1C86:  BSF    FF2.7
1C88:  MOVWF  2A
....................    if(MediaMovil>12) 
1C8A:  MOVF   2A,W
1C8C:  SUBLW  0C
1C8E:  BC    1C94
....................    {MediaMovil=12;} 
1C90:  MOVLW  0C
1C92:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
1C94:  MOVF   2A,F
1C96:  BNZ   1C9C
....................    {MediaMovil=1;} 
1C98:  MOVLW  01
1C9A:  MOVWF  2A
....................     
....................    segundos=read_eeprom(70);minutos=read_eeprom(71);horas=read_eeprom(72);flag_filtro=read_eeprom(73); 
1C9C:  MOVFF  FF2,100
1CA0:  BCF    FF2.7
1CA2:  MOVLW  46
1CA4:  MOVWF  FA9
1CA6:  BCF    FA6.6
1CA8:  BCF    FA6.7
1CAA:  BSF    FA6.0
1CAC:  MOVF   FA8,W
1CAE:  BTFSC  x00.7
1CB0:  BSF    FF2.7
1CB2:  MOVWF  30
1CB4:  MOVFF  FF2,100
1CB8:  BCF    FF2.7
1CBA:  MOVLW  47
1CBC:  MOVWF  FA9
1CBE:  BCF    FA6.6
1CC0:  BCF    FA6.7
1CC2:  BSF    FA6.0
1CC4:  MOVF   FA8,W
1CC6:  BTFSC  x00.7
1CC8:  BSF    FF2.7
1CCA:  MOVWF  31
1CCC:  MOVFF  FF2,100
1CD0:  BCF    FF2.7
1CD2:  MOVLW  48
1CD4:  MOVWF  FA9
1CD6:  BCF    FA6.6
1CD8:  BCF    FA6.7
1CDA:  BSF    FA6.0
1CDC:  MOVF   FA8,W
1CDE:  BTFSC  x00.7
1CE0:  BSF    FF2.7
1CE2:  MOVWF  32
1CE4:  MOVFF  FF2,100
1CE8:  BCF    FF2.7
1CEA:  MOVLW  49
1CEC:  MOVWF  FA9
1CEE:  BCF    FA6.6
1CF0:  BCF    FA6.7
1CF2:  BSF    FA6.0
1CF4:  MOVF   FA8,W
1CF6:  BTFSC  x00.7
1CF8:  BSF    FF2.7
1CFA:  MOVWF  01
1CFC:  BCF    35.2
1CFE:  BTFSC  01.0
1D00:  BSF    35.2
....................    Menu=200; 
1D02:  MOVLW  C8
1D04:  MOVWF  17
....................    
....................    while(true){ 
....................  
....................    while(Menu==200) 
....................    { 
1D06:  MOVF   17,W
1D08:  SUBLW  C8
1D0A:  BNZ   1DE4
....................       if(inicio==0) 
1D0C:  BTFSC  35.4
1D0E:  BRA    1DE2
....................       { 
....................       delay_ms(500); 
1D10:  MOVLW  02
1D12:  MOVWF  x00
1D14:  MOVLW  FA
1D16:  MOVWF  x1B
1D18:  MOVLB  0
1D1A:  CALL   08E2
1D1E:  MOVLB  1
1D20:  DECFSZ x00,F
1D22:  BRA    1D14
....................          if(input(PIN_B0)) 
1D24:  BSF    F93.0
1D26:  BTFSS  F81.0
1D28:  BRA    1DE2
....................          { 
....................             lcd_init(); 
1D2A:  MOVLB  0
1D2C:  CALL   0980
....................             intensidadpantalla(contraste); 
1D30:  MOVFF  20,100
1D34:  CALL   0ED6
....................             lcd_gotoxy(1,1); 
1D38:  MOVLW  01
1D3A:  MOVLB  1
1D3C:  MOVWF  x16
1D3E:  MOVWF  x17
1D40:  MOVLB  0
1D42:  CALL   09EC
....................             printf(lcd_putc," CABINA  EXTRACTORA "); 
1D46:  MOVLW  DE
1D48:  MOVWF  FF6
1D4A:  MOVLW  01
1D4C:  MOVWF  FF7
1D4E:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
1D52:  MOVLW  01
1D54:  MOVLB  1
1D56:  MOVWF  x16
1D58:  MOVLW  02
1D5A:  MOVWF  x17
1D5C:  MOVLB  0
1D5E:  CALL   09EC
....................             printf(lcd_putc,"  DE HUMOS Y GASES  "); 
1D62:  MOVLW  F4
1D64:  MOVWF  FF6
1D66:  MOVLW  01
1D68:  MOVWF  FF7
1D6A:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
1D6E:  MOVLW  01
1D70:  MOVLB  1
1D72:  MOVWF  x16
1D74:  MOVLW  03
1D76:  MOVWF  x17
1D78:  MOVLB  0
1D7A:  CALL   09EC
....................             printf(lcd_putc,"    JP INGLOBAL     "); 
1D7E:  MOVLW  0A
1D80:  MOVWF  FF6
1D82:  MOVLW  02
1D84:  MOVWF  FF7
1D86:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
1D8A:  MOVLW  01
1D8C:  MOVLB  1
1D8E:  MOVWF  x16
1D90:  MOVLW  04
1D92:  MOVWF  x17
1D94:  MOVLB  0
1D96:  CALL   09EC
....................             printf(lcd_putc," REF: PANEL JPCEH15 "); 
1D9A:  MOVLW  20
1D9C:  MOVWF  FF6
1D9E:  MOVLW  02
1DA0:  MOVWF  FF7
1DA2:  CALL   0EEA
....................             delay_ms(2000); 
1DA6:  MOVLW  08
1DA8:  MOVLB  1
1DAA:  MOVWF  x00
1DAC:  MOVLW  FA
1DAE:  MOVWF  x1B
1DB0:  MOVLB  0
1DB2:  CALL   08E2
1DB6:  MOVLB  1
1DB8:  DECFSZ x00,F
1DBA:  BRA    1DAC
....................             printf(lcd_putc,"\f"); 
1DBC:  MOVLW  0C
1DBE:  MOVWF  x15
1DC0:  MOVLB  0
1DC2:  CALL   0A5E
....................             inicio=1; 
1DC6:  BSF    35.4
....................             Menu=0; 
1DC8:  CLRF   17
....................             ModoSleep=0; 
1DCA:  BCF    35.3
....................             delay_ms(500); 
1DCC:  MOVLW  02
1DCE:  MOVLB  1
1DD0:  MOVWF  x00
1DD2:  MOVLW  FA
1DD4:  MOVWF  x1B
1DD6:  MOVLB  0
1DD8:  CALL   08E2
1DDC:  MOVLB  1
1DDE:  DECFSZ x00,F
1DE0:  BRA    1DD2
....................          } 
....................       } 
....................    } 
1DE2:  BRA    1D06
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    while(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1DE4:  MOVF   17,F
1DE6:  BTFSS  FD8.2
1DE8:  BRA    2248
....................    flag_latencia=1;set_pwm1_duty(0); 
1DEA:  BSF    35.0
1DEC:  CLRF   FBE
....................       if(Latencia==1) 
1DEE:  BTFSS  35.1
1DF0:  BRA    1E00
....................          { 
....................             printf(lcd_putc,"\f");reset_cpu(); 
1DF2:  MOVLW  0C
1DF4:  MOVWF  x15
1DF6:  MOVLB  0
1DF8:  CALL   0A5E
1DFC:  RESET
1DFE:  MOVLB  1
....................          } 
....................    lcd_gotoxy(1,1); 
1E00:  MOVLW  01
1E02:  MOVWF  x16
1E04:  MOVWF  x17
1E06:  MOVLB  0
1E08:  CALL   09EC
....................    printf(lcd_putc,"     Ingrese        "); 
1E0C:  MOVLW  36
1E0E:  MOVWF  FF6
1E10:  MOVLW  02
1E12:  MOVWF  FF7
1E14:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
1E18:  MOVLW  01
1E1A:  MOVLB  1
1E1C:  MOVWF  x16
1E1E:  MOVLW  02
1E20:  MOVWF  x17
1E22:  MOVLB  0
1E24:  CALL   09EC
....................    printf(lcd_putc,"    Contraseña      "); 
1E28:  MOVLW  4C
1E2A:  MOVWF  FF6
1E2C:  MOVLW  02
1E2E:  MOVWF  FF7
1E30:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
1E34:  MOVLW  01
1E36:  MOVLB  1
1E38:  MOVWF  x16
1E3A:  MOVLW  03
1E3C:  MOVWF  x17
1E3E:  MOVLB  0
1E40:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1E44:  MOVLW  62
1E46:  MOVWF  FF6
1E48:  MOVLW  02
1E4A:  MOVWF  FF7
1E4C:  MOVLW  0A
1E4E:  MOVLB  1
1E50:  MOVWF  x08
1E52:  MOVLB  0
1E54:  CALL   0F0A
1E58:  MOVFF  3A,100
1E5C:  MOVLW  1F
1E5E:  MOVLB  1
1E60:  MOVWF  x01
1E62:  MOVLB  0
1E64:  CALL   0F5E
1E68:  MOVFF  3B,100
1E6C:  MOVLW  1F
1E6E:  MOVLB  1
1E70:  MOVWF  x01
1E72:  MOVLB  0
1E74:  CALL   0F5E
1E78:  MOVFF  3C,100
1E7C:  MOVLW  1F
1E7E:  MOVLB  1
1E80:  MOVWF  x01
1E82:  MOVLB  0
1E84:  CALL   0F5E
1E88:  MOVFF  3D,100
1E8C:  MOVLW  1F
1E8E:  MOVLB  1
1E90:  MOVWF  x01
1E92:  MOVLB  0
1E94:  CALL   0F5E
1E98:  MOVLW  20
1E9A:  MOVLB  1
1E9C:  MOVWF  x15
1E9E:  MOVLB  0
1EA0:  CALL   0A5E
1EA4:  MOVLW  20
1EA6:  MOVLB  1
1EA8:  MOVWF  x15
1EAA:  MOVLB  0
1EAC:  CALL   0A5E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1EB0:  BSF    F93.3
1EB2:  BTFSS  F81.3
1EB4:  BRA    1EE0
....................       {  if(Flanco == 0)  
1EB6:  BTFSC  34.4
1EB8:  BRA    1EDE
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);t_latencia=0;}} 
1EBA:  MOVLW  0B
1EBC:  SUBWF  1A,W
1EBE:  CLRF   03
1EC0:  ADDLW  3A
1EC2:  MOVWF  FE9
1EC4:  MOVLW  00
1EC6:  ADDWFC 03,W
1EC8:  MOVWF  FEA
1ECA:  INCF   FEF,F
1ECC:  BSF    34.4
1ECE:  MOVLW  1E
1ED0:  MOVLB  1
1ED2:  MOVWF  x1B
1ED4:  MOVLB  0
1ED6:  CALL   08E2
1EDA:  CLRF   52
1EDC:  CLRF   51
....................          else 
1EDE:  BRA    1EE2
....................             {Flanco = 0;} 
1EE0:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1EE2:  BSF    F93.2
1EE4:  BTFSS  F81.2
1EE6:  BRA    1F12
....................       {  if(Flanco2 == 0)  
1EE8:  BTFSC  34.6
1EEA:  BRA    1F10
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);t_latencia=0;}} 
1EEC:  MOVLW  0B
1EEE:  SUBWF  1A,W
1EF0:  CLRF   03
1EF2:  ADDLW  3A
1EF4:  MOVWF  FE9
1EF6:  MOVLW  00
1EF8:  ADDWFC 03,W
1EFA:  MOVWF  FEA
1EFC:  DECF   FEF,F
1EFE:  BSF    34.6
1F00:  MOVLW  1E
1F02:  MOVLB  1
1F04:  MOVWF  x1B
1F06:  MOVLB  0
1F08:  CALL   08E2
1F0C:  CLRF   52
1F0E:  CLRF   51
....................          else 
1F10:  BRA    1F14
....................             {Flanco2 = 0;} 
1F12:  BCF    34.6
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1F14:  BSF    F93.0
1F16:  BTFSS  F81.0
1F18:  BRA    1F40
....................       {  if(Flanco1 == 0)  
1F1A:  BTFSC  34.5
1F1C:  BRA    1F3E
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F1E:  BSF    34.5
1F20:  INCF   1A,F
1F22:  MOVLW  1E
1F24:  MOVLB  1
1F26:  MOVWF  x1B
1F28:  MOVLB  0
1F2A:  CALL   08E2
1F2E:  MOVLW  0C
1F30:  MOVLB  1
1F32:  MOVWF  x15
1F34:  MOVLB  0
1F36:  CALL   0A5E
1F3A:  CLRF   52
1F3C:  CLRF   51
....................          else 
1F3E:  BRA    1F42
....................             {Flanco1 = 0;}    
1F40:  BCF    34.5
....................              
....................        if(LEFT)// Si Oprime izquierda 
1F42:  BSF    F93.1
1F44:  BTFSS  F81.1
1F46:  BRA    1F6E
....................       {  if(Flanco3 == 0)  
1F48:  BTFSC  34.7
1F4A:  BRA    1F6C
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");t_latencia=0;}} 
1F4C:  BSF    34.7
1F4E:  DECF   1A,F
1F50:  MOVLW  1E
1F52:  MOVLB  1
1F54:  MOVWF  x1B
1F56:  MOVLB  0
1F58:  CALL   08E2
1F5C:  MOVLW  0C
1F5E:  MOVLB  1
1F60:  MOVWF  x15
1F62:  MOVLB  0
1F64:  CALL   0A5E
1F68:  CLRF   52
1F6A:  CLRF   51
....................          else 
1F6C:  BRA    1F70
....................             {Flanco3 = 0;}     
1F6E:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1F70:  MOVLW  0B
1F72:  SUBWF  1A,W
1F74:  CLRF   03
1F76:  ADDLW  3A
1F78:  MOVWF  FE9
1F7A:  MOVLW  00
1F7C:  ADDWFC 03,W
1F7E:  MOVWF  FEA
1F80:  BTFSC  FEF.7
1F82:  BRA    1F86
1F84:  BRA    1F9A
....................        {clave[unidad-11]=9;} 
1F86:  MOVLW  0B
1F88:  SUBWF  1A,W
1F8A:  CLRF   03
1F8C:  ADDLW  3A
1F8E:  MOVWF  FE9
1F90:  MOVLW  00
1F92:  ADDWFC 03,W
1F94:  MOVWF  FEA
1F96:  MOVLW  09
1F98:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1F9A:  MOVLW  0B
1F9C:  SUBWF  1A,W
1F9E:  CLRF   03
1FA0:  ADDLW  3A
1FA2:  MOVWF  FE9
1FA4:  MOVLW  00
1FA6:  ADDWFC 03,W
1FA8:  MOVWF  FEA
1FAA:  BTFSC  FEF.7
1FAC:  BRA    1FC6
1FAE:  MOVF   FEF,W
1FB0:  SUBLW  09
1FB2:  BC    1FC6
....................        {clave[unidad-11]=0;} 
1FB4:  MOVLW  0B
1FB6:  SUBWF  1A,W
1FB8:  CLRF   03
1FBA:  ADDLW  3A
1FBC:  MOVWF  FE9
1FBE:  MOVLW  00
1FC0:  ADDWFC 03,W
1FC2:  MOVWF  FEA
1FC4:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1FC6:  MOVF   1A,W
1FC8:  SUBLW  0A
1FCA:  BNC   1FD0
....................        {unidad=11;} 
1FCC:  MOVLW  0B
1FCE:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1FD0:  MOVFF  1A,116
1FD4:  MOVLW  04
1FD6:  MOVLB  1
1FD8:  MOVWF  x17
1FDA:  MOVLB  0
1FDC:  CALL   09EC
....................        lcd_putc(t[2]); 
1FE0:  MOVFF  39,115
1FE4:  CALL   0A5E
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1FE8:  MOVF   1A,W
1FEA:  SUBLW  0E
1FEC:  BTFSC  FD8.0
1FEE:  BRA    221C
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1FF0:  MOVF   3A,W
1FF2:  SUBLW  03
1FF4:  BNZ   20D8
1FF6:  MOVF   3B,W
1FF8:  SUBLW  08
1FFA:  BNZ   20D8
1FFC:  MOVF   3C,W
1FFE:  SUBLW  09
2000:  BNZ   20D8
2002:  MOVF   3D,W
2004:  SUBLW  02
2006:  BNZ   20D8
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2008:  CLRF   FA9
200A:  CLRF   FA8
200C:  BCF    FA6.6
200E:  BCF    FA6.7
2010:  BSF    FA6.2
2012:  MOVF   FF2,W
2014:  MOVWF  00
2016:  BCF    FF2.7
2018:  MOVLB  F
201A:  MOVLW  55
201C:  MOVWF  FA7
201E:  MOVLW  AA
2020:  MOVWF  FA7
2022:  BSF    FA6.1
2024:  BTFSC  FA6.1
2026:  BRA    2024
2028:  BCF    FA6.2
202A:  MOVF   00,W
202C:  IORWF  FF2,F
202E:  MOVLW  14
2030:  MOVLB  1
2032:  MOVWF  x1B
2034:  MOVLB  0
2036:  CALL   08E2
203A:  MOVLW  01
203C:  MOVWF  FA9
203E:  CLRF   FA8
2040:  BCF    FA6.6
2042:  BCF    FA6.7
2044:  BSF    FA6.2
2046:  MOVF   FF2,W
2048:  MOVWF  00
204A:  BCF    FF2.7
204C:  MOVLB  F
204E:  MOVLW  55
2050:  MOVWF  FA7
2052:  MOVLW  AA
2054:  MOVWF  FA7
2056:  BSF    FA6.1
2058:  BTFSC  FA6.1
205A:  BRA    2058
205C:  BCF    FA6.2
205E:  MOVF   00,W
2060:  IORWF  FF2,F
2062:  MOVLW  14
2064:  MOVLB  1
2066:  MOVWF  x1B
2068:  MOVLB  0
206A:  CALL   08E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
206E:  MOVLW  02
2070:  MOVWF  FA9
2072:  CLRF   FA8
2074:  BCF    FA6.6
2076:  BCF    FA6.7
2078:  BSF    FA6.2
207A:  MOVF   FF2,W
207C:  MOVWF  00
207E:  BCF    FF2.7
2080:  MOVLB  F
2082:  MOVLW  55
2084:  MOVWF  FA7
2086:  MOVLW  AA
2088:  MOVWF  FA7
208A:  BSF    FA6.1
208C:  BTFSC  FA6.1
208E:  BRA    208C
2090:  BCF    FA6.2
2092:  MOVF   00,W
2094:  IORWF  FF2,F
2096:  MOVLW  14
2098:  MOVLB  1
209A:  MOVWF  x1B
209C:  MOVLB  0
209E:  CALL   08E2
20A2:  MOVLW  03
20A4:  MOVWF  FA9
20A6:  CLRF   FA8
20A8:  BCF    FA6.6
20AA:  BCF    FA6.7
20AC:  BSF    FA6.2
20AE:  MOVF   FF2,W
20B0:  MOVWF  00
20B2:  BCF    FF2.7
20B4:  MOVLB  F
20B6:  MOVLW  55
20B8:  MOVWF  FA7
20BA:  MOVLW  AA
20BC:  MOVWF  FA7
20BE:  BSF    FA6.1
20C0:  BTFSC  FA6.1
20C2:  BRA    20C0
20C4:  BCF    FA6.2
20C6:  MOVF   00,W
20C8:  IORWF  FF2,F
20CA:  MOVLW  14
20CC:  MOVLB  1
20CE:  MOVWF  x1B
20D0:  MOVLB  0
20D2:  CALL   08E2
....................              reset_cpu();} 
20D6:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
20D8:  MOVF   3E,W
20DA:  SUBWF  3A,W
20DC:  BNZ   2196
20DE:  MOVF   3F,W
20E0:  SUBWF  3B,W
20E2:  BNZ   2196
20E4:  MOVF   40,W
20E6:  SUBWF  3C,W
20E8:  BNZ   2196
20EA:  MOVF   41,W
20EC:  SUBWF  3D,W
20EE:  BNZ   2196
....................             {lcd_gotoxy(1,1); 
20F0:  MOVLW  01
20F2:  MOVLB  1
20F4:  MOVWF  x16
20F6:  MOVWF  x17
20F8:  MOVLB  0
20FA:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
20FE:  MOVLW  78
2100:  MOVWF  FF6
2102:  MOVLW  02
2104:  MOVWF  FF7
2106:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
210A:  MOVLW  01
210C:  MOVLB  1
210E:  MOVWF  x16
2110:  MOVLW  02
2112:  MOVWF  x17
2114:  MOVLB  0
2116:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña    "); 
211A:  MOVLW  8C
211C:  MOVWF  FF6
211E:  MOVLW  02
2120:  MOVWF  FF7
2122:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2126:  MOVLW  01
2128:  MOVLB  1
212A:  MOVWF  x16
212C:  MOVLW  03
212E:  MOVWF  x17
2130:  MOVLB  0
2132:  CALL   09EC
....................             printf(lcd_putc,"      Correcta     "); 
2136:  MOVLW  A0
2138:  MOVWF  FF6
213A:  MOVLW  02
213C:  MOVWF  FF7
213E:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2142:  MOVLW  01
2144:  MOVLB  1
2146:  MOVWF  x16
2148:  MOVLW  04
214A:  MOVWF  x17
214C:  MOVLB  0
214E:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
2152:  MOVLW  B4
2154:  MOVWF  FF6
2156:  MOVLW  02
2158:  MOVWF  FF7
215A:  CALL   0EEA
....................             delay_ms(500);Menu=20;unidad=11;printf(lcd_putc,"\f");Damper_on;flag_latencia=0;Latencia=0; 
215E:  MOVLW  02
2160:  MOVLB  1
2162:  MOVWF  x00
2164:  MOVLW  FA
2166:  MOVWF  x1B
2168:  MOVLB  0
216A:  CALL   08E2
216E:  MOVLB  1
2170:  DECFSZ x00,F
2172:  BRA    2164
2174:  MOVLW  14
2176:  MOVWF  17
2178:  MOVLW  0B
217A:  MOVWF  1A
217C:  MOVLW  0C
217E:  MOVWF  x15
2180:  MOVLB  0
2182:  CALL   0A5E
2186:  BSF    F8A.6
2188:  BCF    F93.6
218A:  BCF    35.0
218C:  BCF    35.1
....................             t_latencia=0;flag_iniciodamper=1;} 
218E:  CLRF   52
2190:  CLRF   51
2192:  BSF    35.7
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2194:  BRA    221C
....................          {lcd_gotoxy(1,1); 
2196:  MOVLW  01
2198:  MOVLB  1
219A:  MOVWF  x16
219C:  MOVWF  x17
219E:  MOVLB  0
21A0:  CALL   09EC
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
21A4:  MOVLW  01
21A6:  MOVLB  1
21A8:  MOVWF  x16
21AA:  MOVLW  02
21AC:  MOVWF  x17
21AE:  MOVLB  0
21B0:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña    "); 
21B4:  MOVLW  C8
21B6:  MOVWF  FF6
21B8:  MOVLW  02
21BA:  MOVWF  FF7
21BC:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
21C0:  MOVLW  01
21C2:  MOVLB  1
21C4:  MOVWF  x16
21C6:  MOVLW  03
21C8:  MOVWF  x17
21CA:  MOVLB  0
21CC:  CALL   09EC
....................             printf(lcd_putc,"     Incorrecta    "); 
21D0:  MOVLW  DC
21D2:  MOVWF  FF6
21D4:  MOVLW  02
21D6:  MOVWF  FF7
21D8:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
21DC:  MOVLW  01
21DE:  MOVLB  1
21E0:  MOVWF  x16
21E2:  MOVLW  04
21E4:  MOVWF  x17
21E6:  MOVLB  0
21E8:  CALL   09EC
....................             printf(lcd_putc,"                   "); 
21EC:  MOVLW  F0
21EE:  MOVWF  FF6
21F0:  MOVLW  02
21F2:  MOVWF  FF7
21F4:  CALL   0EEA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
21F8:  MOVLW  02
21FA:  MOVLB  1
21FC:  MOVWF  x00
21FE:  MOVLW  FA
2200:  MOVWF  x1B
2202:  MOVLB  0
2204:  CALL   08E2
2208:  MOVLB  1
220A:  DECFSZ x00,F
220C:  BRA    21FE
220E:  MOVLW  0B
2210:  MOVWF  1A
2212:  MOVLW  0C
2214:  MOVWF  x15
2216:  MOVLB  0
2218:  CALL   0A5E
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
221C:  MOVF   1A,W
221E:  SUBLW  0B
2220:  BC    2244
2222:  MOVF   1A,W
2224:  SUBLW  0D
2226:  BNC   2244
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2228:  MOVLW  01
222A:  SUBWF  1A,W
222C:  MOVLB  1
222E:  MOVWF  x00
2230:  MOVWF  x16
2232:  MOVLW  04
2234:  MOVWF  x17
2236:  MOVLB  0
2238:  CALL   09EC
....................             lcd_putc(t[1]); 
223C:  MOVFF  38,115
2240:  CALL   0A5E
....................           } 
....................  
....................    } 
2244:  MOVLB  1
2246:  BRA    1DE4
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2248:  DECFSZ 17,W
224A:  BRA    2486
....................       if(paso<0) 
224C:  BTFSC  36.7
224E:  BRA    2252
2250:  BRA    2254
....................         {paso=0;} 
2252:  CLRF   36
....................     
....................    lcd_gotoxy(1,1); 
2254:  MOVLW  01
2256:  MOVWF  x16
2258:  MOVWF  x17
225A:  MOVLB  0
225C:  CALL   09EC
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2260:  MOVLW  04
2262:  MOVWF  FF6
2264:  MOVLW  03
2266:  MOVWF  FF7
2268:  CALL   0EEA
....................     
....................    if(UP)//Si oprime hacia arriba 
226C:  BSF    F93.3
226E:  BTFSS  F81.3
2270:  BRA    2290
....................       {  if(Flanco == 0)  
2272:  BTFSC  34.4
2274:  BRA    228E
....................             {Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);}} 
2276:  DECF   1D,F
2278:  DECF   1B,F
227A:  MOVLW  01
227C:  ADDWF  1B,W
227E:  MOVWF  1C
2280:  BSF    34.4
2282:  MOVLW  1E
2284:  MOVLB  1
2286:  MOVWF  x1B
2288:  MOVLB  0
228A:  CALL   08E2
....................          else 
228E:  BRA    2292
....................             {Flanco = 0;} 
2290:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2292:  BSF    F93.2
2294:  BTFSS  F81.2
2296:  BRA    22B6
....................       {  if(Flanco2 == 0)  
2298:  BTFSC  34.6
229A:  BRA    22B4
....................             {Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);}} 
229C:  INCF   1D,F
229E:  INCF   1B,F
22A0:  MOVLW  01
22A2:  SUBWF  1B,W
22A4:  MOVWF  1C
22A6:  BSF    34.6
22A8:  MOVLW  1E
22AA:  MOVLB  1
22AC:  MOVWF  x1B
22AE:  MOVLB  0
22B0:  CALL   08E2
....................          else 
22B4:  BRA    22B8
....................             {Flanco2 = 0;} 
22B6:  BCF    34.6
....................     
....................          
....................         if(Flecha2>nMenuH) 
22B8:  MOVF   1D,W
22BA:  SUBWF  1F,W
22BC:  BC    22CE
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
22BE:  INCF   36,F
22C0:  MOVFF  1D,1F
22C4:  MOVLW  02
22C6:  SUBWF  1F,W
22C8:  MOVWF  1E
22CA:  MOVLW  04
22CC:  MOVWF  1B
....................          
....................         if(Flecha2<nMenuL) 
22CE:  MOVF   1E,W
22D0:  SUBWF  1D,W
22D2:  BC    22E4
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
22D4:  DECF   36,F
22D6:  MOVFF  1D,1E
22DA:  MOVLW  02
22DC:  ADDWF  1E,W
22DE:  MOVWF  1F
22E0:  MOVLW  02
22E2:  MOVWF  1B
....................          
....................         if(Flecha2>n_opcionH) 
22E4:  MOVF   1D,W
22E6:  SUBWF  18,W
22E8:  BC    22FC
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
22EA:  MOVFF  19,1D
22EE:  MOVLW  02
22F0:  MOVWF  1B
22F2:  CLRF   36
22F4:  MOVFF  1D,1E
22F8:  ADDWF  1E,W
22FA:  MOVWF  1F
....................          
....................         if(Flecha2<n_opcionL) 
22FC:  MOVF   19,W
22FE:  SUBWF  1D,W
2300:  BC    2318
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}   
2302:  MOVFF  18,1D
2306:  MOVLW  04
2308:  MOVWF  1B
230A:  SUBWF  18,W
230C:  MOVWF  36
230E:  MOVFF  1D,1F
2312:  MOVLW  02
2314:  SUBWF  1F,W
2316:  MOVWF  1E
....................          
....................         mensajes(1+paso,2); 
2318:  MOVLW  01
231A:  ADDWF  36,W
231C:  MOVLB  1
231E:  MOVWF  x00
2320:  MOVWF  x01
2322:  MOVLW  02
2324:  MOVWF  x02
2326:  MOVLB  0
2328:  CALL   103C
....................         mensajes(2+paso,3); 
232C:  MOVLW  02
232E:  ADDWF  36,W
2330:  MOVLB  1
2332:  MOVWF  x00
2334:  MOVWF  x01
2336:  MOVLW  03
2338:  MOVWF  x02
233A:  MOVLB  0
233C:  CALL   103C
....................         mensajes(3+paso,4); 
2340:  MOVLW  03
2342:  ADDWF  36,W
2344:  MOVLB  1
2346:  MOVWF  x00
2348:  MOVWF  x01
234A:  MOVLW  04
234C:  MOVWF  x02
234E:  MOVLB  0
2350:  CALL   103C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2354:  MOVLW  01
2356:  MOVLB  1
2358:  MOVWF  x16
235A:  MOVFF  1B,117
235E:  MOVLB  0
2360:  CALL   09EC
....................         lcd_putc(t[0]); 
2364:  MOVFF  37,115
2368:  CALL   0A5E
....................  
....................         if(Flecha==2) 
236C:  MOVF   1B,W
236E:  SUBLW  02
2370:  BNZ   23A2
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2372:  MOVLW  01
2374:  MOVLB  1
2376:  MOVWF  x16
2378:  MOVLW  04
237A:  MOVWF  x17
237C:  MOVLB  0
237E:  CALL   09EC
....................             lcd_putc(t[1]); 
2382:  MOVFF  38,115
2386:  CALL   0A5E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
238A:  MOVLW  01
238C:  MOVLB  1
238E:  MOVWF  x16
2390:  MOVLW  03
2392:  MOVWF  x17
2394:  MOVLB  0
2396:  CALL   09EC
....................             lcd_putc(t[1]); 
239A:  MOVFF  38,115
239E:  CALL   0A5E
....................           } 
....................          
....................         if(Flecha==4) 
23A2:  MOVF   1B,W
23A4:  SUBLW  04
23A6:  BNZ   23D8
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
23A8:  MOVLW  01
23AA:  MOVLB  1
23AC:  MOVWF  x16
23AE:  MOVLW  02
23B0:  MOVWF  x17
23B2:  MOVLB  0
23B4:  CALL   09EC
....................             lcd_putc(t[1]); 
23B8:  MOVFF  38,115
23BC:  CALL   0A5E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
23C0:  MOVLW  01
23C2:  MOVLB  1
23C4:  MOVWF  x16
23C6:  MOVLW  03
23C8:  MOVWF  x17
23CA:  MOVLB  0
23CC:  CALL   09EC
....................             lcd_putc(t[1]); 
23D0:  MOVFF  38,115
23D4:  CALL   0A5E
....................           } 
....................          
....................         if(Flecha==3) 
23D8:  MOVF   1B,W
23DA:  SUBLW  03
23DC:  BNZ   240E
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
23DE:  MOVLW  01
23E0:  MOVLB  1
23E2:  MOVWF  x16
23E4:  MOVLW  04
23E6:  MOVWF  x17
23E8:  MOVLB  0
23EA:  CALL   09EC
....................             lcd_putc(t[1]); 
23EE:  MOVFF  38,115
23F2:  CALL   0A5E
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
23F6:  MOVLW  01
23F8:  MOVLB  1
23FA:  MOVWF  x16
23FC:  MOVLW  02
23FE:  MOVWF  x17
2400:  MOVLB  0
2402:  CALL   09EC
....................             lcd_putc(t[1]); 
2406:  MOVFF  38,115
240A:  CALL   0A5E
....................           } 
....................  
....................         if(RIGHT)// Si oprime derecha 
240E:  BSF    F93.0
2410:  BTFSS  F81.0
2412:  BRA    2450
....................       {  if(Flanco1 == 0)  
2414:  BTFSC  34.5
2416:  BRA    244E
....................             {/*Flanco1 = 1;*/Menu=Flecha2;Flecha=3;delay_ms(500);printf(lcd_putc,"\f"); 
2418:  MOVFF  1D,17
241C:  MOVLW  03
241E:  MOVWF  1B
2420:  MOVLW  02
2422:  MOVLB  1
2424:  MOVWF  x00
2426:  MOVLW  FA
2428:  MOVWF  x1B
242A:  MOVLB  0
242C:  CALL   08E2
2430:  MOVLB  1
2432:  DECFSZ x00,F
2434:  BRA    2426
2436:  MOVLW  0C
2438:  MOVWF  x15
243A:  MOVLB  0
243C:  CALL   0A5E
....................             if(Menu==6) 
2440:  MOVF   17,W
2442:  SUBLW  06
2444:  BNZ   244E
....................             {clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;}}} 
2446:  CLRF   3A
2448:  CLRF   3B
244A:  CLRF   3C
244C:  CLRF   3D
....................          else 
244E:  BRA    2452
....................             {Flanco1 = 0;}   
2450:  BCF    34.5
....................              
....................       if(LEFT)// Si oprime Izquierda 
2452:  BSF    F93.1
2454:  BTFSS  F81.1
2456:  BRA    2482
....................       {  if(Flanco3 == 0)  
2458:  BTFSC  34.7
245A:  BRA    2480
....................             {/*Flanco3 = 1;*/delay_ms(500);Menu=20;printf(lcd_putc,"\f");}} 
245C:  MOVLW  02
245E:  MOVLB  1
2460:  MOVWF  x00
2462:  MOVLW  FA
2464:  MOVWF  x1B
2466:  MOVLB  0
2468:  CALL   08E2
246C:  MOVLB  1
246E:  DECFSZ x00,F
2470:  BRA    2462
2472:  MOVLW  14
2474:  MOVWF  17
2476:  MOVLW  0C
2478:  MOVWF  x15
247A:  MOVLB  0
247C:  CALL   0A5E
....................          else 
2480:  BRA    2484
....................             {Flanco3 = 0;}                
2482:  BCF    34.7
2484:  MOVLB  1
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de seleccion de estado de Alarma 
2486:  MOVF   17,W
2488:  SUBLW  02
248A:  BTFSS  FD8.2
248C:  BRA    25DA
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
248E:  BTG    34.2
2490:  BSF    34.5
2492:  MOVLW  01
2494:  MOVWF  17
2496:  CLRF   36
....................                        
....................             if(estadoalarma==1) 
2498:  BTFSS  34.2
249A:  BRA    250C
....................             {estadoalarma=1; 
249C:  BSF    34.2
....................                lcd_gotoxy(1,1); 
249E:  MOVLW  01
24A0:  MOVWF  x16
24A2:  MOVWF  x17
24A4:  MOVLB  0
24A6:  CALL   09EC
....................                printf(lcd_putc,"                    "); 
24AA:  MOVLW  1A
24AC:  MOVWF  FF6
24AE:  MOVLW  03
24B0:  MOVWF  FF7
24B2:  CALL   0EEA
....................                lcd_gotoxy(1,2); 
24B6:  MOVLW  01
24B8:  MOVLB  1
24BA:  MOVWF  x16
24BC:  MOVLW  02
24BE:  MOVWF  x17
24C0:  MOVLB  0
24C2:  CALL   09EC
....................                printf(lcd_putc,"        Activo      "); 
24C6:  MOVLW  30
24C8:  MOVWF  FF6
24CA:  MOVLW  03
24CC:  MOVWF  FF7
24CE:  CALL   0EEA
....................                lcd_gotoxy(1,3); 
24D2:  MOVLW  01
24D4:  MOVLB  1
24D6:  MOVWF  x16
24D8:  MOVLW  03
24DA:  MOVWF  x17
24DC:  MOVLB  0
24DE:  CALL   09EC
....................                printf(lcd_putc,"        Alarma      "); 
24E2:  MOVLW  46
24E4:  MOVWF  FF6
24E6:  MOVLW  03
24E8:  MOVWF  FF7
24EA:  CALL   0EEA
....................                lcd_gotoxy(1,4); 
24EE:  MOVLW  01
24F0:  MOVLB  1
24F2:  MOVWF  x16
24F4:  MOVLW  04
24F6:  MOVWF  x17
24F8:  MOVLB  0
24FA:  CALL   09EC
....................                printf(lcd_putc,"                    ");} 
24FE:  MOVLW  5C
2500:  MOVWF  FF6
2502:  MOVLW  03
2504:  MOVWF  FF7
2506:  CALL   0EEA
250A:  MOVLB  1
....................                 
....................             if(estadoalarma==0) 
250C:  BTFSC  34.2
250E:  BRA    2580
....................             {estadoalarma=0; 
2510:  BCF    34.2
....................                lcd_gotoxy(1,1); 
2512:  MOVLW  01
2514:  MOVWF  x16
2516:  MOVWF  x17
2518:  MOVLB  0
251A:  CALL   09EC
....................                printf(lcd_putc,"                    "); 
251E:  MOVLW  72
2520:  MOVWF  FF6
2522:  MOVLW  03
2524:  MOVWF  FF7
2526:  CALL   0EEA
....................                lcd_gotoxy(1,2); 
252A:  MOVLW  01
252C:  MOVLB  1
252E:  MOVWF  x16
2530:  MOVLW  02
2532:  MOVWF  x17
2534:  MOVLB  0
2536:  CALL   09EC
....................                printf(lcd_putc,"      Desactivo     "); 
253A:  MOVLW  88
253C:  MOVWF  FF6
253E:  MOVLW  03
2540:  MOVWF  FF7
2542:  CALL   0EEA
....................                lcd_gotoxy(1,3); 
2546:  MOVLW  01
2548:  MOVLB  1
254A:  MOVWF  x16
254C:  MOVLW  03
254E:  MOVWF  x17
2550:  MOVLB  0
2552:  CALL   09EC
....................                printf(lcd_putc,"       Alarma       "); 
2556:  MOVLW  9E
2558:  MOVWF  FF6
255A:  MOVLW  03
255C:  MOVWF  FF7
255E:  CALL   0EEA
....................                lcd_gotoxy(1,4); 
2562:  MOVLW  01
2564:  MOVLB  1
2566:  MOVWF  x16
2568:  MOVLW  04
256A:  MOVWF  x17
256C:  MOVLB  0
256E:  CALL   09EC
....................                printf(lcd_putc,"                    ");} 
2572:  MOVLW  B4
2574:  MOVWF  FF6
2576:  MOVLW  03
2578:  MOVWF  FF7
257A:  CALL   0EEA
257E:  MOVLB  1
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(500);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2580:  MOVLW  00
2582:  BTFSC  34.2
2584:  MOVLW  01
2586:  MOVWF  x00
2588:  MOVLW  05
258A:  MOVWF  FA9
258C:  MOVFF  100,FA8
2590:  BCF    FA6.6
2592:  BCF    FA6.7
2594:  BSF    FA6.2
2596:  MOVF   FF2,W
2598:  MOVWF  00
259A:  BCF    FF2.7
259C:  MOVLB  F
259E:  MOVLW  55
25A0:  MOVWF  FA7
25A2:  MOVLW  AA
25A4:  MOVWF  FA7
25A6:  BSF    FA6.1
25A8:  BTFSC  FA6.1
25AA:  BRA    25A8
25AC:  BCF    FA6.2
25AE:  MOVF   00,W
25B0:  IORWF  FF2,F
25B2:  MOVLW  02
25B4:  MOVLB  1
25B6:  MOVWF  x00
25B8:  MOVLW  FA
25BA:  MOVWF  x1B
25BC:  MOVLB  0
25BE:  CALL   08E2
25C2:  MOVLB  1
25C4:  DECFSZ x00,F
25C6:  BRA    25B8
25C8:  MOVLW  02
25CA:  MOVWF  1B
25CC:  MOVWF  1D
25CE:  MOVLW  0C
25D0:  MOVWF  x15
25D2:  MOVLB  0
25D4:  CALL   0A5E
25D8:  MOVLB  1
....................    }       
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de SetPoint 
25DA:  MOVF   17,W
25DC:  SUBLW  03
25DE:  BTFSS  FD8.2
25E0:  BRA    287A
....................    lcd_gotoxy(1,1); 
25E2:  MOVLW  01
25E4:  MOVWF  x16
25E6:  MOVWF  x17
25E8:  MOVLB  0
25EA:  CALL   09EC
....................    printf(lcd_putc,"  Duracion Actual   ");                           
25EE:  MOVLW  CA
25F0:  MOVWF  FF6
25F2:  MOVLW  03
25F4:  MOVWF  FF7
25F6:  CALL   0EEA
....................    lcd_gotoxy(1,2);                                                   
25FA:  MOVLW  01
25FC:  MOVLB  1
25FE:  MOVWF  x16
2600:  MOVLW  02
2602:  MOVWF  x17
2604:  MOVLB  0
2606:  CALL   09EC
....................    printf(lcd_putc," Tiempo= %02u:%02u:%02u ",horas,minutos,segundos);       
260A:  MOVLW  E0
260C:  MOVWF  FF6
260E:  MOVLW  03
2610:  MOVWF  FF7
2612:  MOVLW  09
2614:  MOVLB  1
2616:  MOVWF  x08
2618:  MOVLB  0
261A:  CALL   0F0A
261E:  MOVFF  32,FF
2622:  MOVLW  01
2624:  MOVLB  1
2626:  MOVWF  x00
2628:  MOVLB  0
262A:  CALL   1150
262E:  MOVLW  3A
2630:  MOVLB  1
2632:  MOVWF  x15
2634:  MOVLB  0
2636:  CALL   0A5E
263A:  MOVFF  31,FF
263E:  MOVLW  01
2640:  MOVLB  1
2642:  MOVWF  x00
2644:  MOVLB  0
2646:  CALL   1150
264A:  MOVLW  3A
264C:  MOVLB  1
264E:  MOVWF  x15
2650:  MOVLB  0
2652:  CALL   0A5E
2656:  MOVFF  30,FF
265A:  MOVLW  01
265C:  MOVLB  1
265E:  MOVWF  x00
2660:  MOVLB  0
2662:  CALL   1150
2666:  MOVLW  20
2668:  MOVLB  1
266A:  MOVWF  x15
266C:  MOVLB  0
266E:  CALL   0A5E
....................     
....................    if(flag_filtro==1) 
2672:  BTFSS  35.2
2674:  BRA    2694
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2676:  MOVLW  01
2678:  MOVLB  1
267A:  MOVWF  x16
267C:  MOVLW  03
267E:  MOVWF  x17
2680:  MOVLB  0
2682:  CALL   09EC
....................       printf(lcd_putc,"DESACTIVAR= Oprima >");                         
2686:  MOVLW  FA
2688:  MOVWF  FF6
268A:  MOVLW  03
268C:  MOVWF  FF7
268E:  CALL   0EEA
....................    } 
....................    else 
2692:  BRA    26B0
....................    { 
....................       lcd_gotoxy(1,3);                                                  
2694:  MOVLW  01
2696:  MOVLB  1
2698:  MOVWF  x16
269A:  MOVLW  03
269C:  MOVWF  x17
269E:  MOVLB  0
26A0:  CALL   09EC
....................       printf(lcd_putc," ACTIVAR= Oprima >  ");                         
26A4:  MOVLW  10
26A6:  MOVWF  FF6
26A8:  MOVLW  04
26AA:  MOVWF  FF7
26AC:  CALL   0EEA
....................    } 
....................     
....................    lcd_gotoxy(1,4);                                                  
26B0:  MOVLW  01
26B2:  MOVLB  1
26B4:  MOVWF  x16
26B6:  MOVLW  04
26B8:  MOVWF  x17
26BA:  MOVLB  0
26BC:  CALL   09EC
....................    printf(lcd_putc," RESET= Oprima ^    ");                         
26C0:  MOVLW  26
26C2:  MOVWF  FF6
26C4:  MOVLW  04
26C6:  MOVWF  FF7
26C8:  CALL   0EEA
....................                                                                      
....................     
....................       if(UP)//Si oprime hacia arriba 
26CC:  BSF    F93.3
26CE:  BTFSS  F81.3
26D0:  BRA    27D4
....................       {  delay_ms(200); 
26D2:  MOVLW  C8
26D4:  MOVLB  1
26D6:  MOVWF  x1B
26D8:  MOVLB  0
26DA:  CALL   08E2
....................          printf(lcd_putc,"\f"); 
26DE:  MOVLW  0C
26E0:  MOVLB  1
26E2:  MOVWF  x15
26E4:  MOVLB  0
26E6:  CALL   0A5E
....................          lcd_gotoxy(1,2); 
26EA:  MOVLW  01
26EC:  MOVLB  1
26EE:  MOVWF  x16
26F0:  MOVLW  02
26F2:  MOVWF  x17
26F4:  MOVLB  0
26F6:  CALL   09EC
....................          printf(lcd_putc," Reset de tiempo "); 
26FA:  MOVLW  3C
26FC:  MOVWF  FF6
26FE:  MOVLW  04
2700:  MOVWF  FF7
2702:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
2706:  MOVLW  01
2708:  MOVLB  1
270A:  MOVWF  x16
270C:  MOVLW  03
270E:  MOVWF  x17
2710:  MOVLB  0
2712:  CALL   09EC
....................          printf(lcd_putc,"     Exitoso     "); 
2716:  MOVLW  4E
2718:  MOVWF  FF6
271A:  MOVLW  04
271C:  MOVWF  FF7
271E:  CALL   0EEA
....................          write_eeprom(70,0);write_eeprom(71,0);write_eeprom(72,0); 
2722:  MOVLW  46
2724:  MOVWF  FA9
2726:  CLRF   FA8
2728:  BCF    FA6.6
272A:  BCF    FA6.7
272C:  BSF    FA6.2
272E:  MOVF   FF2,W
2730:  MOVWF  00
2732:  BCF    FF2.7
2734:  MOVLB  F
2736:  MOVLW  55
2738:  MOVWF  FA7
273A:  MOVLW  AA
273C:  MOVWF  FA7
273E:  BSF    FA6.1
2740:  BTFSC  FA6.1
2742:  BRA    2740
2744:  BCF    FA6.2
2746:  MOVF   00,W
2748:  IORWF  FF2,F
274A:  MOVLW  47
274C:  MOVWF  FA9
274E:  CLRF   FA8
2750:  BCF    FA6.6
2752:  BCF    FA6.7
2754:  BSF    FA6.2
2756:  MOVF   FF2,W
2758:  MOVWF  00
275A:  BCF    FF2.7
275C:  MOVLW  55
275E:  MOVWF  FA7
2760:  MOVLW  AA
2762:  MOVWF  FA7
2764:  BSF    FA6.1
2766:  BTFSC  FA6.1
2768:  BRA    2766
276A:  BCF    FA6.2
276C:  MOVF   00,W
276E:  IORWF  FF2,F
2770:  MOVLW  48
2772:  MOVWF  FA9
2774:  CLRF   FA8
2776:  BCF    FA6.6
2778:  BCF    FA6.7
277A:  BSF    FA6.2
277C:  MOVF   FF2,W
277E:  MOVWF  00
2780:  BCF    FF2.7
2782:  MOVLW  55
2784:  MOVWF  FA7
2786:  MOVLW  AA
2788:  MOVWF  FA7
278A:  BSF    FA6.1
278C:  BTFSC  FA6.1
278E:  BRA    278C
2790:  BCF    FA6.2
2792:  MOVF   00,W
2794:  IORWF  FF2,F
....................          delay_ms(700); 
2796:  MOVLW  04
2798:  MOVLB  1
279A:  MOVWF  x00
279C:  MOVLW  AF
279E:  MOVWF  x1B
27A0:  MOVLB  0
27A2:  CALL   08E2
27A6:  MOVLB  1
27A8:  DECFSZ x00,F
27AA:  BRA    279C
....................          segundos=0;minutos=0;horas=0; 
27AC:  CLRF   30
27AE:  CLRF   31
27B0:  CLRF   32
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
27B2:  MOVLW  1E
27B4:  MOVWF  x1B
27B6:  MOVLB  0
27B8:  CALL   08E2
27BC:  MOVLW  01
27BE:  MOVWF  17
27C0:  CLRF   36
27C2:  MOVLW  02
27C4:  MOVWF  1B
27C6:  MOVWF  1D
27C8:  MOVLW  0C
27CA:  MOVLB  1
27CC:  MOVWF  x15
27CE:  MOVLB  0
27D0:  CALL   0A5E
....................       } 
....................        
....................       if(RIGHT) 
27D4:  BSF    F93.0
27D6:  BTFSS  F81.0
27D8:  BRA    283C
....................       { 
....................          flag_filtro=!flag_filtro;write_eeprom(73,flag_filtro); 
27DA:  BTG    35.2
27DC:  MOVLW  00
27DE:  BTFSC  35.2
27E0:  MOVLW  01
27E2:  MOVLB  1
27E4:  MOVWF  x00
27E6:  MOVLW  49
27E8:  MOVWF  FA9
27EA:  MOVFF  100,FA8
27EE:  BCF    FA6.6
27F0:  BCF    FA6.7
27F2:  BSF    FA6.2
27F4:  MOVF   FF2,W
27F6:  MOVWF  00
27F8:  BCF    FF2.7
27FA:  MOVLB  F
27FC:  MOVLW  55
27FE:  MOVWF  FA7
2800:  MOVLW  AA
2802:  MOVWF  FA7
2804:  BSF    FA6.1
2806:  BTFSC  FA6.1
2808:  BRA    2806
280A:  BCF    FA6.2
280C:  MOVF   00,W
280E:  IORWF  FF2,F
....................          delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2810:  MOVLW  02
2812:  MOVLB  1
2814:  MOVWF  x00
2816:  MOVLW  FA
2818:  MOVWF  x1B
281A:  MOVLB  0
281C:  CALL   08E2
2820:  MOVLB  1
2822:  DECFSZ x00,F
2824:  BRA    2816
2826:  MOVLW  01
2828:  MOVWF  17
282A:  CLRF   36
282C:  MOVLW  02
282E:  MOVWF  1B
2830:  MOVWF  1D
2832:  MOVLW  0C
2834:  MOVWF  x15
2836:  MOVLB  0
2838:  CALL   0A5E
....................       } 
....................              
....................        if(LEFT)// Si oprime Izquierda 
283C:  BSF    F93.1
283E:  BTFSS  F81.1
2840:  BRA    2876
....................       {  if(Flanco3 == 0)  
2842:  BTFSC  34.7
2844:  BRA    2874
....................             {Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
2846:  BSF    34.7
2848:  MOVLW  02
284A:  MOVLB  1
284C:  MOVWF  x00
284E:  MOVLW  FA
2850:  MOVWF  x1B
2852:  MOVLB  0
2854:  CALL   08E2
2858:  MOVLB  1
285A:  DECFSZ x00,F
285C:  BRA    284E
285E:  MOVLW  01
2860:  MOVWF  17
2862:  CLRF   36
2864:  MOVLW  02
2866:  MOVWF  1B
2868:  MOVWF  1D
286A:  MOVLW  0C
286C:  MOVWF  x15
286E:  MOVLB  0
2870:  CALL   0A5E
....................          else 
2874:  BRA    2878
....................             {Flanco3 = 0;}       
2876:  BCF    34.7
2878:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de seleccion de SetPoint 
287A:  MOVF   17,W
287C:  SUBLW  04
287E:  BTFSS  FD8.2
2880:  BRA    2B96
....................    lcd_gotoxy(1,2); 
2882:  MOVLW  01
2884:  MOVWF  x16
2886:  MOVLW  02
2888:  MOVWF  x17
288A:  MOVLB  0
288C:  CALL   09EC
....................    printf(lcd_putc,"      Setpoint      "); 
2890:  MOVLW  60
2892:  MOVWF  FF6
2894:  MOVLW  04
2896:  MOVWF  FF7
2898:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
289C:  MOVLW  01
289E:  MOVLB  1
28A0:  MOVWF  x16
28A2:  MOVLW  03
28A4:  MOVWF  x17
28A6:  MOVLB  0
28A8:  CALL   09EC
....................    printf(lcd_putc,"       %2.2f   ",setpoint); 
28AC:  MOVLW  76
28AE:  MOVWF  FF6
28B0:  MOVLW  04
28B2:  MOVWF  FF7
28B4:  MOVLW  07
28B6:  MOVLB  1
28B8:  MOVWF  x08
28BA:  MOVLB  0
28BC:  CALL   0F0A
28C0:  MOVLW  89
28C2:  MOVWF  FE9
28C4:  MOVFF  45,10B
28C8:  MOVFF  44,10A
28CC:  MOVFF  43,109
28D0:  MOVFF  42,108
28D4:  MOVLW  02
28D6:  MOVLB  1
28D8:  MOVWF  x0C
28DA:  MOVLB  0
28DC:  CALL   1384
28E0:  MOVLW  20
28E2:  MOVLB  1
28E4:  MOVWF  x15
28E6:  MOVLB  0
28E8:  CALL   0A5E
28EC:  MOVLW  20
28EE:  MOVLB  1
28F0:  MOVWF  x15
28F2:  MOVLB  0
28F4:  CALL   0A5E
28F8:  MOVLW  20
28FA:  MOVLB  1
28FC:  MOVWF  x15
28FE:  MOVLB  0
2900:  CALL   0A5E
....................     
....................    if(setpoint>2.0) 
2904:  MOVLB  1
2906:  CLRF   x02
2908:  CLRF   x01
290A:  CLRF   x00
290C:  MOVLW  80
290E:  MOVLB  0
2910:  MOVWF  xFF
2912:  MOVFF  45,106
2916:  MOVFF  44,105
291A:  MOVFF  43,104
291E:  MOVFF  42,103
2922:  CALL   1536
2926:  BNC   2932
....................    {setpoint=2.0;} 
2928:  CLRF   45
292A:  CLRF   44
292C:  CLRF   43
292E:  MOVLW  80
2930:  MOVWF  42
....................     
....................    if(setpoint<0.5) 
2932:  MOVFF  45,102
2936:  MOVFF  44,101
293A:  MOVFF  43,100
293E:  MOVFF  42,FF
2942:  MOVLB  1
2944:  CLRF   x06
2946:  CLRF   x05
2948:  CLRF   x04
294A:  MOVLW  7E
294C:  MOVWF  x03
294E:  MOVLB  0
2950:  CALL   1536
2954:  BNC   2960
....................    {setpoint=0.5;} 
2956:  CLRF   45
2958:  CLRF   44
295A:  CLRF   43
295C:  MOVLW  7E
295E:  MOVWF  42
....................     
....................       if(UP)//Si oprime hacia arriba 
2960:  BSF    F93.3
2962:  BTFSS  F81.3
2964:  BRA    29B4
....................       {  if(Flanco == 0)  
2966:  BTFSC  34.4
2968:  BRA    29B2
....................             {setpoint+=0.1;Flanco = 1;delay_ms(30);}} 
296A:  BCF    FD8.1
296C:  MOVFF  45,105
2970:  MOVFF  44,104
2974:  MOVFF  43,103
2978:  MOVFF  42,102
297C:  MOVLW  CD
297E:  MOVLB  1
2980:  MOVWF  x09
2982:  MOVLW  CC
2984:  MOVWF  x08
2986:  MOVLW  4C
2988:  MOVWF  x07
298A:  MOVLW  7B
298C:  MOVWF  x06
298E:  MOVLB  0
2990:  CALL   0C5E
2994:  MOVFF  03,45
2998:  MOVFF  02,44
299C:  MOVFF  01,43
29A0:  MOVFF  00,42
29A4:  BSF    34.4
29A6:  MOVLW  1E
29A8:  MOVLB  1
29AA:  MOVWF  x1B
29AC:  MOVLB  0
29AE:  CALL   08E2
....................          else 
29B2:  BRA    29B6
....................             {Flanco = 0;} 
29B4:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
29B6:  BSF    F93.2
29B8:  BTFSS  F81.2
29BA:  BRA    2A0A
....................       {  if(Flanco2 == 0)  
29BC:  BTFSC  34.6
29BE:  BRA    2A08
....................             {setpoint-=0.1;Flanco2 = 1;delay_ms(30);}} 
29C0:  BSF    FD8.1
29C2:  MOVFF  45,105
29C6:  MOVFF  44,104
29CA:  MOVFF  43,103
29CE:  MOVFF  42,102
29D2:  MOVLW  CD
29D4:  MOVLB  1
29D6:  MOVWF  x09
29D8:  MOVLW  CC
29DA:  MOVWF  x08
29DC:  MOVLW  4C
29DE:  MOVWF  x07
29E0:  MOVLW  7B
29E2:  MOVWF  x06
29E4:  MOVLB  0
29E6:  CALL   0C5E
29EA:  MOVFF  03,45
29EE:  MOVFF  02,44
29F2:  MOVFF  01,43
29F6:  MOVFF  00,42
29FA:  BSF    34.6
29FC:  MOVLW  1E
29FE:  MOVLB  1
2A00:  MOVWF  x1B
2A02:  MOVLB  0
2A04:  CALL   08E2
....................          else 
2A08:  BRA    2A0C
....................             {Flanco2 = 0;} 
2A0A:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
2A0C:  BSF    F93.0
2A0E:  BTFSS  F81.0
2A10:  BRA    2B54
....................       {  if(Flanco1 == 0)  
2A12:  BTFSC  34.5
2A14:  BRA    2B52
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2A16:  MOVLW  01
2A18:  MOVWF  17
2A1A:  CLRF   36
2A1C:  MOVLW  02
2A1E:  MOVWF  1B
2A20:  MOVWF  1D
2A22:  MOVLW  0B
2A24:  MOVWF  1A
2A26:  MOVLW  02
2A28:  MOVLB  1
2A2A:  MOVWF  x00
2A2C:  MOVLW  FA
2A2E:  MOVWF  x1B
2A30:  MOVLB  0
2A32:  CALL   08E2
2A36:  MOVLB  1
2A38:  DECFSZ x00,F
2A3A:  BRA    2A2C
2A3C:  MOVLW  0C
2A3E:  MOVWF  x15
2A40:  MOVLB  0
2A42:  CALL   0A5E
....................             Temporal=setpoint; 
2A46:  MOVFF  45,AA
2A4A:  MOVFF  44,A9
2A4E:  MOVFF  43,A8
2A52:  MOVFF  42,A7
....................             Entero=(int)setpoint; 
2A56:  MOVFF  45,102
2A5A:  MOVFF  44,101
2A5E:  MOVFF  43,100
2A62:  MOVFF  42,FF
2A66:  CALL   15B4
2A6A:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
2A6E:  MOVLB  1
2A70:  CLRF   x0A
2A72:  MOVFF  21,109
2A76:  MOVLB  0
2A78:  CALL   0ACA
2A7C:  BSF    FD8.1
2A7E:  MOVFF  AA,105
2A82:  MOVFF  A9,104
2A86:  MOVFF  A8,103
2A8A:  MOVFF  A7,102
2A8E:  MOVFF  03,109
2A92:  MOVFF  02,108
2A96:  MOVFF  01,107
2A9A:  MOVFF  00,106
2A9E:  CALL   0C5E
2AA2:  MOVFF  03,AA
2AA6:  MOVFF  02,A9
2AAA:  MOVFF  01,A8
2AAE:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
2AB2:  MOVFF  AA,118
2AB6:  MOVFF  A9,117
2ABA:  MOVFF  A8,116
2ABE:  MOVFF  A7,115
2AC2:  MOVLB  1
2AC4:  CLRF   x1C
2AC6:  CLRF   x1B
2AC8:  MOVLW  48
2ACA:  MOVWF  x1A
2ACC:  MOVLW  85
2ACE:  MOVWF  x19
2AD0:  MOVLB  0
2AD2:  CALL   11CA
2AD6:  MOVFF  03,AE
2ADA:  MOVFF  02,AD
2ADE:  MOVFF  01,AC
2AE2:  MOVFF  00,AB
....................             Decimal2=(int8)Temporal2; 
2AE6:  MOVFF  AE,102
2AEA:  MOVFF  AD,101
2AEE:  MOVFF  AC,100
2AF2:  MOVFF  AB,FF
2AF6:  CALL   15B4
2AFA:  MOVFF  01,23
....................             write_eeprom(40,Entero);write_eeprom(41,Decimal2);//Guardar valor de Setpoint en eeprom 
2AFE:  MOVLW  28
2B00:  MOVWF  FA9
2B02:  MOVFF  21,FA8
2B06:  BCF    FA6.6
2B08:  BCF    FA6.7
2B0A:  BSF    FA6.2
2B0C:  MOVF   FF2,W
2B0E:  MOVWF  00
2B10:  BCF    FF2.7
2B12:  MOVLB  F
2B14:  MOVLW  55
2B16:  MOVWF  FA7
2B18:  MOVLW  AA
2B1A:  MOVWF  FA7
2B1C:  BSF    FA6.1
2B1E:  BTFSC  FA6.1
2B20:  BRA    2B1E
2B22:  BCF    FA6.2
2B24:  MOVF   00,W
2B26:  IORWF  FF2,F
2B28:  MOVLW  29
2B2A:  MOVWF  FA9
2B2C:  MOVFF  23,FA8
2B30:  BCF    FA6.6
2B32:  BCF    FA6.7
2B34:  BSF    FA6.2
2B36:  MOVF   FF2,W
2B38:  MOVWF  00
2B3A:  BCF    FF2.7
2B3C:  MOVLW  55
2B3E:  MOVWF  FA7
2B40:  MOVLW  AA
2B42:  MOVWF  FA7
2B44:  BSF    FA6.1
2B46:  BTFSC  FA6.1
2B48:  BRA    2B46
2B4A:  BCF    FA6.2
2B4C:  MOVF   00,W
2B4E:  IORWF  FF2,F
2B50:  MOVLB  0
....................             }} 
....................          else 
2B52:  BRA    2B56
....................             {Flanco1 = 0;}    
2B54:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2B56:  BSF    F93.1
2B58:  BTFSS  F81.1
2B5A:  BRA    2B92
....................       {  if(Flanco3 == 0)  
2B5C:  BTFSC  34.7
2B5E:  BRA    2B90
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
2B60:  MOVLW  01
2B62:  MOVWF  17
2B64:  CLRF   36
2B66:  MOVLW  02
2B68:  MOVWF  1B
2B6A:  MOVWF  1D
2B6C:  MOVLW  0B
2B6E:  MOVWF  1A
2B70:  MOVLW  02
2B72:  MOVLB  1
2B74:  MOVWF  x00
2B76:  MOVLW  FA
2B78:  MOVWF  x1B
2B7A:  MOVLB  0
2B7C:  CALL   08E2
2B80:  MOVLB  1
2B82:  DECFSZ x00,F
2B84:  BRA    2B76
2B86:  MOVLW  0C
2B88:  MOVWF  x15
2B8A:  MOVLB  0
2B8C:  CALL   0A5E
....................          else 
2B90:  BRA    2B94
....................             {Flanco3 = 0;}     
2B92:  BCF    34.7
2B94:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu para Cambio de Contraseña 
2B96:  MOVF   17,W
2B98:  SUBLW  05
2B9A:  BTFSS  FD8.2
2B9C:  BRA    2F0E
....................    lcd_gotoxy(1,1); 
2B9E:  MOVLW  01
2BA0:  MOVWF  x16
2BA2:  MOVWF  x17
2BA4:  MOVLB  0
2BA6:  CALL   09EC
....................    printf(lcd_putc,"      Ingrese       "); 
2BAA:  MOVLW  86
2BAC:  MOVWF  FF6
2BAE:  MOVLW  04
2BB0:  MOVWF  FF7
2BB2:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
2BB6:  MOVLW  01
2BB8:  MOVLB  1
2BBA:  MOVWF  x16
2BBC:  MOVLW  02
2BBE:  MOVWF  x17
2BC0:  MOVLB  0
2BC2:  CALL   09EC
....................    printf(lcd_putc," Contraseña Actual  "); 
2BC6:  MOVLW  9C
2BC8:  MOVWF  FF6
2BCA:  MOVLW  04
2BCC:  MOVWF  FF7
2BCE:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
2BD2:  MOVLW  01
2BD4:  MOVLB  1
2BD6:  MOVWF  x16
2BD8:  MOVLW  03
2BDA:  MOVWF  x17
2BDC:  MOVLB  0
2BDE:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2BE2:  MOVLW  B2
2BE4:  MOVWF  FF6
2BE6:  MOVLW  04
2BE8:  MOVWF  FF7
2BEA:  MOVLW  0A
2BEC:  MOVLB  1
2BEE:  MOVWF  x08
2BF0:  MOVLB  0
2BF2:  CALL   0F0A
2BF6:  MOVFF  3A,100
2BFA:  MOVLW  1F
2BFC:  MOVLB  1
2BFE:  MOVWF  x01
2C00:  MOVLB  0
2C02:  CALL   0F5E
2C06:  MOVFF  3B,100
2C0A:  MOVLW  1F
2C0C:  MOVLB  1
2C0E:  MOVWF  x01
2C10:  MOVLB  0
2C12:  CALL   0F5E
2C16:  MOVFF  3C,100
2C1A:  MOVLW  1F
2C1C:  MOVLB  1
2C1E:  MOVWF  x01
2C20:  MOVLB  0
2C22:  CALL   0F5E
2C26:  MOVFF  3D,100
2C2A:  MOVLW  1F
2C2C:  MOVLB  1
2C2E:  MOVWF  x01
2C30:  MOVLB  0
2C32:  CALL   0F5E
2C36:  MOVLW  20
2C38:  MOVLB  1
2C3A:  MOVWF  x15
2C3C:  MOVLB  0
2C3E:  CALL   0A5E
2C42:  MOVLW  20
2C44:  MOVLB  1
2C46:  MOVWF  x15
2C48:  MOVLB  0
2C4A:  CALL   0A5E
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2C4E:  BSF    F93.3
2C50:  BTFSS  F81.3
2C52:  BRA    2C7A
....................       {  if(Flanco == 0)  
2C54:  BTFSC  34.4
2C56:  BRA    2C78
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2C58:  MOVLW  0B
2C5A:  SUBWF  1A,W
2C5C:  CLRF   03
2C5E:  ADDLW  3A
2C60:  MOVWF  FE9
2C62:  MOVLW  00
2C64:  ADDWFC 03,W
2C66:  MOVWF  FEA
2C68:  INCF   FEF,F
2C6A:  BSF    34.4
2C6C:  MOVLW  1E
2C6E:  MOVLB  1
2C70:  MOVWF  x1B
2C72:  MOVLB  0
2C74:  CALL   08E2
....................          else 
2C78:  BRA    2C7C
....................             {Flanco = 0;} 
2C7A:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2C7C:  BSF    F93.2
2C7E:  BTFSS  F81.2
2C80:  BRA    2CA8
....................       {  if(Flanco2 == 0)  
2C82:  BTFSC  34.6
2C84:  BRA    2CA6
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2C86:  MOVLW  0B
2C88:  SUBWF  1A,W
2C8A:  CLRF   03
2C8C:  ADDLW  3A
2C8E:  MOVWF  FE9
2C90:  MOVLW  00
2C92:  ADDWFC 03,W
2C94:  MOVWF  FEA
2C96:  DECF   FEF,F
2C98:  BSF    34.6
2C9A:  MOVLW  1E
2C9C:  MOVLB  1
2C9E:  MOVWF  x1B
2CA0:  MOVLB  0
2CA2:  CALL   08E2
....................          else 
2CA6:  BRA    2CAA
....................             {Flanco2 = 0;} 
2CA8:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
2CAA:  BSF    F93.0
2CAC:  BTFSS  F81.0
2CAE:  BRA    2CDA
....................       {  if(Flanco1 == 0)  
2CB0:  BTFSC  34.5
2CB2:  BRA    2CD8
....................             {Flanco1 = 1;unidad++;delay_ms(500);printf(lcd_putc,"\f");}} 
2CB4:  BSF    34.5
2CB6:  INCF   1A,F
2CB8:  MOVLW  02
2CBA:  MOVLB  1
2CBC:  MOVWF  x00
2CBE:  MOVLW  FA
2CC0:  MOVWF  x1B
2CC2:  MOVLB  0
2CC4:  CALL   08E2
2CC8:  MOVLB  1
2CCA:  DECFSZ x00,F
2CCC:  BRA    2CBE
2CCE:  MOVLW  0C
2CD0:  MOVWF  x15
2CD2:  MOVLB  0
2CD4:  CALL   0A5E
....................          else 
2CD8:  BRA    2CDC
....................             {Flanco1 = 0;}    
2CDA:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
2CDC:  BSF    F93.1
2CDE:  BTFSS  F81.1
2CE0:  BRA    2D0C
....................       {  if(Flanco3 == 0)  
2CE2:  BTFSC  34.7
2CE4:  BRA    2D0A
....................             {Flanco3 = 1;unidad--;delay_ms(500);printf(lcd_putc,"\f");}} 
2CE6:  BSF    34.7
2CE8:  DECF   1A,F
2CEA:  MOVLW  02
2CEC:  MOVLB  1
2CEE:  MOVWF  x00
2CF0:  MOVLW  FA
2CF2:  MOVWF  x1B
2CF4:  MOVLB  0
2CF6:  CALL   08E2
2CFA:  MOVLB  1
2CFC:  DECFSZ x00,F
2CFE:  BRA    2CF0
2D00:  MOVLW  0C
2D02:  MOVWF  x15
2D04:  MOVLB  0
2D06:  CALL   0A5E
....................          else 
2D0A:  BRA    2D0E
....................             {Flanco3 = 0;}     
2D0C:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2D0E:  MOVLW  0B
2D10:  SUBWF  1A,W
2D12:  CLRF   03
2D14:  ADDLW  3A
2D16:  MOVWF  FE9
2D18:  MOVLW  00
2D1A:  ADDWFC 03,W
2D1C:  MOVWF  FEA
2D1E:  BTFSC  FEF.7
2D20:  BRA    2D24
2D22:  BRA    2D38
....................        {clave[unidad-11]=9;} 
2D24:  MOVLW  0B
2D26:  SUBWF  1A,W
2D28:  CLRF   03
2D2A:  ADDLW  3A
2D2C:  MOVWF  FE9
2D2E:  MOVLW  00
2D30:  ADDWFC 03,W
2D32:  MOVWF  FEA
2D34:  MOVLW  09
2D36:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2D38:  MOVLW  0B
2D3A:  SUBWF  1A,W
2D3C:  CLRF   03
2D3E:  ADDLW  3A
2D40:  MOVWF  FE9
2D42:  MOVLW  00
2D44:  ADDWFC 03,W
2D46:  MOVWF  FEA
2D48:  BTFSC  FEF.7
2D4A:  BRA    2D64
2D4C:  MOVF   FEF,W
2D4E:  SUBLW  09
2D50:  BC    2D64
....................        {clave[unidad-11]=0;} 
2D52:  MOVLW  0B
2D54:  SUBWF  1A,W
2D56:  CLRF   03
2D58:  ADDLW  3A
2D5A:  MOVWF  FE9
2D5C:  MOVLW  00
2D5E:  ADDWFC 03,W
2D60:  MOVWF  FEA
2D62:  CLRF   FEF
....................        if(unidad<11) 
2D64:  MOVF   1A,W
2D66:  SUBLW  0A
2D68:  BNC   2D7A
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;} 
2D6A:  MOVLW  01
2D6C:  MOVWF  17
2D6E:  CLRF   36
2D70:  MOVLW  02
2D72:  MOVWF  1B
2D74:  MOVWF  1D
2D76:  MOVLW  0B
2D78:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2D7A:  MOVFF  1A,116
2D7E:  MOVLW  04
2D80:  MOVLB  1
2D82:  MOVWF  x17
2D84:  MOVLB  0
2D86:  CALL   09EC
....................        lcd_putc(t[2]); 
2D8A:  MOVFF  39,115
2D8E:  CALL   0A5E
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2D92:  MOVF   1A,W
2D94:  SUBLW  0E
2D96:  BTFSC  FD8.0
2D98:  BRA    2EE4
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2D9A:  MOVF   3E,W
2D9C:  SUBWF  3A,W
2D9E:  BNZ   2E52
2DA0:  MOVF   3F,W
2DA2:  SUBWF  3B,W
2DA4:  BNZ   2E52
2DA6:  MOVF   40,W
2DA8:  SUBWF  3C,W
2DAA:  BNZ   2E52
2DAC:  MOVF   41,W
2DAE:  SUBWF  3D,W
2DB0:  BNZ   2E52
....................             {lcd_gotoxy(1,1); 
2DB2:  MOVLW  01
2DB4:  MOVLB  1
2DB6:  MOVWF  x16
2DB8:  MOVWF  x17
2DBA:  MOVLB  0
2DBC:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2DC0:  MOVLW  C8
2DC2:  MOVWF  FF6
2DC4:  MOVLW  04
2DC6:  MOVWF  FF7
2DC8:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
2DCC:  MOVLW  01
2DCE:  MOVLB  1
2DD0:  MOVWF  x16
2DD2:  MOVLW  02
2DD4:  MOVWF  x17
2DD6:  MOVLB  0
2DD8:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
2DDC:  MOVLW  DE
2DDE:  MOVWF  FF6
2DE0:  MOVLW  04
2DE2:  MOVWF  FF7
2DE4:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2DE8:  MOVLW  01
2DEA:  MOVLB  1
2DEC:  MOVWF  x16
2DEE:  MOVLW  03
2DF0:  MOVWF  x17
2DF2:  MOVLB  0
2DF4:  CALL   09EC
....................             printf(lcd_putc,"      Correcta      "); 
2DF8:  MOVLW  F4
2DFA:  MOVWF  FF6
2DFC:  MOVLW  04
2DFE:  MOVWF  FF7
2E00:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2E04:  MOVLW  01
2E06:  MOVLB  1
2E08:  MOVWF  x16
2E0A:  MOVLW  04
2E0C:  MOVWF  x17
2E0E:  MOVLB  0
2E10:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2E14:  MOVLW  0A
2E16:  MOVWF  FF6
2E18:  MOVLW  05
2E1A:  MOVWF  FF7
2E1C:  CALL   0EEA
....................             delay_ms(500);Menu=51;unidad=11;printf(lcd_putc,"\f"); 
2E20:  MOVLW  02
2E22:  MOVLB  1
2E24:  MOVWF  x00
2E26:  MOVLW  FA
2E28:  MOVWF  x1B
2E2A:  MOVLB  0
2E2C:  CALL   08E2
2E30:  MOVLB  1
2E32:  DECFSZ x00,F
2E34:  BRA    2E26
2E36:  MOVLW  33
2E38:  MOVWF  17
2E3A:  MOVLW  0B
2E3C:  MOVWF  1A
2E3E:  MOVLW  0C
2E40:  MOVWF  x15
2E42:  MOVLB  0
2E44:  CALL   0A5E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2E48:  CLRF   3A
2E4A:  CLRF   3B
2E4C:  CLRF   3C
2E4E:  CLRF   3D
....................          else 
2E50:  BRA    2EE4
....................          {lcd_gotoxy(1,1); 
2E52:  MOVLW  01
2E54:  MOVLB  1
2E56:  MOVWF  x16
2E58:  MOVWF  x17
2E5A:  MOVLB  0
2E5C:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2E60:  MOVLW  20
2E62:  MOVWF  FF6
2E64:  MOVLW  05
2E66:  MOVWF  FF7
2E68:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
2E6C:  MOVLW  01
2E6E:  MOVLB  1
2E70:  MOVWF  x16
2E72:  MOVLW  02
2E74:  MOVWF  x17
2E76:  MOVLB  0
2E78:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
2E7C:  MOVLW  36
2E7E:  MOVWF  FF6
2E80:  MOVLW  05
2E82:  MOVWF  FF7
2E84:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
2E88:  MOVLW  01
2E8A:  MOVLB  1
2E8C:  MOVWF  x16
2E8E:  MOVLW  03
2E90:  MOVWF  x17
2E92:  MOVLB  0
2E94:  CALL   09EC
....................             printf(lcd_putc,"     Incorrecta     "); 
2E98:  MOVLW  4C
2E9A:  MOVWF  FF6
2E9C:  MOVLW  05
2E9E:  MOVWF  FF7
2EA0:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
2EA4:  MOVLW  01
2EA6:  MOVLB  1
2EA8:  MOVWF  x16
2EAA:  MOVLW  04
2EAC:  MOVWF  x17
2EAE:  MOVLB  0
2EB0:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
2EB4:  MOVLW  62
2EB6:  MOVWF  FF6
2EB8:  MOVLW  05
2EBA:  MOVWF  FF7
2EBC:  CALL   0EEA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2EC0:  MOVLW  02
2EC2:  MOVLB  1
2EC4:  MOVWF  x00
2EC6:  MOVLW  FA
2EC8:  MOVWF  x1B
2ECA:  MOVLB  0
2ECC:  CALL   08E2
2ED0:  MOVLB  1
2ED2:  DECFSZ x00,F
2ED4:  BRA    2EC6
2ED6:  MOVLW  0B
2ED8:  MOVWF  1A
2EDA:  MOVLW  0C
2EDC:  MOVWF  x15
2EDE:  MOVLB  0
2EE0:  CALL   0A5E
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2EE4:  MOVF   1A,W
2EE6:  SUBLW  0B
2EE8:  BC    2F0C
2EEA:  MOVF   1A,W
2EEC:  SUBLW  0D
2EEE:  BNC   2F0C
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2EF0:  MOVLW  01
2EF2:  SUBWF  1A,W
2EF4:  MOVLB  1
2EF6:  MOVWF  x00
2EF8:  MOVWF  x16
2EFA:  MOVLW  04
2EFC:  MOVWF  x17
2EFE:  MOVLB  0
2F00:  CALL   09EC
....................             lcd_putc(t[1]); 
2F04:  MOVFF  38,115
2F08:  CALL   0A5E
2F0C:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5.1--------------------------------------------------------------- 
....................    if(Menu == 51){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2F0E:  MOVF   17,W
2F10:  SUBLW  33
2F12:  BTFSS  FD8.2
2F14:  BRA    328C
....................    lcd_gotoxy(1,1); 
2F16:  MOVLW  01
2F18:  MOVWF  x16
2F1A:  MOVWF  x17
2F1C:  MOVLB  0
2F1E:  CALL   09EC
....................    printf(lcd_putc,"     Ingrese        "); 
2F22:  MOVLW  78
2F24:  MOVWF  FF6
2F26:  MOVLW  05
2F28:  MOVWF  FF7
2F2A:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
2F2E:  MOVLW  01
2F30:  MOVLB  1
2F32:  MOVWF  x16
2F34:  MOVLW  02
2F36:  MOVWF  x17
2F38:  MOVLB  0
2F3A:  CALL   09EC
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2F3E:  MOVLW  8E
2F40:  MOVWF  FF6
2F42:  MOVLW  05
2F44:  MOVWF  FF7
2F46:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
2F4A:  MOVLW  01
2F4C:  MOVLB  1
2F4E:  MOVWF  x16
2F50:  MOVLW  03
2F52:  MOVWF  x17
2F54:  MOVLB  0
2F56:  CALL   09EC
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F5A:  MOVLW  A4
2F5C:  MOVWF  FF6
2F5E:  MOVLW  05
2F60:  MOVWF  FF7
2F62:  MOVLW  0A
2F64:  MOVLB  1
2F66:  MOVWF  x08
2F68:  MOVLB  0
2F6A:  CALL   0F0A
2F6E:  MOVFF  3A,100
2F72:  MOVLW  1F
2F74:  MOVLB  1
2F76:  MOVWF  x01
2F78:  MOVLB  0
2F7A:  CALL   0F5E
2F7E:  MOVFF  3B,100
2F82:  MOVLW  1F
2F84:  MOVLB  1
2F86:  MOVWF  x01
2F88:  MOVLB  0
2F8A:  CALL   0F5E
2F8E:  MOVFF  3C,100
2F92:  MOVLW  1F
2F94:  MOVLB  1
2F96:  MOVWF  x01
2F98:  MOVLB  0
2F9A:  CALL   0F5E
2F9E:  MOVFF  3D,100
2FA2:  MOVLW  1F
2FA4:  MOVLB  1
2FA6:  MOVWF  x01
2FA8:  MOVLB  0
2FAA:  CALL   0F5E
2FAE:  MOVLW  20
2FB0:  MOVLB  1
2FB2:  MOVWF  x15
2FB4:  MOVLB  0
2FB6:  CALL   0A5E
2FBA:  MOVLW  20
2FBC:  MOVLB  1
2FBE:  MOVWF  x15
2FC0:  MOVLB  0
2FC2:  CALL   0A5E
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
2FC6:  BSF    F93.3
2FC8:  BTFSS  F81.3
2FCA:  BRA    2FF2
....................       {  if(Flanco == 0)  
2FCC:  BTFSC  34.4
2FCE:  BRA    2FF0
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2FD0:  MOVLW  0B
2FD2:  SUBWF  1A,W
2FD4:  CLRF   03
2FD6:  ADDLW  3A
2FD8:  MOVWF  FE9
2FDA:  MOVLW  00
2FDC:  ADDWFC 03,W
2FDE:  MOVWF  FEA
2FE0:  INCF   FEF,F
2FE2:  BSF    34.4
2FE4:  MOVLW  1E
2FE6:  MOVLB  1
2FE8:  MOVWF  x1B
2FEA:  MOVLB  0
2FEC:  CALL   08E2
....................          else 
2FF0:  BRA    2FF4
....................             {Flanco = 0;} 
2FF2:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2FF4:  BSF    F93.2
2FF6:  BTFSS  F81.2
2FF8:  BRA    3020
....................       {  if(Flanco2 == 0)  
2FFA:  BTFSC  34.6
2FFC:  BRA    301E
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2FFE:  MOVLW  0B
3000:  SUBWF  1A,W
3002:  CLRF   03
3004:  ADDLW  3A
3006:  MOVWF  FE9
3008:  MOVLW  00
300A:  ADDWFC 03,W
300C:  MOVWF  FEA
300E:  DECF   FEF,F
3010:  BSF    34.6
3012:  MOVLW  1E
3014:  MOVLB  1
3016:  MOVWF  x1B
3018:  MOVLB  0
301A:  CALL   08E2
....................          else 
301E:  BRA    3022
....................             {Flanco2 = 0;} 
3020:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime Derecha 
3022:  BSF    F93.0
3024:  BTFSS  F81.0
3026:  BRA    304A
....................       {  if(Flanco1 == 0)  
3028:  BTFSC  34.5
302A:  BRA    3048
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
302C:  BSF    34.5
302E:  INCF   1A,F
3030:  MOVLW  1E
3032:  MOVLB  1
3034:  MOVWF  x1B
3036:  MOVLB  0
3038:  CALL   08E2
303C:  MOVLW  0C
303E:  MOVLB  1
3040:  MOVWF  x15
3042:  MOVLB  0
3044:  CALL   0A5E
....................          else 
3048:  BRA    304C
....................             {Flanco1 = 0;}    
304A:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
304C:  BSF    F93.1
304E:  BTFSS  F81.1
3050:  BRA    3074
....................       {  if(Flanco3 == 0)  
3052:  BTFSC  34.7
3054:  BRA    3072
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
3056:  BSF    34.7
3058:  DECF   1A,F
305A:  MOVLW  1E
305C:  MOVLB  1
305E:  MOVWF  x1B
3060:  MOVLB  0
3062:  CALL   08E2
3066:  MOVLW  0C
3068:  MOVLB  1
306A:  MOVWF  x15
306C:  MOVLB  0
306E:  CALL   0A5E
....................          else 
3072:  BRA    3076
....................             {Flanco3 = 0;}     
3074:  BCF    34.7
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
3076:  MOVLW  0B
3078:  SUBWF  1A,W
307A:  CLRF   03
307C:  ADDLW  3A
307E:  MOVWF  FE9
3080:  MOVLW  00
3082:  ADDWFC 03,W
3084:  MOVWF  FEA
3086:  BTFSC  FEF.7
3088:  BRA    308C
308A:  BRA    30A0
....................        {clave[unidad-11]=9;} 
308C:  MOVLW  0B
308E:  SUBWF  1A,W
3090:  CLRF   03
3092:  ADDLW  3A
3094:  MOVWF  FE9
3096:  MOVLW  00
3098:  ADDWFC 03,W
309A:  MOVWF  FEA
309C:  MOVLW  09
309E:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
30A0:  MOVLW  0B
30A2:  SUBWF  1A,W
30A4:  CLRF   03
30A6:  ADDLW  3A
30A8:  MOVWF  FE9
30AA:  MOVLW  00
30AC:  ADDWFC 03,W
30AE:  MOVWF  FEA
30B0:  BTFSC  FEF.7
30B2:  BRA    30CC
30B4:  MOVF   FEF,W
30B6:  SUBLW  09
30B8:  BC    30CC
....................        {clave[unidad-11]=0;} 
30BA:  MOVLW  0B
30BC:  SUBWF  1A,W
30BE:  CLRF   03
30C0:  ADDLW  3A
30C2:  MOVWF  FE9
30C4:  MOVLW  00
30C6:  ADDWFC 03,W
30C8:  MOVWF  FEA
30CA:  CLRF   FEF
....................        if(unidad<11) 
30CC:  MOVF   1A,W
30CE:  SUBLW  0A
30D0:  BNC   30DA
....................        {Menu=5;unidad=11;} 
30D2:  MOVLW  05
30D4:  MOVWF  17
30D6:  MOVLW  0B
30D8:  MOVWF  1A
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
30DA:  MOVFF  1A,116
30DE:  MOVLW  04
30E0:  MOVLB  1
30E2:  MOVWF  x17
30E4:  MOVLB  0
30E6:  CALL   09EC
....................        lcd_putc(t[2]); 
30EA:  MOVFF  39,115
30EE:  CALL   0A5E
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
30F2:  MOVF   1A,W
30F4:  SUBLW  0E
30F6:  BTFSC  FD8.0
30F8:  BRA    3262
....................        { 
....................             lcd_gotoxy(1,1); 
30FA:  MOVLW  01
30FC:  MOVLB  1
30FE:  MOVWF  x16
3100:  MOVWF  x17
3102:  MOVLB  0
3104:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
3108:  MOVLW  BA
310A:  MOVWF  FF6
310C:  MOVLW  05
310E:  MOVWF  FF7
3110:  CALL   0EEA
....................             lcd_gotoxy(1,2); 
3114:  MOVLW  01
3116:  MOVLB  1
3118:  MOVWF  x16
311A:  MOVLW  02
311C:  MOVWF  x17
311E:  MOVLB  0
3120:  CALL   09EC
....................             printf(lcd_putc,"     Contraseña     "); 
3124:  MOVLW  D0
3126:  MOVWF  FF6
3128:  MOVLW  05
312A:  MOVWF  FF7
312C:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
3130:  MOVLW  01
3132:  MOVLB  1
3134:  MOVWF  x16
3136:  MOVLW  03
3138:  MOVWF  x17
313A:  MOVLB  0
313C:  CALL   09EC
....................             printf(lcd_putc,"     Almacenada     "); 
3140:  MOVLW  E6
3142:  MOVWF  FF6
3144:  MOVLW  05
3146:  MOVWF  FF7
3148:  CALL   0EEA
....................             lcd_gotoxy(1,4); 
314C:  MOVLW  01
314E:  MOVLB  1
3150:  MOVWF  x16
3152:  MOVLW  04
3154:  MOVWF  x17
3156:  MOVLB  0
3158:  CALL   09EC
....................             printf(lcd_putc,"                    "); 
315C:  MOVLW  FC
315E:  MOVWF  FF6
3160:  MOVLW  05
3162:  MOVWF  FF7
3164:  CALL   0EEA
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3168:  CLRF   FA9
316A:  MOVFF  3A,FA8
316E:  BCF    FA6.6
3170:  BCF    FA6.7
3172:  BSF    FA6.2
3174:  MOVF   FF2,W
3176:  MOVWF  00
3178:  BCF    FF2.7
317A:  MOVLB  F
317C:  MOVLW  55
317E:  MOVWF  FA7
3180:  MOVLW  AA
3182:  MOVWF  FA7
3184:  BSF    FA6.1
3186:  BTFSC  FA6.1
3188:  BRA    3186
318A:  BCF    FA6.2
318C:  MOVF   00,W
318E:  IORWF  FF2,F
3190:  MOVLW  14
3192:  MOVLB  1
3194:  MOVWF  x1B
3196:  MOVLB  0
3198:  CALL   08E2
319C:  MOVLW  01
319E:  MOVWF  FA9
31A0:  MOVFF  3B,FA8
31A4:  BCF    FA6.6
31A6:  BCF    FA6.7
31A8:  BSF    FA6.2
31AA:  MOVF   FF2,W
31AC:  MOVWF  00
31AE:  BCF    FF2.7
31B0:  MOVLB  F
31B2:  MOVLW  55
31B4:  MOVWF  FA7
31B6:  MOVLW  AA
31B8:  MOVWF  FA7
31BA:  BSF    FA6.1
31BC:  BTFSC  FA6.1
31BE:  BRA    31BC
31C0:  BCF    FA6.2
31C2:  MOVF   00,W
31C4:  IORWF  FF2,F
31C6:  MOVLW  14
31C8:  MOVLB  1
31CA:  MOVWF  x1B
31CC:  MOVLB  0
31CE:  CALL   08E2
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
31D2:  MOVLW  02
31D4:  MOVWF  FA9
31D6:  MOVFF  3C,FA8
31DA:  BCF    FA6.6
31DC:  BCF    FA6.7
31DE:  BSF    FA6.2
31E0:  MOVF   FF2,W
31E2:  MOVWF  00
31E4:  BCF    FF2.7
31E6:  MOVLB  F
31E8:  MOVLW  55
31EA:  MOVWF  FA7
31EC:  MOVLW  AA
31EE:  MOVWF  FA7
31F0:  BSF    FA6.1
31F2:  BTFSC  FA6.1
31F4:  BRA    31F2
31F6:  BCF    FA6.2
31F8:  MOVF   00,W
31FA:  IORWF  FF2,F
31FC:  MOVLW  14
31FE:  MOVLB  1
3200:  MOVWF  x1B
3202:  MOVLB  0
3204:  CALL   08E2
3208:  MOVLW  03
320A:  MOVWF  FA9
320C:  MOVFF  3D,FA8
3210:  BCF    FA6.6
3212:  BCF    FA6.7
3214:  BSF    FA6.2
3216:  MOVF   FF2,W
3218:  MOVWF  00
321A:  BCF    FF2.7
321C:  MOVLB  F
321E:  MOVLW  55
3220:  MOVWF  FA7
3222:  MOVLW  AA
3224:  MOVWF  FA7
3226:  BSF    FA6.1
3228:  BTFSC  FA6.1
322A:  BRA    3228
322C:  BCF    FA6.2
322E:  MOVF   00,W
3230:  IORWF  FF2,F
3232:  MOVLW  14
3234:  MOVLB  1
3236:  MOVWF  x1B
3238:  MOVLB  0
323A:  CALL   08E2
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
323E:  MOVLW  02
3240:  MOVLB  1
3242:  MOVWF  x00
3244:  MOVLW  FA
3246:  MOVWF  x1B
3248:  MOVLB  0
324A:  CALL   08E2
324E:  MOVLB  1
3250:  DECFSZ x00,F
3252:  BRA    3244
3254:  MOVLW  01
3256:  MOVWF  17
3258:  CLRF   36
325A:  MOVLW  02
325C:  MOVWF  1B
325E:  MOVWF  1D
3260:  MOVLB  0
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
3262:  MOVF   1A,W
3264:  SUBLW  0B
3266:  BC    328A
3268:  MOVF   1A,W
326A:  SUBLW  0D
326C:  BNC   328A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
326E:  MOVLW  01
3270:  SUBWF  1A,W
3272:  MOVLB  1
3274:  MOVWF  x00
3276:  MOVWF  x16
3278:  MOVLW  04
327A:  MOVWF  x17
327C:  MOVLB  0
327E:  CALL   09EC
....................             lcd_putc(t[1]); 
3282:  MOVFF  38,115
3286:  CALL   0A5E
328A:  MOVLB  1
....................           } 
....................    }       
.................... //----------------Fin-Menu5.1--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6) 
328C:  MOVF   17,W
328E:  SUBLW  06
3290:  BTFSS  FD8.2
3292:  BRA    3402
....................    { 
....................    lcd_gotoxy(1,2); 
3294:  MOVLW  01
3296:  MOVWF  x16
3298:  MOVLW  02
329A:  MOVWF  x17
329C:  MOVLB  0
329E:  CALL   09EC
....................    printf(lcd_putc,"     Media Movil    "); 
32A2:  MOVLW  12
32A4:  MOVWF  FF6
32A6:  MOVLW  06
32A8:  MOVWF  FF7
32AA:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
32AE:  MOVLW  01
32B0:  MOVLB  1
32B2:  MOVWF  x16
32B4:  MOVLW  03
32B6:  MOVWF  x17
32B8:  MOVLB  0
32BA:  CALL   09EC
....................    printf(lcd_putc,"       %02i   ",MediaMovil); 
32BE:  MOVLW  28
32C0:  MOVWF  FF6
32C2:  MOVLW  06
32C4:  MOVWF  FF7
32C6:  MOVLW  07
32C8:  MOVLB  1
32CA:  MOVWF  x08
32CC:  MOVLB  0
32CE:  CALL   0F0A
32D2:  MOVFF  2A,100
32D6:  MOVLW  01
32D8:  MOVLB  1
32DA:  MOVWF  x01
32DC:  MOVLB  0
32DE:  CALL   0F5E
32E2:  MOVLW  20
32E4:  MOVLB  1
32E6:  MOVWF  x15
32E8:  MOVLB  0
32EA:  CALL   0A5E
32EE:  MOVLW  20
32F0:  MOVLB  1
32F2:  MOVWF  x15
32F4:  MOVLB  0
32F6:  CALL   0A5E
32FA:  MOVLW  20
32FC:  MOVLB  1
32FE:  MOVWF  x15
3300:  MOVLB  0
3302:  CALL   0A5E
....................     
....................    if(MediaMovil>12) 
3306:  MOVF   2A,W
3308:  SUBLW  0C
330A:  BC    3310
....................    {MediaMovil=12;} 
330C:  MOVLW  0C
330E:  MOVWF  2A
....................     
....................    if(MediaMovil<1) 
3310:  MOVF   2A,F
3312:  BNZ   3318
....................    {MediaMovil=1;} 
3314:  MOVLW  01
3316:  MOVWF  2A
....................     
....................       if(UP)//Si oprime hacia arriba 
3318:  BSF    F93.3
331A:  BTFSS  F81.3
331C:  BRA    3336
....................       {  if(Flanco == 0)  
331E:  BTFSC  34.4
3320:  BRA    3334
....................             {MediaMovil+=1;Flanco = 1;delay_ms(30);}} 
3322:  MOVLW  01
3324:  ADDWF  2A,F
3326:  BSF    34.4
3328:  MOVLW  1E
332A:  MOVLB  1
332C:  MOVWF  x1B
332E:  MOVLB  0
3330:  CALL   08E2
....................          else 
3334:  BRA    3338
....................             {Flanco = 0;} 
3336:  BCF    34.4
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3338:  BSF    F93.2
333A:  BTFSS  F81.2
333C:  BRA    3356
....................       {  if(Flanco2 == 0)  
333E:  BTFSC  34.6
3340:  BRA    3354
....................             {MediaMovil-=1;Flanco2 = 1;delay_ms(30);}} 
3342:  MOVLW  01
3344:  SUBWF  2A,F
3346:  BSF    34.6
3348:  MOVLW  1E
334A:  MOVLB  1
334C:  MOVWF  x1B
334E:  MOVLB  0
3350:  CALL   08E2
....................          else 
3354:  BRA    3358
....................             {Flanco2 = 0;} 
3356:  BCF    34.6
....................     
....................       if(RIGHT)// Si oprime derecha 
3358:  BSF    F93.0
335A:  BTFSS  F81.0
335C:  BRA    33C0
....................       {  if(Flanco1 == 0)  
335E:  BTFSC  34.5
3360:  BRA    33BE
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3362:  MOVLW  01
3364:  MOVWF  17
3366:  CLRF   36
3368:  MOVLW  02
336A:  MOVWF  1B
336C:  MOVWF  1D
336E:  MOVLW  0B
3370:  MOVWF  1A
3372:  MOVLW  02
3374:  MOVLB  1
3376:  MOVWF  x00
3378:  MOVLW  FA
337A:  MOVWF  x1B
337C:  MOVLB  0
337E:  CALL   08E2
3382:  MOVLB  1
3384:  DECFSZ x00,F
3386:  BRA    3378
3388:  MOVLW  0C
338A:  MOVWF  x15
338C:  MOVLB  0
338E:  CALL   0A5E
....................             write_eeprom(42,MediaMovil);//Guardar valor de Setpoint en eeprom 
3392:  MOVLW  2A
3394:  MOVWF  FA9
3396:  MOVFF  2A,FA8
339A:  BCF    FA6.6
339C:  BCF    FA6.7
339E:  BSF    FA6.2
33A0:  MOVF   FF2,W
33A2:  MOVWF  00
33A4:  BCF    FF2.7
33A6:  MOVLB  F
33A8:  MOVLW  55
33AA:  MOVWF  FA7
33AC:  MOVLW  AA
33AE:  MOVWF  FA7
33B0:  BSF    FA6.1
33B2:  BTFSC  FA6.1
33B4:  BRA    33B2
33B6:  BCF    FA6.2
33B8:  MOVF   00,W
33BA:  IORWF  FF2,F
33BC:  MOVLB  0
....................             }} 
....................          else 
33BE:  BRA    33C2
....................             {Flanco1 = 0;}    
33C0:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
33C2:  BSF    F93.1
33C4:  BTFSS  F81.1
33C6:  BRA    33FE
....................       {  if(Flanco3 == 0)  
33C8:  BTFSC  34.7
33CA:  BRA    33FC
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
33CC:  MOVLW  01
33CE:  MOVWF  17
33D0:  CLRF   36
33D2:  MOVLW  02
33D4:  MOVWF  1B
33D6:  MOVWF  1D
33D8:  MOVLW  0B
33DA:  MOVWF  1A
33DC:  MOVLW  02
33DE:  MOVLB  1
33E0:  MOVWF  x00
33E2:  MOVLW  FA
33E4:  MOVWF  x1B
33E6:  MOVLB  0
33E8:  CALL   08E2
33EC:  MOVLB  1
33EE:  DECFSZ x00,F
33F0:  BRA    33E2
33F2:  MOVLW  0C
33F4:  MOVWF  x15
33F6:  MOVLB  0
33F8:  CALL   0A5E
....................          else 
33FC:  BRA    3400
....................             {Flanco3 = 0;}   
33FE:  BCF    34.7
3400:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7)// Menu de configuración de punto zero. 
3402:  MOVF   17,W
3404:  SUBLW  07
3406:  BTFSS  FD8.2
3408:  BRA    37F8
....................    { 
....................     
....................    lcd_gotoxy(1,1); 
340A:  MOVLW  01
340C:  MOVWF  x16
340E:  MOVWF  x17
3410:  MOVLB  0
3412:  CALL   09EC
....................    printf(lcd_putc,"  Zero Point Config "); 
3416:  MOVLW  38
3418:  MOVWF  FF6
341A:  MOVLW  06
341C:  MOVWF  FF7
341E:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
3422:  MOVLW  01
3424:  MOVLB  1
3426:  MOVWF  x16
3428:  MOVLW  02
342A:  MOVWF  x17
342C:  MOVLB  0
342E:  CALL   09EC
....................    printf(lcd_putc,"InFlow= %2.1f  (m/s) ",Flujo); 
3432:  MOVLW  4E
3434:  MOVWF  FF6
3436:  MOVLW  06
3438:  MOVWF  FF7
343A:  MOVLW  08
343C:  MOVLB  1
343E:  MOVWF  x08
3440:  MOVLB  0
3442:  CALL   0F0A
3446:  MOVLW  01
3448:  MOVWF  FE9
344A:  MOVFF  8E,10B
344E:  MOVFF  8D,10A
3452:  MOVFF  8C,109
3456:  MOVFF  8B,108
345A:  MOVLB  1
345C:  MOVWF  x0C
345E:  MOVLB  0
3460:  CALL   1384
3464:  MOVLW  5B
3466:  MOVWF  FF6
3468:  MOVLW  06
346A:  MOVWF  FF7
346C:  MOVLW  08
346E:  MOVLB  1
3470:  MOVWF  x08
3472:  MOVLB  0
3474:  CALL   0F0A
....................    lcd_gotoxy(1,3); 
3478:  MOVLW  01
347A:  MOVLB  1
347C:  MOVWF  x16
347E:  MOVLW  03
3480:  MOVWF  x17
3482:  MOVLB  0
3484:  CALL   09EC
....................    printf(lcd_putc,"ZF=%2.0f ADC=%2.0f",zero_fabrica,sensores(0)); 
3488:  MOVLB  1
348A:  CLRF   x04
348C:  MOVLB  0
348E:  CALL   15F0
3492:  MOVFF  00,100
3496:  MOVFF  01,101
349A:  MOVFF  02,102
349E:  MOVFF  03,103
34A2:  MOVLW  5A
34A4:  MOVLB  1
34A6:  MOVWF  x15
34A8:  MOVLB  0
34AA:  CALL   0A5E
34AE:  MOVLW  46
34B0:  MOVLB  1
34B2:  MOVWF  x15
34B4:  MOVLB  0
34B6:  CALL   0A5E
34BA:  MOVLW  3D
34BC:  MOVLB  1
34BE:  MOVWF  x15
34C0:  MOVLB  0
34C2:  CALL   0A5E
34C6:  MOVLW  01
34C8:  MOVWF  FE9
34CA:  MOVFF  4D,10B
34CE:  MOVFF  4C,10A
34D2:  MOVFF  4B,109
34D6:  MOVFF  4A,108
34DA:  MOVLB  1
34DC:  CLRF   x0C
34DE:  MOVLB  0
34E0:  CALL   1384
34E4:  MOVLW  6C
34E6:  MOVWF  FF6
34E8:  MOVLW  06
34EA:  MOVWF  FF7
34EC:  MOVLW  05
34EE:  MOVLB  1
34F0:  MOVWF  x08
34F2:  MOVLB  0
34F4:  CALL   0F0A
34F8:  MOVLW  01
34FA:  MOVWF  FE9
34FC:  MOVFF  103,10B
3500:  MOVFF  102,10A
3504:  MOVFF  101,109
3508:  MOVFF  100,108
350C:  MOVLB  1
350E:  CLRF   x0C
3510:  MOVLB  0
3512:  CALL   1384
....................    lcd_gotoxy(1,4); 
3516:  MOVLW  01
3518:  MOVLB  1
351A:  MOVWF  x16
351C:  MOVLW  04
351E:  MOVWF  x17
3520:  MOVLB  0
3522:  CALL   09EC
....................    printf(lcd_putc," Diferencia=%2.0f",Diferencia); 
3526:  MOVLW  78
3528:  MOVWF  FF6
352A:  MOVLW  06
352C:  MOVWF  FF7
352E:  MOVLW  0C
3530:  MOVLB  1
3532:  MOVWF  x08
3534:  MOVLB  0
3536:  CALL   0F0A
353A:  MOVLW  01
353C:  MOVWF  FE9
353E:  MOVFF  BE,10B
3542:  MOVFF  BD,10A
3546:  MOVFF  BC,109
354A:  MOVFF  BB,108
354E:  MOVLB  1
3550:  CLRF   x0C
3552:  MOVLB  0
3554:  CALL   1384
....................      
....................       if(RIGHT)// Si oprime derecha 
3558:  BSF    F93.0
355A:  BTFSS  F81.0
355C:  BRA    37B6
....................       {  if(Flanco1 == 0)  
355E:  BTFSC  34.5
3560:  BRA    37B4
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3562:  MOVLW  01
3564:  MOVWF  17
3566:  CLRF   36
3568:  MOVLW  02
356A:  MOVWF  1B
356C:  MOVWF  1D
356E:  MOVLW  0B
3570:  MOVWF  1A
3572:  MOVLW  02
3574:  MOVLB  1
3576:  MOVWF  x00
3578:  MOVLW  FA
357A:  MOVWF  x1B
357C:  MOVLB  0
357E:  CALL   08E2
3582:  MOVLB  1
3584:  DECFSZ x00,F
3586:  BRA    3578
3588:  MOVLW  0C
358A:  MOVWF  x15
358C:  MOVLB  0
358E:  CALL   0A5E
....................             Diferencia=zero_fabrica-sensores(0); 
3592:  MOVLB  1
3594:  CLRF   x04
3596:  MOVLB  0
3598:  CALL   15F0
359C:  MOVFF  FEA,101
35A0:  MOVFF  FE9,100
35A4:  BSF    FD8.1
35A6:  MOVFF  4D,105
35AA:  MOVFF  4C,104
35AE:  MOVFF  4B,103
35B2:  MOVFF  4A,102
35B6:  MOVFF  03,109
35BA:  MOVFF  02,108
35BE:  MOVFF  01,107
35C2:  MOVFF  00,106
35C6:  CALL   0C5E
35CA:  MOVFF  101,FEA
35CE:  MOVFF  100,FE9
35D2:  MOVFF  03,BE
35D6:  MOVFF  02,BD
35DA:  MOVFF  01,BC
35DE:  MOVFF  00,BB
....................              
....................             if(Diferencia>=0) 
35E2:  MOVLB  1
35E4:  CLRF   x02
35E6:  CLRF   x01
35E8:  CLRF   x00
35EA:  MOVLB  0
35EC:  CLRF   xFF
35EE:  MOVFF  BE,106
35F2:  MOVFF  BD,105
35F6:  MOVFF  BC,104
35FA:  MOVFF  BB,103
35FE:  CALL   1536
3602:  BC    3606
3604:  BNZ   3634
....................             { 
....................                negativo=10;write_eeprom(50,negativo); 
3606:  MOVLW  0A
3608:  MOVWF  2B
360A:  MOVLW  32
360C:  MOVWF  FA9
360E:  MOVFF  2B,FA8
3612:  BCF    FA6.6
3614:  BCF    FA6.7
3616:  BSF    FA6.2
3618:  MOVF   FF2,W
361A:  MOVWF  00
361C:  BCF    FF2.7
361E:  MOVLB  F
3620:  MOVLW  55
3622:  MOVWF  FA7
3624:  MOVLW  AA
3626:  MOVWF  FA7
3628:  BSF    FA6.1
362A:  BTFSC  FA6.1
362C:  BRA    362A
362E:  BCF    FA6.2
3630:  MOVF   00,W
3632:  IORWF  FF2,F
....................             } 
....................             if(Diferencia<0) 
3634:  MOVFF  BE,102
3638:  MOVFF  BD,101
363C:  MOVFF  BC,100
3640:  MOVFF  BB,FF
3644:  MOVLB  1
3646:  CLRF   x06
3648:  CLRF   x05
364A:  CLRF   x04
364C:  CLRF   x03
364E:  MOVLB  0
3650:  CALL   1536
3654:  BNC   3686
....................             { 
....................                negativo=20;write_eeprom(50,negativo); 
3656:  MOVLW  14
3658:  MOVWF  2B
365A:  MOVLW  32
365C:  MOVWF  FA9
365E:  MOVFF  2B,FA8
3662:  BCF    FA6.6
3664:  BCF    FA6.7
3666:  BSF    FA6.2
3668:  MOVF   FF2,W
366A:  MOVWF  00
366C:  BCF    FF2.7
366E:  MOVLB  F
3670:  MOVLW  55
3672:  MOVWF  FA7
3674:  MOVLW  AA
3676:  MOVWF  FA7
3678:  BSF    FA6.1
367A:  BTFSC  FA6.1
367C:  BRA    367A
367E:  BCF    FA6.2
3680:  MOVF   00,W
3682:  IORWF  FF2,F
3684:  MOVLB  0
....................             } 
....................             Diferencia=abs(Diferencia); 
3686:  MOVFF  BB,00
368A:  MOVFF  BC,01
368E:  MOVFF  BD,02
3692:  MOVFF  BE,03
3696:  BCF    01.7
3698:  MOVFF  BE,BE
369C:  MOVFF  BD,BD
36A0:  MOVFF  01,BC
36A4:  MOVFF  BB,BB
....................             Temporal1=Diferencia; 
36A8:  MOVFF  BE,B6
36AC:  MOVFF  BD,B5
36B0:  MOVFF  BC,B4
36B4:  MOVFF  BB,B3
....................             Entero1=(int)Temporal1; 
36B8:  MOVFF  B6,102
36BC:  MOVFF  B5,101
36C0:  MOVFF  B4,100
36C4:  MOVFF  B3,FF
36C8:  CALL   15B4
36CC:  MOVFF  01,24
....................             Temporal1=Temporal1-Entero1; 
36D0:  MOVLB  1
36D2:  CLRF   x0A
36D4:  MOVFF  24,109
36D8:  MOVLB  0
36DA:  CALL   0ACA
36DE:  BSF    FD8.1
36E0:  MOVFF  B6,105
36E4:  MOVFF  B5,104
36E8:  MOVFF  B4,103
36EC:  MOVFF  B3,102
36F0:  MOVFF  03,109
36F4:  MOVFF  02,108
36F8:  MOVFF  01,107
36FC:  MOVFF  00,106
3700:  CALL   0C5E
3704:  MOVFF  03,B6
3708:  MOVFF  02,B5
370C:  MOVFF  01,B4
3710:  MOVFF  00,B3
....................             Temporal12=Temporal1*100.0; 
3714:  MOVFF  B6,118
3718:  MOVFF  B5,117
371C:  MOVFF  B4,116
3720:  MOVFF  B3,115
3724:  MOVLB  1
3726:  CLRF   x1C
3728:  CLRF   x1B
372A:  MOVLW  48
372C:  MOVWF  x1A
372E:  MOVLW  85
3730:  MOVWF  x19
3732:  MOVLB  0
3734:  CALL   11CA
3738:  MOVFF  03,BA
373C:  MOVFF  02,B9
3740:  MOVFF  01,B8
3744:  MOVFF  00,B7
....................             Decimal12=(int8)Temporal12; 
3748:  MOVFF  BA,102
374C:  MOVFF  B9,101
3750:  MOVFF  B8,100
3754:  MOVFF  B7,FF
3758:  CALL   15B4
375C:  MOVFF  01,25
....................             write_eeprom(60,Entero1);write_eeprom(61,Decimal12);//Guardar valor de Setpoint en eeprom 
3760:  MOVLW  3C
3762:  MOVWF  FA9
3764:  MOVFF  24,FA8
3768:  BCF    FA6.6
376A:  BCF    FA6.7
376C:  BSF    FA6.2
376E:  MOVF   FF2,W
3770:  MOVWF  00
3772:  BCF    FF2.7
3774:  MOVLB  F
3776:  MOVLW  55
3778:  MOVWF  FA7
377A:  MOVLW  AA
377C:  MOVWF  FA7
377E:  BSF    FA6.1
3780:  BTFSC  FA6.1
3782:  BRA    3780
3784:  BCF    FA6.2
3786:  MOVF   00,W
3788:  IORWF  FF2,F
378A:  MOVLW  3D
378C:  MOVWF  FA9
378E:  MOVFF  25,FA8
3792:  BCF    FA6.6
3794:  BCF    FA6.7
3796:  BSF    FA6.2
3798:  MOVF   FF2,W
379A:  MOVWF  00
379C:  BCF    FF2.7
379E:  MOVLW  55
37A0:  MOVWF  FA7
37A2:  MOVLW  AA
37A4:  MOVWF  FA7
37A6:  BSF    FA6.1
37A8:  BTFSC  FA6.1
37AA:  BRA    37A8
37AC:  BCF    FA6.2
37AE:  MOVF   00,W
37B0:  IORWF  FF2,F
37B2:  MOVLB  0
....................             }} 
....................          else 
37B4:  BRA    37B8
....................             {Flanco1 = 0;}    
37B6:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
37B8:  BSF    F93.1
37BA:  BTFSS  F81.1
37BC:  BRA    37F4
....................       {  if(Flanco3 == 0)  
37BE:  BTFSC  34.7
37C0:  BRA    37F2
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
37C2:  MOVLW  01
37C4:  MOVWF  17
37C6:  CLRF   36
37C8:  MOVLW  02
37CA:  MOVWF  1B
37CC:  MOVWF  1D
37CE:  MOVLW  0B
37D0:  MOVWF  1A
37D2:  MOVLW  02
37D4:  MOVLB  1
37D6:  MOVWF  x00
37D8:  MOVLW  FA
37DA:  MOVWF  x1B
37DC:  MOVLB  0
37DE:  CALL   08E2
37E2:  MOVLB  1
37E4:  DECFSZ x00,F
37E6:  BRA    37D8
37E8:  MOVLW  0C
37EA:  MOVWF  x15
37EC:  MOVLB  0
37EE:  CALL   0A5E
....................          else 
37F2:  BRA    37F6
....................             {Flanco3 = 0;}   
37F4:  BCF    34.7
37F6:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu8--------------------------------------------------------------- 
....................    if(Menu == 8)// Menu de Mantenimiento 
37F8:  MOVF   17,W
37FA:  SUBLW  08
37FC:  BTFSS  FD8.2
37FE:  BRA    3D50
....................    { 
....................    lcd_gotoxy(1,1); 
3800:  MOVLW  01
3802:  MOVWF  x16
3804:  MOVWF  x17
3806:  MOVLB  0
3808:  CALL   09EC
....................    printf(lcd_putc," MANT.  V=%2.0f  ",sensores(0));//T= %2.0f",sensores(1));//T= %2.1f",TC); 
380C:  MOVLB  1
380E:  CLRF   x04
3810:  MOVLB  0
3812:  CALL   15F0
3816:  MOVFF  00,100
381A:  MOVFF  01,101
381E:  MOVFF  02,102
3822:  MOVFF  03,103
3826:  MOVLW  8A
3828:  MOVWF  FF6
382A:  MOVLW  06
382C:  MOVWF  FF7
382E:  MOVLW  0A
3830:  MOVLB  1
3832:  MOVWF  x08
3834:  MOVLB  0
3836:  CALL   0F0A
383A:  MOVLW  01
383C:  MOVWF  FE9
383E:  MOVFF  103,10B
3842:  MOVFF  102,10A
3846:  MOVFF  101,109
384A:  MOVFF  100,108
384E:  MOVLB  1
3850:  CLRF   x0C
3852:  MOVLB  0
3854:  CALL   1384
3858:  MOVLW  20
385A:  MOVLB  1
385C:  MOVWF  x15
385E:  MOVLB  0
3860:  CALL   0A5E
3864:  MOVLW  20
3866:  MOVLB  1
3868:  MOVWF  x15
386A:  MOVLB  0
386C:  CALL   0A5E
....................    lcd_gotoxy(1,2); 
3870:  MOVLW  01
3872:  MOVLB  1
3874:  MOVWF  x16
3876:  MOVLW  02
3878:  MOVWF  x17
387A:  MOVLB  0
387C:  CALL   09EC
....................    printf(lcd_putc,"Damp=%2.0f%%  T=%2.0f ",(100*((float)tmp/255)),sensores(1)); 
3880:  MOVLB  1
3882:  CLRF   x0A
3884:  MOVFF  29,109
3888:  MOVLB  0
388A:  CALL   0ACA
388E:  MOVFF  00,100
3892:  MOVFF  01,101
3896:  MOVFF  02,102
389A:  MOVFF  03,103
389E:  MOVFF  03,107
38A2:  MOVFF  02,106
38A6:  MOVFF  01,105
38AA:  MOVFF  00,104
38AE:  MOVLB  1
38B0:  CLRF   x0B
38B2:  CLRF   x0A
38B4:  MOVLW  7F
38B6:  MOVWF  x09
38B8:  MOVLW  86
38BA:  MOVWF  x08
38BC:  MOVLB  0
38BE:  CALL   0B00
38C2:  MOVLB  1
38C4:  CLRF   x18
38C6:  CLRF   x17
38C8:  MOVLW  48
38CA:  MOVWF  x16
38CC:  MOVLW  85
38CE:  MOVWF  x15
38D0:  MOVFF  03,11C
38D4:  MOVFF  02,11B
38D8:  MOVFF  01,11A
38DC:  MOVFF  00,119
38E0:  MOVLB  0
38E2:  CALL   11CA
38E6:  MOVFF  00,100
38EA:  MOVFF  01,101
38EE:  MOVFF  02,102
38F2:  MOVFF  03,103
38F6:  MOVLW  01
38F8:  MOVLB  1
38FA:  MOVWF  x04
38FC:  MOVLB  0
38FE:  CALL   15F0
3902:  MOVFF  00,104
3906:  MOVFF  01,105
390A:  MOVFF  02,106
390E:  MOVFF  03,107
3912:  MOVLW  9C
3914:  MOVWF  FF6
3916:  MOVLW  06
3918:  MOVWF  FF7
391A:  MOVLW  05
391C:  MOVLB  1
391E:  MOVWF  x08
3920:  MOVLB  0
3922:  CALL   0F0A
3926:  MOVLW  01
3928:  MOVWF  FE9
392A:  MOVFF  103,10B
392E:  MOVFF  102,10A
3932:  MOVFF  101,109
3936:  MOVFF  100,108
393A:  MOVLB  1
393C:  CLRF   x0C
393E:  MOVLB  0
3940:  CALL   1384
3944:  MOVLW  25
3946:  MOVLB  1
3948:  MOVWF  x15
394A:  MOVLB  0
394C:  CALL   0A5E
3950:  MOVLW  A8
3952:  MOVWF  FF6
3954:  MOVLW  06
3956:  MOVWF  FF7
3958:  MOVLW  04
395A:  MOVLB  1
395C:  MOVWF  x08
395E:  MOVLB  0
3960:  CALL   0F0A
3964:  MOVLW  01
3966:  MOVWF  FE9
3968:  MOVFF  107,10B
396C:  MOVFF  106,10A
3970:  MOVFF  105,109
3974:  MOVFF  104,108
3978:  MOVLB  1
397A:  CLRF   x0C
397C:  MOVLB  0
397E:  CALL   1384
3982:  MOVLW  20
3984:  MOVLB  1
3986:  MOVWF  x15
3988:  MOVLB  0
398A:  CALL   0A5E
....................    lcd_gotoxy(1,3); 
398E:  MOVLW  01
3990:  MOVLB  1
3992:  MOVWF  x16
3994:  MOVLW  03
3996:  MOVWF  x17
3998:  MOVLB  0
399A:  CALL   09EC
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
399E:  MOVLW  02
39A0:  MOVLB  1
39A2:  MOVWF  x04
39A4:  MOVLB  0
39A6:  CALL   15F0
39AA:  MOVFF  00,100
39AE:  MOVFF  01,101
39B2:  MOVFF  02,102
39B6:  MOVFF  03,103
39BA:  MOVFF  03,107
39BE:  MOVFF  02,106
39C2:  MOVFF  01,105
39C6:  MOVFF  00,104
39CA:  MOVLB  1
39CC:  CLRF   x0B
39CE:  MOVLW  C0
39D0:  MOVWF  x0A
39D2:  MOVLW  7F
39D4:  MOVWF  x09
39D6:  MOVLW  88
39D8:  MOVWF  x08
39DA:  MOVLB  0
39DC:  CALL   0B00
39E0:  MOVLB  1
39E2:  CLRF   x18
39E4:  CLRF   x17
39E6:  MOVLW  48
39E8:  MOVWF  x16
39EA:  MOVLW  85
39EC:  MOVWF  x15
39EE:  MOVFF  03,11C
39F2:  MOVFF  02,11B
39F6:  MOVFF  01,11A
39FA:  MOVFF  00,119
39FE:  MOVLB  0
3A00:  CALL   11CA
3A04:  MOVFF  00,100
3A08:  MOVFF  01,101
3A0C:  MOVFF  02,102
3A10:  MOVFF  03,103
3A14:  MOVLW  B4
3A16:  MOVWF  FF6
3A18:  MOVLW  06
3A1A:  MOVWF  FF7
3A1C:  MOVLW  04
3A1E:  MOVLB  1
3A20:  MOVWF  x08
3A22:  MOVLB  0
3A24:  CALL   0F0A
3A28:  MOVLW  01
3A2A:  MOVWF  FE9
3A2C:  MOVFF  8E,10B
3A30:  MOVFF  8D,10A
3A34:  MOVFF  8C,109
3A38:  MOVFF  8B,108
3A3C:  MOVLB  1
3A3E:  MOVWF  x0C
3A40:  MOVLB  0
3A42:  CALL   1384
3A46:  MOVLW  BD
3A48:  MOVWF  FF6
3A4A:  MOVLW  06
3A4C:  MOVWF  FF7
3A4E:  MOVLW  0A
3A50:  MOVLB  1
3A52:  MOVWF  x08
3A54:  MOVLB  0
3A56:  CALL   0F0A
3A5A:  MOVLW  01
3A5C:  MOVWF  FE9
3A5E:  MOVFF  103,10B
3A62:  MOVFF  102,10A
3A66:  MOVFF  101,109
3A6A:  MOVFF  100,108
3A6E:  MOVLB  1
3A70:  CLRF   x0C
3A72:  MOVLB  0
3A74:  CALL   1384
....................    lcd_gotoxy(1,4); 
3A78:  MOVLW  01
3A7A:  MOVLB  1
3A7C:  MOVWF  x16
3A7E:  MOVLW  04
3A80:  MOVWF  x17
3A82:  MOVLB  0
3A84:  CALL   09EC
....................    printf(lcd_putc,"Ajuste1= %2.2f ",Ajuste1); 
3A88:  MOVLW  CE
3A8A:  MOVWF  FF6
3A8C:  MOVLW  06
3A8E:  MOVWF  FF7
3A90:  MOVLW  09
3A92:  MOVLB  1
3A94:  MOVWF  x08
3A96:  MOVLB  0
3A98:  CALL   0F0A
3A9C:  MOVLW  89
3A9E:  MOVWF  FE9
3AA0:  MOVFF  C2,10B
3AA4:  MOVFF  C1,10A
3AA8:  MOVFF  C0,109
3AAC:  MOVFF  BF,108
3AB0:  MOVLW  02
3AB2:  MOVLB  1
3AB4:  MOVWF  x0C
3AB6:  MOVLB  0
3AB8:  CALL   1384
3ABC:  MOVLW  20
3ABE:  MOVLB  1
3AC0:  MOVWF  x15
3AC2:  MOVLB  0
3AC4:  CALL   0A5E
....................        
....................       if(UP)//Si oprime hacia arriba 
3AC8:  BSF    F93.3
3ACA:  BTFSS  F81.3
3ACC:  BRA    3B42
....................       { 
....................          Ajuste1+=0.01;delay_ms(50); 
3ACE:  BCF    FD8.1
3AD0:  MOVFF  C2,105
3AD4:  MOVFF  C1,104
3AD8:  MOVFF  C0,103
3ADC:  MOVFF  BF,102
3AE0:  MOVLW  0A
3AE2:  MOVLB  1
3AE4:  MOVWF  x09
3AE6:  MOVLW  D7
3AE8:  MOVWF  x08
3AEA:  MOVLW  23
3AEC:  MOVWF  x07
3AEE:  MOVLW  78
3AF0:  MOVWF  x06
3AF2:  MOVLB  0
3AF4:  CALL   0C5E
3AF8:  MOVFF  03,C2
3AFC:  MOVFF  02,C1
3B00:  MOVFF  01,C0
3B04:  MOVFF  00,BF
3B08:  MOVLW  32
3B0A:  MOVLB  1
3B0C:  MOVWF  x1B
3B0E:  MOVLB  0
3B10:  CALL   08E2
....................          if(Ajuste1>30.0) 
3B14:  MOVLB  1
3B16:  CLRF   x02
3B18:  CLRF   x01
3B1A:  MOVLW  70
3B1C:  MOVWF  x00
3B1E:  MOVLW  83
3B20:  MOVLB  0
3B22:  MOVWF  xFF
3B24:  MOVFF  C2,106
3B28:  MOVFF  C1,105
3B2C:  MOVFF  C0,104
3B30:  MOVFF  BF,103
3B34:  CALL   1536
3B38:  BNC   3B42
....................          {Ajuste1=0.0;} 
3B3A:  CLRF   xC2
3B3C:  CLRF   xC1
3B3E:  CLRF   xC0
3B40:  CLRF   xBF
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3B42:  BSF    F93.2
3B44:  BTFSS  F81.2
3B46:  BRA    3BB8
....................       { 
....................          Ajuste1-=0.01;delay_ms(50); 
3B48:  BSF    FD8.1
3B4A:  MOVFF  C2,105
3B4E:  MOVFF  C1,104
3B52:  MOVFF  C0,103
3B56:  MOVFF  BF,102
3B5A:  MOVLW  0A
3B5C:  MOVLB  1
3B5E:  MOVWF  x09
3B60:  MOVLW  D7
3B62:  MOVWF  x08
3B64:  MOVLW  23
3B66:  MOVWF  x07
3B68:  MOVLW  78
3B6A:  MOVWF  x06
3B6C:  MOVLB  0
3B6E:  CALL   0C5E
3B72:  MOVFF  03,C2
3B76:  MOVFF  02,C1
3B7A:  MOVFF  01,C0
3B7E:  MOVFF  00,BF
3B82:  MOVLW  32
3B84:  MOVLB  1
3B86:  MOVWF  x1B
3B88:  MOVLB  0
3B8A:  CALL   08E2
....................          if(Ajuste1<0.0) 
3B8E:  MOVFF  C2,102
3B92:  MOVFF  C1,101
3B96:  MOVFF  C0,100
3B9A:  MOVFF  BF,FF
3B9E:  MOVLB  1
3BA0:  CLRF   x06
3BA2:  CLRF   x05
3BA4:  CLRF   x04
3BA6:  CLRF   x03
3BA8:  MOVLB  0
3BAA:  CALL   1536
3BAE:  BNC   3BB8
....................          {Ajuste1=0.0;} 
3BB0:  CLRF   xC2
3BB2:  CLRF   xC1
3BB4:  CLRF   xC0
3BB6:  CLRF   xBF
....................       } 
....................        
....................       if(RIGHT)// Si oprime derecha 
3BB8:  BSF    F93.0
3BBA:  BTFSS  F81.0
3BBC:  BRA    3D0E
....................       {  if(Flanco1 == 0)  
3BBE:  BTFSC  34.5
3BC0:  BRA    3D0C
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3BC2:  MOVLW  01
3BC4:  MOVWF  17
3BC6:  CLRF   36
3BC8:  MOVLW  02
3BCA:  MOVWF  1B
3BCC:  MOVWF  1D
3BCE:  MOVLW  0B
3BD0:  MOVWF  1A
3BD2:  MOVLW  1E
3BD4:  MOVLB  1
3BD6:  MOVWF  x1B
3BD8:  MOVLB  0
3BDA:  CALL   08E2
3BDE:  MOVLW  0C
3BE0:  MOVLB  1
3BE2:  MOVWF  x15
3BE4:  MOVLB  0
3BE6:  CALL   0A5E
....................             Temporal=Ajuste1; 
3BEA:  MOVFF  C2,AA
3BEE:  MOVFF  C1,A9
3BF2:  MOVFF  C0,A8
3BF6:  MOVFF  BF,A7
....................             Entero=(int)Ajuste1; 
3BFA:  MOVFF  C2,102
3BFE:  MOVFF  C1,101
3C02:  MOVFF  C0,100
3C06:  MOVFF  BF,FF
3C0A:  CALL   15B4
3C0E:  MOVFF  01,21
....................             Temporal=Temporal-Entero; 
3C12:  MOVLB  1
3C14:  CLRF   x0A
3C16:  MOVFF  21,109
3C1A:  MOVLB  0
3C1C:  CALL   0ACA
3C20:  BSF    FD8.1
3C22:  MOVFF  AA,105
3C26:  MOVFF  A9,104
3C2A:  MOVFF  A8,103
3C2E:  MOVFF  A7,102
3C32:  MOVFF  03,109
3C36:  MOVFF  02,108
3C3A:  MOVFF  01,107
3C3E:  MOVFF  00,106
3C42:  CALL   0C5E
3C46:  MOVFF  03,AA
3C4A:  MOVFF  02,A9
3C4E:  MOVFF  01,A8
3C52:  MOVFF  00,A7
....................             Temporal2=Temporal*100.0; 
3C56:  MOVFF  AA,118
3C5A:  MOVFF  A9,117
3C5E:  MOVFF  A8,116
3C62:  MOVFF  A7,115
3C66:  MOVLB  1
3C68:  CLRF   x1C
3C6A:  CLRF   x1B
3C6C:  MOVLW  48
3C6E:  MOVWF  x1A
3C70:  MOVLW  85
3C72:  MOVWF  x19
3C74:  MOVLB  0
3C76:  CALL   11CA
3C7A:  MOVFF  03,AE
3C7E:  MOVFF  02,AD
3C82:  MOVFF  01,AC
3C86:  MOVFF  00,AB
....................             Decimal1=(int8)Temporal2; 
3C8A:  MOVFF  AE,102
3C8E:  MOVFF  AD,101
3C92:  MOVFF  AC,100
3C96:  MOVFF  AB,FF
3C9A:  CALL   15B4
3C9E:  MOVFF  01,22
....................             write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
3CA2:  MOVLW  19
3CA4:  MOVWF  FA9
3CA6:  MOVFF  21,FA8
3CAA:  BCF    FA6.6
3CAC:  BCF    FA6.7
3CAE:  BSF    FA6.2
3CB0:  MOVF   FF2,W
3CB2:  MOVWF  00
3CB4:  BCF    FF2.7
3CB6:  MOVLB  F
3CB8:  MOVLW  55
3CBA:  MOVWF  FA7
3CBC:  MOVLW  AA
3CBE:  MOVWF  FA7
3CC0:  BSF    FA6.1
3CC2:  BTFSC  FA6.1
3CC4:  BRA    3CC2
3CC6:  BCF    FA6.2
3CC8:  MOVF   00,W
3CCA:  IORWF  FF2,F
3CCC:  MOVLW  1A
3CCE:  MOVWF  FA9
3CD0:  MOVFF  22,FA8
3CD4:  BCF    FA6.6
3CD6:  BCF    FA6.7
3CD8:  BSF    FA6.2
3CDA:  MOVF   FF2,W
3CDC:  MOVWF  00
3CDE:  BCF    FF2.7
3CE0:  MOVLW  55
3CE2:  MOVWF  FA7
3CE4:  MOVLW  AA
3CE6:  MOVWF  FA7
3CE8:  BSF    FA6.1
3CEA:  BTFSC  FA6.1
3CEC:  BRA    3CEA
3CEE:  BCF    FA6.2
3CF0:  MOVF   00,W
3CF2:  IORWF  FF2,F
....................             delay_ms(1000); 
3CF4:  MOVLW  04
3CF6:  MOVLB  1
3CF8:  MOVWF  x00
3CFA:  MOVLW  FA
3CFC:  MOVWF  x1B
3CFE:  MOVLB  0
3D00:  CALL   08E2
3D04:  MOVLB  1
3D06:  DECFSZ x00,F
3D08:  BRA    3CFA
3D0A:  MOVLB  0
....................             }} 
....................          else 
3D0C:  BRA    3D10
....................             {Flanco1 = 0;}    
3D0E:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
3D10:  BSF    F93.1
3D12:  BTFSS  F81.1
3D14:  BRA    3D4C
....................       {  if(Flanco3 == 0)  
3D16:  BTFSC  34.7
3D18:  BRA    3D4A
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
3D1A:  MOVLW  01
3D1C:  MOVWF  17
3D1E:  CLRF   36
3D20:  MOVLW  02
3D22:  MOVWF  1B
3D24:  MOVWF  1D
3D26:  MOVLW  0B
3D28:  MOVWF  1A
3D2A:  MOVLW  02
3D2C:  MOVLB  1
3D2E:  MOVWF  x00
3D30:  MOVLW  FA
3D32:  MOVWF  x1B
3D34:  MOVLB  0
3D36:  CALL   08E2
3D3A:  MOVLB  1
3D3C:  DECFSZ x00,F
3D3E:  BRA    3D30
3D40:  MOVLW  0C
3D42:  MOVWF  x15
3D44:  MOVLB  0
3D46:  CALL   0A5E
....................          else 
3D4A:  BRA    3D4E
....................             {Flanco3 = 0;}   
3D4C:  BCF    34.7
3D4E:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu8--------------------------------------------------------------- 
....................  
.................... //----------------Menu9--------------------------------------------------------------- 
....................    if(Menu == 9)// Menu de Modo 
3D50:  MOVF   17,W
3D52:  SUBLW  09
3D54:  BTFSS  FD8.2
3D56:  BRA    439E
....................    { 
....................    lcd_gotoxy(1,1); 
3D58:  MOVLW  01
3D5A:  MOVWF  x16
3D5C:  MOVWF  x17
3D5E:  MOVLB  0
3D60:  CALL   09EC
....................    printf(lcd_putc," MODO   Damp=%2.0f%% ",(100*((float)tmp/255))); 
3D64:  MOVLB  1
3D66:  CLRF   x0A
3D68:  MOVFF  29,109
3D6C:  MOVLB  0
3D6E:  CALL   0ACA
3D72:  MOVFF  00,100
3D76:  MOVFF  01,101
3D7A:  MOVFF  02,102
3D7E:  MOVFF  03,103
3D82:  MOVFF  03,107
3D86:  MOVFF  02,106
3D8A:  MOVFF  01,105
3D8E:  MOVFF  00,104
3D92:  MOVLB  1
3D94:  CLRF   x0B
3D96:  CLRF   x0A
3D98:  MOVLW  7F
3D9A:  MOVWF  x09
3D9C:  MOVLW  86
3D9E:  MOVWF  x08
3DA0:  MOVLB  0
3DA2:  CALL   0B00
3DA6:  MOVLB  1
3DA8:  CLRF   x18
3DAA:  CLRF   x17
3DAC:  MOVLW  48
3DAE:  MOVWF  x16
3DB0:  MOVLW  85
3DB2:  MOVWF  x15
3DB4:  MOVFF  03,11C
3DB8:  MOVFF  02,11B
3DBC:  MOVFF  01,11A
3DC0:  MOVFF  00,119
3DC4:  MOVLB  0
3DC6:  CALL   11CA
3DCA:  MOVFF  00,100
3DCE:  MOVFF  01,101
3DD2:  MOVFF  02,102
3DD6:  MOVFF  03,103
3DDA:  MOVLW  DE
3DDC:  MOVWF  FF6
3DDE:  MOVLW  06
3DE0:  MOVWF  FF7
3DE2:  MOVLW  0D
3DE4:  MOVLB  1
3DE6:  MOVWF  x08
3DE8:  MOVLB  0
3DEA:  CALL   0F0A
3DEE:  MOVLW  01
3DF0:  MOVWF  FE9
3DF2:  MOVFF  103,10B
3DF6:  MOVFF  102,10A
3DFA:  MOVFF  101,109
3DFE:  MOVFF  100,108
3E02:  MOVLB  1
3E04:  CLRF   x0C
3E06:  MOVLB  0
3E08:  CALL   1384
3E0C:  MOVLW  25
3E0E:  MOVLB  1
3E10:  MOVWF  x15
3E12:  MOVLB  0
3E14:  CALL   0A5E
3E18:  MOVLW  20
3E1A:  MOVLB  1
3E1C:  MOVWF  x15
3E1E:  MOVLB  0
3E20:  CALL   0A5E
....................  
....................    lcd_gotoxy(1,4); 
3E24:  MOVLW  01
3E26:  MOVLB  1
3E28:  MOVWF  x16
3E2A:  MOVLW  04
3E2C:  MOVWF  x17
3E2E:  MOVLB  0
3E30:  CALL   09EC
....................    printf(lcd_putc,"IF= %2.1f(m/s) Dam=%2.0f",Flujo,(100*(sensores(2)/1023))); 
3E34:  MOVLW  02
3E36:  MOVLB  1
3E38:  MOVWF  x04
3E3A:  MOVLB  0
3E3C:  CALL   15F0
3E40:  MOVFF  00,100
3E44:  MOVFF  01,101
3E48:  MOVFF  02,102
3E4C:  MOVFF  03,103
3E50:  MOVFF  03,107
3E54:  MOVFF  02,106
3E58:  MOVFF  01,105
3E5C:  MOVFF  00,104
3E60:  MOVLB  1
3E62:  CLRF   x0B
3E64:  MOVLW  C0
3E66:  MOVWF  x0A
3E68:  MOVLW  7F
3E6A:  MOVWF  x09
3E6C:  MOVLW  88
3E6E:  MOVWF  x08
3E70:  MOVLB  0
3E72:  CALL   0B00
3E76:  MOVLB  1
3E78:  CLRF   x18
3E7A:  CLRF   x17
3E7C:  MOVLW  48
3E7E:  MOVWF  x16
3E80:  MOVLW  85
3E82:  MOVWF  x15
3E84:  MOVFF  03,11C
3E88:  MOVFF  02,11B
3E8C:  MOVFF  01,11A
3E90:  MOVFF  00,119
3E94:  MOVLB  0
3E96:  CALL   11CA
3E9A:  MOVFF  00,100
3E9E:  MOVFF  01,101
3EA2:  MOVFF  02,102
3EA6:  MOVFF  03,103
3EAA:  MOVLW  F4
3EAC:  MOVWF  FF6
3EAE:  MOVLW  06
3EB0:  MOVWF  FF7
3EB2:  MOVLW  04
3EB4:  MOVLB  1
3EB6:  MOVWF  x08
3EB8:  MOVLB  0
3EBA:  CALL   0F0A
3EBE:  MOVLW  01
3EC0:  MOVWF  FE9
3EC2:  MOVFF  8E,10B
3EC6:  MOVFF  8D,10A
3ECA:  MOVFF  8C,109
3ECE:  MOVFF  8B,108
3ED2:  MOVLB  1
3ED4:  MOVWF  x0C
3ED6:  MOVLB  0
3ED8:  CALL   1384
3EDC:  MOVLW  FD
3EDE:  MOVWF  FF6
3EE0:  MOVLW  06
3EE2:  MOVWF  FF7
3EE4:  MOVLW  0A
3EE6:  MOVLB  1
3EE8:  MOVWF  x08
3EEA:  MOVLB  0
3EEC:  CALL   0F0A
3EF0:  MOVLW  01
3EF2:  MOVWF  FE9
3EF4:  MOVFF  103,10B
3EF8:  MOVFF  102,10A
3EFC:  MOVFF  101,109
3F00:  MOVFF  100,108
3F04:  MOVLB  1
3F06:  CLRF   x0C
3F08:  MOVLB  0
3F0A:  CALL   1384
....................        
....................       if(ModoManual ==0 && ModoAuto==0 && ModoSemi==0) 
3F0E:  BTFSC  4E.1
3F10:  BRA    4070
3F12:  BTFSC  4E.2
3F14:  BRA    4070
3F16:  BTFSC  4E.3
3F18:  BRA    4070
....................       { 
....................          if(UP)//Si oprime hacia arriba 
3F1A:  BSF    F93.3
3F1C:  BTFSS  F81.3
3F1E:  BRA    3F7A
....................          { 
....................             delay_ms(500); 
3F20:  MOVLW  02
3F22:  MOVLB  1
3F24:  MOVWF  x00
3F26:  MOVLW  FA
3F28:  MOVWF  x1B
3F2A:  MOVLB  0
3F2C:  CALL   08E2
3F30:  MOVLB  1
3F32:  DECFSZ x00,F
3F34:  BRA    3F26
....................             if(UP) 
3F36:  BSF    F93.3
3F38:  BTFSS  F81.3
3F3A:  BRA    3F78
....................             { 
....................                lcd_gotoxy(1,2); 
3F3C:  MOVLW  01
3F3E:  MOVWF  x16
3F40:  MOVLW  02
3F42:  MOVWF  x17
3F44:  MOVLB  0
3F46:  CALL   09EC
....................                printf(lcd_putc,"   Modo Manual  "); 
3F4A:  MOVLW  0E
3F4C:  MOVWF  FF6
3F4E:  MOVLW  07
3F50:  MOVWF  FF7
3F52:  CALL   0EEA
....................                ModoManual=1;ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
3F56:  BSF    4E.1
3F58:  BCF    4E.2
3F5A:  BCF    4E.3
3F5C:  MOVLW  0A
3F5E:  MOVWF  2C
3F60:  MOVWF  2E
....................                delay_ms(1000); 
3F62:  MOVLW  04
3F64:  MOVLB  1
3F66:  MOVWF  x00
3F68:  MOVLW  FA
3F6A:  MOVWF  x1B
3F6C:  MOVLB  0
3F6E:  CALL   08E2
3F72:  MOVLB  1
3F74:  DECFSZ x00,F
3F76:  BRA    3F68
3F78:  MOVLB  0
....................             } 
....................          } 
....................                 
....................          if(DOWN)//Si oprime hacia abajo 
3F7A:  BSF    F93.2
3F7C:  BTFSS  F81.2
3F7E:  BRA    3FDA
....................          { 
....................             delay_ms(500); 
3F80:  MOVLW  02
3F82:  MOVLB  1
3F84:  MOVWF  x00
3F86:  MOVLW  FA
3F88:  MOVWF  x1B
3F8A:  MOVLB  0
3F8C:  CALL   08E2
3F90:  MOVLB  1
3F92:  DECFSZ x00,F
3F94:  BRA    3F86
....................             if(DOWN) 
3F96:  BSF    F93.2
3F98:  BTFSS  F81.2
3F9A:  BRA    3FD8
....................             { 
....................                lcd_gotoxy(1,2); 
3F9C:  MOVLW  01
3F9E:  MOVWF  x16
3FA0:  MOVLW  02
3FA2:  MOVWF  x17
3FA4:  MOVLB  0
3FA6:  CALL   09EC
....................                printf(lcd_putc,"   Modo Auto   "); 
3FAA:  MOVLW  20
3FAC:  MOVWF  FF6
3FAE:  MOVLW  07
3FB0:  MOVWF  FF7
3FB2:  CALL   0EEA
....................                ModoAuto=1;ModoManual=0;ModoSemi=0;Manual=10;Semi=10; 
3FB6:  BSF    4E.2
3FB8:  BCF    4E.1
3FBA:  BCF    4E.3
3FBC:  MOVLW  0A
3FBE:  MOVWF  2D
3FC0:  MOVWF  2E
....................                delay_ms(1000); 
3FC2:  MOVLW  04
3FC4:  MOVLB  1
3FC6:  MOVWF  x00
3FC8:  MOVLW  FA
3FCA:  MOVWF  x1B
3FCC:  MOVLB  0
3FCE:  CALL   08E2
3FD2:  MOVLB  1
3FD4:  DECFSZ x00,F
3FD6:  BRA    3FC8
3FD8:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(RIGHT) 
3FDA:  BSF    F93.0
3FDC:  BTFSS  F81.0
3FDE:  BRA    403A
....................          { 
....................             delay_ms(500); 
3FE0:  MOVLW  02
3FE2:  MOVLB  1
3FE4:  MOVWF  x00
3FE6:  MOVLW  FA
3FE8:  MOVWF  x1B
3FEA:  MOVLB  0
3FEC:  CALL   08E2
3FF0:  MOVLB  1
3FF2:  DECFSZ x00,F
3FF4:  BRA    3FE6
....................             if(RIGHT) 
3FF6:  BSF    F93.0
3FF8:  BTFSS  F81.0
3FFA:  BRA    4038
....................             { 
....................                lcd_gotoxy(1,2); 
3FFC:  MOVLW  01
3FFE:  MOVWF  x16
4000:  MOVLW  02
4002:  MOVWF  x17
4004:  MOVLB  0
4006:  CALL   09EC
....................                printf(lcd_putc,"   Modo Semi   "); 
400A:  MOVLW  30
400C:  MOVWF  FF6
400E:  MOVLW  07
4010:  MOVWF  FF7
4012:  CALL   0EEA
....................                ModoSemi=1;ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4016:  BSF    4E.3
4018:  BCF    4E.1
401A:  BCF    4E.2
401C:  MOVLW  0A
401E:  MOVWF  2C
4020:  MOVWF  2D
....................                delay_ms(1000); 
4022:  MOVLW  04
4024:  MOVLB  1
4026:  MOVWF  x00
4028:  MOVLW  FA
402A:  MOVWF  x1B
402C:  MOVLB  0
402E:  CALL   08E2
4032:  MOVLB  1
4034:  DECFSZ x00,F
4036:  BRA    4028
4038:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(LEFT) 
403A:  BSF    F93.1
403C:  BTFSS  F81.1
403E:  BRA    4070
....................          { 
....................             Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4040:  MOVLW  01
4042:  MOVWF  17
4044:  CLRF   36
4046:  MOVLW  02
4048:  MOVWF  1B
404A:  MOVWF  1D
404C:  MOVLW  0B
404E:  MOVWF  1A
4050:  MOVLW  02
4052:  MOVLB  1
4054:  MOVWF  x00
4056:  MOVLW  FA
4058:  MOVWF  x1B
405A:  MOVLB  0
405C:  CALL   08E2
4060:  MOVLB  1
4062:  DECFSZ x00,F
4064:  BRA    4056
4066:  MOVLW  0C
4068:  MOVWF  x15
406A:  MOVLB  0
406C:  CALL   0A5E
....................          }  
....................       } 
....................        
....................       if(ModoManual == 1 || Manual==20) 
4070:  BTFSC  4E.1
4072:  BRA    407C
4074:  MOVF   2D,W
4076:  SUBLW  14
4078:  BTFSS  FD8.2
407A:  BRA    41A4
....................       { 
....................          ModoAuto=0;ModoSemi=0;Automa=10;Semi=10; 
407C:  BCF    4E.2
407E:  BCF    4E.3
4080:  MOVLW  0A
4082:  MOVWF  2C
4084:  MOVWF  2E
....................          lcd_gotoxy(1,2); 
4086:  MOVLW  01
4088:  MOVLB  1
408A:  MOVWF  x16
408C:  MOVLW  02
408E:  MOVWF  x17
4090:  MOVLB  0
4092:  CALL   09EC
....................          printf(lcd_putc,"   Modo Manual  "); 
4096:  MOVLW  40
4098:  MOVWF  FF6
409A:  MOVLW  07
409C:  MOVWF  FF7
409E:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
40A2:  MOVLW  01
40A4:  MOVLB  1
40A6:  MOVWF  x16
40A8:  MOVLW  03
40AA:  MOVWF  x17
40AC:  MOVLB  0
40AE:  CALL   09EC
....................          printf(lcd_putc,"    Seleccionado    "); 
40B2:  MOVLW  52
40B4:  MOVWF  FF6
40B6:  MOVLW  07
40B8:  MOVWF  FF7
40BA:  CALL   0EEA
....................          if(LEFT) 
40BE:  BSF    F93.1
40C0:  BTFSS  F81.1
40C2:  BRA    41A4
....................          { 
....................             ModoManual=0;Manual=20;Automa=10;Semi=10;delay_ms(500);printf(lcd_putc,"\f");ajustar_damper(254);tmp=254;  
40C4:  BCF    4E.1
40C6:  MOVLW  14
40C8:  MOVWF  2D
40CA:  MOVLW  0A
40CC:  MOVWF  2C
40CE:  MOVWF  2E
40D0:  MOVLW  02
40D2:  MOVLB  1
40D4:  MOVWF  x00
40D6:  MOVLW  FA
40D8:  MOVWF  x1B
40DA:  MOVLB  0
40DC:  CALL   08E2
40E0:  MOVLB  1
40E2:  DECFSZ x00,F
40E4:  BRA    40D6
40E6:  MOVLW  0C
40E8:  MOVWF  x15
40EA:  MOVLB  0
40EC:  CALL   0A5E
40F0:  MOVLW  FE
40F2:  MOVLB  1
40F4:  MOVWF  x00
40F6:  MOVLB  0
40F8:  CALL   1648
40FC:  MOVLW  FE
40FE:  MOVWF  29
....................             write_eeprom(10,Manual);write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(13,tmp); 
4100:  MOVLW  0A
4102:  MOVWF  FA9
4104:  MOVFF  2D,FA8
4108:  BCF    FA6.6
410A:  BCF    FA6.7
410C:  BSF    FA6.2
410E:  MOVF   FF2,W
4110:  MOVWF  00
4112:  BCF    FF2.7
4114:  MOVLB  F
4116:  MOVLW  55
4118:  MOVWF  FA7
411A:  MOVLW  AA
411C:  MOVWF  FA7
411E:  BSF    FA6.1
4120:  BTFSC  FA6.1
4122:  BRA    4120
4124:  BCF    FA6.2
4126:  MOVF   00,W
4128:  IORWF  FF2,F
412A:  MOVLW  0C
412C:  MOVWF  FA9
412E:  MOVFF  2E,FA8
4132:  BCF    FA6.6
4134:  BCF    FA6.7
4136:  BSF    FA6.2
4138:  MOVF   FF2,W
413A:  MOVWF  00
413C:  BCF    FF2.7
413E:  MOVLW  55
4140:  MOVWF  FA7
4142:  MOVLW  AA
4144:  MOVWF  FA7
4146:  BSF    FA6.1
4148:  BTFSC  FA6.1
414A:  BRA    4148
414C:  BCF    FA6.2
414E:  MOVF   00,W
4150:  IORWF  FF2,F
4152:  MOVLW  0B
4154:  MOVWF  FA9
4156:  MOVFF  2C,FA8
415A:  BCF    FA6.6
415C:  BCF    FA6.7
415E:  BSF    FA6.2
4160:  MOVF   FF2,W
4162:  MOVWF  00
4164:  BCF    FF2.7
4166:  MOVLW  55
4168:  MOVWF  FA7
416A:  MOVLW  AA
416C:  MOVWF  FA7
416E:  BSF    FA6.1
4170:  BTFSC  FA6.1
4172:  BRA    4170
4174:  BCF    FA6.2
4176:  MOVF   00,W
4178:  IORWF  FF2,F
417A:  MOVLW  0D
417C:  MOVWF  FA9
417E:  MOVFF  29,FA8
4182:  BCF    FA6.6
4184:  BCF    FA6.7
4186:  BSF    FA6.2
4188:  MOVF   FF2,W
418A:  MOVWF  00
418C:  BCF    FF2.7
418E:  MOVLW  55
4190:  MOVWF  FA7
4192:  MOVLW  AA
4194:  MOVWF  FA7
4196:  BSF    FA6.1
4198:  BTFSC  FA6.1
419A:  BRA    4198
419C:  BCF    FA6.2
419E:  MOVF   00,W
41A0:  IORWF  FF2,F
41A2:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoAuto == 1 || Automa==20) 
41A4:  BTFSC  4E.2
41A6:  BRA    41AE
41A8:  MOVF   2C,W
41AA:  SUBLW  14
41AC:  BNZ   4276
....................       { 
....................          ModoManual=0;ModoSemi=0;Semi=10;Manual=10; 
41AE:  BCF    4E.1
41B0:  BCF    4E.3
41B2:  MOVLW  0A
41B4:  MOVWF  2E
41B6:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
41B8:  MOVLW  01
41BA:  MOVLB  1
41BC:  MOVWF  x16
41BE:  MOVLW  02
41C0:  MOVWF  x17
41C2:  MOVLB  0
41C4:  CALL   09EC
....................          printf(lcd_putc,"   Modo Auto   "); 
41C8:  MOVLW  68
41CA:  MOVWF  FF6
41CC:  MOVLW  07
41CE:  MOVWF  FF7
41D0:  CALL   0EEA
....................          lcd_gotoxy(1,3); 
41D4:  MOVLW  01
41D6:  MOVLB  1
41D8:  MOVWF  x16
41DA:  MOVLW  03
41DC:  MOVWF  x17
41DE:  MOVLB  0
41E0:  CALL   09EC
....................          printf(lcd_putc,"    Seleccionado    "); 
41E4:  MOVLW  78
41E6:  MOVWF  FF6
41E8:  MOVLW  07
41EA:  MOVWF  FF7
41EC:  CALL   0EEA
....................          if(LEFT) 
41F0:  BSF    F93.1
41F2:  BTFSS  F81.1
41F4:  BRA    4276
....................          { 
....................             ModoAuto=0;Automa=20;Semi=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
41F6:  BCF    4E.2
41F8:  MOVLW  14
41FA:  MOVWF  2C
41FC:  MOVLW  0A
41FE:  MOVWF  2E
4200:  MOVWF  2D
4202:  MOVLW  02
4204:  MOVLB  1
4206:  MOVWF  x00
4208:  MOVLW  FA
420A:  MOVWF  x1B
420C:  MOVLB  0
420E:  CALL   08E2
4212:  MOVLB  1
4214:  DECFSZ x00,F
4216:  BRA    4208
4218:  MOVLW  0C
421A:  MOVWF  x15
421C:  MOVLB  0
421E:  CALL   0A5E
....................             write_eeprom(11,Automa);write_eeprom(12,Semi); 
4222:  MOVLW  0B
4224:  MOVWF  FA9
4226:  MOVFF  2C,FA8
422A:  BCF    FA6.6
422C:  BCF    FA6.7
422E:  BSF    FA6.2
4230:  MOVF   FF2,W
4232:  MOVWF  00
4234:  BCF    FF2.7
4236:  MOVLB  F
4238:  MOVLW  55
423A:  MOVWF  FA7
423C:  MOVLW  AA
423E:  MOVWF  FA7
4240:  BSF    FA6.1
4242:  BTFSC  FA6.1
4244:  BRA    4242
4246:  BCF    FA6.2
4248:  MOVF   00,W
424A:  IORWF  FF2,F
424C:  MOVLW  0C
424E:  MOVWF  FA9
4250:  MOVFF  2E,FA8
4254:  BCF    FA6.6
4256:  BCF    FA6.7
4258:  BSF    FA6.2
425A:  MOVF   FF2,W
425C:  MOVWF  00
425E:  BCF    FF2.7
4260:  MOVLW  55
4262:  MOVWF  FA7
4264:  MOVLW  AA
4266:  MOVWF  FA7
4268:  BSF    FA6.1
426A:  BTFSC  FA6.1
426C:  BRA    426A
426E:  BCF    FA6.2
4270:  MOVF   00,W
4272:  IORWF  FF2,F
4274:  MOVLB  0
....................          }  
....................       } 
....................        
....................       if(ModoSemi == 1 || Semi==20) 
4276:  BTFSC  4E.3
4278:  BRA    4282
427A:  MOVF   2E,W
427C:  SUBLW  14
427E:  BTFSS  FD8.2
4280:  BRA    439C
....................       { 
....................          ModoManual=0;ModoAuto=0;Automa=10;Manual=10; 
4282:  BCF    4E.1
4284:  BCF    4E.2
4286:  MOVLW  0A
4288:  MOVWF  2C
428A:  MOVWF  2D
....................          lcd_gotoxy(1,2); 
428C:  MOVLW  01
428E:  MOVLB  1
4290:  MOVWF  x16
4292:  MOVLW  02
4294:  MOVWF  x17
4296:  MOVLB  0
4298:  CALL   09EC
....................          printf(lcd_putc,"   Modo Semi   "); 
429C:  MOVLW  8E
429E:  MOVWF  FF6
42A0:  MOVLW  07
42A2:  MOVWF  FF7
42A4:  CALL   0EEA
....................          if(UP) 
42A8:  BSF    F93.3
42AA:  BTFSS  F81.3
42AC:  BRA    42B0
....................          { 
....................             tmp++; 
42AE:  INCF   29,F
....................              
....................          } 
....................           
....................          if(DOWN) 
42B0:  BSF    F93.2
42B2:  BTFSS  F81.2
42B4:  BRA    42B8
....................          { 
....................             tmp--; 
42B6:  DECF   29,F
....................          } 
....................          ValorSemi=tmp; 
42B8:  MOVFF  29,2F
....................          ajustar_damper(tmp); 
42BC:  MOVFF  29,100
42C0:  CALL   1648
....................          if(LEFT) 
42C4:  BSF    F93.1
42C6:  BTFSS  F81.1
42C8:  BRA    439C
....................          { 
....................             write_eeprom(13,tmp);ModoSemi=0;Semi=20;Automa=10;Manual=10;delay_ms(500);printf(lcd_putc,"\f"); 
42CA:  MOVLW  0D
42CC:  MOVWF  FA9
42CE:  MOVFF  29,FA8
42D2:  BCF    FA6.6
42D4:  BCF    FA6.7
42D6:  BSF    FA6.2
42D8:  MOVF   FF2,W
42DA:  MOVWF  00
42DC:  BCF    FF2.7
42DE:  MOVLB  F
42E0:  MOVLW  55
42E2:  MOVWF  FA7
42E4:  MOVLW  AA
42E6:  MOVWF  FA7
42E8:  BSF    FA6.1
42EA:  BTFSC  FA6.1
42EC:  BRA    42EA
42EE:  BCF    FA6.2
42F0:  MOVF   00,W
42F2:  IORWF  FF2,F
42F4:  BCF    4E.3
42F6:  MOVLW  14
42F8:  MOVWF  2E
42FA:  MOVLW  0A
42FC:  MOVWF  2C
42FE:  MOVWF  2D
4300:  MOVLW  02
4302:  MOVLB  1
4304:  MOVWF  x00
4306:  MOVLW  FA
4308:  MOVWF  x1B
430A:  MOVLB  0
430C:  CALL   08E2
4310:  MOVLB  1
4312:  DECFSZ x00,F
4314:  BRA    4306
4316:  MOVLW  0C
4318:  MOVWF  x15
431A:  MOVLB  0
431C:  CALL   0A5E
....................             write_eeprom(12,Semi);write_eeprom(11,Automa);write_eeprom(10,Manual); 
4320:  MOVLW  0C
4322:  MOVWF  FA9
4324:  MOVFF  2E,FA8
4328:  BCF    FA6.6
432A:  BCF    FA6.7
432C:  BSF    FA6.2
432E:  MOVF   FF2,W
4330:  MOVWF  00
4332:  BCF    FF2.7
4334:  MOVLB  F
4336:  MOVLW  55
4338:  MOVWF  FA7
433A:  MOVLW  AA
433C:  MOVWF  FA7
433E:  BSF    FA6.1
4340:  BTFSC  FA6.1
4342:  BRA    4340
4344:  BCF    FA6.2
4346:  MOVF   00,W
4348:  IORWF  FF2,F
434A:  MOVLW  0B
434C:  MOVWF  FA9
434E:  MOVFF  2C,FA8
4352:  BCF    FA6.6
4354:  BCF    FA6.7
4356:  BSF    FA6.2
4358:  MOVF   FF2,W
435A:  MOVWF  00
435C:  BCF    FF2.7
435E:  MOVLW  55
4360:  MOVWF  FA7
4362:  MOVLW  AA
4364:  MOVWF  FA7
4366:  BSF    FA6.1
4368:  BTFSC  FA6.1
436A:  BRA    4368
436C:  BCF    FA6.2
436E:  MOVF   00,W
4370:  IORWF  FF2,F
4372:  MOVLW  0A
4374:  MOVWF  FA9
4376:  MOVFF  2D,FA8
437A:  BCF    FA6.6
437C:  BCF    FA6.7
437E:  BSF    FA6.2
4380:  MOVF   FF2,W
4382:  MOVWF  00
4384:  BCF    FF2.7
4386:  MOVLW  55
4388:  MOVWF  FA7
438A:  MOVLW  AA
438C:  MOVWF  FA7
438E:  BSF    FA6.1
4390:  BTFSC  FA6.1
4392:  BRA    4390
4394:  BCF    FA6.2
4396:  MOVF   00,W
4398:  IORWF  FF2,F
439A:  MOVLB  0
439C:  MOVLB  1
....................          }  
....................       }       
....................    } 
.................... //----------------Fin-Menu9--------------------------------------------------------------- 
....................  
.................... //-------------------Menu20----------------------------------------------------------------   
....................  
....................    if(Menu==20) 
439E:  MOVF   17,W
43A0:  SUBLW  14
43A2:  BTFSS  FD8.2
43A4:  BRA    4666
....................    { 
....................       if(Lectura2==1) 
43A6:  BTFSS  35.6
43A8:  BRA    43FE
....................       { 
....................       lcd_gotoxy(1,1);                      
43AA:  MOVLW  01
43AC:  MOVWF  x16
43AE:  MOVWF  x17
43B0:  MOVLB  0
43B2:  CALL   09EC
....................       printf(lcd_putc," JP CEGH");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
43B6:  MOVLW  9E
43B8:  MOVWF  FF6
43BA:  MOVLW  07
43BC:  MOVWF  FF7
43BE:  CALL   0EEA
....................       lcd_gotoxy(1,2); 
43C2:  MOVLW  01
43C4:  MOVLB  1
43C6:  MOVWF  x16
43C8:  MOVLW  02
43CA:  MOVWF  x17
43CC:  MOVLB  0
43CE:  CALL   09EC
....................       printf(lcd_putc,"Damp= Opc."); 
43D2:  MOVLW  A8
43D4:  MOVWF  FF6
43D6:  MOVLW  07
43D8:  MOVWF  FF7
43DA:  CALL   0EEA
....................       //printf(lcd_putc,"Damp=%2.0f%%",(100*((float)tmp/255))); 
....................       lcd_gotoxy(1,3); 
43DE:  MOVLW  01
43E0:  MOVLB  1
43E2:  MOVWF  x16
43E4:  MOVLW  03
43E6:  MOVWF  x17
43E8:  MOVLB  0
43EA:  CALL   09EC
....................       printf(lcd_putc,"InFlow= Opc."); 
43EE:  MOVLW  B4
43F0:  MOVWF  FF6
43F2:  MOVLW  07
43F4:  MOVWF  FF7
43F6:  CALL   0EEA
....................       //printf(lcd_putc,"InFlow= %2.1f (m/s) ",Flujo); 
....................       Lectura2=0; 
43FA:  BCF    35.6
43FC:  MOVLB  1
....................       } 
....................        
....................       if(horas>=60) 
43FE:  MOVF   32,W
4400:  SUBLW  3B
4402:  BC    4422
....................       { 
....................          lcd_gotoxy(10,1);                      
4404:  MOVLW  0A
4406:  MOVWF  x16
4408:  MOVLW  01
440A:  MOVWF  x17
440C:  MOVLB  0
440E:  CALL   09EC
....................          printf(lcd_putc,"Filtro:Opc.");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
4412:  MOVLW  C2
4414:  MOVWF  FF6
4416:  MOVLW  07
4418:  MOVWF  FF7
441A:  CALL   0EEA
....................          //printf(lcd_putc,"Filtro:CAM");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................       else 
441E:  BRA    443C
4420:  MOVLB  1
....................       { 
....................          lcd_gotoxy(10,1);                      
4422:  MOVLW  0A
4424:  MOVWF  x16
4426:  MOVLW  01
4428:  MOVWF  x17
442A:  MOVLB  0
442C:  CALL   09EC
....................          printf(lcd_putc,"Filtro:Opc.");//T= %2.0f",sensores(1));//T= %2.1f",TC);       
4430:  MOVLW  CE
4432:  MOVWF  FF6
4434:  MOVLW  07
4436:  MOVWF  FF7
4438:  CALL   0EEA
....................          //printf(lcd_putc,"Filtro:OK ");//T= %2.0f",sensores(1));//T= %2.1f",TC); 
....................       } 
....................        
....................       if(iniciodamper==0) 
443C:  BTFSC  4E.0
443E:  BRA    4460
....................       { 
....................          flag_iniciodamper=1; 
4440:  BSF    35.7
....................          lcd_gotoxy(11,2); 
4442:  MOVLW  0B
4444:  MOVLB  1
4446:  MOVWF  x16
4448:  MOVLW  02
444A:  MOVWF  x17
444C:  MOVLB  0
444E:  CALL   09EC
....................          printf(lcd_putc,"Flujo=Opc."); 
4452:  MOVLW  DA
4454:  MOVWF  FF6
4456:  MOVLW  07
4458:  MOVWF  FF7
445A:  CALL   0EEA
....................          //printf(lcd_putc,"Flujo=Ajus"); 
....................       } 
....................       else 
445E:  BRA    4502
....................       { 
....................          flag_iniciodamper=0; 
4460:  BCF    35.7
....................          if(Flujo<0.5) 
4462:  MOVFF  8E,102
4466:  MOVFF  8D,101
446A:  MOVFF  8C,100
446E:  MOVFF  8B,FF
4472:  MOVLB  1
4474:  CLRF   x06
4476:  CLRF   x05
4478:  CLRF   x04
447A:  MOVLW  7E
447C:  MOVWF  x03
447E:  MOVLB  0
4480:  CALL   1536
4484:  BNC   44A4
....................          { 
....................             lcd_gotoxy(11,2); 
4486:  MOVLW  0B
4488:  MOVLB  1
448A:  MOVWF  x16
448C:  MOVLW  02
448E:  MOVWF  x17
4490:  MOVLB  0
4492:  CALL   09EC
....................             printf(lcd_putc,"Flujo=Opc.");       
4496:  MOVLW  E6
4498:  MOVWF  FF6
449A:  MOVLW  07
449C:  MOVWF  FF7
449E:  CALL   0EEA
....................             //printf(lcd_putc,"Flujo=Bajo"); 
....................          } 
....................          else 
44A2:  BRA    4502
....................          { 
....................             if(Flujo>2.0) 
44A4:  MOVLB  1
44A6:  CLRF   x02
44A8:  CLRF   x01
44AA:  CLRF   x00
44AC:  MOVLW  80
44AE:  MOVLB  0
44B0:  MOVWF  xFF
44B2:  MOVFF  8E,106
44B6:  MOVFF  8D,105
44BA:  MOVFF  8C,104
44BE:  MOVFF  8B,103
44C2:  CALL   1536
44C6:  BNC   44E6
....................             { 
....................                lcd_gotoxy(11,2); 
44C8:  MOVLW  0B
44CA:  MOVLB  1
44CC:  MOVWF  x16
44CE:  MOVLW  02
44D0:  MOVWF  x17
44D2:  MOVLB  0
44D4:  CALL   09EC
....................                printf(lcd_putc,"Flujo=Opc."); 
44D8:  MOVLW  F2
44DA:  MOVWF  FF6
44DC:  MOVLW  07
44DE:  MOVWF  FF7
44E0:  CALL   0EEA
....................                //printf(lcd_putc,"Flujo=Alto"); 
....................             } 
....................             else 
44E4:  BRA    4502
....................             { 
....................                lcd_gotoxy(11,2); 
44E6:  MOVLW  0B
44E8:  MOVLB  1
44EA:  MOVWF  x16
44EC:  MOVLW  02
44EE:  MOVWF  x17
44F0:  MOVLB  0
44F2:  CALL   09EC
....................                printf(lcd_putc,"Flujo=Opc. ");       
44F6:  MOVLW  FE
44F8:  MOVWF  FF6
44FA:  MOVLW  07
44FC:  MOVWF  FF7
44FE:  CALL   0EEA
....................                //printf(lcd_putc,"Flujo=OK  "); 
....................             } 
....................          } 
....................       } 
....................        
....................       if(estadofl==1) 
4502:  BTFSS  34.0
4504:  BRA    4528
....................       { 
....................          Luz_Blanca_on; 
4506:  BSF    F8A.4
4508:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
450A:  MOVLW  01
450C:  MOVLB  1
450E:  MOVWF  x16
4510:  MOVLW  04
4512:  MOVWF  x17
4514:  MOVLB  0
4516:  CALL   09EC
....................          printf(lcd_putc,"Luz:ON "); 
451A:  MOVLW  0A
451C:  MOVWF  FF6
451E:  MOVLW  08
4520:  MOVWF  FF7
4522:  CALL   0EEA
....................       } 
....................       else 
4526:  BRA    4548
....................       { 
....................          Luz_Blanca_off; 
4528:  BCF    F8A.4
452A:  BCF    F93.4
....................          lcd_gotoxy(1,4); 
452C:  MOVLW  01
452E:  MOVLB  1
4530:  MOVWF  x16
4532:  MOVLW  04
4534:  MOVWF  x17
4536:  MOVLB  0
4538:  CALL   09EC
....................          printf(lcd_putc,"Luz:OFF "); 
453C:  MOVLW  12
453E:  MOVWF  FF6
4540:  MOVLW  08
4542:  MOVWF  FF7
4544:  CALL   0EEA
....................       } 
....................        
....................       if(estadomv==1) 
4548:  BTFSS  34.1
454A:  BRA    456A
....................       { 
....................          lcd_gotoxy(10,4); 
454C:  MOVLW  0A
454E:  MOVLB  1
4550:  MOVWF  x16
4552:  MOVLW  04
4554:  MOVWF  x17
4556:  MOVLB  0
4558:  CALL   09EC
....................          printf(lcd_putc,"Motor:ON "); 
455C:  MOVLW  1C
455E:  MOVWF  FF6
4560:  MOVLW  08
4562:  MOVWF  FF7
4564:  CALL   0EEA
....................       } 
....................       else 
4568:  BRA    458A
....................       { 
....................          Motor_off;      
456A:  BCF    F8A.7
456C:  BCF    F93.7
....................          lcd_gotoxy(10,4); 
456E:  MOVLW  0A
4570:  MOVLB  1
4572:  MOVWF  x16
4574:  MOVLW  04
4576:  MOVWF  x17
4578:  MOVLB  0
457A:  CALL   09EC
....................          printf(lcd_putc,"Motor:OFF ");  
457E:  MOVLW  26
4580:  MOVWF  FF6
4582:  MOVLW  08
4584:  MOVWF  FF7
4586:  CALL   0EEA
....................       } 
....................        
....................       if(DOWN)//Si oprime hacia Abajo 
458A:  BSF    F93.2
458C:  BTFSS  F81.2
458E:  BRA    45A6
....................       {  if(Flanco == 0)  
4590:  BTFSC  34.4
4592:  BRA    45A4
....................             {Flanco = 1;delay_ms(200);estadofl=!estadofl;}} 
4594:  BSF    34.4
4596:  MOVLW  C8
4598:  MOVLB  1
459A:  MOVWF  x1B
459C:  MOVLB  0
459E:  CALL   08E2
45A2:  BTG    34.0
....................          else 
45A4:  BRA    45A8
....................             {Flanco = 0;} 
45A6:  BCF    34.4
....................              
....................       if(LEFT)//Si oprime hacia Izquierda 
45A8:  BSF    F93.1
45AA:  BTFSS  F81.1
45AC:  BRA    45F2
....................       {   
....................          if(Flanco2 == 0) 
45AE:  BTFSC  34.6
45B0:  BRA    45F0
....................          { 
....................             Flanco2 = 1;delay_ms(200);estadomv=!estadomv; 
45B2:  BSF    34.6
45B4:  MOVLW  C8
45B6:  MOVLB  1
45B8:  MOVWF  x1B
45BA:  MOVLB  0
45BC:  CALL   08E2
45C0:  BTG    34.1
....................             if(estadomv==1) 
45C2:  BTFSS  34.1
45C4:  BRA    45DC
....................             { 
....................                Motor_on;         
45C6:  BSF    F8A.7
45C8:  BCF    F93.7
....................                delay_ms(150); 
45CA:  MOVLW  96
45CC:  MOVLB  1
45CE:  MOVWF  x1B
45D0:  MOVLB  0
45D2:  CALL   08E2
....................                lcd_init(); 
45D6:  CALL   0980
....................             } 
....................             else 
45DA:  BRA    45F0
....................             { 
....................                Motor_off; 
45DC:  BCF    F8A.7
45DE:  BCF    F93.7
....................                delay_ms(150); 
45E0:  MOVLW  96
45E2:  MOVLB  1
45E4:  MOVWF  x1B
45E6:  MOVLB  0
45E8:  CALL   08E2
....................                lcd_init(); 
45EC:  CALL   0980
....................             } 
....................          } 
....................       } 
....................       else 
45F0:  BRA    45F4
....................       { 
....................          Flanco2 = 0; 
45F2:  BCF    34.6
....................       } 
....................     
....................       if(UP)// Si oprime Arriba 
45F4:  BSF    F93.3
45F6:  BTFSS  F81.3
45F8:  BRA    4630
....................       {  if(Flanco1 == 0)  
45FA:  BTFSC  34.5
45FC:  BRA    462E
....................             {/*Flanco1 = 1;*/delay_ms(500);printf(lcd_putc,"\f");Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;}} 
45FE:  MOVLW  02
4600:  MOVLB  1
4602:  MOVWF  x00
4604:  MOVLW  FA
4606:  MOVWF  x1B
4608:  MOVLB  0
460A:  CALL   08E2
460E:  MOVLB  1
4610:  DECFSZ x00,F
4612:  BRA    4604
4614:  MOVLW  0C
4616:  MOVWF  x15
4618:  MOVLB  0
461A:  CALL   0A5E
461E:  MOVLW  01
4620:  MOVWF  17
4622:  CLRF   36
4624:  MOVLW  02
4626:  MOVWF  1B
4628:  MOVWF  1D
462A:  MOVLW  0B
462C:  MOVWF  1A
....................          else 
462E:  BRA    4632
....................             {Flanco1 = 0;}    
4630:  BCF    34.5
....................              
....................        if(RIGHT)// Si oprime Derecha 
4632:  BSF    F93.0
4634:  BTFSS  F81.0
4636:  BRA    4662
....................       {  if(Flanco3 == 0)  
4638:  BTFSC  34.7
463A:  BRA    4660
....................             {delay_ms(500);printf(lcd_putc,"\f");Menu=40;}} 
463C:  MOVLW  02
463E:  MOVLB  1
4640:  MOVWF  x00
4642:  MOVLW  FA
4644:  MOVWF  x1B
4646:  MOVLB  0
4648:  CALL   08E2
464C:  MOVLB  1
464E:  DECFSZ x00,F
4650:  BRA    4642
4652:  MOVLW  0C
4654:  MOVWF  x15
4656:  MOVLB  0
4658:  CALL   0A5E
465C:  MOVLW  28
465E:  MOVWF  17
....................          else 
4660:  BRA    4664
....................             {Flanco3 = 0;}     
4662:  BCF    34.7
4664:  MOVLB  1
....................    } 
.................... //----------------Fin-Menu20---------------------------------------------------------------   
....................  
.................... //-----------------Menu30------------------------------------------------------------------   
....................    while(Menu == 30) 
....................    { 
4666:  MOVF   17,W
4668:  SUBLW  1E
466A:  BTFSS  FD8.2
466C:  BRA    47DC
....................       lcd_gotoxy(1,1); 
466E:  MOVLW  01
4670:  MOVWF  x16
4672:  MOVWF  x17
4674:  MOVLB  0
4676:  CALL   09EC
....................       printf(lcd_putc,"     Apagando     "); 
467A:  MOVLW  32
467C:  MOVWF  FF6
467E:  MOVLW  08
4680:  MOVWF  FF7
4682:  CALL   0EEA
....................       lcd_gotoxy(1,2); 
4686:  MOVLW  01
4688:  MOVLB  1
468A:  MOVWF  x16
468C:  MOVLW  02
468E:  MOVWF  x17
4690:  MOVLB  0
4692:  CALL   09EC
....................       printf(lcd_putc,"      Cabina      "); 
4696:  MOVLW  46
4698:  MOVWF  FF6
469A:  MOVLW  08
469C:  MOVWF  FF7
469E:  CALL   0EEA
....................        
....................       lcd_gotoxy(1,3); 
46A2:  MOVLW  01
46A4:  MOVLB  1
46A6:  MOVWF  x16
46A8:  MOVLW  03
46AA:  MOVWF  x17
46AC:  MOVLB  0
46AE:  CALL   09EC
....................       printf(lcd_putc," Espere"); 
46B2:  MOVLW  5A
46B4:  MOVWF  FF6
46B6:  MOVLW  08
46B8:  MOVWF  FF7
46BA:  CALL   0EEA
....................        
....................       if(Lectura==1) 
46BE:  BTFSS  35.5
46C0:  BRA    47D8
....................       {ajustar_damper(0); 
46C2:  MOVLB  1
46C4:  CLRF   x00
46C6:  MOVLB  0
46C8:  CALL   1648
....................        
....................          if(n<8) 
46CC:  MOVF   26,W
46CE:  SUBLW  07
46D0:  BNC   46F6
....................          { 
....................             lcd_gotoxy(9+n,3); 
46D2:  MOVLW  09
46D4:  ADDWF  26,W
46D6:  MOVLB  1
46D8:  MOVWF  x00
46DA:  MOVWF  x16
46DC:  MOVLW  03
46DE:  MOVWF  x17
46E0:  MOVLB  0
46E2:  CALL   09EC
....................             printf(lcd_putc,"."); 
46E6:  MOVLW  2E
46E8:  MOVLB  1
46EA:  MOVWF  x15
46EC:  MOVLB  0
46EE:  CALL   0A5E
....................             n++; 
46F2:  INCF   26,F
....................          } 
....................          else 
46F4:  BRA    47D6
....................          { 
....................             write_eeprom(70,segundos);write_eeprom(71,minutos);write_eeprom(72,horas); 
46F6:  MOVLW  46
46F8:  MOVWF  FA9
46FA:  MOVFF  30,FA8
46FE:  BCF    FA6.6
4700:  BCF    FA6.7
4702:  BSF    FA6.2
4704:  MOVF   FF2,W
4706:  MOVWF  00
4708:  BCF    FF2.7
470A:  MOVLB  F
470C:  MOVLW  55
470E:  MOVWF  FA7
4710:  MOVLW  AA
4712:  MOVWF  FA7
4714:  BSF    FA6.1
4716:  BTFSC  FA6.1
4718:  BRA    4716
471A:  BCF    FA6.2
471C:  MOVF   00,W
471E:  IORWF  FF2,F
4720:  MOVLW  47
4722:  MOVWF  FA9
4724:  MOVFF  31,FA8
4728:  BCF    FA6.6
472A:  BCF    FA6.7
472C:  BSF    FA6.2
472E:  MOVF   FF2,W
4730:  MOVWF  00
4732:  BCF    FF2.7
4734:  MOVLW  55
4736:  MOVWF  FA7
4738:  MOVLW  AA
473A:  MOVWF  FA7
473C:  BSF    FA6.1
473E:  BTFSC  FA6.1
4740:  BRA    473E
4742:  BCF    FA6.2
4744:  MOVF   00,W
4746:  IORWF  FF2,F
4748:  MOVLW  48
474A:  MOVWF  FA9
474C:  MOVFF  32,FA8
4750:  BCF    FA6.6
4752:  BCF    FA6.7
4754:  BSF    FA6.2
4756:  MOVF   FF2,W
4758:  MOVWF  00
475A:  BCF    FF2.7
475C:  MOVLW  55
475E:  MOVWF  FA7
4760:  MOVLW  AA
4762:  MOVWF  FA7
4764:  BSF    FA6.1
4766:  BTFSC  FA6.1
4768:  BRA    4766
476A:  BCF    FA6.2
476C:  MOVF   00,W
476E:  IORWF  FF2,F
....................             printf(lcd_putc,"\f"); 
4770:  MOVLW  0C
4772:  MOVLB  1
4774:  MOVWF  x15
4776:  MOVLB  0
4778:  CALL   0A5E
....................             lcd_gotoxy(1,2); 
477C:  MOVLW  01
477E:  MOVLB  1
4780:  MOVWF  x16
4782:  MOVLW  02
4784:  MOVWF  x17
4786:  MOVLB  0
4788:  CALL   09EC
....................             printf(lcd_putc,"     Proceso      "); 
478C:  MOVLW  62
478E:  MOVWF  FF6
4790:  MOVLW  08
4792:  MOVWF  FF7
4794:  CALL   0EEA
....................             lcd_gotoxy(1,3); 
4798:  MOVLW  01
479A:  MOVLB  1
479C:  MOVWF  x16
479E:  MOVLW  03
47A0:  MOVWF  x17
47A2:  MOVLB  0
47A4:  CALL   09EC
....................             printf(lcd_putc,"    Finalizado    "); 
47A8:  MOVLW  76
47AA:  MOVWF  FF6
47AC:  MOVLW  08
47AE:  MOVWF  FF7
47B0:  CALL   0EEA
....................             delay_ms(2000); 
47B4:  MOVLW  08
47B6:  MOVLB  1
47B8:  MOVWF  x00
47BA:  MOVLW  FA
47BC:  MOVWF  x1B
47BE:  MOVLB  0
47C0:  CALL   08E2
47C4:  MOVLB  1
47C6:  DECFSZ x00,F
47C8:  BRA    47BA
....................             printf(lcd_putc,"\f"); 
47CA:  MOVLW  0C
47CC:  MOVWF  x15
47CE:  MOVLB  0
47D0:  CALL   0A5E
....................             reset_cpu(); 
47D4:  RESET
....................          } 
....................        
....................        
....................       Lectura=0; 
47D6:  BCF    35.5
....................       }   
....................    } 
47D8:  MOVLB  1
47DA:  BRA    4666
....................  
.................... //----------------Fin-Menu30---------------------------------------------------------------   
....................  
.................... //----------------Menu40--------------------------------------------------------------- 
....................    if(Menu == 40){ // Menu de apagado de cabina 
47DC:  MOVF   17,W
47DE:  SUBLW  28
47E0:  BNZ   48BC
....................    lcd_gotoxy(1,1); 
47E2:  MOVLW  01
47E4:  MOVWF  x16
47E6:  MOVWF  x17
47E8:  MOVLB  0
47EA:  CALL   09EC
....................    printf(lcd_putc,"   Desea apagar     "); 
47EE:  MOVLW  8A
47F0:  MOVWF  FF6
47F2:  MOVLW  08
47F4:  MOVWF  FF7
47F6:  CALL   0EEA
....................    lcd_gotoxy(1,2); 
47FA:  MOVLW  01
47FC:  MOVLB  1
47FE:  MOVWF  x16
4800:  MOVLW  02
4802:  MOVWF  x17
4804:  MOVLB  0
4806:  CALL   09EC
....................    printf(lcd_putc,"     la cabina      "); 
480A:  MOVLW  A0
480C:  MOVWF  FF6
480E:  MOVLW  08
4810:  MOVWF  FF7
4812:  CALL   0EEA
....................    lcd_gotoxy(1,3); 
4816:  MOVLW  01
4818:  MOVLB  1
481A:  MOVWF  x16
481C:  MOVLW  03
481E:  MOVWF  x17
4820:  MOVLB  0
4822:  CALL   09EC
....................    printf(lcd_putc,"   > Aceptar        "); 
4826:  MOVLW  B6
4828:  MOVWF  FF6
482A:  MOVLW  08
482C:  MOVWF  FF7
482E:  CALL   0EEA
....................    lcd_gotoxy(1,4); 
4832:  MOVLW  01
4834:  MOVLB  1
4836:  MOVWF  x16
4838:  MOVLW  04
483A:  MOVWF  x17
483C:  MOVLB  0
483E:  CALL   09EC
....................    printf(lcd_putc,"   < Cancelar       "); 
4842:  MOVLW  CC
4844:  MOVWF  FF6
4846:  MOVLW  08
4848:  MOVWF  FF7
484A:  CALL   0EEA
....................    
....................     
....................       if(RIGHT)// Si oprime derecha 
484E:  BSF    F93.0
4850:  BTFSS  F81.0
4852:  BRA    4878
....................       {  if(Flanco1 == 0)  
4854:  BTFSC  34.5
4856:  BRA    4876
....................             {Flanco1 = 1;Menu=30;intensidadpantalla(contraste);Alarma_off;printf(lcd_putc,"\f"); 
4858:  BSF    34.5
485A:  MOVLW  1E
485C:  MOVWF  17
485E:  MOVFF  20,100
4862:  CALL   0ED6
4866:  BCF    F8A.5
4868:  BCF    F93.5
486A:  MOVLW  0C
486C:  MOVLB  1
486E:  MOVWF  x15
4870:  MOVLB  0
4872:  CALL   0A5E
....................             }} 
....................          else 
4876:  BRA    487A
....................             {Flanco1 = 0;}    
4878:  BCF    34.5
....................              
....................        if(LEFT)// Si oprime Izquierda 
487A:  BSF    F93.1
487C:  BTFSS  F81.1
487E:  BRA    48B8
....................       {  if(Flanco3 == 0)  
4880:  BTFSC  34.7
4882:  BRA    48B6
....................             {Flanco3 = 1;Menu=20;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f");}} 
4884:  BSF    34.7
4886:  MOVLW  14
4888:  MOVWF  17
488A:  CLRF   36
488C:  MOVLW  02
488E:  MOVWF  1B
4890:  MOVWF  1D
4892:  MOVLW  0B
4894:  MOVWF  1A
4896:  MOVLW  02
4898:  MOVLB  1
489A:  MOVWF  x00
489C:  MOVLW  FA
489E:  MOVWF  x1B
48A0:  MOVLB  0
48A2:  CALL   08E2
48A6:  MOVLB  1
48A8:  DECFSZ x00,F
48AA:  BRA    489C
48AC:  MOVLW  0C
48AE:  MOVWF  x15
48B0:  MOVLB  0
48B2:  CALL   0A5E
....................          else 
48B6:  BRA    48BA
....................             {Flanco3 = 0;}     
48B8:  BCF    34.7
48BA:  MOVLB  1
....................               
....................    }       
.................... //----------------Fin-Menu40---------------------------------------------------------------    
....................  
....................    if(tiemporeset>=20) 
48BC:  MOVF   33,W
48BE:  SUBLW  13
48C0:  BC    48CC
....................    { 
....................       lcd_init(); 
48C2:  MOVLB  0
48C4:  CALL   0980
....................       tiemporeset=0; 
48C8:  CLRF   33
48CA:  MOVLB  1
....................    }  
....................  
....................    if(ModoSleep==1) 
48CC:  BTFSS  35.3
48CE:  BRA    48DC
....................       {intensidadpantalla(0);sleep();} 
48D0:  CLRF   x00
48D2:  MOVLB  0
48D4:  CALL   0ED6
48D8:  SLEEP 
48DA:  MOVLB  1
.................... /* 
....................    if(Menu!=0 || Menu!=30) 
....................    { 
....................       if(Lectura==1) 
....................       { 
....................         Flujo=Leer_Sensor_Flujo(MediaMovil); 
....................         if(iniciodamper==1) 
....................         { 
....................             controlar_flujo(); 
....................           
....................             if(Flujo<0.5 && iniciodamper==1 && Menu==20) 
....................             { 
....................                flag_latencia=1; 
....................                 
....................                if(Latencia==1) 
....................                { 
....................                   if(estadoalarma==1) 
....................                   { 
....................                      Alarma_on; 
....................                   } 
....................                   else 
....................                   { 
....................                      Alarma_off; 
....................                   } 
....................                   estadopantalla=!estadopantalla; 
....................                   if(estadopantalla==1) 
....................                   {intensidadpantalla(contraste);} 
....................                   else 
....................                   {intensidadpantalla(0);} 
....................                } 
....................             } 
....................             else 
....................             { 
....................                intensidadpantalla(contraste);Alarma_off; 
....................                if(Flujo>=0.5) 
....................                { 
....................                   Latencia=0;t_latencia=0;flag_latencia=0; 
....................                } 
....................             } 
....................         } 
....................         else 
....................         { 
....................          intensidadpantalla(contraste);Alarma_off;Latencia=0;t_latencia=0;flag_latencia=0; 
....................         } 
....................          Lectura=0; 
....................       }      
....................  
....................    }  */    
....................     
....................    if(t_iniciodamper>=18000) 
48DC:  MOVF   56,W
48DE:  SUBLW  45
48E0:  BC    48F0
48E2:  XORLW  FF
48E4:  BNZ   48EC
48E6:  MOVF   55,W
48E8:  SUBLW  4F
48EA:  BC    48F0
....................    { 
....................       iniciodamper=1;flag_iniciodamper=0; 
48EC:  BSF    4E.0
48EE:  BCF    35.7
....................    } 
....................     
....................    } 
48F0:  GOTO   1D06
.................... } 
48F4:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
