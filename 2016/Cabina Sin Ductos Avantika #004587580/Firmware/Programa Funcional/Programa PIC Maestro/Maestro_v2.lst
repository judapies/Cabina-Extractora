CCS PCH C Compiler, Version 4.104, 5967               24-ene.-17 07:13

               Filename: H:\JP\JP\Laboratorio\Cabina Extractora de Gases y  Humos\2016\Cabina Sin Ductos Avantika #004587580\Firmware\Programa Funcional\Programa PIC Maestro\Maestro_v2.lst

               ROM used: 26730 bytes (82%)
                         Largest free fragment is 6034
               RAM used: 1585 (77%) at main() level
                         1641 (80%) worst case
               Stack:    5 worst case (4 in main + 1 for interrupts)

*
0000:  GOTO   2FFC
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   108A
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Comunicación USB para control de fermentador. 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Fermentador de 7 Litros 
.................... // Tiene Control: pH,Oxigeno Disuelto, CO2, Temperatura, Agitación y Foam. 
.................... // Tiene Control de cuatro bombas peristalticas: Acido, Base, Foam y Medio. 
.................... // Interfaz de control realizada en PC touch todo en uno Lenovo. 
.................... // Desarrollo de la interfaz en Java NetBeans. 
.................... // Ing. Juan David Piñeros Espinosa. 
.................... // Ing. Faiver Humberto Trujillo. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
1DE0:  MOVLW  06
1DE2:  MOVWF  FEA
1DE4:  MOVLW  2E
1DE6:  MOVWF  FE9
1DE8:  MOVF   FEF,W
1DEA:  BZ    1E08
1DEC:  MOVLW  0F
1DEE:  MOVWF  01
1DF0:  CLRF   00
1DF2:  DECFSZ 00,F
1DF4:  BRA    1DF2
1DF6:  DECFSZ 01,F
1DF8:  BRA    1DF0
1DFA:  MOVLW  8F
1DFC:  MOVWF  00
1DFE:  DECFSZ 00,F
1E00:  BRA    1DFE
1E02:  NOP   
1E04:  DECFSZ FEF,F
1E06:  BRA    1DEC
1E08:  RETLW  00
.................... #use i2c(Master,fast,sda=PIN_B0,scl=PIN_B1) 
*
1768:  MOVLW  08
176A:  MOVWF  01
176C:  MOVLW  02
176E:  MOVWF  00
1770:  DECFSZ 00,F
1772:  BRA    1770
1774:  BCF    F8A.1
1776:  BCF    F93.1
1778:  MOVLW  02
177A:  MOVWF  00
177C:  DECFSZ 00,F
177E:  BRA    177C
1780:  MOVLB  6
1782:  RLCF   x31,F
1784:  BCF    F8A.0
1786:  BTFSC  FD8.0
1788:  BSF    F93.0
178A:  BTFSS  FD8.0
178C:  BCF    F93.0
178E:  BSF    F93.1
1790:  BTFSS  F81.1
1792:  BRA    1790
1794:  DECFSZ 01,F
1796:  BRA    179A
1798:  BRA    179E
179A:  MOVLB  0
179C:  BRA    176C
179E:  MOVLW  02
17A0:  MOVWF  00
17A2:  DECFSZ 00,F
17A4:  BRA    17A2
17A6:  BCF    F8A.1
17A8:  BCF    F93.1
17AA:  NOP   
17AC:  BSF    F93.0
17AE:  MOVLW  02
17B0:  MOVWF  00
17B2:  DECFSZ 00,F
17B4:  BRA    17B2
17B6:  MOVLW  02
17B8:  MOVWF  00
17BA:  DECFSZ 00,F
17BC:  BRA    17BA
17BE:  BSF    F93.1
17C0:  BTFSS  F81.1
17C2:  BRA    17C0
17C4:  CLRF   01
17C6:  MOVLW  02
17C8:  MOVWF  00
17CA:  DECFSZ 00,F
17CC:  BRA    17CA
17CE:  BTFSC  F81.0
17D0:  BSF    01.0
17D2:  BCF    F8A.1
17D4:  BCF    F93.1
17D6:  BCF    F8A.0
17D8:  BCF    F93.0
17DA:  MOVLB  0
17DC:  RETLW  00
*
21DE:  MOVLW  08
21E0:  MOVLB  6
21E2:  MOVWF  x31
21E4:  MOVFF  00,632
21E8:  BSF    F93.0
21EA:  MOVLW  02
21EC:  MOVWF  00
21EE:  DECFSZ 00,F
21F0:  BRA    21EE
21F2:  BSF    F93.1
21F4:  BTFSS  F81.1
21F6:  BRA    21F4
21F8:  BTFSC  F81.0
21FA:  BSF    FD8.0
21FC:  BTFSS  F81.0
21FE:  BCF    FD8.0
2200:  RLCF   01,F
2202:  MOVLW  02
2204:  MOVWF  00
2206:  DECFSZ 00,F
2208:  BRA    2206
220A:  BCF    F93.1
220C:  BCF    F8A.1
220E:  DECFSZ x31,F
2210:  BRA    21E8
2212:  BSF    F93.0
2214:  MOVLW  02
2216:  MOVWF  00
2218:  DECFSZ 00,F
221A:  BRA    2218
221C:  BCF    F8A.0
221E:  MOVF   x32,W
2220:  BTFSS  FD8.2
2222:  BCF    F93.0
2224:  NOP   
2226:  BSF    F93.1
2228:  BTFSS  F81.1
222A:  BRA    2228
222C:  MOVLW  02
222E:  MOVWF  00
2230:  DECFSZ 00,F
2232:  BRA    2230
2234:  BCF    F8A.1
2236:  BCF    F93.1
2238:  MOVLW  02
223A:  MOVWF  00
223C:  DECFSZ 00,F
223E:  BRA    223C
2240:  BCF    F8A.0
2242:  BCF    F93.0
2244:  MOVLB  0
2246:  GOTO   294E (RETURN)
.................... #include "HDM64GS12.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef FAST_GLCD 
.................... #define FAST_GLCD 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B3   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B4   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B5   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B6   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B7   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_B2   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(int8 x, int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    int8 left[512]; 
....................    int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
2F3C:  BCF    F93.2
2F3E:  BSF    F8A.2
....................    output_low(GLCD_E); 
2F40:  BCF    F93.7
2F42:  BCF    F8A.7
....................    output_low(GLCD_CS1); 
2F44:  BCF    F93.3
2F46:  BCF    F8A.3
....................    output_low(GLCD_CS2); 
2F48:  BCF    F93.4
2F4A:  BCF    F8A.4
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
2F4C:  BCF    F93.5
2F4E:  BCF    F8A.5
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
2F50:  MOVLB  6
2F52:  CLRF   x35
2F54:  MOVLW  C0
2F56:  MOVWF  x36
2F58:  MOVLB  0
2F5A:  CALL   1874
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
2F5E:  MOVLW  01
2F60:  MOVLB  6
2F62:  MOVWF  x35
2F64:  MOVLW  C0
2F66:  MOVWF  x36
2F68:  MOVLB  0
2F6A:  CALL   1874
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
2F6E:  MOVLB  6
2F70:  CLRF   x35
2F72:  MOVLW  40
2F74:  MOVWF  x36
2F76:  MOVLB  0
2F78:  CALL   1874
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
2F7C:  MOVLW  01
2F7E:  MOVLB  6
2F80:  MOVWF  x35
2F82:  MOVLW  40
2F84:  MOVWF  x36
2F86:  MOVLB  0
2F88:  CALL   1874
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
2F8C:  MOVLB  6
2F8E:  CLRF   x35
2F90:  MOVLW  B8
2F92:  MOVWF  x36
2F94:  MOVLB  0
2F96:  CALL   1874
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
2F9A:  MOVLW  01
2F9C:  MOVLB  6
2F9E:  MOVWF  x35
2FA0:  MOVLW  B8
2FA2:  MOVWF  x36
2FA4:  MOVLB  0
2FA6:  CALL   1874
....................  
....................    if(mode == ON) 
2FAA:  MOVLB  6
2FAC:  DECFSZ x2D,W
2FAE:  BRA    2FD0
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
2FB0:  CLRF   x35
2FB2:  MOVLW  3F
2FB4:  MOVWF  x36
2FB6:  MOVLB  0
2FB8:  CALL   1874
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
2FBC:  MOVLW  01
2FBE:  MOVLB  6
2FC0:  MOVWF  x35
2FC2:  MOVLW  3F
2FC4:  MOVWF  x36
2FC6:  MOVLB  0
2FC8:  CALL   1874
....................    } 
....................    else 
2FCC:  BRA    2FEC
2FCE:  MOVLB  6
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
2FD0:  CLRF   x35
2FD2:  MOVLW  3E
2FD4:  MOVWF  x36
2FD6:  MOVLB  0
2FD8:  CALL   1874
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
2FDC:  MOVLW  01
2FDE:  MOVLB  6
2FE0:  MOVWF  x35
2FE2:  MOVLW  3E
2FE4:  MOVWF  x36
2FE6:  MOVLB  0
2FE8:  CALL   1874
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
2FEC:  MOVLB  6
2FEE:  CLRF   x2E
2FF0:  MOVLB  0
2FF2:  CALL   1FEA
....................  
....................    #ifdef FAST_GLCD 
....................    glcd_update(); 
2FF6:  CALL   18B4
....................    #endif 
.................... } 
2FFA:  RETLW  00
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    int8 i, j; 
....................    int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
*
18B4:  MOVLB  6
18B6:  CLRF   x31
18B8:  MOVLW  16
18BA:  MOVWF  x30
....................    p2 = displayData.right; 
18BC:  MOVLW  02
18BE:  MOVWF  x33
18C0:  MOVLW  16
18C2:  MOVWF  x32
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
18C4:  CLRF   x2E
18C6:  MOVF   x2E,W
18C8:  SUBLW  07
18CA:  BNC   1968
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
18CC:  BCF    F93.5
18CE:  BCF    F8A.5
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
18D0:  CLRF   x35
18D2:  MOVLW  40
18D4:  MOVWF  x36
18D6:  MOVLB  0
18D8:  RCALL  1874
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
18DA:  MOVLW  01
18DC:  MOVLB  6
18DE:  MOVWF  x35
18E0:  MOVLW  40
18E2:  MOVWF  x36
18E4:  MOVLB  0
18E6:  RCALL  1874
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
18E8:  MOVLB  6
18EA:  MOVF   x2E,W
18EC:  IORLW  B8
18EE:  MOVWF  x34
18F0:  CLRF   x35
18F2:  MOVWF  x36
18F4:  MOVLB  0
18F6:  RCALL  1874
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
18F8:  MOVLB  6
18FA:  MOVF   x2E,W
18FC:  IORLW  B8
18FE:  MOVWF  x34
1900:  MOVLW  01
1902:  MOVWF  x35
1904:  MOVFF  634,636
1908:  MOVLB  0
190A:  RCALL  1874
....................       output_high(GLCD_DI);                     // Set for data 
190C:  BCF    F93.5
190E:  BSF    F8A.5
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
1910:  MOVLB  6
1912:  CLRF   x2F
1914:  MOVF   x2F,W
1916:  SUBLW  3F
1918:  BNC   1964
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
191A:  MOVFF  631,03
191E:  MOVF   x30,W
1920:  INCF   x30,F
1922:  BTFSC  FD8.2
1924:  INCF   x31,F
1926:  MOVWF  FE9
1928:  MOVFF  03,FEA
192C:  MOVFF  FEF,634
1930:  CLRF   x35
1932:  MOVFF  634,636
1936:  MOVLB  0
1938:  RCALL  1874
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
193A:  MOVLB  6
193C:  MOVFF  633,03
1940:  MOVF   x32,W
1942:  INCF   x32,F
1944:  BTFSC  FD8.2
1946:  INCF   x33,F
1948:  MOVWF  FE9
194A:  MOVFF  03,FEA
194E:  MOVFF  FEF,634
1952:  MOVLW  01
1954:  MOVWF  x35
1956:  MOVFF  634,636
195A:  MOVLB  0
195C:  RCALL  1874
....................       } 
195E:  MOVLB  6
1960:  INCF   x2F,F
1962:  BRA    1914
....................    } 
1964:  INCF   x2E,F
1966:  BRA    18C6
.................... } 
1968:  MOVLB  0
196A:  RETLW  00
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(int8 x, int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8* p; 
....................    int16 temp; 
....................    temp =  y/8; 
196C:  MOVLB  6
196E:  CLRF   x65
1970:  RRCF   x60,W
1972:  MOVWF  x64
1974:  RRCF   x64,F
1976:  RRCF   x64,F
1978:  MOVLW  1F
197A:  ANDWF  x64,F
....................    temp *= 64; 
197C:  RLCF   x64,F
197E:  RLCF   x65,F
1980:  RLCF   x64,F
1982:  RLCF   x65,F
1984:  RLCF   x64,F
1986:  RLCF   x65,F
1988:  RLCF   x64,F
198A:  RLCF   x65,F
198C:  RLCF   x64,F
198E:  RLCF   x65,F
1990:  RLCF   x64,F
1992:  RLCF   x65,F
1994:  MOVLW  C0
1996:  ANDWF  x64,F
....................    temp += x; 
1998:  MOVF   x5F,W
199A:  ADDWF  x64,F
199C:  MOVLW  00
199E:  ADDWFC x65,F
....................  
....................    if(x > 63) 
19A0:  MOVF   x5F,W
19A2:  SUBLW  3F
19A4:  BC    19C0
....................    { 
....................       p = displayData.right + temp - 64; 
19A6:  MOVLW  16
19A8:  ADDWF  x64,W
19AA:  MOVWF  x66
19AC:  MOVLW  02
19AE:  ADDWFC x65,W
19B0:  MOVWF  x67
19B2:  MOVLW  40
19B4:  SUBWF  x66,W
19B6:  MOVWF  x62
19B8:  MOVLW  00
19BA:  SUBWFB x67,W
19BC:  MOVWF  x63
....................    } 
....................    else 
19BE:  BRA    19CC
....................    { 
....................       p = displayData.left + temp; 
19C0:  MOVLW  16
19C2:  ADDWF  x64,W
19C4:  MOVWF  x62
19C6:  MOVLW  00
19C8:  ADDWFC x65,W
19CA:  MOVWF  x63
....................    } 
....................  
....................    if(color) 
19CC:  MOVF   x61,F
19CE:  BZ    19FA
....................    { 
....................       bit_set(*p, y%8); 
19D0:  MOVFF  663,03
19D4:  MOVFF  662,FE9
19D8:  MOVFF  663,FEA
19DC:  MOVF   x60,W
19DE:  ANDLW  07
19E0:  MOVWF  x66
19E2:  MOVLW  01
19E4:  MOVWF  00
19E6:  MOVF   x66,W
19E8:  MOVWF  01
19EA:  BZ    19F4
19EC:  BCF    FD8.0
19EE:  RLCF   00,F
19F0:  DECFSZ 01,F
19F2:  BRA    19EC
19F4:  MOVF   00,W
19F6:  IORWF  FEF,F
....................    } 
....................    else 
19F8:  BRA    1A24
....................    { 
....................       bit_clear(*p, y%8); 
19FA:  MOVFF  663,03
19FE:  MOVFF  662,FE9
1A02:  MOVFF  663,FEA
1A06:  MOVF   x60,W
1A08:  ANDLW  07
1A0A:  MOVWF  x66
1A0C:  MOVLW  01
1A0E:  MOVWF  00
1A10:  MOVF   x66,W
1A12:  MOVWF  01
1A14:  BZ    1A1E
1A16:  BCF    FD8.0
1A18:  RLCF   00,F
1A1A:  DECFSZ 01,F
1A1C:  BRA    1A16
1A1E:  MOVF   00,W
1A20:  XORLW  FF
1A22:  ANDWF  FEF,F
....................    } 
.................... } 
1A24:  MOVLB  0
1A26:  RETLW  00
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
....................    { 
....................       x -= 64; 
....................       side = GLCD_RIGHT; 
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
....................    output_high(GLCD_DI);                        // Set for data 
....................    glcd_readByte(side);                         // Need two reads to get data 
....................    data = glcd_readByte(side);                  //  at new address 
....................  
....................    if(color == ON) 
....................       bit_set(data, y%8);        // Turn the pixel on 
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
....................    glcd_writeByte(side, x);      // Set the horizontal address 
....................    output_high(GLCD_DI);         // Set for data 
....................    glcd_writeByte(side, data);   // Write the pixel data 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    int8  data; 
....................    int8  *p1, *p2; 
....................    int16 i; 
....................  
....................    p1 = displayData.left; 
*
1FEA:  MOVLB  6
1FEC:  CLRF   x31
1FEE:  MOVLW  16
1FF0:  MOVWF  x30
....................    p2 = displayData.right; 
1FF2:  MOVLW  02
1FF4:  MOVWF  x33
1FF6:  MOVLW  16
1FF8:  MOVWF  x32
....................    data = 0xFF * color; 
1FFA:  MOVF   x2E,W
1FFC:  MULLW  FF
1FFE:  MOVFF  FF3,62F
....................  
....................    for(i=0; i<512; ++i) 
2002:  CLRF   x35
2004:  CLRF   x34
2006:  MOVF   x35,W
2008:  SUBLW  01
200A:  BNC   2040
....................    { 
....................       *p1++ = data; 
200C:  MOVFF  631,03
2010:  MOVF   x30,W
2012:  INCF   x30,F
2014:  BTFSC  FD8.2
2016:  INCF   x31,F
2018:  MOVWF  FE9
201A:  MOVFF  03,FEA
201E:  MOVFF  62F,FEF
....................       *p2++ = data; 
2022:  MOVFF  633,03
2026:  MOVF   x32,W
2028:  INCF   x32,F
202A:  BTFSC  FD8.2
202C:  INCF   x33,F
202E:  MOVWF  FE9
2030:  MOVFF  03,FEA
2034:  MOVFF  62F,FEF
....................    } 
2038:  INCF   x34,F
203A:  BTFSC  FD8.2
203C:  INCF   x35,F
203E:  BRA    2006
.................... } 
2040:  MOVLB  0
2042:  RETLW  00
.................... #else 
.................... { 
....................    int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    if(side)                   // Choose which side to write to 
*
1874:  MOVLB  6
1876:  MOVF   x35,F
1878:  BZ    1880
....................       output_high(GLCD_CS2); 
187A:  BCF    F93.4
187C:  BSF    F8A.4
....................    else 
187E:  BRA    1884
....................       output_high(GLCD_CS1); 
1880:  BCF    F93.3
1882:  BSF    F8A.3
....................  
....................    output_low(GLCD_RW);       // Set for writing 
1884:  BCF    F93.6
1886:  BCF    F8A.6
....................    output_d(data);            // Put the data on the port 
1888:  CLRF   F95
188A:  MOVFF  636,F8C
....................    delay_cycles(50); 
188E:  MOVLW  10
1890:  MOVWF  00
1892:  DECFSZ 00,F
1894:  BRA    1892
1896:  NOP   
....................    output_high(GLCD_E);       // Pulse the enable pin 
1898:  BCF    F93.7
189A:  BSF    F8A.7
....................    delay_cycles(250); 
189C:  MOVLW  53
189E:  MOVWF  00
18A0:  DECFSZ 00,F
18A2:  BRA    18A0
....................    output_low(GLCD_E); 
18A4:  BCF    F93.7
18A6:  BCF    F8A.7
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
18A8:  BCF    F93.3
18AA:  BCF    F8A.3
....................    output_low(GLCD_CS2); 
18AC:  BCF    F93.4
18AE:  BCF    F8A.4
.................... } 
18B0:  MOVLB  0
18B2:  RETLW  00
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
....................    output_high(GLCD_RW);      // Set for reading 
....................  
....................    if(side)                   // Choose which side to write to 
....................       output_high(GLCD_CS2); 
....................    else 
....................       output_high(GLCD_CS1); 
....................  
....................    delay_cycles(50); 
....................    output_high(GLCD_E);       // Pulse the enable pin 
....................    delay_cycles(200); 
....................    data = input_d();          // Get the data from the display's output register 
....................    output_low(GLCD_E); 
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
....................    output_low(GLCD_CS2); 
....................    return data;               // Return the read data 
.................... } 
....................  
.................... #endif 
....................  
.................... #include "GRAPHICS.c" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(int16 x1, int16 y1, int16 x2, int16 y2, int1 color) 
.................... #else 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... #endif 
.................... { 
*
1A28:  MOVLW  01
1A2A:  MOVLB  6
1A2C:  MOVWF  x58
1A2E:  MOVWF  x59
1A30:  CLRF   x5E
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
1A32:  MOVF   x4F,W
1A34:  SUBWF  x51,W
1A36:  MOVWF  x5F
1A38:  MOVF   x5F,W
1A3A:  BTFSS  x5F.7
1A3C:  BRA    1A44
1A3E:  MOVLW  00
1A40:  BSF    FD8.0
1A42:  SUBFWB x5F,W
1A44:  CLRF   03
1A46:  MOVWF  x56
1A48:  MOVFF  03,657
....................    dy = abs((signed int8)(y2 - y1)); 
1A4C:  MOVF   x50,W
1A4E:  SUBWF  x52,W
1A50:  MOVWF  x5F
1A52:  MOVF   x5F,W
1A54:  BTFSS  x5F.7
1A56:  BRA    1A5E
1A58:  MOVLW  00
1A5A:  BSF    FD8.0
1A5C:  SUBFWB x5F,W
1A5E:  CLRF   03
1A60:  MOVWF  x54
1A62:  MOVFF  03,655
....................    #endif 
....................  
....................    if(x1 > x2) 
1A66:  MOVF   x4F,W
1A68:  SUBWF  x51,W
1A6A:  BC    1A70
....................       addx = -1; 
1A6C:  MOVLW  FF
1A6E:  MOVWF  x58
....................    if(y1 > y2) 
1A70:  MOVF   x50,W
1A72:  SUBWF  x52,W
1A74:  BC    1A7A
....................       addy = -1; 
1A76:  MOVLW  FF
1A78:  MOVWF  x59
....................  
....................    if(dx >= dy) 
1A7A:  MOVF   x55,W
1A7C:  SUBWF  x57,W
1A7E:  BNC   1AF6
1A80:  BNZ   1A88
1A82:  MOVF   x54,W
1A84:  SUBWF  x56,W
1A86:  BNC   1AF6
....................    { 
....................       dy *= 2; 
1A88:  BCF    FD8.0
1A8A:  RLCF   x54,F
1A8C:  RLCF   x55,F
....................       P = dy - dx; 
1A8E:  MOVF   x56,W
1A90:  SUBWF  x54,W
1A92:  MOVWF  00
1A94:  MOVF   x57,W
1A96:  SUBWFB x55,W
1A98:  MOVFF  00,65A
1A9C:  MOVWF  x5B
....................       diff = P - dx; 
1A9E:  MOVF   x56,W
1AA0:  SUBWF  x5A,W
1AA2:  MOVWF  x5C
1AA4:  MOVF   x57,W
1AA6:  SUBWFB x5B,W
1AA8:  MOVWF  x5D
....................  
....................       for(; i<=dx; ++i) 
1AAA:  MOVF   x57,F
1AAC:  BNZ   1AB4
1AAE:  MOVF   x5E,W
1AB0:  SUBWF  x56,W
1AB2:  BNC   1AF4
....................       { 
....................          glcd_pixel(x1, y1, color); 
1AB4:  MOVFF  64F,65F
1AB8:  MOVFF  650,660
1ABC:  MOVFF  653,661
1AC0:  MOVLB  0
1AC2:  RCALL  196C
....................  
....................          if(P < 0) 
1AC4:  MOVLB  6
1AC6:  BTFSC  x5B.7
1AC8:  BRA    1ACC
1ACA:  BRA    1ADC
....................          { 
....................             P  += dy; 
1ACC:  MOVF   x54,W
1ACE:  ADDWF  x5A,F
1AD0:  MOVF   x55,W
1AD2:  ADDWFC x5B,F
....................             x1 += addx; 
1AD4:  MOVF   x58,W
1AD6:  ADDWF  x4F,W
1AD8:  MOVWF  x4F
....................          } 
....................          else 
1ADA:  BRA    1AF0
....................          { 
....................             P  += diff; 
1ADC:  MOVF   x5C,W
1ADE:  ADDWF  x5A,F
1AE0:  MOVF   x5D,W
1AE2:  ADDWFC x5B,F
....................             x1 += addx; 
1AE4:  MOVF   x58,W
1AE6:  ADDWF  x4F,W
1AE8:  MOVWF  x4F
....................             y1 += addy; 
1AEA:  MOVF   x59,W
1AEC:  ADDWF  x50,W
1AEE:  MOVWF  x50
....................          } 
....................       } 
1AF0:  INCF   x5E,F
1AF2:  BRA    1AAA
....................    } 
....................    else 
1AF4:  BRA    1B62
....................    { 
....................       dx *= 2; 
1AF6:  BCF    FD8.0
1AF8:  RLCF   x56,F
1AFA:  RLCF   x57,F
....................       P = dx - dy; 
1AFC:  MOVF   x54,W
1AFE:  SUBWF  x56,W
1B00:  MOVWF  00
1B02:  MOVF   x55,W
1B04:  SUBWFB x57,W
1B06:  MOVFF  00,65A
1B0A:  MOVWF  x5B
....................       diff = P - dy; 
1B0C:  MOVF   x54,W
1B0E:  SUBWF  x5A,W
1B10:  MOVWF  x5C
1B12:  MOVF   x55,W
1B14:  SUBWFB x5B,W
1B16:  MOVWF  x5D
....................  
....................       for(; i<=dy; ++i) 
1B18:  MOVF   x55,F
1B1A:  BNZ   1B22
1B1C:  MOVF   x5E,W
1B1E:  SUBWF  x54,W
1B20:  BNC   1B62
....................       { 
....................          glcd_pixel(x1, y1, color); 
1B22:  MOVFF  64F,65F
1B26:  MOVFF  650,660
1B2A:  MOVFF  653,661
1B2E:  MOVLB  0
1B30:  RCALL  196C
....................  
....................          if(P < 0) 
1B32:  MOVLB  6
1B34:  BTFSC  x5B.7
1B36:  BRA    1B3A
1B38:  BRA    1B4A
....................          { 
....................             P  += dx; 
1B3A:  MOVF   x56,W
1B3C:  ADDWF  x5A,F
1B3E:  MOVF   x57,W
1B40:  ADDWFC x5B,F
....................             y1 += addy; 
1B42:  MOVF   x59,W
1B44:  ADDWF  x50,W
1B46:  MOVWF  x50
....................          } 
....................          else 
1B48:  BRA    1B5E
....................          { 
....................             P  += diff; 
1B4A:  MOVF   x5C,W
1B4C:  ADDWF  x5A,F
1B4E:  MOVF   x5D,W
1B50:  ADDWFC x5B,F
....................             x1 += addx; 
1B52:  MOVF   x58,W
1B54:  ADDWF  x4F,W
1B56:  MOVWF  x4F
....................             y1 += addy; 
1B58:  MOVF   x59,W
1B5A:  ADDWF  x50,W
1B5C:  MOVWF  x50
....................          } 
....................       } 
1B5E:  INCF   x5E,F
1B60:  BRA    1B18
....................    } 
.................... } 
1B62:  MOVLB  0
1B64:  RETLW  00
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(int16 x1, int16 y1, int16 x2, int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
1B66:  MOVLB  6
1B68:  MOVF   x48,F
1B6A:  BZ    1BC8
....................    { 
....................       #ifdef LARGE_LCD 
....................       int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
1B6C:  MOVF   x46,W
1B6E:  SUBWF  x44,W
1B70:  BC    1B7C
....................       { 
....................          xmin = x1; 
1B72:  MOVFF  644,64B
....................          xmax = x2; 
1B76:  MOVFF  646,64C
....................       } 
....................       else 
1B7A:  BRA    1B84
....................       { 
....................          xmin = x2; 
1B7C:  MOVFF  646,64B
....................          xmax = x1; 
1B80:  MOVFF  644,64C
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
1B84:  MOVF   x47,W
1B86:  SUBWF  x45,W
1B88:  BC    1B94
....................       { 
....................          ymin = y1; 
1B8A:  MOVFF  645,64D
....................          ymax = y2; 
1B8E:  MOVFF  647,64E
....................       } 
....................       else 
1B92:  BRA    1B9C
....................       { 
....................          ymin = y2; 
1B94:  MOVFF  647,64D
....................          ymax = y1; 
1B98:  MOVFF  645,64E
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
1B9C:  MOVF   x4B,W
1B9E:  SUBWF  x4C,W
1BA0:  BNC   1BC6
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
1BA2:  MOVFF  64D,64A
1BA6:  MOVF   x4A,W
1BA8:  SUBWF  x4E,W
1BAA:  BNC   1BC2
....................          { 
....................             glcd_pixel(xmin, i, color); 
1BAC:  MOVFF  64B,65F
1BB0:  MOVFF  64A,660
1BB4:  MOVFF  649,661
1BB8:  MOVLB  0
1BBA:  RCALL  196C
....................          } 
1BBC:  MOVLB  6
1BBE:  INCF   x4A,F
1BC0:  BRA    1BA6
....................       } 
1BC2:  INCF   x4B,F
1BC4:  BRA    1B9C
....................    } 
....................    else 
1BC6:  BRA    1C24
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
1BC8:  MOVFF  644,64F
1BCC:  MOVFF  645,650
1BD0:  MOVFF  646,651
1BD4:  MOVFF  645,652
1BD8:  MOVFF  649,653
1BDC:  MOVLB  0
1BDE:  RCALL  1A28
....................       glcd_line(x1, y2, x2, y2, color); 
1BE0:  MOVFF  644,64F
1BE4:  MOVFF  647,650
1BE8:  MOVFF  646,651
1BEC:  MOVFF  647,652
1BF0:  MOVFF  649,653
1BF4:  RCALL  1A28
....................       glcd_line(x1, y1, x1, y2, color); 
1BF6:  MOVFF  644,64F
1BFA:  MOVFF  645,650
1BFE:  MOVFF  644,651
1C02:  MOVFF  647,652
1C06:  MOVFF  649,653
1C0A:  RCALL  1A28
....................       glcd_line(x2, y1, x2, y2, color); 
1C0C:  MOVFF  646,64F
1C10:  MOVFF  645,650
1C14:  MOVFF  646,651
1C18:  MOVFF  647,652
1C1C:  MOVFF  649,653
1C20:  RCALL  1A28
1C22:  MOVLB  6
....................    } 
.................... } 
1C24:  MOVLB  0
1C26:  RETLW  00
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(int16 x1, int16 y1, int16 x2, int16 y2, int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... #endif 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................    #endif 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(int16 x, int16 y, int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(int16 x, int16 y, char* textptr, int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... #endif 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
1C28:  MOVFF  647,03
1C2C:  MOVLB  6
1C2E:  MOVFF  646,FE9
1C32:  MOVFF  647,FEA
1C36:  MOVF   FEF,F
1C38:  BTFSC  FD8.2
1C3A:  BRA    1DDC
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
1C3C:  MOVFF  647,03
1C40:  MOVFF  646,FE9
1C44:  MOVFF  647,FEA
1C48:  MOVF   FEF,W
1C4A:  SUBLW  52
1C4C:  BNC   1C9C
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
1C4E:  MOVFF  647,03
1C52:  MOVFF  646,FE9
1C56:  MOVFF  647,FEA
1C5A:  MOVLW  20
1C5C:  SUBWF  FEF,W
1C5E:  MULLW  05
1C60:  MOVF   FF3,W
1C62:  CLRF   03
1C64:  MOVWF  x53
1C66:  MOVLW  06
1C68:  MOVWF  FEA
1C6A:  MOVLW  4E
1C6C:  MOVWF  FE9
1C6E:  CLRF   x57
1C70:  MOVFF  653,656
1C74:  MOVFF  FF2,654
1C78:  BCF    FF2.7
1C7A:  MOVLW  05
1C7C:  MOVWF  01
1C7E:  CLRF   FF7
1C80:  MOVF   x53,W
1C82:  MOVLB  0
1C84:  CALL   0096
1C88:  TBLRD*-
1C8A:  TBLRD*+
1C8C:  MOVFF  FF5,FEE
1C90:  DECFSZ 01,F
1C92:  BRA    1C8A
1C94:  MOVLB  6
1C96:  BTFSC  x54.7
1C98:  BSF    FF2.7
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
1C9A:  BRA    1D06
1C9C:  MOVFF  647,03
1CA0:  MOVFF  646,FE9
1CA4:  MOVFF  647,FEA
1CA8:  MOVF   FEF,W
1CAA:  SUBLW  7E
1CAC:  BNC   1CFC
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
1CAE:  MOVFF  647,03
1CB2:  MOVFF  646,FE9
1CB6:  MOVFF  647,FEA
1CBA:  MOVLW  53
1CBC:  SUBWF  FEF,W
1CBE:  MULLW  05
1CC0:  MOVF   FF3,W
1CC2:  CLRF   03
1CC4:  MOVWF  x53
1CC6:  MOVLW  06
1CC8:  MOVWF  FEA
1CCA:  MOVLW  4E
1CCC:  MOVWF  FE9
1CCE:  CLRF   x57
1CD0:  MOVFF  653,656
1CD4:  MOVFF  FF2,654
1CD8:  BCF    FF2.7
1CDA:  MOVLW  05
1CDC:  MOVWF  01
1CDE:  CLRF   FF7
1CE0:  MOVF   x53,W
1CE2:  MOVLB  0
1CE4:  CALL   01B0
1CE8:  TBLRD*-
1CEA:  TBLRD*+
1CEC:  MOVFF  FF5,FEE
1CF0:  DECFSZ 01,F
1CF2:  BRA    1CEA
1CF4:  MOVLB  6
1CF6:  BTFSC  x54.7
1CF8:  BSF    FF2.7
....................       else 
1CFA:  BRA    1D06
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
1CFC:  CLRF   x4E
1CFE:  CLRF   x4F
1D00:  CLRF   x50
1D02:  CLRF   x51
1D04:  CLRF   x52
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
1D06:  MOVFF  647,03
1D0A:  MOVF   x46,W
1D0C:  MOVWF  FE9
1D0E:  MOVFF  03,FEA
1D12:  MOVF   FEF,W
1D14:  XORLW  0A
1D16:  MOVLB  0
1D18:  BZ    1D20
1D1A:  XORLW  07
1D1C:  BZ    1D30
1D1E:  BRA    1D36
....................          case '\n': 
....................             y += 7*size + 1; 
1D20:  MOVLB  6
1D22:  MOVF   x48,W
1D24:  MULLW  07
1D26:  MOVF   FF3,W
1D28:  ADDLW  01
1D2A:  ADDWF  x45,F
....................             continue; 
1D2C:  BRA    1DCE
1D2E:  MOVLB  0
....................          case '\r': 
....................             x = 0; 
1D30:  MOVLB  6
1D32:  CLRF   x44
....................             continue; 
1D34:  BRA    1DCE
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
1D36:  MOVLB  6
1D38:  MOVF   x48,W
1D3A:  MULLW  05
1D3C:  MOVF   FF3,W
1D3E:  ADDWF  x44,W
1D40:  SUBLW  7F
1D42:  BC    1D50
....................       { 
....................          x = 0;                           // Set x at far left position 
1D44:  CLRF   x44
....................          y += 7*size + 1;                 // Set y at next position down 
1D46:  MOVF   x48,W
1D48:  MULLW  07
1D4A:  MOVF   FF3,W
1D4C:  ADDLW  01
1D4E:  ADDWF  x45,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
1D50:  CLRF   x4A
1D52:  MOVF   x4A,W
1D54:  SUBLW  04
1D56:  BNC   1DCE
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
1D58:  CLRF   x4B
1D5A:  MOVF   x4B,W
1D5C:  SUBLW  06
1D5E:  BNC   1DC6
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
1D60:  CLRF   03
1D62:  MOVF   x4A,W
1D64:  ADDLW  4E
1D66:  MOVWF  FE9
1D68:  MOVLW  06
1D6A:  ADDWFC 03,W
1D6C:  MOVWF  FEA
1D6E:  MOVFF  FEF,653
1D72:  MOVFF  653,00
1D76:  MOVF   x4B,W
1D78:  MOVWF  01
1D7A:  BZ    1D84
1D7C:  BCF    FD8.0
1D7E:  RRCF   00,F
1D80:  DECFSZ 01,F
1D82:  BRA    1D7C
1D84:  BTFSS  00.0
1D86:  BRA    1DC2
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
1D88:  CLRF   x4C
1D8A:  MOVF   x48,W
1D8C:  SUBWF  x4C,W
1D8E:  BC    1DC2
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
1D90:  CLRF   x4D
1D92:  MOVF   x48,W
1D94:  SUBWF  x4D,W
1D96:  BC    1DBE
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
1D98:  MOVF   x4D,W
1D9A:  ADDWF  x44,W
1D9C:  MOVWF  x53
1D9E:  MOVF   x4B,W
1DA0:  MULWF  x48
1DA2:  MOVF   FF3,W
1DA4:  ADDWF  x45,W
1DA6:  ADDWF  x4C,W
1DA8:  MOVWF  x54
1DAA:  MOVFF  653,65F
1DAE:  MOVWF  x60
1DB0:  MOVFF  649,661
1DB4:  MOVLB  0
1DB6:  RCALL  196C
....................                   } 
1DB8:  MOVLB  6
1DBA:  INCF   x4D,F
1DBC:  BRA    1D92
....................                } 
1DBE:  INCF   x4C,F
1DC0:  BRA    1D8A
....................             } 
....................          } 
1DC2:  INCF   x4B,F
1DC4:  BRA    1D5A
....................       } 
1DC6:  INCF   x4A,F
1DC8:  MOVF   x48,W
1DCA:  ADDWF  x44,F
1DCC:  BRA    1D52
....................    } 
1DCE:  INCF   x46,F
1DD0:  BTFSC  FD8.2
1DD2:  INCF   x47,F
1DD4:  INCF   x44,F
1DD6:  MOVLB  0
1DD8:  BRA    1C28
1DDA:  MOVLB  6
.................... } 
1DDC:  MOVLB  0
1DDE:  RETLW  00
....................  
.................... #endif 
....................  
.................... #include "imagen.h" 
.................... const int8 Bombillo [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9, 0x02, 0xF8, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x84, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x78, 0x40, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x48, 0x20, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x48, 0x10, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Tomai [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x08, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x03, 0x88, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x88, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x88, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x88, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x02, 0x88, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x03, 0x88, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x08, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xFC, 0x08, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x84, 0x08, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x84, 0x08, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xFC, 0x08, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x08, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFF, 0xF8, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... }; 
....................  
.................... const int8 Ventilador [64][16] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x71, 0xC0, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x93, 0xE0, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0xF0, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0xF0, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7D, 0x93, 0xE0, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x61, 0xC0, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00 
.................... }; 
....................  
....................  
.................... #define   UP               input(PIN_A0) 
.................... #define   DOWN             input(PIN_A1) 
.................... #define   RIGHT            input(PIN_A2) 
.................... #define   LEFT             input(PIN_A3) 
....................  
.................... #define   Display_on       output_bit(PIN_E0,1) 
.................... #define   Display_off      output_bit(PIN_E0,0) 
....................  
.................... const int8 Lenbuf = 32; 
.................... int8 txbuf[Lenbuf]; 
....................  
.................... int16 tiempos=0; 
.................... int8 i=0; 
.................... byte SlaveA0Tx[0X10]; 
.................... byte dato=0;            //Contendrá la información a enviar o recibir 
.................... byte direccion=0;       //Contendrá la dirección del esclavo en el bus I2C 
.................... byte posicion=0;        //Contendrá la posición en el buffer de memoria del esclavo donde se almacenará o de donde se recuperará el dato 
....................  
.................... short Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,Flanco4=0,Flanco5=0,Flanco6=0,imprimir=0,flag_uv=0,flag_blower=0,flag_toma=0,flag_luz=0,flag_alarma=0,w=0; 
.................... short tiempo_purga=0,tiempo_uv=0,tiempo_trabajo=0,tiempo_postpurga=0,Latencia=0,flag_latencia=0; 
.................... short guardauv=0,guardatrabajo=0,Lectura=0,n=0; 
.................... char  JP[] = "JP Inglobal", Cabina[] = "Cabina Extractora",tiempo_est[]="T est=", Dos_puntos[]=":"; 
.................... char  Clase[] = "Sin Ductos", Tiempo[] = "Tiempo de Purga", UV[]="UV"; 
.................... char  Baje_Vidrio[] = "!!Ubique Vidrio!!",Inflowt[] = "JPCEGH-F-A",Downflowt[] = "Inflow(m/s):", ZF[] = "Fabrica:203.0", ZA[] = "Actual:",AJ[]="Ajuste:"; 
.................... char  Vida_UV[] = "UVLife:",Vida_Filtro[] = "Filter:",ZFP[] = "Fabrica:235.0", Perdida[]="!Perdida Flujo!"; 
.................... int8 Menu=200, unidad=1, Opcion=1,inicie=0,negativo=10,MediaMovil=5,G_l=0,G_h=0,tiemporeset=0; 
.................... int8 q=0,r=0,l=0,h=0,Entero=0,Decimal1=0,LuzBlanca=10,LuzUV=10,Motor=10,Alarma=10,Toma=10,UV2=0; 
.................... unsigned int8 Inflow_l=0,Inflow_h=0,Downflow_h=0,Downflow_l=0,Vidrio_abajo=0,Vidrio_ok=0,Filtro_Inflow_l=0,Filtro_Inflow_h=0; 
.................... unsigned int8 Filtro_Downflow_l=0,Filtro_Downflow_h=0; 
....................  
.................... unsigned int16 Inflow_adc=0,Downflow_adc=0,Filtro_Inflow_adc=0,Filtro_Downflow_adc=0,Temporal1=0; 
....................  
.................... int16 t_latencia=0,minutos_uv=0,minutos_trabajo=0,G16=0; 
.................... signed int  Tpurga[4]={0,0,0,0};       // Tiempo de Purga transcurrido 
.................... signed int  Tpurgap[4]={9,0,0,0};      // Tiempo de Purga programado 
.................... signed int  Tppurga[4]={0,0,0,0};      // Tiempo de Post-Purga transcurrido 
.................... signed int  Tppurgap[4]={9,0,0,0};     // Tiempo de Post-Purga programado 
.................... signed int  Tuv[4]={0,0,0,0};          // Tiempo de UV transcurrido(en Horas) 
.................... signed int  Tempouv[4]={0,0,0,0};         // Tiempo de UV transcurrido 
.................... signed int  Tempouvp[4]={0,0,0,0};        // Tiempo de UV transcurrido 
.................... signed int  Ttrabajo[4]={0,0,0,0};        // Tiempo de trabajo transcurrido (en Horas) 
.................... signed int  Contrasena[4]={0,0,0,0};      // Contrasena de 4 digitos 
.................... signed int  Password[4]={0,0,0,0};        // Contrasena Almacenada de 4 digitos 
.................... float Inflow=0.0,Downflow=0.0,Filtro_Downflow=0.0,Diferencia=0.0,barra=0.0,barra_old=0.0,barra2=0.0,barra_old2=0.0,Inflowdec=0.0; 
.................... float Velocidad=0.0,x_uno=0.0,x_cuadrado=0.0,x_cubo=0.0,Ajuste1=0.0,Ajuste2=0.0; 
.................... float ADC=0,Temporal=0.0,Temporal2=0.0; 
.................... float a=0.0000001418633343546420,b=-0.00009476749001431169,c= 0.040182822903506,d= -5.354852229527197;//Sensor 2 Posible bueno 
.................... float promedio[8]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float PromPresion[8]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float Flujo2=0.0,zero_fabrica=203.0,zero_actual=0.0; 
.................... float V1=0.0,Presion=0.0,G=2.0,UVTime=0.0; 
....................  
.................... typedef struct{ 
....................    char Letra[20]; 
.................... }MENUU; 
....................  
.................... MENUU Menus; 
....................  
.................... void glcd_imagen(int8 x) 
.................... { 
....................    char i,j; 
....................    signed char k;  
....................       
....................    if(x==3){ 
*
29DE:  MOVLB  6
29E0:  MOVF   x2D,W
29E2:  SUBLW  03
29E4:  BNZ   2A88
....................    for( i = 0 ; i < 64 ; i ++ ) 
29E6:  CLRF   x2E
29E8:  MOVF   x2E,W
29EA:  SUBLW  3F
29EC:  BNC   2A88
....................    {  for( j = 0 ; j < 16 ; j ++) 
29EE:  CLRF   x2F
29F0:  MOVF   x2F,W
29F2:  SUBLW  0F
29F4:  BNC   2A84
....................       {  for(k=7;k>-1;k--) 
29F6:  MOVLW  07
29F8:  MOVWF  x30
29FA:  MOVF   x30,W
29FC:  XORLW  80
29FE:  SUBLW  7F
2A00:  BC    2A80
....................          {       
....................             if( bit_test(Bombillo[i][j] ,7-k ))  
2A02:  CLRF   x32
2A04:  MOVFF  62E,631
2A08:  CLRF   x34
2A0A:  MOVLW  10
2A0C:  MOVWF  x33
2A0E:  MOVLB  0
2A10:  RCALL  29BC
2A12:  MOVFF  02,632
2A16:  MOVFF  01,631
2A1A:  MOVLB  6
2A1C:  MOVF   x2F,W
2A1E:  ADDWF  01,W
2A20:  MOVWF  01
2A22:  MOVLW  00
2A24:  ADDWFC 02,W
2A26:  MOVWF  03
2A28:  MOVF   01,W
2A2A:  MOVFF  FF2,631
2A2E:  BCF    FF2.7
2A30:  MOVFF  03,FF7
2A34:  MOVLB  0
2A36:  CALL   02A6
2A3A:  MOVLB  6
2A3C:  BTFSC  x31.7
2A3E:  BSF    FF2.7
2A40:  MOVWF  x31
2A42:  MOVLW  07
2A44:  BSF    FD8.0
2A46:  SUBFWB x30,W
2A48:  MOVWF  x32
2A4A:  MOVFF  631,00
2A4E:  MOVF   x32,W
2A50:  MOVWF  01
2A52:  BZ    2A5C
2A54:  BCF    FD8.0
2A56:  RRCF   00,F
2A58:  DECFSZ 01,F
2A5A:  BRA    2A54
2A5C:  BTFSS  00.0
2A5E:  BRA    2A7C
....................                glcd_pixel( j*8+k,i, ON ); 
2A60:  MOVF   x2F,W
2A62:  MULLW  08
2A64:  MOVF   FF3,W
2A66:  ADDWF  x30,W
2A68:  MOVWF  x31
2A6A:  MOVWF  x5F
2A6C:  MOVFF  62E,660
2A70:  MOVLW  01
2A72:  MOVWF  x61
2A74:  MOVLB  0
2A76:  CALL   196C
2A7A:  MOVLB  6
....................          }   
2A7C:  DECF   x30,F
2A7E:  BRA    29FA
....................       } 
2A80:  INCF   x2F,F
2A82:  BRA    29F0
....................    } 
2A84:  INCF   x2E,F
2A86:  BRA    29E8
....................    } 
....................     
....................    if(x==4){ 
2A88:  MOVF   x2D,W
2A8A:  SUBLW  04
2A8C:  BNZ   2B30
....................    for( i = 0 ; i < 64 ; i ++ ) 
2A8E:  CLRF   x2E
2A90:  MOVF   x2E,W
2A92:  SUBLW  3F
2A94:  BNC   2B30
....................    {  for( j = 0 ; j < 16 ; j ++) 
2A96:  CLRF   x2F
2A98:  MOVF   x2F,W
2A9A:  SUBLW  0F
2A9C:  BNC   2B2C
....................       {  for(k=7;k>-1;k--) 
2A9E:  MOVLW  07
2AA0:  MOVWF  x30
2AA2:  MOVF   x30,W
2AA4:  XORLW  80
2AA6:  SUBLW  7F
2AA8:  BC    2B28
....................          {       
....................             if( bit_test(Tomai[i][j] ,7-k ))  
2AAA:  CLRF   x32
2AAC:  MOVFF  62E,631
2AB0:  CLRF   x34
2AB2:  MOVLW  10
2AB4:  MOVWF  x33
2AB6:  MOVLB  0
2AB8:  RCALL  29BC
2ABA:  MOVFF  02,632
2ABE:  MOVFF  01,631
2AC2:  MOVLB  6
2AC4:  MOVF   x2F,W
2AC6:  ADDWF  01,W
2AC8:  MOVWF  01
2ACA:  MOVLW  00
2ACC:  ADDWFC 02,W
2ACE:  MOVWF  03
2AD0:  MOVF   01,W
2AD2:  MOVFF  FF2,631
2AD6:  BCF    FF2.7
2AD8:  MOVFF  03,FF7
2ADC:  MOVLB  0
2ADE:  CALL   06BE
2AE2:  MOVLB  6
2AE4:  BTFSC  x31.7
2AE6:  BSF    FF2.7
2AE8:  MOVWF  x31
2AEA:  MOVLW  07
2AEC:  BSF    FD8.0
2AEE:  SUBFWB x30,W
2AF0:  MOVWF  x32
2AF2:  MOVFF  631,00
2AF6:  MOVF   x32,W
2AF8:  MOVWF  01
2AFA:  BZ    2B04
2AFC:  BCF    FD8.0
2AFE:  RRCF   00,F
2B00:  DECFSZ 01,F
2B02:  BRA    2AFC
2B04:  BTFSS  00.0
2B06:  BRA    2B24
....................                glcd_pixel( j*8+k,i, ON ); 
2B08:  MOVF   x2F,W
2B0A:  MULLW  08
2B0C:  MOVF   FF3,W
2B0E:  ADDWF  x30,W
2B10:  MOVWF  x31
2B12:  MOVWF  x5F
2B14:  MOVFF  62E,660
2B18:  MOVLW  01
2B1A:  MOVWF  x61
2B1C:  MOVLB  0
2B1E:  CALL   196C
2B22:  MOVLB  6
....................          }   
2B24:  DECF   x30,F
2B26:  BRA    2AA2
....................       } 
2B28:  INCF   x2F,F
2B2A:  BRA    2A98
....................    } 
2B2C:  INCF   x2E,F
2B2E:  BRA    2A90
....................    } 
....................     
....................    if(x==5){ 
2B30:  MOVF   x2D,W
2B32:  SUBLW  05
2B34:  BNZ   2BD8
....................    for( i = 0 ; i < 64 ; i ++ ) 
2B36:  CLRF   x2E
2B38:  MOVF   x2E,W
2B3A:  SUBLW  3F
2B3C:  BNC   2BD8
....................    {  for( j = 0 ; j < 16 ; j ++) 
2B3E:  CLRF   x2F
2B40:  MOVF   x2F,W
2B42:  SUBLW  0F
2B44:  BNC   2BD4
....................       {  for(k=7;k>-1;k--) 
2B46:  MOVLW  07
2B48:  MOVWF  x30
2B4A:  MOVF   x30,W
2B4C:  XORLW  80
2B4E:  SUBLW  7F
2B50:  BC    2BD0
....................          {       
....................             if( bit_test(Ventilador[i][j] ,7-k ))  
2B52:  CLRF   x32
2B54:  MOVFF  62E,631
2B58:  CLRF   x34
2B5A:  MOVLW  10
2B5C:  MOVWF  x33
2B5E:  MOVLB  0
2B60:  RCALL  29BC
2B62:  MOVFF  02,632
2B66:  MOVFF  01,631
2B6A:  MOVLB  6
2B6C:  MOVF   x2F,W
2B6E:  ADDWF  01,W
2B70:  MOVWF  01
2B72:  MOVLW  00
2B74:  ADDWFC 02,W
2B76:  MOVWF  03
2B78:  MOVF   01,W
2B7A:  MOVFF  FF2,631
2B7E:  BCF    FF2.7
2B80:  MOVFF  03,FF7
2B84:  MOVLB  0
2B86:  CALL   0AD6
2B8A:  MOVLB  6
2B8C:  BTFSC  x31.7
2B8E:  BSF    FF2.7
2B90:  MOVWF  x31
2B92:  MOVLW  07
2B94:  BSF    FD8.0
2B96:  SUBFWB x30,W
2B98:  MOVWF  x32
2B9A:  MOVFF  631,00
2B9E:  MOVF   x32,W
2BA0:  MOVWF  01
2BA2:  BZ    2BAC
2BA4:  BCF    FD8.0
2BA6:  RRCF   00,F
2BA8:  DECFSZ 01,F
2BAA:  BRA    2BA4
2BAC:  BTFSS  00.0
2BAE:  BRA    2BCC
....................                glcd_pixel( j*8+k,i, ON ); 
2BB0:  MOVF   x2F,W
2BB2:  MULLW  08
2BB4:  MOVF   FF3,W
2BB6:  ADDWF  x30,W
2BB8:  MOVWF  x31
2BBA:  MOVWF  x5F
2BBC:  MOVFF  62E,660
2BC0:  MOVLW  01
2BC2:  MOVWF  x61
2BC4:  MOVLB  0
2BC6:  CALL   196C
2BCA:  MOVLB  6
....................          }   
2BCC:  DECF   x30,F
2BCE:  BRA    2B4A
....................       } 
2BD0:  INCF   x2F,F
2BD2:  BRA    2B40
....................    } 
2BD4:  INCF   x2E,F
2BD6:  BRA    2B38
....................    } 
.................... } 
2BD8:  MOVLB  0
2BDA:  RETLW  00
....................  
.................... void mensajes(int8 x,y){// Funcion para imprimir mensajes de Menu Principal. 
....................   if(x==1) 
....................    {glcd_text57(7, y, tiempo_est, 1, ON);} 
.................... } 
....................   
.................... void displayContrasena(int digito, int x, int y, int sombreado) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
1F34:  MOVLW  06
1F36:  MOVLB  6
1F38:  MOVWF  x2C
1F3A:  MOVLW  33
1F3C:  MOVWF  x2B
1F3E:  MOVFF  62F,63C
1F42:  MOVLW  1F
1F44:  MOVWF  x3D
1F46:  MOVLB  0
1F48:  RCALL  1E56
....................     
....................    if(sombreado==1) 
1F4A:  MOVLB  6
1F4C:  DECFSZ x32,W
1F4E:  BRA    1F9E
....................       {glcd_rect(x, y, x+18, y+24, YES, ON);glcd_text57(x+2, y+1, voltage, 2, OFF);} 
1F50:  MOVLW  12
1F52:  ADDWF  x30,W
1F54:  MOVWF  x3C
1F56:  MOVLW  18
1F58:  ADDWF  x31,W
1F5A:  MOVWF  x3D
1F5C:  MOVFF  630,644
1F60:  MOVFF  631,645
1F64:  MOVFF  63C,646
1F68:  MOVWF  x47
1F6A:  MOVLW  01
1F6C:  MOVWF  x48
1F6E:  MOVWF  x49
1F70:  MOVLB  0
1F72:  RCALL  1B66
1F74:  MOVLW  02
1F76:  MOVLB  6
1F78:  ADDWF  x30,W
1F7A:  MOVWF  x3C
1F7C:  MOVLW  01
1F7E:  ADDWF  x31,W
1F80:  MOVWF  x3D
1F82:  MOVFF  63C,644
1F86:  MOVWF  x45
1F88:  MOVLW  06
1F8A:  MOVWF  x47
1F8C:  MOVLW  33
1F8E:  MOVWF  x46
1F90:  MOVLW  02
1F92:  MOVWF  x48
1F94:  CLRF   x49
1F96:  MOVLB  0
1F98:  RCALL  1C28
....................    else    
1F9A:  BRA    1FE8
1F9C:  MOVLB  6
....................       {glcd_rect(x, y, x+18, y+24, NO, OFF);glcd_text57(x+2, y+1, voltage, 2, ON);} 
1F9E:  MOVLW  12
1FA0:  ADDWF  x30,W
1FA2:  MOVWF  x3C
1FA4:  MOVLW  18
1FA6:  ADDWF  x31,W
1FA8:  MOVWF  x3D
1FAA:  MOVFF  630,644
1FAE:  MOVFF  631,645
1FB2:  MOVFF  63C,646
1FB6:  MOVWF  x47
1FB8:  CLRF   x48
1FBA:  CLRF   x49
1FBC:  MOVLB  0
1FBE:  RCALL  1B66
1FC0:  MOVLW  02
1FC2:  MOVLB  6
1FC4:  ADDWF  x30,W
1FC6:  MOVWF  x3C
1FC8:  MOVLW  01
1FCA:  ADDWF  x31,W
1FCC:  MOVWF  x3D
1FCE:  MOVFF  63C,644
1FD2:  MOVWF  x45
1FD4:  MOVLW  06
1FD6:  MOVWF  x47
1FD8:  MOVLW  33
1FDA:  MOVWF  x46
1FDC:  MOVLW  02
1FDE:  MOVWF  x48
1FE0:  MOVLW  01
1FE2:  MOVWF  x49
1FE4:  MOVLB  0
1FE6:  RCALL  1C28
....................  
.................... } 
1FE8:  RETLW  00
....................  
.................... void displayTiempo(int digito, int x, int y, int sombreado, int tamano) 
.................... { 
....................    char voltage[9]; 
....................    sprintf(voltage, "%i", digito); 
*
2110:  MOVLW  06
2112:  MOVLB  6
2114:  MOVWF  x2C
2116:  MOVLW  32
2118:  MOVWF  x2B
211A:  MOVFF  62D,63C
211E:  MOVLW  1F
2120:  MOVWF  x3D
2122:  MOVLB  0
2124:  RCALL  1E56
....................     
....................    if(sombreado==1) 
2126:  MOVLB  6
2128:  DECFSZ x30,W
212A:  BRA    2180
....................       {glcd_rect(x, y, x+(tamano*6), y+(tamano*8), YES, ON);glcd_text57(x+2, y+1, voltage, tamano, OFF);} 
212C:  MOVF   x31,W
212E:  MULLW  06
2130:  MOVF   FF3,W
2132:  ADDWF  x2E,W
2134:  MOVWF  x3B
2136:  MOVF   x31,W
2138:  MULLW  08
213A:  MOVF   FF3,W
213C:  ADDWF  x2F,W
213E:  MOVWF  x3C
2140:  MOVFF  62E,644
2144:  MOVFF  62F,645
2148:  MOVFF  63B,646
214C:  MOVWF  x47
214E:  MOVLW  01
2150:  MOVWF  x48
2152:  MOVWF  x49
2154:  MOVLB  0
2156:  RCALL  1B66
2158:  MOVLW  02
215A:  MOVLB  6
215C:  ADDWF  x2E,W
215E:  MOVWF  x3B
2160:  MOVLW  01
2162:  ADDWF  x2F,W
2164:  MOVWF  x3C
2166:  MOVFF  63B,644
216A:  MOVWF  x45
216C:  MOVLW  06
216E:  MOVWF  x47
2170:  MOVLW  32
2172:  MOVWF  x46
2174:  MOVFF  631,648
2178:  CLRF   x49
217A:  MOVLB  0
217C:  RCALL  1C28
217E:  MOVLB  6
....................    if(sombreado==0) 
2180:  MOVF   x30,F
2182:  BNZ   21DA
....................       {glcd_rect(x, y, x+(tamano*6), y+(tamano*8), YES, OFF);glcd_text57(x+2, y+1, voltage, tamano, ON);} 
2184:  MOVF   x31,W
2186:  MULLW  06
2188:  MOVF   FF3,W
218A:  ADDWF  x2E,W
218C:  MOVWF  x3B
218E:  MOVF   x31,W
2190:  MULLW  08
2192:  MOVF   FF3,W
2194:  ADDWF  x2F,W
2196:  MOVWF  x3C
2198:  MOVFF  62E,644
219C:  MOVFF  62F,645
21A0:  MOVFF  63B,646
21A4:  MOVWF  x47
21A6:  MOVLW  01
21A8:  MOVWF  x48
21AA:  CLRF   x49
21AC:  MOVLB  0
21AE:  RCALL  1B66
21B0:  MOVLW  02
21B2:  MOVLB  6
21B4:  ADDWF  x2E,W
21B6:  MOVWF  x3B
21B8:  MOVLW  01
21BA:  ADDWF  x2F,W
21BC:  MOVWF  x3C
21BE:  MOVFF  63B,644
21C2:  MOVWF  x45
21C4:  MOVLW  06
21C6:  MOVWF  x47
21C8:  MOVLW  32
21CA:  MOVWF  x46
21CC:  MOVFF  631,648
21D0:  MOVLW  01
21D2:  MOVWF  x49
21D4:  MOVLB  0
21D6:  RCALL  1C28
21D8:  MOVLB  6
....................  
.................... } 
21DA:  MOVLB  0
21DC:  RETLW  00
....................  
.................... void displayMenu(char palabra[100], int x, int y, int sombreado, int tamano) 
.................... { 
....................    strcpy(Menus.Letra,palabra); 
*
2044:  MOVLB  6
2046:  MOVFF  62D,01
204A:  MOVFF  62E,03
204E:  MOVFF  62D,633
2052:  MOVFF  62E,634
2056:  MOVLW  06
2058:  MOVWF  FEA
205A:  MOVLW  17
205C:  MOVWF  FE9
205E:  MOVFF  62E,FE2
2062:  MOVFF  62D,FE1
2066:  MOVF   FE7,F
2068:  MOVFF  FE6,FEE
206C:  BNZ   2066
....................    if(sombreado==1) 
206E:  DECFSZ x31,W
2070:  BRA    20BC
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, ON);glcd_text57(x+1, y+1, Menus.Letra, tamano, OFF);} 
2072:  MOVF   x32,W
2074:  MULLW  08
2076:  MOVF   FF3,W
2078:  ADDWF  x30,W
207A:  MOVWF  x33
207C:  CLRF   x44
207E:  MOVFF  630,645
2082:  MOVLW  7F
2084:  MOVWF  x46
2086:  MOVFF  633,647
208A:  MOVLW  01
208C:  MOVWF  x48
208E:  MOVWF  x49
2090:  MOVLB  0
2092:  RCALL  1B66
2094:  MOVLW  01
2096:  MOVLB  6
2098:  ADDWF  x2F,W
209A:  MOVWF  x33
209C:  MOVLW  01
209E:  ADDWF  x30,W
20A0:  MOVWF  x34
20A2:  MOVFF  633,644
20A6:  MOVWF  x45
20A8:  MOVLW  06
20AA:  MOVWF  x47
20AC:  MOVLW  17
20AE:  MOVWF  x46
20B0:  MOVFF  632,648
20B4:  CLRF   x49
20B6:  MOVLB  0
20B8:  RCALL  1C28
20BA:  MOVLB  6
....................    if(sombreado==0) 
20BC:  MOVF   x31,F
20BE:  BNZ   210C
....................       {glcd_rect(0, y, 127, y+(tamano*8), YES, OFF);glcd_text57(x+1, y+1, Menus.Letra, tamano, ON);} 
20C0:  MOVF   x32,W
20C2:  MULLW  08
20C4:  MOVF   FF3,W
20C6:  ADDWF  x30,W
20C8:  MOVWF  x33
20CA:  CLRF   x44
20CC:  MOVFF  630,645
20D0:  MOVLW  7F
20D2:  MOVWF  x46
20D4:  MOVFF  633,647
20D8:  MOVLW  01
20DA:  MOVWF  x48
20DC:  CLRF   x49
20DE:  MOVLB  0
20E0:  RCALL  1B66
20E2:  MOVLW  01
20E4:  MOVLB  6
20E6:  ADDWF  x2F,W
20E8:  MOVWF  x33
20EA:  MOVLW  01
20EC:  ADDWF  x30,W
20EE:  MOVWF  x34
20F0:  MOVFF  633,644
20F4:  MOVWF  x45
20F6:  MOVLW  06
20F8:  MOVWF  x47
20FA:  MOVLW  17
20FC:  MOVWF  x46
20FE:  MOVFF  632,648
2102:  MOVLW  01
2104:  MOVWF  x49
2106:  MOVLB  0
2108:  RCALL  1C28
210A:  MOVLB  6
....................  
.................... } 
210C:  MOVLB  0
210E:  RETLW  00
....................  
.................... void displayfloat(float adc,int x,int y,int sombreado, int tamano) { 
....................    char voltage[9];     
....................       sprintf(voltage, "%1.2f",adc); // Converts adc to text 
*
2E56:  MOVLW  06
2E58:  MOVLB  6
2E5A:  MOVWF  x2C
2E5C:  MOVLW  39
2E5E:  MOVWF  x2B
2E60:  MOVLW  89
2E62:  MOVWF  FE9
2E64:  MOVFF  634,645
2E68:  MOVFF  633,644
2E6C:  MOVFF  632,643
2E70:  MOVFF  631,642
2E74:  MOVLW  02
2E76:  MOVWF  x46
2E78:  MOVLB  0
2E7A:  BRA    2CA0
....................        
....................    if(sombreado==1) 
2E7C:  MOVLB  6
2E7E:  DECFSZ x37,W
2E80:  BRA    2EDA
....................       {glcd_rect(x, y, x+(tamano*48), y+(tamano*8), YES, ON);glcd_text57(x+2, y+1, voltage, tamano, OFF);} 
2E82:  MOVF   x38,W
2E84:  MULLW  30
2E86:  MOVF   FF3,W
2E88:  ADDWF  x35,W
2E8A:  MOVWF  x42
2E8C:  MOVF   x38,W
2E8E:  MULLW  08
2E90:  MOVF   FF3,W
2E92:  ADDWF  x36,W
2E94:  MOVWF  x43
2E96:  MOVFF  635,644
2E9A:  MOVFF  636,645
2E9E:  MOVFF  642,646
2EA2:  MOVWF  x47
2EA4:  MOVLW  01
2EA6:  MOVWF  x48
2EA8:  MOVWF  x49
2EAA:  MOVLB  0
2EAC:  CALL   1B66
2EB0:  MOVLW  02
2EB2:  MOVLB  6
2EB4:  ADDWF  x35,W
2EB6:  MOVWF  x42
2EB8:  MOVLW  01
2EBA:  ADDWF  x36,W
2EBC:  MOVWF  x43
2EBE:  MOVFF  642,644
2EC2:  MOVWF  x45
2EC4:  MOVLW  06
2EC6:  MOVWF  x47
2EC8:  MOVLW  39
2ECA:  MOVWF  x46
2ECC:  MOVFF  638,648
2ED0:  CLRF   x49
2ED2:  MOVLB  0
2ED4:  CALL   1C28
2ED8:  MOVLB  6
....................    if(sombreado==0) 
2EDA:  MOVF   x37,F
2EDC:  BNZ   2F38
....................       {glcd_rect(x, y, x+(tamano*48), y+(tamano*8), YES, OFF);glcd_text57(x+2, y+1, voltage, tamano, ON);} 
2EDE:  MOVF   x38,W
2EE0:  MULLW  30
2EE2:  MOVF   FF3,W
2EE4:  ADDWF  x35,W
2EE6:  MOVWF  x42
2EE8:  MOVF   x38,W
2EEA:  MULLW  08
2EEC:  MOVF   FF3,W
2EEE:  ADDWF  x36,W
2EF0:  MOVWF  x43
2EF2:  MOVFF  635,644
2EF6:  MOVFF  636,645
2EFA:  MOVFF  642,646
2EFE:  MOVWF  x47
2F00:  MOVLW  01
2F02:  MOVWF  x48
2F04:  CLRF   x49
2F06:  MOVLB  0
2F08:  CALL   1B66
2F0C:  MOVLW  02
2F0E:  MOVLB  6
2F10:  ADDWF  x35,W
2F12:  MOVWF  x42
2F14:  MOVLW  01
2F16:  ADDWF  x36,W
2F18:  MOVWF  x43
2F1A:  MOVFF  642,644
2F1E:  MOVWF  x45
2F20:  MOVLW  06
2F22:  MOVWF  x47
2F24:  MOVLW  39
2F26:  MOVWF  x46
2F28:  MOVFF  638,648
2F2C:  MOVLW  01
2F2E:  MOVWF  x49
2F30:  MOVLB  0
2F32:  CALL   1C28
2F36:  MOVLB  6
....................        
.................... } 
2F38:  MOVLB  0
2F3A:  RETLW  00
....................  
.................... Float Leer_Sensor_Flujo(int media) 
.................... { 
....................     if(negativo==10) 
*
2310:  MOVLB  5
2312:  MOVF   x0E,W
2314:  SUBLW  0A
2316:  BNZ   235E
....................     { 
....................       x_uno=Inflow_adc+Diferencia; 
2318:  MOVFF  52A,633
231C:  MOVFF  529,632
2320:  MOVLB  0
2322:  CALL   1172
2326:  BCF    FD8.1
2328:  MOVFF  03,639
232C:  MOVFF  02,638
2330:  MOVFF  01,637
2334:  MOVFF  00,636
2338:  MOVFF  572,63D
233C:  MOVFF  571,63C
2340:  MOVFF  570,63B
2344:  MOVFF  56F,63A
2348:  CALL   1306
234C:  MOVFF  03,58E
2350:  MOVFF  02,58D
2354:  MOVFF  01,58C
2358:  MOVFF  00,58B
235C:  MOVLB  5
....................     } 
....................     if(negativo==20) 
235E:  MOVF   x0E,W
2360:  SUBLW  14
2362:  BNZ   23A8
....................     { 
....................       x_uno=Inflow_adc-Diferencia; 
2364:  MOVFF  52A,633
2368:  MOVFF  529,632
236C:  MOVLB  0
236E:  CALL   1172
2372:  BSF    FD8.1
2374:  MOVFF  03,639
2378:  MOVFF  02,638
237C:  MOVFF  01,637
2380:  MOVFF  00,636
2384:  MOVFF  572,63D
2388:  MOVFF  571,63C
238C:  MOVFF  570,63B
2390:  MOVFF  56F,63A
2394:  CALL   1306
2398:  MOVFF  03,58E
239C:  MOVFF  02,58D
23A0:  MOVFF  01,58C
23A4:  MOVFF  00,58B
....................     } 
....................     x_cuadrado=x_uno*x_uno; 
23A8:  MOVFF  58E,652
23AC:  MOVFF  58D,651
23B0:  MOVFF  58C,650
23B4:  MOVFF  58B,64F
23B8:  MOVFF  58E,656
23BC:  MOVFF  58D,655
23C0:  MOVFF  58C,654
23C4:  MOVFF  58B,653
23C8:  MOVLB  0
23CA:  CALL   15BA
23CE:  MOVFF  03,592
23D2:  MOVFF  02,591
23D6:  MOVFF  01,590
23DA:  MOVFF  00,58F
....................     x_cubo=x_uno*x_cuadrado; 
23DE:  MOVFF  58E,652
23E2:  MOVFF  58D,651
23E6:  MOVFF  58C,650
23EA:  MOVFF  58B,64F
23EE:  MOVFF  592,656
23F2:  MOVFF  591,655
23F6:  MOVFF  590,654
23FA:  MOVFF  58F,653
23FE:  CALL   15BA
2402:  MOVFF  03,596
2406:  MOVFF  02,595
240A:  MOVFF  01,594
240E:  MOVFF  00,593
....................     Velocidad=(x_cubo*a)+(x_cuadrado*b)+(x_uno*c)+d;  
2412:  MOVFF  596,652
2416:  MOVFF  595,651
241A:  MOVFF  594,650
241E:  MOVFF  593,64F
2422:  MOVFF  5AE,656
2426:  MOVFF  5AD,655
242A:  MOVFF  5AC,654
242E:  MOVFF  5AB,653
2432:  CALL   15BA
2436:  MOVFF  00,62E
243A:  MOVFF  01,62F
243E:  MOVFF  02,630
2442:  MOVFF  03,631
2446:  MOVFF  592,652
244A:  MOVFF  591,651
244E:  MOVFF  590,650
2452:  MOVFF  58F,64F
2456:  MOVFF  5B2,656
245A:  MOVFF  5B1,655
245E:  MOVFF  5B0,654
2462:  MOVFF  5AF,653
2466:  CALL   15BA
246A:  BCF    FD8.1
246C:  MOVFF  631,639
2470:  MOVFF  630,638
2474:  MOVFF  62F,637
2478:  MOVFF  62E,636
247C:  MOVFF  03,63D
2480:  MOVFF  02,63C
2484:  MOVFF  01,63B
2488:  MOVFF  00,63A
248C:  CALL   1306
2490:  MOVFF  00,62E
2494:  MOVFF  01,62F
2498:  MOVFF  02,630
249C:  MOVFF  03,631
24A0:  MOVFF  58E,652
24A4:  MOVFF  58D,651
24A8:  MOVFF  58C,650
24AC:  MOVFF  58B,64F
24B0:  MOVFF  5B6,656
24B4:  MOVFF  5B5,655
24B8:  MOVFF  5B4,654
24BC:  MOVFF  5B3,653
24C0:  CALL   15BA
24C4:  BCF    FD8.1
24C6:  MOVFF  631,639
24CA:  MOVFF  630,638
24CE:  MOVFF  62F,637
24D2:  MOVFF  62E,636
24D6:  MOVFF  03,63D
24DA:  MOVFF  02,63C
24DE:  MOVFF  01,63B
24E2:  MOVFF  00,63A
24E6:  CALL   1306
24EA:  MOVFF  00,62E
24EE:  MOVFF  01,62F
24F2:  MOVFF  02,630
24F6:  MOVFF  03,631
24FA:  BCF    FD8.1
24FC:  MOVFF  03,639
2500:  MOVFF  02,638
2504:  MOVFF  01,637
2508:  MOVFF  00,636
250C:  MOVFF  5BA,63D
2510:  MOVFF  5B9,63C
2514:  MOVFF  5B8,63B
2518:  MOVFF  5B7,63A
251C:  CALL   1306
2520:  MOVFF  03,58A
2524:  MOVFF  02,589
2528:  MOVFF  01,588
252C:  MOVFF  00,587
....................     //Velocidad=Velocidad*correccion;//Ajuste de Temperatura 
....................     Velocidad=Velocidad-0.08; 
2530:  BSF    FD8.1
2532:  MOVFF  58A,639
2536:  MOVFF  589,638
253A:  MOVFF  588,637
253E:  MOVFF  587,636
2542:  MOVLW  0A
2544:  MOVLB  6
2546:  MOVWF  x3D
2548:  MOVLW  D7
254A:  MOVWF  x3C
254C:  MOVLW  23
254E:  MOVWF  x3B
2550:  MOVLW  7B
2552:  MOVWF  x3A
2554:  MOVLB  0
2556:  CALL   1306
255A:  MOVFF  03,58A
255E:  MOVFF  02,589
2562:  MOVFF  01,588
2566:  MOVFF  00,587
....................     if(Velocidad<0.0) 
256A:  MOVFF  58A,635
256E:  MOVFF  589,634
2572:  MOVFF  588,633
2576:  MOVFF  587,632
257A:  MOVLB  6
257C:  CLRF   x39
257E:  CLRF   x38
2580:  CLRF   x37
2582:  CLRF   x36
2584:  MOVLB  0
2586:  RCALL  2296
2588:  BNC   2594
....................      {Velocidad=0.0;} 
258A:  MOVLB  5
258C:  CLRF   x8A
258E:  CLRF   x89
2590:  CLRF   x88
2592:  CLRF   x87
....................       
....................      if(l>=media) 
2594:  MOVLB  6
2596:  MOVF   x2D,W
2598:  MOVLB  5
259A:  SUBWF  x15,W
259C:  BNC   25A0
....................        {l=0;} 
259E:  CLRF   x15
....................       
....................      promedio[l]=Velocidad;l++; 
25A0:  MOVF   x15,W
25A2:  MULLW  04
25A4:  MOVF   FF3,W
25A6:  CLRF   03
25A8:  ADDLW  BB
25AA:  MOVWF  FE9
25AC:  MOVLW  05
25AE:  ADDWFC 03,W
25B0:  MOVWF  FEA
25B2:  MOVFF  587,FEF
25B6:  MOVFF  588,FEC
25BA:  MOVFF  589,FEC
25BE:  MOVFF  58A,FEC
25C2:  INCF   x15,F
....................      Flujo2=0; 
25C4:  CLRF   xFE
25C6:  CLRF   xFD
25C8:  CLRF   xFC
25CA:  CLRF   xFB
....................         for(h=0;h<=(media-1);h++) 
25CC:  CLRF   x16
25CE:  MOVLW  01
25D0:  MOVLB  6
25D2:  SUBWF  x2D,W
25D4:  MOVLB  5
25D6:  SUBWF  x16,W
25D8:  BZ    25DC
25DA:  BC    264C
....................         { 
....................            Flujo2+=promedio[h]; 
25DC:  MOVF   x16,W
25DE:  MULLW  04
25E0:  MOVF   FF3,W
25E2:  CLRF   03
25E4:  ADDLW  BB
25E6:  MOVWF  FE9
25E8:  MOVLW  05
25EA:  ADDWFC 03,W
25EC:  MOVWF  FEA
25EE:  MOVFF  FEF,00
25F2:  MOVFF  FEC,01
25F6:  MOVFF  FEC,02
25FA:  MOVFF  FEC,03
25FE:  MOVFF  FEA,62F
2602:  MOVFF  FE9,62E
2606:  BCF    FD8.1
2608:  MOVFF  5FE,639
260C:  MOVFF  5FD,638
2610:  MOVFF  5FC,637
2614:  MOVFF  5FB,636
2618:  MOVFF  03,63D
261C:  MOVFF  02,63C
2620:  MOVFF  01,63B
2624:  MOVFF  00,63A
2628:  MOVLB  0
262A:  CALL   1306
262E:  MOVFF  62F,FEA
2632:  MOVFF  62E,FE9
2636:  MOVFF  03,5FE
263A:  MOVFF  02,5FD
263E:  MOVFF  01,5FC
2642:  MOVFF  00,5FB
....................         }  
2646:  MOVLB  5
2648:  INCF   x16,F
264A:  BRA    25CE
....................            Flujo2=(Flujo2/media)*Ajuste1;  
264C:  MOVLB  6
264E:  CLRF   x33
2650:  MOVFF  62D,632
2654:  MOVLB  0
2656:  CALL   1172
265A:  MOVFF  5FE,635
265E:  MOVFF  5FD,634
2662:  MOVFF  5FC,633
2666:  MOVFF  5FB,632
266A:  MOVFF  03,639
266E:  MOVFF  02,638
2672:  MOVFF  01,637
2676:  MOVFF  00,636
267A:  CALL   11A8
267E:  MOVFF  00,62E
2682:  MOVFF  01,62F
2686:  MOVFF  02,630
268A:  MOVFF  03,631
268E:  MOVFF  03,652
2692:  MOVFF  02,651
2696:  MOVFF  01,650
269A:  MOVFF  00,64F
269E:  MOVFF  59A,656
26A2:  MOVFF  599,655
26A6:  MOVFF  598,654
26AA:  MOVFF  597,653
26AE:  CALL   15BA
26B2:  MOVFF  03,5FE
26B6:  MOVFF  02,5FD
26BA:  MOVFF  01,5FC
26BE:  MOVFF  00,5FB
....................            return Flujo2; 
26C2:  MOVFF  5FB,00
26C6:  MOVFF  5FC,01
26CA:  MOVFF  5FD,02
26CE:  MOVFF  5FE,03
.................... } 
26D2:  GOTO   2994 (RETURN)
....................  
.................... float Leer_Sensor_Presion(int media){ 
26D6:  MOVLB  6
26D8:  CLRF   x31
26DA:  CLRF   x30
26DC:  CLRF   x2F
26DE:  CLRF   x2E
....................    float promediopresion=0.0; 
....................     
....................    V1=Filtro_Downflow_adc;  
26E0:  MOVFF  530,633
26E4:  MOVFF  52F,632
26E8:  MOVLB  0
26EA:  CALL   1172
26EE:  MOVFF  03,60A
26F2:  MOVFF  02,609
26F6:  MOVFF  01,608
26FA:  MOVFF  00,607
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
26FE:  MOVFF  60A,635
2702:  MOVFF  609,634
2706:  MOVFF  608,633
270A:  MOVFF  607,632
270E:  MOVFF  612,639
2712:  MOVFF  611,638
2716:  MOVFF  610,637
271A:  MOVFF  60F,636
271E:  CALL   11A8
2722:  MOVFF  00,632
2726:  MOVFF  01,633
272A:  MOVFF  02,634
272E:  MOVFF  03,635
2732:  BSF    FD8.1
2734:  MOVFF  03,639
2738:  MOVFF  02,638
273C:  MOVFF  01,637
2740:  MOVFF  00,636
2744:  MOVLB  6
2746:  CLRF   x3D
2748:  CLRF   x3C
274A:  CLRF   x3B
274C:  MOVLW  7F
274E:  MOVWF  x3A
2750:  MOVLB  0
2752:  CALL   1306
2756:  MOVFF  03,60E
275A:  MOVFF  02,60D
275E:  MOVFF  01,60C
2762:  MOVFF  00,60B
....................     
....................    if(Presion<0.0) 
2766:  MOVFF  60E,635
276A:  MOVFF  60D,634
276E:  MOVFF  60C,633
2772:  MOVFF  60B,632
2776:  MOVLB  6
2778:  CLRF   x39
277A:  CLRF   x38
277C:  CLRF   x37
277E:  CLRF   x36
2780:  MOVLB  0
2782:  RCALL  2296
2784:  BNC   2790
....................    { 
....................       Presion=0.0; 
2786:  MOVLB  6
2788:  CLRF   x0E
278A:  CLRF   x0D
278C:  CLRF   x0C
278E:  CLRF   x0B
....................    } 
....................  
....................    if(r>media-1) 
2790:  MOVLW  01
2792:  MOVLB  6
2794:  SUBWF  x2D,W
2796:  MOVLB  5
2798:  SUBWF  x14,W
279A:  BZ    27A0
279C:  BNC   27A0
....................    {r=0;} 
279E:  CLRF   x14
....................    PromPresion[r]=Presion*4.02;r++; 
27A0:  MOVF   x14,W
27A2:  MULLW  04
27A4:  MOVF   FF3,W
27A6:  CLRF   03
27A8:  ADDLW  DB
27AA:  MOVWF  FE9
27AC:  MOVLW  05
27AE:  ADDWFC 03,W
27B0:  MOVWF  FEA
27B2:  MOVFF  60E,652
27B6:  MOVFF  60D,651
27BA:  MOVFF  60C,650
27BE:  MOVFF  60B,64F
27C2:  MOVLW  D7
27C4:  MOVLB  6
27C6:  MOVWF  x56
27C8:  MOVLW  A3
27CA:  MOVWF  x55
27CC:  CLRF   x54
27CE:  MOVLW  81
27D0:  MOVWF  x53
27D2:  MOVLB  0
27D4:  CALL   15BA
27D8:  MOVFF  00,FEF
27DC:  MOVFF  01,FEC
27E0:  MOVFF  02,FEC
27E4:  MOVFF  03,FEC
27E8:  MOVLB  5
27EA:  INCF   x14,F
....................           
....................    for(q=0;q<=(media-1);q++) 
27EC:  CLRF   x13
27EE:  MOVLW  01
27F0:  MOVLB  6
27F2:  SUBWF  x2D,W
27F4:  MOVLB  5
27F6:  SUBWF  x13,W
27F8:  BZ    27FC
27FA:  BC    286C
....................    { 
....................       promediopresion+=PromPresion[q]; 
27FC:  MOVF   x13,W
27FE:  MULLW  04
2800:  MOVF   FF3,W
2802:  CLRF   03
2804:  ADDLW  DB
2806:  MOVWF  FE9
2808:  MOVLW  05
280A:  ADDWFC 03,W
280C:  MOVWF  FEA
280E:  MOVFF  FEF,00
2812:  MOVFF  FEC,01
2816:  MOVFF  FEC,02
281A:  MOVFF  FEC,03
281E:  MOVFF  FEA,633
2822:  MOVFF  FE9,632
2826:  BCF    FD8.1
2828:  MOVFF  631,639
282C:  MOVFF  630,638
2830:  MOVFF  62F,637
2834:  MOVFF  62E,636
2838:  MOVFF  03,63D
283C:  MOVFF  02,63C
2840:  MOVFF  01,63B
2844:  MOVFF  00,63A
2848:  MOVLB  0
284A:  CALL   1306
284E:  MOVFF  633,FEA
2852:  MOVFF  632,FE9
2856:  MOVFF  03,631
285A:  MOVFF  02,630
285E:  MOVFF  01,62F
2862:  MOVFF  00,62E
....................    }  
2866:  MOVLB  5
2868:  INCF   x13,F
286A:  BRA    27EE
....................    promediopresion=promediopresion/media;    
286C:  MOVLB  6
286E:  CLRF   x33
2870:  MOVFF  62D,632
2874:  MOVLB  0
2876:  CALL   1172
287A:  MOVFF  631,635
287E:  MOVFF  630,634
2882:  MOVFF  62F,633
2886:  MOVFF  62E,632
288A:  MOVFF  03,639
288E:  MOVFF  02,638
2892:  MOVFF  01,637
2896:  MOVFF  00,636
289A:  CALL   11A8
289E:  MOVFF  03,631
28A2:  MOVFF  02,630
28A6:  MOVFF  01,62F
28AA:  MOVFF  00,62E
....................     
....................    return promediopresion; 
28AE:  MOVFF  62E,00
28B2:  MOVFF  62F,01
28B6:  MOVFF  630,02
28BA:  MOVFF  631,03
.................... } 
28BE:  GOTO   29AA (RETURN)
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536); 
*
108A:  MOVLW  15
108C:  MOVWF  FCF
108E:  MOVLW  A0
1090:  MOVWF  FCE
....................    tiempos++; 
1092:  MOVLB  4
1094:  INCF   x36,F
1096:  BTFSC  FD8.2
1098:  INCF   x37,F
....................     
....................    if(flag_latencia==1) 
109A:  BTFSS  x4E.3
109C:  BRA    10A6
....................    { 
....................       t_latencia++;          
109E:  MOVLB  5
10A0:  INCF   x33,F
10A2:  BTFSC  FD8.2
10A4:  INCF   x34,F
....................    } 
....................     
....................    if(t_latencia>=3000) 
10A6:  MOVLB  5
10A8:  MOVF   x34,W
10AA:  SUBLW  0A
10AC:  BC    10BC
10AE:  XORLW  FF
10B0:  BNZ   10B8
10B2:  MOVF   x33,W
10B4:  SUBLW  B7
10B6:  BC    10BC
....................    {Latencia=1;} 
10B8:  MOVLB  4
10BA:  BSF    x4E.2
....................                  
....................    if(tiempos>=200) 
10BC:  MOVLB  4
10BE:  MOVF   x37,F
10C0:  BNZ   10C8
10C2:  MOVF   x36,W
10C4:  SUBLW  C7
10C6:  BC    116A
....................    { 
....................       tiempos=0;imprimir=1;inicie++;Lectura=1;tiemporeset++; 
10C8:  CLRF   x37
10CA:  CLRF   x36
10CC:  BSF    x4C.7
10CE:  MOVLB  5
10D0:  INCF   x0D,F
10D2:  MOVLB  4
10D4:  BSF    x4E.6
10D6:  MOVLB  5
10D8:  INCF   x12,F
....................     
....................    if(tiempo_postpurga) 
10DA:  MOVLB  4
10DC:  BTFSS  x4E.1
10DE:  BRA    111C
....................    { 
....................       Tppurga[0]++; 
10E0:  MOVLB  5
10E2:  INCF   x43,F
....................       if(Tppurga[0]>9) 
10E4:  BTFSC  x43.7
10E6:  BRA    10F2
10E8:  MOVF   x43,W
10EA:  SUBLW  09
10EC:  BC    10F2
....................       { 
....................          Tppurga[0]=0; 
10EE:  CLRF   x43
....................          Tppurga[1]++; 
10F0:  INCF   x44,F
....................       } 
....................       if(Tppurga[1]>5) 
10F2:  BTFSC  x44.7
10F4:  BRA    1100
10F6:  MOVF   x44,W
10F8:  SUBLW  05
10FA:  BC    1100
....................       {   
....................          Tppurga[1]=0; 
10FC:  CLRF   x44
....................          Tppurga[2]++; 
10FE:  INCF   x45,F
....................       } 
....................       if(Tppurga[2]>9) 
1100:  BTFSC  x45.7
1102:  BRA    110E
1104:  MOVF   x45,W
1106:  SUBLW  09
1108:  BC    110E
....................       { 
....................          Tppurga[2]=0; 
110A:  CLRF   x45
....................          Tppurga[3]++; 
110C:  INCF   x46,F
....................       } 
....................       if(Tppurga[3]>5) 
110E:  BTFSC  x46.7
1110:  BRA    111A
1112:  MOVF   x46,W
1114:  SUBLW  05
1116:  BC    111A
....................       { 
....................          Tppurga[3]=0; 
1118:  CLRF   x46
111A:  MOVLB  4
....................       } 
....................    } 
....................     
....................    if(flag_blower==1) 
111C:  BTFSS  x4D.1
111E:  BRA    112A
....................    { 
....................       minutos_trabajo++;  
1120:  MOVLB  5
1122:  INCF   x37,F
1124:  BTFSC  FD8.2
1126:  INCF   x38,F
1128:  MOVLB  4
....................    } 
....................    
....................    if(tiempo_purga==1) 
112A:  BTFSS  x4D.6
112C:  BRA    116A
....................    {                   
....................       Tpurga[0]++; 
112E:  MOVLB  5
1130:  INCF   x3B,F
....................       if(Tpurga[0]>9) 
1132:  BTFSC  x3B.7
1134:  BRA    1140
1136:  MOVF   x3B,W
1138:  SUBLW  09
113A:  BC    1140
....................       { 
....................          Tpurga[0]=0; 
113C:  CLRF   x3B
....................          Tpurga[1]++; 
113E:  INCF   x3C,F
....................       } 
....................       if(Tpurga[1]>5) 
1140:  BTFSC  x3C.7
1142:  BRA    114E
1144:  MOVF   x3C,W
1146:  SUBLW  05
1148:  BC    114E
....................       { 
....................          Tpurga[1]=0; 
114A:  CLRF   x3C
....................          Tpurga[2]++; 
114C:  INCF   x3D,F
....................       } 
....................       if(Tpurga[2]>9) 
114E:  BTFSC  x3D.7
1150:  BRA    115C
1152:  MOVF   x3D,W
1154:  SUBLW  09
1156:  BC    115C
....................       { 
....................          Tpurga[2]=0; 
1158:  CLRF   x3D
....................          Tpurga[3]++; 
115A:  INCF   x3E,F
....................       } 
....................       if(Tpurga[3]>5) 
115C:  BTFSC  x3E.7
115E:  BRA    1168
1160:  MOVF   x3E,W
1162:  SUBLW  05
1164:  BC    1168
....................       { 
....................          Tpurga[3]=0; 
1166:  CLRF   x3E
1168:  MOVLB  4
....................       } 
....................    }        
....................          
....................    } 
.................... } 
....................  
116A:  BCF    F9E.0
116C:  MOVLB  0
116E:  GOTO   0054
.................... void Envio_I2C(direccion, posicion, dato){ 
....................  
....................    i2c_start();            // Comienzo comunicación 
*
17DE:  BSF    F93.0
17E0:  MOVLW  02
17E2:  MOVWF  00
17E4:  DECFSZ 00,F
17E6:  BRA    17E4
17E8:  BSF    F93.1
17EA:  MOVLW  02
17EC:  MOVWF  00
17EE:  DECFSZ 00,F
17F0:  BRA    17EE
17F2:  BCF    F8A.0
17F4:  BCF    F93.0
17F6:  MOVLW  02
17F8:  MOVWF  00
17FA:  DECFSZ 00,F
17FC:  BRA    17FA
17FE:  BCF    F8A.1
1800:  BCF    F93.1
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
1802:  MOVFF  62E,631
1806:  RCALL  1768
....................    i2c_write(posicion);    // Posición donde se guardara el dato transmitido 
1808:  MOVFF  62F,631
180C:  RCALL  1768
....................    i2c_write(dato);        // Dato a transmitir 
180E:  MOVFF  630,631
1812:  RCALL  1768
....................    i2c_stop();             // Fin comunicación 
1814:  BCF    F93.0
1816:  NOP   
1818:  BSF    F93.1
181A:  BTFSS  F81.1
181C:  BRA    181A
181E:  MOVLW  02
1820:  MOVWF  00
1822:  DECFSZ 00,F
1824:  BRA    1822
1826:  BRA    1828
1828:  NOP   
182A:  BSF    F93.0
182C:  MOVLW  02
182E:  MOVWF  00
1830:  DECFSZ 00,F
1832:  BRA    1830
....................  } 
1834:  GOTO   186A (RETURN)
....................  
.................... void Lectura_I2C (byte direccion, byte posicion, byte &dato) { 
....................  
....................    i2c_start();            // Comienzo de la comunicación 
*
28DC:  BSF    F93.0
28DE:  MOVLW  02
28E0:  MOVWF  00
28E2:  DECFSZ 00,F
28E4:  BRA    28E2
28E6:  BSF    F93.1
28E8:  MOVLW  02
28EA:  MOVWF  00
28EC:  DECFSZ 00,F
28EE:  BRA    28EC
28F0:  BCF    F8A.0
28F2:  BCF    F93.0
28F4:  MOVLW  02
28F6:  MOVWF  00
28F8:  DECFSZ 00,F
28FA:  BRA    28F8
28FC:  BCF    F8A.1
28FE:  BCF    F93.1
....................    i2c_write(direccion);   // Dirección del esclavo en el bus I2C 
2900:  MOVFF  62D,631
2904:  MOVLB  0
2906:  CALL   1768
....................    i2c_write(posicion);    // Posición de donde se leerá el dato en el esclavo 
290A:  MOVFF  62E,631
290E:  CALL   1768
....................    i2c_start();            // Reinicio 
2912:  BSF    F93.0
2914:  MOVLW  02
2916:  MOVWF  00
2918:  DECFSZ 00,F
291A:  BRA    2918
291C:  BSF    F93.1
291E:  MOVLW  02
2920:  MOVWF  00
2922:  DECFSZ 00,F
2924:  BRA    2922
2926:  BTFSS  F81.1
2928:  BRA    2926
292A:  BCF    F8A.0
292C:  BCF    F93.0
292E:  MOVLW  02
2930:  MOVWF  00
2932:  DECFSZ 00,F
2934:  BRA    2932
2936:  BCF    F8A.1
2938:  BCF    F93.1
....................    i2c_write(direccion+1); // Dirección del esclavo en modo lectura 
293A:  MOVLW  01
293C:  MOVLB  6
293E:  ADDWF  x2D,W
2940:  MOVWF  x2F
2942:  MOVWF  x31
2944:  MOVLB  0
2946:  CALL   1768
....................    dato=i2c_read(0);       // Lectura del dato 
294A:  CLRF   00
294C:  BRA    21DE
294E:  MOVFF  01,449
....................    i2c_stop();             // Fin comunicación 
2952:  BCF    F93.0
2954:  NOP   
2956:  BSF    F93.1
2958:  BTFSS  F81.1
295A:  BRA    2958
295C:  MOVLW  02
295E:  MOVWF  00
2960:  DECFSZ 00,F
2962:  BRA    2960
2964:  BRA    2966
2966:  NOP   
2968:  BSF    F93.0
296A:  MOVLW  02
296C:  MOVWF  00
296E:  DECFSZ 00,F
2970:  BRA    296E
.................... } 
....................  
.................... void Lee_Vector(void){ 
....................    Inflow_l=txbuf[0]; 
*
224A:  MOVFF  416,51F
....................    Inflow_h=txbuf[1]; 
224E:  MOVFF  417,520
....................    Downflow_l=txbuf[2]; 
2252:  MOVFF  418,522
....................    Downflow_h=txbuf[3]; 
2256:  MOVFF  419,521
....................    Vidrio_abajo=txbuf[4]; 
225A:  MOVFF  41A,523
....................    Vidrio_ok=txbuf[5]; 
225E:  MOVFF  41B,524
....................    Filtro_Inflow_l=txbuf[8]; 
2262:  MOVFF  41E,525
....................    Filtro_Inflow_h=txbuf[9]; 
2266:  MOVFF  41F,526
....................    Filtro_Downflow_l=txbuf[6]; 
226A:  MOVFF  41C,527
....................    Filtro_Downflow_h=txbuf[7]; 
226E:  MOVFF  41D,528
....................     
....................    Inflow_adc=make16(Inflow_h,Inflow_l); 
2272:  MOVFF  520,52A
2276:  MOVFF  51F,529
....................    Downflow_adc=make16(Downflow_h,Downflow_l); 
227A:  MOVFF  521,52C
227E:  MOVFF  522,52B
....................     
....................    Filtro_Inflow_adc=make16(Filtro_Inflow_h,Filtro_Inflow_l); 
2282:  MOVFF  526,52E
2286:  MOVFF  525,52D
....................    Filtro_Downflow_adc=make16(Filtro_Downflow_h,Filtro_Downflow_l); 
228A:  MOVFF  528,530
228E:  MOVFF  527,52F
.................... } 
2292:  GOTO   298E (RETURN)
....................  
.................... void Carga_Vector(void){ 
....................    SlaveA0Tx[0]=LuzBlanca; 
*
16B0:  MOVFF  519,439
....................    SlaveA0Tx[1]=LuzUV; 
16B4:  MOVFF  51A,43A
....................    SlaveA0Tx[2]=Motor; 
16B8:  MOVFF  51B,43B
....................    SlaveA0Tx[3]=Toma; 
16BC:  MOVFF  51D,43C
....................    SlaveA0Tx[4]=Alarma; 
16C0:  MOVFF  51C,43D
....................    SlaveA0Tx[5]=(int8)Inflow; 
16C4:  MOVFF  566,630
16C8:  MOVFF  565,62F
16CC:  MOVFF  564,62E
16D0:  MOVFF  563,62D
16D4:  RCALL  157E
16D6:  MOVFF  01,43E
....................    Inflowdec=100*(Inflow-(int8)Inflow); 
16DA:  MOVFF  566,630
16DE:  MOVFF  565,62F
16E2:  MOVFF  564,62E
16E6:  MOVFF  563,62D
16EA:  RCALL  157E
16EC:  MOVLB  6
16EE:  CLRF   x33
16F0:  MOVFF  01,632
16F4:  MOVLB  0
16F6:  RCALL  1172
16F8:  BSF    FD8.1
16FA:  MOVFF  566,639
16FE:  MOVFF  565,638
1702:  MOVFF  564,637
1706:  MOVFF  563,636
170A:  MOVFF  03,63D
170E:  MOVFF  02,63C
1712:  MOVFF  01,63B
1716:  MOVFF  00,63A
171A:  RCALL  1306
171C:  MOVLB  6
171E:  CLRF   x52
1720:  CLRF   x51
1722:  MOVLW  48
1724:  MOVWF  x50
1726:  MOVLW  85
1728:  MOVWF  x4F
172A:  MOVFF  03,656
172E:  MOVFF  02,655
1732:  MOVFF  01,654
1736:  MOVFF  00,653
173A:  MOVLB  0
173C:  RCALL  15BA
173E:  MOVFF  03,586
1742:  MOVFF  02,585
1746:  MOVFF  01,584
174A:  MOVFF  00,583
....................    SlaveA0Tx[6]=(int8)Inflowdec; 
174E:  MOVFF  586,630
1752:  MOVFF  585,62F
1756:  MOVFF  584,62E
175A:  MOVFF  583,62D
175E:  RCALL  157E
1760:  MOVFF  01,43F
.................... } 
1764:  GOTO   183A (RETURN)
....................  
.................... void Envio_Esclavos(void){ 
....................    Carga_Vector(); 
*
1838:  BRA    16B0
....................    for(i=0;i<7;i++) 
183A:  MOVLB  4
183C:  CLRF   x38
183E:  MOVF   x38,W
1840:  SUBLW  06
1842:  BNC   1870
....................    { 
....................       direccion=0xA0; 
1844:  MOVLW  A0
1846:  MOVWF  x4A
....................       Envio_I2C(direccion,i,SlaveA0Tx[i]); 
1848:  CLRF   03
184A:  MOVF   x38,W
184C:  ADDLW  39
184E:  MOVWF  FE9
1850:  MOVLW  04
1852:  ADDWFC 03,W
1854:  MOVWF  FEA
1856:  MOVFF  FEF,62D
185A:  MOVFF  44A,62E
185E:  MOVFF  438,62F
1862:  MOVFF  62D,630
1866:  MOVLB  0
1868:  BRA    17DE
....................    }  
186A:  MOVLB  4
186C:  INCF   x38,F
186E:  BRA    183E
.................... } 
1870:  MOVLB  0
1872:  RETLW  00
.................... void Lectura_Esclavos(void){ 
....................    // Lectura 
....................    for(i=0;i<10;i++) 
*
28C2:  MOVLB  4
28C4:  CLRF   x38
28C6:  MOVF   x38,W
28C8:  SUBLW  09
28CA:  BNC   298A
....................    { 
....................       direccion=0xA0;                        //Dirección en el bus I2c 
28CC:  MOVLW  A0
28CE:  MOVWF  x4A
....................       posicion=i;                         //Posición de memoria a leer 
28D0:  MOVFF  438,44B
....................       Lectura_I2C(direccion, posicion, dato);    //Lectura por I2C 
28D4:  MOVFF  44A,62D
28D8:  MOVFF  44B,62E
....................       txbuf[i]=(int8)dato; 
*
2972:  CLRF   03
2974:  MOVLB  4
2976:  MOVF   x38,W
2978:  ADDLW  16
297A:  MOVWF  FE9
297C:  MOVLW  04
297E:  ADDWFC 03,W
2980:  MOVWF  FEA
2982:  MOVFF  449,FEF
....................       //Muestra en el lcd las variables de la transmisión 
....................       //lcd_gotoxy(1,1); 
....................       //printf(lcd_putc, "\fI2C=%x Pos.%d =%x" direccion, posicion, dato); 
....................       //delay_ms (1000);  
....................    } 
2986:  INCF   x38,F
2988:  BRA    28C6
....................    Lee_Vector(); 
298A:  MOVLB  0
298C:  BRA    224A
....................    Inflow=Leer_Sensor_Flujo(MediaMovil); 
298E:  MOVFF  50F,62D
2992:  BRA    2310
2994:  MOVFF  03,566
2998:  MOVFF  02,565
299C:  MOVFF  01,564
29A0:  MOVFF  00,563
....................    Filtro_Downflow=Leer_Sensor_Presion(MediaMovil); 
29A4:  MOVFF  50F,62D
29A8:  BRA    26D6
29AA:  MOVFF  03,56E
29AE:  MOVFF  02,56D
29B2:  MOVFF  01,56C
29B6:  MOVFF  00,56B
.................... } 
29BA:  RETLW  00
....................  
.................... void main(){ 
*
2FFC:  CLRF   FF8
2FFE:  BCF    FD0.7
3000:  BSF    07.7
3002:  CLRF   FEA
3004:  CLRF   FE9
3006:  MOVLB  4
3008:  CLRF   x37
300A:  CLRF   x36
300C:  CLRF   x38
300E:  CLRF   x49
3010:  CLRF   x4A
3012:  CLRF   x4B
3014:  BCF    x4C.0
3016:  BCF    x4C.1
3018:  BCF    x4C.2
301A:  BCF    x4C.3
301C:  BCF    x4C.4
301E:  BCF    x4C.5
3020:  BCF    x4C.6
3022:  BCF    x4C.7
3024:  BCF    x4D.0
3026:  BCF    x4D.1
3028:  BCF    x4D.2
302A:  BCF    x4D.3
302C:  BCF    x4D.4
302E:  BCF    x4D.5
3030:  BCF    x4D.6
3032:  BCF    x4D.7
3034:  BCF    x4E.0
3036:  BCF    x4E.1
3038:  BCF    x4E.2
303A:  BCF    x4E.3
303C:  BCF    x4E.4
303E:  BCF    x4E.5
3040:  BCF    x4E.6
3042:  BCF    x4E.7
3044:  MOVLW  C8
3046:  MOVLB  5
3048:  MOVWF  x0A
304A:  MOVLW  01
304C:  MOVWF  x0B
304E:  MOVWF  x0C
3050:  CLRF   x0D
3052:  MOVLW  0A
3054:  MOVWF  x0E
3056:  MOVLW  05
3058:  MOVWF  x0F
305A:  CLRF   x10
305C:  CLRF   x11
305E:  CLRF   x12
3060:  CLRF   x13
3062:  CLRF   x14
3064:  CLRF   x15
3066:  CLRF   x16
3068:  CLRF   x17
306A:  CLRF   x18
306C:  MOVLW  0A
306E:  MOVWF  x19
3070:  MOVWF  x1A
3072:  MOVWF  x1B
3074:  MOVWF  x1C
3076:  MOVWF  x1D
3078:  CLRF   x1E
307A:  CLRF   x1F
307C:  CLRF   x20
307E:  CLRF   x21
3080:  CLRF   x22
3082:  CLRF   x23
3084:  CLRF   x24
3086:  CLRF   x25
3088:  CLRF   x26
308A:  CLRF   x27
308C:  CLRF   x28
308E:  CLRF   x2A
3090:  CLRF   x29
3092:  CLRF   x2C
3094:  CLRF   x2B
3096:  CLRF   x2E
3098:  CLRF   x2D
309A:  CLRF   x30
309C:  CLRF   x2F
309E:  CLRF   x32
30A0:  CLRF   x31
30A2:  CLRF   x34
30A4:  CLRF   x33
30A6:  CLRF   x36
30A8:  CLRF   x35
30AA:  CLRF   x38
30AC:  CLRF   x37
30AE:  CLRF   x3A
30B0:  CLRF   x39
30B2:  CLRF   x66
30B4:  CLRF   x65
30B6:  CLRF   x64
30B8:  CLRF   x63
30BA:  CLRF   x6A
30BC:  CLRF   x69
30BE:  CLRF   x68
30C0:  CLRF   x67
30C2:  CLRF   x6E
30C4:  CLRF   x6D
30C6:  CLRF   x6C
30C8:  CLRF   x6B
30CA:  CLRF   x72
30CC:  CLRF   x71
30CE:  CLRF   x70
30D0:  CLRF   x6F
30D2:  CLRF   x76
30D4:  CLRF   x75
30D6:  CLRF   x74
30D8:  CLRF   x73
30DA:  CLRF   x7A
30DC:  CLRF   x79
30DE:  CLRF   x78
30E0:  CLRF   x77
30E2:  CLRF   x7E
30E4:  CLRF   x7D
30E6:  CLRF   x7C
30E8:  CLRF   x7B
30EA:  CLRF   x82
30EC:  CLRF   x81
30EE:  CLRF   x80
30F0:  CLRF   x7F
30F2:  CLRF   x86
30F4:  CLRF   x85
30F6:  CLRF   x84
30F8:  CLRF   x83
30FA:  CLRF   x8A
30FC:  CLRF   x89
30FE:  CLRF   x88
3100:  CLRF   x87
3102:  CLRF   x8E
3104:  CLRF   x8D
3106:  CLRF   x8C
3108:  CLRF   x8B
310A:  CLRF   x92
310C:  CLRF   x91
310E:  CLRF   x90
3110:  CLRF   x8F
3112:  CLRF   x96
3114:  CLRF   x95
3116:  CLRF   x94
3118:  CLRF   x93
311A:  CLRF   x9A
311C:  CLRF   x99
311E:  CLRF   x98
3120:  CLRF   x97
3122:  CLRF   x9E
3124:  CLRF   x9D
3126:  CLRF   x9C
3128:  CLRF   x9B
312A:  CLRF   xA2
312C:  CLRF   xA1
312E:  CLRF   xA0
3130:  CLRF   x9F
3132:  CLRF   xA6
3134:  CLRF   xA5
3136:  CLRF   xA4
3138:  CLRF   xA3
313A:  CLRF   xAA
313C:  CLRF   xA9
313E:  CLRF   xA8
3140:  CLRF   xA7
3142:  MOVLW  19
3144:  MOVWF  xAE
3146:  MOVLW  53
3148:  MOVWF  xAD
314A:  MOVLW  18
314C:  MOVWF  xAC
314E:  MOVLW  68
3150:  MOVWF  xAB
3152:  MOVLW  E9
3154:  MOVWF  xB2
3156:  MOVLW  BD
3158:  MOVWF  xB1
315A:  MOVLW  C6
315C:  MOVWF  xB0
315E:  MOVLW  71
3160:  MOVWF  xAF
3162:  MOVLW  BE
3164:  MOVWF  xB6
3166:  MOVLW  96
3168:  MOVWF  xB5
316A:  MOVLW  24
316C:  MOVWF  xB4
316E:  MOVLW  7A
3170:  MOVWF  xB3
3172:  MOVLW  F3
3174:  MOVWF  xBA
3176:  MOVLW  5A
3178:  MOVWF  xB9
317A:  MOVLW  AB
317C:  MOVWF  xB8
317E:  MOVLW  81
3180:  MOVWF  xB7
3182:  CLRF   xFE
3184:  CLRF   xFD
3186:  CLRF   xFC
3188:  CLRF   xFB
318A:  MOVLB  6
318C:  CLRF   x02
318E:  CLRF   x01
3190:  MOVLW  4B
3192:  MOVWF  x00
3194:  MOVLW  86
3196:  MOVLB  5
3198:  MOVWF  xFF
319A:  MOVLB  6
319C:  CLRF   x06
319E:  CLRF   x05
31A0:  CLRF   x04
31A2:  CLRF   x03
31A4:  CLRF   x0A
31A6:  CLRF   x09
31A8:  CLRF   x08
31AA:  CLRF   x07
31AC:  CLRF   x0E
31AE:  CLRF   x0D
31B0:  CLRF   x0C
31B2:  CLRF   x0B
31B4:  CLRF   x12
31B6:  CLRF   x11
31B8:  CLRF   x10
31BA:  MOVLW  80
31BC:  MOVWF  x0F
31BE:  CLRF   x16
31C0:  CLRF   x15
31C2:  CLRF   x14
31C4:  CLRF   x13
31C6:  MOVF   FC1,W
31C8:  ANDLW  C0
31CA:  IORLW  0F
31CC:  MOVWF  FC1
31CE:  MOVLW  07
31D0:  MOVWF  FB4
31D2:  MOVLW  4A
31D4:  MOVLB  4
31D6:  MOVWF  x4F
31D8:  MOVLW  50
31DA:  MOVWF  x50
31DC:  MOVLW  20
31DE:  MOVWF  x51
31E0:  MOVLW  49
31E2:  MOVWF  x52
31E4:  MOVLW  6E
31E6:  MOVWF  x53
31E8:  MOVLW  67
31EA:  MOVWF  x54
31EC:  MOVLW  6C
31EE:  MOVWF  x55
31F0:  MOVLW  6F
31F2:  MOVWF  x56
31F4:  MOVLW  62
31F6:  MOVWF  x57
31F8:  MOVLW  61
31FA:  MOVWF  x58
31FC:  MOVLW  6C
31FE:  MOVWF  x59
3200:  CLRF   x5A
3202:  MOVLW  43
3204:  MOVWF  x5B
3206:  MOVLW  61
3208:  MOVWF  x5C
320A:  MOVLW  62
320C:  MOVWF  x5D
320E:  MOVLW  69
3210:  MOVWF  x5E
3212:  MOVLW  6E
3214:  MOVWF  x5F
3216:  MOVLW  61
3218:  MOVWF  x60
321A:  MOVLW  20
321C:  MOVWF  x61
321E:  MOVLW  45
3220:  MOVWF  x62
3222:  MOVLW  78
3224:  MOVWF  x63
3226:  MOVLW  74
3228:  MOVWF  x64
322A:  MOVLW  72
322C:  MOVWF  x65
322E:  MOVLW  61
3230:  MOVWF  x66
3232:  MOVLW  63
3234:  MOVWF  x67
3236:  MOVLW  74
3238:  MOVWF  x68
323A:  MOVLW  6F
323C:  MOVWF  x69
323E:  MOVLW  72
3240:  MOVWF  x6A
3242:  MOVLW  61
3244:  MOVWF  x6B
3246:  CLRF   x6C
3248:  MOVLW  54
324A:  MOVWF  x6D
324C:  MOVLW  20
324E:  MOVWF  x6E
3250:  MOVLW  65
3252:  MOVWF  x6F
3254:  MOVLW  73
3256:  MOVWF  x70
3258:  MOVLW  74
325A:  MOVWF  x71
325C:  MOVLW  3D
325E:  MOVWF  x72
3260:  CLRF   x73
3262:  MOVLW  3A
3264:  MOVWF  x74
3266:  CLRF   x75
3268:  MOVLW  53
326A:  MOVWF  x76
326C:  MOVLW  69
326E:  MOVWF  x77
3270:  MOVLW  6E
3272:  MOVWF  x78
3274:  MOVLW  20
3276:  MOVWF  x79
3278:  MOVLW  44
327A:  MOVWF  x7A
327C:  MOVLW  75
327E:  MOVWF  x7B
3280:  MOVLW  63
3282:  MOVWF  x7C
3284:  MOVLW  74
3286:  MOVWF  x7D
3288:  MOVLW  6F
328A:  MOVWF  x7E
328C:  MOVLW  73
328E:  MOVWF  x7F
3290:  CLRF   x80
3292:  MOVLW  54
3294:  MOVWF  x81
3296:  MOVLW  69
3298:  MOVWF  x82
329A:  MOVLW  65
329C:  MOVWF  x83
329E:  MOVLW  6D
32A0:  MOVWF  x84
32A2:  MOVLW  70
32A4:  MOVWF  x85
32A6:  MOVLW  6F
32A8:  MOVWF  x86
32AA:  MOVLW  20
32AC:  MOVWF  x87
32AE:  MOVLW  64
32B0:  MOVWF  x88
32B2:  MOVLW  65
32B4:  MOVWF  x89
32B6:  MOVLW  20
32B8:  MOVWF  x8A
32BA:  MOVLW  50
32BC:  MOVWF  x8B
32BE:  MOVLW  75
32C0:  MOVWF  x8C
32C2:  MOVLW  72
32C4:  MOVWF  x8D
32C6:  MOVLW  67
32C8:  MOVWF  x8E
32CA:  MOVLW  61
32CC:  MOVWF  x8F
32CE:  CLRF   x90
32D0:  MOVLW  55
32D2:  MOVWF  x91
32D4:  MOVLW  56
32D6:  MOVWF  x92
32D8:  CLRF   x93
32DA:  MOVLW  21
32DC:  MOVWF  x94
32DE:  MOVWF  x95
32E0:  MOVLW  55
32E2:  MOVWF  x96
32E4:  MOVLW  62
32E6:  MOVWF  x97
32E8:  MOVLW  69
32EA:  MOVWF  x98
32EC:  MOVLW  71
32EE:  MOVWF  x99
32F0:  MOVLW  75
32F2:  MOVWF  x9A
32F4:  MOVLW  65
32F6:  MOVWF  x9B
32F8:  MOVLW  20
32FA:  MOVWF  x9C
32FC:  MOVLW  56
32FE:  MOVWF  x9D
3300:  MOVLW  69
3302:  MOVWF  x9E
3304:  MOVLW  64
3306:  MOVWF  x9F
3308:  MOVLW  72
330A:  MOVWF  xA0
330C:  MOVLW  69
330E:  MOVWF  xA1
3310:  MOVLW  6F
3312:  MOVWF  xA2
3314:  MOVLW  21
3316:  MOVWF  xA3
3318:  MOVWF  xA4
331A:  CLRF   xA5
331C:  MOVLW  4A
331E:  MOVWF  xA6
3320:  MOVLW  50
3322:  MOVWF  xA7
3324:  MOVLW  43
3326:  MOVWF  xA8
3328:  MOVLW  45
332A:  MOVWF  xA9
332C:  MOVLW  47
332E:  MOVWF  xAA
3330:  MOVLW  48
3332:  MOVWF  xAB
3334:  MOVLW  2D
3336:  MOVWF  xAC
3338:  MOVLW  46
333A:  MOVWF  xAD
333C:  MOVLW  2D
333E:  MOVWF  xAE
3340:  MOVLW  41
3342:  MOVWF  xAF
3344:  CLRF   xB0
3346:  MOVLW  49
3348:  MOVWF  xB1
334A:  MOVLW  6E
334C:  MOVWF  xB2
334E:  MOVLW  66
3350:  MOVWF  xB3
3352:  MOVLW  6C
3354:  MOVWF  xB4
3356:  MOVLW  6F
3358:  MOVWF  xB5
335A:  MOVLW  77
335C:  MOVWF  xB6
335E:  MOVLW  28
3360:  MOVWF  xB7
3362:  MOVLW  6D
3364:  MOVWF  xB8
3366:  MOVLW  2F
3368:  MOVWF  xB9
336A:  MOVLW  73
336C:  MOVWF  xBA
336E:  MOVLW  29
3370:  MOVWF  xBB
3372:  MOVLW  3A
3374:  MOVWF  xBC
3376:  CLRF   xBD
3378:  MOVLW  46
337A:  MOVWF  xBE
337C:  MOVLW  61
337E:  MOVWF  xBF
3380:  MOVLW  62
3382:  MOVWF  xC0
3384:  MOVLW  72
3386:  MOVWF  xC1
3388:  MOVLW  69
338A:  MOVWF  xC2
338C:  MOVLW  63
338E:  MOVWF  xC3
3390:  MOVLW  61
3392:  MOVWF  xC4
3394:  MOVLW  3A
3396:  MOVWF  xC5
3398:  MOVLW  32
339A:  MOVWF  xC6
339C:  MOVLW  30
339E:  MOVWF  xC7
33A0:  MOVLW  33
33A2:  MOVWF  xC8
33A4:  MOVLW  2E
33A6:  MOVWF  xC9
33A8:  MOVLW  30
33AA:  MOVWF  xCA
33AC:  CLRF   xCB
33AE:  MOVLW  41
33B0:  MOVWF  xCC
33B2:  MOVLW  63
33B4:  MOVWF  xCD
33B6:  MOVLW  74
33B8:  MOVWF  xCE
33BA:  MOVLW  75
33BC:  MOVWF  xCF
33BE:  MOVLW  61
33C0:  MOVWF  xD0
33C2:  MOVLW  6C
33C4:  MOVWF  xD1
33C6:  MOVLW  3A
33C8:  MOVWF  xD2
33CA:  CLRF   xD3
33CC:  MOVLW  41
33CE:  MOVWF  xD4
33D0:  MOVLW  6A
33D2:  MOVWF  xD5
33D4:  MOVLW  75
33D6:  MOVWF  xD6
33D8:  MOVLW  73
33DA:  MOVWF  xD7
33DC:  MOVLW  74
33DE:  MOVWF  xD8
33E0:  MOVLW  65
33E2:  MOVWF  xD9
33E4:  MOVLW  3A
33E6:  MOVWF  xDA
33E8:  CLRF   xDB
33EA:  MOVLW  55
33EC:  MOVWF  xDC
33EE:  MOVLW  56
33F0:  MOVWF  xDD
33F2:  MOVLW  4C
33F4:  MOVWF  xDE
33F6:  MOVLW  69
33F8:  MOVWF  xDF
33FA:  MOVLW  66
33FC:  MOVWF  xE0
33FE:  MOVLW  65
3400:  MOVWF  xE1
3402:  MOVLW  3A
3404:  MOVWF  xE2
3406:  CLRF   xE3
3408:  MOVLW  46
340A:  MOVWF  xE4
340C:  MOVLW  69
340E:  MOVWF  xE5
3410:  MOVLW  6C
3412:  MOVWF  xE6
3414:  MOVLW  74
3416:  MOVWF  xE7
3418:  MOVLW  65
341A:  MOVWF  xE8
341C:  MOVLW  72
341E:  MOVWF  xE9
3420:  MOVLW  3A
3422:  MOVWF  xEA
3424:  CLRF   xEB
3426:  MOVLW  46
3428:  MOVWF  xEC
342A:  MOVLW  61
342C:  MOVWF  xED
342E:  MOVLW  62
3430:  MOVWF  xEE
3432:  MOVLW  72
3434:  MOVWF  xEF
3436:  MOVLW  69
3438:  MOVWF  xF0
343A:  MOVLW  63
343C:  MOVWF  xF1
343E:  MOVLW  61
3440:  MOVWF  xF2
3442:  MOVLW  3A
3444:  MOVWF  xF3
3446:  MOVLW  32
3448:  MOVWF  xF4
344A:  MOVLW  33
344C:  MOVWF  xF5
344E:  MOVLW  35
3450:  MOVWF  xF6
3452:  MOVLW  2E
3454:  MOVWF  xF7
3456:  MOVLW  30
3458:  MOVWF  xF8
345A:  CLRF   xF9
345C:  MOVLW  21
345E:  MOVWF  xFA
3460:  MOVLW  50
3462:  MOVWF  xFB
3464:  MOVLW  65
3466:  MOVWF  xFC
3468:  MOVLW  72
346A:  MOVWF  xFD
346C:  MOVLW  64
346E:  MOVWF  xFE
3470:  MOVLW  69
3472:  MOVWF  xFF
3474:  MOVLW  64
3476:  MOVLB  5
3478:  MOVWF  x00
347A:  MOVLW  61
347C:  MOVWF  x01
347E:  MOVLW  20
3480:  MOVWF  x02
3482:  MOVLW  46
3484:  MOVWF  x03
3486:  MOVLW  6C
3488:  MOVWF  x04
348A:  MOVLW  75
348C:  MOVWF  x05
348E:  MOVLW  6A
3490:  MOVWF  x06
3492:  MOVLW  6F
3494:  MOVWF  x07
3496:  MOVLW  21
3498:  MOVWF  x08
349A:  CLRF   x09
349C:  CLRF   x3B
349E:  CLRF   x3C
34A0:  CLRF   x3D
34A2:  CLRF   x3E
34A4:  MOVLW  09
34A6:  MOVWF  x3F
34A8:  CLRF   x40
34AA:  CLRF   x41
34AC:  CLRF   x42
34AE:  CLRF   x43
34B0:  CLRF   x44
34B2:  CLRF   x45
34B4:  CLRF   x46
34B6:  MOVWF  x47
34B8:  CLRF   x48
34BA:  CLRF   x49
34BC:  CLRF   x4A
34BE:  CLRF   x4B
34C0:  CLRF   x4C
34C2:  CLRF   x4D
34C4:  CLRF   x4E
34C6:  CLRF   x4F
34C8:  CLRF   x50
34CA:  CLRF   x51
34CC:  CLRF   x52
34CE:  CLRF   x53
34D0:  CLRF   x54
34D2:  CLRF   x55
34D4:  CLRF   x56
34D6:  CLRF   x57
34D8:  CLRF   x58
34DA:  CLRF   x59
34DC:  CLRF   x5A
34DE:  CLRF   x5B
34E0:  CLRF   x5C
34E2:  CLRF   x5D
34E4:  CLRF   x5E
34E6:  CLRF   x5F
34E8:  CLRF   x60
34EA:  CLRF   x61
34EC:  CLRF   x62
34EE:  CLRF   xBB
34F0:  CLRF   xBC
34F2:  CLRF   xBD
34F4:  CLRF   xBE
34F6:  CLRF   xBF
34F8:  CLRF   xC0
34FA:  CLRF   xC1
34FC:  CLRF   xC2
34FE:  CLRF   xC3
3500:  CLRF   xC4
3502:  CLRF   xC5
3504:  CLRF   xC6
3506:  CLRF   xC7
3508:  CLRF   xC8
350A:  CLRF   xC9
350C:  CLRF   xCA
350E:  CLRF   xCB
3510:  CLRF   xCC
3512:  CLRF   xCD
3514:  CLRF   xCE
3516:  CLRF   xCF
3518:  CLRF   xD0
351A:  CLRF   xD1
351C:  CLRF   xD2
351E:  CLRF   xD3
3520:  CLRF   xD4
3522:  CLRF   xD5
3524:  CLRF   xD6
3526:  CLRF   xD7
3528:  CLRF   xD8
352A:  CLRF   xD9
352C:  CLRF   xDA
352E:  CLRF   xDB
3530:  CLRF   xDC
3532:  CLRF   xDD
3534:  CLRF   xDE
3536:  CLRF   xDF
3538:  CLRF   xE0
353A:  CLRF   xE1
353C:  CLRF   xE2
353E:  CLRF   xE3
3540:  CLRF   xE4
3542:  CLRF   xE5
3544:  CLRF   xE6
3546:  CLRF   xE7
3548:  CLRF   xE8
354A:  CLRF   xE9
354C:  CLRF   xEA
354E:  CLRF   xEB
3550:  CLRF   xEC
3552:  CLRF   xED
3554:  CLRF   xEE
3556:  CLRF   xEF
3558:  CLRF   xF0
355A:  CLRF   xF1
355C:  CLRF   xF2
355E:  CLRF   xF3
3560:  CLRF   xF4
3562:  CLRF   xF5
3564:  CLRF   xF6
3566:  CLRF   xF7
3568:  CLRF   xF8
356A:  CLRF   xF9
356C:  CLRF   xFA
356E:  MOVLB  6
3570:  CLRF   x2B
3572:  CLRF   x2C
....................  
....................    for (posicion=0;posicion<0x10;posicion++) 
3574:  MOVLB  4
3576:  CLRF   x4B
3578:  MOVF   x4B,W
357A:  SUBLW  0F
357C:  BNC   3592
....................    { 
....................       SlaveA0Tx[posicion] = 0x00; 
357E:  CLRF   03
3580:  MOVF   x4B,W
3582:  ADDLW  39
3584:  MOVWF  FE9
3586:  MOVLW  04
3588:  ADDWFC 03,W
358A:  MOVWF  FEA
358C:  CLRF   FEF
....................    } 
358E:  INCF   x4B,F
3590:  BRA    3578
....................  
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
3592:  MOVLW  85
3594:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
3596:  BSF    F9D.0
....................    enable_interrupts(global);    
3598:  MOVLW  C0
359A:  IORWF  FF2,F
....................     
....................     
....................    Password[0]=read_eeprom(0);Password[1]=read_eeprom(1);Password[2]=read_eeprom(2);Password[3]=read_eeprom(3); 
359C:  MOVFF  FF2,62D
35A0:  BCF    FF2.7
35A2:  CLRF   FA9
35A4:  BCF    FA6.6
35A6:  BCF    FA6.7
35A8:  BSF    FA6.0
35AA:  MOVF   FA8,W
35AC:  MOVLB  6
35AE:  BTFSC  x2D.7
35B0:  BSF    FF2.7
35B2:  MOVLB  5
35B4:  MOVWF  x5F
35B6:  MOVFF  FF2,62D
35BA:  BCF    FF2.7
35BC:  MOVLW  01
35BE:  MOVWF  FA9
35C0:  BCF    FA6.6
35C2:  BCF    FA6.7
35C4:  BSF    FA6.0
35C6:  MOVF   FA8,W
35C8:  MOVLB  6
35CA:  BTFSC  x2D.7
35CC:  BSF    FF2.7
35CE:  MOVLB  5
35D0:  MOVWF  x60
35D2:  MOVFF  FF2,62D
35D6:  BCF    FF2.7
35D8:  MOVLW  02
35DA:  MOVWF  FA9
35DC:  BCF    FA6.6
35DE:  BCF    FA6.7
35E0:  BSF    FA6.0
35E2:  MOVF   FA8,W
35E4:  MOVLB  6
35E6:  BTFSC  x2D.7
35E8:  BSF    FF2.7
35EA:  MOVLB  5
35EC:  MOVWF  x61
35EE:  MOVFF  FF2,62D
35F2:  BCF    FF2.7
35F4:  MOVLW  03
35F6:  MOVWF  FA9
35F8:  BCF    FA6.6
35FA:  BCF    FA6.7
35FC:  BSF    FA6.0
35FE:  MOVF   FA8,W
3600:  MOVLB  6
3602:  BTFSC  x2D.7
3604:  BSF    FF2.7
3606:  MOVLB  5
3608:  MOVWF  x62
....................    Tpurgap[0]=read_eeprom(4);Tpurgap[1]=read_eeprom(5);Tpurgap[2]=read_eeprom(6);Tpurgap[3]=read_eeprom(7); 
360A:  MOVFF  FF2,62D
360E:  BCF    FF2.7
3610:  MOVLW  04
3612:  MOVWF  FA9
3614:  BCF    FA6.6
3616:  BCF    FA6.7
3618:  BSF    FA6.0
361A:  MOVF   FA8,W
361C:  MOVLB  6
361E:  BTFSC  x2D.7
3620:  BSF    FF2.7
3622:  MOVLB  5
3624:  MOVWF  x3F
3626:  MOVFF  FF2,62D
362A:  BCF    FF2.7
362C:  MOVLW  05
362E:  MOVWF  FA9
3630:  BCF    FA6.6
3632:  BCF    FA6.7
3634:  BSF    FA6.0
3636:  MOVF   FA8,W
3638:  MOVLB  6
363A:  BTFSC  x2D.7
363C:  BSF    FF2.7
363E:  MOVLB  5
3640:  MOVWF  x40
3642:  MOVFF  FF2,62D
3646:  BCF    FF2.7
3648:  MOVLW  06
364A:  MOVWF  FA9
364C:  BCF    FA6.6
364E:  BCF    FA6.7
3650:  BSF    FA6.0
3652:  MOVF   FA8,W
3654:  MOVLB  6
3656:  BTFSC  x2D.7
3658:  BSF    FF2.7
365A:  MOVLB  5
365C:  MOVWF  x41
365E:  MOVFF  FF2,62D
3662:  BCF    FF2.7
3664:  MOVLW  07
3666:  MOVWF  FA9
3668:  BCF    FA6.6
366A:  BCF    FA6.7
366C:  BSF    FA6.0
366E:  MOVF   FA8,W
3670:  MOVLB  6
3672:  BTFSC  x2D.7
3674:  BSF    FF2.7
3676:  MOVLB  5
3678:  MOVWF  x42
....................    Tppurgap[0]=read_eeprom(8);Tppurgap[1]=read_eeprom(9);Tppurgap[2]=read_eeprom(10);Tppurgap[3]=read_eeprom(11); 
367A:  MOVFF  FF2,62D
367E:  BCF    FF2.7
3680:  MOVLW  08
3682:  MOVWF  FA9
3684:  BCF    FA6.6
3686:  BCF    FA6.7
3688:  BSF    FA6.0
368A:  MOVF   FA8,W
368C:  MOVLB  6
368E:  BTFSC  x2D.7
3690:  BSF    FF2.7
3692:  MOVLB  5
3694:  MOVWF  x47
3696:  MOVFF  FF2,62D
369A:  BCF    FF2.7
369C:  MOVLW  09
369E:  MOVWF  FA9
36A0:  BCF    FA6.6
36A2:  BCF    FA6.7
36A4:  BSF    FA6.0
36A6:  MOVF   FA8,W
36A8:  MOVLB  6
36AA:  BTFSC  x2D.7
36AC:  BSF    FF2.7
36AE:  MOVLB  5
36B0:  MOVWF  x48
36B2:  MOVFF  FF2,62D
36B6:  BCF    FF2.7
36B8:  MOVLW  0A
36BA:  MOVWF  FA9
36BC:  BCF    FA6.6
36BE:  BCF    FA6.7
36C0:  BSF    FA6.0
36C2:  MOVF   FA8,W
36C4:  MOVLB  6
36C6:  BTFSC  x2D.7
36C8:  BSF    FF2.7
36CA:  MOVLB  5
36CC:  MOVWF  x49
36CE:  MOVFF  FF2,62D
36D2:  BCF    FF2.7
36D4:  MOVLW  0B
36D6:  MOVWF  FA9
36D8:  BCF    FA6.6
36DA:  BCF    FA6.7
36DC:  BSF    FA6.0
36DE:  MOVF   FA8,W
36E0:  MOVLB  6
36E2:  BTFSC  x2D.7
36E4:  BSF    FF2.7
36E6:  MOVLB  5
36E8:  MOVWF  x4A
....................    Tuv[0]=read_eeprom(12);Tuv[1]=read_eeprom(13);Tuv[2]=read_eeprom(14);Tuv[3]=read_eeprom(15); 
36EA:  MOVFF  FF2,62D
36EE:  BCF    FF2.7
36F0:  MOVLW  0C
36F2:  MOVWF  FA9
36F4:  BCF    FA6.6
36F6:  BCF    FA6.7
36F8:  BSF    FA6.0
36FA:  MOVF   FA8,W
36FC:  MOVLB  6
36FE:  BTFSC  x2D.7
3700:  BSF    FF2.7
3702:  MOVLB  5
3704:  MOVWF  x4B
3706:  MOVFF  FF2,62D
370A:  BCF    FF2.7
370C:  MOVLW  0D
370E:  MOVWF  FA9
3710:  BCF    FA6.6
3712:  BCF    FA6.7
3714:  BSF    FA6.0
3716:  MOVF   FA8,W
3718:  MOVLB  6
371A:  BTFSC  x2D.7
371C:  BSF    FF2.7
371E:  MOVLB  5
3720:  MOVWF  x4C
3722:  MOVFF  FF2,62D
3726:  BCF    FF2.7
3728:  MOVLW  0E
372A:  MOVWF  FA9
372C:  BCF    FA6.6
372E:  BCF    FA6.7
3730:  BSF    FA6.0
3732:  MOVF   FA8,W
3734:  MOVLB  6
3736:  BTFSC  x2D.7
3738:  BSF    FF2.7
373A:  MOVLB  5
373C:  MOVWF  x4D
373E:  MOVFF  FF2,62D
3742:  BCF    FF2.7
3744:  MOVLW  0F
3746:  MOVWF  FA9
3748:  BCF    FA6.6
374A:  BCF    FA6.7
374C:  BSF    FA6.0
374E:  MOVF   FA8,W
3750:  MOVLB  6
3752:  BTFSC  x2D.7
3754:  BSF    FF2.7
3756:  MOVLB  5
3758:  MOVWF  x4E
....................    Ttrabajo[0]=read_eeprom(16);Ttrabajo[1]=read_eeprom(17);Ttrabajo[2]=read_eeprom(18);Ttrabajo[3]=read_eeprom(19); 
375A:  MOVFF  FF2,62D
375E:  BCF    FF2.7
3760:  MOVLW  10
3762:  MOVWF  FA9
3764:  BCF    FA6.6
3766:  BCF    FA6.7
3768:  BSF    FA6.0
376A:  MOVF   FA8,W
376C:  MOVLB  6
376E:  BTFSC  x2D.7
3770:  BSF    FF2.7
3772:  MOVLB  5
3774:  MOVWF  x57
3776:  MOVFF  FF2,62D
377A:  BCF    FF2.7
377C:  MOVLW  11
377E:  MOVWF  FA9
3780:  BCF    FA6.6
3782:  BCF    FA6.7
3784:  BSF    FA6.0
3786:  MOVF   FA8,W
3788:  MOVLB  6
378A:  BTFSC  x2D.7
378C:  BSF    FF2.7
378E:  MOVLB  5
3790:  MOVWF  x58
3792:  MOVFF  FF2,62D
3796:  BCF    FF2.7
3798:  MOVLW  12
379A:  MOVWF  FA9
379C:  BCF    FA6.6
379E:  BCF    FA6.7
37A0:  BSF    FA6.0
37A2:  MOVF   FA8,W
37A4:  MOVLB  6
37A6:  BTFSC  x2D.7
37A8:  BSF    FF2.7
37AA:  MOVLB  5
37AC:  MOVWF  x59
37AE:  MOVFF  FF2,62D
37B2:  BCF    FF2.7
37B4:  MOVLW  13
37B6:  MOVWF  FA9
37B8:  BCF    FA6.6
37BA:  BCF    FA6.7
37BC:  BSF    FA6.0
37BE:  MOVF   FA8,W
37C0:  MOVLB  6
37C2:  BTFSC  x2D.7
37C4:  BSF    FF2.7
37C6:  MOVLB  5
37C8:  MOVWF  x5A
....................    flag_alarma=read_eeprom(20); 
37CA:  MOVFF  FF2,62D
37CE:  BCF    FF2.7
37D0:  MOVLW  14
37D2:  MOVWF  FA9
37D4:  BCF    FA6.6
37D6:  BCF    FA6.7
37D8:  BSF    FA6.0
37DA:  MOVF   FA8,W
37DC:  MOVLB  6
37DE:  BTFSC  x2D.7
37E0:  BSF    FF2.7
37E2:  MOVWF  01
37E4:  MOVLB  4
37E6:  BCF    x4D.4
37E8:  BTFSC  01.0
37EA:  BSF    x4D.4
....................    Tempouvp[0]=read_eeprom(21);Tempouvp[1]=read_eeprom(22);Tempouvp[2]=read_eeprom(23);Tempouvp[3]=read_eeprom(24); 
37EC:  MOVFF  FF2,62D
37F0:  BCF    FF2.7
37F2:  MOVLW  15
37F4:  MOVWF  FA9
37F6:  BCF    FA6.6
37F8:  BCF    FA6.7
37FA:  BSF    FA6.0
37FC:  MOVF   FA8,W
37FE:  MOVLB  6
3800:  BTFSC  x2D.7
3802:  BSF    FF2.7
3804:  MOVLB  5
3806:  MOVWF  x53
3808:  MOVFF  FF2,62D
380C:  BCF    FF2.7
380E:  MOVLW  16
3810:  MOVWF  FA9
3812:  BCF    FA6.6
3814:  BCF    FA6.7
3816:  BSF    FA6.0
3818:  MOVF   FA8,W
381A:  MOVLB  6
381C:  BTFSC  x2D.7
381E:  BSF    FF2.7
3820:  MOVLB  5
3822:  MOVWF  x54
3824:  MOVFF  FF2,62D
3828:  BCF    FF2.7
382A:  MOVLW  17
382C:  MOVWF  FA9
382E:  BCF    FA6.6
3830:  BCF    FA6.7
3832:  BSF    FA6.0
3834:  MOVF   FA8,W
3836:  MOVLB  6
3838:  BTFSC  x2D.7
383A:  BSF    FF2.7
383C:  MOVLB  5
383E:  MOVWF  x55
3840:  MOVFF  FF2,62D
3844:  BCF    FF2.7
3846:  MOVLW  18
3848:  MOVWF  FA9
384A:  BCF    FA6.6
384C:  BCF    FA6.7
384E:  BSF    FA6.0
3850:  MOVF   FA8,W
3852:  MOVLB  6
3854:  BTFSC  x2D.7
3856:  BSF    FF2.7
3858:  MOVLB  5
385A:  MOVWF  x56
....................     
....................    Entero=read_eeprom(25);//Decimal1=read_eeprom(26); 
385C:  MOVFF  FF2,62D
3860:  BCF    FF2.7
3862:  MOVLW  19
3864:  MOVWF  FA9
3866:  BCF    FA6.6
3868:  BCF    FA6.7
386A:  BSF    FA6.0
386C:  MOVF   FA8,W
386E:  MOVLB  6
3870:  BTFSC  x2D.7
3872:  BSF    FF2.7
3874:  MOVLB  5
3876:  MOVWF  x17
....................    Temporal=read_eeprom(26); 
3878:  MOVFF  FF2,62D
387C:  BCF    FF2.7
387E:  MOVLW  1A
3880:  MOVWF  FA9
3882:  BCF    FA6.6
3884:  BCF    FA6.7
3886:  BSF    FA6.0
3888:  MOVF   FA8,W
388A:  MOVLB  6
388C:  BTFSC  x2D.7
388E:  BSF    FF2.7
3890:  CLRF   x33
3892:  MOVWF  x32
3894:  MOVLB  0
3896:  CALL   1172
389A:  MOVFF  03,5A6
389E:  MOVFF  02,5A5
38A2:  MOVFF  01,5A4
38A6:  MOVFF  00,5A3
....................    Temporal=Temporal/100.0; 
38AA:  MOVFF  5A6,635
38AE:  MOVFF  5A5,634
38B2:  MOVFF  5A4,633
38B6:  MOVFF  5A3,632
38BA:  MOVLB  6
38BC:  CLRF   x39
38BE:  CLRF   x38
38C0:  MOVLW  48
38C2:  MOVWF  x37
38C4:  MOVLW  85
38C6:  MOVWF  x36
38C8:  MOVLB  0
38CA:  CALL   11A8
38CE:  MOVFF  03,5A6
38D2:  MOVFF  02,5A5
38D6:  MOVFF  01,5A4
38DA:  MOVFF  00,5A3
....................    Ajuste1=Entero+Temporal; 
38DE:  MOVLB  6
38E0:  CLRF   x33
38E2:  MOVFF  517,632
38E6:  MOVLB  0
38E8:  CALL   1172
38EC:  BCF    FD8.1
38EE:  MOVFF  03,639
38F2:  MOVFF  02,638
38F6:  MOVFF  01,637
38FA:  MOVFF  00,636
38FE:  MOVFF  5A6,63D
3902:  MOVFF  5A5,63C
3906:  MOVFF  5A4,63B
390A:  MOVFF  5A3,63A
390E:  CALL   1306
3912:  MOVFF  03,59A
3916:  MOVFF  02,599
391A:  MOVFF  01,598
391E:  MOVFF  00,597
....................     
....................     
....................    Entero=read_eeprom(27);//Decimal1=read_eeprom(26); 
3922:  MOVFF  FF2,62D
3926:  BCF    FF2.7
3928:  MOVLW  1B
392A:  MOVWF  FA9
392C:  BCF    FA6.6
392E:  BCF    FA6.7
3930:  BSF    FA6.0
3932:  MOVF   FA8,W
3934:  MOVLB  6
3936:  BTFSC  x2D.7
3938:  BSF    FF2.7
393A:  MOVLB  5
393C:  MOVWF  x17
....................    Temporal=read_eeprom(28); 
393E:  MOVFF  FF2,62D
3942:  BCF    FF2.7
3944:  MOVLW  1C
3946:  MOVWF  FA9
3948:  BCF    FA6.6
394A:  BCF    FA6.7
394C:  BSF    FA6.0
394E:  MOVF   FA8,W
3950:  MOVLB  6
3952:  BTFSC  x2D.7
3954:  BSF    FF2.7
3956:  CLRF   x33
3958:  MOVWF  x32
395A:  MOVLB  0
395C:  CALL   1172
3960:  MOVFF  03,5A6
3964:  MOVFF  02,5A5
3968:  MOVFF  01,5A4
396C:  MOVFF  00,5A3
....................    Temporal=Temporal/100.0; 
3970:  MOVFF  5A6,635
3974:  MOVFF  5A5,634
3978:  MOVFF  5A4,633
397C:  MOVFF  5A3,632
3980:  MOVLB  6
3982:  CLRF   x39
3984:  CLRF   x38
3986:  MOVLW  48
3988:  MOVWF  x37
398A:  MOVLW  85
398C:  MOVWF  x36
398E:  MOVLB  0
3990:  CALL   11A8
3994:  MOVFF  03,5A6
3998:  MOVFF  02,5A5
399C:  MOVFF  01,5A4
39A0:  MOVFF  00,5A3
....................    Ajuste2=Entero+Temporal; 
39A4:  MOVLB  6
39A6:  CLRF   x33
39A8:  MOVFF  517,632
39AC:  MOVLB  0
39AE:  CALL   1172
39B2:  BCF    FD8.1
39B4:  MOVFF  03,639
39B8:  MOVFF  02,638
39BC:  MOVFF  01,637
39C0:  MOVFF  00,636
39C4:  MOVFF  5A6,63D
39C8:  MOVFF  5A5,63C
39CC:  MOVFF  5A4,63B
39D0:  MOVFF  5A3,63A
39D4:  CALL   1306
39D8:  MOVFF  03,59E
39DC:  MOVFF  02,59D
39E0:  MOVFF  01,59C
39E4:  MOVFF  00,59B
....................     
....................     
....................    Entero=read_eeprom(29);//Decimal1=read_eeprom(26); 
39E8:  MOVFF  FF2,62D
39EC:  BCF    FF2.7
39EE:  MOVLW  1D
39F0:  MOVWF  FA9
39F2:  BCF    FA6.6
39F4:  BCF    FA6.7
39F6:  BSF    FA6.0
39F8:  MOVF   FA8,W
39FA:  MOVLB  6
39FC:  BTFSC  x2D.7
39FE:  BSF    FF2.7
3A00:  MOVLB  5
3A02:  MOVWF  x17
....................    Temporal=read_eeprom(30); 
3A04:  MOVFF  FF2,62D
3A08:  BCF    FF2.7
3A0A:  MOVLW  1E
3A0C:  MOVWF  FA9
3A0E:  BCF    FA6.6
3A10:  BCF    FA6.7
3A12:  BSF    FA6.0
3A14:  MOVF   FA8,W
3A16:  MOVLB  6
3A18:  BTFSC  x2D.7
3A1A:  BSF    FF2.7
3A1C:  CLRF   x33
3A1E:  MOVWF  x32
3A20:  MOVLB  0
3A22:  CALL   1172
3A26:  MOVFF  03,5A6
3A2A:  MOVFF  02,5A5
3A2E:  MOVFF  01,5A4
3A32:  MOVFF  00,5A3
....................    Temporal=Temporal/100.0; 
3A36:  MOVFF  5A6,635
3A3A:  MOVFF  5A5,634
3A3E:  MOVFF  5A4,633
3A42:  MOVFF  5A3,632
3A46:  MOVLB  6
3A48:  CLRF   x39
3A4A:  CLRF   x38
3A4C:  MOVLW  48
3A4E:  MOVWF  x37
3A50:  MOVLW  85
3A52:  MOVWF  x36
3A54:  MOVLB  0
3A56:  CALL   11A8
3A5A:  MOVFF  03,5A6
3A5E:  MOVFF  02,5A5
3A62:  MOVFF  01,5A4
3A66:  MOVFF  00,5A3
....................    zero_actual=Entero+Temporal; 
3A6A:  MOVLB  6
3A6C:  CLRF   x33
3A6E:  MOVFF  517,632
3A72:  MOVLB  0
3A74:  CALL   1172
3A78:  BCF    FD8.1
3A7A:  MOVFF  03,639
3A7E:  MOVFF  02,638
3A82:  MOVFF  01,637
3A86:  MOVFF  00,636
3A8A:  MOVFF  5A6,63D
3A8E:  MOVFF  5A5,63C
3A92:  MOVFF  5A4,63B
3A96:  MOVFF  5A3,63A
3A9A:  CALL   1306
3A9E:  MOVFF  03,606
3AA2:  MOVFF  02,605
3AA6:  MOVFF  01,604
3AAA:  MOVFF  00,603
....................     
....................    Diferencia=make16(read_eeprom(61),read_eeprom(60)); 
3AAE:  MOVFF  FF2,62D
3AB2:  BCF    FF2.7
3AB4:  MOVLW  3D
3AB6:  MOVWF  FA9
3AB8:  BCF    FA6.6
3ABA:  BCF    FA6.7
3ABC:  BSF    FA6.0
3ABE:  MOVF   FA8,W
3AC0:  MOVLB  6
3AC2:  BTFSC  x2D.7
3AC4:  BSF    FF2.7
3AC6:  MOVWF  x2E
3AC8:  MOVFF  FF2,62F
3ACC:  BCF    FF2.7
3ACE:  MOVLW  3C
3AD0:  MOVWF  FA9
3AD2:  BCF    FA6.6
3AD4:  BCF    FA6.7
3AD6:  BSF    FA6.0
3AD8:  MOVF   FA8,W
3ADA:  BTFSC  x2F.7
3ADC:  BSF    FF2.7
3ADE:  MOVWF  x30
3AE0:  MOVFF  62E,03
3AE4:  MOVF   x30,W
3AE6:  MOVWF  x32
3AE8:  MOVFF  03,633
3AEC:  MOVLB  0
3AEE:  CALL   1172
3AF2:  MOVFF  03,572
3AF6:  MOVFF  02,571
3AFA:  MOVFF  01,570
3AFE:  MOVFF  00,56F
....................    G=make16(read_eeprom(63),read_eeprom(62)); 
3B02:  MOVFF  FF2,62D
3B06:  BCF    FF2.7
3B08:  MOVLW  3F
3B0A:  MOVWF  FA9
3B0C:  BCF    FA6.6
3B0E:  BCF    FA6.7
3B10:  BSF    FA6.0
3B12:  MOVF   FA8,W
3B14:  MOVLB  6
3B16:  BTFSC  x2D.7
3B18:  BSF    FF2.7
3B1A:  MOVWF  x2E
3B1C:  MOVFF  FF2,62F
3B20:  BCF    FF2.7
3B22:  MOVLW  3E
3B24:  MOVWF  FA9
3B26:  BCF    FA6.6
3B28:  BCF    FA6.7
3B2A:  BSF    FA6.0
3B2C:  MOVF   FA8,W
3B2E:  BTFSC  x2F.7
3B30:  BSF    FF2.7
3B32:  MOVWF  x30
3B34:  MOVFF  62E,03
3B38:  MOVF   x30,W
3B3A:  MOVWF  x32
3B3C:  MOVFF  03,633
3B40:  MOVLB  0
3B42:  CALL   1172
3B46:  MOVFF  03,612
3B4A:  MOVFF  02,611
3B4E:  MOVFF  01,610
3B52:  MOVFF  00,60F
....................    negativo=read_eeprom(50); 
3B56:  MOVFF  FF2,62D
3B5A:  BCF    FF2.7
3B5C:  MOVLW  32
3B5E:  MOVWF  FA9
3B60:  BCF    FA6.6
3B62:  BCF    FA6.7
3B64:  BSF    FA6.0
3B66:  MOVF   FA8,W
3B68:  MOVLB  6
3B6A:  BTFSC  x2D.7
3B6C:  BSF    FF2.7
3B6E:  MOVLB  5
3B70:  MOVWF  x0E
....................  
....................    while(true){ 
....................  
....................       Envio_Esclavos(); 
3B72:  MOVLB  0
3B74:  CALL   1838
....................     
....................       glcd_update(); 
3B78:  CALL   18B4
....................     
....................    if(minutos_trabajo>=3600) // Tiempo de Trabajo 
3B7C:  MOVLB  5
3B7E:  MOVF   x38,W
3B80:  SUBLW  0D
3B82:  BC    3BCA
3B84:  XORLW  FF
3B86:  BNZ   3B8E
3B88:  MOVF   x37,W
3B8A:  SUBLW  0F
3B8C:  BC    3BCA
....................    { 
....................       minutos_trabajo=0; 
3B8E:  CLRF   x38
3B90:  CLRF   x37
....................       Ttrabajo[0]++; 
3B92:  INCF   x57,F
....................       if(Ttrabajo[0]>9) 
3B94:  BTFSC  x57.7
3B96:  BRA    3BA2
3B98:  MOVF   x57,W
3B9A:  SUBLW  09
3B9C:  BC    3BA2
....................       { 
....................          Ttrabajo[0]=0; 
3B9E:  CLRF   x57
....................          Ttrabajo[1]++; 
3BA0:  INCF   x58,F
....................       } 
....................       if(Ttrabajo[1]>9) 
3BA2:  BTFSC  x58.7
3BA4:  BRA    3BB0
3BA6:  MOVF   x58,W
3BA8:  SUBLW  09
3BAA:  BC    3BB0
....................       { 
....................          Ttrabajo[1]=0; 
3BAC:  CLRF   x58
....................          Ttrabajo[2]++; 
3BAE:  INCF   x59,F
....................       } 
....................       if(Ttrabajo[2]>9) 
3BB0:  BTFSC  x59.7
3BB2:  BRA    3BBE
3BB4:  MOVF   x59,W
3BB6:  SUBLW  09
3BB8:  BC    3BBE
....................       { 
....................          Ttrabajo[2]=0; 
3BBA:  CLRF   x59
....................          Ttrabajo[3]++; 
3BBC:  INCF   x5A,F
....................       } 
....................       if(Ttrabajo[3]>9) 
3BBE:  BTFSC  x5A.7
3BC0:  BRA    3BCA
3BC2:  MOVF   x5A,W
3BC4:  SUBLW  09
3BC6:  BC    3BCA
....................       { 
....................          Ttrabajo[3]=0; 
3BC8:  CLRF   x5A
....................       } 
....................    }           
....................     
....................    if(Menu!=2) 
3BCA:  MOVF   x0A,W
3BCC:  SUBLW  02
3BCE:  BZ    3BD4
....................       Alarma=10; 
3BD0:  MOVLW  0A
3BD2:  MOVWF  x1C
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==0){ //Menu de Contraseña. 
3BD4:  MOVF   x0A,F
3BD6:  BTFSS  FD8.2
3BD8:  BRA    42BC
....................       glcd_rect(0, 0, 127, 25, YES, ON);strcpy(Menus.Letra,"Clave");glcd_text57(25, 1, Menus.Letra, 3, OFF);    
3BDA:  MOVLB  6
3BDC:  CLRF   x44
3BDE:  CLRF   x45
3BE0:  MOVLW  7F
3BE2:  MOVWF  x46
3BE4:  MOVLW  19
3BE6:  MOVWF  x47
3BE8:  MOVLW  01
3BEA:  MOVWF  x48
3BEC:  MOVWF  x49
3BEE:  MOVLB  0
3BF0:  CALL   1B66
3BF4:  MOVLW  06
3BF6:  MOVWF  FEA
3BF8:  MOVLW  17
3BFA:  MOVWF  FE9
3BFC:  MOVFF  FF2,62D
3C00:  BCF    FF2.7
3C02:  MOVLW  00
3C04:  CALL   0EEE
3C08:  TBLRD*-
3C0A:  TBLRD*+
3C0C:  MOVF   FF5,W
3C0E:  MOVWF  FEE
3C10:  IORLW  00
3C12:  BNZ   3C0A
3C14:  MOVLB  6
3C16:  BTFSC  x2D.7
3C18:  BSF    FF2.7
3C1A:  MOVLW  19
3C1C:  MOVWF  x44
3C1E:  MOVLW  01
3C20:  MOVWF  x45
3C22:  MOVLW  06
3C24:  MOVWF  x47
3C26:  MOVLW  17
3C28:  MOVWF  x46
3C2A:  MOVLW  03
3C2C:  MOVWF  x48
3C2E:  CLRF   x49
3C30:  MOVLB  0
3C32:  CALL   1C28
....................       flag_latencia=1; 
3C36:  MOVLB  4
3C38:  BSF    x4E.3
....................        
....................       if(UP)//Si oprime hacia arriba 
3C3A:  BSF    F92.0
3C3C:  BTFSS  F80.0
3C3E:  BRA    3D24
....................       { 
....................          flag_latencia=0;t_latencia=0; 
3C40:  BCF    x4E.3
3C42:  MOVLB  5
3C44:  CLRF   x34
3C46:  CLRF   x33
....................          if(Flanco == 0) 
3C48:  MOVLB  4
3C4A:  BTFSC  x4C.0
3C4C:  BRA    3D22
....................          { 
....................             Flanco = 1;delay_ms(30); 
3C4E:  BSF    x4C.0
3C50:  MOVLW  1E
3C52:  MOVLB  6
3C54:  MOVWF  x2E
3C56:  MOVLB  0
3C58:  CALL   1DE0
....................             for(i=1;i<=4;i++) 
3C5C:  MOVLW  01
3C5E:  MOVLB  4
3C60:  MOVWF  x38
3C62:  MOVF   x38,W
3C64:  SUBLW  04
3C66:  BNC   3D22
....................             { 
....................                if(unidad==i) 
3C68:  MOVF   x38,W
3C6A:  MOVLB  5
3C6C:  SUBWF  x0B,W
3C6E:  BNZ   3CE8
....................                { 
....................                   Contrasena[i-1]++; 
3C70:  MOVLW  01
3C72:  MOVLB  4
3C74:  SUBWF  x38,W
3C76:  CLRF   03
3C78:  ADDLW  5B
3C7A:  MOVWF  FE9
3C7C:  MOVLW  05
3C7E:  ADDWFC 03,W
3C80:  MOVWF  FEA
3C82:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9) 
3C84:  MOVLW  01
3C86:  SUBWF  x38,W
3C88:  CLRF   03
3C8A:  ADDLW  5B
3C8C:  MOVWF  FE9
3C8E:  MOVLW  05
3C90:  ADDWFC 03,W
3C92:  MOVWF  FEA
3C94:  BTFSC  FEF.7
3C96:  BRA    3CB0
3C98:  MOVF   FEF,W
3C9A:  SUBLW  09
3C9C:  BC    3CB0
....................                   { 
....................                      Contrasena[i-1]=0; 
3C9E:  MOVLW  01
3CA0:  SUBWF  x38,W
3CA2:  CLRF   03
3CA4:  ADDLW  5B
3CA6:  MOVWF  FE9
3CA8:  MOVLW  05
3CAA:  ADDWFC 03,W
3CAC:  MOVWF  FEA
3CAE:  CLRF   FEF
....................                   } 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
3CB0:  MOVLW  01
3CB2:  SUBWF  x38,W
3CB4:  CLRF   03
3CB6:  ADDLW  5B
3CB8:  MOVWF  FE9
3CBA:  MOVLW  05
3CBC:  ADDWFC 03,W
3CBE:  MOVWF  FEA
3CC0:  MOVFF  FEF,62D
3CC4:  MOVF   x38,W
3CC6:  MULLW  14
3CC8:  MOVFF  FF3,62E
3CCC:  MOVLB  6
3CCE:  MOVFF  62D,62F
3CD2:  MOVFF  62E,630
3CD6:  MOVLW  1E
3CD8:  MOVWF  x31
3CDA:  MOVLW  01
3CDC:  MOVWF  x32
3CDE:  MOVLB  0
3CE0:  CALL   1F34
....................                } 
....................                else 
3CE4:  BRA    3D1C
3CE6:  MOVLB  5
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
3CE8:  MOVLW  01
3CEA:  MOVLB  4
3CEC:  SUBWF  x38,W
3CEE:  CLRF   03
3CF0:  ADDLW  5B
3CF2:  MOVWF  FE9
3CF4:  MOVLW  05
3CF6:  ADDWFC 03,W
3CF8:  MOVWF  FEA
3CFA:  MOVFF  FEF,62D
3CFE:  MOVF   x38,W
3D00:  MULLW  14
3D02:  MOVFF  FF3,62E
3D06:  MOVLB  6
3D08:  MOVFF  62D,62F
3D0C:  MOVFF  62E,630
3D10:  MOVLW  1E
3D12:  MOVWF  x31
3D14:  CLRF   x32
3D16:  MOVLB  0
3D18:  CALL   1F34
....................                } 
....................             } 
3D1C:  MOVLB  4
3D1E:  INCF   x38,F
3D20:  BRA    3C62
....................          } 
....................       } 
....................       else 
3D22:  BRA    3D26
....................       { 
....................          Flanco = 0; 
3D24:  BCF    x4C.0
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
3D26:  BSF    F92.1
3D28:  BTFSS  F80.1
3D2A:  BRA    3E0E
....................       { 
....................          flag_latencia=0;t_latencia=0; 
3D2C:  BCF    x4E.3
3D2E:  MOVLB  5
3D30:  CLRF   x34
3D32:  CLRF   x33
....................          if(Flanco2 == 0) 
3D34:  MOVLB  4
3D36:  BTFSC  x4C.2
3D38:  BRA    3E0C
....................          { 
....................             Flanco2 = 1;delay_ms(30); 
3D3A:  BSF    x4C.2
3D3C:  MOVLW  1E
3D3E:  MOVLB  6
3D40:  MOVWF  x2E
3D42:  MOVLB  0
3D44:  CALL   1DE0
....................             for(i=1;i<=4;i++) 
3D48:  MOVLW  01
3D4A:  MOVLB  4
3D4C:  MOVWF  x38
3D4E:  MOVF   x38,W
3D50:  SUBLW  04
3D52:  BNC   3E0C
....................             { 
....................                if(unidad==i) 
3D54:  MOVF   x38,W
3D56:  MOVLB  5
3D58:  SUBWF  x0B,W
3D5A:  BNZ   3DD2
....................                { 
....................                   Contrasena[i-1]--; 
3D5C:  MOVLW  01
3D5E:  MOVLB  4
3D60:  SUBWF  x38,W
3D62:  CLRF   03
3D64:  ADDLW  5B
3D66:  MOVWF  FE9
3D68:  MOVLW  05
3D6A:  ADDWFC 03,W
3D6C:  MOVWF  FEA
3D6E:  DECF   FEF,F
....................                   if(Contrasena[i-1]<0) 
3D70:  MOVLW  01
3D72:  SUBWF  x38,W
3D74:  CLRF   03
3D76:  ADDLW  5B
3D78:  MOVWF  FE9
3D7A:  MOVLW  05
3D7C:  ADDWFC 03,W
3D7E:  MOVWF  FEA
3D80:  BTFSC  FEF.7
3D82:  BRA    3D86
3D84:  BRA    3D9A
....................                   { 
....................                      Contrasena[i-1]=9;} 
3D86:  MOVLW  01
3D88:  SUBWF  x38,W
3D8A:  CLRF   03
3D8C:  ADDLW  5B
3D8E:  MOVWF  FE9
3D90:  MOVLW  05
3D92:  ADDWFC 03,W
3D94:  MOVWF  FEA
3D96:  MOVLW  09
3D98:  MOVWF  FEF
....................                      displayContrasena(Contrasena[i-1],i*20,30,1); 
3D9A:  MOVLW  01
3D9C:  SUBWF  x38,W
3D9E:  CLRF   03
3DA0:  ADDLW  5B
3DA2:  MOVWF  FE9
3DA4:  MOVLW  05
3DA6:  ADDWFC 03,W
3DA8:  MOVWF  FEA
3DAA:  MOVFF  FEF,62D
3DAE:  MOVF   x38,W
3DB0:  MULLW  14
3DB2:  MOVFF  FF3,62E
3DB6:  MOVLB  6
3DB8:  MOVFF  62D,62F
3DBC:  MOVFF  62E,630
3DC0:  MOVLW  1E
3DC2:  MOVWF  x31
3DC4:  MOVLW  01
3DC6:  MOVWF  x32
3DC8:  MOVLB  0
3DCA:  CALL   1F34
....................                } 
....................                else 
3DCE:  BRA    3E06
3DD0:  MOVLB  5
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
3DD2:  MOVLW  01
3DD4:  MOVLB  4
3DD6:  SUBWF  x38,W
3DD8:  CLRF   03
3DDA:  ADDLW  5B
3DDC:  MOVWF  FE9
3DDE:  MOVLW  05
3DE0:  ADDWFC 03,W
3DE2:  MOVWF  FEA
3DE4:  MOVFF  FEF,62D
3DE8:  MOVF   x38,W
3DEA:  MULLW  14
3DEC:  MOVFF  FF3,62E
3DF0:  MOVLB  6
3DF2:  MOVFF  62D,62F
3DF6:  MOVFF  62E,630
3DFA:  MOVLW  1E
3DFC:  MOVWF  x31
3DFE:  CLRF   x32
3E00:  MOVLB  0
3E02:  CALL   1F34
....................                } 
....................             }       
3E06:  MOVLB  4
3E08:  INCF   x38,F
3E0A:  BRA    3D4E
....................          }      
....................       } 
....................       else 
3E0C:  BRA    3E10
....................       { 
....................          Flanco2 = 0; 
3E0E:  BCF    x4C.2
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
3E10:  BSF    F92.2
3E12:  BTFSS  F80.2
3E14:  BRA    3EC0
....................       { 
....................          flag_latencia=0;t_latencia=0; 
3E16:  BCF    x4E.3
3E18:  MOVLB  5
3E1A:  CLRF   x34
3E1C:  CLRF   x33
....................          if(Flanco1 == 0) 
3E1E:  MOVLB  4
3E20:  BTFSC  x4C.1
3E22:  BRA    3EBE
....................          { 
....................             Flanco1 = 1;delay_ms(30);unidad++; 
3E24:  BSF    x4C.1
3E26:  MOVLW  1E
3E28:  MOVLB  6
3E2A:  MOVWF  x2E
3E2C:  MOVLB  0
3E2E:  CALL   1DE0
3E32:  MOVLB  5
3E34:  INCF   x0B,F
....................             for(i=1;i<=4;i++) 
3E36:  MOVLW  01
3E38:  MOVLB  4
3E3A:  MOVWF  x38
3E3C:  MOVF   x38,W
3E3E:  SUBLW  04
3E40:  BNC   3EBE
....................             { 
....................                if(unidad==i) 
3E42:  MOVF   x38,W
3E44:  MOVLB  5
3E46:  SUBWF  x0B,W
3E48:  BNZ   3E84
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,1); 
3E4A:  MOVLW  01
3E4C:  MOVLB  4
3E4E:  SUBWF  x38,W
3E50:  CLRF   03
3E52:  ADDLW  5B
3E54:  MOVWF  FE9
3E56:  MOVLW  05
3E58:  ADDWFC 03,W
3E5A:  MOVWF  FEA
3E5C:  MOVFF  FEF,62D
3E60:  MOVF   x38,W
3E62:  MULLW  14
3E64:  MOVFF  FF3,62E
3E68:  MOVLB  6
3E6A:  MOVFF  62D,62F
3E6E:  MOVFF  62E,630
3E72:  MOVLW  1E
3E74:  MOVWF  x31
3E76:  MOVLW  01
3E78:  MOVWF  x32
3E7A:  MOVLB  0
3E7C:  CALL   1F34
....................                } 
....................                else 
3E80:  BRA    3EB8
3E82:  MOVLB  5
....................                { 
....................                   displayContrasena(Contrasena[i-1],i*20,30,0); 
3E84:  MOVLW  01
3E86:  MOVLB  4
3E88:  SUBWF  x38,W
3E8A:  CLRF   03
3E8C:  ADDLW  5B
3E8E:  MOVWF  FE9
3E90:  MOVLW  05
3E92:  ADDWFC 03,W
3E94:  MOVWF  FEA
3E96:  MOVFF  FEF,62D
3E9A:  MOVF   x38,W
3E9C:  MULLW  14
3E9E:  MOVFF  FF3,62E
3EA2:  MOVLB  6
3EA4:  MOVFF  62D,62F
3EA8:  MOVFF  62E,630
3EAC:  MOVLW  1E
3EAE:  MOVWF  x31
3EB0:  CLRF   x32
3EB2:  MOVLB  0
3EB4:  CALL   1F34
....................                } 
....................             } 
3EB8:  MOVLB  4
3EBA:  INCF   x38,F
3EBC:  BRA    3E3C
....................          } 
....................       } 
....................       else 
3EBE:  BRA    3EC2
....................       { 
....................          Flanco1 = 0; 
3EC0:  BCF    x4C.1
....................       } 
....................      
....................       if(unidad>4) 
3EC2:  MOVLB  5
3EC4:  MOVF   x0B,W
3EC6:  SUBLW  04
3EC8:  BTFSC  FD8.0
3ECA:  BRA    42BC
....................       { 
....................          glcd_fillScreen(OFF);unidad=4;flag_latencia=0;t_latencia=0; 
3ECC:  MOVLB  6
3ECE:  CLRF   x2E
3ED0:  MOVLB  0
3ED2:  CALL   1FEA
3ED6:  MOVLW  04
3ED8:  MOVLB  5
3EDA:  MOVWF  x0B
3EDC:  MOVLB  4
3EDE:  BCF    x4E.3
3EE0:  MOVLB  5
3EE2:  CLRF   x34
3EE4:  CLRF   x33
....................          if(Contrasena[0]==3&&Contrasena[1]==8&&Contrasena[2]==9&&Contrasena[3]==2) // Si Ingresa clave para reset general del sistema. 
3EE6:  MOVF   x5B,W
3EE8:  SUBLW  03
3EEA:  BNZ   3FD0
3EEC:  MOVF   x5C,W
3EEE:  SUBLW  08
3EF0:  BNZ   3FD0
3EF2:  MOVF   x5D,W
3EF4:  SUBLW  09
3EF6:  BNZ   3FD0
3EF8:  MOVF   x5E,W
3EFA:  SUBLW  02
3EFC:  BNZ   3FD0
....................          { 
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
3EFE:  CLRF   FA9
3F00:  CLRF   FA8
3F02:  BCF    FA6.6
3F04:  BCF    FA6.7
3F06:  BSF    FA6.2
3F08:  MOVF   FF2,W
3F0A:  MOVWF  00
3F0C:  BCF    FF2.7
3F0E:  MOVLB  F
3F10:  MOVLW  55
3F12:  MOVWF  FA7
3F14:  MOVLW  AA
3F16:  MOVWF  FA7
3F18:  BSF    FA6.1
3F1A:  BTFSC  FA6.1
3F1C:  BRA    3F1A
3F1E:  BCF    FA6.2
3F20:  MOVF   00,W
3F22:  IORWF  FF2,F
3F24:  MOVLW  14
3F26:  MOVLB  6
3F28:  MOVWF  x2E
3F2A:  MOVLB  0
3F2C:  CALL   1DE0
3F30:  MOVLW  01
3F32:  MOVWF  FA9
3F34:  CLRF   FA8
3F36:  BCF    FA6.6
3F38:  BCF    FA6.7
3F3A:  BSF    FA6.2
3F3C:  MOVF   FF2,W
3F3E:  MOVWF  00
3F40:  BCF    FF2.7
3F42:  MOVLB  F
3F44:  MOVLW  55
3F46:  MOVWF  FA7
3F48:  MOVLW  AA
3F4A:  MOVWF  FA7
3F4C:  BSF    FA6.1
3F4E:  BTFSC  FA6.1
3F50:  BRA    3F4E
3F52:  BCF    FA6.2
3F54:  MOVF   00,W
3F56:  IORWF  FF2,F
3F58:  MOVLW  14
3F5A:  MOVLB  6
3F5C:  MOVWF  x2E
3F5E:  MOVLB  0
3F60:  CALL   1DE0
....................             write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
3F64:  MOVLW  02
3F66:  MOVWF  FA9
3F68:  CLRF   FA8
3F6A:  BCF    FA6.6
3F6C:  BCF    FA6.7
3F6E:  BSF    FA6.2
3F70:  MOVF   FF2,W
3F72:  MOVWF  00
3F74:  BCF    FF2.7
3F76:  MOVLB  F
3F78:  MOVLW  55
3F7A:  MOVWF  FA7
3F7C:  MOVLW  AA
3F7E:  MOVWF  FA7
3F80:  BSF    FA6.1
3F82:  BTFSC  FA6.1
3F84:  BRA    3F82
3F86:  BCF    FA6.2
3F88:  MOVF   00,W
3F8A:  IORWF  FF2,F
3F8C:  MOVLW  14
3F8E:  MOVLB  6
3F90:  MOVWF  x2E
3F92:  MOVLB  0
3F94:  CALL   1DE0
3F98:  MOVLW  03
3F9A:  MOVWF  FA9
3F9C:  CLRF   FA8
3F9E:  BCF    FA6.6
3FA0:  BCF    FA6.7
3FA2:  BSF    FA6.2
3FA4:  MOVF   FF2,W
3FA6:  MOVWF  00
3FA8:  BCF    FF2.7
3FAA:  MOVLB  F
3FAC:  MOVLW  55
3FAE:  MOVWF  FA7
3FB0:  MOVLW  AA
3FB2:  MOVWF  FA7
3FB4:  BSF    FA6.1
3FB6:  BTFSC  FA6.1
3FB8:  BRA    3FB6
3FBA:  BCF    FA6.2
3FBC:  MOVF   00,W
3FBE:  IORWF  FF2,F
3FC0:  MOVLW  14
3FC2:  MOVLB  6
3FC4:  MOVWF  x2E
3FC6:  MOVLB  0
3FC8:  CALL   1DE0
....................             reset_cpu(); 
3FCC:  RESET
3FCE:  MOVLB  5
....................          } 
....................        
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
3FD0:  MOVF   x5F,W
3FD2:  SUBWF  x5B,W
3FD4:  BTFSS  FD8.2
3FD6:  BRA    4142
3FD8:  MOVF   x60,W
3FDA:  SUBWF  x5C,W
3FDC:  BTFSS  FD8.2
3FDE:  BRA    4142
3FE0:  MOVF   x61,W
3FE2:  SUBWF  x5D,W
3FE4:  BTFSS  FD8.2
3FE6:  BRA    4142
3FE8:  MOVF   x62,W
3FEA:  SUBWF  x5E,W
3FEC:  BTFSS  FD8.2
3FEE:  BRA    4142
....................          { 
....................             glcd_fillScreen(OFF); 
3FF0:  MOVLB  6
3FF2:  CLRF   x2E
3FF4:  MOVLB  0
3FF6:  CALL   1FEA
....................             strcpy(Menus.Letra,"Clave"); 
3FFA:  MOVLW  06
3FFC:  MOVWF  FEA
3FFE:  MOVLW  17
4000:  MOVWF  FE9
4002:  MOVFF  FF2,62D
4006:  BCF    FF2.7
4008:  MOVLW  00
400A:  CALL   0EEE
400E:  TBLRD*-
4010:  TBLRD*+
4012:  MOVF   FF5,W
4014:  MOVWF  FEE
4016:  IORLW  00
4018:  BNZ   4010
401A:  MOVLB  6
401C:  BTFSC  x2D.7
401E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4020:  MOVLW  06
4022:  MOVWF  x2E
4024:  MOVLW  17
4026:  MOVWF  x2D
4028:  MOVLW  1E
402A:  MOVWF  x2F
402C:  CLRF   x30
402E:  CLRF   x31
4030:  MOVLW  02
4032:  MOVWF  x32
4034:  MOVLB  0
4036:  CALL   2044
....................             strcpy(Menus.Letra,"Correcta"); 
403A:  MOVLW  06
403C:  MOVWF  FEA
403E:  MOVLW  17
4040:  MOVWF  FE9
4042:  MOVFF  FF2,62D
4046:  BCF    FF2.7
4048:  MOVLW  00
404A:  CALL   0F0E
404E:  TBLRD*-
4050:  TBLRD*+
4052:  MOVF   FF5,W
4054:  MOVWF  FEE
4056:  IORLW  00
4058:  BNZ   4050
405A:  MOVLB  6
405C:  BTFSC  x2D.7
405E:  BSF    FF2.7
....................             displayMenu(Menus.Letra,15,30,0,2); 
4060:  MOVLW  06
4062:  MOVWF  x2E
4064:  MOVLW  17
4066:  MOVWF  x2D
4068:  MOVLW  0F
406A:  MOVWF  x2F
406C:  MOVLW  1E
406E:  MOVWF  x30
4070:  CLRF   x31
4072:  MOVLW  02
4074:  MOVWF  x32
4076:  MOVLB  0
4078:  CALL   2044
....................             Menu=1;glcd_update();delay_ms(1000);glcd_fillScreen(OFF); 
407C:  MOVLW  01
407E:  MOVLB  5
4080:  MOVWF  x0A
4082:  MOVLB  0
4084:  CALL   18B4
4088:  MOVLW  04
408A:  MOVLB  6
408C:  MOVWF  x2D
408E:  MOVLW  FA
4090:  MOVWF  x2E
4092:  MOVLB  0
4094:  CALL   1DE0
4098:  MOVLB  6
409A:  DECFSZ x2D,F
409C:  BRA    408E
409E:  CLRF   x2E
40A0:  MOVLB  0
40A2:  CALL   1FEA
....................             Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0; 
40A6:  MOVLB  5
40A8:  CLRF   x5B
40AA:  CLRF   x5C
40AC:  CLRF   x5D
40AE:  CLRF   x5E
....................             displayTiempo(Tpurga[3],20,20,0,2);displayTiempo(Tpurga[2],40,20,0,2);glcd_text57(60, 22, Dos_puntos, 2, ON); 
40B0:  MOVFF  53E,62D
40B4:  MOVLW  14
40B6:  MOVLB  6
40B8:  MOVWF  x2E
40BA:  MOVWF  x2F
40BC:  CLRF   x30
40BE:  MOVLW  02
40C0:  MOVWF  x31
40C2:  MOVLB  0
40C4:  CALL   2110
40C8:  MOVFF  53D,62D
40CC:  MOVLW  28
40CE:  MOVLB  6
40D0:  MOVWF  x2E
40D2:  MOVLW  14
40D4:  MOVWF  x2F
40D6:  CLRF   x30
40D8:  MOVLW  02
40DA:  MOVWF  x31
40DC:  MOVLB  0
40DE:  CALL   2110
40E2:  MOVLW  3C
40E4:  MOVLB  6
40E6:  MOVWF  x44
40E8:  MOVLW  16
40EA:  MOVWF  x45
40EC:  MOVLW  04
40EE:  MOVWF  x47
40F0:  MOVLW  74
40F2:  MOVWF  x46
40F4:  MOVLW  02
40F6:  MOVWF  x48
40F8:  MOVLW  01
40FA:  MOVWF  x49
40FC:  MOVLB  0
40FE:  CALL   1C28
....................             displayTiempo(Tpurga[1],70,20,0,2);displayTiempo(Tpurga[0],90,20,0,2); 
4102:  MOVFF  53C,62D
4106:  MOVLW  46
4108:  MOVLB  6
410A:  MOVWF  x2E
410C:  MOVLW  14
410E:  MOVWF  x2F
4110:  CLRF   x30
4112:  MOVLW  02
4114:  MOVWF  x31
4116:  MOVLB  0
4118:  CALL   2110
411C:  MOVFF  53B,62D
4120:  MOVLW  5A
4122:  MOVLB  6
4124:  MOVWF  x2E
4126:  MOVLW  14
4128:  MOVWF  x2F
412A:  CLRF   x30
412C:  MOVLW  02
412E:  MOVWF  x31
4130:  MOVLB  0
4132:  CALL   2110
....................             enable_interrupts(global);tiempo_purga=1; 
4136:  MOVLW  C0
4138:  IORWF  FF2,F
413A:  MOVLB  4
413C:  BSF    x4D.6
....................          }// Esta parte se puede agregar en el Menu 1 dependiendo de la ubicación del vidrio. 
....................          else 
413E:  BRA    42BA
4140:  MOVLB  5
....................          { 
....................             glcd_fillScreen(OFF); 
4142:  MOVLB  6
4144:  CLRF   x2E
4146:  MOVLB  0
4148:  CALL   1FEA
....................             strcpy(Menus.Letra,"Clave"); 
414C:  MOVLW  06
414E:  MOVWF  FEA
4150:  MOVLW  17
4152:  MOVWF  FE9
4154:  MOVFF  FF2,62D
4158:  BCF    FF2.7
415A:  MOVLW  00
415C:  CALL   0EEE
4160:  TBLRD*-
4162:  TBLRD*+
4164:  MOVF   FF5,W
4166:  MOVWF  FEE
4168:  IORLW  00
416A:  BNZ   4162
416C:  MOVLB  6
416E:  BTFSC  x2D.7
4170:  BSF    FF2.7
....................             displayMenu(Menus.Letra,30,0,0,2); 
4172:  MOVLW  06
4174:  MOVWF  x2E
4176:  MOVLW  17
4178:  MOVWF  x2D
417A:  MOVLW  1E
417C:  MOVWF  x2F
417E:  CLRF   x30
4180:  CLRF   x31
4182:  MOVLW  02
4184:  MOVWF  x32
4186:  MOVLB  0
4188:  CALL   2044
....................             strcpy(Menus.Letra,"Incorrecta"); 
418C:  MOVLW  06
418E:  MOVWF  FEA
4190:  MOVLW  17
4192:  MOVWF  FE9
4194:  MOVFF  FF2,62D
4198:  BCF    FF2.7
419A:  MOVLW  00
419C:  CALL   0F32
41A0:  TBLRD*-
41A2:  TBLRD*+
41A4:  MOVF   FF5,W
41A6:  MOVWF  FEE
41A8:  IORLW  00
41AA:  BNZ   41A2
41AC:  MOVLB  6
41AE:  BTFSC  x2D.7
41B0:  BSF    FF2.7
....................             displayMenu(Menus.Letra,0,30,0,2); 
41B2:  MOVLW  06
41B4:  MOVWF  x2E
41B6:  MOVLW  17
41B8:  MOVWF  x2D
41BA:  CLRF   x2F
41BC:  MOVLW  1E
41BE:  MOVWF  x30
41C0:  CLRF   x31
41C2:  MOVLW  02
41C4:  MOVWF  x32
41C6:  MOVLB  0
41C8:  CALL   2044
....................             unidad=1;glcd_update();delay_ms(1000);Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0;glcd_fillScreen(OFF); 
41CC:  MOVLW  01
41CE:  MOVLB  5
41D0:  MOVWF  x0B
41D2:  MOVLB  0
41D4:  CALL   18B4
41D8:  MOVLW  04
41DA:  MOVLB  6
41DC:  MOVWF  x2D
41DE:  MOVLW  FA
41E0:  MOVWF  x2E
41E2:  MOVLB  0
41E4:  CALL   1DE0
41E8:  MOVLB  6
41EA:  DECFSZ x2D,F
41EC:  BRA    41DE
41EE:  MOVLB  5
41F0:  CLRF   x5B
41F2:  CLRF   x5C
41F4:  CLRF   x5D
41F6:  CLRF   x5E
41F8:  MOVLB  6
41FA:  CLRF   x2E
41FC:  MOVLB  0
41FE:  CALL   1FEA
....................             glcd_rect(0, 0, 127, 25, YES, ON);strcpy(Menus.Letra,"Clave");glcd_text57(25, 1, Menus.Letra, 3, OFF);displayContrasena(Contrasena[0],20,30,1); 
4202:  MOVLB  6
4204:  CLRF   x44
4206:  CLRF   x45
4208:  MOVLW  7F
420A:  MOVWF  x46
420C:  MOVLW  19
420E:  MOVWF  x47
4210:  MOVLW  01
4212:  MOVWF  x48
4214:  MOVWF  x49
4216:  MOVLB  0
4218:  CALL   1B66
421C:  MOVLW  06
421E:  MOVWF  FEA
4220:  MOVLW  17
4222:  MOVWF  FE9
4224:  MOVFF  FF2,62D
4228:  BCF    FF2.7
422A:  MOVLW  00
422C:  CALL   0EEE
4230:  TBLRD*-
4232:  TBLRD*+
4234:  MOVF   FF5,W
4236:  MOVWF  FEE
4238:  IORLW  00
423A:  BNZ   4232
423C:  MOVLB  6
423E:  BTFSC  x2D.7
4240:  BSF    FF2.7
4242:  MOVLW  19
4244:  MOVWF  x44
4246:  MOVLW  01
4248:  MOVWF  x45
424A:  MOVLW  06
424C:  MOVWF  x47
424E:  MOVLW  17
4250:  MOVWF  x46
4252:  MOVLW  03
4254:  MOVWF  x48
4256:  CLRF   x49
4258:  MOVLB  0
425A:  CALL   1C28
425E:  MOVFF  55B,62F
4262:  MOVLW  14
4264:  MOVLB  6
4266:  MOVWF  x30
4268:  MOVLW  1E
426A:  MOVWF  x31
426C:  MOVLW  01
426E:  MOVWF  x32
4270:  MOVLB  0
4272:  CALL   1F34
....................             displayContrasena(Contrasena[1],40,30,0);displayContrasena(Contrasena[2],60,30,0);displayContrasena(Contrasena[0],80,30,0); 
4276:  MOVFF  55C,62F
427A:  MOVLW  28
427C:  MOVLB  6
427E:  MOVWF  x30
4280:  MOVLW  1E
4282:  MOVWF  x31
4284:  CLRF   x32
4286:  MOVLB  0
4288:  CALL   1F34
428C:  MOVFF  55D,62F
4290:  MOVLW  3C
4292:  MOVLB  6
4294:  MOVWF  x30
4296:  MOVLW  1E
4298:  MOVWF  x31
429A:  CLRF   x32
429C:  MOVLB  0
429E:  CALL   1F34
42A2:  MOVFF  55B,62F
42A6:  MOVLW  50
42A8:  MOVLB  6
42AA:  MOVWF  x30
42AC:  MOVLW  1E
42AE:  MOVWF  x31
42B0:  CLRF   x32
42B2:  MOVLB  0
42B4:  CALL   1F34
42B8:  MOVLB  4
42BA:  MOVLB  5
....................          } 
....................       } 
....................       } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==1)//Menu de Purga. 
42BC:  DECFSZ x0A,W
42BE:  BRA    4434
....................       {  
....................          glcd_text57(15, 1, Tiempo, 1, ON); 
42C0:  MOVLW  0F
42C2:  MOVLB  6
42C4:  MOVWF  x44
42C6:  MOVLW  01
42C8:  MOVWF  x45
42CA:  MOVLW  04
42CC:  MOVWF  x47
42CE:  MOVLW  81
42D0:  MOVWF  x46
42D2:  MOVLW  01
42D4:  MOVWF  x48
42D6:  MOVWF  x49
42D8:  MOVLB  0
42DA:  CALL   1C28
....................          Lectura_Esclavos(); 
42DE:  CALL   28C2
....................          // Para que inicie el tiempo de purga se debe tener el vidrio en la altura adecuada. 
....................          // Una vez ubicado el vidrio se debe encender la Luz Blanca y el Ventilador e iniciar el Tiempo de purga. 
....................          //Motor(1); 
....................          tiempo_purga=1;LuzBlanca=10;LuzUV=10;Toma=5;Alarma=10;Motor=5; 
42E2:  MOVLB  4
42E4:  BSF    x4D.6
42E6:  MOVLW  0A
42E8:  MOVLB  5
42EA:  MOVWF  x19
42EC:  MOVWF  x1A
42EE:  MOVLW  05
42F0:  MOVWF  x1D
42F2:  MOVLW  0A
42F4:  MOVWF  x1C
42F6:  MOVLW  05
42F8:  MOVWF  x1B
....................          glcd_rect(9, 54, 120, 64, YES, OFF); 
42FA:  MOVLW  09
42FC:  MOVLB  6
42FE:  MOVWF  x44
4300:  MOVLW  36
4302:  MOVWF  x45
4304:  MOVLW  78
4306:  MOVWF  x46
4308:  MOVLW  40
430A:  MOVWF  x47
430C:  MOVLW  01
430E:  MOVWF  x48
4310:  CLRF   x49
4312:  MOVLB  0
4314:  CALL   1B66
....................           
....................          displayTiempo(Tpurga[3],20,20,0,2);displayTiempo(Tpurga[2],40,20,0,2);glcd_text57(60, 22, Dos_puntos, 2, ON); 
4318:  MOVFF  53E,62D
431C:  MOVLW  14
431E:  MOVLB  6
4320:  MOVWF  x2E
4322:  MOVWF  x2F
4324:  CLRF   x30
4326:  MOVLW  02
4328:  MOVWF  x31
432A:  MOVLB  0
432C:  CALL   2110
4330:  MOVFF  53D,62D
4334:  MOVLW  28
4336:  MOVLB  6
4338:  MOVWF  x2E
433A:  MOVLW  14
433C:  MOVWF  x2F
433E:  CLRF   x30
4340:  MOVLW  02
4342:  MOVWF  x31
4344:  MOVLB  0
4346:  CALL   2110
434A:  MOVLW  3C
434C:  MOVLB  6
434E:  MOVWF  x44
4350:  MOVLW  16
4352:  MOVWF  x45
4354:  MOVLW  04
4356:  MOVWF  x47
4358:  MOVLW  74
435A:  MOVWF  x46
435C:  MOVLW  02
435E:  MOVWF  x48
4360:  MOVLW  01
4362:  MOVWF  x49
4364:  MOVLB  0
4366:  CALL   1C28
....................          displayTiempo(Tpurga[1],70,20,0,2);displayTiempo(Tpurga[0],90,20,0,2);         
436A:  MOVFF  53C,62D
436E:  MOVLW  46
4370:  MOVLB  6
4372:  MOVWF  x2E
4374:  MOVLW  14
4376:  MOVWF  x2F
4378:  CLRF   x30
437A:  MOVLW  02
437C:  MOVWF  x31
437E:  MOVLB  0
4380:  CALL   2110
4384:  MOVFF  53B,62D
4388:  MOVLW  5A
438A:  MOVLB  6
438C:  MOVWF  x2E
438E:  MOVLW  14
4390:  MOVWF  x2F
4392:  CLRF   x30
4394:  MOVLW  02
4396:  MOVWF  x31
4398:  MOVLB  0
439A:  CALL   2110
....................        
....................          if(RIGHT) 
439E:  BSF    F92.2
43A0:  BTFSS  F80.2
43A2:  BRA    43D4
....................          { 
....................             delay_ms(1000); 
43A4:  MOVLW  04
43A6:  MOVLB  6
43A8:  MOVWF  x2D
43AA:  MOVLW  FA
43AC:  MOVWF  x2E
43AE:  MOVLB  0
43B0:  CALL   1DE0
43B4:  MOVLB  6
43B6:  DECFSZ x2D,F
43B8:  BRA    43AA
....................             if(RIGHT) 
43BA:  BSF    F92.2
43BC:  BTFSS  F80.2
43BE:  BRA    43D6
....................             { 
....................                tiempo_purga=0;Menu=2;glcd_fillScreen(OFF); 
43C0:  MOVLB  4
43C2:  BCF    x4D.6
43C4:  MOVLW  02
43C6:  MOVLB  5
43C8:  MOVWF  x0A
43CA:  MOVLB  6
43CC:  CLRF   x2E
43CE:  MOVLB  0
43D0:  CALL   1FEA
43D4:  MOVLB  6
....................             } 
....................          } 
....................         
....................          if((Tpurga[0]>=Tpurgap[0])&&(Tpurga[1]>=Tpurgap[1])&&(Tpurga[2]>=Tpurgap[2])&&(Tpurga[3]>=Tpurgap[3])) 
43D6:  MOVLB  5
43D8:  MOVF   x3F,W
43DA:  XORLW  80
43DC:  MOVWF  00
43DE:  MOVF   x3B,W
43E0:  XORLW  80
43E2:  SUBWF  00,W
43E4:  BZ    43E8
43E6:  BC    4434
43E8:  MOVF   x40,W
43EA:  XORLW  80
43EC:  MOVWF  00
43EE:  MOVF   x3C,W
43F0:  XORLW  80
43F2:  SUBWF  00,W
43F4:  BZ    43F8
43F6:  BC    4434
43F8:  MOVF   x41,W
43FA:  XORLW  80
43FC:  MOVWF  00
43FE:  MOVF   x3D,W
4400:  XORLW  80
4402:  SUBWF  00,W
4404:  BZ    4408
4406:  BC    4434
4408:  MOVF   x42,W
440A:  XORLW  80
440C:  MOVWF  00
440E:  MOVF   x3E,W
4410:  XORLW  80
4412:  SUBWF  00,W
4414:  BZ    4418
4416:  BC    4434
....................          { 
....................             tiempo_purga=0;Menu=2;glcd_fillScreen(OFF);flag_luz=!flag_luz;flag_blower=1; 
4418:  MOVLB  4
441A:  BCF    x4D.6
441C:  MOVLW  02
441E:  MOVLB  5
4420:  MOVWF  x0A
4422:  MOVLB  6
4424:  CLRF   x2E
4426:  MOVLB  0
4428:  CALL   1FEA
442C:  MOVLB  4
442E:  BTG    x4D.3
4430:  BSF    x4D.1
4432:  MOVLB  5
....................          }       
....................       } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==2) //Menu General. 
4434:  MOVF   x0A,W
4436:  SUBLW  02
4438:  BTFSS  FD8.2
443A:  BRA    4A5C
....................       {          
....................          w=0; 
443C:  MOVLB  4
443E:  BCF    x4D.5
....................          glcd_imagen(4); 
4440:  MOVLW  04
4442:  MOVLB  6
4444:  MOVWF  x2D
4446:  MOVLB  0
4448:  CALL   29DE
....................          glcd_text57(0, 1, Inflowt, 1, ON); 
444C:  MOVLB  6
444E:  CLRF   x44
4450:  MOVLW  01
4452:  MOVWF  x45
4454:  MOVLW  04
4456:  MOVWF  x47
4458:  MOVLW  A6
445A:  MOVWF  x46
445C:  MOVLW  01
445E:  MOVWF  x48
4460:  MOVWF  x49
4462:  MOVLB  0
4464:  CALL   1C28
....................          glcd_text57(0, 21, Downflowt, 1, ON); 
4468:  MOVLB  6
446A:  CLRF   x44
446C:  MOVLW  15
446E:  MOVWF  x45
4470:  MOVLW  04
4472:  MOVWF  x47
4474:  MOVLW  B1
4476:  MOVWF  x46
4478:  MOVLW  01
447A:  MOVWF  x48
447C:  MOVWF  x49
447E:  MOVLB  0
4480:  CALL   1C28
....................          glcd_text57(0, 35, Vida_Filtro, 1, ON); 
4484:  MOVLB  6
4486:  CLRF   x44
4488:  MOVLW  23
448A:  MOVWF  x45
448C:  MOVLW  04
448E:  MOVWF  x47
4490:  MOVLW  E4
4492:  MOVWF  x46
4494:  MOVLW  01
4496:  MOVWF  x48
4498:  MOVWF  x49
449A:  MOVLB  0
449C:  CALL   1C28
....................          //displayTiempo(Ttrabajo[3],60,28,0,1);displayTiempo(Ttrabajo[2],67,28,0,1);displayTiempo(Ttrabajo[1],74,28,0,1);displayTiempo(Ttrabajo[0],82,28,0,1); 
....................          //glcd_text57(0, 43, Vida_UV, 1, ON); 
....................          //displayTiempo(Tuv[3],60,42,0,1);displayTiempo(Tuv[2],67,42,0,1);displayTiempo(Tuv[1],74,42,0,1);displayTiempo(Tuv[0],82,42,0,1);        
....................          //UVTime=Tuv[0]+(Tuv[1]*10)+(Tuv[2]*100)+(Tuv[3]*1000);          
....................           
....................          if(imprimir==1) 
44A0:  MOVLB  4
44A2:  BTFSS  x4C.7
44A4:  BRA    44E6
....................          { 
....................             Lectura_Esclavos(); 
44A6:  MOVLB  0
44A8:  CALL   28C2
....................             Downflow=Inflow; 
44AC:  MOVFF  566,56A
44B0:  MOVFF  565,569
44B4:  MOVFF  564,568
44B8:  MOVFF  563,567
....................             //displayfloat(Inflow,70,1,0,1); 
....................             displayfloat(Downflow,70,21,0,1);   
44BC:  MOVFF  56A,634
44C0:  MOVFF  569,633
44C4:  MOVFF  568,632
44C8:  MOVFF  567,631
44CC:  MOVLW  46
44CE:  MOVLB  6
44D0:  MOVWF  x35
44D2:  MOVLW  15
44D4:  MOVWF  x36
44D6:  CLRF   x37
44D8:  MOVLW  01
44DA:  MOVWF  x38
44DC:  MOVLB  0
44DE:  CALL   2E56
....................             imprimir=0; 
44E2:  MOVLB  4
44E4:  BCF    x4C.7
....................          } 
....................           
....................          if(flag_blower==1) 
44E6:  BTFSS  x4D.1
44E8:  BRA    45D8
....................          { 
....................             glcd_imagen(5);tiempo_trabajo=1;Motor=5;Toma=5; 
44EA:  MOVLW  05
44EC:  MOVLB  6
44EE:  MOVWF  x2D
44F0:  MOVLB  0
44F2:  CALL   29DE
44F6:  MOVLB  4
44F8:  BSF    x4E.0
44FA:  MOVLW  05
44FC:  MOVLB  5
44FE:  MOVWF  x1B
4500:  MOVWF  x1D
....................             if(guardatrabajo==1) 
4502:  MOVLB  4
4504:  BTFSS  x4E.5
4506:  BRA    45D6
....................             { 
....................                guardatrabajo=0;write_eeprom(30,minutos_trabajo); 
4508:  BCF    x4E.5
450A:  MOVLW  1E
450C:  MOVWF  FA9
450E:  MOVFF  537,FA8
4512:  BCF    FA6.6
4514:  BCF    FA6.7
4516:  BSF    FA6.2
4518:  MOVF   FF2,W
451A:  MOVWF  00
451C:  BCF    FF2.7
451E:  MOVLB  F
4520:  MOVLW  55
4522:  MOVWF  FA7
4524:  MOVLW  AA
4526:  MOVWF  FA7
4528:  BSF    FA6.1
452A:  BTFSC  FA6.1
452C:  BRA    452A
452E:  BCF    FA6.2
4530:  MOVF   00,W
4532:  IORWF  FF2,F
....................                write_eeprom(16,Ttrabajo[0]);write_eeprom(17,Ttrabajo[1]);write_eeprom(18,Ttrabajo[2]);write_eeprom(19,Ttrabajo[3]); 
4534:  MOVLW  10
4536:  MOVWF  FA9
4538:  MOVFF  557,FA8
453C:  BCF    FA6.6
453E:  BCF    FA6.7
4540:  BSF    FA6.2
4542:  MOVFF  FF2,00
4546:  BCF    FF2.7
4548:  MOVLW  55
454A:  MOVWF  FA7
454C:  MOVLW  AA
454E:  MOVWF  FA7
4550:  BSF    FA6.1
4552:  BTFSC  FA6.1
4554:  BRA    4552
4556:  BCF    FA6.2
4558:  MOVF   00,W
455A:  IORWF  FF2,F
455C:  MOVLW  11
455E:  MOVWF  FA9
4560:  MOVFF  558,FA8
4564:  BCF    FA6.6
4566:  BCF    FA6.7
4568:  BSF    FA6.2
456A:  MOVFF  FF2,00
456E:  BCF    FF2.7
4570:  MOVLW  55
4572:  MOVWF  FA7
4574:  MOVLW  AA
4576:  MOVWF  FA7
4578:  BSF    FA6.1
457A:  BTFSC  FA6.1
457C:  BRA    457A
457E:  BCF    FA6.2
4580:  MOVF   00,W
4582:  IORWF  FF2,F
4584:  MOVLW  12
4586:  MOVWF  FA9
4588:  MOVFF  559,FA8
458C:  BCF    FA6.6
458E:  BCF    FA6.7
4590:  BSF    FA6.2
4592:  MOVFF  FF2,00
4596:  BCF    FF2.7
4598:  MOVLW  55
459A:  MOVWF  FA7
459C:  MOVLW  AA
459E:  MOVWF  FA7
45A0:  BSF    FA6.1
45A2:  BTFSC  FA6.1
45A4:  BRA    45A2
45A6:  BCF    FA6.2
45A8:  MOVF   00,W
45AA:  IORWF  FF2,F
45AC:  MOVLW  13
45AE:  MOVWF  FA9
45B0:  MOVFF  55A,FA8
45B4:  BCF    FA6.6
45B6:  BCF    FA6.7
45B8:  BSF    FA6.2
45BA:  MOVFF  FF2,00
45BE:  BCF    FF2.7
45C0:  MOVLW  55
45C2:  MOVWF  FA7
45C4:  MOVLW  AA
45C6:  MOVWF  FA7
45C8:  BSF    FA6.1
45CA:  BTFSC  FA6.1
45CC:  BRA    45CA
45CE:  BCF    FA6.2
45D0:  MOVF   00,W
45D2:  IORWF  FF2,F
45D4:  MOVLB  4
....................             } 
....................          } 
....................          else 
45D6:  BRA    46E0
....................          { 
....................             Filtro_Downflow=0; 
45D8:  MOVLB  5
45DA:  CLRF   x6E
45DC:  CLRF   x6D
45DE:  CLRF   x6C
45E0:  CLRF   x6B
....................             glcd_rect(102, 45, 127, 64, YES, OFF);tiempo_trabajo=0;Motor=10;Toma=10; 
45E2:  MOVLW  66
45E4:  MOVLB  6
45E6:  MOVWF  x44
45E8:  MOVLW  2D
45EA:  MOVWF  x45
45EC:  MOVLW  7F
45EE:  MOVWF  x46
45F0:  MOVLW  40
45F2:  MOVWF  x47
45F4:  MOVLW  01
45F6:  MOVWF  x48
45F8:  CLRF   x49
45FA:  MOVLB  0
45FC:  CALL   1B66
4600:  MOVLB  4
4602:  BCF    x4E.0
4604:  MOVLW  0A
4606:  MOVLB  5
4608:  MOVWF  x1B
460A:  MOVWF  x1D
....................             if(guardatrabajo==0) 
460C:  MOVLB  4
460E:  BTFSC  x4E.5
4610:  BRA    46E0
....................             { 
....................                guardatrabajo=1;write_eeprom(30,minutos_trabajo); 
4612:  BSF    x4E.5
4614:  MOVLW  1E
4616:  MOVWF  FA9
4618:  MOVFF  537,FA8
461C:  BCF    FA6.6
461E:  BCF    FA6.7
4620:  BSF    FA6.2
4622:  MOVF   FF2,W
4624:  MOVWF  00
4626:  BCF    FF2.7
4628:  MOVLB  F
462A:  MOVLW  55
462C:  MOVWF  FA7
462E:  MOVLW  AA
4630:  MOVWF  FA7
4632:  BSF    FA6.1
4634:  BTFSC  FA6.1
4636:  BRA    4634
4638:  BCF    FA6.2
463A:  MOVF   00,W
463C:  IORWF  FF2,F
....................                write_eeprom(16,Ttrabajo[0]);write_eeprom(17,Ttrabajo[1]);write_eeprom(18,Ttrabajo[2]);write_eeprom(19,Ttrabajo[3]); 
463E:  MOVLW  10
4640:  MOVWF  FA9
4642:  MOVFF  557,FA8
4646:  BCF    FA6.6
4648:  BCF    FA6.7
464A:  BSF    FA6.2
464C:  MOVFF  FF2,00
4650:  BCF    FF2.7
4652:  MOVLW  55
4654:  MOVWF  FA7
4656:  MOVLW  AA
4658:  MOVWF  FA7
465A:  BSF    FA6.1
465C:  BTFSC  FA6.1
465E:  BRA    465C
4660:  BCF    FA6.2
4662:  MOVF   00,W
4664:  IORWF  FF2,F
4666:  MOVLW  11
4668:  MOVWF  FA9
466A:  MOVFF  558,FA8
466E:  BCF    FA6.6
4670:  BCF    FA6.7
4672:  BSF    FA6.2
4674:  MOVFF  FF2,00
4678:  BCF    FF2.7
467A:  MOVLW  55
467C:  MOVWF  FA7
467E:  MOVLW  AA
4680:  MOVWF  FA7
4682:  BSF    FA6.1
4684:  BTFSC  FA6.1
4686:  BRA    4684
4688:  BCF    FA6.2
468A:  MOVF   00,W
468C:  IORWF  FF2,F
468E:  MOVLW  12
4690:  MOVWF  FA9
4692:  MOVFF  559,FA8
4696:  BCF    FA6.6
4698:  BCF    FA6.7
469A:  BSF    FA6.2
469C:  MOVFF  FF2,00
46A0:  BCF    FF2.7
46A2:  MOVLW  55
46A4:  MOVWF  FA7
46A6:  MOVLW  AA
46A8:  MOVWF  FA7
46AA:  BSF    FA6.1
46AC:  BTFSC  FA6.1
46AE:  BRA    46AC
46B0:  BCF    FA6.2
46B2:  MOVF   00,W
46B4:  IORWF  FF2,F
46B6:  MOVLW  13
46B8:  MOVWF  FA9
46BA:  MOVFF  55A,FA8
46BE:  BCF    FA6.6
46C0:  BCF    FA6.7
46C2:  BSF    FA6.2
46C4:  MOVFF  FF2,00
46C8:  BCF    FF2.7
46CA:  MOVLW  55
46CC:  MOVWF  FA7
46CE:  MOVLW  AA
46D0:  MOVWF  FA7
46D2:  BSF    FA6.1
46D4:  BTFSC  FA6.1
46D6:  BRA    46D4
46D8:  BCF    FA6.2
46DA:  MOVF   00,W
46DC:  IORWF  FF2,F
46DE:  MOVLB  4
....................             } 
....................          } 
....................           
.................... // Dibujo de barra de estado de filtro                   
....................          barra=100.0*(Filtro_Downflow/2.0); 
46E0:  MOVFF  56E,635
46E4:  MOVFF  56D,634
46E8:  MOVFF  56C,633
46EC:  MOVFF  56B,632
46F0:  MOVLB  6
46F2:  CLRF   x39
46F4:  CLRF   x38
46F6:  CLRF   x37
46F8:  MOVLW  80
46FA:  MOVWF  x36
46FC:  MOVLB  0
46FE:  CALL   11A8
4702:  MOVLB  6
4704:  CLRF   x52
4706:  CLRF   x51
4708:  MOVLW  48
470A:  MOVWF  x50
470C:  MOVLW  85
470E:  MOVWF  x4F
4710:  MOVFF  03,656
4714:  MOVFF  02,655
4718:  MOVFF  01,654
471C:  MOVFF  00,653
4720:  MOVLB  0
4722:  CALL   15BA
4726:  MOVFF  03,576
472A:  MOVFF  02,575
472E:  MOVFF  01,574
4732:  MOVFF  00,573
....................          if(barra>100.0) 
4736:  MOVLB  6
4738:  CLRF   x35
473A:  CLRF   x34
473C:  MOVLW  48
473E:  MOVWF  x33
4740:  MOVLW  85
4742:  MOVWF  x32
4744:  MOVFF  576,639
4748:  MOVFF  575,638
474C:  MOVFF  574,637
4750:  MOVFF  573,636
4754:  MOVLB  0
4756:  CALL   2296
475A:  BNC   476A
....................             barra=100.0; 
475C:  MOVLB  5
475E:  CLRF   x76
4760:  CLRF   x75
4762:  MOVLW  48
4764:  MOVWF  x74
4766:  MOVLW  85
4768:  MOVWF  x73
....................          barra=barra/2; 
476A:  MOVFF  576,635
476E:  MOVFF  575,634
4772:  MOVFF  574,633
4776:  MOVFF  573,632
477A:  MOVLB  6
477C:  CLRF   x39
477E:  CLRF   x38
4780:  CLRF   x37
4782:  MOVLW  80
4784:  MOVWF  x36
4786:  MOVLB  0
4788:  CALL   11A8
478C:  MOVFF  03,576
4790:  MOVFF  02,575
4794:  MOVFF  01,574
4798:  MOVFF  00,573
....................          glcd_rect(42, 34, (int8)(barra_old)+42, 41, YES, OFF);  // Clears the old bar 
479C:  MOVFF  57A,630
47A0:  MOVFF  579,62F
47A4:  MOVFF  578,62E
47A8:  MOVFF  577,62D
47AC:  CALL   157E
47B0:  MOVLW  2A
47B2:  ADDWF  01,W
47B4:  MOVLB  6
47B6:  MOVWF  x2D
47B8:  MOVLW  2A
47BA:  MOVWF  x44
47BC:  MOVLW  22
47BE:  MOVWF  x45
47C0:  MOVFF  62D,646
47C4:  MOVLW  29
47C6:  MOVWF  x47
47C8:  MOVLW  01
47CA:  MOVWF  x48
47CC:  CLRF   x49
47CE:  MOVLB  0
47D0:  CALL   1B66
....................          glcd_rect(42, 34, (int8)(barra)+42, 41, YES, ON);             // Draws a new bar 
47D4:  MOVFF  576,630
47D8:  MOVFF  575,62F
47DC:  MOVFF  574,62E
47E0:  MOVFF  573,62D
47E4:  CALL   157E
47E8:  MOVLW  2A
47EA:  ADDWF  01,W
47EC:  MOVLB  6
47EE:  MOVWF  x2D
47F0:  MOVLW  2A
47F2:  MOVWF  x44
47F4:  MOVLW  22
47F6:  MOVWF  x45
47F8:  MOVFF  62D,646
47FC:  MOVLW  29
47FE:  MOVWF  x47
4800:  MOVLW  01
4802:  MOVWF  x48
4804:  MOVWF  x49
4806:  MOVLB  0
4808:  CALL   1B66
....................          glcd_rect(40, 32, 94, 43, NO, ON);             // Draws a new bar 
480C:  MOVLW  28
480E:  MOVLB  6
4810:  MOVWF  x44
4812:  MOVLW  20
4814:  MOVWF  x45
4816:  MOVLW  5E
4818:  MOVWF  x46
481A:  MOVLW  2B
481C:  MOVWF  x47
481E:  CLRF   x48
4820:  MOVLW  01
4822:  MOVWF  x49
4824:  MOVLB  0
4826:  CALL   1B66
....................          barra_old=barra; 
482A:  MOVFF  576,57A
482E:  MOVFF  575,579
4832:  MOVFF  574,578
4836:  MOVFF  573,577
.................... // Fin de Dibujo de barra de estado de Filtro 
.................... /* 
.................... // Dibujo de barra de estado de Luz UV 
....................          barra2=100.0*(UVTime/1000.0); 
....................          if(barra2>100.0) 
....................             barra2=100.0; 
....................          barra2=barra2/2; 
....................          glcd_rect(42, 42, (int8)(barra_old2)+42, 49, YES, OFF);  // Clears the old bar 
....................          glcd_rect(42, 42, (int8)(barra2)+42, 49, YES, ON);             // Draws a new bar 
....................          glcd_rect(40, 40, 94, 51, NO, ON);             // Draws a new bar 
....................          barra_old2=barra2; 
.................... // Fin de Dibujo de barra de estado de Luz UV 
.................... */ 
....................  
....................          if(Downflow<0.50) 
483A:  MOVFF  56A,635
483E:  MOVFF  569,634
4842:  MOVFF  568,633
4846:  MOVFF  567,632
484A:  MOVLB  6
484C:  CLRF   x39
484E:  CLRF   x38
4850:  CLRF   x37
4852:  MOVLW  7E
4854:  MOVWF  x36
4856:  MOVLB  0
4858:  CALL   2296
485C:  BNC   4898
....................          { 
....................             flag_latencia=1; 
485E:  MOVLB  4
4860:  BSF    x4E.3
....................             if(Latencia==1) 
4862:  BTFSS  x4E.2
4864:  BRA    4894
....................             {          
....................                //strcpy(Menus.Letra,"!Perdida Flujo!"); 
....................                //displayMenu(Menus.Letra,0,55,0,1); 
....................                if(Downflow<0.50) 
4866:  MOVFF  56A,635
486A:  MOVFF  569,634
486E:  MOVFF  568,633
4872:  MOVFF  567,632
4876:  MOVLB  6
4878:  CLRF   x39
487A:  CLRF   x38
487C:  CLRF   x37
487E:  MOVLW  7E
4880:  MOVWF  x36
4882:  MOVLB  0
4884:  CALL   2296
4888:  BNC   4892
....................                { 
....................                   Alarma=5; 
488A:  MOVLW  05
488C:  MOVLB  5
488E:  MOVWF  x1C
4890:  MOVLB  0
4892:  MOVLB  4
....................                } 
....................             } 
....................          } 
....................          else 
4894:  BRA    48CA
4896:  MOVLB  0
....................          { 
....................             Latencia=0;t_latencia=0;flag_latencia=0; 
4898:  MOVLB  4
489A:  BCF    x4E.2
489C:  MOVLB  5
489E:  CLRF   x34
48A0:  CLRF   x33
48A2:  MOVLB  4
48A4:  BCF    x4E.3
....................             glcd_rect(0, 54, 104, 64, YES, OFF);Alarma=10; 
48A6:  MOVLB  6
48A8:  CLRF   x44
48AA:  MOVLW  36
48AC:  MOVWF  x45
48AE:  MOVLW  68
48B0:  MOVWF  x46
48B2:  MOVLW  40
48B4:  MOVWF  x47
48B6:  MOVLW  01
48B8:  MOVWF  x48
48BA:  CLRF   x49
48BC:  MOVLB  0
48BE:  CALL   1B66
48C2:  MOVLW  0A
48C4:  MOVLB  5
48C6:  MOVWF  x1C
48C8:  MOVLB  4
....................          } 
....................        
....................          if(flag_luz==1) 
48CA:  BTFSS  x4D.3
48CC:  BRA    48E4
....................          { 
....................             glcd_imagen(3);LuzBlanca=5; 
48CE:  MOVLW  03
48D0:  MOVLB  6
48D2:  MOVWF  x2D
48D4:  MOVLB  0
48D6:  CALL   29DE
48DA:  MOVLW  05
48DC:  MOVLB  5
48DE:  MOVWF  x19
....................          } 
....................          else 
48E0:  BRA    4908
48E2:  MOVLB  4
....................          { 
....................             glcd_rect(102, 14, 127, 28, YES, OFF);LuzBlanca=10; 
48E4:  MOVLW  66
48E6:  MOVLB  6
48E8:  MOVWF  x44
48EA:  MOVLW  0E
48EC:  MOVWF  x45
48EE:  MOVLW  7F
48F0:  MOVWF  x46
48F2:  MOVLW  1C
48F4:  MOVWF  x47
48F6:  MOVLW  01
48F8:  MOVWF  x48
48FA:  CLRF   x49
48FC:  MOVLB  0
48FE:  CALL   1B66
4902:  MOVLW  0A
4904:  MOVLB  5
4906:  MOVWF  x19
....................          } 
....................           
....................           
....................          if(Alarma==5) 
4908:  MOVF   x1C,W
490A:  SUBLW  05
490C:  BNZ   494A
....................          { 
....................             glcd_rect(0, 55, 100, 63, YES, OFF); 
490E:  MOVLB  6
4910:  CLRF   x44
4912:  MOVLW  37
4914:  MOVWF  x45
4916:  MOVLW  64
4918:  MOVWF  x46
491A:  MOVLW  3F
491C:  MOVWF  x47
491E:  MOVLW  01
4920:  MOVWF  x48
4922:  CLRF   x49
4924:  MOVLB  0
4926:  CALL   1B66
....................             glcd_text57(0,55, Perdida, 1, ON); 
492A:  MOVLB  6
492C:  CLRF   x44
492E:  MOVLW  37
4930:  MOVWF  x45
4932:  MOVLW  04
4934:  MOVWF  x47
4936:  MOVLW  FA
4938:  MOVWF  x46
493A:  MOVLW  01
493C:  MOVWF  x48
493E:  MOVWF  x49
4940:  MOVLB  0
4942:  CALL   1C28
....................          } 
....................          else 
4946:  BRA    4966
4948:  MOVLB  5
....................          {                
....................             glcd_rect(0, 55, 100, 63, YES, OFF);             
494A:  MOVLB  6
494C:  CLRF   x44
494E:  MOVLW  37
4950:  MOVWF  x45
4952:  MOVLW  64
4954:  MOVWF  x46
4956:  MOVLW  3F
4958:  MOVWF  x47
495A:  MOVLW  01
495C:  MOVWF  x48
495E:  CLRF   x49
4960:  MOVLB  0
4962:  CALL   1B66
....................          } 
....................              
....................          if(RIGHT)//Si oprime boton de Blower. 
4966:  BSF    F92.2
4968:  BTFSS  F80.2
496A:  BRA    4988
....................          { 
....................             if(Flanco3 == 0) 
496C:  MOVLB  4
496E:  BTFSC  x4C.3
4970:  BRA    4984
....................             { 
....................                Flanco3 = 1;delay_ms(30);flag_blower=!flag_blower; 
4972:  BSF    x4C.3
4974:  MOVLW  1E
4976:  MOVLB  6
4978:  MOVWF  x2E
497A:  MOVLB  0
497C:  CALL   1DE0
4980:  MOVLB  4
4982:  BTG    x4D.1
....................             } 
....................          } 
....................          else 
4984:  BRA    498C
4986:  MOVLB  0
....................          { 
....................             Flanco3 = 0; 
4988:  MOVLB  4
498A:  BCF    x4C.3
....................          } 
....................                 
....................          if(LEFT)//Si oprime boton de Luz UV. 
498C:  BSF    F92.3
498E:  BTFSS  F80.3
4990:  BRA    49BA
....................          { 
....................             if(Flanco4 == 0) 
4992:  BTFSC  x4C.4
4994:  BRA    49B8
....................             { 
....................                Flanco4 = 1;delay_ms(30);flag_uv=!flag_uv; 
4996:  BSF    x4C.4
4998:  MOVLW  1E
499A:  MOVLB  6
499C:  MOVWF  x2E
499E:  MOVLB  0
49A0:  CALL   1DE0
49A4:  MOVLB  4
49A6:  BTG    x4D.0
....................                if(UV2==0) 
49A8:  MOVLB  5
49AA:  MOVF   x1E,F
49AC:  BNZ   49B4
....................                   UV2=10; 
49AE:  MOVLW  0A
49B0:  MOVWF  x1E
....................                else 
49B2:  BRA    49B6
....................                   UV2=0; 
49B4:  CLRF   x1E
49B6:  MOVLB  4
....................             } 
....................          } 
....................          else 
49B8:  BRA    49BC
....................          { 
....................             Flanco4 = 0; 
49BA:  BCF    x4C.4
....................          } 
....................                 
....................          if(DOWN)//Si oprime boton de Luz Blanca. 
49BC:  BSF    F92.1
49BE:  BTFSS  F80.1
49C0:  BRA    49DA
....................          { 
....................             if(Flanco5 == 0) 
49C2:  BTFSC  x4C.5
49C4:  BRA    49D8
....................             { 
....................                Flanco5 = 1;delay_ms(30);flag_luz=!flag_luz; 
49C6:  BSF    x4C.5
49C8:  MOVLW  1E
49CA:  MOVLB  6
49CC:  MOVWF  x2E
49CE:  MOVLB  0
49D0:  CALL   1DE0
49D4:  MOVLB  4
49D6:  BTG    x4D.3
....................             } 
....................          } 
....................          else 
49D8:  BRA    49DC
....................          { 
....................             Flanco5 = 0; 
49DA:  BCF    x4C.5
....................          } 
....................                 
....................          if(UP)//Si oprime boton de Toma. 
49DC:  BSF    F92.0
49DE:  BTFSS  F80.0
49E0:  BRA    4A52
....................          { 
....................             delay_ms(500); 
49E2:  MOVLW  02
49E4:  MOVLB  6
49E6:  MOVWF  x2D
49E8:  MOVLW  FA
49EA:  MOVWF  x2E
49EC:  MOVLB  0
49EE:  CALL   1DE0
49F2:  MOVLB  6
49F4:  DECFSZ x2D,F
49F6:  BRA    49E8
....................             if(UP)//Si oprime boton de Toma. 
49F8:  BSF    F92.0
49FA:  BTFSS  F80.0
49FC:  BRA    4A34
....................             { 
....................                delay_ms(30);Menu=3;//glcd_fillScreen(OFF); 
49FE:  MOVLW  1E
4A00:  MOVWF  x2E
4A02:  MOVLB  0
4A04:  CALL   1DE0
4A08:  MOVLW  03
4A0A:  MOVLB  5
4A0C:  MOVWF  x0A
....................                glcd_init(ON);             //Inicializa la glcd 
4A0E:  MOVLW  01
4A10:  MOVLB  6
4A12:  MOVWF  x2D
4A14:  MOVLB  0
4A16:  CALL   2F3C
....................                glcd_fillScreen(OFF);      //Limpia la pantalla 
4A1A:  MOVLB  6
4A1C:  CLRF   x2E
4A1E:  MOVLB  0
4A20:  CALL   1FEA
....................                glcd_update();   
4A24:  CALL   18B4
....................                LuzBlanca=10;LuzUV=10; 
4A28:  MOVLW  0A
4A2A:  MOVLB  5
4A2C:  MOVWF  x19
4A2E:  MOVWF  x1A
....................             } 
....................             else 
4A30:  BRA    4A4E
4A32:  MOVLB  6
....................             { 
....................                if(Flanco6 == 0) 
4A34:  MOVLB  4
4A36:  BTFSC  x4C.6
4A38:  BRA    4A4C
....................                { 
....................                   Flanco6 = 1;delay_ms(30);flag_toma=!flag_toma; 
4A3A:  BSF    x4C.6
4A3C:  MOVLW  1E
4A3E:  MOVLB  6
4A40:  MOVWF  x2E
4A42:  MOVLB  0
4A44:  CALL   1DE0
4A48:  MOVLB  4
4A4A:  BTG    x4D.2
4A4C:  MOVLB  5
....................                } 
....................             } 
....................          } 
....................          else 
4A4E:  BRA    4A54
4A50:  MOVLB  4
....................          { 
....................             Flanco6 = 0; 
4A52:  BCF    x4C.6
....................          } 
....................                 
....................          
....................       Envio_Esclavos(); 
4A54:  MOVLB  0
4A56:  CALL   1838
4A5A:  MOVLB  5
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==3){ //Menu Principal. 
4A5C:  MOVF   x0A,W
4A5E:  SUBLW  03
4A60:  BTFSS  FD8.2
4A62:  BRA    4D42
....................              
....................       strcpy(Menus.Letra,"Menu"); 
4A64:  MOVLW  06
4A66:  MOVWF  FEA
4A68:  MOVLW  17
4A6A:  MOVWF  FE9
4A6C:  MOVFF  FF2,62D
4A70:  BCF    FF2.7
4A72:  MOVLW  00
4A74:  MOVLB  0
4A76:  CALL   0F58
4A7A:  TBLRD*-
4A7C:  TBLRD*+
4A7E:  MOVF   FF5,W
4A80:  MOVWF  FEE
4A82:  IORLW  00
4A84:  BNZ   4A7C
4A86:  MOVLB  6
4A88:  BTFSC  x2D.7
4A8A:  BSF    FF2.7
....................       displayMenu(Menus.Letra,40,0,1,2); 
4A8C:  MOVLW  06
4A8E:  MOVWF  x2E
4A90:  MOVLW  17
4A92:  MOVWF  x2D
4A94:  MOVLW  28
4A96:  MOVWF  x2F
4A98:  CLRF   x30
4A9A:  MOVLW  01
4A9C:  MOVWF  x31
4A9E:  MOVLW  02
4AA0:  MOVWF  x32
4AA2:  MOVLB  0
4AA4:  CALL   2044
....................        
....................       if(Opcion==1)    
4AA8:  MOVLB  5
4AAA:  DECFSZ x0C,W
4AAC:  BRA    4AF4
....................          {strcpy(Menus.Letra,"Ajustes"); 
4AAE:  MOVLW  06
4AB0:  MOVWF  FEA
4AB2:  MOVLW  17
4AB4:  MOVWF  FE9
4AB6:  MOVFF  FF2,62D
4ABA:  BCF    FF2.7
4ABC:  MOVLW  00
4ABE:  MOVLB  0
4AC0:  CALL   0F78
4AC4:  TBLRD*-
4AC6:  TBLRD*+
4AC8:  MOVF   FF5,W
4ACA:  MOVWF  FEE
4ACC:  IORLW  00
4ACE:  BNZ   4AC6
4AD0:  MOVLB  6
4AD2:  BTFSC  x2D.7
4AD4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,19,1,1);} 
4AD6:  MOVLW  06
4AD8:  MOVWF  x2E
4ADA:  MOVLW  17
4ADC:  MOVWF  x2D
4ADE:  CLRF   x2F
4AE0:  MOVLW  13
4AE2:  MOVWF  x30
4AE4:  MOVLW  01
4AE6:  MOVWF  x31
4AE8:  MOVWF  x32
4AEA:  MOVLB  0
4AEC:  CALL   2044
....................       else 
4AF0:  BRA    4B36
4AF2:  MOVLB  5
....................          {strcpy(Menus.Letra,"Ajustes"); 
4AF4:  MOVLW  06
4AF6:  MOVWF  FEA
4AF8:  MOVLW  17
4AFA:  MOVWF  FE9
4AFC:  MOVFF  FF2,62D
4B00:  BCF    FF2.7
4B02:  MOVLW  00
4B04:  MOVLB  0
4B06:  CALL   0F78
4B0A:  TBLRD*-
4B0C:  TBLRD*+
4B0E:  MOVF   FF5,W
4B10:  MOVWF  FEE
4B12:  IORLW  00
4B14:  BNZ   4B0C
4B16:  MOVLB  6
4B18:  BTFSC  x2D.7
4B1A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,19,0,1);} 
4B1C:  MOVLW  06
4B1E:  MOVWF  x2E
4B20:  MOVLW  17
4B22:  MOVWF  x2D
4B24:  CLRF   x2F
4B26:  MOVLW  13
4B28:  MOVWF  x30
4B2A:  CLRF   x31
4B2C:  MOVLW  01
4B2E:  MOVWF  x32
4B30:  MOVLB  0
4B32:  CALL   2044
....................           
....................       if(Opcion==2)    
4B36:  MOVLB  5
4B38:  MOVF   x0C,W
4B3A:  SUBLW  02
4B3C:  BNZ   4B84
....................          {strcpy(Menus.Letra,"Clave"); 
4B3E:  MOVLW  06
4B40:  MOVWF  FEA
4B42:  MOVLW  17
4B44:  MOVWF  FE9
4B46:  MOVFF  FF2,62D
4B4A:  BCF    FF2.7
4B4C:  MOVLW  00
4B4E:  MOVLB  0
4B50:  CALL   0EEE
4B54:  TBLRD*-
4B56:  TBLRD*+
4B58:  MOVF   FF5,W
4B5A:  MOVWF  FEE
4B5C:  IORLW  00
4B5E:  BNZ   4B56
4B60:  MOVLB  6
4B62:  BTFSC  x2D.7
4B64:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,35,1,1);} 
4B66:  MOVLW  06
4B68:  MOVWF  x2E
4B6A:  MOVLW  17
4B6C:  MOVWF  x2D
4B6E:  CLRF   x2F
4B70:  MOVLW  23
4B72:  MOVWF  x30
4B74:  MOVLW  01
4B76:  MOVWF  x31
4B78:  MOVWF  x32
4B7A:  MOVLB  0
4B7C:  CALL   2044
....................       else 
4B80:  BRA    4BC6
4B82:  MOVLB  5
....................          {strcpy(Menus.Letra,"Clave"); 
4B84:  MOVLW  06
4B86:  MOVWF  FEA
4B88:  MOVLW  17
4B8A:  MOVWF  FE9
4B8C:  MOVFF  FF2,62D
4B90:  BCF    FF2.7
4B92:  MOVLW  00
4B94:  MOVLB  0
4B96:  CALL   0EEE
4B9A:  TBLRD*-
4B9C:  TBLRD*+
4B9E:  MOVF   FF5,W
4BA0:  MOVWF  FEE
4BA2:  IORLW  00
4BA4:  BNZ   4B9C
4BA6:  MOVLB  6
4BA8:  BTFSC  x2D.7
4BAA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,35,0,1);}    
4BAC:  MOVLW  06
4BAE:  MOVWF  x2E
4BB0:  MOVLW  17
4BB2:  MOVWF  x2D
4BB4:  CLRF   x2F
4BB6:  MOVLW  23
4BB8:  MOVWF  x30
4BBA:  CLRF   x31
4BBC:  MOVLW  01
4BBE:  MOVWF  x32
4BC0:  MOVLB  0
4BC2:  CALL   2044
....................           
....................        if(Opcion==3)    
4BC6:  MOVLB  5
4BC8:  MOVF   x0C,W
4BCA:  SUBLW  03
4BCC:  BNZ   4C14
....................          {strcpy(Menus.Letra,"Mantenimiento"); 
4BCE:  MOVLW  06
4BD0:  MOVWF  FEA
4BD2:  MOVLW  17
4BD4:  MOVWF  FE9
4BD6:  MOVFF  FF2,62D
4BDA:  BCF    FF2.7
4BDC:  MOVLW  00
4BDE:  MOVLB  0
4BE0:  CALL   0F9A
4BE4:  TBLRD*-
4BE6:  TBLRD*+
4BE8:  MOVF   FF5,W
4BEA:  MOVWF  FEE
4BEC:  IORLW  00
4BEE:  BNZ   4BE6
4BF0:  MOVLB  6
4BF2:  BTFSC  x2D.7
4BF4:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,51,1,1);} 
4BF6:  MOVLW  06
4BF8:  MOVWF  x2E
4BFA:  MOVLW  17
4BFC:  MOVWF  x2D
4BFE:  CLRF   x2F
4C00:  MOVLW  33
4C02:  MOVWF  x30
4C04:  MOVLW  01
4C06:  MOVWF  x31
4C08:  MOVWF  x32
4C0A:  MOVLB  0
4C0C:  CALL   2044
....................       else 
4C10:  BRA    4C56
4C12:  MOVLB  5
....................          {strcpy(Menus.Letra,"Mantenimiento"); 
4C14:  MOVLW  06
4C16:  MOVWF  FEA
4C18:  MOVLW  17
4C1A:  MOVWF  FE9
4C1C:  MOVFF  FF2,62D
4C20:  BCF    FF2.7
4C22:  MOVLW  00
4C24:  MOVLB  0
4C26:  CALL   0F9A
4C2A:  TBLRD*-
4C2C:  TBLRD*+
4C2E:  MOVF   FF5,W
4C30:  MOVWF  FEE
4C32:  IORLW  00
4C34:  BNZ   4C2C
4C36:  MOVLB  6
4C38:  BTFSC  x2D.7
4C3A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,51,0,1);}      
4C3C:  MOVLW  06
4C3E:  MOVWF  x2E
4C40:  MOVLW  17
4C42:  MOVWF  x2D
4C44:  CLRF   x2F
4C46:  MOVLW  33
4C48:  MOVWF  x30
4C4A:  CLRF   x31
4C4C:  MOVLW  01
4C4E:  MOVWF  x32
4C50:  MOVLB  0
4C52:  CALL   2044
....................        glcd_update();  
4C56:  CALL   18B4
....................        if(w==0) 
4C5A:  MOVLB  4
4C5C:  BTFSC  x4D.5
4C5E:  BRA    4C7A
....................        {delay_ms(500);w=1;} 
4C60:  MOVLW  02
4C62:  MOVLB  6
4C64:  MOVWF  x2D
4C66:  MOVLW  FA
4C68:  MOVWF  x2E
4C6A:  MOVLB  0
4C6C:  CALL   1DE0
4C70:  MOVLB  6
4C72:  DECFSZ x2D,F
4C74:  BRA    4C66
4C76:  MOVLB  4
4C78:  BSF    x4D.5
....................           
....................          
....................       if(UP)//Si oprime hacia arriba 
4C7A:  BSF    F92.0
4C7C:  BTFSS  F80.0
4C7E:  BRA    4C9A
....................       {  if(Flanco == 0)  
4C80:  BTFSC  x4C.0
4C82:  BRA    4C98
....................             {Flanco = 1;delay_ms(30);Opcion--; 
4C84:  BSF    x4C.0
4C86:  MOVLW  1E
4C88:  MOVLB  6
4C8A:  MOVWF  x2E
4C8C:  MOVLB  0
4C8E:  CALL   1DE0
4C92:  MOVLB  5
4C94:  DECF   x0C,F
4C96:  MOVLB  4
....................             } 
....................       } 
....................          else 
4C98:  BRA    4C9C
....................             {Flanco = 0;} 
4C9A:  BCF    x4C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4C9C:  BSF    F92.1
4C9E:  BTFSS  F80.1
4CA0:  BRA    4CBC
....................       {  if(Flanco2 == 0)  
4CA2:  BTFSC  x4C.2
4CA4:  BRA    4CBA
....................             {Flanco2 = 1;delay_ms(30);Opcion++; 
4CA6:  BSF    x4C.2
4CA8:  MOVLW  1E
4CAA:  MOVLB  6
4CAC:  MOVWF  x2E
4CAE:  MOVLB  0
4CB0:  CALL   1DE0
4CB4:  MOVLB  5
4CB6:  INCF   x0C,F
4CB8:  MOVLB  4
....................             }      
....................       } 
....................          else 
4CBA:  BRA    4CBE
....................             {Flanco2 = 0;}   
4CBC:  BCF    x4C.2
....................              
....................       if(RIGHT)//Si oprime SET 
4CBE:  BSF    F92.2
4CC0:  BTFSS  F80.2
4CC2:  BRA    4D00
....................       {  if(Flanco1 == 0)  
4CC4:  BTFSC  x4C.1
4CC6:  BRA    4CFE
....................             {Flanco1 = 1;delay_ms(500);Menu=Opcion+3;Opcion=1;glcd_fillscreen(OFF);unidad=1; 
4CC8:  BSF    x4C.1
4CCA:  MOVLW  02
4CCC:  MOVLB  6
4CCE:  MOVWF  x2D
4CD0:  MOVLW  FA
4CD2:  MOVWF  x2E
4CD4:  MOVLB  0
4CD6:  CALL   1DE0
4CDA:  MOVLB  6
4CDC:  DECFSZ x2D,F
4CDE:  BRA    4CD0
4CE0:  MOVLW  03
4CE2:  MOVLB  5
4CE4:  ADDWF  x0C,W
4CE6:  MOVWF  x0A
4CE8:  MOVLW  01
4CEA:  MOVWF  x0C
4CEC:  MOVLB  6
4CEE:  CLRF   x2E
4CF0:  MOVLB  0
4CF2:  CALL   1FEA
4CF6:  MOVLW  01
4CF8:  MOVLB  5
4CFA:  MOVWF  x0B
4CFC:  MOVLB  4
....................             } 
....................       } 
....................          else 
4CFE:  BRA    4D02
....................             {Flanco1 = 0;}   
4D00:  BCF    x4C.1
....................              
....................       if(LEFT)//Si oprime boton de Toma. 
4D02:  BSF    F92.3
4D04:  BTFSS  F80.3
4D06:  BRA    4D2E
....................       {delay_ms(700);Menu=2;glcd_fillscreen(OFF);} 
4D08:  MOVLW  04
4D0A:  MOVLB  6
4D0C:  MOVWF  x2D
4D0E:  MOVLW  AF
4D10:  MOVWF  x2E
4D12:  MOVLB  0
4D14:  CALL   1DE0
4D18:  MOVLB  6
4D1A:  DECFSZ x2D,F
4D1C:  BRA    4D0E
4D1E:  MOVLW  02
4D20:  MOVLB  5
4D22:  MOVWF  x0A
4D24:  MOVLB  6
4D26:  CLRF   x2E
4D28:  MOVLB  0
4D2A:  CALL   1FEA
....................              
....................       if(Opcion>3) 
4D2E:  MOVLB  5
4D30:  MOVF   x0C,W
4D32:  SUBLW  03
4D34:  BC    4D3A
....................       {Opcion=1;} 
4D36:  MOVLW  01
4D38:  MOVWF  x0C
....................       if(Opcion<1) 
4D3A:  MOVF   x0C,F
4D3C:  BNZ   4D42
....................       {Opcion=3;} 
4D3E:  MOVLW  03
4D40:  MOVWF  x0C
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==4){ //Menu de Ajustes. 
4D42:  MOVF   x0A,W
4D44:  SUBLW  04
4D46:  BTFSS  FD8.2
4D48:  BRA    4FB8
....................        
....................       if(Opcion==1)    
4D4A:  DECFSZ x0C,W
4D4C:  BRA    4D94
....................          {strcpy(Menus.Letra,"Tiempo Purga"); 
4D4E:  MOVLW  06
4D50:  MOVWF  FEA
4D52:  MOVLW  17
4D54:  MOVWF  FE9
4D56:  MOVFF  FF2,62D
4D5A:  BCF    FF2.7
4D5C:  MOVLW  00
4D5E:  MOVLB  0
4D60:  CALL   0FC2
4D64:  TBLRD*-
4D66:  TBLRD*+
4D68:  MOVF   FF5,W
4D6A:  MOVWF  FEE
4D6C:  IORLW  00
4D6E:  BNZ   4D66
4D70:  MOVLB  6
4D72:  BTFSC  x2D.7
4D74:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,12,1,1);} 
4D76:  MOVLW  06
4D78:  MOVWF  x2E
4D7A:  MOVLW  17
4D7C:  MOVWF  x2D
4D7E:  CLRF   x2F
4D80:  MOVLW  0C
4D82:  MOVWF  x30
4D84:  MOVLW  01
4D86:  MOVWF  x31
4D88:  MOVWF  x32
4D8A:  MOVLB  0
4D8C:  CALL   2044
....................       else 
4D90:  BRA    4DD6
4D92:  MOVLB  5
....................          {strcpy(Menus.Letra,"Tiempo Purga"); 
4D94:  MOVLW  06
4D96:  MOVWF  FEA
4D98:  MOVLW  17
4D9A:  MOVWF  FE9
4D9C:  MOVFF  FF2,62D
4DA0:  BCF    FF2.7
4DA2:  MOVLW  00
4DA4:  MOVLB  0
4DA6:  CALL   0FC2
4DAA:  TBLRD*-
4DAC:  TBLRD*+
4DAE:  MOVF   FF5,W
4DB0:  MOVWF  FEE
4DB2:  IORLW  00
4DB4:  BNZ   4DAC
4DB6:  MOVLB  6
4DB8:  BTFSC  x2D.7
4DBA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,12,0,1);} 
4DBC:  MOVLW  06
4DBE:  MOVWF  x2E
4DC0:  MOVLW  17
4DC2:  MOVWF  x2D
4DC4:  CLRF   x2F
4DC6:  MOVLW  0C
4DC8:  MOVWF  x30
4DCA:  CLRF   x31
4DCC:  MOVLW  01
4DCE:  MOVWF  x32
4DD0:  MOVLB  0
4DD2:  CALL   2044
....................                             
....................       if(Opcion==2)    
4DD6:  MOVLB  5
4DD8:  MOVF   x0C,W
4DDA:  SUBLW  02
4DDC:  BNZ   4E24
....................          {strcpy(Menus.Letra,"Sensor de Flujo"); 
4DDE:  MOVLW  06
4DE0:  MOVWF  FEA
4DE2:  MOVLW  17
4DE4:  MOVWF  FE9
4DE6:  MOVFF  FF2,62D
4DEA:  BCF    FF2.7
4DEC:  MOVLW  00
4DEE:  MOVLB  0
4DF0:  CALL   0FEA
4DF4:  TBLRD*-
4DF6:  TBLRD*+
4DF8:  MOVF   FF5,W
4DFA:  MOVWF  FEE
4DFC:  IORLW  00
4DFE:  BNZ   4DF6
4E00:  MOVLB  6
4E02:  BTFSC  x2D.7
4E04:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,24,1,1);} 
4E06:  MOVLW  06
4E08:  MOVWF  x2E
4E0A:  MOVLW  17
4E0C:  MOVWF  x2D
4E0E:  CLRF   x2F
4E10:  MOVLW  18
4E12:  MOVWF  x30
4E14:  MOVLW  01
4E16:  MOVWF  x31
4E18:  MOVWF  x32
4E1A:  MOVLB  0
4E1C:  CALL   2044
....................       else 
4E20:  BRA    4E66
4E22:  MOVLB  5
....................          {strcpy(Menus.Letra,"Sensor de Flujo"); 
4E24:  MOVLW  06
4E26:  MOVWF  FEA
4E28:  MOVLW  17
4E2A:  MOVWF  FE9
4E2C:  MOVFF  FF2,62D
4E30:  BCF    FF2.7
4E32:  MOVLW  00
4E34:  MOVLB  0
4E36:  CALL   0FEA
4E3A:  TBLRD*-
4E3C:  TBLRD*+
4E3E:  MOVF   FF5,W
4E40:  MOVWF  FEE
4E42:  IORLW  00
4E44:  BNZ   4E3C
4E46:  MOVLB  6
4E48:  BTFSC  x2D.7
4E4A:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,24,0,1);}  
4E4C:  MOVLW  06
4E4E:  MOVWF  x2E
4E50:  MOVLW  17
4E52:  MOVWF  x2D
4E54:  CLRF   x2F
4E56:  MOVLW  18
4E58:  MOVWF  x30
4E5A:  CLRF   x31
4E5C:  MOVLW  01
4E5E:  MOVWF  x32
4E60:  MOVLB  0
4E62:  CALL   2044
....................           
....................       if(Opcion==3)    
4E66:  MOVLB  5
4E68:  MOVF   x0C,W
4E6A:  SUBLW  03
4E6C:  BNZ   4EB4
....................          {strcpy(Menus.Letra,"Sensor de Presion"); 
4E6E:  MOVLW  06
4E70:  MOVWF  FEA
4E72:  MOVLW  17
4E74:  MOVWF  FE9
4E76:  MOVFF  FF2,62D
4E7A:  BCF    FF2.7
4E7C:  MOVLW  00
4E7E:  MOVLB  0
4E80:  CALL   1014
4E84:  TBLRD*-
4E86:  TBLRD*+
4E88:  MOVF   FF5,W
4E8A:  MOVWF  FEE
4E8C:  IORLW  00
4E8E:  BNZ   4E86
4E90:  MOVLB  6
4E92:  BTFSC  x2D.7
4E94:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,1,1);} 
4E96:  MOVLW  06
4E98:  MOVWF  x2E
4E9A:  MOVLW  17
4E9C:  MOVWF  x2D
4E9E:  CLRF   x2F
4EA0:  MOVLW  24
4EA2:  MOVWF  x30
4EA4:  MOVLW  01
4EA6:  MOVWF  x31
4EA8:  MOVWF  x32
4EAA:  MOVLB  0
4EAC:  CALL   2044
....................       else 
4EB0:  BRA    4EF6
4EB2:  MOVLB  5
....................          {strcpy(Menus.Letra,"Sensor de Presion"); 
4EB4:  MOVLW  06
4EB6:  MOVWF  FEA
4EB8:  MOVLW  17
4EBA:  MOVWF  FE9
4EBC:  MOVFF  FF2,62D
4EC0:  BCF    FF2.7
4EC2:  MOVLW  00
4EC4:  MOVLB  0
4EC6:  CALL   1014
4ECA:  TBLRD*-
4ECC:  TBLRD*+
4ECE:  MOVF   FF5,W
4ED0:  MOVWF  FEE
4ED2:  IORLW  00
4ED4:  BNZ   4ECC
4ED6:  MOVLB  6
4ED8:  BTFSC  x2D.7
4EDA:  BSF    FF2.7
....................          displayMenu(Menus.Letra,0,36,0,1);}           
4EDC:  MOVLW  06
4EDE:  MOVWF  x2E
4EE0:  MOVLW  17
4EE2:  MOVWF  x2D
4EE4:  CLRF   x2F
4EE6:  MOVLW  24
4EE8:  MOVWF  x30
4EEA:  CLRF   x31
4EEC:  MOVLW  01
4EEE:  MOVWF  x32
4EF0:  MOVLB  0
4EF2:  CALL   2044
....................           
....................          
....................       if(UP)//Si oprime hacia arriba 
4EF6:  BSF    F92.0
4EF8:  BTFSS  F80.0
4EFA:  BRA    4F18
....................       {  if(Flanco == 0)  
4EFC:  MOVLB  4
4EFE:  BTFSC  x4C.0
4F00:  BRA    4F16
....................             {Flanco = 1;delay_ms(30);Opcion--; 
4F02:  BSF    x4C.0
4F04:  MOVLW  1E
4F06:  MOVLB  6
4F08:  MOVWF  x2E
4F0A:  MOVLB  0
4F0C:  CALL   1DE0
4F10:  MOVLB  5
4F12:  DECF   x0C,F
4F14:  MOVLB  4
....................             } 
....................       } 
....................          else 
4F16:  BRA    4F1C
....................             {Flanco = 0;} 
4F18:  MOVLB  4
4F1A:  BCF    x4C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
4F1C:  BSF    F92.1
4F1E:  BTFSS  F80.1
4F20:  BRA    4F3C
....................       {  if(Flanco2 == 0)  
4F22:  BTFSC  x4C.2
4F24:  BRA    4F3A
....................             {Flanco2 = 1;delay_ms(30);Opcion++; 
4F26:  BSF    x4C.2
4F28:  MOVLW  1E
4F2A:  MOVLB  6
4F2C:  MOVWF  x2E
4F2E:  MOVLB  0
4F30:  CALL   1DE0
4F34:  MOVLB  5
4F36:  INCF   x0C,F
4F38:  MOVLB  4
....................             }      
....................       } 
....................          else 
4F3A:  BRA    4F3E
....................             {Flanco2 = 0;}   
4F3C:  BCF    x4C.2
....................              
....................       if(RIGHT)//Si oprime SET 
4F3E:  BSF    F92.2
4F40:  BTFSS  F80.2
4F42:  BRA    4F76
....................       {  if(Flanco1 == 0)  
4F44:  BTFSC  x4C.1
4F46:  BRA    4F74
....................             {Flanco1 = 1;delay_ms(500);Menu=Opcion+10;glcd_fillScreen(OFF); 
4F48:  BSF    x4C.1
4F4A:  MOVLW  02
4F4C:  MOVLB  6
4F4E:  MOVWF  x2D
4F50:  MOVLW  FA
4F52:  MOVWF  x2E
4F54:  MOVLB  0
4F56:  CALL   1DE0
4F5A:  MOVLB  6
4F5C:  DECFSZ x2D,F
4F5E:  BRA    4F50
4F60:  MOVLW  0A
4F62:  MOVLB  5
4F64:  ADDWF  x0C,W
4F66:  MOVWF  x0A
4F68:  MOVLB  6
4F6A:  CLRF   x2E
4F6C:  MOVLB  0
4F6E:  CALL   1FEA
4F72:  MOVLB  4
....................             } 
....................       } 
....................          else 
4F74:  BRA    4F78
....................             {Flanco1 = 0;}   
4F76:  BCF    x4C.1
....................              
....................       if(LEFT)//Si oprime boton de Toma. 
4F78:  BSF    F92.3
4F7A:  BTFSS  F80.3
4F7C:  BRA    4FA4
....................         {delay_ms(700);Menu=3;glcd_fillscreen(OFF);} 
4F7E:  MOVLW  04
4F80:  MOVLB  6
4F82:  MOVWF  x2D
4F84:  MOVLW  AF
4F86:  MOVWF  x2E
4F88:  MOVLB  0
4F8A:  CALL   1DE0
4F8E:  MOVLB  6
4F90:  DECFSZ x2D,F
4F92:  BRA    4F84
4F94:  MOVLW  03
4F96:  MOVLB  5
4F98:  MOVWF  x0A
4F9A:  MOVLB  6
4F9C:  CLRF   x2E
4F9E:  MOVLB  0
4FA0:  CALL   1FEA
....................        
....................       if(Opcion>3) 
4FA4:  MOVLB  5
4FA6:  MOVF   x0C,W
4FA8:  SUBLW  03
4FAA:  BC    4FB0
....................       {Opcion=1;} 
4FAC:  MOVLW  01
4FAE:  MOVWF  x0C
....................       if(Opcion<1) 
4FB0:  MOVF   x0C,F
4FB2:  BNZ   4FB8
....................       {Opcion=3;} 
4FB4:  MOVLW  03
4FB6:  MOVWF  x0C
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==11){ //Menu de Purga. 
4FB8:  MOVF   x0A,W
4FBA:  SUBLW  0B
4FBC:  BTFSS  FD8.2
4FBE:  BRA    5348
....................        
....................       strcpy(Menus.Letra,"T. Purga"); 
4FC0:  MOVLW  06
4FC2:  MOVWF  FEA
4FC4:  MOVLW  17
4FC6:  MOVWF  FE9
4FC8:  MOVFF  FF2,62D
4FCC:  BCF    FF2.7
4FCE:  MOVLW  00
4FD0:  MOVLB  0
4FD2:  CALL   1040
4FD6:  TBLRD*-
4FD8:  TBLRD*+
4FDA:  MOVF   FF5,W
4FDC:  MOVWF  FEE
4FDE:  IORLW  00
4FE0:  BNZ   4FD8
4FE2:  MOVLB  6
4FE4:  BTFSC  x2D.7
4FE6:  BSF    FF2.7
....................       displayMenu(Menus.Letra,10,0,1,2); 
4FE8:  MOVLW  06
4FEA:  MOVWF  x2E
4FEC:  MOVLW  17
4FEE:  MOVWF  x2D
4FF0:  MOVLW  0A
4FF2:  MOVWF  x2F
4FF4:  CLRF   x30
4FF6:  MOVLW  01
4FF8:  MOVWF  x31
4FFA:  MOVLW  02
4FFC:  MOVWF  x32
4FFE:  MOVLB  0
5000:  CALL   2044
....................        
....................       if(unidad==4) 
5004:  MOVLB  5
5006:  MOVF   x0B,W
5008:  SUBLW  04
500A:  BNZ   502A
....................       {displayTiempo(Tpurgap[3],20,40,1,2);} 
500C:  MOVFF  542,62D
5010:  MOVLW  14
5012:  MOVLB  6
5014:  MOVWF  x2E
5016:  MOVLW  28
5018:  MOVWF  x2F
501A:  MOVLW  01
501C:  MOVWF  x30
501E:  MOVLW  02
5020:  MOVWF  x31
5022:  MOVLB  0
5024:  CALL   2110
....................       else 
5028:  BRA    5044
....................       {displayTiempo(Tpurgap[3],20,40,0,2);} 
502A:  MOVFF  542,62D
502E:  MOVLW  14
5030:  MOVLB  6
5032:  MOVWF  x2E
5034:  MOVLW  28
5036:  MOVWF  x2F
5038:  CLRF   x30
503A:  MOVLW  02
503C:  MOVWF  x31
503E:  MOVLB  0
5040:  CALL   2110
....................        
....................       if(unidad==3) 
5044:  MOVLB  5
5046:  MOVF   x0B,W
5048:  SUBLW  03
504A:  BNZ   5068
....................       {displayTiempo(Tpurgap[2],40,40,1,2);} 
504C:  MOVFF  541,62D
5050:  MOVLW  28
5052:  MOVLB  6
5054:  MOVWF  x2E
5056:  MOVWF  x2F
5058:  MOVLW  01
505A:  MOVWF  x30
505C:  MOVLW  02
505E:  MOVWF  x31
5060:  MOVLB  0
5062:  CALL   2110
....................       else 
5066:  BRA    5080
....................       {displayTiempo(Tpurgap[2],40,40,0,2);} 
5068:  MOVFF  541,62D
506C:  MOVLW  28
506E:  MOVLB  6
5070:  MOVWF  x2E
5072:  MOVWF  x2F
5074:  CLRF   x30
5076:  MOVLW  02
5078:  MOVWF  x31
507A:  MOVLB  0
507C:  CALL   2110
....................        
....................       if(unidad==2) 
5080:  MOVLB  5
5082:  MOVF   x0B,W
5084:  SUBLW  02
5086:  BNZ   50A6
....................       {displayTiempo(Tpurgap[1],70,40,1,2);} 
5088:  MOVFF  540,62D
508C:  MOVLW  46
508E:  MOVLB  6
5090:  MOVWF  x2E
5092:  MOVLW  28
5094:  MOVWF  x2F
5096:  MOVLW  01
5098:  MOVWF  x30
509A:  MOVLW  02
509C:  MOVWF  x31
509E:  MOVLB  0
50A0:  CALL   2110
....................       else 
50A4:  BRA    50C0
....................       {displayTiempo(Tpurgap[1],70,40,0,2);} 
50A6:  MOVFF  540,62D
50AA:  MOVLW  46
50AC:  MOVLB  6
50AE:  MOVWF  x2E
50B0:  MOVLW  28
50B2:  MOVWF  x2F
50B4:  CLRF   x30
50B6:  MOVLW  02
50B8:  MOVWF  x31
50BA:  MOVLB  0
50BC:  CALL   2110
....................        
....................       if(unidad==1) 
50C0:  MOVLB  5
50C2:  DECFSZ x0B,W
50C4:  BRA    50E4
....................       {displayTiempo(Tpurgap[0],90,40,1,2);} 
50C6:  MOVFF  53F,62D
50CA:  MOVLW  5A
50CC:  MOVLB  6
50CE:  MOVWF  x2E
50D0:  MOVLW  28
50D2:  MOVWF  x2F
50D4:  MOVLW  01
50D6:  MOVWF  x30
50D8:  MOVLW  02
50DA:  MOVWF  x31
50DC:  MOVLB  0
50DE:  CALL   2110
....................       else 
50E2:  BRA    50FE
....................       {displayTiempo(Tpurgap[0],90,40,0,2);} 
50E4:  MOVFF  53F,62D
50E8:  MOVLW  5A
50EA:  MOVLB  6
50EC:  MOVWF  x2E
50EE:  MOVLW  28
50F0:  MOVWF  x2F
50F2:  CLRF   x30
50F4:  MOVLW  02
50F6:  MOVWF  x31
50F8:  MOVLB  0
50FA:  CALL   2110
....................        
....................       glcd_text57(60, 42, Dos_puntos, 2, ON); 
50FE:  MOVLW  3C
5100:  MOVLB  6
5102:  MOVWF  x44
5104:  MOVLW  2A
5106:  MOVWF  x45
5108:  MOVLW  04
510A:  MOVWF  x47
510C:  MOVLW  74
510E:  MOVWF  x46
5110:  MOVLW  02
5112:  MOVWF  x48
5114:  MOVLW  01
5116:  MOVWF  x49
5118:  MOVLB  0
511A:  CALL   1C28
....................           
....................          
....................       if(UP)//Si oprime hacia arriba 
511E:  BSF    F92.0
5120:  BTFSS  F80.0
5122:  BRA    5150
....................       {  if(Flanco == 0)  
5124:  MOVLB  4
5126:  BTFSC  x4C.0
5128:  BRA    514E
....................             {Flanco = 1;delay_ms(30);Tpurgap[unidad-1]++; 
512A:  BSF    x4C.0
512C:  MOVLW  1E
512E:  MOVLB  6
5130:  MOVWF  x2E
5132:  MOVLB  0
5134:  CALL   1DE0
5138:  MOVLW  01
513A:  MOVLB  5
513C:  SUBWF  x0B,W
513E:  CLRF   03
5140:  ADDLW  3F
5142:  MOVWF  FE9
5144:  MOVLW  05
5146:  ADDWFC 03,W
5148:  MOVWF  FEA
514A:  INCF   FEF,F
514C:  MOVLB  4
....................             } 
....................       } 
....................          else 
514E:  BRA    5154
....................             {Flanco = 0;} 
5150:  MOVLB  4
5152:  BCF    x4C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5154:  BSF    F92.1
5156:  BTFSS  F80.1
5158:  BRA    5184
....................       {  if(Flanco2 == 0)  
515A:  BTFSC  x4C.2
515C:  BRA    5182
....................             {Flanco2 = 1;delay_ms(30);Tpurgap[unidad-1]--; 
515E:  BSF    x4C.2
5160:  MOVLW  1E
5162:  MOVLB  6
5164:  MOVWF  x2E
5166:  MOVLB  0
5168:  CALL   1DE0
516C:  MOVLW  01
516E:  MOVLB  5
5170:  SUBWF  x0B,W
5172:  CLRF   03
5174:  ADDLW  3F
5176:  MOVWF  FE9
5178:  MOVLW  05
517A:  ADDWFC 03,W
517C:  MOVWF  FEA
517E:  DECF   FEF,F
5180:  MOVLB  4
....................             }      
....................       } 
....................          else 
5182:  BRA    5186
....................             {Flanco2 = 0;}   
5184:  BCF    x4C.2
....................              
....................       if(RIGHT)//Si oprime SET 
5186:  BSF    F92.2
5188:  BTFSS  F80.2
518A:  BRA    51A6
....................       {  if(Flanco1 == 0)  
518C:  BTFSC  x4C.1
518E:  BRA    51A4
....................             {Flanco1 = 1;delay_ms(30);unidad--; 
5190:  BSF    x4C.1
5192:  MOVLW  1E
5194:  MOVLB  6
5196:  MOVWF  x2E
5198:  MOVLB  0
519A:  CALL   1DE0
519E:  MOVLB  5
51A0:  DECF   x0B,F
51A2:  MOVLB  4
....................             } 
....................       } 
....................          else 
51A4:  BRA    51A8
....................             {Flanco1 = 0;}   
51A6:  BCF    x4C.1
....................              
....................       if(LEFT)//Si oprime boton de Toma. 
51A8:  BSF    F92.3
51AA:  BTFSS  F80.3
51AC:  BRA    527E
....................         {delay_ms(700);Menu=3;glcd_fillscreen(OFF);Opcion=1; 
51AE:  MOVLW  04
51B0:  MOVLB  6
51B2:  MOVWF  x2D
51B4:  MOVLW  AF
51B6:  MOVWF  x2E
51B8:  MOVLB  0
51BA:  CALL   1DE0
51BE:  MOVLB  6
51C0:  DECFSZ x2D,F
51C2:  BRA    51B4
51C4:  MOVLW  03
51C6:  MOVLB  5
51C8:  MOVWF  x0A
51CA:  MOVLB  6
51CC:  CLRF   x2E
51CE:  MOVLB  0
51D0:  CALL   1FEA
51D4:  MOVLW  01
51D6:  MOVLB  5
51D8:  MOVWF  x0C
....................          write_eeprom(4,Tpurgap[0]);write_eeprom(5,Tpurgap[1]);write_eeprom(6,Tpurgap[2]);write_eeprom(7,Tpurgap[3]);} 
51DA:  MOVLW  04
51DC:  MOVWF  FA9
51DE:  MOVFF  53F,FA8
51E2:  BCF    FA6.6
51E4:  BCF    FA6.7
51E6:  BSF    FA6.2
51E8:  MOVF   FF2,W
51EA:  MOVWF  00
51EC:  BCF    FF2.7
51EE:  MOVLB  F
51F0:  MOVLW  55
51F2:  MOVWF  FA7
51F4:  MOVLW  AA
51F6:  MOVWF  FA7
51F8:  BSF    FA6.1
51FA:  BTFSC  FA6.1
51FC:  BRA    51FA
51FE:  BCF    FA6.2
5200:  MOVF   00,W
5202:  IORWF  FF2,F
5204:  MOVLW  05
5206:  MOVWF  FA9
5208:  MOVFF  540,FA8
520C:  BCF    FA6.6
520E:  BCF    FA6.7
5210:  BSF    FA6.2
5212:  MOVF   FF2,W
5214:  MOVWF  00
5216:  BCF    FF2.7
5218:  MOVLW  55
521A:  MOVWF  FA7
521C:  MOVLW  AA
521E:  MOVWF  FA7
5220:  BSF    FA6.1
5222:  BTFSC  FA6.1
5224:  BRA    5222
5226:  BCF    FA6.2
5228:  MOVF   00,W
522A:  IORWF  FF2,F
522C:  MOVLW  06
522E:  MOVWF  FA9
5230:  MOVFF  541,FA8
5234:  BCF    FA6.6
5236:  BCF    FA6.7
5238:  BSF    FA6.2
523A:  MOVF   FF2,W
523C:  MOVWF  00
523E:  BCF    FF2.7
5240:  MOVLW  55
5242:  MOVWF  FA7
5244:  MOVLW  AA
5246:  MOVWF  FA7
5248:  BSF    FA6.1
524A:  BTFSC  FA6.1
524C:  BRA    524A
524E:  BCF    FA6.2
5250:  MOVF   00,W
5252:  IORWF  FF2,F
5254:  MOVLW  07
5256:  MOVWF  FA9
5258:  MOVFF  542,FA8
525C:  BCF    FA6.6
525E:  BCF    FA6.7
5260:  BSF    FA6.2
5262:  MOVF   FF2,W
5264:  MOVWF  00
5266:  BCF    FF2.7
5268:  MOVLW  55
526A:  MOVWF  FA7
526C:  MOVLW  AA
526E:  MOVWF  FA7
5270:  BSF    FA6.1
5272:  BTFSC  FA6.1
5274:  BRA    5272
5276:  BCF    FA6.2
5278:  MOVF   00,W
527A:  IORWF  FF2,F
527C:  MOVLB  4
....................        
....................       for(i=0;i<4;i++) 
527E:  CLRF   x38
5280:  MOVF   x38,W
5282:  SUBLW  03
5284:  BNC   52D8
....................       { 
....................          if(Tpurgap[i]>9) 
5286:  CLRF   03
5288:  MOVF   x38,W
528A:  ADDLW  3F
528C:  MOVWF  FE9
528E:  MOVLW  05
5290:  ADDWFC 03,W
5292:  MOVWF  FEA
5294:  BTFSC  FEF.7
5296:  BRA    52AE
5298:  MOVF   FEF,W
529A:  SUBLW  09
529C:  BC    52AE
....................          {Tpurgap[i]=0;} 
529E:  CLRF   03
52A0:  MOVF   x38,W
52A2:  ADDLW  3F
52A4:  MOVWF  FE9
52A6:  MOVLW  05
52A8:  ADDWFC 03,W
52AA:  MOVWF  FEA
52AC:  CLRF   FEF
....................           
....................          if(Tpurgap[i]<0) 
52AE:  CLRF   03
52B0:  MOVF   x38,W
52B2:  ADDLW  3F
52B4:  MOVWF  FE9
52B6:  MOVLW  05
52B8:  ADDWFC 03,W
52BA:  MOVWF  FEA
52BC:  BTFSC  FEF.7
52BE:  BRA    52C2
52C0:  BRA    52D4
....................          {Tpurgap[i]=9;} 
52C2:  CLRF   03
52C4:  MOVF   x38,W
52C6:  ADDLW  3F
52C8:  MOVWF  FE9
52CA:  MOVLW  05
52CC:  ADDWFC 03,W
52CE:  MOVWF  FEA
52D0:  MOVLW  09
52D2:  MOVWF  FEF
....................       }       
52D4:  INCF   x38,F
52D6:  BRA    5280
....................       for(i=1;i<4;i++) 
52D8:  MOVLW  01
52DA:  MOVWF  x38
52DC:  MOVF   x38,W
52DE:  SUBLW  03
52E0:  BNC   5336
....................       { 
....................          if(Tpurgap[i]>5) 
52E2:  CLRF   03
52E4:  MOVF   x38,W
52E6:  ADDLW  3F
52E8:  MOVWF  FE9
52EA:  MOVLW  05
52EC:  ADDWFC 03,W
52EE:  MOVWF  FEA
52F0:  BTFSC  FEF.7
52F2:  BRA    530A
52F4:  MOVF   FEF,W
52F6:  SUBLW  05
52F8:  BC    530A
....................          {Tpurgap[i]=0;} 
52FA:  CLRF   03
52FC:  MOVF   x38,W
52FE:  ADDLW  3F
5300:  MOVWF  FE9
5302:  MOVLW  05
5304:  ADDWFC 03,W
5306:  MOVWF  FEA
5308:  CLRF   FEF
....................           
....................          if(Tpurgap[i]<0) 
530A:  CLRF   03
530C:  MOVF   x38,W
530E:  ADDLW  3F
5310:  MOVWF  FE9
5312:  MOVLW  05
5314:  ADDWFC 03,W
5316:  MOVWF  FEA
5318:  BTFSC  FEF.7
531A:  BRA    531E
531C:  BRA    5330
....................          {Tpurgap[i]=5;} 
531E:  CLRF   03
5320:  MOVF   x38,W
5322:  ADDLW  3F
5324:  MOVWF  FE9
5326:  MOVLW  05
5328:  ADDWFC 03,W
532A:  MOVWF  FEA
532C:  MOVLW  05
532E:  MOVWF  FEF
....................         i++;  
5330:  INCF   x38,F
....................       } 
5332:  INCF   x38,F
5334:  BRA    52DC
....................       if(unidad<1) 
5336:  MOVLB  5
5338:  MOVF   x0B,F
533A:  BNZ   5340
....................       {unidad=4;} 
533C:  MOVLW  04
533E:  MOVWF  x0B
....................       if(Opcion<1) 
5340:  MOVF   x0C,F
5342:  BNZ   5348
....................       {Opcion=4;} 
5344:  MOVLW  04
5346:  MOVWF  x0C
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==12){ //Menu de Sensor de Flujo. 
5348:  MOVF   x0A,W
534A:  SUBLW  0C
534C:  BTFSS  FD8.2
534E:  BRA    595C
....................        
....................       if(Ajuste1>10.0) 
5350:  MOVLB  6
5352:  CLRF   x35
5354:  CLRF   x34
5356:  MOVLW  20
5358:  MOVWF  x33
535A:  MOVLW  82
535C:  MOVWF  x32
535E:  MOVFF  59A,639
5362:  MOVFF  599,638
5366:  MOVFF  598,637
536A:  MOVFF  597,636
536E:  MOVLB  0
5370:  CALL   2296
5374:  BNC   5382
....................          Ajuste1=0.0; 
5376:  MOVLB  5
5378:  CLRF   x9A
537A:  CLRF   x99
537C:  CLRF   x98
537E:  CLRF   x97
5380:  MOVLB  0
....................        
....................       strcpy(Menus.Letra,"Sensor de Flujo"); 
5382:  MOVLW  06
5384:  MOVWF  FEA
5386:  MOVLW  17
5388:  MOVWF  FE9
538A:  MOVFF  FF2,62D
538E:  BCF    FF2.7
5390:  MOVLW  00
5392:  CALL   0FEA
5396:  TBLRD*-
5398:  TBLRD*+
539A:  MOVF   FF5,W
539C:  MOVWF  FEE
539E:  IORLW  00
53A0:  BNZ   5398
53A2:  MOVLB  6
53A4:  BTFSC  x2D.7
53A6:  BSF    FF2.7
....................       displayMenu(Menus.Letra,10,0,1,1); 
53A8:  MOVLW  06
53AA:  MOVWF  x2E
53AC:  MOVLW  17
53AE:  MOVWF  x2D
53B0:  MOVLW  0A
53B2:  MOVWF  x2F
53B4:  CLRF   x30
53B6:  MOVLW  01
53B8:  MOVWF  x31
53BA:  MOVWF  x32
53BC:  MOVLB  0
53BE:  CALL   2044
....................        
....................       glcd_text57(0, 12, ZF, 1, ON); 
53C2:  MOVLB  6
53C4:  CLRF   x44
53C6:  MOVLW  0C
53C8:  MOVWF  x45
53CA:  MOVLW  04
53CC:  MOVWF  x47
53CE:  MOVLW  BE
53D0:  MOVWF  x46
53D2:  MOVLW  01
53D4:  MOVWF  x48
53D6:  MOVWF  x49
53D8:  MOVLB  0
53DA:  CALL   1C28
....................        
....................       glcd_text57(0, 20, ZA, 1, ON); 
53DE:  MOVLB  6
53E0:  CLRF   x44
53E2:  MOVLW  14
53E4:  MOVWF  x45
53E6:  MOVLW  04
53E8:  MOVWF  x47
53EA:  MOVLW  CC
53EC:  MOVWF  x46
53EE:  MOVLW  01
53F0:  MOVWF  x48
53F2:  MOVWF  x49
53F4:  MOVLB  0
53F6:  CALL   1C28
....................        
....................       glcd_text57(0, 30, AJ, 1, ON);            
53FA:  MOVLB  6
53FC:  CLRF   x44
53FE:  MOVLW  1E
5400:  MOVWF  x45
5402:  MOVLW  04
5404:  MOVWF  x47
5406:  MOVLW  D4
5408:  MOVWF  x46
540A:  MOVLW  01
540C:  MOVWF  x48
540E:  MOVWF  x49
5410:  MOVLB  0
5412:  CALL   1C28
....................        
....................       displayfloat(zero_actual,44,20,0,1); 
5416:  MOVFF  606,634
541A:  MOVFF  605,633
541E:  MOVFF  604,632
5422:  MOVFF  603,631
5426:  MOVLW  2C
5428:  MOVLB  6
542A:  MOVWF  x35
542C:  MOVLW  14
542E:  MOVWF  x36
5430:  CLRF   x37
5432:  MOVLW  01
5434:  MOVWF  x38
5436:  MOVLB  0
5438:  CALL   2E56
....................       displayfloat(Ajuste1,44,30,0,1); 
543C:  MOVFF  59A,634
5440:  MOVFF  599,633
5444:  MOVFF  598,632
5448:  MOVFF  597,631
544C:  MOVLW  2C
544E:  MOVLB  6
5450:  MOVWF  x35
5452:  MOVLW  1E
5454:  MOVWF  x36
5456:  CLRF   x37
5458:  MOVLW  01
545A:  MOVWF  x38
545C:  MOVLB  0
545E:  CALL   2E56
....................       displayfloat(Inflow_adc,0,40,0,1); 
5462:  MOVFF  52A,633
5466:  MOVFF  529,632
546A:  CALL   1172
546E:  MOVFF  00,62D
5472:  MOVFF  01,62E
5476:  MOVFF  02,62F
547A:  MOVFF  03,630
547E:  MOVFF  03,634
5482:  MOVFF  02,633
5486:  MOVFF  01,632
548A:  MOVFF  00,631
548E:  MOVLB  6
5490:  CLRF   x35
5492:  MOVLW  28
5494:  MOVWF  x36
5496:  CLRF   x37
5498:  MOVLW  01
549A:  MOVWF  x38
549C:  MOVLB  0
549E:  CALL   2E56
....................       displayfloat(Diferencia,0,50,0,1); 
54A2:  MOVFF  572,634
54A6:  MOVFF  571,633
54AA:  MOVFF  570,632
54AE:  MOVFF  56F,631
54B2:  MOVLB  6
54B4:  CLRF   x35
54B6:  MOVLW  32
54B8:  MOVWF  x36
54BA:  CLRF   x37
54BC:  MOVLW  01
54BE:  MOVWF  x38
54C0:  MOVLB  0
54C2:  CALL   2E56
....................        
....................       if(UP)//Si oprime hacia arriba 
54C6:  BSF    F92.0
54C8:  BTFSS  F80.0
54CA:  BRA    5512
....................       {   
....................          delay_ms(30);Ajuste1+=0.01; 
54CC:  MOVLW  1E
54CE:  MOVLB  6
54D0:  MOVWF  x2E
54D2:  MOVLB  0
54D4:  CALL   1DE0
54D8:  BCF    FD8.1
54DA:  MOVFF  59A,639
54DE:  MOVFF  599,638
54E2:  MOVFF  598,637
54E6:  MOVFF  597,636
54EA:  MOVLW  0A
54EC:  MOVLB  6
54EE:  MOVWF  x3D
54F0:  MOVLW  D7
54F2:  MOVWF  x3C
54F4:  MOVLW  23
54F6:  MOVWF  x3B
54F8:  MOVLW  78
54FA:  MOVWF  x3A
54FC:  MOVLB  0
54FE:  CALL   1306
5502:  MOVFF  03,59A
5506:  MOVFF  02,599
550A:  MOVFF  01,598
550E:  MOVFF  00,597
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5512:  BSF    F92.1
5514:  BTFSS  F80.1
5516:  BRA    555E
....................       {    
....................          delay_ms(30);Ajuste1-=0.01;                
5518:  MOVLW  1E
551A:  MOVLB  6
551C:  MOVWF  x2E
551E:  MOVLB  0
5520:  CALL   1DE0
5524:  BSF    FD8.1
5526:  MOVFF  59A,639
552A:  MOVFF  599,638
552E:  MOVFF  598,637
5532:  MOVFF  597,636
5536:  MOVLW  0A
5538:  MOVLB  6
553A:  MOVWF  x3D
553C:  MOVLW  D7
553E:  MOVWF  x3C
5540:  MOVLW  23
5542:  MOVWF  x3B
5544:  MOVLW  78
5546:  MOVWF  x3A
5548:  MOVLB  0
554A:  CALL   1306
554E:  MOVFF  03,59A
5552:  MOVFF  02,599
5556:  MOVFF  01,598
555A:  MOVFF  00,597
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
555E:  BSF    F92.2
5560:  BTFSS  F80.2
5562:  BRA    5810
....................       {   
....................          zero_actual=Inflow_adc; 
5564:  MOVFF  52A,633
5568:  MOVFF  529,632
556C:  CALL   1172
5570:  MOVFF  03,606
5574:  MOVFF  02,605
5578:  MOVFF  01,604
557C:  MOVFF  00,603
....................          Diferencia=zero_fabrica-Inflow_adc; 
5580:  MOVFF  52A,633
5584:  MOVFF  529,632
5588:  CALL   1172
558C:  BSF    FD8.1
558E:  MOVFF  602,639
5592:  MOVFF  601,638
5596:  MOVFF  600,637
559A:  MOVFF  5FF,636
559E:  MOVFF  03,63D
55A2:  MOVFF  02,63C
55A6:  MOVFF  01,63B
55AA:  MOVFF  00,63A
55AE:  CALL   1306
55B2:  MOVFF  03,572
55B6:  MOVFF  02,571
55BA:  MOVFF  01,570
55BE:  MOVFF  00,56F
....................              
....................          if(Diferencia>=0) 
55C2:  MOVLB  6
55C4:  CLRF   x35
55C6:  CLRF   x34
55C8:  CLRF   x33
55CA:  CLRF   x32
55CC:  MOVFF  572,639
55D0:  MOVFF  571,638
55D4:  MOVFF  570,637
55D8:  MOVFF  56F,636
55DC:  MOVLB  0
55DE:  CALL   2296
55E2:  BC    55E6
55E4:  BNZ   5616
....................          { 
....................             negativo=10;write_eeprom(50,negativo); 
55E6:  MOVLW  0A
55E8:  MOVLB  5
55EA:  MOVWF  x0E
55EC:  MOVLW  32
55EE:  MOVWF  FA9
55F0:  MOVFF  50E,FA8
55F4:  BCF    FA6.6
55F6:  BCF    FA6.7
55F8:  BSF    FA6.2
55FA:  MOVF   FF2,W
55FC:  MOVWF  00
55FE:  BCF    FF2.7
5600:  MOVLB  F
5602:  MOVLW  55
5604:  MOVWF  FA7
5606:  MOVLW  AA
5608:  MOVWF  FA7
560A:  BSF    FA6.1
560C:  BTFSC  FA6.1
560E:  BRA    560C
5610:  BCF    FA6.2
5612:  MOVF   00,W
5614:  IORWF  FF2,F
....................          } 
....................          if(Diferencia<0) 
5616:  MOVFF  572,635
561A:  MOVFF  571,634
561E:  MOVFF  570,633
5622:  MOVFF  56F,632
5626:  MOVLB  6
5628:  CLRF   x39
562A:  CLRF   x38
562C:  CLRF   x37
562E:  CLRF   x36
5630:  MOVLB  0
5632:  CALL   2296
5636:  BNC   566A
....................          { 
....................             negativo=20;write_eeprom(50,negativo); 
5638:  MOVLW  14
563A:  MOVLB  5
563C:  MOVWF  x0E
563E:  MOVLW  32
5640:  MOVWF  FA9
5642:  MOVFF  50E,FA8
5646:  BCF    FA6.6
5648:  BCF    FA6.7
564A:  BSF    FA6.2
564C:  MOVF   FF2,W
564E:  MOVWF  00
5650:  BCF    FF2.7
5652:  MOVLB  F
5654:  MOVLW  55
5656:  MOVWF  FA7
5658:  MOVLW  AA
565A:  MOVWF  FA7
565C:  BSF    FA6.1
565E:  BTFSC  FA6.1
5660:  BRA    565E
5662:  BCF    FA6.2
5664:  MOVF   00,W
5666:  IORWF  FF2,F
5668:  MOVLB  0
....................          } 
....................          Diferencia=abs(Diferencia); 
566A:  MOVFF  56F,00
566E:  MOVFF  570,01
5672:  MOVFF  571,02
5676:  MOVFF  572,03
567A:  BCF    01.7
567C:  MOVFF  572,572
5680:  MOVFF  571,571
5684:  MOVFF  01,570
5688:  MOVFF  56F,56F
....................          Temporal1=(int16)Diferencia; 
568C:  MOVFF  572,630
5690:  MOVFF  571,62F
5694:  MOVFF  570,62E
5698:  MOVFF  56F,62D
569C:  CALL   157E
56A0:  MOVFF  02,532
56A4:  MOVFF  01,531
....................          write_eeprom(60,make8(Temporal1,0)); 
56A8:  MOVFF  531,62D
56AC:  MOVLW  3C
56AE:  MOVWF  FA9
56B0:  MOVFF  62D,FA8
56B4:  BCF    FA6.6
56B6:  BCF    FA6.7
56B8:  BSF    FA6.2
56BA:  MOVF   FF2,W
56BC:  MOVWF  00
56BE:  BCF    FF2.7
56C0:  MOVLB  F
56C2:  MOVLW  55
56C4:  MOVWF  FA7
56C6:  MOVLW  AA
56C8:  MOVWF  FA7
56CA:  BSF    FA6.1
56CC:  BTFSC  FA6.1
56CE:  BRA    56CC
56D0:  BCF    FA6.2
56D2:  MOVF   00,W
56D4:  IORWF  FF2,F
....................          write_eeprom(61,make8(Temporal1,1));//Guardar valor de Setpoint en eeprom 
56D6:  MOVFF  532,62D
56DA:  MOVLW  3D
56DC:  MOVWF  FA9
56DE:  MOVFF  532,FA8
56E2:  BCF    FA6.6
56E4:  BCF    FA6.7
56E6:  BSF    FA6.2
56E8:  MOVFF  FF2,00
56EC:  BCF    FF2.7
56EE:  MOVLW  55
56F0:  MOVWF  FA7
56F2:  MOVLW  AA
56F4:  MOVWF  FA7
56F6:  BSF    FA6.1
56F8:  BTFSC  FA6.1
56FA:  BRA    56F8
56FC:  BCF    FA6.2
56FE:  MOVF   00,W
5700:  IORWF  FF2,F
....................           
....................          Temporal=zero_actual; 
5702:  MOVFF  606,5A6
5706:  MOVFF  605,5A5
570A:  MOVFF  604,5A4
570E:  MOVFF  603,5A3
....................          Entero=(int)zero_actual; 
5712:  MOVFF  606,630
5716:  MOVFF  605,62F
571A:  MOVFF  604,62E
571E:  MOVFF  603,62D
5722:  MOVLB  0
5724:  CALL   157E
5728:  MOVFF  01,517
....................          Temporal=Temporal-Entero; 
572C:  MOVLB  6
572E:  CLRF   x33
5730:  MOVFF  517,632
5734:  MOVLB  0
5736:  CALL   1172
573A:  BSF    FD8.1
573C:  MOVFF  5A6,639
5740:  MOVFF  5A5,638
5744:  MOVFF  5A4,637
5748:  MOVFF  5A3,636
574C:  MOVFF  03,63D
5750:  MOVFF  02,63C
5754:  MOVFF  01,63B
5758:  MOVFF  00,63A
575C:  CALL   1306
5760:  MOVFF  03,5A6
5764:  MOVFF  02,5A5
5768:  MOVFF  01,5A4
576C:  MOVFF  00,5A3
....................          Temporal2=Temporal*100.0; 
5770:  MOVFF  5A6,652
5774:  MOVFF  5A5,651
5778:  MOVFF  5A4,650
577C:  MOVFF  5A3,64F
5780:  MOVLB  6
5782:  CLRF   x56
5784:  CLRF   x55
5786:  MOVLW  48
5788:  MOVWF  x54
578A:  MOVLW  85
578C:  MOVWF  x53
578E:  MOVLB  0
5790:  CALL   15BA
5794:  MOVFF  03,5AA
5798:  MOVFF  02,5A9
579C:  MOVFF  01,5A8
57A0:  MOVFF  00,5A7
....................          Decimal1=(int8)Temporal2; 
57A4:  MOVFF  5AA,630
57A8:  MOVFF  5A9,62F
57AC:  MOVFF  5A8,62E
57B0:  MOVFF  5A7,62D
57B4:  CALL   157E
57B8:  MOVFF  01,518
....................          write_eeprom(29,Entero);write_eeprom(30,Decimal1); 
57BC:  MOVLW  1D
57BE:  MOVWF  FA9
57C0:  MOVFF  517,FA8
57C4:  BCF    FA6.6
57C6:  BCF    FA6.7
57C8:  BSF    FA6.2
57CA:  MOVF   FF2,W
57CC:  MOVWF  00
57CE:  BCF    FF2.7
57D0:  MOVLB  F
57D2:  MOVLW  55
57D4:  MOVWF  FA7
57D6:  MOVLW  AA
57D8:  MOVWF  FA7
57DA:  BSF    FA6.1
57DC:  BTFSC  FA6.1
57DE:  BRA    57DC
57E0:  BCF    FA6.2
57E2:  MOVF   00,W
57E4:  IORWF  FF2,F
57E6:  MOVLW  1E
57E8:  MOVWF  FA9
57EA:  MOVFF  518,FA8
57EE:  BCF    FA6.6
57F0:  BCF    FA6.7
57F2:  BSF    FA6.2
57F4:  MOVF   FF2,W
57F6:  MOVWF  00
57F8:  BCF    FF2.7
57FA:  MOVLW  55
57FC:  MOVWF  FA7
57FE:  MOVLW  AA
5800:  MOVWF  FA7
5802:  BSF    FA6.1
5804:  BTFSC  FA6.1
5806:  BRA    5804
5808:  BCF    FA6.2
580A:  MOVF   00,W
580C:  IORWF  FF2,F
....................       } 
....................          else 
580E:  BRA    5816
....................             {Flanco1 = 0;}   
5810:  MOVLB  4
5812:  BCF    x4C.1
5814:  MOVLB  F
....................              
....................       if(LEFT)//Si oprime boton de Toma. 
5816:  BSF    F92.3
5818:  BTFSS  F80.3
581A:  BRA    5954
....................       { 
....................          delay_ms(700);Menu=3;glcd_fillscreen(OFF);Opcion=1; 
581C:  MOVLW  04
581E:  MOVLB  6
5820:  MOVWF  x2D
5822:  MOVLW  AF
5824:  MOVWF  x2E
5826:  MOVLB  0
5828:  CALL   1DE0
582C:  MOVLB  6
582E:  DECFSZ x2D,F
5830:  BRA    5822
5832:  MOVLW  03
5834:  MOVLB  5
5836:  MOVWF  x0A
5838:  MOVLB  6
583A:  CLRF   x2E
583C:  MOVLB  0
583E:  CALL   1FEA
5842:  MOVLW  01
5844:  MOVLB  5
5846:  MOVWF  x0C
....................          Temporal=Ajuste1; 
5848:  MOVFF  59A,5A6
584C:  MOVFF  599,5A5
5850:  MOVFF  598,5A4
5854:  MOVFF  597,5A3
....................          Entero=(int)Ajuste1; 
5858:  MOVFF  59A,630
585C:  MOVFF  599,62F
5860:  MOVFF  598,62E
5864:  MOVFF  597,62D
5868:  MOVLB  0
586A:  CALL   157E
586E:  MOVFF  01,517
....................          Temporal=Temporal-Entero; 
5872:  MOVLB  6
5874:  CLRF   x33
5876:  MOVFF  517,632
587A:  MOVLB  0
587C:  CALL   1172
5880:  BSF    FD8.1
5882:  MOVFF  5A6,639
5886:  MOVFF  5A5,638
588A:  MOVFF  5A4,637
588E:  MOVFF  5A3,636
5892:  MOVFF  03,63D
5896:  MOVFF  02,63C
589A:  MOVFF  01,63B
589E:  MOVFF  00,63A
58A2:  CALL   1306
58A6:  MOVFF  03,5A6
58AA:  MOVFF  02,5A5
58AE:  MOVFF  01,5A4
58B2:  MOVFF  00,5A3
....................          Temporal2=Temporal*100.0; 
58B6:  MOVFF  5A6,652
58BA:  MOVFF  5A5,651
58BE:  MOVFF  5A4,650
58C2:  MOVFF  5A3,64F
58C6:  MOVLB  6
58C8:  CLRF   x56
58CA:  CLRF   x55
58CC:  MOVLW  48
58CE:  MOVWF  x54
58D0:  MOVLW  85
58D2:  MOVWF  x53
58D4:  MOVLB  0
58D6:  CALL   15BA
58DA:  MOVFF  03,5AA
58DE:  MOVFF  02,5A9
58E2:  MOVFF  01,5A8
58E6:  MOVFF  00,5A7
....................          Decimal1=(int8)Temporal2; 
58EA:  MOVFF  5AA,630
58EE:  MOVFF  5A9,62F
58F2:  MOVFF  5A8,62E
58F6:  MOVFF  5A7,62D
58FA:  CALL   157E
58FE:  MOVFF  01,518
....................          write_eeprom(25,Entero);write_eeprom(26,Decimal1); 
5902:  MOVLW  19
5904:  MOVWF  FA9
5906:  MOVFF  517,FA8
590A:  BCF    FA6.6
590C:  BCF    FA6.7
590E:  BSF    FA6.2
5910:  MOVF   FF2,W
5912:  MOVWF  00
5914:  BCF    FF2.7
5916:  MOVLB  F
5918:  MOVLW  55
591A:  MOVWF  FA7
591C:  MOVLW  AA
591E:  MOVWF  FA7
5920:  BSF    FA6.1
5922:  BTFSC  FA6.1
5924:  BRA    5922
5926:  BCF    FA6.2
5928:  MOVF   00,W
592A:  IORWF  FF2,F
592C:  MOVLW  1A
592E:  MOVWF  FA9
5930:  MOVFF  518,FA8
5934:  BCF    FA6.6
5936:  BCF    FA6.7
5938:  BSF    FA6.2
593A:  MOVF   FF2,W
593C:  MOVWF  00
593E:  BCF    FF2.7
5940:  MOVLW  55
5942:  MOVWF  FA7
5944:  MOVLW  AA
5946:  MOVWF  FA7
5948:  BSF    FA6.1
594A:  BTFSC  FA6.1
594C:  BRA    594A
594E:  BCF    FA6.2
5950:  MOVF   00,W
5952:  IORWF  FF2,F
....................       } 
....................        
....................       Lectura_Esclavos(); 
5954:  MOVLB  0
5956:  CALL   28C2
595A:  MOVLB  5
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==13){ //Menu de Sensor de Presión. 
595C:  MOVF   x0A,W
595E:  SUBLW  0D
5960:  BTFSS  FD8.2
5962:  BRA    5D58
....................        
....................       if(Ajuste2>10.0) 
5964:  MOVLB  6
5966:  CLRF   x35
5968:  CLRF   x34
596A:  MOVLW  20
596C:  MOVWF  x33
596E:  MOVLW  82
5970:  MOVWF  x32
5972:  MOVFF  59E,639
5976:  MOVFF  59D,638
597A:  MOVFF  59C,637
597E:  MOVFF  59B,636
5982:  MOVLB  0
5984:  CALL   2296
5988:  BNC   5996
....................          Ajuste2=0.0; 
598A:  MOVLB  5
598C:  CLRF   x9E
598E:  CLRF   x9D
5990:  CLRF   x9C
5992:  CLRF   x9B
5994:  MOVLB  0
....................        
....................       strcpy(Menus.Letra,"Sensor de Presion"); 
5996:  MOVLW  06
5998:  MOVWF  FEA
599A:  MOVLW  17
599C:  MOVWF  FE9
599E:  MOVFF  FF2,62D
59A2:  BCF    FF2.7
59A4:  MOVLW  00
59A6:  CALL   1014
59AA:  TBLRD*-
59AC:  TBLRD*+
59AE:  MOVF   FF5,W
59B0:  MOVWF  FEE
59B2:  IORLW  00
59B4:  BNZ   59AC
59B6:  MOVLB  6
59B8:  BTFSC  x2D.7
59BA:  BSF    FF2.7
....................       displayMenu(Menus.Letra,10,0,1,1); 
59BC:  MOVLW  06
59BE:  MOVWF  x2E
59C0:  MOVLW  17
59C2:  MOVWF  x2D
59C4:  MOVLW  0A
59C6:  MOVWF  x2F
59C8:  CLRF   x30
59CA:  MOVLW  01
59CC:  MOVWF  x31
59CE:  MOVWF  x32
59D0:  MOVLB  0
59D2:  CALL   2044
....................        
....................       glcd_text57(0, 12, ZFP, 1, ON); 
59D6:  MOVLB  6
59D8:  CLRF   x44
59DA:  MOVLW  0C
59DC:  MOVWF  x45
59DE:  MOVLW  04
59E0:  MOVWF  x47
59E2:  MOVLW  EC
59E4:  MOVWF  x46
59E6:  MOVLW  01
59E8:  MOVWF  x48
59EA:  MOVWF  x49
59EC:  MOVLB  0
59EE:  CALL   1C28
....................        
....................       glcd_text57(0, 20, ZA, 1, ON); 
59F2:  MOVLB  6
59F4:  CLRF   x44
59F6:  MOVLW  14
59F8:  MOVWF  x45
59FA:  MOVLW  04
59FC:  MOVWF  x47
59FE:  MOVLW  CC
5A00:  MOVWF  x46
5A02:  MOVLW  01
5A04:  MOVWF  x48
5A06:  MOVWF  x49
5A08:  MOVLB  0
5A0A:  CALL   1C28
....................        
....................       glcd_text57(0, 30, AJ, 1, ON);            
5A0E:  MOVLB  6
5A10:  CLRF   x44
5A12:  MOVLW  1E
5A14:  MOVWF  x45
5A16:  MOVLW  04
5A18:  MOVWF  x47
5A1A:  MOVLW  D4
5A1C:  MOVWF  x46
5A1E:  MOVLW  01
5A20:  MOVWF  x48
5A22:  MOVWF  x49
5A24:  MOVLB  0
5A26:  CALL   1C28
....................        
....................       displayfloat(G,44,20,0,1); 
5A2A:  MOVFF  612,634
5A2E:  MOVFF  611,633
5A32:  MOVFF  610,632
5A36:  MOVFF  60F,631
5A3A:  MOVLW  2C
5A3C:  MOVLB  6
5A3E:  MOVWF  x35
5A40:  MOVLW  14
5A42:  MOVWF  x36
5A44:  CLRF   x37
5A46:  MOVLW  01
5A48:  MOVWF  x38
5A4A:  MOVLB  0
5A4C:  CALL   2E56
....................       displayfloat(Ajuste2,44,30,0,1); 
5A50:  MOVFF  59E,634
5A54:  MOVFF  59D,633
5A58:  MOVFF  59C,632
5A5C:  MOVFF  59B,631
5A60:  MOVLW  2C
5A62:  MOVLB  6
5A64:  MOVWF  x35
5A66:  MOVLW  1E
5A68:  MOVWF  x36
5A6A:  CLRF   x37
5A6C:  MOVLW  01
5A6E:  MOVWF  x38
5A70:  MOVLB  0
5A72:  CALL   2E56
....................       displayfloat(Filtro_DownFlow_adc,0,40,0,1); 
5A76:  MOVFF  530,633
5A7A:  MOVFF  52F,632
5A7E:  CALL   1172
5A82:  MOVFF  00,62D
5A86:  MOVFF  01,62E
5A8A:  MOVFF  02,62F
5A8E:  MOVFF  03,630
5A92:  MOVFF  03,634
5A96:  MOVFF  02,633
5A9A:  MOVFF  01,632
5A9E:  MOVFF  00,631
5AA2:  MOVLB  6
5AA4:  CLRF   x35
5AA6:  MOVLW  28
5AA8:  MOVWF  x36
5AAA:  CLRF   x37
5AAC:  MOVLW  01
5AAE:  MOVWF  x38
5AB0:  MOVLB  0
5AB2:  CALL   2E56
....................       displayfloat(Filtro_DownFlow,0,50,0,1); 
5AB6:  MOVFF  56E,634
5ABA:  MOVFF  56D,633
5ABE:  MOVFF  56C,632
5AC2:  MOVFF  56B,631
5AC6:  MOVLB  6
5AC8:  CLRF   x35
5ACA:  MOVLW  32
5ACC:  MOVWF  x36
5ACE:  CLRF   x37
5AD0:  MOVLW  01
5AD2:  MOVWF  x38
5AD4:  MOVLB  0
5AD6:  CALL   2E56
....................        
....................       if(UP)//Si oprime hacia arriba 
5ADA:  BSF    F92.0
5ADC:  BTFSS  F80.0
5ADE:  BRA    5B26
....................       {   
....................          delay_ms(30);Ajuste2+=0.01; 
5AE0:  MOVLW  1E
5AE2:  MOVLB  6
5AE4:  MOVWF  x2E
5AE6:  MOVLB  0
5AE8:  CALL   1DE0
5AEC:  BCF    FD8.1
5AEE:  MOVFF  59E,639
5AF2:  MOVFF  59D,638
5AF6:  MOVFF  59C,637
5AFA:  MOVFF  59B,636
5AFE:  MOVLW  0A
5B00:  MOVLB  6
5B02:  MOVWF  x3D
5B04:  MOVLW  D7
5B06:  MOVWF  x3C
5B08:  MOVLW  23
5B0A:  MOVWF  x3B
5B0C:  MOVLW  78
5B0E:  MOVWF  x3A
5B10:  MOVLB  0
5B12:  CALL   1306
5B16:  MOVFF  03,59E
5B1A:  MOVFF  02,59D
5B1E:  MOVFF  01,59C
5B22:  MOVFF  00,59B
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5B26:  BSF    F92.1
5B28:  BTFSS  F80.1
5B2A:  BRA    5B72
....................       {   
....................          delay_ms(30);Ajuste2-=0.01; 
5B2C:  MOVLW  1E
5B2E:  MOVLB  6
5B30:  MOVWF  x2E
5B32:  MOVLB  0
5B34:  CALL   1DE0
5B38:  BSF    FD8.1
5B3A:  MOVFF  59E,639
5B3E:  MOVFF  59D,638
5B42:  MOVFF  59C,637
5B46:  MOVFF  59B,636
5B4A:  MOVLW  0A
5B4C:  MOVLB  6
5B4E:  MOVWF  x3D
5B50:  MOVLW  D7
5B52:  MOVWF  x3C
5B54:  MOVLW  23
5B56:  MOVWF  x3B
5B58:  MOVLW  78
5B5A:  MOVWF  x3A
5B5C:  MOVLB  0
5B5E:  CALL   1306
5B62:  MOVFF  03,59E
5B66:  MOVFF  02,59D
5B6A:  MOVFF  01,59C
5B6E:  MOVFF  00,59B
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
5B72:  BSF    F92.2
5B74:  BTFSS  F80.2
5B76:  BRA    5C0C
....................       {   
....................          G=Filtro_Downflow_adc; 
5B78:  MOVFF  530,633
5B7C:  MOVFF  52F,632
5B80:  CALL   1172
5B84:  MOVFF  03,612
5B88:  MOVFF  02,611
5B8C:  MOVFF  01,610
5B90:  MOVFF  00,60F
....................          G16=(int16)G; 
5B94:  MOVFF  612,630
5B98:  MOVFF  611,62F
5B9C:  MOVFF  610,62E
5BA0:  MOVFF  60F,62D
5BA4:  CALL   157E
5BA8:  MOVFF  02,53A
5BAC:  MOVFF  01,539
....................          G_l=G16; G_h=(G16>>8); 
5BB0:  MOVFF  539,510
5BB4:  MOVFF  53A,511
....................              
....................          write_eeprom(62,G_l);write_eeprom(63,G_h);//Guardar valor de Setpoint en eeprom 
5BB8:  MOVLW  3E
5BBA:  MOVWF  FA9
5BBC:  MOVFF  510,FA8
5BC0:  BCF    FA6.6
5BC2:  BCF    FA6.7
5BC4:  BSF    FA6.2
5BC6:  MOVF   FF2,W
5BC8:  MOVWF  00
5BCA:  BCF    FF2.7
5BCC:  MOVLB  F
5BCE:  MOVLW  55
5BD0:  MOVWF  FA7
5BD2:  MOVLW  AA
5BD4:  MOVWF  FA7
5BD6:  BSF    FA6.1
5BD8:  BTFSC  FA6.1
5BDA:  BRA    5BD8
5BDC:  BCF    FA6.2
5BDE:  MOVF   00,W
5BE0:  IORWF  FF2,F
5BE2:  MOVLW  3F
5BE4:  MOVWF  FA9
5BE6:  MOVFF  511,FA8
5BEA:  BCF    FA6.6
5BEC:  BCF    FA6.7
5BEE:  BSF    FA6.2
5BF0:  MOVF   FF2,W
5BF2:  MOVWF  00
5BF4:  BCF    FF2.7
5BF6:  MOVLW  55
5BF8:  MOVWF  FA7
5BFA:  MOVLW  AA
5BFC:  MOVWF  FA7
5BFE:  BSF    FA6.1
5C00:  BTFSC  FA6.1
5C02:  BRA    5C00
5C04:  BCF    FA6.2
5C06:  MOVF   00,W
5C08:  IORWF  FF2,F
....................       } 
....................          else 
5C0A:  BRA    5C12
....................             {Flanco1 = 0;}   
5C0C:  MOVLB  4
5C0E:  BCF    x4C.1
5C10:  MOVLB  F
....................              
....................       if(LEFT)//Si oprime boton de Toma. 
5C12:  BSF    F92.3
5C14:  BTFSS  F80.3
5C16:  BRA    5D50
....................       {          
....................          delay_ms(700);Menu=3;glcd_fillscreen(OFF);Opcion=1; 
5C18:  MOVLW  04
5C1A:  MOVLB  6
5C1C:  MOVWF  x2D
5C1E:  MOVLW  AF
5C20:  MOVWF  x2E
5C22:  MOVLB  0
5C24:  CALL   1DE0
5C28:  MOVLB  6
5C2A:  DECFSZ x2D,F
5C2C:  BRA    5C1E
5C2E:  MOVLW  03
5C30:  MOVLB  5
5C32:  MOVWF  x0A
5C34:  MOVLB  6
5C36:  CLRF   x2E
5C38:  MOVLB  0
5C3A:  CALL   1FEA
5C3E:  MOVLW  01
5C40:  MOVLB  5
5C42:  MOVWF  x0C
....................          Temporal=Ajuste2; 
5C44:  MOVFF  59E,5A6
5C48:  MOVFF  59D,5A5
5C4C:  MOVFF  59C,5A4
5C50:  MOVFF  59B,5A3
....................          Entero=(int)Ajuste2; 
5C54:  MOVFF  59E,630
5C58:  MOVFF  59D,62F
5C5C:  MOVFF  59C,62E
5C60:  MOVFF  59B,62D
5C64:  MOVLB  0
5C66:  CALL   157E
5C6A:  MOVFF  01,517
....................          Temporal=Temporal-Entero; 
5C6E:  MOVLB  6
5C70:  CLRF   x33
5C72:  MOVFF  517,632
5C76:  MOVLB  0
5C78:  CALL   1172
5C7C:  BSF    FD8.1
5C7E:  MOVFF  5A6,639
5C82:  MOVFF  5A5,638
5C86:  MOVFF  5A4,637
5C8A:  MOVFF  5A3,636
5C8E:  MOVFF  03,63D
5C92:  MOVFF  02,63C
5C96:  MOVFF  01,63B
5C9A:  MOVFF  00,63A
5C9E:  CALL   1306
5CA2:  MOVFF  03,5A6
5CA6:  MOVFF  02,5A5
5CAA:  MOVFF  01,5A4
5CAE:  MOVFF  00,5A3
....................          Temporal2=Temporal*100.0; 
5CB2:  MOVFF  5A6,652
5CB6:  MOVFF  5A5,651
5CBA:  MOVFF  5A4,650
5CBE:  MOVFF  5A3,64F
5CC2:  MOVLB  6
5CC4:  CLRF   x56
5CC6:  CLRF   x55
5CC8:  MOVLW  48
5CCA:  MOVWF  x54
5CCC:  MOVLW  85
5CCE:  MOVWF  x53
5CD0:  MOVLB  0
5CD2:  CALL   15BA
5CD6:  MOVFF  03,5AA
5CDA:  MOVFF  02,5A9
5CDE:  MOVFF  01,5A8
5CE2:  MOVFF  00,5A7
....................          Decimal1=(int8)Temporal2; 
5CE6:  MOVFF  5AA,630
5CEA:  MOVFF  5A9,62F
5CEE:  MOVFF  5A8,62E
5CF2:  MOVFF  5A7,62D
5CF6:  CALL   157E
5CFA:  MOVFF  01,518
....................          write_eeprom(27,Entero);write_eeprom(28,Decimal1); 
5CFE:  MOVLW  1B
5D00:  MOVWF  FA9
5D02:  MOVFF  517,FA8
5D06:  BCF    FA6.6
5D08:  BCF    FA6.7
5D0A:  BSF    FA6.2
5D0C:  MOVF   FF2,W
5D0E:  MOVWF  00
5D10:  BCF    FF2.7
5D12:  MOVLB  F
5D14:  MOVLW  55
5D16:  MOVWF  FA7
5D18:  MOVLW  AA
5D1A:  MOVWF  FA7
5D1C:  BSF    FA6.1
5D1E:  BTFSC  FA6.1
5D20:  BRA    5D1E
5D22:  BCF    FA6.2
5D24:  MOVF   00,W
5D26:  IORWF  FF2,F
5D28:  MOVLW  1C
5D2A:  MOVWF  FA9
5D2C:  MOVFF  518,FA8
5D30:  BCF    FA6.6
5D32:  BCF    FA6.7
5D34:  BSF    FA6.2
5D36:  MOVF   FF2,W
5D38:  MOVWF  00
5D3A:  BCF    FF2.7
5D3C:  MOVLW  55
5D3E:  MOVWF  FA7
5D40:  MOVLW  AA
5D42:  MOVWF  FA7
5D44:  BSF    FA6.1
5D46:  BTFSC  FA6.1
5D48:  BRA    5D46
5D4A:  BCF    FA6.2
5D4C:  MOVF   00,W
5D4E:  IORWF  FF2,F
....................       } 
....................        
....................       Lectura_Esclavos(); 
5D50:  MOVLB  0
5D52:  CALL   28C2
5D56:  MOVLB  5
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==5){ //Menu de Clave. 
5D58:  MOVF   x0A,W
5D5A:  SUBLW  05
5D5C:  BTFSS  FD8.2
5D5E:  BRA    6162
....................        
....................        
....................       displayContrasena(Contrasena[0],20,30,1);displayContrasena(Contrasena[1],40,30,0); 
5D60:  MOVFF  55B,62F
5D64:  MOVLW  14
5D66:  MOVLB  6
5D68:  MOVWF  x30
5D6A:  MOVLW  1E
5D6C:  MOVWF  x31
5D6E:  MOVLW  01
5D70:  MOVWF  x32
5D72:  MOVLB  0
5D74:  CALL   1F34
5D78:  MOVFF  55C,62F
5D7C:  MOVLW  28
5D7E:  MOVLB  6
5D80:  MOVWF  x30
5D82:  MOVLW  1E
5D84:  MOVWF  x31
5D86:  CLRF   x32
5D88:  MOVLB  0
5D8A:  CALL   1F34
....................       displayContrasena(Contrasena[2],60,30,0);displayContrasena(Contrasena[0],80,30,0); 
5D8E:  MOVFF  55D,62F
5D92:  MOVLW  3C
5D94:  MOVLB  6
5D96:  MOVWF  x30
5D98:  MOVLW  1E
5D9A:  MOVWF  x31
5D9C:  CLRF   x32
5D9E:  MOVLB  0
5DA0:  CALL   1F34
5DA4:  MOVFF  55B,62F
5DA8:  MOVLW  50
5DAA:  MOVLB  6
5DAC:  MOVWF  x30
5DAE:  MOVLW  1E
5DB0:  MOVWF  x31
5DB2:  CLRF   x32
5DB4:  MOVLB  0
5DB6:  CALL   1F34
....................       strcpy(Menus.Letra,"Clave"); 
5DBA:  MOVLW  06
5DBC:  MOVWF  FEA
5DBE:  MOVLW  17
5DC0:  MOVWF  FE9
5DC2:  MOVFF  FF2,62D
5DC6:  BCF    FF2.7
5DC8:  MOVLW  00
5DCA:  CALL   0EEE
5DCE:  TBLRD*-
5DD0:  TBLRD*+
5DD2:  MOVF   FF5,W
5DD4:  MOVWF  FEE
5DD6:  IORLW  00
5DD8:  BNZ   5DD0
5DDA:  MOVLB  6
5DDC:  BTFSC  x2D.7
5DDE:  BSF    FF2.7
....................       displayMenu(Menus.Letra,20,0,1,3); 
5DE0:  MOVLW  06
5DE2:  MOVWF  x2E
5DE4:  MOVLW  17
5DE6:  MOVWF  x2D
5DE8:  MOVLW  14
5DEA:  MOVWF  x2F
5DEC:  CLRF   x30
5DEE:  MOVLW  01
5DF0:  MOVWF  x31
5DF2:  MOVLW  03
5DF4:  MOVWF  x32
5DF6:  MOVLB  0
5DF8:  CALL   2044
....................          
....................       if(UP)//Si oprime hacia arriba 
5DFC:  BSF    F92.0
5DFE:  BTFSS  F80.0
5E00:  BRA    5EDC
....................       {  if(Flanco == 0)  
5E02:  MOVLB  4
5E04:  BTFSC  x4C.0
5E06:  BRA    5EDA
....................             {Flanco = 1;delay_ms(30); 
5E08:  BSF    x4C.0
5E0A:  MOVLW  1E
5E0C:  MOVLB  6
5E0E:  MOVWF  x2E
5E10:  MOVLB  0
5E12:  CALL   1DE0
....................             for(i=1;i<=4;i++) 
5E16:  MOVLW  01
5E18:  MOVLB  4
5E1A:  MOVWF  x38
5E1C:  MOVF   x38,W
5E1E:  SUBLW  04
5E20:  BNC   5EDA
....................                { 
....................                   if(unidad==i) 
5E22:  MOVF   x38,W
5E24:  MOVLB  5
5E26:  SUBWF  x0B,W
5E28:  BNZ   5EA0
....................                   {Contrasena[i-1]++; 
5E2A:  MOVLW  01
5E2C:  MOVLB  4
5E2E:  SUBWF  x38,W
5E30:  CLRF   03
5E32:  ADDLW  5B
5E34:  MOVWF  FE9
5E36:  MOVLW  05
5E38:  ADDWFC 03,W
5E3A:  MOVWF  FEA
5E3C:  INCF   FEF,F
....................                   if(Contrasena[i-1]>9) 
5E3E:  MOVLW  01
5E40:  SUBWF  x38,W
5E42:  CLRF   03
5E44:  ADDLW  5B
5E46:  MOVWF  FE9
5E48:  MOVLW  05
5E4A:  ADDWFC 03,W
5E4C:  MOVWF  FEA
5E4E:  BTFSC  FEF.7
5E50:  BRA    5E6A
5E52:  MOVF   FEF,W
5E54:  SUBLW  09
5E56:  BC    5E6A
....................                         {Contrasena[i-1]=0;} 
5E58:  MOVLW  01
5E5A:  SUBWF  x38,W
5E5C:  CLRF   03
5E5E:  ADDLW  5B
5E60:  MOVWF  FE9
5E62:  MOVLW  05
5E64:  ADDWFC 03,W
5E66:  MOVWF  FEA
5E68:  CLRF   FEF
....................                   displayContrasena(Contrasena[i-1],i*20,30,1);} 
5E6A:  MOVLW  01
5E6C:  SUBWF  x38,W
5E6E:  CLRF   03
5E70:  ADDLW  5B
5E72:  MOVWF  FE9
5E74:  MOVLW  05
5E76:  ADDWFC 03,W
5E78:  MOVWF  FEA
5E7A:  MOVFF  FEF,62D
5E7E:  MOVF   x38,W
5E80:  MULLW  14
5E82:  MOVFF  FF3,62E
5E86:  MOVLB  6
5E88:  MOVFF  62D,62F
5E8C:  MOVFF  62E,630
5E90:  MOVLW  1E
5E92:  MOVWF  x31
5E94:  MOVLW  01
5E96:  MOVWF  x32
5E98:  MOVLB  0
5E9A:  CALL   1F34
....................                   else 
5E9E:  BRA    5ED4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
5EA0:  MOVLW  01
5EA2:  MOVLB  4
5EA4:  SUBWF  x38,W
5EA6:  CLRF   03
5EA8:  ADDLW  5B
5EAA:  MOVWF  FE9
5EAC:  MOVLW  05
5EAE:  ADDWFC 03,W
5EB0:  MOVWF  FEA
5EB2:  MOVFF  FEF,62D
5EB6:  MOVF   x38,W
5EB8:  MULLW  14
5EBA:  MOVFF  FF3,62E
5EBE:  MOVLB  6
5EC0:  MOVFF  62D,62F
5EC4:  MOVFF  62E,630
5EC8:  MOVLW  1E
5ECA:  MOVWF  x31
5ECC:  CLRF   x32
5ECE:  MOVLB  0
5ED0:  CALL   1F34
....................                } 
5ED4:  MOVLB  4
5ED6:  INCF   x38,F
5ED8:  BRA    5E1C
....................             } 
....................       } 
....................          else 
5EDA:  BRA    5EE0
....................             {Flanco = 0;} 
5EDC:  MOVLB  4
5EDE:  BCF    x4C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
5EE0:  BSF    F92.1
5EE2:  BTFSS  F80.1
5EE4:  BRA    5FBC
....................       {  if(Flanco2 == 0)  
5EE6:  BTFSC  x4C.2
5EE8:  BRA    5FBA
....................             {Flanco2 = 1;delay_ms(30); 
5EEA:  BSF    x4C.2
5EEC:  MOVLW  1E
5EEE:  MOVLB  6
5EF0:  MOVWF  x2E
5EF2:  MOVLB  0
5EF4:  CALL   1DE0
....................                for(i=1;i<=4;i++) 
5EF8:  MOVLW  01
5EFA:  MOVLB  4
5EFC:  MOVWF  x38
5EFE:  MOVF   x38,W
5F00:  SUBLW  04
5F02:  BNC   5FBA
....................                { 
....................                   if(unidad==i) 
5F04:  MOVF   x38,W
5F06:  MOVLB  5
5F08:  SUBWF  x0B,W
5F0A:  BNZ   5F80
....................                   {Contrasena[i-1]--;  
5F0C:  MOVLW  01
5F0E:  MOVLB  4
5F10:  SUBWF  x38,W
5F12:  CLRF   03
5F14:  ADDLW  5B
5F16:  MOVWF  FE9
5F18:  MOVLW  05
5F1A:  ADDWFC 03,W
5F1C:  MOVWF  FEA
5F1E:  DECF   FEF,F
....................                      if(Contrasena[i-1]<0) 
5F20:  MOVLW  01
5F22:  SUBWF  x38,W
5F24:  CLRF   03
5F26:  ADDLW  5B
5F28:  MOVWF  FE9
5F2A:  MOVLW  05
5F2C:  ADDWFC 03,W
5F2E:  MOVWF  FEA
5F30:  BTFSC  FEF.7
5F32:  BRA    5F36
5F34:  BRA    5F4A
....................                         {Contrasena[i-1]=9;} 
5F36:  MOVLW  01
5F38:  SUBWF  x38,W
5F3A:  CLRF   03
5F3C:  ADDLW  5B
5F3E:  MOVWF  FE9
5F40:  MOVLW  05
5F42:  ADDWFC 03,W
5F44:  MOVWF  FEA
5F46:  MOVLW  09
5F48:  MOVWF  FEF
....................                    displayContrasena(Contrasena[i-1],i*20,30,1);} 
5F4A:  MOVLW  01
5F4C:  SUBWF  x38,W
5F4E:  CLRF   03
5F50:  ADDLW  5B
5F52:  MOVWF  FE9
5F54:  MOVLW  05
5F56:  ADDWFC 03,W
5F58:  MOVWF  FEA
5F5A:  MOVFF  FEF,62D
5F5E:  MOVF   x38,W
5F60:  MULLW  14
5F62:  MOVFF  FF3,62E
5F66:  MOVLB  6
5F68:  MOVFF  62D,62F
5F6C:  MOVFF  62E,630
5F70:  MOVLW  1E
5F72:  MOVWF  x31
5F74:  MOVLW  01
5F76:  MOVWF  x32
5F78:  MOVLB  0
5F7A:  CALL   1F34
....................                   else 
5F7E:  BRA    5FB4
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
5F80:  MOVLW  01
5F82:  MOVLB  4
5F84:  SUBWF  x38,W
5F86:  CLRF   03
5F88:  ADDLW  5B
5F8A:  MOVWF  FE9
5F8C:  MOVLW  05
5F8E:  ADDWFC 03,W
5F90:  MOVWF  FEA
5F92:  MOVFF  FEF,62D
5F96:  MOVF   x38,W
5F98:  MULLW  14
5F9A:  MOVFF  FF3,62E
5F9E:  MOVLB  6
5FA0:  MOVFF  62D,62F
5FA4:  MOVFF  62E,630
5FA8:  MOVLW  1E
5FAA:  MOVWF  x31
5FAC:  CLRF   x32
5FAE:  MOVLB  0
5FB0:  CALL   1F34
....................                }       
5FB4:  MOVLB  4
5FB6:  INCF   x38,F
5FB8:  BRA    5EFE
....................             }      
....................       } 
....................          else 
5FBA:  BRA    5FBE
....................             {Flanco2 = 0;}   
5FBC:  BCF    x4C.2
....................              
....................       if(RIGHT)//Si oprime SET 
5FBE:  BSF    F92.2
5FC0:  BTFSS  F80.2
5FC2:  BRA    6062
....................       {  if(Flanco1 == 0)  
5FC4:  BTFSC  x4C.1
5FC6:  BRA    6060
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
5FC8:  BSF    x4C.1
5FCA:  MOVLW  1E
5FCC:  MOVLB  6
5FCE:  MOVWF  x2E
5FD0:  MOVLB  0
5FD2:  CALL   1DE0
5FD6:  MOVLB  5
5FD8:  INCF   x0B,F
....................                for(i=1;i<=4;i++) 
5FDA:  MOVLW  01
5FDC:  MOVLB  4
5FDE:  MOVWF  x38
5FE0:  MOVF   x38,W
5FE2:  SUBLW  04
5FE4:  BNC   6060
....................                { 
....................                   if(unidad==i) 
5FE6:  MOVF   x38,W
5FE8:  MOVLB  5
5FEA:  SUBWF  x0B,W
5FEC:  BNZ   6026
....................                   {displayContrasena(Contrasena[i-1],i*20,30,1);} 
5FEE:  MOVLW  01
5FF0:  MOVLB  4
5FF2:  SUBWF  x38,W
5FF4:  CLRF   03
5FF6:  ADDLW  5B
5FF8:  MOVWF  FE9
5FFA:  MOVLW  05
5FFC:  ADDWFC 03,W
5FFE:  MOVWF  FEA
6000:  MOVFF  FEF,62D
6004:  MOVF   x38,W
6006:  MULLW  14
6008:  MOVFF  FF3,62E
600C:  MOVLB  6
600E:  MOVFF  62D,62F
6012:  MOVFF  62E,630
6016:  MOVLW  1E
6018:  MOVWF  x31
601A:  MOVLW  01
601C:  MOVWF  x32
601E:  MOVLB  0
6020:  CALL   1F34
....................                   else 
6024:  BRA    605A
....................                   {displayContrasena(Contrasena[i-1],i*20,30,0);} 
6026:  MOVLW  01
6028:  MOVLB  4
602A:  SUBWF  x38,W
602C:  CLRF   03
602E:  ADDLW  5B
6030:  MOVWF  FE9
6032:  MOVLW  05
6034:  ADDWFC 03,W
6036:  MOVWF  FEA
6038:  MOVFF  FEF,62D
603C:  MOVF   x38,W
603E:  MULLW  14
6040:  MOVFF  FF3,62E
6044:  MOVLB  6
6046:  MOVFF  62D,62F
604A:  MOVFF  62E,630
604E:  MOVLW  1E
6050:  MOVWF  x31
6052:  CLRF   x32
6054:  MOVLB  0
6056:  CALL   1F34
....................                } 
605A:  MOVLB  4
605C:  INCF   x38,F
605E:  BRA    5FE0
....................             } 
....................       } 
....................          else 
6060:  BRA    6064
....................             {Flanco1 = 0;}   
6062:  BCF    x4C.1
....................              
....................       if(LEFT)//Si oprime boton de Toma. 
6064:  BSF    F92.3
6066:  BTFSS  F80.3
6068:  BRA    60A6
....................       { 
....................          delay_ms(700); 
606A:  MOVLW  04
606C:  MOVLB  6
606E:  MOVWF  x2D
6070:  MOVLW  AF
6072:  MOVWF  x2E
6074:  MOVLB  0
6076:  CALL   1DE0
607A:  MOVLB  6
607C:  DECFSZ x2D,F
607E:  BRA    6070
....................          if(unidad==1) 
6080:  MOVLB  5
6082:  DECFSZ x0B,W
6084:  BRA    6098
....................          { 
....................             Menu=3;glcd_fillscreen(OFF); 
6086:  MOVLW  03
6088:  MOVWF  x0A
608A:  MOVLB  6
608C:  CLRF   x2E
608E:  MOVLB  0
6090:  CALL   1FEA
....................          } 
....................          else 
6094:  BRA    60A6
6096:  MOVLB  5
....................          { 
....................             Menu=3;glcd_fillscreen(OFF); 
6098:  MOVLW  03
609A:  MOVWF  x0A
609C:  MOVLB  6
609E:  CLRF   x2E
60A0:  MOVLB  0
60A2:  CALL   1FEA
....................          } 
....................       } 
....................              
....................       if(unidad>4) 
60A6:  MOVLB  5
60A8:  MOVF   x0B,W
60AA:  SUBLW  04
60AC:  BC    6162
....................       {Opcion=1;glcd_fillscreen(OFF);unidad=1;n=0; 
60AE:  MOVLW  01
60B0:  MOVWF  x0C
60B2:  MOVLB  6
60B4:  CLRF   x2E
60B6:  MOVLB  0
60B8:  CALL   1FEA
60BC:  MOVLW  01
60BE:  MOVLB  5
60C0:  MOVWF  x0B
60C2:  MOVLB  4
60C4:  BCF    x4E.7
....................          if((Contrasena[0]==Password[0])&&(Contrasena[1]==Password[1])&&(Contrasena[2]==Password[2])&&(Contrasena[3]==Password[3])) 
60C6:  MOVLB  5
60C8:  MOVF   x5F,W
60CA:  SUBWF  x5B,W
60CC:  BNZ   6120
60CE:  MOVF   x60,W
60D0:  SUBWF  x5C,W
60D2:  BNZ   6120
60D4:  MOVF   x61,W
60D6:  SUBWF  x5D,W
60D8:  BNZ   6120
60DA:  MOVF   x62,W
60DC:  SUBWF  x5E,W
60DE:  BNZ   6120
....................          {glcd_imagen(1);glcd_update();Menu=211;delay_ms(1000);glcd_fillScreen(OFF);Password[0]=0;Password[1]=0;Password[2]=0;Password[3]=0;} 
60E0:  MOVLW  01
60E2:  MOVLB  6
60E4:  MOVWF  x2D
60E6:  MOVLB  0
60E8:  CALL   29DE
60EC:  CALL   18B4
60F0:  MOVLW  D3
60F2:  MOVLB  5
60F4:  MOVWF  x0A
60F6:  MOVLW  04
60F8:  MOVLB  6
60FA:  MOVWF  x2D
60FC:  MOVLW  FA
60FE:  MOVWF  x2E
6100:  MOVLB  0
6102:  CALL   1DE0
6106:  MOVLB  6
6108:  DECFSZ x2D,F
610A:  BRA    60FC
610C:  CLRF   x2E
610E:  MOVLB  0
6110:  CALL   1FEA
6114:  MOVLB  5
6116:  CLRF   x5F
6118:  CLRF   x60
611A:  CLRF   x61
611C:  CLRF   x62
....................          else 
611E:  BRA    6162
....................          {glcd_imagen(2);glcd_update();Menu=3;delay_ms(1000);Contrasena[0]=0;Contrasena[1]=0;Contrasena[2]=0;Contrasena[3]=0;glcd_fillScreen(OFF);}   
6120:  MOVLW  02
6122:  MOVLB  6
6124:  MOVWF  x2D
6126:  MOVLB  0
6128:  CALL   29DE
612C:  CALL   18B4
6130:  MOVLW  03
6132:  MOVLB  5
6134:  MOVWF  x0A
6136:  MOVLW  04
6138:  MOVLB  6
613A:  MOVWF  x2D
613C:  MOVLW  FA
613E:  MOVWF  x2E
6140:  MOVLB  0
6142:  CALL   1DE0
6146:  MOVLB  6
6148:  DECFSZ x2D,F
614A:  BRA    613C
614C:  MOVLB  5
614E:  CLRF   x5B
6150:  CLRF   x5C
6152:  CLRF   x5D
6154:  CLRF   x5E
6156:  MOVLB  6
6158:  CLRF   x2E
615A:  MOVLB  0
615C:  CALL   1FEA
6160:  MOVLB  5
....................       } 
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==211){ //Menu de Cambio Clave. 
6162:  MOVF   x0A,W
6164:  SUBLW  D3
6166:  BTFSS  FD8.2
6168:  BRA    6572
....................        
....................       if(n==0) 
616A:  MOVLB  4
616C:  BTFSC  x4E.7
616E:  BRA    61CE
....................       {displayContrasena(Password[0],20,30,1);displayContrasena(Password[1],40,30,0); 
6170:  MOVFF  55F,62F
6174:  MOVLW  14
6176:  MOVLB  6
6178:  MOVWF  x30
617A:  MOVLW  1E
617C:  MOVWF  x31
617E:  MOVLW  01
6180:  MOVWF  x32
6182:  MOVLB  0
6184:  CALL   1F34
6188:  MOVFF  560,62F
618C:  MOVLW  28
618E:  MOVLB  6
6190:  MOVWF  x30
6192:  MOVLW  1E
6194:  MOVWF  x31
6196:  CLRF   x32
6198:  MOVLB  0
619A:  CALL   1F34
....................       displayContrasena(Password[2],60,30,0);displayContrasena(Password[3],80,30,0);n++;} 
619E:  MOVFF  561,62F
61A2:  MOVLW  3C
61A4:  MOVLB  6
61A6:  MOVWF  x30
61A8:  MOVLW  1E
61AA:  MOVWF  x31
61AC:  CLRF   x32
61AE:  MOVLB  0
61B0:  CALL   1F34
61B4:  MOVFF  562,62F
61B8:  MOVLW  50
61BA:  MOVLB  6
61BC:  MOVWF  x30
61BE:  MOVLW  1E
61C0:  MOVWF  x31
61C2:  CLRF   x32
61C4:  MOVLB  0
61C6:  CALL   1F34
61CA:  MOVLB  4
61CC:  BTG    x4E.7
....................       strcpy(Menus.Letra,"Clave Nueva"); 
61CE:  MOVLW  06
61D0:  MOVWF  FEA
61D2:  MOVLW  17
61D4:  MOVWF  FE9
61D6:  MOVFF  FF2,62D
61DA:  BCF    FF2.7
61DC:  MOVLW  00
61DE:  MOVLB  0
61E0:  CALL   1064
61E4:  TBLRD*-
61E6:  TBLRD*+
61E8:  MOVF   FF5,W
61EA:  MOVWF  FEE
61EC:  IORLW  00
61EE:  BNZ   61E6
61F0:  MOVLB  6
61F2:  BTFSC  x2D.7
61F4:  BSF    FF2.7
....................       displayMenu(Menus.Letra,0,0,1,2); 
61F6:  MOVLW  06
61F8:  MOVWF  x2E
61FA:  MOVLW  17
61FC:  MOVWF  x2D
61FE:  CLRF   x2F
6200:  CLRF   x30
6202:  MOVLW  01
6204:  MOVWF  x31
6206:  MOVLW  02
6208:  MOVWF  x32
620A:  MOVLB  0
620C:  CALL   2044
....................          
....................       if(UP)//Si oprime hacia arriba 
6210:  BSF    F92.0
6212:  BTFSS  F80.0
6214:  BRA    62F0
....................       {  if(Flanco == 0)  
6216:  MOVLB  4
6218:  BTFSC  x4C.0
621A:  BRA    62EE
....................             {Flanco = 1;delay_ms(30); 
621C:  BSF    x4C.0
621E:  MOVLW  1E
6220:  MOVLB  6
6222:  MOVWF  x2E
6224:  MOVLB  0
6226:  CALL   1DE0
....................             for(i=1;i<=4;i++) 
622A:  MOVLW  01
622C:  MOVLB  4
622E:  MOVWF  x38
6230:  MOVF   x38,W
6232:  SUBLW  04
6234:  BNC   62EE
....................                { 
....................                   if(unidad==i) 
6236:  MOVF   x38,W
6238:  MOVLB  5
623A:  SUBWF  x0B,W
623C:  BNZ   62B4
....................                   {Password[i-1]++; 
623E:  MOVLW  01
6240:  MOVLB  4
6242:  SUBWF  x38,W
6244:  CLRF   03
6246:  ADDLW  5F
6248:  MOVWF  FE9
624A:  MOVLW  05
624C:  ADDWFC 03,W
624E:  MOVWF  FEA
6250:  INCF   FEF,F
....................                   if(Password[i-1]>9) 
6252:  MOVLW  01
6254:  SUBWF  x38,W
6256:  CLRF   03
6258:  ADDLW  5F
625A:  MOVWF  FE9
625C:  MOVLW  05
625E:  ADDWFC 03,W
6260:  MOVWF  FEA
6262:  BTFSC  FEF.7
6264:  BRA    627E
6266:  MOVF   FEF,W
6268:  SUBLW  09
626A:  BC    627E
....................                         {Password[i-1]=0;} 
626C:  MOVLW  01
626E:  SUBWF  x38,W
6270:  CLRF   03
6272:  ADDLW  5F
6274:  MOVWF  FE9
6276:  MOVLW  05
6278:  ADDWFC 03,W
627A:  MOVWF  FEA
627C:  CLRF   FEF
....................                   displayContrasena(Password[i-1],i*20,30,1);} 
627E:  MOVLW  01
6280:  SUBWF  x38,W
6282:  CLRF   03
6284:  ADDLW  5F
6286:  MOVWF  FE9
6288:  MOVLW  05
628A:  ADDWFC 03,W
628C:  MOVWF  FEA
628E:  MOVFF  FEF,62D
6292:  MOVF   x38,W
6294:  MULLW  14
6296:  MOVFF  FF3,62E
629A:  MOVLB  6
629C:  MOVFF  62D,62F
62A0:  MOVFF  62E,630
62A4:  MOVLW  1E
62A6:  MOVWF  x31
62A8:  MOVLW  01
62AA:  MOVWF  x32
62AC:  MOVLB  0
62AE:  CALL   1F34
....................                   else 
62B2:  BRA    62E8
....................                   {displayContrasena(Password[i-1],i*20,30,0);} 
62B4:  MOVLW  01
62B6:  MOVLB  4
62B8:  SUBWF  x38,W
62BA:  CLRF   03
62BC:  ADDLW  5F
62BE:  MOVWF  FE9
62C0:  MOVLW  05
62C2:  ADDWFC 03,W
62C4:  MOVWF  FEA
62C6:  MOVFF  FEF,62D
62CA:  MOVF   x38,W
62CC:  MULLW  14
62CE:  MOVFF  FF3,62E
62D2:  MOVLB  6
62D4:  MOVFF  62D,62F
62D8:  MOVFF  62E,630
62DC:  MOVLW  1E
62DE:  MOVWF  x31
62E0:  CLRF   x32
62E2:  MOVLB  0
62E4:  CALL   1F34
....................                } 
62E8:  MOVLB  4
62EA:  INCF   x38,F
62EC:  BRA    6230
....................             } 
....................       } 
....................          else 
62EE:  BRA    62F4
....................             {Flanco = 0;} 
62F0:  MOVLB  4
62F2:  BCF    x4C.0
....................              
....................       if(DOWN)//Si oprime hacia abajo 
62F4:  BSF    F92.1
62F6:  BTFSS  F80.1
62F8:  BRA    63D0
....................       {  if(Flanco2 == 0)  
62FA:  BTFSC  x4C.2
62FC:  BRA    63CE
....................             {Flanco2 = 1;delay_ms(30); 
62FE:  BSF    x4C.2
6300:  MOVLW  1E
6302:  MOVLB  6
6304:  MOVWF  x2E
6306:  MOVLB  0
6308:  CALL   1DE0
....................                for(i=1;i<=4;i++) 
630C:  MOVLW  01
630E:  MOVLB  4
6310:  MOVWF  x38
6312:  MOVF   x38,W
6314:  SUBLW  04
6316:  BNC   63CE
....................                { 
....................                   if(unidad==i) 
6318:  MOVF   x38,W
631A:  MOVLB  5
631C:  SUBWF  x0B,W
631E:  BNZ   6394
....................                   {Password[i-1]--;  
6320:  MOVLW  01
6322:  MOVLB  4
6324:  SUBWF  x38,W
6326:  CLRF   03
6328:  ADDLW  5F
632A:  MOVWF  FE9
632C:  MOVLW  05
632E:  ADDWFC 03,W
6330:  MOVWF  FEA
6332:  DECF   FEF,F
....................                      if(Password[i-1]<0) 
6334:  MOVLW  01
6336:  SUBWF  x38,W
6338:  CLRF   03
633A:  ADDLW  5F
633C:  MOVWF  FE9
633E:  MOVLW  05
6340:  ADDWFC 03,W
6342:  MOVWF  FEA
6344:  BTFSC  FEF.7
6346:  BRA    634A
6348:  BRA    635E
....................                         {Password[i-1]=9;} 
634A:  MOVLW  01
634C:  SUBWF  x38,W
634E:  CLRF   03
6350:  ADDLW  5F
6352:  MOVWF  FE9
6354:  MOVLW  05
6356:  ADDWFC 03,W
6358:  MOVWF  FEA
635A:  MOVLW  09
635C:  MOVWF  FEF
....................                    displayContrasena(Password[i-1],i*20,30,1);} 
635E:  MOVLW  01
6360:  SUBWF  x38,W
6362:  CLRF   03
6364:  ADDLW  5F
6366:  MOVWF  FE9
6368:  MOVLW  05
636A:  ADDWFC 03,W
636C:  MOVWF  FEA
636E:  MOVFF  FEF,62D
6372:  MOVF   x38,W
6374:  MULLW  14
6376:  MOVFF  FF3,62E
637A:  MOVLB  6
637C:  MOVFF  62D,62F
6380:  MOVFF  62E,630
6384:  MOVLW  1E
6386:  MOVWF  x31
6388:  MOVLW  01
638A:  MOVWF  x32
638C:  MOVLB  0
638E:  CALL   1F34
....................                   else 
6392:  BRA    63C8
....................                   {displayContrasena(Password[i-1],i*20,30,0);} 
6394:  MOVLW  01
6396:  MOVLB  4
6398:  SUBWF  x38,W
639A:  CLRF   03
639C:  ADDLW  5F
639E:  MOVWF  FE9
63A0:  MOVLW  05
63A2:  ADDWFC 03,W
63A4:  MOVWF  FEA
63A6:  MOVFF  FEF,62D
63AA:  MOVF   x38,W
63AC:  MULLW  14
63AE:  MOVFF  FF3,62E
63B2:  MOVLB  6
63B4:  MOVFF  62D,62F
63B8:  MOVFF  62E,630
63BC:  MOVLW  1E
63BE:  MOVWF  x31
63C0:  CLRF   x32
63C2:  MOVLB  0
63C4:  CALL   1F34
....................                }       
63C8:  MOVLB  4
63CA:  INCF   x38,F
63CC:  BRA    6312
....................             }      
....................       } 
....................          else 
63CE:  BRA    63D2
....................             {Flanco2 = 0;}   
63D0:  BCF    x4C.2
....................              
....................       if(RIGHT)//Si oprime SET 
63D2:  BSF    F92.2
63D4:  BTFSS  F80.2
63D6:  BRA    6476
....................       {  if(Flanco1 == 0)  
63D8:  BTFSC  x4C.1
63DA:  BRA    6474
....................             {Flanco1 = 1;delay_ms(30);unidad++; 
63DC:  BSF    x4C.1
63DE:  MOVLW  1E
63E0:  MOVLB  6
63E2:  MOVWF  x2E
63E4:  MOVLB  0
63E6:  CALL   1DE0
63EA:  MOVLB  5
63EC:  INCF   x0B,F
....................                for(i=1;i<=4;i++) 
63EE:  MOVLW  01
63F0:  MOVLB  4
63F2:  MOVWF  x38
63F4:  MOVF   x38,W
63F6:  SUBLW  04
63F8:  BNC   6474
....................                { 
....................                   if(unidad==i) 
63FA:  MOVF   x38,W
63FC:  MOVLB  5
63FE:  SUBWF  x0B,W
6400:  BNZ   643A
....................                   {displayContrasena(Password[i-1],i*20,30,1);} 
6402:  MOVLW  01
6404:  MOVLB  4
6406:  SUBWF  x38,W
6408:  CLRF   03
640A:  ADDLW  5F
640C:  MOVWF  FE9
640E:  MOVLW  05
6410:  ADDWFC 03,W
6412:  MOVWF  FEA
6414:  MOVFF  FEF,62D
6418:  MOVF   x38,W
641A:  MULLW  14
641C:  MOVFF  FF3,62E
6420:  MOVLB  6
6422:  MOVFF  62D,62F
6426:  MOVFF  62E,630
642A:  MOVLW  1E
642C:  MOVWF  x31
642E:  MOVLW  01
6430:  MOVWF  x32
6432:  MOVLB  0
6434:  CALL   1F34
....................                   else 
6438:  BRA    646E
....................                   {displayContrasena(Password[i-1],i*20,30,0);} 
643A:  MOVLW  01
643C:  MOVLB  4
643E:  SUBWF  x38,W
6440:  CLRF   03
6442:  ADDLW  5F
6444:  MOVWF  FE9
6446:  MOVLW  05
6448:  ADDWFC 03,W
644A:  MOVWF  FEA
644C:  MOVFF  FEF,62D
6450:  MOVF   x38,W
6452:  MULLW  14
6454:  MOVFF  FF3,62E
6458:  MOVLB  6
645A:  MOVFF  62D,62F
645E:  MOVFF  62E,630
6462:  MOVLW  1E
6464:  MOVWF  x31
6466:  CLRF   x32
6468:  MOVLB  0
646A:  CALL   1F34
....................                } 
646E:  MOVLB  4
6470:  INCF   x38,F
6472:  BRA    63F4
....................             } 
....................       } 
....................          else 
6474:  BRA    6478
....................             {Flanco1 = 0;}   
6476:  BCF    x4C.1
....................       if(unidad>4) 
6478:  MOVLB  5
647A:  MOVF   x0B,W
647C:  SUBLW  04
647E:  BC    6572
....................       {Opcion=1;glcd_fillscreen(OFF);unidad=1;n=0; 
6480:  MOVLW  01
6482:  MOVWF  x0C
6484:  MOVLB  6
6486:  CLRF   x2E
6488:  MOVLB  0
648A:  CALL   1FEA
648E:  MOVLW  01
6490:  MOVLB  5
6492:  MOVWF  x0B
6494:  MOVLB  4
6496:  BCF    x4E.7
....................       write_eeprom(0,Password[0]);write_eeprom(1,Password[1]);write_eeprom(2,Password[2]);write_eeprom(3,Password[3]); 
6498:  CLRF   FA9
649A:  MOVFF  55F,FA8
649E:  BCF    FA6.6
64A0:  BCF    FA6.7
64A2:  BSF    FA6.2
64A4:  MOVF   FF2,W
64A6:  MOVWF  00
64A8:  BCF    FF2.7
64AA:  MOVLB  F
64AC:  MOVLW  55
64AE:  MOVWF  FA7
64B0:  MOVLW  AA
64B2:  MOVWF  FA7
64B4:  BSF    FA6.1
64B6:  BTFSC  FA6.1
64B8:  BRA    64B6
64BA:  BCF    FA6.2
64BC:  MOVF   00,W
64BE:  IORWF  FF2,F
64C0:  MOVLW  01
64C2:  MOVWF  FA9
64C4:  MOVFF  560,FA8
64C8:  BCF    FA6.6
64CA:  BCF    FA6.7
64CC:  BSF    FA6.2
64CE:  MOVF   FF2,W
64D0:  MOVWF  00
64D2:  BCF    FF2.7
64D4:  MOVLW  55
64D6:  MOVWF  FA7
64D8:  MOVLW  AA
64DA:  MOVWF  FA7
64DC:  BSF    FA6.1
64DE:  BTFSC  FA6.1
64E0:  BRA    64DE
64E2:  BCF    FA6.2
64E4:  MOVF   00,W
64E6:  IORWF  FF2,F
64E8:  MOVLW  02
64EA:  MOVWF  FA9
64EC:  MOVFF  561,FA8
64F0:  BCF    FA6.6
64F2:  BCF    FA6.7
64F4:  BSF    FA6.2
64F6:  MOVF   FF2,W
64F8:  MOVWF  00
64FA:  BCF    FF2.7
64FC:  MOVLW  55
64FE:  MOVWF  FA7
6500:  MOVLW  AA
6502:  MOVWF  FA7
6504:  BSF    FA6.1
6506:  BTFSC  FA6.1
6508:  BRA    6506
650A:  BCF    FA6.2
650C:  MOVF   00,W
650E:  IORWF  FF2,F
6510:  MOVLW  03
6512:  MOVWF  FA9
6514:  MOVFF  562,FA8
6518:  BCF    FA6.6
651A:  BCF    FA6.7
651C:  BSF    FA6.2
651E:  MOVF   FF2,W
6520:  MOVWF  00
6522:  BCF    FF2.7
6524:  MOVLW  55
6526:  MOVWF  FA7
6528:  MOVLW  AA
652A:  MOVWF  FA7
652C:  BSF    FA6.1
652E:  BTFSC  FA6.1
6530:  BRA    652E
6532:  BCF    FA6.2
6534:  MOVF   00,W
6536:  IORWF  FF2,F
....................        glcd_imagen(1);glcd_update();Menu=211;delay_ms(1000);glcd_fillScreen(OFF);Menu=3; 
6538:  MOVLW  01
653A:  MOVLB  6
653C:  MOVWF  x2D
653E:  MOVLB  0
6540:  CALL   29DE
6544:  CALL   18B4
6548:  MOVLW  D3
654A:  MOVLB  5
654C:  MOVWF  x0A
654E:  MOVLW  04
6550:  MOVLB  6
6552:  MOVWF  x2D
6554:  MOVLW  FA
6556:  MOVWF  x2E
6558:  MOVLB  0
655A:  CALL   1DE0
655E:  MOVLB  6
6560:  DECFSZ x2D,F
6562:  BRA    6554
6564:  CLRF   x2E
6566:  MOVLB  0
6568:  CALL   1FEA
656C:  MOVLW  03
656E:  MOVLB  5
6570:  MOVWF  x0A
....................       } 
....................      
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==6){ //Menu de Mantenimiento. 
6572:  MOVF   x0A,W
6574:  SUBLW  06
6576:  BTFSS  FD8.2
6578:  BRA    66F2
....................        
....................          glcd_text57(0, 29, Vida_Filtro, 1, ON); 
657A:  MOVLB  6
657C:  CLRF   x44
657E:  MOVLW  1D
6580:  MOVWF  x45
6582:  MOVLW  04
6584:  MOVWF  x47
6586:  MOVLW  E4
6588:  MOVWF  x46
658A:  MOVLW  01
658C:  MOVWF  x48
658E:  MOVWF  x49
6590:  MOVLB  0
6592:  CALL   1C28
....................          displayTiempo(Ttrabajo[3],60,28,0,1);displayTiempo(Ttrabajo[2],67,28,0,1);displayTiempo(Ttrabajo[1],74,28,0,1);displayTiempo(Ttrabajo[0],82,28,0,1); 
6596:  MOVFF  55A,62D
659A:  MOVLW  3C
659C:  MOVLB  6
659E:  MOVWF  x2E
65A0:  MOVLW  1C
65A2:  MOVWF  x2F
65A4:  CLRF   x30
65A6:  MOVLW  01
65A8:  MOVWF  x31
65AA:  MOVLB  0
65AC:  CALL   2110
65B0:  MOVFF  559,62D
65B4:  MOVLW  43
65B6:  MOVLB  6
65B8:  MOVWF  x2E
65BA:  MOVLW  1C
65BC:  MOVWF  x2F
65BE:  CLRF   x30
65C0:  MOVLW  01
65C2:  MOVWF  x31
65C4:  MOVLB  0
65C6:  CALL   2110
65CA:  MOVFF  558,62D
65CE:  MOVLW  4A
65D0:  MOVLB  6
65D2:  MOVWF  x2E
65D4:  MOVLW  1C
65D6:  MOVWF  x2F
65D8:  CLRF   x30
65DA:  MOVLW  01
65DC:  MOVWF  x31
65DE:  MOVLB  0
65E0:  CALL   2110
65E4:  MOVFF  557,62D
65E8:  MOVLW  52
65EA:  MOVLB  6
65EC:  MOVWF  x2E
65EE:  MOVLW  1C
65F0:  MOVWF  x2F
65F2:  CLRF   x30
65F4:  MOVLW  01
65F6:  MOVWF  x31
65F8:  MOVLB  0
65FA:  CALL   2110
....................          LuzBlanca=5; 
65FE:  MOVLW  05
6600:  MOVLB  5
6602:  MOVWF  x19
....................           
....................             if(DOWN) // Reinicia Tiempo de Trabajo 
6604:  BSF    F92.1
6606:  BTFSS  F80.1
6608:  BRA    66D8
....................             { 
....................                delay_ms(2000); 
660A:  MOVLW  08
660C:  MOVLB  6
660E:  MOVWF  x2D
6610:  MOVLW  FA
6612:  MOVWF  x2E
6614:  MOVLB  0
6616:  CALL   1DE0
661A:  MOVLB  6
661C:  DECFSZ x2D,F
661E:  BRA    6610
....................                   write_eeprom(16,0);write_eeprom(17,0);write_eeprom(18,0);write_eeprom(19,0); 
6620:  MOVLW  10
6622:  MOVWF  FA9
6624:  CLRF   FA8
6626:  BCF    FA6.6
6628:  BCF    FA6.7
662A:  BSF    FA6.2
662C:  MOVF   FF2,W
662E:  MOVWF  00
6630:  BCF    FF2.7
6632:  MOVLB  F
6634:  MOVLW  55
6636:  MOVWF  FA7
6638:  MOVLW  AA
663A:  MOVWF  FA7
663C:  BSF    FA6.1
663E:  BTFSC  FA6.1
6640:  BRA    663E
6642:  BCF    FA6.2
6644:  MOVF   00,W
6646:  IORWF  FF2,F
6648:  MOVLW  11
664A:  MOVWF  FA9
664C:  CLRF   FA8
664E:  BCF    FA6.6
6650:  BCF    FA6.7
6652:  BSF    FA6.2
6654:  MOVF   FF2,W
6656:  MOVWF  00
6658:  BCF    FF2.7
665A:  MOVLW  55
665C:  MOVWF  FA7
665E:  MOVLW  AA
6660:  MOVWF  FA7
6662:  BSF    FA6.1
6664:  BTFSC  FA6.1
6666:  BRA    6664
6668:  BCF    FA6.2
666A:  MOVF   00,W
666C:  IORWF  FF2,F
666E:  MOVLW  12
6670:  MOVWF  FA9
6672:  CLRF   FA8
6674:  BCF    FA6.6
6676:  BCF    FA6.7
6678:  BSF    FA6.2
667A:  MOVF   FF2,W
667C:  MOVWF  00
667E:  BCF    FF2.7
6680:  MOVLW  55
6682:  MOVWF  FA7
6684:  MOVLW  AA
6686:  MOVWF  FA7
6688:  BSF    FA6.1
668A:  BTFSC  FA6.1
668C:  BRA    668A
668E:  BCF    FA6.2
6690:  MOVF   00,W
6692:  IORWF  FF2,F
6694:  MOVLW  13
6696:  MOVWF  FA9
6698:  CLRF   FA8
669A:  BCF    FA6.6
669C:  BCF    FA6.7
669E:  BSF    FA6.2
66A0:  MOVF   FF2,W
66A2:  MOVWF  00
66A4:  BCF    FF2.7
66A6:  MOVLW  55
66A8:  MOVWF  FA7
66AA:  MOVLW  AA
66AC:  MOVWF  FA7
66AE:  BSF    FA6.1
66B0:  BTFSC  FA6.1
66B2:  BRA    66B0
66B4:  BCF    FA6.2
66B6:  MOVF   00,W
66B8:  IORWF  FF2,F
....................                   Ttrabajo[3]=0;Ttrabajo[2]=0;Ttrabajo[1]=0;Ttrabajo[0]=0; 
66BA:  MOVLB  5
66BC:  CLRF   x5A
66BE:  CLRF   x59
66C0:  CLRF   x58
66C2:  CLRF   x57
....................                   Menu=3;glcd_fillscreen(OFF);LuzBlanca=10; 
66C4:  MOVLW  03
66C6:  MOVWF  x0A
66C8:  MOVLB  6
66CA:  CLRF   x2E
66CC:  MOVLB  0
66CE:  CALL   1FEA
66D2:  MOVLW  0A
66D4:  MOVLB  5
66D6:  MOVWF  x19
....................             } 
....................              
....................             if(LEFT) 
66D8:  BSF    F92.3
66DA:  BTFSS  F80.3
66DC:  BRA    66F2
....................             { 
....................                Menu=3;glcd_fillscreen(OFF);LuzBlanca=10; 
66DE:  MOVLW  03
66E0:  MOVWF  x0A
66E2:  MOVLB  6
66E4:  CLRF   x2E
66E6:  MOVLB  0
66E8:  CALL   1FEA
66EC:  MOVLW  0A
66EE:  MOVLB  5
66F0:  MOVWF  x19
....................             } 
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................  
.................... //_-------------------------------------------------------------------------------------------------------------------------------------------------------- 
....................       if(Menu==200){ //Menu de Inicio.   
66F2:  MOVF   x0A,W
66F4:  SUBLW  C8
66F6:  BTFSS  FD8.2
66F8:  BRA    6852
....................          Display_on; 
66FA:  BSF    F8D.0
66FC:  BCF    F96.0
....................          glcd_init(ON);             //Inicializa la glcd 
66FE:  MOVLW  01
6700:  MOVLB  6
6702:  MOVWF  x2D
6704:  MOVLB  0
6706:  CALL   2F3C
....................          glcd_fillScreen(OFF);      //Limpia la pantalla 
670A:  MOVLB  6
670C:  CLRF   x2E
670E:  MOVLB  0
6710:  CALL   1FEA
....................          glcd_text57(0, 0, JP, 2, ON);glcd_text57(5, 20, Cabina, 1, ON);glcd_text57(10, 40, Clase, 2, ON);              
6714:  MOVLB  6
6716:  CLRF   x44
6718:  CLRF   x45
671A:  MOVLW  04
671C:  MOVWF  x47
671E:  MOVLW  4F
6720:  MOVWF  x46
6722:  MOVLW  02
6724:  MOVWF  x48
6726:  MOVLW  01
6728:  MOVWF  x49
672A:  MOVLB  0
672C:  CALL   1C28
6730:  MOVLW  05
6732:  MOVLB  6
6734:  MOVWF  x44
6736:  MOVLW  14
6738:  MOVWF  x45
673A:  MOVLW  04
673C:  MOVWF  x47
673E:  MOVLW  5B
6740:  MOVWF  x46
6742:  MOVLW  01
6744:  MOVWF  x48
6746:  MOVWF  x49
6748:  MOVLB  0
674A:  CALL   1C28
674E:  MOVLW  0A
6750:  MOVLB  6
6752:  MOVWF  x44
6754:  MOVLW  28
6756:  MOVWF  x45
6758:  MOVLW  04
675A:  MOVWF  x47
675C:  MOVLW  76
675E:  MOVWF  x46
6760:  MOVLW  02
6762:  MOVWF  x48
6764:  MOVLW  01
6766:  MOVWF  x49
6768:  MOVLB  0
676A:  CALL   1C28
....................          glcd_update();    
676E:  CALL   18B4
....................          delay_ms(3000); 
6772:  MOVLW  0C
6774:  MOVLB  6
6776:  MOVWF  x2D
6778:  MOVLW  FA
677A:  MOVWF  x2E
677C:  MOVLB  0
677E:  CALL   1DE0
6782:  MOVLB  6
6784:  DECFSZ x2D,F
6786:  BRA    6778
....................                      
....................          glcd_fillScreen(OFF);      //Limpia la pantalla 
6788:  CLRF   x2E
678A:  MOVLB  0
678C:  CALL   1FEA
....................          displayContrasena(Contrasena[0],20,30,1);displayContrasena(Contrasena[1],40,30,0); 
6790:  MOVFF  55B,62F
6794:  MOVLW  14
6796:  MOVLB  6
6798:  MOVWF  x30
679A:  MOVLW  1E
679C:  MOVWF  x31
679E:  MOVLW  01
67A0:  MOVWF  x32
67A2:  MOVLB  0
67A4:  CALL   1F34
67A8:  MOVFF  55C,62F
67AC:  MOVLW  28
67AE:  MOVLB  6
67B0:  MOVWF  x30
67B2:  MOVLW  1E
67B4:  MOVWF  x31
67B6:  CLRF   x32
67B8:  MOVLB  0
67BA:  CALL   1F34
....................          displayContrasena(Contrasena[2],60,30,0);displayContrasena(Contrasena[0],80,30,0); 
67BE:  MOVFF  55D,62F
67C2:  MOVLW  3C
67C4:  MOVLB  6
67C6:  MOVWF  x30
67C8:  MOVLW  1E
67CA:  MOVWF  x31
67CC:  CLRF   x32
67CE:  MOVLB  0
67D0:  CALL   1F34
67D4:  MOVFF  55B,62F
67D8:  MOVLW  50
67DA:  MOVLB  6
67DC:  MOVWF  x30
67DE:  MOVLW  1E
67E0:  MOVWF  x31
67E2:  CLRF   x32
67E4:  MOVLB  0
67E6:  CALL   1F34
....................          glcd_rect(0, 0, 127, 25, YES, ON);strcpy(Menus.Letra,"Clave");glcd_text57(25, 1, Menus.Letra, 3, OFF);    
67EA:  MOVLB  6
67EC:  CLRF   x44
67EE:  CLRF   x45
67F0:  MOVLW  7F
67F2:  MOVWF  x46
67F4:  MOVLW  19
67F6:  MOVWF  x47
67F8:  MOVLW  01
67FA:  MOVWF  x48
67FC:  MOVWF  x49
67FE:  MOVLB  0
6800:  CALL   1B66
6804:  MOVLW  06
6806:  MOVWF  FEA
6808:  MOVLW  17
680A:  MOVWF  FE9
680C:  MOVFF  FF2,62D
6810:  BCF    FF2.7
6812:  MOVLW  00
6814:  CALL   0EEE
6818:  TBLRD*-
681A:  TBLRD*+
681C:  MOVF   FF5,W
681E:  MOVWF  FEE
6820:  IORLW  00
6822:  BNZ   681A
6824:  MOVLB  6
6826:  BTFSC  x2D.7
6828:  BSF    FF2.7
682A:  MOVLW  19
682C:  MOVWF  x44
682E:  MOVLW  01
6830:  MOVWF  x45
6832:  MOVLW  06
6834:  MOVWF  x47
6836:  MOVLW  17
6838:  MOVWF  x46
683A:  MOVLW  03
683C:  MOVWF  x48
683E:  CLRF   x49
6840:  MOVLB  0
6842:  CALL   1C28
....................          Menu=0; 
6846:  MOVLB  5
6848:  CLRF   x0A
....................       Envio_Esclavos(); 
684A:  MOVLB  0
684C:  CALL   1838
6850:  MOVLB  5
....................     } 
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------        
....................  
....................    if(tiemporeset>=60) 
6852:  MOVF   x12,W
6854:  SUBLW  3B
6856:  BC    6868
....................    { 
....................       glcd_init(ON); 
6858:  MOVLW  01
685A:  MOVLB  6
685C:  MOVWF  x2D
685E:  MOVLB  0
6860:  CALL   2F3C
....................       tiemporeset=0; 
6864:  MOVLB  5
6866:  CLRF   x12
....................    }  
.................... } 
6868:  GOTO   3B72
....................  
.................... } 
....................  
....................  
686C:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
